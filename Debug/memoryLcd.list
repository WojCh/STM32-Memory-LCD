
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001617c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00028318  08016330  08016330  00026330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803e648  0803e648  000504fc  2**0
                  CONTENTS
  4 .ARM          00000008  0803e648  0803e648  0004e648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803e650  0803e650  000504fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803e650  0803e650  0004e650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803e654  0803e654  0004e654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004fc  20000000  0803e658  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000504fc  2**0
                  CONTENTS
 10 .bss          00003734  20000500  20000500  00050500  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20003c34  20003c34  00050500  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000504fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a48  00000000  00000000  0005052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b51  00000000  00000000  00071f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  00077ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001750  00000000  00000000  00079470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002adfa  00000000  00000000  0007abc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027250  00000000  00000000  000a59ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7062  00000000  00000000  000ccc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b3c6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000089f4  00000000  00000000  001b3cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001bc6b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001bc77c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000500 	.word	0x20000500
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08016314 	.word	0x08016314

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000504 	.word	0x20000504
 80001ec:	08016314 	.word	0x08016314

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b9aa 	b.w	8001028 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f83c 	bl	8000d58 <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__aeabi_d2lz>:
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	f7ff ff0b 	bl	8000b10 <__aeabi_dcmplt>
 8000cfa:	b928      	cbnz	r0, 8000d08 <__aeabi_d2lz+0x1c>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	4629      	mov	r1, r5
 8000d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d04:	f000 b80a 	b.w	8000d1c <__aeabi_d2ulz>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0e:	f000 f805 	bl	8000d1c <__aeabi_d2ulz>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	bd38      	pop	{r3, r4, r5, pc}
 8000d1a:	bf00      	nop

08000d1c <__aeabi_d2ulz>:
 8000d1c:	b5d0      	push	{r4, r6, r7, lr}
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__aeabi_d2ulz+0x34>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	4606      	mov	r6, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	f7ff fc81 	bl	800062c <__aeabi_dmul>
 8000d2a:	f7ff ff57 	bl	8000bdc <__aeabi_d2uiz>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fc02 	bl	8000538 <__aeabi_ui2d>
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <__aeabi_d2ulz+0x38>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f7ff fc78 	bl	800062c <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4630      	mov	r0, r6
 8000d42:	4639      	mov	r1, r7
 8000d44:	f7ff faba 	bl	80002bc <__aeabi_dsub>
 8000d48:	f7ff ff48 	bl	8000bdc <__aeabi_d2uiz>
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d50:	3df00000 	.word	0x3df00000
 8000d54:	41f00000 	.word	0x41f00000

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468e      	mov	lr, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14d      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4694      	mov	ip, r2
 8000d6a:	d969      	bls.n	8000e40 <__udivmoddi4+0xe8>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b152      	cbz	r2, 8000d88 <__udivmoddi4+0x30>
 8000d72:	fa01 f302 	lsl.w	r3, r1, r2
 8000d76:	f1c2 0120 	rsb	r1, r2, #32
 8000d7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d82:	ea41 0e03 	orr.w	lr, r1, r3
 8000d86:	4094      	lsls	r4, r2
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	0c21      	lsrs	r1, r4, #16
 8000d8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d92:	fa1f f78c 	uxth.w	r7, ip
 8000d96:	fb08 e316 	mls	r3, r8, r6, lr
 8000d9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9e:	fb06 f107 	mul.w	r1, r6, r7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dae:	f080 811f 	bcs.w	8000ff0 <__udivmoddi4+0x298>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 811c 	bls.w	8000ff0 <__udivmoddi4+0x298>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb00 f707 	mul.w	r7, r0, r7
 8000dd0:	42a7      	cmp	r7, r4
 8000dd2:	d90a      	bls.n	8000dea <__udivmoddi4+0x92>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ddc:	f080 810a 	bcs.w	8000ff4 <__udivmoddi4+0x29c>
 8000de0:	42a7      	cmp	r7, r4
 8000de2:	f240 8107 	bls.w	8000ff4 <__udivmoddi4+0x29c>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dee:	1be4      	subs	r4, r4, r7
 8000df0:	2600      	movs	r6, #0
 8000df2:	b11d      	cbz	r5, 8000dfc <__udivmoddi4+0xa4>
 8000df4:	40d4      	lsrs	r4, r2
 8000df6:	2300      	movs	r3, #0
 8000df8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0xc2>
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	f000 80ef 	beq.w	8000fea <__udivmoddi4+0x292>
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e12:	4630      	mov	r0, r6
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	fab3 f683 	clz	r6, r3
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d14a      	bne.n	8000eb8 <__udivmoddi4+0x160>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xd4>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80f9 	bhi.w	800101e <__udivmoddi4+0x2c6>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	469e      	mov	lr, r3
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e0      	beq.n	8000dfc <__udivmoddi4+0xa4>
 8000e3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3e:	e7dd      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000e40:	b902      	cbnz	r2, 8000e44 <__udivmoddi4+0xec>
 8000e42:	deff      	udf	#255	; 0xff
 8000e44:	fab2 f282 	clz	r2, r2
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f040 8092 	bne.w	8000f72 <__udivmoddi4+0x21a>
 8000e4e:	eba1 010c 	sub.w	r1, r1, ip
 8000e52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e56:	fa1f fe8c 	uxth.w	lr, ip
 8000e5a:	2601      	movs	r6, #1
 8000e5c:	0c20      	lsrs	r0, r4, #16
 8000e5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e62:	fb07 1113 	mls	r1, r7, r3, r1
 8000e66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6a:	fb0e f003 	mul.w	r0, lr, r3
 8000e6e:	4288      	cmp	r0, r1
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x12c>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x12a>
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	f200 80cb 	bhi.w	8001018 <__udivmoddi4+0x2c0>
 8000e82:	4643      	mov	r3, r8
 8000e84:	1a09      	subs	r1, r1, r0
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e94:	fb0e fe00 	mul.w	lr, lr, r0
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x156>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea4:	d202      	bcs.n	8000eac <__udivmoddi4+0x154>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	f200 80bb 	bhi.w	8001022 <__udivmoddi4+0x2ca>
 8000eac:	4608      	mov	r0, r1
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb6:	e79c      	b.n	8000df2 <__udivmoddi4+0x9a>
 8000eb8:	f1c6 0720 	rsb	r7, r6, #32
 8000ebc:	40b3      	lsls	r3, r6
 8000ebe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	40f9      	lsrs	r1, r7
 8000ed2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ede:	0c20      	lsrs	r0, r4, #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eec:	fb08 f00e 	mul.w	r0, r8, lr
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef6:	d90b      	bls.n	8000f10 <__udivmoddi4+0x1b8>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f00:	f080 8088 	bcs.w	8001014 <__udivmoddi4+0x2bc>
 8000f04:	4288      	cmp	r0, r1
 8000f06:	f240 8085 	bls.w	8001014 <__udivmoddi4+0x2bc>
 8000f0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1a09      	subs	r1, r1, r0
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f18:	fb09 1110 	mls	r1, r9, r0, r1
 8000f1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f24:	458e      	cmp	lr, r1
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x1e2>
 8000f28:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f30:	d26c      	bcs.n	800100c <__udivmoddi4+0x2b4>
 8000f32:	458e      	cmp	lr, r1
 8000f34:	d96a      	bls.n	800100c <__udivmoddi4+0x2b4>
 8000f36:	3802      	subs	r0, #2
 8000f38:	4461      	add	r1, ip
 8000f3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f42:	eba1 010e 	sub.w	r1, r1, lr
 8000f46:	42a1      	cmp	r1, r4
 8000f48:	46c8      	mov	r8, r9
 8000f4a:	46a6      	mov	lr, r4
 8000f4c:	d356      	bcc.n	8000ffc <__udivmoddi4+0x2a4>
 8000f4e:	d053      	beq.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f50:	b15d      	cbz	r5, 8000f6a <__udivmoddi4+0x212>
 8000f52:	ebb3 0208 	subs.w	r2, r3, r8
 8000f56:	eb61 010e 	sbc.w	r1, r1, lr
 8000f5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f62:	40f1      	lsrs	r1, r6
 8000f64:	431f      	orrs	r7, r3
 8000f66:	e9c5 7100 	strd	r7, r1, [r5]
 8000f6a:	2600      	movs	r6, #0
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	f1c2 0320 	rsb	r3, r2, #32
 8000f76:	40d8      	lsrs	r0, r3
 8000f78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f80:	4091      	lsls	r1, r2
 8000f82:	4301      	orrs	r1, r0
 8000f84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f88:	fa1f fe8c 	uxth.w	lr, ip
 8000f8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f90:	fb07 3610 	mls	r6, r7, r0, r3
 8000f94:	0c0b      	lsrs	r3, r1, #16
 8000f96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x260>
 8000fa6:	eb1c 0303 	adds.w	r3, ip, r3
 8000faa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fae:	d22f      	bcs.n	8001010 <__udivmoddi4+0x2b8>
 8000fb0:	429e      	cmp	r6, r3
 8000fb2:	d92d      	bls.n	8001010 <__udivmoddi4+0x2b8>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	4463      	add	r3, ip
 8000fb8:	1b9b      	subs	r3, r3, r6
 8000fba:	b289      	uxth	r1, r1
 8000fbc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fc0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fcc:	428b      	cmp	r3, r1
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x28a>
 8000fd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd8:	d216      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d914      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fde:	3e02      	subs	r6, #2
 8000fe0:	4461      	add	r1, ip
 8000fe2:	1ac9      	subs	r1, r1, r3
 8000fe4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe8:	e738      	b.n	8000e5c <__udivmoddi4+0x104>
 8000fea:	462e      	mov	r6, r5
 8000fec:	4628      	mov	r0, r5
 8000fee:	e705      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	e6e3      	b.n	8000dbc <__udivmoddi4+0x64>
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	e6f8      	b.n	8000dea <__udivmoddi4+0x92>
 8000ff8:	454b      	cmp	r3, r9
 8000ffa:	d2a9      	bcs.n	8000f50 <__udivmoddi4+0x1f8>
 8000ffc:	ebb9 0802 	subs.w	r8, r9, r2
 8001000:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001004:	3801      	subs	r0, #1
 8001006:	e7a3      	b.n	8000f50 <__udivmoddi4+0x1f8>
 8001008:	4646      	mov	r6, r8
 800100a:	e7ea      	b.n	8000fe2 <__udivmoddi4+0x28a>
 800100c:	4620      	mov	r0, r4
 800100e:	e794      	b.n	8000f3a <__udivmoddi4+0x1e2>
 8001010:	4640      	mov	r0, r8
 8001012:	e7d1      	b.n	8000fb8 <__udivmoddi4+0x260>
 8001014:	46d0      	mov	r8, sl
 8001016:	e77b      	b.n	8000f10 <__udivmoddi4+0x1b8>
 8001018:	3b02      	subs	r3, #2
 800101a:	4461      	add	r1, ip
 800101c:	e732      	b.n	8000e84 <__udivmoddi4+0x12c>
 800101e:	4630      	mov	r0, r6
 8001020:	e709      	b.n	8000e36 <__udivmoddi4+0xde>
 8001022:	4464      	add	r4, ip
 8001024:	3802      	subs	r0, #2
 8001026:	e742      	b.n	8000eae <__udivmoddi4+0x156>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800103a:	2332      	movs	r3, #50	; 0x32
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	1dbb      	adds	r3, r7, #6
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	22d0      	movs	r2, #208	; 0xd0
 800104a:	21ef      	movs	r1, #239	; 0xef
 800104c:	4806      	ldr	r0, [pc, #24]	; (8001068 <read_chip_id+0x3c>)
 800104e:	f007 ff05 	bl	8008e5c <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	2b55      	cmp	r3, #85	; 0x55
 8001056:	d001      	beq.n	800105c <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001058:	2301      	movs	r3, #1
 800105a:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 800105c:	79fb      	ldrb	r3, [r7, #7]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000650 	.word	0x20000650

0800106c <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af04      	add	r7, sp, #16
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001078:	2300      	movs	r3, #0
 800107a:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d81a      	bhi.n	80010b8 <set_oss+0x4c>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <set_oss+0x1c>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	08001099 	.word	0x08001099
 800108c:	080010a1 	.word	0x080010a1
 8001090:	080010a9 	.word	0x080010a9
 8001094:	080010b1 	.word	0x080010b1
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2205      	movs	r2, #5
 800109c:	705a      	strb	r2, [r3, #1]
			break;
 800109e:	e00f      	b.n	80010c0 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2208      	movs	r2, #8
 80010a4:	705a      	strb	r2, [r3, #1]
			break;
 80010a6:	e00b      	b.n	80010c0 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	220e      	movs	r2, #14
 80010ac:	705a      	strb	r2, [r3, #1]
			break;
 80010ae:	e007      	b.n	80010c0 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	221a      	movs	r2, #26
 80010b4:	705a      	strb	r2, [r3, #1]
			break;
 80010b6:	e003      	b.n	80010c0 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2208      	movs	r2, #8
 80010bc:	705a      	strb	r2, [r3, #1]
			break;
 80010be:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	78fa      	ldrb	r2, [r7, #3]
 80010c4:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	019b      	lsls	r3, r3, #6
 80010ca:	70fb      	strb	r3, [r7, #3]
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80010d0:	2332      	movs	r3, #50	; 0x32
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2302      	movs	r3, #2
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	22f4      	movs	r2, #244	; 0xf4
 80010e2:	21ee      	movs	r1, #238	; 0xee
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <set_oss+0x88>)
 80010e6:	f007 fdbf 	bl	8008c68 <HAL_I2C_Mem_Write>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000650 	.word	0x20000650

080010f8 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	; 0x38
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001120:	2301      	movs	r3, #1
 8001122:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001126:	2332      	movs	r3, #50	; 0x32
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2316      	movs	r3, #22
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	22aa      	movs	r2, #170	; 0xaa
 8001138:	21ef      	movs	r1, #239	; 0xef
 800113a:	4827      	ldr	r0, [pc, #156]	; (80011d8 <read_calib_data+0xe0>)
 800113c:	f007 fe8e 	bl	8008e5c <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001146:	e03c      	b.n	80011c2 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	3328      	adds	r3, #40	; 0x28
 8001150:	443b      	add	r3, r7
 8001152:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b219      	sxth	r1, r3
 800115a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800115e:	3328      	adds	r3, #40	; 0x28
 8001160:	443b      	add	r3, r7
 8001162:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001166:	b21a      	sxth	r2, r3
 8001168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	4403      	add	r3, r0
 8001172:	430a      	orrs	r2, r1
 8001174:	b212      	sxth	r2, r2
 8001176:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8001178:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	2b00      	cmp	r3, #0
 8001188:	bf0c      	ite	eq
 800118a:	2301      	moveq	r3, #1
 800118c:	2300      	movne	r3, #0
 800118e:	b2da      	uxtb	r2, r3
 8001190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	440b      	add	r3, r1
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a2:	bf0c      	ite	eq
 80011a4:	2301      	moveq	r3, #1
 80011a6:	2300      	movne	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80011b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011bc:	3301      	adds	r3, #1
 80011be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011c6:	2b0b      	cmp	r3, #11
 80011c8:	d9be      	bls.n	8001148 <read_calib_data+0x50>
		}
	}

	return ret_val;
 80011ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000650 	.word	0x20000650

080011dc <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2204      	movs	r2, #4
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00c fa6a 	bl	800d6c4 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80011f0:	687c      	ldr	r4, [r7, #4]
 80011f2:	f7ff ff1b 	bl	800102c <read_chip_id>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	687c      	ldr	r4, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff79 	bl	80010f8 <read_calib_data>
 8001206:	4603      	mov	r3, r0
 8001208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3340      	adds	r3, #64	; 0x40
 8001210:	2102      	movs	r1, #2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff2a 	bl	800106c <set_oss>
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}

08001220 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8001226:	232e      	movs	r3, #46	; 0x2e
 8001228:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800122a:	2332      	movs	r3, #50	; 0x32
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	22f4      	movs	r2, #244	; 0xf4
 800123a:	21ee      	movs	r1, #238	; 0xee
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <get_ut+0x50>)
 800123e:	f007 fd13 	bl	8008c68 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001242:	2005      	movs	r0, #5
 8001244:	f006 fc78 	bl	8007b38 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 8001248:	2332      	movs	r3, #50	; 0x32
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2302      	movs	r3, #2
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	22f6      	movs	r2, #246	; 0xf6
 8001258:	21ef      	movs	r1, #239	; 0xef
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <get_ut+0x50>)
 800125c:	f007 fdfe 	bl	8008e5c <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001260:	793b      	ldrb	r3, [r7, #4]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	797a      	ldrb	r2, [r7, #5]
 8001266:	4313      	orrs	r3, r2
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000650 	.word	0x20000650

08001274 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001294:	ee17 2a90 	vmov	r2, s15
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	895b      	ldrh	r3, [r3, #10]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	8912      	ldrh	r2, [r2, #8]
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	13db      	asrs	r3, r3, #15
 80012a8:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80012b0:	02da      	lsls	r2, r3, #11
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80012b8:	4619      	mov	r1, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	440b      	add	r3, r1
 80012be:	fb92 f3f3 	sdiv	r3, r2, r3
 80012c2:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	441a      	add	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d2:	3308      	adds	r3, #8
 80012d4:	111b      	asrs	r3, r3, #4
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012de:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800132c <get_temp+0xb8>
 80012e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e6:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80012ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001330 <get_temp+0xbc>
 80012f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fa:	d908      	bls.n	800130e <get_temp+0x9a>
 80012fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001300:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001334 <get_temp+0xc0>
 8001304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	db03      	blt.n	8001316 <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2203      	movs	r2, #3
 8001312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	ee07 3a90 	vmov	s15, r3
}
 800131c:	eeb0 0a67 	vmov.f32	s0, s15
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	3dcccccd 	.word	0x3dcccccd
 8001330:	c2200000 	.word	0xc2200000
 8001334:	42aa0000 	.word	0x42aa0000

08001338 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af04      	add	r7, sp, #16
 800133e:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <get_up+0x7c>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	813b      	strh	r3, [r7, #8]
 8001346:	2300      	movs	r3, #0
 8001348:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 800134e:	2334      	movs	r3, #52	; 0x34
 8001350:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001352:	2332      	movs	r3, #50	; 0x32
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	2301      	movs	r3, #1
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2301      	movs	r3, #1
 8001362:	22f4      	movs	r2, #244	; 0xf4
 8001364:	21ee      	movs	r1, #238	; 0xee
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <get_up+0x80>)
 8001368:	f007 fc7e 	bl	8008c68 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	4618      	mov	r0, r3
 8001370:	f006 fbe2 	bl	8007b38 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 8001374:	2332      	movs	r3, #50	; 0x32
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2303      	movs	r3, #3
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	22f6      	movs	r2, #246	; 0xf6
 8001386:	21ef      	movs	r1, #239	; 0xef
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <get_up+0x80>)
 800138a:	f007 fd67 	bl	8008e5c <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800138e:	7a3b      	ldrb	r3, [r7, #8]
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	7a7b      	ldrb	r3, [r7, #9]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	4413      	add	r3, r2
 8001398:	7aba      	ldrb	r2, [r7, #10]
 800139a:	441a      	add	r2, r3
 800139c:	793b      	ldrb	r3, [r7, #4]
 800139e:	f1c3 0308 	rsb	r3, r3, #8
 80013a2:	fa42 f303 	asr.w	r3, r2, r3
 80013a6:	60fb      	str	r3, [r7, #12]
	return up;
 80013a8:	68fb      	ldr	r3, [r7, #12]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	08016330 	.word	0x08016330
 80013b8:	20000650 	.word	0x20000650

080013bc <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80013bc:	b084      	sub	sp, #16
 80013be:	b480      	push	{r7}
 80013c0:	b089      	sub	sp, #36	; 0x24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80013c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80013d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d6:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80013da:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80013dc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80013e0:	461a      	mov	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fb03 f303 	mul.w	r3, r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	da01      	bge.n	80013f0 <get_pressure+0x34>
 80013ec:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013f0:	131b      	asrs	r3, r3, #12
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	da01      	bge.n	80013fe <get_pressure+0x42>
 80013fa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80013fe:	12db      	asrs	r3, r3, #11
 8001400:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001402:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001406:	461a      	mov	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	da01      	bge.n	8001416 <get_pressure+0x5a>
 8001412:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001416:	12db      	asrs	r3, r3, #11
 8001418:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001422:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001426:	009a      	lsls	r2, r3, #2
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4413      	add	r3, r2
 800142c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001430:	4093      	lsls	r3, r2
 8001432:	3302      	adds	r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	da00      	bge.n	800143a <get_pressure+0x7e>
 8001438:	3303      	adds	r3, #3
 800143a:	109b      	asrs	r3, r3, #2
 800143c:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800143e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001442:	461a      	mov	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	da02      	bge.n	8001454 <get_pressure+0x98>
 800144e:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001452:	331f      	adds	r3, #31
 8001454:	135b      	asrs	r3, r3, #13
 8001456:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001458:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800145c:	461a      	mov	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	fb03 f303 	mul.w	r3, r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	da01      	bge.n	800146c <get_pressure+0xb0>
 8001468:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800146c:	131b      	asrs	r3, r3, #12
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	da02      	bge.n	800147c <get_pressure+0xc0>
 8001476:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800147a:	33ff      	adds	r3, #255	; 0xff
 800147c:	141b      	asrs	r3, r3, #16
 800147e:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4413      	add	r3, r2
 8001486:	3302      	adds	r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	da00      	bge.n	800148e <get_pressure+0xd2>
 800148c:	3303      	adds	r3, #3
 800148e:	109b      	asrs	r3, r3, #2
 8001490:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 8001492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001494:	461a      	mov	r2, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800149c:	fb02 f303 	mul.w	r3, r2, r3
 80014a0:	0bdb      	lsrs	r3, r3, #15
 80014a2:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80014a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a6:	461a      	mov	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80014b0:	4611      	mov	r1, r2
 80014b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80014b6:	410a      	asrs	r2, r1
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db06      	blt.n	80014d2 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	005a      	lsls	r2, r3, #1
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	e005      	b.n	80014de <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da00      	bge.n	80014e6 <get_pressure+0x12a>
 80014e4:	33ff      	adds	r3, #255	; 0xff
 80014e6:	121b      	asrs	r3, r3, #8
 80014e8:	461a      	mov	r2, r3
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da00      	bge.n	80014f2 <get_pressure+0x136>
 80014f0:	33ff      	adds	r3, #255	; 0xff
 80014f2:	121b      	asrs	r3, r3, #8
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f640 32de 	movw	r2, #3038	; 0xbde
 8001500:	fb02 f303 	mul.w	r3, r2, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	da02      	bge.n	800150e <get_pressure+0x152>
 8001508:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800150c:	33ff      	adds	r3, #255	; 0xff
 800150e:	141b      	asrs	r3, r3, #16
 8001510:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <get_pressure+0x198>)
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	da02      	bge.n	8001524 <get_pressure+0x168>
 800151e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001522:	33ff      	adds	r3, #255	; 0xff
 8001524:	141b      	asrs	r3, r3, #16
 8001526:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4413      	add	r3, r2
 800152e:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001532:	2b00      	cmp	r3, #0
 8001534:	da00      	bge.n	8001538 <get_pressure+0x17c>
 8001536:	330f      	adds	r3, #15
 8001538:	111b      	asrs	r3, r3, #4
 800153a:	461a      	mov	r2, r3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	4413      	add	r3, r2
 8001540:	61fb      	str	r3, [r7, #28]

	return p;
 8001542:	69fb      	ldr	r3, [r7, #28]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3724      	adds	r7, #36	; 0x24
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	b004      	add	sp, #16
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	ffffe343 	.word	0xffffe343

08001558 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <get_altitude+0xb8>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800157c:	ee16 0a90 	vmov	r0, s13
 8001580:	f7fe fffc 	bl	800057c <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001600 <get_altitude+0xa8>
 800158c:	ec43 2b10 	vmov	d0, r2, r3
 8001590:	f012 fb56 	bl	8013c40 <pow>
 8001594:	ec53 2b10 	vmov	r2, r3, d0
 8001598:	f04f 0000 	mov.w	r0, #0
 800159c:	491d      	ldr	r1, [pc, #116]	; (8001614 <get_altitude+0xbc>)
 800159e:	f7fe fe8d 	bl	80002bc <__aeabi_dsub>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	a317      	add	r3, pc, #92	; (adr r3, 8001608 <get_altitude+0xb0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f83c 	bl	800062c <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fb2e 	bl	8000c1c <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 80015c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001618 <get_altitude+0xc0>
 80015cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d4:	d908      	bls.n	80015e8 <get_altitude+0x90>
 80015d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800161c <get_altitude+0xc4>
 80015de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	db03      	blt.n	80015f0 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2205      	movs	r2, #5
 80015ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	ee07 3a90 	vmov	s15, r3
}
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	ccd9456c 	.word	0xccd9456c
 8001604:	3fc85b95 	.word	0x3fc85b95
 8001608:	00000000 	.word	0x00000000
 800160c:	40e5a540 	.word	0x40e5a540
 8001610:	20000000 	.word	0x20000000
 8001614:	3ff00000 	.word	0x3ff00000
 8001618:	c3fa0000 	.word	0xc3fa0000
 800161c:	460ca000 	.word	0x460ca000

08001620 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff90 	bl	8000558 <__aeabi_i2d>
 8001638:	4604      	mov	r4, r0
 800163a:	460d      	mov	r5, r1
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <get_slp+0x80>)
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	eddf 6a18 	vldr	s13, [pc, #96]	; 80016a4 <get_slp+0x84>
 8001646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800164e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001652:	ee17 0a90 	vmov	r0, s15
 8001656:	f7fe ff91 	bl	800057c <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001698 <get_slp+0x78>
 8001662:	ec43 2b10 	vmov	d0, r2, r3
 8001666:	f012 faeb 	bl	8013c40 <pow>
 800166a:	ec53 2b10 	vmov	r2, r3, d0
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7ff f905 	bl	8000880 <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff facd 	bl	8000c1c <__aeabi_d2f>
 8001682:	4603      	mov	r3, r0
 8001684:	60fb      	str	r3, [r7, #12]

	return slp;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	ee07 3a90 	vmov	s15, r3
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bdb0      	pop	{r4, r5, r7, pc}
 8001696:	bf00      	nop
 8001698:	b851eb85 	.word	0xb851eb85
 800169c:	4015051e 	.word	0x4015051e
 80016a0:	20000004 	.word	0x20000004
 80016a4:	472d2a00 	.word	0x472d2a00

080016a8 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 80016a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016aa:	b095      	sub	sp, #84	; 0x54
 80016ac:	af0e      	add	r7, sp, #56	; 0x38
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 80016b2:	f7ff fdb5 	bl	8001220 <get_ut>
 80016b6:	ee07 0a90 	vmov	s15, r0
 80016ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f7ff fdd5 	bl	8001274 <get_temp>
 80016ca:	eef0 7a40 	vmov.f32	s15, s0
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80016d8:	f7ff fe2e 	bl	8001338 <get_up>
 80016dc:	4602      	mov	r2, r0
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 80016e2:	683e      	ldr	r6, [r7, #0]
 80016e4:	466d      	mov	r5, sp
 80016e6:	f106 0410 	add.w	r4, r6, #16
 80016ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	602b      	str	r3, [r5, #0]
 80016fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016fe:	f7ff fe5d 	bl	80013bc <get_pressure>
 8001702:	4602      	mov	r2, r0
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001708:	6838      	ldr	r0, [r7, #0]
 800170a:	f7ff ff89 	bl	8001620 <get_slp>
 800170e:	eef0 7a40 	vmov.f32	s15, s0
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f7ff ff1d 	bl	8001558 <get_altitude>
 800171e:	eef0 7a40 	vmov.f32	s15, s0
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172c:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173e:	617b      	str	r3, [r7, #20]
	return result;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	461c      	mov	r4, r3
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800174a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001758 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001764:	e083      	b.n	800186e <initButtons+0x116>
		btns[i]->pin = pins[i];
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	440b      	add	r3, r1
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4944      	ldr	r1, [pc, #272]	; (8001884 <initButtons+0x12c>)
 8001774:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001778:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	440b      	add	r3, r1
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4940      	ldr	r1, [pc, #256]	; (8001888 <initButtons+0x130>)
 8001788:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800178c:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	7993      	ldrb	r3, [r2, #6]
 800179a:	f36f 0300 	bfc	r3, #0, #1
 800179e:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	7993      	ldrb	r3, [r2, #6]
 80017ac:	f36f 0341 	bfc	r3, #1, #1
 80017b0:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2200      	movs	r2, #0
 80017da:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2200      	movs	r2, #0
 80017f6:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2200      	movs	r2, #0
 8001804:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2200      	movs	r2, #0
 8001812:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3301      	adds	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	2b05      	cmp	r3, #5
 8001872:	f67f af78 	bls.w	8001766 <initButtons+0xe>
	}
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	20000020 	.word	0x20000020
 8001888:	20000008 	.word	0x20000008

0800188c <resetButtonHandlers>:

void resetButtonHandlers(void){
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001896:	e020      	b.n	80018da <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <resetButtonHandlers+0x64>)
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <resetButtonHandlers+0x64>)
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <resetButtonHandlers+0x64>)
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <resetButtonHandlers+0x64>)
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	2200      	movs	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <resetButtonHandlers+0x64>)
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
		i++;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	3301      	adds	r3, #1
 80018d8:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b05      	cmp	r3, #5
 80018de:	d9db      	bls.n	8001898 <resetButtonHandlers+0xc>
	}
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000002c 	.word	0x2000002c

080018f4 <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	889b      	ldrh	r3, [r3, #4]
 8001904:	4619      	mov	r1, r3
 8001906:	4610      	mov	r0, r2
 8001908:	f006 fffa 	bl	8008900 <HAL_GPIO_ReadPin>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <scanButton>:

void scanButton(Button* btn){
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	799b      	ldrb	r3, [r3, #6]
 800192c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	b2d9      	uxtb	r1, r3
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	7993      	ldrb	r3, [r2, #6]
 8001940:	f361 0300 	bfi	r3, r1, #0, #1
 8001944:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffd4 	bl	80018f4 <readButton>
 800194c:	4603      	mov	r3, r0
 800194e:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8001950:	7bbb      	ldrb	r3, [r7, #14]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	b2d9      	uxtb	r1, r3
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	7993      	ldrb	r3, [r2, #6]
 800195c:	f361 0341 	bfi	r3, r1, #1, #1
 8001960:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 8001962:	7bba      	ldrb	r2, [r7, #14]
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	429a      	cmp	r2, r3
 8001968:	d150      	bne.n	8001a0c <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 800196a:	7bbb      	ldrb	r3, [r7, #14]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d146      	bne.n	80019fe <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7a9b      	ldrb	r3, [r3, #10]
 8001974:	3301      	adds	r3, #1
 8001976:	b2da      	uxtb	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2000      	movs	r0, #0
 800198a:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7a9b      	ldrb	r3, [r3, #10]
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <scanButton+0x15c>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d32d      	bcc.n	80019f6 <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7b5b      	ldrb	r3, [r3, #13]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d110      	bne.n	80019c4 <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2000      	movs	r0, #0
 80019b0:	4798      	blx	r3
					}
					btn->longSingleOn++;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7a5b      	ldrb	r3, [r3, #9]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7a9b      	ldrb	r3, [r3, #10]
 80019c8:	4a2c      	ldr	r2, [pc, #176]	; (8001a7c <scanButton+0x15c>)
 80019ca:	8852      	ldrh	r2, [r2, #2]
 80019cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80019d0:	fb01 f202 	mul.w	r2, r1, r2
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10d      	bne.n	80019f6 <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	2000      	movs	r0, #0
 80019e8:	4798      	blx	r3
					}
					btn->longContinuous++;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7adb      	ldrb	r3, [r3, #11]
 80019ee:	3301      	adds	r3, #1
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 80019fc:	e03a      	b.n	8001a74 <scanButton+0x154>
			btn->shortSingleHandled = 0;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	735a      	strb	r2, [r3, #13]
}
 8001a0a:	e033      	b.n	8001a74 <scanButton+0x154>
		if(currStatus == 1){
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d11b      	bne.n	8001a4a <scanButton+0x12a>
			btn->shortContinuous = 0;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7b1b      	ldrb	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d126      	bne.n	8001a74 <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2000      	movs	r0, #0
 8001a34:	4798      	blx	r3
				btn->shortSingleOn++;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	79db      	ldrb	r3, [r3, #7]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	731a      	strb	r2, [r3, #12]
}
 8001a48:	e014      	b.n	8001a74 <scanButton+0x154>
			if(btn->releaseHandled == 0){
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7b9b      	ldrb	r3, [r3, #14]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d110      	bne.n	8001a74 <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	2000      	movs	r0, #0
 8001a60:	4798      	blx	r3
				btn->shortSingleOff++;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7a1b      	ldrb	r3, [r3, #8]
 8001a66:	3301      	adds	r3, #1
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	739a      	strb	r2, [r3, #14]
}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000044 	.word	0x20000044

08001a80 <scanButtons>:

void scanButtons(Button* btns[6]){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001a8c:	e00a      	b.n	8001aa4 <scanButtons+0x24>
		scanButton(btns[i]);
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff41 	bl	8001920 <scanButton>
		i++;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d9f1      	bls.n	8001a8e <scanButtons+0xe>
	}
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_DMA_Init+0x3c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <MX_DMA_Init+0x3c>)
 8001ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_DMA_Init+0x3c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2039      	movs	r0, #57	; 0x39
 8001adc:	f006 f92b 	bl	8007d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ae0:	2039      	movs	r0, #57	; 0x39
 8001ae2:	f006 f944 	bl	8007d6e <HAL_NVIC_EnableIRQ>

}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	4b60      	ldr	r3, [pc, #384]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a5f      	ldr	r2, [pc, #380]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b5d      	ldr	r3, [pc, #372]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b56      	ldr	r3, [pc, #344]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b52      	ldr	r3, [pc, #328]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a51      	ldr	r2, [pc, #324]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b4f      	ldr	r3, [pc, #316]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a4a      	ldr	r2, [pc, #296]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b48      	ldr	r3, [pc, #288]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a43      	ldr	r2, [pc, #268]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b3a      	ldr	r3, [pc, #232]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a35      	ldr	r2, [pc, #212]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <MX_GPIO_Init+0x19c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	4830      	ldr	r0, [pc, #192]	; (8001c94 <MX_GPIO_Init+0x1a0>)
 8001bd4:	f006 feac 	bl	8008930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f244 0181 	movw	r1, #16513	; 0x4081
 8001bde:	482e      	ldr	r0, [pc, #184]	; (8001c98 <MX_GPIO_Init+0x1a4>)
 8001be0:	f006 fea6 	bl	8008930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2140      	movs	r1, #64	; 0x40
 8001be8:	482c      	ldr	r0, [pc, #176]	; (8001c9c <MX_GPIO_Init+0x1a8>)
 8001bea:	f006 fea1 	bl	8008930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001bee:	2340      	movs	r3, #64	; 0x40
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4823      	ldr	r0, [pc, #140]	; (8001c94 <MX_GPIO_Init+0x1a0>)
 8001c06:	f006 fccf 	bl	80085a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001c0a:	f244 0381 	movw	r3, #16513	; 0x4081
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	481d      	ldr	r0, [pc, #116]	; (8001c98 <MX_GPIO_Init+0x1a4>)
 8001c24:	f006 fcc0 	bl	80085a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8001c28:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001c2c:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c2e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4818      	ldr	r0, [pc, #96]	; (8001ca0 <MX_GPIO_Init+0x1ac>)
 8001c40:	f006 fcb2 	bl	80085a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c44:	2340      	movs	r3, #64	; 0x40
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4810      	ldr	r0, [pc, #64]	; (8001c9c <MX_GPIO_Init+0x1a8>)
 8001c5c:	f006 fca4 	bl	80085a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	480a      	ldr	r0, [pc, #40]	; (8001c9c <MX_GPIO_Init+0x1a8>)
 8001c74:	f006 fc98 	bl	80085a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2028      	movs	r0, #40	; 0x28
 8001c7e:	f006 f85a 	bl	8007d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c82:	2028      	movs	r0, #40	; 0x28
 8001c84:	f006 f873 	bl	8007d6e <HAL_NVIC_EnableIRQ>

}
 8001c88:	bf00      	nop
 8001c8a:	3730      	adds	r7, #48	; 0x30
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40021800 	.word	0x40021800
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <getDataFromUart>:
//};

//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};
char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <getDataFromUart+0x20>)
 8001cb8:	f00a fb8d 	bl	800c3d6 <HAL_UART_Receive_DMA>

}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200039a4 	.word	0x200039a4

08001cc8 <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd8:	6018      	str	r0, [r3, #0]
 8001cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cde:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001ce2:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8001ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001cec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cf0:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f00d fbdf 	bl	800f4c8 <strncpy>
	gpsModule.getData = &getDataFromUart;
 8001d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001d12:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <initGps+0x90>)
 8001d14:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	gpsModule.isReady = 1;
 8001d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
	return(gpsModule);
 8001d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d34:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d40:	461a      	mov	r2, r3
 8001d42:	f00b fcb1 	bl	800d6a8 <memcpy>
}
 8001d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	08001ca5 	.word	0x08001ca5

08001d5c <hexCharToInt>:
	}


}

int hexCharToInt(char* value){
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	int msb = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b2f      	cmp	r3, #47	; 0x2f
 8001d6e:	bf8c      	ite	hi
 8001d70:	2301      	movhi	r3, #1
 8001d72:	2300      	movls	r3, #0
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b39      	cmp	r3, #57	; 0x39
 8001d7c:	bf94      	ite	ls
 8001d7e:	2301      	movls	r3, #1
 8001d80:	2300      	movhi	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	4013      	ands	r3, r2
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d004      	beq.n	8001d96 <hexCharToInt+0x3a>
		msb = *value - 48;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	3b30      	subs	r3, #48	; 0x30
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e003      	b.n	8001d9e <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	3b37      	subs	r3, #55	; 0x37
 8001d9c:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3301      	adds	r3, #1
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b2f      	cmp	r3, #47	; 0x2f
 8001daa:	bf8c      	ite	hi
 8001dac:	2301      	movhi	r3, #1
 8001dae:	2300      	movls	r3, #0
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3301      	adds	r3, #1
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b39      	cmp	r3, #57	; 0x39
 8001dba:	bf94      	ite	ls
 8001dbc:	2301      	movls	r3, #1
 8001dbe:	2300      	movhi	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	3b30      	subs	r3, #48	; 0x30
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	e004      	b.n	8001de0 <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3b37      	subs	r3, #55	; 0x37
 8001dde:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
	return(result)
 8001dea:	68fb      	ldr	r3, [r7, #12]
;}
 8001dec:	4618      	mov	r0, r3
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <strtoke>:
#include <string.h>

/* behaves like strtok() except that it returns empty tokens also
 */
char* strtoke(char *str, const char *delim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <strtoke+0x1a>
 8001e0c:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <strtoke+0x60>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <strtoke+0x60>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <strtoke+0x26>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e017      	b.n	8001e4e <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <strtoke+0x60>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <strtoke+0x60>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f00d fb5f 	bl	800f4ee <strpbrk>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <strtoke+0x60>)
 8001e34:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <strtoke+0x60>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <strtoke+0x54>
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <strtoke+0x60>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	4904      	ldr	r1, [pc, #16]	; (8001e58 <strtoke+0x60>)
 8001e46:	600a      	str	r2, [r1, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000648 	.word	0x20000648

08001e5c <validateChecksum>:

uint8_t validateChecksum(char* nmeaSentence){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	uint8_t chksum = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 8001e6c:	e009      	b.n	8001e82 <validateChecksum+0x26>
		chksum ^= nmeaSentence[i];
 8001e6e:	7bbb      	ldrb	r3, [r7, #14]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	4053      	eors	r3, r2
 8001e7a:	73fb      	strb	r3, [r7, #15]
		i++;
 8001e7c:	7bbb      	ldrb	r3, [r7, #14]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 8001e82:	7bbb      	ldrb	r3, [r7, #14]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e8c:	bf14      	ite	ne
 8001e8e:	2301      	movne	r3, #1
 8001e90:	2300      	moveq	r3, #0
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	7bbb      	ldrb	r3, [r7, #14]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	440b      	add	r3, r1
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1df      	bne.n	8001e6e <validateChecksum+0x12>
	}
	return hexCharToInt(&nmeaSentence[i+1])==chksum;
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff50 	bl	8001d5c <hexCharToInt>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <getMessage>:


void getAllMessages(char* buffer){

}
uint8_t getMessage(char* destination, char* source, nmeaSentence_t type){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	71fb      	strb	r3, [r7, #7]
	char* start = strstr(source, gpsCmd[type]);
 8001ee2:	79fa      	ldrb	r2, [r7, #7]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <getMessage+0x68>)
 8001eee:	4413      	add	r3, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f00d fb15 	bl	800f522 <strstr>
 8001ef8:	6178      	str	r0, [r7, #20]
	if(start == NULL) return(0);
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <getMessage+0x30>
 8001f00:	2300      	movs	r3, #0
 8001f02:	e016      	b.n	8001f32 <getMessage+0x5e>
	if(strtok(start,"\n\r") == NULL) return(0);
 8001f04:	490e      	ldr	r1, [pc, #56]	; (8001f40 <getMessage+0x6c>)
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f00e f950 	bl	80101ac <strtok>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <getMessage+0x42>
 8001f12:	2300      	movs	r3, #0
 8001f14:	e00d      	b.n	8001f32 <getMessage+0x5e>
	if(validateChecksum(start)){
 8001f16:	6978      	ldr	r0, [r7, #20]
 8001f18:	f7ff ffa0 	bl	8001e5c <validateChecksum>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <getMessage+0x5c>
		return strcpy(destination,start);
 8001f22:	6979      	ldr	r1, [r7, #20]
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f00c fd8c 	bl	800ea42 <strcpy>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	e000      	b.n	8001f32 <getMessage+0x5e>
	} else {
		return NULL;
 8001f30:	2300      	movs	r3, #0
	}
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	08016c6c 	.word	0x08016c6c
 8001f40:	08016334 	.word	0x08016334

08001f44 <tokenizeSentence>:
	char sentence[NMEA_MAX_SENTENCE_LENGTH];
	char* wordPtrs[20];
	uint8_t wordNum;
};
//function not tested
struct nmeaSentence tokenizeSentence(char* sentence){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0ae      	sub	sp, #184	; 0xb8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	struct nmeaSentence result;
	strcpy(result.sentence, sentence);
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	6839      	ldr	r1, [r7, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00c fd74 	bl	800ea42 <strcpy>
	result.wordNum = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
	char* prevPointer = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	for(char* parsePointer = strtoke(result.sentence, ","); parsePointer != NULL; parsePointer = strtoke(NULL, ",")){
 8001f66:	f107 0308 	add.w	r3, r7, #8
 8001f6a:	4918      	ldr	r1, [pc, #96]	; (8001fcc <tokenizeSentence+0x88>)
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff43 	bl	8001df8 <strtoke>
 8001f72:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8001f76:	e019      	b.n	8001fac <tokenizeSentence+0x68>
		result.wordPtrs[result.wordNum] = parsePointer;
 8001f78:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001f7c:	3314      	adds	r3, #20
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	33b8      	adds	r3, #184	; 0xb8
 8001f82:	443b      	add	r3, r7
 8001f84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f88:	f843 2cac 	str.w	r2, [r3, #-172]
		result.wordNum++;
 8001f8c:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001f90:	3301      	adds	r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
		prevPointer = parsePointer;
 8001f98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	for(char* parsePointer = strtoke(result.sentence, ","); parsePointer != NULL; parsePointer = strtoke(NULL, ",")){
 8001fa0:	490a      	ldr	r1, [pc, #40]	; (8001fcc <tokenizeSentence+0x88>)
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff ff28 	bl	8001df8 <strtoke>
 8001fa8:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8001fac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e1      	bne.n	8001f78 <tokenizeSentence+0x34>
	}
	return result;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f107 0308 	add.w	r3, r7, #8
 8001fbc:	22a8      	movs	r2, #168	; 0xa8
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f00b fb72 	bl	800d6a8 <memcpy>
}
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	37b8      	adds	r7, #184	; 0xb8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	08016338 	.word	0x08016338

08001fd0 <getLocation>:



location_t getLocation(struct gpsDevice* dev){
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8001fdc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8001fe0:	6018      	str	r0, [r3, #0]
 8001fe2:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8001fe6:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8001fea:	6019      	str	r1, [r3, #0]
//	copy buffer - prevent from mutating (when DMA updated)
	char tmpBuf[GPS_BUFFER_SIZE];
	strncpy(&tmpBuf, dev->buffer, GPS_BUFFER_SIZE);
 8001fec:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8001ff0:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	1d19      	adds	r1, r3, #4
 8001ff8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8001ffc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002000:	4618      	mov	r0, r3
 8002002:	f00d fa61 	bl	800f4c8 <strncpy>

	location_t position;
	char sentence[NMEA_MAX_SENTENCE_LENGTH+1];
	// receive and validate message
	if(getMessage(&sentence, &tmpBuf, NMEA_GNGGA) == NULL){
 8002006:	f507 711b 	add.w	r1, r7, #620	; 0x26c
 800200a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800200e:	2200      	movs	r2, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5f 	bl	8001ed4 <getMessage>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d120      	bne.n	800205e <getLocation+0x8e>
		strcpy(&position.debug, "invalid sentence");
 800201c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002020:	4ad0      	ldr	r2, [pc, #832]	; (8002364 <getLocation+0x394>)
 8002022:	461c      	mov	r4, r3
 8002024:	4615      	mov	r5, r2
 8002026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800202a:	682b      	ldr	r3, [r5, #0]
 800202c:	7023      	strb	r3, [r4, #0]
		position.isValid = 0;
 800202e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002032:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
		return position;
 800203c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002040:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800204a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8002056:	461a      	mov	r2, r3
 8002058:	f00b fb26 	bl	800d6a8 <memcpy>
 800205c:	e178      	b.n	8002350 <getLocation+0x380>
	}

	// test tokenization function
	struct nmeaSentence snt = tokenizeSentence(sentence);
 800205e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002062:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8002066:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff69 	bl	8001f44 <tokenizeSentence>

	//write to struct whole sentence
	strcpy(&position.debug, sentence);
 8002072:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f00c fce0 	bl	800ea42 <strcpy>

	// tokenize
	// GNGGA
	char* parsePointer = strtoke(sentence, ",");
 8002082:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002086:	49b8      	ldr	r1, [pc, #736]	; (8002368 <getLocation+0x398>)
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff feb5 	bl	8001df8 <strtoke>
 800208e:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[0][0], parsePointer);
 8002092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002096:	3356      	adds	r3, #86	; 0x56
 8002098:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 800209c:	4618      	mov	r0, r3
 800209e:	f00c fcd0 	bl	800ea42 <strcpy>
	// UTC Time
	parsePointer = strtoke(NULL, ",");
 80020a2:	49b1      	ldr	r1, [pc, #708]	; (8002368 <getLocation+0x398>)
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff fea7 	bl	8001df8 <strtoke>
 80020aa:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[1][0], parsePointer);
 80020ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020b2:	3365      	adds	r3, #101	; 0x65
 80020b4:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00c fcc2 	bl	800ea42 <strcpy>
	uint32_t utcTime=atoi(parsePointer);
 80020be:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
 80020c2:	f00b faa6 	bl	800d612 <atoi>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	position.utc_hour = (utcTime/10000)%100;
 80020cc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80020d0:	4aa6      	ldr	r2, [pc, #664]	; (800236c <getLocation+0x39c>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0b5a      	lsrs	r2, r3, #13
 80020d8:	4ba5      	ldr	r3, [pc, #660]	; (8002370 <getLocation+0x3a0>)
 80020da:	fba3 1302 	umull	r1, r3, r3, r2
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2164      	movs	r1, #100	; 0x64
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80020ee:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80020f2:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	position.utc_min = (utcTime/100)%100;
 80020f6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80020fa:	4a9d      	ldr	r2, [pc, #628]	; (8002370 <getLocation+0x3a0>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	095a      	lsrs	r2, r3, #5
 8002102:	4b9b      	ldr	r3, [pc, #620]	; (8002370 <getLocation+0x3a0>)
 8002104:	fba3 1302 	umull	r1, r3, r3, r2
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	2164      	movs	r1, #100	; 0x64
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	b2da      	uxtb	r2, r3
 8002114:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002118:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800211c:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	position.utc_sec = utcTime%100;
 8002120:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8002124:	4b92      	ldr	r3, [pc, #584]	; (8002370 <getLocation+0x3a0>)
 8002126:	fba3 1302 	umull	r1, r3, r3, r2
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2164      	movs	r1, #100	; 0x64
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	b2da      	uxtb	r2, r3
 8002136:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800213a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800213e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	// DDMM.MMM Latitude
	parsePointer = strtoke(NULL, ",");
 8002142:	4989      	ldr	r1, [pc, #548]	; (8002368 <getLocation+0x398>)
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff fe57 	bl	8001df8 <strtoke>
 800214a:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[2][0], parsePointer);
 800214e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002152:	3374      	adds	r3, #116	; 0x74
 8002154:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8002158:	4618      	mov	r0, r3
 800215a:	f00c fc72 	bl	800ea42 <strcpy>
	position.latitude = atof(parsePointer);
 800215e:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
 8002162:	f00b fa53 	bl	800d60c <atof>
 8002166:	eeb0 7a40 	vmov.f32	s14, s0
 800216a:	eef0 7a60 	vmov.f32	s15, s1
 800216e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002172:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002176:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140
	// Latitude N/S
	parsePointer = strtoke(NULL, ",");
 800217a:	497b      	ldr	r1, [pc, #492]	; (8002368 <getLocation+0x398>)
 800217c:	2000      	movs	r0, #0
 800217e:	f7ff fe3b 	bl	8001df8 <strtoke>
 8002182:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[3][0], parsePointer);
 8002186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800218a:	3383      	adds	r3, #131	; 0x83
 800218c:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8002190:	4618      	mov	r0, r3
 8002192:	f00c fc56 	bl	800ea42 <strcpy>
	position.n_s = *parsePointer;
 8002196:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80021a0:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80021a4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	// DDDMM.MMM Longitude
	parsePointer = strtoke(NULL, ",");
 80021a8:	496f      	ldr	r1, [pc, #444]	; (8002368 <getLocation+0x398>)
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff fe24 	bl	8001df8 <strtoke>
 80021b0:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[4][0], parsePointer);
 80021b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021b8:	3392      	adds	r3, #146	; 0x92
 80021ba:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 80021be:	4618      	mov	r0, r3
 80021c0:	f00c fc3f 	bl	800ea42 <strcpy>
	position.longitude = atof(parsePointer);
 80021c4:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
 80021c8:	f00b fa20 	bl	800d60c <atof>
 80021cc:	eeb0 7a40 	vmov.f32	s14, s0
 80021d0:	eef0 7a60 	vmov.f32	s15, s1
 80021d4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80021d8:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80021dc:	ed83 7b52 	vstr	d7, [r3, #328]	; 0x148
	// Longitude W/E
	parsePointer = strtoke(NULL, ",");
 80021e0:	4961      	ldr	r1, [pc, #388]	; (8002368 <getLocation+0x398>)
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7ff fe08 	bl	8001df8 <strtoke>
 80021e8:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[5][0], parsePointer);
 80021ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021f0:	33a1      	adds	r3, #161	; 0xa1
 80021f2:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 80021f6:	4618      	mov	r0, r3
 80021f8:	f00c fc23 	bl	800ea42 <strcpy>
	position.w_e = *parsePointer;
 80021fc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002206:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800220a:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	// Fix type - 0-nofix, 1-GPS, 2-DGPS
	parsePointer = strtoke(NULL, ",");
 800220e:	4956      	ldr	r1, [pc, #344]	; (8002368 <getLocation+0x398>)
 8002210:	2000      	movs	r0, #0
 8002212:	f7ff fdf1 	bl	8001df8 <strtoke>
 8002216:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[6][0], parsePointer);
 800221a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800221e:	33b0      	adds	r3, #176	; 0xb0
 8002220:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8002224:	4618      	mov	r0, r3
 8002226:	f00c fc0c 	bl	800ea42 <strcpy>
	if(*parsePointer=='0'){
 800222a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b30      	cmp	r3, #48	; 0x30
 8002232:	d107      	bne.n	8002244 <getLocation+0x274>
		position.hasFix = 1;
 8002234:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002238:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800223c:	2201      	movs	r2, #1
 800223e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8002242:	e006      	b.n	8002252 <getLocation+0x282>
//		position.hasFix = 0;
	} else {
		position.hasFix = 1;
 8002244:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002248:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800224c:	2201      	movs	r2, #1
 800224e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	// Number of used satellites
	parsePointer = strtoke(NULL, ",");
 8002252:	4945      	ldr	r1, [pc, #276]	; (8002368 <getLocation+0x398>)
 8002254:	2000      	movs	r0, #0
 8002256:	f7ff fdcf 	bl	8001df8 <strtoke>
 800225a:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[7][0], parsePointer);
 800225e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002262:	33bf      	adds	r3, #191	; 0xbf
 8002264:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8002268:	4618      	mov	r0, r3
 800226a:	f00c fbea 	bl	800ea42 <strcpy>
	position.satNum = atoi(parsePointer);
 800226e:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
 8002272:	f00b f9ce 	bl	800d612 <atoi>
 8002276:	4603      	mov	r3, r0
 8002278:	b2da      	uxtb	r2, r3
 800227a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800227e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002282:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	// HDOP
	parsePointer = strtoke(NULL, ",");
 8002286:	4938      	ldr	r1, [pc, #224]	; (8002368 <getLocation+0x398>)
 8002288:	2000      	movs	r0, #0
 800228a:	f7ff fdb5 	bl	8001df8 <strtoke>
 800228e:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[8][0], parsePointer);
 8002292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002296:	33ce      	adds	r3, #206	; 0xce
 8002298:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 800229c:	4618      	mov	r0, r3
 800229e:	f00c fbd0 	bl	800ea42 <strcpy>
	// Altitude above mean sea level
	parsePointer = strtoke(NULL, ",");
 80022a2:	4931      	ldr	r1, [pc, #196]	; (8002368 <getLocation+0x398>)
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff fda7 	bl	8001df8 <strtoke>
 80022aa:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[9][0], parsePointer);
 80022ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022b2:	33dd      	adds	r3, #221	; 0xdd
 80022b4:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 80022b8:	4618      	mov	r0, r3
 80022ba:	f00c fbc2 	bl	800ea42 <strcpy>
	position.elevation = atof(parsePointer);
 80022be:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
 80022c2:	f00b f9a3 	bl	800d60c <atof>
 80022c6:	eeb0 7a40 	vmov.f32	s14, s0
 80022ca:	eef0 7a60 	vmov.f32	s15, s1
 80022ce:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80022d2:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80022d6:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150
	// Altitude units
	parsePointer = strtoke(NULL, ",");
 80022da:	4923      	ldr	r1, [pc, #140]	; (8002368 <getLocation+0x398>)
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff fd8b 	bl	8001df8 <strtoke>
 80022e2:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[10][0], parsePointer);
 80022e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022ea:	33ec      	adds	r3, #236	; 0xec
 80022ec:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00c fba6 	bl	800ea42 <strcpy>
	// Height of mean sea level above WGS-84 earth ellipsoid
	parsePointer = strtoke(NULL, ",");
 80022f6:	491c      	ldr	r1, [pc, #112]	; (8002368 <getLocation+0x398>)
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff fd7d 	bl	8001df8 <strtoke>
 80022fe:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[11][0], parsePointer);
 8002302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002306:	33fb      	adds	r3, #251	; 0xfb
 8002308:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 800230c:	4618      	mov	r0, r3
 800230e:	f00c fb98 	bl	800ea42 <strcpy>
	// Units of the above geoid separation (M for meters)
	parsePointer = strtoke(NULL, ",");
 8002312:	4915      	ldr	r1, [pc, #84]	; (8002368 <getLocation+0x398>)
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff fd6f 	bl	8001df8 <strtoke>
 800231a:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[12][0], parsePointer);
 800231e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002322:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8002326:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 800232a:	4618      	mov	r0, r3
 800232c:	f00c fb89 	bl	800ea42 <strcpy>

	return position;
 8002330:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002334:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800233e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	f44f 73b0 	mov.w	r3, #352	; 0x160
 800234a:	461a      	mov	r2, r3
 800234c:	f00b f9ac 	bl	800d6a8 <memcpy>
}
 8002350:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002354:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	f507 678d 	add.w	r7, r7, #1128	; 0x468
 800235e:	46bd      	mov	sp, r7
 8002360:	bdb0      	pop	{r4, r5, r7, pc}
 8002362:	bf00      	nop
 8002364:	0801633c 	.word	0x0801633c
 8002368:	08016338 	.word	0x08016338
 800236c:	d1b71759 	.word	0xd1b71759
 8002370:	51eb851f 	.word	0x51eb851f

08002374 <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
	if(position>0){
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <prevPos+0x2c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <prevPos+0x1a>
		position--;
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <prevPos+0x2c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3b01      	subs	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <prevPos+0x2c>)
 800238a:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 800238c:	e002      	b.n	8002394 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <prevPos+0x2c>)
 8002390:	2205      	movs	r2, #5
 8002392:	701a      	strb	r2, [r3, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	2000064c 	.word	0x2000064c

080023a4 <nextPos>:

void nextPos(void){
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <nextPos+0x2c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d806      	bhi.n	80023be <nextPos+0x1a>
		position++;
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <nextPos+0x2c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <nextPos+0x2c>)
 80023ba:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 80023bc:	e002      	b.n	80023c4 <nextPos+0x20>
		position=0;
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <nextPos+0x2c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	2000064c 	.word	0x2000064c

080023d4 <nextScreen>:

void nextScreen(void){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	nextPos();
 80023d8:	f7ff ffe4 	bl	80023a4 <nextPos>
	applySelectedScreen();
 80023dc:	f000 f82c 	bl	8002438 <applySelectedScreen>
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <prevScreen>:
void prevScreen(void){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	prevPos();
 80023e8:	f7ff ffc4 	bl	8002374 <prevPos>
	applySelectedScreen();
 80023ec:	f000 f824 	bl	8002438 <applySelectedScreen>
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <resetPos>:
void resetPos(void){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	position=0;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <resetPos+0x14>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 80023fe:	f000 f81b 	bl	8002438 <applySelectedScreen>
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000064c 	.word	0x2000064c

0800240c <guiApplyView>:

void guiApplyView(struct Module *module){
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4a05      	ldr	r2, [pc, #20]	; (8002430 <guiApplyView+0x24>)
 800241a:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <guiApplyView+0x28>)
 8002422:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002424:	f000 f830 	bl	8002488 <selectScreen>
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	2000013c 	.word	0x2000013c
 8002434:	20000138 	.word	0x20000138

08002438 <applySelectedScreen>:

void applySelectedScreen(void){
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <applySelectedScreen+0x40>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	4a0e      	ldr	r2, [pc, #56]	; (800247c <applySelectedScreen+0x44>)
 8002444:	460b      	mov	r3, r1
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	3320      	adds	r3, #32
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <applySelectedScreen+0x48>)
 8002454:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <applySelectedScreen+0x40>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4619      	mov	r1, r3
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <applySelectedScreen+0x44>)
 800245e:	460b      	mov	r3, r1
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	3324      	adds	r3, #36	; 0x24
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a05      	ldr	r2, [pc, #20]	; (8002484 <applySelectedScreen+0x4c>)
 800246e:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002470:	f000 f80a 	bl	8002488 <selectScreen>
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	2000064c 	.word	0x2000064c
 800247c:	20000048 	.word	0x20000048
 8002480:	2000013c 	.word	0x2000013c
 8002484:	20000138 	.word	0x20000138

08002488 <selectScreen>:

void selectScreen(void){
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 800248c:	f7ff f9fe 	bl	800188c <resetButtonHandlers>
	isModuleSet = 0;
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <selectScreen+0x1c>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <selectScreen+0x20>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <selectScreen+0x24>)
 800249c:	6013      	str	r3, [r2, #0]
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000064d 	.word	0x2000064d
 80024a8:	20000138 	.word	0x20000138
 80024ac:	20000140 	.word	0x20000140

080024b0 <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <showGui+0x30>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <showGui+0x18>
		moduleSetupPtr();
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <showGui+0x34>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4798      	blx	r3
		isModuleSet = 1;
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <showGui+0x30>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <showGui+0x38>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <showGui+0x26>
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <showGui+0x38>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4798      	blx	r3
	lcdRefresh();
 80024d6:	f000 ff41 	bl	800335c <lcdRefresh>
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	2000064d 	.word	0x2000064d
 80024e4:	2000013c 	.word	0x2000013c
 80024e8:	20000140 	.word	0x20000140

080024ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <MX_I2C1_Init+0x74>)
 80024f2:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <MX_I2C1_Init+0x78>)
 80024f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <MX_I2C1_Init+0x74>)
 80024f8:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <MX_I2C1_Init+0x7c>)
 80024fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024fc:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_I2C1_Init+0x74>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <MX_I2C1_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_I2C1_Init+0x74>)
 800250a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800250e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <MX_I2C1_Init+0x74>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <MX_I2C1_Init+0x74>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <MX_I2C1_Init+0x74>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <MX_I2C1_Init+0x74>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002528:	480d      	ldr	r0, [pc, #52]	; (8002560 <MX_I2C1_Init+0x74>)
 800252a:	f006 fa59 	bl	80089e0 <HAL_I2C_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002534:	f001 f960 	bl	80037f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002538:	2100      	movs	r1, #0
 800253a:	4809      	ldr	r0, [pc, #36]	; (8002560 <MX_I2C1_Init+0x74>)
 800253c:	f007 fa0f 	bl	800995e <HAL_I2CEx_ConfigAnalogFilter>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002546:	f001 f957 	bl	80037f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800254a:	2100      	movs	r1, #0
 800254c:	4804      	ldr	r0, [pc, #16]	; (8002560 <MX_I2C1_Init+0x74>)
 800254e:	f007 fa42 	bl	80099d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002558:	f001 f94e 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000650 	.word	0x20000650
 8002564:	40005400 	.word	0x40005400
 8002568:	000186a0 	.word	0x000186a0

0800256c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <HAL_I2C_MspInit+0x84>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d12c      	bne.n	80025e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_I2C_MspInit+0x88>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_I2C_MspInit+0x88>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_I2C_MspInit+0x88>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b0:	2312      	movs	r3, #18
 80025b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025bc:	2304      	movs	r3, #4
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	4619      	mov	r1, r3
 80025c6:	480c      	ldr	r0, [pc, #48]	; (80025f8 <HAL_I2C_MspInit+0x8c>)
 80025c8:	f005 ffee 	bl	80085a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_I2C_MspInit+0x88>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_I2C_MspInit+0x88>)
 80025d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025da:	6413      	str	r3, [r2, #64]	; 0x40
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_I2C_MspInit+0x88>)
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025e8:	bf00      	nop
 80025ea:	3728      	adds	r7, #40	; 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40005400 	.word	0x40005400
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020400 	.word	0x40020400

080025fc <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8002606:	2307      	movs	r3, #7
 8002608:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8002616:	e010      	b.n	800263a <reverse_uint8+0x3e>
		result = result << 1;
 8002618:	7bbb      	ldrb	r3, [r7, #14]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 800262c:	7bba      	ldrb	r2, [r7, #14]
 800262e:	7b7b      	ldrb	r3, [r7, #13]
 8002630:	4313      	orrs	r3, r2
 8002632:	73bb      	strb	r3, [r7, #14]
		times--;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	3b01      	subs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1eb      	bne.n	8002618 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002640:	7bbb      	ldrb	r3, [r7, #14]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002656:	2000      	movs	r0, #0
 8002658:	f000 f824 	bl	80026a4 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 800265c:	2300      	movs	r3, #0
 800265e:	71fb      	strb	r3, [r7, #7]
 8002660:	e014      	b.n	800268c <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002662:	2300      	movs	r3, #0
 8002664:	80bb      	strh	r3, [r7, #4]
 8002666:	e00b      	b.n	8002680 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2232      	movs	r2, #50	; 0x32
 800266c:	fb03 f202 	mul.w	r2, r3, r2
 8002670:	88bb      	ldrh	r3, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <lcdClearBuffer+0x50>)
 8002676:	21ff      	movs	r1, #255	; 0xff
 8002678:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 800267a:	88bb      	ldrh	r3, [r7, #4]
 800267c:	3301      	adds	r3, #1
 800267e:	80bb      	strh	r3, [r7, #4]
 8002680:	88bb      	ldrh	r3, [r7, #4]
 8002682:	2b31      	cmp	r3, #49	; 0x31
 8002684:	d9f0      	bls.n	8002668 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	3301      	adds	r3, #1
 800268a:	71fb      	strb	r3, [r7, #7]
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	2bef      	cmp	r3, #239	; 0xef
 8002690:	d9e7      	bls.n	8002662 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002692:	2001      	movs	r0, #1
 8002694:	f000 f806 	bl	80026a4 <updateSetting>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200006a8 	.word	0x200006a8

080026a4 <updateSetting>:

void updateSetting(uint8_t state){
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <updateSetting+0x1c>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	7013      	strb	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	20000144 	.word	0x20000144

080026c4 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4603      	mov	r3, r0
 80026ce:	80fb      	strh	r3, [r7, #6]
 80026d0:	460b      	mov	r3, r1
 80026d2:	717b      	strb	r3, [r7, #5]
 80026d4:	4613      	mov	r3, r2
 80026d6:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	795b      	ldrb	r3, [r3, #5]
 80026dc:	793a      	ldrb	r2, [r7, #4]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d304      	bcc.n	80026ec <lcdPutChar+0x28>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	799b      	ldrb	r3, [r3, #6]
 80026e6:	793a      	ldrb	r2, [r7, #4]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d902      	bls.n	80026f2 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	79db      	ldrb	r3, [r3, #7]
 80026f0:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	08db      	lsrs	r3, r3, #3
 8002700:	b29b      	uxth	r3, r3
 8002702:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	885b      	ldrh	r3, [r3, #2]
 8002708:	461a      	mov	r2, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	785b      	ldrb	r3, [r3, #1]
 800270e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002712:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002714:	2300      	movs	r3, #0
 8002716:	75fb      	strb	r3, [r7, #23]
 8002718:	e09b      	b.n	8002852 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 800271a:	797a      	ldrb	r2, [r7, #5]
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	4413      	add	r3, r2
 8002720:	b29b      	uxth	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	0092      	lsls	r2, r2, #2
 8002726:	4413      	add	r3, r2
 8002728:	461a      	mov	r2, r3
 800272a:	0091      	lsls	r1, r2, #2
 800272c:	461a      	mov	r2, r3
 800272e:	460b      	mov	r3, r1
 8002730:	4413      	add	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	b29b      	uxth	r3, r3
 800273a:	4413      	add	r3, r2
 800273c:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 800273e:	793b      	ldrb	r3, [r7, #4]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	7952      	ldrb	r2, [r2, #5]
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	8852      	ldrh	r2, [r2, #2]
 800274a:	fb03 f202 	mul.w	r2, r3, r2
 800274e:	7dfb      	ldrb	r3, [r7, #23]
 8002750:	7cb9      	ldrb	r1, [r7, #18]
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	3308      	adds	r3, #8
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	7d3b      	ldrb	r3, [r7, #20]
 8002768:	fa42 f303 	asr.w	r3, r2, r3
 800276c:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 800276e:	8a3b      	ldrh	r3, [r7, #16]
 8002770:	4a3e      	ldr	r2, [pc, #248]	; (800286c <lcdPutChar+0x1a8>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	b25a      	sxtb	r2, r3
 8002776:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800277a:	43db      	mvns	r3, r3
 800277c:	b25b      	sxtb	r3, r3
 800277e:	4013      	ands	r3, r2
 8002780:	b25a      	sxtb	r2, r3
 8002782:	8a3b      	ldrh	r3, [r7, #16]
 8002784:	b2d1      	uxtb	r1, r2
 8002786:	4a39      	ldr	r2, [pc, #228]	; (800286c <lcdPutChar+0x1a8>)
 8002788:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	3308      	adds	r3, #8
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b25a      	sxtb	r2, r3
 8002796:	7d3b      	ldrb	r3, [r7, #20]
 8002798:	f1c3 0308 	rsb	r3, r3, #8
 800279c:	21ff      	movs	r1, #255	; 0xff
 800279e:	fa41 f303 	asr.w	r3, r1, r3
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	4013      	ands	r3, r2
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80027aa:	2301      	movs	r3, #1
 80027ac:	757b      	strb	r3, [r7, #21]
 80027ae:	e029      	b.n	8002804 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 80027b0:	7d7a      	ldrb	r2, [r7, #21]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4413      	add	r3, r2
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	7a1b      	ldrb	r3, [r3, #8]
 80027bc:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80027be:	8a3a      	ldrh	r2, [r7, #16]
 80027c0:	7d7b      	ldrb	r3, [r7, #21]
 80027c2:	4413      	add	r3, r2
 80027c4:	4a29      	ldr	r2, [pc, #164]	; (800286c <lcdPutChar+0x1a8>)
 80027c6:	5cd3      	ldrb	r3, [r2, r3]
 80027c8:	b25a      	sxtb	r2, r3
 80027ca:	7db9      	ldrb	r1, [r7, #22]
 80027cc:	7d3b      	ldrb	r3, [r7, #20]
 80027ce:	f1c3 0308 	rsb	r3, r3, #8
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	b259      	sxtb	r1, r3
 80027d8:	7af8      	ldrb	r0, [r7, #11]
 80027da:	7d3b      	ldrb	r3, [r7, #20]
 80027dc:	fa40 f303 	asr.w	r3, r0, r3
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	430b      	orrs	r3, r1
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	4013      	ands	r3, r2
 80027ec:	b259      	sxtb	r1, r3
 80027ee:	8a3a      	ldrh	r2, [r7, #16]
 80027f0:	7d7b      	ldrb	r3, [r7, #21]
 80027f2:	4413      	add	r3, r2
 80027f4:	b2c9      	uxtb	r1, r1
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <lcdPutChar+0x1a8>)
 80027f8:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80027fe:	7d7b      	ldrb	r3, [r7, #21]
 8002800:	3301      	adds	r3, #1
 8002802:	757b      	strb	r3, [r7, #21]
 8002804:	7d7a      	ldrb	r2, [r7, #21]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	3307      	adds	r3, #7
 800280c:	10db      	asrs	r3, r3, #3
 800280e:	429a      	cmp	r2, r3
 8002810:	dbce      	blt.n	80027b0 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002812:	8a3a      	ldrh	r2, [r7, #16]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	3307      	adds	r3, #7
 800281a:	10db      	asrs	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <lcdPutChar+0x1a8>)
 8002820:	5cd3      	ldrb	r3, [r2, r3]
 8002822:	b25a      	sxtb	r2, r3
 8002824:	7db9      	ldrb	r1, [r7, #22]
 8002826:	7d3b      	ldrb	r3, [r7, #20]
 8002828:	f1c3 0308 	rsb	r3, r3, #8
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	b25b      	sxtb	r3, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	b25b      	sxtb	r3, r3
 8002836:	4013      	ands	r3, r2
 8002838:	b259      	sxtb	r1, r3
 800283a:	8a3a      	ldrh	r2, [r7, #16]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	3307      	adds	r3, #7
 8002842:	10db      	asrs	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	b2c9      	uxtb	r1, r1
 8002848:	4a08      	ldr	r2, [pc, #32]	; (800286c <lcdPutChar+0x1a8>)
 800284a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	3301      	adds	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	785b      	ldrb	r3, [r3, #1]
 8002856:	7dfa      	ldrb	r2, [r7, #23]
 8002858:	429a      	cmp	r2, r3
 800285a:	f4ff af5e 	bcc.w	800271a <lcdPutChar+0x56>
	}
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	200006a8 	.word	0x200006a8

08002870 <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60ba      	str	r2, [r7, #8]
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	4603      	mov	r3, r0
 800287c:	81fb      	strh	r3, [r7, #14]
 800287e:	460b      	mov	r3, r1
 8002880:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]
 8002886:	e015      	b.n	80028b4 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b29a      	uxth	r2, r3
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	b29b      	uxth	r3, r3
 8002892:	fb12 f303 	smulbb	r3, r2, r3
 8002896:	b29a      	uxth	r2, r3
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	4413      	add	r3, r2
 800289c:	b298      	uxth	r0, r3
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	4413      	add	r3, r2
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	7b79      	ldrb	r1, [r7, #13]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f7ff ff0b 	bl	80026c4 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	3301      	adds	r3, #1
 80028b2:	75fb      	strb	r3, [r7, #23]
 80028b4:	7dfc      	ldrb	r4, [r7, #23]
 80028b6:	68b8      	ldr	r0, [r7, #8]
 80028b8:	f7fd fc9a 	bl	80001f0 <strlen>
 80028bc:	4603      	mov	r3, r0
 80028be:	429c      	cmp	r4, r3
 80028c0:	d3e2      	bcc.n	8002888 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd90      	pop	{r4, r7, pc}

080028cc <lcdVLine>:
void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 80028cc:	b490      	push	{r4, r7}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4604      	mov	r4, r0
 80028d4:	4608      	mov	r0, r1
 80028d6:	4611      	mov	r1, r2
 80028d8:	461a      	mov	r2, r3
 80028da:	4623      	mov	r3, r4
 80028dc:	80fb      	strh	r3, [r7, #6]
 80028de:	4603      	mov	r3, r0
 80028e0:	80bb      	strh	r3, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	70fb      	strb	r3, [r7, #3]
 80028e6:	4613      	mov	r3, r2
 80028e8:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	08db      	lsrs	r3, r3, #3
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	733b      	strb	r3, [r7, #12]
	for(uint8_t y = y1; y <= y2; y++){
 80028fc:	88bb      	ldrh	r3, [r7, #4]
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e04e      	b.n	80029a0 <lcdVLine+0xd4>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2232      	movs	r2, #50	; 0x32
 8002906:	fb03 f202 	mul.w	r2, r3, r2
 800290a:	7b7b      	ldrb	r3, [r7, #13]
 800290c:	4413      	add	r3, r2
 800290e:	4a29      	ldr	r2, [pc, #164]	; (80029b4 <lcdVLine+0xe8>)
 8002910:	5cd3      	ldrb	r3, [r2, r3]
 8002912:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 8002914:	78bb      	ldrb	r3, [r7, #2]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d01e      	beq.n	8002958 <lcdVLine+0x8c>
 800291a:	2b02      	cmp	r3, #2
 800291c:	dc27      	bgt.n	800296e <lcdVLine+0xa2>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <lcdVLine+0x5c>
 8002922:	2b01      	cmp	r3, #1
 8002924:	d00b      	beq.n	800293e <lcdVLine+0x72>
 8002926:	e022      	b.n	800296e <lcdVLine+0xa2>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8002928:	7b3b      	ldrb	r3, [r7, #12]
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	fa42 f303 	asr.w	r3, r2, r3
 8002930:	b25a      	sxtb	r2, r3
 8002932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002936:	4313      	orrs	r3, r2
 8002938:	b25b      	sxtb	r3, r3
 800293a:	73bb      	strb	r3, [r7, #14]
				break;
 800293c:	e024      	b.n	8002988 <lcdVLine+0xbc>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 800293e:	7b3b      	ldrb	r3, [r7, #12]
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	fa42 f303 	asr.w	r3, r2, r3
 8002946:	b25b      	sxtb	r3, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	b25a      	sxtb	r2, r3
 800294c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002950:	4013      	ands	r3, r2
 8002952:	b25b      	sxtb	r3, r3
 8002954:	73bb      	strb	r3, [r7, #14]
				break;
 8002956:	e017      	b.n	8002988 <lcdVLine+0xbc>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8002958:	7b3b      	ldrb	r3, [r7, #12]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	fa42 f303 	asr.w	r3, r2, r3
 8002960:	b25a      	sxtb	r2, r3
 8002962:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002966:	4053      	eors	r3, r2
 8002968:	b25b      	sxtb	r3, r3
 800296a:	73bb      	strb	r3, [r7, #14]
				break;
 800296c:	e00c      	b.n	8002988 <lcdVLine+0xbc>
			default:
				content &= ~(0b10000000 >> offset);
 800296e:	7b3b      	ldrb	r3, [r7, #12]
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	fa42 f303 	asr.w	r3, r2, r3
 8002976:	b25b      	sxtb	r3, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	b25a      	sxtb	r2, r3
 800297c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002980:	4013      	ands	r3, r2
 8002982:	b25b      	sxtb	r3, r3
 8002984:	73bb      	strb	r3, [r7, #14]
				break;
 8002986:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2232      	movs	r2, #50	; 0x32
 800298c:	fb03 f202 	mul.w	r2, r3, r2
 8002990:	7b7b      	ldrb	r3, [r7, #13]
 8002992:	4413      	add	r3, r2
 8002994:	4907      	ldr	r1, [pc, #28]	; (80029b4 <lcdVLine+0xe8>)
 8002996:	7bba      	ldrb	r2, [r7, #14]
 8002998:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	3301      	adds	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d9ac      	bls.n	8002902 <lcdVLine+0x36>
	}
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc90      	pop	{r4, r7}
 80029b2:	4770      	bx	lr
 80029b4:	200006a8 	.word	0x200006a8

080029b8 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80029b8:	b490      	push	{r4, r7}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4604      	mov	r4, r0
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	4623      	mov	r3, r4
 80029c8:	80fb      	strh	r3, [r7, #6]
 80029ca:	4603      	mov	r3, r0
 80029cc:	80bb      	strh	r3, [r7, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	70fb      	strb	r3, [r7, #3]
 80029d2:	4613      	mov	r3, r2
 80029d4:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 80029d6:	23ff      	movs	r3, #255	; 0xff
 80029d8:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 80029da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029de:	2b14      	cmp	r3, #20
 80029e0:	f200 8208 	bhi.w	8002df4 <lcdHLine2+0x43c>
 80029e4:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <lcdHLine2+0x34>)
 80029e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ea:	bf00      	nop
 80029ec:	08002a41 	.word	0x08002a41
 80029f0:	08002a47 	.word	0x08002a47
 80029f4:	08002a4d 	.word	0x08002a4d
 80029f8:	08002a53 	.word	0x08002a53
 80029fc:	08002a6b 	.word	0x08002a6b
 8002a00:	08002a83 	.word	0x08002a83
 8002a04:	08002a9b 	.word	0x08002a9b
 8002a08:	08002ae5 	.word	0x08002ae5
 8002a0c:	08002b29 	.word	0x08002b29
 8002a10:	08002b6d 	.word	0x08002b6d
 8002a14:	08002bab 	.word	0x08002bab
 8002a18:	08002bd1 	.word	0x08002bd1
 8002a1c:	08002bfb 	.word	0x08002bfb
 8002a20:	08002c31 	.word	0x08002c31
 8002a24:	08002c49 	.word	0x08002c49
 8002a28:	08002c6f 	.word	0x08002c6f
 8002a2c:	08002ca5 	.word	0x08002ca5
 8002a30:	08002cdb 	.word	0x08002cdb
 8002a34:	08002d1d 	.word	0x08002d1d
 8002a38:	08002d77 	.word	0x08002d77
 8002a3c:	08002db3 	.word	0x08002db3
		case 0:	// clear
			pattern = 0x00;
 8002a40:	2300      	movs	r3, #0
 8002a42:	75fb      	strb	r3, [r7, #23]
			break;
 8002a44:	e1ea      	b.n	8002e1c <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 8002a46:	23ff      	movs	r3, #255	; 0xff
 8002a48:	75fb      	strb	r3, [r7, #23]
			break;
 8002a4a:	e1e7      	b.n	8002e1c <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8002a4c:	2355      	movs	r3, #85	; 0x55
 8002a4e:	75fb      	strb	r3, [r7, #23]
			break;
 8002a50:	e1e4      	b.n	8002e1c <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <lcdHLine2+0xac>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 8002a62:	e1db      	b.n	8002e1c <lcdHLine2+0x464>
			else pattern = 0xFF;
 8002a64:	23ff      	movs	r3, #255	; 0xff
 8002a66:	75fb      	strb	r3, [r7, #23]
			break;
 8002a68:	e1d8      	b.n	8002e1c <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <lcdHLine2+0xc4>
 8002a76:	23aa      	movs	r3, #170	; 0xaa
 8002a78:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 8002a7a:	e1cf      	b.n	8002e1c <lcdHLine2+0x464>
			else pattern = 0x55;
 8002a7c:	2355      	movs	r3, #85	; 0x55
 8002a7e:	75fb      	strb	r3, [r7, #23]
			break;
 8002a80:	e1cc      	b.n	8002e1c <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <lcdHLine2+0xdc>
 8002a8e:	2388      	movs	r3, #136	; 0x88
 8002a90:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 8002a92:	e1c3      	b.n	8002e1c <lcdHLine2+0x464>
			else pattern = 0b00100010;
 8002a94:	2322      	movs	r3, #34	; 0x22
 8002a96:	75fb      	strb	r3, [r7, #23]
			break;
 8002a98:	e1c0      	b.n	8002e1c <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <lcdHLine2+0xf4>
 8002aa6:	2388      	movs	r3, #136	; 0x88
 8002aa8:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8002aaa:	e1a6      	b.n	8002dfa <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d102      	bne.n	8002abe <lcdHLine2+0x106>
 8002ab8:	2344      	movs	r3, #68	; 0x44
 8002aba:	75fb      	strb	r3, [r7, #23]
			break;
 8002abc:	e19d      	b.n	8002dfa <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d102      	bne.n	8002ad0 <lcdHLine2+0x118>
 8002aca:	2322      	movs	r3, #34	; 0x22
 8002acc:	75fb      	strb	r3, [r7, #23]
			break;
 8002ace:	e194      	b.n	8002dfa <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	f040 818e 	bne.w	8002dfa <lcdHLine2+0x442>
 8002ade:	2311      	movs	r3, #17
 8002ae0:	75fb      	strb	r3, [r7, #23]
			break;
 8002ae2:	e18a      	b.n	8002dfa <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <lcdHLine2+0x144>
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d102      	bne.n	8002b02 <lcdHLine2+0x14a>
 8002afc:	23aa      	movs	r3, #170	; 0xaa
 8002afe:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8002b00:	e17d      	b.n	8002dfe <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d102      	bne.n	8002b14 <lcdHLine2+0x15c>
 8002b0e:	2322      	movs	r3, #34	; 0x22
 8002b10:	75fb      	strb	r3, [r7, #23]
			break;
 8002b12:	e174      	b.n	8002dfe <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	f040 816e 	bne.w	8002dfe <lcdHLine2+0x446>
 8002b22:	2388      	movs	r3, #136	; 0x88
 8002b24:	75fb      	strb	r3, [r7, #23]
			break;
 8002b26:	e16a      	b.n	8002dfe <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d005      	beq.n	8002b40 <lcdHLine2+0x188>
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d102      	bne.n	8002b46 <lcdHLine2+0x18e>
 8002b40:	2355      	movs	r3, #85	; 0x55
 8002b42:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 8002b44:	e15d      	b.n	8002e02 <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d102      	bne.n	8002b58 <lcdHLine2+0x1a0>
 8002b52:	2388      	movs	r3, #136	; 0x88
 8002b54:	75fb      	strb	r3, [r7, #23]
			break;
 8002b56:	e154      	b.n	8002e02 <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	f040 814e 	bne.w	8002e02 <lcdHLine2+0x44a>
 8002b66:	2322      	movs	r3, #34	; 0x22
 8002b68:	75fb      	strb	r3, [r7, #23]
			break;
 8002b6a:	e14a      	b.n	8002e02 <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <lcdHLine2+0x1cc>
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <lcdHLine2+0x1d2>
 8002b84:	23cc      	movs	r3, #204	; 0xcc
 8002b86:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 8002b88:	e13d      	b.n	8002e06 <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d006      	beq.n	8002ba4 <lcdHLine2+0x1ec>
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	f040 8131 	bne.w	8002e06 <lcdHLine2+0x44e>
 8002ba4:	2333      	movs	r3, #51	; 0x33
 8002ba6:	75fb      	strb	r3, [r7, #23]
			break;
 8002ba8:	e12d      	b.n	8002e06 <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <lcdHLine2+0x204>
 8002bb6:	2355      	movs	r3, #85	; 0x55
 8002bb8:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 8002bba:	e126      	b.n	8002e0a <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8120 	beq.w	8002e0a <lcdHLine2+0x452>
 8002bca:	23ff      	movs	r3, #255	; 0xff
 8002bcc:	75fb      	strb	r3, [r7, #23]
			break;
 8002bce:	e11c      	b.n	8002e0a <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <lcdHLine2+0x22a>
 8002bdc:	23cc      	movs	r3, #204	; 0xcc
 8002bde:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002be0:	e11c      	b.n	8002e1c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d102      	bne.n	8002bf4 <lcdHLine2+0x23c>
 8002bee:	2344      	movs	r3, #68	; 0x44
 8002bf0:	75fb      	strb	r3, [r7, #23]
			break;
 8002bf2:	e113      	b.n	8002e1c <lcdHLine2+0x464>
			else pattern = 0x00;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	75fb      	strb	r3, [r7, #23]
			break;
 8002bf8:	e110      	b.n	8002e1c <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <lcdHLine2+0x254>
 8002c06:	23ee      	movs	r3, #238	; 0xee
 8002c08:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 8002c0a:	e107      	b.n	8002e1c <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d005      	beq.n	8002c24 <lcdHLine2+0x26c>
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d102      	bne.n	8002c2a <lcdHLine2+0x272>
 8002c24:	2322      	movs	r3, #34	; 0x22
 8002c26:	75fb      	strb	r3, [r7, #23]
			break;
 8002c28:	e0f8      	b.n	8002e1c <lcdHLine2+0x464>
			else pattern = 0x00;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]
			break;
 8002c2e:	e0f5      	b.n	8002e1c <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <lcdHLine2+0x28a>
 8002c3c:	23ff      	movs	r3, #255	; 0xff
 8002c3e:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8002c40:	e0ec      	b.n	8002e1c <lcdHLine2+0x464>
			else pattern = 0b10001000;
 8002c42:	2388      	movs	r3, #136	; 0x88
 8002c44:	75fb      	strb	r3, [r7, #23]
			break;
 8002c46:	e0e9      	b.n	8002e1c <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <lcdHLine2+0x2a2>
 8002c54:	23aa      	movs	r3, #170	; 0xaa
 8002c56:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8002c58:	e0d9      	b.n	8002e0e <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80d3 	beq.w	8002e0e <lcdHLine2+0x456>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	75fb      	strb	r3, [r7, #23]
			break;
 8002c6c:	e0cf      	b.n	8002e0e <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <lcdHLine2+0x2ce>
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d102      	bne.n	8002c8c <lcdHLine2+0x2d4>
 8002c86:	23aa      	movs	r3, #170	; 0xaa
 8002c88:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002c8a:	e0c7      	b.n	8002e1c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <lcdHLine2+0x2e6>
 8002c98:	2344      	movs	r3, #68	; 0x44
 8002c9a:	75fb      	strb	r3, [r7, #23]
			break;
 8002c9c:	e0be      	b.n	8002e1c <lcdHLine2+0x464>
			else pattern = 0x00;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]
			break;
 8002ca2:	e0bb      	b.n	8002e1c <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <lcdHLine2+0x304>
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d102      	bne.n	8002cc2 <lcdHLine2+0x30a>
 8002cbc:	23ee      	movs	r3, #238	; 0xee
 8002cbe:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 8002cc0:	e0ac      	b.n	8002e1c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <lcdHLine2+0x31c>
 8002cce:	23aa      	movs	r3, #170	; 0xaa
 8002cd0:	75fb      	strb	r3, [r7, #23]
			break;
 8002cd2:	e0a3      	b.n	8002e1c <lcdHLine2+0x464>
			else pattern = 0x00;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	75fb      	strb	r3, [r7, #23]
			break;
 8002cd8:	e0a0      	b.n	8002e1c <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <lcdHLine2+0x33a>
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d102      	bne.n	8002cf8 <lcdHLine2+0x340>
 8002cf2:	2344      	movs	r3, #68	; 0x44
 8002cf4:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8002cf6:	e08c      	b.n	8002e12 <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d102      	bne.n	8002d0a <lcdHLine2+0x352>
 8002d04:	23aa      	movs	r3, #170	; 0xaa
 8002d06:	75fb      	strb	r3, [r7, #23]
			break;
 8002d08:	e083      	b.n	8002e12 <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d17d      	bne.n	8002e12 <lcdHLine2+0x45a>
 8002d16:	2311      	movs	r3, #17
 8002d18:	75fb      	strb	r3, [r7, #23]
			break;
 8002d1a:	e07a      	b.n	8002e12 <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	4baf      	ldr	r3, [pc, #700]	; (8002fdc <lcdHLine2+0x624>)
 8002d20:	fba3 1302 	umull	r1, r3, r3, r2
 8002d24:	0859      	lsrs	r1, r3, #1
 8002d26:	460b      	mov	r3, r1
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	440b      	add	r3, r1
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <lcdHLine2+0x382>
 8002d34:	2355      	movs	r3, #85	; 0x55
 8002d36:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8002d38:	e06d      	b.n	8002e16 <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	4ba7      	ldr	r3, [pc, #668]	; (8002fdc <lcdHLine2+0x624>)
 8002d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d42:	0859      	lsrs	r1, r3, #1
 8002d44:	460b      	mov	r3, r1
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	440b      	add	r3, r1
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d102      	bne.n	8002d58 <lcdHLine2+0x3a0>
 8002d52:	23aa      	movs	r3, #170	; 0xaa
 8002d54:	75fb      	strb	r3, [r7, #23]
			break;
 8002d56:	e05e      	b.n	8002e16 <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	4ba0      	ldr	r3, [pc, #640]	; (8002fdc <lcdHLine2+0x624>)
 8002d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d60:	0859      	lsrs	r1, r3, #1
 8002d62:	460b      	mov	r3, r1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	440b      	add	r3, r1
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d152      	bne.n	8002e16 <lcdHLine2+0x45e>
 8002d70:	2300      	movs	r3, #0
 8002d72:	75fb      	strb	r3, [r7, #23]
			break;
 8002d74:	e04f      	b.n	8002e16 <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <lcdHLine2+0x3d0>
 8002d82:	2322      	movs	r3, #34	; 0x22
 8002d84:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 8002d86:	e049      	b.n	8002e1c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d102      	bne.n	8002d9a <lcdHLine2+0x3e2>
 8002d94:	2355      	movs	r3, #85	; 0x55
 8002d96:	75fb      	strb	r3, [r7, #23]
			break;
 8002d98:	e040      	b.n	8002e1c <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d102      	bne.n	8002dac <lcdHLine2+0x3f4>
 8002da6:	2388      	movs	r3, #136	; 0x88
 8002da8:	75fb      	strb	r3, [r7, #23]
			break;
 8002daa:	e037      	b.n	8002e1c <lcdHLine2+0x464>
			else pattern = 0x00;
 8002dac:	2300      	movs	r3, #0
 8002dae:	75fb      	strb	r3, [r7, #23]
			break;
 8002db0:	e034      	b.n	8002e1c <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d005      	beq.n	8002dca <lcdHLine2+0x412>
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d102      	bne.n	8002dd0 <lcdHLine2+0x418>
 8002dca:	2388      	movs	r3, #136	; 0x88
 8002dcc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 8002dce:	e024      	b.n	8002e1a <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d102      	bne.n	8002de2 <lcdHLine2+0x42a>
 8002ddc:	2377      	movs	r3, #119	; 0x77
 8002dde:	75fb      	strb	r3, [r7, #23]
			break;
 8002de0:	e01b      	b.n	8002e1a <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d115      	bne.n	8002e1a <lcdHLine2+0x462>
 8002dee:	23aa      	movs	r3, #170	; 0xaa
 8002df0:	75fb      	strb	r3, [r7, #23]
			break;
 8002df2:	e012      	b.n	8002e1a <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 8002df4:	2300      	movs	r3, #0
 8002df6:	75fb      	strb	r3, [r7, #23]
			break;
 8002df8:	e010      	b.n	8002e1c <lcdHLine2+0x464>
			break;
 8002dfa:	bf00      	nop
 8002dfc:	e00e      	b.n	8002e1c <lcdHLine2+0x464>
			break;
 8002dfe:	bf00      	nop
 8002e00:	e00c      	b.n	8002e1c <lcdHLine2+0x464>
			break;
 8002e02:	bf00      	nop
 8002e04:	e00a      	b.n	8002e1c <lcdHLine2+0x464>
			break;
 8002e06:	bf00      	nop
 8002e08:	e008      	b.n	8002e1c <lcdHLine2+0x464>
			break;
 8002e0a:	bf00      	nop
 8002e0c:	e006      	b.n	8002e1c <lcdHLine2+0x464>
			break;
 8002e0e:	bf00      	nop
 8002e10:	e004      	b.n	8002e1c <lcdHLine2+0x464>
			break;
 8002e12:	bf00      	nop
 8002e14:	e002      	b.n	8002e1c <lcdHLine2+0x464>
			break;
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <lcdHLine2+0x464>
			break;
 8002e1a:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	08db      	lsrs	r3, r3, #3
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 8002e2e:	88bb      	ldrh	r3, [r7, #4]
 8002e30:	08db      	lsrs	r3, r3, #3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 8002e36:	88bb      	ldrh	r3, [r7, #4]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	2232      	movs	r2, #50	; 0x32
 8002e44:	fb03 f202 	mul.w	r2, r3, r2
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a64      	ldr	r2, [pc, #400]	; (8002fe0 <lcdHLine2+0x628>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	2232      	movs	r2, #50	; 0x32
 8002e56:	fb03 f202 	mul.w	r2, r3, r2
 8002e5a:	7b7b      	ldrb	r3, [r7, #13]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	4a60      	ldr	r2, [pc, #384]	; (8002fe0 <lcdHLine2+0x628>)
 8002e60:	5cd3      	ldrb	r3, [r2, r3]
 8002e62:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 8002e64:	23ff      	movs	r3, #255	; 0xff
 8002e66:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 8002e68:	7bbb      	ldrb	r3, [r7, #14]
 8002e6a:	f1c3 0208 	rsb	r2, r3, #8
 8002e6e:	88b9      	ldrh	r1, [r7, #4]
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	1acb      	subs	r3, r1, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	429a      	cmp	r2, r3
 8002e78:	dd11      	ble.n	8002e9e <lcdHLine2+0x4e6>
 8002e7a:	88ba      	ldrh	r2, [r7, #4]
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	3301      	adds	r3, #1
 8002e82:	22ff      	movs	r2, #255	; 0xff
 8002e84:	fa42 f303 	asr.w	r3, r2, r3
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	7bbb      	ldrb	r3, [r7, #14]
 8002e8c:	fa42 f303 	asr.w	r3, r2, r3
 8002e90:	b25a      	sxtb	r2, r3
 8002e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e96:	4013      	ands	r3, r2
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	753b      	strb	r3, [r7, #20]
 8002e9c:	e001      	b.n	8002ea2 <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	753b      	strb	r3, [r7, #20]
		switch(mode){
 8002ea2:	78bb      	ldrb	r3, [r7, #2]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	f200 8130 	bhi.w	800310a <lcdHLine2+0x752>
 8002eaa:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <lcdHLine2+0x4f8>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002ec1 	.word	0x08002ec1
 8002eb4:	08002f45 	.word	0x08002f45
 8002eb8:	08002fe5 	.word	0x08002fe5
 8002ebc:	08003069 	.word	0x08003069
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 8002ec0:	7bbb      	ldrb	r3, [r7, #14]
 8002ec2:	22ff      	movs	r2, #255	; 0xff
 8002ec4:	fa42 f303 	asr.w	r3, r2, r3
 8002ec8:	b25a      	sxtb	r2, r3
 8002eca:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	b25a      	sxtb	r2, r3
 8002ed2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	b25b      	sxtb	r3, r3
 8002eda:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 8002edc:	7b3b      	ldrb	r3, [r7, #12]
 8002ede:	f1c3 0307 	rsb	r3, r3, #7
 8002ee2:	22ff      	movs	r2, #255	; 0xff
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	b25a      	sxtb	r2, r3
 8002eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	b25a      	sxtb	r2, r3
 8002ef2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002efc:	2301      	movs	r3, #1
 8002efe:	74fb      	strb	r3, [r7, #19]
 8002f00:	e019      	b.n	8002f36 <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	2232      	movs	r2, #50	; 0x32
 8002f06:	fb03 f202 	mul.w	r2, r3, r2
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	441a      	add	r2, r3
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	4413      	add	r3, r2
 8002f12:	4a33      	ldr	r2, [pc, #204]	; (8002fe0 <lcdHLine2+0x628>)
 8002f14:	5cd1      	ldrb	r1, [r2, r3]
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	2232      	movs	r2, #50	; 0x32
 8002f1a:	fb03 f202 	mul.w	r2, r3, r2
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	441a      	add	r2, r3
 8002f22:	7cfb      	ldrb	r3, [r7, #19]
 8002f24:	4413      	add	r3, r2
 8002f26:	7dfa      	ldrb	r2, [r7, #23]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	b2d1      	uxtb	r1, r2
 8002f2c:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <lcdHLine2+0x628>)
 8002f2e:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	3301      	adds	r3, #1
 8002f34:	74fb      	strb	r3, [r7, #19]
 8002f36:	7cfa      	ldrb	r2, [r7, #19]
 8002f38:	7b79      	ldrb	r1, [r7, #13]
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	1acb      	subs	r3, r1, r3
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	dbdf      	blt.n	8002f02 <lcdHLine2+0x54a>
			}
			break;
 8002f42:	e0e2      	b.n	800310a <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8002f44:	7bbb      	ldrb	r3, [r7, #14]
 8002f46:	22ff      	movs	r2, #255	; 0xff
 8002f48:	fa42 f303 	asr.w	r3, r2, r3
 8002f4c:	b25a      	sxtb	r2, r3
 8002f4e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002f52:	4013      	ands	r3, r2
 8002f54:	b25b      	sxtb	r3, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	b25a      	sxtb	r2, r3
 8002f5a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	b25b      	sxtb	r3, r3
 8002f62:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 8002f64:	7b3b      	ldrb	r3, [r7, #12]
 8002f66:	f1c3 0307 	rsb	r3, r3, #7
 8002f6a:	22ff      	movs	r2, #255	; 0xff
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	b25a      	sxtb	r2, r3
 8002f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002f82:	4013      	ands	r3, r2
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002f88:	2301      	movs	r3, #1
 8002f8a:	74bb      	strb	r3, [r7, #18]
 8002f8c:	e01e      	b.n	8002fcc <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	2232      	movs	r2, #50	; 0x32
 8002f92:	fb03 f202 	mul.w	r2, r3, r2
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	441a      	add	r2, r3
 8002f9a:	7cbb      	ldrb	r3, [r7, #18]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	4a10      	ldr	r2, [pc, #64]	; (8002fe0 <lcdHLine2+0x628>)
 8002fa0:	5cd3      	ldrb	r3, [r2, r3]
 8002fa2:	b25a      	sxtb	r2, r3
 8002fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	4013      	ands	r3, r2
 8002fae:	b259      	sxtb	r1, r3
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	2232      	movs	r2, #50	; 0x32
 8002fb4:	fb03 f202 	mul.w	r2, r3, r2
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	441a      	add	r2, r3
 8002fbc:	7cbb      	ldrb	r3, [r7, #18]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b2c9      	uxtb	r1, r1
 8002fc2:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <lcdHLine2+0x628>)
 8002fc4:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002fc6:	7cbb      	ldrb	r3, [r7, #18]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	74bb      	strb	r3, [r7, #18]
 8002fcc:	7cba      	ldrb	r2, [r7, #18]
 8002fce:	7b79      	ldrb	r1, [r7, #13]
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	1acb      	subs	r3, r1, r3
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	dbda      	blt.n	8002f8e <lcdHLine2+0x5d6>
			}
			break;
 8002fd8:	e097      	b.n	800310a <lcdHLine2+0x752>
 8002fda:	bf00      	nop
 8002fdc:	aaaaaaab 	.word	0xaaaaaaab
 8002fe0:	200006a8 	.word	0x200006a8
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 8002fe4:	7bbb      	ldrb	r3, [r7, #14]
 8002fe6:	22ff      	movs	r2, #255	; 0xff
 8002fe8:	fa42 f303 	asr.w	r3, r2, r3
 8002fec:	b25a      	sxtb	r2, r3
 8002fee:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b25a      	sxtb	r2, r3
 8002ff6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002ffa:	4053      	eors	r3, r2
 8002ffc:	b25b      	sxtb	r3, r3
 8002ffe:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8003000:	7b3b      	ldrb	r3, [r7, #12]
 8003002:	f1c3 0307 	rsb	r3, r3, #7
 8003006:	22ff      	movs	r2, #255	; 0xff
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	b25a      	sxtb	r2, r3
 800300e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003012:	4013      	ands	r3, r2
 8003014:	b25a      	sxtb	r2, r3
 8003016:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800301a:	4053      	eors	r3, r2
 800301c:	b25b      	sxtb	r3, r3
 800301e:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003020:	2301      	movs	r3, #1
 8003022:	747b      	strb	r3, [r7, #17]
 8003024:	e019      	b.n	800305a <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	2232      	movs	r2, #50	; 0x32
 800302a:	fb03 f202 	mul.w	r2, r3, r2
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	441a      	add	r2, r3
 8003032:	7c7b      	ldrb	r3, [r7, #17]
 8003034:	4413      	add	r3, r2
 8003036:	4a42      	ldr	r2, [pc, #264]	; (8003140 <lcdHLine2+0x788>)
 8003038:	5cd1      	ldrb	r1, [r2, r3]
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	2232      	movs	r2, #50	; 0x32
 800303e:	fb03 f202 	mul.w	r2, r3, r2
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	441a      	add	r2, r3
 8003046:	7c7b      	ldrb	r3, [r7, #17]
 8003048:	4413      	add	r3, r2
 800304a:	7dfa      	ldrb	r2, [r7, #23]
 800304c:	404a      	eors	r2, r1
 800304e:	b2d1      	uxtb	r1, r2
 8003050:	4a3b      	ldr	r2, [pc, #236]	; (8003140 <lcdHLine2+0x788>)
 8003052:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003054:	7c7b      	ldrb	r3, [r7, #17]
 8003056:	3301      	adds	r3, #1
 8003058:	747b      	strb	r3, [r7, #17]
 800305a:	7c7a      	ldrb	r2, [r7, #17]
 800305c:	7b79      	ldrb	r1, [r7, #13]
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	1acb      	subs	r3, r1, r3
 8003062:	429a      	cmp	r2, r3
 8003064:	dbdf      	blt.n	8003026 <lcdHLine2+0x66e>
			}
			break;
 8003066:	e050      	b.n	800310a <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 8003068:	7bbb      	ldrb	r3, [r7, #14]
 800306a:	22ff      	movs	r2, #255	; 0xff
 800306c:	fa42 f303 	asr.w	r3, r2, r3
 8003070:	b25a      	sxtb	r2, r3
 8003072:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003076:	4013      	ands	r3, r2
 8003078:	b25a      	sxtb	r2, r3
 800307a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800307e:	43db      	mvns	r3, r3
 8003080:	b259      	sxtb	r1, r3
 8003082:	7bbb      	ldrb	r3, [r7, #14]
 8003084:	f1c3 0308 	rsb	r3, r3, #8
 8003088:	20ff      	movs	r0, #255	; 0xff
 800308a:	fa00 f303 	lsl.w	r3, r0, r3
 800308e:	b25b      	sxtb	r3, r3
 8003090:	400b      	ands	r3, r1
 8003092:	b25b      	sxtb	r3, r3
 8003094:	4313      	orrs	r3, r2
 8003096:	b25b      	sxtb	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 800309e:	7b3b      	ldrb	r3, [r7, #12]
 80030a0:	f1c3 0307 	rsb	r3, r3, #7
 80030a4:	22ff      	movs	r2, #255	; 0xff
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	b25a      	sxtb	r2, r3
 80030ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030b0:	4013      	ands	r3, r2
 80030b2:	b25a      	sxtb	r2, r3
 80030b4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	b259      	sxtb	r1, r3
 80030bc:	7b3b      	ldrb	r3, [r7, #12]
 80030be:	3301      	adds	r3, #1
 80030c0:	20ff      	movs	r0, #255	; 0xff
 80030c2:	fa40 f303 	asr.w	r3, r0, r3
 80030c6:	b25b      	sxtb	r3, r3
 80030c8:	400b      	ands	r3, r1
 80030ca:	b25b      	sxtb	r3, r3
 80030cc:	4313      	orrs	r3, r2
 80030ce:	b25b      	sxtb	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80030d6:	2301      	movs	r3, #1
 80030d8:	743b      	strb	r3, [r7, #16]
 80030da:	e00f      	b.n	80030fc <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	2232      	movs	r2, #50	; 0x32
 80030e0:	fb03 f202 	mul.w	r2, r3, r2
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	441a      	add	r2, r3
 80030e8:	7c3b      	ldrb	r3, [r7, #16]
 80030ea:	4413      	add	r3, r2
 80030ec:	7dfa      	ldrb	r2, [r7, #23]
 80030ee:	43d2      	mvns	r2, r2
 80030f0:	b2d1      	uxtb	r1, r2
 80030f2:	4a13      	ldr	r2, [pc, #76]	; (8003140 <lcdHLine2+0x788>)
 80030f4:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80030f6:	7c3b      	ldrb	r3, [r7, #16]
 80030f8:	3301      	adds	r3, #1
 80030fa:	743b      	strb	r3, [r7, #16]
 80030fc:	7c3a      	ldrb	r2, [r7, #16]
 80030fe:	7b79      	ldrb	r1, [r7, #13]
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	1acb      	subs	r3, r1, r3
 8003104:	429a      	cmp	r2, r3
 8003106:	dbe9      	blt.n	80030dc <lcdHLine2+0x724>
			}
			break;
 8003108:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	2232      	movs	r2, #50	; 0x32
 800310e:	fb03 f202 	mul.w	r2, r3, r2
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	4413      	add	r3, r2
 8003116:	490a      	ldr	r1, [pc, #40]	; (8003140 <lcdHLine2+0x788>)
 8003118:	7dba      	ldrb	r2, [r7, #22]
 800311a:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 800311c:	7b7a      	ldrb	r2, [r7, #13]
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	429a      	cmp	r2, r3
 8003122:	d908      	bls.n	8003136 <lcdHLine2+0x77e>
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	2232      	movs	r2, #50	; 0x32
 8003128:	fb03 f202 	mul.w	r2, r3, r2
 800312c:	7b7b      	ldrb	r3, [r7, #13]
 800312e:	4413      	add	r3, r2
 8003130:	4903      	ldr	r1, [pc, #12]	; (8003140 <lcdHLine2+0x788>)
 8003132:	7d7a      	ldrb	r2, [r7, #21]
 8003134:	54ca      	strb	r2, [r1, r3]
}
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bc90      	pop	{r4, r7}
 800313e:	4770      	bx	lr
 8003140:	200006a8 	.word	0x200006a8

08003144 <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8003144:	b490      	push	{r4, r7}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	4604      	mov	r4, r0
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4623      	mov	r3, r4
 8003154:	80fb      	strh	r3, [r7, #6]
 8003156:	4603      	mov	r3, r0
 8003158:	80bb      	strh	r3, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	70fb      	strb	r3, [r7, #3]
 800315e:	4613      	mov	r3, r2
 8003160:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	b29b      	uxth	r3, r3
 8003168:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8003174:	88bb      	ldrh	r3, [r7, #4]
 8003176:	08db      	lsrs	r3, r3, #3
 8003178:	b29b      	uxth	r3, r3
 800317a:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 800317c:	88bb      	ldrh	r3, [r7, #4]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	2232      	movs	r2, #50	; 0x32
 800318a:	fb03 f202 	mul.w	r2, r3, r2
 800318e:	7c7b      	ldrb	r3, [r7, #17]
 8003190:	4413      	add	r3, r2
 8003192:	4a71      	ldr	r2, [pc, #452]	; (8003358 <lcdHLine+0x214>)
 8003194:	5cd3      	ldrb	r3, [r2, r3]
 8003196:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	2232      	movs	r2, #50	; 0x32
 800319c:	fb03 f202 	mul.w	r2, r3, r2
 80031a0:	7c7b      	ldrb	r3, [r7, #17]
 80031a2:	441a      	add	r2, r3
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	4413      	add	r3, r2
 80031a8:	4a6b      	ldr	r2, [pc, #428]	; (8003358 <lcdHLine+0x214>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 80031ae:	23ff      	movs	r3, #255	; 0xff
 80031b0:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 80031b2:	7c3b      	ldrb	r3, [r7, #16]
 80031b4:	f1c3 0208 	rsb	r2, r3, #8
 80031b8:	88b9      	ldrh	r1, [r7, #4]
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	1acb      	subs	r3, r1, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	429a      	cmp	r2, r3
 80031c2:	dd09      	ble.n	80031d8 <lcdHLine+0x94>
 80031c4:	88ba      	ldrh	r2, [r7, #4]
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	22ff      	movs	r2, #255	; 0xff
 80031ce:	fa42 f303 	asr.w	r3, r2, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	757b      	strb	r3, [r7, #21]
	switch(mode){
 80031d8:	78bb      	ldrb	r3, [r7, #2]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d067      	beq.n	80032ae <lcdHLine+0x16a>
 80031de:	2b02      	cmp	r3, #2
 80031e0:	f300 809e 	bgt.w	8003320 <lcdHLine+0x1dc>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <lcdHLine+0xaa>
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d02e      	beq.n	800324a <lcdHLine+0x106>
 80031ec:	e098      	b.n	8003320 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 80031ee:	7d7a      	ldrb	r2, [r7, #21]
 80031f0:	7c3b      	ldrb	r3, [r7, #16]
 80031f2:	fa42 f303 	asr.w	r3, r2, r3
 80031f6:	b25a      	sxtb	r2, r3
 80031f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	b25b      	sxtb	r3, r3
 8003200:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8003202:	7bbb      	ldrb	r3, [r7, #14]
 8003204:	f1c3 0307 	rsb	r3, r3, #7
 8003208:	22ff      	movs	r2, #255	; 0xff
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	b25a      	sxtb	r2, r3
 8003210:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003214:	4313      	orrs	r3, r2
 8003216:	b25b      	sxtb	r3, r3
 8003218:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800321a:	2301      	movs	r3, #1
 800321c:	753b      	strb	r3, [r7, #20]
 800321e:	e00d      	b.n	800323c <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	2232      	movs	r2, #50	; 0x32
 8003224:	fb03 f202 	mul.w	r2, r3, r2
 8003228:	7c7b      	ldrb	r3, [r7, #17]
 800322a:	441a      	add	r2, r3
 800322c:	7d3b      	ldrb	r3, [r7, #20]
 800322e:	4413      	add	r3, r2
 8003230:	4a49      	ldr	r2, [pc, #292]	; (8003358 <lcdHLine+0x214>)
 8003232:	21ff      	movs	r1, #255	; 0xff
 8003234:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003236:	7d3b      	ldrb	r3, [r7, #20]
 8003238:	3301      	adds	r3, #1
 800323a:	753b      	strb	r3, [r7, #20]
 800323c:	7d3a      	ldrb	r2, [r7, #20]
 800323e:	7bf9      	ldrb	r1, [r7, #15]
 8003240:	7c7b      	ldrb	r3, [r7, #17]
 8003242:	1acb      	subs	r3, r1, r3
 8003244:	429a      	cmp	r2, r3
 8003246:	dbeb      	blt.n	8003220 <lcdHLine+0xdc>
		}
		break;
 8003248:	e06a      	b.n	8003320 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 800324a:	7d7a      	ldrb	r2, [r7, #21]
 800324c:	7c3b      	ldrb	r3, [r7, #16]
 800324e:	fa42 f303 	asr.w	r3, r2, r3
 8003252:	b25b      	sxtb	r3, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	b25a      	sxtb	r2, r3
 8003258:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800325c:	4013      	ands	r3, r2
 800325e:	b25b      	sxtb	r3, r3
 8003260:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 8003262:	7bbb      	ldrb	r3, [r7, #14]
 8003264:	f1c3 0307 	rsb	r3, r3, #7
 8003268:	22ff      	movs	r2, #255	; 0xff
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	b25b      	sxtb	r3, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	b25a      	sxtb	r2, r3
 8003274:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003278:	4013      	ands	r3, r2
 800327a:	b25b      	sxtb	r3, r3
 800327c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800327e:	2301      	movs	r3, #1
 8003280:	74fb      	strb	r3, [r7, #19]
 8003282:	e00d      	b.n	80032a0 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	2232      	movs	r2, #50	; 0x32
 8003288:	fb03 f202 	mul.w	r2, r3, r2
 800328c:	7c7b      	ldrb	r3, [r7, #17]
 800328e:	441a      	add	r2, r3
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	4413      	add	r3, r2
 8003294:	4a30      	ldr	r2, [pc, #192]	; (8003358 <lcdHLine+0x214>)
 8003296:	2100      	movs	r1, #0
 8003298:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	3301      	adds	r3, #1
 800329e:	74fb      	strb	r3, [r7, #19]
 80032a0:	7cfa      	ldrb	r2, [r7, #19]
 80032a2:	7bf9      	ldrb	r1, [r7, #15]
 80032a4:	7c7b      	ldrb	r3, [r7, #17]
 80032a6:	1acb      	subs	r3, r1, r3
 80032a8:	429a      	cmp	r2, r3
 80032aa:	dbeb      	blt.n	8003284 <lcdHLine+0x140>
		}
		break;
 80032ac:	e038      	b.n	8003320 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 80032ae:	7d7a      	ldrb	r2, [r7, #21]
 80032b0:	7c3b      	ldrb	r3, [r7, #16]
 80032b2:	fa42 f303 	asr.w	r3, r2, r3
 80032b6:	b25a      	sxtb	r2, r3
 80032b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032bc:	4053      	eors	r3, r2
 80032be:	b25b      	sxtb	r3, r3
 80032c0:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 80032c2:	7bbb      	ldrb	r3, [r7, #14]
 80032c4:	f1c3 0307 	rsb	r3, r3, #7
 80032c8:	22ff      	movs	r2, #255	; 0xff
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	b25a      	sxtb	r2, r3
 80032d0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80032d4:	4053      	eors	r3, r2
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80032da:	2301      	movs	r3, #1
 80032dc:	74bb      	strb	r3, [r7, #18]
 80032de:	e018      	b.n	8003312 <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	2232      	movs	r2, #50	; 0x32
 80032e4:	fb03 f202 	mul.w	r2, r3, r2
 80032e8:	7c7b      	ldrb	r3, [r7, #17]
 80032ea:	441a      	add	r2, r3
 80032ec:	7cbb      	ldrb	r3, [r7, #18]
 80032ee:	4413      	add	r3, r2
 80032f0:	4a19      	ldr	r2, [pc, #100]	; (8003358 <lcdHLine+0x214>)
 80032f2:	5cd2      	ldrb	r2, [r2, r3]
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	2132      	movs	r1, #50	; 0x32
 80032f8:	fb03 f101 	mul.w	r1, r3, r1
 80032fc:	7c7b      	ldrb	r3, [r7, #17]
 80032fe:	4419      	add	r1, r3
 8003300:	7cbb      	ldrb	r3, [r7, #18]
 8003302:	440b      	add	r3, r1
 8003304:	43d2      	mvns	r2, r2
 8003306:	b2d1      	uxtb	r1, r2
 8003308:	4a13      	ldr	r2, [pc, #76]	; (8003358 <lcdHLine+0x214>)
 800330a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800330c:	7cbb      	ldrb	r3, [r7, #18]
 800330e:	3301      	adds	r3, #1
 8003310:	74bb      	strb	r3, [r7, #18]
 8003312:	7cba      	ldrb	r2, [r7, #18]
 8003314:	7bf9      	ldrb	r1, [r7, #15]
 8003316:	7c7b      	ldrb	r3, [r7, #17]
 8003318:	1acb      	subs	r3, r1, r3
 800331a:	429a      	cmp	r2, r3
 800331c:	dbe0      	blt.n	80032e0 <lcdHLine+0x19c>
		}
		break;
 800331e:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	2232      	movs	r2, #50	; 0x32
 8003324:	fb03 f202 	mul.w	r2, r3, r2
 8003328:	7c7b      	ldrb	r3, [r7, #17]
 800332a:	4413      	add	r3, r2
 800332c:	490a      	ldr	r1, [pc, #40]	; (8003358 <lcdHLine+0x214>)
 800332e:	7dfa      	ldrb	r2, [r7, #23]
 8003330:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	7c7b      	ldrb	r3, [r7, #17]
 8003336:	429a      	cmp	r2, r3
 8003338:	d908      	bls.n	800334c <lcdHLine+0x208>
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	2232      	movs	r2, #50	; 0x32
 800333e:	fb03 f202 	mul.w	r2, r3, r2
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	4413      	add	r3, r2
 8003346:	4904      	ldr	r1, [pc, #16]	; (8003358 <lcdHLine+0x214>)
 8003348:	7dba      	ldrb	r2, [r7, #22]
 800334a:	54ca      	strb	r2, [r1, r3]
}
 800334c:	bf00      	nop
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bc90      	pop	{r4, r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	200006a8 	.word	0x200006a8

0800335c <lcdRefresh>:

void lcdRefresh(void){
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <lcdRefresh+0x7c>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d032      	beq.n	80033d0 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 800336a:	2201      	movs	r2, #1
 800336c:	2140      	movs	r1, #64	; 0x40
 800336e:	481b      	ldr	r0, [pc, #108]	; (80033dc <lcdRefresh+0x80>)
 8003370:	f005 fade 	bl	8008930 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003374:	2301      	movs	r3, #1
 8003376:	71fb      	strb	r3, [r7, #7]
 8003378:	e01c      	b.n	80033b4 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff f93d 	bl	80025fc <reverse_uint8>
 8003382:	4603      	mov	r3, r0
 8003384:	461a      	mov	r2, r3
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <lcdRefresh+0x84>)
 8003388:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 800338a:	2396      	movs	r3, #150	; 0x96
 800338c:	2202      	movs	r2, #2
 800338e:	4914      	ldr	r1, [pc, #80]	; (80033e0 <lcdRefresh+0x84>)
 8003390:	4814      	ldr	r0, [pc, #80]	; (80033e4 <lcdRefresh+0x88>)
 8003392:	f007 fd3e 	bl	800ae12 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	3b01      	subs	r3, #1
 800339a:	2232      	movs	r2, #50	; 0x32
 800339c:	fb02 f303 	mul.w	r3, r2, r3
 80033a0:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <lcdRefresh+0x8c>)
 80033a2:	1899      	adds	r1, r3, r2
 80033a4:	2396      	movs	r3, #150	; 0x96
 80033a6:	2232      	movs	r2, #50	; 0x32
 80033a8:	480e      	ldr	r0, [pc, #56]	; (80033e4 <lcdRefresh+0x88>)
 80033aa:	f007 fd32 	bl	800ae12 <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	3301      	adds	r3, #1
 80033b2:	71fb      	strb	r3, [r7, #7]
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2bf1      	cmp	r3, #241	; 0xf1
 80033b8:	d9df      	bls.n	800337a <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 80033ba:	2396      	movs	r3, #150	; 0x96
 80033bc:	2202      	movs	r2, #2
 80033be:	490b      	ldr	r1, [pc, #44]	; (80033ec <lcdRefresh+0x90>)
 80033c0:	4808      	ldr	r0, [pc, #32]	; (80033e4 <lcdRefresh+0x88>)
 80033c2:	f007 fd26 	bl	800ae12 <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 80033c6:	2200      	movs	r2, #0
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	4804      	ldr	r0, [pc, #16]	; (80033dc <lcdRefresh+0x80>)
 80033cc:	f005 fab0 	bl	8008930 <HAL_GPIO_WritePin>
	}
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20000144 	.word	0x20000144
 80033dc:	40020000 	.word	0x40020000
 80033e0:	20000148 	.word	0x20000148
 80033e4:	200037e4 	.word	0x200037e4
 80033e8:	200006a8 	.word	0x200006a8
 80033ec:	200006a4 	.word	0x200006a4

080033f0 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4604      	mov	r4, r0
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4623      	mov	r3, r4
 8003400:	80fb      	strh	r3, [r7, #6]
 8003402:	4603      	mov	r3, r0
 8003404:	80bb      	strh	r3, [r7, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	70fb      	strb	r3, [r7, #3]
 800340a:	4613      	mov	r3, r2
 800340c:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	e009      	b.n	8003428 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8003414:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	88b9      	ldrh	r1, [r7, #4]
 800341c:	88f8      	ldrh	r0, [r7, #6]
 800341e:	f7ff fe91 	bl	8003144 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	3301      	adds	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	78bb      	ldrb	r3, [r7, #2]
 800342c:	429a      	cmp	r2, r3
 800342e:	d9f1      	bls.n	8003414 <lcdRect+0x24>
	}
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bd90      	pop	{r4, r7, pc}

0800343a <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 800343a:	b590      	push	{r4, r7, lr}
 800343c:	b087      	sub	sp, #28
 800343e:	af02      	add	r7, sp, #8
 8003440:	4604      	mov	r4, r0
 8003442:	4608      	mov	r0, r1
 8003444:	4611      	mov	r1, r2
 8003446:	461a      	mov	r2, r3
 8003448:	4623      	mov	r3, r4
 800344a:	80fb      	strh	r3, [r7, #6]
 800344c:	4603      	mov	r3, r0
 800344e:	80bb      	strh	r3, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
 8003454:	4613      	mov	r3, r2
 8003456:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003458:	88fa      	ldrh	r2, [r7, #6]
 800345a:	88bb      	ldrh	r3, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d046      	beq.n	80034ee <lcdRect2+0xb4>
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	78bb      	ldrb	r3, [r7, #2]
 8003464:	429a      	cmp	r2, r3
 8003466:	d042      	beq.n	80034ee <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	73fb      	strb	r3, [r7, #15]
 800346c:	e00d      	b.n	800348a <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 800346e:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	88b9      	ldrh	r1, [r7, #4]
 8003476:	88f8      	ldrh	r0, [r7, #6]
 8003478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	4623      	mov	r3, r4
 8003480:	f7ff fa9a 	bl	80029b8 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	3301      	adds	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	78bb      	ldrb	r3, [r7, #2]
 800348e:	429a      	cmp	r2, r3
 8003490:	d9ed      	bls.n	800346e <lcdRect2+0x34>
		}
		if(outline){
 8003492:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003496:	2b00      	cmp	r3, #0
 8003498:	d029      	beq.n	80034ee <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 800349a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	88b9      	ldrh	r1, [r7, #4]
 80034a2:	88f8      	ldrh	r0, [r7, #6]
 80034a4:	2401      	movs	r4, #1
 80034a6:	9400      	str	r4, [sp, #0]
 80034a8:	f7ff fa86 	bl	80029b8 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 80034ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034b0:	78ba      	ldrb	r2, [r7, #2]
 80034b2:	88b9      	ldrh	r1, [r7, #4]
 80034b4:	88f8      	ldrh	r0, [r7, #6]
 80034b6:	2401      	movs	r4, #1
 80034b8:	9400      	str	r4, [sp, #0]
 80034ba:	f7ff fa7d 	bl	80029b8 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	b299      	uxth	r1, r3
 80034c6:	78bb      	ldrb	r3, [r7, #2]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034d0:	88f8      	ldrh	r0, [r7, #6]
 80034d2:	f7ff f9fb 	bl	80028cc <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	b299      	uxth	r1, r3
 80034de:	78bb      	ldrb	r3, [r7, #2]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034e8:	88b8      	ldrh	r0, [r7, #4]
 80034ea:	f7ff f9ef 	bl	80028cc <lcdVLine>
		}
	}
}
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}
	...

080034f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003500:	f004 faa8 	bl	8007a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003504:	f000 f88a 	bl	800361c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003508:	f7fe faf4 	bl	8001af4 <MX_GPIO_Init>
  MX_DMA_Init();
 800350c:	f7fe fad2 	bl	8001ab4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003510:	f000 fd64 	bl	8003fdc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003514:	f000 f9d8 	bl	80038c8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003518:	f000 fb8e 	bl	8003c38 <MX_TIM1_Init>
  MX_TIM10_Init();
 800351c:	f000 fc2e 	bl	8003d7c <MX_TIM10_Init>
  MX_USART6_UART_Init();
 8003520:	f000 fd86 	bl	8004030 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8003524:	f7fe ffe2 	bl	80024ec <MX_I2C1_Init>
  MX_TIM11_Init();
 8003528:	f000 fc4c 	bl	8003dc4 <MX_TIM11_Init>
  MX_RTC_Init();
 800352c:	f000 f972 	bl	8003814 <MX_RTC_Init>
  MX_TIM13_Init();
 8003530:	f000 fc6c 	bl	8003e0c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8003534:	482b      	ldr	r0, [pc, #172]	; (80035e4 <main+0xec>)
 8003536:	f007 fe73 	bl	800b220 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800353a:	482a      	ldr	r0, [pc, #168]	; (80035e4 <main+0xec>)
 800353c:	f007 fec0 	bl	800b2c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003540:	2100      	movs	r1, #0
 8003542:	4828      	ldr	r0, [pc, #160]	; (80035e4 <main+0xec>)
 8003544:	f007 ff86 	bl	800b454 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 8003548:	4827      	ldr	r0, [pc, #156]	; (80035e8 <main+0xf0>)
 800354a:	f007 feb9 	bl	800b2c0 <HAL_TIM_Base_Start_IT>

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 800354e:	4827      	ldr	r0, [pc, #156]	; (80035ec <main+0xf4>)
 8003550:	f007 feb6 	bl	800b2c0 <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 8003554:	4826      	ldr	r0, [pc, #152]	; (80035f0 <main+0xf8>)
 8003556:	f7fe f8ff 	bl	8001758 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 800355a:	4826      	ldr	r0, [pc, #152]	; (80035f4 <main+0xfc>)
 800355c:	f007 feb0 	bl	800b2c0 <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 8003560:	4c25      	ldr	r4, [pc, #148]	; (80035f8 <main+0x100>)
 8003562:	463b      	mov	r3, r7
 8003564:	4925      	ldr	r1, [pc, #148]	; (80035fc <main+0x104>)
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fbae 	bl	8001cc8 <initGps>
 800356c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003570:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003574:	4620      	mov	r0, r4
 8003576:	4619      	mov	r1, r3
 8003578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800357c:	461a      	mov	r2, r3
 800357e:	f00a f893 	bl	800d6a8 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8003582:	481f      	ldr	r0, [pc, #124]	; (8003600 <main+0x108>)
 8003584:	f7fd fe2a 	bl	80011dc <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 8003588:	f240 118f 	movw	r1, #399	; 0x18f
 800358c:	481d      	ldr	r0, [pc, #116]	; (8003604 <main+0x10c>)
 800358e:	f004 f91a 	bl	80077c6 <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 8003592:	f240 128f 	movw	r2, #399	; 0x18f
 8003596:	2102      	movs	r1, #2
 8003598:	481b      	ldr	r0, [pc, #108]	; (8003608 <main+0x110>)
 800359a:	f004 f857 	bl	800764c <cbuf_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 800359e:	f7ff f857 	bl	8002650 <lcdClearBuffer>
  lcdRefresh();
 80035a2:	f7ff fedb 	bl	800335c <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 80035a6:	4c19      	ldr	r4, [pc, #100]	; (800360c <main+0x114>)
 80035a8:	463b      	mov	r3, r7
 80035aa:	4915      	ldr	r1, [pc, #84]	; (8003600 <main+0x108>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe f87b 	bl	80016a8 <getBmpData>
 80035b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80035ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80035c0:	2200      	movs	r2, #0
 80035c2:	4913      	ldr	r1, [pc, #76]	; (8003610 <main+0x118>)
 80035c4:	4813      	ldr	r0, [pc, #76]	; (8003614 <main+0x11c>)
 80035c6:	f007 f9ad 	bl	800a924 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80035ca:	2200      	movs	r2, #0
 80035cc:	4912      	ldr	r1, [pc, #72]	; (8003618 <main+0x120>)
 80035ce:	4811      	ldr	r0, [pc, #68]	; (8003614 <main+0x11c>)
 80035d0:	f007 fa8a 	bl	800aae8 <HAL_RTC_GetDate>
	  lcdClearBuffer();
 80035d4:	f7ff f83c 	bl	8002650 <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 80035d8:	f7fe ff6a 	bl	80024b0 <showGui>

	  lcdRefresh();
 80035dc:	f7ff febe 	bl	800335c <lcdRefresh>
		bmpData = getBmpData(&bmp180module);
 80035e0:	e7e1      	b.n	80035a6 <main+0xae>
 80035e2:	bf00      	nop
 80035e4:	20003840 	.word	0x20003840
 80035e8:	20003888 	.word	0x20003888
 80035ec:	200038d0 	.word	0x200038d0
 80035f0:	2000002c 	.word	0x2000002c
 80035f4:	20003918 	.word	0x20003918
 80035f8:	200035c4 	.word	0x200035c4
 80035fc:	200039a4 	.word	0x200039a4
 8003600:	2000051c 	.word	0x2000051c
 8003604:	200035b4 	.word	0x200035b4
 8003608:	200035a0 	.word	0x200035a0
 800360c:	20000560 	.word	0x20000560
 8003610:	20003588 	.word	0x20003588
 8003614:	200037c4 	.word	0x200037c4
 8003618:	2000359c 	.word	0x2000359c

0800361c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b094      	sub	sp, #80	; 0x50
 8003620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003622:	f107 0320 	add.w	r3, r7, #32
 8003626:	2230      	movs	r2, #48	; 0x30
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f00a f84a 	bl	800d6c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003630:	f107 030c 	add.w	r3, r7, #12
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	4b29      	ldr	r3, [pc, #164]	; (80036ec <SystemClock_Config+0xd0>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4a28      	ldr	r2, [pc, #160]	; (80036ec <SystemClock_Config+0xd0>)
 800364a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364e:	6413      	str	r3, [r2, #64]	; 0x40
 8003650:	4b26      	ldr	r3, [pc, #152]	; (80036ec <SystemClock_Config+0xd0>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800365c:	2300      	movs	r3, #0
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <SystemClock_Config+0xd4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <SystemClock_Config+0xd4>)
 8003666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <SystemClock_Config+0xd4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003678:	2305      	movs	r3, #5
 800367a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800367c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003682:	2301      	movs	r3, #1
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003686:	2302      	movs	r3, #2
 8003688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800368a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003690:	2304      	movs	r3, #4
 8003692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003694:	23a8      	movs	r3, #168	; 0xa8
 8003696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003698:	2302      	movs	r3, #2
 800369a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800369c:	2307      	movs	r3, #7
 800369e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a0:	f107 0320 	add.w	r3, r7, #32
 80036a4:	4618      	mov	r0, r3
 80036a6:	f006 f9d5 	bl	8009a54 <HAL_RCC_OscConfig>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80036b0:	f000 f8a2 	bl	80037f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036b4:	230f      	movs	r3, #15
 80036b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036b8:	2302      	movs	r3, #2
 80036ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036cc:	f107 030c 	add.w	r3, r7, #12
 80036d0:	2105      	movs	r1, #5
 80036d2:	4618      	mov	r0, r3
 80036d4:	f006 fc36 	bl	8009f44 <HAL_RCC_ClockConfig>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80036de:	f000 f88b 	bl	80037f8 <Error_Handler>
  }
}
 80036e2:	bf00      	nop
 80036e4:	3750      	adds	r7, #80	; 0x50
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40007000 	.word	0x40007000

080036f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM10){
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d108      	bne.n	8003718 <HAL_TIM_PeriodElapsedCallback+0x24>
		if(stwS.state){
 8003706:	4b27      	ldr	r3, [pc, #156]	; (80037a4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003708:	78db      	ldrb	r3, [r3, #3]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_TIM_PeriodElapsedCallback+0x24>
			stwTick();
 8003714:	f000 fa3c 	bl	8003b90 <stwTick>
		}
	}
	// APB2 168MHz -> after PSCL 20Hz
	if(htim->Instance == TIM11){
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d102      	bne.n	8003728 <HAL_TIM_PeriodElapsedCallback+0x34>
		scanButtons(btnsPtrs);
 8003722:	4822      	ldr	r0, [pc, #136]	; (80037ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003724:	f7fe f9ac 	bl	8001a80 <scanButtons>
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a20      	ldr	r2, [pc, #128]	; (80037b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d131      	bne.n	8003796 <HAL_TIM_PeriodElapsedCallback+0xa2>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003734:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <HAL_TIM_PeriodElapsedCallback+0x52>
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800373e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8003742:	481c      	ldr	r0, [pc, #112]	; (80037b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003744:	4798      	blx	r3


		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003746:	2101      	movs	r1, #1
 8003748:	481b      	ldr	r0, [pc, #108]	; (80037b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800374a:	f005 f90a 	bl	8008962 <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003750:	7b1b      	ldrb	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003768:	ee17 1a90 	vmov	r1, s15
 800376c:	4813      	ldr	r0, [pc, #76]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800376e:	f004 f860 	bl	8007832 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4a13      	ldr	r2, [pc, #76]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	08db      	lsrs	r3, r3, #3
 800377e:	b29b      	uxth	r3, r3
 8003780:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 8003782:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003784:	7c1b      	ldrb	r3, [r3, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_TIM_PeriodElapsedCallback+0xa2>
 800378a:	f107 030e 	add.w	r3, r7, #14
 800378e:	4619      	mov	r1, r3
 8003790:	480d      	ldr	r0, [pc, #52]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003792:	f003 ff98 	bl	80076c6 <cbuf_ovw>

	}
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40014400 	.word	0x40014400
 80037a4:	2000383c 	.word	0x2000383c
 80037a8:	40014800 	.word	0x40014800
 80037ac:	2000002c 	.word	0x2000002c
 80037b0:	40001c00 	.word	0x40001c00
 80037b4:	200035c4 	.word	0x200035c4
 80037b8:	40020400 	.word	0x40020400
 80037bc:	200035b4 	.word	0x200035b4
 80037c0:	20000560 	.word	0x20000560
 80037c4:	cccccccd 	.word	0xcccccccd
 80037c8:	200035a0 	.word	0x200035a0

080037cc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <HAL_UART_RxCpltCallback+0x24>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d103      	bne.n	80037e6 <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	4804      	ldr	r0, [pc, #16]	; (80037f4 <HAL_UART_RxCpltCallback+0x28>)
 80037e2:	f005 f8be 	bl	8008962 <HAL_GPIO_TogglePin>

	}
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40011400 	.word	0x40011400
 80037f4:	40020400 	.word	0x40020400

080037f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037fc:	b672      	cpsid	i
}
 80037fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003800:	2201      	movs	r2, #1
 8003802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003806:	4802      	ldr	r0, [pc, #8]	; (8003810 <Error_Handler+0x18>)
 8003808:	f005 f892 	bl	8008930 <HAL_GPIO_WritePin>
  while (1)
 800380c:	e7fe      	b.n	800380c <Error_Handler+0x14>
 800380e:	bf00      	nop
 8003810:	40020400 	.word	0x40020400

08003814 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003828:	2300      	movs	r3, #0
 800382a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <MX_RTC_Init+0x58>)
 800382e:	4a10      	ldr	r2, [pc, #64]	; (8003870 <MX_RTC_Init+0x5c>)
 8003830:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003832:	4b0e      	ldr	r3, [pc, #56]	; (800386c <MX_RTC_Init+0x58>)
 8003834:	2200      	movs	r2, #0
 8003836:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <MX_RTC_Init+0x58>)
 800383a:	227f      	movs	r2, #127	; 0x7f
 800383c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <MX_RTC_Init+0x58>)
 8003840:	22ff      	movs	r2, #255	; 0xff
 8003842:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <MX_RTC_Init+0x58>)
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <MX_RTC_Init+0x58>)
 800384c:	2200      	movs	r2, #0
 800384e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <MX_RTC_Init+0x58>)
 8003852:	2200      	movs	r2, #0
 8003854:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003856:	4805      	ldr	r0, [pc, #20]	; (800386c <MX_RTC_Init+0x58>)
 8003858:	f006 ff54 	bl	800a704 <HAL_RTC_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003862:	f7ff ffc9 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	200037c4 	.word	0x200037c4
 8003870:	40002800 	.word	0x40002800

08003874 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800387c:	f107 0308 	add.w	r3, r7, #8
 8003880:	2230      	movs	r2, #48	; 0x30
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f009 ff1d 	bl	800d6c4 <memset>
  if(rtcHandle->Instance==RTC)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a0c      	ldr	r2, [pc, #48]	; (80038c0 <HAL_RTC_MspInit+0x4c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d111      	bne.n	80038b8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003894:	2320      	movs	r3, #32
 8003896:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800389c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800389e:	f107 0308 	add.w	r3, r7, #8
 80038a2:	4618      	mov	r0, r3
 80038a4:	f006 fd6e 	bl	800a384 <HAL_RCCEx_PeriphCLKConfig>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80038ae:	f7ff ffa3 	bl	80037f8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038b2:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <HAL_RTC_MspInit+0x50>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80038b8:	bf00      	nop
 80038ba:	3738      	adds	r7, #56	; 0x38
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40002800 	.word	0x40002800
 80038c4:	42470e3c 	.word	0x42470e3c

080038c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <MX_SPI1_Init+0x64>)
 80038ce:	4a18      	ldr	r2, [pc, #96]	; (8003930 <MX_SPI1_Init+0x68>)
 80038d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038d2:	4b16      	ldr	r3, [pc, #88]	; (800392c <MX_SPI1_Init+0x64>)
 80038d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <MX_SPI1_Init+0x64>)
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <MX_SPI1_Init+0x64>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <MX_SPI1_Init+0x64>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038ec:	4b0f      	ldr	r3, [pc, #60]	; (800392c <MX_SPI1_Init+0x64>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <MX_SPI1_Init+0x64>)
 80038f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <MX_SPI1_Init+0x64>)
 80038fc:	2220      	movs	r2, #32
 80038fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003900:	4b0a      	ldr	r3, [pc, #40]	; (800392c <MX_SPI1_Init+0x64>)
 8003902:	2200      	movs	r2, #0
 8003904:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <MX_SPI1_Init+0x64>)
 8003908:	2200      	movs	r2, #0
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <MX_SPI1_Init+0x64>)
 800390e:	2200      	movs	r2, #0
 8003910:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <MX_SPI1_Init+0x64>)
 8003914:	220a      	movs	r2, #10
 8003916:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003918:	4804      	ldr	r0, [pc, #16]	; (800392c <MX_SPI1_Init+0x64>)
 800391a:	f007 f9f1 	bl	800ad00 <HAL_SPI_Init>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003924:	f7ff ff68 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200037e4 	.word	0x200037e4
 8003930:	40013000 	.word	0x40013000

08003934 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a19      	ldr	r2, [pc, #100]	; (80039b8 <HAL_SPI_MspInit+0x84>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d12b      	bne.n	80039ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <HAL_SPI_MspInit+0x88>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	4a17      	ldr	r2, [pc, #92]	; (80039bc <HAL_SPI_MspInit+0x88>)
 8003960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003964:	6453      	str	r3, [r2, #68]	; 0x44
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_SPI_MspInit+0x88>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_SPI_MspInit+0x88>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a10      	ldr	r2, [pc, #64]	; (80039bc <HAL_SPI_MspInit+0x88>)
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <HAL_SPI_MspInit+0x88>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800398e:	23a0      	movs	r3, #160	; 0xa0
 8003990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	2302      	movs	r3, #2
 8003994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399a:	2303      	movs	r3, #3
 800399c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800399e:	2305      	movs	r3, #5
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a2:	f107 0314 	add.w	r3, r7, #20
 80039a6:	4619      	mov	r1, r3
 80039a8:	4805      	ldr	r0, [pc, #20]	; (80039c0 <HAL_SPI_MspInit+0x8c>)
 80039aa:	f004 fdfd 	bl	80085a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80039ae:	bf00      	nop
 80039b0:	3728      	adds	r7, #40	; 0x28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40013000 	.word	0x40013000
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40020000 	.word	0x40020000

080039c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_MspInit+0x4c>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <HAL_MspInit+0x4c>)
 80039d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d8:	6453      	str	r3, [r2, #68]	; 0x44
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_MspInit+0x4c>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <HAL_MspInit+0x4c>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <HAL_MspInit+0x4c>)
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6413      	str	r3, [r2, #64]	; 0x40
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_MspInit+0x4c>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800

08003a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a18:	e7fe      	b.n	8003a18 <NMI_Handler+0x4>

08003a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 8003a1e:	f7ff feeb 	bl	80037f8 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a22:	e7fe      	b.n	8003a22 <HardFault_Handler+0x8>

08003a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a28:	e7fe      	b.n	8003a28 <MemManage_Handler+0x4>

08003a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a2e:	e7fe      	b.n	8003a2e <BusFault_Handler+0x4>

08003a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <UsageFault_Handler+0x4>

08003a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a52:	b480      	push	{r7}
 8003a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a64:	f004 f848 	bl	8007af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a68:	bf00      	nop
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a70:	4803      	ldr	r0, [pc, #12]	; (8003a80 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003a72:	f007 fdb7 	bl	800b5e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003a76:	4803      	ldr	r0, [pc, #12]	; (8003a84 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003a78:	f007 fdb4 	bl	800b5e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20003840 	.word	0x20003840
 8003a84:	20003888 	.word	0x20003888

08003a88 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a8c:	4803      	ldr	r0, [pc, #12]	; (8003a9c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003a8e:	f007 fda9 	bl	800b5e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003a92:	4803      	ldr	r0, [pc, #12]	; (8003aa0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003a94:	f007 fda6 	bl	800b5e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20003840 	.word	0x20003840
 8003aa0:	200038d0 	.word	0x200038d0

08003aa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 8003aa8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003aac:	f004 ff74 	bl	8008998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 8003ab0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ab4:	f004 ff70 	bl	8008998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003ab8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003abc:	f004 ff6c 	bl	8008998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8003ac0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ac4:	f004 ff68 	bl	8008998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8003ac8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003acc:	f004 ff64 	bl	8008998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8003ad0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003ad4:	f004 ff60 	bl	8008998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}

08003adc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003ae0:	4802      	ldr	r0, [pc, #8]	; (8003aec <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003ae2:	f007 fd7f 	bl	800b5e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20003918 	.word	0x20003918

08003af0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003af4:	4802      	ldr	r0, [pc, #8]	; (8003b00 <DMA2_Stream1_IRQHandler+0x10>)
 8003af6:	f004 faed 	bl	80080d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200039e8 	.word	0x200039e8

08003b04 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <USART6_IRQHandler+0x10>)
 8003b0a:	f008 fc95 	bl	800c438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200039a4 	.word	0x200039a4

08003b18 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 8003b1c:	2228      	movs	r2, #40	; 0x28
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4804      	ldr	r0, [pc, #16]	; (8003b34 <clearTable+0x1c>)
 8003b22:	f009 fdcf 	bl	800d6c4 <memset>
	stwT.position = 0;
 8003b26:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <clearTable+0x1c>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	2000014c 	.word	0x2000014c

08003b38 <addItem>:
void addItem(stw_struct stwS){
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <addItem+0x38>)
 8003b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <addItem+0x38>)
 8003b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <addItem+0x38>)
 8003b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <addItem+0x38>)
 8003b60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	2000014c 	.word	0x2000014c

08003b74 <stwStart>:

void stwStart(void){
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_ENABLED;
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <stwStart+0x18>)
 8003b7a:	78d3      	ldrb	r3, [r2, #3]
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	70d3      	strb	r3, [r2, #3]
}
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	2000383c 	.word	0x2000383c

08003b90 <stwTick>:
void stwTick(void){
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
	stwS.cnt++;
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <stwTick+0x28>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ba2:	4905      	ldr	r1, [pc, #20]	; (8003bb8 <stwTick+0x28>)
 8003ba4:	680b      	ldr	r3, [r1, #0]
 8003ba6:	f362 0317 	bfi	r3, r2, #0, #24
 8003baa:	600b      	str	r3, [r1, #0]
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	2000383c 	.word	0x2000383c

08003bbc <stwStop>:
void stwStop(void){
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <stwStop+0x18>)
 8003bc2:	78d3      	ldrb	r3, [r2, #3]
 8003bc4:	f36f 0300 	bfc	r3, #0, #1
 8003bc8:	70d3      	strb	r3, [r2, #3]
}
 8003bca:	bf00      	nop
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	2000383c 	.word	0x2000383c

08003bd8 <stwClear>:
void stwClear(void){
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
	stwS.cnt = 0;
 8003bdc:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <stwClear+0x18>)
 8003bde:	6813      	ldr	r3, [r2, #0]
 8003be0:	f36f 0317 	bfc	r3, #0, #24
 8003be4:	6013      	str	r3, [r2, #0]
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	2000383c 	.word	0x2000383c

08003bf4 <stwSave>:
void stwSave(void){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <stwSave+0x18>)
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <stwSave+0x1c>)
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8003c04:	4610      	mov	r0, r2
 8003c06:	4798      	blx	r3
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	2000014c 	.word	0x2000014c
 8003c10:	2000383c 	.word	0x2000383c

08003c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <SystemInit+0x20>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <SystemInit+0x20>)
 8003c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b096      	sub	sp, #88	; 0x58
 8003c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	605a      	str	r2, [r3, #4]
 8003c60:	609a      	str	r2, [r3, #8]
 8003c62:	60da      	str	r2, [r3, #12]
 8003c64:	611a      	str	r2, [r3, #16]
 8003c66:	615a      	str	r2, [r3, #20]
 8003c68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c6a:	1d3b      	adds	r3, r7, #4
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	2100      	movs	r1, #0
 8003c70:	4618      	mov	r0, r3
 8003c72:	f009 fd27 	bl	800d6c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c76:	4b3f      	ldr	r3, [pc, #252]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003c78:	4a3f      	ldr	r2, [pc, #252]	; (8003d78 <MX_TIM1_Init+0x140>)
 8003c7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8003c7c:	4b3d      	ldr	r3, [pc, #244]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003c7e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003c82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c84:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003c8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c92:	4b38      	ldr	r3, [pc, #224]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c9e:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003ca0:	2280      	movs	r2, #128	; 0x80
 8003ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ca4:	4833      	ldr	r0, [pc, #204]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003ca6:	f007 fabb 	bl	800b220 <HAL_TIM_Base_Init>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003cb0:	f7ff fda2 	bl	80037f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cb8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003cba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	482c      	ldr	r0, [pc, #176]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003cc2:	f007 fe59 	bl	800b978 <HAL_TIM_ConfigClockSource>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003ccc:	f7ff fd94 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003cd0:	4828      	ldr	r0, [pc, #160]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003cd2:	f007 fb65 	bl	800b3a0 <HAL_TIM_PWM_Init>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003cdc:	f7ff fd8c 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ce8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cec:	4619      	mov	r1, r3
 8003cee:	4821      	ldr	r0, [pc, #132]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003cf0:	f008 fa42 	bl	800c178 <HAL_TIMEx_MasterConfigSynchronization>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003cfa:	f7ff fd7d 	bl	80037f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cfe:	2360      	movs	r3, #96	; 0x60
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8003d02:	2302      	movs	r3, #2
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d06:	2300      	movs	r3, #0
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d12:	2300      	movs	r3, #0
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d16:	2300      	movs	r3, #0
 8003d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d1e:	2200      	movs	r2, #0
 8003d20:	4619      	mov	r1, r3
 8003d22:	4814      	ldr	r0, [pc, #80]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003d24:	f007 fd66 	bl	800b7f4 <HAL_TIM_PWM_ConfigChannel>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8003d2e:	f7ff fd63 	bl	80037f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d50:	1d3b      	adds	r3, r7, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4807      	ldr	r0, [pc, #28]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003d56:	f008 fa8b 	bl	800c270 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003d60:	f7ff fd4a 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003d64:	4803      	ldr	r0, [pc, #12]	; (8003d74 <MX_TIM1_Init+0x13c>)
 8003d66:	f000 f8ff 	bl	8003f68 <HAL_TIM_MspPostInit>

}
 8003d6a:	bf00      	nop
 8003d6c:	3758      	adds	r7, #88	; 0x58
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20003840 	.word	0x20003840
 8003d78:	40010000 	.word	0x40010000

08003d7c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <MX_TIM10_Init+0x40>)
 8003d82:	4a0f      	ldr	r2, [pc, #60]	; (8003dc0 <MX_TIM10_Init+0x44>)
 8003d84:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8003d86:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <MX_TIM10_Init+0x40>)
 8003d88:	f244 129f 	movw	r2, #16799	; 0x419f
 8003d8c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <MX_TIM10_Init+0x40>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <MX_TIM10_Init+0x40>)
 8003d96:	2263      	movs	r2, #99	; 0x63
 8003d98:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d9a:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <MX_TIM10_Init+0x40>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <MX_TIM10_Init+0x40>)
 8003da2:	2280      	movs	r2, #128	; 0x80
 8003da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003da6:	4805      	ldr	r0, [pc, #20]	; (8003dbc <MX_TIM10_Init+0x40>)
 8003da8:	f007 fa3a 	bl	800b220 <HAL_TIM_Base_Init>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003db2:	f7ff fd21 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20003888 	.word	0x20003888
 8003dc0:	40014400 	.word	0x40014400

08003dc4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <MX_TIM11_Init+0x40>)
 8003dca:	4a0f      	ldr	r2, [pc, #60]	; (8003e08 <MX_TIM11_Init+0x44>)
 8003dcc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <MX_TIM11_Init+0x40>)
 8003dd0:	f244 129f 	movw	r2, #16799	; 0x419f
 8003dd4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <MX_TIM11_Init+0x40>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 499;
 8003ddc:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <MX_TIM11_Init+0x40>)
 8003dde:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003de2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <MX_TIM11_Init+0x40>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <MX_TIM11_Init+0x40>)
 8003dec:	2280      	movs	r2, #128	; 0x80
 8003dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003df0:	4804      	ldr	r0, [pc, #16]	; (8003e04 <MX_TIM11_Init+0x40>)
 8003df2:	f007 fa15 	bl	800b220 <HAL_TIM_Base_Init>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8003dfc:	f7ff fcfc 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200038d0 	.word	0x200038d0
 8003e08:	40014800 	.word	0x40014800

08003e0c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003e10:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <MX_TIM13_Init+0x40>)
 8003e12:	4a0f      	ldr	r2, [pc, #60]	; (8003e50 <MX_TIM13_Init+0x44>)
 8003e14:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <MX_TIM13_Init+0x40>)
 8003e18:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003e1c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <MX_TIM13_Init+0x40>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8003e24:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <MX_TIM13_Init+0x40>)
 8003e26:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e2a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <MX_TIM13_Init+0x40>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <MX_TIM13_Init+0x40>)
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003e38:	4804      	ldr	r0, [pc, #16]	; (8003e4c <MX_TIM13_Init+0x40>)
 8003e3a:	f007 f9f1 	bl	800b220 <HAL_TIM_Base_Init>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003e44:	f7ff fcd8 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003e48:	bf00      	nop
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20003918 	.word	0x20003918
 8003e50:	40001c00 	.word	0x40001c00

08003e54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a3c      	ldr	r2, [pc, #240]	; (8003f54 <HAL_TIM_Base_MspInit+0x100>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d11e      	bne.n	8003ea4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	4a3a      	ldr	r2, [pc, #232]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	6453      	str	r3, [r2, #68]	; 0x44
 8003e76:	4b38      	ldr	r3, [pc, #224]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003e82:	2200      	movs	r2, #0
 8003e84:	2100      	movs	r1, #0
 8003e86:	2019      	movs	r0, #25
 8003e88:	f003 ff55 	bl	8007d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003e8c:	2019      	movs	r0, #25
 8003e8e:	f003 ff6e 	bl	8007d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003e92:	2200      	movs	r2, #0
 8003e94:	2100      	movs	r1, #0
 8003e96:	201a      	movs	r0, #26
 8003e98:	f003 ff4d 	bl	8007d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003e9c:	201a      	movs	r0, #26
 8003e9e:	f003 ff66 	bl	8007d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003ea2:	e052      	b.n	8003f4a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM10)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2c      	ldr	r2, [pc, #176]	; (8003f5c <HAL_TIM_Base_MspInit+0x108>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d116      	bne.n	8003edc <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	4a28      	ldr	r2, [pc, #160]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2100      	movs	r1, #0
 8003ece:	2019      	movs	r0, #25
 8003ed0:	f003 ff31 	bl	8007d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003ed4:	2019      	movs	r0, #25
 8003ed6:	f003 ff4a 	bl	8007d6e <HAL_NVIC_EnableIRQ>
}
 8003eda:	e036      	b.n	8003f4a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM11)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <HAL_TIM_Base_MspInit+0x10c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d116      	bne.n	8003f14 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4a1a      	ldr	r2, [pc, #104]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef6:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2100      	movs	r1, #0
 8003f06:	201a      	movs	r0, #26
 8003f08:	f003 ff15 	bl	8007d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003f0c:	201a      	movs	r0, #26
 8003f0e:	f003 ff2e 	bl	8007d6e <HAL_NVIC_EnableIRQ>
}
 8003f12:	e01a      	b.n	8003f4a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM13)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <HAL_TIM_Base_MspInit+0x110>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d115      	bne.n	8003f4a <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a0c      	ldr	r2, [pc, #48]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_TIM_Base_MspInit+0x104>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	202c      	movs	r0, #44	; 0x2c
 8003f40:	f003 fef9 	bl	8007d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003f44:	202c      	movs	r0, #44	; 0x2c
 8003f46:	f003 ff12 	bl	8007d6e <HAL_NVIC_EnableIRQ>
}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800
 8003f64:	40001c00 	.word	0x40001c00

08003f68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f70:	f107 030c 	add.w	r3, r7, #12
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <HAL_TIM_MspPostInit+0x68>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d11e      	bne.n	8003fc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <HAL_TIM_MspPostInit+0x6c>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	4a10      	ldr	r2, [pc, #64]	; (8003fd4 <HAL_TIM_MspPostInit+0x6c>)
 8003f94:	f043 0310 	orr.w	r3, r3, #16
 8003f98:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <HAL_TIM_MspPostInit+0x6c>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fac:	2302      	movs	r3, #2
 8003fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fbc:	f107 030c 	add.w	r3, r7, #12
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4805      	ldr	r0, [pc, #20]	; (8003fd8 <HAL_TIM_MspPostInit+0x70>)
 8003fc4:	f004 faf0 	bl	80085a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003fc8:	bf00      	nop
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40021000 	.word	0x40021000

08003fdc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <MX_USART3_UART_Init+0x4c>)
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <MX_USART3_UART_Init+0x50>)
 8003fe4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <MX_USART3_UART_Init+0x4c>)
 8003fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <MX_USART3_UART_Init+0x4c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <MX_USART3_UART_Init+0x4c>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <MX_USART3_UART_Init+0x4c>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <MX_USART3_UART_Init+0x4c>)
 8004002:	220c      	movs	r2, #12
 8004004:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <MX_USART3_UART_Init+0x4c>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <MX_USART3_UART_Init+0x4c>)
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004012:	4805      	ldr	r0, [pc, #20]	; (8004028 <MX_USART3_UART_Init+0x4c>)
 8004014:	f008 f992 	bl	800c33c <HAL_UART_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800401e:	f7ff fbeb 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20003960 	.word	0x20003960
 800402c:	40004800 	.word	0x40004800

08004030 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <MX_USART6_UART_Init+0x4c>)
 8004036:	4a12      	ldr	r2, [pc, #72]	; (8004080 <MX_USART6_UART_Init+0x50>)
 8004038:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800403a:	4b10      	ldr	r3, [pc, #64]	; (800407c <MX_USART6_UART_Init+0x4c>)
 800403c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004040:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <MX_USART6_UART_Init+0x4c>)
 8004044:	2200      	movs	r2, #0
 8004046:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <MX_USART6_UART_Init+0x4c>)
 800404a:	2200      	movs	r2, #0
 800404c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <MX_USART6_UART_Init+0x4c>)
 8004050:	2200      	movs	r2, #0
 8004052:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8004054:	4b09      	ldr	r3, [pc, #36]	; (800407c <MX_USART6_UART_Init+0x4c>)
 8004056:	2204      	movs	r2, #4
 8004058:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800405a:	4b08      	ldr	r3, [pc, #32]	; (800407c <MX_USART6_UART_Init+0x4c>)
 800405c:	2200      	movs	r2, #0
 800405e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <MX_USART6_UART_Init+0x4c>)
 8004062:	2200      	movs	r2, #0
 8004064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004066:	4805      	ldr	r0, [pc, #20]	; (800407c <MX_USART6_UART_Init+0x4c>)
 8004068:	f008 f968 	bl	800c33c <HAL_UART_Init>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004072:	f7ff fbc1 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	200039a4 	.word	0x200039a4
 8004080:	40011400 	.word	0x40011400

08004084 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	; 0x30
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800408c:	f107 031c 	add.w	r3, r7, #28
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a4d      	ldr	r2, [pc, #308]	; (80041d8 <HAL_UART_MspInit+0x154>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d12d      	bne.n	8004102 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	4b4c      	ldr	r3, [pc, #304]	; (80041dc <HAL_UART_MspInit+0x158>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	4a4b      	ldr	r2, [pc, #300]	; (80041dc <HAL_UART_MspInit+0x158>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b4:	6413      	str	r3, [r2, #64]	; 0x40
 80040b6:	4b49      	ldr	r3, [pc, #292]	; (80041dc <HAL_UART_MspInit+0x158>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	4b45      	ldr	r3, [pc, #276]	; (80041dc <HAL_UART_MspInit+0x158>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	4a44      	ldr	r2, [pc, #272]	; (80041dc <HAL_UART_MspInit+0x158>)
 80040cc:	f043 0308 	orr.w	r3, r3, #8
 80040d0:	6313      	str	r3, [r2, #48]	; 0x30
 80040d2:	4b42      	ldr	r3, [pc, #264]	; (80041dc <HAL_UART_MspInit+0x158>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80040de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e4:	2302      	movs	r3, #2
 80040e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ec:	2303      	movs	r3, #3
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040f0:	2307      	movs	r3, #7
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040f4:	f107 031c 	add.w	r3, r7, #28
 80040f8:	4619      	mov	r1, r3
 80040fa:	4839      	ldr	r0, [pc, #228]	; (80041e0 <HAL_UART_MspInit+0x15c>)
 80040fc:	f004 fa54 	bl	80085a8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004100:	e066      	b.n	80041d0 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART6)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a37      	ldr	r2, [pc, #220]	; (80041e4 <HAL_UART_MspInit+0x160>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d161      	bne.n	80041d0 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	4b32      	ldr	r3, [pc, #200]	; (80041dc <HAL_UART_MspInit+0x158>)
 8004112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004114:	4a31      	ldr	r2, [pc, #196]	; (80041dc <HAL_UART_MspInit+0x158>)
 8004116:	f043 0320 	orr.w	r3, r3, #32
 800411a:	6453      	str	r3, [r2, #68]	; 0x44
 800411c:	4b2f      	ldr	r3, [pc, #188]	; (80041dc <HAL_UART_MspInit+0x158>)
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <HAL_UART_MspInit+0x158>)
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	4a2a      	ldr	r2, [pc, #168]	; (80041dc <HAL_UART_MspInit+0x158>)
 8004132:	f043 0304 	orr.w	r3, r3, #4
 8004136:	6313      	str	r3, [r2, #48]	; 0x30
 8004138:	4b28      	ldr	r3, [pc, #160]	; (80041dc <HAL_UART_MspInit+0x158>)
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004144:	23c0      	movs	r3, #192	; 0xc0
 8004146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004148:	2302      	movs	r3, #2
 800414a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004150:	2303      	movs	r3, #3
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004154:	2308      	movs	r3, #8
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004158:	f107 031c 	add.w	r3, r7, #28
 800415c:	4619      	mov	r1, r3
 800415e:	4822      	ldr	r0, [pc, #136]	; (80041e8 <HAL_UART_MspInit+0x164>)
 8004160:	f004 fa22 	bl	80085a8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004164:	4b21      	ldr	r3, [pc, #132]	; (80041ec <HAL_UART_MspInit+0x168>)
 8004166:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <HAL_UART_MspInit+0x16c>)
 8004168:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800416a:	4b20      	ldr	r3, [pc, #128]	; (80041ec <HAL_UART_MspInit+0x168>)
 800416c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004170:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004172:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <HAL_UART_MspInit+0x168>)
 8004174:	2200      	movs	r2, #0
 8004176:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004178:	4b1c      	ldr	r3, [pc, #112]	; (80041ec <HAL_UART_MspInit+0x168>)
 800417a:	2200      	movs	r2, #0
 800417c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800417e:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <HAL_UART_MspInit+0x168>)
 8004180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004184:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004186:	4b19      	ldr	r3, [pc, #100]	; (80041ec <HAL_UART_MspInit+0x168>)
 8004188:	2200      	movs	r2, #0
 800418a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800418c:	4b17      	ldr	r3, [pc, #92]	; (80041ec <HAL_UART_MspInit+0x168>)
 800418e:	2200      	movs	r2, #0
 8004190:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004192:	4b16      	ldr	r3, [pc, #88]	; (80041ec <HAL_UART_MspInit+0x168>)
 8004194:	2200      	movs	r2, #0
 8004196:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004198:	4b14      	ldr	r3, [pc, #80]	; (80041ec <HAL_UART_MspInit+0x168>)
 800419a:	2200      	movs	r2, #0
 800419c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800419e:	4b13      	ldr	r3, [pc, #76]	; (80041ec <HAL_UART_MspInit+0x168>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80041a4:	4811      	ldr	r0, [pc, #68]	; (80041ec <HAL_UART_MspInit+0x168>)
 80041a6:	f003 fdfd 	bl	8007da4 <HAL_DMA_Init>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80041b0:	f7ff fb22 	bl	80037f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <HAL_UART_MspInit+0x168>)
 80041b8:	639a      	str	r2, [r3, #56]	; 0x38
 80041ba:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <HAL_UART_MspInit+0x168>)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80041c0:	2200      	movs	r2, #0
 80041c2:	2100      	movs	r1, #0
 80041c4:	2047      	movs	r0, #71	; 0x47
 80041c6:	f003 fdb6 	bl	8007d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80041ca:	2047      	movs	r0, #71	; 0x47
 80041cc:	f003 fdcf 	bl	8007d6e <HAL_NVIC_EnableIRQ>
}
 80041d0:	bf00      	nop
 80041d2:	3730      	adds	r7, #48	; 0x30
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40004800 	.word	0x40004800
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40020c00 	.word	0x40020c00
 80041e4:	40011400 	.word	0x40011400
 80041e8:	40020800 	.word	0x40020800
 80041ec:	200039e8 	.word	0x200039e8
 80041f0:	40026428 	.word	0x40026428

080041f4 <setDefaultClbcks>:


// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <setDefaultClbcks+0x34>)
 80041fa:	4a0c      	ldr	r2, [pc, #48]	; (800422c <setDefaultClbcks+0x38>)
 80041fc:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <setDefaultClbcks+0x3c>)
 8004200:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <setDefaultClbcks+0x40>)
 8004202:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8004204:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <setDefaultClbcks+0x44>)
 8004206:	4a0d      	ldr	r2, [pc, #52]	; (800423c <setDefaultClbcks+0x48>)
 8004208:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <setDefaultClbcks+0x4c>)
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <setDefaultClbcks+0x50>)
 800420e:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 8004210:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <setDefaultClbcks+0x54>)
 8004212:	4a0e      	ldr	r2, [pc, #56]	; (800424c <setDefaultClbcks+0x58>)
 8004214:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 8004216:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <setDefaultClbcks+0x5c>)
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000570 	.word	0x20000570
 800422c:	080023d5 	.word	0x080023d5
 8004230:	200005b8 	.word	0x200005b8
 8004234:	080023e5 	.word	0x080023e5
 8004238:	20000594 	.word	0x20000594
 800423c:	08004735 	.word	0x08004735
 8004240:	20000624 	.word	0x20000624
 8004244:	08004779 	.word	0x08004779
 8004248:	200005dc 	.word	0x200005dc
 800424c:	080047c5 	.word	0x080047c5
 8004250:	20000600 	.word	0x20000600

08004254 <baroSetup>:

// function executed once on module load
void baroSetup(void){
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004258:	f7ff ffcc 	bl	80041f4 <setDefaultClbcks>
}
 800425c:	bf00      	nop
 800425e:	bd80      	pop	{r7, pc}

08004260 <baroMain>:
uint16_t maxX = 347;
uint8_t maxHeight = 225;
uint8_t minHeight = 110;

// main function
void baroMain(void){
 8004260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004264:	b0b2      	sub	sp, #200	; 0xc8
 8004266:	af04      	add	r7, sp, #16
	uint16_t minBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8004268:	2100      	movs	r1, #0
 800426a:	488b      	ldr	r0, [pc, #556]	; (8004498 <baroMain+0x238>)
 800426c:	f003 fa89 	bl	8007782 <cbuf_readn>
 8004270:	4603      	mov	r3, r0
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	uint16_t maxBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8004278:	2100      	movs	r1, #0
 800427a:	4887      	ldr	r0, [pc, #540]	; (8004498 <baroMain+0x238>)
 800427c:	f003 fa81 	bl	8007782 <cbuf_readn>
 8004280:	4603      	mov	r3, r0
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	uint16_t minTemp = read_nth_ring_buffer(&tempRing, 0);
 8004288:	2100      	movs	r1, #0
 800428a:	4884      	ldr	r0, [pc, #528]	; (800449c <baroMain+0x23c>)
 800428c:	f003 fb1f 	bl	80078ce <read_nth_ring_buffer>
 8004290:	4603      	mov	r3, r0
 8004292:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	uint16_t maxTemp = read_nth_ring_buffer(&tempRing, 0);
 8004296:	2100      	movs	r1, #0
 8004298:	4880      	ldr	r0, [pc, #512]	; (800449c <baroMain+0x23c>)
 800429a:	f003 fb18 	bl	80078ce <read_nth_ring_buffer>
 800429e:	4603      	mov	r3, r0
 80042a0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	char str1[50] = {0};
 80042a4:	2300      	movs	r3, #0
 80042a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80042ac:	222e      	movs	r2, #46	; 0x2e
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f009 fa07 	bl	800d6c4 <memset>
	char str3[50] = {0};
 80042b6:	2300      	movs	r3, #0
 80042b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80042be:	222e      	movs	r2, #46	; 0x2e
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f009 f9fe 	bl	800d6c4 <memset>
	char str4[50] = {0};
 80042c8:	2300      	movs	r3, #0
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	f107 0308 	add.w	r3, r7, #8
 80042d0:	222e      	movs	r2, #46	; 0x2e
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f009 f9f5 	bl	800d6c4 <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 80042da:	4b71      	ldr	r3, [pc, #452]	; (80044a0 <baroMain+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fc f94c 	bl	800057c <__aeabi_f2d>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80042ec:	496d      	ldr	r1, [pc, #436]	; (80044a4 <baroMain+0x244>)
 80042ee:	f00a fb17 	bl	800e920 <siprintf>
	lcdPutStr(10, 14, str1, font_12_zekton);
 80042f2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80042f6:	4b6c      	ldr	r3, [pc, #432]	; (80044a8 <baroMain+0x248>)
 80042f8:	210e      	movs	r1, #14
 80042fa:	200a      	movs	r0, #10
 80042fc:	f7fe fab8 	bl	8002870 <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 8004300:	4b67      	ldr	r3, [pc, #412]	; (80044a0 <baroMain+0x240>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80044ac <baroMain+0x24c>
 8004310:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004314:	ee16 0a90 	vmov	r0, s13
 8004318:	f7fc f930 	bl	800057c <__aeabi_f2d>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8004324:	4962      	ldr	r1, [pc, #392]	; (80044b0 <baroMain+0x250>)
 8004326:	f00a fafb 	bl	800e920 <siprintf>
	lcdPutStr(10, 30, str1, font_12_zekton);
 800432a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800432e:	4b5e      	ldr	r3, [pc, #376]	; (80044a8 <baroMain+0x248>)
 8004330:	211e      	movs	r1, #30
 8004332:	200a      	movs	r0, #10
 8004334:	f7fe fa9c 	bl	8002870 <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004338:	4b5e      	ldr	r3, [pc, #376]	; (80044b4 <baroMain+0x254>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d123      	bne.n	8004388 <baroMain+0x128>
		sprintf(&str4, "Fixed altitude mode");
 8004340:	1d3b      	adds	r3, r7, #4
 8004342:	495d      	ldr	r1, [pc, #372]	; (80044b8 <baroMain+0x258>)
 8004344:	4618      	mov	r0, r3
 8004346:	f00a faeb 	bl	800e920 <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 800434a:	4b55      	ldr	r3, [pc, #340]	; (80044a0 <baroMain+0x240>)
 800434c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004350:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80044ac <baroMain+0x24c>
 8004354:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004358:	ee16 0a90 	vmov	r0, s13
 800435c:	f7fc f90e 	bl	800057c <__aeabi_f2d>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8004368:	4954      	ldr	r1, [pc, #336]	; (80044bc <baroMain+0x25c>)
 800436a:	f00a fad9 	bl	800e920 <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 800436e:	4b54      	ldr	r3, [pc, #336]	; (80044c0 <baroMain+0x260>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fc f902 	bl	800057c <__aeabi_f2d>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004380:	4950      	ldr	r1, [pc, #320]	; (80044c4 <baroMain+0x264>)
 8004382:	f00a facd 	bl	800e920 <siprintf>
 8004386:	e022      	b.n	80043ce <baroMain+0x16e>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	494f      	ldr	r1, [pc, #316]	; (80044c8 <baroMain+0x268>)
 800438c:	4618      	mov	r0, r3
 800438e:	f00a fac7 	bl	800e920 <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 8004392:	4b43      	ldr	r3, [pc, #268]	; (80044a0 <baroMain+0x240>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc f8f0 	bl	800057c <__aeabi_f2d>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80043a4:	4949      	ldr	r1, [pc, #292]	; (80044cc <baroMain+0x26c>)
 80043a6:	f00a fabb 	bl	800e920 <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 80043aa:	4b49      	ldr	r3, [pc, #292]	; (80044d0 <baroMain+0x270>)
 80043ac:	edd3 7a00 	vldr	s15, [r3]
 80043b0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80044ac <baroMain+0x24c>
 80043b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80043b8:	ee16 0a90 	vmov	r0, s13
 80043bc:	f7fc f8de 	bl	800057c <__aeabi_f2d>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80043c8:	4942      	ldr	r1, [pc, #264]	; (80044d4 <baroMain+0x274>)
 80043ca:	f00a faa9 	bl	800e920 <siprintf>
	}
	lcdPutStr(10, 50, str4, font_12_zekton);
 80043ce:	1d3a      	adds	r2, r7, #4
 80043d0:	4b35      	ldr	r3, [pc, #212]	; (80044a8 <baroMain+0x248>)
 80043d2:	2132      	movs	r1, #50	; 0x32
 80043d4:	200a      	movs	r0, #10
 80043d6:	f7fe fa4b 	bl	8002870 <lcdPutStr>
	lcdPutStr(10, 66, str1, font_12_zekton);
 80043da:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80043de:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <baroMain+0x248>)
 80043e0:	2142      	movs	r1, #66	; 0x42
 80043e2:	200a      	movs	r0, #10
 80043e4:	f7fe fa44 	bl	8002870 <lcdPutStr>
	lcdPutStr(10, 82, str3, font_12_zekton);
 80043e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043ec:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <baroMain+0x248>)
 80043ee:	2152      	movs	r1, #82	; 0x52
 80043f0:	200a      	movs	r0, #10
 80043f2:	f7fe fa3d 	bl	8002870 <lcdPutStr>

	for(uint16_t i=0; i<tempRing.num_entries; i++){
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80043fc:	e041      	b.n	8004482 <baroMain+0x222>
		uint16_t* currB= (uint16_t*)(cbuf_readn(&baroRing, i));
 80043fe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004402:	4619      	mov	r1, r3
 8004404:	4824      	ldr	r0, [pc, #144]	; (8004498 <baroMain+0x238>)
 8004406:	f003 f9bc 	bl	8007782 <cbuf_readn>
 800440a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		uint16_t currT= read_nth_ring_buffer(&tempRing, i);
 800440e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004412:	4619      	mov	r1, r3
 8004414:	4821      	ldr	r0, [pc, #132]	; (800449c <baroMain+0x23c>)
 8004416:	f003 fa5a 	bl	80078ce <read_nth_ring_buffer>
 800441a:	4603      	mov	r3, r0
 800441c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		if(*currB>=maxBaro) maxBaro = *currB;
 8004420:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800442a:	429a      	cmp	r2, r3
 800442c:	d804      	bhi.n	8004438 <baroMain+0x1d8>
 800442e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		if(*currB<=minBaro) minBaro = *currB;
 8004438:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8004442:	429a      	cmp	r2, r3
 8004444:	d304      	bcc.n	8004450 <baroMain+0x1f0>
 8004446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		if(currT>=maxTemp) maxTemp = currT;
 8004450:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004454:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8004458:	429a      	cmp	r2, r3
 800445a:	d303      	bcc.n	8004464 <baroMain+0x204>
 800445c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004460:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		if(currT<=minTemp) minTemp = currT;
 8004464:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004468:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800446c:	429a      	cmp	r2, r3
 800446e:	d803      	bhi.n	8004478 <baroMain+0x218>
 8004470:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004474:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8004478:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800447c:	3301      	adds	r3, #1
 800447e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <baroMain+0x23c>)
 8004484:	891b      	ldrh	r3, [r3, #8]
 8004486:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800448a:	429a      	cmp	r2, r3
 800448c:	d3b7      	bcc.n	80043fe <baroMain+0x19e>
	}
	for(uint16_t j=minX; j<maxX; j++){
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <baroMain+0x278>)
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8004496:	e0ba      	b.n	800460e <baroMain+0x3ae>
 8004498:	200035a0 	.word	0x200035a0
 800449c:	200035b4 	.word	0x200035b4
 80044a0:	20000560 	.word	0x20000560
 80044a4:	08016408 	.word	0x08016408
 80044a8:	08017138 	.word	0x08017138
 80044ac:	42c80000 	.word	0x42c80000
 80044b0:	08016420 	.word	0x08016420
 80044b4:	20003a48 	.word	0x20003a48
 80044b8:	0801643c 	.word	0x0801643c
 80044bc:	08016450 	.word	0x08016450
 80044c0:	20000004 	.word	0x20000004
 80044c4:	08016474 	.word	0x08016474
 80044c8:	08016494 	.word	0x08016494
 80044cc:	080164a8 	.word	0x080164a8
 80044d0:	20000000 	.word	0x20000000
 80044d4:	080164c8 	.word	0x080164c8
 80044d8:	20000184 	.word	0x20000184
		uint16_t i = (j-minX)*baroRing.elemNum/(maxX-minX);
 80044dc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80044e0:	4a8c      	ldr	r2, [pc, #560]	; (8004714 <baroMain+0x4b4>)
 80044e2:	8812      	ldrh	r2, [r2, #0]
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	4a8c      	ldr	r2, [pc, #560]	; (8004718 <baroMain+0x4b8>)
 80044e8:	8912      	ldrh	r2, [r2, #8]
 80044ea:	fb03 f202 	mul.w	r2, r3, r2
 80044ee:	4b8b      	ldr	r3, [pc, #556]	; (800471c <baroMain+0x4bc>)
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	4619      	mov	r1, r3
 80044f4:	4b87      	ldr	r3, [pc, #540]	; (8004714 <baroMain+0x4b4>)
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	1acb      	subs	r3, r1, r3
 80044fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80044fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		// graph data
		uint16_t* vvaall= (uint16_t*)(cbuf_readn(&baroRing, i));
 8004502:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004506:	4619      	mov	r1, r3
 8004508:	4883      	ldr	r0, [pc, #524]	; (8004718 <baroMain+0x4b8>)
 800450a:	f003 f93a 	bl	8007782 <cbuf_readn>
 800450e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
 8004512:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 8004516:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800451a:	1c5c      	adds	r4, r3, #1
 800451c:	4b80      	ldr	r3, [pc, #512]	; (8004720 <baroMain+0x4c0>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	461d      	mov	r5, r3
 8004522:	4b7f      	ldr	r3, [pc, #508]	; (8004720 <baroMain+0x4c0>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	4b7e      	ldr	r3, [pc, #504]	; (8004724 <baroMain+0x4c4>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004532:	8812      	ldrh	r2, [r2, #0]
 8004534:	4611      	mov	r1, r2
 8004536:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800453a:	1a8a      	subs	r2, r1, r2
 800453c:	fb03 f202 	mul.w	r2, r3, r2
 8004540:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8004544:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004548:	1acb      	subs	r3, r1, r3
 800454a:	fb92 f3f3 	sdiv	r3, r2, r3
 800454e:	1aea      	subs	r2, r5, r3
 8004550:	4b73      	ldr	r3, [pc, #460]	; (8004720 <baroMain+0x4c0>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	4619      	mov	r1, r3
 8004556:	2300      	movs	r3, #0
 8004558:	9302      	str	r3, [sp, #8]
 800455a:	2302      	movs	r3, #2
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	2301      	movs	r3, #1
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	460b      	mov	r3, r1
 8004564:	4621      	mov	r1, r4
 8004566:	f7fe ff68 	bl	800343a <lcdRect2>
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 800456a:	f8b7 50ac 	ldrh.w	r5, [r7, #172]	; 0xac
 800456e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004572:	1c5e      	adds	r6, r3, #1
 8004574:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <baroMain+0x4c0>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	4698      	mov	r8, r3
 800457a:	4b69      	ldr	r3, [pc, #420]	; (8004720 <baroMain+0x4c0>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	4b68      	ldr	r3, [pc, #416]	; (8004724 <baroMain+0x4c4>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	1ad4      	subs	r4, r2, r3
 8004586:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800458a:	4619      	mov	r1, r3
 800458c:	4866      	ldr	r0, [pc, #408]	; (8004728 <baroMain+0x4c8>)
 800458e:	f003 f99e 	bl	80078ce <read_nth_ring_buffer>
 8004592:	4602      	mov	r2, r0
 8004594:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	fb03 f204 	mul.w	r2, r3, r4
 800459e:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 80045a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80045a6:	1acb      	subs	r3, r1, r3
 80045a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80045ac:	eba8 0203 	sub.w	r2, r8, r3
 80045b0:	4b5b      	ldr	r3, [pc, #364]	; (8004720 <baroMain+0x4c0>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	4619      	mov	r1, r3
 80045b6:	2300      	movs	r3, #0
 80045b8:	9302      	str	r3, [sp, #8]
 80045ba:	230e      	movs	r3, #14
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	2301      	movs	r3, #1
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	460b      	mov	r3, r1
 80045c4:	4631      	mov	r1, r6
 80045c6:	4628      	mov	r0, r5
 80045c8:	f7fe ff37 	bl	800343a <lcdRect2>
//		lcdRect2(400/baroRing.maxSize*i, 400/baroRing.maxSize*i+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
//		lcdRect2(400/tempRing.size*i, 400/tempRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		// horizontal lines
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 80045cc:	4b51      	ldr	r3, [pc, #324]	; (8004714 <baroMain+0x4b4>)
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	4b52      	ldr	r3, [pc, #328]	; (800471c <baroMain+0x4bc>)
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	4619      	mov	r1, r3
 80045d8:	4b52      	ldr	r3, [pc, #328]	; (8004724 <baroMain+0x4c4>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	2302      	movs	r3, #2
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	2301      	movs	r3, #1
 80045e4:	f7fe f9e8 	bl	80029b8 <lcdHLine2>
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 80045e8:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <baroMain+0x4b4>)
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	4b4b      	ldr	r3, [pc, #300]	; (800471c <baroMain+0x4bc>)
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	4619      	mov	r1, r3
 80045f4:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <baroMain+0x4c0>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	2302      	movs	r3, #2
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	2301      	movs	r3, #1
 8004600:	f7fe f9da 	bl	80029b8 <lcdHLine2>
	for(uint16_t j=minX; j<maxX; j++){
 8004604:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004608:	3301      	adds	r3, #1
 800460a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800460e:	4b43      	ldr	r3, [pc, #268]	; (800471c <baroMain+0x4bc>)
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8004616:	429a      	cmp	r2, r3
 8004618:	f4ff af60 	bcc.w	80044dc <baroMain+0x27c>
//		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
	}
	sprintf(&str4, "%0.1f", ((float)maxTemp)/10);
 800461c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8004620:	ee07 3a90 	vmov	s15, r3
 8004624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004628:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800462c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004630:	ee16 0a90 	vmov	r0, s13
 8004634:	f7fb ffa2 	bl	800057c <__aeabi_f2d>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	1d38      	adds	r0, r7, #4
 800463e:	493b      	ldr	r1, [pc, #236]	; (800472c <baroMain+0x4cc>)
 8004640:	f00a f96e 	bl	800e920 <siprintf>
	lcdPutStr(0, minHeight-6, str4, smallestFont);
 8004644:	4b37      	ldr	r3, [pc, #220]	; (8004724 <baroMain+0x4c4>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	3b06      	subs	r3, #6
 800464a:	b2d9      	uxtb	r1, r3
 800464c:	1d3a      	adds	r2, r7, #4
 800464e:	4b38      	ldr	r3, [pc, #224]	; (8004730 <baroMain+0x4d0>)
 8004650:	2000      	movs	r0, #0
 8004652:	f7fe f90d 	bl	8002870 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minTemp)/10);
 8004656:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004662:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004666:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800466a:	ee16 0a90 	vmov	r0, s13
 800466e:	f7fb ff85 	bl	800057c <__aeabi_f2d>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	1d38      	adds	r0, r7, #4
 8004678:	492c      	ldr	r1, [pc, #176]	; (800472c <baroMain+0x4cc>)
 800467a:	f00a f951 	bl	800e920 <siprintf>
	lcdPutStr(0, maxHeight-6, str4, smallestFont);
 800467e:	4b28      	ldr	r3, [pc, #160]	; (8004720 <baroMain+0x4c0>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	3b06      	subs	r3, #6
 8004684:	b2d9      	uxtb	r1, r3
 8004686:	1d3a      	adds	r2, r7, #4
 8004688:	4b29      	ldr	r3, [pc, #164]	; (8004730 <baroMain+0x4d0>)
 800468a:	2000      	movs	r0, #0
 800468c:	f7fe f8f0 	bl	8002870 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)maxBaro)/10);
 8004690:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80046a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046a4:	ee16 0a90 	vmov	r0, s13
 80046a8:	f7fb ff68 	bl	800057c <__aeabi_f2d>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	1d38      	adds	r0, r7, #4
 80046b2:	491e      	ldr	r1, [pc, #120]	; (800472c <baroMain+0x4cc>)
 80046b4:	f00a f934 	bl	800e920 <siprintf>
	lcdPutStr(350, minHeight-6, str4, smallestFont);
 80046b8:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <baroMain+0x4c4>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	3b06      	subs	r3, #6
 80046be:	b2d9      	uxtb	r1, r3
 80046c0:	1d3a      	adds	r2, r7, #4
 80046c2:	4b1b      	ldr	r3, [pc, #108]	; (8004730 <baroMain+0x4d0>)
 80046c4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80046c8:	f7fe f8d2 	bl	8002870 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minBaro)/10);
 80046cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80046d0:	ee07 3a90 	vmov	s15, r3
 80046d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80046dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046e0:	ee16 0a90 	vmov	r0, s13
 80046e4:	f7fb ff4a 	bl	800057c <__aeabi_f2d>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	1d38      	adds	r0, r7, #4
 80046ee:	490f      	ldr	r1, [pc, #60]	; (800472c <baroMain+0x4cc>)
 80046f0:	f00a f916 	bl	800e920 <siprintf>
	lcdPutStr(350, maxHeight-6, str4, smallestFont);
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <baroMain+0x4c0>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	3b06      	subs	r3, #6
 80046fa:	b2d9      	uxtb	r1, r3
 80046fc:	1d3a      	adds	r2, r7, #4
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <baroMain+0x4d0>)
 8004700:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8004704:	f7fe f8b4 	bl	8002870 <lcdPutStr>
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 8004708:	bf00      	nop
 800470a:	37b8      	adds	r7, #184	; 0xb8
 800470c:	46bd      	mov	sp, r7
 800470e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004712:	bf00      	nop
 8004714:	20000184 	.word	0x20000184
 8004718:	200035a0 	.word	0x200035a0
 800471c:	20000186 	.word	0x20000186
 8004720:	20000188 	.word	0x20000188
 8004724:	20000189 	.word	0x20000189
 8004728:	200035b4 	.word	0x200035b4
 800472c:	080164e8 	.word	0x080164e8
 8004730:	08016cbc 	.word	0x08016cbc

08004734 <changeBaroMode>:

void changeBaroMode(void){
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <changeBaroMode+0x34>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d107      	bne.n	8004750 <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8004740:	4b0a      	ldr	r3, [pc, #40]	; (800476c <changeBaroMode+0x38>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <changeBaroMode+0x3c>)
 8004746:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 8004748:	4b07      	ldr	r3, [pc, #28]	; (8004768 <changeBaroMode+0x34>)
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 800474e:	e006      	b.n	800475e <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 8004750:	4b06      	ldr	r3, [pc, #24]	; (800476c <changeBaroMode+0x38>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a07      	ldr	r2, [pc, #28]	; (8004774 <changeBaroMode+0x40>)
 8004756:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <changeBaroMode+0x34>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
}
 800475e:	bf00      	nop
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	20003a48 	.word	0x20003a48
 800476c:	20000560 	.word	0x20000560
 8004770:	20000000 	.word	0x20000000
 8004774:	20000004 	.word	0x20000004

08004778 <addBaro>:
void addBaro(void){
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 800477c:	4b0e      	ldr	r3, [pc, #56]	; (80047b8 <addBaro+0x40>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <addBaro+0x22>
			fixedAltitude += 1;
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <addBaro+0x44>)
 8004786:	edd3 7a00 	vldr	s15, [r3]
 800478a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800478e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004792:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <addBaro+0x44>)
 8004794:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 8004798:	e009      	b.n	80047ae <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 800479a:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <addBaro+0x48>)
 800479c:	edd3 7a00 	vldr	s15, [r3]
 80047a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80047a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <addBaro+0x48>)
 80047aa:	edc3 7a00 	vstr	s15, [r3]
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	20003a48 	.word	0x20003a48
 80047bc:	20000004 	.word	0x20000004
 80047c0:	20000000 	.word	0x20000000

080047c4 <remBaro>:
void remBaro(void){
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 80047c8:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <remBaro+0x40>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <remBaro+0x22>
			fixedAltitude -= 1;
 80047d0:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <remBaro+0x44>)
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <remBaro+0x44>)
 80047e0:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 80047e4:	e009      	b.n	80047fa <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 80047e6:	4b09      	ldr	r3, [pc, #36]	; (800480c <remBaro+0x48>)
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80047f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <remBaro+0x48>)
 80047f6:	edc3 7a00 	vstr	s15, [r3]
}
 80047fa:	bf00      	nop
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	20003a48 	.word	0x20003a48
 8004808:	20000004 	.word	0x20000004
 800480c:	20000000 	.word	0x20000000

08004810 <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 8004818:	4a04      	ldr	r2, [pc, #16]	; (800482c <setupCntxMenu+0x1c>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6013      	str	r3, [r2, #0]
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20003a4c 	.word	0x20003a4c

08004830 <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
	hideCntxMenu();
 8004834:	f000 f87e 	bl	8004934 <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <cntxSelect+0x1c>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <cntxSelect+0x20>)
 8004840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	4798      	blx	r3
}
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20003a4a 	.word	0x20003a4a
 8004850:	200001e0 	.word	0x200001e0

08004854 <nextItem>:

void nextItem(void){
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <nextItem+0x34>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	4b0b      	ldr	r3, [pc, #44]	; (800488c <nextItem+0x38>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	3b01      	subs	r3, #1
 8004864:	429a      	cmp	r2, r3
 8004866:	da06      	bge.n	8004876 <nextItem+0x22>
		cntxPosition++;
 8004868:	4b07      	ldr	r3, [pc, #28]	; (8004888 <nextItem+0x34>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	b2da      	uxtb	r2, r3
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <nextItem+0x34>)
 8004872:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 8004874:	e002      	b.n	800487c <nextItem+0x28>
		cntxPosition = 0;
 8004876:	4b04      	ldr	r3, [pc, #16]	; (8004888 <nextItem+0x34>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20003a4a 	.word	0x20003a4a
 800488c:	2000018a 	.word	0x2000018a

08004890 <prevItem>:
void prevItem(void){
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <prevItem+0x30>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d006      	beq.n	80048aa <prevItem+0x1a>
		cntxPosition--;
 800489c:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <prevItem+0x30>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <prevItem+0x30>)
 80048a6:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 80048a8:	e005      	b.n	80048b6 <prevItem+0x26>
		cntxPosition = actionsNum-1;
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <prevItem+0x34>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <prevItem+0x30>)
 80048b4:	701a      	strb	r2, [r3, #0]
}
 80048b6:	bf00      	nop
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	20003a4a 	.word	0x20003a4a
 80048c4:	2000018a 	.word	0x2000018a

080048c8 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <setDefaultClbcks+0x34>)
 80048ce:	4a0c      	ldr	r2, [pc, #48]	; (8004900 <setDefaultClbcks+0x38>)
 80048d0:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 80048d2:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <setDefaultClbcks+0x3c>)
 80048d4:	4a0c      	ldr	r2, [pc, #48]	; (8004908 <setDefaultClbcks+0x40>)
 80048d6:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <setDefaultClbcks+0x3c>)
 80048da:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <setDefaultClbcks+0x40>)
 80048dc:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <setDefaultClbcks+0x44>)
 80048e0:	4a0b      	ldr	r2, [pc, #44]	; (8004910 <setDefaultClbcks+0x48>)
 80048e2:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <setDefaultClbcks+0x4c>)
 80048e6:	4a0c      	ldr	r2, [pc, #48]	; (8004918 <setDefaultClbcks+0x50>)
 80048e8:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <setDefaultClbcks+0x4c>)
 80048ec:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <setDefaultClbcks+0x50>)
 80048ee:	61da      	str	r2, [r3, #28]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000624 	.word	0x20000624
 8004900:	08004935 	.word	0x08004935
 8004904:	200005b8 	.word	0x200005b8
 8004908:	08004891 	.word	0x08004891
 800490c:	20000594 	.word	0x20000594
 8004910:	08004831 	.word	0x08004831
 8004914:	20000570 	.word	0x20000570
 8004918:	08004855 	.word	0x08004855

0800491c <showCntxMenu>:

void showCntxMenu(void){
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 8004920:	f7ff ffd2 	bl	80048c8 <setDefaultClbcks>
	isCntxOpen = 1;
 8004924:	4b02      	ldr	r3, [pc, #8]	; (8004930 <showCntxMenu+0x14>)
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20003a49 	.word	0x20003a49

08004934 <hideCntxMenu>:
void hideCntxMenu(void){
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 8004938:	f7fc ffa8 	bl	800188c <resetButtonHandlers>
	(*prevClbcks)();
 800493c:	4b03      	ldr	r3, [pc, #12]	; (800494c <hideCntxMenu+0x18>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4798      	blx	r3
	isCntxOpen = 0;
 8004942:	4b03      	ldr	r3, [pc, #12]	; (8004950 <hideCntxMenu+0x1c>)
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
}
 8004948:	bf00      	nop
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20003a4c 	.word	0x20003a4c
 8004950:	20003a49 	.word	0x20003a49

08004954 <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 800495a:	4b35      	ldr	r3, [pc, #212]	; (8004a30 <enableCntxMenu+0xdc>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d062      	beq.n	8004a28 <enableCntxMenu+0xd4>
//		clear rect
		lcdRect(0, 200, 5, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 0);
 8004962:	230e      	movs	r3, #14
 8004964:	461a      	mov	r2, r3
 8004966:	4b33      	ldr	r3, [pc, #204]	; (8004a34 <enableCntxMenu+0xe0>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	330a      	adds	r3, #10
 8004970:	2200      	movs	r2, #0
 8004972:	9200      	str	r2, [sp, #0]
 8004974:	2205      	movs	r2, #5
 8004976:	21c8      	movs	r1, #200	; 0xc8
 8004978:	2000      	movs	r0, #0
 800497a:	f7fe fd39 	bl	80033f0 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 800497e:	2301      	movs	r3, #1
 8004980:	2206      	movs	r2, #6
 8004982:	21c8      	movs	r1, #200	; 0xc8
 8004984:	2000      	movs	r0, #0
 8004986:	f7fe fbdd 	bl	8003144 <lcdHLine>
		lcdHLine(0, 200, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 1);
 800498a:	230e      	movs	r3, #14
 800498c:	461a      	mov	r2, r3
 800498e:	4b29      	ldr	r3, [pc, #164]	; (8004a34 <enableCntxMenu+0xe0>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	f103 020a 	add.w	r2, r3, #10
 800499a:	2301      	movs	r3, #1
 800499c:	21c8      	movs	r1, #200	; 0xc8
 800499e:	2000      	movs	r0, #0
 80049a0:	f7fe fbd0 	bl	8003144 <lcdHLine>
//		create list
		char item[30] = {0};
 80049a4:	2300      	movs	r3, #0
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	1d3b      	adds	r3, r7, #4
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	609a      	str	r2, [r3, #8]
 80049b2:	60da      	str	r2, [r3, #12]
 80049b4:	611a      	str	r2, [r3, #16]
 80049b6:	615a      	str	r2, [r3, #20]
 80049b8:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 80049ba:	2300      	movs	r3, #0
 80049bc:	77fb      	strb	r3, [r7, #31]
 80049be:	e018      	b.n	80049f2 <enableCntxMenu+0x9e>
			sprintf(&item, ContextActions[i]->name);
 80049c0:	7ffb      	ldrb	r3, [r7, #31]
 80049c2:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <enableCntxMenu+0xe4>)
 80049c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c8:	461a      	mov	r2, r3
 80049ca:	463b      	mov	r3, r7
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f009 ffa6 	bl	800e920 <siprintf>
			lcdPutStr(5, 10+(*font_12_zekton.font_Height)*i, item, font_12_zekton);
 80049d4:	220e      	movs	r2, #14
 80049d6:	7ffb      	ldrb	r3, [r7, #31]
 80049d8:	fb13 f302 	smulbb	r3, r3, r2
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	330a      	adds	r3, #10
 80049e0:	b2d9      	uxtb	r1, r3
 80049e2:	463a      	mov	r2, r7
 80049e4:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <enableCntxMenu+0xe8>)
 80049e6:	2005      	movs	r0, #5
 80049e8:	f7fd ff42 	bl	8002870 <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 80049ec:	7ffb      	ldrb	r3, [r7, #31]
 80049ee:	3301      	adds	r3, #1
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <enableCntxMenu+0xe0>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	7ffa      	ldrb	r2, [r7, #31]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d3e1      	bcc.n	80049c0 <enableCntxMenu+0x6c>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*font_12_zekton.font_Height)*cntxPosition, 8+(*font_12_zekton.font_Height)*(cntxPosition+1), 2);
 80049fc:	230e      	movs	r3, #14
 80049fe:	461a      	mov	r2, r3
 8004a00:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <enableCntxMenu+0xec>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	f103 0208 	add.w	r2, r3, #8
 8004a0c:	230e      	movs	r3, #14
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <enableCntxMenu+0xec>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	9100      	str	r1, [sp, #0]
 8004a20:	21c8      	movs	r1, #200	; 0xc8
 8004a22:	2000      	movs	r0, #0
 8004a24:	f7fe fce4 	bl	80033f0 <lcdRect>

	}
}
 8004a28:	bf00      	nop
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20003a49 	.word	0x20003a49
 8004a34:	2000018a 	.word	0x2000018a
 8004a38:	200001e0 	.word	0x200001e0
 8004a3c:	08017bc0 	.word	0x08017bc0
 8004a40:	20003a4a 	.word	0x20003a4a

08004a44 <nextPg>:
extern gpsDevice_t gpsDev;
extern char dmaBuffer[];

location_t location;

void nextPg(void){
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
	pageNum++;
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <nextPg+0x1c>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <nextPg+0x1c>)
 8004a52:	701a      	strb	r2, [r3, #0]
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20003a50 	.word	0x20003a50

08004a64 <prevPg>:
void prevPg(void){
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
	pageNum--;
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <prevPg+0x1c>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <prevPg+0x1c>)
 8004a72:	701a      	strb	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20003a50 	.word	0x20003a50

08004a84 <syncTime>:
void syncTime(void){
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
	RtcTime.Hours = location.utc_hour;
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <syncTime+0x48>)
 8004a8a:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <syncTime+0x4c>)
 8004a90:	701a      	strb	r2, [r3, #0]
		RtcTime.Minutes = location.utc_min;
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <syncTime+0x48>)
 8004a94:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8004a98:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <syncTime+0x4c>)
 8004a9a:	705a      	strb	r2, [r3, #1]
		RtcTime.Seconds = location.utc_sec;
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <syncTime+0x48>)
 8004a9e:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <syncTime+0x4c>)
 8004aa4:	709a      	strb	r2, [r3, #2]
		RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <syncTime+0x4c>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	60da      	str	r2, [r3, #12]
		RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004aac:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <syncTime+0x4c>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	4906      	ldr	r1, [pc, #24]	; (8004ad0 <syncTime+0x4c>)
 8004ab6:	4807      	ldr	r0, [pc, #28]	; (8004ad4 <syncTime+0x50>)
 8004ab8:	f005 fe9a 	bl	800a7f0 <HAL_RTC_SetTime>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <syncTime+0x42>
		{
		Error_Handler();
 8004ac2:	f7fe fe99 	bl	80037f8 <Error_Handler>
		}
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20003a58 	.word	0x20003a58
 8004ad0:	20003588 	.word	0x20003588
 8004ad4:	200037c4 	.word	0x200037c4

08004ad8 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8004adc:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <setDefaultClbcks+0x2c>)
 8004ade:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <setDefaultClbcks+0x30>)
 8004ae0:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <setDefaultClbcks+0x34>)
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <setDefaultClbcks+0x38>)
 8004ae6:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPg;
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <setDefaultClbcks+0x3c>)
 8004aea:	4a0b      	ldr	r2, [pc, #44]	; (8004b18 <setDefaultClbcks+0x40>)
 8004aec:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPg;
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <setDefaultClbcks+0x44>)
 8004af0:	4a0b      	ldr	r2, [pc, #44]	; (8004b20 <setDefaultClbcks+0x48>)
 8004af2:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &syncTime;
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <setDefaultClbcks+0x4c>)
 8004af6:	4a0c      	ldr	r2, [pc, #48]	; (8004b28 <setDefaultClbcks+0x50>)
 8004af8:	611a      	str	r2, [r3, #16]
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	20000570 	.word	0x20000570
 8004b08:	080023d5 	.word	0x080023d5
 8004b0c:	200005b8 	.word	0x200005b8
 8004b10:	080023e5 	.word	0x080023e5
 8004b14:	200005dc 	.word	0x200005dc
 8004b18:	08004a45 	.word	0x08004a45
 8004b1c:	20000624 	.word	0x20000624
 8004b20:	08004a65 	.word	0x08004a65
 8004b24:	20000600 	.word	0x20000600
 8004b28:	08004a85 	.word	0x08004a85

08004b2c <gpsSetup>:

void gpsSetup(void){
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004b30:	f7ff ffd2 	bl	8004ad8 <setDefaultClbcks>

}
 8004b34:	bf00      	nop
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <gpsMain>:

void gpsMain(void){
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	f5ad 5da7 	sub.w	sp, sp, #5344	; 0x14e0
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af02      	add	r7, sp, #8
	char tempStr[51] = {0};
 8004b42:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004b46:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	222f      	movs	r2, #47	; 0x2f
 8004b52:	2100      	movs	r1, #0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f008 fdb5 	bl	800d6c4 <memset>

	switch(pageNum){
 8004b5a:	4bd0      	ldr	r3, [pc, #832]	; (8004e9c <gpsMain+0x364>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <gpsMain+0x32>
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	f000 8095 	beq.w	8004c92 <gpsMain+0x15a>
 8004b68:	e190      	b.n	8004e8c <gpsMain+0x354>
	case 0: {
		location = getLocation(&gpsDev);
 8004b6a:	4ccd      	ldr	r4, [pc, #820]	; (8004ea0 <gpsMain+0x368>)
 8004b6c:	463b      	mov	r3, r7
 8004b6e:	49cd      	ldr	r1, [pc, #820]	; (8004ea4 <gpsMain+0x36c>)
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fd fa2d 	bl	8001fd0 <getLocation>
 8004b76:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004b7a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004b7e:	4620      	mov	r0, r4
 8004b80:	4619      	mov	r1, r3
 8004b82:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8004b86:	461a      	mov	r2, r3
 8004b88:	f008 fd8e 	bl	800d6a8 <memcpy>
		if(location.hasFix){
 8004b8c:	4bc4      	ldr	r3, [pc, #784]	; (8004ea0 <gpsMain+0x368>)
 8004b8e:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d04e      	beq.n	8004c34 <gpsMain+0xfc>
			sprintf(&tempStr, "GPS fix (%d satellites)", location.satNum);
 8004b96:	4bc2      	ldr	r3, [pc, #776]	; (8004ea0 <gpsMain+0x368>)
 8004b98:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004ba2:	3b1c      	subs	r3, #28
 8004ba4:	49c0      	ldr	r1, [pc, #768]	; (8004ea8 <gpsMain+0x370>)
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f009 feba 	bl	800e920 <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 8004bac:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004bb0:	3a1c      	subs	r2, #28
 8004bb2:	4bbe      	ldr	r3, [pc, #760]	; (8004eac <gpsMain+0x374>)
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f7fd fe5a 	bl	8002870 <lcdPutStr>
			sprintf(&tempStr, "Latitude: %2.3f%c", location.latitude, location.n_s);
 8004bbc:	4bb8      	ldr	r3, [pc, #736]	; (8004ea0 <gpsMain+0x368>)
 8004bbe:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 8004bc2:	49b7      	ldr	r1, [pc, #732]	; (8004ea0 <gpsMain+0x368>)
 8004bc4:	f891 1158 	ldrb.w	r1, [r1, #344]	; 0x158
 8004bc8:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8004bcc:	381c      	subs	r0, #28
 8004bce:	9100      	str	r1, [sp, #0]
 8004bd0:	49b7      	ldr	r1, [pc, #732]	; (8004eb0 <gpsMain+0x378>)
 8004bd2:	f009 fea5 	bl	800e920 <siprintf>
			lcdPutStr(0, 60, tempStr, ocrFont);
 8004bd6:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004bda:	3a1c      	subs	r2, #28
 8004bdc:	4bb3      	ldr	r3, [pc, #716]	; (8004eac <gpsMain+0x374>)
 8004bde:	213c      	movs	r1, #60	; 0x3c
 8004be0:	2000      	movs	r0, #0
 8004be2:	f7fd fe45 	bl	8002870 <lcdPutStr>
			sprintf(&tempStr, "Longitude: %.3f%c", location.longitude, location.w_e);
 8004be6:	4bae      	ldr	r3, [pc, #696]	; (8004ea0 <gpsMain+0x368>)
 8004be8:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8004bec:	49ac      	ldr	r1, [pc, #688]	; (8004ea0 <gpsMain+0x368>)
 8004bee:	f891 1159 	ldrb.w	r1, [r1, #345]	; 0x159
 8004bf2:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8004bf6:	381c      	subs	r0, #28
 8004bf8:	9100      	str	r1, [sp, #0]
 8004bfa:	49ae      	ldr	r1, [pc, #696]	; (8004eb4 <gpsMain+0x37c>)
 8004bfc:	f009 fe90 	bl	800e920 <siprintf>
			lcdPutStr(0, 90, tempStr, ocrFont);
 8004c00:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004c04:	3a1c      	subs	r2, #28
 8004c06:	4ba9      	ldr	r3, [pc, #676]	; (8004eac <gpsMain+0x374>)
 8004c08:	215a      	movs	r1, #90	; 0x5a
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	f7fd fe30 	bl	8002870 <lcdPutStr>
			sprintf(&tempStr, "Altitude: %f", location.elevation);
 8004c10:	4ba3      	ldr	r3, [pc, #652]	; (8004ea0 <gpsMain+0x368>)
 8004c12:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8004c16:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8004c1a:	381c      	subs	r0, #28
 8004c1c:	49a6      	ldr	r1, [pc, #664]	; (8004eb8 <gpsMain+0x380>)
 8004c1e:	f009 fe7f 	bl	800e920 <siprintf>
			lcdPutStr(0, 120, tempStr, ocrFont);
 8004c22:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004c26:	3a1c      	subs	r2, #28
 8004c28:	4ba0      	ldr	r3, [pc, #640]	; (8004eac <gpsMain+0x374>)
 8004c2a:	2178      	movs	r1, #120	; 0x78
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f7fd fe1f 	bl	8002870 <lcdPutStr>
 8004c32:	e012      	b.n	8004c5a <gpsMain+0x122>
		} else {
			sprintf(&tempStr, "No fix - %d satellites", location.satNum);
 8004c34:	4b9a      	ldr	r3, [pc, #616]	; (8004ea0 <gpsMain+0x368>)
 8004c36:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004c40:	3b1c      	subs	r3, #28
 8004c42:	499e      	ldr	r1, [pc, #632]	; (8004ebc <gpsMain+0x384>)
 8004c44:	4618      	mov	r0, r3
 8004c46:	f009 fe6b 	bl	800e920 <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 8004c4a:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004c4e:	3a1c      	subs	r2, #28
 8004c50:	4b96      	ldr	r3, [pc, #600]	; (8004eac <gpsMain+0x374>)
 8004c52:	2100      	movs	r1, #0
 8004c54:	2000      	movs	r0, #0
 8004c56:	f7fd fe0b 	bl	8002870 <lcdPutStr>
		}
			sprintf(&tempStr, "UTC time: %02d:%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 8004c5a:	4b91      	ldr	r3, [pc, #580]	; (8004ea0 <gpsMain+0x368>)
 8004c5c:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8004c60:	461a      	mov	r2, r3
 8004c62:	4b8f      	ldr	r3, [pc, #572]	; (8004ea0 <gpsMain+0x368>)
 8004c64:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4b8d      	ldr	r3, [pc, #564]	; (8004ea0 <gpsMain+0x368>)
 8004c6c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004c70:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8004c74:	381c      	subs	r0, #28
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4991      	ldr	r1, [pc, #580]	; (8004ec0 <gpsMain+0x388>)
 8004c7c:	f009 fe50 	bl	800e920 <siprintf>
			lcdPutStr(0, 30, tempStr, ocrFont);
 8004c80:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004c84:	3a1c      	subs	r2, #28
 8004c86:	4b89      	ldr	r3, [pc, #548]	; (8004eac <gpsMain+0x374>)
 8004c88:	211e      	movs	r1, #30
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	f7fd fdf0 	bl	8002870 <lcdPutStr>
		break;
 8004c90:	e154      	b.n	8004f3c <gpsMain+0x404>
	}
	case 1: {
		lcdPutStr(0, 0, tempStr, font_13_calibri);
 8004c92:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004c96:	3a1c      	subs	r2, #28
 8004c98:	4b8a      	ldr	r3, [pc, #552]	; (8004ec4 <gpsMain+0x38c>)
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	f7fd fde7 	bl	8002870 <lcdPutStr>
	//	double lat = 17.8;
	//	sprintf(&tempStr, "lat: %f", getLocation(&gpsDev).latitude);
	//	sprintf(&tempStr, "lat: %f", lat);
	//	lcdPutStr(0, 220, tempStr, font_13_calibri);
		lcdPutStr(0, 25, getLocation(&gpsDev).debug, smallestFont);
 8004ca2:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004ca6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8004caa:	497e      	ldr	r1, [pc, #504]	; (8004ea4 <gpsMain+0x36c>)
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fd f98f 	bl	8001fd0 <getLocation>
 8004cb2:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004cb6:	3a08      	subs	r2, #8
 8004cb8:	4b83      	ldr	r3, [pc, #524]	; (8004ec8 <gpsMain+0x390>)
 8004cba:	2119      	movs	r1, #25
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	f7fd fdd7 	bl	8002870 <lcdPutStr>
		lcdPutStr(0, 40, getLocation(&gpsDev).words[0], smallestFont);
 8004cc2:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004cc6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004cca:	4976      	ldr	r1, [pc, #472]	; (8004ea4 <gpsMain+0x36c>)
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fd f97f 	bl	8001fd0 <getLocation>
 8004cd2:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8004cd6:	3b08      	subs	r3, #8
 8004cd8:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8004cdc:	4b7a      	ldr	r3, [pc, #488]	; (8004ec8 <gpsMain+0x390>)
 8004cde:	2128      	movs	r1, #40	; 0x28
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f7fd fdc5 	bl	8002870 <lcdPutStr>
		lcdPutStr(0, 55, getLocation(&gpsDev).words[1], smallestFont);
 8004ce6:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004cea:	3b88      	subs	r3, #136	; 0x88
 8004cec:	496d      	ldr	r1, [pc, #436]	; (8004ea4 <gpsMain+0x36c>)
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fd f96e 	bl	8001fd0 <getLocation>
 8004cf4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8004cf8:	3b08      	subs	r3, #8
 8004cfa:	f103 0265 	add.w	r2, r3, #101	; 0x65
 8004cfe:	4b72      	ldr	r3, [pc, #456]	; (8004ec8 <gpsMain+0x390>)
 8004d00:	2137      	movs	r1, #55	; 0x37
 8004d02:	2000      	movs	r0, #0
 8004d04:	f7fd fdb4 	bl	8002870 <lcdPutStr>
		lcdPutStr(0, 70, getLocation(&gpsDev).words[2], smallestFont);
 8004d08:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004d0c:	f6a3 7328 	subw	r3, r3, #3880	; 0xf28
 8004d10:	4964      	ldr	r1, [pc, #400]	; (8004ea4 <gpsMain+0x36c>)
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fd f95c 	bl	8001fd0 <getLocation>
 8004d18:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8004d1c:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8004d20:	4b69      	ldr	r3, [pc, #420]	; (8004ec8 <gpsMain+0x390>)
 8004d22:	2146      	movs	r1, #70	; 0x46
 8004d24:	2000      	movs	r0, #0
 8004d26:	f7fd fda3 	bl	8002870 <lcdPutStr>
		lcdPutStr(0, 85, getLocation(&gpsDev).words[3], smallestFont);
 8004d2a:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004d2e:	f6a3 53c8 	subw	r3, r3, #3528	; 0xdc8
 8004d32:	495c      	ldr	r1, [pc, #368]	; (8004ea4 <gpsMain+0x36c>)
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fd f94b 	bl	8001fd0 <getLocation>
 8004d3a:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8004d3e:	f103 0283 	add.w	r2, r3, #131	; 0x83
 8004d42:	4b61      	ldr	r3, [pc, #388]	; (8004ec8 <gpsMain+0x390>)
 8004d44:	2155      	movs	r1, #85	; 0x55
 8004d46:	2000      	movs	r0, #0
 8004d48:	f7fd fd92 	bl	8002870 <lcdPutStr>
		lcdPutStr(0, 100, getLocation(&gpsDev).words[4], smallestFont);
 8004d4c:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004d50:	f6a3 4368 	subw	r3, r3, #3176	; 0xc68
 8004d54:	4953      	ldr	r1, [pc, #332]	; (8004ea4 <gpsMain+0x36c>)
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd f93a 	bl	8001fd0 <getLocation>
 8004d5c:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8004d60:	f103 0292 	add.w	r2, r3, #146	; 0x92
 8004d64:	4b58      	ldr	r3, [pc, #352]	; (8004ec8 <gpsMain+0x390>)
 8004d66:	2164      	movs	r1, #100	; 0x64
 8004d68:	2000      	movs	r0, #0
 8004d6a:	f7fd fd81 	bl	8002870 <lcdPutStr>
		lcdPutStr(100, 25, getLocation(&gpsDev).words[5], smallestFont);
 8004d6e:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004d72:	f6a3 3308 	subw	r3, r3, #2824	; 0xb08
 8004d76:	494b      	ldr	r1, [pc, #300]	; (8004ea4 <gpsMain+0x36c>)
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fd f929 	bl	8001fd0 <getLocation>
 8004d7e:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8004d82:	f103 02a1 	add.w	r2, r3, #161	; 0xa1
 8004d86:	4b50      	ldr	r3, [pc, #320]	; (8004ec8 <gpsMain+0x390>)
 8004d88:	2119      	movs	r1, #25
 8004d8a:	2064      	movs	r0, #100	; 0x64
 8004d8c:	f7fd fd70 	bl	8002870 <lcdPutStr>
		lcdPutStr(100, 40, getLocation(&gpsDev).words[6], smallestFont);
 8004d90:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004d94:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 8004d98:	4942      	ldr	r1, [pc, #264]	; (8004ea4 <gpsMain+0x36c>)
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fd f918 	bl	8001fd0 <getLocation>
 8004da0:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8004da4:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004da8:	4b47      	ldr	r3, [pc, #284]	; (8004ec8 <gpsMain+0x390>)
 8004daa:	2128      	movs	r1, #40	; 0x28
 8004dac:	2064      	movs	r0, #100	; 0x64
 8004dae:	f7fd fd5f 	bl	8002870 <lcdPutStr>
		lcdPutStr(100, 55, getLocation(&gpsDev).words[7], smallestFont);
 8004db2:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004db6:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 8004dba:	493a      	ldr	r1, [pc, #232]	; (8004ea4 <gpsMain+0x36c>)
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fd f907 	bl	8001fd0 <getLocation>
 8004dc2:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 8004dc6:	f103 02bf 	add.w	r2, r3, #191	; 0xbf
 8004dca:	4b3f      	ldr	r3, [pc, #252]	; (8004ec8 <gpsMain+0x390>)
 8004dcc:	2137      	movs	r1, #55	; 0x37
 8004dce:	2064      	movs	r0, #100	; 0x64
 8004dd0:	f7fd fd4e 	bl	8002870 <lcdPutStr>
		lcdPutStr(100, 70, getLocation(&gpsDev).words[8], smallestFont);
 8004dd4:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004dd8:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8004ddc:	4931      	ldr	r1, [pc, #196]	; (8004ea4 <gpsMain+0x36c>)
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd f8f6 	bl	8001fd0 <getLocation>
 8004de4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004de8:	f103 02ce 	add.w	r2, r3, #206	; 0xce
 8004dec:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <gpsMain+0x390>)
 8004dee:	2146      	movs	r1, #70	; 0x46
 8004df0:	2064      	movs	r0, #100	; 0x64
 8004df2:	f7fd fd3d 	bl	8002870 <lcdPutStr>
		lcdPutStr(100, 85, getLocation(&gpsDev).words[9], smallestFont);
 8004df6:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004dfa:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8004dfe:	4929      	ldr	r1, [pc, #164]	; (8004ea4 <gpsMain+0x36c>)
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fd f8e5 	bl	8001fd0 <getLocation>
 8004e06:	f607 7358 	addw	r3, r7, #3928	; 0xf58
 8004e0a:	f103 02dd 	add.w	r2, r3, #221	; 0xdd
 8004e0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ec8 <gpsMain+0x390>)
 8004e10:	2155      	movs	r1, #85	; 0x55
 8004e12:	2064      	movs	r0, #100	; 0x64
 8004e14:	f7fd fd2c 	bl	8002870 <lcdPutStr>
		lcdPutStr(100, 100, getLocation(&gpsDev).words[10], smallestFont);
 8004e18:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004e1c:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8004e20:	4920      	ldr	r1, [pc, #128]	; (8004ea4 <gpsMain+0x36c>)
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fd f8d4 	bl	8001fd0 <getLocation>
 8004e28:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8004e2c:	f103 0318 	add.w	r3, r3, #24
 8004e30:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8004e34:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <gpsMain+0x390>)
 8004e36:	2164      	movs	r1, #100	; 0x64
 8004e38:	2064      	movs	r0, #100	; 0x64
 8004e3a:	f7fd fd19 	bl	8002870 <lcdPutStr>
		lcdPutStr(200, 25, getLocation(&gpsDev).words[11], smallestFont);
 8004e3e:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004e42:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8004e46:	4917      	ldr	r1, [pc, #92]	; (8004ea4 <gpsMain+0x36c>)
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fd f8c1 	bl	8001fd0 <getLocation>
 8004e4e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8004e52:	f103 0318 	add.w	r3, r3, #24
 8004e56:	f103 02fb 	add.w	r2, r3, #251	; 0xfb
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <gpsMain+0x390>)
 8004e5c:	2119      	movs	r1, #25
 8004e5e:	20c8      	movs	r0, #200	; 0xc8
 8004e60:	f7fd fd06 	bl	8002870 <lcdPutStr>
		lcdPutStr(200, 40, getLocation(&gpsDev).words[12], smallestFont);
 8004e64:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004e68:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e6c:	490d      	ldr	r1, [pc, #52]	; (8004ea4 <gpsMain+0x36c>)
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fd f8ae 	bl	8001fd0 <getLocation>
 8004e74:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8004e78:	f103 0318 	add.w	r3, r3, #24
 8004e7c:	f503 7285 	add.w	r2, r3, #266	; 0x10a
 8004e80:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <gpsMain+0x390>)
 8004e82:	2128      	movs	r1, #40	; 0x28
 8004e84:	20c8      	movs	r0, #200	; 0xc8
 8004e86:	f7fd fcf3 	bl	8002870 <lcdPutStr>
		break;
 8004e8a:	e057      	b.n	8004f3c <gpsMain+0x404>
	}
	default:{
		// show gpsDev buffer in many lines
		for(uint8_t i=0; i<6; i++){
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 8004e92:	f102 021f 	add.w	r2, r2, #31
 8004e96:	7013      	strb	r3, [r2, #0]
 8004e98:	e048      	b.n	8004f2c <gpsMain+0x3f4>
 8004e9a:	bf00      	nop
 8004e9c:	20003a50 	.word	0x20003a50
 8004ea0:	20003a58 	.word	0x20003a58
 8004ea4:	200035c4 	.word	0x200035c4
 8004ea8:	080165a8 	.word	0x080165a8
 8004eac:	08019b20 	.word	0x08019b20
 8004eb0:	080165c0 	.word	0x080165c0
 8004eb4:	080165d4 	.word	0x080165d4
 8004eb8:	080165e8 	.word	0x080165e8
 8004ebc:	080165f8 	.word	0x080165f8
 8004ec0:	08016610 	.word	0x08016610
 8004ec4:	08018ac4 	.word	0x08018ac4
 8004ec8:	08018648 	.word	0x08018648
			strncpy(&tempStr, &gpsDev.buffer[50*i], 50);
 8004ecc:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8004ed0:	f103 031f 	add.w	r3, r3, #31
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2232      	movs	r2, #50	; 0x32
 8004ed8:	fb02 f303 	mul.w	r3, r2, r3
 8004edc:	4a1a      	ldr	r2, [pc, #104]	; (8004f48 <gpsMain+0x410>)
 8004ede:	4413      	add	r3, r2
 8004ee0:	1d19      	adds	r1, r3, #4
 8004ee2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004ee6:	3b1c      	subs	r3, #28
 8004ee8:	2232      	movs	r2, #50	; 0x32
 8004eea:	4618      	mov	r0, r3
 8004eec:	f00a faec 	bl	800f4c8 <strncpy>
			lcdPutStr(0,120+14*i, tempStr, smallestFont);
 8004ef0:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8004ef4:	f103 031f 	add.w	r3, r3, #31
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	00d2      	lsls	r2, r2, #3
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	3378      	adds	r3, #120	; 0x78
 8004f06:	b2d9      	uxtb	r1, r3
 8004f08:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004f0c:	3a1c      	subs	r2, #28
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <gpsMain+0x414>)
 8004f10:	2000      	movs	r0, #0
 8004f12:	f7fd fcad 	bl	8002870 <lcdPutStr>
		for(uint8_t i=0; i<6; i++){
 8004f16:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8004f1a:	f103 031f 	add.w	r3, r3, #31
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 8004f26:	f102 021f 	add.w	r2, r2, #31
 8004f2a:	7013      	strb	r3, [r2, #0]
 8004f2c:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8004f30:	f103 031f 	add.w	r3, r3, #31
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d9c8      	bls.n	8004ecc <gpsMain+0x394>
		}
		break;
 8004f3a:	bf00      	nop





}
 8004f3c:	bf00      	nop
 8004f3e:	f507 57a7 	add.w	r7, r7, #5344	; 0x14e0
 8004f42:	3704      	adds	r7, #4
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd90      	pop	{r4, r7, pc}
 8004f48:	200035c4 	.word	0x200035c4
 8004f4c:	08018648 	.word	0x08018648

08004f50 <setDefaultClbcks>:
	testTime.tm_mday--;
	mktime(&testTime);

}

static void setDefaultClbcks(void){
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8004f54:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <setDefaultClbcks+0x1c>)
 8004f56:	4a06      	ldr	r2, [pc, #24]	; (8004f70 <setDefaultClbcks+0x20>)
 8004f58:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <setDefaultClbcks+0x24>)
 8004f5c:	4a06      	ldr	r2, [pc, #24]	; (8004f78 <setDefaultClbcks+0x28>)
 8004f5e:	611a      	str	r2, [r3, #16]
//	btn_B1.onContinuousShortPressHandler = &addDay;
//	btn_B3.onContinuousShortPressHandler = &remDay;
}
 8004f60:	bf00      	nop
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000570 	.word	0x20000570
 8004f70:	080023d5 	.word	0x080023d5
 8004f74:	200005b8 	.word	0x200005b8
 8004f78:	080023e5 	.word	0x080023e5

08004f7c <localSetup>:
void localSetup(void){
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004f80:	f7ff ffe6 	bl	8004f50 <setDefaultClbcks>
	testTime.tm_hour = RtcTime.Hours;
 8004f84:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <localSetup+0x50>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <localSetup+0x54>)
 8004f8c:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <localSetup+0x50>)
 8004f90:	785b      	ldrb	r3, [r3, #1]
 8004f92:	461a      	mov	r2, r3
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <localSetup+0x54>)
 8004f96:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <localSetup+0x50>)
 8004f9a:	789b      	ldrb	r3, [r3, #2]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <localSetup+0x54>)
 8004fa0:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <localSetup+0x58>)
 8004fa4:	789b      	ldrb	r3, [r3, #2]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <localSetup+0x54>)
 8004faa:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <localSetup+0x58>)
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	4a07      	ldr	r2, [pc, #28]	; (8004fd0 <localSetup+0x54>)
 8004fb4:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <localSetup+0x58>)
 8004fb8:	78db      	ldrb	r3, [r3, #3]
 8004fba:	3364      	adds	r3, #100	; 0x64
 8004fbc:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <localSetup+0x54>)
 8004fbe:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 8004fc0:	4803      	ldr	r0, [pc, #12]	; (8004fd0 <localSetup+0x54>)
 8004fc2:	f008 fc5f 	bl	800d884 <mktime>
}
 8004fc6:	bf00      	nop
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20003588 	.word	0x20003588
 8004fd0:	20003bb8 	.word	0x20003bb8
 8004fd4:	2000359c 	.word	0x2000359c

08004fd8 <localMain>:


void localMain(void){
 8004fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fdc:	b0c2      	sub	sp, #264	; 0x108
 8004fde:	af00      	add	r7, sp, #0
	testTime.tm_hour = RtcTime.Hours;
 8004fe0:	4bdd      	ldr	r3, [pc, #884]	; (8005358 <localMain+0x380>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4bdd      	ldr	r3, [pc, #884]	; (800535c <localMain+0x384>)
 8004fe8:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8004fea:	4bdb      	ldr	r3, [pc, #876]	; (8005358 <localMain+0x380>)
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4bda      	ldr	r3, [pc, #872]	; (800535c <localMain+0x384>)
 8004ff2:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8004ff4:	4bd8      	ldr	r3, [pc, #864]	; (8005358 <localMain+0x380>)
 8004ff6:	789b      	ldrb	r3, [r3, #2]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4bd8      	ldr	r3, [pc, #864]	; (800535c <localMain+0x384>)
 8004ffc:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 8004ffe:	4bd8      	ldr	r3, [pc, #864]	; (8005360 <localMain+0x388>)
 8005000:	789b      	ldrb	r3, [r3, #2]
 8005002:	461a      	mov	r2, r3
 8005004:	4bd5      	ldr	r3, [pc, #852]	; (800535c <localMain+0x384>)
 8005006:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8005008:	4bd5      	ldr	r3, [pc, #852]	; (8005360 <localMain+0x388>)
 800500a:	785b      	ldrb	r3, [r3, #1]
 800500c:	3b01      	subs	r3, #1
 800500e:	4ad3      	ldr	r2, [pc, #844]	; (800535c <localMain+0x384>)
 8005010:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 8005012:	4bd3      	ldr	r3, [pc, #844]	; (8005360 <localMain+0x388>)
 8005014:	78db      	ldrb	r3, [r3, #3]
 8005016:	3364      	adds	r3, #100	; 0x64
 8005018:	4ad0      	ldr	r2, [pc, #832]	; (800535c <localMain+0x384>)
 800501a:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 800501c:	48cf      	ldr	r0, [pc, #828]	; (800535c <localMain+0x384>)
 800501e:	f008 fc31 	bl	800d884 <mktime>

	char textBuffer[50] = {0};
 8005022:	2300      	movs	r3, #0
 8005024:	657b      	str	r3, [r7, #84]	; 0x54
 8005026:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800502a:	222e      	movs	r2, #46	; 0x2e
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f008 fb48 	bl	800d6c4 <memset>
	char textBuffer2[50] = {0};
 8005034:	2300      	movs	r3, #0
 8005036:	623b      	str	r3, [r7, #32]
 8005038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800503c:	222e      	movs	r2, #46	; 0x2e
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f008 fb3f 	bl	800d6c4 <memset>
	uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 8005046:	4bc5      	ldr	r3, [pc, #788]	; (800535c <localMain+0x384>)
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	1d9a      	adds	r2, r3, #6
 800504c:	4bc5      	ldr	r3, [pc, #788]	; (8005364 <localMain+0x38c>)
 800504e:	fb83 1302 	smull	r1, r3, r3, r2
 8005052:	4413      	add	r3, r2
 8005054:	1099      	asrs	r1, r3, #2
 8005056:	17d3      	asrs	r3, r2, #31
 8005058:	1ac9      	subs	r1, r1, r3
 800505a:	460b      	mov	r3, r1
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	1a5b      	subs	r3, r3, r1
 8005060:	1ad1      	subs	r1, r2, r3
 8005062:	b2cb      	uxtb	r3, r1
 8005064:	3301      	adds	r3, #1
 8005066:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 800506a:	4bbc      	ldr	r3, [pc, #752]	; (800535c <localMain+0x384>)
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	f103 0208 	add.w	r2, r3, #8
 8005072:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	4aba      	ldr	r2, [pc, #744]	; (8005364 <localMain+0x38c>)
 800507a:	fb82 1203 	smull	r1, r2, r2, r3
 800507e:	441a      	add	r2, r3
 8005080:	1092      	asrs	r2, r2, #2
 8005082:	17db      	asrs	r3, r3, #31
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
	sprintf(&textBuffer, "week %d day %d", weekOfTheYear, testTime.tm_yday+1);
 800508a:	f897 20fe 	ldrb.w	r2, [r7, #254]	; 0xfe
 800508e:	4bb3      	ldr	r3, [pc, #716]	; (800535c <localMain+0x384>)
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	3301      	adds	r3, #1
 8005094:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005098:	49b3      	ldr	r1, [pc, #716]	; (8005368 <localMain+0x390>)
 800509a:	f009 fc41 	bl	800e920 <siprintf>
	lcdPutStr(10, 10, textBuffer, font_12_zekton);
 800509e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80050a2:	4bb2      	ldr	r3, [pc, #712]	; (800536c <localMain+0x394>)
 80050a4:	210a      	movs	r1, #10
 80050a6:	200a      	movs	r0, #10
 80050a8:	f7fd fbe2 	bl	8002870 <lcdPutStr>

	sprintf(&textBuffer, asctime(&testTime));
 80050ac:	48ab      	ldr	r0, [pc, #684]	; (800535c <localMain+0x384>)
 80050ae:	f008 fa47 	bl	800d540 <asctime>
 80050b2:	4602      	mov	r2, r0
 80050b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80050b8:	4611      	mov	r1, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f009 fc30 	bl	800e920 <siprintf>
	lcdPutStr(170, 10, textBuffer, smallestFont);
 80050c0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80050c4:	4baa      	ldr	r3, [pc, #680]	; (8005370 <localMain+0x398>)
 80050c6:	210a      	movs	r1, #10
 80050c8:	20aa      	movs	r0, #170	; 0xaa
 80050ca:	f7fd fbd1 	bl	8002870 <lcdPutStr>
	strftime(&textBuffer, 40, "%Z day:%j week:%U", &testTime);
 80050ce:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80050d2:	4ba2      	ldr	r3, [pc, #648]	; (800535c <localMain+0x384>)
 80050d4:	4aa7      	ldr	r2, [pc, #668]	; (8005374 <localMain+0x39c>)
 80050d6:	2128      	movs	r1, #40	; 0x28
 80050d8:	f00a f9f4 	bl	800f4c4 <strftime>
	lcdPutStr(170, 22, textBuffer, smallestFont);
 80050dc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80050e0:	4ba3      	ldr	r3, [pc, #652]	; (8005370 <localMain+0x398>)
 80050e2:	2116      	movs	r1, #22
 80050e4:	20aa      	movs	r0, #170	; 0xaa
 80050e6:	f7fd fbc3 	bl	8002870 <lcdPutStr>

	uint8_t hhour = testTime.tm_hour;
 80050ea:	4b9c      	ldr	r3, [pc, #624]	; (800535c <localMain+0x384>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	uint8_t mmin = testTime.tm_min;
 80050f2:	4b9a      	ldr	r3, [pc, #616]	; (800535c <localMain+0x384>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t ssec = testTime.tm_sec;
 80050fa:	4b98      	ldr	r3, [pc, #608]	; (800535c <localMain+0x384>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	int timezone = 2;		// [h] east+ west-
 8005102:	2302      	movs	r3, #2
 8005104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int dayOfTheYear = testTime.tm_yday+1;
 8005108:	4b94      	ldr	r3, [pc, #592]	; (800535c <localMain+0x384>)
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	3301      	adds	r3, #1
 800510e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	// fractional year = gamma [rad]
	float fyear = (2*M_PI/365)*(dayOfTheYear-1+(hhour-timezone-12)/24);
 8005112:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005116:	1e5a      	subs	r2, r3, #1
 8005118:	f897 10fd 	ldrb.w	r1, [r7, #253]	; 0xfd
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005120:	1acb      	subs	r3, r1, r3
 8005122:	3b0c      	subs	r3, #12
 8005124:	4994      	ldr	r1, [pc, #592]	; (8005378 <localMain+0x3a0>)
 8005126:	fb81 0103 	smull	r0, r1, r1, r3
 800512a:	1089      	asrs	r1, r1, #2
 800512c:	17db      	asrs	r3, r3, #31
 800512e:	1acb      	subs	r3, r1, r3
 8005130:	4413      	add	r3, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f7fb fa10 	bl	8000558 <__aeabi_i2d>
 8005138:	a371      	add	r3, pc, #452	; (adr r3, 8005300 <localMain+0x328>)
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	f7fb fa75 	bl	800062c <__aeabi_dmul>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4610      	mov	r0, r2
 8005148:	4619      	mov	r1, r3
 800514a:	f7fb fd67 	bl	8000c1c <__aeabi_d2f>
 800514e:	4603      	mov	r3, r0
 8005150:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// equation of time [min]
	float eqtime = 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 8005154:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8005158:	f7fb fa10 	bl	800057c <__aeabi_f2d>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	ec43 2b10 	vmov	d0, r2, r3
 8005164:	f00e fc58 	bl	8013a18 <cos>
 8005168:	ec51 0b10 	vmov	r0, r1, d0
 800516c:	a366      	add	r3, pc, #408	; (adr r3, 8005308 <localMain+0x330>)
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	f7fb fa5b 	bl	800062c <__aeabi_dmul>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4610      	mov	r0, r2
 800517c:	4619      	mov	r1, r3
 800517e:	a364      	add	r3, pc, #400	; (adr r3, 8005310 <localMain+0x338>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	f7fb f89c 	bl	80002c0 <__adddf3>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4690      	mov	r8, r2
 800518e:	4699      	mov	r9, r3
 8005190:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8005194:	f7fb f9f2 	bl	800057c <__aeabi_f2d>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	ec43 2b10 	vmov	d0, r2, r3
 80051a0:	f00e fc8e 	bl	8013ac0 <sin>
 80051a4:	ec51 0b10 	vmov	r0, r1, d0
 80051a8:	a35b      	add	r3, pc, #364	; (adr r3, 8005318 <localMain+0x340>)
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f7fb fa3d 	bl	800062c <__aeabi_dmul>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4640      	mov	r0, r8
 80051b8:	4649      	mov	r1, r9
 80051ba:	f7fb f87f 	bl	80002bc <__aeabi_dsub>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4690      	mov	r8, r2
 80051c4:	4699      	mov	r9, r3
 80051c6:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80051ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051ce:	ee17 0a90 	vmov	r0, s15
 80051d2:	f7fb f9d3 	bl	800057c <__aeabi_f2d>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	ec43 2b10 	vmov	d0, r2, r3
 80051de:	f00e fc1b 	bl	8013a18 <cos>
 80051e2:	ec51 0b10 	vmov	r0, r1, d0
 80051e6:	a34e      	add	r3, pc, #312	; (adr r3, 8005320 <localMain+0x348>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f7fb fa1e 	bl	800062c <__aeabi_dmul>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4640      	mov	r0, r8
 80051f6:	4649      	mov	r1, r9
 80051f8:	f7fb f860 	bl	80002bc <__aeabi_dsub>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4690      	mov	r8, r2
 8005202:	4699      	mov	r9, r3
 8005204:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8005208:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800520c:	ee17 0a90 	vmov	r0, s15
 8005210:	f7fb f9b4 	bl	800057c <__aeabi_f2d>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	ec43 2b10 	vmov	d0, r2, r3
 800521c:	f00e fc50 	bl	8013ac0 <sin>
 8005220:	ec51 0b10 	vmov	r0, r1, d0
 8005224:	a340      	add	r3, pc, #256	; (adr r3, 8005328 <localMain+0x350>)
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f7fb f9ff 	bl	800062c <__aeabi_dmul>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4640      	mov	r0, r8
 8005234:	4649      	mov	r1, r9
 8005236:	f7fb f841 	bl	80002bc <__aeabi_dsub>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	a33b      	add	r3, pc, #236	; (adr r3, 8005330 <localMain+0x358>)
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f7fb f9f0 	bl	800062c <__aeabi_dmul>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4610      	mov	r0, r2
 8005252:	4619      	mov	r1, r3
 8005254:	f7fb fce2 	bl	8000c1c <__aeabi_d2f>
 8005258:	4603      	mov	r3, r0
 800525a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	// solar declination angle [rad]
	float decl = 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 800525e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8005262:	f7fb f98b 	bl	800057c <__aeabi_f2d>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	ec43 2b10 	vmov	d0, r2, r3
 800526e:	f00e fbd3 	bl	8013a18 <cos>
 8005272:	ec51 0b10 	vmov	r0, r1, d0
 8005276:	a330      	add	r3, pc, #192	; (adr r3, 8005338 <localMain+0x360>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f7fb f9d6 	bl	800062c <__aeabi_dmul>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	a12e      	add	r1, pc, #184	; (adr r1, 8005340 <localMain+0x368>)
 8005286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800528a:	f7fb f817 	bl	80002bc <__aeabi_dsub>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4690      	mov	r8, r2
 8005294:	4699      	mov	r9, r3
 8005296:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800529a:	f7fb f96f 	bl	800057c <__aeabi_f2d>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	ec43 2b10 	vmov	d0, r2, r3
 80052a6:	f00e fc0b 	bl	8013ac0 <sin>
 80052aa:	ec51 0b10 	vmov	r0, r1, d0
 80052ae:	a326      	add	r3, pc, #152	; (adr r3, 8005348 <localMain+0x370>)
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f7fb f9ba 	bl	800062c <__aeabi_dmul>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4640      	mov	r0, r8
 80052be:	4649      	mov	r1, r9
 80052c0:	f7fa fffe 	bl	80002c0 <__adddf3>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4690      	mov	r8, r2
 80052ca:	4699      	mov	r9, r3
 80052cc:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80052d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052d4:	ee17 0a90 	vmov	r0, s15
 80052d8:	f7fb f950 	bl	800057c <__aeabi_f2d>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	ec43 2b10 	vmov	d0, r2, r3
 80052e4:	f00e fb98 	bl	8013a18 <cos>
 80052e8:	ec51 0b10 	vmov	r0, r1, d0
 80052ec:	a318      	add	r3, pc, #96	; (adr r3, 8005350 <localMain+0x378>)
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f7fb f99b 	bl	800062c <__aeabi_dmul>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	e03f      	b.n	800537c <localMain+0x3a4>
 80052fc:	f3af 8000 	nop.w
 8005300:	d4b3ac9a 	.word	0xd4b3ac9a
 8005304:	3f91a099 	.word	0x3f91a099
 8005308:	ba2be059 	.word	0xba2be059
 800530c:	3f5e9af5 	.word	0x3f5e9af5
 8005310:	30553261 	.word	0x30553261
 8005314:	3f13a92a 	.word	0x3f13a92a
 8005318:	83e8576d 	.word	0x83e8576d
 800531c:	3fa06c65 	.word	0x3fa06c65
 8005320:	183f91e6 	.word	0x183f91e6
 8005324:	3f8dee78 	.word	0x3f8dee78
 8005328:	fe260b2d 	.word	0xfe260b2d
 800532c:	3fa4ea28 	.word	0x3fa4ea28
 8005330:	8f5c28f6 	.word	0x8f5c28f6
 8005334:	406ca5c2 	.word	0x406ca5c2
 8005338:	8051c9f7 	.word	0x8051c9f7
 800533c:	3fd99828 	.word	0x3fd99828
 8005340:	7c0f4517 	.word	0x7c0f4517
 8005344:	3f7c560c 	.word	0x3f7c560c
 8005348:	dd50a88f 	.word	0xdd50a88f
 800534c:	3fb1fc5c 	.word	0x3fb1fc5c
 8005350:	cfc829d0 	.word	0xcfc829d0
 8005354:	3f7bae46 	.word	0x3f7bae46
 8005358:	20003588 	.word	0x20003588
 800535c:	20003bb8 	.word	0x20003bb8
 8005360:	2000359c 	.word	0x2000359c
 8005364:	92492493 	.word	0x92492493
 8005368:	080166e8 	.word	0x080166e8
 800536c:	0801b564 	.word	0x0801b564
 8005370:	0801b0e8 	.word	0x0801b0e8
 8005374:	080166f8 	.word	0x080166f8
 8005378:	2aaaaaab 	.word	0x2aaaaaab
 800537c:	4640      	mov	r0, r8
 800537e:	4649      	mov	r1, r9
 8005380:	f7fa ff9c 	bl	80002bc <__aeabi_dsub>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4690      	mov	r8, r2
 800538a:	4699      	mov	r9, r3
 800538c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8005390:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005394:	ee17 0a90 	vmov	r0, s15
 8005398:	f7fb f8f0 	bl	800057c <__aeabi_f2d>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	ec43 2b10 	vmov	d0, r2, r3
 80053a4:	f00e fb8c 	bl	8013ac0 <sin>
 80053a8:	ec51 0b10 	vmov	r0, r1, d0
 80053ac:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f7fb f93a 	bl	800062c <__aeabi_dmul>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4640      	mov	r0, r8
 80053be:	4649      	mov	r1, r9
 80053c0:	f7fa ff7e 	bl	80002c0 <__adddf3>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4690      	mov	r8, r2
 80053ca:	4699      	mov	r9, r3
 80053cc:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80053d0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80053d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053d8:	ee17 0a90 	vmov	r0, s15
 80053dc:	f7fb f8ce 	bl	800057c <__aeabi_f2d>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	ec43 2b10 	vmov	d0, r2, r3
 80053e8:	f00e fb16 	bl	8013a18 <cos>
 80053ec:	ec51 0b10 	vmov	r0, r1, d0
 80053f0:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f7fb f918 	bl	800062c <__aeabi_dmul>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4640      	mov	r0, r8
 8005402:	4649      	mov	r1, r9
 8005404:	f7fa ff5a 	bl	80002bc <__aeabi_dsub>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4690      	mov	r8, r2
 800540e:	4699      	mov	r9, r3
 8005410:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8005414:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800541c:	ee17 0a90 	vmov	r0, s15
 8005420:	f7fb f8ac 	bl	800057c <__aeabi_f2d>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	ec43 2b10 	vmov	d0, r2, r3
 800542c:	f00e fb48 	bl	8013ac0 <sin>
 8005430:	ec51 0b10 	vmov	r0, r1, d0
 8005434:	f20f 4300 	addw	r3, pc, #1024	; 0x400
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	f7fb f8f6 	bl	800062c <__aeabi_dmul>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4640      	mov	r0, r8
 8005446:	4649      	mov	r1, r9
 8005448:	f7fa ff3a 	bl	80002c0 <__adddf3>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	f7fb fbe2 	bl	8000c1c <__aeabi_d2f>
 8005458:	4603      	mov	r3, r0
 800545a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4


	double longitude = 17; 	// [deg]
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	4be9      	ldr	r3, [pc, #932]	; (8005808 <localMain+0x830>)
 8005464:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	double latitude = 51;	// [deg]
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	4be7      	ldr	r3, [pc, #924]	; (800580c <localMain+0x834>)
 800546e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	float time_off = eqtime+4*longitude-60*timezone; // time offset [min]
 8005472:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005476:	f7fb f881 	bl	800057c <__aeabi_f2d>
 800547a:	4680      	mov	r8, r0
 800547c:	4689      	mov	r9, r1
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	4be3      	ldr	r3, [pc, #908]	; (8005810 <localMain+0x838>)
 8005484:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005488:	f7fb f8d0 	bl	800062c <__aeabi_dmul>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4640      	mov	r0, r8
 8005492:	4649      	mov	r1, r9
 8005494:	f7fa ff14 	bl	80002c0 <__adddf3>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4690      	mov	r8, r2
 800549e:	4699      	mov	r9, r3
 80054a0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80054a4:	4613      	mov	r3, r2
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fb f853 	bl	8000558 <__aeabi_i2d>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4640      	mov	r0, r8
 80054b8:	4649      	mov	r1, r9
 80054ba:	f7fa feff 	bl	80002bc <__aeabi_dsub>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4610      	mov	r0, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	f7fb fba9 	bl	8000c1c <__aeabi_d2f>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float tst = hhour*60+mmin+(float)ssec/60+time_off; // true solar time [min]
 80054d0:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 80054d4:	4613      	mov	r3, r2
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	461a      	mov	r2, r3
 80054de:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80054e2:	4413      	add	r3, r2
 80054e4:	ee07 3a90 	vmov	s15, r3
 80054e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054ec:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80054f0:	ee07 3a90 	vmov	s15, r3
 80054f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f8:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 8005814 <localMain+0x83c>
 80054fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005504:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8005508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800550c:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 8005510:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8005514:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800551c:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8005818 <localMain+0x840>
 8005520:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005524:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 8005528:	a3b5      	add	r3, pc, #724	; (adr r3, 8005800 <localMain+0x828>)
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005532:	f7fb f87b 	bl	800062c <__aeabi_dmul>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4610      	mov	r0, r2
 800553c:	4619      	mov	r1, r3
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	4bb6      	ldr	r3, [pc, #728]	; (800581c <localMain+0x844>)
 8005544:	f7fb f99c 	bl	8000880 <__aeabi_ddiv>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	ec43 2b17 	vmov	d7, r2, r3
 8005550:	eeb0 0a47 	vmov.f32	s0, s14
 8005554:	eef0 0a67 	vmov.f32	s1, s15
 8005558:	f00e fab2 	bl	8013ac0 <sin>
 800555c:	ec59 8b10 	vmov	r8, r9, d0
 8005560:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8005564:	f7fb f80a 	bl	800057c <__aeabi_f2d>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	ec43 2b10 	vmov	d0, r2, r3
 8005570:	f00e faa6 	bl	8013ac0 <sin>
 8005574:	ec53 2b10 	vmov	r2, r3, d0
 8005578:	4640      	mov	r0, r8
 800557a:	4649      	mov	r1, r9
 800557c:	f7fb f856 	bl	800062c <__aeabi_dmul>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4690      	mov	r8, r2
 8005586:	4699      	mov	r9, r3
 8005588:	a39d      	add	r3, pc, #628	; (adr r3, 8005800 <localMain+0x828>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005592:	f7fb f84b 	bl	800062c <__aeabi_dmul>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4610      	mov	r0, r2
 800559c:	4619      	mov	r1, r3
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	4b9e      	ldr	r3, [pc, #632]	; (800581c <localMain+0x844>)
 80055a4:	f7fb f96c 	bl	8000880 <__aeabi_ddiv>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	ec43 2b17 	vmov	d7, r2, r3
 80055b0:	eeb0 0a47 	vmov.f32	s0, s14
 80055b4:	eef0 0a67 	vmov.f32	s1, s15
 80055b8:	f00e fa2e 	bl	8013a18 <cos>
 80055bc:	ec5b ab10 	vmov	sl, fp, d0
 80055c0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80055c4:	f7fa ffda 	bl	800057c <__aeabi_f2d>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	ec43 2b10 	vmov	d0, r2, r3
 80055d0:	f00e fa22 	bl	8013a18 <cos>
 80055d4:	ec53 2b10 	vmov	r2, r3, d0
 80055d8:	4650      	mov	r0, sl
 80055da:	4659      	mov	r1, fp
 80055dc:	f7fb f826 	bl	800062c <__aeabi_dmul>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4692      	mov	sl, r2
 80055e6:	469b      	mov	fp, r3
 80055e8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80055ec:	f7fa ffc6 	bl	800057c <__aeabi_f2d>
 80055f0:	a383      	add	r3, pc, #524	; (adr r3, 8005800 <localMain+0x828>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fb f819 	bl	800062c <__aeabi_dmul>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4610      	mov	r0, r2
 8005600:	4619      	mov	r1, r3
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	4b85      	ldr	r3, [pc, #532]	; (800581c <localMain+0x844>)
 8005608:	f7fb f93a 	bl	8000880 <__aeabi_ddiv>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	ec43 2b17 	vmov	d7, r2, r3
 8005614:	eeb0 0a47 	vmov.f32	s0, s14
 8005618:	eef0 0a67 	vmov.f32	s1, s15
 800561c:	f00e f9fc 	bl	8013a18 <cos>
 8005620:	ec53 2b10 	vmov	r2, r3, d0
 8005624:	4650      	mov	r0, sl
 8005626:	4659      	mov	r1, fp
 8005628:	f7fb f800 	bl	800062c <__aeabi_dmul>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4640      	mov	r0, r8
 8005632:	4649      	mov	r1, r9
 8005634:	f7fa fe44 	bl	80002c0 <__adddf3>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4610      	mov	r0, r2
 800563e:	4619      	mov	r1, r3
 8005640:	f7fb faec 	bl	8000c1c <__aeabi_d2f>
 8005644:	4603      	mov	r3, r0
 8005646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float phi = acos(cosphi);
 800564a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800564e:	f7fa ff95 	bl	800057c <__aeabi_f2d>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	ec43 2b10 	vmov	d0, r2, r3
 800565a:	f00e fabd 	bl	8013bd8 <acos>
 800565e:	ec53 2b10 	vmov	r2, r3, d0
 8005662:	4610      	mov	r0, r2
 8005664:	4619      	mov	r1, r3
 8005666:	f7fb fad9 	bl	8000c1c <__aeabi_d2f>
 800566a:	4603      	mov	r3, r0
 800566c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float sinphi = sqrt(1-cosphi*cosphi);
 8005670:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005674:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800567c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005680:	ee17 0a90 	vmov	r0, s15
 8005684:	f7fa ff7a 	bl	800057c <__aeabi_f2d>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	ec43 2b10 	vmov	d0, r2, r3
 8005690:	f00e fb46 	bl	8013d20 <sqrt>
 8005694:	ec53 2b10 	vmov	r2, r3, d0
 8005698:	4610      	mov	r0, r2
 800569a:	4619      	mov	r1, r3
 800569c:	f7fb fabe 	bl	8000c1c <__aeabi_d2f>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 80056a6:	a356      	add	r3, pc, #344	; (adr r3, 8005800 <localMain+0x828>)
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80056b0:	f7fa ffbc 	bl	800062c <__aeabi_dmul>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	4b56      	ldr	r3, [pc, #344]	; (800581c <localMain+0x844>)
 80056c2:	f7fb f8dd 	bl	8000880 <__aeabi_ddiv>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	ec43 2b17 	vmov	d7, r2, r3
 80056ce:	eeb0 0a47 	vmov.f32	s0, s14
 80056d2:	eef0 0a67 	vmov.f32	s1, s15
 80056d6:	f00e f9f3 	bl	8013ac0 <sin>
 80056da:	ec59 8b10 	vmov	r8, r9, d0
 80056de:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80056e2:	f7fa ff4b 	bl	800057c <__aeabi_f2d>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4640      	mov	r0, r8
 80056ec:	4649      	mov	r1, r9
 80056ee:	f7fa ff9d 	bl	800062c <__aeabi_dmul>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4690      	mov	r8, r2
 80056f8:	4699      	mov	r9, r3
 80056fa:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80056fe:	f7fa ff3d 	bl	800057c <__aeabi_f2d>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	ec43 2b10 	vmov	d0, r2, r3
 800570a:	f00e f9d9 	bl	8013ac0 <sin>
 800570e:	ec53 2b10 	vmov	r2, r3, d0
 8005712:	4640      	mov	r0, r8
 8005714:	4649      	mov	r1, r9
 8005716:	f7fa fdd1 	bl	80002bc <__aeabi_dsub>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4614      	mov	r4, r2
 8005720:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005724:	a336      	add	r3, pc, #216	; (adr r3, 8005800 <localMain+0x828>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800572e:	f7fa ff7d 	bl	800062c <__aeabi_dmul>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	4b37      	ldr	r3, [pc, #220]	; (800581c <localMain+0x844>)
 8005740:	f7fb f89e 	bl	8000880 <__aeabi_ddiv>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	ec43 2b17 	vmov	d7, r2, r3
 800574c:	eeb0 0a47 	vmov.f32	s0, s14
 8005750:	eef0 0a67 	vmov.f32	s1, s15
 8005754:	f00e f960 	bl	8013a18 <cos>
 8005758:	ec59 8b10 	vmov	r8, r9, d0
 800575c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005760:	f7fa ff0c 	bl	800057c <__aeabi_f2d>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4640      	mov	r0, r8
 800576a:	4649      	mov	r1, r9
 800576c:	f7fa ff5e 	bl	800062c <__aeabi_dmul>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4620      	mov	r0, r4
 8005776:	4629      	mov	r1, r5
 8005778:	f7fb f882 	bl	8000880 <__aeabi_ddiv>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	ec43 2b17 	vmov	d7, r2, r3
 8005784:	eeb0 0a47 	vmov.f32	s0, s14
 8005788:	eef0 0a67 	vmov.f32	s1, s15
 800578c:	f00e fa24 	bl	8013bd8 <acos>
 8005790:	ec53 2b10 	vmov	r2, r3, d0
 8005794:	4610      	mov	r0, r2
 8005796:	4619      	mov	r1, r3
 8005798:	f7fb fa40 	bl	8000c1c <__aeabi_d2f>
 800579c:	4603      	mov	r3, r0
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef1 7a67 	vneg.f32	s15, s15
 80057a6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

	// setting for sunrise/sunset zenith angle [rad]
	double twilightType[] = {0.833, 6, 12, 18}; // twilight, civil, nautical, astronomical
 80057aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b2:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <localMain+0x848>)
 80057b4:	461c      	mov	r4, r3
 80057b6:	4615      	mov	r5, r2
 80057b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80057c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double zenith = (90+twilightType[0])*M_PI/180;
 80057c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	4b13      	ldr	r3, [pc, #76]	; (8005824 <localMain+0x84c>)
 80057d6:	f7fa fd73 	bl	80002c0 <__adddf3>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	a307      	add	r3, pc, #28	; (adr r3, 8005800 <localMain+0x828>)
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f7fa ff20 	bl	800062c <__aeabi_dmul>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	4b08      	ldr	r3, [pc, #32]	; (800581c <localMain+0x844>)
 80057fa:	f7fb f841 	bl	8000880 <__aeabi_ddiv>
 80057fe:	e01f      	b.n	8005840 <localMain+0x868>
 8005800:	54442d18 	.word	0x54442d18
 8005804:	400921fb 	.word	0x400921fb
 8005808:	40310000 	.word	0x40310000
 800580c:	40498000 	.word	0x40498000
 8005810:	40100000 	.word	0x40100000
 8005814:	42700000 	.word	0x42700000
 8005818:	43340000 	.word	0x43340000
 800581c:	40668000 	.word	0x40668000
 8005820:	080167d0 	.word	0x080167d0
 8005824:	40568000 	.word	0x40568000
 8005828:	ab324852 	.word	0xab324852
 800582c:	3f4db877 	.word	0x3f4db877
 8005830:	d9839475 	.word	0xd9839475
 8005834:	3f661804 	.word	0x3f661804
 8005838:	e646f156 	.word	0xe646f156
 800583c:	3f583f91 	.word	0x3f583f91
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8005848:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 800584c:	f00e f8e4 	bl	8013a18 <cos>
 8005850:	ec55 4b10 	vmov	r4, r5, d0
 8005854:	a3f0      	add	r3, pc, #960	; (adr r3, 8005c18 <localMain+0xc40>)
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800585e:	f7fa fee5 	bl	800062c <__aeabi_dmul>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4610      	mov	r0, r2
 8005868:	4619      	mov	r1, r3
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	4bec      	ldr	r3, [pc, #944]	; (8005c20 <localMain+0xc48>)
 8005870:	f7fb f806 	bl	8000880 <__aeabi_ddiv>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	ec43 2b17 	vmov	d7, r2, r3
 800587c:	eeb0 0a47 	vmov.f32	s0, s14
 8005880:	eef0 0a67 	vmov.f32	s1, s15
 8005884:	f00e f8c8 	bl	8013a18 <cos>
 8005888:	ec59 8b10 	vmov	r8, r9, d0
 800588c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8005890:	f7fa fe74 	bl	800057c <__aeabi_f2d>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	ec43 2b10 	vmov	d0, r2, r3
 800589c:	f00e f8bc 	bl	8013a18 <cos>
 80058a0:	ec53 2b10 	vmov	r2, r3, d0
 80058a4:	4640      	mov	r0, r8
 80058a6:	4649      	mov	r1, r9
 80058a8:	f7fa fec0 	bl	800062c <__aeabi_dmul>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4620      	mov	r0, r4
 80058b2:	4629      	mov	r1, r5
 80058b4:	f7fa ffe4 	bl	8000880 <__aeabi_ddiv>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4614      	mov	r4, r2
 80058be:	461d      	mov	r5, r3
 80058c0:	a3d5      	add	r3, pc, #852	; (adr r3, 8005c18 <localMain+0xc40>)
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80058ca:	f7fa feaf 	bl	800062c <__aeabi_dmul>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4610      	mov	r0, r2
 80058d4:	4619      	mov	r1, r3
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	4bd1      	ldr	r3, [pc, #836]	; (8005c20 <localMain+0xc48>)
 80058dc:	f7fa ffd0 	bl	8000880 <__aeabi_ddiv>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	ec43 2b17 	vmov	d7, r2, r3
 80058e8:	eeb0 0a47 	vmov.f32	s0, s14
 80058ec:	eef0 0a67 	vmov.f32	s1, s15
 80058f0:	f00e f93e 	bl	8013b70 <tan>
 80058f4:	ec59 8b10 	vmov	r8, r9, d0
 80058f8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80058fc:	f7fa fe3e 	bl	800057c <__aeabi_f2d>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	ec43 2b10 	vmov	d0, r2, r3
 8005908:	f00e f932 	bl	8013b70 <tan>
 800590c:	ec53 2b10 	vmov	r2, r3, d0
 8005910:	4640      	mov	r0, r8
 8005912:	4649      	mov	r1, r9
 8005914:	f7fa fe8a 	bl	800062c <__aeabi_dmul>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4620      	mov	r0, r4
 800591e:	4629      	mov	r1, r5
 8005920:	f7fa fccc 	bl	80002bc <__aeabi_dsub>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	ec43 2b17 	vmov	d7, r2, r3
 800592c:	eeb0 0a47 	vmov.f32	s0, s14
 8005930:	eef0 0a67 	vmov.f32	s1, s15
 8005934:	f00e f950 	bl	8013bd8 <acos>
 8005938:	ec53 2b10 	vmov	r2, r3, d0
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	f7fb f96c 	bl	8000c1c <__aeabi_d2f>
 8005944:	4603      	mov	r3, r0
 8005946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//sunrise/sunset/noon times [min]
	int sunrise = 720-4*(longitude+cha*180/M_PI)-eqtime+60*timezone;
 800594a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800594e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8005c24 <localMain+0xc4c>
 8005952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005956:	ee17 0a90 	vmov	r0, s15
 800595a:	f7fa fe0f 	bl	800057c <__aeabi_f2d>
 800595e:	a3ae      	add	r3, pc, #696	; (adr r3, 8005c18 <localMain+0xc40>)
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	f7fa ff8c 	bl	8000880 <__aeabi_ddiv>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4610      	mov	r0, r2
 800596e:	4619      	mov	r1, r3
 8005970:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8005974:	f7fa fca4 	bl	80002c0 <__adddf3>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4610      	mov	r0, r2
 800597e:	4619      	mov	r1, r3
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	4ba8      	ldr	r3, [pc, #672]	; (8005c28 <localMain+0xc50>)
 8005986:	f7fa fe51 	bl	800062c <__aeabi_dmul>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	f04f 0000 	mov.w	r0, #0
 8005992:	49a6      	ldr	r1, [pc, #664]	; (8005c2c <localMain+0xc54>)
 8005994:	f7fa fc92 	bl	80002bc <__aeabi_dsub>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4614      	mov	r4, r2
 800599e:	461d      	mov	r5, r3
 80059a0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80059a4:	f7fa fdea 	bl	800057c <__aeabi_f2d>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4620      	mov	r0, r4
 80059ae:	4629      	mov	r1, r5
 80059b0:	f7fa fc84 	bl	80002bc <__aeabi_dsub>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4614      	mov	r4, r2
 80059ba:	461d      	mov	r5, r3
 80059bc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80059c0:	4613      	mov	r3, r2
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fa fdc5 	bl	8000558 <__aeabi_i2d>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4620      	mov	r0, r4
 80059d4:	4629      	mov	r1, r5
 80059d6:	f7fa fc73 	bl	80002c0 <__adddf3>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4610      	mov	r0, r2
 80059e0:	4619      	mov	r1, r3
 80059e2:	f7fb f8d3 	bl	8000b8c <__aeabi_d2iz>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int sunset = 720-4*(longitude-cha*180/M_PI)-eqtime+60*timezone;
 80059ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80059f0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005c24 <localMain+0xc4c>
 80059f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059f8:	ee17 0a90 	vmov	r0, s15
 80059fc:	f7fa fdbe 	bl	800057c <__aeabi_f2d>
 8005a00:	a385      	add	r3, pc, #532	; (adr r3, 8005c18 <localMain+0xc40>)
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	f7fa ff3b 	bl	8000880 <__aeabi_ddiv>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005a12:	f7fa fc53 	bl	80002bc <__aeabi_dsub>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	4b81      	ldr	r3, [pc, #516]	; (8005c28 <localMain+0xc50>)
 8005a24:	f7fa fe02 	bl	800062c <__aeabi_dmul>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	f04f 0000 	mov.w	r0, #0
 8005a30:	497e      	ldr	r1, [pc, #504]	; (8005c2c <localMain+0xc54>)
 8005a32:	f7fa fc43 	bl	80002bc <__aeabi_dsub>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4614      	mov	r4, r2
 8005a3c:	461d      	mov	r5, r3
 8005a3e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005a42:	f7fa fd9b 	bl	800057c <__aeabi_f2d>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	f7fa fc35 	bl	80002bc <__aeabi_dsub>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4614      	mov	r4, r2
 8005a58:	461d      	mov	r5, r3
 8005a5a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005a5e:	4613      	mov	r3, r2
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fa fd76 	bl	8000558 <__aeabi_i2d>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4620      	mov	r0, r4
 8005a72:	4629      	mov	r1, r5
 8005a74:	f7fa fc24 	bl	80002c0 <__adddf3>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4619      	mov	r1, r3
 8005a80:	f7fb f884 	bl	8000b8c <__aeabi_d2iz>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	int noon = 720-4*longitude-eqtime+60*timezone;
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	4b66      	ldr	r3, [pc, #408]	; (8005c28 <localMain+0xc50>)
 8005a90:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005a94:	f7fa fdca 	bl	800062c <__aeabi_dmul>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	f04f 0000 	mov.w	r0, #0
 8005aa0:	4962      	ldr	r1, [pc, #392]	; (8005c2c <localMain+0xc54>)
 8005aa2:	f7fa fc0b 	bl	80002bc <__aeabi_dsub>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4614      	mov	r4, r2
 8005aac:	461d      	mov	r5, r3
 8005aae:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005ab2:	f7fa fd63 	bl	800057c <__aeabi_f2d>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4620      	mov	r0, r4
 8005abc:	4629      	mov	r1, r5
 8005abe:	f7fa fbfd 	bl	80002bc <__aeabi_dsub>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4614      	mov	r4, r2
 8005ac8:	461d      	mov	r5, r3
 8005aca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005ace:	4613      	mov	r3, r2
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fa fd3e 	bl	8000558 <__aeabi_i2d>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	f7fa fbec 	bl	80002c0 <__adddf3>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4610      	mov	r0, r2
 8005aee:	4619      	mov	r1, r3
 8005af0:	f7fb f84c 	bl	8000b8c <__aeabi_d2iz>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
//	sprintf(&textBuffer, "sa:%f cha:%f", sa, cha);
//	lcdPutStr(0, 210, textBuffer, smallestFont);

	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	sprintf(&textBuffer, "Sunrise: %02d:%02d", sunrise/60, sunrise%60);
 8005afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005afe:	4a4c      	ldr	r2, [pc, #304]	; (8005c30 <localMain+0xc58>)
 8005b00:	fb82 1203 	smull	r1, r2, r2, r3
 8005b04:	441a      	add	r2, r3
 8005b06:	1152      	asrs	r2, r2, #5
 8005b08:	17db      	asrs	r3, r3, #31
 8005b0a:	1ad4      	subs	r4, r2, r3
 8005b0c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005b10:	4b47      	ldr	r3, [pc, #284]	; (8005c30 <localMain+0xc58>)
 8005b12:	fb83 1302 	smull	r1, r3, r3, r2
 8005b16:	4413      	add	r3, r2
 8005b18:	1159      	asrs	r1, r3, #5
 8005b1a:	17d3      	asrs	r3, r2, #31
 8005b1c:	1ac9      	subs	r1, r1, r3
 8005b1e:	460b      	mov	r3, r1
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	1a5b      	subs	r3, r3, r1
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	1ad1      	subs	r1, r2, r3
 8005b28:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4622      	mov	r2, r4
 8005b30:	4940      	ldr	r1, [pc, #256]	; (8005c34 <localMain+0xc5c>)
 8005b32:	f008 fef5 	bl	800e920 <siprintf>
	lcdPutStr(10, 28, textBuffer, font_12_zekton_bold);
 8005b36:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005b3a:	4b3f      	ldr	r3, [pc, #252]	; (8005c38 <localMain+0xc60>)
 8005b3c:	211c      	movs	r1, #28
 8005b3e:	200a      	movs	r0, #10
 8005b40:	f7fc fe96 	bl	8002870 <lcdPutStr>
	sprintf(&textBuffer, "Noon: %02d:%02d", noon/60, noon%60);
 8005b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b48:	4a39      	ldr	r2, [pc, #228]	; (8005c30 <localMain+0xc58>)
 8005b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8005b4e:	441a      	add	r2, r3
 8005b50:	1152      	asrs	r2, r2, #5
 8005b52:	17db      	asrs	r3, r3, #31
 8005b54:	1ad4      	subs	r4, r2, r3
 8005b56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005b5a:	4b35      	ldr	r3, [pc, #212]	; (8005c30 <localMain+0xc58>)
 8005b5c:	fb83 1302 	smull	r1, r3, r3, r2
 8005b60:	4413      	add	r3, r2
 8005b62:	1159      	asrs	r1, r3, #5
 8005b64:	17d3      	asrs	r3, r2, #31
 8005b66:	1ac9      	subs	r1, r1, r3
 8005b68:	460b      	mov	r3, r1
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	1a5b      	subs	r3, r3, r1
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	1ad1      	subs	r1, r2, r3
 8005b72:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005b76:	460b      	mov	r3, r1
 8005b78:	4622      	mov	r2, r4
 8005b7a:	4930      	ldr	r1, [pc, #192]	; (8005c3c <localMain+0xc64>)
 8005b7c:	f008 fed0 	bl	800e920 <siprintf>
	lcdPutStr(10, 44, textBuffer, font_12_zekton_bold);
 8005b80:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005b84:	4b2c      	ldr	r3, [pc, #176]	; (8005c38 <localMain+0xc60>)
 8005b86:	212c      	movs	r1, #44	; 0x2c
 8005b88:	200a      	movs	r0, #10
 8005b8a:	f7fc fe71 	bl	8002870 <lcdPutStr>
	sprintf(&textBuffer, "Sunset: %02d:%02d", sunset/60, sunset%60);
 8005b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b92:	4a27      	ldr	r2, [pc, #156]	; (8005c30 <localMain+0xc58>)
 8005b94:	fb82 1203 	smull	r1, r2, r2, r3
 8005b98:	441a      	add	r2, r3
 8005b9a:	1152      	asrs	r2, r2, #5
 8005b9c:	17db      	asrs	r3, r3, #31
 8005b9e:	1ad4      	subs	r4, r2, r3
 8005ba0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005ba4:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <localMain+0xc58>)
 8005ba6:	fb83 1302 	smull	r1, r3, r3, r2
 8005baa:	4413      	add	r3, r2
 8005bac:	1159      	asrs	r1, r3, #5
 8005bae:	17d3      	asrs	r3, r2, #31
 8005bb0:	1ac9      	subs	r1, r1, r3
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	1a5b      	subs	r3, r3, r1
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	1ad1      	subs	r1, r2, r3
 8005bbc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	491e      	ldr	r1, [pc, #120]	; (8005c40 <localMain+0xc68>)
 8005bc6:	f008 feab 	bl	800e920 <siprintf>
	lcdPutStr(10, 60, textBuffer, font_12_zekton_bold);
 8005bca:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005bce:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <localMain+0xc60>)
 8005bd0:	213c      	movs	r1, #60	; 0x3c
 8005bd2:	200a      	movs	r0, #10
 8005bd4:	f7fc fe4c 	bl	8002870 <lcdPutStr>

	sprintf(&textBuffer, "solar elevation angle: %02.3f deg", 90-phi*180/M_PI);
 8005bd8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005bdc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005c24 <localMain+0xc4c>
 8005be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005be4:	ee17 0a90 	vmov	r0, s15
 8005be8:	f7fa fcc8 	bl	800057c <__aeabi_f2d>
 8005bec:	a30a      	add	r3, pc, #40	; (adr r3, 8005c18 <localMain+0xc40>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	f7fa fe45 	bl	8000880 <__aeabi_ddiv>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	f04f 0000 	mov.w	r0, #0
 8005bfe:	4911      	ldr	r1, [pc, #68]	; (8005c44 <localMain+0xc6c>)
 8005c00:	f7fa fb5c 	bl	80002bc <__aeabi_dsub>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005c0c:	490e      	ldr	r1, [pc, #56]	; (8005c48 <localMain+0xc70>)
 8005c0e:	f008 fe87 	bl	800e920 <siprintf>
 8005c12:	e01b      	b.n	8005c4c <localMain+0xc74>
 8005c14:	f3af 8000 	nop.w
 8005c18:	54442d18 	.word	0x54442d18
 8005c1c:	400921fb 	.word	0x400921fb
 8005c20:	40668000 	.word	0x40668000
 8005c24:	43340000 	.word	0x43340000
 8005c28:	40100000 	.word	0x40100000
 8005c2c:	40868000 	.word	0x40868000
 8005c30:	88888889 	.word	0x88888889
 8005c34:	0801670c 	.word	0x0801670c
 8005c38:	0801bfec 	.word	0x0801bfec
 8005c3c:	08016720 	.word	0x08016720
 8005c40:	08016730 	.word	0x08016730
 8005c44:	40568000 	.word	0x40568000
 8005c48:	08016744 	.word	0x08016744
	lcdPutStr(10, 80, textBuffer, font_12_zekton_bold);
 8005c4c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005c50:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <localMain+0xcc8>)
 8005c52:	2150      	movs	r1, #80	; 0x50
 8005c54:	200a      	movs	r0, #10
 8005c56:	f7fc fe0b 	bl	8002870 <lcdPutStr>

	double saDeg;
	if(cha<0) saDeg = -sa*180/M_PI;
 8005c5a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005c5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c66:	d51f      	bpl.n	8005ca8 <localMain+0xcd0>
 8005c68:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005c6c:	eef1 7a67 	vneg.f32	s15, s15
 8005c70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005ca4 <localMain+0xccc>
 8005c74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c78:	ee17 0a90 	vmov	r0, s15
 8005c7c:	f7fa fc7e 	bl	800057c <__aeabi_f2d>
 8005c80:	a305      	add	r3, pc, #20	; (adr r3, 8005c98 <localMain+0xcc0>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	f7fa fdfb 	bl	8000880 <__aeabi_ddiv>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 8005c92:	e025      	b.n	8005ce0 <localMain+0xd08>
 8005c94:	f3af 8000 	nop.w
 8005c98:	54442d18 	.word	0x54442d18
 8005c9c:	400921fb 	.word	0x400921fb
 8005ca0:	0801bfec 	.word	0x0801bfec
 8005ca4:	43340000 	.word	0x43340000
	else saDeg = 360+sa*180/M_PI;
 8005ca8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005cac:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005ca4 <localMain+0xccc>
 8005cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cb4:	ee17 0a90 	vmov	r0, s15
 8005cb8:	f7fa fc60 	bl	800057c <__aeabi_f2d>
 8005cbc:	a3db      	add	r3, pc, #876	; (adr r3, 800602c <localMain+0x1054>)
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f7fa fddd 	bl	8000880 <__aeabi_ddiv>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4610      	mov	r0, r2
 8005ccc:	4619      	mov	r1, r3
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	4bcb      	ldr	r3, [pc, #812]	; (8006000 <localMain+0x1028>)
 8005cd4:	f7fa faf4 	bl	80002c0 <__adddf3>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", saDeg);
 8005ce0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005ce4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8005ce8:	49c6      	ldr	r1, [pc, #792]	; (8006004 <localMain+0x102c>)
 8005cea:	f008 fe19 	bl	800e920 <siprintf>
//	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", fmod(360+sa*180/M_PI, 360));
	lcdPutStr(10, 96, textBuffer, font_12_zekton_bold);
 8005cee:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005cf2:	4bc5      	ldr	r3, [pc, #788]	; (8006008 <localMain+0x1030>)
 8005cf4:	2160      	movs	r1, #96	; 0x60
 8005cf6:	200a      	movs	r0, #10
 8005cf8:	f7fc fdba 	bl	8002870 <lcdPutStr>

	double perc = (hhour*60+mmin+(double)ssec/60-sunrise)*100/(sunset-sunrise);
 8005cfc:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005d00:	4613      	mov	r3, r2
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005d0e:	4413      	add	r3, r2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fa fc21 	bl	8000558 <__aeabi_i2d>
 8005d16:	4604      	mov	r4, r0
 8005d18:	460d      	mov	r5, r1
 8005d1a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fa fc0a 	bl	8000538 <__aeabi_ui2d>
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	4bb8      	ldr	r3, [pc, #736]	; (800600c <localMain+0x1034>)
 8005d2a:	f7fa fda9 	bl	8000880 <__aeabi_ddiv>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4620      	mov	r0, r4
 8005d34:	4629      	mov	r1, r5
 8005d36:	f7fa fac3 	bl	80002c0 <__adddf3>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4614      	mov	r4, r2
 8005d40:	461d      	mov	r5, r3
 8005d42:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8005d46:	f7fa fc07 	bl	8000558 <__aeabi_i2d>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4620      	mov	r0, r4
 8005d50:	4629      	mov	r1, r5
 8005d52:	f7fa fab3 	bl	80002bc <__aeabi_dsub>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	4bab      	ldr	r3, [pc, #684]	; (8006010 <localMain+0x1038>)
 8005d64:	f7fa fc62 	bl	800062c <__aeabi_dmul>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	461d      	mov	r5, r3
 8005d70:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005d74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fa fbec 	bl	8000558 <__aeabi_i2d>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4620      	mov	r0, r4
 8005d86:	4629      	mov	r1, r5
 8005d88:	f7fa fd7a 	bl	8000880 <__aeabi_ddiv>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	sprintf(&textBuffer, "percentage daylight: %2.3f%%", perc);
 8005d94:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005d98:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005d9c:	499d      	ldr	r1, [pc, #628]	; (8006014 <localMain+0x103c>)
 8005d9e:	f008 fdbf 	bl	800e920 <siprintf>
	lcdPutStr(10, 116, textBuffer, font_12_zekton_bold);
 8005da2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005da6:	4b98      	ldr	r3, [pc, #608]	; (8006008 <localMain+0x1030>)
 8005da8:	2174      	movs	r1, #116	; 0x74
 8005daa:	200a      	movs	r0, #10
 8005dac:	f7fc fd60 	bl	8002870 <lcdPutStr>
	sprintf(&textBuffer, "day length: %02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 8005db0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005db4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	4a97      	ldr	r2, [pc, #604]	; (8006018 <localMain+0x1040>)
 8005dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8005dc0:	441a      	add	r2, r3
 8005dc2:	1152      	asrs	r2, r2, #5
 8005dc4:	17db      	asrs	r3, r3, #31
 8005dc6:	1ad4      	subs	r4, r2, r3
 8005dc8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005dcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dd0:	1ad2      	subs	r2, r2, r3
 8005dd2:	4b91      	ldr	r3, [pc, #580]	; (8006018 <localMain+0x1040>)
 8005dd4:	fb83 1302 	smull	r1, r3, r3, r2
 8005dd8:	4413      	add	r3, r2
 8005dda:	1159      	asrs	r1, r3, #5
 8005ddc:	17d3      	asrs	r3, r2, #31
 8005dde:	1ac9      	subs	r1, r1, r3
 8005de0:	460b      	mov	r3, r1
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	1a5b      	subs	r3, r3, r1
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	1ad1      	subs	r1, r2, r3
 8005dea:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005dee:	460b      	mov	r3, r1
 8005df0:	4622      	mov	r2, r4
 8005df2:	498a      	ldr	r1, [pc, #552]	; (800601c <localMain+0x1044>)
 8005df4:	f008 fd94 	bl	800e920 <siprintf>
	lcdPutStr(10, 132, textBuffer, font_12_zekton_bold);
 8005df8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005dfc:	4b82      	ldr	r3, [pc, #520]	; (8006008 <localMain+0x1030>)
 8005dfe:	2184      	movs	r1, #132	; 0x84
 8005e00:	200a      	movs	r0, #10
 8005e02:	f7fc fd35 	bl	8002870 <lcdPutStr>

	uint16_t scaleXrise = 10+380*sunrise/(24*60-0);
 8005e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e0a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005e0e:	fb02 f303 	mul.w	r3, r2, r3
 8005e12:	4a83      	ldr	r2, [pc, #524]	; (8006020 <localMain+0x1048>)
 8005e14:	fb82 1203 	smull	r1, r2, r2, r3
 8005e18:	441a      	add	r2, r3
 8005e1a:	1292      	asrs	r2, r2, #10
 8005e1c:	17db      	asrs	r3, r3, #31
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	330a      	adds	r3, #10
 8005e24:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t scaleXset = 10+380*sunset/(24*60-0);
 8005e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e2c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005e30:	fb02 f303 	mul.w	r3, r2, r3
 8005e34:	4a7a      	ldr	r2, [pc, #488]	; (8006020 <localMain+0x1048>)
 8005e36:	fb82 1203 	smull	r1, r2, r2, r3
 8005e3a:	441a      	add	r2, r3
 8005e3c:	1292      	asrs	r2, r2, #10
 8005e3e:	17db      	asrs	r3, r3, #31
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	330a      	adds	r3, #10
 8005e46:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t scaleXnoon = 10+380*noon/(24*60-0);
 8005e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e4e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	4a72      	ldr	r2, [pc, #456]	; (8006020 <localMain+0x1048>)
 8005e58:	fb82 1203 	smull	r1, r2, r2, r3
 8005e5c:	441a      	add	r2, r3
 8005e5e:	1292      	asrs	r2, r2, #10
 8005e60:	17db      	asrs	r3, r3, #31
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	330a      	adds	r3, #10
 8005e68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t scaleXnow = 10+380*(hhour*60+mmin)/(24*60-0);
 8005e6c:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005e70:	4613      	mov	r3, r2
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005e7e:	4413      	add	r3, r2
 8005e80:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005e84:	fb02 f303 	mul.w	r3, r2, r3
 8005e88:	4a65      	ldr	r2, [pc, #404]	; (8006020 <localMain+0x1048>)
 8005e8a:	fb82 1203 	smull	r1, r2, r2, r3
 8005e8e:	441a      	add	r2, r3
 8005e90:	1292      	asrs	r2, r2, #10
 8005e92:	17db      	asrs	r3, r3, #31
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	330a      	adds	r3, #10
 8005e9a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	lcdHLine(10,399-10,165,1);
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	22a5      	movs	r2, #165	; 0xa5
 8005ea2:	f240 1185 	movw	r1, #389	; 0x185
 8005ea6:	200a      	movs	r0, #10
 8005ea8:	f7fd f94c 	bl	8003144 <lcdHLine>
	lcdVLine(10, 163, 167, 1);
 8005eac:	2301      	movs	r3, #1
 8005eae:	22a7      	movs	r2, #167	; 0xa7
 8005eb0:	21a3      	movs	r1, #163	; 0xa3
 8005eb2:	200a      	movs	r0, #10
 8005eb4:	f7fc fd0a 	bl	80028cc <lcdVLine>
	lcdVLine(399-10, 163, 167, 1);
 8005eb8:	2301      	movs	r3, #1
 8005eba:	22a7      	movs	r2, #167	; 0xa7
 8005ebc:	21a3      	movs	r1, #163	; 0xa3
 8005ebe:	f240 1085 	movw	r0, #389	; 0x185
 8005ec2:	f7fc fd03 	bl	80028cc <lcdVLine>
	lcdVLine(scaleXrise, 160, 170, 2);
 8005ec6:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 8005eca:	2302      	movs	r3, #2
 8005ecc:	22aa      	movs	r2, #170	; 0xaa
 8005ece:	21a0      	movs	r1, #160	; 0xa0
 8005ed0:	f7fc fcfc 	bl	80028cc <lcdVLine>
	lcdVLine(scaleXset, 160, 170, 2);
 8005ed4:	f8b7 008c 	ldrh.w	r0, [r7, #140]	; 0x8c
 8005ed8:	2302      	movs	r3, #2
 8005eda:	22aa      	movs	r2, #170	; 0xaa
 8005edc:	21a0      	movs	r1, #160	; 0xa0
 8005ede:	f7fc fcf5 	bl	80028cc <lcdVLine>
	lcdVLine(scaleXnoon, 160, 170, 2);
 8005ee2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	22aa      	movs	r2, #170	; 0xaa
 8005eea:	21a0      	movs	r1, #160	; 0xa0
 8005eec:	f7fc fcee 	bl	80028cc <lcdVLine>
	lcdVLine(scaleXnow, 155, 175, 2);
 8005ef0:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	22af      	movs	r2, #175	; 0xaf
 8005ef8:	219b      	movs	r1, #155	; 0x9b
 8005efa:	f7fc fce7 	bl	80028cc <lcdVLine>

	sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 8005efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f02:	4a45      	ldr	r2, [pc, #276]	; (8006018 <localMain+0x1040>)
 8005f04:	fb82 1203 	smull	r1, r2, r2, r3
 8005f08:	441a      	add	r2, r3
 8005f0a:	1152      	asrs	r2, r2, #5
 8005f0c:	17db      	asrs	r3, r3, #31
 8005f0e:	1ad4      	subs	r4, r2, r3
 8005f10:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005f14:	4b40      	ldr	r3, [pc, #256]	; (8006018 <localMain+0x1040>)
 8005f16:	fb83 1302 	smull	r1, r3, r3, r2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	1159      	asrs	r1, r3, #5
 8005f1e:	17d3      	asrs	r3, r2, #31
 8005f20:	1ac9      	subs	r1, r1, r3
 8005f22:	460b      	mov	r3, r1
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	1a5b      	subs	r3, r3, r1
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	1ad1      	subs	r1, r2, r3
 8005f2c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005f30:	460b      	mov	r3, r1
 8005f32:	4622      	mov	r2, r4
 8005f34:	493b      	ldr	r1, [pc, #236]	; (8006024 <localMain+0x104c>)
 8005f36:	f008 fcf3 	bl	800e920 <siprintf>
	lcdPutStr(scaleXrise-19, 170, textBuffer, smallestFont);
 8005f3a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f3e:	3b13      	subs	r3, #19
 8005f40:	b298      	uxth	r0, r3
 8005f42:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005f46:	4b38      	ldr	r3, [pc, #224]	; (8006028 <localMain+0x1050>)
 8005f48:	21aa      	movs	r1, #170	; 0xaa
 8005f4a:	f7fc fc91 	bl	8002870 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 8005f4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f52:	4a31      	ldr	r2, [pc, #196]	; (8006018 <localMain+0x1040>)
 8005f54:	fb82 1203 	smull	r1, r2, r2, r3
 8005f58:	441a      	add	r2, r3
 8005f5a:	1152      	asrs	r2, r2, #5
 8005f5c:	17db      	asrs	r3, r3, #31
 8005f5e:	1ad4      	subs	r4, r2, r3
 8005f60:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005f64:	4b2c      	ldr	r3, [pc, #176]	; (8006018 <localMain+0x1040>)
 8005f66:	fb83 1302 	smull	r1, r3, r3, r2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	1159      	asrs	r1, r3, #5
 8005f6e:	17d3      	asrs	r3, r2, #31
 8005f70:	1ac9      	subs	r1, r1, r3
 8005f72:	460b      	mov	r3, r1
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	1a5b      	subs	r3, r3, r1
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	1ad1      	subs	r1, r2, r3
 8005f7c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005f80:	460b      	mov	r3, r1
 8005f82:	4622      	mov	r2, r4
 8005f84:	4927      	ldr	r1, [pc, #156]	; (8006024 <localMain+0x104c>)
 8005f86:	f008 fccb 	bl	800e920 <siprintf>
	lcdPutStr(scaleXset-19, 170, textBuffer, smallestFont);
 8005f8a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f8e:	3b13      	subs	r3, #19
 8005f90:	b298      	uxth	r0, r3
 8005f92:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005f96:	4b24      	ldr	r3, [pc, #144]	; (8006028 <localMain+0x1050>)
 8005f98:	21aa      	movs	r1, #170	; 0xaa
 8005f9a:	f7fc fc69 	bl	8002870 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 8005f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fa2:	4a1d      	ldr	r2, [pc, #116]	; (8006018 <localMain+0x1040>)
 8005fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8005fa8:	441a      	add	r2, r3
 8005faa:	1152      	asrs	r2, r2, #5
 8005fac:	17db      	asrs	r3, r3, #31
 8005fae:	1ad4      	subs	r4, r2, r3
 8005fb0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005fb4:	4b18      	ldr	r3, [pc, #96]	; (8006018 <localMain+0x1040>)
 8005fb6:	fb83 1302 	smull	r1, r3, r3, r2
 8005fba:	4413      	add	r3, r2
 8005fbc:	1159      	asrs	r1, r3, #5
 8005fbe:	17d3      	asrs	r3, r2, #31
 8005fc0:	1ac9      	subs	r1, r1, r3
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	1a5b      	subs	r3, r3, r1
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	1ad1      	subs	r1, r2, r3
 8005fcc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4622      	mov	r2, r4
 8005fd4:	4913      	ldr	r1, [pc, #76]	; (8006024 <localMain+0x104c>)
 8005fd6:	f008 fca3 	bl	800e920 <siprintf>
	lcdPutStr(scaleXnoon-19, 170, textBuffer, smallestFont);
 8005fda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005fde:	3b13      	subs	r3, #19
 8005fe0:	b298      	uxth	r0, r3
 8005fe2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005fe6:	4b10      	ldr	r3, [pc, #64]	; (8006028 <localMain+0x1050>)
 8005fe8:	21aa      	movs	r1, #170	; 0xaa
 8005fea:	f7fc fc41 	bl	8002870 <lcdPutStr>
}
 8005fee:	bf00      	nop
 8005ff0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ffa:	bf00      	nop
 8005ffc:	f3af 8000 	nop.w
 8006000:	40768000 	.word	0x40768000
 8006004:	08016768 	.word	0x08016768
 8006008:	0801bfec 	.word	0x0801bfec
 800600c:	404e0000 	.word	0x404e0000
 8006010:	40590000 	.word	0x40590000
 8006014:	08016788 	.word	0x08016788
 8006018:	88888889 	.word	0x88888889
 800601c:	080167a8 	.word	0x080167a8
 8006020:	b60b60b7 	.word	0xb60b60b7
 8006024:	080167c4 	.word	0x080167c4
 8006028:	0801b0e8 	.word	0x0801b0e8
 800602c:	54442d18 	.word	0x54442d18
 8006030:	400921fb 	.word	0x400921fb

08006034 <prevPage>:
//#include "fonts/zekton24.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <prevPage+0x30>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d006      	beq.n	800604e <prevPage+0x1a>
		currentPage--;
 8006040:	4b08      	ldr	r3, [pc, #32]	; (8006064 <prevPage+0x30>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	3b01      	subs	r3, #1
 8006046:	b2da      	uxtb	r2, r3
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <prevPage+0x30>)
 800604a:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 800604c:	e005      	b.n	800605a <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 800604e:	4b06      	ldr	r3, [pc, #24]	; (8006068 <prevPage+0x34>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	3b01      	subs	r3, #1
 8006054:	b2da      	uxtb	r2, r3
 8006056:	4b03      	ldr	r3, [pc, #12]	; (8006064 <prevPage+0x30>)
 8006058:	701a      	strb	r2, [r3, #0]
}
 800605a:	bf00      	nop
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	20003bdc 	.word	0x20003bdc
 8006068:	2000018b 	.word	0x2000018b

0800606c <nextPage>:
void nextPage(void){
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <nextPage+0x34>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <nextPage+0x38>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	3b01      	subs	r3, #1
 800607c:	429a      	cmp	r2, r3
 800607e:	da06      	bge.n	800608e <nextPage+0x22>
		currentPage++;
 8006080:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <nextPage+0x34>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	b2da      	uxtb	r2, r3
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <nextPage+0x34>)
 800608a:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 800608c:	e002      	b.n	8006094 <nextPage+0x28>
		currentPage=0;
 800608e:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <nextPage+0x34>)
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	20003bdc 	.word	0x20003bdc
 80060a4:	2000018b 	.word	0x2000018b

080060a8 <showPage1>:

void showPage1(void){
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b092      	sub	sp, #72	; 0x48
 80060ac:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 80060ae:	2300      	movs	r3, #0
 80060b0:	623b      	str	r3, [r7, #32]
 80060b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	609a      	str	r2, [r3, #8]
 80060be:	60da      	str	r2, [r3, #12]
 80060c0:	611a      	str	r2, [r3, #16]
 80060c2:	615a      	str	r2, [r3, #20]
 80060c4:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 80060c6:	2300      	movs	r3, #0
 80060c8:	603b      	str	r3, [r7, #0]
 80060ca:	1d3b      	adds	r3, r7, #4
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	605a      	str	r2, [r3, #4]
 80060d2:	609a      	str	r2, [r3, #8]
 80060d4:	60da      	str	r2, [r3, #12]
 80060d6:	611a      	str	r2, [r3, #16]
 80060d8:	615a      	str	r2, [r3, #20]
 80060da:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80060dc:	4b17      	ldr	r3, [pc, #92]	; (800613c <showPage1+0x94>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	4b16      	ldr	r3, [pc, #88]	; (800613c <showPage1+0x94>)
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	4619      	mov	r1, r3
 80060e8:	4b14      	ldr	r3, [pc, #80]	; (800613c <showPage1+0x94>)
 80060ea:	789b      	ldrb	r3, [r3, #2]
 80060ec:	4638      	mov	r0, r7
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	460b      	mov	r3, r1
 80060f2:	4913      	ldr	r1, [pc, #76]	; (8006140 <showPage1+0x98>)
 80060f4:	f008 fc14 	bl	800e920 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 80060f8:	463a      	mov	r2, r7
 80060fa:	4b12      	ldr	r3, [pc, #72]	; (8006144 <showPage1+0x9c>)
 80060fc:	210b      	movs	r1, #11
 80060fe:	200e      	movs	r0, #14
 8006100:	f7fc fbb6 	bl	8002870 <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 8006104:	2301      	movs	r3, #1
 8006106:	2227      	movs	r2, #39	; 0x27
 8006108:	2106      	movs	r1, #6
 800610a:	2001      	movs	r0, #1
 800610c:	f7fc fbde 	bl	80028cc <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 8006110:	2301      	movs	r3, #1
 8006112:	2228      	movs	r2, #40	; 0x28
 8006114:	2105      	movs	r1, #5
 8006116:	2002      	movs	r0, #2
 8006118:	f7fc fbd8 	bl	80028cc <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 800611c:	2301      	movs	r3, #1
 800611e:	2228      	movs	r2, #40	; 0x28
 8006120:	2105      	movs	r1, #5
 8006122:	2003      	movs	r0, #3
 8006124:	f7fc fbd2 	bl	80028cc <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 8006128:	2301      	movs	r3, #1
 800612a:	2227      	movs	r2, #39	; 0x27
 800612c:	2106      	movs	r1, #6
 800612e:	2004      	movs	r0, #4
 8006130:	f7fc fbcc 	bl	80028cc <lcdVLine>
}
 8006134:	bf00      	nop
 8006136:	3740      	adds	r7, #64	; 0x40
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20003588 	.word	0x20003588
 8006140:	080168a8 	.word	0x080168a8
 8006144:	0802156c 	.word	0x0802156c

08006148 <showPage2>:
void showPage2(void){
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800614e:	2300      	movs	r3, #0
 8006150:	603b      	str	r3, [r7, #0]
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	605a      	str	r2, [r3, #4]
 800615a:	609a      	str	r2, [r3, #8]
 800615c:	60da      	str	r2, [r3, #12]
 800615e:	611a      	str	r2, [r3, #16]
 8006160:	615a      	str	r2, [r3, #20]
 8006162:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 8006164:	463b      	mov	r3, r7
 8006166:	4913      	ldr	r1, [pc, #76]	; (80061b4 <showPage2+0x6c>)
 8006168:	4618      	mov	r0, r3
 800616a:	f008 fbd9 	bl	800e920 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 800616e:	463a      	mov	r2, r7
 8006170:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <showPage2+0x70>)
 8006172:	2132      	movs	r1, #50	; 0x32
 8006174:	200e      	movs	r0, #14
 8006176:	f7fc fb7b 	bl	8002870 <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800617a:	2301      	movs	r3, #1
 800617c:	224e      	movs	r2, #78	; 0x4e
 800617e:	212d      	movs	r1, #45	; 0x2d
 8006180:	2001      	movs	r0, #1
 8006182:	f7fc fba3 	bl	80028cc <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8006186:	2301      	movs	r3, #1
 8006188:	224f      	movs	r2, #79	; 0x4f
 800618a:	212c      	movs	r1, #44	; 0x2c
 800618c:	2002      	movs	r0, #2
 800618e:	f7fc fb9d 	bl	80028cc <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8006192:	2301      	movs	r3, #1
 8006194:	224f      	movs	r2, #79	; 0x4f
 8006196:	212c      	movs	r1, #44	; 0x2c
 8006198:	2003      	movs	r0, #3
 800619a:	f7fc fb97 	bl	80028cc <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800619e:	2301      	movs	r3, #1
 80061a0:	224e      	movs	r2, #78	; 0x4e
 80061a2:	212d      	movs	r1, #45	; 0x2d
 80061a4:	2004      	movs	r0, #4
 80061a6:	f7fc fb91 	bl	80028cc <lcdVLine>
}
 80061aa:	bf00      	nop
 80061ac:	3720      	adds	r7, #32
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	080168b8 	.word	0x080168b8
 80061b8:	0802156c 	.word	0x0802156c

080061bc <showPage3>:
void showPage3(void){
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80061c2:	2300      	movs	r3, #0
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	1d3b      	adds	r3, r7, #4
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	605a      	str	r2, [r3, #4]
 80061ce:	609a      	str	r2, [r3, #8]
 80061d0:	60da      	str	r2, [r3, #12]
 80061d2:	611a      	str	r2, [r3, #16]
 80061d4:	615a      	str	r2, [r3, #20]
 80061d6:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 80061d8:	463b      	mov	r3, r7
 80061da:	4913      	ldr	r1, [pc, #76]	; (8006228 <showPage3+0x6c>)
 80061dc:	4618      	mov	r0, r3
 80061de:	f008 fb9f 	bl	800e920 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 80061e2:	463a      	mov	r2, r7
 80061e4:	4b11      	ldr	r3, [pc, #68]	; (800622c <showPage3+0x70>)
 80061e6:	2100      	movs	r1, #0
 80061e8:	2000      	movs	r0, #0
 80061ea:	f7fc fb41 	bl	8002870 <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80061ee:	2301      	movs	r3, #1
 80061f0:	2275      	movs	r2, #117	; 0x75
 80061f2:	2154      	movs	r1, #84	; 0x54
 80061f4:	2001      	movs	r0, #1
 80061f6:	f7fc fb69 	bl	80028cc <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 80061fa:	2301      	movs	r3, #1
 80061fc:	2276      	movs	r2, #118	; 0x76
 80061fe:	2153      	movs	r1, #83	; 0x53
 8006200:	2002      	movs	r0, #2
 8006202:	f7fc fb63 	bl	80028cc <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8006206:	2301      	movs	r3, #1
 8006208:	2276      	movs	r2, #118	; 0x76
 800620a:	2153      	movs	r1, #83	; 0x53
 800620c:	2003      	movs	r0, #3
 800620e:	f7fc fb5d 	bl	80028cc <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8006212:	2301      	movs	r3, #1
 8006214:	2275      	movs	r2, #117	; 0x75
 8006216:	2154      	movs	r1, #84	; 0x54
 8006218:	2004      	movs	r0, #4
 800621a:	f7fc fb57 	bl	80028cc <lcdVLine>
}
 800621e:	bf00      	nop
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	080168bc 	.word	0x080168bc
 800622c:	0802156c 	.word	0x0802156c

08006230 <showPage4>:
void showPage4(void){
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8006236:	2300      	movs	r3, #0
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	1d3b      	adds	r3, r7, #4
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	609a      	str	r2, [r3, #8]
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	611a      	str	r2, [r3, #16]
 8006248:	615a      	str	r2, [r3, #20]
 800624a:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 800624c:	463b      	mov	r3, r7
 800624e:	4913      	ldr	r1, [pc, #76]	; (800629c <showPage4+0x6c>)
 8006250:	4618      	mov	r0, r3
 8006252:	f008 fb65 	bl	800e920 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8006256:	463a      	mov	r2, r7
 8006258:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <showPage4+0x70>)
 800625a:	2100      	movs	r1, #0
 800625c:	2000      	movs	r0, #0
 800625e:	f7fc fb07 	bl	8002870 <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8006262:	2301      	movs	r3, #1
 8006264:	229c      	movs	r2, #156	; 0x9c
 8006266:	217b      	movs	r1, #123	; 0x7b
 8006268:	2001      	movs	r0, #1
 800626a:	f7fc fb2f 	bl	80028cc <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 800626e:	2301      	movs	r3, #1
 8006270:	229d      	movs	r2, #157	; 0x9d
 8006272:	217a      	movs	r1, #122	; 0x7a
 8006274:	2002      	movs	r0, #2
 8006276:	f7fc fb29 	bl	80028cc <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 800627a:	2301      	movs	r3, #1
 800627c:	229d      	movs	r2, #157	; 0x9d
 800627e:	217a      	movs	r1, #122	; 0x7a
 8006280:	2003      	movs	r0, #3
 8006282:	f7fc fb23 	bl	80028cc <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8006286:	2301      	movs	r3, #1
 8006288:	229c      	movs	r2, #156	; 0x9c
 800628a:	217b      	movs	r1, #123	; 0x7b
 800628c:	2004      	movs	r0, #4
 800628e:	f7fc fb1d 	bl	80028cc <lcdVLine>
}
 8006292:	bf00      	nop
 8006294:	3720      	adds	r7, #32
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	080168c8 	.word	0x080168c8
 80062a0:	0802156c 	.word	0x0802156c

080062a4 <showPage5>:
void showPage5(void){
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80062aa:	2300      	movs	r3, #0
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	605a      	str	r2, [r3, #4]
 80062b6:	609a      	str	r2, [r3, #8]
 80062b8:	60da      	str	r2, [r3, #12]
 80062ba:	611a      	str	r2, [r3, #16]
 80062bc:	615a      	str	r2, [r3, #20]
 80062be:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 80062c0:	463b      	mov	r3, r7
 80062c2:	4925      	ldr	r1, [pc, #148]	; (8006358 <showPage5+0xb4>)
 80062c4:	4618      	mov	r0, r3
 80062c6:	f008 fb2b 	bl	800e920 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 80062ca:	463a      	mov	r2, r7
 80062cc:	4b23      	ldr	r3, [pc, #140]	; (800635c <showPage5+0xb8>)
 80062ce:	2100      	movs	r1, #0
 80062d0:	200a      	movs	r0, #10
 80062d2:	f7fc facd 	bl	8002870 <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 80062d6:	463a      	mov	r2, r7
 80062d8:	4b21      	ldr	r3, [pc, #132]	; (8006360 <showPage5+0xbc>)
 80062da:	210f      	movs	r1, #15
 80062dc:	200a      	movs	r0, #10
 80062de:	f7fc fac7 	bl	8002870 <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 80062e2:	463a      	mov	r2, r7
 80062e4:	4b1f      	ldr	r3, [pc, #124]	; (8006364 <showPage5+0xc0>)
 80062e6:	2132      	movs	r1, #50	; 0x32
 80062e8:	200a      	movs	r0, #10
 80062ea:	f7fc fac1 	bl	8002870 <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 80062ee:	463a      	mov	r2, r7
 80062f0:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <showPage5+0xc4>)
 80062f2:	213c      	movs	r1, #60	; 0x3c
 80062f4:	200a      	movs	r0, #10
 80062f6:	f7fc fabb 	bl	8002870 <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 80062fa:	463a      	mov	r2, r7
 80062fc:	4b1b      	ldr	r3, [pc, #108]	; (800636c <showPage5+0xc8>)
 80062fe:	215a      	movs	r1, #90	; 0x5a
 8006300:	200a      	movs	r0, #10
 8006302:	f7fc fab5 	bl	8002870 <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 8006306:	463a      	mov	r2, r7
 8006308:	4b19      	ldr	r3, [pc, #100]	; (8006370 <showPage5+0xcc>)
 800630a:	2178      	movs	r1, #120	; 0x78
 800630c:	200a      	movs	r0, #10
 800630e:	f7fc faaf 	bl	8002870 <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 8006312:	463a      	mov	r2, r7
 8006314:	4b17      	ldr	r3, [pc, #92]	; (8006374 <showPage5+0xd0>)
 8006316:	2196      	movs	r1, #150	; 0x96
 8006318:	200a      	movs	r0, #10
 800631a:	f7fc faa9 	bl	8002870 <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 800631e:	2301      	movs	r3, #1
 8006320:	22c3      	movs	r2, #195	; 0xc3
 8006322:	21a2      	movs	r1, #162	; 0xa2
 8006324:	2001      	movs	r0, #1
 8006326:	f7fc fad1 	bl	80028cc <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 800632a:	2301      	movs	r3, #1
 800632c:	22c4      	movs	r2, #196	; 0xc4
 800632e:	21a1      	movs	r1, #161	; 0xa1
 8006330:	2002      	movs	r0, #2
 8006332:	f7fc facb 	bl	80028cc <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8006336:	2301      	movs	r3, #1
 8006338:	22c4      	movs	r2, #196	; 0xc4
 800633a:	21a1      	movs	r1, #161	; 0xa1
 800633c:	2003      	movs	r0, #3
 800633e:	f7fc fac5 	bl	80028cc <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8006342:	2301      	movs	r3, #1
 8006344:	22c3      	movs	r2, #195	; 0xc3
 8006346:	21a2      	movs	r1, #162	; 0xa2
 8006348:	2004      	movs	r0, #4
 800634a:	f7fc fabf 	bl	80028cc <lcdVLine>
}
 800634e:	bf00      	nop
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	080168d4 	.word	0x080168d4
 800635c:	0801f45c 	.word	0x0801f45c
 8006360:	0801ffa4 	.word	0x0801ffa4
 8006364:	0801ca74 	.word	0x0801ca74
 8006368:	0801cef0 	.word	0x0801cef0
 800636c:	0801df4c 	.word	0x0801df4c
 8006370:	0801e9d4 	.word	0x0801e9d4
 8006374:	0802156c 	.word	0x0802156c

08006378 <showPage6>:
void showPage6(void){
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 800637e:	2301      	movs	r3, #1
 8006380:	22ea      	movs	r2, #234	; 0xea
 8006382:	21c9      	movs	r1, #201	; 0xc9
 8006384:	2001      	movs	r0, #1
 8006386:	f7fc faa1 	bl	80028cc <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 800638a:	2301      	movs	r3, #1
 800638c:	22eb      	movs	r2, #235	; 0xeb
 800638e:	21c8      	movs	r1, #200	; 0xc8
 8006390:	2002      	movs	r0, #2
 8006392:	f7fc fa9b 	bl	80028cc <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8006396:	2301      	movs	r3, #1
 8006398:	22eb      	movs	r2, #235	; 0xeb
 800639a:	21c8      	movs	r1, #200	; 0xc8
 800639c:	2003      	movs	r0, #3
 800639e:	f7fc fa95 	bl	80028cc <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 80063a2:	2301      	movs	r3, #1
 80063a4:	22ea      	movs	r2, #234	; 0xea
 80063a6:	21c9      	movs	r1, #201	; 0xc9
 80063a8:	2004      	movs	r0, #4
 80063aa:	f7fc fa8f 	bl	80028cc <lcdVLine>
		lcdRect(0,399,25,80,1);
 80063ae:	2301      	movs	r3, #1
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	2350      	movs	r3, #80	; 0x50
 80063b4:	2219      	movs	r2, #25
 80063b6:	f240 118f 	movw	r1, #399	; 0x18f
 80063ba:	2000      	movs	r0, #0
 80063bc:	f7fd f818 	bl	80033f0 <lcdRect>
		lcdRect(0,399,120,180,1);
 80063c0:	2301      	movs	r3, #1
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	23b4      	movs	r3, #180	; 0xb4
 80063c6:	2278      	movs	r2, #120	; 0x78
 80063c8:	f240 118f 	movw	r1, #399	; 0x18f
 80063cc:	2000      	movs	r0, #0
 80063ce:	f7fd f80f 	bl	80033f0 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 80063d2:	2301      	movs	r3, #1
 80063d4:	9302      	str	r3, [sp, #8]
 80063d6:	2300      	movs	r3, #0
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	2303      	movs	r3, #3
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	2332      	movs	r3, #50	; 0x32
 80063e0:	220a      	movs	r2, #10
 80063e2:	2132      	movs	r1, #50	; 0x32
 80063e4:	200a      	movs	r0, #10
 80063e6:	f7fd f828 	bl	800343a <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 80063ea:	2301      	movs	r3, #1
 80063ec:	9302      	str	r3, [sp, #8]
 80063ee:	2301      	movs	r3, #1
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	2303      	movs	r3, #3
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	2332      	movs	r3, #50	; 0x32
 80063f8:	220a      	movs	r2, #10
 80063fa:	2164      	movs	r1, #100	; 0x64
 80063fc:	203c      	movs	r0, #60	; 0x3c
 80063fe:	f7fd f81c 	bl	800343a <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 8006402:	2301      	movs	r3, #1
 8006404:	9302      	str	r3, [sp, #8]
 8006406:	2302      	movs	r3, #2
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	2303      	movs	r3, #3
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	2332      	movs	r3, #50	; 0x32
 8006410:	220a      	movs	r2, #10
 8006412:	2196      	movs	r1, #150	; 0x96
 8006414:	206e      	movs	r0, #110	; 0x6e
 8006416:	f7fd f810 	bl	800343a <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 800641a:	2301      	movs	r3, #1
 800641c:	9302      	str	r3, [sp, #8]
 800641e:	2303      	movs	r3, #3
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	2303      	movs	r3, #3
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	2332      	movs	r3, #50	; 0x32
 8006428:	220a      	movs	r2, #10
 800642a:	21c8      	movs	r1, #200	; 0xc8
 800642c:	20a0      	movs	r0, #160	; 0xa0
 800642e:	f7fd f804 	bl	800343a <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 8006432:	2301      	movs	r3, #1
 8006434:	9302      	str	r3, [sp, #8]
 8006436:	2304      	movs	r3, #4
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	2303      	movs	r3, #3
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2332      	movs	r3, #50	; 0x32
 8006440:	220a      	movs	r2, #10
 8006442:	21fa      	movs	r1, #250	; 0xfa
 8006444:	20d2      	movs	r0, #210	; 0xd2
 8006446:	f7fc fff8 	bl	800343a <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 800644a:	2301      	movs	r3, #1
 800644c:	9302      	str	r3, [sp, #8]
 800644e:	2305      	movs	r3, #5
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	2303      	movs	r3, #3
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	2332      	movs	r3, #50	; 0x32
 8006458:	220a      	movs	r2, #10
 800645a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800645e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8006462:	f7fc ffea 	bl	800343a <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 8006466:	2301      	movs	r3, #1
 8006468:	9302      	str	r3, [sp, #8]
 800646a:	2306      	movs	r3, #6
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	2303      	movs	r3, #3
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	2332      	movs	r3, #50	; 0x32
 8006474:	220a      	movs	r2, #10
 8006476:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800647a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800647e:	f7fc ffdc 	bl	800343a <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 8006482:	2301      	movs	r3, #1
 8006484:	9302      	str	r3, [sp, #8]
 8006486:	2307      	movs	r3, #7
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	2303      	movs	r3, #3
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	2364      	movs	r3, #100	; 0x64
 8006490:	223c      	movs	r2, #60	; 0x3c
 8006492:	2132      	movs	r1, #50	; 0x32
 8006494:	200a      	movs	r0, #10
 8006496:	f7fc ffd0 	bl	800343a <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 800649a:	2301      	movs	r3, #1
 800649c:	9302      	str	r3, [sp, #8]
 800649e:	2308      	movs	r3, #8
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	2303      	movs	r3, #3
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	2364      	movs	r3, #100	; 0x64
 80064a8:	223c      	movs	r2, #60	; 0x3c
 80064aa:	2164      	movs	r1, #100	; 0x64
 80064ac:	203c      	movs	r0, #60	; 0x3c
 80064ae:	f7fc ffc4 	bl	800343a <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 80064b2:	2301      	movs	r3, #1
 80064b4:	9302      	str	r3, [sp, #8]
 80064b6:	2309      	movs	r3, #9
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	2303      	movs	r3, #3
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	2364      	movs	r3, #100	; 0x64
 80064c0:	223c      	movs	r2, #60	; 0x3c
 80064c2:	2196      	movs	r1, #150	; 0x96
 80064c4:	206e      	movs	r0, #110	; 0x6e
 80064c6:	f7fc ffb8 	bl	800343a <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 80064ca:	2301      	movs	r3, #1
 80064cc:	9302      	str	r3, [sp, #8]
 80064ce:	230a      	movs	r3, #10
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	2303      	movs	r3, #3
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	2364      	movs	r3, #100	; 0x64
 80064d8:	223c      	movs	r2, #60	; 0x3c
 80064da:	21c8      	movs	r1, #200	; 0xc8
 80064dc:	20a0      	movs	r0, #160	; 0xa0
 80064de:	f7fc ffac 	bl	800343a <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 80064e2:	2301      	movs	r3, #1
 80064e4:	9302      	str	r3, [sp, #8]
 80064e6:	230b      	movs	r3, #11
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	2303      	movs	r3, #3
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	2364      	movs	r3, #100	; 0x64
 80064f0:	223c      	movs	r2, #60	; 0x3c
 80064f2:	21fa      	movs	r1, #250	; 0xfa
 80064f4:	20d2      	movs	r0, #210	; 0xd2
 80064f6:	f7fc ffa0 	bl	800343a <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 80064fa:	2301      	movs	r3, #1
 80064fc:	9302      	str	r3, [sp, #8]
 80064fe:	230c      	movs	r3, #12
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	2303      	movs	r3, #3
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	2364      	movs	r3, #100	; 0x64
 8006508:	223c      	movs	r2, #60	; 0x3c
 800650a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800650e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8006512:	f7fc ff92 	bl	800343a <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 8006516:	2301      	movs	r3, #1
 8006518:	9302      	str	r3, [sp, #8]
 800651a:	230d      	movs	r3, #13
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	2303      	movs	r3, #3
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	2364      	movs	r3, #100	; 0x64
 8006524:	223c      	movs	r2, #60	; 0x3c
 8006526:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800652a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800652e:	f7fc ff84 	bl	800343a <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 8006532:	2301      	movs	r3, #1
 8006534:	9302      	str	r3, [sp, #8]
 8006536:	230e      	movs	r3, #14
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	2303      	movs	r3, #3
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	2396      	movs	r3, #150	; 0x96
 8006540:	226e      	movs	r2, #110	; 0x6e
 8006542:	2132      	movs	r1, #50	; 0x32
 8006544:	200a      	movs	r0, #10
 8006546:	f7fc ff78 	bl	800343a <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 800654a:	2301      	movs	r3, #1
 800654c:	9302      	str	r3, [sp, #8]
 800654e:	230f      	movs	r3, #15
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	2303      	movs	r3, #3
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	2396      	movs	r3, #150	; 0x96
 8006558:	226e      	movs	r2, #110	; 0x6e
 800655a:	2164      	movs	r1, #100	; 0x64
 800655c:	203c      	movs	r0, #60	; 0x3c
 800655e:	f7fc ff6c 	bl	800343a <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 8006562:	2301      	movs	r3, #1
 8006564:	9302      	str	r3, [sp, #8]
 8006566:	2310      	movs	r3, #16
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	2303      	movs	r3, #3
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2396      	movs	r3, #150	; 0x96
 8006570:	226e      	movs	r2, #110	; 0x6e
 8006572:	2196      	movs	r1, #150	; 0x96
 8006574:	206e      	movs	r0, #110	; 0x6e
 8006576:	f7fc ff60 	bl	800343a <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 800657a:	2301      	movs	r3, #1
 800657c:	9302      	str	r3, [sp, #8]
 800657e:	2311      	movs	r3, #17
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	2303      	movs	r3, #3
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	2396      	movs	r3, #150	; 0x96
 8006588:	226e      	movs	r2, #110	; 0x6e
 800658a:	21c8      	movs	r1, #200	; 0xc8
 800658c:	20a0      	movs	r0, #160	; 0xa0
 800658e:	f7fc ff54 	bl	800343a <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 8006592:	2301      	movs	r3, #1
 8006594:	9302      	str	r3, [sp, #8]
 8006596:	2312      	movs	r3, #18
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	2303      	movs	r3, #3
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	2396      	movs	r3, #150	; 0x96
 80065a0:	226e      	movs	r2, #110	; 0x6e
 80065a2:	21fa      	movs	r1, #250	; 0xfa
 80065a4:	20d2      	movs	r0, #210	; 0xd2
 80065a6:	f7fc ff48 	bl	800343a <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 80065aa:	2301      	movs	r3, #1
 80065ac:	9302      	str	r3, [sp, #8]
 80065ae:	2313      	movs	r3, #19
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	2303      	movs	r3, #3
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	2396      	movs	r3, #150	; 0x96
 80065b8:	226e      	movs	r2, #110	; 0x6e
 80065ba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80065be:	f44f 7082 	mov.w	r0, #260	; 0x104
 80065c2:	f7fc ff3a 	bl	800343a <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 80065c6:	2301      	movs	r3, #1
 80065c8:	9302      	str	r3, [sp, #8]
 80065ca:	2314      	movs	r3, #20
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	2303      	movs	r3, #3
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	2396      	movs	r3, #150	; 0x96
 80065d4:	226e      	movs	r2, #110	; 0x6e
 80065d6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80065da:	f44f 709b 	mov.w	r0, #310	; 0x136
 80065de:	f7fc ff2c 	bl	800343a <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 80065e2:	2304      	movs	r3, #4
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	2301      	movs	r3, #1
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	23c8      	movs	r3, #200	; 0xc8
 80065ec:	22a0      	movs	r2, #160	; 0xa0
 80065ee:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80065f2:	200a      	movs	r0, #10
 80065f4:	f7fc ff21 	bl	800343a <lcdRect2>
}
 80065f8:	bf00      	nop
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <showPage>:

void showPage(uint8_t pageNum){
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	2b05      	cmp	r3, #5
 800660e:	d821      	bhi.n	8006654 <showPage+0x54>
 8006610:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <showPage+0x18>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	08006631 	.word	0x08006631
 800661c:	08006637 	.word	0x08006637
 8006620:	0800663d 	.word	0x0800663d
 8006624:	08006643 	.word	0x08006643
 8006628:	08006649 	.word	0x08006649
 800662c:	0800664f 	.word	0x0800664f
	case 0:
		showPage1();
 8006630:	f7ff fd3a 	bl	80060a8 <showPage1>
		break;
 8006634:	e00e      	b.n	8006654 <showPage+0x54>
	case 1:
		showPage2();
 8006636:	f7ff fd87 	bl	8006148 <showPage2>
		break;
 800663a:	e00b      	b.n	8006654 <showPage+0x54>
	case 2:
		showPage3();
 800663c:	f7ff fdbe 	bl	80061bc <showPage3>
		break;
 8006640:	e008      	b.n	8006654 <showPage+0x54>
	case 3:
		showPage4();
 8006642:	f7ff fdf5 	bl	8006230 <showPage4>
		break;
 8006646:	e005      	b.n	8006654 <showPage+0x54>
	case 4:
		showPage5();
 8006648:	f7ff fe2c 	bl	80062a4 <showPage5>
		break;
 800664c:	e002      	b.n	8006654 <showPage+0x54>
	case 5:
		showPage6();
 800664e:	f7ff fe93 	bl	8006378 <showPage6>
		break;
 8006652:	bf00      	nop
	}
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <setDefaultClbcks>:

static void setDefaultClbcks(void){
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8006660:	4b08      	ldr	r3, [pc, #32]	; (8006684 <setDefaultClbcks+0x28>)
 8006662:	4a09      	ldr	r2, [pc, #36]	; (8006688 <setDefaultClbcks+0x2c>)
 8006664:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006666:	4b09      	ldr	r3, [pc, #36]	; (800668c <setDefaultClbcks+0x30>)
 8006668:	4a09      	ldr	r2, [pc, #36]	; (8006690 <setDefaultClbcks+0x34>)
 800666a:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <setDefaultClbcks+0x38>)
 800666e:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <setDefaultClbcks+0x3c>)
 8006670:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <setDefaultClbcks+0x40>)
 8006674:	4a0a      	ldr	r2, [pc, #40]	; (80066a0 <setDefaultClbcks+0x44>)
 8006676:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 8006678:	bf00      	nop
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20000570 	.word	0x20000570
 8006688:	080023d5 	.word	0x080023d5
 800668c:	200005b8 	.word	0x200005b8
 8006690:	080023e5 	.word	0x080023e5
 8006694:	20000624 	.word	0x20000624
 8006698:	08006035 	.word	0x08006035
 800669c:	200005dc 	.word	0x200005dc
 80066a0:	0800606d 	.word	0x0800606d

080066a4 <settingsSetup>:


void settingsSetup(void){
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80066a8:	f7ff ffd8 	bl	800665c <setDefaultClbcks>
}
 80066ac:	bf00      	nop
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <settingsMain>:

void settingsMain(void){
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 80066b6:	2300      	movs	r3, #0
 80066b8:	603b      	str	r3, [r7, #0]
 80066ba:	1d3b      	adds	r3, r7, #4
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	605a      	str	r2, [r3, #4]
 80066c2:	609a      	str	r2, [r3, #8]
 80066c4:	60da      	str	r2, [r3, #12]
 80066c6:	611a      	str	r2, [r3, #16]
 80066c8:	615a      	str	r2, [r3, #20]
 80066ca:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 80066cc:	4b04      	ldr	r3, [pc, #16]	; (80066e0 <settingsMain+0x30>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff ff95 	bl	8006600 <showPage>

}
 80066d6:	bf00      	nop
 80066d8:	3720      	adds	r7, #32
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20003bdc 	.word	0x20003bdc

080066e4 <startStopwatch>:

#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

void startStopwatch(){
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
	stwStart();
 80066e8:	f7fd fa44 	bl	8003b74 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 80066ec:	4b03      	ldr	r3, [pc, #12]	; (80066fc <startStopwatch+0x18>)
 80066ee:	4a04      	ldr	r2, [pc, #16]	; (8006700 <startStopwatch+0x1c>)
 80066f0:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 80066f2:	4b04      	ldr	r3, [pc, #16]	; (8006704 <startStopwatch+0x20>)
 80066f4:	4a04      	ldr	r2, [pc, #16]	; (8006708 <startStopwatch+0x24>)
 80066f6:	611a      	str	r2, [r3, #16]
}
 80066f8:	bf00      	nop
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20000594 	.word	0x20000594
 8006700:	0800670d 	.word	0x0800670d
 8006704:	20000600 	.word	0x20000600
 8006708:	0800674d 	.word	0x0800674d

0800670c <stopStopwatch>:
void stopStopwatch(){
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
	stwStop();
 8006710:	f7fd fa54 	bl	8003bbc <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8006714:	4b03      	ldr	r3, [pc, #12]	; (8006724 <stopStopwatch+0x18>)
 8006716:	4a04      	ldr	r2, [pc, #16]	; (8006728 <stopStopwatch+0x1c>)
 8006718:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 800671a:	4b04      	ldr	r3, [pc, #16]	; (800672c <stopStopwatch+0x20>)
 800671c:	4a04      	ldr	r2, [pc, #16]	; (8006730 <stopStopwatch+0x24>)
 800671e:	611a      	str	r2, [r3, #16]
}
 8006720:	bf00      	nop
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20000594 	.word	0x20000594
 8006728:	080066e5 	.word	0x080066e5
 800672c:	20000600 	.word	0x20000600
 8006730:	08006735 	.word	0x08006735

08006734 <resetStopwatch>:
void resetStopwatch(){
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
	stwClear();
 8006738:	f7fd fa4e 	bl	8003bd8 <stwClear>
	stwT.clear();
 800673c:	4b02      	ldr	r3, [pc, #8]	; (8006748 <resetStopwatch+0x14>)
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	4798      	blx	r3
}
 8006742:	bf00      	nop
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	2000014c 	.word	0x2000014c

0800674c <saveStopwatch>:
void saveStopwatch(){
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
	stwSave();
 8006750:	f7fd fa50 	bl	8003bf4 <stwSave>
}
 8006754:	bf00      	nop
 8006756:	bd80      	pop	{r7, pc}

08006758 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
//	btn_B3.onSingleLongPressHandler = &returnToMenu;
	btn_B3.onSinglePressHandler = &resetPos;
 800675c:	4b10      	ldr	r3, [pc, #64]	; (80067a0 <setDefaultClbcks+0x48>)
 800675e:	4a11      	ldr	r2, [pc, #68]	; (80067a4 <setDefaultClbcks+0x4c>)
 8006760:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8006762:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <setDefaultClbcks+0x50>)
 8006764:	4a11      	ldr	r2, [pc, #68]	; (80067ac <setDefaultClbcks+0x54>)
 8006766:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006768:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <setDefaultClbcks+0x58>)
 800676a:	4a12      	ldr	r2, [pc, #72]	; (80067b4 <setDefaultClbcks+0x5c>)
 800676c:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 800676e:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <setDefaultClbcks+0x60>)
 8006770:	78db      	ldrb	r3, [r3, #3]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d006      	beq.n	800678a <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 800677c:	4b0f      	ldr	r3, [pc, #60]	; (80067bc <setDefaultClbcks+0x64>)
 800677e:	4a10      	ldr	r2, [pc, #64]	; (80067c0 <setDefaultClbcks+0x68>)
 8006780:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8006782:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <setDefaultClbcks+0x6c>)
 8006784:	4a10      	ldr	r2, [pc, #64]	; (80067c8 <setDefaultClbcks+0x70>)
 8006786:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8006788:	e005      	b.n	8006796 <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 800678a:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <setDefaultClbcks+0x64>)
 800678c:	4a0f      	ldr	r2, [pc, #60]	; (80067cc <setDefaultClbcks+0x74>)
 800678e:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8006790:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <setDefaultClbcks+0x6c>)
 8006792:	4a0f      	ldr	r2, [pc, #60]	; (80067d0 <setDefaultClbcks+0x78>)
 8006794:	611a      	str	r2, [r3, #16]
}
 8006796:	bf00      	nop
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	20000624 	.word	0x20000624
 80067a4:	080023f5 	.word	0x080023f5
 80067a8:	20000570 	.word	0x20000570
 80067ac:	080023d5 	.word	0x080023d5
 80067b0:	200005b8 	.word	0x200005b8
 80067b4:	080023e5 	.word	0x080023e5
 80067b8:	2000383c 	.word	0x2000383c
 80067bc:	20000594 	.word	0x20000594
 80067c0:	0800670d 	.word	0x0800670d
 80067c4:	20000600 	.word	0x20000600
 80067c8:	0800674d 	.word	0x0800674d
 80067cc:	080066e5 	.word	0x080066e5
 80067d0:	08006735 	.word	0x08006735

080067d4 <convertTicks>:

struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	099b      	lsrs	r3, r3, #6
 80067e0:	4a22      	ldr	r2, [pc, #136]	; (800686c <convertTicks+0x98>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	0993      	lsrs	r3, r2, #6
 80067f0:	491e      	ldr	r1, [pc, #120]	; (800686c <convertTicks+0x98>)
 80067f2:	fba1 1303 	umull	r1, r3, r1, r3
 80067f6:	089b      	lsrs	r3, r3, #2
 80067f8:	491d      	ldr	r1, [pc, #116]	; (8006870 <convertTicks+0x9c>)
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <convertTicks+0xa0>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 8006808:	b2db      	uxtb	r3, r3
 800680a:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	4b19      	ldr	r3, [pc, #100]	; (8006874 <convertTicks+0xa0>)
 8006810:	fba3 1302 	umull	r1, r3, r3, r2
 8006814:	09db      	lsrs	r3, r3, #7
 8006816:	f241 7170 	movw	r1, #6000	; 0x1770
 800681a:	fb01 f303 	mul.w	r3, r1, r3
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	4a15      	ldr	r2, [pc, #84]	; (8006878 <convertTicks+0xa4>)
 8006822:	fba2 2303 	umull	r2, r3, r2, r3
 8006826:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 8006828:	b2db      	uxtb	r3, r3
 800682a:	72bb      	strb	r3, [r7, #10]
		ticks%100
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	4b12      	ldr	r3, [pc, #72]	; (8006878 <convertTicks+0xa4>)
 8006830:	fba3 1302 	umull	r1, r3, r3, r2
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	2164      	movs	r1, #100	; 0x64
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 800683e:	b2db      	uxtb	r3, r3
 8006840:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	2300      	movs	r3, #0
 8006848:	7b3a      	ldrb	r2, [r7, #12]
 800684a:	f362 0307 	bfi	r3, r2, #0, #8
 800684e:	7b7a      	ldrb	r2, [r7, #13]
 8006850:	f362 230f 	bfi	r3, r2, #8, #8
 8006854:	7bba      	ldrb	r2, [r7, #14]
 8006856:	f362 4317 	bfi	r3, r2, #16, #8
 800685a:	7bfa      	ldrb	r2, [r7, #15]
 800685c:	f362 631f 	bfi	r3, r2, #24, #8
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	002e9a77 	.word	0x002e9a77
 8006870:	00057e40 	.word	0x00057e40
 8006874:	057619f1 	.word	0x057619f1
 8006878:	51eb851f 	.word	0x51eb851f

0800687c <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af02      	add	r7, sp, #8
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 8006886:	793b      	ldrb	r3, [r7, #4]
 8006888:	4619      	mov	r1, r3
 800688a:	797b      	ldrb	r3, [r7, #5]
 800688c:	4618      	mov	r0, r3
 800688e:	79bb      	ldrb	r3, [r7, #6]
 8006890:	79fa      	ldrb	r2, [r7, #7]
 8006892:	9201      	str	r2, [sp, #4]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	4603      	mov	r3, r0
 8006898:	460a      	mov	r2, r1
 800689a:	4904      	ldr	r1, [pc, #16]	; (80068ac <stwString+0x30>)
 800689c:	6838      	ldr	r0, [r7, #0]
 800689e:	f008 f83f 	bl	800e920 <siprintf>
	return str;
 80068a2:	683b      	ldr	r3, [r7, #0]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	0801699c 	.word	0x0801699c

080068b0 <updateStopwatch>:
void updateStopwatch(void){
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
	stw_val.hours = stwS.cnt/(100*60*60);
 80068b4:	4b2a      	ldr	r3, [pc, #168]	; (8006960 <updateStopwatch+0xb0>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80068bc:	4a29      	ldr	r2, [pc, #164]	; (8006964 <updateStopwatch+0xb4>)
 80068be:	fb82 1203 	smull	r1, r2, r2, r3
 80068c2:	1452      	asrs	r2, r2, #17
 80068c4:	17db      	asrs	r3, r3, #31
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	4b27      	ldr	r3, [pc, #156]	; (8006968 <updateStopwatch+0xb8>)
 80068cc:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
 80068ce:	4b24      	ldr	r3, [pc, #144]	; (8006960 <updateStopwatch+0xb0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80068d6:	461a      	mov	r2, r3
 80068d8:	4b22      	ldr	r3, [pc, #136]	; (8006964 <updateStopwatch+0xb4>)
 80068da:	fb83 1302 	smull	r1, r3, r3, r2
 80068de:	1459      	asrs	r1, r3, #17
 80068e0:	17d3      	asrs	r3, r2, #31
 80068e2:	1acb      	subs	r3, r1, r3
 80068e4:	4921      	ldr	r1, [pc, #132]	; (800696c <updateStopwatch+0xbc>)
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	4a20      	ldr	r2, [pc, #128]	; (8006970 <updateStopwatch+0xc0>)
 80068ee:	fb82 1203 	smull	r1, r2, r2, r3
 80068f2:	11d2      	asrs	r2, r2, #7
 80068f4:	17db      	asrs	r3, r3, #31
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <updateStopwatch+0xb8>)
 80068fc:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%(60*100)/(100);
 80068fe:	4b18      	ldr	r3, [pc, #96]	; (8006960 <updateStopwatch+0xb0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006906:	461a      	mov	r2, r3
 8006908:	4b19      	ldr	r3, [pc, #100]	; (8006970 <updateStopwatch+0xc0>)
 800690a:	fb83 1302 	smull	r1, r3, r3, r2
 800690e:	11d9      	asrs	r1, r3, #7
 8006910:	17d3      	asrs	r3, r2, #31
 8006912:	1acb      	subs	r3, r1, r3
 8006914:	f241 7170 	movw	r1, #6000	; 0x1770
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	4a15      	ldr	r2, [pc, #84]	; (8006974 <updateStopwatch+0xc4>)
 8006920:	fb82 1203 	smull	r1, r2, r2, r3
 8006924:	1152      	asrs	r2, r2, #5
 8006926:	17db      	asrs	r3, r3, #31
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	b2da      	uxtb	r2, r3
 800692c:	4b0e      	ldr	r3, [pc, #56]	; (8006968 <updateStopwatch+0xb8>)
 800692e:	709a      	strb	r2, [r3, #2]
	stw_val.csec = stwS.cnt%100;
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <updateStopwatch+0xb0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006938:	461a      	mov	r2, r3
 800693a:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <updateStopwatch+0xc4>)
 800693c:	fb83 1302 	smull	r1, r3, r3, r2
 8006940:	1159      	asrs	r1, r3, #5
 8006942:	17d3      	asrs	r3, r2, #31
 8006944:	1acb      	subs	r3, r1, r3
 8006946:	2164      	movs	r1, #100	; 0x64
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	b2da      	uxtb	r2, r3
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <updateStopwatch+0xb8>)
 8006952:	70da      	strb	r2, [r3, #3]
}
 8006954:	bf00      	nop
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	2000383c 	.word	0x2000383c
 8006964:	5d34edef 	.word	0x5d34edef
 8006968:	20003be0 	.word	0x20003be0
 800696c:	00057e40 	.word	0x00057e40
 8006970:	057619f1 	.word	0x057619f1
 8006974:	51eb851f 	.word	0x51eb851f

08006978 <stwSetup>:

void stwSetup(void){
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800697c:	f7ff feec 	bl	8006758 <setDefaultClbcks>
}
 8006980:	bf00      	nop
 8006982:	bd80      	pop	{r7, pc}

08006984 <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b091      	sub	sp, #68	; 0x44
 8006988:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 800698a:	2300      	movs	r3, #0
 800698c:	623b      	str	r3, [r7, #32]
 800698e:	2300      	movs	r3, #0
 8006990:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8006992:	4b7c      	ldr	r3, [pc, #496]	; (8006b84 <stwMain+0x200>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	4b7a      	ldr	r3, [pc, #488]	; (8006b84 <stwMain+0x200>)
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	f107 0020 	add.w	r0, r7, #32
 80069a0:	4979      	ldr	r1, [pc, #484]	; (8006b88 <stwMain+0x204>)
 80069a2:	f007 ffbd 	bl	800e920 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 80069a6:	2314      	movs	r3, #20
 80069a8:	b29c      	uxth	r4, r3
 80069aa:	f107 0320 	add.w	r3, r7, #32
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7f9 fc1e 	bl	80001f0 <strlen>
 80069b4:	4603      	mov	r3, r0
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	fb14 f303 	smulbb	r3, r4, r3
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 80069c2:	b298      	uxth	r0, r3
 80069c4:	f107 0220 	add.w	r2, r7, #32
 80069c8:	4b70      	ldr	r3, [pc, #448]	; (8006b8c <stwMain+0x208>)
 80069ca:	210a      	movs	r1, #10
 80069cc:	f7fb ff50 	bl	8002870 <lcdPutStr>

	updateStopwatch();
 80069d0:	f7ff ff6e 	bl	80068b0 <updateStopwatch>
	char tempStr2[30] = {0};
 80069d4:	2300      	movs	r3, #0
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	1d3b      	adds	r3, r7, #4
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	605a      	str	r2, [r3, #4]
 80069e0:	609a      	str	r2, [r3, #8]
 80069e2:	60da      	str	r2, [r3, #12]
 80069e4:	611a      	str	r2, [r3, #16]
 80069e6:	615a      	str	r2, [r3, #20]
 80069e8:	831a      	strh	r2, [r3, #24]
	if(stw_val.hours != 0){
 80069ea:	4b69      	ldr	r3, [pc, #420]	; (8006b90 <stwMain+0x20c>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <stwMain+0x7e>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 80069f2:	4b67      	ldr	r3, [pc, #412]	; (8006b90 <stwMain+0x20c>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	463b      	mov	r3, r7
 80069fa:	4966      	ldr	r1, [pc, #408]	; (8006b94 <stwMain+0x210>)
 80069fc:	4618      	mov	r0, r3
 80069fe:	f007 ff8f 	bl	800e920 <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 8006a02:	463a      	mov	r2, r7
 8006a04:	4b61      	ldr	r3, [pc, #388]	; (8006b8c <stwMain+0x208>)
 8006a06:	215f      	movs	r1, #95	; 0x5f
 8006a08:	2014      	movs	r0, #20
 8006a0a:	f7fb ff31 	bl	8002870 <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8006a0e:	4b60      	ldr	r3, [pc, #384]	; (8006b90 <stwMain+0x20c>)
 8006a10:	785b      	ldrb	r3, [r3, #1]
 8006a12:	461a      	mov	r2, r3
 8006a14:	4b5e      	ldr	r3, [pc, #376]	; (8006b90 <stwMain+0x20c>)
 8006a16:	789b      	ldrb	r3, [r3, #2]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4b5d      	ldr	r3, [pc, #372]	; (8006b90 <stwMain+0x20c>)
 8006a1c:	78db      	ldrb	r3, [r3, #3]
 8006a1e:	4638      	mov	r0, r7
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	460b      	mov	r3, r1
 8006a24:	495c      	ldr	r1, [pc, #368]	; (8006b98 <stwMain+0x214>)
 8006a26:	f007 ff7b 	bl	800e920 <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 8006a2a:	2322      	movs	r3, #34	; 0x22
 8006a2c:	b29c      	uxth	r4, r3
 8006a2e:	463b      	mov	r3, r7
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7f9 fbdd 	bl	80001f0 <strlen>
 8006a36:	4603      	mov	r3, r0
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	fb14 f303 	smulbb	r3, r4, r3
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8006a44:	b298      	uxth	r0, r3
 8006a46:	463a      	mov	r2, r7
 8006a48:	4b54      	ldr	r3, [pc, #336]	; (8006b9c <stwMain+0x218>)
 8006a4a:	214c      	movs	r1, #76	; 0x4c
 8006a4c:	f7fb ff10 	bl	8002870 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8006a50:	2300      	movs	r3, #0
 8006a52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006a56:	e08b      	b.n	8006b70 <stwMain+0x1ec>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 8006a58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a5c:	4a50      	ldr	r2, [pc, #320]	; (8006ba0 <stwMain+0x21c>)
 8006a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d07f      	beq.n	8006b66 <stwMain+0x1e2>
			sprintf(&tempStr2, "Lap %d:", i+1);
 8006a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	494d      	ldr	r1, [pc, #308]	; (8006ba4 <stwMain+0x220>)
 8006a70:	4618      	mov	r0, r3
 8006a72:	f007 ff55 	bl	800e920 <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, font_12_zekton);
 8006a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	3b7e      	subs	r3, #126	; 0x7e
 8006a80:	b2d9      	uxtb	r1, r3
 8006a82:	463a      	mov	r2, r7
 8006a84:	4b48      	ldr	r3, [pc, #288]	; (8006ba8 <stwMain+0x224>)
 8006a86:	2000      	movs	r0, #0
 8006a88:	f7fb fef2 	bl	8002870 <lcdPutStr>
			if(i>0){
 8006a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d022      	beq.n	8006ada <stwMain+0x156>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), font_12_zekton);
 8006a94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	3b7e      	subs	r3, #126	; 0x7e
 8006a9e:	b2dc      	uxtb	r4, r3
 8006aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aa4:	4a3e      	ldr	r2, [pc, #248]	; (8006ba0 <stwMain+0x21c>)
 8006aa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006aaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	493b      	ldr	r1, [pc, #236]	; (8006ba0 <stwMain+0x21c>)
 8006ab2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff fe8b 	bl	80067d4 <convertTicks>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac8:	f7ff fed8 	bl	800687c <stwString>
 8006acc:	4602      	mov	r2, r0
 8006ace:	4b36      	ldr	r3, [pc, #216]	; (8006ba8 <stwMain+0x224>)
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	2037      	movs	r0, #55	; 0x37
 8006ad4:	f7fb fecc 	bl	8002870 <lcdPutStr>
 8006ad8:	e01a      	b.n	8006b10 <stwMain+0x18c>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8006ada:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	3b7e      	subs	r3, #126	; 0x7e
 8006ae4:	b2dc      	uxtb	r4, r3
 8006ae6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aea:	4a2d      	ldr	r2, [pc, #180]	; (8006ba0 <stwMain+0x21c>)
 8006aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff fe6f 	bl	80067d4 <convertTicks>
 8006af6:	4603      	mov	r3, r0
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afa:	463b      	mov	r3, r7
 8006afc:	4619      	mov	r1, r3
 8006afe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b00:	f7ff febc 	bl	800687c <stwString>
 8006b04:	4602      	mov	r2, r0
 8006b06:	4b28      	ldr	r3, [pc, #160]	; (8006ba8 <stwMain+0x224>)
 8006b08:	4621      	mov	r1, r4
 8006b0a:	2037      	movs	r0, #55	; 0x37
 8006b0c:	f7fb feb0 	bl	8002870 <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 8006b10:	463b      	mov	r3, r7
 8006b12:	4926      	ldr	r1, [pc, #152]	; (8006bac <stwMain+0x228>)
 8006b14:	4618      	mov	r0, r3
 8006b16:	f007 ff03 	bl	800e920 <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, font_12_zekton);
 8006b1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	3b7e      	subs	r3, #126	; 0x7e
 8006b24:	b2d9      	uxtb	r1, r3
 8006b26:	463a      	mov	r2, r7
 8006b28:	4b1f      	ldr	r3, [pc, #124]	; (8006ba8 <stwMain+0x224>)
 8006b2a:	20a5      	movs	r0, #165	; 0xa5
 8006b2c:	f7fb fea0 	bl	8002870 <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8006b30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	3b7e      	subs	r3, #126	; 0x7e
 8006b3a:	b2dc      	uxtb	r4, r3
 8006b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b40:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <stwMain+0x21c>)
 8006b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fe44 	bl	80067d4 <convertTicks>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b50:	463b      	mov	r3, r7
 8006b52:	4619      	mov	r1, r3
 8006b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b56:	f7ff fe91 	bl	800687c <stwString>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	4b12      	ldr	r3, [pc, #72]	; (8006ba8 <stwMain+0x224>)
 8006b5e:	4621      	mov	r1, r4
 8006b60:	20e1      	movs	r0, #225	; 0xe1
 8006b62:	f7fb fe85 	bl	8002870 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8006b66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006b70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b74:	2b06      	cmp	r3, #6
 8006b76:	f67f af6f 	bls.w	8006a58 <stwMain+0xd4>

//	sprintf(&tempStr2, "%d", stwS.cnt);
//	lcdPutStr(0, 130, tempStr2, zecton45font);
//	sprintf(&tempStr2, "%d", stwS.state);
//	lcdPutStr(0, 184, tempStr2, zecton45font);
}
 8006b7a:	bf00      	nop
 8006b7c:	bf00      	nop
 8006b7e:	373c      	adds	r7, #60	; 0x3c
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd90      	pop	{r4, r7, pc}
 8006b84:	20003588 	.word	0x20003588
 8006b88:	080169b0 	.word	0x080169b0
 8006b8c:	08023e5c 	.word	0x08023e5c
 8006b90:	20003be0 	.word	0x20003be0
 8006b94:	080169bc 	.word	0x080169bc
 8006b98:	080169c4 	.word	0x080169c4
 8006b9c:	08025cc4 	.word	0x08025cc4
 8006ba0:	2000014c 	.word	0x2000014c
 8006ba4:	080169d4 	.word	0x080169d4
 8006ba8:	080233d4 	.word	0x080233d4
 8006bac:	080169dc 	.word	0x080169dc

08006bb0 <setDefaultClbcks>:
//#include "fonts/zekton24.h"
//#include "fonts/zekton84.h"
//#include <fonts/zekton45.h>
#include "fonts/fonts.h"

static void setDefaultClbcks(void){
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 8006bb4:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <setDefaultClbcks+0x20>)
 8006bb6:	4a07      	ldr	r2, [pc, #28]	; (8006bd4 <setDefaultClbcks+0x24>)
 8006bb8:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8006bba:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <setDefaultClbcks+0x28>)
 8006bbc:	4a07      	ldr	r2, [pc, #28]	; (8006bdc <setDefaultClbcks+0x2c>)
 8006bbe:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <setDefaultClbcks+0x30>)
 8006bc2:	4a08      	ldr	r2, [pc, #32]	; (8006be4 <setDefaultClbcks+0x34>)
 8006bc4:	611a      	str	r2, [r3, #16]
}
 8006bc6:	bf00      	nop
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	20000600 	.word	0x20000600
 8006bd4:	0800491d 	.word	0x0800491d
 8006bd8:	20000570 	.word	0x20000570
 8006bdc:	080023d5 	.word	0x080023d5
 8006be0:	200005b8 	.word	0x200005b8
 8006be4:	080023e5 	.word	0x080023e5

08006be8 <setTimeAction>:

static void setTimeAction(void){
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 8006bec:	4802      	ldr	r0, [pc, #8]	; (8006bf8 <setTimeAction+0x10>)
 8006bee:	f7fb fc0d 	bl	800240c <guiApplyView>
}
 8006bf2:	bf00      	nop
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000290 	.word	0x20000290

08006bfc <setDateAction>:
static void setDateAction(void){
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 8006c00:	4802      	ldr	r0, [pc, #8]	; (8006c0c <setDateAction+0x10>)
 8006c02:	f7fb fc03 	bl	800240c <guiApplyView>
}
 8006c06:	bf00      	nop
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	2000025c 	.word	0x2000025c

08006c10 <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006c14:	f7ff ffcc 	bl	8006bb0 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 8006c18:	4802      	ldr	r0, [pc, #8]	; (8006c24 <faceSetup+0x14>)
 8006c1a:	f7fd fdf9 	bl	8004810 <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8006c1e:	bf00      	nop
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	08006bb1 	.word	0x08006bb1

08006c28 <faceMain>:

void faceMain(void){
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b0b1      	sub	sp, #196	; 0xc4
 8006c2c:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	605a      	str	r2, [r3, #4]
 8006c3e:	609a      	str	r2, [r3, #8]
 8006c40:	60da      	str	r2, [r3, #12]
 8006c42:	611a      	str	r2, [r3, #16]
 8006c44:	615a      	str	r2, [r3, #20]
 8006c46:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8006c48:	4b83      	ldr	r3, [pc, #524]	; (8006e58 <faceMain+0x230>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7f9 fc95 	bl	800057c <__aeabi_f2d>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8006c5a:	4980      	ldr	r1, [pc, #512]	; (8006e5c <faceMain+0x234>)
 8006c5c:	f007 fe60 	bl	800e920 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8006c60:	2314      	movs	r3, #20
 8006c62:	b29c      	uxth	r4, r3
 8006c64:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7f9 fac1 	bl	80001f0 <strlen>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	f1c3 030d 	rsb	r3, r3, #13
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	fb14 f303 	smulbb	r3, r4, r3
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3323      	adds	r3, #35	; 0x23
 8006c7e:	b298      	uxth	r0, r3
 8006c80:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8006c84:	4b76      	ldr	r3, [pc, #472]	; (8006e60 <faceMain+0x238>)
 8006c86:	210e      	movs	r1, #14
 8006c88:	f7fb fdf2 	bl	8002870 <lcdPutStr>
	char baroStr[30] = {0};
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c92:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	605a      	str	r2, [r3, #4]
 8006c9c:	609a      	str	r2, [r3, #8]
 8006c9e:	60da      	str	r2, [r3, #12]
 8006ca0:	611a      	str	r2, [r3, #16]
 8006ca2:	615a      	str	r2, [r3, #20]
 8006ca4:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 8006ca6:	4b6c      	ldr	r3, [pc, #432]	; (8006e58 <faceMain+0x230>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8006e64 <faceMain+0x23c>
 8006cb6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006cba:	ee16 0a90 	vmov	r0, s13
 8006cbe:	f7f9 fc5d 	bl	800057c <__aeabi_f2d>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8006cca:	4967      	ldr	r1, [pc, #412]	; (8006e68 <faceMain+0x240>)
 8006ccc:	f007 fe28 	bl	800e920 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 8006cd0:	2314      	movs	r3, #20
 8006cd2:	b29c      	uxth	r4, r3
 8006cd4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7f9 fa89 	bl	80001f0 <strlen>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f1c3 030d 	rsb	r3, r3, #13
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	fb14 f303 	smulbb	r3, r4, r3
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3323      	adds	r3, #35	; 0x23
 8006cee:	b298      	uxth	r0, r3
 8006cf0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006cf4:	4b5a      	ldr	r3, [pc, #360]	; (8006e60 <faceMain+0x238>)
 8006cf6:	212a      	movs	r1, #42	; 0x2a
 8006cf8:	f7fb fdba 	bl	8002870 <lcdPutStr>

	char fracStr[30] = {0};
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	663b      	str	r3, [r7, #96]	; 0x60
 8006d00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	605a      	str	r2, [r3, #4]
 8006d0a:	609a      	str	r2, [r3, #8]
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	611a      	str	r2, [r3, #16]
 8006d10:	615a      	str	r2, [r3, #20]
 8006d12:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 8006d14:	2300      	movs	r3, #0
 8006d16:	643b      	str	r3, [r7, #64]	; 0x40
 8006d18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	609a      	str	r2, [r3, #8]
 8006d24:	60da      	str	r2, [r3, #12]
 8006d26:	611a      	str	r2, [r3, #16]
 8006d28:	615a      	str	r2, [r3, #20]
 8006d2a:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	623b      	str	r3, [r7, #32]
 8006d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	605a      	str	r2, [r3, #4]
 8006d3a:	609a      	str	r2, [r3, #8]
 8006d3c:	60da      	str	r2, [r3, #12]
 8006d3e:	611a      	str	r2, [r3, #16]
 8006d40:	615a      	str	r2, [r3, #20]
 8006d42:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 8006d44:	4b49      	ldr	r3, [pc, #292]	; (8006e6c <faceMain+0x244>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d4e:	4948      	ldr	r1, [pc, #288]	; (8006e70 <faceMain+0x248>)
 8006d50:	4618      	mov	r0, r3
 8006d52:	f007 fde5 	bl	800e920 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 8006d56:	4b45      	ldr	r3, [pc, #276]	; (8006e6c <faceMain+0x244>)
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f107 0320 	add.w	r3, r7, #32
 8006d60:	4943      	ldr	r1, [pc, #268]	; (8006e70 <faceMain+0x248>)
 8006d62:	4618      	mov	r0, r3
 8006d64:	f007 fddc 	bl	800e920 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8006d68:	4b40      	ldr	r3, [pc, #256]	; (8006e6c <faceMain+0x244>)
 8006d6a:	789b      	ldrb	r3, [r3, #2]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006d72:	493f      	ldr	r1, [pc, #252]	; (8006e70 <faceMain+0x248>)
 8006d74:	4618      	mov	r0, r3
 8006d76:	f007 fdd3 	bl	800e920 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 8006d7a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006d7e:	4b3d      	ldr	r3, [pc, #244]	; (8006e74 <faceMain+0x24c>)
 8006d80:	214c      	movs	r1, #76	; 0x4c
 8006d82:	2014      	movs	r0, #20
 8006d84:	f7fb fd74 	bl	8002870 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 8006d88:	f107 0220 	add.w	r2, r7, #32
 8006d8c:	4b39      	ldr	r3, [pc, #228]	; (8006e74 <faceMain+0x24c>)
 8006d8e:	214c      	movs	r1, #76	; 0x4c
 8006d90:	20aa      	movs	r0, #170	; 0xaa
 8006d92:	f7fb fd6d 	bl	8002870 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 8006d96:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d9a:	4b37      	ldr	r3, [pc, #220]	; (8006e78 <faceMain+0x250>)
 8006d9c:	214c      	movs	r1, #76	; 0x4c
 8006d9e:	f240 103b 	movw	r0, #315	; 0x13b
 8006da2:	f7fb fd65 	bl	8002870 <lcdPutStr>

	char buffString[30] = {0};
 8006da6:	2300      	movs	r3, #0
 8006da8:	603b      	str	r3, [r7, #0]
 8006daa:	1d3b      	adds	r3, r7, #4
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	605a      	str	r2, [r3, #4]
 8006db2:	609a      	str	r2, [r3, #8]
 8006db4:	60da      	str	r2, [r3, #12]
 8006db6:	611a      	str	r2, [r3, #16]
 8006db8:	615a      	str	r2, [r3, #20]
 8006dba:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	492f      	ldr	r1, [pc, #188]	; (8006e7c <faceMain+0x254>)
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f007 fdad 	bl	800e920 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 8006dc6:	4b2e      	ldr	r3, [pc, #184]	; (8006e80 <faceMain+0x258>)
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	4b2d      	ldr	r3, [pc, #180]	; (8006e84 <faceMain+0x25c>)
 8006dce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dd2:	4b2b      	ldr	r3, [pc, #172]	; (8006e80 <faceMain+0x258>)
 8006dd4:	78db      	ldrb	r3, [r3, #3]
 8006dd6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006dda:	4638      	mov	r0, r7
 8006ddc:	492a      	ldr	r1, [pc, #168]	; (8006e88 <faceMain+0x260>)
 8006dde:	f007 fd9f 	bl	800e920 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8006de2:	2314      	movs	r3, #20
 8006de4:	b29c      	uxth	r4, r3
 8006de6:	463b      	mov	r3, r7
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7f9 fa01 	bl	80001f0 <strlen>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f1c3 030d 	rsb	r3, r3, #13
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	fb14 f303 	smulbb	r3, r4, r3
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3323      	adds	r3, #35	; 0x23
 8006dfe:	b298      	uxth	r0, r3
 8006e00:	463a      	mov	r2, r7
 8006e02:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <faceMain+0x238>)
 8006e04:	21ae      	movs	r1, #174	; 0xae
 8006e06:	f7fb fd33 	bl	8002870 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 8006e0a:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <faceMain+0x258>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4b1e      	ldr	r3, [pc, #120]	; (8006e8c <faceMain+0x264>)
 8006e12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e16:	4b1a      	ldr	r3, [pc, #104]	; (8006e80 <faceMain+0x258>)
 8006e18:	789b      	ldrb	r3, [r3, #2]
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	491a      	ldr	r1, [pc, #104]	; (8006e88 <faceMain+0x260>)
 8006e1e:	f007 fd7f 	bl	800e920 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8006e22:	2314      	movs	r3, #20
 8006e24:	b29c      	uxth	r4, r3
 8006e26:	463b      	mov	r3, r7
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7f9 f9e1 	bl	80001f0 <strlen>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	f1c3 030d 	rsb	r3, r3, #13
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	fb14 f303 	smulbb	r3, r4, r3
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3323      	adds	r3, #35	; 0x23
 8006e3e:	b298      	uxth	r0, r3
 8006e40:	463a      	mov	r2, r7
 8006e42:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <faceMain+0x238>)
 8006e44:	21ca      	movs	r1, #202	; 0xca
 8006e46:	f7fb fd13 	bl	8002870 <lcdPutStr>

	enableCntxMenu();
 8006e4a:	f7fd fd83 	bl	8004954 <enableCntxMenu>
}
 8006e4e:	bf00      	nop
 8006e50:	37c4      	adds	r7, #196	; 0xc4
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd90      	pop	{r4, r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000560 	.word	0x20000560
 8006e5c:	08016a9c 	.word	0x08016a9c
 8006e60:	0802b30c 	.word	0x0802b30c
 8006e64:	42c80000 	.word	0x42c80000
 8006e68:	08016aa4 	.word	0x08016aa4
 8006e6c:	20003588 	.word	0x20003588
 8006e70:	08016ab0 	.word	0x08016ab0
 8006e74:	080327bc 	.word	0x080327bc
 8006e78:	0802d174 	.word	0x0802d174
 8006e7c:	08016ab8 	.word	0x08016ab8
 8006e80:	2000359c 	.word	0x2000359c
 8006e84:	200001ac 	.word	0x200001ac
 8006e88:	08016ac8 	.word	0x08016ac8
 8006e8c:	2000018c 	.word	0x2000018c

08006e90 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <setDefaultClbcks+0x34>)
 8006e96:	4a0c      	ldr	r2, [pc, #48]	; (8006ec8 <setDefaultClbcks+0x38>)
 8006e98:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <setDefaultClbcks+0x3c>)
 8006e9c:	4a0c      	ldr	r2, [pc, #48]	; (8006ed0 <setDefaultClbcks+0x40>)
 8006e9e:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8006ea0:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <setDefaultClbcks+0x44>)
 8006ea2:	4a0d      	ldr	r2, [pc, #52]	; (8006ed8 <setDefaultClbcks+0x48>)
 8006ea4:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <setDefaultClbcks+0x4c>)
 8006ea8:	4a0d      	ldr	r2, [pc, #52]	; (8006ee0 <setDefaultClbcks+0x50>)
 8006eaa:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8006eac:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <setDefaultClbcks+0x54>)
 8006eae:	4a0e      	ldr	r2, [pc, #56]	; (8006ee8 <setDefaultClbcks+0x58>)
 8006eb0:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8006eb2:	4b0e      	ldr	r3, [pc, #56]	; (8006eec <setDefaultClbcks+0x5c>)
 8006eb4:	4a0e      	ldr	r2, [pc, #56]	; (8006ef0 <setDefaultClbcks+0x60>)
 8006eb6:	611a      	str	r2, [r3, #16]
}
 8006eb8:	bf00      	nop
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20000624 	.word	0x20000624
 8006ec8:	08007201 	.word	0x08007201
 8006ecc:	20000600 	.word	0x20000600
 8006ed0:	080070c1 	.word	0x080070c1
 8006ed4:	200005dc 	.word	0x200005dc
 8006ed8:	0800720d 	.word	0x0800720d
 8006edc:	20000570 	.word	0x20000570
 8006ee0:	08007179 	.word	0x08007179
 8006ee4:	20000594 	.word	0x20000594
 8006ee8:	08007091 	.word	0x08007091
 8006eec:	200005b8 	.word	0x200005b8
 8006ef0:	080070f1 	.word	0x080070f1

08006ef4 <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006ef8:	f7ff ffca 	bl	8006e90 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 8006efc:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <dateInputSetup+0x24>)
 8006efe:	789a      	ldrb	r2, [r3, #2]
 8006f00:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <dateInputSetup+0x28>)
 8006f02:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 8006f04:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <dateInputSetup+0x24>)
 8006f06:	785a      	ldrb	r2, [r3, #1]
 8006f08:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <dateInputSetup+0x28>)
 8006f0a:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 8006f0c:	4b02      	ldr	r3, [pc, #8]	; (8006f18 <dateInputSetup+0x24>)
 8006f0e:	78da      	ldrb	r2, [r3, #3]
 8006f10:	4b02      	ldr	r3, [pc, #8]	; (8006f1c <dateInputSetup+0x28>)
 8006f12:	709a      	strb	r2, [r3, #2]
}
 8006f14:	bf00      	nop
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	2000359c 	.word	0x2000359c
 8006f1c:	20003be8 	.word	0x20003be8

08006f20 <dateInputMain>:

void dateInputMain(void){
 8006f20:	b590      	push	{r4, r7, lr}
 8006f22:	b089      	sub	sp, #36	; 0x24
 8006f24:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 8006f26:	2300      	movs	r3, #0
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	1d3b      	adds	r3, r7, #4
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	609a      	str	r2, [r3, #8]
 8006f34:	60da      	str	r2, [r3, #12]
 8006f36:	611a      	str	r2, [r3, #16]
 8006f38:	615a      	str	r2, [r3, #20]
 8006f3a:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	494a      	ldr	r1, [pc, #296]	; (8007068 <dateInputMain+0x148>)
 8006f40:	4618      	mov	r0, r3
 8006f42:	f007 fced 	bl	800e920 <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 8006f46:	4b49      	ldr	r3, [pc, #292]	; (800706c <dateInputMain+0x14c>)
 8006f48:	785b      	ldrb	r3, [r3, #1]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4b48      	ldr	r3, [pc, #288]	; (8007070 <dateInputMain+0x150>)
 8006f4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f52:	4b46      	ldr	r3, [pc, #280]	; (800706c <dateInputMain+0x14c>)
 8006f54:	789b      	ldrb	r3, [r3, #2]
 8006f56:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	4945      	ldr	r1, [pc, #276]	; (8007074 <dateInputMain+0x154>)
 8006f5e:	f007 fcdf 	bl	800e920 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8006f62:	2314      	movs	r3, #20
 8006f64:	b29c      	uxth	r4, r3
 8006f66:	463b      	mov	r3, r7
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7f9 f941 	bl	80001f0 <strlen>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f1c3 030d 	rsb	r3, r3, #13
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	fb14 f303 	smulbb	r3, r4, r3
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	3323      	adds	r3, #35	; 0x23
 8006f7e:	b298      	uxth	r0, r3
 8006f80:	463a      	mov	r2, r7
 8006f82:	4b3d      	ldr	r3, [pc, #244]	; (8007078 <dateInputMain+0x158>)
 8006f84:	21ae      	movs	r1, #174	; 0xae
 8006f86:	f7fb fc73 	bl	8002870 <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 8006f8a:	4b38      	ldr	r3, [pc, #224]	; (800706c <dateInputMain+0x14c>)
 8006f8c:	7818      	ldrb	r0, [r3, #0]
 8006f8e:	4b37      	ldr	r3, [pc, #220]	; (800706c <dateInputMain+0x14c>)
 8006f90:	7859      	ldrb	r1, [r3, #1]
 8006f92:	4b36      	ldr	r3, [pc, #216]	; (800706c <dateInputMain+0x14c>)
 8006f94:	789b      	ldrb	r3, [r3, #2]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f000 fcb6 	bl	8007910 <zellerCongruence>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4b34      	ldr	r3, [pc, #208]	; (800707c <dateInputMain+0x15c>)
 8006faa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fae:	4b2f      	ldr	r3, [pc, #188]	; (800706c <dateInputMain+0x14c>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	492f      	ldr	r1, [pc, #188]	; (8007074 <dateInputMain+0x154>)
 8006fb6:	f007 fcb3 	bl	800e920 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8006fba:	2314      	movs	r3, #20
 8006fbc:	b29c      	uxth	r4, r3
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7f9 f915 	bl	80001f0 <strlen>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f1c3 030d 	rsb	r3, r3, #13
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	fb14 f303 	smulbb	r3, r4, r3
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3323      	adds	r3, #35	; 0x23
 8006fd6:	b298      	uxth	r0, r3
 8006fd8:	463a      	mov	r2, r7
 8006fda:	4b27      	ldr	r3, [pc, #156]	; (8007078 <dateInputMain+0x158>)
 8006fdc:	21ca      	movs	r1, #202	; 0xca
 8006fde:	f7fb fc47 	bl	8002870 <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 8006fe2:	4b27      	ldr	r3, [pc, #156]	; (8007080 <dateInputMain+0x160>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	4b26      	ldr	r3, [pc, #152]	; (8007084 <dateInputMain+0x164>)
 8006fea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	4b23      	ldr	r3, [pc, #140]	; (8007080 <dateInputMain+0x160>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4b23      	ldr	r3, [pc, #140]	; (8007084 <dateInputMain+0x164>)
 8006ff8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4b20      	ldr	r3, [pc, #128]	; (8007080 <dateInputMain+0x160>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	4619      	mov	r1, r3
 8007004:	4b20      	ldr	r3, [pc, #128]	; (8007088 <dateInputMain+0x168>)
 8007006:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800700a:	18d1      	adds	r1, r2, r3
 800700c:	4b1c      	ldr	r3, [pc, #112]	; (8007080 <dateInputMain+0x160>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	4b1e      	ldr	r3, [pc, #120]	; (800708c <dateInputMain+0x16c>)
 8007014:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007018:	461a      	mov	r2, r3
 800701a:	2301      	movs	r3, #1
 800701c:	f7fc f892 	bl	8003144 <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 8007020:	4b17      	ldr	r3, [pc, #92]	; (8007080 <dateInputMain+0x160>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	4b17      	ldr	r3, [pc, #92]	; (8007084 <dateInputMain+0x164>)
 8007028:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800702c:	4618      	mov	r0, r3
 800702e:	4b14      	ldr	r3, [pc, #80]	; (8007080 <dateInputMain+0x160>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	4b13      	ldr	r3, [pc, #76]	; (8007084 <dateInputMain+0x164>)
 8007036:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800703a:	461a      	mov	r2, r3
 800703c:	4b10      	ldr	r3, [pc, #64]	; (8007080 <dateInputMain+0x160>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4619      	mov	r1, r3
 8007042:	4b11      	ldr	r3, [pc, #68]	; (8007088 <dateInputMain+0x168>)
 8007044:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007048:	18d1      	adds	r1, r2, r3
 800704a:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <dateInputMain+0x160>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	4b0e      	ldr	r3, [pc, #56]	; (800708c <dateInputMain+0x16c>)
 8007052:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	2301      	movs	r3, #1
 800705a:	f7fc f873 	bl	8003144 <lcdHLine>
}
 800705e:	bf00      	nop
 8007060:	3724      	adds	r7, #36	; 0x24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd90      	pop	{r4, r7, pc}
 8007066:	bf00      	nop
 8007068:	08016b88 	.word	0x08016b88
 800706c:	20003be8 	.word	0x20003be8
 8007070:	20000210 	.word	0x20000210
 8007074:	08016b98 	.word	0x08016b98
 8007078:	08034744 	.word	0x08034744
 800707c:	200001f0 	.word	0x200001f0
 8007080:	20003be4 	.word	0x20003be4
 8007084:	20000244 	.word	0x20000244
 8007088:	20000254 	.word	0x20000254
 800708c:	2000024c 	.word	0x2000024c

08007090 <cursorNext>:

static void cursorNext(void){
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 8007094:	4b09      	ldr	r3, [pc, #36]	; (80070bc <cursorNext+0x2c>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d806      	bhi.n	80070aa <cursorNext+0x1a>
 800709c:	4b07      	ldr	r3, [pc, #28]	; (80070bc <cursorNext+0x2c>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	3301      	adds	r3, #1
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <cursorNext+0x2c>)
 80070a6:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 80070a8:	e002      	b.n	80070b0 <cursorNext+0x20>
	else curPosition = 0;
 80070aa:	4b04      	ldr	r3, [pc, #16]	; (80070bc <cursorNext+0x2c>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	701a      	strb	r2, [r3, #0]
}
 80070b0:	bf00      	nop
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20003be4 	.word	0x20003be4

080070c0 <cursorPrev>:
static void cursorPrev(void){
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 80070c4:	4b09      	ldr	r3, [pc, #36]	; (80070ec <cursorPrev+0x2c>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d006      	beq.n	80070da <cursorPrev+0x1a>
 80070cc:	4b07      	ldr	r3, [pc, #28]	; (80070ec <cursorPrev+0x2c>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <cursorPrev+0x2c>)
 80070d6:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 80070d8:	e002      	b.n	80070e0 <cursorPrev+0x20>
	else curPosition = 2;
 80070da:	4b04      	ldr	r3, [pc, #16]	; (80070ec <cursorPrev+0x2c>)
 80070dc:	2202      	movs	r2, #2
 80070de:	701a      	strb	r2, [r3, #0]
}
 80070e0:	bf00      	nop
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	20003be4 	.word	0x20003be4

080070f0 <increment>:
static void increment(void){
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
	switch(curPosition){
 80070f4:	4b1e      	ldr	r3, [pc, #120]	; (8007170 <increment+0x80>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d024      	beq.n	8007146 <increment+0x56>
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	dc31      	bgt.n	8007164 <increment+0x74>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <increment+0x1a>
 8007104:	2b01      	cmp	r3, #1
 8007106:	d00f      	beq.n	8007128 <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 8007108:	e02c      	b.n	8007164 <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 800710a:	4b1a      	ldr	r3, [pc, #104]	; (8007174 <increment+0x84>)
 800710c:	785b      	ldrb	r3, [r3, #1]
 800710e:	2b0b      	cmp	r3, #11
 8007110:	d806      	bhi.n	8007120 <increment+0x30>
 8007112:	4b18      	ldr	r3, [pc, #96]	; (8007174 <increment+0x84>)
 8007114:	785b      	ldrb	r3, [r3, #1]
 8007116:	3301      	adds	r3, #1
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4b16      	ldr	r3, [pc, #88]	; (8007174 <increment+0x84>)
 800711c:	705a      	strb	r2, [r3, #1]
			break;
 800711e:	e021      	b.n	8007164 <increment+0x74>
			else valDatePos[1] = 1;
 8007120:	4b14      	ldr	r3, [pc, #80]	; (8007174 <increment+0x84>)
 8007122:	2201      	movs	r2, #1
 8007124:	705a      	strb	r2, [r3, #1]
			break;
 8007126:	e01d      	b.n	8007164 <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 8007128:	4b12      	ldr	r3, [pc, #72]	; (8007174 <increment+0x84>)
 800712a:	789b      	ldrb	r3, [r3, #2]
 800712c:	2b63      	cmp	r3, #99	; 0x63
 800712e:	d806      	bhi.n	800713e <increment+0x4e>
 8007130:	4b10      	ldr	r3, [pc, #64]	; (8007174 <increment+0x84>)
 8007132:	789b      	ldrb	r3, [r3, #2]
 8007134:	3301      	adds	r3, #1
 8007136:	b2da      	uxtb	r2, r3
 8007138:	4b0e      	ldr	r3, [pc, #56]	; (8007174 <increment+0x84>)
 800713a:	709a      	strb	r2, [r3, #2]
			break;
 800713c:	e012      	b.n	8007164 <increment+0x74>
			else valDatePos[2] = 0;
 800713e:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <increment+0x84>)
 8007140:	2200      	movs	r2, #0
 8007142:	709a      	strb	r2, [r3, #2]
			break;
 8007144:	e00e      	b.n	8007164 <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 8007146:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <increment+0x84>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b1e      	cmp	r3, #30
 800714c:	d806      	bhi.n	800715c <increment+0x6c>
 800714e:	4b09      	ldr	r3, [pc, #36]	; (8007174 <increment+0x84>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	b2da      	uxtb	r2, r3
 8007156:	4b07      	ldr	r3, [pc, #28]	; (8007174 <increment+0x84>)
 8007158:	701a      	strb	r2, [r3, #0]
			break;
 800715a:	e002      	b.n	8007162 <increment+0x72>
			else valDatePos[0] = 1;
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <increment+0x84>)
 800715e:	2201      	movs	r2, #1
 8007160:	701a      	strb	r2, [r3, #0]
			break;
 8007162:	bf00      	nop
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	20003be4 	.word	0x20003be4
 8007174:	20003be8 	.word	0x20003be8

08007178 <decrement>:
static void decrement(void){
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
	switch(curPosition){
 800717c:	4b1e      	ldr	r3, [pc, #120]	; (80071f8 <decrement+0x80>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d024      	beq.n	80071ce <decrement+0x56>
 8007184:	2b02      	cmp	r3, #2
 8007186:	dc31      	bgt.n	80071ec <decrement+0x74>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <decrement+0x1a>
 800718c:	2b01      	cmp	r3, #1
 800718e:	d00f      	beq.n	80071b0 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 8007190:	e02c      	b.n	80071ec <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 8007192:	4b1a      	ldr	r3, [pc, #104]	; (80071fc <decrement+0x84>)
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d006      	beq.n	80071a8 <decrement+0x30>
 800719a:	4b18      	ldr	r3, [pc, #96]	; (80071fc <decrement+0x84>)
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	3b01      	subs	r3, #1
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	4b16      	ldr	r3, [pc, #88]	; (80071fc <decrement+0x84>)
 80071a4:	705a      	strb	r2, [r3, #1]
				break;
 80071a6:	e021      	b.n	80071ec <decrement+0x74>
				else valDatePos[1] = 12;
 80071a8:	4b14      	ldr	r3, [pc, #80]	; (80071fc <decrement+0x84>)
 80071aa:	220c      	movs	r2, #12
 80071ac:	705a      	strb	r2, [r3, #1]
				break;
 80071ae:	e01d      	b.n	80071ec <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 80071b0:	4b12      	ldr	r3, [pc, #72]	; (80071fc <decrement+0x84>)
 80071b2:	789b      	ldrb	r3, [r3, #2]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d006      	beq.n	80071c6 <decrement+0x4e>
 80071b8:	4b10      	ldr	r3, [pc, #64]	; (80071fc <decrement+0x84>)
 80071ba:	789b      	ldrb	r3, [r3, #2]
 80071bc:	3b01      	subs	r3, #1
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	4b0e      	ldr	r3, [pc, #56]	; (80071fc <decrement+0x84>)
 80071c2:	709a      	strb	r2, [r3, #2]
				break;
 80071c4:	e012      	b.n	80071ec <decrement+0x74>
				else valDatePos[2] = 100;
 80071c6:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <decrement+0x84>)
 80071c8:	2264      	movs	r2, #100	; 0x64
 80071ca:	709a      	strb	r2, [r3, #2]
				break;
 80071cc:	e00e      	b.n	80071ec <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 80071ce:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <decrement+0x84>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d906      	bls.n	80071e4 <decrement+0x6c>
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <decrement+0x84>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	3b01      	subs	r3, #1
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	4b07      	ldr	r3, [pc, #28]	; (80071fc <decrement+0x84>)
 80071e0:	701a      	strb	r2, [r3, #0]
				break;
 80071e2:	e002      	b.n	80071ea <decrement+0x72>
				else valDatePos[0] = 31;
 80071e4:	4b05      	ldr	r3, [pc, #20]	; (80071fc <decrement+0x84>)
 80071e6:	221f      	movs	r2, #31
 80071e8:	701a      	strb	r2, [r3, #0]
				break;
 80071ea:	bf00      	nop
}
 80071ec:	bf00      	nop
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	20003be4 	.word	0x20003be4
 80071fc:	20003be8 	.word	0x20003be8

08007200 <exit>:
static void exit(void){
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
	applySelectedScreen();
 8007204:	f7fb f918 	bl	8002438 <applySelectedScreen>
}
 8007208:	bf00      	nop
 800720a:	bd80      	pop	{r7, pc}

0800720c <accept>:
static void accept(void){
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 8007210:	4b15      	ldr	r3, [pc, #84]	; (8007268 <accept+0x5c>)
 8007212:	785a      	ldrb	r2, [r3, #1]
 8007214:	4b15      	ldr	r3, [pc, #84]	; (800726c <accept+0x60>)
 8007216:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 8007218:	4b13      	ldr	r3, [pc, #76]	; (8007268 <accept+0x5c>)
 800721a:	781a      	ldrb	r2, [r3, #0]
 800721c:	4b13      	ldr	r3, [pc, #76]	; (800726c <accept+0x60>)
 800721e:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 8007220:	4b11      	ldr	r3, [pc, #68]	; (8007268 <accept+0x5c>)
 8007222:	789a      	ldrb	r2, [r3, #2]
 8007224:	4b11      	ldr	r3, [pc, #68]	; (800726c <accept+0x60>)
 8007226:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 8007228:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <accept+0x5c>)
 800722a:	7818      	ldrb	r0, [r3, #0]
 800722c:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <accept+0x5c>)
 800722e:	7859      	ldrb	r1, [r3, #1]
 8007230:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <accept+0x5c>)
 8007232:	789b      	ldrb	r3, [r3, #2]
 8007234:	b29b      	uxth	r3, r3
 8007236:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800723a:	b29b      	uxth	r3, r3
 800723c:	461a      	mov	r2, r3
 800723e:	f000 fb67 	bl	8007910 <zellerCongruence>
 8007242:	4603      	mov	r3, r0
 8007244:	461a      	mov	r2, r3
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <accept+0x60>)
 8007248:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 800724a:	2200      	movs	r2, #0
 800724c:	4907      	ldr	r1, [pc, #28]	; (800726c <accept+0x60>)
 800724e:	4808      	ldr	r0, [pc, #32]	; (8007270 <accept+0x64>)
 8007250:	f003 fbc6 	bl	800a9e0 <HAL_RTC_SetDate>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <accept+0x52>
	{
	Error_Handler();
 800725a:	f7fc facd 	bl	80037f8 <Error_Handler>
	}
	exit();
 800725e:	f7ff ffcf 	bl	8007200 <exit>
}
 8007262:	bf00      	nop
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20003be8 	.word	0x20003be8
 800726c:	2000359c 	.word	0x2000359c
 8007270:	200037c4 	.word	0x200037c4

08007274 <setDefaultClbcks>:
//#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <setDefaultClbcks+0x34>)
 800727a:	4a0c      	ldr	r2, [pc, #48]	; (80072ac <setDefaultClbcks+0x38>)
 800727c:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 800727e:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <setDefaultClbcks+0x3c>)
 8007280:	4a0c      	ldr	r2, [pc, #48]	; (80072b4 <setDefaultClbcks+0x40>)
 8007282:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8007284:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <setDefaultClbcks+0x44>)
 8007286:	4a0d      	ldr	r2, [pc, #52]	; (80072bc <setDefaultClbcks+0x48>)
 8007288:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 800728a:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <setDefaultClbcks+0x4c>)
 800728c:	4a0d      	ldr	r2, [pc, #52]	; (80072c4 <setDefaultClbcks+0x50>)
 800728e:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8007290:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <setDefaultClbcks+0x54>)
 8007292:	4a0e      	ldr	r2, [pc, #56]	; (80072cc <setDefaultClbcks+0x58>)
 8007294:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8007296:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <setDefaultClbcks+0x5c>)
 8007298:	4a0e      	ldr	r2, [pc, #56]	; (80072d4 <setDefaultClbcks+0x60>)
 800729a:	611a      	str	r2, [r3, #16]
}
 800729c:	bf00      	nop
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	20000624 	.word	0x20000624
 80072ac:	080075f9 	.word	0x080075f9
 80072b0:	20000600 	.word	0x20000600
 80072b4:	0800743d 	.word	0x0800743d
 80072b8:	200005dc 	.word	0x200005dc
 80072bc:	08007605 	.word	0x08007605
 80072c0:	20000570 	.word	0x20000570
 80072c4:	08007529 	.word	0x08007529
 80072c8:	20000594 	.word	0x20000594
 80072cc:	0800740d 	.word	0x0800740d
 80072d0:	200005b8 	.word	0x200005b8
 80072d4:	0800746d 	.word	0x0800746d

080072d8 <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80072dc:	f7ff ffca 	bl	8007274 <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 80072e0:	4b06      	ldr	r3, [pc, #24]	; (80072fc <timeInputSetup+0x24>)
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	4b06      	ldr	r3, [pc, #24]	; (8007300 <timeInputSetup+0x28>)
 80072e6:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 80072e8:	4b04      	ldr	r3, [pc, #16]	; (80072fc <timeInputSetup+0x24>)
 80072ea:	785a      	ldrb	r2, [r3, #1]
 80072ec:	4b04      	ldr	r3, [pc, #16]	; (8007300 <timeInputSetup+0x28>)
 80072ee:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 80072f0:	4b02      	ldr	r3, [pc, #8]	; (80072fc <timeInputSetup+0x24>)
 80072f2:	789a      	ldrb	r2, [r3, #2]
 80072f4:	4b02      	ldr	r3, [pc, #8]	; (8007300 <timeInputSetup+0x28>)
 80072f6:	709a      	strb	r2, [r3, #2]
}
 80072f8:	bf00      	nop
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20003588 	.word	0x20003588
 8007300:	20003bec 	.word	0x20003bec

08007304 <timeInputMain>:

void timeInputMain(void){
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 800730a:	2300      	movs	r3, #0
 800730c:	603b      	str	r3, [r7, #0]
 800730e:	1d3b      	adds	r3, r7, #4
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	609a      	str	r2, [r3, #8]
 8007318:	60da      	str	r2, [r3, #12]
 800731a:	611a      	str	r2, [r3, #16]
 800731c:	615a      	str	r2, [r3, #20]
 800731e:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 8007320:	4b33      	ldr	r3, [pc, #204]	; (80073f0 <timeInputMain+0xec>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	463b      	mov	r3, r7
 8007328:	4932      	ldr	r1, [pc, #200]	; (80073f4 <timeInputMain+0xf0>)
 800732a:	4618      	mov	r0, r3
 800732c:	f007 faf8 	bl	800e920 <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 8007330:	463a      	mov	r2, r7
 8007332:	4b31      	ldr	r3, [pc, #196]	; (80073f8 <timeInputMain+0xf4>)
 8007334:	214c      	movs	r1, #76	; 0x4c
 8007336:	2014      	movs	r0, #20
 8007338:	f7fb fa9a 	bl	8002870 <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 800733c:	4b2c      	ldr	r3, [pc, #176]	; (80073f0 <timeInputMain+0xec>)
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	461a      	mov	r2, r3
 8007342:	463b      	mov	r3, r7
 8007344:	492b      	ldr	r1, [pc, #172]	; (80073f4 <timeInputMain+0xf0>)
 8007346:	4618      	mov	r0, r3
 8007348:	f007 faea 	bl	800e920 <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 800734c:	463a      	mov	r2, r7
 800734e:	4b2a      	ldr	r3, [pc, #168]	; (80073f8 <timeInputMain+0xf4>)
 8007350:	214c      	movs	r1, #76	; 0x4c
 8007352:	20aa      	movs	r0, #170	; 0xaa
 8007354:	f7fb fa8c 	bl	8002870 <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 8007358:	4b28      	ldr	r3, [pc, #160]	; (80073fc <timeInputMain+0xf8>)
 800735a:	789b      	ldrb	r3, [r3, #2]
 800735c:	461a      	mov	r2, r3
 800735e:	463b      	mov	r3, r7
 8007360:	4924      	ldr	r1, [pc, #144]	; (80073f4 <timeInputMain+0xf0>)
 8007362:	4618      	mov	r0, r3
 8007364:	f007 fadc 	bl	800e920 <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 8007368:	463a      	mov	r2, r7
 800736a:	4b25      	ldr	r3, [pc, #148]	; (8007400 <timeInputMain+0xfc>)
 800736c:	214c      	movs	r1, #76	; 0x4c
 800736e:	f240 103b 	movw	r0, #315	; 0x13b
 8007372:	f7fb fa7d 	bl	8002870 <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 8007376:	4b23      	ldr	r3, [pc, #140]	; (8007404 <timeInputMain+0x100>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	4b22      	ldr	r3, [pc, #136]	; (8007408 <timeInputMain+0x104>)
 800737e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007382:	4618      	mov	r0, r3
 8007384:	4b1f      	ldr	r3, [pc, #124]	; (8007404 <timeInputMain+0x100>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	4b1f      	ldr	r3, [pc, #124]	; (8007408 <timeInputMain+0x104>)
 800738c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007390:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007394:	2301      	movs	r3, #1
 8007396:	22af      	movs	r2, #175	; 0xaf
 8007398:	f7fb fed4 	bl	8003144 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 800739c:	4b19      	ldr	r3, [pc, #100]	; (8007404 <timeInputMain+0x100>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	4b19      	ldr	r3, [pc, #100]	; (8007408 <timeInputMain+0x104>)
 80073a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80073a8:	4618      	mov	r0, r3
 80073aa:	4b16      	ldr	r3, [pc, #88]	; (8007404 <timeInputMain+0x100>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	4b15      	ldr	r3, [pc, #84]	; (8007408 <timeInputMain+0x104>)
 80073b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80073b6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80073ba:	2301      	movs	r3, #1
 80073bc:	22b0      	movs	r2, #176	; 0xb0
 80073be:	f7fb fec1 	bl	8003144 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 80073c2:	4b10      	ldr	r3, [pc, #64]	; (8007404 <timeInputMain+0x100>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <timeInputMain+0x104>)
 80073ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80073ce:	4618      	mov	r0, r3
 80073d0:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <timeInputMain+0x100>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <timeInputMain+0x104>)
 80073d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80073dc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80073e0:	2301      	movs	r3, #1
 80073e2:	22b1      	movs	r2, #177	; 0xb1
 80073e4:	f7fb feae 	bl	8003144 <lcdHLine>
}
 80073e8:	bf00      	nop
 80073ea:	3720      	adds	r7, #32
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20003bec 	.word	0x20003bec
 80073f4:	08016c58 	.word	0x08016c58
 80073f8:	0803bbf4 	.word	0x0803bbf4
 80073fc:	20003588 	.word	0x20003588
 8007400:	080365ac 	.word	0x080365ac
 8007404:	20003beb 	.word	0x20003beb
 8007408:	20000284 	.word	0x20000284

0800740c <cursorNext>:

static void cursorNext(void){
 800740c:	b480      	push	{r7}
 800740e:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 8007410:	4b09      	ldr	r3, [pc, #36]	; (8007438 <cursorNext+0x2c>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b03      	cmp	r3, #3
 8007416:	d806      	bhi.n	8007426 <cursorNext+0x1a>
 8007418:	4b07      	ldr	r3, [pc, #28]	; (8007438 <cursorNext+0x2c>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	3301      	adds	r3, #1
 800741e:	b2da      	uxtb	r2, r3
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <cursorNext+0x2c>)
 8007422:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8007424:	e002      	b.n	800742c <cursorNext+0x20>
	else curPosition = 0;
 8007426:	4b04      	ldr	r3, [pc, #16]	; (8007438 <cursorNext+0x2c>)
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
}
 800742c:	bf00      	nop
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	20003beb 	.word	0x20003beb

0800743c <cursorPrev>:
static void cursorPrev(void){
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8007440:	4b09      	ldr	r3, [pc, #36]	; (8007468 <cursorPrev+0x2c>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d006      	beq.n	8007456 <cursorPrev+0x1a>
 8007448:	4b07      	ldr	r3, [pc, #28]	; (8007468 <cursorPrev+0x2c>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	3b01      	subs	r3, #1
 800744e:	b2da      	uxtb	r2, r3
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <cursorPrev+0x2c>)
 8007452:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 8007454:	e002      	b.n	800745c <cursorPrev+0x20>
	else curPosition = 4;
 8007456:	4b04      	ldr	r3, [pc, #16]	; (8007468 <cursorPrev+0x2c>)
 8007458:	2204      	movs	r2, #4
 800745a:	701a      	strb	r2, [r3, #0]
}
 800745c:	bf00      	nop
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	20003beb 	.word	0x20003beb

0800746c <increment>:
static void increment(void){
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
	switch(curPosition){
 8007470:	4b2b      	ldr	r3, [pc, #172]	; (8007520 <increment+0xb4>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b04      	cmp	r3, #4
 8007476:	d84d      	bhi.n	8007514 <increment+0xa8>
 8007478:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <increment+0x14>)
 800747a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747e:	bf00      	nop
 8007480:	08007495 	.word	0x08007495
 8007484:	080074b3 	.word	0x080074b3
 8007488:	080074d1 	.word	0x080074d1
 800748c:	080074ef 	.word	0x080074ef
 8007490:	0800750d 	.word	0x0800750d
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 8007494:	4b23      	ldr	r3, [pc, #140]	; (8007524 <increment+0xb8>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b0c      	cmp	r3, #12
 800749a:	d806      	bhi.n	80074aa <increment+0x3e>
 800749c:	4b21      	ldr	r3, [pc, #132]	; (8007524 <increment+0xb8>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	330a      	adds	r3, #10
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	4b1f      	ldr	r3, [pc, #124]	; (8007524 <increment+0xb8>)
 80074a6:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 80074a8:	e034      	b.n	8007514 <increment+0xa8>
			else valTimePos[0] = 20;
 80074aa:	4b1e      	ldr	r3, [pc, #120]	; (8007524 <increment+0xb8>)
 80074ac:	2214      	movs	r2, #20
 80074ae:	701a      	strb	r2, [r3, #0]
			break;
 80074b0:	e030      	b.n	8007514 <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 80074b2:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <increment+0xb8>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b17      	cmp	r3, #23
 80074b8:	d806      	bhi.n	80074c8 <increment+0x5c>
 80074ba:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <increment+0xb8>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	3301      	adds	r3, #1
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	4b18      	ldr	r3, [pc, #96]	; (8007524 <increment+0xb8>)
 80074c4:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 80074c6:	e025      	b.n	8007514 <increment+0xa8>
			else valTimePos[0] = 0;
 80074c8:	4b16      	ldr	r3, [pc, #88]	; (8007524 <increment+0xb8>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
			break;
 80074ce:	e021      	b.n	8007514 <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 80074d0:	4b14      	ldr	r3, [pc, #80]	; (8007524 <increment+0xb8>)
 80074d2:	785b      	ldrb	r3, [r3, #1]
 80074d4:	2b30      	cmp	r3, #48	; 0x30
 80074d6:	d806      	bhi.n	80074e6 <increment+0x7a>
 80074d8:	4b12      	ldr	r3, [pc, #72]	; (8007524 <increment+0xb8>)
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	330a      	adds	r3, #10
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	4b10      	ldr	r3, [pc, #64]	; (8007524 <increment+0xb8>)
 80074e2:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 80074e4:	e016      	b.n	8007514 <increment+0xa8>
			else valTimePos[1] = 0;
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <increment+0xb8>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	705a      	strb	r2, [r3, #1]
			break;
 80074ec:	e012      	b.n	8007514 <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 80074ee:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <increment+0xb8>)
 80074f0:	785b      	ldrb	r3, [r3, #1]
 80074f2:	2b3a      	cmp	r3, #58	; 0x3a
 80074f4:	d806      	bhi.n	8007504 <increment+0x98>
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <increment+0xb8>)
 80074f8:	785b      	ldrb	r3, [r3, #1]
 80074fa:	3301      	adds	r3, #1
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	4b09      	ldr	r3, [pc, #36]	; (8007524 <increment+0xb8>)
 8007500:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8007502:	e007      	b.n	8007514 <increment+0xa8>
			else valTimePos[1] = 0;
 8007504:	4b07      	ldr	r3, [pc, #28]	; (8007524 <increment+0xb8>)
 8007506:	2200      	movs	r2, #0
 8007508:	705a      	strb	r2, [r3, #1]
			break;
 800750a:	e003      	b.n	8007514 <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <increment+0xb8>)
 800750e:	2200      	movs	r2, #0
 8007510:	709a      	strb	r2, [r3, #2]
			break;
 8007512:	bf00      	nop
	}
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20003beb 	.word	0x20003beb
 8007524:	20003bec 	.word	0x20003bec

08007528 <decrement>:
static void decrement(void){
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
	switch(curPosition){
 800752c:	4b2e      	ldr	r3, [pc, #184]	; (80075e8 <decrement+0xc0>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b04      	cmp	r3, #4
 8007532:	d857      	bhi.n	80075e4 <decrement+0xbc>
 8007534:	a201      	add	r2, pc, #4	; (adr r2, 800753c <decrement+0x14>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	08007551 	.word	0x08007551
 8007540:	0800756f 	.word	0x0800756f
 8007544:	0800758d 	.word	0x0800758d
 8007548:	080075ab 	.word	0x080075ab
 800754c:	080075c9 	.word	0x080075c9
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 8007550:	4b26      	ldr	r3, [pc, #152]	; (80075ec <decrement+0xc4>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b09      	cmp	r3, #9
 8007556:	d906      	bls.n	8007566 <decrement+0x3e>
 8007558:	4b24      	ldr	r3, [pc, #144]	; (80075ec <decrement+0xc4>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	3b0a      	subs	r3, #10
 800755e:	b2da      	uxtb	r2, r3
 8007560:	4b22      	ldr	r3, [pc, #136]	; (80075ec <decrement+0xc4>)
 8007562:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 8007564:	e03e      	b.n	80075e4 <decrement+0xbc>
				else valTimePos[0] = 0;
 8007566:	4b21      	ldr	r3, [pc, #132]	; (80075ec <decrement+0xc4>)
 8007568:	2200      	movs	r2, #0
 800756a:	701a      	strb	r2, [r3, #0]
				break;
 800756c:	e03a      	b.n	80075e4 <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 800756e:	4b1f      	ldr	r3, [pc, #124]	; (80075ec <decrement+0xc4>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d006      	beq.n	8007584 <decrement+0x5c>
 8007576:	4b1d      	ldr	r3, [pc, #116]	; (80075ec <decrement+0xc4>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	3b01      	subs	r3, #1
 800757c:	b2da      	uxtb	r2, r3
 800757e:	4b1b      	ldr	r3, [pc, #108]	; (80075ec <decrement+0xc4>)
 8007580:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 8007582:	e02f      	b.n	80075e4 <decrement+0xbc>
				else valTimePos[0] = 23;
 8007584:	4b19      	ldr	r3, [pc, #100]	; (80075ec <decrement+0xc4>)
 8007586:	2217      	movs	r2, #23
 8007588:	701a      	strb	r2, [r3, #0]
				break;
 800758a:	e02b      	b.n	80075e4 <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 800758c:	4b17      	ldr	r3, [pc, #92]	; (80075ec <decrement+0xc4>)
 800758e:	785b      	ldrb	r3, [r3, #1]
 8007590:	2b09      	cmp	r3, #9
 8007592:	d906      	bls.n	80075a2 <decrement+0x7a>
 8007594:	4b15      	ldr	r3, [pc, #84]	; (80075ec <decrement+0xc4>)
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	3b0a      	subs	r3, #10
 800759a:	b2da      	uxtb	r2, r3
 800759c:	4b13      	ldr	r3, [pc, #76]	; (80075ec <decrement+0xc4>)
 800759e:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 80075a0:	e020      	b.n	80075e4 <decrement+0xbc>
				else valTimePos[1] = 0;
 80075a2:	4b12      	ldr	r3, [pc, #72]	; (80075ec <decrement+0xc4>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	705a      	strb	r2, [r3, #1]
				break;
 80075a8:	e01c      	b.n	80075e4 <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 80075aa:	4b10      	ldr	r3, [pc, #64]	; (80075ec <decrement+0xc4>)
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d006      	beq.n	80075c0 <decrement+0x98>
 80075b2:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <decrement+0xc4>)
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <decrement+0xc4>)
 80075bc:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 80075be:	e011      	b.n	80075e4 <decrement+0xbc>
				else valTimePos[1] = 59;
 80075c0:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <decrement+0xc4>)
 80075c2:	223b      	movs	r2, #59	; 0x3b
 80075c4:	705a      	strb	r2, [r3, #1]
				break;
 80075c6:	e00d      	b.n	80075e4 <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 80075c8:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <decrement+0xc8>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 80075ce:	2200      	movs	r2, #0
 80075d0:	4907      	ldr	r1, [pc, #28]	; (80075f0 <decrement+0xc8>)
 80075d2:	4808      	ldr	r0, [pc, #32]	; (80075f4 <decrement+0xcc>)
 80075d4:	f003 f90c 	bl	800a7f0 <HAL_RTC_SetTime>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <decrement+0xba>
					{
						Error_Handler();
 80075de:	f7fc f90b 	bl	80037f8 <Error_Handler>
					}
				break;
 80075e2:	bf00      	nop
		}
}
 80075e4:	bf00      	nop
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20003beb 	.word	0x20003beb
 80075ec:	20003bec 	.word	0x20003bec
 80075f0:	20003588 	.word	0x20003588
 80075f4:	200037c4 	.word	0x200037c4

080075f8 <exit>:
static void exit(void){
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
	applySelectedScreen();
 80075fc:	f7fa ff1c 	bl	8002438 <applySelectedScreen>
}
 8007600:	bf00      	nop
 8007602:	bd80      	pop	{r7, pc}

08007604 <accept>:
static void accept(void){
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 8007608:	4b0d      	ldr	r3, [pc, #52]	; (8007640 <accept+0x3c>)
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	4b0d      	ldr	r3, [pc, #52]	; (8007644 <accept+0x40>)
 800760e:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <accept+0x3c>)
 8007612:	785a      	ldrb	r2, [r3, #1]
 8007614:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <accept+0x40>)
 8007616:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <accept+0x40>)
 800761a:	2200      	movs	r2, #0
 800761c:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800761e:	4b09      	ldr	r3, [pc, #36]	; (8007644 <accept+0x40>)
 8007620:	2200      	movs	r2, #0
 8007622:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8007624:	2200      	movs	r2, #0
 8007626:	4907      	ldr	r1, [pc, #28]	; (8007644 <accept+0x40>)
 8007628:	4807      	ldr	r0, [pc, #28]	; (8007648 <accept+0x44>)
 800762a:	f003 f8e1 	bl	800a7f0 <HAL_RTC_SetTime>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <accept+0x34>
	{
	Error_Handler();
 8007634:	f7fc f8e0 	bl	80037f8 <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exit();
 8007638:	f7ff ffde 	bl	80075f8 <exit>
}
 800763c:	bf00      	nop
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20003bec 	.word	0x20003bec
 8007644:	20003588 	.word	0x20003588
 8007648:	200037c4 	.word	0x200037c4

0800764c <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	4613      	mov	r3, r2
 8007658:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	88fa      	ldrh	r2, [r7, #6]
 8007664:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	895b      	ldrh	r3, [r3, #10]
 800766a:	461a      	mov	r2, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	fb02 f303 	mul.w	r3, r2, r3
 8007672:	4618      	mov	r0, r3
 8007674:	f006 f808 	bl	800d688 <malloc>
 8007678:	4603      	mov	r3, r0
 800767a:	461a      	mov	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	741a      	strb	r2, [r3, #16]
}
 8007698:	bf00      	nop
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	891a      	ldrh	r2, [r3, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	895b      	ldrh	r3, [r3, #10]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	bf0c      	ite	eq
 80076b4:	2301      	moveq	r3, #1
 80076b6:	2300      	movne	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff ffe5 	bl	80076a0 <cbuf_isFull>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d02a      	beq.n	8007732 <cbuf_ovw+0x6c>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	88db      	ldrh	r3, [r3, #6]
 80076e4:	4619      	mov	r1, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	fb01 f303 	mul.w	r3, r1, r3
 80076ee:	18d0      	adds	r0, r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	461a      	mov	r2, r3
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	f005 ffd6 	bl	800d6a8 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	88db      	ldrh	r3, [r3, #6]
 8007700:	3301      	adds	r3, #1
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	8952      	ldrh	r2, [r2, #10]
 8007706:	fb93 f1f2 	sdiv	r1, r3, r2
 800770a:	fb01 f202 	mul.w	r2, r1, r2
 800770e:	1a9b      	subs	r3, r3, r2
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	889b      	ldrh	r3, [r3, #4]
 800771a:	3301      	adds	r3, #1
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	8952      	ldrh	r2, [r2, #10]
 8007720:	fb93 f1f2 	sdiv	r1, r3, r2
 8007724:	fb01 f202 	mul.w	r2, r1, r2
 8007728:	1a9b      	subs	r3, r3, r2
 800772a:	b29a      	uxth	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	809a      	strh	r2, [r3, #4]
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
		b->elemNum++;
		b->tail = (b->tail + 1) % b->maxSize;
		return 1;
	}
}
 8007730:	e023      	b.n	800777a <cbuf_ovw+0xb4>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	88db      	ldrh	r3, [r3, #6]
 800773a:	4619      	mov	r1, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	18d0      	adds	r0, r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	461a      	mov	r2, r3
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	f005 ffab 	bl	800d6a8 <memcpy>
		b->elemNum++;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	891b      	ldrh	r3, [r3, #8]
 8007756:	3301      	adds	r3, #1
 8007758:	b29a      	uxth	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	88db      	ldrh	r3, [r3, #6]
 8007762:	3301      	adds	r3, #1
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	8952      	ldrh	r2, [r2, #10]
 8007768:	fb93 f1f2 	sdiv	r1, r3, r2
 800776c:	fb01 f202 	mul.w	r2, r1, r2
 8007770:	1a9b      	subs	r3, r3, r2
 8007772:	b29a      	uxth	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	80da      	strh	r2, [r3, #6]
		return 1;
 8007778:	2301      	movs	r3, #1
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <cbuf_readn>:
// non-destructive read
void* cbuf_read(cbuf_t* b);
// non-destructive read of nth element
void* cbuf_readn(cbuf_t* b, uint16_t pos){
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	807b      	strh	r3, [r7, #2]
	pos += b->head;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	889a      	ldrh	r2, [r3, #4]
 8007792:	887b      	ldrh	r3, [r7, #2]
 8007794:	4413      	add	r3, r2
 8007796:	807b      	strh	r3, [r7, #2]
	pos = pos % b->maxSize;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	895a      	ldrh	r2, [r3, #10]
 800779c:	887b      	ldrh	r3, [r7, #2]
 800779e:	fbb3 f1f2 	udiv	r1, r3, r2
 80077a2:	fb01 f202 	mul.w	r2, r1, r2
 80077a6:	1a9b      	subs	r3, r3, r2
 80077a8:	807b      	strh	r3, [r7, #2]
	return(b->elements+pos*b->elemSize);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	887b      	ldrh	r3, [r7, #2]
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	68c9      	ldr	r1, [r1, #12]
 80077b4:	fb01 f303 	mul.w	r3, r1, r3
 80077b8:	4413      	add	r3, r2
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	887a      	ldrh	r2, [r7, #2]
 80077d6:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	895b      	ldrh	r3, [r3, #10]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4618      	mov	r0, r3
 80077e0:	f005 ff52 	bl	800d688 <malloc>
 80077e4:	4603      	mov	r3, r0
 80077e6:	461a      	mov	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	731a      	strb	r2, [r3, #12]
}
 8007804:	bf00      	nop
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	891a      	ldrh	r2, [r3, #8]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	895b      	ldrh	r3, [r3, #10]
 800781c:	429a      	cmp	r2, r3
 800781e:	bf0c      	ite	eq
 8007820:	2301      	moveq	r3, #1
 8007822:	2300      	movne	r3, #0
 8007824:	b2db      	uxtb	r3, r3
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff ffe5 	bl	800780c <ring_buffer_full>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d022      	beq.n	800788e <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	88db      	ldrh	r3, [r3, #6]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	88db      	ldrh	r3, [r3, #6]
 800785c:	3301      	adds	r3, #1
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	8952      	ldrh	r2, [r2, #10]
 8007862:	fb93 f1f2 	sdiv	r1, r3, r2
 8007866:	fb01 f202 	mul.w	r2, r1, r2
 800786a:	1a9b      	subs	r3, r3, r2
 800786c:	b29a      	uxth	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	889b      	ldrh	r3, [r3, #4]
 8007876:	3301      	adds	r3, #1
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	8952      	ldrh	r2, [r2, #10]
 800787c:	fb93 f1f2 	sdiv	r1, r3, r2
 8007880:	fb01 f202 	mul.w	r2, r1, r2
 8007884:	1a9b      	subs	r3, r3, r2
 8007886:	b29a      	uxth	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 800788c:	e01b      	b.n	80078c6 <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	88db      	ldrh	r3, [r3, #6]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	891b      	ldrh	r3, [r3, #8]
 80078a2:	3301      	adds	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	88db      	ldrh	r3, [r3, #6]
 80078ae:	3301      	adds	r3, #1
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	8952      	ldrh	r2, [r2, #10]
 80078b4:	fb93 f1f2 	sdiv	r1, r3, r2
 80078b8:	fb01 f202 	mul.w	r2, r1, r2
 80078bc:	1a9b      	subs	r3, r3, r2
 80078be:	b29a      	uxth	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	80da      	strh	r2, [r3, #6]
		return 1;
 80078c4:	2301      	movs	r3, #1
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	460b      	mov	r3, r1
 80078d8:	807b      	strh	r3, [r7, #2]
	position += b->head;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	889a      	ldrh	r2, [r3, #4]
 80078de:	887b      	ldrh	r3, [r7, #2]
 80078e0:	4413      	add	r3, r2
 80078e2:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	895a      	ldrh	r2, [r3, #10]
 80078e8:	887b      	ldrh	r3, [r7, #2]
 80078ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80078ee:	fb01 f202 	mul.w	r2, r1, r2
 80078f2:	1a9b      	subs	r3, r3, r2
 80078f4:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	887b      	ldrh	r3, [r7, #2]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	681b      	ldr	r3, [r3, #0]
}
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
	...

08007910 <zellerCongruence>:
 *      Author: wojch
 */

#include "timeUtils.h"

uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	4603      	mov	r3, r0
 8007918:	71fb      	strb	r3, [r7, #7]
 800791a:	460b      	mov	r3, r1
 800791c:	71bb      	strb	r3, [r7, #6]
 800791e:	4613      	mov	r3, r2
 8007920:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 8007922:	79bb      	ldrb	r3, [r7, #6]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d104      	bne.n	8007932 <zellerCongruence+0x22>
	        month = 13;
 8007928:	230d      	movs	r3, #13
 800792a:	71bb      	strb	r3, [r7, #6]
	        year--;
 800792c:	88bb      	ldrh	r3, [r7, #4]
 800792e:	3b01      	subs	r3, #1
 8007930:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 8007932:	79bb      	ldrb	r3, [r7, #6]
 8007934:	2b02      	cmp	r3, #2
 8007936:	d104      	bne.n	8007942 <zellerCongruence+0x32>
	        month = 14;
 8007938:	230e      	movs	r3, #14
 800793a:	71bb      	strb	r3, [r7, #6]
	        year--;
 800793c:	88bb      	ldrh	r3, [r7, #4]
 800793e:	3b01      	subs	r3, #1
 8007940:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 8007946:	79bb      	ldrb	r3, [r7, #6]
 8007948:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 800794a:	88bb      	ldrh	r3, [r7, #4]
 800794c:	4a29      	ldr	r2, [pc, #164]	; (80079f4 <zellerCongruence+0xe4>)
 800794e:	fba2 1203 	umull	r1, r2, r2, r3
 8007952:	0952      	lsrs	r2, r2, #5
 8007954:	2164      	movs	r1, #100	; 0x64
 8007956:	fb01 f202 	mul.w	r2, r1, r2
 800795a:	1a9b      	subs	r3, r3, r2
 800795c:	b29b      	uxth	r3, r3
 800795e:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 8007960:	88bb      	ldrh	r3, [r7, #4]
 8007962:	4a24      	ldr	r2, [pc, #144]	; (80079f4 <zellerCongruence+0xe4>)
 8007964:	fba2 2303 	umull	r2, r3, r2, r3
 8007968:	095b      	lsrs	r3, r3, #5
 800796a:	b29b      	uxth	r3, r3
 800796c:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800796e:	7bf9      	ldrb	r1, [r7, #15]
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	4613      	mov	r3, r2
 8007976:	005b      	lsls	r3, r3, #1
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	4a1e      	ldr	r2, [pc, #120]	; (80079f8 <zellerCongruence+0xe8>)
 8007980:	fb82 0203 	smull	r0, r2, r2, r3
 8007984:	1052      	asrs	r2, r2, #1
 8007986:	17db      	asrs	r3, r3, #31
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	18ca      	adds	r2, r1, r3
 800798c:	7b7b      	ldrb	r3, [r7, #13]
 800798e:	4413      	add	r3, r2
 8007990:	7b7a      	ldrb	r2, [r7, #13]
 8007992:	0892      	lsrs	r2, r2, #2
 8007994:	b2d2      	uxtb	r2, r2
 8007996:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 8007998:	7b3a      	ldrb	r2, [r7, #12]
 800799a:	0892      	lsrs	r2, r2, #2
 800799c:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800799e:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 80079a0:	7b3a      	ldrb	r2, [r7, #12]
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 80079a8:	440b      	add	r3, r1
 80079aa:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	4b13      	ldr	r3, [pc, #76]	; (80079fc <zellerCongruence+0xec>)
 80079b0:	fb83 1302 	smull	r1, r3, r3, r2
 80079b4:	4413      	add	r3, r2
 80079b6:	1099      	asrs	r1, r3, #2
 80079b8:	17d3      	asrs	r3, r2, #31
 80079ba:	1ac9      	subs	r1, r1, r3
 80079bc:	460b      	mov	r3, r1
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	1a5b      	subs	r3, r3, r1
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	1d5a      	adds	r2, r3, #5
 80079ca:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <zellerCongruence+0xec>)
 80079cc:	fb83 1302 	smull	r1, r3, r3, r2
 80079d0:	4413      	add	r3, r2
 80079d2:	1099      	asrs	r1, r3, #2
 80079d4:	17d3      	asrs	r3, r2, #31
 80079d6:	1ac9      	subs	r1, r1, r3
 80079d8:	460b      	mov	r3, r1
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	1a5b      	subs	r3, r3, r1
 80079de:	1ad1      	subs	r1, r2, r3
 80079e0:	b2cb      	uxtb	r3, r1
 80079e2:	3301      	adds	r3, #1
 80079e4:	b2db      	uxtb	r3, r3
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	51eb851f 	.word	0x51eb851f
 80079f8:	66666667 	.word	0x66666667
 80079fc:	92492493 	.word	0x92492493

08007a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a38 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007a04:	480d      	ldr	r0, [pc, #52]	; (8007a3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007a06:	490e      	ldr	r1, [pc, #56]	; (8007a40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007a08:	4a0e      	ldr	r2, [pc, #56]	; (8007a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a0c:	e002      	b.n	8007a14 <LoopCopyDataInit>

08007a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a12:	3304      	adds	r3, #4

08007a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007a18:	d3f9      	bcc.n	8007a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007a1a:	4a0b      	ldr	r2, [pc, #44]	; (8007a48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007a1c:	4c0b      	ldr	r4, [pc, #44]	; (8007a4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8007a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007a20:	e001      	b.n	8007a26 <LoopFillZerobss>

08007a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a24:	3204      	adds	r2, #4

08007a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007a28:	d3fb      	bcc.n	8007a22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007a2a:	f7fc f8f3 	bl	8003c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a2e:	f005 fe07 	bl	800d640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007a32:	f7fb fd61 	bl	80034f8 <main>
  bx  lr    
 8007a36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007a38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8007a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a40:	200004fc 	.word	0x200004fc
  ldr r2, =_sidata
 8007a44:	0803e658 	.word	0x0803e658
  ldr r2, =_sbss
 8007a48:	20000500 	.word	0x20000500
  ldr r4, =_ebss
 8007a4c:	20003c34 	.word	0x20003c34

08007a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a50:	e7fe      	b.n	8007a50 <ADC_IRQHandler>
	...

08007a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007a58:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <HAL_Init+0x40>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a0d      	ldr	r2, [pc, #52]	; (8007a94 <HAL_Init+0x40>)
 8007a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a64:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <HAL_Init+0x40>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a0a      	ldr	r2, [pc, #40]	; (8007a94 <HAL_Init+0x40>)
 8007a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a70:	4b08      	ldr	r3, [pc, #32]	; (8007a94 <HAL_Init+0x40>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a07      	ldr	r2, [pc, #28]	; (8007a94 <HAL_Init+0x40>)
 8007a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a7c:	2003      	movs	r0, #3
 8007a7e:	f000 f94f 	bl	8007d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007a82:	2000      	movs	r0, #0
 8007a84:	f000 f808 	bl	8007a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007a88:	f7fb ff9c 	bl	80039c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	40023c00 	.word	0x40023c00

08007a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007aa0:	4b12      	ldr	r3, [pc, #72]	; (8007aec <HAL_InitTick+0x54>)
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <HAL_InitTick+0x58>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 f967 	bl	8007d8a <HAL_SYSTICK_Config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e00e      	b.n	8007ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b0f      	cmp	r3, #15
 8007aca:	d80a      	bhi.n	8007ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007acc:	2200      	movs	r2, #0
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	f000 f92f 	bl	8007d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007ad8:	4a06      	ldr	r2, [pc, #24]	; (8007af4 <HAL_InitTick+0x5c>)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e000      	b.n	8007ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20000180 	.word	0x20000180
 8007af0:	200002bc 	.word	0x200002bc
 8007af4:	200002b8 	.word	0x200002b8

08007af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007afc:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <HAL_IncTick+0x20>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <HAL_IncTick+0x24>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4413      	add	r3, r2
 8007b08:	4a04      	ldr	r2, [pc, #16]	; (8007b1c <HAL_IncTick+0x24>)
 8007b0a:	6013      	str	r3, [r2, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	200002bc 	.word	0x200002bc
 8007b1c:	20003bf0 	.word	0x20003bf0

08007b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
  return uwTick;
 8007b24:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <HAL_GetTick+0x14>)
 8007b26:	681b      	ldr	r3, [r3, #0]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20003bf0 	.word	0x20003bf0

08007b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b40:	f7ff ffee 	bl	8007b20 <HAL_GetTick>
 8007b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b50:	d005      	beq.n	8007b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b52:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <HAL_Delay+0x44>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007b5e:	bf00      	nop
 8007b60:	f7ff ffde 	bl	8007b20 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d8f7      	bhi.n	8007b60 <HAL_Delay+0x28>
  {
  }
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	200002bc 	.word	0x200002bc

08007b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b90:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007bb2:	4a04      	ldr	r2, [pc, #16]	; (8007bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	60d3      	str	r3, [r2, #12]
}
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	e000ed00 	.word	0xe000ed00

08007bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007bcc:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <__NVIC_GetPriorityGrouping+0x18>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	0a1b      	lsrs	r3, r3, #8
 8007bd2:	f003 0307 	and.w	r3, r3, #7
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	e000ed00 	.word	0xe000ed00

08007be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	db0b      	blt.n	8007c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bf6:	79fb      	ldrb	r3, [r7, #7]
 8007bf8:	f003 021f 	and.w	r2, r3, #31
 8007bfc:	4907      	ldr	r1, [pc, #28]	; (8007c1c <__NVIC_EnableIRQ+0x38>)
 8007bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	2001      	movs	r0, #1
 8007c06:	fa00 f202 	lsl.w	r2, r0, r2
 8007c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c0e:	bf00      	nop
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	e000e100 	.word	0xe000e100

08007c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	6039      	str	r1, [r7, #0]
 8007c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	db0a      	blt.n	8007c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	490c      	ldr	r1, [pc, #48]	; (8007c6c <__NVIC_SetPriority+0x4c>)
 8007c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c3e:	0112      	lsls	r2, r2, #4
 8007c40:	b2d2      	uxtb	r2, r2
 8007c42:	440b      	add	r3, r1
 8007c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c48:	e00a      	b.n	8007c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	4908      	ldr	r1, [pc, #32]	; (8007c70 <__NVIC_SetPriority+0x50>)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	f003 030f 	and.w	r3, r3, #15
 8007c56:	3b04      	subs	r3, #4
 8007c58:	0112      	lsls	r2, r2, #4
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	761a      	strb	r2, [r3, #24]
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	e000e100 	.word	0xe000e100
 8007c70:	e000ed00 	.word	0xe000ed00

08007c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b089      	sub	sp, #36	; 0x24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f1c3 0307 	rsb	r3, r3, #7
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	bf28      	it	cs
 8007c92:	2304      	movcs	r3, #4
 8007c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	2b06      	cmp	r3, #6
 8007c9c:	d902      	bls.n	8007ca4 <NVIC_EncodePriority+0x30>
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	3b03      	subs	r3, #3
 8007ca2:	e000      	b.n	8007ca6 <NVIC_EncodePriority+0x32>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb2:	43da      	mvns	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	401a      	ands	r2, r3
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc6:	43d9      	mvns	r1, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ccc:	4313      	orrs	r3, r2
         );
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3724      	adds	r7, #36	; 0x24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
	...

08007cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cec:	d301      	bcc.n	8007cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e00f      	b.n	8007d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007cf2:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <SysTick_Config+0x40>)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007cfa:	210f      	movs	r1, #15
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	f7ff ff8e 	bl	8007c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <SysTick_Config+0x40>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d0a:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <SysTick_Config+0x40>)
 8007d0c:	2207      	movs	r2, #7
 8007d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	e000e010 	.word	0xe000e010

08007d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff ff29 	bl	8007b80 <__NVIC_SetPriorityGrouping>
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b086      	sub	sp, #24
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d48:	f7ff ff3e 	bl	8007bc8 <__NVIC_GetPriorityGrouping>
 8007d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	6978      	ldr	r0, [r7, #20]
 8007d54:	f7ff ff8e 	bl	8007c74 <NVIC_EncodePriority>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d5e:	4611      	mov	r1, r2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff ff5d 	bl	8007c20 <__NVIC_SetPriority>
}
 8007d66:	bf00      	nop
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	4603      	mov	r3, r0
 8007d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff ff31 	bl	8007be4 <__NVIC_EnableIRQ>
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff ffa2 	bl	8007cdc <SysTick_Config>
 8007d98:	4603      	mov	r3, r0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007db0:	f7ff feb6 	bl	8007b20 <HAL_GetTick>
 8007db4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e099      	b.n	8007ef4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0201 	bic.w	r2, r2, #1
 8007dde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007de0:	e00f      	b.n	8007e02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007de2:	f7ff fe9d 	bl	8007b20 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b05      	cmp	r3, #5
 8007dee:	d908      	bls.n	8007e02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2220      	movs	r2, #32
 8007df4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2203      	movs	r2, #3
 8007dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e078      	b.n	8007ef4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e8      	bne.n	8007de2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4b38      	ldr	r3, [pc, #224]	; (8007efc <HAL_DMA_Init+0x158>)
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d107      	bne.n	8007e6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e64:	4313      	orrs	r3, r2
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0307 	bic.w	r3, r3, #7
 8007e82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d117      	bne.n	8007ec6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00e      	beq.n	8007ec6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fb01 	bl	80084b0 <DMA_CheckFifoParam>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2240      	movs	r2, #64	; 0x40
 8007eb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e016      	b.n	8007ef4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fab8 	bl	8008444 <DMA_CalcBaseAndBitshift>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007edc:	223f      	movs	r2, #63	; 0x3f
 8007ede:	409a      	lsls	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	f010803f 	.word	0xf010803f

08007f00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d101      	bne.n	8007f26 <HAL_DMA_Start_IT+0x26>
 8007f22:	2302      	movs	r3, #2
 8007f24:	e040      	b.n	8007fa8 <HAL_DMA_Start_IT+0xa8>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d12f      	bne.n	8007f9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 fa4a 	bl	80083e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f58:	223f      	movs	r2, #63	; 0x3f
 8007f5a:	409a      	lsls	r2, r3
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0216 	orr.w	r2, r2, #22
 8007f6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d007      	beq.n	8007f88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0208 	orr.w	r2, r2, #8
 8007f86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0201 	orr.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	e005      	b.n	8007fa6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007fbe:	f7ff fdaf 	bl	8007b20 <HAL_GetTick>
 8007fc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d008      	beq.n	8007fe2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2280      	movs	r2, #128	; 0x80
 8007fd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e052      	b.n	8008088 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0216 	bic.w	r2, r2, #22
 8007ff0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	695a      	ldr	r2, [r3, #20]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008000:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d103      	bne.n	8008012 <HAL_DMA_Abort+0x62>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0208 	bic.w	r2, r2, #8
 8008020:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0201 	bic.w	r2, r2, #1
 8008030:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008032:	e013      	b.n	800805c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008034:	f7ff fd74 	bl	8007b20 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b05      	cmp	r3, #5
 8008040:	d90c      	bls.n	800805c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2220      	movs	r2, #32
 8008046:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2203      	movs	r2, #3
 800804c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e015      	b.n	8008088 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e4      	bne.n	8008034 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806e:	223f      	movs	r2, #63	; 0x3f
 8008070:	409a      	lsls	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d004      	beq.n	80080ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2280      	movs	r2, #128	; 0x80
 80080a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e00c      	b.n	80080c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2205      	movs	r2, #5
 80080b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0201 	bic.w	r2, r2, #1
 80080c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80080e0:	4b8e      	ldr	r3, [pc, #568]	; (800831c <HAL_DMA_IRQHandler+0x248>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a8e      	ldr	r2, [pc, #568]	; (8008320 <HAL_DMA_IRQHandler+0x24c>)
 80080e6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ea:	0a9b      	lsrs	r3, r3, #10
 80080ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fe:	2208      	movs	r2, #8
 8008100:	409a      	lsls	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	4013      	ands	r3, r2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d01a      	beq.n	8008140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b00      	cmp	r3, #0
 8008116:	d013      	beq.n	8008140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0204 	bic.w	r2, r2, #4
 8008126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812c:	2208      	movs	r2, #8
 800812e:	409a      	lsls	r2, r3
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008138:	f043 0201 	orr.w	r2, r3, #1
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008144:	2201      	movs	r2, #1
 8008146:	409a      	lsls	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4013      	ands	r3, r2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d012      	beq.n	8008176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00b      	beq.n	8008176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008162:	2201      	movs	r2, #1
 8008164:	409a      	lsls	r2, r3
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816e:	f043 0202 	orr.w	r2, r3, #2
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817a:	2204      	movs	r2, #4
 800817c:	409a      	lsls	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4013      	ands	r3, r2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d012      	beq.n	80081ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008198:	2204      	movs	r2, #4
 800819a:	409a      	lsls	r2, r3
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a4:	f043 0204 	orr.w	r2, r3, #4
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b0:	2210      	movs	r2, #16
 80081b2:	409a      	lsls	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4013      	ands	r3, r2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d043      	beq.n	8008244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0308 	and.w	r3, r3, #8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d03c      	beq.n	8008244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ce:	2210      	movs	r2, #16
 80081d0:	409a      	lsls	r2, r3
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d018      	beq.n	8008216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d108      	bne.n	8008204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d024      	beq.n	8008244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	4798      	blx	r3
 8008202:	e01f      	b.n	8008244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01b      	beq.n	8008244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	4798      	blx	r3
 8008214:	e016      	b.n	8008244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008220:	2b00      	cmp	r3, #0
 8008222:	d107      	bne.n	8008234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 0208 	bic.w	r2, r2, #8
 8008232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008248:	2220      	movs	r2, #32
 800824a:	409a      	lsls	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4013      	ands	r3, r2
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 808f 	beq.w	8008374 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 8087 	beq.w	8008374 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826a:	2220      	movs	r2, #32
 800826c:	409a      	lsls	r2, r3
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b05      	cmp	r3, #5
 800827c:	d136      	bne.n	80082ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0216 	bic.w	r2, r2, #22
 800828c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695a      	ldr	r2, [r3, #20]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800829c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d103      	bne.n	80082ae <HAL_DMA_IRQHandler+0x1da>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0208 	bic.w	r2, r2, #8
 80082bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c2:	223f      	movs	r2, #63	; 0x3f
 80082c4:	409a      	lsls	r2, r3
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d07e      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
        }
        return;
 80082ea:	e079      	b.n	80083e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d01d      	beq.n	8008336 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10d      	bne.n	8008324 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830c:	2b00      	cmp	r3, #0
 800830e:	d031      	beq.n	8008374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	4798      	blx	r3
 8008318:	e02c      	b.n	8008374 <HAL_DMA_IRQHandler+0x2a0>
 800831a:	bf00      	nop
 800831c:	20000180 	.word	0x20000180
 8008320:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d023      	beq.n	8008374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	4798      	blx	r3
 8008334:	e01e      	b.n	8008374 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10f      	bne.n	8008364 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0210 	bic.w	r2, r2, #16
 8008352:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008378:	2b00      	cmp	r3, #0
 800837a:	d032      	beq.n	80083e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d022      	beq.n	80083ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2205      	movs	r2, #5
 800838c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0201 	bic.w	r2, r2, #1
 800839e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	3301      	adds	r3, #1
 80083a4:	60bb      	str	r3, [r7, #8]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d307      	bcc.n	80083bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1f2      	bne.n	80083a0 <HAL_DMA_IRQHandler+0x2cc>
 80083ba:	e000      	b.n	80083be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80083bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d005      	beq.n	80083e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	4798      	blx	r3
 80083de:	e000      	b.n	80083e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80083e0:	bf00      	nop
    }
  }
}
 80083e2:	3718      	adds	r7, #24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008404:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	2b40      	cmp	r3, #64	; 0x40
 8008414:	d108      	bne.n	8008428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008426:	e007      	b.n	8008438 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	60da      	str	r2, [r3, #12]
}
 8008438:	bf00      	nop
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	3b10      	subs	r3, #16
 8008454:	4a14      	ldr	r2, [pc, #80]	; (80084a8 <DMA_CalcBaseAndBitshift+0x64>)
 8008456:	fba2 2303 	umull	r2, r3, r2, r3
 800845a:	091b      	lsrs	r3, r3, #4
 800845c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800845e:	4a13      	ldr	r2, [pc, #76]	; (80084ac <DMA_CalcBaseAndBitshift+0x68>)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b03      	cmp	r3, #3
 8008470:	d909      	bls.n	8008486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800847a:	f023 0303 	bic.w	r3, r3, #3
 800847e:	1d1a      	adds	r2, r3, #4
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	659a      	str	r2, [r3, #88]	; 0x58
 8008484:	e007      	b.n	8008496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800848e:	f023 0303 	bic.w	r3, r3, #3
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	aaaaaaab 	.word	0xaaaaaaab
 80084ac:	0803daec 	.word	0x0803daec

080084b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d11f      	bne.n	800850a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d856      	bhi.n	800857e <DMA_CheckFifoParam+0xce>
 80084d0:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <DMA_CheckFifoParam+0x28>)
 80084d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d6:	bf00      	nop
 80084d8:	080084e9 	.word	0x080084e9
 80084dc:	080084fb 	.word	0x080084fb
 80084e0:	080084e9 	.word	0x080084e9
 80084e4:	0800857f 	.word	0x0800857f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d046      	beq.n	8008582 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084f8:	e043      	b.n	8008582 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008502:	d140      	bne.n	8008586 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008508:	e03d      	b.n	8008586 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008512:	d121      	bne.n	8008558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b03      	cmp	r3, #3
 8008518:	d837      	bhi.n	800858a <DMA_CheckFifoParam+0xda>
 800851a:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <DMA_CheckFifoParam+0x70>)
 800851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008520:	08008531 	.word	0x08008531
 8008524:	08008537 	.word	0x08008537
 8008528:	08008531 	.word	0x08008531
 800852c:	08008549 	.word	0x08008549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	73fb      	strb	r3, [r7, #15]
      break;
 8008534:	e030      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d025      	beq.n	800858e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008546:	e022      	b.n	800858e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008550:	d11f      	bne.n	8008592 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008556:	e01c      	b.n	8008592 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d903      	bls.n	8008566 <DMA_CheckFifoParam+0xb6>
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b03      	cmp	r3, #3
 8008562:	d003      	beq.n	800856c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008564:	e018      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	73fb      	strb	r3, [r7, #15]
      break;
 800856a:	e015      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00e      	beq.n	8008596 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	73fb      	strb	r3, [r7, #15]
      break;
 800857c:	e00b      	b.n	8008596 <DMA_CheckFifoParam+0xe6>
      break;
 800857e:	bf00      	nop
 8008580:	e00a      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
      break;
 8008582:	bf00      	nop
 8008584:	e008      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
      break;
 8008586:	bf00      	nop
 8008588:	e006      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
      break;
 800858a:	bf00      	nop
 800858c:	e004      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
      break;
 800858e:	bf00      	nop
 8008590:	e002      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
      break;   
 8008592:	bf00      	nop
 8008594:	e000      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
      break;
 8008596:	bf00      	nop
    }
  } 
  
  return status; 
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop

080085a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b089      	sub	sp, #36	; 0x24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085be:	2300      	movs	r3, #0
 80085c0:	61fb      	str	r3, [r7, #28]
 80085c2:	e177      	b.n	80088b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80085c4:	2201      	movs	r2, #1
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	fa02 f303 	lsl.w	r3, r2, r3
 80085cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4013      	ands	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	429a      	cmp	r2, r3
 80085de:	f040 8166 	bne.w	80088ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d005      	beq.n	80085fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d130      	bne.n	800865c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	2203      	movs	r2, #3
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	43db      	mvns	r3, r3
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	4013      	ands	r3, r2
 8008610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	fa02 f303 	lsl.w	r3, r2, r3
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	4313      	orrs	r3, r2
 8008622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008630:	2201      	movs	r2, #1
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	fa02 f303 	lsl.w	r3, r2, r3
 8008638:	43db      	mvns	r3, r3
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	4013      	ands	r3, r2
 800863e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	091b      	lsrs	r3, r3, #4
 8008646:	f003 0201 	and.w	r2, r3, #1
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	fa02 f303 	lsl.w	r3, r2, r3
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	4313      	orrs	r3, r2
 8008654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f003 0303 	and.w	r3, r3, #3
 8008664:	2b03      	cmp	r3, #3
 8008666:	d017      	beq.n	8008698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	2203      	movs	r2, #3
 8008674:	fa02 f303 	lsl.w	r3, r2, r3
 8008678:	43db      	mvns	r3, r3
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	4013      	ands	r3, r2
 800867e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	fa02 f303 	lsl.w	r3, r2, r3
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	4313      	orrs	r3, r2
 8008690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f003 0303 	and.w	r3, r3, #3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d123      	bne.n	80086ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	08da      	lsrs	r2, r3, #3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3208      	adds	r2, #8
 80086ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	220f      	movs	r2, #15
 80086bc:	fa02 f303 	lsl.w	r3, r2, r3
 80086c0:	43db      	mvns	r3, r3
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	4013      	ands	r3, r2
 80086c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	691a      	ldr	r2, [r3, #16]
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	4313      	orrs	r3, r2
 80086dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	08da      	lsrs	r2, r3, #3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3208      	adds	r2, #8
 80086e6:	69b9      	ldr	r1, [r7, #24]
 80086e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	2203      	movs	r2, #3
 80086f8:	fa02 f303 	lsl.w	r3, r2, r3
 80086fc:	43db      	mvns	r3, r3
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	4013      	ands	r3, r2
 8008702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f003 0203 	and.w	r2, r3, #3
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	005b      	lsls	r3, r3, #1
 8008710:	fa02 f303 	lsl.w	r3, r2, r3
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	4313      	orrs	r3, r2
 8008718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80c0 	beq.w	80088ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	4b66      	ldr	r3, [pc, #408]	; (80088cc <HAL_GPIO_Init+0x324>)
 8008734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008736:	4a65      	ldr	r2, [pc, #404]	; (80088cc <HAL_GPIO_Init+0x324>)
 8008738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800873c:	6453      	str	r3, [r2, #68]	; 0x44
 800873e:	4b63      	ldr	r3, [pc, #396]	; (80088cc <HAL_GPIO_Init+0x324>)
 8008740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800874a:	4a61      	ldr	r2, [pc, #388]	; (80088d0 <HAL_GPIO_Init+0x328>)
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	089b      	lsrs	r3, r3, #2
 8008750:	3302      	adds	r3, #2
 8008752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	220f      	movs	r2, #15
 8008762:	fa02 f303 	lsl.w	r3, r2, r3
 8008766:	43db      	mvns	r3, r3
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	4013      	ands	r3, r2
 800876c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a58      	ldr	r2, [pc, #352]	; (80088d4 <HAL_GPIO_Init+0x32c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d037      	beq.n	80087e6 <HAL_GPIO_Init+0x23e>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a57      	ldr	r2, [pc, #348]	; (80088d8 <HAL_GPIO_Init+0x330>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d031      	beq.n	80087e2 <HAL_GPIO_Init+0x23a>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a56      	ldr	r2, [pc, #344]	; (80088dc <HAL_GPIO_Init+0x334>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d02b      	beq.n	80087de <HAL_GPIO_Init+0x236>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a55      	ldr	r2, [pc, #340]	; (80088e0 <HAL_GPIO_Init+0x338>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d025      	beq.n	80087da <HAL_GPIO_Init+0x232>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a54      	ldr	r2, [pc, #336]	; (80088e4 <HAL_GPIO_Init+0x33c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d01f      	beq.n	80087d6 <HAL_GPIO_Init+0x22e>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a53      	ldr	r2, [pc, #332]	; (80088e8 <HAL_GPIO_Init+0x340>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d019      	beq.n	80087d2 <HAL_GPIO_Init+0x22a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a52      	ldr	r2, [pc, #328]	; (80088ec <HAL_GPIO_Init+0x344>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d013      	beq.n	80087ce <HAL_GPIO_Init+0x226>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a51      	ldr	r2, [pc, #324]	; (80088f0 <HAL_GPIO_Init+0x348>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00d      	beq.n	80087ca <HAL_GPIO_Init+0x222>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a50      	ldr	r2, [pc, #320]	; (80088f4 <HAL_GPIO_Init+0x34c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d007      	beq.n	80087c6 <HAL_GPIO_Init+0x21e>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a4f      	ldr	r2, [pc, #316]	; (80088f8 <HAL_GPIO_Init+0x350>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d101      	bne.n	80087c2 <HAL_GPIO_Init+0x21a>
 80087be:	2309      	movs	r3, #9
 80087c0:	e012      	b.n	80087e8 <HAL_GPIO_Init+0x240>
 80087c2:	230a      	movs	r3, #10
 80087c4:	e010      	b.n	80087e8 <HAL_GPIO_Init+0x240>
 80087c6:	2308      	movs	r3, #8
 80087c8:	e00e      	b.n	80087e8 <HAL_GPIO_Init+0x240>
 80087ca:	2307      	movs	r3, #7
 80087cc:	e00c      	b.n	80087e8 <HAL_GPIO_Init+0x240>
 80087ce:	2306      	movs	r3, #6
 80087d0:	e00a      	b.n	80087e8 <HAL_GPIO_Init+0x240>
 80087d2:	2305      	movs	r3, #5
 80087d4:	e008      	b.n	80087e8 <HAL_GPIO_Init+0x240>
 80087d6:	2304      	movs	r3, #4
 80087d8:	e006      	b.n	80087e8 <HAL_GPIO_Init+0x240>
 80087da:	2303      	movs	r3, #3
 80087dc:	e004      	b.n	80087e8 <HAL_GPIO_Init+0x240>
 80087de:	2302      	movs	r3, #2
 80087e0:	e002      	b.n	80087e8 <HAL_GPIO_Init+0x240>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e000      	b.n	80087e8 <HAL_GPIO_Init+0x240>
 80087e6:	2300      	movs	r3, #0
 80087e8:	69fa      	ldr	r2, [r7, #28]
 80087ea:	f002 0203 	and.w	r2, r2, #3
 80087ee:	0092      	lsls	r2, r2, #2
 80087f0:	4093      	lsls	r3, r2
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087f8:	4935      	ldr	r1, [pc, #212]	; (80088d0 <HAL_GPIO_Init+0x328>)
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	089b      	lsrs	r3, r3, #2
 80087fe:	3302      	adds	r3, #2
 8008800:	69ba      	ldr	r2, [r7, #24]
 8008802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008806:	4b3d      	ldr	r3, [pc, #244]	; (80088fc <HAL_GPIO_Init+0x354>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	43db      	mvns	r3, r3
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	4013      	ands	r3, r2
 8008814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	4313      	orrs	r3, r2
 8008828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800882a:	4a34      	ldr	r2, [pc, #208]	; (80088fc <HAL_GPIO_Init+0x354>)
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008830:	4b32      	ldr	r3, [pc, #200]	; (80088fc <HAL_GPIO_Init+0x354>)
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	43db      	mvns	r3, r3
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	4013      	ands	r3, r2
 800883e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	4313      	orrs	r3, r2
 8008852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008854:	4a29      	ldr	r2, [pc, #164]	; (80088fc <HAL_GPIO_Init+0x354>)
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800885a:	4b28      	ldr	r3, [pc, #160]	; (80088fc <HAL_GPIO_Init+0x354>)
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	43db      	mvns	r3, r3
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	4013      	ands	r3, r2
 8008868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	4313      	orrs	r3, r2
 800887c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800887e:	4a1f      	ldr	r2, [pc, #124]	; (80088fc <HAL_GPIO_Init+0x354>)
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008884:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <HAL_GPIO_Init+0x354>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	43db      	mvns	r3, r3
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	4013      	ands	r3, r2
 8008892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d003      	beq.n	80088a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80088a0:	69ba      	ldr	r2, [r7, #24]
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80088a8:	4a14      	ldr	r2, [pc, #80]	; (80088fc <HAL_GPIO_Init+0x354>)
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	3301      	adds	r3, #1
 80088b2:	61fb      	str	r3, [r7, #28]
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	2b0f      	cmp	r3, #15
 80088b8:	f67f ae84 	bls.w	80085c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80088bc:	bf00      	nop
 80088be:	bf00      	nop
 80088c0:	3724      	adds	r7, #36	; 0x24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	40023800 	.word	0x40023800
 80088d0:	40013800 	.word	0x40013800
 80088d4:	40020000 	.word	0x40020000
 80088d8:	40020400 	.word	0x40020400
 80088dc:	40020800 	.word	0x40020800
 80088e0:	40020c00 	.word	0x40020c00
 80088e4:	40021000 	.word	0x40021000
 80088e8:	40021400 	.word	0x40021400
 80088ec:	40021800 	.word	0x40021800
 80088f0:	40021c00 	.word	0x40021c00
 80088f4:	40022000 	.word	0x40022000
 80088f8:	40022400 	.word	0x40022400
 80088fc:	40013c00 	.word	0x40013c00

08008900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691a      	ldr	r2, [r3, #16]
 8008910:	887b      	ldrh	r3, [r7, #2]
 8008912:	4013      	ands	r3, r2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
 800891c:	e001      	b.n	8008922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	807b      	strh	r3, [r7, #2]
 800893c:	4613      	mov	r3, r2
 800893e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008940:	787b      	ldrb	r3, [r7, #1]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008946:	887a      	ldrh	r2, [r7, #2]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800894c:	e003      	b.n	8008956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800894e:	887b      	ldrh	r3, [r7, #2]
 8008950:	041a      	lsls	r2, r3, #16
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	619a      	str	r2, [r3, #24]
}
 8008956:	bf00      	nop
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008962:	b480      	push	{r7}
 8008964:	b085      	sub	sp, #20
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008974:	887a      	ldrh	r2, [r7, #2]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	4013      	ands	r3, r2
 800897a:	041a      	lsls	r2, r3, #16
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	43d9      	mvns	r1, r3
 8008980:	887b      	ldrh	r3, [r7, #2]
 8008982:	400b      	ands	r3, r1
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	619a      	str	r2, [r3, #24]
}
 800898a:	bf00      	nop
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
	...

08008998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80089a2:	4b08      	ldr	r3, [pc, #32]	; (80089c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80089a4:	695a      	ldr	r2, [r3, #20]
 80089a6:	88fb      	ldrh	r3, [r7, #6]
 80089a8:	4013      	ands	r3, r2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d006      	beq.n	80089bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80089ae:	4a05      	ldr	r2, [pc, #20]	; (80089c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f806 	bl	80089c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	40013c00 	.word	0x40013c00

080089c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e12b      	b.n	8008c4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7f9 fdb0 	bl	800256c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2224      	movs	r2, #36	; 0x24
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0201 	bic.w	r2, r2, #1
 8008a22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008a44:	f001 fc76 	bl	800a334 <HAL_RCC_GetPCLK1Freq>
 8008a48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	4a81      	ldr	r2, [pc, #516]	; (8008c54 <HAL_I2C_Init+0x274>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d807      	bhi.n	8008a64 <HAL_I2C_Init+0x84>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4a80      	ldr	r2, [pc, #512]	; (8008c58 <HAL_I2C_Init+0x278>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	bf94      	ite	ls
 8008a5c:	2301      	movls	r3, #1
 8008a5e:	2300      	movhi	r3, #0
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	e006      	b.n	8008a72 <HAL_I2C_Init+0x92>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4a7d      	ldr	r2, [pc, #500]	; (8008c5c <HAL_I2C_Init+0x27c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	bf94      	ite	ls
 8008a6c:	2301      	movls	r3, #1
 8008a6e:	2300      	movhi	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e0e7      	b.n	8008c4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4a78      	ldr	r2, [pc, #480]	; (8008c60 <HAL_I2C_Init+0x280>)
 8008a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a82:	0c9b      	lsrs	r3, r3, #18
 8008a84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	4a6a      	ldr	r2, [pc, #424]	; (8008c54 <HAL_I2C_Init+0x274>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d802      	bhi.n	8008ab4 <HAL_I2C_Init+0xd4>
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	e009      	b.n	8008ac8 <HAL_I2C_Init+0xe8>
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008aba:	fb02 f303 	mul.w	r3, r2, r3
 8008abe:	4a69      	ldr	r2, [pc, #420]	; (8008c64 <HAL_I2C_Init+0x284>)
 8008ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac4:	099b      	lsrs	r3, r3, #6
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6812      	ldr	r2, [r2, #0]
 8008acc:	430b      	orrs	r3, r1
 8008ace:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008ada:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	495c      	ldr	r1, [pc, #368]	; (8008c54 <HAL_I2C_Init+0x274>)
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	d819      	bhi.n	8008b1c <HAL_I2C_Init+0x13c>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	1e59      	subs	r1, r3, #1
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008af6:	1c59      	adds	r1, r3, #1
 8008af8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008afc:	400b      	ands	r3, r1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <HAL_I2C_Init+0x138>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	1e59      	subs	r1, r3, #1
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b10:	3301      	adds	r3, #1
 8008b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b16:	e051      	b.n	8008bbc <HAL_I2C_Init+0x1dc>
 8008b18:	2304      	movs	r3, #4
 8008b1a:	e04f      	b.n	8008bbc <HAL_I2C_Init+0x1dc>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d111      	bne.n	8008b48 <HAL_I2C_Init+0x168>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	1e58      	subs	r0, r3, #1
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6859      	ldr	r1, [r3, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	440b      	add	r3, r1
 8008b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b36:	3301      	adds	r3, #1
 8008b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	bf0c      	ite	eq
 8008b40:	2301      	moveq	r3, #1
 8008b42:	2300      	movne	r3, #0
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	e012      	b.n	8008b6e <HAL_I2C_Init+0x18e>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	1e58      	subs	r0, r3, #1
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6859      	ldr	r1, [r3, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	440b      	add	r3, r1
 8008b56:	0099      	lsls	r1, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b5e:	3301      	adds	r3, #1
 8008b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	bf0c      	ite	eq
 8008b68:	2301      	moveq	r3, #1
 8008b6a:	2300      	movne	r3, #0
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <HAL_I2C_Init+0x196>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e022      	b.n	8008bbc <HAL_I2C_Init+0x1dc>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10e      	bne.n	8008b9c <HAL_I2C_Init+0x1bc>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1e58      	subs	r0, r3, #1
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6859      	ldr	r1, [r3, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	440b      	add	r3, r1
 8008b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b90:	3301      	adds	r3, #1
 8008b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b9a:	e00f      	b.n	8008bbc <HAL_I2C_Init+0x1dc>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	1e58      	subs	r0, r3, #1
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6859      	ldr	r1, [r3, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	440b      	add	r3, r1
 8008baa:	0099      	lsls	r1, r3, #2
 8008bac:	440b      	add	r3, r1
 8008bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	6809      	ldr	r1, [r1, #0]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	69da      	ldr	r2, [r3, #28]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6911      	ldr	r1, [r2, #16]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	68d2      	ldr	r2, [r2, #12]
 8008bf6:	4311      	orrs	r1, r2
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	6812      	ldr	r2, [r2, #0]
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	695a      	ldr	r2, [r3, #20]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	431a      	orrs	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f042 0201 	orr.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	000186a0 	.word	0x000186a0
 8008c58:	001e847f 	.word	0x001e847f
 8008c5c:	003d08ff 	.word	0x003d08ff
 8008c60:	431bde83 	.word	0x431bde83
 8008c64:	10624dd3 	.word	0x10624dd3

08008c68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	4608      	mov	r0, r1
 8008c72:	4611      	mov	r1, r2
 8008c74:	461a      	mov	r2, r3
 8008c76:	4603      	mov	r3, r0
 8008c78:	817b      	strh	r3, [r7, #10]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	813b      	strh	r3, [r7, #8]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c82:	f7fe ff4d 	bl	8007b20 <HAL_GetTick>
 8008c86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b20      	cmp	r3, #32
 8008c92:	f040 80d9 	bne.w	8008e48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	2319      	movs	r3, #25
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	496d      	ldr	r1, [pc, #436]	; (8008e54 <HAL_I2C_Mem_Write+0x1ec>)
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 fc7f 	bl	80095a4 <I2C_WaitOnFlagUntilTimeout>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008cac:	2302      	movs	r3, #2
 8008cae:	e0cc      	b.n	8008e4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d101      	bne.n	8008cbe <HAL_I2C_Mem_Write+0x56>
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e0c5      	b.n	8008e4a <HAL_I2C_Mem_Write+0x1e2>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d007      	beq.n	8008ce4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f042 0201 	orr.w	r2, r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2221      	movs	r2, #33	; 0x21
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2240      	movs	r2, #64	; 0x40
 8008d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6a3a      	ldr	r2, [r7, #32]
 8008d0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4a4d      	ldr	r2, [pc, #308]	; (8008e58 <HAL_I2C_Mem_Write+0x1f0>)
 8008d24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d26:	88f8      	ldrh	r0, [r7, #6]
 8008d28:	893a      	ldrh	r2, [r7, #8]
 8008d2a:	8979      	ldrh	r1, [r7, #10]
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4603      	mov	r3, r0
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fab6 	bl	80092a8 <I2C_RequestMemoryWrite>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d052      	beq.n	8008de8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e081      	b.n	8008e4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f000 fd00 	bl	8009750 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00d      	beq.n	8008d72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	d107      	bne.n	8008d6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e06b      	b.n	8008e4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	781a      	ldrb	r2, [r3, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	d11b      	bne.n	8008de8 <HAL_I2C_Mem_Write+0x180>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d017      	beq.n	8008de8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	781a      	ldrb	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	1c5a      	adds	r2, r3, #1
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1aa      	bne.n	8008d46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 fcec 	bl	80097d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00d      	beq.n	8008e1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	d107      	bne.n	8008e18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e016      	b.n	8008e4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	e000      	b.n	8008e4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008e48:	2302      	movs	r3, #2
  }
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	00100002 	.word	0x00100002
 8008e58:	ffff0000 	.word	0xffff0000

08008e5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b08c      	sub	sp, #48	; 0x30
 8008e60:	af02      	add	r7, sp, #8
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	4608      	mov	r0, r1
 8008e66:	4611      	mov	r1, r2
 8008e68:	461a      	mov	r2, r3
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	817b      	strh	r3, [r7, #10]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	813b      	strh	r3, [r7, #8]
 8008e72:	4613      	mov	r3, r2
 8008e74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e76:	f7fe fe53 	bl	8007b20 <HAL_GetTick>
 8008e7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b20      	cmp	r3, #32
 8008e86:	f040 8208 	bne.w	800929a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	2319      	movs	r3, #25
 8008e90:	2201      	movs	r2, #1
 8008e92:	497b      	ldr	r1, [pc, #492]	; (8009080 <HAL_I2C_Mem_Read+0x224>)
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 fb85 	bl	80095a4 <I2C_WaitOnFlagUntilTimeout>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e1fb      	b.n	800929c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d101      	bne.n	8008eb2 <HAL_I2C_Mem_Read+0x56>
 8008eae:	2302      	movs	r3, #2
 8008eb0:	e1f4      	b.n	800929c <HAL_I2C_Mem_Read+0x440>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d007      	beq.n	8008ed8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0201 	orr.w	r2, r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ee6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2222      	movs	r2, #34	; 0x22
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2240      	movs	r2, #64	; 0x40
 8008ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008f08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4a5b      	ldr	r2, [pc, #364]	; (8009084 <HAL_I2C_Mem_Read+0x228>)
 8008f18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f1a:	88f8      	ldrh	r0, [r7, #6]
 8008f1c:	893a      	ldrh	r2, [r7, #8]
 8008f1e:	8979      	ldrh	r1, [r7, #10]
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	9301      	str	r3, [sp, #4]
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	4603      	mov	r3, r0
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 fa52 	bl	80093d4 <I2C_RequestMemoryRead>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e1b0      	b.n	800929c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d113      	bne.n	8008f6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f42:	2300      	movs	r3, #0
 8008f44:	623b      	str	r3, [r7, #32]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	623b      	str	r3, [r7, #32]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	623b      	str	r3, [r7, #32]
 8008f56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	e184      	b.n	8009274 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d11b      	bne.n	8008faa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f82:	2300      	movs	r3, #0
 8008f84:	61fb      	str	r3, [r7, #28]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	61fb      	str	r3, [r7, #28]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	61fb      	str	r3, [r7, #28]
 8008f96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	e164      	b.n	8009274 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d11b      	bne.n	8008fea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	61bb      	str	r3, [r7, #24]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	61bb      	str	r3, [r7, #24]
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	e144      	b.n	8009274 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fea:	2300      	movs	r3, #0
 8008fec:	617b      	str	r3, [r7, #20]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	617b      	str	r3, [r7, #20]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009000:	e138      	b.n	8009274 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009006:	2b03      	cmp	r3, #3
 8009008:	f200 80f1 	bhi.w	80091ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009010:	2b01      	cmp	r3, #1
 8009012:	d123      	bne.n	800905c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009016:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fc1b 	bl	8009854 <I2C_WaitOnRXNEFlagUntilTimeout>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e139      	b.n	800929c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	691a      	ldr	r2, [r3, #16]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009032:	b2d2      	uxtb	r2, r2
 8009034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009044:	3b01      	subs	r3, #1
 8009046:	b29a      	uxth	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009050:	b29b      	uxth	r3, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	b29a      	uxth	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	855a      	strh	r2, [r3, #42]	; 0x2a
 800905a:	e10b      	b.n	8009274 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009060:	2b02      	cmp	r3, #2
 8009062:	d14e      	bne.n	8009102 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	2200      	movs	r2, #0
 800906c:	4906      	ldr	r1, [pc, #24]	; (8009088 <HAL_I2C_Mem_Read+0x22c>)
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 fa98 	bl	80095a4 <I2C_WaitOnFlagUntilTimeout>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d008      	beq.n	800908c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e10e      	b.n	800929c <HAL_I2C_Mem_Read+0x440>
 800907e:	bf00      	nop
 8009080:	00100002 	.word	0x00100002
 8009084:	ffff0000 	.word	0xffff0000
 8009088:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800909a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691a      	ldr	r2, [r3, #16]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	1c5a      	adds	r2, r3, #1
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	3b01      	subs	r3, #1
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	691a      	ldr	r2, [r3, #16]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	b2d2      	uxtb	r2, r2
 80090da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e0:	1c5a      	adds	r2, r3, #1
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ea:	3b01      	subs	r3, #1
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009100:	e0b8      	b.n	8009274 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	2200      	movs	r2, #0
 800910a:	4966      	ldr	r1, [pc, #408]	; (80092a4 <HAL_I2C_Mem_Read+0x448>)
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f000 fa49 	bl	80095a4 <I2C_WaitOnFlagUntilTimeout>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e0bf      	b.n	800929c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800912a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691a      	ldr	r2, [r3, #16]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009148:	3b01      	subs	r3, #1
 800914a:	b29a      	uxth	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009154:	b29b      	uxth	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009164:	2200      	movs	r2, #0
 8009166:	494f      	ldr	r1, [pc, #316]	; (80092a4 <HAL_I2C_Mem_Read+0x448>)
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 fa1b 	bl	80095a4 <I2C_WaitOnFlagUntilTimeout>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e091      	b.n	800929c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691a      	ldr	r2, [r3, #16]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a4:	3b01      	subs	r3, #1
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	3b01      	subs	r3, #1
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691a      	ldr	r2, [r3, #16]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	b2d2      	uxtb	r2, r2
 80091c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d6:	3b01      	subs	r3, #1
 80091d8:	b29a      	uxth	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	3b01      	subs	r3, #1
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091ec:	e042      	b.n	8009274 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 fb2e 	bl	8009854 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e04c      	b.n	800929c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	691a      	ldr	r2, [r3, #16]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800921e:	3b01      	subs	r3, #1
 8009220:	b29a      	uxth	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800922a:	b29b      	uxth	r3, r3
 800922c:	3b01      	subs	r3, #1
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	f003 0304 	and.w	r3, r3, #4
 800923e:	2b04      	cmp	r3, #4
 8009240:	d118      	bne.n	8009274 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	691a      	ldr	r2, [r3, #16]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	b2d2      	uxtb	r2, r2
 800924e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	1c5a      	adds	r2, r3, #1
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800925e:	3b01      	subs	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926a:	b29b      	uxth	r3, r3
 800926c:	3b01      	subs	r3, #1
 800926e:	b29a      	uxth	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009278:	2b00      	cmp	r3, #0
 800927a:	f47f aec2 	bne.w	8009002 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2220      	movs	r2, #32
 8009282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	e000      	b.n	800929c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800929a:	2302      	movs	r3, #2
  }
}
 800929c:	4618      	mov	r0, r3
 800929e:	3728      	adds	r7, #40	; 0x28
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	00010004 	.word	0x00010004

080092a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af02      	add	r7, sp, #8
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	461a      	mov	r2, r3
 80092b6:	4603      	mov	r3, r0
 80092b8:	817b      	strh	r3, [r7, #10]
 80092ba:	460b      	mov	r3, r1
 80092bc:	813b      	strh	r3, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	2200      	movs	r2, #0
 80092da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 f960 	bl	80095a4 <I2C_WaitOnFlagUntilTimeout>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00d      	beq.n	8009306 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092f8:	d103      	bne.n	8009302 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009300:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e05f      	b.n	80093c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009306:	897b      	ldrh	r3, [r7, #10]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	461a      	mov	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009314:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	6a3a      	ldr	r2, [r7, #32]
 800931a:	492d      	ldr	r1, [pc, #180]	; (80093d0 <I2C_RequestMemoryWrite+0x128>)
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 f998 	bl	8009652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e04c      	b.n	80093c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800932c:	2300      	movs	r3, #0
 800932e:	617b      	str	r3, [r7, #20]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	617b      	str	r3, [r7, #20]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009344:	6a39      	ldr	r1, [r7, #32]
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 fa02 	bl	8009750 <I2C_WaitOnTXEFlagUntilTimeout>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00d      	beq.n	800936e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	2b04      	cmp	r3, #4
 8009358:	d107      	bne.n	800936a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009368:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e02b      	b.n	80093c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800936e:	88fb      	ldrh	r3, [r7, #6]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d105      	bne.n	8009380 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009374:	893b      	ldrh	r3, [r7, #8]
 8009376:	b2da      	uxtb	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	611a      	str	r2, [r3, #16]
 800937e:	e021      	b.n	80093c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009380:	893b      	ldrh	r3, [r7, #8]
 8009382:	0a1b      	lsrs	r3, r3, #8
 8009384:	b29b      	uxth	r3, r3
 8009386:	b2da      	uxtb	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800938e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009390:	6a39      	ldr	r1, [r7, #32]
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 f9dc 	bl	8009750 <I2C_WaitOnTXEFlagUntilTimeout>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00d      	beq.n	80093ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a2:	2b04      	cmp	r3, #4
 80093a4:	d107      	bne.n	80093b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e005      	b.n	80093c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093ba:	893b      	ldrh	r3, [r7, #8]
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	00010002 	.word	0x00010002

080093d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af02      	add	r7, sp, #8
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	4608      	mov	r0, r1
 80093de:	4611      	mov	r1, r2
 80093e0:	461a      	mov	r2, r3
 80093e2:	4603      	mov	r3, r0
 80093e4:	817b      	strh	r3, [r7, #10]
 80093e6:	460b      	mov	r3, r1
 80093e8:	813b      	strh	r3, [r7, #8]
 80093ea:	4613      	mov	r3, r2
 80093ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800940c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	2200      	movs	r2, #0
 8009416:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 f8c2 	bl	80095a4 <I2C_WaitOnFlagUntilTimeout>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00d      	beq.n	8009442 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009434:	d103      	bne.n	800943e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800943c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e0aa      	b.n	8009598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009442:	897b      	ldrh	r3, [r7, #10]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	461a      	mov	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009450:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009454:	6a3a      	ldr	r2, [r7, #32]
 8009456:	4952      	ldr	r1, [pc, #328]	; (80095a0 <I2C_RequestMemoryRead+0x1cc>)
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 f8fa 	bl	8009652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e097      	b.n	8009598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009468:	2300      	movs	r3, #0
 800946a:	617b      	str	r3, [r7, #20]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	617b      	str	r3, [r7, #20]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800947e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009480:	6a39      	ldr	r1, [r7, #32]
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 f964 	bl	8009750 <I2C_WaitOnTXEFlagUntilTimeout>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00d      	beq.n	80094aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009492:	2b04      	cmp	r3, #4
 8009494:	d107      	bne.n	80094a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e076      	b.n	8009598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094aa:	88fb      	ldrh	r3, [r7, #6]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d105      	bne.n	80094bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094b0:	893b      	ldrh	r3, [r7, #8]
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	611a      	str	r2, [r3, #16]
 80094ba:	e021      	b.n	8009500 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80094bc:	893b      	ldrh	r3, [r7, #8]
 80094be:	0a1b      	lsrs	r3, r3, #8
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094cc:	6a39      	ldr	r1, [r7, #32]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 f93e 	bl	8009750 <I2C_WaitOnTXEFlagUntilTimeout>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00d      	beq.n	80094f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	2b04      	cmp	r3, #4
 80094e0:	d107      	bne.n	80094f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e050      	b.n	8009598 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094f6:	893b      	ldrh	r3, [r7, #8]
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009502:	6a39      	ldr	r1, [r7, #32]
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 f923 	bl	8009750 <I2C_WaitOnTXEFlagUntilTimeout>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00d      	beq.n	800952c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009514:	2b04      	cmp	r3, #4
 8009516:	d107      	bne.n	8009528 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009526:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e035      	b.n	8009598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800953a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	2200      	movs	r2, #0
 8009544:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f82b 	bl	80095a4 <I2C_WaitOnFlagUntilTimeout>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00d      	beq.n	8009570 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009562:	d103      	bne.n	800956c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800956a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e013      	b.n	8009598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009570:	897b      	ldrh	r3, [r7, #10]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	f043 0301 	orr.w	r3, r3, #1
 8009578:	b2da      	uxtb	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	6a3a      	ldr	r2, [r7, #32]
 8009584:	4906      	ldr	r1, [pc, #24]	; (80095a0 <I2C_RequestMemoryRead+0x1cc>)
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 f863 	bl	8009652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	00010002 	.word	0x00010002

080095a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	603b      	str	r3, [r7, #0]
 80095b0:	4613      	mov	r3, r2
 80095b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095b4:	e025      	b.n	8009602 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095bc:	d021      	beq.n	8009602 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095be:	f7fe faaf 	bl	8007b20 <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d302      	bcc.n	80095d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d116      	bne.n	8009602 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2220      	movs	r2, #32
 80095de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	f043 0220 	orr.w	r2, r3, #32
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e023      	b.n	800964a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	0c1b      	lsrs	r3, r3, #16
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b01      	cmp	r3, #1
 800960a:	d10d      	bne.n	8009628 <I2C_WaitOnFlagUntilTimeout+0x84>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	43da      	mvns	r2, r3
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4013      	ands	r3, r2
 8009618:	b29b      	uxth	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	bf0c      	ite	eq
 800961e:	2301      	moveq	r3, #1
 8009620:	2300      	movne	r3, #0
 8009622:	b2db      	uxtb	r3, r3
 8009624:	461a      	mov	r2, r3
 8009626:	e00c      	b.n	8009642 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	43da      	mvns	r2, r3
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	4013      	ands	r3, r2
 8009634:	b29b      	uxth	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	bf0c      	ite	eq
 800963a:	2301      	moveq	r3, #1
 800963c:	2300      	movne	r3, #0
 800963e:	b2db      	uxtb	r3, r3
 8009640:	461a      	mov	r2, r3
 8009642:	79fb      	ldrb	r3, [r7, #7]
 8009644:	429a      	cmp	r2, r3
 8009646:	d0b6      	beq.n	80095b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	60b9      	str	r1, [r7, #8]
 800965c:	607a      	str	r2, [r7, #4]
 800965e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009660:	e051      	b.n	8009706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800966c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009670:	d123      	bne.n	80096ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009680:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800968a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2220      	movs	r2, #32
 8009696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	f043 0204 	orr.w	r2, r3, #4
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e046      	b.n	8009748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c0:	d021      	beq.n	8009706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096c2:	f7fe fa2d 	bl	8007b20 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d302      	bcc.n	80096d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d116      	bne.n	8009706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2220      	movs	r2, #32
 80096e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	f043 0220 	orr.w	r2, r3, #32
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e020      	b.n	8009748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	0c1b      	lsrs	r3, r3, #16
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b01      	cmp	r3, #1
 800970e:	d10c      	bne.n	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	43da      	mvns	r2, r3
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	4013      	ands	r3, r2
 800971c:	b29b      	uxth	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	bf14      	ite	ne
 8009722:	2301      	movne	r3, #1
 8009724:	2300      	moveq	r3, #0
 8009726:	b2db      	uxtb	r3, r3
 8009728:	e00b      	b.n	8009742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	43da      	mvns	r2, r3
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	4013      	ands	r3, r2
 8009736:	b29b      	uxth	r3, r3
 8009738:	2b00      	cmp	r3, #0
 800973a:	bf14      	ite	ne
 800973c:	2301      	movne	r3, #1
 800973e:	2300      	moveq	r3, #0
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d18d      	bne.n	8009662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800975c:	e02d      	b.n	80097ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 f8ce 	bl	8009900 <I2C_IsAcknowledgeFailed>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e02d      	b.n	80097ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009774:	d021      	beq.n	80097ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009776:	f7fe f9d3 	bl	8007b20 <HAL_GetTick>
 800977a:	4602      	mov	r2, r0
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	429a      	cmp	r2, r3
 8009784:	d302      	bcc.n	800978c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d116      	bne.n	80097ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a6:	f043 0220 	orr.w	r2, r3, #32
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e007      	b.n	80097ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c4:	2b80      	cmp	r3, #128	; 0x80
 80097c6:	d1ca      	bne.n	800975e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097de:	e02d      	b.n	800983c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 f88d 	bl	8009900 <I2C_IsAcknowledgeFailed>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e02d      	b.n	800984c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f6:	d021      	beq.n	800983c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097f8:	f7fe f992 	bl	8007b20 <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	429a      	cmp	r2, r3
 8009806:	d302      	bcc.n	800980e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d116      	bne.n	800983c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2220      	movs	r2, #32
 8009818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009828:	f043 0220 	orr.w	r2, r3, #32
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e007      	b.n	800984c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	f003 0304 	and.w	r3, r3, #4
 8009846:	2b04      	cmp	r3, #4
 8009848:	d1ca      	bne.n	80097e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009860:	e042      	b.n	80098e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	f003 0310 	and.w	r3, r3, #16
 800986c:	2b10      	cmp	r3, #16
 800986e:	d119      	bne.n	80098a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f06f 0210 	mvn.w	r2, #16
 8009878:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2220      	movs	r2, #32
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e029      	b.n	80098f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098a4:	f7fe f93c 	bl	8007b20 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d302      	bcc.n	80098ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d116      	bne.n	80098e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2220      	movs	r2, #32
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d4:	f043 0220 	orr.w	r2, r3, #32
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e007      	b.n	80098f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f2:	2b40      	cmp	r3, #64	; 0x40
 80098f4:	d1b5      	bne.n	8009862 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009916:	d11b      	bne.n	8009950 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009920:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2220      	movs	r2, #32
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993c:	f043 0204 	orr.w	r2, r3, #4
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e000      	b.n	8009952 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800995e:	b480      	push	{r7}
 8009960:	b083      	sub	sp, #12
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b20      	cmp	r3, #32
 8009972:	d129      	bne.n	80099c8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2224      	movs	r2, #36	; 0x24
 8009978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f022 0201 	bic.w	r2, r2, #1
 800998a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0210 	bic.w	r2, r2, #16
 800999a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	430a      	orrs	r2, r1
 80099aa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f042 0201 	orr.w	r2, r2, #1
 80099ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	e000      	b.n	80099ca <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80099c8:	2302      	movs	r3, #2
  }
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b085      	sub	sp, #20
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b20      	cmp	r3, #32
 80099ee:	d12a      	bne.n	8009a46 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2224      	movs	r2, #36	; 0x24
 80099f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 0201 	bic.w	r2, r2, #1
 8009a06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009a10:	89fb      	ldrh	r3, [r7, #14]
 8009a12:	f023 030f 	bic.w	r3, r3, #15
 8009a16:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	89fb      	ldrh	r3, [r7, #14]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	89fa      	ldrh	r2, [r7, #14]
 8009a28:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f042 0201 	orr.w	r2, r2, #1
 8009a38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	e000      	b.n	8009a48 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009a46:	2302      	movs	r3, #2
  }
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3714      	adds	r7, #20
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e267      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d075      	beq.n	8009b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a72:	4b88      	ldr	r3, [pc, #544]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	f003 030c 	and.w	r3, r3, #12
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d00c      	beq.n	8009a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a7e:	4b85      	ldr	r3, [pc, #532]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a86:	2b08      	cmp	r3, #8
 8009a88:	d112      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a8a:	4b82      	ldr	r3, [pc, #520]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a96:	d10b      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a98:	4b7e      	ldr	r3, [pc, #504]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d05b      	beq.n	8009b5c <HAL_RCC_OscConfig+0x108>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d157      	bne.n	8009b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e242      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab8:	d106      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x74>
 8009aba:	4b76      	ldr	r3, [pc, #472]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a75      	ldr	r2, [pc, #468]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	e01d      	b.n	8009b04 <HAL_RCC_OscConfig+0xb0>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ad0:	d10c      	bne.n	8009aec <HAL_RCC_OscConfig+0x98>
 8009ad2:	4b70      	ldr	r3, [pc, #448]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a6f      	ldr	r2, [pc, #444]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009adc:	6013      	str	r3, [r2, #0]
 8009ade:	4b6d      	ldr	r3, [pc, #436]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a6c      	ldr	r2, [pc, #432]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae8:	6013      	str	r3, [r2, #0]
 8009aea:	e00b      	b.n	8009b04 <HAL_RCC_OscConfig+0xb0>
 8009aec:	4b69      	ldr	r3, [pc, #420]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a68      	ldr	r2, [pc, #416]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009af6:	6013      	str	r3, [r2, #0]
 8009af8:	4b66      	ldr	r3, [pc, #408]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a65      	ldr	r2, [pc, #404]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d013      	beq.n	8009b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b0c:	f7fe f808 	bl	8007b20 <HAL_GetTick>
 8009b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b12:	e008      	b.n	8009b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b14:	f7fe f804 	bl	8007b20 <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	2b64      	cmp	r3, #100	; 0x64
 8009b20:	d901      	bls.n	8009b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	e207      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b26:	4b5b      	ldr	r3, [pc, #364]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0f0      	beq.n	8009b14 <HAL_RCC_OscConfig+0xc0>
 8009b32:	e014      	b.n	8009b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b34:	f7fd fff4 	bl	8007b20 <HAL_GetTick>
 8009b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b3a:	e008      	b.n	8009b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b3c:	f7fd fff0 	bl	8007b20 <HAL_GetTick>
 8009b40:	4602      	mov	r2, r0
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	2b64      	cmp	r3, #100	; 0x64
 8009b48:	d901      	bls.n	8009b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e1f3      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b4e:	4b51      	ldr	r3, [pc, #324]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1f0      	bne.n	8009b3c <HAL_RCC_OscConfig+0xe8>
 8009b5a:	e000      	b.n	8009b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0302 	and.w	r3, r3, #2
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d063      	beq.n	8009c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b6a:	4b4a      	ldr	r3, [pc, #296]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f003 030c 	and.w	r3, r3, #12
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00b      	beq.n	8009b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b76:	4b47      	ldr	r3, [pc, #284]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b7e:	2b08      	cmp	r3, #8
 8009b80:	d11c      	bne.n	8009bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b82:	4b44      	ldr	r3, [pc, #272]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d116      	bne.n	8009bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b8e:	4b41      	ldr	r3, [pc, #260]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d005      	beq.n	8009ba6 <HAL_RCC_OscConfig+0x152>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d001      	beq.n	8009ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e1c7      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ba6:	4b3b      	ldr	r3, [pc, #236]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	00db      	lsls	r3, r3, #3
 8009bb4:	4937      	ldr	r1, [pc, #220]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bba:	e03a      	b.n	8009c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d020      	beq.n	8009c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009bc4:	4b34      	ldr	r3, [pc, #208]	; (8009c98 <HAL_RCC_OscConfig+0x244>)
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bca:	f7fd ffa9 	bl	8007b20 <HAL_GetTick>
 8009bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bd0:	e008      	b.n	8009be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bd2:	f7fd ffa5 	bl	8007b20 <HAL_GetTick>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d901      	bls.n	8009be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e1a8      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009be4:	4b2b      	ldr	r3, [pc, #172]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0302 	and.w	r3, r3, #2
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0f0      	beq.n	8009bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bf0:	4b28      	ldr	r3, [pc, #160]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	00db      	lsls	r3, r3, #3
 8009bfe:	4925      	ldr	r1, [pc, #148]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	600b      	str	r3, [r1, #0]
 8009c04:	e015      	b.n	8009c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c06:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <HAL_RCC_OscConfig+0x244>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c0c:	f7fd ff88 	bl	8007b20 <HAL_GetTick>
 8009c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c12:	e008      	b.n	8009c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c14:	f7fd ff84 	bl	8007b20 <HAL_GetTick>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d901      	bls.n	8009c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e187      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c26:	4b1b      	ldr	r3, [pc, #108]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0302 	and.w	r3, r3, #2
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1f0      	bne.n	8009c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0308 	and.w	r3, r3, #8
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d036      	beq.n	8009cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	695b      	ldr	r3, [r3, #20]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d016      	beq.n	8009c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c46:	4b15      	ldr	r3, [pc, #84]	; (8009c9c <HAL_RCC_OscConfig+0x248>)
 8009c48:	2201      	movs	r2, #1
 8009c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c4c:	f7fd ff68 	bl	8007b20 <HAL_GetTick>
 8009c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c52:	e008      	b.n	8009c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c54:	f7fd ff64 	bl	8007b20 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e167      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c66:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <HAL_RCC_OscConfig+0x240>)
 8009c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c6a:	f003 0302 	and.w	r3, r3, #2
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0f0      	beq.n	8009c54 <HAL_RCC_OscConfig+0x200>
 8009c72:	e01b      	b.n	8009cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c74:	4b09      	ldr	r3, [pc, #36]	; (8009c9c <HAL_RCC_OscConfig+0x248>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c7a:	f7fd ff51 	bl	8007b20 <HAL_GetTick>
 8009c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c80:	e00e      	b.n	8009ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c82:	f7fd ff4d 	bl	8007b20 <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d907      	bls.n	8009ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e150      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
 8009c94:	40023800 	.word	0x40023800
 8009c98:	42470000 	.word	0x42470000
 8009c9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ca0:	4b88      	ldr	r3, [pc, #544]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1ea      	bne.n	8009c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0304 	and.w	r3, r3, #4
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 8097 	beq.w	8009de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cbe:	4b81      	ldr	r3, [pc, #516]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10f      	bne.n	8009cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cca:	2300      	movs	r3, #0
 8009ccc:	60bb      	str	r3, [r7, #8]
 8009cce:	4b7d      	ldr	r3, [pc, #500]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd2:	4a7c      	ldr	r2, [pc, #496]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8009cda:	4b7a      	ldr	r3, [pc, #488]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ce2:	60bb      	str	r3, [r7, #8]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cea:	4b77      	ldr	r3, [pc, #476]	; (8009ec8 <HAL_RCC_OscConfig+0x474>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d118      	bne.n	8009d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009cf6:	4b74      	ldr	r3, [pc, #464]	; (8009ec8 <HAL_RCC_OscConfig+0x474>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a73      	ldr	r2, [pc, #460]	; (8009ec8 <HAL_RCC_OscConfig+0x474>)
 8009cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d02:	f7fd ff0d 	bl	8007b20 <HAL_GetTick>
 8009d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d08:	e008      	b.n	8009d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d0a:	f7fd ff09 	bl	8007b20 <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d901      	bls.n	8009d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e10c      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d1c:	4b6a      	ldr	r3, [pc, #424]	; (8009ec8 <HAL_RCC_OscConfig+0x474>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0f0      	beq.n	8009d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d106      	bne.n	8009d3e <HAL_RCC_OscConfig+0x2ea>
 8009d30:	4b64      	ldr	r3, [pc, #400]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d34:	4a63      	ldr	r2, [pc, #396]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009d36:	f043 0301 	orr.w	r3, r3, #1
 8009d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d3c:	e01c      	b.n	8009d78 <HAL_RCC_OscConfig+0x324>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	d10c      	bne.n	8009d60 <HAL_RCC_OscConfig+0x30c>
 8009d46:	4b5f      	ldr	r3, [pc, #380]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d4a:	4a5e      	ldr	r2, [pc, #376]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009d4c:	f043 0304 	orr.w	r3, r3, #4
 8009d50:	6713      	str	r3, [r2, #112]	; 0x70
 8009d52:	4b5c      	ldr	r3, [pc, #368]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d56:	4a5b      	ldr	r2, [pc, #364]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009d58:	f043 0301 	orr.w	r3, r3, #1
 8009d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d5e:	e00b      	b.n	8009d78 <HAL_RCC_OscConfig+0x324>
 8009d60:	4b58      	ldr	r3, [pc, #352]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d64:	4a57      	ldr	r2, [pc, #348]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009d66:	f023 0301 	bic.w	r3, r3, #1
 8009d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d6c:	4b55      	ldr	r3, [pc, #340]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d70:	4a54      	ldr	r2, [pc, #336]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009d72:	f023 0304 	bic.w	r3, r3, #4
 8009d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d015      	beq.n	8009dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d80:	f7fd fece 	bl	8007b20 <HAL_GetTick>
 8009d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d86:	e00a      	b.n	8009d9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d88:	f7fd feca 	bl	8007b20 <HAL_GetTick>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d901      	bls.n	8009d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e0cb      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d9e:	4b49      	ldr	r3, [pc, #292]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da2:	f003 0302 	and.w	r3, r3, #2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0ee      	beq.n	8009d88 <HAL_RCC_OscConfig+0x334>
 8009daa:	e014      	b.n	8009dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dac:	f7fd feb8 	bl	8007b20 <HAL_GetTick>
 8009db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009db2:	e00a      	b.n	8009dca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009db4:	f7fd feb4 	bl	8007b20 <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d901      	bls.n	8009dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e0b5      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009dca:	4b3e      	ldr	r3, [pc, #248]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1ee      	bne.n	8009db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d105      	bne.n	8009de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ddc:	4b39      	ldr	r3, [pc, #228]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de0:	4a38      	ldr	r2, [pc, #224]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009de6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 80a1 	beq.w	8009f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009df2:	4b34      	ldr	r3, [pc, #208]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f003 030c 	and.w	r3, r3, #12
 8009dfa:	2b08      	cmp	r3, #8
 8009dfc:	d05c      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d141      	bne.n	8009e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e06:	4b31      	ldr	r3, [pc, #196]	; (8009ecc <HAL_RCC_OscConfig+0x478>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e0c:	f7fd fe88 	bl	8007b20 <HAL_GetTick>
 8009e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e12:	e008      	b.n	8009e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e14:	f7fd fe84 	bl	8007b20 <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d901      	bls.n	8009e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e087      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e26:	4b27      	ldr	r3, [pc, #156]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1f0      	bne.n	8009e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	69da      	ldr	r2, [r3, #28]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	431a      	orrs	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	019b      	lsls	r3, r3, #6
 8009e42:	431a      	orrs	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e48:	085b      	lsrs	r3, r3, #1
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	041b      	lsls	r3, r3, #16
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	061b      	lsls	r3, r3, #24
 8009e56:	491b      	ldr	r1, [pc, #108]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e5c:	4b1b      	ldr	r3, [pc, #108]	; (8009ecc <HAL_RCC_OscConfig+0x478>)
 8009e5e:	2201      	movs	r2, #1
 8009e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e62:	f7fd fe5d 	bl	8007b20 <HAL_GetTick>
 8009e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e68:	e008      	b.n	8009e7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e6a:	f7fd fe59 	bl	8007b20 <HAL_GetTick>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d901      	bls.n	8009e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	e05c      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e7c:	4b11      	ldr	r3, [pc, #68]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d0f0      	beq.n	8009e6a <HAL_RCC_OscConfig+0x416>
 8009e88:	e054      	b.n	8009f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e8a:	4b10      	ldr	r3, [pc, #64]	; (8009ecc <HAL_RCC_OscConfig+0x478>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e90:	f7fd fe46 	bl	8007b20 <HAL_GetTick>
 8009e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e96:	e008      	b.n	8009eaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e98:	f7fd fe42 	bl	8007b20 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d901      	bls.n	8009eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e045      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <HAL_RCC_OscConfig+0x470>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1f0      	bne.n	8009e98 <HAL_RCC_OscConfig+0x444>
 8009eb6:	e03d      	b.n	8009f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d107      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e038      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
 8009ec4:	40023800 	.word	0x40023800
 8009ec8:	40007000 	.word	0x40007000
 8009ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ed0:	4b1b      	ldr	r3, [pc, #108]	; (8009f40 <HAL_RCC_OscConfig+0x4ec>)
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d028      	beq.n	8009f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d121      	bne.n	8009f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d11a      	bne.n	8009f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009f00:	4013      	ands	r3, r2
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d111      	bne.n	8009f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f16:	085b      	lsrs	r3, r3, #1
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d107      	bne.n	8009f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d001      	beq.n	8009f34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e000      	b.n	8009f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	40023800 	.word	0x40023800

08009f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e0cc      	b.n	800a0f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f58:	4b68      	ldr	r3, [pc, #416]	; (800a0fc <HAL_RCC_ClockConfig+0x1b8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 030f 	and.w	r3, r3, #15
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d90c      	bls.n	8009f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f66:	4b65      	ldr	r3, [pc, #404]	; (800a0fc <HAL_RCC_ClockConfig+0x1b8>)
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	b2d2      	uxtb	r2, r2
 8009f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f6e:	4b63      	ldr	r3, [pc, #396]	; (800a0fc <HAL_RCC_ClockConfig+0x1b8>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 030f 	and.w	r3, r3, #15
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d001      	beq.n	8009f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e0b8      	b.n	800a0f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0302 	and.w	r3, r3, #2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d020      	beq.n	8009fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 0304 	and.w	r3, r3, #4
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f98:	4b59      	ldr	r3, [pc, #356]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	4a58      	ldr	r2, [pc, #352]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 8009f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0308 	and.w	r3, r3, #8
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d005      	beq.n	8009fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009fb0:	4b53      	ldr	r3, [pc, #332]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	4a52      	ldr	r2, [pc, #328]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 8009fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fbc:	4b50      	ldr	r3, [pc, #320]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	494d      	ldr	r1, [pc, #308]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d044      	beq.n	800a064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d107      	bne.n	8009ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fe2:	4b47      	ldr	r3, [pc, #284]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d119      	bne.n	800a022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e07f      	b.n	800a0f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d003      	beq.n	800a002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	d107      	bne.n	800a012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a002:	4b3f      	ldr	r3, [pc, #252]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d109      	bne.n	800a022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e06f      	b.n	800a0f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a012:	4b3b      	ldr	r3, [pc, #236]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e067      	b.n	800a0f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a022:	4b37      	ldr	r3, [pc, #220]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f023 0203 	bic.w	r2, r3, #3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	4934      	ldr	r1, [pc, #208]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 800a030:	4313      	orrs	r3, r2
 800a032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a034:	f7fd fd74 	bl	8007b20 <HAL_GetTick>
 800a038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a03a:	e00a      	b.n	800a052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a03c:	f7fd fd70 	bl	8007b20 <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	f241 3288 	movw	r2, #5000	; 0x1388
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d901      	bls.n	800a052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e04f      	b.n	800a0f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a052:	4b2b      	ldr	r3, [pc, #172]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f003 020c 	and.w	r2, r3, #12
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	429a      	cmp	r2, r3
 800a062:	d1eb      	bne.n	800a03c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a064:	4b25      	ldr	r3, [pc, #148]	; (800a0fc <HAL_RCC_ClockConfig+0x1b8>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 030f 	and.w	r3, r3, #15
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d20c      	bcs.n	800a08c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a072:	4b22      	ldr	r3, [pc, #136]	; (800a0fc <HAL_RCC_ClockConfig+0x1b8>)
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	b2d2      	uxtb	r2, r2
 800a078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a07a:	4b20      	ldr	r3, [pc, #128]	; (800a0fc <HAL_RCC_ClockConfig+0x1b8>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 030f 	and.w	r3, r3, #15
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	429a      	cmp	r2, r3
 800a086:	d001      	beq.n	800a08c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e032      	b.n	800a0f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d008      	beq.n	800a0aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a098:	4b19      	ldr	r3, [pc, #100]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	4916      	ldr	r1, [pc, #88]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 0308 	and.w	r3, r3, #8
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d009      	beq.n	800a0ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a0b6:	4b12      	ldr	r3, [pc, #72]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	00db      	lsls	r3, r3, #3
 800a0c4:	490e      	ldr	r1, [pc, #56]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a0ca:	f000 f821 	bl	800a110 <HAL_RCC_GetSysClockFreq>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	4b0b      	ldr	r3, [pc, #44]	; (800a100 <HAL_RCC_ClockConfig+0x1bc>)
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	091b      	lsrs	r3, r3, #4
 800a0d6:	f003 030f 	and.w	r3, r3, #15
 800a0da:	490a      	ldr	r1, [pc, #40]	; (800a104 <HAL_RCC_ClockConfig+0x1c0>)
 800a0dc:	5ccb      	ldrb	r3, [r1, r3]
 800a0de:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e2:	4a09      	ldr	r2, [pc, #36]	; (800a108 <HAL_RCC_ClockConfig+0x1c4>)
 800a0e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a0e6:	4b09      	ldr	r3, [pc, #36]	; (800a10c <HAL_RCC_ClockConfig+0x1c8>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fd fcd4 	bl	8007a98 <HAL_InitTick>

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	40023c00 	.word	0x40023c00
 800a100:	40023800 	.word	0x40023800
 800a104:	08016ca4 	.word	0x08016ca4
 800a108:	20000180 	.word	0x20000180
 800a10c:	200002b8 	.word	0x200002b8

0800a110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a114:	b094      	sub	sp, #80	; 0x50
 800a116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a118:	2300      	movs	r3, #0
 800a11a:	647b      	str	r3, [r7, #68]	; 0x44
 800a11c:	2300      	movs	r3, #0
 800a11e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a120:	2300      	movs	r3, #0
 800a122:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a124:	2300      	movs	r3, #0
 800a126:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a128:	4b79      	ldr	r3, [pc, #484]	; (800a310 <HAL_RCC_GetSysClockFreq+0x200>)
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f003 030c 	and.w	r3, r3, #12
 800a130:	2b08      	cmp	r3, #8
 800a132:	d00d      	beq.n	800a150 <HAL_RCC_GetSysClockFreq+0x40>
 800a134:	2b08      	cmp	r3, #8
 800a136:	f200 80e1 	bhi.w	800a2fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <HAL_RCC_GetSysClockFreq+0x34>
 800a13e:	2b04      	cmp	r3, #4
 800a140:	d003      	beq.n	800a14a <HAL_RCC_GetSysClockFreq+0x3a>
 800a142:	e0db      	b.n	800a2fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a144:	4b73      	ldr	r3, [pc, #460]	; (800a314 <HAL_RCC_GetSysClockFreq+0x204>)
 800a146:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a148:	e0db      	b.n	800a302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a14a:	4b73      	ldr	r3, [pc, #460]	; (800a318 <HAL_RCC_GetSysClockFreq+0x208>)
 800a14c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a14e:	e0d8      	b.n	800a302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a150:	4b6f      	ldr	r3, [pc, #444]	; (800a310 <HAL_RCC_GetSysClockFreq+0x200>)
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a158:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a15a:	4b6d      	ldr	r3, [pc, #436]	; (800a310 <HAL_RCC_GetSysClockFreq+0x200>)
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d063      	beq.n	800a22e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a166:	4b6a      	ldr	r3, [pc, #424]	; (800a310 <HAL_RCC_GetSysClockFreq+0x200>)
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	099b      	lsrs	r3, r3, #6
 800a16c:	2200      	movs	r2, #0
 800a16e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a170:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a178:	633b      	str	r3, [r7, #48]	; 0x30
 800a17a:	2300      	movs	r3, #0
 800a17c:	637b      	str	r3, [r7, #52]	; 0x34
 800a17e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a182:	4622      	mov	r2, r4
 800a184:	462b      	mov	r3, r5
 800a186:	f04f 0000 	mov.w	r0, #0
 800a18a:	f04f 0100 	mov.w	r1, #0
 800a18e:	0159      	lsls	r1, r3, #5
 800a190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a194:	0150      	lsls	r0, r2, #5
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4621      	mov	r1, r4
 800a19c:	1a51      	subs	r1, r2, r1
 800a19e:	6139      	str	r1, [r7, #16]
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	eb63 0301 	sbc.w	r3, r3, r1
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	f04f 0200 	mov.w	r2, #0
 800a1ac:	f04f 0300 	mov.w	r3, #0
 800a1b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1b4:	4659      	mov	r1, fp
 800a1b6:	018b      	lsls	r3, r1, #6
 800a1b8:	4651      	mov	r1, sl
 800a1ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a1be:	4651      	mov	r1, sl
 800a1c0:	018a      	lsls	r2, r1, #6
 800a1c2:	4651      	mov	r1, sl
 800a1c4:	ebb2 0801 	subs.w	r8, r2, r1
 800a1c8:	4659      	mov	r1, fp
 800a1ca:	eb63 0901 	sbc.w	r9, r3, r1
 800a1ce:	f04f 0200 	mov.w	r2, #0
 800a1d2:	f04f 0300 	mov.w	r3, #0
 800a1d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a1da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a1de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a1e2:	4690      	mov	r8, r2
 800a1e4:	4699      	mov	r9, r3
 800a1e6:	4623      	mov	r3, r4
 800a1e8:	eb18 0303 	adds.w	r3, r8, r3
 800a1ec:	60bb      	str	r3, [r7, #8]
 800a1ee:	462b      	mov	r3, r5
 800a1f0:	eb49 0303 	adc.w	r3, r9, r3
 800a1f4:	60fb      	str	r3, [r7, #12]
 800a1f6:	f04f 0200 	mov.w	r2, #0
 800a1fa:	f04f 0300 	mov.w	r3, #0
 800a1fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a202:	4629      	mov	r1, r5
 800a204:	024b      	lsls	r3, r1, #9
 800a206:	4621      	mov	r1, r4
 800a208:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a20c:	4621      	mov	r1, r4
 800a20e:	024a      	lsls	r2, r1, #9
 800a210:	4610      	mov	r0, r2
 800a212:	4619      	mov	r1, r3
 800a214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a216:	2200      	movs	r2, #0
 800a218:	62bb      	str	r3, [r7, #40]	; 0x28
 800a21a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a21c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a220:	f7f6 fd4c 	bl	8000cbc <__aeabi_uldivmod>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	4613      	mov	r3, r2
 800a22a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a22c:	e058      	b.n	800a2e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a22e:	4b38      	ldr	r3, [pc, #224]	; (800a310 <HAL_RCC_GetSysClockFreq+0x200>)
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	099b      	lsrs	r3, r3, #6
 800a234:	2200      	movs	r2, #0
 800a236:	4618      	mov	r0, r3
 800a238:	4611      	mov	r1, r2
 800a23a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a23e:	623b      	str	r3, [r7, #32]
 800a240:	2300      	movs	r3, #0
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
 800a244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a248:	4642      	mov	r2, r8
 800a24a:	464b      	mov	r3, r9
 800a24c:	f04f 0000 	mov.w	r0, #0
 800a250:	f04f 0100 	mov.w	r1, #0
 800a254:	0159      	lsls	r1, r3, #5
 800a256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a25a:	0150      	lsls	r0, r2, #5
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4641      	mov	r1, r8
 800a262:	ebb2 0a01 	subs.w	sl, r2, r1
 800a266:	4649      	mov	r1, r9
 800a268:	eb63 0b01 	sbc.w	fp, r3, r1
 800a26c:	f04f 0200 	mov.w	r2, #0
 800a270:	f04f 0300 	mov.w	r3, #0
 800a274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a27c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a280:	ebb2 040a 	subs.w	r4, r2, sl
 800a284:	eb63 050b 	sbc.w	r5, r3, fp
 800a288:	f04f 0200 	mov.w	r2, #0
 800a28c:	f04f 0300 	mov.w	r3, #0
 800a290:	00eb      	lsls	r3, r5, #3
 800a292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a296:	00e2      	lsls	r2, r4, #3
 800a298:	4614      	mov	r4, r2
 800a29a:	461d      	mov	r5, r3
 800a29c:	4643      	mov	r3, r8
 800a29e:	18e3      	adds	r3, r4, r3
 800a2a0:	603b      	str	r3, [r7, #0]
 800a2a2:	464b      	mov	r3, r9
 800a2a4:	eb45 0303 	adc.w	r3, r5, r3
 800a2a8:	607b      	str	r3, [r7, #4]
 800a2aa:	f04f 0200 	mov.w	r2, #0
 800a2ae:	f04f 0300 	mov.w	r3, #0
 800a2b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	028b      	lsls	r3, r1, #10
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	028a      	lsls	r2, r1, #10
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	61bb      	str	r3, [r7, #24]
 800a2ce:	61fa      	str	r2, [r7, #28]
 800a2d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2d4:	f7f6 fcf2 	bl	8000cbc <__aeabi_uldivmod>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4613      	mov	r3, r2
 800a2de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a2e0:	4b0b      	ldr	r3, [pc, #44]	; (800a310 <HAL_RCC_GetSysClockFreq+0x200>)
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	0c1b      	lsrs	r3, r3, #16
 800a2e6:	f003 0303 	and.w	r3, r3, #3
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a2f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a2fa:	e002      	b.n	800a302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a2fc:	4b05      	ldr	r3, [pc, #20]	; (800a314 <HAL_RCC_GetSysClockFreq+0x204>)
 800a2fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a300:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a304:	4618      	mov	r0, r3
 800a306:	3750      	adds	r7, #80	; 0x50
 800a308:	46bd      	mov	sp, r7
 800a30a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a30e:	bf00      	nop
 800a310:	40023800 	.word	0x40023800
 800a314:	00f42400 	.word	0x00f42400
 800a318:	007a1200 	.word	0x007a1200

0800a31c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a320:	4b03      	ldr	r3, [pc, #12]	; (800a330 <HAL_RCC_GetHCLKFreq+0x14>)
 800a322:	681b      	ldr	r3, [r3, #0]
}
 800a324:	4618      	mov	r0, r3
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	20000180 	.word	0x20000180

0800a334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a338:	f7ff fff0 	bl	800a31c <HAL_RCC_GetHCLKFreq>
 800a33c:	4602      	mov	r2, r0
 800a33e:	4b05      	ldr	r3, [pc, #20]	; (800a354 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	0a9b      	lsrs	r3, r3, #10
 800a344:	f003 0307 	and.w	r3, r3, #7
 800a348:	4903      	ldr	r1, [pc, #12]	; (800a358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a34a:	5ccb      	ldrb	r3, [r1, r3]
 800a34c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a350:	4618      	mov	r0, r3
 800a352:	bd80      	pop	{r7, pc}
 800a354:	40023800 	.word	0x40023800
 800a358:	08016cb4 	.word	0x08016cb4

0800a35c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a360:	f7ff ffdc 	bl	800a31c <HAL_RCC_GetHCLKFreq>
 800a364:	4602      	mov	r2, r0
 800a366:	4b05      	ldr	r3, [pc, #20]	; (800a37c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	0b5b      	lsrs	r3, r3, #13
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	4903      	ldr	r1, [pc, #12]	; (800a380 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a372:	5ccb      	ldrb	r3, [r1, r3]
 800a374:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a378:	4618      	mov	r0, r3
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	40023800 	.word	0x40023800
 800a380:	08016cb4 	.word	0x08016cb4

0800a384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10b      	bne.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d105      	bne.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d075      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a3b8:	4b91      	ldr	r3, [pc, #580]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a3be:	f7fd fbaf 	bl	8007b20 <HAL_GetTick>
 800a3c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3c4:	e008      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a3c6:	f7fd fbab 	bl	8007b20 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d901      	bls.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e189      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3d8:	4b8a      	ldr	r3, [pc, #552]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1f0      	bne.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d009      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	019a      	lsls	r2, r3, #6
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	071b      	lsls	r3, r3, #28
 800a3fc:	4981      	ldr	r1, [pc, #516]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d01f      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a410:	4b7c      	ldr	r3, [pc, #496]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a416:	0f1b      	lsrs	r3, r3, #28
 800a418:	f003 0307 	and.w	r3, r3, #7
 800a41c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	019a      	lsls	r2, r3, #6
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	061b      	lsls	r3, r3, #24
 800a42a:	431a      	orrs	r2, r3
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	071b      	lsls	r3, r3, #28
 800a430:	4974      	ldr	r1, [pc, #464]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a432:	4313      	orrs	r3, r2
 800a434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a438:	4b72      	ldr	r3, [pc, #456]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a43e:	f023 021f 	bic.w	r2, r3, #31
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	3b01      	subs	r3, #1
 800a448:	496e      	ldr	r1, [pc, #440]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00d      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	019a      	lsls	r2, r3, #6
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	061b      	lsls	r3, r3, #24
 800a468:	431a      	orrs	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	071b      	lsls	r3, r3, #28
 800a470:	4964      	ldr	r1, [pc, #400]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a472:	4313      	orrs	r3, r2
 800a474:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a478:	4b61      	ldr	r3, [pc, #388]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a47a:	2201      	movs	r2, #1
 800a47c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a47e:	f7fd fb4f 	bl	8007b20 <HAL_GetTick>
 800a482:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a484:	e008      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a486:	f7fd fb4b 	bl	8007b20 <HAL_GetTick>
 800a48a:	4602      	mov	r2, r0
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	2b02      	cmp	r3, #2
 800a492:	d901      	bls.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e129      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a498:	4b5a      	ldr	r3, [pc, #360]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d0f0      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d105      	bne.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d079      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a4bc:	4b52      	ldr	r3, [pc, #328]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a4c2:	f7fd fb2d 	bl	8007b20 <HAL_GetTick>
 800a4c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a4c8:	e008      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a4ca:	f7fd fb29 	bl	8007b20 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d901      	bls.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e107      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a4dc:	4b49      	ldr	r3, [pc, #292]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4e8:	d0ef      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0304 	and.w	r3, r3, #4
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d020      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a4f6:	4b43      	ldr	r3, [pc, #268]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fc:	0f1b      	lsrs	r3, r3, #28
 800a4fe:	f003 0307 	and.w	r3, r3, #7
 800a502:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	019a      	lsls	r2, r3, #6
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	061b      	lsls	r3, r3, #24
 800a510:	431a      	orrs	r2, r3
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	071b      	lsls	r3, r3, #28
 800a516:	493b      	ldr	r1, [pc, #236]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a51e:	4b39      	ldr	r3, [pc, #228]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a524:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a1b      	ldr	r3, [r3, #32]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	4934      	ldr	r1, [pc, #208]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a532:	4313      	orrs	r3, r2
 800a534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	2b00      	cmp	r3, #0
 800a542:	d01e      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a544:	4b2f      	ldr	r3, [pc, #188]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a54a:	0e1b      	lsrs	r3, r3, #24
 800a54c:	f003 030f 	and.w	r3, r3, #15
 800a550:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	019a      	lsls	r2, r3, #6
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	061b      	lsls	r3, r3, #24
 800a55c:	431a      	orrs	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	071b      	lsls	r3, r3, #28
 800a564:	4927      	ldr	r1, [pc, #156]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a566:	4313      	orrs	r3, r2
 800a568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a56c:	4b25      	ldr	r3, [pc, #148]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a56e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a572:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	4922      	ldr	r1, [pc, #136]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a57c:	4313      	orrs	r3, r2
 800a57e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a582:	4b21      	ldr	r3, [pc, #132]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a584:	2201      	movs	r2, #1
 800a586:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a588:	f7fd faca 	bl	8007b20 <HAL_GetTick>
 800a58c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a58e:	e008      	b.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a590:	f7fd fac6 	bl	8007b20 <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d901      	bls.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e0a4      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a5a2:	4b18      	ldr	r3, [pc, #96]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ae:	d1ef      	bne.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0320 	and.w	r3, r3, #32
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f000 808b 	beq.w	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60fb      	str	r3, [r7, #12]
 800a5c2:	4b10      	ldr	r3, [pc, #64]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	4a0f      	ldr	r2, [pc, #60]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5cc:	6413      	str	r3, [r2, #64]	; 0x40
 800a5ce:	4b0d      	ldr	r3, [pc, #52]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a5da:	4b0c      	ldr	r3, [pc, #48]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a0b      	ldr	r2, [pc, #44]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a5e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a5e6:	f7fd fa9b 	bl	8007b20 <HAL_GetTick>
 800a5ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a5ec:	e010      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a5ee:	f7fd fa97 	bl	8007b20 <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d909      	bls.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e075      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a600:	42470068 	.word	0x42470068
 800a604:	40023800 	.word	0x40023800
 800a608:	42470070 	.word	0x42470070
 800a60c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a610:	4b38      	ldr	r3, [pc, #224]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d0e8      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a61c:	4b36      	ldr	r3, [pc, #216]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a624:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d02f      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a634:	693a      	ldr	r2, [r7, #16]
 800a636:	429a      	cmp	r2, r3
 800a638:	d028      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a63a:	4b2f      	ldr	r3, [pc, #188]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a642:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a644:	4b2d      	ldr	r3, [pc, #180]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a646:	2201      	movs	r2, #1
 800a648:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a64a:	4b2c      	ldr	r3, [pc, #176]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a650:	4a29      	ldr	r2, [pc, #164]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a656:	4b28      	ldr	r3, [pc, #160]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d114      	bne.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a662:	f7fd fa5d 	bl	8007b20 <HAL_GetTick>
 800a666:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a668:	e00a      	b.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a66a:	f7fd fa59 	bl	8007b20 <HAL_GetTick>
 800a66e:	4602      	mov	r2, r0
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	f241 3288 	movw	r2, #5000	; 0x1388
 800a678:	4293      	cmp	r3, r2
 800a67a:	d901      	bls.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e035      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a680:	4b1d      	ldr	r3, [pc, #116]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a684:	f003 0302 	and.w	r3, r3, #2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d0ee      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a698:	d10d      	bne.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a69a:	4b17      	ldr	r3, [pc, #92]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a6aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6ae:	4912      	ldr	r1, [pc, #72]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	608b      	str	r3, [r1, #8]
 800a6b4:	e005      	b.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800a6b6:	4b10      	ldr	r3, [pc, #64]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	4a0f      	ldr	r2, [pc, #60]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a6c0:	6093      	str	r3, [r2, #8]
 800a6c2:	4b0d      	ldr	r3, [pc, #52]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6ce:	490a      	ldr	r1, [pc, #40]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0310 	and.w	r3, r3, #16
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d004      	beq.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a6e6:	4b06      	ldr	r3, [pc, #24]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800a6e8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	40007000 	.word	0x40007000
 800a6f8:	40023800 	.word	0x40023800
 800a6fc:	42470e40 	.word	0x42470e40
 800a700:	424711e0 	.word	0x424711e0

0800a704 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e066      	b.n	800a7e8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	7f5b      	ldrb	r3, [r3, #29]
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b00      	cmp	r3, #0
 800a722:	d105      	bne.n	800a730 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7f9 f8a2 	bl	8003874 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2202      	movs	r2, #2
 800a734:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	22ca      	movs	r2, #202	; 0xca
 800a73c:	625a      	str	r2, [r3, #36]	; 0x24
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2253      	movs	r2, #83	; 0x53
 800a744:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fa45 	bl	800abd6 <RTC_EnterInitMode>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d12c      	bne.n	800a7b0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	6812      	ldr	r2, [r2, #0]
 800a760:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a768:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6899      	ldr	r1, [r3, #8]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	431a      	orrs	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	431a      	orrs	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	68d2      	ldr	r2, [r2, #12]
 800a790:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6919      	ldr	r1, [r3, #16]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	041a      	lsls	r2, r3, #16
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	430a      	orrs	r2, r1
 800a7a4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fa4c 	bl	800ac44 <RTC_ExitInitMode>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d113      	bne.n	800a7de <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a7c4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	699a      	ldr	r2, [r3, #24]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	22ff      	movs	r2, #255	; 0xff
 800a7e4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a7f0:	b590      	push	{r4, r7, lr}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	7f1b      	ldrb	r3, [r3, #28]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d101      	bne.n	800a80c <HAL_RTC_SetTime+0x1c>
 800a808:	2302      	movs	r3, #2
 800a80a:	e087      	b.n	800a91c <HAL_RTC_SetTime+0x12c>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2201      	movs	r2, #1
 800a810:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2202      	movs	r2, #2
 800a816:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d126      	bne.n	800a86c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d102      	bne.n	800a832 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2200      	movs	r2, #0
 800a830:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	4618      	mov	r0, r3
 800a838:	f000 fa29 	bl	800ac8e <RTC_ByteToBcd2>
 800a83c:	4603      	mov	r3, r0
 800a83e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	785b      	ldrb	r3, [r3, #1]
 800a844:	4618      	mov	r0, r3
 800a846:	f000 fa22 	bl	800ac8e <RTC_ByteToBcd2>
 800a84a:	4603      	mov	r3, r0
 800a84c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a84e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	789b      	ldrb	r3, [r3, #2]
 800a854:	4618      	mov	r0, r3
 800a856:	f000 fa1a 	bl	800ac8e <RTC_ByteToBcd2>
 800a85a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a85c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	78db      	ldrb	r3, [r3, #3]
 800a864:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a866:	4313      	orrs	r3, r2
 800a868:	617b      	str	r3, [r7, #20]
 800a86a:	e018      	b.n	800a89e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a876:	2b00      	cmp	r3, #0
 800a878:	d102      	bne.n	800a880 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2200      	movs	r2, #0
 800a87e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	785b      	ldrb	r3, [r3, #1]
 800a88a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a88c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a892:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	78db      	ldrb	r3, [r3, #3]
 800a898:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a89a:	4313      	orrs	r3, r2
 800a89c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	22ca      	movs	r2, #202	; 0xca
 800a8a4:	625a      	str	r2, [r3, #36]	; 0x24
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2253      	movs	r2, #83	; 0x53
 800a8ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f000 f991 	bl	800abd6 <RTC_EnterInitMode>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a8b8:	7cfb      	ldrb	r3, [r7, #19]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d120      	bne.n	800a900 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a8c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a8cc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6899      	ldr	r1, [r3, #8]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	68da      	ldr	r2, [r3, #12]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	431a      	orrs	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	430a      	orrs	r2, r1
 800a8f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 f9a4 	bl	800ac44 <RTC_ExitInitMode>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a900:	7cfb      	ldrb	r3, [r7, #19]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d102      	bne.n	800a90c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	22ff      	movs	r2, #255	; 0xff
 800a912:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	771a      	strb	r2, [r3, #28]

  return status;
 800a91a:	7cfb      	ldrb	r3, [r7, #19]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	371c      	adds	r7, #28
 800a920:	46bd      	mov	sp, r7
 800a922:	bd90      	pop	{r4, r7, pc}

0800a924 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a930:	2300      	movs	r3, #0
 800a932:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a956:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a95a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	0c1b      	lsrs	r3, r3, #16
 800a960:	b2db      	uxtb	r3, r3
 800a962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a966:	b2da      	uxtb	r2, r3
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	0a1b      	lsrs	r3, r3, #8
 800a970:	b2db      	uxtb	r3, r3
 800a972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a976:	b2da      	uxtb	r2, r3
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a984:	b2da      	uxtb	r2, r3
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	0d9b      	lsrs	r3, r3, #22
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	b2da      	uxtb	r2, r3
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d11a      	bne.n	800a9d6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 f98f 	bl	800acc8 <RTC_Bcd2ToByte>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	785b      	ldrb	r3, [r3, #1]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 f986 	bl	800acc8 <RTC_Bcd2ToByte>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	461a      	mov	r2, r3
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	789b      	ldrb	r3, [r3, #2]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f97d 	bl	800acc8 <RTC_Bcd2ToByte>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3718      	adds	r7, #24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a9e0:	b590      	push	{r4, r7, lr}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	7f1b      	ldrb	r3, [r3, #28]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d101      	bne.n	800a9fc <HAL_RTC_SetDate+0x1c>
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	e071      	b.n	800aae0 <HAL_RTC_SetDate+0x100>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2202      	movs	r2, #2
 800aa06:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10e      	bne.n	800aa2c <HAL_RTC_SetDate+0x4c>
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	785b      	ldrb	r3, [r3, #1]
 800aa12:	f003 0310 	and.w	r3, r3, #16
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d008      	beq.n	800aa2c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	785b      	ldrb	r3, [r3, #1]
 800aa1e:	f023 0310 	bic.w	r3, r3, #16
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	330a      	adds	r3, #10
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d11c      	bne.n	800aa6c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	78db      	ldrb	r3, [r3, #3]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 f929 	bl	800ac8e <RTC_ByteToBcd2>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	785b      	ldrb	r3, [r3, #1]
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 f922 	bl	800ac8e <RTC_ByteToBcd2>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aa4e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	789b      	ldrb	r3, [r3, #2]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 f91a 	bl	800ac8e <RTC_ByteToBcd2>
 800aa5a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aa5c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aa66:	4313      	orrs	r3, r2
 800aa68:	617b      	str	r3, [r7, #20]
 800aa6a:	e00e      	b.n	800aa8a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	78db      	ldrb	r3, [r3, #3]
 800aa70:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	785b      	ldrb	r3, [r3, #1]
 800aa76:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800aa78:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800aa7e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800aa86:	4313      	orrs	r3, r2
 800aa88:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	22ca      	movs	r2, #202	; 0xca
 800aa90:	625a      	str	r2, [r3, #36]	; 0x24
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2253      	movs	r2, #83	; 0x53
 800aa98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 f89b 	bl	800abd6 <RTC_EnterInitMode>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800aaa4:	7cfb      	ldrb	r3, [r7, #19]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10c      	bne.n	800aac4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aab4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aab8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f000 f8c2 	bl	800ac44 <RTC_ExitInitMode>
 800aac0:	4603      	mov	r3, r0
 800aac2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800aac4:	7cfb      	ldrb	r3, [r7, #19]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d102      	bne.n	800aad0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2201      	movs	r2, #1
 800aace:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	22ff      	movs	r2, #255	; 0xff
 800aad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	771a      	strb	r2, [r3, #28]

  return status;
 800aade:	7cfb      	ldrb	r3, [r7, #19]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	371c      	adds	r7, #28
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd90      	pop	{r4, r7, pc}

0800aae8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ab02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ab06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	0c1b      	lsrs	r3, r3, #16
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	0a1b      	lsrs	r3, r3, #8
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	f003 031f 	and.w	r3, r3, #31
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	0b5b      	lsrs	r3, r3, #13
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	f003 0307 	and.w	r3, r3, #7
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d11a      	bne.n	800ab7c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	78db      	ldrb	r3, [r3, #3]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 f8bc 	bl	800acc8 <RTC_Bcd2ToByte>
 800ab50:	4603      	mov	r3, r0
 800ab52:	461a      	mov	r2, r3
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	785b      	ldrb	r3, [r3, #1]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 f8b3 	bl	800acc8 <RTC_Bcd2ToByte>
 800ab62:	4603      	mov	r3, r0
 800ab64:	461a      	mov	r2, r3
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	789b      	ldrb	r3, [r3, #2]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 f8aa 	bl	800acc8 <RTC_Bcd2ToByte>
 800ab74:	4603      	mov	r3, r0
 800ab76:	461a      	mov	r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3718      	adds	r7, #24
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68da      	ldr	r2, [r3, #12]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800aba0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aba2:	f7fc ffbd 	bl	8007b20 <HAL_GetTick>
 800aba6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aba8:	e009      	b.n	800abbe <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800abaa:	f7fc ffb9 	bl	8007b20 <HAL_GetTick>
 800abae:	4602      	mov	r2, r0
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abb8:	d901      	bls.n	800abbe <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	e007      	b.n	800abce <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f003 0320 	and.w	r3, r3, #32
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0ee      	beq.n	800abaa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800abde:	2300      	movs	r3, #0
 800abe0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d122      	bne.n	800ac3a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68da      	ldr	r2, [r3, #12]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ac02:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ac04:	f7fc ff8c 	bl	8007b20 <HAL_GetTick>
 800ac08:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ac0a:	e00c      	b.n	800ac26 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ac0c:	f7fc ff88 	bl	8007b20 <HAL_GetTick>
 800ac10:	4602      	mov	r2, r0
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac1a:	d904      	bls.n	800ac26 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2204      	movs	r2, #4
 800ac20:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d102      	bne.n	800ac3a <RTC_EnterInitMode+0x64>
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d1e8      	bne.n	800ac0c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68da      	ldr	r2, [r3, #12]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac5e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10a      	bne.n	800ac84 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7ff ff89 	bl	800ab86 <HAL_RTC_WaitForSynchro>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d004      	beq.n	800ac84 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2204      	movs	r2, #4
 800ac7e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b085      	sub	sp, #20
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	4603      	mov	r3, r0
 800ac96:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800ac9c:	e005      	b.n	800acaa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800ac9e:	7bfb      	ldrb	r3, [r7, #15]
 800aca0:	3301      	adds	r3, #1
 800aca2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	3b0a      	subs	r3, #10
 800aca8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800acaa:	79fb      	ldrb	r3, [r7, #7]
 800acac:	2b09      	cmp	r3, #9
 800acae:	d8f6      	bhi.n	800ac9e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	4313      	orrs	r3, r2
 800acba:	b2db      	uxtb	r3, r3
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	4603      	mov	r3, r0
 800acd0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	091b      	lsrs	r3, r3, #4
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	461a      	mov	r2, r3
 800acde:	0092      	lsls	r2, r2, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	005b      	lsls	r3, r3, #1
 800ace4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	f003 030f 	and.w	r3, r3, #15
 800acec:	b2da      	uxtb	r2, r3
 800acee:	7bfb      	ldrb	r3, [r7, #15]
 800acf0:	4413      	add	r3, r2
 800acf2:	b2db      	uxtb	r3, r3
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d101      	bne.n	800ad12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e07b      	b.n	800ae0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d108      	bne.n	800ad2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad22:	d009      	beq.n	800ad38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	61da      	str	r2, [r3, #28]
 800ad2a:	e005      	b.n	800ad38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d106      	bne.n	800ad58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7f8 fdee 	bl	8003934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ad80:	431a      	orrs	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad8a:	431a      	orrs	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	431a      	orrs	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	695b      	ldr	r3, [r3, #20]
 800ad9a:	f003 0301 	and.w	r3, r3, #1
 800ad9e:	431a      	orrs	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ada8:	431a      	orrs	r2, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	69db      	ldr	r3, [r3, #28]
 800adae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adb2:	431a      	orrs	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adbc:	ea42 0103 	orr.w	r1, r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	0c1b      	lsrs	r3, r3, #16
 800add6:	f003 0104 	and.w	r1, r3, #4
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	f003 0210 	and.w	r2, r3, #16
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	430a      	orrs	r2, r1
 800ade8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	69da      	ldr	r2, [r3, #28]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800adf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b088      	sub	sp, #32
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	60b9      	str	r1, [r7, #8]
 800ae1c:	603b      	str	r3, [r7, #0]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d101      	bne.n	800ae34 <HAL_SPI_Transmit+0x22>
 800ae30:	2302      	movs	r3, #2
 800ae32:	e126      	b.n	800b082 <HAL_SPI_Transmit+0x270>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae3c:	f7fc fe70 	bl	8007b20 <HAL_GetTick>
 800ae40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ae42:	88fb      	ldrh	r3, [r7, #6]
 800ae44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d002      	beq.n	800ae58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ae52:	2302      	movs	r3, #2
 800ae54:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ae56:	e10b      	b.n	800b070 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <HAL_SPI_Transmit+0x52>
 800ae5e:	88fb      	ldrh	r3, [r7, #6]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d102      	bne.n	800ae6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ae68:	e102      	b.n	800b070 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2203      	movs	r2, #3
 800ae6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	88fa      	ldrh	r2, [r7, #6]
 800ae82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	88fa      	ldrh	r2, [r7, #6]
 800ae88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeb0:	d10f      	bne.n	800aed2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aec0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aed0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aedc:	2b40      	cmp	r3, #64	; 0x40
 800aede:	d007      	beq.n	800aef0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aeee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aef8:	d14b      	bne.n	800af92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d002      	beq.n	800af08 <HAL_SPI_Transmit+0xf6>
 800af02:	8afb      	ldrh	r3, [r7, #22]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d13e      	bne.n	800af86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0c:	881a      	ldrh	r2, [r3, #0]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af18:	1c9a      	adds	r2, r3, #2
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af22:	b29b      	uxth	r3, r3
 800af24:	3b01      	subs	r3, #1
 800af26:	b29a      	uxth	r2, r3
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800af2c:	e02b      	b.n	800af86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f003 0302 	and.w	r3, r3, #2
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d112      	bne.n	800af62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af40:	881a      	ldrh	r2, [r3, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4c:	1c9a      	adds	r2, r3, #2
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af56:	b29b      	uxth	r3, r3
 800af58:	3b01      	subs	r3, #1
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	86da      	strh	r2, [r3, #54]	; 0x36
 800af60:	e011      	b.n	800af86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af62:	f7fc fddd 	bl	8007b20 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d803      	bhi.n	800af7a <HAL_SPI_Transmit+0x168>
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af78:	d102      	bne.n	800af80 <HAL_SPI_Transmit+0x16e>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d102      	bne.n	800af86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	77fb      	strb	r3, [r7, #31]
          goto error;
 800af84:	e074      	b.n	800b070 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1ce      	bne.n	800af2e <HAL_SPI_Transmit+0x11c>
 800af90:	e04c      	b.n	800b02c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <HAL_SPI_Transmit+0x18e>
 800af9a:	8afb      	ldrh	r3, [r7, #22]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d140      	bne.n	800b022 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	330c      	adds	r3, #12
 800afaa:	7812      	ldrb	r2, [r2, #0]
 800afac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb2:	1c5a      	adds	r2, r3, #1
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	3b01      	subs	r3, #1
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800afc6:	e02c      	b.n	800b022 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	f003 0302 	and.w	r3, r3, #2
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d113      	bne.n	800affe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	330c      	adds	r3, #12
 800afe0:	7812      	ldrb	r2, [r2, #0]
 800afe2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe8:	1c5a      	adds	r2, r3, #1
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	3b01      	subs	r3, #1
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	86da      	strh	r2, [r3, #54]	; 0x36
 800affc:	e011      	b.n	800b022 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800affe:	f7fc fd8f 	bl	8007b20 <HAL_GetTick>
 800b002:	4602      	mov	r2, r0
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d803      	bhi.n	800b016 <HAL_SPI_Transmit+0x204>
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b014:	d102      	bne.n	800b01c <HAL_SPI_Transmit+0x20a>
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d102      	bne.n	800b022 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b01c:	2303      	movs	r3, #3
 800b01e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b020:	e026      	b.n	800b070 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b026:	b29b      	uxth	r3, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1cd      	bne.n	800afc8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b02c:	69ba      	ldr	r2, [r7, #24]
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f000 f8b3 	bl	800b19c <SPI_EndRxTxTransaction>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2220      	movs	r2, #32
 800b040:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b04a:	2300      	movs	r3, #0
 800b04c:	613b      	str	r3, [r7, #16]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	613b      	str	r3, [r7, #16]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	613b      	str	r3, [r7, #16]
 800b05e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	77fb      	strb	r3, [r7, #31]
 800b06c:	e000      	b.n	800b070 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b06e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b080:	7ffb      	ldrb	r3, [r7, #31]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3720      	adds	r7, #32
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
	...

0800b08c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b088      	sub	sp, #32
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	603b      	str	r3, [r7, #0]
 800b098:	4613      	mov	r3, r2
 800b09a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b09c:	f7fc fd40 	bl	8007b20 <HAL_GetTick>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a4:	1a9b      	subs	r3, r3, r2
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b0ac:	f7fc fd38 	bl	8007b20 <HAL_GetTick>
 800b0b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b0b2:	4b39      	ldr	r3, [pc, #228]	; (800b198 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	015b      	lsls	r3, r3, #5
 800b0b8:	0d1b      	lsrs	r3, r3, #20
 800b0ba:	69fa      	ldr	r2, [r7, #28]
 800b0bc:	fb02 f303 	mul.w	r3, r2, r3
 800b0c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b0c2:	e054      	b.n	800b16e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ca:	d050      	beq.n	800b16e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b0cc:	f7fc fd28 	bl	8007b20 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	69fa      	ldr	r2, [r7, #28]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d902      	bls.n	800b0e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d13d      	bne.n	800b15e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	685a      	ldr	r2, [r3, #4]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b0f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0fa:	d111      	bne.n	800b120 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b104:	d004      	beq.n	800b110 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b10e:	d107      	bne.n	800b120 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b11e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b128:	d10f      	bne.n	800b14a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b148:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b15a:	2303      	movs	r3, #3
 800b15c:	e017      	b.n	800b18e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b164:	2300      	movs	r3, #0
 800b166:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	3b01      	subs	r3, #1
 800b16c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689a      	ldr	r2, [r3, #8]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	4013      	ands	r3, r2
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	bf0c      	ite	eq
 800b17e:	2301      	moveq	r3, #1
 800b180:	2300      	movne	r3, #0
 800b182:	b2db      	uxtb	r3, r3
 800b184:	461a      	mov	r2, r3
 800b186:	79fb      	ldrb	r3, [r7, #7]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d19b      	bne.n	800b0c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3720      	adds	r7, #32
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20000180 	.word	0x20000180

0800b19c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	af02      	add	r7, sp, #8
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b1a8:	4b1b      	ldr	r3, [pc, #108]	; (800b218 <SPI_EndRxTxTransaction+0x7c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a1b      	ldr	r2, [pc, #108]	; (800b21c <SPI_EndRxTxTransaction+0x80>)
 800b1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b2:	0d5b      	lsrs	r3, r3, #21
 800b1b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1b8:	fb02 f303 	mul.w	r3, r2, r3
 800b1bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1c6:	d112      	bne.n	800b1ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	2180      	movs	r1, #128	; 0x80
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f7ff ff5a 	bl	800b08c <SPI_WaitFlagStateUntilTimeout>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d016      	beq.n	800b20c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e2:	f043 0220 	orr.w	r2, r3, #32
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e00f      	b.n	800b20e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00a      	beq.n	800b20a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b204:	2b80      	cmp	r3, #128	; 0x80
 800b206:	d0f2      	beq.n	800b1ee <SPI_EndRxTxTransaction+0x52>
 800b208:	e000      	b.n	800b20c <SPI_EndRxTxTransaction+0x70>
        break;
 800b20a:	bf00      	nop
  }

  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20000180 	.word	0x20000180
 800b21c:	165e9f81 	.word	0x165e9f81

0800b220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e041      	b.n	800b2b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d106      	bne.n	800b24c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7f8 fe04 	bl	8003e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2202      	movs	r2, #2
 800b250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3304      	adds	r3, #4
 800b25c:	4619      	mov	r1, r3
 800b25e:	4610      	mov	r0, r2
 800b260:	f000 fc7a 	bl	800bb58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
	...

0800b2c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d001      	beq.n	800b2d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e04e      	b.n	800b376 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2202      	movs	r2, #2
 800b2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f042 0201 	orr.w	r2, r2, #1
 800b2ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a23      	ldr	r2, [pc, #140]	; (800b384 <HAL_TIM_Base_Start_IT+0xc4>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d022      	beq.n	800b340 <HAL_TIM_Base_Start_IT+0x80>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b302:	d01d      	beq.n	800b340 <HAL_TIM_Base_Start_IT+0x80>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a1f      	ldr	r2, [pc, #124]	; (800b388 <HAL_TIM_Base_Start_IT+0xc8>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d018      	beq.n	800b340 <HAL_TIM_Base_Start_IT+0x80>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a1e      	ldr	r2, [pc, #120]	; (800b38c <HAL_TIM_Base_Start_IT+0xcc>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d013      	beq.n	800b340 <HAL_TIM_Base_Start_IT+0x80>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a1c      	ldr	r2, [pc, #112]	; (800b390 <HAL_TIM_Base_Start_IT+0xd0>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d00e      	beq.n	800b340 <HAL_TIM_Base_Start_IT+0x80>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a1b      	ldr	r2, [pc, #108]	; (800b394 <HAL_TIM_Base_Start_IT+0xd4>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d009      	beq.n	800b340 <HAL_TIM_Base_Start_IT+0x80>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a19      	ldr	r2, [pc, #100]	; (800b398 <HAL_TIM_Base_Start_IT+0xd8>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d004      	beq.n	800b340 <HAL_TIM_Base_Start_IT+0x80>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a18      	ldr	r2, [pc, #96]	; (800b39c <HAL_TIM_Base_Start_IT+0xdc>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d111      	bne.n	800b364 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	f003 0307 	and.w	r3, r3, #7
 800b34a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2b06      	cmp	r3, #6
 800b350:	d010      	beq.n	800b374 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f042 0201 	orr.w	r2, r2, #1
 800b360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b362:	e007      	b.n	800b374 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f042 0201 	orr.w	r2, r2, #1
 800b372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	40010000 	.word	0x40010000
 800b388:	40000400 	.word	0x40000400
 800b38c:	40000800 	.word	0x40000800
 800b390:	40000c00 	.word	0x40000c00
 800b394:	40010400 	.word	0x40010400
 800b398:	40014000 	.word	0x40014000
 800b39c:	40001800 	.word	0x40001800

0800b3a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e041      	b.n	800b436 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d106      	bne.n	800b3cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f839 	bl	800b43e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2202      	movs	r2, #2
 800b3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	4619      	mov	r1, r3
 800b3de:	4610      	mov	r0, r2
 800b3e0:	f000 fbba 	bl	800bb58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b43e:	b480      	push	{r7}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b446:	bf00      	nop
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
	...

0800b454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d109      	bne.n	800b478 <HAL_TIM_PWM_Start+0x24>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	bf14      	ite	ne
 800b470:	2301      	movne	r3, #1
 800b472:	2300      	moveq	r3, #0
 800b474:	b2db      	uxtb	r3, r3
 800b476:	e022      	b.n	800b4be <HAL_TIM_PWM_Start+0x6a>
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	2b04      	cmp	r3, #4
 800b47c:	d109      	bne.n	800b492 <HAL_TIM_PWM_Start+0x3e>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b01      	cmp	r3, #1
 800b488:	bf14      	ite	ne
 800b48a:	2301      	movne	r3, #1
 800b48c:	2300      	moveq	r3, #0
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	e015      	b.n	800b4be <HAL_TIM_PWM_Start+0x6a>
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b08      	cmp	r3, #8
 800b496:	d109      	bne.n	800b4ac <HAL_TIM_PWM_Start+0x58>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	bf14      	ite	ne
 800b4a4:	2301      	movne	r3, #1
 800b4a6:	2300      	moveq	r3, #0
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	e008      	b.n	800b4be <HAL_TIM_PWM_Start+0x6a>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	bf14      	ite	ne
 800b4b8:	2301      	movne	r3, #1
 800b4ba:	2300      	moveq	r3, #0
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e07c      	b.n	800b5c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d104      	bne.n	800b4d6 <HAL_TIM_PWM_Start+0x82>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2202      	movs	r2, #2
 800b4d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4d4:	e013      	b.n	800b4fe <HAL_TIM_PWM_Start+0xaa>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b04      	cmp	r3, #4
 800b4da:	d104      	bne.n	800b4e6 <HAL_TIM_PWM_Start+0x92>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2202      	movs	r2, #2
 800b4e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4e4:	e00b      	b.n	800b4fe <HAL_TIM_PWM_Start+0xaa>
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	2b08      	cmp	r3, #8
 800b4ea:	d104      	bne.n	800b4f6 <HAL_TIM_PWM_Start+0xa2>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2202      	movs	r2, #2
 800b4f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4f4:	e003      	b.n	800b4fe <HAL_TIM_PWM_Start+0xaa>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2201      	movs	r2, #1
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	4618      	mov	r0, r3
 800b508:	f000 fe10 	bl	800c12c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a2d      	ldr	r2, [pc, #180]	; (800b5c8 <HAL_TIM_PWM_Start+0x174>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d004      	beq.n	800b520 <HAL_TIM_PWM_Start+0xcc>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a2c      	ldr	r2, [pc, #176]	; (800b5cc <HAL_TIM_PWM_Start+0x178>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d101      	bne.n	800b524 <HAL_TIM_PWM_Start+0xd0>
 800b520:	2301      	movs	r3, #1
 800b522:	e000      	b.n	800b526 <HAL_TIM_PWM_Start+0xd2>
 800b524:	2300      	movs	r3, #0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d007      	beq.n	800b53a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b538:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a22      	ldr	r2, [pc, #136]	; (800b5c8 <HAL_TIM_PWM_Start+0x174>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d022      	beq.n	800b58a <HAL_TIM_PWM_Start+0x136>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b54c:	d01d      	beq.n	800b58a <HAL_TIM_PWM_Start+0x136>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a1f      	ldr	r2, [pc, #124]	; (800b5d0 <HAL_TIM_PWM_Start+0x17c>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d018      	beq.n	800b58a <HAL_TIM_PWM_Start+0x136>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a1d      	ldr	r2, [pc, #116]	; (800b5d4 <HAL_TIM_PWM_Start+0x180>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d013      	beq.n	800b58a <HAL_TIM_PWM_Start+0x136>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a1c      	ldr	r2, [pc, #112]	; (800b5d8 <HAL_TIM_PWM_Start+0x184>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d00e      	beq.n	800b58a <HAL_TIM_PWM_Start+0x136>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a16      	ldr	r2, [pc, #88]	; (800b5cc <HAL_TIM_PWM_Start+0x178>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d009      	beq.n	800b58a <HAL_TIM_PWM_Start+0x136>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a18      	ldr	r2, [pc, #96]	; (800b5dc <HAL_TIM_PWM_Start+0x188>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d004      	beq.n	800b58a <HAL_TIM_PWM_Start+0x136>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a16      	ldr	r2, [pc, #88]	; (800b5e0 <HAL_TIM_PWM_Start+0x18c>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d111      	bne.n	800b5ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	f003 0307 	and.w	r3, r3, #7
 800b594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b06      	cmp	r3, #6
 800b59a:	d010      	beq.n	800b5be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f042 0201 	orr.w	r2, r2, #1
 800b5aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5ac:	e007      	b.n	800b5be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f042 0201 	orr.w	r2, r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	40010000 	.word	0x40010000
 800b5cc:	40010400 	.word	0x40010400
 800b5d0:	40000400 	.word	0x40000400
 800b5d4:	40000800 	.word	0x40000800
 800b5d8:	40000c00 	.word	0x40000c00
 800b5dc:	40014000 	.word	0x40014000
 800b5e0:	40001800 	.word	0x40001800

0800b5e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	f003 0302 	and.w	r3, r3, #2
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d122      	bne.n	800b640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	f003 0302 	and.w	r3, r3, #2
 800b604:	2b02      	cmp	r3, #2
 800b606:	d11b      	bne.n	800b640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f06f 0202 	mvn.w	r2, #2
 800b610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	699b      	ldr	r3, [r3, #24]
 800b61e:	f003 0303 	and.w	r3, r3, #3
 800b622:	2b00      	cmp	r3, #0
 800b624:	d003      	beq.n	800b62e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fa77 	bl	800bb1a <HAL_TIM_IC_CaptureCallback>
 800b62c:	e005      	b.n	800b63a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fa69 	bl	800bb06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fa7a 	bl	800bb2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	f003 0304 	and.w	r3, r3, #4
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	d122      	bne.n	800b694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	f003 0304 	and.w	r3, r3, #4
 800b658:	2b04      	cmp	r3, #4
 800b65a:	d11b      	bne.n	800b694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f06f 0204 	mvn.w	r2, #4
 800b664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2202      	movs	r2, #2
 800b66a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	699b      	ldr	r3, [r3, #24]
 800b672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fa4d 	bl	800bb1a <HAL_TIM_IC_CaptureCallback>
 800b680:	e005      	b.n	800b68e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fa3f 	bl	800bb06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fa50 	bl	800bb2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	f003 0308 	and.w	r3, r3, #8
 800b69e:	2b08      	cmp	r3, #8
 800b6a0:	d122      	bne.n	800b6e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	f003 0308 	and.w	r3, r3, #8
 800b6ac:	2b08      	cmp	r3, #8
 800b6ae:	d11b      	bne.n	800b6e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f06f 0208 	mvn.w	r2, #8
 800b6b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2204      	movs	r2, #4
 800b6be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	69db      	ldr	r3, [r3, #28]
 800b6c6:	f003 0303 	and.w	r3, r3, #3
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d003      	beq.n	800b6d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fa23 	bl	800bb1a <HAL_TIM_IC_CaptureCallback>
 800b6d4:	e005      	b.n	800b6e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fa15 	bl	800bb06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fa26 	bl	800bb2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	f003 0310 	and.w	r3, r3, #16
 800b6f2:	2b10      	cmp	r3, #16
 800b6f4:	d122      	bne.n	800b73c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	f003 0310 	and.w	r3, r3, #16
 800b700:	2b10      	cmp	r3, #16
 800b702:	d11b      	bne.n	800b73c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f06f 0210 	mvn.w	r2, #16
 800b70c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2208      	movs	r2, #8
 800b712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	69db      	ldr	r3, [r3, #28]
 800b71a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d003      	beq.n	800b72a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f9f9 	bl	800bb1a <HAL_TIM_IC_CaptureCallback>
 800b728:	e005      	b.n	800b736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f9eb 	bl	800bb06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f9fc 	bl	800bb2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	2b01      	cmp	r3, #1
 800b748:	d10e      	bne.n	800b768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	f003 0301 	and.w	r3, r3, #1
 800b754:	2b01      	cmp	r3, #1
 800b756:	d107      	bne.n	800b768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f06f 0201 	mvn.w	r2, #1
 800b760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7f7 ffc6 	bl	80036f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b772:	2b80      	cmp	r3, #128	; 0x80
 800b774:	d10e      	bne.n	800b794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b780:	2b80      	cmp	r3, #128	; 0x80
 800b782:	d107      	bne.n	800b794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b78c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fdca 	bl	800c328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b79e:	2b40      	cmp	r3, #64	; 0x40
 800b7a0:	d10e      	bne.n	800b7c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ac:	2b40      	cmp	r3, #64	; 0x40
 800b7ae:	d107      	bne.n	800b7c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f9c1 	bl	800bb42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	f003 0320 	and.w	r3, r3, #32
 800b7ca:	2b20      	cmp	r3, #32
 800b7cc:	d10e      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f003 0320 	and.w	r3, r3, #32
 800b7d8:	2b20      	cmp	r3, #32
 800b7da:	d107      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f06f 0220 	mvn.w	r2, #32
 800b7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fd94 	bl	800c314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d101      	bne.n	800b812 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b80e:	2302      	movs	r3, #2
 800b810:	e0ae      	b.n	800b970 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b0c      	cmp	r3, #12
 800b81e:	f200 809f 	bhi.w	800b960 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b822:	a201      	add	r2, pc, #4	; (adr r2, 800b828 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b828:	0800b85d 	.word	0x0800b85d
 800b82c:	0800b961 	.word	0x0800b961
 800b830:	0800b961 	.word	0x0800b961
 800b834:	0800b961 	.word	0x0800b961
 800b838:	0800b89d 	.word	0x0800b89d
 800b83c:	0800b961 	.word	0x0800b961
 800b840:	0800b961 	.word	0x0800b961
 800b844:	0800b961 	.word	0x0800b961
 800b848:	0800b8df 	.word	0x0800b8df
 800b84c:	0800b961 	.word	0x0800b961
 800b850:	0800b961 	.word	0x0800b961
 800b854:	0800b961 	.word	0x0800b961
 800b858:	0800b91f 	.word	0x0800b91f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68b9      	ldr	r1, [r7, #8]
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fa18 	bl	800bc98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	699a      	ldr	r2, [r3, #24]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0208 	orr.w	r2, r2, #8
 800b876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	699a      	ldr	r2, [r3, #24]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f022 0204 	bic.w	r2, r2, #4
 800b886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	6999      	ldr	r1, [r3, #24]
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	691a      	ldr	r2, [r3, #16]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	430a      	orrs	r2, r1
 800b898:	619a      	str	r2, [r3, #24]
      break;
 800b89a:	e064      	b.n	800b966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68b9      	ldr	r1, [r7, #8]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 fa68 	bl	800bd78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	699a      	ldr	r2, [r3, #24]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	699a      	ldr	r2, [r3, #24]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6999      	ldr	r1, [r3, #24]
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	021a      	lsls	r2, r3, #8
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	619a      	str	r2, [r3, #24]
      break;
 800b8dc:	e043      	b.n	800b966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68b9      	ldr	r1, [r7, #8]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f000 fabd 	bl	800be64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	69da      	ldr	r2, [r3, #28]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f042 0208 	orr.w	r2, r2, #8
 800b8f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69da      	ldr	r2, [r3, #28]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f022 0204 	bic.w	r2, r2, #4
 800b908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69d9      	ldr	r1, [r3, #28]
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	691a      	ldr	r2, [r3, #16]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	430a      	orrs	r2, r1
 800b91a:	61da      	str	r2, [r3, #28]
      break;
 800b91c:	e023      	b.n	800b966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68b9      	ldr	r1, [r7, #8]
 800b924:	4618      	mov	r0, r3
 800b926:	f000 fb11 	bl	800bf4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69da      	ldr	r2, [r3, #28]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69da      	ldr	r2, [r3, #28]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	69d9      	ldr	r1, [r3, #28]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	021a      	lsls	r2, r3, #8
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	430a      	orrs	r2, r1
 800b95c:	61da      	str	r2, [r3, #28]
      break;
 800b95e:	e002      	b.n	800b966 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	75fb      	strb	r3, [r7, #23]
      break;
 800b964:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d101      	bne.n	800b994 <HAL_TIM_ConfigClockSource+0x1c>
 800b990:	2302      	movs	r3, #2
 800b992:	e0b4      	b.n	800bafe <HAL_TIM_ConfigClockSource+0x186>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2202      	movs	r2, #2
 800b9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b9b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9cc:	d03e      	beq.n	800ba4c <HAL_TIM_ConfigClockSource+0xd4>
 800b9ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9d2:	f200 8087 	bhi.w	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9da:	f000 8086 	beq.w	800baea <HAL_TIM_ConfigClockSource+0x172>
 800b9de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9e2:	d87f      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9e4:	2b70      	cmp	r3, #112	; 0x70
 800b9e6:	d01a      	beq.n	800ba1e <HAL_TIM_ConfigClockSource+0xa6>
 800b9e8:	2b70      	cmp	r3, #112	; 0x70
 800b9ea:	d87b      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9ec:	2b60      	cmp	r3, #96	; 0x60
 800b9ee:	d050      	beq.n	800ba92 <HAL_TIM_ConfigClockSource+0x11a>
 800b9f0:	2b60      	cmp	r3, #96	; 0x60
 800b9f2:	d877      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9f4:	2b50      	cmp	r3, #80	; 0x50
 800b9f6:	d03c      	beq.n	800ba72 <HAL_TIM_ConfigClockSource+0xfa>
 800b9f8:	2b50      	cmp	r3, #80	; 0x50
 800b9fa:	d873      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9fc:	2b40      	cmp	r3, #64	; 0x40
 800b9fe:	d058      	beq.n	800bab2 <HAL_TIM_ConfigClockSource+0x13a>
 800ba00:	2b40      	cmp	r3, #64	; 0x40
 800ba02:	d86f      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800ba04:	2b30      	cmp	r3, #48	; 0x30
 800ba06:	d064      	beq.n	800bad2 <HAL_TIM_ConfigClockSource+0x15a>
 800ba08:	2b30      	cmp	r3, #48	; 0x30
 800ba0a:	d86b      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800ba0c:	2b20      	cmp	r3, #32
 800ba0e:	d060      	beq.n	800bad2 <HAL_TIM_ConfigClockSource+0x15a>
 800ba10:	2b20      	cmp	r3, #32
 800ba12:	d867      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d05c      	beq.n	800bad2 <HAL_TIM_ConfigClockSource+0x15a>
 800ba18:	2b10      	cmp	r3, #16
 800ba1a:	d05a      	beq.n	800bad2 <HAL_TIM_ConfigClockSource+0x15a>
 800ba1c:	e062      	b.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6818      	ldr	r0, [r3, #0]
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	6899      	ldr	r1, [r3, #8]
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	685a      	ldr	r2, [r3, #4]
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	f000 fb5d 	bl	800c0ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ba40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	609a      	str	r2, [r3, #8]
      break;
 800ba4a:	e04f      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6818      	ldr	r0, [r3, #0]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	6899      	ldr	r1, [r3, #8]
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	f000 fb46 	bl	800c0ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	689a      	ldr	r2, [r3, #8]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba6e:	609a      	str	r2, [r3, #8]
      break;
 800ba70:	e03c      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6818      	ldr	r0, [r3, #0]
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	6859      	ldr	r1, [r3, #4]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	f000 faba 	bl	800bff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2150      	movs	r1, #80	; 0x50
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 fb13 	bl	800c0b6 <TIM_ITRx_SetConfig>
      break;
 800ba90:	e02c      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6818      	ldr	r0, [r3, #0]
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	6859      	ldr	r1, [r3, #4]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f000 fad9 	bl	800c056 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2160      	movs	r1, #96	; 0x60
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 fb03 	bl	800c0b6 <TIM_ITRx_SetConfig>
      break;
 800bab0:	e01c      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6818      	ldr	r0, [r3, #0]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	6859      	ldr	r1, [r3, #4]
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	461a      	mov	r2, r3
 800bac0:	f000 fa9a 	bl	800bff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2140      	movs	r1, #64	; 0x40
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 faf3 	bl	800c0b6 <TIM_ITRx_SetConfig>
      break;
 800bad0:	e00c      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4619      	mov	r1, r3
 800badc:	4610      	mov	r0, r2
 800bade:	f000 faea 	bl	800c0b6 <TIM_ITRx_SetConfig>
      break;
 800bae2:	e003      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	73fb      	strb	r3, [r7, #15]
      break;
 800bae8:	e000      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>
      break;
 800baea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb06:	b480      	push	{r7}
 800bb08:	b083      	sub	sp, #12
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb0e:	bf00      	nop
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b083      	sub	sp, #12
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb22:	bf00      	nop
 800bb24:	370c      	adds	r7, #12
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb2e:	b480      	push	{r7}
 800bb30:	b083      	sub	sp, #12
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b083      	sub	sp, #12
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb4a:	bf00      	nop
 800bb4c:	370c      	adds	r7, #12
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr
	...

0800bb58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a40      	ldr	r2, [pc, #256]	; (800bc6c <TIM_Base_SetConfig+0x114>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d013      	beq.n	800bb98 <TIM_Base_SetConfig+0x40>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb76:	d00f      	beq.n	800bb98 <TIM_Base_SetConfig+0x40>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a3d      	ldr	r2, [pc, #244]	; (800bc70 <TIM_Base_SetConfig+0x118>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d00b      	beq.n	800bb98 <TIM_Base_SetConfig+0x40>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a3c      	ldr	r2, [pc, #240]	; (800bc74 <TIM_Base_SetConfig+0x11c>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d007      	beq.n	800bb98 <TIM_Base_SetConfig+0x40>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a3b      	ldr	r2, [pc, #236]	; (800bc78 <TIM_Base_SetConfig+0x120>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d003      	beq.n	800bb98 <TIM_Base_SetConfig+0x40>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a3a      	ldr	r2, [pc, #232]	; (800bc7c <TIM_Base_SetConfig+0x124>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d108      	bne.n	800bbaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a2f      	ldr	r2, [pc, #188]	; (800bc6c <TIM_Base_SetConfig+0x114>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d02b      	beq.n	800bc0a <TIM_Base_SetConfig+0xb2>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbb8:	d027      	beq.n	800bc0a <TIM_Base_SetConfig+0xb2>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a2c      	ldr	r2, [pc, #176]	; (800bc70 <TIM_Base_SetConfig+0x118>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d023      	beq.n	800bc0a <TIM_Base_SetConfig+0xb2>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4a2b      	ldr	r2, [pc, #172]	; (800bc74 <TIM_Base_SetConfig+0x11c>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d01f      	beq.n	800bc0a <TIM_Base_SetConfig+0xb2>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a2a      	ldr	r2, [pc, #168]	; (800bc78 <TIM_Base_SetConfig+0x120>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d01b      	beq.n	800bc0a <TIM_Base_SetConfig+0xb2>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4a29      	ldr	r2, [pc, #164]	; (800bc7c <TIM_Base_SetConfig+0x124>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d017      	beq.n	800bc0a <TIM_Base_SetConfig+0xb2>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4a28      	ldr	r2, [pc, #160]	; (800bc80 <TIM_Base_SetConfig+0x128>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d013      	beq.n	800bc0a <TIM_Base_SetConfig+0xb2>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4a27      	ldr	r2, [pc, #156]	; (800bc84 <TIM_Base_SetConfig+0x12c>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d00f      	beq.n	800bc0a <TIM_Base_SetConfig+0xb2>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a26      	ldr	r2, [pc, #152]	; (800bc88 <TIM_Base_SetConfig+0x130>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d00b      	beq.n	800bc0a <TIM_Base_SetConfig+0xb2>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4a25      	ldr	r2, [pc, #148]	; (800bc8c <TIM_Base_SetConfig+0x134>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d007      	beq.n	800bc0a <TIM_Base_SetConfig+0xb2>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4a24      	ldr	r2, [pc, #144]	; (800bc90 <TIM_Base_SetConfig+0x138>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d003      	beq.n	800bc0a <TIM_Base_SetConfig+0xb2>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4a23      	ldr	r2, [pc, #140]	; (800bc94 <TIM_Base_SetConfig+0x13c>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d108      	bne.n	800bc1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	695b      	ldr	r3, [r3, #20]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	689a      	ldr	r2, [r3, #8]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a0a      	ldr	r2, [pc, #40]	; (800bc6c <TIM_Base_SetConfig+0x114>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d003      	beq.n	800bc50 <TIM_Base_SetConfig+0xf8>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a0c      	ldr	r2, [pc, #48]	; (800bc7c <TIM_Base_SetConfig+0x124>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d103      	bne.n	800bc58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	691a      	ldr	r2, [r3, #16]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	615a      	str	r2, [r3, #20]
}
 800bc5e:	bf00      	nop
 800bc60:	3714      	adds	r7, #20
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	40010000 	.word	0x40010000
 800bc70:	40000400 	.word	0x40000400
 800bc74:	40000800 	.word	0x40000800
 800bc78:	40000c00 	.word	0x40000c00
 800bc7c:	40010400 	.word	0x40010400
 800bc80:	40014000 	.word	0x40014000
 800bc84:	40014400 	.word	0x40014400
 800bc88:	40014800 	.word	0x40014800
 800bc8c:	40001800 	.word	0x40001800
 800bc90:	40001c00 	.word	0x40001c00
 800bc94:	40002000 	.word	0x40002000

0800bc98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b087      	sub	sp, #28
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a1b      	ldr	r3, [r3, #32]
 800bca6:	f023 0201 	bic.w	r2, r3, #1
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a1b      	ldr	r3, [r3, #32]
 800bcb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	699b      	ldr	r3, [r3, #24]
 800bcbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f023 0303 	bic.w	r3, r3, #3
 800bcce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	f023 0302 	bic.w	r3, r3, #2
 800bce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a20      	ldr	r2, [pc, #128]	; (800bd70 <TIM_OC1_SetConfig+0xd8>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d003      	beq.n	800bcfc <TIM_OC1_SetConfig+0x64>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a1f      	ldr	r2, [pc, #124]	; (800bd74 <TIM_OC1_SetConfig+0xdc>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d10c      	bne.n	800bd16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	f023 0308 	bic.w	r3, r3, #8
 800bd02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	697a      	ldr	r2, [r7, #20]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	f023 0304 	bic.w	r3, r3, #4
 800bd14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4a15      	ldr	r2, [pc, #84]	; (800bd70 <TIM_OC1_SetConfig+0xd8>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d003      	beq.n	800bd26 <TIM_OC1_SetConfig+0x8e>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a14      	ldr	r2, [pc, #80]	; (800bd74 <TIM_OC1_SetConfig+0xdc>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d111      	bne.n	800bd4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	693a      	ldr	r2, [r7, #16]
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	693a      	ldr	r2, [r7, #16]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	693a      	ldr	r2, [r7, #16]
 800bd4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	685a      	ldr	r2, [r3, #4]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	621a      	str	r2, [r3, #32]
}
 800bd64:	bf00      	nop
 800bd66:	371c      	adds	r7, #28
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr
 800bd70:	40010000 	.word	0x40010000
 800bd74:	40010400 	.word	0x40010400

0800bd78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a1b      	ldr	r3, [r3, #32]
 800bd86:	f023 0210 	bic.w	r2, r3, #16
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bda6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	021b      	lsls	r3, r3, #8
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	f023 0320 	bic.w	r3, r3, #32
 800bdc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	011b      	lsls	r3, r3, #4
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4a22      	ldr	r2, [pc, #136]	; (800be5c <TIM_OC2_SetConfig+0xe4>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d003      	beq.n	800bde0 <TIM_OC2_SetConfig+0x68>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a21      	ldr	r2, [pc, #132]	; (800be60 <TIM_OC2_SetConfig+0xe8>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d10d      	bne.n	800bdfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bde6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	011b      	lsls	r3, r3, #4
 800bdee:	697a      	ldr	r2, [r7, #20]
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a17      	ldr	r2, [pc, #92]	; (800be5c <TIM_OC2_SetConfig+0xe4>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d003      	beq.n	800be0c <TIM_OC2_SetConfig+0x94>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a16      	ldr	r2, [pc, #88]	; (800be60 <TIM_OC2_SetConfig+0xe8>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d113      	bne.n	800be34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	695b      	ldr	r3, [r3, #20]
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	4313      	orrs	r3, r2
 800be26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	699b      	ldr	r3, [r3, #24]
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	4313      	orrs	r3, r2
 800be32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	685a      	ldr	r2, [r3, #4]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	621a      	str	r2, [r3, #32]
}
 800be4e:	bf00      	nop
 800be50:	371c      	adds	r7, #28
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	40010000 	.word	0x40010000
 800be60:	40010400 	.word	0x40010400

0800be64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be64:	b480      	push	{r7}
 800be66:	b087      	sub	sp, #28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	69db      	ldr	r3, [r3, #28]
 800be8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 0303 	bic.w	r3, r3, #3
 800be9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800beac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	021b      	lsls	r3, r3, #8
 800beb4:	697a      	ldr	r2, [r7, #20]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a21      	ldr	r2, [pc, #132]	; (800bf44 <TIM_OC3_SetConfig+0xe0>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d003      	beq.n	800beca <TIM_OC3_SetConfig+0x66>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a20      	ldr	r2, [pc, #128]	; (800bf48 <TIM_OC3_SetConfig+0xe4>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d10d      	bne.n	800bee6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	021b      	lsls	r3, r3, #8
 800bed8:	697a      	ldr	r2, [r7, #20]
 800beda:	4313      	orrs	r3, r2
 800bedc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a16      	ldr	r2, [pc, #88]	; (800bf44 <TIM_OC3_SetConfig+0xe0>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d003      	beq.n	800bef6 <TIM_OC3_SetConfig+0x92>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4a15      	ldr	r2, [pc, #84]	; (800bf48 <TIM_OC3_SetConfig+0xe4>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d113      	bne.n	800bf1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800befc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	695b      	ldr	r3, [r3, #20]
 800bf0a:	011b      	lsls	r3, r3, #4
 800bf0c:	693a      	ldr	r2, [r7, #16]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	699b      	ldr	r3, [r3, #24]
 800bf16:	011b      	lsls	r3, r3, #4
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	693a      	ldr	r2, [r7, #16]
 800bf22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	685a      	ldr	r2, [r3, #4]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	697a      	ldr	r2, [r7, #20]
 800bf36:	621a      	str	r2, [r3, #32]
}
 800bf38:	bf00      	nop
 800bf3a:	371c      	adds	r7, #28
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr
 800bf44:	40010000 	.word	0x40010000
 800bf48:	40010400 	.word	0x40010400

0800bf4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b087      	sub	sp, #28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a1b      	ldr	r3, [r3, #32]
 800bf5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	69db      	ldr	r3, [r3, #28]
 800bf72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	021b      	lsls	r3, r3, #8
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	031b      	lsls	r3, r3, #12
 800bf9e:	693a      	ldr	r2, [r7, #16]
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4a12      	ldr	r2, [pc, #72]	; (800bff0 <TIM_OC4_SetConfig+0xa4>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d003      	beq.n	800bfb4 <TIM_OC4_SetConfig+0x68>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4a11      	ldr	r2, [pc, #68]	; (800bff4 <TIM_OC4_SetConfig+0xa8>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d109      	bne.n	800bfc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bfba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	019b      	lsls	r3, r3, #6
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	697a      	ldr	r2, [r7, #20]
 800bfcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	685a      	ldr	r2, [r3, #4]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	693a      	ldr	r2, [r7, #16]
 800bfe0:	621a      	str	r2, [r3, #32]
}
 800bfe2:	bf00      	nop
 800bfe4:	371c      	adds	r7, #28
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	40010000 	.word	0x40010000
 800bff4:	40010400 	.word	0x40010400

0800bff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b087      	sub	sp, #28
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6a1b      	ldr	r3, [r3, #32]
 800c008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	f023 0201 	bic.w	r2, r3, #1
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	011b      	lsls	r3, r3, #4
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f023 030a 	bic.w	r3, r3, #10
 800c034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	621a      	str	r2, [r3, #32]
}
 800c04a:	bf00      	nop
 800c04c:	371c      	adds	r7, #28
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr

0800c056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c056:	b480      	push	{r7}
 800c058:	b087      	sub	sp, #28
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	60f8      	str	r0, [r7, #12]
 800c05e:	60b9      	str	r1, [r7, #8]
 800c060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	f023 0210 	bic.w	r2, r3, #16
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	699b      	ldr	r3, [r3, #24]
 800c072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6a1b      	ldr	r3, [r3, #32]
 800c078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	031b      	lsls	r3, r3, #12
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	4313      	orrs	r3, r2
 800c08a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c092:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	011b      	lsls	r3, r3, #4
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	697a      	ldr	r2, [r7, #20]
 800c0a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	621a      	str	r2, [r3, #32]
}
 800c0aa:	bf00      	nop
 800c0ac:	371c      	adds	r7, #28
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	b085      	sub	sp, #20
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	f043 0307 	orr.w	r3, r3, #7
 800c0d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	609a      	str	r2, [r3, #8]
}
 800c0e0:	bf00      	nop
 800c0e2:	3714      	adds	r7, #20
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b087      	sub	sp, #28
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
 800c0f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	021a      	lsls	r2, r3, #8
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	431a      	orrs	r2, r3
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	4313      	orrs	r3, r2
 800c114:	697a      	ldr	r2, [r7, #20]
 800c116:	4313      	orrs	r3, r2
 800c118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	697a      	ldr	r2, [r7, #20]
 800c11e:	609a      	str	r2, [r3, #8]
}
 800c120:	bf00      	nop
 800c122:	371c      	adds	r7, #28
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b087      	sub	sp, #28
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	f003 031f 	and.w	r3, r3, #31
 800c13e:	2201      	movs	r2, #1
 800c140:	fa02 f303 	lsl.w	r3, r2, r3
 800c144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6a1a      	ldr	r2, [r3, #32]
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	43db      	mvns	r3, r3
 800c14e:	401a      	ands	r2, r3
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6a1a      	ldr	r2, [r3, #32]
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	f003 031f 	and.w	r3, r3, #31
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	fa01 f303 	lsl.w	r3, r1, r3
 800c164:	431a      	orrs	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	621a      	str	r2, [r3, #32]
}
 800c16a:	bf00      	nop
 800c16c:	371c      	adds	r7, #28
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
	...

0800c178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d101      	bne.n	800c190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c18c:	2302      	movs	r3, #2
 800c18e:	e05a      	b.n	800c246 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2202      	movs	r2, #2
 800c19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a21      	ldr	r2, [pc, #132]	; (800c254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d022      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1dc:	d01d      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a1d      	ldr	r2, [pc, #116]	; (800c258 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d018      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a1b      	ldr	r2, [pc, #108]	; (800c25c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d013      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a1a      	ldr	r2, [pc, #104]	; (800c260 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d00e      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a18      	ldr	r2, [pc, #96]	; (800c264 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d009      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a17      	ldr	r2, [pc, #92]	; (800c268 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d004      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a15      	ldr	r2, [pc, #84]	; (800c26c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d10c      	bne.n	800c234 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	4313      	orrs	r3, r2
 800c22a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	40010000 	.word	0x40010000
 800c258:	40000400 	.word	0x40000400
 800c25c:	40000800 	.word	0x40000800
 800c260:	40000c00 	.word	0x40000c00
 800c264:	40010400 	.word	0x40010400
 800c268:	40014000 	.word	0x40014000
 800c26c:	40001800 	.word	0x40001800

0800c270 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c27a:	2300      	movs	r3, #0
 800c27c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c284:	2b01      	cmp	r3, #1
 800c286:	d101      	bne.n	800c28c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c288:	2302      	movs	r3, #2
 800c28a:	e03d      	b.n	800c308 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	695b      	ldr	r3, [r3, #20]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	69db      	ldr	r3, [r3, #28]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d101      	bne.n	800c34e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c34a:	2301      	movs	r3, #1
 800c34c:	e03f      	b.n	800c3ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7f7 fe8e 	bl	8004084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2224      	movs	r2, #36	; 0x24
 800c36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	68da      	ldr	r2, [r3, #12]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c37e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fe69 	bl	800d058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	691a      	ldr	r2, [r3, #16]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c394:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	695a      	ldr	r2, [r3, #20]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c3a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68da      	ldr	r2, [r3, #12]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c3b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2220      	movs	r2, #32
 800c3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2220      	movs	r2, #32
 800c3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b084      	sub	sp, #16
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	60f8      	str	r0, [r7, #12]
 800c3de:	60b9      	str	r1, [r7, #8]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	2b20      	cmp	r3, #32
 800c3ee:	d11d      	bne.n	800c42c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d002      	beq.n	800c3fc <HAL_UART_Receive_DMA+0x26>
 800c3f6:	88fb      	ldrh	r3, [r7, #6]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d101      	bne.n	800c400 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e016      	b.n	800c42e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c406:	2b01      	cmp	r3, #1
 800c408:	d101      	bne.n	800c40e <HAL_UART_Receive_DMA+0x38>
 800c40a:	2302      	movs	r3, #2
 800c40c:	e00f      	b.n	800c42e <HAL_UART_Receive_DMA+0x58>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c41c:	88fb      	ldrh	r3, [r7, #6]
 800c41e:	461a      	mov	r2, r3
 800c420:	68b9      	ldr	r1, [r7, #8]
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f000 fbb8 	bl	800cb98 <UART_Start_Receive_DMA>
 800c428:	4603      	mov	r3, r0
 800c42a:	e000      	b.n	800c42e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c42c:	2302      	movs	r3, #2
  }
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
	...

0800c438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b0ba      	sub	sp, #232	; 0xe8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	695b      	ldr	r3, [r3, #20]
 800c45a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c45e:	2300      	movs	r3, #0
 800c460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c464:	2300      	movs	r3, #0
 800c466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c46e:	f003 030f 	and.w	r3, r3, #15
 800c472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10f      	bne.n	800c49e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c482:	f003 0320 	and.w	r3, r3, #32
 800c486:	2b00      	cmp	r3, #0
 800c488:	d009      	beq.n	800c49e <HAL_UART_IRQHandler+0x66>
 800c48a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c48e:	f003 0320 	and.w	r3, r3, #32
 800c492:	2b00      	cmp	r3, #0
 800c494:	d003      	beq.n	800c49e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fd23 	bl	800cee2 <UART_Receive_IT>
      return;
 800c49c:	e256      	b.n	800c94c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c49e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f000 80de 	beq.w	800c664 <HAL_UART_IRQHandler+0x22c>
 800c4a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4ac:	f003 0301 	and.w	r3, r3, #1
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d106      	bne.n	800c4c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c4b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f000 80d1 	beq.w	800c664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c4c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4c6:	f003 0301 	and.w	r3, r3, #1
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00b      	beq.n	800c4e6 <HAL_UART_IRQHandler+0xae>
 800c4ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d005      	beq.n	800c4e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4de:	f043 0201 	orr.w	r2, r3, #1
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c4e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4ea:	f003 0304 	and.w	r3, r3, #4
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00b      	beq.n	800c50a <HAL_UART_IRQHandler+0xd2>
 800c4f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d005      	beq.n	800c50a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c502:	f043 0202 	orr.w	r2, r3, #2
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c50a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c50e:	f003 0302 	and.w	r3, r3, #2
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00b      	beq.n	800c52e <HAL_UART_IRQHandler+0xf6>
 800c516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c51a:	f003 0301 	and.w	r3, r3, #1
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d005      	beq.n	800c52e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c526:	f043 0204 	orr.w	r2, r3, #4
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c52e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c532:	f003 0308 	and.w	r3, r3, #8
 800c536:	2b00      	cmp	r3, #0
 800c538:	d011      	beq.n	800c55e <HAL_UART_IRQHandler+0x126>
 800c53a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c53e:	f003 0320 	and.w	r3, r3, #32
 800c542:	2b00      	cmp	r3, #0
 800c544:	d105      	bne.n	800c552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c54a:	f003 0301 	and.w	r3, r3, #1
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d005      	beq.n	800c55e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c556:	f043 0208 	orr.w	r2, r3, #8
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 81ed 	beq.w	800c942 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c56c:	f003 0320 	and.w	r3, r3, #32
 800c570:	2b00      	cmp	r3, #0
 800c572:	d008      	beq.n	800c586 <HAL_UART_IRQHandler+0x14e>
 800c574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c578:	f003 0320 	and.w	r3, r3, #32
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fcae 	bl	800cee2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	695b      	ldr	r3, [r3, #20]
 800c58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c590:	2b40      	cmp	r3, #64	; 0x40
 800c592:	bf0c      	ite	eq
 800c594:	2301      	moveq	r3, #1
 800c596:	2300      	movne	r3, #0
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a2:	f003 0308 	and.w	r3, r3, #8
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d103      	bne.n	800c5b2 <HAL_UART_IRQHandler+0x17a>
 800c5aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d04f      	beq.n	800c652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 fbb6 	bl	800cd24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	695b      	ldr	r3, [r3, #20]
 800c5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5c2:	2b40      	cmp	r3, #64	; 0x40
 800c5c4:	d141      	bne.n	800c64a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	3314      	adds	r3, #20
 800c5cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5d4:	e853 3f00 	ldrex	r3, [r3]
 800c5d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c5dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3314      	adds	r3, #20
 800c5ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c5f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c5f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c5fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c602:	e841 2300 	strex	r3, r2, [r1]
 800c606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c60a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d1d9      	bne.n	800c5c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c616:	2b00      	cmp	r3, #0
 800c618:	d013      	beq.n	800c642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61e:	4a7d      	ldr	r2, [pc, #500]	; (800c814 <HAL_UART_IRQHandler+0x3dc>)
 800c620:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c626:	4618      	mov	r0, r3
 800c628:	f7fb fd32 	bl	8008090 <HAL_DMA_Abort_IT>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d016      	beq.n	800c660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c63c:	4610      	mov	r0, r2
 800c63e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c640:	e00e      	b.n	800c660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f99a 	bl	800c97c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c648:	e00a      	b.n	800c660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f996 	bl	800c97c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c650:	e006      	b.n	800c660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f992 	bl	800c97c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c65e:	e170      	b.n	800c942 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c660:	bf00      	nop
    return;
 800c662:	e16e      	b.n	800c942 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c668:	2b01      	cmp	r3, #1
 800c66a:	f040 814a 	bne.w	800c902 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c672:	f003 0310 	and.w	r3, r3, #16
 800c676:	2b00      	cmp	r3, #0
 800c678:	f000 8143 	beq.w	800c902 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c680:	f003 0310 	and.w	r3, r3, #16
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 813c 	beq.w	800c902 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c68a:	2300      	movs	r3, #0
 800c68c:	60bb      	str	r3, [r7, #8]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	60bb      	str	r3, [r7, #8]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	60bb      	str	r3, [r7, #8]
 800c69e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6aa:	2b40      	cmp	r3, #64	; 0x40
 800c6ac:	f040 80b4 	bne.w	800c818 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f000 8140 	beq.w	800c946 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c6ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	f080 8139 	bcs.w	800c946 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c6da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e0:	69db      	ldr	r3, [r3, #28]
 800c6e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6e6:	f000 8088 	beq.w	800c7fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	330c      	adds	r3, #12
 800c6f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6f8:	e853 3f00 	ldrex	r3, [r3]
 800c6fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	330c      	adds	r3, #12
 800c712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c716:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c71a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c726:	e841 2300 	strex	r3, r2, [r1]
 800c72a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c72e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1d9      	bne.n	800c6ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	3314      	adds	r3, #20
 800c73c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c740:	e853 3f00 	ldrex	r3, [r3]
 800c744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c748:	f023 0301 	bic.w	r3, r3, #1
 800c74c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3314      	adds	r3, #20
 800c756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c75a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c75e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c766:	e841 2300 	strex	r3, r2, [r1]
 800c76a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c76c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1e1      	bne.n	800c736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3314      	adds	r3, #20
 800c778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c77c:	e853 3f00 	ldrex	r3, [r3]
 800c780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	3314      	adds	r3, #20
 800c792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c796:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c79c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c79e:	e841 2300 	strex	r3, r2, [r1]
 800c7a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c7a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1e3      	bne.n	800c772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2220      	movs	r2, #32
 800c7ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	330c      	adds	r3, #12
 800c7be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c2:	e853 3f00 	ldrex	r3, [r3]
 800c7c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c7c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ca:	f023 0310 	bic.w	r3, r3, #16
 800c7ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	330c      	adds	r3, #12
 800c7d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c7dc:	65ba      	str	r2, [r7, #88]	; 0x58
 800c7de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7e4:	e841 2300 	strex	r3, r2, [r1]
 800c7e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c7ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d1e3      	bne.n	800c7b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fb fbdb 	bl	8007fb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c802:	b29b      	uxth	r3, r3
 800c804:	1ad3      	subs	r3, r2, r3
 800c806:	b29b      	uxth	r3, r3
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f8c0 	bl	800c990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c810:	e099      	b.n	800c946 <HAL_UART_IRQHandler+0x50e>
 800c812:	bf00      	nop
 800c814:	0800cdeb 	.word	0x0800cdeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c820:	b29b      	uxth	r3, r3
 800c822:	1ad3      	subs	r3, r2, r3
 800c824:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 808b 	beq.w	800c94a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 8086 	beq.w	800c94a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	330c      	adds	r3, #12
 800c844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c848:	e853 3f00 	ldrex	r3, [r3]
 800c84c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	330c      	adds	r3, #12
 800c85e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c862:	647a      	str	r2, [r7, #68]	; 0x44
 800c864:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c86a:	e841 2300 	strex	r3, r2, [r1]
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1e3      	bne.n	800c83e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3314      	adds	r3, #20
 800c87c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	e853 3f00 	ldrex	r3, [r3]
 800c884:	623b      	str	r3, [r7, #32]
   return(result);
 800c886:	6a3b      	ldr	r3, [r7, #32]
 800c888:	f023 0301 	bic.w	r3, r3, #1
 800c88c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	3314      	adds	r3, #20
 800c896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c89a:	633a      	str	r2, [r7, #48]	; 0x30
 800c89c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8a2:	e841 2300 	strex	r3, r2, [r1]
 800c8a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1e3      	bne.n	800c876 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2220      	movs	r2, #32
 800c8b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	330c      	adds	r3, #12
 800c8c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	e853 3f00 	ldrex	r3, [r3]
 800c8ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f023 0310 	bic.w	r3, r3, #16
 800c8d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	330c      	adds	r3, #12
 800c8dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c8e0:	61fa      	str	r2, [r7, #28]
 800c8e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e4:	69b9      	ldr	r1, [r7, #24]
 800c8e6:	69fa      	ldr	r2, [r7, #28]
 800c8e8:	e841 2300 	strex	r3, r2, [r1]
 800c8ec:	617b      	str	r3, [r7, #20]
   return(result);
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1e3      	bne.n	800c8bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c8f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f848 	bl	800c990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c900:	e023      	b.n	800c94a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d009      	beq.n	800c922 <HAL_UART_IRQHandler+0x4ea>
 800c90e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fa79 	bl	800ce12 <UART_Transmit_IT>
    return;
 800c920:	e014      	b.n	800c94c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00e      	beq.n	800c94c <HAL_UART_IRQHandler+0x514>
 800c92e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c936:	2b00      	cmp	r3, #0
 800c938:	d008      	beq.n	800c94c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fab9 	bl	800ceb2 <UART_EndTransmit_IT>
    return;
 800c940:	e004      	b.n	800c94c <HAL_UART_IRQHandler+0x514>
    return;
 800c942:	bf00      	nop
 800c944:	e002      	b.n	800c94c <HAL_UART_IRQHandler+0x514>
      return;
 800c946:	bf00      	nop
 800c948:	e000      	b.n	800c94c <HAL_UART_IRQHandler+0x514>
      return;
 800c94a:	bf00      	nop
  }
}
 800c94c:	37e8      	adds	r7, #232	; 0xe8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop

0800c954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c95c:	bf00      	nop
 800c95e:	370c      	adds	r7, #12
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	460b      	mov	r3, r1
 800c99a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c99c:	bf00      	nop
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b09c      	sub	sp, #112	; 0x70
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d172      	bne.n	800caaa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c9c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	330c      	adds	r3, #12
 800c9d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9d4:	e853 3f00 	ldrex	r3, [r3]
 800c9d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c9da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	330c      	adds	r3, #12
 800c9e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c9ea:	65ba      	str	r2, [r7, #88]	; 0x58
 800c9ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9f2:	e841 2300 	strex	r3, r2, [r1]
 800c9f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c9f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1e5      	bne.n	800c9ca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3314      	adds	r3, #20
 800ca04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca08:	e853 3f00 	ldrex	r3, [r3]
 800ca0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca10:	f023 0301 	bic.w	r3, r3, #1
 800ca14:	667b      	str	r3, [r7, #100]	; 0x64
 800ca16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3314      	adds	r3, #20
 800ca1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ca1e:	647a      	str	r2, [r7, #68]	; 0x44
 800ca20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca26:	e841 2300 	strex	r3, r2, [r1]
 800ca2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1e5      	bne.n	800c9fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	3314      	adds	r3, #20
 800ca38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3c:	e853 3f00 	ldrex	r3, [r3]
 800ca40:	623b      	str	r3, [r7, #32]
   return(result);
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca48:	663b      	str	r3, [r7, #96]	; 0x60
 800ca4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3314      	adds	r3, #20
 800ca50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca52:	633a      	str	r2, [r7, #48]	; 0x30
 800ca54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca5a:	e841 2300 	strex	r3, r2, [r1]
 800ca5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e5      	bne.n	800ca32 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca68:	2220      	movs	r2, #32
 800ca6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d119      	bne.n	800caaa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	330c      	adds	r3, #12
 800ca7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	e853 3f00 	ldrex	r3, [r3]
 800ca84:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f023 0310 	bic.w	r3, r3, #16
 800ca8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	330c      	adds	r3, #12
 800ca94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca96:	61fa      	str	r2, [r7, #28]
 800ca98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca9a:	69b9      	ldr	r1, [r7, #24]
 800ca9c:	69fa      	ldr	r2, [r7, #28]
 800ca9e:	e841 2300 	strex	r3, r2, [r1]
 800caa2:	617b      	str	r3, [r7, #20]
   return(result);
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1e5      	bne.n	800ca76 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800caaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d106      	bne.n	800cac0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cab6:	4619      	mov	r1, r3
 800cab8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800caba:	f7ff ff69 	bl	800c990 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cabe:	e002      	b.n	800cac6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800cac0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cac2:	f7f6 fe83 	bl	80037cc <HAL_UART_RxCpltCallback>
}
 800cac6:	bf00      	nop
 800cac8:	3770      	adds	r7, #112	; 0x70
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cada:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d108      	bne.n	800caf6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cae8:	085b      	lsrs	r3, r3, #1
 800caea:	b29b      	uxth	r3, r3
 800caec:	4619      	mov	r1, r3
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f7ff ff4e 	bl	800c990 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800caf4:	e002      	b.n	800cafc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f7ff ff36 	bl	800c968 <HAL_UART_RxHalfCpltCallback>
}
 800cafc:	bf00      	nop
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	695b      	ldr	r3, [r3, #20]
 800cb1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb20:	2b80      	cmp	r3, #128	; 0x80
 800cb22:	bf0c      	ite	eq
 800cb24:	2301      	moveq	r3, #1
 800cb26:	2300      	movne	r3, #0
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	2b21      	cmp	r3, #33	; 0x21
 800cb36:	d108      	bne.n	800cb4a <UART_DMAError+0x46>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d005      	beq.n	800cb4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	2200      	movs	r2, #0
 800cb42:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800cb44:	68b8      	ldr	r0, [r7, #8]
 800cb46:	f000 f8c5 	bl	800ccd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb54:	2b40      	cmp	r3, #64	; 0x40
 800cb56:	bf0c      	ite	eq
 800cb58:	2301      	moveq	r3, #1
 800cb5a:	2300      	movne	r3, #0
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	2b22      	cmp	r3, #34	; 0x22
 800cb6a:	d108      	bne.n	800cb7e <UART_DMAError+0x7a>
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d005      	beq.n	800cb7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	2200      	movs	r2, #0
 800cb76:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800cb78:	68b8      	ldr	r0, [r7, #8]
 800cb7a:	f000 f8d3 	bl	800cd24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb82:	f043 0210 	orr.w	r2, r3, #16
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb8a:	68b8      	ldr	r0, [r7, #8]
 800cb8c:	f7ff fef6 	bl	800c97c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb90:	bf00      	nop
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b098      	sub	sp, #96	; 0x60
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	4613      	mov	r3, r2
 800cba4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	88fa      	ldrh	r2, [r7, #6]
 800cbb0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2222      	movs	r2, #34	; 0x22
 800cbbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc4:	4a40      	ldr	r2, [pc, #256]	; (800ccc8 <UART_Start_Receive_DMA+0x130>)
 800cbc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbcc:	4a3f      	ldr	r2, [pc, #252]	; (800cccc <UART_Start_Receive_DMA+0x134>)
 800cbce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd4:	4a3e      	ldr	r2, [pc, #248]	; (800ccd0 <UART_Start_Receive_DMA+0x138>)
 800cbd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbdc:	2200      	movs	r2, #0
 800cbde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cbe0:	f107 0308 	add.w	r3, r7, #8
 800cbe4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	88fb      	ldrh	r3, [r7, #6]
 800cbf8:	f7fb f982 	bl	8007f00 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	613b      	str	r3, [r7, #16]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	613b      	str	r3, [r7, #16]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	613b      	str	r3, [r7, #16]
 800cc10:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	691b      	ldr	r3, [r3, #16]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d019      	beq.n	800cc56 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	330c      	adds	r3, #12
 800cc28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc2c:	e853 3f00 	ldrex	r3, [r3]
 800cc30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc38:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	330c      	adds	r3, #12
 800cc40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc42:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cc44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cc48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc4a:	e841 2300 	strex	r3, r2, [r1]
 800cc4e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cc50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1e5      	bne.n	800cc22 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3314      	adds	r3, #20
 800cc5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	e853 3f00 	ldrex	r3, [r3]
 800cc64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	f043 0301 	orr.w	r3, r3, #1
 800cc6c:	657b      	str	r3, [r7, #84]	; 0x54
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	3314      	adds	r3, #20
 800cc74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc76:	63ba      	str	r2, [r7, #56]	; 0x38
 800cc78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc7e:	e841 2300 	strex	r3, r2, [r1]
 800cc82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d1e5      	bne.n	800cc56 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3314      	adds	r3, #20
 800cc90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	e853 3f00 	ldrex	r3, [r3]
 800cc98:	617b      	str	r3, [r7, #20]
   return(result);
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cca0:	653b      	str	r3, [r7, #80]	; 0x50
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	3314      	adds	r3, #20
 800cca8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccaa:	627a      	str	r2, [r7, #36]	; 0x24
 800ccac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccae:	6a39      	ldr	r1, [r7, #32]
 800ccb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccb2:	e841 2300 	strex	r3, r2, [r1]
 800ccb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1e5      	bne.n	800cc8a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3760      	adds	r7, #96	; 0x60
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	0800c9a9 	.word	0x0800c9a9
 800cccc:	0800cacf 	.word	0x0800cacf
 800ccd0:	0800cb05 	.word	0x0800cb05

0800ccd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b089      	sub	sp, #36	; 0x24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	330c      	adds	r3, #12
 800cce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	e853 3f00 	ldrex	r3, [r3]
 800ccea:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ccf2:	61fb      	str	r3, [r7, #28]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	330c      	adds	r3, #12
 800ccfa:	69fa      	ldr	r2, [r7, #28]
 800ccfc:	61ba      	str	r2, [r7, #24]
 800ccfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd00:	6979      	ldr	r1, [r7, #20]
 800cd02:	69ba      	ldr	r2, [r7, #24]
 800cd04:	e841 2300 	strex	r3, r2, [r1]
 800cd08:	613b      	str	r3, [r7, #16]
   return(result);
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1e5      	bne.n	800ccdc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2220      	movs	r2, #32
 800cd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800cd18:	bf00      	nop
 800cd1a:	3724      	adds	r7, #36	; 0x24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b095      	sub	sp, #84	; 0x54
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	330c      	adds	r3, #12
 800cd32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd36:	e853 3f00 	ldrex	r3, [r3]
 800cd3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	330c      	adds	r3, #12
 800cd4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd4c:	643a      	str	r2, [r7, #64]	; 0x40
 800cd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd54:	e841 2300 	strex	r3, r2, [r1]
 800cd58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1e5      	bne.n	800cd2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	3314      	adds	r3, #20
 800cd66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd68:	6a3b      	ldr	r3, [r7, #32]
 800cd6a:	e853 3f00 	ldrex	r3, [r3]
 800cd6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	f023 0301 	bic.w	r3, r3, #1
 800cd76:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3314      	adds	r3, #20
 800cd7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd80:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cd82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd88:	e841 2300 	strex	r3, r2, [r1]
 800cd8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d1e5      	bne.n	800cd60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d119      	bne.n	800cdd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	330c      	adds	r3, #12
 800cda2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	e853 3f00 	ldrex	r3, [r3]
 800cdaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	f023 0310 	bic.w	r3, r3, #16
 800cdb2:	647b      	str	r3, [r7, #68]	; 0x44
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	330c      	adds	r3, #12
 800cdba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cdbc:	61ba      	str	r2, [r7, #24]
 800cdbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc0:	6979      	ldr	r1, [r7, #20]
 800cdc2:	69ba      	ldr	r2, [r7, #24]
 800cdc4:	e841 2300 	strex	r3, r2, [r1]
 800cdc8:	613b      	str	r3, [r7, #16]
   return(result);
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1e5      	bne.n	800cd9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2220      	movs	r2, #32
 800cdd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cdde:	bf00      	nop
 800cde0:	3754      	adds	r7, #84	; 0x54
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b084      	sub	sp, #16
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2200      	movs	r2, #0
 800ce02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7ff fdb9 	bl	800c97c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce0a:	bf00      	nop
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ce12:	b480      	push	{r7}
 800ce14:	b085      	sub	sp, #20
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	2b21      	cmp	r3, #33	; 0x21
 800ce24:	d13e      	bne.n	800cea4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce2e:	d114      	bne.n	800ce5a <UART_Transmit_IT+0x48>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d110      	bne.n	800ce5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a1b      	ldr	r3, [r3, #32]
 800ce3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	881b      	ldrh	r3, [r3, #0]
 800ce42:	461a      	mov	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a1b      	ldr	r3, [r3, #32]
 800ce52:	1c9a      	adds	r2, r3, #2
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	621a      	str	r2, [r3, #32]
 800ce58:	e008      	b.n	800ce6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a1b      	ldr	r3, [r3, #32]
 800ce5e:	1c59      	adds	r1, r3, #1
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	6211      	str	r1, [r2, #32]
 800ce64:	781a      	ldrb	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	3b01      	subs	r3, #1
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d10f      	bne.n	800cea0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	68da      	ldr	r2, [r3, #12]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68da      	ldr	r2, [r3, #12]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cea0:	2300      	movs	r3, #0
 800cea2:	e000      	b.n	800cea6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cea4:	2302      	movs	r3, #2
  }
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b082      	sub	sp, #8
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	68da      	ldr	r2, [r3, #12]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cec8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2220      	movs	r2, #32
 800cece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7ff fd3e 	bl	800c954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ced8:	2300      	movs	r3, #0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b08c      	sub	sp, #48	; 0x30
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	2b22      	cmp	r3, #34	; 0x22
 800cef4:	f040 80ab 	bne.w	800d04e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf00:	d117      	bne.n	800cf32 <UART_Receive_IT+0x50>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d113      	bne.n	800cf32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2a:	1c9a      	adds	r2, r3, #2
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	629a      	str	r2, [r3, #40]	; 0x28
 800cf30:	e026      	b.n	800cf80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf44:	d007      	beq.n	800cf56 <UART_Receive_IT+0x74>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10a      	bne.n	800cf64 <UART_Receive_IT+0x82>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d106      	bne.n	800cf64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	b2da      	uxtb	r2, r3
 800cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf60:	701a      	strb	r2, [r3, #0]
 800cf62:	e008      	b.n	800cf76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf70:	b2da      	uxtb	r2, r3
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf7a:	1c5a      	adds	r2, r3, #1
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	3b01      	subs	r3, #1
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d15a      	bne.n	800d04a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	68da      	ldr	r2, [r3, #12]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f022 0220 	bic.w	r2, r2, #32
 800cfa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68da      	ldr	r2, [r3, #12]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cfb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	695a      	ldr	r2, [r3, #20]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f022 0201 	bic.w	r2, r2, #1
 800cfc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2220      	movs	r2, #32
 800cfc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d135      	bne.n	800d040 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	330c      	adds	r3, #12
 800cfe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	e853 3f00 	ldrex	r3, [r3]
 800cfe8:	613b      	str	r3, [r7, #16]
   return(result);
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	f023 0310 	bic.w	r3, r3, #16
 800cff0:	627b      	str	r3, [r7, #36]	; 0x24
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	330c      	adds	r3, #12
 800cff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cffa:	623a      	str	r2, [r7, #32]
 800cffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cffe:	69f9      	ldr	r1, [r7, #28]
 800d000:	6a3a      	ldr	r2, [r7, #32]
 800d002:	e841 2300 	strex	r3, r2, [r1]
 800d006:	61bb      	str	r3, [r7, #24]
   return(result);
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d1e5      	bne.n	800cfda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f003 0310 	and.w	r3, r3, #16
 800d018:	2b10      	cmp	r3, #16
 800d01a:	d10a      	bne.n	800d032 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d01c:	2300      	movs	r3, #0
 800d01e:	60fb      	str	r3, [r7, #12]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	60fb      	str	r3, [r7, #12]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	60fb      	str	r3, [r7, #12]
 800d030:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d036:	4619      	mov	r1, r3
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f7ff fca9 	bl	800c990 <HAL_UARTEx_RxEventCallback>
 800d03e:	e002      	b.n	800d046 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f7f6 fbc3 	bl	80037cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	e002      	b.n	800d050 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d04a:	2300      	movs	r3, #0
 800d04c:	e000      	b.n	800d050 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d04e:	2302      	movs	r3, #2
  }
}
 800d050:	4618      	mov	r0, r3
 800d052:	3730      	adds	r7, #48	; 0x30
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d05c:	b0c0      	sub	sp, #256	; 0x100
 800d05e:	af00      	add	r7, sp, #0
 800d060:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d074:	68d9      	ldr	r1, [r3, #12]
 800d076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	ea40 0301 	orr.w	r3, r0, r1
 800d080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d086:	689a      	ldr	r2, [r3, #8]
 800d088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	431a      	orrs	r2, r3
 800d090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d094:	695b      	ldr	r3, [r3, #20]
 800d096:	431a      	orrs	r2, r3
 800d098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d09c:	69db      	ldr	r3, [r3, #28]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d0b0:	f021 010c 	bic.w	r1, r1, #12
 800d0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d0be:	430b      	orrs	r3, r1
 800d0c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0d2:	6999      	ldr	r1, [r3, #24]
 800d0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	ea40 0301 	orr.w	r3, r0, r1
 800d0de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	4b8f      	ldr	r3, [pc, #572]	; (800d324 <UART_SetConfig+0x2cc>)
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d005      	beq.n	800d0f8 <UART_SetConfig+0xa0>
 800d0ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	4b8d      	ldr	r3, [pc, #564]	; (800d328 <UART_SetConfig+0x2d0>)
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d104      	bne.n	800d102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d0f8:	f7fd f930 	bl	800a35c <HAL_RCC_GetPCLK2Freq>
 800d0fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d100:	e003      	b.n	800d10a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d102:	f7fd f917 	bl	800a334 <HAL_RCC_GetPCLK1Freq>
 800d106:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d10a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d10e:	69db      	ldr	r3, [r3, #28]
 800d110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d114:	f040 810c 	bne.w	800d330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d11c:	2200      	movs	r2, #0
 800d11e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d122:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d12a:	4622      	mov	r2, r4
 800d12c:	462b      	mov	r3, r5
 800d12e:	1891      	adds	r1, r2, r2
 800d130:	65b9      	str	r1, [r7, #88]	; 0x58
 800d132:	415b      	adcs	r3, r3
 800d134:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d13a:	4621      	mov	r1, r4
 800d13c:	eb12 0801 	adds.w	r8, r2, r1
 800d140:	4629      	mov	r1, r5
 800d142:	eb43 0901 	adc.w	r9, r3, r1
 800d146:	f04f 0200 	mov.w	r2, #0
 800d14a:	f04f 0300 	mov.w	r3, #0
 800d14e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d15a:	4690      	mov	r8, r2
 800d15c:	4699      	mov	r9, r3
 800d15e:	4623      	mov	r3, r4
 800d160:	eb18 0303 	adds.w	r3, r8, r3
 800d164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d168:	462b      	mov	r3, r5
 800d16a:	eb49 0303 	adc.w	r3, r9, r3
 800d16e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d17e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d186:	460b      	mov	r3, r1
 800d188:	18db      	adds	r3, r3, r3
 800d18a:	653b      	str	r3, [r7, #80]	; 0x50
 800d18c:	4613      	mov	r3, r2
 800d18e:	eb42 0303 	adc.w	r3, r2, r3
 800d192:	657b      	str	r3, [r7, #84]	; 0x54
 800d194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d19c:	f7f3 fd8e 	bl	8000cbc <__aeabi_uldivmod>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	4b61      	ldr	r3, [pc, #388]	; (800d32c <UART_SetConfig+0x2d4>)
 800d1a6:	fba3 2302 	umull	r2, r3, r3, r2
 800d1aa:	095b      	lsrs	r3, r3, #5
 800d1ac:	011c      	lsls	r4, r3, #4
 800d1ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d1b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d1bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d1c0:	4642      	mov	r2, r8
 800d1c2:	464b      	mov	r3, r9
 800d1c4:	1891      	adds	r1, r2, r2
 800d1c6:	64b9      	str	r1, [r7, #72]	; 0x48
 800d1c8:	415b      	adcs	r3, r3
 800d1ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d1d0:	4641      	mov	r1, r8
 800d1d2:	eb12 0a01 	adds.w	sl, r2, r1
 800d1d6:	4649      	mov	r1, r9
 800d1d8:	eb43 0b01 	adc.w	fp, r3, r1
 800d1dc:	f04f 0200 	mov.w	r2, #0
 800d1e0:	f04f 0300 	mov.w	r3, #0
 800d1e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d1e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d1ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d1f0:	4692      	mov	sl, r2
 800d1f2:	469b      	mov	fp, r3
 800d1f4:	4643      	mov	r3, r8
 800d1f6:	eb1a 0303 	adds.w	r3, sl, r3
 800d1fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d1fe:	464b      	mov	r3, r9
 800d200:	eb4b 0303 	adc.w	r3, fp, r3
 800d204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d214:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d21c:	460b      	mov	r3, r1
 800d21e:	18db      	adds	r3, r3, r3
 800d220:	643b      	str	r3, [r7, #64]	; 0x40
 800d222:	4613      	mov	r3, r2
 800d224:	eb42 0303 	adc.w	r3, r2, r3
 800d228:	647b      	str	r3, [r7, #68]	; 0x44
 800d22a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d22e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d232:	f7f3 fd43 	bl	8000cbc <__aeabi_uldivmod>
 800d236:	4602      	mov	r2, r0
 800d238:	460b      	mov	r3, r1
 800d23a:	4611      	mov	r1, r2
 800d23c:	4b3b      	ldr	r3, [pc, #236]	; (800d32c <UART_SetConfig+0x2d4>)
 800d23e:	fba3 2301 	umull	r2, r3, r3, r1
 800d242:	095b      	lsrs	r3, r3, #5
 800d244:	2264      	movs	r2, #100	; 0x64
 800d246:	fb02 f303 	mul.w	r3, r2, r3
 800d24a:	1acb      	subs	r3, r1, r3
 800d24c:	00db      	lsls	r3, r3, #3
 800d24e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d252:	4b36      	ldr	r3, [pc, #216]	; (800d32c <UART_SetConfig+0x2d4>)
 800d254:	fba3 2302 	umull	r2, r3, r3, r2
 800d258:	095b      	lsrs	r3, r3, #5
 800d25a:	005b      	lsls	r3, r3, #1
 800d25c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d260:	441c      	add	r4, r3
 800d262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d266:	2200      	movs	r2, #0
 800d268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d26c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d274:	4642      	mov	r2, r8
 800d276:	464b      	mov	r3, r9
 800d278:	1891      	adds	r1, r2, r2
 800d27a:	63b9      	str	r1, [r7, #56]	; 0x38
 800d27c:	415b      	adcs	r3, r3
 800d27e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d284:	4641      	mov	r1, r8
 800d286:	1851      	adds	r1, r2, r1
 800d288:	6339      	str	r1, [r7, #48]	; 0x30
 800d28a:	4649      	mov	r1, r9
 800d28c:	414b      	adcs	r3, r1
 800d28e:	637b      	str	r3, [r7, #52]	; 0x34
 800d290:	f04f 0200 	mov.w	r2, #0
 800d294:	f04f 0300 	mov.w	r3, #0
 800d298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d29c:	4659      	mov	r1, fp
 800d29e:	00cb      	lsls	r3, r1, #3
 800d2a0:	4651      	mov	r1, sl
 800d2a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2a6:	4651      	mov	r1, sl
 800d2a8:	00ca      	lsls	r2, r1, #3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	4642      	mov	r2, r8
 800d2b2:	189b      	adds	r3, r3, r2
 800d2b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2b8:	464b      	mov	r3, r9
 800d2ba:	460a      	mov	r2, r1
 800d2bc:	eb42 0303 	adc.w	r3, r2, r3
 800d2c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d2d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d2d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d2d8:	460b      	mov	r3, r1
 800d2da:	18db      	adds	r3, r3, r3
 800d2dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2de:	4613      	mov	r3, r2
 800d2e0:	eb42 0303 	adc.w	r3, r2, r3
 800d2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d2ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d2ee:	f7f3 fce5 	bl	8000cbc <__aeabi_uldivmod>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4b0d      	ldr	r3, [pc, #52]	; (800d32c <UART_SetConfig+0x2d4>)
 800d2f8:	fba3 1302 	umull	r1, r3, r3, r2
 800d2fc:	095b      	lsrs	r3, r3, #5
 800d2fe:	2164      	movs	r1, #100	; 0x64
 800d300:	fb01 f303 	mul.w	r3, r1, r3
 800d304:	1ad3      	subs	r3, r2, r3
 800d306:	00db      	lsls	r3, r3, #3
 800d308:	3332      	adds	r3, #50	; 0x32
 800d30a:	4a08      	ldr	r2, [pc, #32]	; (800d32c <UART_SetConfig+0x2d4>)
 800d30c:	fba2 2303 	umull	r2, r3, r2, r3
 800d310:	095b      	lsrs	r3, r3, #5
 800d312:	f003 0207 	and.w	r2, r3, #7
 800d316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4422      	add	r2, r4
 800d31e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d320:	e105      	b.n	800d52e <UART_SetConfig+0x4d6>
 800d322:	bf00      	nop
 800d324:	40011000 	.word	0x40011000
 800d328:	40011400 	.word	0x40011400
 800d32c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d334:	2200      	movs	r2, #0
 800d336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d33a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d33e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d342:	4642      	mov	r2, r8
 800d344:	464b      	mov	r3, r9
 800d346:	1891      	adds	r1, r2, r2
 800d348:	6239      	str	r1, [r7, #32]
 800d34a:	415b      	adcs	r3, r3
 800d34c:	627b      	str	r3, [r7, #36]	; 0x24
 800d34e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d352:	4641      	mov	r1, r8
 800d354:	1854      	adds	r4, r2, r1
 800d356:	4649      	mov	r1, r9
 800d358:	eb43 0501 	adc.w	r5, r3, r1
 800d35c:	f04f 0200 	mov.w	r2, #0
 800d360:	f04f 0300 	mov.w	r3, #0
 800d364:	00eb      	lsls	r3, r5, #3
 800d366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d36a:	00e2      	lsls	r2, r4, #3
 800d36c:	4614      	mov	r4, r2
 800d36e:	461d      	mov	r5, r3
 800d370:	4643      	mov	r3, r8
 800d372:	18e3      	adds	r3, r4, r3
 800d374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d378:	464b      	mov	r3, r9
 800d37a:	eb45 0303 	adc.w	r3, r5, r3
 800d37e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d38e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d392:	f04f 0200 	mov.w	r2, #0
 800d396:	f04f 0300 	mov.w	r3, #0
 800d39a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d39e:	4629      	mov	r1, r5
 800d3a0:	008b      	lsls	r3, r1, #2
 800d3a2:	4621      	mov	r1, r4
 800d3a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d3a8:	4621      	mov	r1, r4
 800d3aa:	008a      	lsls	r2, r1, #2
 800d3ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d3b0:	f7f3 fc84 	bl	8000cbc <__aeabi_uldivmod>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	4b60      	ldr	r3, [pc, #384]	; (800d53c <UART_SetConfig+0x4e4>)
 800d3ba:	fba3 2302 	umull	r2, r3, r3, r2
 800d3be:	095b      	lsrs	r3, r3, #5
 800d3c0:	011c      	lsls	r4, r3, #4
 800d3c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d3cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d3d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d3d4:	4642      	mov	r2, r8
 800d3d6:	464b      	mov	r3, r9
 800d3d8:	1891      	adds	r1, r2, r2
 800d3da:	61b9      	str	r1, [r7, #24]
 800d3dc:	415b      	adcs	r3, r3
 800d3de:	61fb      	str	r3, [r7, #28]
 800d3e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d3e4:	4641      	mov	r1, r8
 800d3e6:	1851      	adds	r1, r2, r1
 800d3e8:	6139      	str	r1, [r7, #16]
 800d3ea:	4649      	mov	r1, r9
 800d3ec:	414b      	adcs	r3, r1
 800d3ee:	617b      	str	r3, [r7, #20]
 800d3f0:	f04f 0200 	mov.w	r2, #0
 800d3f4:	f04f 0300 	mov.w	r3, #0
 800d3f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d3fc:	4659      	mov	r1, fp
 800d3fe:	00cb      	lsls	r3, r1, #3
 800d400:	4651      	mov	r1, sl
 800d402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d406:	4651      	mov	r1, sl
 800d408:	00ca      	lsls	r2, r1, #3
 800d40a:	4610      	mov	r0, r2
 800d40c:	4619      	mov	r1, r3
 800d40e:	4603      	mov	r3, r0
 800d410:	4642      	mov	r2, r8
 800d412:	189b      	adds	r3, r3, r2
 800d414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d418:	464b      	mov	r3, r9
 800d41a:	460a      	mov	r2, r1
 800d41c:	eb42 0303 	adc.w	r3, r2, r3
 800d420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	67bb      	str	r3, [r7, #120]	; 0x78
 800d42e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d430:	f04f 0200 	mov.w	r2, #0
 800d434:	f04f 0300 	mov.w	r3, #0
 800d438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d43c:	4649      	mov	r1, r9
 800d43e:	008b      	lsls	r3, r1, #2
 800d440:	4641      	mov	r1, r8
 800d442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d446:	4641      	mov	r1, r8
 800d448:	008a      	lsls	r2, r1, #2
 800d44a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d44e:	f7f3 fc35 	bl	8000cbc <__aeabi_uldivmod>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	4b39      	ldr	r3, [pc, #228]	; (800d53c <UART_SetConfig+0x4e4>)
 800d458:	fba3 1302 	umull	r1, r3, r3, r2
 800d45c:	095b      	lsrs	r3, r3, #5
 800d45e:	2164      	movs	r1, #100	; 0x64
 800d460:	fb01 f303 	mul.w	r3, r1, r3
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	011b      	lsls	r3, r3, #4
 800d468:	3332      	adds	r3, #50	; 0x32
 800d46a:	4a34      	ldr	r2, [pc, #208]	; (800d53c <UART_SetConfig+0x4e4>)
 800d46c:	fba2 2303 	umull	r2, r3, r2, r3
 800d470:	095b      	lsrs	r3, r3, #5
 800d472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d476:	441c      	add	r4, r3
 800d478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d47c:	2200      	movs	r2, #0
 800d47e:	673b      	str	r3, [r7, #112]	; 0x70
 800d480:	677a      	str	r2, [r7, #116]	; 0x74
 800d482:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d486:	4642      	mov	r2, r8
 800d488:	464b      	mov	r3, r9
 800d48a:	1891      	adds	r1, r2, r2
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	415b      	adcs	r3, r3
 800d490:	60fb      	str	r3, [r7, #12]
 800d492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d496:	4641      	mov	r1, r8
 800d498:	1851      	adds	r1, r2, r1
 800d49a:	6039      	str	r1, [r7, #0]
 800d49c:	4649      	mov	r1, r9
 800d49e:	414b      	adcs	r3, r1
 800d4a0:	607b      	str	r3, [r7, #4]
 800d4a2:	f04f 0200 	mov.w	r2, #0
 800d4a6:	f04f 0300 	mov.w	r3, #0
 800d4aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d4ae:	4659      	mov	r1, fp
 800d4b0:	00cb      	lsls	r3, r1, #3
 800d4b2:	4651      	mov	r1, sl
 800d4b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d4b8:	4651      	mov	r1, sl
 800d4ba:	00ca      	lsls	r2, r1, #3
 800d4bc:	4610      	mov	r0, r2
 800d4be:	4619      	mov	r1, r3
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	4642      	mov	r2, r8
 800d4c4:	189b      	adds	r3, r3, r2
 800d4c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	460a      	mov	r2, r1
 800d4cc:	eb42 0303 	adc.w	r3, r2, r3
 800d4d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	663b      	str	r3, [r7, #96]	; 0x60
 800d4dc:	667a      	str	r2, [r7, #100]	; 0x64
 800d4de:	f04f 0200 	mov.w	r2, #0
 800d4e2:	f04f 0300 	mov.w	r3, #0
 800d4e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d4ea:	4649      	mov	r1, r9
 800d4ec:	008b      	lsls	r3, r1, #2
 800d4ee:	4641      	mov	r1, r8
 800d4f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d4f4:	4641      	mov	r1, r8
 800d4f6:	008a      	lsls	r2, r1, #2
 800d4f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d4fc:	f7f3 fbde 	bl	8000cbc <__aeabi_uldivmod>
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	4b0d      	ldr	r3, [pc, #52]	; (800d53c <UART_SetConfig+0x4e4>)
 800d506:	fba3 1302 	umull	r1, r3, r3, r2
 800d50a:	095b      	lsrs	r3, r3, #5
 800d50c:	2164      	movs	r1, #100	; 0x64
 800d50e:	fb01 f303 	mul.w	r3, r1, r3
 800d512:	1ad3      	subs	r3, r2, r3
 800d514:	011b      	lsls	r3, r3, #4
 800d516:	3332      	adds	r3, #50	; 0x32
 800d518:	4a08      	ldr	r2, [pc, #32]	; (800d53c <UART_SetConfig+0x4e4>)
 800d51a:	fba2 2303 	umull	r2, r3, r2, r3
 800d51e:	095b      	lsrs	r3, r3, #5
 800d520:	f003 020f 	and.w	r2, r3, #15
 800d524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4422      	add	r2, r4
 800d52c:	609a      	str	r2, [r3, #8]
}
 800d52e:	bf00      	nop
 800d530:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d534:	46bd      	mov	sp, r7
 800d536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d53a:	bf00      	nop
 800d53c:	51eb851f 	.word	0x51eb851f

0800d540 <asctime>:
 800d540:	4b0d      	ldr	r3, [pc, #52]	; (800d578 <asctime+0x38>)
 800d542:	b570      	push	{r4, r5, r6, lr}
 800d544:	681d      	ldr	r5, [r3, #0]
 800d546:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800d548:	4604      	mov	r4, r0
 800d54a:	b976      	cbnz	r6, 800d56a <asctime+0x2a>
 800d54c:	201a      	movs	r0, #26
 800d54e:	f000 f89b 	bl	800d688 <malloc>
 800d552:	4602      	mov	r2, r0
 800d554:	6428      	str	r0, [r5, #64]	; 0x40
 800d556:	b920      	cbnz	r0, 800d562 <asctime+0x22>
 800d558:	4b08      	ldr	r3, [pc, #32]	; (800d57c <asctime+0x3c>)
 800d55a:	4809      	ldr	r0, [pc, #36]	; (800d580 <asctime+0x40>)
 800d55c:	2137      	movs	r1, #55	; 0x37
 800d55e:	f000 f837 	bl	800d5d0 <__assert_func>
 800d562:	221a      	movs	r2, #26
 800d564:	4631      	mov	r1, r6
 800d566:	f000 f8ad 	bl	800d6c4 <memset>
 800d56a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800d56c:	4620      	mov	r0, r4
 800d56e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d572:	f000 b807 	b.w	800d584 <asctime_r>
 800d576:	bf00      	nop
 800d578:	200002c0 	.word	0x200002c0
 800d57c:	0803daf4 	.word	0x0803daf4
 800d580:	0803db0b 	.word	0x0803db0b

0800d584 <asctime_r>:
 800d584:	b510      	push	{r4, lr}
 800d586:	460c      	mov	r4, r1
 800d588:	6941      	ldr	r1, [r0, #20]
 800d58a:	6903      	ldr	r3, [r0, #16]
 800d58c:	6982      	ldr	r2, [r0, #24]
 800d58e:	b086      	sub	sp, #24
 800d590:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800d594:	9104      	str	r1, [sp, #16]
 800d596:	6801      	ldr	r1, [r0, #0]
 800d598:	9103      	str	r1, [sp, #12]
 800d59a:	6841      	ldr	r1, [r0, #4]
 800d59c:	9102      	str	r1, [sp, #8]
 800d59e:	6881      	ldr	r1, [r0, #8]
 800d5a0:	9101      	str	r1, [sp, #4]
 800d5a2:	68c1      	ldr	r1, [r0, #12]
 800d5a4:	9100      	str	r1, [sp, #0]
 800d5a6:	4907      	ldr	r1, [pc, #28]	; (800d5c4 <asctime_r+0x40>)
 800d5a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d5ac:	440b      	add	r3, r1
 800d5ae:	4906      	ldr	r1, [pc, #24]	; (800d5c8 <asctime_r+0x44>)
 800d5b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d5b4:	440a      	add	r2, r1
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	4904      	ldr	r1, [pc, #16]	; (800d5cc <asctime_r+0x48>)
 800d5ba:	f001 f9b1 	bl	800e920 <siprintf>
 800d5be:	4620      	mov	r0, r4
 800d5c0:	b006      	add	sp, #24
 800d5c2:	bd10      	pop	{r4, pc}
 800d5c4:	0803db9c 	.word	0x0803db9c
 800d5c8:	0803db87 	.word	0x0803db87
 800d5cc:	0803db67 	.word	0x0803db67

0800d5d0 <__assert_func>:
 800d5d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5d2:	4614      	mov	r4, r2
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	4b09      	ldr	r3, [pc, #36]	; (800d5fc <__assert_func+0x2c>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4605      	mov	r5, r0
 800d5dc:	68d8      	ldr	r0, [r3, #12]
 800d5de:	b14c      	cbz	r4, 800d5f4 <__assert_func+0x24>
 800d5e0:	4b07      	ldr	r3, [pc, #28]	; (800d600 <__assert_func+0x30>)
 800d5e2:	9100      	str	r1, [sp, #0]
 800d5e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5e8:	4906      	ldr	r1, [pc, #24]	; (800d604 <__assert_func+0x34>)
 800d5ea:	462b      	mov	r3, r5
 800d5ec:	f000 f816 	bl	800d61c <fiprintf>
 800d5f0:	f003 fa52 	bl	8010a98 <abort>
 800d5f4:	4b04      	ldr	r3, [pc, #16]	; (800d608 <__assert_func+0x38>)
 800d5f6:	461c      	mov	r4, r3
 800d5f8:	e7f3      	b.n	800d5e2 <__assert_func+0x12>
 800d5fa:	bf00      	nop
 800d5fc:	200002c0 	.word	0x200002c0
 800d600:	0803dbc0 	.word	0x0803dbc0
 800d604:	0803dbcd 	.word	0x0803dbcd
 800d608:	0803db86 	.word	0x0803db86

0800d60c <atof>:
 800d60c:	2100      	movs	r1, #0
 800d60e:	f002 bdc1 	b.w	8010194 <strtod>

0800d612 <atoi>:
 800d612:	220a      	movs	r2, #10
 800d614:	2100      	movs	r1, #0
 800d616:	f002 bea9 	b.w	801036c <strtol>
	...

0800d61c <fiprintf>:
 800d61c:	b40e      	push	{r1, r2, r3}
 800d61e:	b503      	push	{r0, r1, lr}
 800d620:	4601      	mov	r1, r0
 800d622:	ab03      	add	r3, sp, #12
 800d624:	4805      	ldr	r0, [pc, #20]	; (800d63c <fiprintf+0x20>)
 800d626:	f853 2b04 	ldr.w	r2, [r3], #4
 800d62a:	6800      	ldr	r0, [r0, #0]
 800d62c:	9301      	str	r3, [sp, #4]
 800d62e:	f000 fbcd 	bl	800ddcc <_vfiprintf_r>
 800d632:	b002      	add	sp, #8
 800d634:	f85d eb04 	ldr.w	lr, [sp], #4
 800d638:	b003      	add	sp, #12
 800d63a:	4770      	bx	lr
 800d63c:	200002c0 	.word	0x200002c0

0800d640 <__libc_init_array>:
 800d640:	b570      	push	{r4, r5, r6, lr}
 800d642:	4d0d      	ldr	r5, [pc, #52]	; (800d678 <__libc_init_array+0x38>)
 800d644:	4c0d      	ldr	r4, [pc, #52]	; (800d67c <__libc_init_array+0x3c>)
 800d646:	1b64      	subs	r4, r4, r5
 800d648:	10a4      	asrs	r4, r4, #2
 800d64a:	2600      	movs	r6, #0
 800d64c:	42a6      	cmp	r6, r4
 800d64e:	d109      	bne.n	800d664 <__libc_init_array+0x24>
 800d650:	4d0b      	ldr	r5, [pc, #44]	; (800d680 <__libc_init_array+0x40>)
 800d652:	4c0c      	ldr	r4, [pc, #48]	; (800d684 <__libc_init_array+0x44>)
 800d654:	f008 fe5e 	bl	8016314 <_init>
 800d658:	1b64      	subs	r4, r4, r5
 800d65a:	10a4      	asrs	r4, r4, #2
 800d65c:	2600      	movs	r6, #0
 800d65e:	42a6      	cmp	r6, r4
 800d660:	d105      	bne.n	800d66e <__libc_init_array+0x2e>
 800d662:	bd70      	pop	{r4, r5, r6, pc}
 800d664:	f855 3b04 	ldr.w	r3, [r5], #4
 800d668:	4798      	blx	r3
 800d66a:	3601      	adds	r6, #1
 800d66c:	e7ee      	b.n	800d64c <__libc_init_array+0xc>
 800d66e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d672:	4798      	blx	r3
 800d674:	3601      	adds	r6, #1
 800d676:	e7f2      	b.n	800d65e <__libc_init_array+0x1e>
 800d678:	0803e650 	.word	0x0803e650
 800d67c:	0803e650 	.word	0x0803e650
 800d680:	0803e650 	.word	0x0803e650
 800d684:	0803e654 	.word	0x0803e654

0800d688 <malloc>:
 800d688:	4b02      	ldr	r3, [pc, #8]	; (800d694 <malloc+0xc>)
 800d68a:	4601      	mov	r1, r0
 800d68c:	6818      	ldr	r0, [r3, #0]
 800d68e:	f000 baff 	b.w	800dc90 <_malloc_r>
 800d692:	bf00      	nop
 800d694:	200002c0 	.word	0x200002c0

0800d698 <free>:
 800d698:	4b02      	ldr	r3, [pc, #8]	; (800d6a4 <free+0xc>)
 800d69a:	4601      	mov	r1, r0
 800d69c:	6818      	ldr	r0, [r3, #0]
 800d69e:	f000 ba8b 	b.w	800dbb8 <_free_r>
 800d6a2:	bf00      	nop
 800d6a4:	200002c0 	.word	0x200002c0

0800d6a8 <memcpy>:
 800d6a8:	440a      	add	r2, r1
 800d6aa:	4291      	cmp	r1, r2
 800d6ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6b0:	d100      	bne.n	800d6b4 <memcpy+0xc>
 800d6b2:	4770      	bx	lr
 800d6b4:	b510      	push	{r4, lr}
 800d6b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6be:	4291      	cmp	r1, r2
 800d6c0:	d1f9      	bne.n	800d6b6 <memcpy+0xe>
 800d6c2:	bd10      	pop	{r4, pc}

0800d6c4 <memset>:
 800d6c4:	4402      	add	r2, r0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d100      	bne.n	800d6ce <memset+0xa>
 800d6cc:	4770      	bx	lr
 800d6ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d6d2:	e7f9      	b.n	800d6c8 <memset+0x4>

0800d6d4 <validate_structure>:
 800d6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6d6:	6801      	ldr	r1, [r0, #0]
 800d6d8:	293b      	cmp	r1, #59	; 0x3b
 800d6da:	4604      	mov	r4, r0
 800d6dc:	d911      	bls.n	800d702 <validate_structure+0x2e>
 800d6de:	223c      	movs	r2, #60	; 0x3c
 800d6e0:	4668      	mov	r0, sp
 800d6e2:	f003 f9f5 	bl	8010ad0 <div>
 800d6e6:	9a01      	ldr	r2, [sp, #4]
 800d6e8:	6863      	ldr	r3, [r4, #4]
 800d6ea:	9900      	ldr	r1, [sp, #0]
 800d6ec:	2a00      	cmp	r2, #0
 800d6ee:	440b      	add	r3, r1
 800d6f0:	6063      	str	r3, [r4, #4]
 800d6f2:	bfbb      	ittet	lt
 800d6f4:	323c      	addlt	r2, #60	; 0x3c
 800d6f6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d6fa:	6022      	strge	r2, [r4, #0]
 800d6fc:	6022      	strlt	r2, [r4, #0]
 800d6fe:	bfb8      	it	lt
 800d700:	6063      	strlt	r3, [r4, #4]
 800d702:	6861      	ldr	r1, [r4, #4]
 800d704:	293b      	cmp	r1, #59	; 0x3b
 800d706:	d911      	bls.n	800d72c <validate_structure+0x58>
 800d708:	223c      	movs	r2, #60	; 0x3c
 800d70a:	4668      	mov	r0, sp
 800d70c:	f003 f9e0 	bl	8010ad0 <div>
 800d710:	9a01      	ldr	r2, [sp, #4]
 800d712:	68a3      	ldr	r3, [r4, #8]
 800d714:	9900      	ldr	r1, [sp, #0]
 800d716:	2a00      	cmp	r2, #0
 800d718:	440b      	add	r3, r1
 800d71a:	60a3      	str	r3, [r4, #8]
 800d71c:	bfbb      	ittet	lt
 800d71e:	323c      	addlt	r2, #60	; 0x3c
 800d720:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d724:	6062      	strge	r2, [r4, #4]
 800d726:	6062      	strlt	r2, [r4, #4]
 800d728:	bfb8      	it	lt
 800d72a:	60a3      	strlt	r3, [r4, #8]
 800d72c:	68a1      	ldr	r1, [r4, #8]
 800d72e:	2917      	cmp	r1, #23
 800d730:	d911      	bls.n	800d756 <validate_structure+0x82>
 800d732:	2218      	movs	r2, #24
 800d734:	4668      	mov	r0, sp
 800d736:	f003 f9cb 	bl	8010ad0 <div>
 800d73a:	9a01      	ldr	r2, [sp, #4]
 800d73c:	68e3      	ldr	r3, [r4, #12]
 800d73e:	9900      	ldr	r1, [sp, #0]
 800d740:	2a00      	cmp	r2, #0
 800d742:	440b      	add	r3, r1
 800d744:	60e3      	str	r3, [r4, #12]
 800d746:	bfbb      	ittet	lt
 800d748:	3218      	addlt	r2, #24
 800d74a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d74e:	60a2      	strge	r2, [r4, #8]
 800d750:	60a2      	strlt	r2, [r4, #8]
 800d752:	bfb8      	it	lt
 800d754:	60e3      	strlt	r3, [r4, #12]
 800d756:	6921      	ldr	r1, [r4, #16]
 800d758:	290b      	cmp	r1, #11
 800d75a:	d911      	bls.n	800d780 <validate_structure+0xac>
 800d75c:	220c      	movs	r2, #12
 800d75e:	4668      	mov	r0, sp
 800d760:	f003 f9b6 	bl	8010ad0 <div>
 800d764:	9a01      	ldr	r2, [sp, #4]
 800d766:	6963      	ldr	r3, [r4, #20]
 800d768:	9900      	ldr	r1, [sp, #0]
 800d76a:	2a00      	cmp	r2, #0
 800d76c:	440b      	add	r3, r1
 800d76e:	6163      	str	r3, [r4, #20]
 800d770:	bfbb      	ittet	lt
 800d772:	320c      	addlt	r2, #12
 800d774:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d778:	6122      	strge	r2, [r4, #16]
 800d77a:	6122      	strlt	r2, [r4, #16]
 800d77c:	bfb8      	it	lt
 800d77e:	6163      	strlt	r3, [r4, #20]
 800d780:	6963      	ldr	r3, [r4, #20]
 800d782:	0798      	lsls	r0, r3, #30
 800d784:	d120      	bne.n	800d7c8 <validate_structure+0xf4>
 800d786:	2164      	movs	r1, #100	; 0x64
 800d788:	fb93 f2f1 	sdiv	r2, r3, r1
 800d78c:	fb01 3212 	mls	r2, r1, r2, r3
 800d790:	b9e2      	cbnz	r2, 800d7cc <validate_structure+0xf8>
 800d792:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800d796:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d79a:	fb93 f1f2 	sdiv	r1, r3, r2
 800d79e:	fb02 3311 	mls	r3, r2, r1, r3
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	bf14      	ite	ne
 800d7a6:	231c      	movne	r3, #28
 800d7a8:	231d      	moveq	r3, #29
 800d7aa:	68e2      	ldr	r2, [r4, #12]
 800d7ac:	2a00      	cmp	r2, #0
 800d7ae:	dc0f      	bgt.n	800d7d0 <validate_structure+0xfc>
 800d7b0:	4f33      	ldr	r7, [pc, #204]	; (800d880 <validate_structure+0x1ac>)
 800d7b2:	260b      	movs	r6, #11
 800d7b4:	2064      	movs	r0, #100	; 0x64
 800d7b6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800d7ba:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800d7be:	f1bc 0f00 	cmp.w	ip, #0
 800d7c2:	dd31      	ble.n	800d828 <validate_structure+0x154>
 800d7c4:	b003      	add	sp, #12
 800d7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c8:	231c      	movs	r3, #28
 800d7ca:	e7ee      	b.n	800d7aa <validate_structure+0xd6>
 800d7cc:	231d      	movs	r3, #29
 800d7ce:	e7ec      	b.n	800d7aa <validate_structure+0xd6>
 800d7d0:	4e2b      	ldr	r6, [pc, #172]	; (800d880 <validate_structure+0x1ac>)
 800d7d2:	2700      	movs	r7, #0
 800d7d4:	2064      	movs	r0, #100	; 0x64
 800d7d6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800d7da:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800d7de:	2a01      	cmp	r2, #1
 800d7e0:	bf14      	ite	ne
 800d7e2:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800d7e6:	469c      	moveq	ip, r3
 800d7e8:	4561      	cmp	r1, ip
 800d7ea:	ddeb      	ble.n	800d7c4 <validate_structure+0xf0>
 800d7ec:	3201      	adds	r2, #1
 800d7ee:	eba1 010c 	sub.w	r1, r1, ip
 800d7f2:	2a0c      	cmp	r2, #12
 800d7f4:	60e1      	str	r1, [r4, #12]
 800d7f6:	6122      	str	r2, [r4, #16]
 800d7f8:	d1ef      	bne.n	800d7da <validate_structure+0x106>
 800d7fa:	6963      	ldr	r3, [r4, #20]
 800d7fc:	1c5a      	adds	r2, r3, #1
 800d7fe:	0791      	lsls	r1, r2, #30
 800d800:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800d804:	d137      	bne.n	800d876 <validate_structure+0x1a2>
 800d806:	fb92 f1f0 	sdiv	r1, r2, r0
 800d80a:	fb00 2211 	mls	r2, r0, r1, r2
 800d80e:	2a00      	cmp	r2, #0
 800d810:	d133      	bne.n	800d87a <validate_structure+0x1a6>
 800d812:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800d816:	fb93 f2f5 	sdiv	r2, r3, r5
 800d81a:	fb05 3312 	mls	r3, r5, r2, r3
 800d81e:	2b00      	cmp	r3, #0
 800d820:	bf14      	ite	ne
 800d822:	231c      	movne	r3, #28
 800d824:	231d      	moveq	r3, #29
 800d826:	e7d8      	b.n	800d7da <validate_structure+0x106>
 800d828:	6921      	ldr	r1, [r4, #16]
 800d82a:	3901      	subs	r1, #1
 800d82c:	6121      	str	r1, [r4, #16]
 800d82e:	3101      	adds	r1, #1
 800d830:	d114      	bne.n	800d85c <validate_structure+0x188>
 800d832:	6963      	ldr	r3, [r4, #20]
 800d834:	1e5a      	subs	r2, r3, #1
 800d836:	0791      	lsls	r1, r2, #30
 800d838:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800d83c:	d117      	bne.n	800d86e <validate_structure+0x19a>
 800d83e:	fb92 f1f0 	sdiv	r1, r2, r0
 800d842:	fb00 2211 	mls	r2, r0, r1, r2
 800d846:	b9a2      	cbnz	r2, 800d872 <validate_structure+0x19e>
 800d848:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800d84c:	fb93 f2f5 	sdiv	r2, r3, r5
 800d850:	fb05 3312 	mls	r3, r5, r2, r3
 800d854:	2b00      	cmp	r3, #0
 800d856:	bf14      	ite	ne
 800d858:	231c      	movne	r3, #28
 800d85a:	231d      	moveq	r3, #29
 800d85c:	6922      	ldr	r2, [r4, #16]
 800d85e:	2a01      	cmp	r2, #1
 800d860:	bf14      	ite	ne
 800d862:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800d866:	461a      	moveq	r2, r3
 800d868:	4462      	add	r2, ip
 800d86a:	60e2      	str	r2, [r4, #12]
 800d86c:	e7a5      	b.n	800d7ba <validate_structure+0xe6>
 800d86e:	231c      	movs	r3, #28
 800d870:	e7f4      	b.n	800d85c <validate_structure+0x188>
 800d872:	231d      	movs	r3, #29
 800d874:	e7f2      	b.n	800d85c <validate_structure+0x188>
 800d876:	231c      	movs	r3, #28
 800d878:	e7af      	b.n	800d7da <validate_structure+0x106>
 800d87a:	231d      	movs	r3, #29
 800d87c:	e7ad      	b.n	800d7da <validate_structure+0x106>
 800d87e:	bf00      	nop
 800d880:	0803dc00 	.word	0x0803dc00

0800d884 <mktime>:
 800d884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d888:	b085      	sub	sp, #20
 800d88a:	4607      	mov	r7, r0
 800d88c:	f004 fd1e 	bl	80122cc <__gettzinfo>
 800d890:	4681      	mov	r9, r0
 800d892:	4638      	mov	r0, r7
 800d894:	f7ff ff1e 	bl	800d6d4 <validate_structure>
 800d898:	e9d7 4000 	ldrd	r4, r0, [r7]
 800d89c:	233c      	movs	r3, #60	; 0x3c
 800d89e:	fb03 4400 	mla	r4, r3, r0, r4
 800d8a2:	68b8      	ldr	r0, [r7, #8]
 800d8a4:	4abc      	ldr	r2, [pc, #752]	; (800db98 <mktime+0x314>)
 800d8a6:	697e      	ldr	r6, [r7, #20]
 800d8a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d8ac:	fb03 4400 	mla	r4, r3, r0, r4
 800d8b0:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800d8b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d8b8:	3d01      	subs	r5, #1
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	4415      	add	r5, r2
 800d8be:	dd11      	ble.n	800d8e4 <mktime+0x60>
 800d8c0:	07b1      	lsls	r1, r6, #30
 800d8c2:	d10f      	bne.n	800d8e4 <mktime+0x60>
 800d8c4:	2264      	movs	r2, #100	; 0x64
 800d8c6:	fb96 f3f2 	sdiv	r3, r6, r2
 800d8ca:	fb02 6313 	mls	r3, r2, r3, r6
 800d8ce:	b943      	cbnz	r3, 800d8e2 <mktime+0x5e>
 800d8d0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800d8d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d8d8:	fb93 f1f2 	sdiv	r1, r3, r2
 800d8dc:	fb02 3311 	mls	r3, r2, r1, r3
 800d8e0:	b903      	cbnz	r3, 800d8e4 <mktime+0x60>
 800d8e2:	3501      	adds	r5, #1
 800d8e4:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800d8e8:	3310      	adds	r3, #16
 800d8ea:	f644 6220 	movw	r2, #20000	; 0x4e20
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	61fd      	str	r5, [r7, #28]
 800d8f2:	f200 815d 	bhi.w	800dbb0 <mktime+0x32c>
 800d8f6:	2e46      	cmp	r6, #70	; 0x46
 800d8f8:	dd71      	ble.n	800d9de <mktime+0x15a>
 800d8fa:	2346      	movs	r3, #70	; 0x46
 800d8fc:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d900:	2164      	movs	r1, #100	; 0x64
 800d902:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d906:	079a      	lsls	r2, r3, #30
 800d908:	d163      	bne.n	800d9d2 <mktime+0x14e>
 800d90a:	fb93 f2f1 	sdiv	r2, r3, r1
 800d90e:	fb01 3212 	mls	r2, r1, r2, r3
 800d912:	2a00      	cmp	r2, #0
 800d914:	d160      	bne.n	800d9d8 <mktime+0x154>
 800d916:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800d91a:	fb92 fef0 	sdiv	lr, r2, r0
 800d91e:	fb00 221e 	mls	r2, r0, lr, r2
 800d922:	2a00      	cmp	r2, #0
 800d924:	bf14      	ite	ne
 800d926:	4662      	movne	r2, ip
 800d928:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800d92c:	3301      	adds	r3, #1
 800d92e:	429e      	cmp	r6, r3
 800d930:	4415      	add	r5, r2
 800d932:	d1e8      	bne.n	800d906 <mktime+0x82>
 800d934:	4b99      	ldr	r3, [pc, #612]	; (800db9c <mktime+0x318>)
 800d936:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800d93a:	fbc5 4803 	smlal	r4, r8, r5, r3
 800d93e:	f002 fe47 	bl	80105d0 <__tz_lock>
 800d942:	f002 fe51 	bl	80105e8 <_tzset_unlocked>
 800d946:	4b96      	ldr	r3, [pc, #600]	; (800dba0 <mktime+0x31c>)
 800d948:	f8d3 b000 	ldr.w	fp, [r3]
 800d94c:	f1bb 0f00 	cmp.w	fp, #0
 800d950:	d039      	beq.n	800d9c6 <mktime+0x142>
 800d952:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800d956:	6978      	ldr	r0, [r7, #20]
 800d958:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d95c:	f1bb 0f01 	cmp.w	fp, #1
 800d960:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800d964:	46da      	mov	sl, fp
 800d966:	bfa8      	it	ge
 800d968:	f04f 0a01 	movge.w	sl, #1
 800d96c:	4283      	cmp	r3, r0
 800d96e:	d178      	bne.n	800da62 <mktime+0x1de>
 800d970:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800d974:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800d978:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800d97c:	1a5b      	subs	r3, r3, r1
 800d97e:	9302      	str	r3, [sp, #8]
 800d980:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800d984:	9303      	str	r3, [sp, #12]
 800d986:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800d98a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800d98e:	9301      	str	r3, [sp, #4]
 800d990:	ebb3 0c02 	subs.w	ip, r3, r2
 800d994:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800d998:	4564      	cmp	r4, ip
 800d99a:	eb78 0300 	sbcs.w	r3, r8, r0
 800d99e:	da66      	bge.n	800da6e <mktime+0x1ea>
 800d9a0:	f8d9 3000 	ldr.w	r3, [r9]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d06f      	beq.n	800da88 <mktime+0x204>
 800d9a8:	9b02      	ldr	r3, [sp, #8]
 800d9aa:	429c      	cmp	r4, r3
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	eb78 0303 	sbcs.w	r3, r8, r3
 800d9b2:	db03      	blt.n	800d9bc <mktime+0x138>
 800d9b4:	4564      	cmp	r4, ip
 800d9b6:	eb78 0300 	sbcs.w	r3, r8, r0
 800d9ba:	db6b      	blt.n	800da94 <mktime+0x210>
 800d9bc:	f1bb 0f00 	cmp.w	fp, #0
 800d9c0:	f04f 0b00 	mov.w	fp, #0
 800d9c4:	da6b      	bge.n	800da9e <mktime+0x21a>
 800d9c6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800d9ca:	190c      	adds	r4, r1, r4
 800d9cc:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800d9d0:	e0a9      	b.n	800db26 <mktime+0x2a2>
 800d9d2:	f240 126d 	movw	r2, #365	; 0x16d
 800d9d6:	e7a9      	b.n	800d92c <mktime+0xa8>
 800d9d8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800d9dc:	e7a6      	b.n	800d92c <mktime+0xa8>
 800d9de:	d0a9      	beq.n	800d934 <mktime+0xb0>
 800d9e0:	2345      	movs	r3, #69	; 0x45
 800d9e2:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d9e6:	2164      	movs	r1, #100	; 0x64
 800d9e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d9ec:	e012      	b.n	800da14 <mktime+0x190>
 800d9ee:	bb62      	cbnz	r2, 800da4a <mktime+0x1c6>
 800d9f0:	fb93 f2f1 	sdiv	r2, r3, r1
 800d9f4:	fb01 3212 	mls	r2, r1, r2, r3
 800d9f8:	bb52      	cbnz	r2, 800da50 <mktime+0x1cc>
 800d9fa:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800d9fe:	fb92 fef0 	sdiv	lr, r2, r0
 800da02:	fb00 221e 	mls	r2, r0, lr, r2
 800da06:	2a00      	cmp	r2, #0
 800da08:	bf14      	ite	ne
 800da0a:	4662      	movne	r2, ip
 800da0c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800da10:	1aad      	subs	r5, r5, r2
 800da12:	3b01      	subs	r3, #1
 800da14:	429e      	cmp	r6, r3
 800da16:	f003 0203 	and.w	r2, r3, #3
 800da1a:	dbe8      	blt.n	800d9ee <mktime+0x16a>
 800da1c:	b9da      	cbnz	r2, 800da56 <mktime+0x1d2>
 800da1e:	2264      	movs	r2, #100	; 0x64
 800da20:	fb96 f3f2 	sdiv	r3, r6, r2
 800da24:	fb02 6313 	mls	r3, r2, r3, r6
 800da28:	b9c3      	cbnz	r3, 800da5c <mktime+0x1d8>
 800da2a:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800da2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800da32:	fb93 f1f2 	sdiv	r1, r3, r2
 800da36:	fb02 3311 	mls	r3, r2, r1, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f240 136d 	movw	r3, #365	; 0x16d
 800da40:	bf08      	it	eq
 800da42:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800da46:	1aed      	subs	r5, r5, r3
 800da48:	e774      	b.n	800d934 <mktime+0xb0>
 800da4a:	f240 126d 	movw	r2, #365	; 0x16d
 800da4e:	e7df      	b.n	800da10 <mktime+0x18c>
 800da50:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800da54:	e7dc      	b.n	800da10 <mktime+0x18c>
 800da56:	f240 136d 	movw	r3, #365	; 0x16d
 800da5a:	e7f4      	b.n	800da46 <mktime+0x1c2>
 800da5c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800da60:	e7f1      	b.n	800da46 <mktime+0x1c2>
 800da62:	f002 fd0b 	bl	801047c <__tzcalc_limits>
 800da66:	2800      	cmp	r0, #0
 800da68:	d182      	bne.n	800d970 <mktime+0xec>
 800da6a:	46d3      	mov	fp, sl
 800da6c:	e050      	b.n	800db10 <mktime+0x28c>
 800da6e:	9b01      	ldr	r3, [sp, #4]
 800da70:	1a5b      	subs	r3, r3, r1
 800da72:	9301      	str	r3, [sp, #4]
 800da74:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800da78:	eb6e 0e03 	sbc.w	lr, lr, r3
 800da7c:	9b01      	ldr	r3, [sp, #4]
 800da7e:	429c      	cmp	r4, r3
 800da80:	eb78 030e 	sbcs.w	r3, r8, lr
 800da84:	dbf1      	blt.n	800da6a <mktime+0x1e6>
 800da86:	e78b      	b.n	800d9a0 <mktime+0x11c>
 800da88:	9b02      	ldr	r3, [sp, #8]
 800da8a:	429c      	cmp	r4, r3
 800da8c:	9b03      	ldr	r3, [sp, #12]
 800da8e:	eb78 0303 	sbcs.w	r3, r8, r3
 800da92:	db8f      	blt.n	800d9b4 <mktime+0x130>
 800da94:	f1bb 0f00 	cmp.w	fp, #0
 800da98:	db3e      	blt.n	800db18 <mktime+0x294>
 800da9a:	f04f 0b01 	mov.w	fp, #1
 800da9e:	ea8a 0a0b 	eor.w	sl, sl, fp
 800daa2:	f1ba 0f01 	cmp.w	sl, #1
 800daa6:	d133      	bne.n	800db10 <mktime+0x28c>
 800daa8:	f1bb 0f00 	cmp.w	fp, #0
 800daac:	d04e      	beq.n	800db4c <mktime+0x2c8>
 800daae:	1a52      	subs	r2, r2, r1
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800dab6:	4413      	add	r3, r2
 800dab8:	1914      	adds	r4, r2, r4
 800daba:	603b      	str	r3, [r7, #0]
 800dabc:	4638      	mov	r0, r7
 800dabe:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800dac2:	f7ff fe07 	bl	800d6d4 <validate_structure>
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	ebb2 020a 	subs.w	r2, r2, sl
 800dacc:	d020      	beq.n	800db10 <mktime+0x28c>
 800dace:	2a01      	cmp	r2, #1
 800dad0:	dc3e      	bgt.n	800db50 <mktime+0x2cc>
 800dad2:	1c90      	adds	r0, r2, #2
 800dad4:	bfd8      	it	le
 800dad6:	2201      	movle	r2, #1
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	18d3      	adds	r3, r2, r3
 800dadc:	4415      	add	r5, r2
 800dade:	d540      	bpl.n	800db62 <mktime+0x2de>
 800dae0:	1e73      	subs	r3, r6, #1
 800dae2:	0799      	lsls	r1, r3, #30
 800dae4:	d137      	bne.n	800db56 <mktime+0x2d2>
 800dae6:	2264      	movs	r2, #100	; 0x64
 800dae8:	fb93 f1f2 	sdiv	r1, r3, r2
 800daec:	fb02 3311 	mls	r3, r2, r1, r3
 800daf0:	bba3      	cbnz	r3, 800db5c <mktime+0x2d8>
 800daf2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800daf6:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800dafa:	fb96 f2f3 	sdiv	r2, r6, r3
 800dafe:	fb03 6612 	mls	r6, r3, r2, r6
 800db02:	2e00      	cmp	r6, #0
 800db04:	f240 136d 	movw	r3, #365	; 0x16d
 800db08:	bf18      	it	ne
 800db0a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800db0e:	61fb      	str	r3, [r7, #28]
 800db10:	f1bb 0f01 	cmp.w	fp, #1
 800db14:	f47f af57 	bne.w	800d9c6 <mktime+0x142>
 800db18:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800db1c:	190c      	adds	r4, r1, r4
 800db1e:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800db22:	f04f 0b01 	mov.w	fp, #1
 800db26:	f002 fd59 	bl	80105dc <__tz_unlock>
 800db2a:	3504      	adds	r5, #4
 800db2c:	2307      	movs	r3, #7
 800db2e:	fb95 f3f3 	sdiv	r3, r5, r3
 800db32:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800db36:	1aed      	subs	r5, r5, r3
 800db38:	bf48      	it	mi
 800db3a:	3507      	addmi	r5, #7
 800db3c:	f8c7 b020 	str.w	fp, [r7, #32]
 800db40:	61bd      	str	r5, [r7, #24]
 800db42:	4620      	mov	r0, r4
 800db44:	4641      	mov	r1, r8
 800db46:	b005      	add	sp, #20
 800db48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4c:	1a8a      	subs	r2, r1, r2
 800db4e:	e7af      	b.n	800dab0 <mktime+0x22c>
 800db50:	f04f 32ff 	mov.w	r2, #4294967295
 800db54:	e7c0      	b.n	800dad8 <mktime+0x254>
 800db56:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800db5a:	e7d8      	b.n	800db0e <mktime+0x28a>
 800db5c:	f240 136d 	movw	r3, #365	; 0x16d
 800db60:	e7d5      	b.n	800db0e <mktime+0x28a>
 800db62:	07b2      	lsls	r2, r6, #30
 800db64:	d11e      	bne.n	800dba4 <mktime+0x320>
 800db66:	2164      	movs	r1, #100	; 0x64
 800db68:	fb96 f2f1 	sdiv	r2, r6, r1
 800db6c:	fb01 6212 	mls	r2, r1, r2, r6
 800db70:	b9da      	cbnz	r2, 800dbaa <mktime+0x326>
 800db72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800db76:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800db7a:	fb96 f1f2 	sdiv	r1, r6, r2
 800db7e:	fb02 6611 	mls	r6, r2, r1, r6
 800db82:	2e00      	cmp	r6, #0
 800db84:	f240 126d 	movw	r2, #365	; 0x16d
 800db88:	bf08      	it	eq
 800db8a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800db8e:	4293      	cmp	r3, r2
 800db90:	bfa8      	it	ge
 800db92:	1a9b      	subge	r3, r3, r2
 800db94:	e7bb      	b.n	800db0e <mktime+0x28a>
 800db96:	bf00      	nop
 800db98:	0803dc30 	.word	0x0803dc30
 800db9c:	00015180 	.word	0x00015180
 800dba0:	20003c18 	.word	0x20003c18
 800dba4:	f240 126d 	movw	r2, #365	; 0x16d
 800dba8:	e7f1      	b.n	800db8e <mktime+0x30a>
 800dbaa:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800dbae:	e7ee      	b.n	800db8e <mktime+0x30a>
 800dbb0:	f04f 34ff 	mov.w	r4, #4294967295
 800dbb4:	46a0      	mov	r8, r4
 800dbb6:	e7c4      	b.n	800db42 <mktime+0x2be>

0800dbb8 <_free_r>:
 800dbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbba:	2900      	cmp	r1, #0
 800dbbc:	d044      	beq.n	800dc48 <_free_r+0x90>
 800dbbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbc2:	9001      	str	r0, [sp, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f1a1 0404 	sub.w	r4, r1, #4
 800dbca:	bfb8      	it	lt
 800dbcc:	18e4      	addlt	r4, r4, r3
 800dbce:	f004 fc33 	bl	8012438 <__malloc_lock>
 800dbd2:	4a1e      	ldr	r2, [pc, #120]	; (800dc4c <_free_r+0x94>)
 800dbd4:	9801      	ldr	r0, [sp, #4]
 800dbd6:	6813      	ldr	r3, [r2, #0]
 800dbd8:	b933      	cbnz	r3, 800dbe8 <_free_r+0x30>
 800dbda:	6063      	str	r3, [r4, #4]
 800dbdc:	6014      	str	r4, [r2, #0]
 800dbde:	b003      	add	sp, #12
 800dbe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbe4:	f004 bc2e 	b.w	8012444 <__malloc_unlock>
 800dbe8:	42a3      	cmp	r3, r4
 800dbea:	d908      	bls.n	800dbfe <_free_r+0x46>
 800dbec:	6825      	ldr	r5, [r4, #0]
 800dbee:	1961      	adds	r1, r4, r5
 800dbf0:	428b      	cmp	r3, r1
 800dbf2:	bf01      	itttt	eq
 800dbf4:	6819      	ldreq	r1, [r3, #0]
 800dbf6:	685b      	ldreq	r3, [r3, #4]
 800dbf8:	1949      	addeq	r1, r1, r5
 800dbfa:	6021      	streq	r1, [r4, #0]
 800dbfc:	e7ed      	b.n	800dbda <_free_r+0x22>
 800dbfe:	461a      	mov	r2, r3
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	b10b      	cbz	r3, 800dc08 <_free_r+0x50>
 800dc04:	42a3      	cmp	r3, r4
 800dc06:	d9fa      	bls.n	800dbfe <_free_r+0x46>
 800dc08:	6811      	ldr	r1, [r2, #0]
 800dc0a:	1855      	adds	r5, r2, r1
 800dc0c:	42a5      	cmp	r5, r4
 800dc0e:	d10b      	bne.n	800dc28 <_free_r+0x70>
 800dc10:	6824      	ldr	r4, [r4, #0]
 800dc12:	4421      	add	r1, r4
 800dc14:	1854      	adds	r4, r2, r1
 800dc16:	42a3      	cmp	r3, r4
 800dc18:	6011      	str	r1, [r2, #0]
 800dc1a:	d1e0      	bne.n	800dbde <_free_r+0x26>
 800dc1c:	681c      	ldr	r4, [r3, #0]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	6053      	str	r3, [r2, #4]
 800dc22:	4421      	add	r1, r4
 800dc24:	6011      	str	r1, [r2, #0]
 800dc26:	e7da      	b.n	800dbde <_free_r+0x26>
 800dc28:	d902      	bls.n	800dc30 <_free_r+0x78>
 800dc2a:	230c      	movs	r3, #12
 800dc2c:	6003      	str	r3, [r0, #0]
 800dc2e:	e7d6      	b.n	800dbde <_free_r+0x26>
 800dc30:	6825      	ldr	r5, [r4, #0]
 800dc32:	1961      	adds	r1, r4, r5
 800dc34:	428b      	cmp	r3, r1
 800dc36:	bf04      	itt	eq
 800dc38:	6819      	ldreq	r1, [r3, #0]
 800dc3a:	685b      	ldreq	r3, [r3, #4]
 800dc3c:	6063      	str	r3, [r4, #4]
 800dc3e:	bf04      	itt	eq
 800dc40:	1949      	addeq	r1, r1, r5
 800dc42:	6021      	streq	r1, [r4, #0]
 800dc44:	6054      	str	r4, [r2, #4]
 800dc46:	e7ca      	b.n	800dbde <_free_r+0x26>
 800dc48:	b003      	add	sp, #12
 800dc4a:	bd30      	pop	{r4, r5, pc}
 800dc4c:	20003bf4 	.word	0x20003bf4

0800dc50 <sbrk_aligned>:
 800dc50:	b570      	push	{r4, r5, r6, lr}
 800dc52:	4e0e      	ldr	r6, [pc, #56]	; (800dc8c <sbrk_aligned+0x3c>)
 800dc54:	460c      	mov	r4, r1
 800dc56:	6831      	ldr	r1, [r6, #0]
 800dc58:	4605      	mov	r5, r0
 800dc5a:	b911      	cbnz	r1, 800dc62 <sbrk_aligned+0x12>
 800dc5c:	f000 fe50 	bl	800e900 <_sbrk_r>
 800dc60:	6030      	str	r0, [r6, #0]
 800dc62:	4621      	mov	r1, r4
 800dc64:	4628      	mov	r0, r5
 800dc66:	f000 fe4b 	bl	800e900 <_sbrk_r>
 800dc6a:	1c43      	adds	r3, r0, #1
 800dc6c:	d00a      	beq.n	800dc84 <sbrk_aligned+0x34>
 800dc6e:	1cc4      	adds	r4, r0, #3
 800dc70:	f024 0403 	bic.w	r4, r4, #3
 800dc74:	42a0      	cmp	r0, r4
 800dc76:	d007      	beq.n	800dc88 <sbrk_aligned+0x38>
 800dc78:	1a21      	subs	r1, r4, r0
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	f000 fe40 	bl	800e900 <_sbrk_r>
 800dc80:	3001      	adds	r0, #1
 800dc82:	d101      	bne.n	800dc88 <sbrk_aligned+0x38>
 800dc84:	f04f 34ff 	mov.w	r4, #4294967295
 800dc88:	4620      	mov	r0, r4
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}
 800dc8c:	20003bf8 	.word	0x20003bf8

0800dc90 <_malloc_r>:
 800dc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc94:	1ccd      	adds	r5, r1, #3
 800dc96:	f025 0503 	bic.w	r5, r5, #3
 800dc9a:	3508      	adds	r5, #8
 800dc9c:	2d0c      	cmp	r5, #12
 800dc9e:	bf38      	it	cc
 800dca0:	250c      	movcc	r5, #12
 800dca2:	2d00      	cmp	r5, #0
 800dca4:	4607      	mov	r7, r0
 800dca6:	db01      	blt.n	800dcac <_malloc_r+0x1c>
 800dca8:	42a9      	cmp	r1, r5
 800dcaa:	d905      	bls.n	800dcb8 <_malloc_r+0x28>
 800dcac:	230c      	movs	r3, #12
 800dcae:	603b      	str	r3, [r7, #0]
 800dcb0:	2600      	movs	r6, #0
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb8:	4e2e      	ldr	r6, [pc, #184]	; (800dd74 <_malloc_r+0xe4>)
 800dcba:	f004 fbbd 	bl	8012438 <__malloc_lock>
 800dcbe:	6833      	ldr	r3, [r6, #0]
 800dcc0:	461c      	mov	r4, r3
 800dcc2:	bb34      	cbnz	r4, 800dd12 <_malloc_r+0x82>
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	4638      	mov	r0, r7
 800dcc8:	f7ff ffc2 	bl	800dc50 <sbrk_aligned>
 800dccc:	1c43      	adds	r3, r0, #1
 800dcce:	4604      	mov	r4, r0
 800dcd0:	d14d      	bne.n	800dd6e <_malloc_r+0xde>
 800dcd2:	6834      	ldr	r4, [r6, #0]
 800dcd4:	4626      	mov	r6, r4
 800dcd6:	2e00      	cmp	r6, #0
 800dcd8:	d140      	bne.n	800dd5c <_malloc_r+0xcc>
 800dcda:	6823      	ldr	r3, [r4, #0]
 800dcdc:	4631      	mov	r1, r6
 800dcde:	4638      	mov	r0, r7
 800dce0:	eb04 0803 	add.w	r8, r4, r3
 800dce4:	f000 fe0c 	bl	800e900 <_sbrk_r>
 800dce8:	4580      	cmp	r8, r0
 800dcea:	d13a      	bne.n	800dd62 <_malloc_r+0xd2>
 800dcec:	6821      	ldr	r1, [r4, #0]
 800dcee:	3503      	adds	r5, #3
 800dcf0:	1a6d      	subs	r5, r5, r1
 800dcf2:	f025 0503 	bic.w	r5, r5, #3
 800dcf6:	3508      	adds	r5, #8
 800dcf8:	2d0c      	cmp	r5, #12
 800dcfa:	bf38      	it	cc
 800dcfc:	250c      	movcc	r5, #12
 800dcfe:	4629      	mov	r1, r5
 800dd00:	4638      	mov	r0, r7
 800dd02:	f7ff ffa5 	bl	800dc50 <sbrk_aligned>
 800dd06:	3001      	adds	r0, #1
 800dd08:	d02b      	beq.n	800dd62 <_malloc_r+0xd2>
 800dd0a:	6823      	ldr	r3, [r4, #0]
 800dd0c:	442b      	add	r3, r5
 800dd0e:	6023      	str	r3, [r4, #0]
 800dd10:	e00e      	b.n	800dd30 <_malloc_r+0xa0>
 800dd12:	6822      	ldr	r2, [r4, #0]
 800dd14:	1b52      	subs	r2, r2, r5
 800dd16:	d41e      	bmi.n	800dd56 <_malloc_r+0xc6>
 800dd18:	2a0b      	cmp	r2, #11
 800dd1a:	d916      	bls.n	800dd4a <_malloc_r+0xba>
 800dd1c:	1961      	adds	r1, r4, r5
 800dd1e:	42a3      	cmp	r3, r4
 800dd20:	6025      	str	r5, [r4, #0]
 800dd22:	bf18      	it	ne
 800dd24:	6059      	strne	r1, [r3, #4]
 800dd26:	6863      	ldr	r3, [r4, #4]
 800dd28:	bf08      	it	eq
 800dd2a:	6031      	streq	r1, [r6, #0]
 800dd2c:	5162      	str	r2, [r4, r5]
 800dd2e:	604b      	str	r3, [r1, #4]
 800dd30:	4638      	mov	r0, r7
 800dd32:	f104 060b 	add.w	r6, r4, #11
 800dd36:	f004 fb85 	bl	8012444 <__malloc_unlock>
 800dd3a:	f026 0607 	bic.w	r6, r6, #7
 800dd3e:	1d23      	adds	r3, r4, #4
 800dd40:	1af2      	subs	r2, r6, r3
 800dd42:	d0b6      	beq.n	800dcb2 <_malloc_r+0x22>
 800dd44:	1b9b      	subs	r3, r3, r6
 800dd46:	50a3      	str	r3, [r4, r2]
 800dd48:	e7b3      	b.n	800dcb2 <_malloc_r+0x22>
 800dd4a:	6862      	ldr	r2, [r4, #4]
 800dd4c:	42a3      	cmp	r3, r4
 800dd4e:	bf0c      	ite	eq
 800dd50:	6032      	streq	r2, [r6, #0]
 800dd52:	605a      	strne	r2, [r3, #4]
 800dd54:	e7ec      	b.n	800dd30 <_malloc_r+0xa0>
 800dd56:	4623      	mov	r3, r4
 800dd58:	6864      	ldr	r4, [r4, #4]
 800dd5a:	e7b2      	b.n	800dcc2 <_malloc_r+0x32>
 800dd5c:	4634      	mov	r4, r6
 800dd5e:	6876      	ldr	r6, [r6, #4]
 800dd60:	e7b9      	b.n	800dcd6 <_malloc_r+0x46>
 800dd62:	230c      	movs	r3, #12
 800dd64:	603b      	str	r3, [r7, #0]
 800dd66:	4638      	mov	r0, r7
 800dd68:	f004 fb6c 	bl	8012444 <__malloc_unlock>
 800dd6c:	e7a1      	b.n	800dcb2 <_malloc_r+0x22>
 800dd6e:	6025      	str	r5, [r4, #0]
 800dd70:	e7de      	b.n	800dd30 <_malloc_r+0xa0>
 800dd72:	bf00      	nop
 800dd74:	20003bf4 	.word	0x20003bf4

0800dd78 <__sfputc_r>:
 800dd78:	6893      	ldr	r3, [r2, #8]
 800dd7a:	3b01      	subs	r3, #1
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	b410      	push	{r4}
 800dd80:	6093      	str	r3, [r2, #8]
 800dd82:	da08      	bge.n	800dd96 <__sfputc_r+0x1e>
 800dd84:	6994      	ldr	r4, [r2, #24]
 800dd86:	42a3      	cmp	r3, r4
 800dd88:	db01      	blt.n	800dd8e <__sfputc_r+0x16>
 800dd8a:	290a      	cmp	r1, #10
 800dd8c:	d103      	bne.n	800dd96 <__sfputc_r+0x1e>
 800dd8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd92:	f002 bdaf 	b.w	80108f4 <__swbuf_r>
 800dd96:	6813      	ldr	r3, [r2, #0]
 800dd98:	1c58      	adds	r0, r3, #1
 800dd9a:	6010      	str	r0, [r2, #0]
 800dd9c:	7019      	strb	r1, [r3, #0]
 800dd9e:	4608      	mov	r0, r1
 800dda0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <__sfputs_r>:
 800dda6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda8:	4606      	mov	r6, r0
 800ddaa:	460f      	mov	r7, r1
 800ddac:	4614      	mov	r4, r2
 800ddae:	18d5      	adds	r5, r2, r3
 800ddb0:	42ac      	cmp	r4, r5
 800ddb2:	d101      	bne.n	800ddb8 <__sfputs_r+0x12>
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	e007      	b.n	800ddc8 <__sfputs_r+0x22>
 800ddb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddbc:	463a      	mov	r2, r7
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	f7ff ffda 	bl	800dd78 <__sfputc_r>
 800ddc4:	1c43      	adds	r3, r0, #1
 800ddc6:	d1f3      	bne.n	800ddb0 <__sfputs_r+0xa>
 800ddc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddcc <_vfiprintf_r>:
 800ddcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd0:	460d      	mov	r5, r1
 800ddd2:	b09d      	sub	sp, #116	; 0x74
 800ddd4:	4614      	mov	r4, r2
 800ddd6:	4698      	mov	r8, r3
 800ddd8:	4606      	mov	r6, r0
 800ddda:	b118      	cbz	r0, 800dde4 <_vfiprintf_r+0x18>
 800dddc:	6983      	ldr	r3, [r0, #24]
 800ddde:	b90b      	cbnz	r3, 800dde4 <_vfiprintf_r+0x18>
 800dde0:	f003 fe24 	bl	8011a2c <__sinit>
 800dde4:	4b89      	ldr	r3, [pc, #548]	; (800e00c <_vfiprintf_r+0x240>)
 800dde6:	429d      	cmp	r5, r3
 800dde8:	d11b      	bne.n	800de22 <_vfiprintf_r+0x56>
 800ddea:	6875      	ldr	r5, [r6, #4]
 800ddec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddee:	07d9      	lsls	r1, r3, #31
 800ddf0:	d405      	bmi.n	800ddfe <_vfiprintf_r+0x32>
 800ddf2:	89ab      	ldrh	r3, [r5, #12]
 800ddf4:	059a      	lsls	r2, r3, #22
 800ddf6:	d402      	bmi.n	800ddfe <_vfiprintf_r+0x32>
 800ddf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddfa:	f004 fa75 	bl	80122e8 <__retarget_lock_acquire_recursive>
 800ddfe:	89ab      	ldrh	r3, [r5, #12]
 800de00:	071b      	lsls	r3, r3, #28
 800de02:	d501      	bpl.n	800de08 <_vfiprintf_r+0x3c>
 800de04:	692b      	ldr	r3, [r5, #16]
 800de06:	b9eb      	cbnz	r3, 800de44 <_vfiprintf_r+0x78>
 800de08:	4629      	mov	r1, r5
 800de0a:	4630      	mov	r0, r6
 800de0c:	f002 fdd6 	bl	80109bc <__swsetup_r>
 800de10:	b1c0      	cbz	r0, 800de44 <_vfiprintf_r+0x78>
 800de12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de14:	07dc      	lsls	r4, r3, #31
 800de16:	d50e      	bpl.n	800de36 <_vfiprintf_r+0x6a>
 800de18:	f04f 30ff 	mov.w	r0, #4294967295
 800de1c:	b01d      	add	sp, #116	; 0x74
 800de1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de22:	4b7b      	ldr	r3, [pc, #492]	; (800e010 <_vfiprintf_r+0x244>)
 800de24:	429d      	cmp	r5, r3
 800de26:	d101      	bne.n	800de2c <_vfiprintf_r+0x60>
 800de28:	68b5      	ldr	r5, [r6, #8]
 800de2a:	e7df      	b.n	800ddec <_vfiprintf_r+0x20>
 800de2c:	4b79      	ldr	r3, [pc, #484]	; (800e014 <_vfiprintf_r+0x248>)
 800de2e:	429d      	cmp	r5, r3
 800de30:	bf08      	it	eq
 800de32:	68f5      	ldreq	r5, [r6, #12]
 800de34:	e7da      	b.n	800ddec <_vfiprintf_r+0x20>
 800de36:	89ab      	ldrh	r3, [r5, #12]
 800de38:	0598      	lsls	r0, r3, #22
 800de3a:	d4ed      	bmi.n	800de18 <_vfiprintf_r+0x4c>
 800de3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de3e:	f004 fa55 	bl	80122ec <__retarget_lock_release_recursive>
 800de42:	e7e9      	b.n	800de18 <_vfiprintf_r+0x4c>
 800de44:	2300      	movs	r3, #0
 800de46:	9309      	str	r3, [sp, #36]	; 0x24
 800de48:	2320      	movs	r3, #32
 800de4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de52:	2330      	movs	r3, #48	; 0x30
 800de54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e018 <_vfiprintf_r+0x24c>
 800de58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de5c:	f04f 0901 	mov.w	r9, #1
 800de60:	4623      	mov	r3, r4
 800de62:	469a      	mov	sl, r3
 800de64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de68:	b10a      	cbz	r2, 800de6e <_vfiprintf_r+0xa2>
 800de6a:	2a25      	cmp	r2, #37	; 0x25
 800de6c:	d1f9      	bne.n	800de62 <_vfiprintf_r+0x96>
 800de6e:	ebba 0b04 	subs.w	fp, sl, r4
 800de72:	d00b      	beq.n	800de8c <_vfiprintf_r+0xc0>
 800de74:	465b      	mov	r3, fp
 800de76:	4622      	mov	r2, r4
 800de78:	4629      	mov	r1, r5
 800de7a:	4630      	mov	r0, r6
 800de7c:	f7ff ff93 	bl	800dda6 <__sfputs_r>
 800de80:	3001      	adds	r0, #1
 800de82:	f000 80aa 	beq.w	800dfda <_vfiprintf_r+0x20e>
 800de86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de88:	445a      	add	r2, fp
 800de8a:	9209      	str	r2, [sp, #36]	; 0x24
 800de8c:	f89a 3000 	ldrb.w	r3, [sl]
 800de90:	2b00      	cmp	r3, #0
 800de92:	f000 80a2 	beq.w	800dfda <_vfiprintf_r+0x20e>
 800de96:	2300      	movs	r3, #0
 800de98:	f04f 32ff 	mov.w	r2, #4294967295
 800de9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dea0:	f10a 0a01 	add.w	sl, sl, #1
 800dea4:	9304      	str	r3, [sp, #16]
 800dea6:	9307      	str	r3, [sp, #28]
 800dea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800deac:	931a      	str	r3, [sp, #104]	; 0x68
 800deae:	4654      	mov	r4, sl
 800deb0:	2205      	movs	r2, #5
 800deb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb6:	4858      	ldr	r0, [pc, #352]	; (800e018 <_vfiprintf_r+0x24c>)
 800deb8:	f7f2 f9a2 	bl	8000200 <memchr>
 800debc:	9a04      	ldr	r2, [sp, #16]
 800debe:	b9d8      	cbnz	r0, 800def8 <_vfiprintf_r+0x12c>
 800dec0:	06d1      	lsls	r1, r2, #27
 800dec2:	bf44      	itt	mi
 800dec4:	2320      	movmi	r3, #32
 800dec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deca:	0713      	lsls	r3, r2, #28
 800decc:	bf44      	itt	mi
 800dece:	232b      	movmi	r3, #43	; 0x2b
 800ded0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ded4:	f89a 3000 	ldrb.w	r3, [sl]
 800ded8:	2b2a      	cmp	r3, #42	; 0x2a
 800deda:	d015      	beq.n	800df08 <_vfiprintf_r+0x13c>
 800dedc:	9a07      	ldr	r2, [sp, #28]
 800dede:	4654      	mov	r4, sl
 800dee0:	2000      	movs	r0, #0
 800dee2:	f04f 0c0a 	mov.w	ip, #10
 800dee6:	4621      	mov	r1, r4
 800dee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deec:	3b30      	subs	r3, #48	; 0x30
 800deee:	2b09      	cmp	r3, #9
 800def0:	d94e      	bls.n	800df90 <_vfiprintf_r+0x1c4>
 800def2:	b1b0      	cbz	r0, 800df22 <_vfiprintf_r+0x156>
 800def4:	9207      	str	r2, [sp, #28]
 800def6:	e014      	b.n	800df22 <_vfiprintf_r+0x156>
 800def8:	eba0 0308 	sub.w	r3, r0, r8
 800defc:	fa09 f303 	lsl.w	r3, r9, r3
 800df00:	4313      	orrs	r3, r2
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	46a2      	mov	sl, r4
 800df06:	e7d2      	b.n	800deae <_vfiprintf_r+0xe2>
 800df08:	9b03      	ldr	r3, [sp, #12]
 800df0a:	1d19      	adds	r1, r3, #4
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	9103      	str	r1, [sp, #12]
 800df10:	2b00      	cmp	r3, #0
 800df12:	bfbb      	ittet	lt
 800df14:	425b      	neglt	r3, r3
 800df16:	f042 0202 	orrlt.w	r2, r2, #2
 800df1a:	9307      	strge	r3, [sp, #28]
 800df1c:	9307      	strlt	r3, [sp, #28]
 800df1e:	bfb8      	it	lt
 800df20:	9204      	strlt	r2, [sp, #16]
 800df22:	7823      	ldrb	r3, [r4, #0]
 800df24:	2b2e      	cmp	r3, #46	; 0x2e
 800df26:	d10c      	bne.n	800df42 <_vfiprintf_r+0x176>
 800df28:	7863      	ldrb	r3, [r4, #1]
 800df2a:	2b2a      	cmp	r3, #42	; 0x2a
 800df2c:	d135      	bne.n	800df9a <_vfiprintf_r+0x1ce>
 800df2e:	9b03      	ldr	r3, [sp, #12]
 800df30:	1d1a      	adds	r2, r3, #4
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	9203      	str	r2, [sp, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	bfb8      	it	lt
 800df3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800df3e:	3402      	adds	r4, #2
 800df40:	9305      	str	r3, [sp, #20]
 800df42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e028 <_vfiprintf_r+0x25c>
 800df46:	7821      	ldrb	r1, [r4, #0]
 800df48:	2203      	movs	r2, #3
 800df4a:	4650      	mov	r0, sl
 800df4c:	f7f2 f958 	bl	8000200 <memchr>
 800df50:	b140      	cbz	r0, 800df64 <_vfiprintf_r+0x198>
 800df52:	2340      	movs	r3, #64	; 0x40
 800df54:	eba0 000a 	sub.w	r0, r0, sl
 800df58:	fa03 f000 	lsl.w	r0, r3, r0
 800df5c:	9b04      	ldr	r3, [sp, #16]
 800df5e:	4303      	orrs	r3, r0
 800df60:	3401      	adds	r4, #1
 800df62:	9304      	str	r3, [sp, #16]
 800df64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df68:	482c      	ldr	r0, [pc, #176]	; (800e01c <_vfiprintf_r+0x250>)
 800df6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df6e:	2206      	movs	r2, #6
 800df70:	f7f2 f946 	bl	8000200 <memchr>
 800df74:	2800      	cmp	r0, #0
 800df76:	d03f      	beq.n	800dff8 <_vfiprintf_r+0x22c>
 800df78:	4b29      	ldr	r3, [pc, #164]	; (800e020 <_vfiprintf_r+0x254>)
 800df7a:	bb1b      	cbnz	r3, 800dfc4 <_vfiprintf_r+0x1f8>
 800df7c:	9b03      	ldr	r3, [sp, #12]
 800df7e:	3307      	adds	r3, #7
 800df80:	f023 0307 	bic.w	r3, r3, #7
 800df84:	3308      	adds	r3, #8
 800df86:	9303      	str	r3, [sp, #12]
 800df88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df8a:	443b      	add	r3, r7
 800df8c:	9309      	str	r3, [sp, #36]	; 0x24
 800df8e:	e767      	b.n	800de60 <_vfiprintf_r+0x94>
 800df90:	fb0c 3202 	mla	r2, ip, r2, r3
 800df94:	460c      	mov	r4, r1
 800df96:	2001      	movs	r0, #1
 800df98:	e7a5      	b.n	800dee6 <_vfiprintf_r+0x11a>
 800df9a:	2300      	movs	r3, #0
 800df9c:	3401      	adds	r4, #1
 800df9e:	9305      	str	r3, [sp, #20]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	f04f 0c0a 	mov.w	ip, #10
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfac:	3a30      	subs	r2, #48	; 0x30
 800dfae:	2a09      	cmp	r2, #9
 800dfb0:	d903      	bls.n	800dfba <_vfiprintf_r+0x1ee>
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d0c5      	beq.n	800df42 <_vfiprintf_r+0x176>
 800dfb6:	9105      	str	r1, [sp, #20]
 800dfb8:	e7c3      	b.n	800df42 <_vfiprintf_r+0x176>
 800dfba:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e7f0      	b.n	800dfa6 <_vfiprintf_r+0x1da>
 800dfc4:	ab03      	add	r3, sp, #12
 800dfc6:	9300      	str	r3, [sp, #0]
 800dfc8:	462a      	mov	r2, r5
 800dfca:	4b16      	ldr	r3, [pc, #88]	; (800e024 <_vfiprintf_r+0x258>)
 800dfcc:	a904      	add	r1, sp, #16
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f000 f8cc 	bl	800e16c <_printf_float>
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	1c78      	adds	r0, r7, #1
 800dfd8:	d1d6      	bne.n	800df88 <_vfiprintf_r+0x1bc>
 800dfda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfdc:	07d9      	lsls	r1, r3, #31
 800dfde:	d405      	bmi.n	800dfec <_vfiprintf_r+0x220>
 800dfe0:	89ab      	ldrh	r3, [r5, #12]
 800dfe2:	059a      	lsls	r2, r3, #22
 800dfe4:	d402      	bmi.n	800dfec <_vfiprintf_r+0x220>
 800dfe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfe8:	f004 f980 	bl	80122ec <__retarget_lock_release_recursive>
 800dfec:	89ab      	ldrh	r3, [r5, #12]
 800dfee:	065b      	lsls	r3, r3, #25
 800dff0:	f53f af12 	bmi.w	800de18 <_vfiprintf_r+0x4c>
 800dff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dff6:	e711      	b.n	800de1c <_vfiprintf_r+0x50>
 800dff8:	ab03      	add	r3, sp, #12
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	462a      	mov	r2, r5
 800dffe:	4b09      	ldr	r3, [pc, #36]	; (800e024 <_vfiprintf_r+0x258>)
 800e000:	a904      	add	r1, sp, #16
 800e002:	4630      	mov	r0, r6
 800e004:	f000 fb56 	bl	800e6b4 <_printf_i>
 800e008:	e7e4      	b.n	800dfd4 <_vfiprintf_r+0x208>
 800e00a:	bf00      	nop
 800e00c:	0803e1ac 	.word	0x0803e1ac
 800e010:	0803e1cc 	.word	0x0803e1cc
 800e014:	0803e18c 	.word	0x0803e18c
 800e018:	0803dc60 	.word	0x0803dc60
 800e01c:	0803dc6a 	.word	0x0803dc6a
 800e020:	0800e16d 	.word	0x0800e16d
 800e024:	0800dda7 	.word	0x0800dda7
 800e028:	0803dc66 	.word	0x0803dc66

0800e02c <__cvt>:
 800e02c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e030:	ec55 4b10 	vmov	r4, r5, d0
 800e034:	2d00      	cmp	r5, #0
 800e036:	460e      	mov	r6, r1
 800e038:	4619      	mov	r1, r3
 800e03a:	462b      	mov	r3, r5
 800e03c:	bfbb      	ittet	lt
 800e03e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e042:	461d      	movlt	r5, r3
 800e044:	2300      	movge	r3, #0
 800e046:	232d      	movlt	r3, #45	; 0x2d
 800e048:	700b      	strb	r3, [r1, #0]
 800e04a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e04c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e050:	4691      	mov	r9, r2
 800e052:	f023 0820 	bic.w	r8, r3, #32
 800e056:	bfbc      	itt	lt
 800e058:	4622      	movlt	r2, r4
 800e05a:	4614      	movlt	r4, r2
 800e05c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e060:	d005      	beq.n	800e06e <__cvt+0x42>
 800e062:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e066:	d100      	bne.n	800e06a <__cvt+0x3e>
 800e068:	3601      	adds	r6, #1
 800e06a:	2102      	movs	r1, #2
 800e06c:	e000      	b.n	800e070 <__cvt+0x44>
 800e06e:	2103      	movs	r1, #3
 800e070:	ab03      	add	r3, sp, #12
 800e072:	9301      	str	r3, [sp, #4]
 800e074:	ab02      	add	r3, sp, #8
 800e076:	9300      	str	r3, [sp, #0]
 800e078:	ec45 4b10 	vmov	d0, r4, r5
 800e07c:	4653      	mov	r3, sl
 800e07e:	4632      	mov	r2, r6
 800e080:	f002 fdc6 	bl	8010c10 <_dtoa_r>
 800e084:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e088:	4607      	mov	r7, r0
 800e08a:	d102      	bne.n	800e092 <__cvt+0x66>
 800e08c:	f019 0f01 	tst.w	r9, #1
 800e090:	d022      	beq.n	800e0d8 <__cvt+0xac>
 800e092:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e096:	eb07 0906 	add.w	r9, r7, r6
 800e09a:	d110      	bne.n	800e0be <__cvt+0x92>
 800e09c:	783b      	ldrb	r3, [r7, #0]
 800e09e:	2b30      	cmp	r3, #48	; 0x30
 800e0a0:	d10a      	bne.n	800e0b8 <__cvt+0x8c>
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	4629      	mov	r1, r5
 800e0aa:	f7f2 fd27 	bl	8000afc <__aeabi_dcmpeq>
 800e0ae:	b918      	cbnz	r0, 800e0b8 <__cvt+0x8c>
 800e0b0:	f1c6 0601 	rsb	r6, r6, #1
 800e0b4:	f8ca 6000 	str.w	r6, [sl]
 800e0b8:	f8da 3000 	ldr.w	r3, [sl]
 800e0bc:	4499      	add	r9, r3
 800e0be:	2200      	movs	r2, #0
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	f7f2 fd19 	bl	8000afc <__aeabi_dcmpeq>
 800e0ca:	b108      	cbz	r0, 800e0d0 <__cvt+0xa4>
 800e0cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800e0d0:	2230      	movs	r2, #48	; 0x30
 800e0d2:	9b03      	ldr	r3, [sp, #12]
 800e0d4:	454b      	cmp	r3, r9
 800e0d6:	d307      	bcc.n	800e0e8 <__cvt+0xbc>
 800e0d8:	9b03      	ldr	r3, [sp, #12]
 800e0da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0dc:	1bdb      	subs	r3, r3, r7
 800e0de:	4638      	mov	r0, r7
 800e0e0:	6013      	str	r3, [r2, #0]
 800e0e2:	b004      	add	sp, #16
 800e0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0e8:	1c59      	adds	r1, r3, #1
 800e0ea:	9103      	str	r1, [sp, #12]
 800e0ec:	701a      	strb	r2, [r3, #0]
 800e0ee:	e7f0      	b.n	800e0d2 <__cvt+0xa6>

0800e0f0 <__exponent>:
 800e0f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2900      	cmp	r1, #0
 800e0f6:	bfb8      	it	lt
 800e0f8:	4249      	neglt	r1, r1
 800e0fa:	f803 2b02 	strb.w	r2, [r3], #2
 800e0fe:	bfb4      	ite	lt
 800e100:	222d      	movlt	r2, #45	; 0x2d
 800e102:	222b      	movge	r2, #43	; 0x2b
 800e104:	2909      	cmp	r1, #9
 800e106:	7042      	strb	r2, [r0, #1]
 800e108:	dd2a      	ble.n	800e160 <__exponent+0x70>
 800e10a:	f10d 0407 	add.w	r4, sp, #7
 800e10e:	46a4      	mov	ip, r4
 800e110:	270a      	movs	r7, #10
 800e112:	46a6      	mov	lr, r4
 800e114:	460a      	mov	r2, r1
 800e116:	fb91 f6f7 	sdiv	r6, r1, r7
 800e11a:	fb07 1516 	mls	r5, r7, r6, r1
 800e11e:	3530      	adds	r5, #48	; 0x30
 800e120:	2a63      	cmp	r2, #99	; 0x63
 800e122:	f104 34ff 	add.w	r4, r4, #4294967295
 800e126:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e12a:	4631      	mov	r1, r6
 800e12c:	dcf1      	bgt.n	800e112 <__exponent+0x22>
 800e12e:	3130      	adds	r1, #48	; 0x30
 800e130:	f1ae 0502 	sub.w	r5, lr, #2
 800e134:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e138:	1c44      	adds	r4, r0, #1
 800e13a:	4629      	mov	r1, r5
 800e13c:	4561      	cmp	r1, ip
 800e13e:	d30a      	bcc.n	800e156 <__exponent+0x66>
 800e140:	f10d 0209 	add.w	r2, sp, #9
 800e144:	eba2 020e 	sub.w	r2, r2, lr
 800e148:	4565      	cmp	r5, ip
 800e14a:	bf88      	it	hi
 800e14c:	2200      	movhi	r2, #0
 800e14e:	4413      	add	r3, r2
 800e150:	1a18      	subs	r0, r3, r0
 800e152:	b003      	add	sp, #12
 800e154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e15a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e15e:	e7ed      	b.n	800e13c <__exponent+0x4c>
 800e160:	2330      	movs	r3, #48	; 0x30
 800e162:	3130      	adds	r1, #48	; 0x30
 800e164:	7083      	strb	r3, [r0, #2]
 800e166:	70c1      	strb	r1, [r0, #3]
 800e168:	1d03      	adds	r3, r0, #4
 800e16a:	e7f1      	b.n	800e150 <__exponent+0x60>

0800e16c <_printf_float>:
 800e16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e170:	ed2d 8b02 	vpush	{d8}
 800e174:	b08d      	sub	sp, #52	; 0x34
 800e176:	460c      	mov	r4, r1
 800e178:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e17c:	4616      	mov	r6, r2
 800e17e:	461f      	mov	r7, r3
 800e180:	4605      	mov	r5, r0
 800e182:	f004 f8ab 	bl	80122dc <_localeconv_r>
 800e186:	f8d0 a000 	ldr.w	sl, [r0]
 800e18a:	4650      	mov	r0, sl
 800e18c:	f7f2 f830 	bl	80001f0 <strlen>
 800e190:	2300      	movs	r3, #0
 800e192:	930a      	str	r3, [sp, #40]	; 0x28
 800e194:	6823      	ldr	r3, [r4, #0]
 800e196:	9305      	str	r3, [sp, #20]
 800e198:	f8d8 3000 	ldr.w	r3, [r8]
 800e19c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e1a0:	3307      	adds	r3, #7
 800e1a2:	f023 0307 	bic.w	r3, r3, #7
 800e1a6:	f103 0208 	add.w	r2, r3, #8
 800e1aa:	f8c8 2000 	str.w	r2, [r8]
 800e1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e1b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e1ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e1be:	9307      	str	r3, [sp, #28]
 800e1c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800e1c4:	ee08 0a10 	vmov	s16, r0
 800e1c8:	4b9f      	ldr	r3, [pc, #636]	; (800e448 <_printf_float+0x2dc>)
 800e1ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e1d2:	f7f2 fcc5 	bl	8000b60 <__aeabi_dcmpun>
 800e1d6:	bb88      	cbnz	r0, 800e23c <_printf_float+0xd0>
 800e1d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1dc:	4b9a      	ldr	r3, [pc, #616]	; (800e448 <_printf_float+0x2dc>)
 800e1de:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e2:	f7f2 fc9f 	bl	8000b24 <__aeabi_dcmple>
 800e1e6:	bb48      	cbnz	r0, 800e23c <_printf_float+0xd0>
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	4640      	mov	r0, r8
 800e1ee:	4649      	mov	r1, r9
 800e1f0:	f7f2 fc8e 	bl	8000b10 <__aeabi_dcmplt>
 800e1f4:	b110      	cbz	r0, 800e1fc <_printf_float+0x90>
 800e1f6:	232d      	movs	r3, #45	; 0x2d
 800e1f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1fc:	4b93      	ldr	r3, [pc, #588]	; (800e44c <_printf_float+0x2e0>)
 800e1fe:	4894      	ldr	r0, [pc, #592]	; (800e450 <_printf_float+0x2e4>)
 800e200:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e204:	bf94      	ite	ls
 800e206:	4698      	movls	r8, r3
 800e208:	4680      	movhi	r8, r0
 800e20a:	2303      	movs	r3, #3
 800e20c:	6123      	str	r3, [r4, #16]
 800e20e:	9b05      	ldr	r3, [sp, #20]
 800e210:	f023 0204 	bic.w	r2, r3, #4
 800e214:	6022      	str	r2, [r4, #0]
 800e216:	f04f 0900 	mov.w	r9, #0
 800e21a:	9700      	str	r7, [sp, #0]
 800e21c:	4633      	mov	r3, r6
 800e21e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e220:	4621      	mov	r1, r4
 800e222:	4628      	mov	r0, r5
 800e224:	f000 f9d8 	bl	800e5d8 <_printf_common>
 800e228:	3001      	adds	r0, #1
 800e22a:	f040 8090 	bne.w	800e34e <_printf_float+0x1e2>
 800e22e:	f04f 30ff 	mov.w	r0, #4294967295
 800e232:	b00d      	add	sp, #52	; 0x34
 800e234:	ecbd 8b02 	vpop	{d8}
 800e238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23c:	4642      	mov	r2, r8
 800e23e:	464b      	mov	r3, r9
 800e240:	4640      	mov	r0, r8
 800e242:	4649      	mov	r1, r9
 800e244:	f7f2 fc8c 	bl	8000b60 <__aeabi_dcmpun>
 800e248:	b140      	cbz	r0, 800e25c <_printf_float+0xf0>
 800e24a:	464b      	mov	r3, r9
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	bfbc      	itt	lt
 800e250:	232d      	movlt	r3, #45	; 0x2d
 800e252:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e256:	487f      	ldr	r0, [pc, #508]	; (800e454 <_printf_float+0x2e8>)
 800e258:	4b7f      	ldr	r3, [pc, #508]	; (800e458 <_printf_float+0x2ec>)
 800e25a:	e7d1      	b.n	800e200 <_printf_float+0x94>
 800e25c:	6863      	ldr	r3, [r4, #4]
 800e25e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e262:	9206      	str	r2, [sp, #24]
 800e264:	1c5a      	adds	r2, r3, #1
 800e266:	d13f      	bne.n	800e2e8 <_printf_float+0x17c>
 800e268:	2306      	movs	r3, #6
 800e26a:	6063      	str	r3, [r4, #4]
 800e26c:	9b05      	ldr	r3, [sp, #20]
 800e26e:	6861      	ldr	r1, [r4, #4]
 800e270:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e274:	2300      	movs	r3, #0
 800e276:	9303      	str	r3, [sp, #12]
 800e278:	ab0a      	add	r3, sp, #40	; 0x28
 800e27a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e27e:	ab09      	add	r3, sp, #36	; 0x24
 800e280:	ec49 8b10 	vmov	d0, r8, r9
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	6022      	str	r2, [r4, #0]
 800e288:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e28c:	4628      	mov	r0, r5
 800e28e:	f7ff fecd 	bl	800e02c <__cvt>
 800e292:	9b06      	ldr	r3, [sp, #24]
 800e294:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e296:	2b47      	cmp	r3, #71	; 0x47
 800e298:	4680      	mov	r8, r0
 800e29a:	d108      	bne.n	800e2ae <_printf_float+0x142>
 800e29c:	1cc8      	adds	r0, r1, #3
 800e29e:	db02      	blt.n	800e2a6 <_printf_float+0x13a>
 800e2a0:	6863      	ldr	r3, [r4, #4]
 800e2a2:	4299      	cmp	r1, r3
 800e2a4:	dd41      	ble.n	800e32a <_printf_float+0x1be>
 800e2a6:	f1ab 0b02 	sub.w	fp, fp, #2
 800e2aa:	fa5f fb8b 	uxtb.w	fp, fp
 800e2ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e2b2:	d820      	bhi.n	800e2f6 <_printf_float+0x18a>
 800e2b4:	3901      	subs	r1, #1
 800e2b6:	465a      	mov	r2, fp
 800e2b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e2bc:	9109      	str	r1, [sp, #36]	; 0x24
 800e2be:	f7ff ff17 	bl	800e0f0 <__exponent>
 800e2c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2c4:	1813      	adds	r3, r2, r0
 800e2c6:	2a01      	cmp	r2, #1
 800e2c8:	4681      	mov	r9, r0
 800e2ca:	6123      	str	r3, [r4, #16]
 800e2cc:	dc02      	bgt.n	800e2d4 <_printf_float+0x168>
 800e2ce:	6822      	ldr	r2, [r4, #0]
 800e2d0:	07d2      	lsls	r2, r2, #31
 800e2d2:	d501      	bpl.n	800e2d8 <_printf_float+0x16c>
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	6123      	str	r3, [r4, #16]
 800e2d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d09c      	beq.n	800e21a <_printf_float+0xae>
 800e2e0:	232d      	movs	r3, #45	; 0x2d
 800e2e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2e6:	e798      	b.n	800e21a <_printf_float+0xae>
 800e2e8:	9a06      	ldr	r2, [sp, #24]
 800e2ea:	2a47      	cmp	r2, #71	; 0x47
 800e2ec:	d1be      	bne.n	800e26c <_printf_float+0x100>
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1bc      	bne.n	800e26c <_printf_float+0x100>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e7b9      	b.n	800e26a <_printf_float+0xfe>
 800e2f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e2fa:	d118      	bne.n	800e32e <_printf_float+0x1c2>
 800e2fc:	2900      	cmp	r1, #0
 800e2fe:	6863      	ldr	r3, [r4, #4]
 800e300:	dd0b      	ble.n	800e31a <_printf_float+0x1ae>
 800e302:	6121      	str	r1, [r4, #16]
 800e304:	b913      	cbnz	r3, 800e30c <_printf_float+0x1a0>
 800e306:	6822      	ldr	r2, [r4, #0]
 800e308:	07d0      	lsls	r0, r2, #31
 800e30a:	d502      	bpl.n	800e312 <_printf_float+0x1a6>
 800e30c:	3301      	adds	r3, #1
 800e30e:	440b      	add	r3, r1
 800e310:	6123      	str	r3, [r4, #16]
 800e312:	65a1      	str	r1, [r4, #88]	; 0x58
 800e314:	f04f 0900 	mov.w	r9, #0
 800e318:	e7de      	b.n	800e2d8 <_printf_float+0x16c>
 800e31a:	b913      	cbnz	r3, 800e322 <_printf_float+0x1b6>
 800e31c:	6822      	ldr	r2, [r4, #0]
 800e31e:	07d2      	lsls	r2, r2, #31
 800e320:	d501      	bpl.n	800e326 <_printf_float+0x1ba>
 800e322:	3302      	adds	r3, #2
 800e324:	e7f4      	b.n	800e310 <_printf_float+0x1a4>
 800e326:	2301      	movs	r3, #1
 800e328:	e7f2      	b.n	800e310 <_printf_float+0x1a4>
 800e32a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e330:	4299      	cmp	r1, r3
 800e332:	db05      	blt.n	800e340 <_printf_float+0x1d4>
 800e334:	6823      	ldr	r3, [r4, #0]
 800e336:	6121      	str	r1, [r4, #16]
 800e338:	07d8      	lsls	r0, r3, #31
 800e33a:	d5ea      	bpl.n	800e312 <_printf_float+0x1a6>
 800e33c:	1c4b      	adds	r3, r1, #1
 800e33e:	e7e7      	b.n	800e310 <_printf_float+0x1a4>
 800e340:	2900      	cmp	r1, #0
 800e342:	bfd4      	ite	le
 800e344:	f1c1 0202 	rsble	r2, r1, #2
 800e348:	2201      	movgt	r2, #1
 800e34a:	4413      	add	r3, r2
 800e34c:	e7e0      	b.n	800e310 <_printf_float+0x1a4>
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	055a      	lsls	r2, r3, #21
 800e352:	d407      	bmi.n	800e364 <_printf_float+0x1f8>
 800e354:	6923      	ldr	r3, [r4, #16]
 800e356:	4642      	mov	r2, r8
 800e358:	4631      	mov	r1, r6
 800e35a:	4628      	mov	r0, r5
 800e35c:	47b8      	blx	r7
 800e35e:	3001      	adds	r0, #1
 800e360:	d12c      	bne.n	800e3bc <_printf_float+0x250>
 800e362:	e764      	b.n	800e22e <_printf_float+0xc2>
 800e364:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e368:	f240 80e0 	bls.w	800e52c <_printf_float+0x3c0>
 800e36c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e370:	2200      	movs	r2, #0
 800e372:	2300      	movs	r3, #0
 800e374:	f7f2 fbc2 	bl	8000afc <__aeabi_dcmpeq>
 800e378:	2800      	cmp	r0, #0
 800e37a:	d034      	beq.n	800e3e6 <_printf_float+0x27a>
 800e37c:	4a37      	ldr	r2, [pc, #220]	; (800e45c <_printf_float+0x2f0>)
 800e37e:	2301      	movs	r3, #1
 800e380:	4631      	mov	r1, r6
 800e382:	4628      	mov	r0, r5
 800e384:	47b8      	blx	r7
 800e386:	3001      	adds	r0, #1
 800e388:	f43f af51 	beq.w	800e22e <_printf_float+0xc2>
 800e38c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e390:	429a      	cmp	r2, r3
 800e392:	db02      	blt.n	800e39a <_printf_float+0x22e>
 800e394:	6823      	ldr	r3, [r4, #0]
 800e396:	07d8      	lsls	r0, r3, #31
 800e398:	d510      	bpl.n	800e3bc <_printf_float+0x250>
 800e39a:	ee18 3a10 	vmov	r3, s16
 800e39e:	4652      	mov	r2, sl
 800e3a0:	4631      	mov	r1, r6
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	47b8      	blx	r7
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	f43f af41 	beq.w	800e22e <_printf_float+0xc2>
 800e3ac:	f04f 0800 	mov.w	r8, #0
 800e3b0:	f104 091a 	add.w	r9, r4, #26
 800e3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	4543      	cmp	r3, r8
 800e3ba:	dc09      	bgt.n	800e3d0 <_printf_float+0x264>
 800e3bc:	6823      	ldr	r3, [r4, #0]
 800e3be:	079b      	lsls	r3, r3, #30
 800e3c0:	f100 8105 	bmi.w	800e5ce <_printf_float+0x462>
 800e3c4:	68e0      	ldr	r0, [r4, #12]
 800e3c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3c8:	4298      	cmp	r0, r3
 800e3ca:	bfb8      	it	lt
 800e3cc:	4618      	movlt	r0, r3
 800e3ce:	e730      	b.n	800e232 <_printf_float+0xc6>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	464a      	mov	r2, r9
 800e3d4:	4631      	mov	r1, r6
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	47b8      	blx	r7
 800e3da:	3001      	adds	r0, #1
 800e3dc:	f43f af27 	beq.w	800e22e <_printf_float+0xc2>
 800e3e0:	f108 0801 	add.w	r8, r8, #1
 800e3e4:	e7e6      	b.n	800e3b4 <_printf_float+0x248>
 800e3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	dc39      	bgt.n	800e460 <_printf_float+0x2f4>
 800e3ec:	4a1b      	ldr	r2, [pc, #108]	; (800e45c <_printf_float+0x2f0>)
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	4631      	mov	r1, r6
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	47b8      	blx	r7
 800e3f6:	3001      	adds	r0, #1
 800e3f8:	f43f af19 	beq.w	800e22e <_printf_float+0xc2>
 800e3fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e400:	4313      	orrs	r3, r2
 800e402:	d102      	bne.n	800e40a <_printf_float+0x29e>
 800e404:	6823      	ldr	r3, [r4, #0]
 800e406:	07d9      	lsls	r1, r3, #31
 800e408:	d5d8      	bpl.n	800e3bc <_printf_float+0x250>
 800e40a:	ee18 3a10 	vmov	r3, s16
 800e40e:	4652      	mov	r2, sl
 800e410:	4631      	mov	r1, r6
 800e412:	4628      	mov	r0, r5
 800e414:	47b8      	blx	r7
 800e416:	3001      	adds	r0, #1
 800e418:	f43f af09 	beq.w	800e22e <_printf_float+0xc2>
 800e41c:	f04f 0900 	mov.w	r9, #0
 800e420:	f104 0a1a 	add.w	sl, r4, #26
 800e424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e426:	425b      	negs	r3, r3
 800e428:	454b      	cmp	r3, r9
 800e42a:	dc01      	bgt.n	800e430 <_printf_float+0x2c4>
 800e42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e42e:	e792      	b.n	800e356 <_printf_float+0x1ea>
 800e430:	2301      	movs	r3, #1
 800e432:	4652      	mov	r2, sl
 800e434:	4631      	mov	r1, r6
 800e436:	4628      	mov	r0, r5
 800e438:	47b8      	blx	r7
 800e43a:	3001      	adds	r0, #1
 800e43c:	f43f aef7 	beq.w	800e22e <_printf_float+0xc2>
 800e440:	f109 0901 	add.w	r9, r9, #1
 800e444:	e7ee      	b.n	800e424 <_printf_float+0x2b8>
 800e446:	bf00      	nop
 800e448:	7fefffff 	.word	0x7fefffff
 800e44c:	0803dc71 	.word	0x0803dc71
 800e450:	0803dc75 	.word	0x0803dc75
 800e454:	0803dc7d 	.word	0x0803dc7d
 800e458:	0803dc79 	.word	0x0803dc79
 800e45c:	0803e428 	.word	0x0803e428
 800e460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e462:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e464:	429a      	cmp	r2, r3
 800e466:	bfa8      	it	ge
 800e468:	461a      	movge	r2, r3
 800e46a:	2a00      	cmp	r2, #0
 800e46c:	4691      	mov	r9, r2
 800e46e:	dc37      	bgt.n	800e4e0 <_printf_float+0x374>
 800e470:	f04f 0b00 	mov.w	fp, #0
 800e474:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e478:	f104 021a 	add.w	r2, r4, #26
 800e47c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e47e:	9305      	str	r3, [sp, #20]
 800e480:	eba3 0309 	sub.w	r3, r3, r9
 800e484:	455b      	cmp	r3, fp
 800e486:	dc33      	bgt.n	800e4f0 <_printf_float+0x384>
 800e488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e48c:	429a      	cmp	r2, r3
 800e48e:	db3b      	blt.n	800e508 <_printf_float+0x39c>
 800e490:	6823      	ldr	r3, [r4, #0]
 800e492:	07da      	lsls	r2, r3, #31
 800e494:	d438      	bmi.n	800e508 <_printf_float+0x39c>
 800e496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e498:	9a05      	ldr	r2, [sp, #20]
 800e49a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e49c:	1a9a      	subs	r2, r3, r2
 800e49e:	eba3 0901 	sub.w	r9, r3, r1
 800e4a2:	4591      	cmp	r9, r2
 800e4a4:	bfa8      	it	ge
 800e4a6:	4691      	movge	r9, r2
 800e4a8:	f1b9 0f00 	cmp.w	r9, #0
 800e4ac:	dc35      	bgt.n	800e51a <_printf_float+0x3ae>
 800e4ae:	f04f 0800 	mov.w	r8, #0
 800e4b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4b6:	f104 0a1a 	add.w	sl, r4, #26
 800e4ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4be:	1a9b      	subs	r3, r3, r2
 800e4c0:	eba3 0309 	sub.w	r3, r3, r9
 800e4c4:	4543      	cmp	r3, r8
 800e4c6:	f77f af79 	ble.w	800e3bc <_printf_float+0x250>
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	4652      	mov	r2, sl
 800e4ce:	4631      	mov	r1, r6
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	47b8      	blx	r7
 800e4d4:	3001      	adds	r0, #1
 800e4d6:	f43f aeaa 	beq.w	800e22e <_printf_float+0xc2>
 800e4da:	f108 0801 	add.w	r8, r8, #1
 800e4de:	e7ec      	b.n	800e4ba <_printf_float+0x34e>
 800e4e0:	4613      	mov	r3, r2
 800e4e2:	4631      	mov	r1, r6
 800e4e4:	4642      	mov	r2, r8
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	47b8      	blx	r7
 800e4ea:	3001      	adds	r0, #1
 800e4ec:	d1c0      	bne.n	800e470 <_printf_float+0x304>
 800e4ee:	e69e      	b.n	800e22e <_printf_float+0xc2>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	4631      	mov	r1, r6
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	9205      	str	r2, [sp, #20]
 800e4f8:	47b8      	blx	r7
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	f43f ae97 	beq.w	800e22e <_printf_float+0xc2>
 800e500:	9a05      	ldr	r2, [sp, #20]
 800e502:	f10b 0b01 	add.w	fp, fp, #1
 800e506:	e7b9      	b.n	800e47c <_printf_float+0x310>
 800e508:	ee18 3a10 	vmov	r3, s16
 800e50c:	4652      	mov	r2, sl
 800e50e:	4631      	mov	r1, r6
 800e510:	4628      	mov	r0, r5
 800e512:	47b8      	blx	r7
 800e514:	3001      	adds	r0, #1
 800e516:	d1be      	bne.n	800e496 <_printf_float+0x32a>
 800e518:	e689      	b.n	800e22e <_printf_float+0xc2>
 800e51a:	9a05      	ldr	r2, [sp, #20]
 800e51c:	464b      	mov	r3, r9
 800e51e:	4442      	add	r2, r8
 800e520:	4631      	mov	r1, r6
 800e522:	4628      	mov	r0, r5
 800e524:	47b8      	blx	r7
 800e526:	3001      	adds	r0, #1
 800e528:	d1c1      	bne.n	800e4ae <_printf_float+0x342>
 800e52a:	e680      	b.n	800e22e <_printf_float+0xc2>
 800e52c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e52e:	2a01      	cmp	r2, #1
 800e530:	dc01      	bgt.n	800e536 <_printf_float+0x3ca>
 800e532:	07db      	lsls	r3, r3, #31
 800e534:	d538      	bpl.n	800e5a8 <_printf_float+0x43c>
 800e536:	2301      	movs	r3, #1
 800e538:	4642      	mov	r2, r8
 800e53a:	4631      	mov	r1, r6
 800e53c:	4628      	mov	r0, r5
 800e53e:	47b8      	blx	r7
 800e540:	3001      	adds	r0, #1
 800e542:	f43f ae74 	beq.w	800e22e <_printf_float+0xc2>
 800e546:	ee18 3a10 	vmov	r3, s16
 800e54a:	4652      	mov	r2, sl
 800e54c:	4631      	mov	r1, r6
 800e54e:	4628      	mov	r0, r5
 800e550:	47b8      	blx	r7
 800e552:	3001      	adds	r0, #1
 800e554:	f43f ae6b 	beq.w	800e22e <_printf_float+0xc2>
 800e558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e55c:	2200      	movs	r2, #0
 800e55e:	2300      	movs	r3, #0
 800e560:	f7f2 facc 	bl	8000afc <__aeabi_dcmpeq>
 800e564:	b9d8      	cbnz	r0, 800e59e <_printf_float+0x432>
 800e566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e568:	f108 0201 	add.w	r2, r8, #1
 800e56c:	3b01      	subs	r3, #1
 800e56e:	4631      	mov	r1, r6
 800e570:	4628      	mov	r0, r5
 800e572:	47b8      	blx	r7
 800e574:	3001      	adds	r0, #1
 800e576:	d10e      	bne.n	800e596 <_printf_float+0x42a>
 800e578:	e659      	b.n	800e22e <_printf_float+0xc2>
 800e57a:	2301      	movs	r3, #1
 800e57c:	4652      	mov	r2, sl
 800e57e:	4631      	mov	r1, r6
 800e580:	4628      	mov	r0, r5
 800e582:	47b8      	blx	r7
 800e584:	3001      	adds	r0, #1
 800e586:	f43f ae52 	beq.w	800e22e <_printf_float+0xc2>
 800e58a:	f108 0801 	add.w	r8, r8, #1
 800e58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e590:	3b01      	subs	r3, #1
 800e592:	4543      	cmp	r3, r8
 800e594:	dcf1      	bgt.n	800e57a <_printf_float+0x40e>
 800e596:	464b      	mov	r3, r9
 800e598:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e59c:	e6dc      	b.n	800e358 <_printf_float+0x1ec>
 800e59e:	f04f 0800 	mov.w	r8, #0
 800e5a2:	f104 0a1a 	add.w	sl, r4, #26
 800e5a6:	e7f2      	b.n	800e58e <_printf_float+0x422>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	4642      	mov	r2, r8
 800e5ac:	e7df      	b.n	800e56e <_printf_float+0x402>
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	464a      	mov	r2, r9
 800e5b2:	4631      	mov	r1, r6
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	47b8      	blx	r7
 800e5b8:	3001      	adds	r0, #1
 800e5ba:	f43f ae38 	beq.w	800e22e <_printf_float+0xc2>
 800e5be:	f108 0801 	add.w	r8, r8, #1
 800e5c2:	68e3      	ldr	r3, [r4, #12]
 800e5c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5c6:	1a5b      	subs	r3, r3, r1
 800e5c8:	4543      	cmp	r3, r8
 800e5ca:	dcf0      	bgt.n	800e5ae <_printf_float+0x442>
 800e5cc:	e6fa      	b.n	800e3c4 <_printf_float+0x258>
 800e5ce:	f04f 0800 	mov.w	r8, #0
 800e5d2:	f104 0919 	add.w	r9, r4, #25
 800e5d6:	e7f4      	b.n	800e5c2 <_printf_float+0x456>

0800e5d8 <_printf_common>:
 800e5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5dc:	4616      	mov	r6, r2
 800e5de:	4699      	mov	r9, r3
 800e5e0:	688a      	ldr	r2, [r1, #8]
 800e5e2:	690b      	ldr	r3, [r1, #16]
 800e5e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	bfb8      	it	lt
 800e5ec:	4613      	movlt	r3, r2
 800e5ee:	6033      	str	r3, [r6, #0]
 800e5f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e5f4:	4607      	mov	r7, r0
 800e5f6:	460c      	mov	r4, r1
 800e5f8:	b10a      	cbz	r2, 800e5fe <_printf_common+0x26>
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	6033      	str	r3, [r6, #0]
 800e5fe:	6823      	ldr	r3, [r4, #0]
 800e600:	0699      	lsls	r1, r3, #26
 800e602:	bf42      	ittt	mi
 800e604:	6833      	ldrmi	r3, [r6, #0]
 800e606:	3302      	addmi	r3, #2
 800e608:	6033      	strmi	r3, [r6, #0]
 800e60a:	6825      	ldr	r5, [r4, #0]
 800e60c:	f015 0506 	ands.w	r5, r5, #6
 800e610:	d106      	bne.n	800e620 <_printf_common+0x48>
 800e612:	f104 0a19 	add.w	sl, r4, #25
 800e616:	68e3      	ldr	r3, [r4, #12]
 800e618:	6832      	ldr	r2, [r6, #0]
 800e61a:	1a9b      	subs	r3, r3, r2
 800e61c:	42ab      	cmp	r3, r5
 800e61e:	dc26      	bgt.n	800e66e <_printf_common+0x96>
 800e620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e624:	1e13      	subs	r3, r2, #0
 800e626:	6822      	ldr	r2, [r4, #0]
 800e628:	bf18      	it	ne
 800e62a:	2301      	movne	r3, #1
 800e62c:	0692      	lsls	r2, r2, #26
 800e62e:	d42b      	bmi.n	800e688 <_printf_common+0xb0>
 800e630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e634:	4649      	mov	r1, r9
 800e636:	4638      	mov	r0, r7
 800e638:	47c0      	blx	r8
 800e63a:	3001      	adds	r0, #1
 800e63c:	d01e      	beq.n	800e67c <_printf_common+0xa4>
 800e63e:	6823      	ldr	r3, [r4, #0]
 800e640:	68e5      	ldr	r5, [r4, #12]
 800e642:	6832      	ldr	r2, [r6, #0]
 800e644:	f003 0306 	and.w	r3, r3, #6
 800e648:	2b04      	cmp	r3, #4
 800e64a:	bf08      	it	eq
 800e64c:	1aad      	subeq	r5, r5, r2
 800e64e:	68a3      	ldr	r3, [r4, #8]
 800e650:	6922      	ldr	r2, [r4, #16]
 800e652:	bf0c      	ite	eq
 800e654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e658:	2500      	movne	r5, #0
 800e65a:	4293      	cmp	r3, r2
 800e65c:	bfc4      	itt	gt
 800e65e:	1a9b      	subgt	r3, r3, r2
 800e660:	18ed      	addgt	r5, r5, r3
 800e662:	2600      	movs	r6, #0
 800e664:	341a      	adds	r4, #26
 800e666:	42b5      	cmp	r5, r6
 800e668:	d11a      	bne.n	800e6a0 <_printf_common+0xc8>
 800e66a:	2000      	movs	r0, #0
 800e66c:	e008      	b.n	800e680 <_printf_common+0xa8>
 800e66e:	2301      	movs	r3, #1
 800e670:	4652      	mov	r2, sl
 800e672:	4649      	mov	r1, r9
 800e674:	4638      	mov	r0, r7
 800e676:	47c0      	blx	r8
 800e678:	3001      	adds	r0, #1
 800e67a:	d103      	bne.n	800e684 <_printf_common+0xac>
 800e67c:	f04f 30ff 	mov.w	r0, #4294967295
 800e680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e684:	3501      	adds	r5, #1
 800e686:	e7c6      	b.n	800e616 <_printf_common+0x3e>
 800e688:	18e1      	adds	r1, r4, r3
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	2030      	movs	r0, #48	; 0x30
 800e68e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e692:	4422      	add	r2, r4
 800e694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e69c:	3302      	adds	r3, #2
 800e69e:	e7c7      	b.n	800e630 <_printf_common+0x58>
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	4622      	mov	r2, r4
 800e6a4:	4649      	mov	r1, r9
 800e6a6:	4638      	mov	r0, r7
 800e6a8:	47c0      	blx	r8
 800e6aa:	3001      	adds	r0, #1
 800e6ac:	d0e6      	beq.n	800e67c <_printf_common+0xa4>
 800e6ae:	3601      	adds	r6, #1
 800e6b0:	e7d9      	b.n	800e666 <_printf_common+0x8e>
	...

0800e6b4 <_printf_i>:
 800e6b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b8:	7e0f      	ldrb	r7, [r1, #24]
 800e6ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e6bc:	2f78      	cmp	r7, #120	; 0x78
 800e6be:	4691      	mov	r9, r2
 800e6c0:	4680      	mov	r8, r0
 800e6c2:	460c      	mov	r4, r1
 800e6c4:	469a      	mov	sl, r3
 800e6c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e6ca:	d807      	bhi.n	800e6dc <_printf_i+0x28>
 800e6cc:	2f62      	cmp	r7, #98	; 0x62
 800e6ce:	d80a      	bhi.n	800e6e6 <_printf_i+0x32>
 800e6d0:	2f00      	cmp	r7, #0
 800e6d2:	f000 80d8 	beq.w	800e886 <_printf_i+0x1d2>
 800e6d6:	2f58      	cmp	r7, #88	; 0x58
 800e6d8:	f000 80a3 	beq.w	800e822 <_printf_i+0x16e>
 800e6dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6e4:	e03a      	b.n	800e75c <_printf_i+0xa8>
 800e6e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6ea:	2b15      	cmp	r3, #21
 800e6ec:	d8f6      	bhi.n	800e6dc <_printf_i+0x28>
 800e6ee:	a101      	add	r1, pc, #4	; (adr r1, 800e6f4 <_printf_i+0x40>)
 800e6f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6f4:	0800e74d 	.word	0x0800e74d
 800e6f8:	0800e761 	.word	0x0800e761
 800e6fc:	0800e6dd 	.word	0x0800e6dd
 800e700:	0800e6dd 	.word	0x0800e6dd
 800e704:	0800e6dd 	.word	0x0800e6dd
 800e708:	0800e6dd 	.word	0x0800e6dd
 800e70c:	0800e761 	.word	0x0800e761
 800e710:	0800e6dd 	.word	0x0800e6dd
 800e714:	0800e6dd 	.word	0x0800e6dd
 800e718:	0800e6dd 	.word	0x0800e6dd
 800e71c:	0800e6dd 	.word	0x0800e6dd
 800e720:	0800e86d 	.word	0x0800e86d
 800e724:	0800e791 	.word	0x0800e791
 800e728:	0800e84f 	.word	0x0800e84f
 800e72c:	0800e6dd 	.word	0x0800e6dd
 800e730:	0800e6dd 	.word	0x0800e6dd
 800e734:	0800e88f 	.word	0x0800e88f
 800e738:	0800e6dd 	.word	0x0800e6dd
 800e73c:	0800e791 	.word	0x0800e791
 800e740:	0800e6dd 	.word	0x0800e6dd
 800e744:	0800e6dd 	.word	0x0800e6dd
 800e748:	0800e857 	.word	0x0800e857
 800e74c:	682b      	ldr	r3, [r5, #0]
 800e74e:	1d1a      	adds	r2, r3, #4
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	602a      	str	r2, [r5, #0]
 800e754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e75c:	2301      	movs	r3, #1
 800e75e:	e0a3      	b.n	800e8a8 <_printf_i+0x1f4>
 800e760:	6820      	ldr	r0, [r4, #0]
 800e762:	6829      	ldr	r1, [r5, #0]
 800e764:	0606      	lsls	r6, r0, #24
 800e766:	f101 0304 	add.w	r3, r1, #4
 800e76a:	d50a      	bpl.n	800e782 <_printf_i+0xce>
 800e76c:	680e      	ldr	r6, [r1, #0]
 800e76e:	602b      	str	r3, [r5, #0]
 800e770:	2e00      	cmp	r6, #0
 800e772:	da03      	bge.n	800e77c <_printf_i+0xc8>
 800e774:	232d      	movs	r3, #45	; 0x2d
 800e776:	4276      	negs	r6, r6
 800e778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e77c:	485e      	ldr	r0, [pc, #376]	; (800e8f8 <_printf_i+0x244>)
 800e77e:	230a      	movs	r3, #10
 800e780:	e019      	b.n	800e7b6 <_printf_i+0x102>
 800e782:	680e      	ldr	r6, [r1, #0]
 800e784:	602b      	str	r3, [r5, #0]
 800e786:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e78a:	bf18      	it	ne
 800e78c:	b236      	sxthne	r6, r6
 800e78e:	e7ef      	b.n	800e770 <_printf_i+0xbc>
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	6820      	ldr	r0, [r4, #0]
 800e794:	1d19      	adds	r1, r3, #4
 800e796:	6029      	str	r1, [r5, #0]
 800e798:	0601      	lsls	r1, r0, #24
 800e79a:	d501      	bpl.n	800e7a0 <_printf_i+0xec>
 800e79c:	681e      	ldr	r6, [r3, #0]
 800e79e:	e002      	b.n	800e7a6 <_printf_i+0xf2>
 800e7a0:	0646      	lsls	r6, r0, #25
 800e7a2:	d5fb      	bpl.n	800e79c <_printf_i+0xe8>
 800e7a4:	881e      	ldrh	r6, [r3, #0]
 800e7a6:	4854      	ldr	r0, [pc, #336]	; (800e8f8 <_printf_i+0x244>)
 800e7a8:	2f6f      	cmp	r7, #111	; 0x6f
 800e7aa:	bf0c      	ite	eq
 800e7ac:	2308      	moveq	r3, #8
 800e7ae:	230a      	movne	r3, #10
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e7b6:	6865      	ldr	r5, [r4, #4]
 800e7b8:	60a5      	str	r5, [r4, #8]
 800e7ba:	2d00      	cmp	r5, #0
 800e7bc:	bfa2      	ittt	ge
 800e7be:	6821      	ldrge	r1, [r4, #0]
 800e7c0:	f021 0104 	bicge.w	r1, r1, #4
 800e7c4:	6021      	strge	r1, [r4, #0]
 800e7c6:	b90e      	cbnz	r6, 800e7cc <_printf_i+0x118>
 800e7c8:	2d00      	cmp	r5, #0
 800e7ca:	d04d      	beq.n	800e868 <_printf_i+0x1b4>
 800e7cc:	4615      	mov	r5, r2
 800e7ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800e7d2:	fb03 6711 	mls	r7, r3, r1, r6
 800e7d6:	5dc7      	ldrb	r7, [r0, r7]
 800e7d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e7dc:	4637      	mov	r7, r6
 800e7de:	42bb      	cmp	r3, r7
 800e7e0:	460e      	mov	r6, r1
 800e7e2:	d9f4      	bls.n	800e7ce <_printf_i+0x11a>
 800e7e4:	2b08      	cmp	r3, #8
 800e7e6:	d10b      	bne.n	800e800 <_printf_i+0x14c>
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	07de      	lsls	r6, r3, #31
 800e7ec:	d508      	bpl.n	800e800 <_printf_i+0x14c>
 800e7ee:	6923      	ldr	r3, [r4, #16]
 800e7f0:	6861      	ldr	r1, [r4, #4]
 800e7f2:	4299      	cmp	r1, r3
 800e7f4:	bfde      	ittt	le
 800e7f6:	2330      	movle	r3, #48	; 0x30
 800e7f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e7fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e800:	1b52      	subs	r2, r2, r5
 800e802:	6122      	str	r2, [r4, #16]
 800e804:	f8cd a000 	str.w	sl, [sp]
 800e808:	464b      	mov	r3, r9
 800e80a:	aa03      	add	r2, sp, #12
 800e80c:	4621      	mov	r1, r4
 800e80e:	4640      	mov	r0, r8
 800e810:	f7ff fee2 	bl	800e5d8 <_printf_common>
 800e814:	3001      	adds	r0, #1
 800e816:	d14c      	bne.n	800e8b2 <_printf_i+0x1fe>
 800e818:	f04f 30ff 	mov.w	r0, #4294967295
 800e81c:	b004      	add	sp, #16
 800e81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e822:	4835      	ldr	r0, [pc, #212]	; (800e8f8 <_printf_i+0x244>)
 800e824:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e828:	6829      	ldr	r1, [r5, #0]
 800e82a:	6823      	ldr	r3, [r4, #0]
 800e82c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e830:	6029      	str	r1, [r5, #0]
 800e832:	061d      	lsls	r5, r3, #24
 800e834:	d514      	bpl.n	800e860 <_printf_i+0x1ac>
 800e836:	07df      	lsls	r7, r3, #31
 800e838:	bf44      	itt	mi
 800e83a:	f043 0320 	orrmi.w	r3, r3, #32
 800e83e:	6023      	strmi	r3, [r4, #0]
 800e840:	b91e      	cbnz	r6, 800e84a <_printf_i+0x196>
 800e842:	6823      	ldr	r3, [r4, #0]
 800e844:	f023 0320 	bic.w	r3, r3, #32
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	2310      	movs	r3, #16
 800e84c:	e7b0      	b.n	800e7b0 <_printf_i+0xfc>
 800e84e:	6823      	ldr	r3, [r4, #0]
 800e850:	f043 0320 	orr.w	r3, r3, #32
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	2378      	movs	r3, #120	; 0x78
 800e858:	4828      	ldr	r0, [pc, #160]	; (800e8fc <_printf_i+0x248>)
 800e85a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e85e:	e7e3      	b.n	800e828 <_printf_i+0x174>
 800e860:	0659      	lsls	r1, r3, #25
 800e862:	bf48      	it	mi
 800e864:	b2b6      	uxthmi	r6, r6
 800e866:	e7e6      	b.n	800e836 <_printf_i+0x182>
 800e868:	4615      	mov	r5, r2
 800e86a:	e7bb      	b.n	800e7e4 <_printf_i+0x130>
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	6826      	ldr	r6, [r4, #0]
 800e870:	6961      	ldr	r1, [r4, #20]
 800e872:	1d18      	adds	r0, r3, #4
 800e874:	6028      	str	r0, [r5, #0]
 800e876:	0635      	lsls	r5, r6, #24
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	d501      	bpl.n	800e880 <_printf_i+0x1cc>
 800e87c:	6019      	str	r1, [r3, #0]
 800e87e:	e002      	b.n	800e886 <_printf_i+0x1d2>
 800e880:	0670      	lsls	r0, r6, #25
 800e882:	d5fb      	bpl.n	800e87c <_printf_i+0x1c8>
 800e884:	8019      	strh	r1, [r3, #0]
 800e886:	2300      	movs	r3, #0
 800e888:	6123      	str	r3, [r4, #16]
 800e88a:	4615      	mov	r5, r2
 800e88c:	e7ba      	b.n	800e804 <_printf_i+0x150>
 800e88e:	682b      	ldr	r3, [r5, #0]
 800e890:	1d1a      	adds	r2, r3, #4
 800e892:	602a      	str	r2, [r5, #0]
 800e894:	681d      	ldr	r5, [r3, #0]
 800e896:	6862      	ldr	r2, [r4, #4]
 800e898:	2100      	movs	r1, #0
 800e89a:	4628      	mov	r0, r5
 800e89c:	f7f1 fcb0 	bl	8000200 <memchr>
 800e8a0:	b108      	cbz	r0, 800e8a6 <_printf_i+0x1f2>
 800e8a2:	1b40      	subs	r0, r0, r5
 800e8a4:	6060      	str	r0, [r4, #4]
 800e8a6:	6863      	ldr	r3, [r4, #4]
 800e8a8:	6123      	str	r3, [r4, #16]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8b0:	e7a8      	b.n	800e804 <_printf_i+0x150>
 800e8b2:	6923      	ldr	r3, [r4, #16]
 800e8b4:	462a      	mov	r2, r5
 800e8b6:	4649      	mov	r1, r9
 800e8b8:	4640      	mov	r0, r8
 800e8ba:	47d0      	blx	sl
 800e8bc:	3001      	adds	r0, #1
 800e8be:	d0ab      	beq.n	800e818 <_printf_i+0x164>
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	079b      	lsls	r3, r3, #30
 800e8c4:	d413      	bmi.n	800e8ee <_printf_i+0x23a>
 800e8c6:	68e0      	ldr	r0, [r4, #12]
 800e8c8:	9b03      	ldr	r3, [sp, #12]
 800e8ca:	4298      	cmp	r0, r3
 800e8cc:	bfb8      	it	lt
 800e8ce:	4618      	movlt	r0, r3
 800e8d0:	e7a4      	b.n	800e81c <_printf_i+0x168>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	4632      	mov	r2, r6
 800e8d6:	4649      	mov	r1, r9
 800e8d8:	4640      	mov	r0, r8
 800e8da:	47d0      	blx	sl
 800e8dc:	3001      	adds	r0, #1
 800e8de:	d09b      	beq.n	800e818 <_printf_i+0x164>
 800e8e0:	3501      	adds	r5, #1
 800e8e2:	68e3      	ldr	r3, [r4, #12]
 800e8e4:	9903      	ldr	r1, [sp, #12]
 800e8e6:	1a5b      	subs	r3, r3, r1
 800e8e8:	42ab      	cmp	r3, r5
 800e8ea:	dcf2      	bgt.n	800e8d2 <_printf_i+0x21e>
 800e8ec:	e7eb      	b.n	800e8c6 <_printf_i+0x212>
 800e8ee:	2500      	movs	r5, #0
 800e8f0:	f104 0619 	add.w	r6, r4, #25
 800e8f4:	e7f5      	b.n	800e8e2 <_printf_i+0x22e>
 800e8f6:	bf00      	nop
 800e8f8:	0803dc81 	.word	0x0803dc81
 800e8fc:	0803dc92 	.word	0x0803dc92

0800e900 <_sbrk_r>:
 800e900:	b538      	push	{r3, r4, r5, lr}
 800e902:	4d06      	ldr	r5, [pc, #24]	; (800e91c <_sbrk_r+0x1c>)
 800e904:	2300      	movs	r3, #0
 800e906:	4604      	mov	r4, r0
 800e908:	4608      	mov	r0, r1
 800e90a:	602b      	str	r3, [r5, #0]
 800e90c:	f007 fcea 	bl	80162e4 <_sbrk>
 800e910:	1c43      	adds	r3, r0, #1
 800e912:	d102      	bne.n	800e91a <_sbrk_r+0x1a>
 800e914:	682b      	ldr	r3, [r5, #0]
 800e916:	b103      	cbz	r3, 800e91a <_sbrk_r+0x1a>
 800e918:	6023      	str	r3, [r4, #0]
 800e91a:	bd38      	pop	{r3, r4, r5, pc}
 800e91c:	20003c28 	.word	0x20003c28

0800e920 <siprintf>:
 800e920:	b40e      	push	{r1, r2, r3}
 800e922:	b500      	push	{lr}
 800e924:	b09c      	sub	sp, #112	; 0x70
 800e926:	ab1d      	add	r3, sp, #116	; 0x74
 800e928:	9002      	str	r0, [sp, #8]
 800e92a:	9006      	str	r0, [sp, #24]
 800e92c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e930:	4809      	ldr	r0, [pc, #36]	; (800e958 <siprintf+0x38>)
 800e932:	9107      	str	r1, [sp, #28]
 800e934:	9104      	str	r1, [sp, #16]
 800e936:	4909      	ldr	r1, [pc, #36]	; (800e95c <siprintf+0x3c>)
 800e938:	f853 2b04 	ldr.w	r2, [r3], #4
 800e93c:	9105      	str	r1, [sp, #20]
 800e93e:	6800      	ldr	r0, [r0, #0]
 800e940:	9301      	str	r3, [sp, #4]
 800e942:	a902      	add	r1, sp, #8
 800e944:	f004 fae6 	bl	8012f14 <_svfiprintf_r>
 800e948:	9b02      	ldr	r3, [sp, #8]
 800e94a:	2200      	movs	r2, #0
 800e94c:	701a      	strb	r2, [r3, #0]
 800e94e:	b01c      	add	sp, #112	; 0x70
 800e950:	f85d eb04 	ldr.w	lr, [sp], #4
 800e954:	b003      	add	sp, #12
 800e956:	4770      	bx	lr
 800e958:	200002c0 	.word	0x200002c0
 800e95c:	ffff0208 	.word	0xffff0208

0800e960 <siscanf>:
 800e960:	b40e      	push	{r1, r2, r3}
 800e962:	b510      	push	{r4, lr}
 800e964:	b09f      	sub	sp, #124	; 0x7c
 800e966:	ac21      	add	r4, sp, #132	; 0x84
 800e968:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e96c:	f854 2b04 	ldr.w	r2, [r4], #4
 800e970:	9201      	str	r2, [sp, #4]
 800e972:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e976:	9004      	str	r0, [sp, #16]
 800e978:	9008      	str	r0, [sp, #32]
 800e97a:	f7f1 fc39 	bl	80001f0 <strlen>
 800e97e:	4b0c      	ldr	r3, [pc, #48]	; (800e9b0 <siscanf+0x50>)
 800e980:	9005      	str	r0, [sp, #20]
 800e982:	9009      	str	r0, [sp, #36]	; 0x24
 800e984:	930d      	str	r3, [sp, #52]	; 0x34
 800e986:	480b      	ldr	r0, [pc, #44]	; (800e9b4 <siscanf+0x54>)
 800e988:	9a01      	ldr	r2, [sp, #4]
 800e98a:	6800      	ldr	r0, [r0, #0]
 800e98c:	9403      	str	r4, [sp, #12]
 800e98e:	2300      	movs	r3, #0
 800e990:	9311      	str	r3, [sp, #68]	; 0x44
 800e992:	9316      	str	r3, [sp, #88]	; 0x58
 800e994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e998:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e99c:	a904      	add	r1, sp, #16
 800e99e:	4623      	mov	r3, r4
 800e9a0:	f004 fc12 	bl	80131c8 <__ssvfiscanf_r>
 800e9a4:	b01f      	add	sp, #124	; 0x7c
 800e9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9aa:	b003      	add	sp, #12
 800e9ac:	4770      	bx	lr
 800e9ae:	bf00      	nop
 800e9b0:	0800e9db 	.word	0x0800e9db
 800e9b4:	200002c0 	.word	0x200002c0

0800e9b8 <__sread>:
 800e9b8:	b510      	push	{r4, lr}
 800e9ba:	460c      	mov	r4, r1
 800e9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9c0:	f004 fecc 	bl	801375c <_read_r>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	bfab      	itete	ge
 800e9c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e9ca:	89a3      	ldrhlt	r3, [r4, #12]
 800e9cc:	181b      	addge	r3, r3, r0
 800e9ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e9d2:	bfac      	ite	ge
 800e9d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e9d6:	81a3      	strhlt	r3, [r4, #12]
 800e9d8:	bd10      	pop	{r4, pc}

0800e9da <__seofread>:
 800e9da:	2000      	movs	r0, #0
 800e9dc:	4770      	bx	lr

0800e9de <__swrite>:
 800e9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e2:	461f      	mov	r7, r3
 800e9e4:	898b      	ldrh	r3, [r1, #12]
 800e9e6:	05db      	lsls	r3, r3, #23
 800e9e8:	4605      	mov	r5, r0
 800e9ea:	460c      	mov	r4, r1
 800e9ec:	4616      	mov	r6, r2
 800e9ee:	d505      	bpl.n	800e9fc <__swrite+0x1e>
 800e9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9f4:	2302      	movs	r3, #2
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f003 fc7a 	bl	80122f0 <_lseek_r>
 800e9fc:	89a3      	ldrh	r3, [r4, #12]
 800e9fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea06:	81a3      	strh	r3, [r4, #12]
 800ea08:	4632      	mov	r2, r6
 800ea0a:	463b      	mov	r3, r7
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea12:	f001 bfc1 	b.w	8010998 <_write_r>

0800ea16 <__sseek>:
 800ea16:	b510      	push	{r4, lr}
 800ea18:	460c      	mov	r4, r1
 800ea1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea1e:	f003 fc67 	bl	80122f0 <_lseek_r>
 800ea22:	1c43      	adds	r3, r0, #1
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	bf15      	itete	ne
 800ea28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea32:	81a3      	strheq	r3, [r4, #12]
 800ea34:	bf18      	it	ne
 800ea36:	81a3      	strhne	r3, [r4, #12]
 800ea38:	bd10      	pop	{r4, pc}

0800ea3a <__sclose>:
 800ea3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea3e:	f002 b837 	b.w	8010ab0 <_close_r>

0800ea42 <strcpy>:
 800ea42:	4603      	mov	r3, r0
 800ea44:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea48:	f803 2b01 	strb.w	r2, [r3], #1
 800ea4c:	2a00      	cmp	r2, #0
 800ea4e:	d1f9      	bne.n	800ea44 <strcpy+0x2>
 800ea50:	4770      	bx	lr
	...

0800ea54 <iso_year_adjust>:
 800ea54:	6942      	ldr	r2, [r0, #20]
 800ea56:	2a00      	cmp	r2, #0
 800ea58:	f240 736c 	movw	r3, #1900	; 0x76c
 800ea5c:	bfa8      	it	ge
 800ea5e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800ea62:	4413      	add	r3, r2
 800ea64:	0792      	lsls	r2, r2, #30
 800ea66:	d105      	bne.n	800ea74 <iso_year_adjust+0x20>
 800ea68:	2164      	movs	r1, #100	; 0x64
 800ea6a:	fb93 f2f1 	sdiv	r2, r3, r1
 800ea6e:	fb01 3212 	mls	r2, r1, r2, r3
 800ea72:	b9da      	cbnz	r2, 800eaac <iso_year_adjust+0x58>
 800ea74:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ea78:	fb93 f1f2 	sdiv	r1, r3, r2
 800ea7c:	fb02 3311 	mls	r3, r2, r1, r3
 800ea80:	fab3 f383 	clz	r3, r3
 800ea84:	095b      	lsrs	r3, r3, #5
 800ea86:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800ea8a:	0040      	lsls	r0, r0, #1
 800ea8c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800ea90:	4418      	add	r0, r3
 800ea92:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800ea96:	4298      	cmp	r0, r3
 800ea98:	d03a      	beq.n	800eb10 <iso_year_adjust+0xbc>
 800ea9a:	dc21      	bgt.n	800eae0 <iso_year_adjust+0x8c>
 800ea9c:	2801      	cmp	r0, #1
 800ea9e:	dc1a      	bgt.n	800ead6 <iso_year_adjust+0x82>
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	bfb4      	ite	lt
 800eaa4:	2000      	movlt	r0, #0
 800eaa6:	f04f 30ff 	movge.w	r0, #4294967295
 800eaaa:	4770      	bx	lr
 800eaac:	2301      	movs	r3, #1
 800eaae:	e7ea      	b.n	800ea86 <iso_year_adjust+0x32>
 800eab0:	2817      	cmp	r0, #23
 800eab2:	d813      	bhi.n	800eadc <iso_year_adjust+0x88>
 800eab4:	e8df f000 	tbb	[pc, r0]
 800eab8:	0c0c0c0c 	.word	0x0c0c0c0c
 800eabc:	0c0c1212 	.word	0x0c0c1212
 800eac0:	12121212 	.word	0x12121212
 800eac4:	12121212 	.word	0x12121212
 800eac8:	0c0c1212 	.word	0x0c0c1212
 800eacc:	0c0c1212 	.word	0x0c0c1212
 800ead0:	f04f 30ff 	mov.w	r0, #4294967295
 800ead4:	4770      	bx	lr
 800ead6:	380a      	subs	r0, #10
 800ead8:	2817      	cmp	r0, #23
 800eada:	d9e9      	bls.n	800eab0 <iso_year_adjust+0x5c>
 800eadc:	2000      	movs	r0, #0
 800eade:	4770      	bx	lr
 800eae0:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800eae4:	4298      	cmp	r0, r3
 800eae6:	dc06      	bgt.n	800eaf6 <iso_year_adjust+0xa2>
 800eae8:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800eaec:	4298      	cmp	r0, r3
 800eaee:	bfd4      	ite	le
 800eaf0:	2000      	movle	r0, #0
 800eaf2:	2001      	movgt	r0, #1
 800eaf4:	4770      	bx	lr
 800eaf6:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800eafa:	3802      	subs	r0, #2
 800eafc:	2815      	cmp	r0, #21
 800eafe:	d8ed      	bhi.n	800eadc <iso_year_adjust+0x88>
 800eb00:	2301      	movs	r3, #1
 800eb02:	4083      	lsls	r3, r0
 800eb04:	4803      	ldr	r0, [pc, #12]	; (800eb14 <iso_year_adjust+0xc0>)
 800eb06:	4018      	ands	r0, r3
 800eb08:	3800      	subs	r0, #0
 800eb0a:	bf18      	it	ne
 800eb0c:	2001      	movne	r0, #1
 800eb0e:	4770      	bx	lr
 800eb10:	2001      	movs	r0, #1
 800eb12:	4770      	bx	lr
 800eb14:	002a001f 	.word	0x002a001f

0800eb18 <__strftime.isra.0>:
 800eb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1c:	b08f      	sub	sp, #60	; 0x3c
 800eb1e:	461e      	mov	r6, r3
 800eb20:	2300      	movs	r3, #0
 800eb22:	4607      	mov	r7, r0
 800eb24:	460d      	mov	r5, r1
 800eb26:	9302      	str	r3, [sp, #8]
 800eb28:	461c      	mov	r4, r3
 800eb2a:	7813      	ldrb	r3, [r2, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f000 84ba 	beq.w	800f4a6 <__strftime.isra.0+0x98e>
 800eb32:	2b25      	cmp	r3, #37	; 0x25
 800eb34:	d11f      	bne.n	800eb76 <__strftime.isra.0+0x5e>
 800eb36:	f892 b001 	ldrb.w	fp, [r2, #1]
 800eb3a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800eb3e:	d024      	beq.n	800eb8a <__strftime.isra.0+0x72>
 800eb40:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800eb44:	d021      	beq.n	800eb8a <__strftime.isra.0+0x72>
 800eb46:	f102 0801 	add.w	r8, r2, #1
 800eb4a:	f04f 0b00 	mov.w	fp, #0
 800eb4e:	f898 2000 	ldrb.w	r2, [r8]
 800eb52:	3a31      	subs	r2, #49	; 0x31
 800eb54:	2a08      	cmp	r2, #8
 800eb56:	d81b      	bhi.n	800eb90 <__strftime.isra.0+0x78>
 800eb58:	4640      	mov	r0, r8
 800eb5a:	220a      	movs	r2, #10
 800eb5c:	a906      	add	r1, sp, #24
 800eb5e:	f001 fc83 	bl	8010468 <strtoul>
 800eb62:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800eb66:	4681      	mov	r9, r0
 800eb68:	f898 2000 	ldrb.w	r2, [r8]
 800eb6c:	2a45      	cmp	r2, #69	; 0x45
 800eb6e:	d112      	bne.n	800eb96 <__strftime.isra.0+0x7e>
 800eb70:	f108 0801 	add.w	r8, r8, #1
 800eb74:	e011      	b.n	800eb9a <__strftime.isra.0+0x82>
 800eb76:	1e69      	subs	r1, r5, #1
 800eb78:	42a1      	cmp	r1, r4
 800eb7a:	d802      	bhi.n	800eb82 <__strftime.isra.0+0x6a>
 800eb7c:	2400      	movs	r4, #0
 800eb7e:	f000 bc95 	b.w	800f4ac <__strftime.isra.0+0x994>
 800eb82:	553b      	strb	r3, [r7, r4]
 800eb84:	3201      	adds	r2, #1
 800eb86:	3401      	adds	r4, #1
 800eb88:	e7cf      	b.n	800eb2a <__strftime.isra.0+0x12>
 800eb8a:	f102 0802 	add.w	r8, r2, #2
 800eb8e:	e7de      	b.n	800eb4e <__strftime.isra.0+0x36>
 800eb90:	f04f 0900 	mov.w	r9, #0
 800eb94:	e7e8      	b.n	800eb68 <__strftime.isra.0+0x50>
 800eb96:	2a4f      	cmp	r2, #79	; 0x4f
 800eb98:	d0ea      	beq.n	800eb70 <__strftime.isra.0+0x58>
 800eb9a:	f898 0000 	ldrb.w	r0, [r8]
 800eb9e:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800eba2:	2a55      	cmp	r2, #85	; 0x55
 800eba4:	d8ea      	bhi.n	800eb7c <__strftime.isra.0+0x64>
 800eba6:	a301      	add	r3, pc, #4	; (adr r3, 800ebac <__strftime.isra.0+0x94>)
 800eba8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800ebac:	0800f49b 	.word	0x0800f49b
 800ebb0:	0800eb7d 	.word	0x0800eb7d
 800ebb4:	0800eb7d 	.word	0x0800eb7d
 800ebb8:	0800eb7d 	.word	0x0800eb7d
 800ebbc:	0800eb7d 	.word	0x0800eb7d
 800ebc0:	0800eb7d 	.word	0x0800eb7d
 800ebc4:	0800eb7d 	.word	0x0800eb7d
 800ebc8:	0800eb7d 	.word	0x0800eb7d
 800ebcc:	0800eb7d 	.word	0x0800eb7d
 800ebd0:	0800eb7d 	.word	0x0800eb7d
 800ebd4:	0800eb7d 	.word	0x0800eb7d
 800ebd8:	0800eb7d 	.word	0x0800eb7d
 800ebdc:	0800eb7d 	.word	0x0800eb7d
 800ebe0:	0800eb7d 	.word	0x0800eb7d
 800ebe4:	0800eb7d 	.word	0x0800eb7d
 800ebe8:	0800eb7d 	.word	0x0800eb7d
 800ebec:	0800eb7d 	.word	0x0800eb7d
 800ebf0:	0800eb7d 	.word	0x0800eb7d
 800ebf4:	0800eb7d 	.word	0x0800eb7d
 800ebf8:	0800eb7d 	.word	0x0800eb7d
 800ebfc:	0800eb7d 	.word	0x0800eb7d
 800ec00:	0800eb7d 	.word	0x0800eb7d
 800ec04:	0800eb7d 	.word	0x0800eb7d
 800ec08:	0800eb7d 	.word	0x0800eb7d
 800ec0c:	0800eb7d 	.word	0x0800eb7d
 800ec10:	0800eb7d 	.word	0x0800eb7d
 800ec14:	0800eb7d 	.word	0x0800eb7d
 800ec18:	0800eb7d 	.word	0x0800eb7d
 800ec1c:	0800ed41 	.word	0x0800ed41
 800ec20:	0800ed99 	.word	0x0800ed99
 800ec24:	0800ee07 	.word	0x0800ee07
 800ec28:	0800eea5 	.word	0x0800eea5
 800ec2c:	0800eb7d 	.word	0x0800eb7d
 800ec30:	0800eef1 	.word	0x0800eef1
 800ec34:	0800efdd 	.word	0x0800efdd
 800ec38:	0800f0b7 	.word	0x0800f0b7
 800ec3c:	0800f0c5 	.word	0x0800f0c5
 800ec40:	0800eb7d 	.word	0x0800eb7d
 800ec44:	0800eb7d 	.word	0x0800eb7d
 800ec48:	0800eb7d 	.word	0x0800eb7d
 800ec4c:	0800f0f5 	.word	0x0800f0f5
 800ec50:	0800eb7d 	.word	0x0800eb7d
 800ec54:	0800eb7d 	.word	0x0800eb7d
 800ec58:	0800f109 	.word	0x0800f109
 800ec5c:	0800eb7d 	.word	0x0800eb7d
 800ec60:	0800f15b 	.word	0x0800f15b
 800ec64:	0800f26f 	.word	0x0800f26f
 800ec68:	0800f27f 	.word	0x0800f27f
 800ec6c:	0800f2a7 	.word	0x0800f2a7
 800ec70:	0800f2e1 	.word	0x0800f2e1
 800ec74:	0800f355 	.word	0x0800f355
 800ec78:	0800edff 	.word	0x0800edff
 800ec7c:	0800f381 	.word	0x0800f381
 800ec80:	0800f449 	.word	0x0800f449
 800ec84:	0800eb7d 	.word	0x0800eb7d
 800ec88:	0800eb7d 	.word	0x0800eb7d
 800ec8c:	0800eb7d 	.word	0x0800eb7d
 800ec90:	0800eb7d 	.word	0x0800eb7d
 800ec94:	0800eb7d 	.word	0x0800eb7d
 800ec98:	0800eb7d 	.word	0x0800eb7d
 800ec9c:	0800ed05 	.word	0x0800ed05
 800eca0:	0800ed6f 	.word	0x0800ed6f
 800eca4:	0800edc5 	.word	0x0800edc5
 800eca8:	0800ee81 	.word	0x0800ee81
 800ecac:	0800ee81 	.word	0x0800ee81
 800ecb0:	0800eb7d 	.word	0x0800eb7d
 800ecb4:	0800ef43 	.word	0x0800ef43
 800ecb8:	0800ed6f 	.word	0x0800ed6f
 800ecbc:	0800eb7d 	.word	0x0800eb7d
 800ecc0:	0800f0e7 	.word	0x0800f0e7
 800ecc4:	0800f0b7 	.word	0x0800f0b7
 800ecc8:	0800f0c5 	.word	0x0800f0c5
 800eccc:	0800f0ef 	.word	0x0800f0ef
 800ecd0:	0800f0f9 	.word	0x0800f0f9
 800ecd4:	0800eb7d 	.word	0x0800eb7d
 800ecd8:	0800f109 	.word	0x0800f109
 800ecdc:	0800eb7d 	.word	0x0800eb7d
 800ece0:	0800edef 	.word	0x0800edef
 800ece4:	0800f16d 	.word	0x0800f16d
 800ece8:	0800f273 	.word	0x0800f273
 800ecec:	0800f28d 	.word	0x0800f28d
 800ecf0:	0800eb7d 	.word	0x0800eb7d
 800ecf4:	0800f347 	.word	0x0800f347
 800ecf8:	0800edf7 	.word	0x0800edf7
 800ecfc:	0800f365 	.word	0x0800f365
 800ed00:	0800f3d3 	.word	0x0800f3d3
 800ed04:	69b3      	ldr	r3, [r6, #24]
 800ed06:	4aa9      	ldr	r2, [pc, #676]	; (800efac <__strftime.isra.0+0x494>)
 800ed08:	3318      	adds	r3, #24
 800ed0a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800ed0e:	4648      	mov	r0, r9
 800ed10:	f7f1 fa6e 	bl	80001f0 <strlen>
 800ed14:	f109 39ff 	add.w	r9, r9, #4294967295
 800ed18:	4420      	add	r0, r4
 800ed1a:	1e6b      	subs	r3, r5, #1
 800ed1c:	42a0      	cmp	r0, r4
 800ed1e:	d107      	bne.n	800ed30 <__strftime.isra.0+0x218>
 800ed20:	f898 3000 	ldrb.w	r3, [r8]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 83be 	beq.w	800f4a6 <__strftime.isra.0+0x98e>
 800ed2a:	f108 0201 	add.w	r2, r8, #1
 800ed2e:	e6fc      	b.n	800eb2a <__strftime.isra.0+0x12>
 800ed30:	42a3      	cmp	r3, r4
 800ed32:	f67f af23 	bls.w	800eb7c <__strftime.isra.0+0x64>
 800ed36:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ed3a:	553a      	strb	r2, [r7, r4]
 800ed3c:	3401      	adds	r4, #1
 800ed3e:	e7ed      	b.n	800ed1c <__strftime.isra.0+0x204>
 800ed40:	69b2      	ldr	r2, [r6, #24]
 800ed42:	4b9a      	ldr	r3, [pc, #616]	; (800efac <__strftime.isra.0+0x494>)
 800ed44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ed48:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800ed4c:	4648      	mov	r0, r9
 800ed4e:	f7f1 fa4f 	bl	80001f0 <strlen>
 800ed52:	f109 39ff 	add.w	r9, r9, #4294967295
 800ed56:	4420      	add	r0, r4
 800ed58:	1e6b      	subs	r3, r5, #1
 800ed5a:	42a0      	cmp	r0, r4
 800ed5c:	d0e0      	beq.n	800ed20 <__strftime.isra.0+0x208>
 800ed5e:	42a3      	cmp	r3, r4
 800ed60:	f67f af0c 	bls.w	800eb7c <__strftime.isra.0+0x64>
 800ed64:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ed68:	553a      	strb	r2, [r7, r4]
 800ed6a:	3401      	adds	r4, #1
 800ed6c:	e7f5      	b.n	800ed5a <__strftime.isra.0+0x242>
 800ed6e:	4b8f      	ldr	r3, [pc, #572]	; (800efac <__strftime.isra.0+0x494>)
 800ed70:	6932      	ldr	r2, [r6, #16]
 800ed72:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800ed76:	4648      	mov	r0, r9
 800ed78:	f7f1 fa3a 	bl	80001f0 <strlen>
 800ed7c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ed80:	4420      	add	r0, r4
 800ed82:	1e6b      	subs	r3, r5, #1
 800ed84:	42a0      	cmp	r0, r4
 800ed86:	d0cb      	beq.n	800ed20 <__strftime.isra.0+0x208>
 800ed88:	42a3      	cmp	r3, r4
 800ed8a:	f67f aef7 	bls.w	800eb7c <__strftime.isra.0+0x64>
 800ed8e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ed92:	553a      	strb	r2, [r7, r4]
 800ed94:	3401      	adds	r4, #1
 800ed96:	e7f5      	b.n	800ed84 <__strftime.isra.0+0x26c>
 800ed98:	6933      	ldr	r3, [r6, #16]
 800ed9a:	4a84      	ldr	r2, [pc, #528]	; (800efac <__strftime.isra.0+0x494>)
 800ed9c:	330c      	adds	r3, #12
 800ed9e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800eda2:	4648      	mov	r0, r9
 800eda4:	f7f1 fa24 	bl	80001f0 <strlen>
 800eda8:	f109 39ff 	add.w	r9, r9, #4294967295
 800edac:	4420      	add	r0, r4
 800edae:	1e6b      	subs	r3, r5, #1
 800edb0:	42a0      	cmp	r0, r4
 800edb2:	d0b5      	beq.n	800ed20 <__strftime.isra.0+0x208>
 800edb4:	42a3      	cmp	r3, r4
 800edb6:	f67f aee1 	bls.w	800eb7c <__strftime.isra.0+0x64>
 800edba:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800edbe:	553a      	strb	r2, [r7, r4]
 800edc0:	3401      	adds	r4, #1
 800edc2:	e7f5      	b.n	800edb0 <__strftime.isra.0+0x298>
 800edc4:	4b79      	ldr	r3, [pc, #484]	; (800efac <__strftime.isra.0+0x494>)
 800edc6:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800edca:	4648      	mov	r0, r9
 800edcc:	f7f1 fa10 	bl	80001f0 <strlen>
 800edd0:	f899 3000 	ldrb.w	r3, [r9]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d0a3      	beq.n	800ed20 <__strftime.isra.0+0x208>
 800edd8:	4633      	mov	r3, r6
 800edda:	464a      	mov	r2, r9
 800eddc:	1b29      	subs	r1, r5, r4
 800edde:	1938      	adds	r0, r7, r4
 800ede0:	f7ff fe9a 	bl	800eb18 <__strftime.isra.0>
 800ede4:	2800      	cmp	r0, #0
 800ede6:	f77f aec9 	ble.w	800eb7c <__strftime.isra.0+0x64>
 800edea:	4404      	add	r4, r0
 800edec:	e798      	b.n	800ed20 <__strftime.isra.0+0x208>
 800edee:	4b6f      	ldr	r3, [pc, #444]	; (800efac <__strftime.isra.0+0x494>)
 800edf0:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800edf4:	e7e9      	b.n	800edca <__strftime.isra.0+0x2b2>
 800edf6:	4b6d      	ldr	r3, [pc, #436]	; (800efac <__strftime.isra.0+0x494>)
 800edf8:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800edfc:	e7e5      	b.n	800edca <__strftime.isra.0+0x2b2>
 800edfe:	4b6b      	ldr	r3, [pc, #428]	; (800efac <__strftime.isra.0+0x494>)
 800ee00:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800ee04:	e7e1      	b.n	800edca <__strftime.isra.0+0x2b2>
 800ee06:	496a      	ldr	r1, [pc, #424]	; (800efb0 <__strftime.isra.0+0x498>)
 800ee08:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800ee0c:	458a      	cmp	sl, r1
 800ee0e:	bfac      	ite	ge
 800ee10:	2100      	movge	r1, #0
 800ee12:	2101      	movlt	r1, #1
 800ee14:	f1ba 0f00 	cmp.w	sl, #0
 800ee18:	db11      	blt.n	800ee3e <__strftime.isra.0+0x326>
 800ee1a:	2064      	movs	r0, #100	; 0x64
 800ee1c:	fb9a f0f0 	sdiv	r0, sl, r0
 800ee20:	3013      	adds	r0, #19
 800ee22:	f1bb 0f00 	cmp.w	fp, #0
 800ee26:	d014      	beq.n	800ee52 <__strftime.isra.0+0x33a>
 800ee28:	2863      	cmp	r0, #99	; 0x63
 800ee2a:	dd27      	ble.n	800ee7c <__strftime.isra.0+0x364>
 800ee2c:	4b61      	ldr	r3, [pc, #388]	; (800efb4 <__strftime.isra.0+0x49c>)
 800ee2e:	4a62      	ldr	r2, [pc, #392]	; (800efb8 <__strftime.isra.0+0x4a0>)
 800ee30:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800ee34:	bf18      	it	ne
 800ee36:	461a      	movne	r2, r3
 800ee38:	f8df c198 	ldr.w	ip, [pc, #408]	; 800efd4 <__strftime.isra.0+0x4bc>
 800ee3c:	e00c      	b.n	800ee58 <__strftime.isra.0+0x340>
 800ee3e:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800ee42:	9103      	str	r1, [sp, #12]
 800ee44:	f001 fe2f 	bl	8010aa6 <abs>
 800ee48:	2264      	movs	r2, #100	; 0x64
 800ee4a:	9903      	ldr	r1, [sp, #12]
 800ee4c:	fb90 f0f2 	sdiv	r0, r0, r2
 800ee50:	e7e7      	b.n	800ee22 <__strftime.isra.0+0x30a>
 800ee52:	4a58      	ldr	r2, [pc, #352]	; (800efb4 <__strftime.isra.0+0x49c>)
 800ee54:	f8df c180 	ldr.w	ip, [pc, #384]	; 800efd8 <__strftime.isra.0+0x4c0>
 800ee58:	4b58      	ldr	r3, [pc, #352]	; (800efbc <__strftime.isra.0+0x4a4>)
 800ee5a:	9001      	str	r0, [sp, #4]
 800ee5c:	f1b9 0f02 	cmp.w	r9, #2
 800ee60:	bf2c      	ite	cs
 800ee62:	ebc1 0109 	rsbcs	r1, r1, r9
 800ee66:	f1c1 0102 	rsbcc	r1, r1, #2
 800ee6a:	9100      	str	r1, [sp, #0]
 800ee6c:	4950      	ldr	r1, [pc, #320]	; (800efb0 <__strftime.isra.0+0x498>)
 800ee6e:	458a      	cmp	sl, r1
 800ee70:	bfa8      	it	ge
 800ee72:	4613      	movge	r3, r2
 800ee74:	4662      	mov	r2, ip
 800ee76:	1b29      	subs	r1, r5, r4
 800ee78:	1938      	adds	r0, r7, r4
 800ee7a:	e028      	b.n	800eece <__strftime.isra.0+0x3b6>
 800ee7c:	4a4d      	ldr	r2, [pc, #308]	; (800efb4 <__strftime.isra.0+0x49c>)
 800ee7e:	e7db      	b.n	800ee38 <__strftime.isra.0+0x320>
 800ee80:	494f      	ldr	r1, [pc, #316]	; (800efc0 <__strftime.isra.0+0x4a8>)
 800ee82:	4a50      	ldr	r2, [pc, #320]	; (800efc4 <__strftime.isra.0+0x4ac>)
 800ee84:	68f3      	ldr	r3, [r6, #12]
 800ee86:	2864      	cmp	r0, #100	; 0x64
 800ee88:	bf08      	it	eq
 800ee8a:	460a      	moveq	r2, r1
 800ee8c:	1b29      	subs	r1, r5, r4
 800ee8e:	1938      	adds	r0, r7, r4
 800ee90:	f004 fcfa 	bl	8013888 <sniprintf>
 800ee94:	2800      	cmp	r0, #0
 800ee96:	f6ff ae71 	blt.w	800eb7c <__strftime.isra.0+0x64>
 800ee9a:	4404      	add	r4, r0
 800ee9c:	42a5      	cmp	r5, r4
 800ee9e:	f63f af3f 	bhi.w	800ed20 <__strftime.isra.0+0x208>
 800eea2:	e66b      	b.n	800eb7c <__strftime.isra.0+0x64>
 800eea4:	6970      	ldr	r0, [r6, #20]
 800eea6:	6933      	ldr	r3, [r6, #16]
 800eea8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800eeac:	2800      	cmp	r0, #0
 800eeae:	eb07 0904 	add.w	r9, r7, r4
 800eeb2:	eba5 0104 	sub.w	r1, r5, r4
 800eeb6:	f103 0301 	add.w	r3, r3, #1
 800eeba:	db0b      	blt.n	800eed4 <__strftime.isra.0+0x3bc>
 800eebc:	2264      	movs	r2, #100	; 0x64
 800eebe:	fb90 fcf2 	sdiv	ip, r0, r2
 800eec2:	fb02 001c 	mls	r0, r2, ip, r0
 800eec6:	4a40      	ldr	r2, [pc, #256]	; (800efc8 <__strftime.isra.0+0x4b0>)
 800eec8:	e9cd a000 	strd	sl, r0, [sp]
 800eecc:	4648      	mov	r0, r9
 800eece:	f004 fcdb 	bl	8013888 <sniprintf>
 800eed2:	e7df      	b.n	800ee94 <__strftime.isra.0+0x37c>
 800eed4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800eed8:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800eedc:	f001 fde3 	bl	8010aa6 <abs>
 800eee0:	2264      	movs	r2, #100	; 0x64
 800eee2:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 800eee6:	fb90 fcf2 	sdiv	ip, r0, r2
 800eeea:	fb0c 0012 	mls	r0, ip, r2, r0
 800eeee:	e7ea      	b.n	800eec6 <__strftime.isra.0+0x3ae>
 800eef0:	2225      	movs	r2, #37	; 0x25
 800eef2:	f88d 2018 	strb.w	r2, [sp, #24]
 800eef6:	f1bb 0f00 	cmp.w	fp, #0
 800eefa:	d011      	beq.n	800ef20 <__strftime.isra.0+0x408>
 800eefc:	f1b9 0f06 	cmp.w	r9, #6
 800ef00:	bf38      	it	cc
 800ef02:	f04f 0906 	movcc.w	r9, #6
 800ef06:	f1b9 0306 	subs.w	r3, r9, #6
 800ef0a:	f88d b019 	strb.w	fp, [sp, #25]
 800ef0e:	d10c      	bne.n	800ef2a <__strftime.isra.0+0x412>
 800ef10:	f10d 001a 	add.w	r0, sp, #26
 800ef14:	492d      	ldr	r1, [pc, #180]	; (800efcc <__strftime.isra.0+0x4b4>)
 800ef16:	f7ff fd94 	bl	800ea42 <strcpy>
 800ef1a:	4633      	mov	r3, r6
 800ef1c:	aa06      	add	r2, sp, #24
 800ef1e:	e75d      	b.n	800eddc <__strftime.isra.0+0x2c4>
 800ef20:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800ef24:	f04f 090a 	mov.w	r9, #10
 800ef28:	e7ed      	b.n	800ef06 <__strftime.isra.0+0x3ee>
 800ef2a:	4a29      	ldr	r2, [pc, #164]	; (800efd0 <__strftime.isra.0+0x4b8>)
 800ef2c:	211e      	movs	r1, #30
 800ef2e:	f10d 001a 	add.w	r0, sp, #26
 800ef32:	f004 fca9 	bl	8013888 <sniprintf>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	ddea      	ble.n	800ef10 <__strftime.isra.0+0x3f8>
 800ef3a:	f10d 031a 	add.w	r3, sp, #26
 800ef3e:	4418      	add	r0, r3
 800ef40:	e7e8      	b.n	800ef14 <__strftime.isra.0+0x3fc>
 800ef42:	4630      	mov	r0, r6
 800ef44:	f7ff fd86 	bl	800ea54 <iso_year_adjust>
 800ef48:	4681      	mov	r9, r0
 800ef4a:	6970      	ldr	r0, [r6, #20]
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	db11      	blt.n	800ef74 <__strftime.isra.0+0x45c>
 800ef50:	2364      	movs	r3, #100	; 0x64
 800ef52:	fb90 f2f3 	sdiv	r2, r0, r3
 800ef56:	fb03 0012 	mls	r0, r3, r2, r0
 800ef5a:	2264      	movs	r2, #100	; 0x64
 800ef5c:	4481      	add	r9, r0
 800ef5e:	fb99 f3f2 	sdiv	r3, r9, r2
 800ef62:	fb02 9913 	mls	r9, r2, r3, r9
 800ef66:	4491      	add	r9, r2
 800ef68:	fbb9 f3f2 	udiv	r3, r9, r2
 800ef6c:	fb02 9313 	mls	r3, r2, r3, r9
 800ef70:	4a13      	ldr	r2, [pc, #76]	; (800efc0 <__strftime.isra.0+0x4a8>)
 800ef72:	e78b      	b.n	800ee8c <__strftime.isra.0+0x374>
 800ef74:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800ef78:	f001 fd95 	bl	8010aa6 <abs>
 800ef7c:	2364      	movs	r3, #100	; 0x64
 800ef7e:	f1b9 0f00 	cmp.w	r9, #0
 800ef82:	fb90 f2f3 	sdiv	r2, r0, r3
 800ef86:	fb02 0013 	mls	r0, r2, r3, r0
 800ef8a:	da07      	bge.n	800ef9c <__strftime.isra.0+0x484>
 800ef8c:	6972      	ldr	r2, [r6, #20]
 800ef8e:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800ef92:	429a      	cmp	r2, r3
 800ef94:	bfb8      	it	lt
 800ef96:	f04f 0901 	movlt.w	r9, #1
 800ef9a:	e7de      	b.n	800ef5a <__strftime.isra.0+0x442>
 800ef9c:	d0dd      	beq.n	800ef5a <__strftime.isra.0+0x442>
 800ef9e:	6972      	ldr	r2, [r6, #20]
 800efa0:	4b03      	ldr	r3, [pc, #12]	; (800efb0 <__strftime.isra.0+0x498>)
 800efa2:	429a      	cmp	r2, r3
 800efa4:	bfb8      	it	lt
 800efa6:	f04f 39ff 	movlt.w	r9, #4294967295
 800efaa:	e7d6      	b.n	800ef5a <__strftime.isra.0+0x442>
 800efac:	0803ded8 	.word	0x0803ded8
 800efb0:	fffff894 	.word	0xfffff894
 800efb4:	0803db86 	.word	0x0803db86
 800efb8:	0803dcb2 	.word	0x0803dcb2
 800efbc:	0803e425 	.word	0x0803e425
 800efc0:	0803dcc2 	.word	0x0803dcc2
 800efc4:	0803dcb4 	.word	0x0803dcb4
 800efc8:	0803dcb8 	.word	0x0803dcb8
 800efcc:	0803dccb 	.word	0x0803dccb
 800efd0:	0803dcc7 	.word	0x0803dcc7
 800efd4:	0803dcaa 	.word	0x0803dcaa
 800efd8:	0803dca3 	.word	0x0803dca3
 800efdc:	6971      	ldr	r1, [r6, #20]
 800efde:	4ab6      	ldr	r2, [pc, #728]	; (800f2b8 <__strftime.isra.0+0x7a0>)
 800efe0:	4291      	cmp	r1, r2
 800efe2:	bfac      	ite	ge
 800efe4:	2300      	movge	r3, #0
 800efe6:	2301      	movlt	r3, #1
 800efe8:	4630      	mov	r0, r6
 800efea:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800efee:	f7ff fd31 	bl	800ea54 <iso_year_adjust>
 800eff2:	9904      	ldr	r1, [sp, #16]
 800eff4:	2900      	cmp	r1, #0
 800eff6:	4682      	mov	sl, r0
 800eff8:	db2c      	blt.n	800f054 <__strftime.isra.0+0x53c>
 800effa:	2264      	movs	r2, #100	; 0x64
 800effc:	fb91 f2f2 	sdiv	r2, r1, r2
 800f000:	3213      	adds	r2, #19
 800f002:	6970      	ldr	r0, [r6, #20]
 800f004:	2800      	cmp	r0, #0
 800f006:	db30      	blt.n	800f06a <__strftime.isra.0+0x552>
 800f008:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800f00c:	fb90 fefc 	sdiv	lr, r0, ip
 800f010:	fb0c 001e 	mls	r0, ip, lr, r0
 800f014:	f1ba 0f00 	cmp.w	sl, #0
 800f018:	da36      	bge.n	800f088 <__strftime.isra.0+0x570>
 800f01a:	6971      	ldr	r1, [r6, #20]
 800f01c:	4ba7      	ldr	r3, [pc, #668]	; (800f2bc <__strftime.isra.0+0x7a4>)
 800f01e:	4299      	cmp	r1, r3
 800f020:	db3d      	blt.n	800f09e <__strftime.isra.0+0x586>
 800f022:	4482      	add	sl, r0
 800f024:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f028:	d13e      	bne.n	800f0a8 <__strftime.isra.0+0x590>
 800f02a:	3a01      	subs	r2, #1
 800f02c:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800f030:	9b03      	ldr	r3, [sp, #12]
 800f032:	2064      	movs	r0, #100	; 0x64
 800f034:	fb00 aa02 	mla	sl, r0, r2, sl
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f000 81ad 	beq.w	800f398 <__strftime.isra.0+0x880>
 800f03e:	222d      	movs	r2, #45	; 0x2d
 800f040:	f88d 2018 	strb.w	r2, [sp, #24]
 800f044:	f1b9 0f00 	cmp.w	r9, #0
 800f048:	d001      	beq.n	800f04e <__strftime.isra.0+0x536>
 800f04a:	f109 39ff 	add.w	r9, r9, #4294967295
 800f04e:	f10d 0219 	add.w	r2, sp, #25
 800f052:	e1ac      	b.n	800f3ae <__strftime.isra.0+0x896>
 800f054:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800f058:	9104      	str	r1, [sp, #16]
 800f05a:	f001 fd24 	bl	8010aa6 <abs>
 800f05e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800f062:	9904      	ldr	r1, [sp, #16]
 800f064:	fb90 f2fc 	sdiv	r2, r0, ip
 800f068:	e7cb      	b.n	800f002 <__strftime.isra.0+0x4ea>
 800f06a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800f06e:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800f072:	f001 fd18 	bl	8010aa6 <abs>
 800f076:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800f07a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800f07e:	fb90 fefc 	sdiv	lr, r0, ip
 800f082:	fb0e 001c 	mls	r0, lr, ip, r0
 800f086:	e7c5      	b.n	800f014 <__strftime.isra.0+0x4fc>
 800f088:	d0cb      	beq.n	800f022 <__strftime.isra.0+0x50a>
 800f08a:	4b8b      	ldr	r3, [pc, #556]	; (800f2b8 <__strftime.isra.0+0x7a0>)
 800f08c:	4299      	cmp	r1, r3
 800f08e:	bfb4      	ite	lt
 800f090:	2301      	movlt	r3, #1
 800f092:	2300      	movge	r3, #0
 800f094:	9303      	str	r3, [sp, #12]
 800f096:	bfb8      	it	lt
 800f098:	f04f 3aff 	movlt.w	sl, #4294967295
 800f09c:	e7c1      	b.n	800f022 <__strftime.isra.0+0x50a>
 800f09e:	f04f 0a01 	mov.w	sl, #1
 800f0a2:	f8cd a00c 	str.w	sl, [sp, #12]
 800f0a6:	e7bc      	b.n	800f022 <__strftime.isra.0+0x50a>
 800f0a8:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800f0ac:	bf04      	itt	eq
 800f0ae:	3201      	addeq	r2, #1
 800f0b0:	f04f 0a00 	moveq.w	sl, #0
 800f0b4:	e7bc      	b.n	800f030 <__strftime.isra.0+0x518>
 800f0b6:	4982      	ldr	r1, [pc, #520]	; (800f2c0 <__strftime.isra.0+0x7a8>)
 800f0b8:	4a82      	ldr	r2, [pc, #520]	; (800f2c4 <__strftime.isra.0+0x7ac>)
 800f0ba:	68b3      	ldr	r3, [r6, #8]
 800f0bc:	286b      	cmp	r0, #107	; 0x6b
 800f0be:	bf08      	it	eq
 800f0c0:	460a      	moveq	r2, r1
 800f0c2:	e6e3      	b.n	800ee8c <__strftime.isra.0+0x374>
 800f0c4:	68b3      	ldr	r3, [r6, #8]
 800f0c6:	b163      	cbz	r3, 800f0e2 <__strftime.isra.0+0x5ca>
 800f0c8:	2b0c      	cmp	r3, #12
 800f0ca:	d004      	beq.n	800f0d6 <__strftime.isra.0+0x5be>
 800f0cc:	210c      	movs	r1, #12
 800f0ce:	fb93 f2f1 	sdiv	r2, r3, r1
 800f0d2:	fb01 3312 	mls	r3, r1, r2, r3
 800f0d6:	497b      	ldr	r1, [pc, #492]	; (800f2c4 <__strftime.isra.0+0x7ac>)
 800f0d8:	4a79      	ldr	r2, [pc, #484]	; (800f2c0 <__strftime.isra.0+0x7a8>)
 800f0da:	2849      	cmp	r0, #73	; 0x49
 800f0dc:	bf08      	it	eq
 800f0de:	460a      	moveq	r2, r1
 800f0e0:	e6d4      	b.n	800ee8c <__strftime.isra.0+0x374>
 800f0e2:	230c      	movs	r3, #12
 800f0e4:	e7f7      	b.n	800f0d6 <__strftime.isra.0+0x5be>
 800f0e6:	69f3      	ldr	r3, [r6, #28]
 800f0e8:	4a77      	ldr	r2, [pc, #476]	; (800f2c8 <__strftime.isra.0+0x7b0>)
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	e6ce      	b.n	800ee8c <__strftime.isra.0+0x374>
 800f0ee:	6933      	ldr	r3, [r6, #16]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	e73d      	b.n	800ef70 <__strftime.isra.0+0x458>
 800f0f4:	6873      	ldr	r3, [r6, #4]
 800f0f6:	e73b      	b.n	800ef70 <__strftime.isra.0+0x458>
 800f0f8:	1e6b      	subs	r3, r5, #1
 800f0fa:	429c      	cmp	r4, r3
 800f0fc:	f4bf ad3e 	bcs.w	800eb7c <__strftime.isra.0+0x64>
 800f100:	230a      	movs	r3, #10
 800f102:	553b      	strb	r3, [r7, r4]
 800f104:	3401      	adds	r4, #1
 800f106:	e60b      	b.n	800ed20 <__strftime.isra.0+0x208>
 800f108:	68b3      	ldr	r3, [r6, #8]
 800f10a:	2b0b      	cmp	r3, #11
 800f10c:	4b6f      	ldr	r3, [pc, #444]	; (800f2cc <__strftime.isra.0+0x7b4>)
 800f10e:	bfd4      	ite	le
 800f110:	2200      	movle	r2, #0
 800f112:	2201      	movgt	r2, #1
 800f114:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f118:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800f11c:	4648      	mov	r0, r9
 800f11e:	f7f1 f867 	bl	80001f0 <strlen>
 800f122:	f109 32ff 	add.w	r2, r9, #4294967295
 800f126:	4420      	add	r0, r4
 800f128:	f105 3cff 	add.w	ip, r5, #4294967295
 800f12c:	42a0      	cmp	r0, r4
 800f12e:	f43f adf7 	beq.w	800ed20 <__strftime.isra.0+0x208>
 800f132:	45a4      	cmp	ip, r4
 800f134:	f67f ad22 	bls.w	800eb7c <__strftime.isra.0+0x64>
 800f138:	f898 1000 	ldrb.w	r1, [r8]
 800f13c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800f140:	2950      	cmp	r1, #80	; 0x50
 800f142:	d107      	bne.n	800f154 <__strftime.isra.0+0x63c>
 800f144:	4962      	ldr	r1, [pc, #392]	; (800f2d0 <__strftime.isra.0+0x7b8>)
 800f146:	5cc9      	ldrb	r1, [r1, r3]
 800f148:	f001 0103 	and.w	r1, r1, #3
 800f14c:	2901      	cmp	r1, #1
 800f14e:	bf08      	it	eq
 800f150:	3320      	addeq	r3, #32
 800f152:	b2db      	uxtb	r3, r3
 800f154:	553b      	strb	r3, [r7, r4]
 800f156:	3401      	adds	r4, #1
 800f158:	e7e8      	b.n	800f12c <__strftime.isra.0+0x614>
 800f15a:	6873      	ldr	r3, [r6, #4]
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	4a5d      	ldr	r2, [pc, #372]	; (800f2d4 <__strftime.isra.0+0x7bc>)
 800f160:	68b3      	ldr	r3, [r6, #8]
 800f162:	1b29      	subs	r1, r5, r4
 800f164:	1938      	adds	r0, r7, r4
 800f166:	f004 fb8f 	bl	8013888 <sniprintf>
 800f16a:	e693      	b.n	800ee94 <__strftime.isra.0+0x37c>
 800f16c:	6a33      	ldr	r3, [r6, #32]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	db7a      	blt.n	800f268 <__strftime.isra.0+0x750>
 800f172:	f001 fa2d 	bl	80105d0 <__tz_lock>
 800f176:	9b02      	ldr	r3, [sp, #8]
 800f178:	b90b      	cbnz	r3, 800f17e <__strftime.isra.0+0x666>
 800f17a:	f001 fa35 	bl	80105e8 <_tzset_unlocked>
 800f17e:	f003 f8a5 	bl	80122cc <__gettzinfo>
 800f182:	6a33      	ldr	r3, [r6, #32]
 800f184:	2b00      	cmp	r3, #0
 800f186:	bfd4      	ite	le
 800f188:	2200      	movle	r2, #0
 800f18a:	2201      	movgt	r2, #1
 800f18c:	2328      	movs	r3, #40	; 0x28
 800f18e:	fb02 3303 	mla	r3, r2, r3, r3
 800f192:	58c3      	ldr	r3, [r0, r3]
 800f194:	f1c3 0900 	rsb	r9, r3, #0
 800f198:	f001 fa20 	bl	80105dc <__tz_unlock>
 800f19c:	2301      	movs	r3, #1
 800f19e:	9302      	str	r3, [sp, #8]
 800f1a0:	6972      	ldr	r2, [r6, #20]
 800f1a2:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800f1a6:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800f1aa:	f16c 0c00 	sbc.w	ip, ip, #0
 800f1ae:	f1bc 0f00 	cmp.w	ip, #0
 800f1b2:	eba5 0104 	sub.w	r1, r5, r4
 800f1b6:	eb07 0004 	add.w	r0, r7, r4
 800f1ba:	da02      	bge.n	800f1c2 <__strftime.isra.0+0x6aa>
 800f1bc:	3303      	adds	r3, #3
 800f1be:	f14c 0c00 	adc.w	ip, ip, #0
 800f1c2:	089b      	lsrs	r3, r3, #2
 800f1c4:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800f1c8:	f102 3aff 	add.w	sl, r2, #4294967295
 800f1cc:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800f1d0:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800f1d4:	fb9a fefe 	sdiv	lr, sl, lr
 800f1d8:	ebb3 030e 	subs.w	r3, r3, lr
 800f1dc:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800f1e0:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800f1e4:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800f1e8:	fb9a fefe 	sdiv	lr, sl, lr
 800f1ec:	eb13 030e 	adds.w	r3, r3, lr
 800f1f0:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800f1f4:	3a46      	subs	r2, #70	; 0x46
 800f1f6:	f240 1c6d 	movw	ip, #365	; 0x16d
 800f1fa:	fb0c f202 	mul.w	r2, ip, r2
 800f1fe:	189b      	adds	r3, r3, r2
 800f200:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800f204:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800f208:	f04f 0c18 	mov.w	ip, #24
 800f20c:	eb13 030e 	adds.w	r3, r3, lr
 800f210:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800f214:	fba3 3e0c 	umull	r3, lr, r3, ip
 800f218:	fb0c e202 	mla	r2, ip, r2, lr
 800f21c:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800f220:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800f224:	eb13 030e 	adds.w	r3, r3, lr
 800f228:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800f22c:	fba3 320c 	umull	r3, r2, r3, ip
 800f230:	fb0c 220e 	mla	r2, ip, lr, r2
 800f234:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800f238:	eb13 030e 	adds.w	r3, r3, lr
 800f23c:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800f240:	fba3 3e0c 	umull	r3, lr, r3, ip
 800f244:	fb0c e202 	mla	r2, ip, r2, lr
 800f248:	f8d6 e000 	ldr.w	lr, [r6]
 800f24c:	eb13 030e 	adds.w	r3, r3, lr
 800f250:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800f254:	ebb3 0309 	subs.w	r3, r3, r9
 800f258:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800f25c:	e9cd 3200 	strd	r3, r2, [sp]
 800f260:	4a1d      	ldr	r2, [pc, #116]	; (800f2d8 <__strftime.isra.0+0x7c0>)
 800f262:	f004 fb11 	bl	8013888 <sniprintf>
 800f266:	e615      	b.n	800ee94 <__strftime.isra.0+0x37c>
 800f268:	f04f 0900 	mov.w	r9, #0
 800f26c:	e798      	b.n	800f1a0 <__strftime.isra.0+0x688>
 800f26e:	6833      	ldr	r3, [r6, #0]
 800f270:	e67e      	b.n	800ef70 <__strftime.isra.0+0x458>
 800f272:	1e6b      	subs	r3, r5, #1
 800f274:	429c      	cmp	r4, r3
 800f276:	f4bf ac81 	bcs.w	800eb7c <__strftime.isra.0+0x64>
 800f27a:	2309      	movs	r3, #9
 800f27c:	e741      	b.n	800f102 <__strftime.isra.0+0x5ea>
 800f27e:	6833      	ldr	r3, [r6, #0]
 800f280:	9301      	str	r3, [sp, #4]
 800f282:	6873      	ldr	r3, [r6, #4]
 800f284:	9300      	str	r3, [sp, #0]
 800f286:	4a15      	ldr	r2, [pc, #84]	; (800f2dc <__strftime.isra.0+0x7c4>)
 800f288:	68b3      	ldr	r3, [r6, #8]
 800f28a:	e5f4      	b.n	800ee76 <__strftime.isra.0+0x35e>
 800f28c:	1e6b      	subs	r3, r5, #1
 800f28e:	429c      	cmp	r4, r3
 800f290:	f4bf ac74 	bcs.w	800eb7c <__strftime.isra.0+0x64>
 800f294:	69b3      	ldr	r3, [r6, #24]
 800f296:	1c62      	adds	r2, r4, #1
 800f298:	b91b      	cbnz	r3, 800f2a2 <__strftime.isra.0+0x78a>
 800f29a:	2337      	movs	r3, #55	; 0x37
 800f29c:	553b      	strb	r3, [r7, r4]
 800f29e:	4614      	mov	r4, r2
 800f2a0:	e53e      	b.n	800ed20 <__strftime.isra.0+0x208>
 800f2a2:	3330      	adds	r3, #48	; 0x30
 800f2a4:	e7fa      	b.n	800f29c <__strftime.isra.0+0x784>
 800f2a6:	69f3      	ldr	r3, [r6, #28]
 800f2a8:	69b2      	ldr	r2, [r6, #24]
 800f2aa:	3307      	adds	r3, #7
 800f2ac:	1a9b      	subs	r3, r3, r2
 800f2ae:	2207      	movs	r2, #7
 800f2b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2b4:	e65c      	b.n	800ef70 <__strftime.isra.0+0x458>
 800f2b6:	bf00      	nop
 800f2b8:	fffff894 	.word	0xfffff894
 800f2bc:	fffff895 	.word	0xfffff895
 800f2c0:	0803dcb4 	.word	0x0803dcb4
 800f2c4:	0803dcc2 	.word	0x0803dcc2
 800f2c8:	0803dcd7 	.word	0x0803dcd7
 800f2cc:	0803ded8 	.word	0x0803ded8
 800f2d0:	0803e011 	.word	0x0803e011
 800f2d4:	0803dce6 	.word	0x0803dce6
 800f2d8:	0803dcdc 	.word	0x0803dcdc
 800f2dc:	0803dce1 	.word	0x0803dce1
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f7ff fbb7 	bl	800ea54 <iso_year_adjust>
 800f2e6:	69b2      	ldr	r2, [r6, #24]
 800f2e8:	b132      	cbz	r2, 800f2f8 <__strftime.isra.0+0x7e0>
 800f2ea:	3a01      	subs	r2, #1
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	dc28      	bgt.n	800f342 <__strftime.isra.0+0x82a>
 800f2f0:	69f3      	ldr	r3, [r6, #28]
 800f2f2:	d103      	bne.n	800f2fc <__strftime.isra.0+0x7e4>
 800f2f4:	330a      	adds	r3, #10
 800f2f6:	e7d9      	b.n	800f2ac <__strftime.isra.0+0x794>
 800f2f8:	2206      	movs	r2, #6
 800f2fa:	e7f7      	b.n	800f2ec <__strftime.isra.0+0x7d4>
 800f2fc:	6971      	ldr	r1, [r6, #20]
 800f2fe:	2900      	cmp	r1, #0
 800f300:	eba2 0203 	sub.w	r2, r2, r3
 800f304:	f240 736b 	movw	r3, #1899	; 0x76b
 800f308:	bfa8      	it	ge
 800f30a:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800f30e:	440b      	add	r3, r1
 800f310:	0799      	lsls	r1, r3, #30
 800f312:	d105      	bne.n	800f320 <__strftime.isra.0+0x808>
 800f314:	2064      	movs	r0, #100	; 0x64
 800f316:	fb93 f1f0 	sdiv	r1, r3, r0
 800f31a:	fb00 3111 	mls	r1, r0, r1, r3
 800f31e:	b971      	cbnz	r1, 800f33e <__strftime.isra.0+0x826>
 800f320:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800f324:	fb93 f0f1 	sdiv	r0, r3, r1
 800f328:	fb01 3310 	mls	r3, r1, r0, r3
 800f32c:	fab3 f383 	clz	r3, r3
 800f330:	095b      	lsrs	r3, r3, #5
 800f332:	1ad3      	subs	r3, r2, r3
 800f334:	2b05      	cmp	r3, #5
 800f336:	bfb4      	ite	lt
 800f338:	2335      	movlt	r3, #53	; 0x35
 800f33a:	2334      	movge	r3, #52	; 0x34
 800f33c:	e618      	b.n	800ef70 <__strftime.isra.0+0x458>
 800f33e:	2301      	movs	r3, #1
 800f340:	e7f7      	b.n	800f332 <__strftime.isra.0+0x81a>
 800f342:	2301      	movs	r3, #1
 800f344:	e614      	b.n	800ef70 <__strftime.isra.0+0x458>
 800f346:	1e6b      	subs	r3, r5, #1
 800f348:	429c      	cmp	r4, r3
 800f34a:	f4bf ac17 	bcs.w	800eb7c <__strftime.isra.0+0x64>
 800f34e:	69b3      	ldr	r3, [r6, #24]
 800f350:	3330      	adds	r3, #48	; 0x30
 800f352:	e6d6      	b.n	800f102 <__strftime.isra.0+0x5ea>
 800f354:	69b2      	ldr	r2, [r6, #24]
 800f356:	b11a      	cbz	r2, 800f360 <__strftime.isra.0+0x848>
 800f358:	3a01      	subs	r2, #1
 800f35a:	69f3      	ldr	r3, [r6, #28]
 800f35c:	3307      	adds	r3, #7
 800f35e:	e7a5      	b.n	800f2ac <__strftime.isra.0+0x794>
 800f360:	2206      	movs	r2, #6
 800f362:	e7fa      	b.n	800f35a <__strftime.isra.0+0x842>
 800f364:	6970      	ldr	r0, [r6, #20]
 800f366:	2800      	cmp	r0, #0
 800f368:	db05      	blt.n	800f376 <__strftime.isra.0+0x85e>
 800f36a:	2364      	movs	r3, #100	; 0x64
 800f36c:	fb90 f2f3 	sdiv	r2, r0, r3
 800f370:	fb02 0313 	mls	r3, r2, r3, r0
 800f374:	e5fc      	b.n	800ef70 <__strftime.isra.0+0x458>
 800f376:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800f37a:	f001 fb94 	bl	8010aa6 <abs>
 800f37e:	e7f4      	b.n	800f36a <__strftime.isra.0+0x852>
 800f380:	6972      	ldr	r2, [r6, #20]
 800f382:	494c      	ldr	r1, [pc, #304]	; (800f4b4 <__strftime.isra.0+0x99c>)
 800f384:	428a      	cmp	r2, r1
 800f386:	da05      	bge.n	800f394 <__strftime.isra.0+0x87c>
 800f388:	202d      	movs	r0, #45	; 0x2d
 800f38a:	f88d 0018 	strb.w	r0, [sp, #24]
 800f38e:	eba1 0a02 	sub.w	sl, r1, r2
 800f392:	e657      	b.n	800f044 <__strftime.isra.0+0x52c>
 800f394:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800f398:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800f39c:	d106      	bne.n	800f3ac <__strftime.isra.0+0x894>
 800f39e:	f242 720f 	movw	r2, #9999	; 0x270f
 800f3a2:	4592      	cmp	sl, r2
 800f3a4:	d902      	bls.n	800f3ac <__strftime.isra.0+0x894>
 800f3a6:	f88d b018 	strb.w	fp, [sp, #24]
 800f3aa:	e64b      	b.n	800f044 <__strftime.isra.0+0x52c>
 800f3ac:	aa06      	add	r2, sp, #24
 800f3ae:	2125      	movs	r1, #37	; 0x25
 800f3b0:	7011      	strb	r1, [r2, #0]
 800f3b2:	f1bb 0f00 	cmp.w	fp, #0
 800f3b6:	d108      	bne.n	800f3ca <__strftime.isra.0+0x8b2>
 800f3b8:	1c50      	adds	r0, r2, #1
 800f3ba:	493f      	ldr	r1, [pc, #252]	; (800f4b8 <__strftime.isra.0+0x9a0>)
 800f3bc:	f7ff fb41 	bl	800ea42 <strcpy>
 800f3c0:	f8cd a000 	str.w	sl, [sp]
 800f3c4:	464b      	mov	r3, r9
 800f3c6:	aa06      	add	r2, sp, #24
 800f3c8:	e6cb      	b.n	800f162 <__strftime.isra.0+0x64a>
 800f3ca:	2330      	movs	r3, #48	; 0x30
 800f3cc:	1c90      	adds	r0, r2, #2
 800f3ce:	7053      	strb	r3, [r2, #1]
 800f3d0:	e7f3      	b.n	800f3ba <__strftime.isra.0+0x8a2>
 800f3d2:	6a33      	ldr	r3, [r6, #32]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f6ff aca3 	blt.w	800ed20 <__strftime.isra.0+0x208>
 800f3da:	f001 f8f9 	bl	80105d0 <__tz_lock>
 800f3de:	9b02      	ldr	r3, [sp, #8]
 800f3e0:	b90b      	cbnz	r3, 800f3e6 <__strftime.isra.0+0x8ce>
 800f3e2:	f001 f901 	bl	80105e8 <_tzset_unlocked>
 800f3e6:	f002 ff71 	bl	80122cc <__gettzinfo>
 800f3ea:	6a33      	ldr	r3, [r6, #32]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	bfd4      	ite	le
 800f3f0:	2200      	movle	r2, #0
 800f3f2:	2201      	movgt	r2, #1
 800f3f4:	2328      	movs	r3, #40	; 0x28
 800f3f6:	fb02 3303 	mla	r3, r2, r3, r3
 800f3fa:	eb07 0a04 	add.w	sl, r7, r4
 800f3fe:	58c3      	ldr	r3, [r0, r3]
 800f400:	f1c3 0900 	rsb	r9, r3, #0
 800f404:	f001 f8ea 	bl	80105dc <__tz_unlock>
 800f408:	233c      	movs	r3, #60	; 0x3c
 800f40a:	fb99 f0f3 	sdiv	r0, r9, r3
 800f40e:	f002 ff61 	bl	80122d4 <labs>
 800f412:	233c      	movs	r3, #60	; 0x3c
 800f414:	eba5 0b04 	sub.w	fp, r5, r4
 800f418:	fb90 f2f3 	sdiv	r2, r0, r3
 800f41c:	fb02 0013 	mls	r0, r2, r3, r0
 800f420:	9000      	str	r0, [sp, #0]
 800f422:	4a26      	ldr	r2, [pc, #152]	; (800f4bc <__strftime.isra.0+0x9a4>)
 800f424:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f428:	4659      	mov	r1, fp
 800f42a:	4650      	mov	r0, sl
 800f42c:	fb99 f3f3 	sdiv	r3, r9, r3
 800f430:	f004 fa2a 	bl	8013888 <sniprintf>
 800f434:	2800      	cmp	r0, #0
 800f436:	f6ff aba1 	blt.w	800eb7c <__strftime.isra.0+0x64>
 800f43a:	4404      	add	r4, r0
 800f43c:	42a5      	cmp	r5, r4
 800f43e:	f67f ab9d 	bls.w	800eb7c <__strftime.isra.0+0x64>
 800f442:	2301      	movs	r3, #1
 800f444:	9302      	str	r3, [sp, #8]
 800f446:	e46b      	b.n	800ed20 <__strftime.isra.0+0x208>
 800f448:	6a33      	ldr	r3, [r6, #32]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f6ff ac68 	blt.w	800ed20 <__strftime.isra.0+0x208>
 800f450:	f001 f8be 	bl	80105d0 <__tz_lock>
 800f454:	9b02      	ldr	r3, [sp, #8]
 800f456:	b90b      	cbnz	r3, 800f45c <__strftime.isra.0+0x944>
 800f458:	f001 f8c6 	bl	80105e8 <_tzset_unlocked>
 800f45c:	6a33      	ldr	r3, [r6, #32]
 800f45e:	4a18      	ldr	r2, [pc, #96]	; (800f4c0 <__strftime.isra.0+0x9a8>)
 800f460:	2b00      	cmp	r3, #0
 800f462:	bfd4      	ite	le
 800f464:	2300      	movle	r3, #0
 800f466:	2301      	movgt	r3, #1
 800f468:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800f46c:	4648      	mov	r0, r9
 800f46e:	f7f0 febf 	bl	80001f0 <strlen>
 800f472:	f109 39ff 	add.w	r9, r9, #4294967295
 800f476:	4420      	add	r0, r4
 800f478:	1e6b      	subs	r3, r5, #1
 800f47a:	42a0      	cmp	r0, r4
 800f47c:	d102      	bne.n	800f484 <__strftime.isra.0+0x96c>
 800f47e:	f001 f8ad 	bl	80105dc <__tz_unlock>
 800f482:	e7de      	b.n	800f442 <__strftime.isra.0+0x92a>
 800f484:	42a3      	cmp	r3, r4
 800f486:	d904      	bls.n	800f492 <__strftime.isra.0+0x97a>
 800f488:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800f48c:	553a      	strb	r2, [r7, r4]
 800f48e:	3401      	adds	r4, #1
 800f490:	e7f3      	b.n	800f47a <__strftime.isra.0+0x962>
 800f492:	f001 f8a3 	bl	80105dc <__tz_unlock>
 800f496:	f7ff bb71 	b.w	800eb7c <__strftime.isra.0+0x64>
 800f49a:	1e6b      	subs	r3, r5, #1
 800f49c:	429c      	cmp	r4, r3
 800f49e:	f4bf ab6d 	bcs.w	800eb7c <__strftime.isra.0+0x64>
 800f4a2:	2325      	movs	r3, #37	; 0x25
 800f4a4:	e62d      	b.n	800f102 <__strftime.isra.0+0x5ea>
 800f4a6:	b10d      	cbz	r5, 800f4ac <__strftime.isra.0+0x994>
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	553b      	strb	r3, [r7, r4]
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	b00f      	add	sp, #60	; 0x3c
 800f4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4b4:	fffff894 	.word	0xfffff894
 800f4b8:	0803dcd3 	.word	0x0803dcd3
 800f4bc:	0803dcf0 	.word	0x0803dcf0
 800f4c0:	20000324 	.word	0x20000324

0800f4c4 <strftime>:
 800f4c4:	f7ff bb28 	b.w	800eb18 <__strftime.isra.0>

0800f4c8 <strncpy>:
 800f4c8:	b510      	push	{r4, lr}
 800f4ca:	3901      	subs	r1, #1
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	b132      	cbz	r2, 800f4de <strncpy+0x16>
 800f4d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f4d4:	f803 4b01 	strb.w	r4, [r3], #1
 800f4d8:	3a01      	subs	r2, #1
 800f4da:	2c00      	cmp	r4, #0
 800f4dc:	d1f7      	bne.n	800f4ce <strncpy+0x6>
 800f4de:	441a      	add	r2, r3
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d100      	bne.n	800f4e8 <strncpy+0x20>
 800f4e6:	bd10      	pop	{r4, pc}
 800f4e8:	f803 1b01 	strb.w	r1, [r3], #1
 800f4ec:	e7f9      	b.n	800f4e2 <strncpy+0x1a>

0800f4ee <strpbrk>:
 800f4ee:	b570      	push	{r4, r5, r6, lr}
 800f4f0:	7803      	ldrb	r3, [r0, #0]
 800f4f2:	b1a3      	cbz	r3, 800f51e <strpbrk+0x30>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	460c      	mov	r4, r1
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f813 5b01 	ldrb.w	r5, [r3], #1
 800f4fe:	b14d      	cbz	r5, 800f514 <strpbrk+0x26>
 800f500:	460a      	mov	r2, r1
 800f502:	e001      	b.n	800f508 <strpbrk+0x1a>
 800f504:	42ae      	cmp	r6, r5
 800f506:	d009      	beq.n	800f51c <strpbrk+0x2e>
 800f508:	4614      	mov	r4, r2
 800f50a:	f812 6b01 	ldrb.w	r6, [r2], #1
 800f50e:	2e00      	cmp	r6, #0
 800f510:	d1f8      	bne.n	800f504 <strpbrk+0x16>
 800f512:	e7f1      	b.n	800f4f8 <strpbrk+0xa>
 800f514:	7823      	ldrb	r3, [r4, #0]
 800f516:	2b00      	cmp	r3, #0
 800f518:	bf08      	it	eq
 800f51a:	2000      	moveq	r0, #0
 800f51c:	bd70      	pop	{r4, r5, r6, pc}
 800f51e:	4618      	mov	r0, r3
 800f520:	e7fc      	b.n	800f51c <strpbrk+0x2e>

0800f522 <strstr>:
 800f522:	780a      	ldrb	r2, [r1, #0]
 800f524:	b570      	push	{r4, r5, r6, lr}
 800f526:	b96a      	cbnz	r2, 800f544 <strstr+0x22>
 800f528:	bd70      	pop	{r4, r5, r6, pc}
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d109      	bne.n	800f542 <strstr+0x20>
 800f52e:	460c      	mov	r4, r1
 800f530:	4605      	mov	r5, r0
 800f532:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f536:	2b00      	cmp	r3, #0
 800f538:	d0f6      	beq.n	800f528 <strstr+0x6>
 800f53a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f53e:	429e      	cmp	r6, r3
 800f540:	d0f7      	beq.n	800f532 <strstr+0x10>
 800f542:	3001      	adds	r0, #1
 800f544:	7803      	ldrb	r3, [r0, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1ef      	bne.n	800f52a <strstr+0x8>
 800f54a:	4618      	mov	r0, r3
 800f54c:	e7ec      	b.n	800f528 <strstr+0x6>

0800f54e <sulp>:
 800f54e:	b570      	push	{r4, r5, r6, lr}
 800f550:	4604      	mov	r4, r0
 800f552:	460d      	mov	r5, r1
 800f554:	ec45 4b10 	vmov	d0, r4, r5
 800f558:	4616      	mov	r6, r2
 800f55a:	f003 faeb 	bl	8012b34 <__ulp>
 800f55e:	ec51 0b10 	vmov	r0, r1, d0
 800f562:	b17e      	cbz	r6, 800f584 <sulp+0x36>
 800f564:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f568:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	dd09      	ble.n	800f584 <sulp+0x36>
 800f570:	051b      	lsls	r3, r3, #20
 800f572:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f576:	2400      	movs	r4, #0
 800f578:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f57c:	4622      	mov	r2, r4
 800f57e:	462b      	mov	r3, r5
 800f580:	f7f1 f854 	bl	800062c <__aeabi_dmul>
 800f584:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f588 <_strtod_l>:
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58c:	ed2d 8b02 	vpush	{d8}
 800f590:	b09d      	sub	sp, #116	; 0x74
 800f592:	461f      	mov	r7, r3
 800f594:	2300      	movs	r3, #0
 800f596:	9318      	str	r3, [sp, #96]	; 0x60
 800f598:	4ba2      	ldr	r3, [pc, #648]	; (800f824 <_strtod_l+0x29c>)
 800f59a:	9213      	str	r2, [sp, #76]	; 0x4c
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	9305      	str	r3, [sp, #20]
 800f5a0:	4604      	mov	r4, r0
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	4688      	mov	r8, r1
 800f5a6:	f7f0 fe23 	bl	80001f0 <strlen>
 800f5aa:	f04f 0a00 	mov.w	sl, #0
 800f5ae:	4605      	mov	r5, r0
 800f5b0:	f04f 0b00 	mov.w	fp, #0
 800f5b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f5b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5ba:	781a      	ldrb	r2, [r3, #0]
 800f5bc:	2a2b      	cmp	r2, #43	; 0x2b
 800f5be:	d04e      	beq.n	800f65e <_strtod_l+0xd6>
 800f5c0:	d83b      	bhi.n	800f63a <_strtod_l+0xb2>
 800f5c2:	2a0d      	cmp	r2, #13
 800f5c4:	d834      	bhi.n	800f630 <_strtod_l+0xa8>
 800f5c6:	2a08      	cmp	r2, #8
 800f5c8:	d834      	bhi.n	800f634 <_strtod_l+0xac>
 800f5ca:	2a00      	cmp	r2, #0
 800f5cc:	d03e      	beq.n	800f64c <_strtod_l+0xc4>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	930a      	str	r3, [sp, #40]	; 0x28
 800f5d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f5d4:	7833      	ldrb	r3, [r6, #0]
 800f5d6:	2b30      	cmp	r3, #48	; 0x30
 800f5d8:	f040 80b0 	bne.w	800f73c <_strtod_l+0x1b4>
 800f5dc:	7873      	ldrb	r3, [r6, #1]
 800f5de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f5e2:	2b58      	cmp	r3, #88	; 0x58
 800f5e4:	d168      	bne.n	800f6b8 <_strtod_l+0x130>
 800f5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5e8:	9301      	str	r3, [sp, #4]
 800f5ea:	ab18      	add	r3, sp, #96	; 0x60
 800f5ec:	9702      	str	r7, [sp, #8]
 800f5ee:	9300      	str	r3, [sp, #0]
 800f5f0:	4a8d      	ldr	r2, [pc, #564]	; (800f828 <_strtod_l+0x2a0>)
 800f5f2:	ab19      	add	r3, sp, #100	; 0x64
 800f5f4:	a917      	add	r1, sp, #92	; 0x5c
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f002 fb1c 	bl	8011c34 <__gethex>
 800f5fc:	f010 0707 	ands.w	r7, r0, #7
 800f600:	4605      	mov	r5, r0
 800f602:	d005      	beq.n	800f610 <_strtod_l+0x88>
 800f604:	2f06      	cmp	r7, #6
 800f606:	d12c      	bne.n	800f662 <_strtod_l+0xda>
 800f608:	3601      	adds	r6, #1
 800f60a:	2300      	movs	r3, #0
 800f60c:	9617      	str	r6, [sp, #92]	; 0x5c
 800f60e:	930a      	str	r3, [sp, #40]	; 0x28
 800f610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f612:	2b00      	cmp	r3, #0
 800f614:	f040 8590 	bne.w	8010138 <_strtod_l+0xbb0>
 800f618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f61a:	b1eb      	cbz	r3, 800f658 <_strtod_l+0xd0>
 800f61c:	4652      	mov	r2, sl
 800f61e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f622:	ec43 2b10 	vmov	d0, r2, r3
 800f626:	b01d      	add	sp, #116	; 0x74
 800f628:	ecbd 8b02 	vpop	{d8}
 800f62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f630:	2a20      	cmp	r2, #32
 800f632:	d1cc      	bne.n	800f5ce <_strtod_l+0x46>
 800f634:	3301      	adds	r3, #1
 800f636:	9317      	str	r3, [sp, #92]	; 0x5c
 800f638:	e7be      	b.n	800f5b8 <_strtod_l+0x30>
 800f63a:	2a2d      	cmp	r2, #45	; 0x2d
 800f63c:	d1c7      	bne.n	800f5ce <_strtod_l+0x46>
 800f63e:	2201      	movs	r2, #1
 800f640:	920a      	str	r2, [sp, #40]	; 0x28
 800f642:	1c5a      	adds	r2, r3, #1
 800f644:	9217      	str	r2, [sp, #92]	; 0x5c
 800f646:	785b      	ldrb	r3, [r3, #1]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d1c2      	bne.n	800f5d2 <_strtod_l+0x4a>
 800f64c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f64e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f652:	2b00      	cmp	r3, #0
 800f654:	f040 856e 	bne.w	8010134 <_strtod_l+0xbac>
 800f658:	4652      	mov	r2, sl
 800f65a:	465b      	mov	r3, fp
 800f65c:	e7e1      	b.n	800f622 <_strtod_l+0x9a>
 800f65e:	2200      	movs	r2, #0
 800f660:	e7ee      	b.n	800f640 <_strtod_l+0xb8>
 800f662:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f664:	b13a      	cbz	r2, 800f676 <_strtod_l+0xee>
 800f666:	2135      	movs	r1, #53	; 0x35
 800f668:	a81a      	add	r0, sp, #104	; 0x68
 800f66a:	f003 fb6e 	bl	8012d4a <__copybits>
 800f66e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f670:	4620      	mov	r0, r4
 800f672:	f002 ff2d 	bl	80124d0 <_Bfree>
 800f676:	3f01      	subs	r7, #1
 800f678:	2f04      	cmp	r7, #4
 800f67a:	d806      	bhi.n	800f68a <_strtod_l+0x102>
 800f67c:	e8df f007 	tbb	[pc, r7]
 800f680:	1714030a 	.word	0x1714030a
 800f684:	0a          	.byte	0x0a
 800f685:	00          	.byte	0x00
 800f686:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f68a:	0728      	lsls	r0, r5, #28
 800f68c:	d5c0      	bpl.n	800f610 <_strtod_l+0x88>
 800f68e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f692:	e7bd      	b.n	800f610 <_strtod_l+0x88>
 800f694:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f698:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f69a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f69e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f6a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f6a6:	e7f0      	b.n	800f68a <_strtod_l+0x102>
 800f6a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f82c <_strtod_l+0x2a4>
 800f6ac:	e7ed      	b.n	800f68a <_strtod_l+0x102>
 800f6ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f6b2:	f04f 3aff 	mov.w	sl, #4294967295
 800f6b6:	e7e8      	b.n	800f68a <_strtod_l+0x102>
 800f6b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6ba:	1c5a      	adds	r2, r3, #1
 800f6bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800f6be:	785b      	ldrb	r3, [r3, #1]
 800f6c0:	2b30      	cmp	r3, #48	; 0x30
 800f6c2:	d0f9      	beq.n	800f6b8 <_strtod_l+0x130>
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d0a3      	beq.n	800f610 <_strtod_l+0x88>
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	f04f 0900 	mov.w	r9, #0
 800f6ce:	9304      	str	r3, [sp, #16]
 800f6d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6d2:	9308      	str	r3, [sp, #32]
 800f6d4:	f8cd 901c 	str.w	r9, [sp, #28]
 800f6d8:	464f      	mov	r7, r9
 800f6da:	220a      	movs	r2, #10
 800f6dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f6de:	7806      	ldrb	r6, [r0, #0]
 800f6e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f6e4:	b2d9      	uxtb	r1, r3
 800f6e6:	2909      	cmp	r1, #9
 800f6e8:	d92a      	bls.n	800f740 <_strtod_l+0x1b8>
 800f6ea:	9905      	ldr	r1, [sp, #20]
 800f6ec:	462a      	mov	r2, r5
 800f6ee:	f004 f8ff 	bl	80138f0 <strncmp>
 800f6f2:	b398      	cbz	r0, 800f75c <_strtod_l+0x1d4>
 800f6f4:	2000      	movs	r0, #0
 800f6f6:	4632      	mov	r2, r6
 800f6f8:	463d      	mov	r5, r7
 800f6fa:	9005      	str	r0, [sp, #20]
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	2a65      	cmp	r2, #101	; 0x65
 800f700:	d001      	beq.n	800f706 <_strtod_l+0x17e>
 800f702:	2a45      	cmp	r2, #69	; 0x45
 800f704:	d118      	bne.n	800f738 <_strtod_l+0x1b0>
 800f706:	b91d      	cbnz	r5, 800f710 <_strtod_l+0x188>
 800f708:	9a04      	ldr	r2, [sp, #16]
 800f70a:	4302      	orrs	r2, r0
 800f70c:	d09e      	beq.n	800f64c <_strtod_l+0xc4>
 800f70e:	2500      	movs	r5, #0
 800f710:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f714:	f108 0201 	add.w	r2, r8, #1
 800f718:	9217      	str	r2, [sp, #92]	; 0x5c
 800f71a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f71e:	2a2b      	cmp	r2, #43	; 0x2b
 800f720:	d075      	beq.n	800f80e <_strtod_l+0x286>
 800f722:	2a2d      	cmp	r2, #45	; 0x2d
 800f724:	d07b      	beq.n	800f81e <_strtod_l+0x296>
 800f726:	f04f 0c00 	mov.w	ip, #0
 800f72a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f72e:	2909      	cmp	r1, #9
 800f730:	f240 8082 	bls.w	800f838 <_strtod_l+0x2b0>
 800f734:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f738:	2600      	movs	r6, #0
 800f73a:	e09d      	b.n	800f878 <_strtod_l+0x2f0>
 800f73c:	2300      	movs	r3, #0
 800f73e:	e7c4      	b.n	800f6ca <_strtod_l+0x142>
 800f740:	2f08      	cmp	r7, #8
 800f742:	bfd8      	it	le
 800f744:	9907      	ldrle	r1, [sp, #28]
 800f746:	f100 0001 	add.w	r0, r0, #1
 800f74a:	bfda      	itte	le
 800f74c:	fb02 3301 	mlale	r3, r2, r1, r3
 800f750:	9307      	strle	r3, [sp, #28]
 800f752:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f756:	3701      	adds	r7, #1
 800f758:	9017      	str	r0, [sp, #92]	; 0x5c
 800f75a:	e7bf      	b.n	800f6dc <_strtod_l+0x154>
 800f75c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f75e:	195a      	adds	r2, r3, r5
 800f760:	9217      	str	r2, [sp, #92]	; 0x5c
 800f762:	5d5a      	ldrb	r2, [r3, r5]
 800f764:	2f00      	cmp	r7, #0
 800f766:	d037      	beq.n	800f7d8 <_strtod_l+0x250>
 800f768:	9005      	str	r0, [sp, #20]
 800f76a:	463d      	mov	r5, r7
 800f76c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f770:	2b09      	cmp	r3, #9
 800f772:	d912      	bls.n	800f79a <_strtod_l+0x212>
 800f774:	2301      	movs	r3, #1
 800f776:	e7c2      	b.n	800f6fe <_strtod_l+0x176>
 800f778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f77a:	1c5a      	adds	r2, r3, #1
 800f77c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f77e:	785a      	ldrb	r2, [r3, #1]
 800f780:	3001      	adds	r0, #1
 800f782:	2a30      	cmp	r2, #48	; 0x30
 800f784:	d0f8      	beq.n	800f778 <_strtod_l+0x1f0>
 800f786:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f78a:	2b08      	cmp	r3, #8
 800f78c:	f200 84d9 	bhi.w	8010142 <_strtod_l+0xbba>
 800f790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f792:	9005      	str	r0, [sp, #20]
 800f794:	2000      	movs	r0, #0
 800f796:	9308      	str	r3, [sp, #32]
 800f798:	4605      	mov	r5, r0
 800f79a:	3a30      	subs	r2, #48	; 0x30
 800f79c:	f100 0301 	add.w	r3, r0, #1
 800f7a0:	d014      	beq.n	800f7cc <_strtod_l+0x244>
 800f7a2:	9905      	ldr	r1, [sp, #20]
 800f7a4:	4419      	add	r1, r3
 800f7a6:	9105      	str	r1, [sp, #20]
 800f7a8:	462b      	mov	r3, r5
 800f7aa:	eb00 0e05 	add.w	lr, r0, r5
 800f7ae:	210a      	movs	r1, #10
 800f7b0:	4573      	cmp	r3, lr
 800f7b2:	d113      	bne.n	800f7dc <_strtod_l+0x254>
 800f7b4:	182b      	adds	r3, r5, r0
 800f7b6:	2b08      	cmp	r3, #8
 800f7b8:	f105 0501 	add.w	r5, r5, #1
 800f7bc:	4405      	add	r5, r0
 800f7be:	dc1c      	bgt.n	800f7fa <_strtod_l+0x272>
 800f7c0:	9907      	ldr	r1, [sp, #28]
 800f7c2:	230a      	movs	r3, #10
 800f7c4:	fb03 2301 	mla	r3, r3, r1, r2
 800f7c8:	9307      	str	r3, [sp, #28]
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f7ce:	1c51      	adds	r1, r2, #1
 800f7d0:	9117      	str	r1, [sp, #92]	; 0x5c
 800f7d2:	7852      	ldrb	r2, [r2, #1]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	e7c9      	b.n	800f76c <_strtod_l+0x1e4>
 800f7d8:	4638      	mov	r0, r7
 800f7da:	e7d2      	b.n	800f782 <_strtod_l+0x1fa>
 800f7dc:	2b08      	cmp	r3, #8
 800f7de:	dc04      	bgt.n	800f7ea <_strtod_l+0x262>
 800f7e0:	9e07      	ldr	r6, [sp, #28]
 800f7e2:	434e      	muls	r6, r1
 800f7e4:	9607      	str	r6, [sp, #28]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	e7e2      	b.n	800f7b0 <_strtod_l+0x228>
 800f7ea:	f103 0c01 	add.w	ip, r3, #1
 800f7ee:	f1bc 0f10 	cmp.w	ip, #16
 800f7f2:	bfd8      	it	le
 800f7f4:	fb01 f909 	mulle.w	r9, r1, r9
 800f7f8:	e7f5      	b.n	800f7e6 <_strtod_l+0x25e>
 800f7fa:	2d10      	cmp	r5, #16
 800f7fc:	bfdc      	itt	le
 800f7fe:	230a      	movle	r3, #10
 800f800:	fb03 2909 	mlale	r9, r3, r9, r2
 800f804:	e7e1      	b.n	800f7ca <_strtod_l+0x242>
 800f806:	2300      	movs	r3, #0
 800f808:	9305      	str	r3, [sp, #20]
 800f80a:	2301      	movs	r3, #1
 800f80c:	e77c      	b.n	800f708 <_strtod_l+0x180>
 800f80e:	f04f 0c00 	mov.w	ip, #0
 800f812:	f108 0202 	add.w	r2, r8, #2
 800f816:	9217      	str	r2, [sp, #92]	; 0x5c
 800f818:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f81c:	e785      	b.n	800f72a <_strtod_l+0x1a2>
 800f81e:	f04f 0c01 	mov.w	ip, #1
 800f822:	e7f6      	b.n	800f812 <_strtod_l+0x28a>
 800f824:	0803e254 	.word	0x0803e254
 800f828:	0803dcfc 	.word	0x0803dcfc
 800f82c:	7ff00000 	.word	0x7ff00000
 800f830:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f832:	1c51      	adds	r1, r2, #1
 800f834:	9117      	str	r1, [sp, #92]	; 0x5c
 800f836:	7852      	ldrb	r2, [r2, #1]
 800f838:	2a30      	cmp	r2, #48	; 0x30
 800f83a:	d0f9      	beq.n	800f830 <_strtod_l+0x2a8>
 800f83c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f840:	2908      	cmp	r1, #8
 800f842:	f63f af79 	bhi.w	800f738 <_strtod_l+0x1b0>
 800f846:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f84a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f84c:	9206      	str	r2, [sp, #24]
 800f84e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f850:	1c51      	adds	r1, r2, #1
 800f852:	9117      	str	r1, [sp, #92]	; 0x5c
 800f854:	7852      	ldrb	r2, [r2, #1]
 800f856:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f85a:	2e09      	cmp	r6, #9
 800f85c:	d937      	bls.n	800f8ce <_strtod_l+0x346>
 800f85e:	9e06      	ldr	r6, [sp, #24]
 800f860:	1b89      	subs	r1, r1, r6
 800f862:	2908      	cmp	r1, #8
 800f864:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f868:	dc02      	bgt.n	800f870 <_strtod_l+0x2e8>
 800f86a:	4576      	cmp	r6, lr
 800f86c:	bfa8      	it	ge
 800f86e:	4676      	movge	r6, lr
 800f870:	f1bc 0f00 	cmp.w	ip, #0
 800f874:	d000      	beq.n	800f878 <_strtod_l+0x2f0>
 800f876:	4276      	negs	r6, r6
 800f878:	2d00      	cmp	r5, #0
 800f87a:	d14d      	bne.n	800f918 <_strtod_l+0x390>
 800f87c:	9904      	ldr	r1, [sp, #16]
 800f87e:	4301      	orrs	r1, r0
 800f880:	f47f aec6 	bne.w	800f610 <_strtod_l+0x88>
 800f884:	2b00      	cmp	r3, #0
 800f886:	f47f aee1 	bne.w	800f64c <_strtod_l+0xc4>
 800f88a:	2a69      	cmp	r2, #105	; 0x69
 800f88c:	d027      	beq.n	800f8de <_strtod_l+0x356>
 800f88e:	dc24      	bgt.n	800f8da <_strtod_l+0x352>
 800f890:	2a49      	cmp	r2, #73	; 0x49
 800f892:	d024      	beq.n	800f8de <_strtod_l+0x356>
 800f894:	2a4e      	cmp	r2, #78	; 0x4e
 800f896:	f47f aed9 	bne.w	800f64c <_strtod_l+0xc4>
 800f89a:	499f      	ldr	r1, [pc, #636]	; (800fb18 <_strtod_l+0x590>)
 800f89c:	a817      	add	r0, sp, #92	; 0x5c
 800f89e:	f002 fc21 	bl	80120e4 <__match>
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	f43f aed2 	beq.w	800f64c <_strtod_l+0xc4>
 800f8a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	2b28      	cmp	r3, #40	; 0x28
 800f8ae:	d12d      	bne.n	800f90c <_strtod_l+0x384>
 800f8b0:	499a      	ldr	r1, [pc, #616]	; (800fb1c <_strtod_l+0x594>)
 800f8b2:	aa1a      	add	r2, sp, #104	; 0x68
 800f8b4:	a817      	add	r0, sp, #92	; 0x5c
 800f8b6:	f002 fc29 	bl	801210c <__hexnan>
 800f8ba:	2805      	cmp	r0, #5
 800f8bc:	d126      	bne.n	800f90c <_strtod_l+0x384>
 800f8be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f8c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f8c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f8c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f8cc:	e6a0      	b.n	800f610 <_strtod_l+0x88>
 800f8ce:	210a      	movs	r1, #10
 800f8d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f8d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f8d8:	e7b9      	b.n	800f84e <_strtod_l+0x2c6>
 800f8da:	2a6e      	cmp	r2, #110	; 0x6e
 800f8dc:	e7db      	b.n	800f896 <_strtod_l+0x30e>
 800f8de:	4990      	ldr	r1, [pc, #576]	; (800fb20 <_strtod_l+0x598>)
 800f8e0:	a817      	add	r0, sp, #92	; 0x5c
 800f8e2:	f002 fbff 	bl	80120e4 <__match>
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	f43f aeb0 	beq.w	800f64c <_strtod_l+0xc4>
 800f8ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8ee:	498d      	ldr	r1, [pc, #564]	; (800fb24 <_strtod_l+0x59c>)
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	a817      	add	r0, sp, #92	; 0x5c
 800f8f4:	9317      	str	r3, [sp, #92]	; 0x5c
 800f8f6:	f002 fbf5 	bl	80120e4 <__match>
 800f8fa:	b910      	cbnz	r0, 800f902 <_strtod_l+0x37a>
 800f8fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8fe:	3301      	adds	r3, #1
 800f900:	9317      	str	r3, [sp, #92]	; 0x5c
 800f902:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fb34 <_strtod_l+0x5ac>
 800f906:	f04f 0a00 	mov.w	sl, #0
 800f90a:	e681      	b.n	800f610 <_strtod_l+0x88>
 800f90c:	4886      	ldr	r0, [pc, #536]	; (800fb28 <_strtod_l+0x5a0>)
 800f90e:	f003 ff37 	bl	8013780 <nan>
 800f912:	ec5b ab10 	vmov	sl, fp, d0
 800f916:	e67b      	b.n	800f610 <_strtod_l+0x88>
 800f918:	9b05      	ldr	r3, [sp, #20]
 800f91a:	9807      	ldr	r0, [sp, #28]
 800f91c:	1af3      	subs	r3, r6, r3
 800f91e:	2f00      	cmp	r7, #0
 800f920:	bf08      	it	eq
 800f922:	462f      	moveq	r7, r5
 800f924:	2d10      	cmp	r5, #16
 800f926:	9306      	str	r3, [sp, #24]
 800f928:	46a8      	mov	r8, r5
 800f92a:	bfa8      	it	ge
 800f92c:	f04f 0810 	movge.w	r8, #16
 800f930:	f7f0 fe02 	bl	8000538 <__aeabi_ui2d>
 800f934:	2d09      	cmp	r5, #9
 800f936:	4682      	mov	sl, r0
 800f938:	468b      	mov	fp, r1
 800f93a:	dd13      	ble.n	800f964 <_strtod_l+0x3dc>
 800f93c:	4b7b      	ldr	r3, [pc, #492]	; (800fb2c <_strtod_l+0x5a4>)
 800f93e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f942:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f946:	f7f0 fe71 	bl	800062c <__aeabi_dmul>
 800f94a:	4682      	mov	sl, r0
 800f94c:	4648      	mov	r0, r9
 800f94e:	468b      	mov	fp, r1
 800f950:	f7f0 fdf2 	bl	8000538 <__aeabi_ui2d>
 800f954:	4602      	mov	r2, r0
 800f956:	460b      	mov	r3, r1
 800f958:	4650      	mov	r0, sl
 800f95a:	4659      	mov	r1, fp
 800f95c:	f7f0 fcb0 	bl	80002c0 <__adddf3>
 800f960:	4682      	mov	sl, r0
 800f962:	468b      	mov	fp, r1
 800f964:	2d0f      	cmp	r5, #15
 800f966:	dc38      	bgt.n	800f9da <_strtod_l+0x452>
 800f968:	9b06      	ldr	r3, [sp, #24]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f43f ae50 	beq.w	800f610 <_strtod_l+0x88>
 800f970:	dd24      	ble.n	800f9bc <_strtod_l+0x434>
 800f972:	2b16      	cmp	r3, #22
 800f974:	dc0b      	bgt.n	800f98e <_strtod_l+0x406>
 800f976:	496d      	ldr	r1, [pc, #436]	; (800fb2c <_strtod_l+0x5a4>)
 800f978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f97c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f980:	4652      	mov	r2, sl
 800f982:	465b      	mov	r3, fp
 800f984:	f7f0 fe52 	bl	800062c <__aeabi_dmul>
 800f988:	4682      	mov	sl, r0
 800f98a:	468b      	mov	fp, r1
 800f98c:	e640      	b.n	800f610 <_strtod_l+0x88>
 800f98e:	9a06      	ldr	r2, [sp, #24]
 800f990:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f994:	4293      	cmp	r3, r2
 800f996:	db20      	blt.n	800f9da <_strtod_l+0x452>
 800f998:	4c64      	ldr	r4, [pc, #400]	; (800fb2c <_strtod_l+0x5a4>)
 800f99a:	f1c5 050f 	rsb	r5, r5, #15
 800f99e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f9a2:	4652      	mov	r2, sl
 800f9a4:	465b      	mov	r3, fp
 800f9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9aa:	f7f0 fe3f 	bl	800062c <__aeabi_dmul>
 800f9ae:	9b06      	ldr	r3, [sp, #24]
 800f9b0:	1b5d      	subs	r5, r3, r5
 800f9b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f9b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f9ba:	e7e3      	b.n	800f984 <_strtod_l+0x3fc>
 800f9bc:	9b06      	ldr	r3, [sp, #24]
 800f9be:	3316      	adds	r3, #22
 800f9c0:	db0b      	blt.n	800f9da <_strtod_l+0x452>
 800f9c2:	9b05      	ldr	r3, [sp, #20]
 800f9c4:	1b9e      	subs	r6, r3, r6
 800f9c6:	4b59      	ldr	r3, [pc, #356]	; (800fb2c <_strtod_l+0x5a4>)
 800f9c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f9cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f9d0:	4650      	mov	r0, sl
 800f9d2:	4659      	mov	r1, fp
 800f9d4:	f7f0 ff54 	bl	8000880 <__aeabi_ddiv>
 800f9d8:	e7d6      	b.n	800f988 <_strtod_l+0x400>
 800f9da:	9b06      	ldr	r3, [sp, #24]
 800f9dc:	eba5 0808 	sub.w	r8, r5, r8
 800f9e0:	4498      	add	r8, r3
 800f9e2:	f1b8 0f00 	cmp.w	r8, #0
 800f9e6:	dd74      	ble.n	800fad2 <_strtod_l+0x54a>
 800f9e8:	f018 030f 	ands.w	r3, r8, #15
 800f9ec:	d00a      	beq.n	800fa04 <_strtod_l+0x47c>
 800f9ee:	494f      	ldr	r1, [pc, #316]	; (800fb2c <_strtod_l+0x5a4>)
 800f9f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f9f4:	4652      	mov	r2, sl
 800f9f6:	465b      	mov	r3, fp
 800f9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9fc:	f7f0 fe16 	bl	800062c <__aeabi_dmul>
 800fa00:	4682      	mov	sl, r0
 800fa02:	468b      	mov	fp, r1
 800fa04:	f038 080f 	bics.w	r8, r8, #15
 800fa08:	d04f      	beq.n	800faaa <_strtod_l+0x522>
 800fa0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fa0e:	dd22      	ble.n	800fa56 <_strtod_l+0x4ce>
 800fa10:	2500      	movs	r5, #0
 800fa12:	462e      	mov	r6, r5
 800fa14:	9507      	str	r5, [sp, #28]
 800fa16:	9505      	str	r5, [sp, #20]
 800fa18:	2322      	movs	r3, #34	; 0x22
 800fa1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fb34 <_strtod_l+0x5ac>
 800fa1e:	6023      	str	r3, [r4, #0]
 800fa20:	f04f 0a00 	mov.w	sl, #0
 800fa24:	9b07      	ldr	r3, [sp, #28]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	f43f adf2 	beq.w	800f610 <_strtod_l+0x88>
 800fa2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f002 fd4e 	bl	80124d0 <_Bfree>
 800fa34:	9905      	ldr	r1, [sp, #20]
 800fa36:	4620      	mov	r0, r4
 800fa38:	f002 fd4a 	bl	80124d0 <_Bfree>
 800fa3c:	4631      	mov	r1, r6
 800fa3e:	4620      	mov	r0, r4
 800fa40:	f002 fd46 	bl	80124d0 <_Bfree>
 800fa44:	9907      	ldr	r1, [sp, #28]
 800fa46:	4620      	mov	r0, r4
 800fa48:	f002 fd42 	bl	80124d0 <_Bfree>
 800fa4c:	4629      	mov	r1, r5
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f002 fd3e 	bl	80124d0 <_Bfree>
 800fa54:	e5dc      	b.n	800f610 <_strtod_l+0x88>
 800fa56:	4b36      	ldr	r3, [pc, #216]	; (800fb30 <_strtod_l+0x5a8>)
 800fa58:	9304      	str	r3, [sp, #16]
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fa60:	4650      	mov	r0, sl
 800fa62:	4659      	mov	r1, fp
 800fa64:	4699      	mov	r9, r3
 800fa66:	f1b8 0f01 	cmp.w	r8, #1
 800fa6a:	dc21      	bgt.n	800fab0 <_strtod_l+0x528>
 800fa6c:	b10b      	cbz	r3, 800fa72 <_strtod_l+0x4ea>
 800fa6e:	4682      	mov	sl, r0
 800fa70:	468b      	mov	fp, r1
 800fa72:	4b2f      	ldr	r3, [pc, #188]	; (800fb30 <_strtod_l+0x5a8>)
 800fa74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fa78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fa7c:	4652      	mov	r2, sl
 800fa7e:	465b      	mov	r3, fp
 800fa80:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fa84:	f7f0 fdd2 	bl	800062c <__aeabi_dmul>
 800fa88:	4b2a      	ldr	r3, [pc, #168]	; (800fb34 <_strtod_l+0x5ac>)
 800fa8a:	460a      	mov	r2, r1
 800fa8c:	400b      	ands	r3, r1
 800fa8e:	492a      	ldr	r1, [pc, #168]	; (800fb38 <_strtod_l+0x5b0>)
 800fa90:	428b      	cmp	r3, r1
 800fa92:	4682      	mov	sl, r0
 800fa94:	d8bc      	bhi.n	800fa10 <_strtod_l+0x488>
 800fa96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fa9a:	428b      	cmp	r3, r1
 800fa9c:	bf86      	itte	hi
 800fa9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fb3c <_strtod_l+0x5b4>
 800faa2:	f04f 3aff 	movhi.w	sl, #4294967295
 800faa6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800faaa:	2300      	movs	r3, #0
 800faac:	9304      	str	r3, [sp, #16]
 800faae:	e084      	b.n	800fbba <_strtod_l+0x632>
 800fab0:	f018 0f01 	tst.w	r8, #1
 800fab4:	d005      	beq.n	800fac2 <_strtod_l+0x53a>
 800fab6:	9b04      	ldr	r3, [sp, #16]
 800fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabc:	f7f0 fdb6 	bl	800062c <__aeabi_dmul>
 800fac0:	2301      	movs	r3, #1
 800fac2:	9a04      	ldr	r2, [sp, #16]
 800fac4:	3208      	adds	r2, #8
 800fac6:	f109 0901 	add.w	r9, r9, #1
 800faca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800face:	9204      	str	r2, [sp, #16]
 800fad0:	e7c9      	b.n	800fa66 <_strtod_l+0x4de>
 800fad2:	d0ea      	beq.n	800faaa <_strtod_l+0x522>
 800fad4:	f1c8 0800 	rsb	r8, r8, #0
 800fad8:	f018 020f 	ands.w	r2, r8, #15
 800fadc:	d00a      	beq.n	800faf4 <_strtod_l+0x56c>
 800fade:	4b13      	ldr	r3, [pc, #76]	; (800fb2c <_strtod_l+0x5a4>)
 800fae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fae4:	4650      	mov	r0, sl
 800fae6:	4659      	mov	r1, fp
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	f7f0 fec8 	bl	8000880 <__aeabi_ddiv>
 800faf0:	4682      	mov	sl, r0
 800faf2:	468b      	mov	fp, r1
 800faf4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800faf8:	d0d7      	beq.n	800faaa <_strtod_l+0x522>
 800fafa:	f1b8 0f1f 	cmp.w	r8, #31
 800fafe:	dd1f      	ble.n	800fb40 <_strtod_l+0x5b8>
 800fb00:	2500      	movs	r5, #0
 800fb02:	462e      	mov	r6, r5
 800fb04:	9507      	str	r5, [sp, #28]
 800fb06:	9505      	str	r5, [sp, #20]
 800fb08:	2322      	movs	r3, #34	; 0x22
 800fb0a:	f04f 0a00 	mov.w	sl, #0
 800fb0e:	f04f 0b00 	mov.w	fp, #0
 800fb12:	6023      	str	r3, [r4, #0]
 800fb14:	e786      	b.n	800fa24 <_strtod_l+0x49c>
 800fb16:	bf00      	nop
 800fb18:	0803ddae 	.word	0x0803ddae
 800fb1c:	0803dd10 	.word	0x0803dd10
 800fb20:	0803dc76 	.word	0x0803dc76
 800fb24:	0803e114 	.word	0x0803e114
 800fb28:	0803db86 	.word	0x0803db86
 800fb2c:	0803e350 	.word	0x0803e350
 800fb30:	0803e328 	.word	0x0803e328
 800fb34:	7ff00000 	.word	0x7ff00000
 800fb38:	7ca00000 	.word	0x7ca00000
 800fb3c:	7fefffff 	.word	0x7fefffff
 800fb40:	f018 0310 	ands.w	r3, r8, #16
 800fb44:	bf18      	it	ne
 800fb46:	236a      	movne	r3, #106	; 0x6a
 800fb48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800fef8 <_strtod_l+0x970>
 800fb4c:	9304      	str	r3, [sp, #16]
 800fb4e:	4650      	mov	r0, sl
 800fb50:	4659      	mov	r1, fp
 800fb52:	2300      	movs	r3, #0
 800fb54:	f018 0f01 	tst.w	r8, #1
 800fb58:	d004      	beq.n	800fb64 <_strtod_l+0x5dc>
 800fb5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fb5e:	f7f0 fd65 	bl	800062c <__aeabi_dmul>
 800fb62:	2301      	movs	r3, #1
 800fb64:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fb68:	f109 0908 	add.w	r9, r9, #8
 800fb6c:	d1f2      	bne.n	800fb54 <_strtod_l+0x5cc>
 800fb6e:	b10b      	cbz	r3, 800fb74 <_strtod_l+0x5ec>
 800fb70:	4682      	mov	sl, r0
 800fb72:	468b      	mov	fp, r1
 800fb74:	9b04      	ldr	r3, [sp, #16]
 800fb76:	b1c3      	cbz	r3, 800fbaa <_strtod_l+0x622>
 800fb78:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fb7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	4659      	mov	r1, fp
 800fb84:	dd11      	ble.n	800fbaa <_strtod_l+0x622>
 800fb86:	2b1f      	cmp	r3, #31
 800fb88:	f340 8124 	ble.w	800fdd4 <_strtod_l+0x84c>
 800fb8c:	2b34      	cmp	r3, #52	; 0x34
 800fb8e:	bfde      	ittt	le
 800fb90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fb94:	f04f 33ff 	movle.w	r3, #4294967295
 800fb98:	fa03 f202 	lslle.w	r2, r3, r2
 800fb9c:	f04f 0a00 	mov.w	sl, #0
 800fba0:	bfcc      	ite	gt
 800fba2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fba6:	ea02 0b01 	andle.w	fp, r2, r1
 800fbaa:	2200      	movs	r2, #0
 800fbac:	2300      	movs	r3, #0
 800fbae:	4650      	mov	r0, sl
 800fbb0:	4659      	mov	r1, fp
 800fbb2:	f7f0 ffa3 	bl	8000afc <__aeabi_dcmpeq>
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d1a2      	bne.n	800fb00 <_strtod_l+0x578>
 800fbba:	9b07      	ldr	r3, [sp, #28]
 800fbbc:	9300      	str	r3, [sp, #0]
 800fbbe:	9908      	ldr	r1, [sp, #32]
 800fbc0:	462b      	mov	r3, r5
 800fbc2:	463a      	mov	r2, r7
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	f002 fceb 	bl	80125a0 <__s2b>
 800fbca:	9007      	str	r0, [sp, #28]
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	f43f af1f 	beq.w	800fa10 <_strtod_l+0x488>
 800fbd2:	9b05      	ldr	r3, [sp, #20]
 800fbd4:	1b9e      	subs	r6, r3, r6
 800fbd6:	9b06      	ldr	r3, [sp, #24]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	bfb4      	ite	lt
 800fbdc:	4633      	movlt	r3, r6
 800fbde:	2300      	movge	r3, #0
 800fbe0:	930c      	str	r3, [sp, #48]	; 0x30
 800fbe2:	9b06      	ldr	r3, [sp, #24]
 800fbe4:	2500      	movs	r5, #0
 800fbe6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fbea:	9312      	str	r3, [sp, #72]	; 0x48
 800fbec:	462e      	mov	r6, r5
 800fbee:	9b07      	ldr	r3, [sp, #28]
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	6859      	ldr	r1, [r3, #4]
 800fbf4:	f002 fc2c 	bl	8012450 <_Balloc>
 800fbf8:	9005      	str	r0, [sp, #20]
 800fbfa:	2800      	cmp	r0, #0
 800fbfc:	f43f af0c 	beq.w	800fa18 <_strtod_l+0x490>
 800fc00:	9b07      	ldr	r3, [sp, #28]
 800fc02:	691a      	ldr	r2, [r3, #16]
 800fc04:	3202      	adds	r2, #2
 800fc06:	f103 010c 	add.w	r1, r3, #12
 800fc0a:	0092      	lsls	r2, r2, #2
 800fc0c:	300c      	adds	r0, #12
 800fc0e:	f7fd fd4b 	bl	800d6a8 <memcpy>
 800fc12:	ec4b ab10 	vmov	d0, sl, fp
 800fc16:	aa1a      	add	r2, sp, #104	; 0x68
 800fc18:	a919      	add	r1, sp, #100	; 0x64
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f003 f806 	bl	8012c2c <__d2b>
 800fc20:	ec4b ab18 	vmov	d8, sl, fp
 800fc24:	9018      	str	r0, [sp, #96]	; 0x60
 800fc26:	2800      	cmp	r0, #0
 800fc28:	f43f aef6 	beq.w	800fa18 <_strtod_l+0x490>
 800fc2c:	2101      	movs	r1, #1
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f002 fd50 	bl	80126d4 <__i2b>
 800fc34:	4606      	mov	r6, r0
 800fc36:	2800      	cmp	r0, #0
 800fc38:	f43f aeee 	beq.w	800fa18 <_strtod_l+0x490>
 800fc3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc3e:	9904      	ldr	r1, [sp, #16]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	bfab      	itete	ge
 800fc44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800fc46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800fc48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fc4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800fc4e:	bfac      	ite	ge
 800fc50:	eb03 0902 	addge.w	r9, r3, r2
 800fc54:	1ad7      	sublt	r7, r2, r3
 800fc56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fc58:	eba3 0801 	sub.w	r8, r3, r1
 800fc5c:	4490      	add	r8, r2
 800fc5e:	4ba1      	ldr	r3, [pc, #644]	; (800fee4 <_strtod_l+0x95c>)
 800fc60:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc64:	4598      	cmp	r8, r3
 800fc66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fc6a:	f280 80c7 	bge.w	800fdfc <_strtod_l+0x874>
 800fc6e:	eba3 0308 	sub.w	r3, r3, r8
 800fc72:	2b1f      	cmp	r3, #31
 800fc74:	eba2 0203 	sub.w	r2, r2, r3
 800fc78:	f04f 0101 	mov.w	r1, #1
 800fc7c:	f300 80b1 	bgt.w	800fde2 <_strtod_l+0x85a>
 800fc80:	fa01 f303 	lsl.w	r3, r1, r3
 800fc84:	930d      	str	r3, [sp, #52]	; 0x34
 800fc86:	2300      	movs	r3, #0
 800fc88:	9308      	str	r3, [sp, #32]
 800fc8a:	eb09 0802 	add.w	r8, r9, r2
 800fc8e:	9b04      	ldr	r3, [sp, #16]
 800fc90:	45c1      	cmp	r9, r8
 800fc92:	4417      	add	r7, r2
 800fc94:	441f      	add	r7, r3
 800fc96:	464b      	mov	r3, r9
 800fc98:	bfa8      	it	ge
 800fc9a:	4643      	movge	r3, r8
 800fc9c:	42bb      	cmp	r3, r7
 800fc9e:	bfa8      	it	ge
 800fca0:	463b      	movge	r3, r7
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	bfc2      	ittt	gt
 800fca6:	eba8 0803 	subgt.w	r8, r8, r3
 800fcaa:	1aff      	subgt	r7, r7, r3
 800fcac:	eba9 0903 	subgt.w	r9, r9, r3
 800fcb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	dd17      	ble.n	800fce6 <_strtod_l+0x75e>
 800fcb6:	4631      	mov	r1, r6
 800fcb8:	461a      	mov	r2, r3
 800fcba:	4620      	mov	r0, r4
 800fcbc:	f002 fdca 	bl	8012854 <__pow5mult>
 800fcc0:	4606      	mov	r6, r0
 800fcc2:	2800      	cmp	r0, #0
 800fcc4:	f43f aea8 	beq.w	800fa18 <_strtod_l+0x490>
 800fcc8:	4601      	mov	r1, r0
 800fcca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fccc:	4620      	mov	r0, r4
 800fcce:	f002 fd17 	bl	8012700 <__multiply>
 800fcd2:	900b      	str	r0, [sp, #44]	; 0x2c
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	f43f ae9f 	beq.w	800fa18 <_strtod_l+0x490>
 800fcda:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f002 fbf7 	bl	80124d0 <_Bfree>
 800fce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fce4:	9318      	str	r3, [sp, #96]	; 0x60
 800fce6:	f1b8 0f00 	cmp.w	r8, #0
 800fcea:	f300 808c 	bgt.w	800fe06 <_strtod_l+0x87e>
 800fcee:	9b06      	ldr	r3, [sp, #24]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	dd08      	ble.n	800fd06 <_strtod_l+0x77e>
 800fcf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fcf6:	9905      	ldr	r1, [sp, #20]
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	f002 fdab 	bl	8012854 <__pow5mult>
 800fcfe:	9005      	str	r0, [sp, #20]
 800fd00:	2800      	cmp	r0, #0
 800fd02:	f43f ae89 	beq.w	800fa18 <_strtod_l+0x490>
 800fd06:	2f00      	cmp	r7, #0
 800fd08:	dd08      	ble.n	800fd1c <_strtod_l+0x794>
 800fd0a:	9905      	ldr	r1, [sp, #20]
 800fd0c:	463a      	mov	r2, r7
 800fd0e:	4620      	mov	r0, r4
 800fd10:	f002 fdfa 	bl	8012908 <__lshift>
 800fd14:	9005      	str	r0, [sp, #20]
 800fd16:	2800      	cmp	r0, #0
 800fd18:	f43f ae7e 	beq.w	800fa18 <_strtod_l+0x490>
 800fd1c:	f1b9 0f00 	cmp.w	r9, #0
 800fd20:	dd08      	ble.n	800fd34 <_strtod_l+0x7ac>
 800fd22:	4631      	mov	r1, r6
 800fd24:	464a      	mov	r2, r9
 800fd26:	4620      	mov	r0, r4
 800fd28:	f002 fdee 	bl	8012908 <__lshift>
 800fd2c:	4606      	mov	r6, r0
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	f43f ae72 	beq.w	800fa18 <_strtod_l+0x490>
 800fd34:	9a05      	ldr	r2, [sp, #20]
 800fd36:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f002 fe71 	bl	8012a20 <__mdiff>
 800fd3e:	4605      	mov	r5, r0
 800fd40:	2800      	cmp	r0, #0
 800fd42:	f43f ae69 	beq.w	800fa18 <_strtod_l+0x490>
 800fd46:	68c3      	ldr	r3, [r0, #12]
 800fd48:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	60c3      	str	r3, [r0, #12]
 800fd4e:	4631      	mov	r1, r6
 800fd50:	f002 fe4a 	bl	80129e8 <__mcmp>
 800fd54:	2800      	cmp	r0, #0
 800fd56:	da60      	bge.n	800fe1a <_strtod_l+0x892>
 800fd58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd5a:	ea53 030a 	orrs.w	r3, r3, sl
 800fd5e:	f040 8082 	bne.w	800fe66 <_strtod_l+0x8de>
 800fd62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d17d      	bne.n	800fe66 <_strtod_l+0x8de>
 800fd6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd6e:	0d1b      	lsrs	r3, r3, #20
 800fd70:	051b      	lsls	r3, r3, #20
 800fd72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fd76:	d976      	bls.n	800fe66 <_strtod_l+0x8de>
 800fd78:	696b      	ldr	r3, [r5, #20]
 800fd7a:	b913      	cbnz	r3, 800fd82 <_strtod_l+0x7fa>
 800fd7c:	692b      	ldr	r3, [r5, #16]
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	dd71      	ble.n	800fe66 <_strtod_l+0x8de>
 800fd82:	4629      	mov	r1, r5
 800fd84:	2201      	movs	r2, #1
 800fd86:	4620      	mov	r0, r4
 800fd88:	f002 fdbe 	bl	8012908 <__lshift>
 800fd8c:	4631      	mov	r1, r6
 800fd8e:	4605      	mov	r5, r0
 800fd90:	f002 fe2a 	bl	80129e8 <__mcmp>
 800fd94:	2800      	cmp	r0, #0
 800fd96:	dd66      	ble.n	800fe66 <_strtod_l+0x8de>
 800fd98:	9904      	ldr	r1, [sp, #16]
 800fd9a:	4a53      	ldr	r2, [pc, #332]	; (800fee8 <_strtod_l+0x960>)
 800fd9c:	465b      	mov	r3, fp
 800fd9e:	2900      	cmp	r1, #0
 800fda0:	f000 8081 	beq.w	800fea6 <_strtod_l+0x91e>
 800fda4:	ea02 010b 	and.w	r1, r2, fp
 800fda8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fdac:	dc7b      	bgt.n	800fea6 <_strtod_l+0x91e>
 800fdae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fdb2:	f77f aea9 	ble.w	800fb08 <_strtod_l+0x580>
 800fdb6:	4b4d      	ldr	r3, [pc, #308]	; (800feec <_strtod_l+0x964>)
 800fdb8:	4650      	mov	r0, sl
 800fdba:	4659      	mov	r1, fp
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f7f0 fc35 	bl	800062c <__aeabi_dmul>
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	4303      	orrs	r3, r0
 800fdc6:	bf08      	it	eq
 800fdc8:	2322      	moveq	r3, #34	; 0x22
 800fdca:	4682      	mov	sl, r0
 800fdcc:	468b      	mov	fp, r1
 800fdce:	bf08      	it	eq
 800fdd0:	6023      	streq	r3, [r4, #0]
 800fdd2:	e62b      	b.n	800fa2c <_strtod_l+0x4a4>
 800fdd4:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd8:	fa02 f303 	lsl.w	r3, r2, r3
 800fddc:	ea03 0a0a 	and.w	sl, r3, sl
 800fde0:	e6e3      	b.n	800fbaa <_strtod_l+0x622>
 800fde2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fde6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fdea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fdee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fdf2:	fa01 f308 	lsl.w	r3, r1, r8
 800fdf6:	9308      	str	r3, [sp, #32]
 800fdf8:	910d      	str	r1, [sp, #52]	; 0x34
 800fdfa:	e746      	b.n	800fc8a <_strtod_l+0x702>
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	9308      	str	r3, [sp, #32]
 800fe00:	2301      	movs	r3, #1
 800fe02:	930d      	str	r3, [sp, #52]	; 0x34
 800fe04:	e741      	b.n	800fc8a <_strtod_l+0x702>
 800fe06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe08:	4642      	mov	r2, r8
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f002 fd7c 	bl	8012908 <__lshift>
 800fe10:	9018      	str	r0, [sp, #96]	; 0x60
 800fe12:	2800      	cmp	r0, #0
 800fe14:	f47f af6b 	bne.w	800fcee <_strtod_l+0x766>
 800fe18:	e5fe      	b.n	800fa18 <_strtod_l+0x490>
 800fe1a:	465f      	mov	r7, fp
 800fe1c:	d16e      	bne.n	800fefc <_strtod_l+0x974>
 800fe1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe24:	b342      	cbz	r2, 800fe78 <_strtod_l+0x8f0>
 800fe26:	4a32      	ldr	r2, [pc, #200]	; (800fef0 <_strtod_l+0x968>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d128      	bne.n	800fe7e <_strtod_l+0x8f6>
 800fe2c:	9b04      	ldr	r3, [sp, #16]
 800fe2e:	4651      	mov	r1, sl
 800fe30:	b1eb      	cbz	r3, 800fe6e <_strtod_l+0x8e6>
 800fe32:	4b2d      	ldr	r3, [pc, #180]	; (800fee8 <_strtod_l+0x960>)
 800fe34:	403b      	ands	r3, r7
 800fe36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fe3a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe3e:	d819      	bhi.n	800fe74 <_strtod_l+0x8ec>
 800fe40:	0d1b      	lsrs	r3, r3, #20
 800fe42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe46:	fa02 f303 	lsl.w	r3, r2, r3
 800fe4a:	4299      	cmp	r1, r3
 800fe4c:	d117      	bne.n	800fe7e <_strtod_l+0x8f6>
 800fe4e:	4b29      	ldr	r3, [pc, #164]	; (800fef4 <_strtod_l+0x96c>)
 800fe50:	429f      	cmp	r7, r3
 800fe52:	d102      	bne.n	800fe5a <_strtod_l+0x8d2>
 800fe54:	3101      	adds	r1, #1
 800fe56:	f43f addf 	beq.w	800fa18 <_strtod_l+0x490>
 800fe5a:	4b23      	ldr	r3, [pc, #140]	; (800fee8 <_strtod_l+0x960>)
 800fe5c:	403b      	ands	r3, r7
 800fe5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fe62:	f04f 0a00 	mov.w	sl, #0
 800fe66:	9b04      	ldr	r3, [sp, #16]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d1a4      	bne.n	800fdb6 <_strtod_l+0x82e>
 800fe6c:	e5de      	b.n	800fa2c <_strtod_l+0x4a4>
 800fe6e:	f04f 33ff 	mov.w	r3, #4294967295
 800fe72:	e7ea      	b.n	800fe4a <_strtod_l+0x8c2>
 800fe74:	4613      	mov	r3, r2
 800fe76:	e7e8      	b.n	800fe4a <_strtod_l+0x8c2>
 800fe78:	ea53 030a 	orrs.w	r3, r3, sl
 800fe7c:	d08c      	beq.n	800fd98 <_strtod_l+0x810>
 800fe7e:	9b08      	ldr	r3, [sp, #32]
 800fe80:	b1db      	cbz	r3, 800feba <_strtod_l+0x932>
 800fe82:	423b      	tst	r3, r7
 800fe84:	d0ef      	beq.n	800fe66 <_strtod_l+0x8de>
 800fe86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe88:	9a04      	ldr	r2, [sp, #16]
 800fe8a:	4650      	mov	r0, sl
 800fe8c:	4659      	mov	r1, fp
 800fe8e:	b1c3      	cbz	r3, 800fec2 <_strtod_l+0x93a>
 800fe90:	f7ff fb5d 	bl	800f54e <sulp>
 800fe94:	4602      	mov	r2, r0
 800fe96:	460b      	mov	r3, r1
 800fe98:	ec51 0b18 	vmov	r0, r1, d8
 800fe9c:	f7f0 fa10 	bl	80002c0 <__adddf3>
 800fea0:	4682      	mov	sl, r0
 800fea2:	468b      	mov	fp, r1
 800fea4:	e7df      	b.n	800fe66 <_strtod_l+0x8de>
 800fea6:	4013      	ands	r3, r2
 800fea8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800feac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800feb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800feb4:	f04f 3aff 	mov.w	sl, #4294967295
 800feb8:	e7d5      	b.n	800fe66 <_strtod_l+0x8de>
 800feba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800febc:	ea13 0f0a 	tst.w	r3, sl
 800fec0:	e7e0      	b.n	800fe84 <_strtod_l+0x8fc>
 800fec2:	f7ff fb44 	bl	800f54e <sulp>
 800fec6:	4602      	mov	r2, r0
 800fec8:	460b      	mov	r3, r1
 800feca:	ec51 0b18 	vmov	r0, r1, d8
 800fece:	f7f0 f9f5 	bl	80002bc <__aeabi_dsub>
 800fed2:	2200      	movs	r2, #0
 800fed4:	2300      	movs	r3, #0
 800fed6:	4682      	mov	sl, r0
 800fed8:	468b      	mov	fp, r1
 800feda:	f7f0 fe0f 	bl	8000afc <__aeabi_dcmpeq>
 800fede:	2800      	cmp	r0, #0
 800fee0:	d0c1      	beq.n	800fe66 <_strtod_l+0x8de>
 800fee2:	e611      	b.n	800fb08 <_strtod_l+0x580>
 800fee4:	fffffc02 	.word	0xfffffc02
 800fee8:	7ff00000 	.word	0x7ff00000
 800feec:	39500000 	.word	0x39500000
 800fef0:	000fffff 	.word	0x000fffff
 800fef4:	7fefffff 	.word	0x7fefffff
 800fef8:	0803dd28 	.word	0x0803dd28
 800fefc:	4631      	mov	r1, r6
 800fefe:	4628      	mov	r0, r5
 800ff00:	f002 fef0 	bl	8012ce4 <__ratio>
 800ff04:	ec59 8b10 	vmov	r8, r9, d0
 800ff08:	ee10 0a10 	vmov	r0, s0
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff12:	4649      	mov	r1, r9
 800ff14:	f7f0 fe06 	bl	8000b24 <__aeabi_dcmple>
 800ff18:	2800      	cmp	r0, #0
 800ff1a:	d07a      	beq.n	8010012 <_strtod_l+0xa8a>
 800ff1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d04a      	beq.n	800ffb8 <_strtod_l+0xa30>
 800ff22:	4b95      	ldr	r3, [pc, #596]	; (8010178 <_strtod_l+0xbf0>)
 800ff24:	2200      	movs	r2, #0
 800ff26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010178 <_strtod_l+0xbf0>
 800ff2e:	f04f 0800 	mov.w	r8, #0
 800ff32:	4b92      	ldr	r3, [pc, #584]	; (801017c <_strtod_l+0xbf4>)
 800ff34:	403b      	ands	r3, r7
 800ff36:	930d      	str	r3, [sp, #52]	; 0x34
 800ff38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff3a:	4b91      	ldr	r3, [pc, #580]	; (8010180 <_strtod_l+0xbf8>)
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	f040 80b0 	bne.w	80100a2 <_strtod_l+0xb1a>
 800ff42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff46:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ff4a:	ec4b ab10 	vmov	d0, sl, fp
 800ff4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff52:	f002 fdef 	bl	8012b34 <__ulp>
 800ff56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff5a:	ec53 2b10 	vmov	r2, r3, d0
 800ff5e:	f7f0 fb65 	bl	800062c <__aeabi_dmul>
 800ff62:	4652      	mov	r2, sl
 800ff64:	465b      	mov	r3, fp
 800ff66:	f7f0 f9ab 	bl	80002c0 <__adddf3>
 800ff6a:	460b      	mov	r3, r1
 800ff6c:	4983      	ldr	r1, [pc, #524]	; (801017c <_strtod_l+0xbf4>)
 800ff6e:	4a85      	ldr	r2, [pc, #532]	; (8010184 <_strtod_l+0xbfc>)
 800ff70:	4019      	ands	r1, r3
 800ff72:	4291      	cmp	r1, r2
 800ff74:	4682      	mov	sl, r0
 800ff76:	d960      	bls.n	801003a <_strtod_l+0xab2>
 800ff78:	ee18 3a90 	vmov	r3, s17
 800ff7c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d104      	bne.n	800ff8e <_strtod_l+0xa06>
 800ff84:	ee18 3a10 	vmov	r3, s16
 800ff88:	3301      	adds	r3, #1
 800ff8a:	f43f ad45 	beq.w	800fa18 <_strtod_l+0x490>
 800ff8e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010190 <_strtod_l+0xc08>
 800ff92:	f04f 3aff 	mov.w	sl, #4294967295
 800ff96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f002 fa99 	bl	80124d0 <_Bfree>
 800ff9e:	9905      	ldr	r1, [sp, #20]
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f002 fa95 	bl	80124d0 <_Bfree>
 800ffa6:	4631      	mov	r1, r6
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f002 fa91 	bl	80124d0 <_Bfree>
 800ffae:	4629      	mov	r1, r5
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f002 fa8d 	bl	80124d0 <_Bfree>
 800ffb6:	e61a      	b.n	800fbee <_strtod_l+0x666>
 800ffb8:	f1ba 0f00 	cmp.w	sl, #0
 800ffbc:	d11b      	bne.n	800fff6 <_strtod_l+0xa6e>
 800ffbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ffc2:	b9f3      	cbnz	r3, 8010002 <_strtod_l+0xa7a>
 800ffc4:	4b6c      	ldr	r3, [pc, #432]	; (8010178 <_strtod_l+0xbf0>)
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	4640      	mov	r0, r8
 800ffca:	4649      	mov	r1, r9
 800ffcc:	f7f0 fda0 	bl	8000b10 <__aeabi_dcmplt>
 800ffd0:	b9d0      	cbnz	r0, 8010008 <_strtod_l+0xa80>
 800ffd2:	4640      	mov	r0, r8
 800ffd4:	4649      	mov	r1, r9
 800ffd6:	4b6c      	ldr	r3, [pc, #432]	; (8010188 <_strtod_l+0xc00>)
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f7f0 fb27 	bl	800062c <__aeabi_dmul>
 800ffde:	4680      	mov	r8, r0
 800ffe0:	4689      	mov	r9, r1
 800ffe2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ffe6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ffea:	9315      	str	r3, [sp, #84]	; 0x54
 800ffec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fff0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fff4:	e79d      	b.n	800ff32 <_strtod_l+0x9aa>
 800fff6:	f1ba 0f01 	cmp.w	sl, #1
 800fffa:	d102      	bne.n	8010002 <_strtod_l+0xa7a>
 800fffc:	2f00      	cmp	r7, #0
 800fffe:	f43f ad83 	beq.w	800fb08 <_strtod_l+0x580>
 8010002:	4b62      	ldr	r3, [pc, #392]	; (801018c <_strtod_l+0xc04>)
 8010004:	2200      	movs	r2, #0
 8010006:	e78e      	b.n	800ff26 <_strtod_l+0x99e>
 8010008:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010188 <_strtod_l+0xc00>
 801000c:	f04f 0800 	mov.w	r8, #0
 8010010:	e7e7      	b.n	800ffe2 <_strtod_l+0xa5a>
 8010012:	4b5d      	ldr	r3, [pc, #372]	; (8010188 <_strtod_l+0xc00>)
 8010014:	4640      	mov	r0, r8
 8010016:	4649      	mov	r1, r9
 8010018:	2200      	movs	r2, #0
 801001a:	f7f0 fb07 	bl	800062c <__aeabi_dmul>
 801001e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010020:	4680      	mov	r8, r0
 8010022:	4689      	mov	r9, r1
 8010024:	b933      	cbnz	r3, 8010034 <_strtod_l+0xaac>
 8010026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801002a:	900e      	str	r0, [sp, #56]	; 0x38
 801002c:	930f      	str	r3, [sp, #60]	; 0x3c
 801002e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010032:	e7dd      	b.n	800fff0 <_strtod_l+0xa68>
 8010034:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010038:	e7f9      	b.n	801002e <_strtod_l+0xaa6>
 801003a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801003e:	9b04      	ldr	r3, [sp, #16]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d1a8      	bne.n	800ff96 <_strtod_l+0xa0e>
 8010044:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801004a:	0d1b      	lsrs	r3, r3, #20
 801004c:	051b      	lsls	r3, r3, #20
 801004e:	429a      	cmp	r2, r3
 8010050:	d1a1      	bne.n	800ff96 <_strtod_l+0xa0e>
 8010052:	4640      	mov	r0, r8
 8010054:	4649      	mov	r1, r9
 8010056:	f7f0 fe49 	bl	8000cec <__aeabi_d2lz>
 801005a:	f7f0 fab9 	bl	80005d0 <__aeabi_l2d>
 801005e:	4602      	mov	r2, r0
 8010060:	460b      	mov	r3, r1
 8010062:	4640      	mov	r0, r8
 8010064:	4649      	mov	r1, r9
 8010066:	f7f0 f929 	bl	80002bc <__aeabi_dsub>
 801006a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801006c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010070:	ea43 030a 	orr.w	r3, r3, sl
 8010074:	4313      	orrs	r3, r2
 8010076:	4680      	mov	r8, r0
 8010078:	4689      	mov	r9, r1
 801007a:	d055      	beq.n	8010128 <_strtod_l+0xba0>
 801007c:	a336      	add	r3, pc, #216	; (adr r3, 8010158 <_strtod_l+0xbd0>)
 801007e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010082:	f7f0 fd45 	bl	8000b10 <__aeabi_dcmplt>
 8010086:	2800      	cmp	r0, #0
 8010088:	f47f acd0 	bne.w	800fa2c <_strtod_l+0x4a4>
 801008c:	a334      	add	r3, pc, #208	; (adr r3, 8010160 <_strtod_l+0xbd8>)
 801008e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010092:	4640      	mov	r0, r8
 8010094:	4649      	mov	r1, r9
 8010096:	f7f0 fd59 	bl	8000b4c <__aeabi_dcmpgt>
 801009a:	2800      	cmp	r0, #0
 801009c:	f43f af7b 	beq.w	800ff96 <_strtod_l+0xa0e>
 80100a0:	e4c4      	b.n	800fa2c <_strtod_l+0x4a4>
 80100a2:	9b04      	ldr	r3, [sp, #16]
 80100a4:	b333      	cbz	r3, 80100f4 <_strtod_l+0xb6c>
 80100a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80100ac:	d822      	bhi.n	80100f4 <_strtod_l+0xb6c>
 80100ae:	a32e      	add	r3, pc, #184	; (adr r3, 8010168 <_strtod_l+0xbe0>)
 80100b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b4:	4640      	mov	r0, r8
 80100b6:	4649      	mov	r1, r9
 80100b8:	f7f0 fd34 	bl	8000b24 <__aeabi_dcmple>
 80100bc:	b1a0      	cbz	r0, 80100e8 <_strtod_l+0xb60>
 80100be:	4649      	mov	r1, r9
 80100c0:	4640      	mov	r0, r8
 80100c2:	f7f0 fd8b 	bl	8000bdc <__aeabi_d2uiz>
 80100c6:	2801      	cmp	r0, #1
 80100c8:	bf38      	it	cc
 80100ca:	2001      	movcc	r0, #1
 80100cc:	f7f0 fa34 	bl	8000538 <__aeabi_ui2d>
 80100d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100d2:	4680      	mov	r8, r0
 80100d4:	4689      	mov	r9, r1
 80100d6:	bb23      	cbnz	r3, 8010122 <_strtod_l+0xb9a>
 80100d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100dc:	9010      	str	r0, [sp, #64]	; 0x40
 80100de:	9311      	str	r3, [sp, #68]	; 0x44
 80100e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80100e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80100e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80100ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80100f0:	1a9b      	subs	r3, r3, r2
 80100f2:	9309      	str	r3, [sp, #36]	; 0x24
 80100f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80100f8:	eeb0 0a48 	vmov.f32	s0, s16
 80100fc:	eef0 0a68 	vmov.f32	s1, s17
 8010100:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010104:	f002 fd16 	bl	8012b34 <__ulp>
 8010108:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801010c:	ec53 2b10 	vmov	r2, r3, d0
 8010110:	f7f0 fa8c 	bl	800062c <__aeabi_dmul>
 8010114:	ec53 2b18 	vmov	r2, r3, d8
 8010118:	f7f0 f8d2 	bl	80002c0 <__adddf3>
 801011c:	4682      	mov	sl, r0
 801011e:	468b      	mov	fp, r1
 8010120:	e78d      	b.n	801003e <_strtod_l+0xab6>
 8010122:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010126:	e7db      	b.n	80100e0 <_strtod_l+0xb58>
 8010128:	a311      	add	r3, pc, #68	; (adr r3, 8010170 <_strtod_l+0xbe8>)
 801012a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012e:	f7f0 fcef 	bl	8000b10 <__aeabi_dcmplt>
 8010132:	e7b2      	b.n	801009a <_strtod_l+0xb12>
 8010134:	2300      	movs	r3, #0
 8010136:	930a      	str	r3, [sp, #40]	; 0x28
 8010138:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801013a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801013c:	6013      	str	r3, [r2, #0]
 801013e:	f7ff ba6b 	b.w	800f618 <_strtod_l+0x90>
 8010142:	2a65      	cmp	r2, #101	; 0x65
 8010144:	f43f ab5f 	beq.w	800f806 <_strtod_l+0x27e>
 8010148:	2a45      	cmp	r2, #69	; 0x45
 801014a:	f43f ab5c 	beq.w	800f806 <_strtod_l+0x27e>
 801014e:	2301      	movs	r3, #1
 8010150:	f7ff bb94 	b.w	800f87c <_strtod_l+0x2f4>
 8010154:	f3af 8000 	nop.w
 8010158:	94a03595 	.word	0x94a03595
 801015c:	3fdfffff 	.word	0x3fdfffff
 8010160:	35afe535 	.word	0x35afe535
 8010164:	3fe00000 	.word	0x3fe00000
 8010168:	ffc00000 	.word	0xffc00000
 801016c:	41dfffff 	.word	0x41dfffff
 8010170:	94a03595 	.word	0x94a03595
 8010174:	3fcfffff 	.word	0x3fcfffff
 8010178:	3ff00000 	.word	0x3ff00000
 801017c:	7ff00000 	.word	0x7ff00000
 8010180:	7fe00000 	.word	0x7fe00000
 8010184:	7c9fffff 	.word	0x7c9fffff
 8010188:	3fe00000 	.word	0x3fe00000
 801018c:	bff00000 	.word	0xbff00000
 8010190:	7fefffff 	.word	0x7fefffff

08010194 <strtod>:
 8010194:	460a      	mov	r2, r1
 8010196:	4601      	mov	r1, r0
 8010198:	4802      	ldr	r0, [pc, #8]	; (80101a4 <strtod+0x10>)
 801019a:	4b03      	ldr	r3, [pc, #12]	; (80101a8 <strtod+0x14>)
 801019c:	6800      	ldr	r0, [r0, #0]
 801019e:	f7ff b9f3 	b.w	800f588 <_strtod_l>
 80101a2:	bf00      	nop
 80101a4:	200002c0 	.word	0x200002c0
 80101a8:	2000038c 	.word	0x2000038c

080101ac <strtok>:
 80101ac:	4b16      	ldr	r3, [pc, #88]	; (8010208 <strtok+0x5c>)
 80101ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101b0:	681e      	ldr	r6, [r3, #0]
 80101b2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80101b4:	4605      	mov	r5, r0
 80101b6:	b9fc      	cbnz	r4, 80101f8 <strtok+0x4c>
 80101b8:	2050      	movs	r0, #80	; 0x50
 80101ba:	9101      	str	r1, [sp, #4]
 80101bc:	f7fd fa64 	bl	800d688 <malloc>
 80101c0:	9901      	ldr	r1, [sp, #4]
 80101c2:	65b0      	str	r0, [r6, #88]	; 0x58
 80101c4:	4602      	mov	r2, r0
 80101c6:	b920      	cbnz	r0, 80101d2 <strtok+0x26>
 80101c8:	4b10      	ldr	r3, [pc, #64]	; (801020c <strtok+0x60>)
 80101ca:	4811      	ldr	r0, [pc, #68]	; (8010210 <strtok+0x64>)
 80101cc:	2157      	movs	r1, #87	; 0x57
 80101ce:	f7fd f9ff 	bl	800d5d0 <__assert_func>
 80101d2:	e9c0 4400 	strd	r4, r4, [r0]
 80101d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80101da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80101de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80101e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80101e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80101ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80101ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80101f2:	6184      	str	r4, [r0, #24]
 80101f4:	7704      	strb	r4, [r0, #28]
 80101f6:	6244      	str	r4, [r0, #36]	; 0x24
 80101f8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80101fa:	2301      	movs	r3, #1
 80101fc:	4628      	mov	r0, r5
 80101fe:	b002      	add	sp, #8
 8010200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010204:	f000 b806 	b.w	8010214 <__strtok_r>
 8010208:	200002c0 	.word	0x200002c0
 801020c:	0803daf4 	.word	0x0803daf4
 8010210:	0803dd50 	.word	0x0803dd50

08010214 <__strtok_r>:
 8010214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010216:	b908      	cbnz	r0, 801021c <__strtok_r+0x8>
 8010218:	6810      	ldr	r0, [r2, #0]
 801021a:	b188      	cbz	r0, 8010240 <__strtok_r+0x2c>
 801021c:	4604      	mov	r4, r0
 801021e:	4620      	mov	r0, r4
 8010220:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010224:	460f      	mov	r7, r1
 8010226:	f817 6b01 	ldrb.w	r6, [r7], #1
 801022a:	b91e      	cbnz	r6, 8010234 <__strtok_r+0x20>
 801022c:	b965      	cbnz	r5, 8010248 <__strtok_r+0x34>
 801022e:	6015      	str	r5, [r2, #0]
 8010230:	4628      	mov	r0, r5
 8010232:	e005      	b.n	8010240 <__strtok_r+0x2c>
 8010234:	42b5      	cmp	r5, r6
 8010236:	d1f6      	bne.n	8010226 <__strtok_r+0x12>
 8010238:	2b00      	cmp	r3, #0
 801023a:	d1f0      	bne.n	801021e <__strtok_r+0xa>
 801023c:	6014      	str	r4, [r2, #0]
 801023e:	7003      	strb	r3, [r0, #0]
 8010240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010242:	461c      	mov	r4, r3
 8010244:	e00c      	b.n	8010260 <__strtok_r+0x4c>
 8010246:	b915      	cbnz	r5, 801024e <__strtok_r+0x3a>
 8010248:	f814 3b01 	ldrb.w	r3, [r4], #1
 801024c:	460e      	mov	r6, r1
 801024e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010252:	42ab      	cmp	r3, r5
 8010254:	d1f7      	bne.n	8010246 <__strtok_r+0x32>
 8010256:	2b00      	cmp	r3, #0
 8010258:	d0f3      	beq.n	8010242 <__strtok_r+0x2e>
 801025a:	2300      	movs	r3, #0
 801025c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010260:	6014      	str	r4, [r2, #0]
 8010262:	e7ed      	b.n	8010240 <__strtok_r+0x2c>

08010264 <_strtol_l.constprop.0>:
 8010264:	2b01      	cmp	r3, #1
 8010266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801026a:	d001      	beq.n	8010270 <_strtol_l.constprop.0+0xc>
 801026c:	2b24      	cmp	r3, #36	; 0x24
 801026e:	d906      	bls.n	801027e <_strtol_l.constprop.0+0x1a>
 8010270:	f001 fabc 	bl	80117ec <__errno>
 8010274:	2316      	movs	r3, #22
 8010276:	6003      	str	r3, [r0, #0]
 8010278:	2000      	movs	r0, #0
 801027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801027e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010364 <_strtol_l.constprop.0+0x100>
 8010282:	460d      	mov	r5, r1
 8010284:	462e      	mov	r6, r5
 8010286:	f815 4b01 	ldrb.w	r4, [r5], #1
 801028a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801028e:	f017 0708 	ands.w	r7, r7, #8
 8010292:	d1f7      	bne.n	8010284 <_strtol_l.constprop.0+0x20>
 8010294:	2c2d      	cmp	r4, #45	; 0x2d
 8010296:	d132      	bne.n	80102fe <_strtol_l.constprop.0+0x9a>
 8010298:	782c      	ldrb	r4, [r5, #0]
 801029a:	2701      	movs	r7, #1
 801029c:	1cb5      	adds	r5, r6, #2
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d05b      	beq.n	801035a <_strtol_l.constprop.0+0xf6>
 80102a2:	2b10      	cmp	r3, #16
 80102a4:	d109      	bne.n	80102ba <_strtol_l.constprop.0+0x56>
 80102a6:	2c30      	cmp	r4, #48	; 0x30
 80102a8:	d107      	bne.n	80102ba <_strtol_l.constprop.0+0x56>
 80102aa:	782c      	ldrb	r4, [r5, #0]
 80102ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80102b0:	2c58      	cmp	r4, #88	; 0x58
 80102b2:	d14d      	bne.n	8010350 <_strtol_l.constprop.0+0xec>
 80102b4:	786c      	ldrb	r4, [r5, #1]
 80102b6:	2310      	movs	r3, #16
 80102b8:	3502      	adds	r5, #2
 80102ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80102be:	f108 38ff 	add.w	r8, r8, #4294967295
 80102c2:	f04f 0c00 	mov.w	ip, #0
 80102c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80102ca:	4666      	mov	r6, ip
 80102cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80102d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80102d4:	f1be 0f09 	cmp.w	lr, #9
 80102d8:	d816      	bhi.n	8010308 <_strtol_l.constprop.0+0xa4>
 80102da:	4674      	mov	r4, lr
 80102dc:	42a3      	cmp	r3, r4
 80102de:	dd24      	ble.n	801032a <_strtol_l.constprop.0+0xc6>
 80102e0:	f1bc 0f00 	cmp.w	ip, #0
 80102e4:	db1e      	blt.n	8010324 <_strtol_l.constprop.0+0xc0>
 80102e6:	45b1      	cmp	r9, r6
 80102e8:	d31c      	bcc.n	8010324 <_strtol_l.constprop.0+0xc0>
 80102ea:	d101      	bne.n	80102f0 <_strtol_l.constprop.0+0x8c>
 80102ec:	45a2      	cmp	sl, r4
 80102ee:	db19      	blt.n	8010324 <_strtol_l.constprop.0+0xc0>
 80102f0:	fb06 4603 	mla	r6, r6, r3, r4
 80102f4:	f04f 0c01 	mov.w	ip, #1
 80102f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80102fc:	e7e8      	b.n	80102d0 <_strtol_l.constprop.0+0x6c>
 80102fe:	2c2b      	cmp	r4, #43	; 0x2b
 8010300:	bf04      	itt	eq
 8010302:	782c      	ldrbeq	r4, [r5, #0]
 8010304:	1cb5      	addeq	r5, r6, #2
 8010306:	e7ca      	b.n	801029e <_strtol_l.constprop.0+0x3a>
 8010308:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801030c:	f1be 0f19 	cmp.w	lr, #25
 8010310:	d801      	bhi.n	8010316 <_strtol_l.constprop.0+0xb2>
 8010312:	3c37      	subs	r4, #55	; 0x37
 8010314:	e7e2      	b.n	80102dc <_strtol_l.constprop.0+0x78>
 8010316:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801031a:	f1be 0f19 	cmp.w	lr, #25
 801031e:	d804      	bhi.n	801032a <_strtol_l.constprop.0+0xc6>
 8010320:	3c57      	subs	r4, #87	; 0x57
 8010322:	e7db      	b.n	80102dc <_strtol_l.constprop.0+0x78>
 8010324:	f04f 3cff 	mov.w	ip, #4294967295
 8010328:	e7e6      	b.n	80102f8 <_strtol_l.constprop.0+0x94>
 801032a:	f1bc 0f00 	cmp.w	ip, #0
 801032e:	da05      	bge.n	801033c <_strtol_l.constprop.0+0xd8>
 8010330:	2322      	movs	r3, #34	; 0x22
 8010332:	6003      	str	r3, [r0, #0]
 8010334:	4646      	mov	r6, r8
 8010336:	b942      	cbnz	r2, 801034a <_strtol_l.constprop.0+0xe6>
 8010338:	4630      	mov	r0, r6
 801033a:	e79e      	b.n	801027a <_strtol_l.constprop.0+0x16>
 801033c:	b107      	cbz	r7, 8010340 <_strtol_l.constprop.0+0xdc>
 801033e:	4276      	negs	r6, r6
 8010340:	2a00      	cmp	r2, #0
 8010342:	d0f9      	beq.n	8010338 <_strtol_l.constprop.0+0xd4>
 8010344:	f1bc 0f00 	cmp.w	ip, #0
 8010348:	d000      	beq.n	801034c <_strtol_l.constprop.0+0xe8>
 801034a:	1e69      	subs	r1, r5, #1
 801034c:	6011      	str	r1, [r2, #0]
 801034e:	e7f3      	b.n	8010338 <_strtol_l.constprop.0+0xd4>
 8010350:	2430      	movs	r4, #48	; 0x30
 8010352:	2b00      	cmp	r3, #0
 8010354:	d1b1      	bne.n	80102ba <_strtol_l.constprop.0+0x56>
 8010356:	2308      	movs	r3, #8
 8010358:	e7af      	b.n	80102ba <_strtol_l.constprop.0+0x56>
 801035a:	2c30      	cmp	r4, #48	; 0x30
 801035c:	d0a5      	beq.n	80102aa <_strtol_l.constprop.0+0x46>
 801035e:	230a      	movs	r3, #10
 8010360:	e7ab      	b.n	80102ba <_strtol_l.constprop.0+0x56>
 8010362:	bf00      	nop
 8010364:	0803e011 	.word	0x0803e011

08010368 <_strtol_r>:
 8010368:	f7ff bf7c 	b.w	8010264 <_strtol_l.constprop.0>

0801036c <strtol>:
 801036c:	4613      	mov	r3, r2
 801036e:	460a      	mov	r2, r1
 8010370:	4601      	mov	r1, r0
 8010372:	4802      	ldr	r0, [pc, #8]	; (801037c <strtol+0x10>)
 8010374:	6800      	ldr	r0, [r0, #0]
 8010376:	f7ff bf75 	b.w	8010264 <_strtol_l.constprop.0>
 801037a:	bf00      	nop
 801037c:	200002c0 	.word	0x200002c0

08010380 <_strtoul_l.constprop.0>:
 8010380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010384:	4f36      	ldr	r7, [pc, #216]	; (8010460 <_strtoul_l.constprop.0+0xe0>)
 8010386:	4686      	mov	lr, r0
 8010388:	460d      	mov	r5, r1
 801038a:	4628      	mov	r0, r5
 801038c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010390:	5de6      	ldrb	r6, [r4, r7]
 8010392:	f016 0608 	ands.w	r6, r6, #8
 8010396:	d1f8      	bne.n	801038a <_strtoul_l.constprop.0+0xa>
 8010398:	2c2d      	cmp	r4, #45	; 0x2d
 801039a:	d12f      	bne.n	80103fc <_strtoul_l.constprop.0+0x7c>
 801039c:	782c      	ldrb	r4, [r5, #0]
 801039e:	2601      	movs	r6, #1
 80103a0:	1c85      	adds	r5, r0, #2
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d057      	beq.n	8010456 <_strtoul_l.constprop.0+0xd6>
 80103a6:	2b10      	cmp	r3, #16
 80103a8:	d109      	bne.n	80103be <_strtoul_l.constprop.0+0x3e>
 80103aa:	2c30      	cmp	r4, #48	; 0x30
 80103ac:	d107      	bne.n	80103be <_strtoul_l.constprop.0+0x3e>
 80103ae:	7828      	ldrb	r0, [r5, #0]
 80103b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80103b4:	2858      	cmp	r0, #88	; 0x58
 80103b6:	d149      	bne.n	801044c <_strtoul_l.constprop.0+0xcc>
 80103b8:	786c      	ldrb	r4, [r5, #1]
 80103ba:	2310      	movs	r3, #16
 80103bc:	3502      	adds	r5, #2
 80103be:	f04f 38ff 	mov.w	r8, #4294967295
 80103c2:	2700      	movs	r7, #0
 80103c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80103c8:	fb03 f908 	mul.w	r9, r3, r8
 80103cc:	ea6f 0909 	mvn.w	r9, r9
 80103d0:	4638      	mov	r0, r7
 80103d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80103d6:	f1bc 0f09 	cmp.w	ip, #9
 80103da:	d814      	bhi.n	8010406 <_strtoul_l.constprop.0+0x86>
 80103dc:	4664      	mov	r4, ip
 80103de:	42a3      	cmp	r3, r4
 80103e0:	dd22      	ble.n	8010428 <_strtoul_l.constprop.0+0xa8>
 80103e2:	2f00      	cmp	r7, #0
 80103e4:	db1d      	blt.n	8010422 <_strtoul_l.constprop.0+0xa2>
 80103e6:	4580      	cmp	r8, r0
 80103e8:	d31b      	bcc.n	8010422 <_strtoul_l.constprop.0+0xa2>
 80103ea:	d101      	bne.n	80103f0 <_strtoul_l.constprop.0+0x70>
 80103ec:	45a1      	cmp	r9, r4
 80103ee:	db18      	blt.n	8010422 <_strtoul_l.constprop.0+0xa2>
 80103f0:	fb00 4003 	mla	r0, r0, r3, r4
 80103f4:	2701      	movs	r7, #1
 80103f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80103fa:	e7ea      	b.n	80103d2 <_strtoul_l.constprop.0+0x52>
 80103fc:	2c2b      	cmp	r4, #43	; 0x2b
 80103fe:	bf04      	itt	eq
 8010400:	782c      	ldrbeq	r4, [r5, #0]
 8010402:	1c85      	addeq	r5, r0, #2
 8010404:	e7cd      	b.n	80103a2 <_strtoul_l.constprop.0+0x22>
 8010406:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801040a:	f1bc 0f19 	cmp.w	ip, #25
 801040e:	d801      	bhi.n	8010414 <_strtoul_l.constprop.0+0x94>
 8010410:	3c37      	subs	r4, #55	; 0x37
 8010412:	e7e4      	b.n	80103de <_strtoul_l.constprop.0+0x5e>
 8010414:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010418:	f1bc 0f19 	cmp.w	ip, #25
 801041c:	d804      	bhi.n	8010428 <_strtoul_l.constprop.0+0xa8>
 801041e:	3c57      	subs	r4, #87	; 0x57
 8010420:	e7dd      	b.n	80103de <_strtoul_l.constprop.0+0x5e>
 8010422:	f04f 37ff 	mov.w	r7, #4294967295
 8010426:	e7e6      	b.n	80103f6 <_strtoul_l.constprop.0+0x76>
 8010428:	2f00      	cmp	r7, #0
 801042a:	da07      	bge.n	801043c <_strtoul_l.constprop.0+0xbc>
 801042c:	2322      	movs	r3, #34	; 0x22
 801042e:	f8ce 3000 	str.w	r3, [lr]
 8010432:	f04f 30ff 	mov.w	r0, #4294967295
 8010436:	b932      	cbnz	r2, 8010446 <_strtoul_l.constprop.0+0xc6>
 8010438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801043c:	b106      	cbz	r6, 8010440 <_strtoul_l.constprop.0+0xc0>
 801043e:	4240      	negs	r0, r0
 8010440:	2a00      	cmp	r2, #0
 8010442:	d0f9      	beq.n	8010438 <_strtoul_l.constprop.0+0xb8>
 8010444:	b107      	cbz	r7, 8010448 <_strtoul_l.constprop.0+0xc8>
 8010446:	1e69      	subs	r1, r5, #1
 8010448:	6011      	str	r1, [r2, #0]
 801044a:	e7f5      	b.n	8010438 <_strtoul_l.constprop.0+0xb8>
 801044c:	2430      	movs	r4, #48	; 0x30
 801044e:	2b00      	cmp	r3, #0
 8010450:	d1b5      	bne.n	80103be <_strtoul_l.constprop.0+0x3e>
 8010452:	2308      	movs	r3, #8
 8010454:	e7b3      	b.n	80103be <_strtoul_l.constprop.0+0x3e>
 8010456:	2c30      	cmp	r4, #48	; 0x30
 8010458:	d0a9      	beq.n	80103ae <_strtoul_l.constprop.0+0x2e>
 801045a:	230a      	movs	r3, #10
 801045c:	e7af      	b.n	80103be <_strtoul_l.constprop.0+0x3e>
 801045e:	bf00      	nop
 8010460:	0803e011 	.word	0x0803e011

08010464 <_strtoul_r>:
 8010464:	f7ff bf8c 	b.w	8010380 <_strtoul_l.constprop.0>

08010468 <strtoul>:
 8010468:	4613      	mov	r3, r2
 801046a:	460a      	mov	r2, r1
 801046c:	4601      	mov	r1, r0
 801046e:	4802      	ldr	r0, [pc, #8]	; (8010478 <strtoul+0x10>)
 8010470:	6800      	ldr	r0, [r0, #0]
 8010472:	f7ff bf85 	b.w	8010380 <_strtoul_l.constprop.0>
 8010476:	bf00      	nop
 8010478:	200002c0 	.word	0x200002c0

0801047c <__tzcalc_limits>:
 801047c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010480:	4605      	mov	r5, r0
 8010482:	f001 ff23 	bl	80122cc <__gettzinfo>
 8010486:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801048a:	429d      	cmp	r5, r3
 801048c:	f340 8099 	ble.w	80105c2 <__tzcalc_limits+0x146>
 8010490:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8010494:	18ac      	adds	r4, r5, r2
 8010496:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 801049a:	f240 126d 	movw	r2, #365	; 0x16d
 801049e:	10a4      	asrs	r4, r4, #2
 80104a0:	fb02 4403 	mla	r4, r2, r3, r4
 80104a4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80104a8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80104ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80104b0:	441c      	add	r4, r3
 80104b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80104b6:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80104ba:	fb95 fcf3 	sdiv	ip, r5, r3
 80104be:	fb03 5c1c 	mls	ip, r3, ip, r5
 80104c2:	186a      	adds	r2, r5, r1
 80104c4:	fabc f68c 	clz	r6, ip
 80104c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80104cc:	f005 0303 	and.w	r3, r5, #3
 80104d0:	4414      	add	r4, r2
 80104d2:	2264      	movs	r2, #100	; 0x64
 80104d4:	6045      	str	r5, [r0, #4]
 80104d6:	fb95 f7f2 	sdiv	r7, r5, r2
 80104da:	0976      	lsrs	r6, r6, #5
 80104dc:	fb02 5717 	mls	r7, r2, r7, r5
 80104e0:	4601      	mov	r1, r0
 80104e2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80104e6:	9300      	str	r3, [sp, #0]
 80104e8:	f04f 0a07 	mov.w	sl, #7
 80104ec:	7a0d      	ldrb	r5, [r1, #8]
 80104ee:	694b      	ldr	r3, [r1, #20]
 80104f0:	2d4a      	cmp	r5, #74	; 0x4a
 80104f2:	d12d      	bne.n	8010550 <__tzcalc_limits+0xd4>
 80104f4:	9a00      	ldr	r2, [sp, #0]
 80104f6:	eb04 0e03 	add.w	lr, r4, r3
 80104fa:	b902      	cbnz	r2, 80104fe <__tzcalc_limits+0x82>
 80104fc:	b917      	cbnz	r7, 8010504 <__tzcalc_limits+0x88>
 80104fe:	f1bc 0f00 	cmp.w	ip, #0
 8010502:	d123      	bne.n	801054c <__tzcalc_limits+0xd0>
 8010504:	2b3b      	cmp	r3, #59	; 0x3b
 8010506:	bfd4      	ite	le
 8010508:	2300      	movle	r3, #0
 801050a:	2301      	movgt	r3, #1
 801050c:	4473      	add	r3, lr
 801050e:	3b01      	subs	r3, #1
 8010510:	698d      	ldr	r5, [r1, #24]
 8010512:	4a2d      	ldr	r2, [pc, #180]	; (80105c8 <__tzcalc_limits+0x14c>)
 8010514:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8010518:	fbc3 5e02 	smlal	r5, lr, r3, r2
 801051c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801051e:	18ed      	adds	r5, r5, r3
 8010520:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8010524:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8010528:	3128      	adds	r1, #40	; 0x28
 801052a:	458b      	cmp	fp, r1
 801052c:	d1de      	bne.n	80104ec <__tzcalc_limits+0x70>
 801052e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8010532:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8010536:	428c      	cmp	r4, r1
 8010538:	eb72 0303 	sbcs.w	r3, r2, r3
 801053c:	bfb4      	ite	lt
 801053e:	2301      	movlt	r3, #1
 8010540:	2300      	movge	r3, #0
 8010542:	6003      	str	r3, [r0, #0]
 8010544:	2001      	movs	r0, #1
 8010546:	b003      	add	sp, #12
 8010548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801054c:	2300      	movs	r3, #0
 801054e:	e7dd      	b.n	801050c <__tzcalc_limits+0x90>
 8010550:	2d44      	cmp	r5, #68	; 0x44
 8010552:	d101      	bne.n	8010558 <__tzcalc_limits+0xdc>
 8010554:	4423      	add	r3, r4
 8010556:	e7db      	b.n	8010510 <__tzcalc_limits+0x94>
 8010558:	9a00      	ldr	r2, [sp, #0]
 801055a:	bb62      	cbnz	r2, 80105b6 <__tzcalc_limits+0x13a>
 801055c:	2f00      	cmp	r7, #0
 801055e:	bf0c      	ite	eq
 8010560:	4635      	moveq	r5, r6
 8010562:	2501      	movne	r5, #1
 8010564:	68ca      	ldr	r2, [r1, #12]
 8010566:	9201      	str	r2, [sp, #4]
 8010568:	4a18      	ldr	r2, [pc, #96]	; (80105cc <__tzcalc_limits+0x150>)
 801056a:	f04f 0930 	mov.w	r9, #48	; 0x30
 801056e:	fb09 2505 	mla	r5, r9, r5, r2
 8010572:	46a6      	mov	lr, r4
 8010574:	f04f 0800 	mov.w	r8, #0
 8010578:	3d04      	subs	r5, #4
 801057a:	9a01      	ldr	r2, [sp, #4]
 801057c:	f108 0801 	add.w	r8, r8, #1
 8010580:	4542      	cmp	r2, r8
 8010582:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8010586:	dc18      	bgt.n	80105ba <__tzcalc_limits+0x13e>
 8010588:	f10e 0504 	add.w	r5, lr, #4
 801058c:	fb95 f8fa 	sdiv	r8, r5, sl
 8010590:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8010594:	eba5 0808 	sub.w	r8, r5, r8
 8010598:	ebb3 0808 	subs.w	r8, r3, r8
 801059c:	690b      	ldr	r3, [r1, #16]
 801059e:	f103 33ff 	add.w	r3, r3, #4294967295
 80105a2:	bf48      	it	mi
 80105a4:	f108 0807 	addmi.w	r8, r8, #7
 80105a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80105ac:	4443      	add	r3, r8
 80105ae:	454b      	cmp	r3, r9
 80105b0:	da05      	bge.n	80105be <__tzcalc_limits+0x142>
 80105b2:	4473      	add	r3, lr
 80105b4:	e7ac      	b.n	8010510 <__tzcalc_limits+0x94>
 80105b6:	4635      	mov	r5, r6
 80105b8:	e7d4      	b.n	8010564 <__tzcalc_limits+0xe8>
 80105ba:	44ce      	add	lr, r9
 80105bc:	e7dd      	b.n	801057a <__tzcalc_limits+0xfe>
 80105be:	3b07      	subs	r3, #7
 80105c0:	e7f5      	b.n	80105ae <__tzcalc_limits+0x132>
 80105c2:	2000      	movs	r0, #0
 80105c4:	e7bf      	b.n	8010546 <__tzcalc_limits+0xca>
 80105c6:	bf00      	nop
 80105c8:	00015180 	.word	0x00015180
 80105cc:	0803e268 	.word	0x0803e268

080105d0 <__tz_lock>:
 80105d0:	4801      	ldr	r0, [pc, #4]	; (80105d8 <__tz_lock+0x8>)
 80105d2:	f001 be88 	b.w	80122e6 <__retarget_lock_acquire>
 80105d6:	bf00      	nop
 80105d8:	20003c24 	.word	0x20003c24

080105dc <__tz_unlock>:
 80105dc:	4801      	ldr	r0, [pc, #4]	; (80105e4 <__tz_unlock+0x8>)
 80105de:	f001 be84 	b.w	80122ea <__retarget_lock_release>
 80105e2:	bf00      	nop
 80105e4:	20003c24 	.word	0x20003c24

080105e8 <_tzset_unlocked>:
 80105e8:	4b01      	ldr	r3, [pc, #4]	; (80105f0 <_tzset_unlocked+0x8>)
 80105ea:	6818      	ldr	r0, [r3, #0]
 80105ec:	f000 b802 	b.w	80105f4 <_tzset_unlocked_r>
 80105f0:	200002c0 	.word	0x200002c0

080105f4 <_tzset_unlocked_r>:
 80105f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f8:	b08d      	sub	sp, #52	; 0x34
 80105fa:	4607      	mov	r7, r0
 80105fc:	f001 fe66 	bl	80122cc <__gettzinfo>
 8010600:	49b0      	ldr	r1, [pc, #704]	; (80108c4 <_tzset_unlocked_r+0x2d0>)
 8010602:	4eb1      	ldr	r6, [pc, #708]	; (80108c8 <_tzset_unlocked_r+0x2d4>)
 8010604:	4605      	mov	r5, r0
 8010606:	4638      	mov	r0, r7
 8010608:	f001 fe58 	bl	80122bc <_getenv_r>
 801060c:	4604      	mov	r4, r0
 801060e:	b970      	cbnz	r0, 801062e <_tzset_unlocked_r+0x3a>
 8010610:	4bae      	ldr	r3, [pc, #696]	; (80108cc <_tzset_unlocked_r+0x2d8>)
 8010612:	4aaf      	ldr	r2, [pc, #700]	; (80108d0 <_tzset_unlocked_r+0x2dc>)
 8010614:	6018      	str	r0, [r3, #0]
 8010616:	4baf      	ldr	r3, [pc, #700]	; (80108d4 <_tzset_unlocked_r+0x2e0>)
 8010618:	6018      	str	r0, [r3, #0]
 801061a:	4baf      	ldr	r3, [pc, #700]	; (80108d8 <_tzset_unlocked_r+0x2e4>)
 801061c:	6830      	ldr	r0, [r6, #0]
 801061e:	e9c3 2200 	strd	r2, r2, [r3]
 8010622:	f7fd f839 	bl	800d698 <free>
 8010626:	6034      	str	r4, [r6, #0]
 8010628:	b00d      	add	sp, #52	; 0x34
 801062a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801062e:	6831      	ldr	r1, [r6, #0]
 8010630:	2900      	cmp	r1, #0
 8010632:	d162      	bne.n	80106fa <_tzset_unlocked_r+0x106>
 8010634:	6830      	ldr	r0, [r6, #0]
 8010636:	f7fd f82f 	bl	800d698 <free>
 801063a:	4620      	mov	r0, r4
 801063c:	f7ef fdd8 	bl	80001f0 <strlen>
 8010640:	1c41      	adds	r1, r0, #1
 8010642:	4638      	mov	r0, r7
 8010644:	f7fd fb24 	bl	800dc90 <_malloc_r>
 8010648:	6030      	str	r0, [r6, #0]
 801064a:	2800      	cmp	r0, #0
 801064c:	d15a      	bne.n	8010704 <_tzset_unlocked_r+0x110>
 801064e:	7823      	ldrb	r3, [r4, #0]
 8010650:	4aa2      	ldr	r2, [pc, #648]	; (80108dc <_tzset_unlocked_r+0x2e8>)
 8010652:	49a3      	ldr	r1, [pc, #652]	; (80108e0 <_tzset_unlocked_r+0x2ec>)
 8010654:	2b3a      	cmp	r3, #58	; 0x3a
 8010656:	bf08      	it	eq
 8010658:	3401      	addeq	r4, #1
 801065a:	ae0a      	add	r6, sp, #40	; 0x28
 801065c:	4633      	mov	r3, r6
 801065e:	4620      	mov	r0, r4
 8010660:	f7fe f97e 	bl	800e960 <siscanf>
 8010664:	2800      	cmp	r0, #0
 8010666:	dddf      	ble.n	8010628 <_tzset_unlocked_r+0x34>
 8010668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801066a:	18e7      	adds	r7, r4, r3
 801066c:	5ce3      	ldrb	r3, [r4, r3]
 801066e:	2b2d      	cmp	r3, #45	; 0x2d
 8010670:	d14c      	bne.n	801070c <_tzset_unlocked_r+0x118>
 8010672:	3701      	adds	r7, #1
 8010674:	f04f 38ff 	mov.w	r8, #4294967295
 8010678:	f10d 0a20 	add.w	sl, sp, #32
 801067c:	f10d 0b1e 	add.w	fp, sp, #30
 8010680:	2400      	movs	r4, #0
 8010682:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8010686:	4997      	ldr	r1, [pc, #604]	; (80108e4 <_tzset_unlocked_r+0x2f0>)
 8010688:	9603      	str	r6, [sp, #12]
 801068a:	f8cd b000 	str.w	fp, [sp]
 801068e:	4633      	mov	r3, r6
 8010690:	aa07      	add	r2, sp, #28
 8010692:	4638      	mov	r0, r7
 8010694:	f8ad 401e 	strh.w	r4, [sp, #30]
 8010698:	f8ad 4020 	strh.w	r4, [sp, #32]
 801069c:	f7fe f960 	bl	800e960 <siscanf>
 80106a0:	42a0      	cmp	r0, r4
 80106a2:	ddc1      	ble.n	8010628 <_tzset_unlocked_r+0x34>
 80106a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80106a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80106ac:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80108f0 <_tzset_unlocked_r+0x2fc>
 80106b0:	213c      	movs	r1, #60	; 0x3c
 80106b2:	fb01 3302 	mla	r3, r1, r2, r3
 80106b6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80106ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80106be:	fb01 3302 	mla	r3, r1, r2, r3
 80106c2:	fb08 f303 	mul.w	r3, r8, r3
 80106c6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80108d8 <_tzset_unlocked_r+0x2e4>
 80106ca:	62ab      	str	r3, [r5, #40]	; 0x28
 80106cc:	4b83      	ldr	r3, [pc, #524]	; (80108dc <_tzset_unlocked_r+0x2e8>)
 80106ce:	f8c8 3000 	str.w	r3, [r8]
 80106d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106d4:	4982      	ldr	r1, [pc, #520]	; (80108e0 <_tzset_unlocked_r+0x2ec>)
 80106d6:	441f      	add	r7, r3
 80106d8:	464a      	mov	r2, r9
 80106da:	4633      	mov	r3, r6
 80106dc:	4638      	mov	r0, r7
 80106de:	f7fe f93f 	bl	800e960 <siscanf>
 80106e2:	42a0      	cmp	r0, r4
 80106e4:	dc18      	bgt.n	8010718 <_tzset_unlocked_r+0x124>
 80106e6:	f8d8 3000 	ldr.w	r3, [r8]
 80106ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80106ee:	4b77      	ldr	r3, [pc, #476]	; (80108cc <_tzset_unlocked_r+0x2d8>)
 80106f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80106f2:	601a      	str	r2, [r3, #0]
 80106f4:	4b77      	ldr	r3, [pc, #476]	; (80108d4 <_tzset_unlocked_r+0x2e0>)
 80106f6:	601c      	str	r4, [r3, #0]
 80106f8:	e796      	b.n	8010628 <_tzset_unlocked_r+0x34>
 80106fa:	f7ef fdd1 	bl	80002a0 <strcmp>
 80106fe:	2800      	cmp	r0, #0
 8010700:	d198      	bne.n	8010634 <_tzset_unlocked_r+0x40>
 8010702:	e791      	b.n	8010628 <_tzset_unlocked_r+0x34>
 8010704:	4621      	mov	r1, r4
 8010706:	f7fe f99c 	bl	800ea42 <strcpy>
 801070a:	e7a0      	b.n	801064e <_tzset_unlocked_r+0x5a>
 801070c:	2b2b      	cmp	r3, #43	; 0x2b
 801070e:	bf08      	it	eq
 8010710:	3701      	addeq	r7, #1
 8010712:	f04f 0801 	mov.w	r8, #1
 8010716:	e7af      	b.n	8010678 <_tzset_unlocked_r+0x84>
 8010718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801071a:	f8c8 9004 	str.w	r9, [r8, #4]
 801071e:	18fc      	adds	r4, r7, r3
 8010720:	5cfb      	ldrb	r3, [r7, r3]
 8010722:	2b2d      	cmp	r3, #45	; 0x2d
 8010724:	f040 808b 	bne.w	801083e <_tzset_unlocked_r+0x24a>
 8010728:	3401      	adds	r4, #1
 801072a:	f04f 37ff 	mov.w	r7, #4294967295
 801072e:	2300      	movs	r3, #0
 8010730:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010734:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010738:	f8ad 3020 	strh.w	r3, [sp, #32]
 801073c:	930a      	str	r3, [sp, #40]	; 0x28
 801073e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8010742:	e9cd b600 	strd	fp, r6, [sp]
 8010746:	4967      	ldr	r1, [pc, #412]	; (80108e4 <_tzset_unlocked_r+0x2f0>)
 8010748:	4633      	mov	r3, r6
 801074a:	aa07      	add	r2, sp, #28
 801074c:	4620      	mov	r0, r4
 801074e:	f7fe f907 	bl	800e960 <siscanf>
 8010752:	2800      	cmp	r0, #0
 8010754:	dc78      	bgt.n	8010848 <_tzset_unlocked_r+0x254>
 8010756:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010758:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801075c:	652b      	str	r3, [r5, #80]	; 0x50
 801075e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010760:	462f      	mov	r7, r5
 8010762:	441c      	add	r4, r3
 8010764:	f04f 0900 	mov.w	r9, #0
 8010768:	7823      	ldrb	r3, [r4, #0]
 801076a:	2b2c      	cmp	r3, #44	; 0x2c
 801076c:	bf08      	it	eq
 801076e:	3401      	addeq	r4, #1
 8010770:	f894 8000 	ldrb.w	r8, [r4]
 8010774:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8010778:	d178      	bne.n	801086c <_tzset_unlocked_r+0x278>
 801077a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801077e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8010782:	ab09      	add	r3, sp, #36	; 0x24
 8010784:	9300      	str	r3, [sp, #0]
 8010786:	4958      	ldr	r1, [pc, #352]	; (80108e8 <_tzset_unlocked_r+0x2f4>)
 8010788:	9603      	str	r6, [sp, #12]
 801078a:	4633      	mov	r3, r6
 801078c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8010790:	4620      	mov	r0, r4
 8010792:	f7fe f8e5 	bl	800e960 <siscanf>
 8010796:	2803      	cmp	r0, #3
 8010798:	f47f af46 	bne.w	8010628 <_tzset_unlocked_r+0x34>
 801079c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80107a0:	1e4b      	subs	r3, r1, #1
 80107a2:	2b0b      	cmp	r3, #11
 80107a4:	f63f af40 	bhi.w	8010628 <_tzset_unlocked_r+0x34>
 80107a8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80107ac:	1e53      	subs	r3, r2, #1
 80107ae:	2b04      	cmp	r3, #4
 80107b0:	f63f af3a 	bhi.w	8010628 <_tzset_unlocked_r+0x34>
 80107b4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80107b8:	2b06      	cmp	r3, #6
 80107ba:	f63f af35 	bhi.w	8010628 <_tzset_unlocked_r+0x34>
 80107be:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80107c2:	f887 8008 	strb.w	r8, [r7, #8]
 80107c6:	617b      	str	r3, [r7, #20]
 80107c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107ca:	eb04 0803 	add.w	r8, r4, r3
 80107ce:	2302      	movs	r3, #2
 80107d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80107d4:	2300      	movs	r3, #0
 80107d6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80107da:	f8ad 3020 	strh.w	r3, [sp, #32]
 80107de:	930a      	str	r3, [sp, #40]	; 0x28
 80107e0:	f898 3000 	ldrb.w	r3, [r8]
 80107e4:	2b2f      	cmp	r3, #47	; 0x2f
 80107e6:	d109      	bne.n	80107fc <_tzset_unlocked_r+0x208>
 80107e8:	e9cd a602 	strd	sl, r6, [sp, #8]
 80107ec:	e9cd b600 	strd	fp, r6, [sp]
 80107f0:	493e      	ldr	r1, [pc, #248]	; (80108ec <_tzset_unlocked_r+0x2f8>)
 80107f2:	4633      	mov	r3, r6
 80107f4:	aa07      	add	r2, sp, #28
 80107f6:	4640      	mov	r0, r8
 80107f8:	f7fe f8b2 	bl	800e960 <siscanf>
 80107fc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8010800:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010804:	213c      	movs	r1, #60	; 0x3c
 8010806:	fb01 3302 	mla	r3, r1, r2, r3
 801080a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801080e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8010812:	fb01 3302 	mla	r3, r1, r2, r3
 8010816:	61bb      	str	r3, [r7, #24]
 8010818:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801081a:	3728      	adds	r7, #40	; 0x28
 801081c:	4444      	add	r4, r8
 801081e:	f1b9 0f00 	cmp.w	r9, #0
 8010822:	d020      	beq.n	8010866 <_tzset_unlocked_r+0x272>
 8010824:	6868      	ldr	r0, [r5, #4]
 8010826:	f7ff fe29 	bl	801047c <__tzcalc_limits>
 801082a:	4b28      	ldr	r3, [pc, #160]	; (80108cc <_tzset_unlocked_r+0x2d8>)
 801082c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801082e:	601a      	str	r2, [r3, #0]
 8010830:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8010832:	1a9b      	subs	r3, r3, r2
 8010834:	4a27      	ldr	r2, [pc, #156]	; (80108d4 <_tzset_unlocked_r+0x2e0>)
 8010836:	bf18      	it	ne
 8010838:	2301      	movne	r3, #1
 801083a:	6013      	str	r3, [r2, #0]
 801083c:	e6f4      	b.n	8010628 <_tzset_unlocked_r+0x34>
 801083e:	2b2b      	cmp	r3, #43	; 0x2b
 8010840:	bf08      	it	eq
 8010842:	3401      	addeq	r4, #1
 8010844:	2701      	movs	r7, #1
 8010846:	e772      	b.n	801072e <_tzset_unlocked_r+0x13a>
 8010848:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801084c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010850:	213c      	movs	r1, #60	; 0x3c
 8010852:	fb01 3302 	mla	r3, r1, r2, r3
 8010856:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801085a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801085e:	fb01 3302 	mla	r3, r1, r2, r3
 8010862:	437b      	muls	r3, r7
 8010864:	e77a      	b.n	801075c <_tzset_unlocked_r+0x168>
 8010866:	f04f 0901 	mov.w	r9, #1
 801086a:	e77d      	b.n	8010768 <_tzset_unlocked_r+0x174>
 801086c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8010870:	bf06      	itte	eq
 8010872:	3401      	addeq	r4, #1
 8010874:	4643      	moveq	r3, r8
 8010876:	2344      	movne	r3, #68	; 0x44
 8010878:	220a      	movs	r2, #10
 801087a:	a90b      	add	r1, sp, #44	; 0x2c
 801087c:	4620      	mov	r0, r4
 801087e:	9305      	str	r3, [sp, #20]
 8010880:	f7ff fdf2 	bl	8010468 <strtoul>
 8010884:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8010888:	9b05      	ldr	r3, [sp, #20]
 801088a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801088e:	45a0      	cmp	r8, r4
 8010890:	d114      	bne.n	80108bc <_tzset_unlocked_r+0x2c8>
 8010892:	234d      	movs	r3, #77	; 0x4d
 8010894:	f1b9 0f00 	cmp.w	r9, #0
 8010898:	d107      	bne.n	80108aa <_tzset_unlocked_r+0x2b6>
 801089a:	722b      	strb	r3, [r5, #8]
 801089c:	2103      	movs	r1, #3
 801089e:	2302      	movs	r3, #2
 80108a0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80108a4:	f8c5 9014 	str.w	r9, [r5, #20]
 80108a8:	e791      	b.n	80107ce <_tzset_unlocked_r+0x1da>
 80108aa:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80108ae:	220b      	movs	r2, #11
 80108b0:	2301      	movs	r3, #1
 80108b2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80108b6:	2300      	movs	r3, #0
 80108b8:	63eb      	str	r3, [r5, #60]	; 0x3c
 80108ba:	e788      	b.n	80107ce <_tzset_unlocked_r+0x1da>
 80108bc:	b280      	uxth	r0, r0
 80108be:	723b      	strb	r3, [r7, #8]
 80108c0:	6178      	str	r0, [r7, #20]
 80108c2:	e784      	b.n	80107ce <_tzset_unlocked_r+0x1da>
 80108c4:	0803dfd4 	.word	0x0803dfd4
 80108c8:	20003c14 	.word	0x20003c14
 80108cc:	20003c1c 	.word	0x20003c1c
 80108d0:	0803dfd7 	.word	0x0803dfd7
 80108d4:	20003c18 	.word	0x20003c18
 80108d8:	20000324 	.word	0x20000324
 80108dc:	20003c07 	.word	0x20003c07
 80108e0:	0803dfdb 	.word	0x0803dfdb
 80108e4:	0803dffe 	.word	0x0803dffe
 80108e8:	0803dfea 	.word	0x0803dfea
 80108ec:	0803dffd 	.word	0x0803dffd
 80108f0:	20003bfc 	.word	0x20003bfc

080108f4 <__swbuf_r>:
 80108f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108f6:	460e      	mov	r6, r1
 80108f8:	4614      	mov	r4, r2
 80108fa:	4605      	mov	r5, r0
 80108fc:	b118      	cbz	r0, 8010906 <__swbuf_r+0x12>
 80108fe:	6983      	ldr	r3, [r0, #24]
 8010900:	b90b      	cbnz	r3, 8010906 <__swbuf_r+0x12>
 8010902:	f001 f893 	bl	8011a2c <__sinit>
 8010906:	4b21      	ldr	r3, [pc, #132]	; (801098c <__swbuf_r+0x98>)
 8010908:	429c      	cmp	r4, r3
 801090a:	d12b      	bne.n	8010964 <__swbuf_r+0x70>
 801090c:	686c      	ldr	r4, [r5, #4]
 801090e:	69a3      	ldr	r3, [r4, #24]
 8010910:	60a3      	str	r3, [r4, #8]
 8010912:	89a3      	ldrh	r3, [r4, #12]
 8010914:	071a      	lsls	r2, r3, #28
 8010916:	d52f      	bpl.n	8010978 <__swbuf_r+0x84>
 8010918:	6923      	ldr	r3, [r4, #16]
 801091a:	b36b      	cbz	r3, 8010978 <__swbuf_r+0x84>
 801091c:	6923      	ldr	r3, [r4, #16]
 801091e:	6820      	ldr	r0, [r4, #0]
 8010920:	1ac0      	subs	r0, r0, r3
 8010922:	6963      	ldr	r3, [r4, #20]
 8010924:	b2f6      	uxtb	r6, r6
 8010926:	4283      	cmp	r3, r0
 8010928:	4637      	mov	r7, r6
 801092a:	dc04      	bgt.n	8010936 <__swbuf_r+0x42>
 801092c:	4621      	mov	r1, r4
 801092e:	4628      	mov	r0, r5
 8010930:	f000 ffe8 	bl	8011904 <_fflush_r>
 8010934:	bb30      	cbnz	r0, 8010984 <__swbuf_r+0x90>
 8010936:	68a3      	ldr	r3, [r4, #8]
 8010938:	3b01      	subs	r3, #1
 801093a:	60a3      	str	r3, [r4, #8]
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	1c5a      	adds	r2, r3, #1
 8010940:	6022      	str	r2, [r4, #0]
 8010942:	701e      	strb	r6, [r3, #0]
 8010944:	6963      	ldr	r3, [r4, #20]
 8010946:	3001      	adds	r0, #1
 8010948:	4283      	cmp	r3, r0
 801094a:	d004      	beq.n	8010956 <__swbuf_r+0x62>
 801094c:	89a3      	ldrh	r3, [r4, #12]
 801094e:	07db      	lsls	r3, r3, #31
 8010950:	d506      	bpl.n	8010960 <__swbuf_r+0x6c>
 8010952:	2e0a      	cmp	r6, #10
 8010954:	d104      	bne.n	8010960 <__swbuf_r+0x6c>
 8010956:	4621      	mov	r1, r4
 8010958:	4628      	mov	r0, r5
 801095a:	f000 ffd3 	bl	8011904 <_fflush_r>
 801095e:	b988      	cbnz	r0, 8010984 <__swbuf_r+0x90>
 8010960:	4638      	mov	r0, r7
 8010962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010964:	4b0a      	ldr	r3, [pc, #40]	; (8010990 <__swbuf_r+0x9c>)
 8010966:	429c      	cmp	r4, r3
 8010968:	d101      	bne.n	801096e <__swbuf_r+0x7a>
 801096a:	68ac      	ldr	r4, [r5, #8]
 801096c:	e7cf      	b.n	801090e <__swbuf_r+0x1a>
 801096e:	4b09      	ldr	r3, [pc, #36]	; (8010994 <__swbuf_r+0xa0>)
 8010970:	429c      	cmp	r4, r3
 8010972:	bf08      	it	eq
 8010974:	68ec      	ldreq	r4, [r5, #12]
 8010976:	e7ca      	b.n	801090e <__swbuf_r+0x1a>
 8010978:	4621      	mov	r1, r4
 801097a:	4628      	mov	r0, r5
 801097c:	f000 f81e 	bl	80109bc <__swsetup_r>
 8010980:	2800      	cmp	r0, #0
 8010982:	d0cb      	beq.n	801091c <__swbuf_r+0x28>
 8010984:	f04f 37ff 	mov.w	r7, #4294967295
 8010988:	e7ea      	b.n	8010960 <__swbuf_r+0x6c>
 801098a:	bf00      	nop
 801098c:	0803e1ac 	.word	0x0803e1ac
 8010990:	0803e1cc 	.word	0x0803e1cc
 8010994:	0803e18c 	.word	0x0803e18c

08010998 <_write_r>:
 8010998:	b538      	push	{r3, r4, r5, lr}
 801099a:	4d07      	ldr	r5, [pc, #28]	; (80109b8 <_write_r+0x20>)
 801099c:	4604      	mov	r4, r0
 801099e:	4608      	mov	r0, r1
 80109a0:	4611      	mov	r1, r2
 80109a2:	2200      	movs	r2, #0
 80109a4:	602a      	str	r2, [r5, #0]
 80109a6:	461a      	mov	r2, r3
 80109a8:	f005 fcaa 	bl	8016300 <_write>
 80109ac:	1c43      	adds	r3, r0, #1
 80109ae:	d102      	bne.n	80109b6 <_write_r+0x1e>
 80109b0:	682b      	ldr	r3, [r5, #0]
 80109b2:	b103      	cbz	r3, 80109b6 <_write_r+0x1e>
 80109b4:	6023      	str	r3, [r4, #0]
 80109b6:	bd38      	pop	{r3, r4, r5, pc}
 80109b8:	20003c28 	.word	0x20003c28

080109bc <__swsetup_r>:
 80109bc:	4b32      	ldr	r3, [pc, #200]	; (8010a88 <__swsetup_r+0xcc>)
 80109be:	b570      	push	{r4, r5, r6, lr}
 80109c0:	681d      	ldr	r5, [r3, #0]
 80109c2:	4606      	mov	r6, r0
 80109c4:	460c      	mov	r4, r1
 80109c6:	b125      	cbz	r5, 80109d2 <__swsetup_r+0x16>
 80109c8:	69ab      	ldr	r3, [r5, #24]
 80109ca:	b913      	cbnz	r3, 80109d2 <__swsetup_r+0x16>
 80109cc:	4628      	mov	r0, r5
 80109ce:	f001 f82d 	bl	8011a2c <__sinit>
 80109d2:	4b2e      	ldr	r3, [pc, #184]	; (8010a8c <__swsetup_r+0xd0>)
 80109d4:	429c      	cmp	r4, r3
 80109d6:	d10f      	bne.n	80109f8 <__swsetup_r+0x3c>
 80109d8:	686c      	ldr	r4, [r5, #4]
 80109da:	89a3      	ldrh	r3, [r4, #12]
 80109dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109e0:	0719      	lsls	r1, r3, #28
 80109e2:	d42c      	bmi.n	8010a3e <__swsetup_r+0x82>
 80109e4:	06dd      	lsls	r5, r3, #27
 80109e6:	d411      	bmi.n	8010a0c <__swsetup_r+0x50>
 80109e8:	2309      	movs	r3, #9
 80109ea:	6033      	str	r3, [r6, #0]
 80109ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80109f0:	81a3      	strh	r3, [r4, #12]
 80109f2:	f04f 30ff 	mov.w	r0, #4294967295
 80109f6:	e03e      	b.n	8010a76 <__swsetup_r+0xba>
 80109f8:	4b25      	ldr	r3, [pc, #148]	; (8010a90 <__swsetup_r+0xd4>)
 80109fa:	429c      	cmp	r4, r3
 80109fc:	d101      	bne.n	8010a02 <__swsetup_r+0x46>
 80109fe:	68ac      	ldr	r4, [r5, #8]
 8010a00:	e7eb      	b.n	80109da <__swsetup_r+0x1e>
 8010a02:	4b24      	ldr	r3, [pc, #144]	; (8010a94 <__swsetup_r+0xd8>)
 8010a04:	429c      	cmp	r4, r3
 8010a06:	bf08      	it	eq
 8010a08:	68ec      	ldreq	r4, [r5, #12]
 8010a0a:	e7e6      	b.n	80109da <__swsetup_r+0x1e>
 8010a0c:	0758      	lsls	r0, r3, #29
 8010a0e:	d512      	bpl.n	8010a36 <__swsetup_r+0x7a>
 8010a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a12:	b141      	cbz	r1, 8010a26 <__swsetup_r+0x6a>
 8010a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a18:	4299      	cmp	r1, r3
 8010a1a:	d002      	beq.n	8010a22 <__swsetup_r+0x66>
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	f7fd f8cb 	bl	800dbb8 <_free_r>
 8010a22:	2300      	movs	r3, #0
 8010a24:	6363      	str	r3, [r4, #52]	; 0x34
 8010a26:	89a3      	ldrh	r3, [r4, #12]
 8010a28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a2c:	81a3      	strh	r3, [r4, #12]
 8010a2e:	2300      	movs	r3, #0
 8010a30:	6063      	str	r3, [r4, #4]
 8010a32:	6923      	ldr	r3, [r4, #16]
 8010a34:	6023      	str	r3, [r4, #0]
 8010a36:	89a3      	ldrh	r3, [r4, #12]
 8010a38:	f043 0308 	orr.w	r3, r3, #8
 8010a3c:	81a3      	strh	r3, [r4, #12]
 8010a3e:	6923      	ldr	r3, [r4, #16]
 8010a40:	b94b      	cbnz	r3, 8010a56 <__swsetup_r+0x9a>
 8010a42:	89a3      	ldrh	r3, [r4, #12]
 8010a44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a4c:	d003      	beq.n	8010a56 <__swsetup_r+0x9a>
 8010a4e:	4621      	mov	r1, r4
 8010a50:	4630      	mov	r0, r6
 8010a52:	f001 fc85 	bl	8012360 <__smakebuf_r>
 8010a56:	89a0      	ldrh	r0, [r4, #12]
 8010a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a5c:	f010 0301 	ands.w	r3, r0, #1
 8010a60:	d00a      	beq.n	8010a78 <__swsetup_r+0xbc>
 8010a62:	2300      	movs	r3, #0
 8010a64:	60a3      	str	r3, [r4, #8]
 8010a66:	6963      	ldr	r3, [r4, #20]
 8010a68:	425b      	negs	r3, r3
 8010a6a:	61a3      	str	r3, [r4, #24]
 8010a6c:	6923      	ldr	r3, [r4, #16]
 8010a6e:	b943      	cbnz	r3, 8010a82 <__swsetup_r+0xc6>
 8010a70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a74:	d1ba      	bne.n	80109ec <__swsetup_r+0x30>
 8010a76:	bd70      	pop	{r4, r5, r6, pc}
 8010a78:	0781      	lsls	r1, r0, #30
 8010a7a:	bf58      	it	pl
 8010a7c:	6963      	ldrpl	r3, [r4, #20]
 8010a7e:	60a3      	str	r3, [r4, #8]
 8010a80:	e7f4      	b.n	8010a6c <__swsetup_r+0xb0>
 8010a82:	2000      	movs	r0, #0
 8010a84:	e7f7      	b.n	8010a76 <__swsetup_r+0xba>
 8010a86:	bf00      	nop
 8010a88:	200002c0 	.word	0x200002c0
 8010a8c:	0803e1ac 	.word	0x0803e1ac
 8010a90:	0803e1cc 	.word	0x0803e1cc
 8010a94:	0803e18c 	.word	0x0803e18c

08010a98 <abort>:
 8010a98:	b508      	push	{r3, lr}
 8010a9a:	2006      	movs	r0, #6
 8010a9c:	f002 fed8 	bl	8013850 <raise>
 8010aa0:	2001      	movs	r0, #1
 8010aa2:	f005 fc35 	bl	8016310 <_exit>

08010aa6 <abs>:
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	bfb8      	it	lt
 8010aaa:	4240      	neglt	r0, r0
 8010aac:	4770      	bx	lr
	...

08010ab0 <_close_r>:
 8010ab0:	b538      	push	{r3, r4, r5, lr}
 8010ab2:	4d06      	ldr	r5, [pc, #24]	; (8010acc <_close_r+0x1c>)
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	4608      	mov	r0, r1
 8010aba:	602b      	str	r3, [r5, #0]
 8010abc:	f005 fbda 	bl	8016274 <_close>
 8010ac0:	1c43      	adds	r3, r0, #1
 8010ac2:	d102      	bne.n	8010aca <_close_r+0x1a>
 8010ac4:	682b      	ldr	r3, [r5, #0]
 8010ac6:	b103      	cbz	r3, 8010aca <_close_r+0x1a>
 8010ac8:	6023      	str	r3, [r4, #0]
 8010aca:	bd38      	pop	{r3, r4, r5, pc}
 8010acc:	20003c28 	.word	0x20003c28

08010ad0 <div>:
 8010ad0:	2900      	cmp	r1, #0
 8010ad2:	b510      	push	{r4, lr}
 8010ad4:	fb91 f4f2 	sdiv	r4, r1, r2
 8010ad8:	fb02 1314 	mls	r3, r2, r4, r1
 8010adc:	db06      	blt.n	8010aec <div+0x1c>
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	da01      	bge.n	8010ae6 <div+0x16>
 8010ae2:	3401      	adds	r4, #1
 8010ae4:	1a9b      	subs	r3, r3, r2
 8010ae6:	e9c0 4300 	strd	r4, r3, [r0]
 8010aea:	bd10      	pop	{r4, pc}
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	bfc4      	itt	gt
 8010af0:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8010af4:	189b      	addgt	r3, r3, r2
 8010af6:	e7f6      	b.n	8010ae6 <div+0x16>

08010af8 <quorem>:
 8010af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010afc:	6903      	ldr	r3, [r0, #16]
 8010afe:	690c      	ldr	r4, [r1, #16]
 8010b00:	42a3      	cmp	r3, r4
 8010b02:	4607      	mov	r7, r0
 8010b04:	f2c0 8081 	blt.w	8010c0a <quorem+0x112>
 8010b08:	3c01      	subs	r4, #1
 8010b0a:	f101 0814 	add.w	r8, r1, #20
 8010b0e:	f100 0514 	add.w	r5, r0, #20
 8010b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b16:	9301      	str	r3, [sp, #4]
 8010b18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010b1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b20:	3301      	adds	r3, #1
 8010b22:	429a      	cmp	r2, r3
 8010b24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010b28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010b2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010b30:	d331      	bcc.n	8010b96 <quorem+0x9e>
 8010b32:	f04f 0e00 	mov.w	lr, #0
 8010b36:	4640      	mov	r0, r8
 8010b38:	46ac      	mov	ip, r5
 8010b3a:	46f2      	mov	sl, lr
 8010b3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010b40:	b293      	uxth	r3, r2
 8010b42:	fb06 e303 	mla	r3, r6, r3, lr
 8010b46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	ebaa 0303 	sub.w	r3, sl, r3
 8010b50:	f8dc a000 	ldr.w	sl, [ip]
 8010b54:	0c12      	lsrs	r2, r2, #16
 8010b56:	fa13 f38a 	uxtah	r3, r3, sl
 8010b5a:	fb06 e202 	mla	r2, r6, r2, lr
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	9b00      	ldr	r3, [sp, #0]
 8010b62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010b66:	b292      	uxth	r2, r2
 8010b68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010b6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010b70:	f8bd 3000 	ldrh.w	r3, [sp]
 8010b74:	4581      	cmp	r9, r0
 8010b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b7a:	f84c 3b04 	str.w	r3, [ip], #4
 8010b7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010b82:	d2db      	bcs.n	8010b3c <quorem+0x44>
 8010b84:	f855 300b 	ldr.w	r3, [r5, fp]
 8010b88:	b92b      	cbnz	r3, 8010b96 <quorem+0x9e>
 8010b8a:	9b01      	ldr	r3, [sp, #4]
 8010b8c:	3b04      	subs	r3, #4
 8010b8e:	429d      	cmp	r5, r3
 8010b90:	461a      	mov	r2, r3
 8010b92:	d32e      	bcc.n	8010bf2 <quorem+0xfa>
 8010b94:	613c      	str	r4, [r7, #16]
 8010b96:	4638      	mov	r0, r7
 8010b98:	f001 ff26 	bl	80129e8 <__mcmp>
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	db24      	blt.n	8010bea <quorem+0xf2>
 8010ba0:	3601      	adds	r6, #1
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	f04f 0c00 	mov.w	ip, #0
 8010ba8:	f858 2b04 	ldr.w	r2, [r8], #4
 8010bac:	f8d0 e000 	ldr.w	lr, [r0]
 8010bb0:	b293      	uxth	r3, r2
 8010bb2:	ebac 0303 	sub.w	r3, ip, r3
 8010bb6:	0c12      	lsrs	r2, r2, #16
 8010bb8:	fa13 f38e 	uxtah	r3, r3, lr
 8010bbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010bc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010bca:	45c1      	cmp	r9, r8
 8010bcc:	f840 3b04 	str.w	r3, [r0], #4
 8010bd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010bd4:	d2e8      	bcs.n	8010ba8 <quorem+0xb0>
 8010bd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010bde:	b922      	cbnz	r2, 8010bea <quorem+0xf2>
 8010be0:	3b04      	subs	r3, #4
 8010be2:	429d      	cmp	r5, r3
 8010be4:	461a      	mov	r2, r3
 8010be6:	d30a      	bcc.n	8010bfe <quorem+0x106>
 8010be8:	613c      	str	r4, [r7, #16]
 8010bea:	4630      	mov	r0, r6
 8010bec:	b003      	add	sp, #12
 8010bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf2:	6812      	ldr	r2, [r2, #0]
 8010bf4:	3b04      	subs	r3, #4
 8010bf6:	2a00      	cmp	r2, #0
 8010bf8:	d1cc      	bne.n	8010b94 <quorem+0x9c>
 8010bfa:	3c01      	subs	r4, #1
 8010bfc:	e7c7      	b.n	8010b8e <quorem+0x96>
 8010bfe:	6812      	ldr	r2, [r2, #0]
 8010c00:	3b04      	subs	r3, #4
 8010c02:	2a00      	cmp	r2, #0
 8010c04:	d1f0      	bne.n	8010be8 <quorem+0xf0>
 8010c06:	3c01      	subs	r4, #1
 8010c08:	e7eb      	b.n	8010be2 <quorem+0xea>
 8010c0a:	2000      	movs	r0, #0
 8010c0c:	e7ee      	b.n	8010bec <quorem+0xf4>
	...

08010c10 <_dtoa_r>:
 8010c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c14:	ed2d 8b04 	vpush	{d8-d9}
 8010c18:	ec57 6b10 	vmov	r6, r7, d0
 8010c1c:	b093      	sub	sp, #76	; 0x4c
 8010c1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010c20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010c24:	9106      	str	r1, [sp, #24]
 8010c26:	ee10 aa10 	vmov	sl, s0
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8010c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8010c30:	46bb      	mov	fp, r7
 8010c32:	b975      	cbnz	r5, 8010c52 <_dtoa_r+0x42>
 8010c34:	2010      	movs	r0, #16
 8010c36:	f7fc fd27 	bl	800d688 <malloc>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	6260      	str	r0, [r4, #36]	; 0x24
 8010c3e:	b920      	cbnz	r0, 8010c4a <_dtoa_r+0x3a>
 8010c40:	4ba7      	ldr	r3, [pc, #668]	; (8010ee0 <_dtoa_r+0x2d0>)
 8010c42:	21ea      	movs	r1, #234	; 0xea
 8010c44:	48a7      	ldr	r0, [pc, #668]	; (8010ee4 <_dtoa_r+0x2d4>)
 8010c46:	f7fc fcc3 	bl	800d5d0 <__assert_func>
 8010c4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010c4e:	6005      	str	r5, [r0, #0]
 8010c50:	60c5      	str	r5, [r0, #12]
 8010c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c54:	6819      	ldr	r1, [r3, #0]
 8010c56:	b151      	cbz	r1, 8010c6e <_dtoa_r+0x5e>
 8010c58:	685a      	ldr	r2, [r3, #4]
 8010c5a:	604a      	str	r2, [r1, #4]
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	4093      	lsls	r3, r2
 8010c60:	608b      	str	r3, [r1, #8]
 8010c62:	4620      	mov	r0, r4
 8010c64:	f001 fc34 	bl	80124d0 <_Bfree>
 8010c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	601a      	str	r2, [r3, #0]
 8010c6e:	1e3b      	subs	r3, r7, #0
 8010c70:	bfaa      	itet	ge
 8010c72:	2300      	movge	r3, #0
 8010c74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010c78:	f8c8 3000 	strge.w	r3, [r8]
 8010c7c:	4b9a      	ldr	r3, [pc, #616]	; (8010ee8 <_dtoa_r+0x2d8>)
 8010c7e:	bfbc      	itt	lt
 8010c80:	2201      	movlt	r2, #1
 8010c82:	f8c8 2000 	strlt.w	r2, [r8]
 8010c86:	ea33 030b 	bics.w	r3, r3, fp
 8010c8a:	d11b      	bne.n	8010cc4 <_dtoa_r+0xb4>
 8010c8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010c92:	6013      	str	r3, [r2, #0]
 8010c94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c98:	4333      	orrs	r3, r6
 8010c9a:	f000 8592 	beq.w	80117c2 <_dtoa_r+0xbb2>
 8010c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ca0:	b963      	cbnz	r3, 8010cbc <_dtoa_r+0xac>
 8010ca2:	4b92      	ldr	r3, [pc, #584]	; (8010eec <_dtoa_r+0x2dc>)
 8010ca4:	e022      	b.n	8010cec <_dtoa_r+0xdc>
 8010ca6:	4b92      	ldr	r3, [pc, #584]	; (8010ef0 <_dtoa_r+0x2e0>)
 8010ca8:	9301      	str	r3, [sp, #4]
 8010caa:	3308      	adds	r3, #8
 8010cac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010cae:	6013      	str	r3, [r2, #0]
 8010cb0:	9801      	ldr	r0, [sp, #4]
 8010cb2:	b013      	add	sp, #76	; 0x4c
 8010cb4:	ecbd 8b04 	vpop	{d8-d9}
 8010cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cbc:	4b8b      	ldr	r3, [pc, #556]	; (8010eec <_dtoa_r+0x2dc>)
 8010cbe:	9301      	str	r3, [sp, #4]
 8010cc0:	3303      	adds	r3, #3
 8010cc2:	e7f3      	b.n	8010cac <_dtoa_r+0x9c>
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	4650      	mov	r0, sl
 8010cca:	4659      	mov	r1, fp
 8010ccc:	f7ef ff16 	bl	8000afc <__aeabi_dcmpeq>
 8010cd0:	ec4b ab19 	vmov	d9, sl, fp
 8010cd4:	4680      	mov	r8, r0
 8010cd6:	b158      	cbz	r0, 8010cf0 <_dtoa_r+0xe0>
 8010cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010cda:	2301      	movs	r3, #1
 8010cdc:	6013      	str	r3, [r2, #0]
 8010cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	f000 856b 	beq.w	80117bc <_dtoa_r+0xbac>
 8010ce6:	4883      	ldr	r0, [pc, #524]	; (8010ef4 <_dtoa_r+0x2e4>)
 8010ce8:	6018      	str	r0, [r3, #0]
 8010cea:	1e43      	subs	r3, r0, #1
 8010cec:	9301      	str	r3, [sp, #4]
 8010cee:	e7df      	b.n	8010cb0 <_dtoa_r+0xa0>
 8010cf0:	ec4b ab10 	vmov	d0, sl, fp
 8010cf4:	aa10      	add	r2, sp, #64	; 0x40
 8010cf6:	a911      	add	r1, sp, #68	; 0x44
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f001 ff97 	bl	8012c2c <__d2b>
 8010cfe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010d02:	ee08 0a10 	vmov	s16, r0
 8010d06:	2d00      	cmp	r5, #0
 8010d08:	f000 8084 	beq.w	8010e14 <_dtoa_r+0x204>
 8010d0c:	ee19 3a90 	vmov	r3, s19
 8010d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010d18:	4656      	mov	r6, sl
 8010d1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010d1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010d22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010d26:	4b74      	ldr	r3, [pc, #464]	; (8010ef8 <_dtoa_r+0x2e8>)
 8010d28:	2200      	movs	r2, #0
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	4639      	mov	r1, r7
 8010d2e:	f7ef fac5 	bl	80002bc <__aeabi_dsub>
 8010d32:	a365      	add	r3, pc, #404	; (adr r3, 8010ec8 <_dtoa_r+0x2b8>)
 8010d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d38:	f7ef fc78 	bl	800062c <__aeabi_dmul>
 8010d3c:	a364      	add	r3, pc, #400	; (adr r3, 8010ed0 <_dtoa_r+0x2c0>)
 8010d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d42:	f7ef fabd 	bl	80002c0 <__adddf3>
 8010d46:	4606      	mov	r6, r0
 8010d48:	4628      	mov	r0, r5
 8010d4a:	460f      	mov	r7, r1
 8010d4c:	f7ef fc04 	bl	8000558 <__aeabi_i2d>
 8010d50:	a361      	add	r3, pc, #388	; (adr r3, 8010ed8 <_dtoa_r+0x2c8>)
 8010d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d56:	f7ef fc69 	bl	800062c <__aeabi_dmul>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	4630      	mov	r0, r6
 8010d60:	4639      	mov	r1, r7
 8010d62:	f7ef faad 	bl	80002c0 <__adddf3>
 8010d66:	4606      	mov	r6, r0
 8010d68:	460f      	mov	r7, r1
 8010d6a:	f7ef ff0f 	bl	8000b8c <__aeabi_d2iz>
 8010d6e:	2200      	movs	r2, #0
 8010d70:	9000      	str	r0, [sp, #0]
 8010d72:	2300      	movs	r3, #0
 8010d74:	4630      	mov	r0, r6
 8010d76:	4639      	mov	r1, r7
 8010d78:	f7ef feca 	bl	8000b10 <__aeabi_dcmplt>
 8010d7c:	b150      	cbz	r0, 8010d94 <_dtoa_r+0x184>
 8010d7e:	9800      	ldr	r0, [sp, #0]
 8010d80:	f7ef fbea 	bl	8000558 <__aeabi_i2d>
 8010d84:	4632      	mov	r2, r6
 8010d86:	463b      	mov	r3, r7
 8010d88:	f7ef feb8 	bl	8000afc <__aeabi_dcmpeq>
 8010d8c:	b910      	cbnz	r0, 8010d94 <_dtoa_r+0x184>
 8010d8e:	9b00      	ldr	r3, [sp, #0]
 8010d90:	3b01      	subs	r3, #1
 8010d92:	9300      	str	r3, [sp, #0]
 8010d94:	9b00      	ldr	r3, [sp, #0]
 8010d96:	2b16      	cmp	r3, #22
 8010d98:	d85a      	bhi.n	8010e50 <_dtoa_r+0x240>
 8010d9a:	9a00      	ldr	r2, [sp, #0]
 8010d9c:	4b57      	ldr	r3, [pc, #348]	; (8010efc <_dtoa_r+0x2ec>)
 8010d9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da6:	ec51 0b19 	vmov	r0, r1, d9
 8010daa:	f7ef feb1 	bl	8000b10 <__aeabi_dcmplt>
 8010dae:	2800      	cmp	r0, #0
 8010db0:	d050      	beq.n	8010e54 <_dtoa_r+0x244>
 8010db2:	9b00      	ldr	r3, [sp, #0]
 8010db4:	3b01      	subs	r3, #1
 8010db6:	9300      	str	r3, [sp, #0]
 8010db8:	2300      	movs	r3, #0
 8010dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8010dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010dbe:	1b5d      	subs	r5, r3, r5
 8010dc0:	1e6b      	subs	r3, r5, #1
 8010dc2:	9305      	str	r3, [sp, #20]
 8010dc4:	bf45      	ittet	mi
 8010dc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8010dca:	9304      	strmi	r3, [sp, #16]
 8010dcc:	2300      	movpl	r3, #0
 8010dce:	2300      	movmi	r3, #0
 8010dd0:	bf4c      	ite	mi
 8010dd2:	9305      	strmi	r3, [sp, #20]
 8010dd4:	9304      	strpl	r3, [sp, #16]
 8010dd6:	9b00      	ldr	r3, [sp, #0]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	db3d      	blt.n	8010e58 <_dtoa_r+0x248>
 8010ddc:	9b05      	ldr	r3, [sp, #20]
 8010dde:	9a00      	ldr	r2, [sp, #0]
 8010de0:	920a      	str	r2, [sp, #40]	; 0x28
 8010de2:	4413      	add	r3, r2
 8010de4:	9305      	str	r3, [sp, #20]
 8010de6:	2300      	movs	r3, #0
 8010de8:	9307      	str	r3, [sp, #28]
 8010dea:	9b06      	ldr	r3, [sp, #24]
 8010dec:	2b09      	cmp	r3, #9
 8010dee:	f200 8089 	bhi.w	8010f04 <_dtoa_r+0x2f4>
 8010df2:	2b05      	cmp	r3, #5
 8010df4:	bfc4      	itt	gt
 8010df6:	3b04      	subgt	r3, #4
 8010df8:	9306      	strgt	r3, [sp, #24]
 8010dfa:	9b06      	ldr	r3, [sp, #24]
 8010dfc:	f1a3 0302 	sub.w	r3, r3, #2
 8010e00:	bfcc      	ite	gt
 8010e02:	2500      	movgt	r5, #0
 8010e04:	2501      	movle	r5, #1
 8010e06:	2b03      	cmp	r3, #3
 8010e08:	f200 8087 	bhi.w	8010f1a <_dtoa_r+0x30a>
 8010e0c:	e8df f003 	tbb	[pc, r3]
 8010e10:	59383a2d 	.word	0x59383a2d
 8010e14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010e18:	441d      	add	r5, r3
 8010e1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010e1e:	2b20      	cmp	r3, #32
 8010e20:	bfc1      	itttt	gt
 8010e22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010e26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010e2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8010e2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010e32:	bfda      	itte	le
 8010e34:	f1c3 0320 	rsble	r3, r3, #32
 8010e38:	fa06 f003 	lslle.w	r0, r6, r3
 8010e3c:	4318      	orrgt	r0, r3
 8010e3e:	f7ef fb7b 	bl	8000538 <__aeabi_ui2d>
 8010e42:	2301      	movs	r3, #1
 8010e44:	4606      	mov	r6, r0
 8010e46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010e4a:	3d01      	subs	r5, #1
 8010e4c:	930e      	str	r3, [sp, #56]	; 0x38
 8010e4e:	e76a      	b.n	8010d26 <_dtoa_r+0x116>
 8010e50:	2301      	movs	r3, #1
 8010e52:	e7b2      	b.n	8010dba <_dtoa_r+0x1aa>
 8010e54:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e56:	e7b1      	b.n	8010dbc <_dtoa_r+0x1ac>
 8010e58:	9b04      	ldr	r3, [sp, #16]
 8010e5a:	9a00      	ldr	r2, [sp, #0]
 8010e5c:	1a9b      	subs	r3, r3, r2
 8010e5e:	9304      	str	r3, [sp, #16]
 8010e60:	4253      	negs	r3, r2
 8010e62:	9307      	str	r3, [sp, #28]
 8010e64:	2300      	movs	r3, #0
 8010e66:	930a      	str	r3, [sp, #40]	; 0x28
 8010e68:	e7bf      	b.n	8010dea <_dtoa_r+0x1da>
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	9308      	str	r3, [sp, #32]
 8010e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	dc55      	bgt.n	8010f20 <_dtoa_r+0x310>
 8010e74:	2301      	movs	r3, #1
 8010e76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8010e7e:	e00c      	b.n	8010e9a <_dtoa_r+0x28a>
 8010e80:	2301      	movs	r3, #1
 8010e82:	e7f3      	b.n	8010e6c <_dtoa_r+0x25c>
 8010e84:	2300      	movs	r3, #0
 8010e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e88:	9308      	str	r3, [sp, #32]
 8010e8a:	9b00      	ldr	r3, [sp, #0]
 8010e8c:	4413      	add	r3, r2
 8010e8e:	9302      	str	r3, [sp, #8]
 8010e90:	3301      	adds	r3, #1
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	9303      	str	r3, [sp, #12]
 8010e96:	bfb8      	it	lt
 8010e98:	2301      	movlt	r3, #1
 8010e9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	6042      	str	r2, [r0, #4]
 8010ea0:	2204      	movs	r2, #4
 8010ea2:	f102 0614 	add.w	r6, r2, #20
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	6841      	ldr	r1, [r0, #4]
 8010eaa:	d93d      	bls.n	8010f28 <_dtoa_r+0x318>
 8010eac:	4620      	mov	r0, r4
 8010eae:	f001 facf 	bl	8012450 <_Balloc>
 8010eb2:	9001      	str	r0, [sp, #4]
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	d13b      	bne.n	8010f30 <_dtoa_r+0x320>
 8010eb8:	4b11      	ldr	r3, [pc, #68]	; (8010f00 <_dtoa_r+0x2f0>)
 8010eba:	4602      	mov	r2, r0
 8010ebc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010ec0:	e6c0      	b.n	8010c44 <_dtoa_r+0x34>
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	e7df      	b.n	8010e86 <_dtoa_r+0x276>
 8010ec6:	bf00      	nop
 8010ec8:	636f4361 	.word	0x636f4361
 8010ecc:	3fd287a7 	.word	0x3fd287a7
 8010ed0:	8b60c8b3 	.word	0x8b60c8b3
 8010ed4:	3fc68a28 	.word	0x3fc68a28
 8010ed8:	509f79fb 	.word	0x509f79fb
 8010edc:	3fd34413 	.word	0x3fd34413
 8010ee0:	0803daf4 	.word	0x0803daf4
 8010ee4:	0803e11e 	.word	0x0803e11e
 8010ee8:	7ff00000 	.word	0x7ff00000
 8010eec:	0803e11a 	.word	0x0803e11a
 8010ef0:	0803e111 	.word	0x0803e111
 8010ef4:	0803e429 	.word	0x0803e429
 8010ef8:	3ff80000 	.word	0x3ff80000
 8010efc:	0803e350 	.word	0x0803e350
 8010f00:	0803e179 	.word	0x0803e179
 8010f04:	2501      	movs	r5, #1
 8010f06:	2300      	movs	r3, #0
 8010f08:	9306      	str	r3, [sp, #24]
 8010f0a:	9508      	str	r5, [sp, #32]
 8010f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010f14:	2200      	movs	r2, #0
 8010f16:	2312      	movs	r3, #18
 8010f18:	e7b0      	b.n	8010e7c <_dtoa_r+0x26c>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	9308      	str	r3, [sp, #32]
 8010f1e:	e7f5      	b.n	8010f0c <_dtoa_r+0x2fc>
 8010f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010f26:	e7b8      	b.n	8010e9a <_dtoa_r+0x28a>
 8010f28:	3101      	adds	r1, #1
 8010f2a:	6041      	str	r1, [r0, #4]
 8010f2c:	0052      	lsls	r2, r2, #1
 8010f2e:	e7b8      	b.n	8010ea2 <_dtoa_r+0x292>
 8010f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f32:	9a01      	ldr	r2, [sp, #4]
 8010f34:	601a      	str	r2, [r3, #0]
 8010f36:	9b03      	ldr	r3, [sp, #12]
 8010f38:	2b0e      	cmp	r3, #14
 8010f3a:	f200 809d 	bhi.w	8011078 <_dtoa_r+0x468>
 8010f3e:	2d00      	cmp	r5, #0
 8010f40:	f000 809a 	beq.w	8011078 <_dtoa_r+0x468>
 8010f44:	9b00      	ldr	r3, [sp, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	dd32      	ble.n	8010fb0 <_dtoa_r+0x3a0>
 8010f4a:	4ab7      	ldr	r2, [pc, #732]	; (8011228 <_dtoa_r+0x618>)
 8010f4c:	f003 030f 	and.w	r3, r3, #15
 8010f50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f58:	9b00      	ldr	r3, [sp, #0]
 8010f5a:	05d8      	lsls	r0, r3, #23
 8010f5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010f60:	d516      	bpl.n	8010f90 <_dtoa_r+0x380>
 8010f62:	4bb2      	ldr	r3, [pc, #712]	; (801122c <_dtoa_r+0x61c>)
 8010f64:	ec51 0b19 	vmov	r0, r1, d9
 8010f68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010f6c:	f7ef fc88 	bl	8000880 <__aeabi_ddiv>
 8010f70:	f007 070f 	and.w	r7, r7, #15
 8010f74:	4682      	mov	sl, r0
 8010f76:	468b      	mov	fp, r1
 8010f78:	2503      	movs	r5, #3
 8010f7a:	4eac      	ldr	r6, [pc, #688]	; (801122c <_dtoa_r+0x61c>)
 8010f7c:	b957      	cbnz	r7, 8010f94 <_dtoa_r+0x384>
 8010f7e:	4642      	mov	r2, r8
 8010f80:	464b      	mov	r3, r9
 8010f82:	4650      	mov	r0, sl
 8010f84:	4659      	mov	r1, fp
 8010f86:	f7ef fc7b 	bl	8000880 <__aeabi_ddiv>
 8010f8a:	4682      	mov	sl, r0
 8010f8c:	468b      	mov	fp, r1
 8010f8e:	e028      	b.n	8010fe2 <_dtoa_r+0x3d2>
 8010f90:	2502      	movs	r5, #2
 8010f92:	e7f2      	b.n	8010f7a <_dtoa_r+0x36a>
 8010f94:	07f9      	lsls	r1, r7, #31
 8010f96:	d508      	bpl.n	8010faa <_dtoa_r+0x39a>
 8010f98:	4640      	mov	r0, r8
 8010f9a:	4649      	mov	r1, r9
 8010f9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010fa0:	f7ef fb44 	bl	800062c <__aeabi_dmul>
 8010fa4:	3501      	adds	r5, #1
 8010fa6:	4680      	mov	r8, r0
 8010fa8:	4689      	mov	r9, r1
 8010faa:	107f      	asrs	r7, r7, #1
 8010fac:	3608      	adds	r6, #8
 8010fae:	e7e5      	b.n	8010f7c <_dtoa_r+0x36c>
 8010fb0:	f000 809b 	beq.w	80110ea <_dtoa_r+0x4da>
 8010fb4:	9b00      	ldr	r3, [sp, #0]
 8010fb6:	4f9d      	ldr	r7, [pc, #628]	; (801122c <_dtoa_r+0x61c>)
 8010fb8:	425e      	negs	r6, r3
 8010fba:	4b9b      	ldr	r3, [pc, #620]	; (8011228 <_dtoa_r+0x618>)
 8010fbc:	f006 020f 	and.w	r2, r6, #15
 8010fc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc8:	ec51 0b19 	vmov	r0, r1, d9
 8010fcc:	f7ef fb2e 	bl	800062c <__aeabi_dmul>
 8010fd0:	1136      	asrs	r6, r6, #4
 8010fd2:	4682      	mov	sl, r0
 8010fd4:	468b      	mov	fp, r1
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	2502      	movs	r5, #2
 8010fda:	2e00      	cmp	r6, #0
 8010fdc:	d17a      	bne.n	80110d4 <_dtoa_r+0x4c4>
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1d3      	bne.n	8010f8a <_dtoa_r+0x37a>
 8010fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	f000 8082 	beq.w	80110ee <_dtoa_r+0x4de>
 8010fea:	4b91      	ldr	r3, [pc, #580]	; (8011230 <_dtoa_r+0x620>)
 8010fec:	2200      	movs	r2, #0
 8010fee:	4650      	mov	r0, sl
 8010ff0:	4659      	mov	r1, fp
 8010ff2:	f7ef fd8d 	bl	8000b10 <__aeabi_dcmplt>
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	d079      	beq.n	80110ee <_dtoa_r+0x4de>
 8010ffa:	9b03      	ldr	r3, [sp, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d076      	beq.n	80110ee <_dtoa_r+0x4de>
 8011000:	9b02      	ldr	r3, [sp, #8]
 8011002:	2b00      	cmp	r3, #0
 8011004:	dd36      	ble.n	8011074 <_dtoa_r+0x464>
 8011006:	9b00      	ldr	r3, [sp, #0]
 8011008:	4650      	mov	r0, sl
 801100a:	4659      	mov	r1, fp
 801100c:	1e5f      	subs	r7, r3, #1
 801100e:	2200      	movs	r2, #0
 8011010:	4b88      	ldr	r3, [pc, #544]	; (8011234 <_dtoa_r+0x624>)
 8011012:	f7ef fb0b 	bl	800062c <__aeabi_dmul>
 8011016:	9e02      	ldr	r6, [sp, #8]
 8011018:	4682      	mov	sl, r0
 801101a:	468b      	mov	fp, r1
 801101c:	3501      	adds	r5, #1
 801101e:	4628      	mov	r0, r5
 8011020:	f7ef fa9a 	bl	8000558 <__aeabi_i2d>
 8011024:	4652      	mov	r2, sl
 8011026:	465b      	mov	r3, fp
 8011028:	f7ef fb00 	bl	800062c <__aeabi_dmul>
 801102c:	4b82      	ldr	r3, [pc, #520]	; (8011238 <_dtoa_r+0x628>)
 801102e:	2200      	movs	r2, #0
 8011030:	f7ef f946 	bl	80002c0 <__adddf3>
 8011034:	46d0      	mov	r8, sl
 8011036:	46d9      	mov	r9, fp
 8011038:	4682      	mov	sl, r0
 801103a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801103e:	2e00      	cmp	r6, #0
 8011040:	d158      	bne.n	80110f4 <_dtoa_r+0x4e4>
 8011042:	4b7e      	ldr	r3, [pc, #504]	; (801123c <_dtoa_r+0x62c>)
 8011044:	2200      	movs	r2, #0
 8011046:	4640      	mov	r0, r8
 8011048:	4649      	mov	r1, r9
 801104a:	f7ef f937 	bl	80002bc <__aeabi_dsub>
 801104e:	4652      	mov	r2, sl
 8011050:	465b      	mov	r3, fp
 8011052:	4680      	mov	r8, r0
 8011054:	4689      	mov	r9, r1
 8011056:	f7ef fd79 	bl	8000b4c <__aeabi_dcmpgt>
 801105a:	2800      	cmp	r0, #0
 801105c:	f040 8295 	bne.w	801158a <_dtoa_r+0x97a>
 8011060:	4652      	mov	r2, sl
 8011062:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011066:	4640      	mov	r0, r8
 8011068:	4649      	mov	r1, r9
 801106a:	f7ef fd51 	bl	8000b10 <__aeabi_dcmplt>
 801106e:	2800      	cmp	r0, #0
 8011070:	f040 8289 	bne.w	8011586 <_dtoa_r+0x976>
 8011074:	ec5b ab19 	vmov	sl, fp, d9
 8011078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801107a:	2b00      	cmp	r3, #0
 801107c:	f2c0 8148 	blt.w	8011310 <_dtoa_r+0x700>
 8011080:	9a00      	ldr	r2, [sp, #0]
 8011082:	2a0e      	cmp	r2, #14
 8011084:	f300 8144 	bgt.w	8011310 <_dtoa_r+0x700>
 8011088:	4b67      	ldr	r3, [pc, #412]	; (8011228 <_dtoa_r+0x618>)
 801108a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801108e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011094:	2b00      	cmp	r3, #0
 8011096:	f280 80d5 	bge.w	8011244 <_dtoa_r+0x634>
 801109a:	9b03      	ldr	r3, [sp, #12]
 801109c:	2b00      	cmp	r3, #0
 801109e:	f300 80d1 	bgt.w	8011244 <_dtoa_r+0x634>
 80110a2:	f040 826f 	bne.w	8011584 <_dtoa_r+0x974>
 80110a6:	4b65      	ldr	r3, [pc, #404]	; (801123c <_dtoa_r+0x62c>)
 80110a8:	2200      	movs	r2, #0
 80110aa:	4640      	mov	r0, r8
 80110ac:	4649      	mov	r1, r9
 80110ae:	f7ef fabd 	bl	800062c <__aeabi_dmul>
 80110b2:	4652      	mov	r2, sl
 80110b4:	465b      	mov	r3, fp
 80110b6:	f7ef fd3f 	bl	8000b38 <__aeabi_dcmpge>
 80110ba:	9e03      	ldr	r6, [sp, #12]
 80110bc:	4637      	mov	r7, r6
 80110be:	2800      	cmp	r0, #0
 80110c0:	f040 8245 	bne.w	801154e <_dtoa_r+0x93e>
 80110c4:	9d01      	ldr	r5, [sp, #4]
 80110c6:	2331      	movs	r3, #49	; 0x31
 80110c8:	f805 3b01 	strb.w	r3, [r5], #1
 80110cc:	9b00      	ldr	r3, [sp, #0]
 80110ce:	3301      	adds	r3, #1
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	e240      	b.n	8011556 <_dtoa_r+0x946>
 80110d4:	07f2      	lsls	r2, r6, #31
 80110d6:	d505      	bpl.n	80110e4 <_dtoa_r+0x4d4>
 80110d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110dc:	f7ef faa6 	bl	800062c <__aeabi_dmul>
 80110e0:	3501      	adds	r5, #1
 80110e2:	2301      	movs	r3, #1
 80110e4:	1076      	asrs	r6, r6, #1
 80110e6:	3708      	adds	r7, #8
 80110e8:	e777      	b.n	8010fda <_dtoa_r+0x3ca>
 80110ea:	2502      	movs	r5, #2
 80110ec:	e779      	b.n	8010fe2 <_dtoa_r+0x3d2>
 80110ee:	9f00      	ldr	r7, [sp, #0]
 80110f0:	9e03      	ldr	r6, [sp, #12]
 80110f2:	e794      	b.n	801101e <_dtoa_r+0x40e>
 80110f4:	9901      	ldr	r1, [sp, #4]
 80110f6:	4b4c      	ldr	r3, [pc, #304]	; (8011228 <_dtoa_r+0x618>)
 80110f8:	4431      	add	r1, r6
 80110fa:	910d      	str	r1, [sp, #52]	; 0x34
 80110fc:	9908      	ldr	r1, [sp, #32]
 80110fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011102:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011106:	2900      	cmp	r1, #0
 8011108:	d043      	beq.n	8011192 <_dtoa_r+0x582>
 801110a:	494d      	ldr	r1, [pc, #308]	; (8011240 <_dtoa_r+0x630>)
 801110c:	2000      	movs	r0, #0
 801110e:	f7ef fbb7 	bl	8000880 <__aeabi_ddiv>
 8011112:	4652      	mov	r2, sl
 8011114:	465b      	mov	r3, fp
 8011116:	f7ef f8d1 	bl	80002bc <__aeabi_dsub>
 801111a:	9d01      	ldr	r5, [sp, #4]
 801111c:	4682      	mov	sl, r0
 801111e:	468b      	mov	fp, r1
 8011120:	4649      	mov	r1, r9
 8011122:	4640      	mov	r0, r8
 8011124:	f7ef fd32 	bl	8000b8c <__aeabi_d2iz>
 8011128:	4606      	mov	r6, r0
 801112a:	f7ef fa15 	bl	8000558 <__aeabi_i2d>
 801112e:	4602      	mov	r2, r0
 8011130:	460b      	mov	r3, r1
 8011132:	4640      	mov	r0, r8
 8011134:	4649      	mov	r1, r9
 8011136:	f7ef f8c1 	bl	80002bc <__aeabi_dsub>
 801113a:	3630      	adds	r6, #48	; 0x30
 801113c:	f805 6b01 	strb.w	r6, [r5], #1
 8011140:	4652      	mov	r2, sl
 8011142:	465b      	mov	r3, fp
 8011144:	4680      	mov	r8, r0
 8011146:	4689      	mov	r9, r1
 8011148:	f7ef fce2 	bl	8000b10 <__aeabi_dcmplt>
 801114c:	2800      	cmp	r0, #0
 801114e:	d163      	bne.n	8011218 <_dtoa_r+0x608>
 8011150:	4642      	mov	r2, r8
 8011152:	464b      	mov	r3, r9
 8011154:	4936      	ldr	r1, [pc, #216]	; (8011230 <_dtoa_r+0x620>)
 8011156:	2000      	movs	r0, #0
 8011158:	f7ef f8b0 	bl	80002bc <__aeabi_dsub>
 801115c:	4652      	mov	r2, sl
 801115e:	465b      	mov	r3, fp
 8011160:	f7ef fcd6 	bl	8000b10 <__aeabi_dcmplt>
 8011164:	2800      	cmp	r0, #0
 8011166:	f040 80b5 	bne.w	80112d4 <_dtoa_r+0x6c4>
 801116a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801116c:	429d      	cmp	r5, r3
 801116e:	d081      	beq.n	8011074 <_dtoa_r+0x464>
 8011170:	4b30      	ldr	r3, [pc, #192]	; (8011234 <_dtoa_r+0x624>)
 8011172:	2200      	movs	r2, #0
 8011174:	4650      	mov	r0, sl
 8011176:	4659      	mov	r1, fp
 8011178:	f7ef fa58 	bl	800062c <__aeabi_dmul>
 801117c:	4b2d      	ldr	r3, [pc, #180]	; (8011234 <_dtoa_r+0x624>)
 801117e:	4682      	mov	sl, r0
 8011180:	468b      	mov	fp, r1
 8011182:	4640      	mov	r0, r8
 8011184:	4649      	mov	r1, r9
 8011186:	2200      	movs	r2, #0
 8011188:	f7ef fa50 	bl	800062c <__aeabi_dmul>
 801118c:	4680      	mov	r8, r0
 801118e:	4689      	mov	r9, r1
 8011190:	e7c6      	b.n	8011120 <_dtoa_r+0x510>
 8011192:	4650      	mov	r0, sl
 8011194:	4659      	mov	r1, fp
 8011196:	f7ef fa49 	bl	800062c <__aeabi_dmul>
 801119a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801119c:	9d01      	ldr	r5, [sp, #4]
 801119e:	930f      	str	r3, [sp, #60]	; 0x3c
 80111a0:	4682      	mov	sl, r0
 80111a2:	468b      	mov	fp, r1
 80111a4:	4649      	mov	r1, r9
 80111a6:	4640      	mov	r0, r8
 80111a8:	f7ef fcf0 	bl	8000b8c <__aeabi_d2iz>
 80111ac:	4606      	mov	r6, r0
 80111ae:	f7ef f9d3 	bl	8000558 <__aeabi_i2d>
 80111b2:	3630      	adds	r6, #48	; 0x30
 80111b4:	4602      	mov	r2, r0
 80111b6:	460b      	mov	r3, r1
 80111b8:	4640      	mov	r0, r8
 80111ba:	4649      	mov	r1, r9
 80111bc:	f7ef f87e 	bl	80002bc <__aeabi_dsub>
 80111c0:	f805 6b01 	strb.w	r6, [r5], #1
 80111c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111c6:	429d      	cmp	r5, r3
 80111c8:	4680      	mov	r8, r0
 80111ca:	4689      	mov	r9, r1
 80111cc:	f04f 0200 	mov.w	r2, #0
 80111d0:	d124      	bne.n	801121c <_dtoa_r+0x60c>
 80111d2:	4b1b      	ldr	r3, [pc, #108]	; (8011240 <_dtoa_r+0x630>)
 80111d4:	4650      	mov	r0, sl
 80111d6:	4659      	mov	r1, fp
 80111d8:	f7ef f872 	bl	80002c0 <__adddf3>
 80111dc:	4602      	mov	r2, r0
 80111de:	460b      	mov	r3, r1
 80111e0:	4640      	mov	r0, r8
 80111e2:	4649      	mov	r1, r9
 80111e4:	f7ef fcb2 	bl	8000b4c <__aeabi_dcmpgt>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d173      	bne.n	80112d4 <_dtoa_r+0x6c4>
 80111ec:	4652      	mov	r2, sl
 80111ee:	465b      	mov	r3, fp
 80111f0:	4913      	ldr	r1, [pc, #76]	; (8011240 <_dtoa_r+0x630>)
 80111f2:	2000      	movs	r0, #0
 80111f4:	f7ef f862 	bl	80002bc <__aeabi_dsub>
 80111f8:	4602      	mov	r2, r0
 80111fa:	460b      	mov	r3, r1
 80111fc:	4640      	mov	r0, r8
 80111fe:	4649      	mov	r1, r9
 8011200:	f7ef fc86 	bl	8000b10 <__aeabi_dcmplt>
 8011204:	2800      	cmp	r0, #0
 8011206:	f43f af35 	beq.w	8011074 <_dtoa_r+0x464>
 801120a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801120c:	1e6b      	subs	r3, r5, #1
 801120e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011210:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011214:	2b30      	cmp	r3, #48	; 0x30
 8011216:	d0f8      	beq.n	801120a <_dtoa_r+0x5fa>
 8011218:	9700      	str	r7, [sp, #0]
 801121a:	e049      	b.n	80112b0 <_dtoa_r+0x6a0>
 801121c:	4b05      	ldr	r3, [pc, #20]	; (8011234 <_dtoa_r+0x624>)
 801121e:	f7ef fa05 	bl	800062c <__aeabi_dmul>
 8011222:	4680      	mov	r8, r0
 8011224:	4689      	mov	r9, r1
 8011226:	e7bd      	b.n	80111a4 <_dtoa_r+0x594>
 8011228:	0803e350 	.word	0x0803e350
 801122c:	0803e328 	.word	0x0803e328
 8011230:	3ff00000 	.word	0x3ff00000
 8011234:	40240000 	.word	0x40240000
 8011238:	401c0000 	.word	0x401c0000
 801123c:	40140000 	.word	0x40140000
 8011240:	3fe00000 	.word	0x3fe00000
 8011244:	9d01      	ldr	r5, [sp, #4]
 8011246:	4656      	mov	r6, sl
 8011248:	465f      	mov	r7, fp
 801124a:	4642      	mov	r2, r8
 801124c:	464b      	mov	r3, r9
 801124e:	4630      	mov	r0, r6
 8011250:	4639      	mov	r1, r7
 8011252:	f7ef fb15 	bl	8000880 <__aeabi_ddiv>
 8011256:	f7ef fc99 	bl	8000b8c <__aeabi_d2iz>
 801125a:	4682      	mov	sl, r0
 801125c:	f7ef f97c 	bl	8000558 <__aeabi_i2d>
 8011260:	4642      	mov	r2, r8
 8011262:	464b      	mov	r3, r9
 8011264:	f7ef f9e2 	bl	800062c <__aeabi_dmul>
 8011268:	4602      	mov	r2, r0
 801126a:	460b      	mov	r3, r1
 801126c:	4630      	mov	r0, r6
 801126e:	4639      	mov	r1, r7
 8011270:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011274:	f7ef f822 	bl	80002bc <__aeabi_dsub>
 8011278:	f805 6b01 	strb.w	r6, [r5], #1
 801127c:	9e01      	ldr	r6, [sp, #4]
 801127e:	9f03      	ldr	r7, [sp, #12]
 8011280:	1bae      	subs	r6, r5, r6
 8011282:	42b7      	cmp	r7, r6
 8011284:	4602      	mov	r2, r0
 8011286:	460b      	mov	r3, r1
 8011288:	d135      	bne.n	80112f6 <_dtoa_r+0x6e6>
 801128a:	f7ef f819 	bl	80002c0 <__adddf3>
 801128e:	4642      	mov	r2, r8
 8011290:	464b      	mov	r3, r9
 8011292:	4606      	mov	r6, r0
 8011294:	460f      	mov	r7, r1
 8011296:	f7ef fc59 	bl	8000b4c <__aeabi_dcmpgt>
 801129a:	b9d0      	cbnz	r0, 80112d2 <_dtoa_r+0x6c2>
 801129c:	4642      	mov	r2, r8
 801129e:	464b      	mov	r3, r9
 80112a0:	4630      	mov	r0, r6
 80112a2:	4639      	mov	r1, r7
 80112a4:	f7ef fc2a 	bl	8000afc <__aeabi_dcmpeq>
 80112a8:	b110      	cbz	r0, 80112b0 <_dtoa_r+0x6a0>
 80112aa:	f01a 0f01 	tst.w	sl, #1
 80112ae:	d110      	bne.n	80112d2 <_dtoa_r+0x6c2>
 80112b0:	4620      	mov	r0, r4
 80112b2:	ee18 1a10 	vmov	r1, s16
 80112b6:	f001 f90b 	bl	80124d0 <_Bfree>
 80112ba:	2300      	movs	r3, #0
 80112bc:	9800      	ldr	r0, [sp, #0]
 80112be:	702b      	strb	r3, [r5, #0]
 80112c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80112c2:	3001      	adds	r0, #1
 80112c4:	6018      	str	r0, [r3, #0]
 80112c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f43f acf1 	beq.w	8010cb0 <_dtoa_r+0xa0>
 80112ce:	601d      	str	r5, [r3, #0]
 80112d0:	e4ee      	b.n	8010cb0 <_dtoa_r+0xa0>
 80112d2:	9f00      	ldr	r7, [sp, #0]
 80112d4:	462b      	mov	r3, r5
 80112d6:	461d      	mov	r5, r3
 80112d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80112dc:	2a39      	cmp	r2, #57	; 0x39
 80112de:	d106      	bne.n	80112ee <_dtoa_r+0x6de>
 80112e0:	9a01      	ldr	r2, [sp, #4]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d1f7      	bne.n	80112d6 <_dtoa_r+0x6c6>
 80112e6:	9901      	ldr	r1, [sp, #4]
 80112e8:	2230      	movs	r2, #48	; 0x30
 80112ea:	3701      	adds	r7, #1
 80112ec:	700a      	strb	r2, [r1, #0]
 80112ee:	781a      	ldrb	r2, [r3, #0]
 80112f0:	3201      	adds	r2, #1
 80112f2:	701a      	strb	r2, [r3, #0]
 80112f4:	e790      	b.n	8011218 <_dtoa_r+0x608>
 80112f6:	4ba6      	ldr	r3, [pc, #664]	; (8011590 <_dtoa_r+0x980>)
 80112f8:	2200      	movs	r2, #0
 80112fa:	f7ef f997 	bl	800062c <__aeabi_dmul>
 80112fe:	2200      	movs	r2, #0
 8011300:	2300      	movs	r3, #0
 8011302:	4606      	mov	r6, r0
 8011304:	460f      	mov	r7, r1
 8011306:	f7ef fbf9 	bl	8000afc <__aeabi_dcmpeq>
 801130a:	2800      	cmp	r0, #0
 801130c:	d09d      	beq.n	801124a <_dtoa_r+0x63a>
 801130e:	e7cf      	b.n	80112b0 <_dtoa_r+0x6a0>
 8011310:	9a08      	ldr	r2, [sp, #32]
 8011312:	2a00      	cmp	r2, #0
 8011314:	f000 80d7 	beq.w	80114c6 <_dtoa_r+0x8b6>
 8011318:	9a06      	ldr	r2, [sp, #24]
 801131a:	2a01      	cmp	r2, #1
 801131c:	f300 80ba 	bgt.w	8011494 <_dtoa_r+0x884>
 8011320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011322:	2a00      	cmp	r2, #0
 8011324:	f000 80b2 	beq.w	801148c <_dtoa_r+0x87c>
 8011328:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801132c:	9e07      	ldr	r6, [sp, #28]
 801132e:	9d04      	ldr	r5, [sp, #16]
 8011330:	9a04      	ldr	r2, [sp, #16]
 8011332:	441a      	add	r2, r3
 8011334:	9204      	str	r2, [sp, #16]
 8011336:	9a05      	ldr	r2, [sp, #20]
 8011338:	2101      	movs	r1, #1
 801133a:	441a      	add	r2, r3
 801133c:	4620      	mov	r0, r4
 801133e:	9205      	str	r2, [sp, #20]
 8011340:	f001 f9c8 	bl	80126d4 <__i2b>
 8011344:	4607      	mov	r7, r0
 8011346:	2d00      	cmp	r5, #0
 8011348:	dd0c      	ble.n	8011364 <_dtoa_r+0x754>
 801134a:	9b05      	ldr	r3, [sp, #20]
 801134c:	2b00      	cmp	r3, #0
 801134e:	dd09      	ble.n	8011364 <_dtoa_r+0x754>
 8011350:	42ab      	cmp	r3, r5
 8011352:	9a04      	ldr	r2, [sp, #16]
 8011354:	bfa8      	it	ge
 8011356:	462b      	movge	r3, r5
 8011358:	1ad2      	subs	r2, r2, r3
 801135a:	9204      	str	r2, [sp, #16]
 801135c:	9a05      	ldr	r2, [sp, #20]
 801135e:	1aed      	subs	r5, r5, r3
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	9305      	str	r3, [sp, #20]
 8011364:	9b07      	ldr	r3, [sp, #28]
 8011366:	b31b      	cbz	r3, 80113b0 <_dtoa_r+0x7a0>
 8011368:	9b08      	ldr	r3, [sp, #32]
 801136a:	2b00      	cmp	r3, #0
 801136c:	f000 80af 	beq.w	80114ce <_dtoa_r+0x8be>
 8011370:	2e00      	cmp	r6, #0
 8011372:	dd13      	ble.n	801139c <_dtoa_r+0x78c>
 8011374:	4639      	mov	r1, r7
 8011376:	4632      	mov	r2, r6
 8011378:	4620      	mov	r0, r4
 801137a:	f001 fa6b 	bl	8012854 <__pow5mult>
 801137e:	ee18 2a10 	vmov	r2, s16
 8011382:	4601      	mov	r1, r0
 8011384:	4607      	mov	r7, r0
 8011386:	4620      	mov	r0, r4
 8011388:	f001 f9ba 	bl	8012700 <__multiply>
 801138c:	ee18 1a10 	vmov	r1, s16
 8011390:	4680      	mov	r8, r0
 8011392:	4620      	mov	r0, r4
 8011394:	f001 f89c 	bl	80124d0 <_Bfree>
 8011398:	ee08 8a10 	vmov	s16, r8
 801139c:	9b07      	ldr	r3, [sp, #28]
 801139e:	1b9a      	subs	r2, r3, r6
 80113a0:	d006      	beq.n	80113b0 <_dtoa_r+0x7a0>
 80113a2:	ee18 1a10 	vmov	r1, s16
 80113a6:	4620      	mov	r0, r4
 80113a8:	f001 fa54 	bl	8012854 <__pow5mult>
 80113ac:	ee08 0a10 	vmov	s16, r0
 80113b0:	2101      	movs	r1, #1
 80113b2:	4620      	mov	r0, r4
 80113b4:	f001 f98e 	bl	80126d4 <__i2b>
 80113b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	4606      	mov	r6, r0
 80113be:	f340 8088 	ble.w	80114d2 <_dtoa_r+0x8c2>
 80113c2:	461a      	mov	r2, r3
 80113c4:	4601      	mov	r1, r0
 80113c6:	4620      	mov	r0, r4
 80113c8:	f001 fa44 	bl	8012854 <__pow5mult>
 80113cc:	9b06      	ldr	r3, [sp, #24]
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	4606      	mov	r6, r0
 80113d2:	f340 8081 	ble.w	80114d8 <_dtoa_r+0x8c8>
 80113d6:	f04f 0800 	mov.w	r8, #0
 80113da:	6933      	ldr	r3, [r6, #16]
 80113dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80113e0:	6918      	ldr	r0, [r3, #16]
 80113e2:	f001 f927 	bl	8012634 <__hi0bits>
 80113e6:	f1c0 0020 	rsb	r0, r0, #32
 80113ea:	9b05      	ldr	r3, [sp, #20]
 80113ec:	4418      	add	r0, r3
 80113ee:	f010 001f 	ands.w	r0, r0, #31
 80113f2:	f000 8092 	beq.w	801151a <_dtoa_r+0x90a>
 80113f6:	f1c0 0320 	rsb	r3, r0, #32
 80113fa:	2b04      	cmp	r3, #4
 80113fc:	f340 808a 	ble.w	8011514 <_dtoa_r+0x904>
 8011400:	f1c0 001c 	rsb	r0, r0, #28
 8011404:	9b04      	ldr	r3, [sp, #16]
 8011406:	4403      	add	r3, r0
 8011408:	9304      	str	r3, [sp, #16]
 801140a:	9b05      	ldr	r3, [sp, #20]
 801140c:	4403      	add	r3, r0
 801140e:	4405      	add	r5, r0
 8011410:	9305      	str	r3, [sp, #20]
 8011412:	9b04      	ldr	r3, [sp, #16]
 8011414:	2b00      	cmp	r3, #0
 8011416:	dd07      	ble.n	8011428 <_dtoa_r+0x818>
 8011418:	ee18 1a10 	vmov	r1, s16
 801141c:	461a      	mov	r2, r3
 801141e:	4620      	mov	r0, r4
 8011420:	f001 fa72 	bl	8012908 <__lshift>
 8011424:	ee08 0a10 	vmov	s16, r0
 8011428:	9b05      	ldr	r3, [sp, #20]
 801142a:	2b00      	cmp	r3, #0
 801142c:	dd05      	ble.n	801143a <_dtoa_r+0x82a>
 801142e:	4631      	mov	r1, r6
 8011430:	461a      	mov	r2, r3
 8011432:	4620      	mov	r0, r4
 8011434:	f001 fa68 	bl	8012908 <__lshift>
 8011438:	4606      	mov	r6, r0
 801143a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801143c:	2b00      	cmp	r3, #0
 801143e:	d06e      	beq.n	801151e <_dtoa_r+0x90e>
 8011440:	ee18 0a10 	vmov	r0, s16
 8011444:	4631      	mov	r1, r6
 8011446:	f001 facf 	bl	80129e8 <__mcmp>
 801144a:	2800      	cmp	r0, #0
 801144c:	da67      	bge.n	801151e <_dtoa_r+0x90e>
 801144e:	9b00      	ldr	r3, [sp, #0]
 8011450:	3b01      	subs	r3, #1
 8011452:	ee18 1a10 	vmov	r1, s16
 8011456:	9300      	str	r3, [sp, #0]
 8011458:	220a      	movs	r2, #10
 801145a:	2300      	movs	r3, #0
 801145c:	4620      	mov	r0, r4
 801145e:	f001 f859 	bl	8012514 <__multadd>
 8011462:	9b08      	ldr	r3, [sp, #32]
 8011464:	ee08 0a10 	vmov	s16, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	f000 81b1 	beq.w	80117d0 <_dtoa_r+0xbc0>
 801146e:	2300      	movs	r3, #0
 8011470:	4639      	mov	r1, r7
 8011472:	220a      	movs	r2, #10
 8011474:	4620      	mov	r0, r4
 8011476:	f001 f84d 	bl	8012514 <__multadd>
 801147a:	9b02      	ldr	r3, [sp, #8]
 801147c:	2b00      	cmp	r3, #0
 801147e:	4607      	mov	r7, r0
 8011480:	f300 808e 	bgt.w	80115a0 <_dtoa_r+0x990>
 8011484:	9b06      	ldr	r3, [sp, #24]
 8011486:	2b02      	cmp	r3, #2
 8011488:	dc51      	bgt.n	801152e <_dtoa_r+0x91e>
 801148a:	e089      	b.n	80115a0 <_dtoa_r+0x990>
 801148c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801148e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011492:	e74b      	b.n	801132c <_dtoa_r+0x71c>
 8011494:	9b03      	ldr	r3, [sp, #12]
 8011496:	1e5e      	subs	r6, r3, #1
 8011498:	9b07      	ldr	r3, [sp, #28]
 801149a:	42b3      	cmp	r3, r6
 801149c:	bfbf      	itttt	lt
 801149e:	9b07      	ldrlt	r3, [sp, #28]
 80114a0:	9607      	strlt	r6, [sp, #28]
 80114a2:	1af2      	sublt	r2, r6, r3
 80114a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80114a6:	bfb6      	itet	lt
 80114a8:	189b      	addlt	r3, r3, r2
 80114aa:	1b9e      	subge	r6, r3, r6
 80114ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80114ae:	9b03      	ldr	r3, [sp, #12]
 80114b0:	bfb8      	it	lt
 80114b2:	2600      	movlt	r6, #0
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	bfb7      	itett	lt
 80114b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80114bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80114c0:	1a9d      	sublt	r5, r3, r2
 80114c2:	2300      	movlt	r3, #0
 80114c4:	e734      	b.n	8011330 <_dtoa_r+0x720>
 80114c6:	9e07      	ldr	r6, [sp, #28]
 80114c8:	9d04      	ldr	r5, [sp, #16]
 80114ca:	9f08      	ldr	r7, [sp, #32]
 80114cc:	e73b      	b.n	8011346 <_dtoa_r+0x736>
 80114ce:	9a07      	ldr	r2, [sp, #28]
 80114d0:	e767      	b.n	80113a2 <_dtoa_r+0x792>
 80114d2:	9b06      	ldr	r3, [sp, #24]
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	dc18      	bgt.n	801150a <_dtoa_r+0x8fa>
 80114d8:	f1ba 0f00 	cmp.w	sl, #0
 80114dc:	d115      	bne.n	801150a <_dtoa_r+0x8fa>
 80114de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114e2:	b993      	cbnz	r3, 801150a <_dtoa_r+0x8fa>
 80114e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80114e8:	0d1b      	lsrs	r3, r3, #20
 80114ea:	051b      	lsls	r3, r3, #20
 80114ec:	b183      	cbz	r3, 8011510 <_dtoa_r+0x900>
 80114ee:	9b04      	ldr	r3, [sp, #16]
 80114f0:	3301      	adds	r3, #1
 80114f2:	9304      	str	r3, [sp, #16]
 80114f4:	9b05      	ldr	r3, [sp, #20]
 80114f6:	3301      	adds	r3, #1
 80114f8:	9305      	str	r3, [sp, #20]
 80114fa:	f04f 0801 	mov.w	r8, #1
 80114fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011500:	2b00      	cmp	r3, #0
 8011502:	f47f af6a 	bne.w	80113da <_dtoa_r+0x7ca>
 8011506:	2001      	movs	r0, #1
 8011508:	e76f      	b.n	80113ea <_dtoa_r+0x7da>
 801150a:	f04f 0800 	mov.w	r8, #0
 801150e:	e7f6      	b.n	80114fe <_dtoa_r+0x8ee>
 8011510:	4698      	mov	r8, r3
 8011512:	e7f4      	b.n	80114fe <_dtoa_r+0x8ee>
 8011514:	f43f af7d 	beq.w	8011412 <_dtoa_r+0x802>
 8011518:	4618      	mov	r0, r3
 801151a:	301c      	adds	r0, #28
 801151c:	e772      	b.n	8011404 <_dtoa_r+0x7f4>
 801151e:	9b03      	ldr	r3, [sp, #12]
 8011520:	2b00      	cmp	r3, #0
 8011522:	dc37      	bgt.n	8011594 <_dtoa_r+0x984>
 8011524:	9b06      	ldr	r3, [sp, #24]
 8011526:	2b02      	cmp	r3, #2
 8011528:	dd34      	ble.n	8011594 <_dtoa_r+0x984>
 801152a:	9b03      	ldr	r3, [sp, #12]
 801152c:	9302      	str	r3, [sp, #8]
 801152e:	9b02      	ldr	r3, [sp, #8]
 8011530:	b96b      	cbnz	r3, 801154e <_dtoa_r+0x93e>
 8011532:	4631      	mov	r1, r6
 8011534:	2205      	movs	r2, #5
 8011536:	4620      	mov	r0, r4
 8011538:	f000 ffec 	bl	8012514 <__multadd>
 801153c:	4601      	mov	r1, r0
 801153e:	4606      	mov	r6, r0
 8011540:	ee18 0a10 	vmov	r0, s16
 8011544:	f001 fa50 	bl	80129e8 <__mcmp>
 8011548:	2800      	cmp	r0, #0
 801154a:	f73f adbb 	bgt.w	80110c4 <_dtoa_r+0x4b4>
 801154e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011550:	9d01      	ldr	r5, [sp, #4]
 8011552:	43db      	mvns	r3, r3
 8011554:	9300      	str	r3, [sp, #0]
 8011556:	f04f 0800 	mov.w	r8, #0
 801155a:	4631      	mov	r1, r6
 801155c:	4620      	mov	r0, r4
 801155e:	f000 ffb7 	bl	80124d0 <_Bfree>
 8011562:	2f00      	cmp	r7, #0
 8011564:	f43f aea4 	beq.w	80112b0 <_dtoa_r+0x6a0>
 8011568:	f1b8 0f00 	cmp.w	r8, #0
 801156c:	d005      	beq.n	801157a <_dtoa_r+0x96a>
 801156e:	45b8      	cmp	r8, r7
 8011570:	d003      	beq.n	801157a <_dtoa_r+0x96a>
 8011572:	4641      	mov	r1, r8
 8011574:	4620      	mov	r0, r4
 8011576:	f000 ffab 	bl	80124d0 <_Bfree>
 801157a:	4639      	mov	r1, r7
 801157c:	4620      	mov	r0, r4
 801157e:	f000 ffa7 	bl	80124d0 <_Bfree>
 8011582:	e695      	b.n	80112b0 <_dtoa_r+0x6a0>
 8011584:	2600      	movs	r6, #0
 8011586:	4637      	mov	r7, r6
 8011588:	e7e1      	b.n	801154e <_dtoa_r+0x93e>
 801158a:	9700      	str	r7, [sp, #0]
 801158c:	4637      	mov	r7, r6
 801158e:	e599      	b.n	80110c4 <_dtoa_r+0x4b4>
 8011590:	40240000 	.word	0x40240000
 8011594:	9b08      	ldr	r3, [sp, #32]
 8011596:	2b00      	cmp	r3, #0
 8011598:	f000 80ca 	beq.w	8011730 <_dtoa_r+0xb20>
 801159c:	9b03      	ldr	r3, [sp, #12]
 801159e:	9302      	str	r3, [sp, #8]
 80115a0:	2d00      	cmp	r5, #0
 80115a2:	dd05      	ble.n	80115b0 <_dtoa_r+0x9a0>
 80115a4:	4639      	mov	r1, r7
 80115a6:	462a      	mov	r2, r5
 80115a8:	4620      	mov	r0, r4
 80115aa:	f001 f9ad 	bl	8012908 <__lshift>
 80115ae:	4607      	mov	r7, r0
 80115b0:	f1b8 0f00 	cmp.w	r8, #0
 80115b4:	d05b      	beq.n	801166e <_dtoa_r+0xa5e>
 80115b6:	6879      	ldr	r1, [r7, #4]
 80115b8:	4620      	mov	r0, r4
 80115ba:	f000 ff49 	bl	8012450 <_Balloc>
 80115be:	4605      	mov	r5, r0
 80115c0:	b928      	cbnz	r0, 80115ce <_dtoa_r+0x9be>
 80115c2:	4b87      	ldr	r3, [pc, #540]	; (80117e0 <_dtoa_r+0xbd0>)
 80115c4:	4602      	mov	r2, r0
 80115c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80115ca:	f7ff bb3b 	b.w	8010c44 <_dtoa_r+0x34>
 80115ce:	693a      	ldr	r2, [r7, #16]
 80115d0:	3202      	adds	r2, #2
 80115d2:	0092      	lsls	r2, r2, #2
 80115d4:	f107 010c 	add.w	r1, r7, #12
 80115d8:	300c      	adds	r0, #12
 80115da:	f7fc f865 	bl	800d6a8 <memcpy>
 80115de:	2201      	movs	r2, #1
 80115e0:	4629      	mov	r1, r5
 80115e2:	4620      	mov	r0, r4
 80115e4:	f001 f990 	bl	8012908 <__lshift>
 80115e8:	9b01      	ldr	r3, [sp, #4]
 80115ea:	f103 0901 	add.w	r9, r3, #1
 80115ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80115f2:	4413      	add	r3, r2
 80115f4:	9305      	str	r3, [sp, #20]
 80115f6:	f00a 0301 	and.w	r3, sl, #1
 80115fa:	46b8      	mov	r8, r7
 80115fc:	9304      	str	r3, [sp, #16]
 80115fe:	4607      	mov	r7, r0
 8011600:	4631      	mov	r1, r6
 8011602:	ee18 0a10 	vmov	r0, s16
 8011606:	f7ff fa77 	bl	8010af8 <quorem>
 801160a:	4641      	mov	r1, r8
 801160c:	9002      	str	r0, [sp, #8]
 801160e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011612:	ee18 0a10 	vmov	r0, s16
 8011616:	f001 f9e7 	bl	80129e8 <__mcmp>
 801161a:	463a      	mov	r2, r7
 801161c:	9003      	str	r0, [sp, #12]
 801161e:	4631      	mov	r1, r6
 8011620:	4620      	mov	r0, r4
 8011622:	f001 f9fd 	bl	8012a20 <__mdiff>
 8011626:	68c2      	ldr	r2, [r0, #12]
 8011628:	f109 3bff 	add.w	fp, r9, #4294967295
 801162c:	4605      	mov	r5, r0
 801162e:	bb02      	cbnz	r2, 8011672 <_dtoa_r+0xa62>
 8011630:	4601      	mov	r1, r0
 8011632:	ee18 0a10 	vmov	r0, s16
 8011636:	f001 f9d7 	bl	80129e8 <__mcmp>
 801163a:	4602      	mov	r2, r0
 801163c:	4629      	mov	r1, r5
 801163e:	4620      	mov	r0, r4
 8011640:	9207      	str	r2, [sp, #28]
 8011642:	f000 ff45 	bl	80124d0 <_Bfree>
 8011646:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801164a:	ea43 0102 	orr.w	r1, r3, r2
 801164e:	9b04      	ldr	r3, [sp, #16]
 8011650:	430b      	orrs	r3, r1
 8011652:	464d      	mov	r5, r9
 8011654:	d10f      	bne.n	8011676 <_dtoa_r+0xa66>
 8011656:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801165a:	d02a      	beq.n	80116b2 <_dtoa_r+0xaa2>
 801165c:	9b03      	ldr	r3, [sp, #12]
 801165e:	2b00      	cmp	r3, #0
 8011660:	dd02      	ble.n	8011668 <_dtoa_r+0xa58>
 8011662:	9b02      	ldr	r3, [sp, #8]
 8011664:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011668:	f88b a000 	strb.w	sl, [fp]
 801166c:	e775      	b.n	801155a <_dtoa_r+0x94a>
 801166e:	4638      	mov	r0, r7
 8011670:	e7ba      	b.n	80115e8 <_dtoa_r+0x9d8>
 8011672:	2201      	movs	r2, #1
 8011674:	e7e2      	b.n	801163c <_dtoa_r+0xa2c>
 8011676:	9b03      	ldr	r3, [sp, #12]
 8011678:	2b00      	cmp	r3, #0
 801167a:	db04      	blt.n	8011686 <_dtoa_r+0xa76>
 801167c:	9906      	ldr	r1, [sp, #24]
 801167e:	430b      	orrs	r3, r1
 8011680:	9904      	ldr	r1, [sp, #16]
 8011682:	430b      	orrs	r3, r1
 8011684:	d122      	bne.n	80116cc <_dtoa_r+0xabc>
 8011686:	2a00      	cmp	r2, #0
 8011688:	ddee      	ble.n	8011668 <_dtoa_r+0xa58>
 801168a:	ee18 1a10 	vmov	r1, s16
 801168e:	2201      	movs	r2, #1
 8011690:	4620      	mov	r0, r4
 8011692:	f001 f939 	bl	8012908 <__lshift>
 8011696:	4631      	mov	r1, r6
 8011698:	ee08 0a10 	vmov	s16, r0
 801169c:	f001 f9a4 	bl	80129e8 <__mcmp>
 80116a0:	2800      	cmp	r0, #0
 80116a2:	dc03      	bgt.n	80116ac <_dtoa_r+0xa9c>
 80116a4:	d1e0      	bne.n	8011668 <_dtoa_r+0xa58>
 80116a6:	f01a 0f01 	tst.w	sl, #1
 80116aa:	d0dd      	beq.n	8011668 <_dtoa_r+0xa58>
 80116ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80116b0:	d1d7      	bne.n	8011662 <_dtoa_r+0xa52>
 80116b2:	2339      	movs	r3, #57	; 0x39
 80116b4:	f88b 3000 	strb.w	r3, [fp]
 80116b8:	462b      	mov	r3, r5
 80116ba:	461d      	mov	r5, r3
 80116bc:	3b01      	subs	r3, #1
 80116be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80116c2:	2a39      	cmp	r2, #57	; 0x39
 80116c4:	d071      	beq.n	80117aa <_dtoa_r+0xb9a>
 80116c6:	3201      	adds	r2, #1
 80116c8:	701a      	strb	r2, [r3, #0]
 80116ca:	e746      	b.n	801155a <_dtoa_r+0x94a>
 80116cc:	2a00      	cmp	r2, #0
 80116ce:	dd07      	ble.n	80116e0 <_dtoa_r+0xad0>
 80116d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80116d4:	d0ed      	beq.n	80116b2 <_dtoa_r+0xaa2>
 80116d6:	f10a 0301 	add.w	r3, sl, #1
 80116da:	f88b 3000 	strb.w	r3, [fp]
 80116de:	e73c      	b.n	801155a <_dtoa_r+0x94a>
 80116e0:	9b05      	ldr	r3, [sp, #20]
 80116e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80116e6:	4599      	cmp	r9, r3
 80116e8:	d047      	beq.n	801177a <_dtoa_r+0xb6a>
 80116ea:	ee18 1a10 	vmov	r1, s16
 80116ee:	2300      	movs	r3, #0
 80116f0:	220a      	movs	r2, #10
 80116f2:	4620      	mov	r0, r4
 80116f4:	f000 ff0e 	bl	8012514 <__multadd>
 80116f8:	45b8      	cmp	r8, r7
 80116fa:	ee08 0a10 	vmov	s16, r0
 80116fe:	f04f 0300 	mov.w	r3, #0
 8011702:	f04f 020a 	mov.w	r2, #10
 8011706:	4641      	mov	r1, r8
 8011708:	4620      	mov	r0, r4
 801170a:	d106      	bne.n	801171a <_dtoa_r+0xb0a>
 801170c:	f000 ff02 	bl	8012514 <__multadd>
 8011710:	4680      	mov	r8, r0
 8011712:	4607      	mov	r7, r0
 8011714:	f109 0901 	add.w	r9, r9, #1
 8011718:	e772      	b.n	8011600 <_dtoa_r+0x9f0>
 801171a:	f000 fefb 	bl	8012514 <__multadd>
 801171e:	4639      	mov	r1, r7
 8011720:	4680      	mov	r8, r0
 8011722:	2300      	movs	r3, #0
 8011724:	220a      	movs	r2, #10
 8011726:	4620      	mov	r0, r4
 8011728:	f000 fef4 	bl	8012514 <__multadd>
 801172c:	4607      	mov	r7, r0
 801172e:	e7f1      	b.n	8011714 <_dtoa_r+0xb04>
 8011730:	9b03      	ldr	r3, [sp, #12]
 8011732:	9302      	str	r3, [sp, #8]
 8011734:	9d01      	ldr	r5, [sp, #4]
 8011736:	ee18 0a10 	vmov	r0, s16
 801173a:	4631      	mov	r1, r6
 801173c:	f7ff f9dc 	bl	8010af8 <quorem>
 8011740:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011744:	9b01      	ldr	r3, [sp, #4]
 8011746:	f805 ab01 	strb.w	sl, [r5], #1
 801174a:	1aea      	subs	r2, r5, r3
 801174c:	9b02      	ldr	r3, [sp, #8]
 801174e:	4293      	cmp	r3, r2
 8011750:	dd09      	ble.n	8011766 <_dtoa_r+0xb56>
 8011752:	ee18 1a10 	vmov	r1, s16
 8011756:	2300      	movs	r3, #0
 8011758:	220a      	movs	r2, #10
 801175a:	4620      	mov	r0, r4
 801175c:	f000 feda 	bl	8012514 <__multadd>
 8011760:	ee08 0a10 	vmov	s16, r0
 8011764:	e7e7      	b.n	8011736 <_dtoa_r+0xb26>
 8011766:	9b02      	ldr	r3, [sp, #8]
 8011768:	2b00      	cmp	r3, #0
 801176a:	bfc8      	it	gt
 801176c:	461d      	movgt	r5, r3
 801176e:	9b01      	ldr	r3, [sp, #4]
 8011770:	bfd8      	it	le
 8011772:	2501      	movle	r5, #1
 8011774:	441d      	add	r5, r3
 8011776:	f04f 0800 	mov.w	r8, #0
 801177a:	ee18 1a10 	vmov	r1, s16
 801177e:	2201      	movs	r2, #1
 8011780:	4620      	mov	r0, r4
 8011782:	f001 f8c1 	bl	8012908 <__lshift>
 8011786:	4631      	mov	r1, r6
 8011788:	ee08 0a10 	vmov	s16, r0
 801178c:	f001 f92c 	bl	80129e8 <__mcmp>
 8011790:	2800      	cmp	r0, #0
 8011792:	dc91      	bgt.n	80116b8 <_dtoa_r+0xaa8>
 8011794:	d102      	bne.n	801179c <_dtoa_r+0xb8c>
 8011796:	f01a 0f01 	tst.w	sl, #1
 801179a:	d18d      	bne.n	80116b8 <_dtoa_r+0xaa8>
 801179c:	462b      	mov	r3, r5
 801179e:	461d      	mov	r5, r3
 80117a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117a4:	2a30      	cmp	r2, #48	; 0x30
 80117a6:	d0fa      	beq.n	801179e <_dtoa_r+0xb8e>
 80117a8:	e6d7      	b.n	801155a <_dtoa_r+0x94a>
 80117aa:	9a01      	ldr	r2, [sp, #4]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d184      	bne.n	80116ba <_dtoa_r+0xaaa>
 80117b0:	9b00      	ldr	r3, [sp, #0]
 80117b2:	3301      	adds	r3, #1
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	2331      	movs	r3, #49	; 0x31
 80117b8:	7013      	strb	r3, [r2, #0]
 80117ba:	e6ce      	b.n	801155a <_dtoa_r+0x94a>
 80117bc:	4b09      	ldr	r3, [pc, #36]	; (80117e4 <_dtoa_r+0xbd4>)
 80117be:	f7ff ba95 	b.w	8010cec <_dtoa_r+0xdc>
 80117c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f47f aa6e 	bne.w	8010ca6 <_dtoa_r+0x96>
 80117ca:	4b07      	ldr	r3, [pc, #28]	; (80117e8 <_dtoa_r+0xbd8>)
 80117cc:	f7ff ba8e 	b.w	8010cec <_dtoa_r+0xdc>
 80117d0:	9b02      	ldr	r3, [sp, #8]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	dcae      	bgt.n	8011734 <_dtoa_r+0xb24>
 80117d6:	9b06      	ldr	r3, [sp, #24]
 80117d8:	2b02      	cmp	r3, #2
 80117da:	f73f aea8 	bgt.w	801152e <_dtoa_r+0x91e>
 80117de:	e7a9      	b.n	8011734 <_dtoa_r+0xb24>
 80117e0:	0803e179 	.word	0x0803e179
 80117e4:	0803e428 	.word	0x0803e428
 80117e8:	0803e111 	.word	0x0803e111

080117ec <__errno>:
 80117ec:	4b01      	ldr	r3, [pc, #4]	; (80117f4 <__errno+0x8>)
 80117ee:	6818      	ldr	r0, [r3, #0]
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop
 80117f4:	200002c0 	.word	0x200002c0

080117f8 <__sflush_r>:
 80117f8:	898a      	ldrh	r2, [r1, #12]
 80117fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117fe:	4605      	mov	r5, r0
 8011800:	0710      	lsls	r0, r2, #28
 8011802:	460c      	mov	r4, r1
 8011804:	d458      	bmi.n	80118b8 <__sflush_r+0xc0>
 8011806:	684b      	ldr	r3, [r1, #4]
 8011808:	2b00      	cmp	r3, #0
 801180a:	dc05      	bgt.n	8011818 <__sflush_r+0x20>
 801180c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801180e:	2b00      	cmp	r3, #0
 8011810:	dc02      	bgt.n	8011818 <__sflush_r+0x20>
 8011812:	2000      	movs	r0, #0
 8011814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801181a:	2e00      	cmp	r6, #0
 801181c:	d0f9      	beq.n	8011812 <__sflush_r+0x1a>
 801181e:	2300      	movs	r3, #0
 8011820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011824:	682f      	ldr	r7, [r5, #0]
 8011826:	602b      	str	r3, [r5, #0]
 8011828:	d032      	beq.n	8011890 <__sflush_r+0x98>
 801182a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801182c:	89a3      	ldrh	r3, [r4, #12]
 801182e:	075a      	lsls	r2, r3, #29
 8011830:	d505      	bpl.n	801183e <__sflush_r+0x46>
 8011832:	6863      	ldr	r3, [r4, #4]
 8011834:	1ac0      	subs	r0, r0, r3
 8011836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011838:	b10b      	cbz	r3, 801183e <__sflush_r+0x46>
 801183a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801183c:	1ac0      	subs	r0, r0, r3
 801183e:	2300      	movs	r3, #0
 8011840:	4602      	mov	r2, r0
 8011842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011844:	6a21      	ldr	r1, [r4, #32]
 8011846:	4628      	mov	r0, r5
 8011848:	47b0      	blx	r6
 801184a:	1c43      	adds	r3, r0, #1
 801184c:	89a3      	ldrh	r3, [r4, #12]
 801184e:	d106      	bne.n	801185e <__sflush_r+0x66>
 8011850:	6829      	ldr	r1, [r5, #0]
 8011852:	291d      	cmp	r1, #29
 8011854:	d82c      	bhi.n	80118b0 <__sflush_r+0xb8>
 8011856:	4a2a      	ldr	r2, [pc, #168]	; (8011900 <__sflush_r+0x108>)
 8011858:	40ca      	lsrs	r2, r1
 801185a:	07d6      	lsls	r6, r2, #31
 801185c:	d528      	bpl.n	80118b0 <__sflush_r+0xb8>
 801185e:	2200      	movs	r2, #0
 8011860:	6062      	str	r2, [r4, #4]
 8011862:	04d9      	lsls	r1, r3, #19
 8011864:	6922      	ldr	r2, [r4, #16]
 8011866:	6022      	str	r2, [r4, #0]
 8011868:	d504      	bpl.n	8011874 <__sflush_r+0x7c>
 801186a:	1c42      	adds	r2, r0, #1
 801186c:	d101      	bne.n	8011872 <__sflush_r+0x7a>
 801186e:	682b      	ldr	r3, [r5, #0]
 8011870:	b903      	cbnz	r3, 8011874 <__sflush_r+0x7c>
 8011872:	6560      	str	r0, [r4, #84]	; 0x54
 8011874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011876:	602f      	str	r7, [r5, #0]
 8011878:	2900      	cmp	r1, #0
 801187a:	d0ca      	beq.n	8011812 <__sflush_r+0x1a>
 801187c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011880:	4299      	cmp	r1, r3
 8011882:	d002      	beq.n	801188a <__sflush_r+0x92>
 8011884:	4628      	mov	r0, r5
 8011886:	f7fc f997 	bl	800dbb8 <_free_r>
 801188a:	2000      	movs	r0, #0
 801188c:	6360      	str	r0, [r4, #52]	; 0x34
 801188e:	e7c1      	b.n	8011814 <__sflush_r+0x1c>
 8011890:	6a21      	ldr	r1, [r4, #32]
 8011892:	2301      	movs	r3, #1
 8011894:	4628      	mov	r0, r5
 8011896:	47b0      	blx	r6
 8011898:	1c41      	adds	r1, r0, #1
 801189a:	d1c7      	bne.n	801182c <__sflush_r+0x34>
 801189c:	682b      	ldr	r3, [r5, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d0c4      	beq.n	801182c <__sflush_r+0x34>
 80118a2:	2b1d      	cmp	r3, #29
 80118a4:	d001      	beq.n	80118aa <__sflush_r+0xb2>
 80118a6:	2b16      	cmp	r3, #22
 80118a8:	d101      	bne.n	80118ae <__sflush_r+0xb6>
 80118aa:	602f      	str	r7, [r5, #0]
 80118ac:	e7b1      	b.n	8011812 <__sflush_r+0x1a>
 80118ae:	89a3      	ldrh	r3, [r4, #12]
 80118b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118b4:	81a3      	strh	r3, [r4, #12]
 80118b6:	e7ad      	b.n	8011814 <__sflush_r+0x1c>
 80118b8:	690f      	ldr	r7, [r1, #16]
 80118ba:	2f00      	cmp	r7, #0
 80118bc:	d0a9      	beq.n	8011812 <__sflush_r+0x1a>
 80118be:	0793      	lsls	r3, r2, #30
 80118c0:	680e      	ldr	r6, [r1, #0]
 80118c2:	bf08      	it	eq
 80118c4:	694b      	ldreq	r3, [r1, #20]
 80118c6:	600f      	str	r7, [r1, #0]
 80118c8:	bf18      	it	ne
 80118ca:	2300      	movne	r3, #0
 80118cc:	eba6 0807 	sub.w	r8, r6, r7
 80118d0:	608b      	str	r3, [r1, #8]
 80118d2:	f1b8 0f00 	cmp.w	r8, #0
 80118d6:	dd9c      	ble.n	8011812 <__sflush_r+0x1a>
 80118d8:	6a21      	ldr	r1, [r4, #32]
 80118da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118dc:	4643      	mov	r3, r8
 80118de:	463a      	mov	r2, r7
 80118e0:	4628      	mov	r0, r5
 80118e2:	47b0      	blx	r6
 80118e4:	2800      	cmp	r0, #0
 80118e6:	dc06      	bgt.n	80118f6 <__sflush_r+0xfe>
 80118e8:	89a3      	ldrh	r3, [r4, #12]
 80118ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ee:	81a3      	strh	r3, [r4, #12]
 80118f0:	f04f 30ff 	mov.w	r0, #4294967295
 80118f4:	e78e      	b.n	8011814 <__sflush_r+0x1c>
 80118f6:	4407      	add	r7, r0
 80118f8:	eba8 0800 	sub.w	r8, r8, r0
 80118fc:	e7e9      	b.n	80118d2 <__sflush_r+0xda>
 80118fe:	bf00      	nop
 8011900:	20400001 	.word	0x20400001

08011904 <_fflush_r>:
 8011904:	b538      	push	{r3, r4, r5, lr}
 8011906:	690b      	ldr	r3, [r1, #16]
 8011908:	4605      	mov	r5, r0
 801190a:	460c      	mov	r4, r1
 801190c:	b913      	cbnz	r3, 8011914 <_fflush_r+0x10>
 801190e:	2500      	movs	r5, #0
 8011910:	4628      	mov	r0, r5
 8011912:	bd38      	pop	{r3, r4, r5, pc}
 8011914:	b118      	cbz	r0, 801191e <_fflush_r+0x1a>
 8011916:	6983      	ldr	r3, [r0, #24]
 8011918:	b90b      	cbnz	r3, 801191e <_fflush_r+0x1a>
 801191a:	f000 f887 	bl	8011a2c <__sinit>
 801191e:	4b14      	ldr	r3, [pc, #80]	; (8011970 <_fflush_r+0x6c>)
 8011920:	429c      	cmp	r4, r3
 8011922:	d11b      	bne.n	801195c <_fflush_r+0x58>
 8011924:	686c      	ldr	r4, [r5, #4]
 8011926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d0ef      	beq.n	801190e <_fflush_r+0xa>
 801192e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011930:	07d0      	lsls	r0, r2, #31
 8011932:	d404      	bmi.n	801193e <_fflush_r+0x3a>
 8011934:	0599      	lsls	r1, r3, #22
 8011936:	d402      	bmi.n	801193e <_fflush_r+0x3a>
 8011938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801193a:	f000 fcd5 	bl	80122e8 <__retarget_lock_acquire_recursive>
 801193e:	4628      	mov	r0, r5
 8011940:	4621      	mov	r1, r4
 8011942:	f7ff ff59 	bl	80117f8 <__sflush_r>
 8011946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011948:	07da      	lsls	r2, r3, #31
 801194a:	4605      	mov	r5, r0
 801194c:	d4e0      	bmi.n	8011910 <_fflush_r+0xc>
 801194e:	89a3      	ldrh	r3, [r4, #12]
 8011950:	059b      	lsls	r3, r3, #22
 8011952:	d4dd      	bmi.n	8011910 <_fflush_r+0xc>
 8011954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011956:	f000 fcc9 	bl	80122ec <__retarget_lock_release_recursive>
 801195a:	e7d9      	b.n	8011910 <_fflush_r+0xc>
 801195c:	4b05      	ldr	r3, [pc, #20]	; (8011974 <_fflush_r+0x70>)
 801195e:	429c      	cmp	r4, r3
 8011960:	d101      	bne.n	8011966 <_fflush_r+0x62>
 8011962:	68ac      	ldr	r4, [r5, #8]
 8011964:	e7df      	b.n	8011926 <_fflush_r+0x22>
 8011966:	4b04      	ldr	r3, [pc, #16]	; (8011978 <_fflush_r+0x74>)
 8011968:	429c      	cmp	r4, r3
 801196a:	bf08      	it	eq
 801196c:	68ec      	ldreq	r4, [r5, #12]
 801196e:	e7da      	b.n	8011926 <_fflush_r+0x22>
 8011970:	0803e1ac 	.word	0x0803e1ac
 8011974:	0803e1cc 	.word	0x0803e1cc
 8011978:	0803e18c 	.word	0x0803e18c

0801197c <std>:
 801197c:	2300      	movs	r3, #0
 801197e:	b510      	push	{r4, lr}
 8011980:	4604      	mov	r4, r0
 8011982:	e9c0 3300 	strd	r3, r3, [r0]
 8011986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801198a:	6083      	str	r3, [r0, #8]
 801198c:	8181      	strh	r1, [r0, #12]
 801198e:	6643      	str	r3, [r0, #100]	; 0x64
 8011990:	81c2      	strh	r2, [r0, #14]
 8011992:	6183      	str	r3, [r0, #24]
 8011994:	4619      	mov	r1, r3
 8011996:	2208      	movs	r2, #8
 8011998:	305c      	adds	r0, #92	; 0x5c
 801199a:	f7fb fe93 	bl	800d6c4 <memset>
 801199e:	4b05      	ldr	r3, [pc, #20]	; (80119b4 <std+0x38>)
 80119a0:	6263      	str	r3, [r4, #36]	; 0x24
 80119a2:	4b05      	ldr	r3, [pc, #20]	; (80119b8 <std+0x3c>)
 80119a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80119a6:	4b05      	ldr	r3, [pc, #20]	; (80119bc <std+0x40>)
 80119a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119aa:	4b05      	ldr	r3, [pc, #20]	; (80119c0 <std+0x44>)
 80119ac:	6224      	str	r4, [r4, #32]
 80119ae:	6323      	str	r3, [r4, #48]	; 0x30
 80119b0:	bd10      	pop	{r4, pc}
 80119b2:	bf00      	nop
 80119b4:	0800e9b9 	.word	0x0800e9b9
 80119b8:	0800e9df 	.word	0x0800e9df
 80119bc:	0800ea17 	.word	0x0800ea17
 80119c0:	0800ea3b 	.word	0x0800ea3b

080119c4 <_cleanup_r>:
 80119c4:	4901      	ldr	r1, [pc, #4]	; (80119cc <_cleanup_r+0x8>)
 80119c6:	f000 b8af 	b.w	8011b28 <_fwalk_reent>
 80119ca:	bf00      	nop
 80119cc:	08011905 	.word	0x08011905

080119d0 <__sfmoreglue>:
 80119d0:	b570      	push	{r4, r5, r6, lr}
 80119d2:	2268      	movs	r2, #104	; 0x68
 80119d4:	1e4d      	subs	r5, r1, #1
 80119d6:	4355      	muls	r5, r2
 80119d8:	460e      	mov	r6, r1
 80119da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80119de:	f7fc f957 	bl	800dc90 <_malloc_r>
 80119e2:	4604      	mov	r4, r0
 80119e4:	b140      	cbz	r0, 80119f8 <__sfmoreglue+0x28>
 80119e6:	2100      	movs	r1, #0
 80119e8:	e9c0 1600 	strd	r1, r6, [r0]
 80119ec:	300c      	adds	r0, #12
 80119ee:	60a0      	str	r0, [r4, #8]
 80119f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80119f4:	f7fb fe66 	bl	800d6c4 <memset>
 80119f8:	4620      	mov	r0, r4
 80119fa:	bd70      	pop	{r4, r5, r6, pc}

080119fc <__sfp_lock_acquire>:
 80119fc:	4801      	ldr	r0, [pc, #4]	; (8011a04 <__sfp_lock_acquire+0x8>)
 80119fe:	f000 bc73 	b.w	80122e8 <__retarget_lock_acquire_recursive>
 8011a02:	bf00      	nop
 8011a04:	20003c22 	.word	0x20003c22

08011a08 <__sfp_lock_release>:
 8011a08:	4801      	ldr	r0, [pc, #4]	; (8011a10 <__sfp_lock_release+0x8>)
 8011a0a:	f000 bc6f 	b.w	80122ec <__retarget_lock_release_recursive>
 8011a0e:	bf00      	nop
 8011a10:	20003c22 	.word	0x20003c22

08011a14 <__sinit_lock_acquire>:
 8011a14:	4801      	ldr	r0, [pc, #4]	; (8011a1c <__sinit_lock_acquire+0x8>)
 8011a16:	f000 bc67 	b.w	80122e8 <__retarget_lock_acquire_recursive>
 8011a1a:	bf00      	nop
 8011a1c:	20003c23 	.word	0x20003c23

08011a20 <__sinit_lock_release>:
 8011a20:	4801      	ldr	r0, [pc, #4]	; (8011a28 <__sinit_lock_release+0x8>)
 8011a22:	f000 bc63 	b.w	80122ec <__retarget_lock_release_recursive>
 8011a26:	bf00      	nop
 8011a28:	20003c23 	.word	0x20003c23

08011a2c <__sinit>:
 8011a2c:	b510      	push	{r4, lr}
 8011a2e:	4604      	mov	r4, r0
 8011a30:	f7ff fff0 	bl	8011a14 <__sinit_lock_acquire>
 8011a34:	69a3      	ldr	r3, [r4, #24]
 8011a36:	b11b      	cbz	r3, 8011a40 <__sinit+0x14>
 8011a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a3c:	f7ff bff0 	b.w	8011a20 <__sinit_lock_release>
 8011a40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011a44:	6523      	str	r3, [r4, #80]	; 0x50
 8011a46:	4b13      	ldr	r3, [pc, #76]	; (8011a94 <__sinit+0x68>)
 8011a48:	4a13      	ldr	r2, [pc, #76]	; (8011a98 <__sinit+0x6c>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011a4e:	42a3      	cmp	r3, r4
 8011a50:	bf04      	itt	eq
 8011a52:	2301      	moveq	r3, #1
 8011a54:	61a3      	streq	r3, [r4, #24]
 8011a56:	4620      	mov	r0, r4
 8011a58:	f000 f820 	bl	8011a9c <__sfp>
 8011a5c:	6060      	str	r0, [r4, #4]
 8011a5e:	4620      	mov	r0, r4
 8011a60:	f000 f81c 	bl	8011a9c <__sfp>
 8011a64:	60a0      	str	r0, [r4, #8]
 8011a66:	4620      	mov	r0, r4
 8011a68:	f000 f818 	bl	8011a9c <__sfp>
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	60e0      	str	r0, [r4, #12]
 8011a70:	2104      	movs	r1, #4
 8011a72:	6860      	ldr	r0, [r4, #4]
 8011a74:	f7ff ff82 	bl	801197c <std>
 8011a78:	68a0      	ldr	r0, [r4, #8]
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	2109      	movs	r1, #9
 8011a7e:	f7ff ff7d 	bl	801197c <std>
 8011a82:	68e0      	ldr	r0, [r4, #12]
 8011a84:	2202      	movs	r2, #2
 8011a86:	2112      	movs	r1, #18
 8011a88:	f7ff ff78 	bl	801197c <std>
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	61a3      	str	r3, [r4, #24]
 8011a90:	e7d2      	b.n	8011a38 <__sinit+0xc>
 8011a92:	bf00      	nop
 8011a94:	0803dbfc 	.word	0x0803dbfc
 8011a98:	080119c5 	.word	0x080119c5

08011a9c <__sfp>:
 8011a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a9e:	4607      	mov	r7, r0
 8011aa0:	f7ff ffac 	bl	80119fc <__sfp_lock_acquire>
 8011aa4:	4b1e      	ldr	r3, [pc, #120]	; (8011b20 <__sfp+0x84>)
 8011aa6:	681e      	ldr	r6, [r3, #0]
 8011aa8:	69b3      	ldr	r3, [r6, #24]
 8011aaa:	b913      	cbnz	r3, 8011ab2 <__sfp+0x16>
 8011aac:	4630      	mov	r0, r6
 8011aae:	f7ff ffbd 	bl	8011a2c <__sinit>
 8011ab2:	3648      	adds	r6, #72	; 0x48
 8011ab4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	d503      	bpl.n	8011ac4 <__sfp+0x28>
 8011abc:	6833      	ldr	r3, [r6, #0]
 8011abe:	b30b      	cbz	r3, 8011b04 <__sfp+0x68>
 8011ac0:	6836      	ldr	r6, [r6, #0]
 8011ac2:	e7f7      	b.n	8011ab4 <__sfp+0x18>
 8011ac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011ac8:	b9d5      	cbnz	r5, 8011b00 <__sfp+0x64>
 8011aca:	4b16      	ldr	r3, [pc, #88]	; (8011b24 <__sfp+0x88>)
 8011acc:	60e3      	str	r3, [r4, #12]
 8011ace:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011ad2:	6665      	str	r5, [r4, #100]	; 0x64
 8011ad4:	f000 fc06 	bl	80122e4 <__retarget_lock_init_recursive>
 8011ad8:	f7ff ff96 	bl	8011a08 <__sfp_lock_release>
 8011adc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011ae0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011ae4:	6025      	str	r5, [r4, #0]
 8011ae6:	61a5      	str	r5, [r4, #24]
 8011ae8:	2208      	movs	r2, #8
 8011aea:	4629      	mov	r1, r5
 8011aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011af0:	f7fb fde8 	bl	800d6c4 <memset>
 8011af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011afc:	4620      	mov	r0, r4
 8011afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b00:	3468      	adds	r4, #104	; 0x68
 8011b02:	e7d9      	b.n	8011ab8 <__sfp+0x1c>
 8011b04:	2104      	movs	r1, #4
 8011b06:	4638      	mov	r0, r7
 8011b08:	f7ff ff62 	bl	80119d0 <__sfmoreglue>
 8011b0c:	4604      	mov	r4, r0
 8011b0e:	6030      	str	r0, [r6, #0]
 8011b10:	2800      	cmp	r0, #0
 8011b12:	d1d5      	bne.n	8011ac0 <__sfp+0x24>
 8011b14:	f7ff ff78 	bl	8011a08 <__sfp_lock_release>
 8011b18:	230c      	movs	r3, #12
 8011b1a:	603b      	str	r3, [r7, #0]
 8011b1c:	e7ee      	b.n	8011afc <__sfp+0x60>
 8011b1e:	bf00      	nop
 8011b20:	0803dbfc 	.word	0x0803dbfc
 8011b24:	ffff0001 	.word	0xffff0001

08011b28 <_fwalk_reent>:
 8011b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b2c:	4606      	mov	r6, r0
 8011b2e:	4688      	mov	r8, r1
 8011b30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011b34:	2700      	movs	r7, #0
 8011b36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b3a:	f1b9 0901 	subs.w	r9, r9, #1
 8011b3e:	d505      	bpl.n	8011b4c <_fwalk_reent+0x24>
 8011b40:	6824      	ldr	r4, [r4, #0]
 8011b42:	2c00      	cmp	r4, #0
 8011b44:	d1f7      	bne.n	8011b36 <_fwalk_reent+0xe>
 8011b46:	4638      	mov	r0, r7
 8011b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b4c:	89ab      	ldrh	r3, [r5, #12]
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d907      	bls.n	8011b62 <_fwalk_reent+0x3a>
 8011b52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b56:	3301      	adds	r3, #1
 8011b58:	d003      	beq.n	8011b62 <_fwalk_reent+0x3a>
 8011b5a:	4629      	mov	r1, r5
 8011b5c:	4630      	mov	r0, r6
 8011b5e:	47c0      	blx	r8
 8011b60:	4307      	orrs	r7, r0
 8011b62:	3568      	adds	r5, #104	; 0x68
 8011b64:	e7e9      	b.n	8011b3a <_fwalk_reent+0x12>

08011b66 <rshift>:
 8011b66:	6903      	ldr	r3, [r0, #16]
 8011b68:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b70:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011b74:	f100 0414 	add.w	r4, r0, #20
 8011b78:	dd45      	ble.n	8011c06 <rshift+0xa0>
 8011b7a:	f011 011f 	ands.w	r1, r1, #31
 8011b7e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011b82:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011b86:	d10c      	bne.n	8011ba2 <rshift+0x3c>
 8011b88:	f100 0710 	add.w	r7, r0, #16
 8011b8c:	4629      	mov	r1, r5
 8011b8e:	42b1      	cmp	r1, r6
 8011b90:	d334      	bcc.n	8011bfc <rshift+0x96>
 8011b92:	1a9b      	subs	r3, r3, r2
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	1eea      	subs	r2, r5, #3
 8011b98:	4296      	cmp	r6, r2
 8011b9a:	bf38      	it	cc
 8011b9c:	2300      	movcc	r3, #0
 8011b9e:	4423      	add	r3, r4
 8011ba0:	e015      	b.n	8011bce <rshift+0x68>
 8011ba2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011ba6:	f1c1 0820 	rsb	r8, r1, #32
 8011baa:	40cf      	lsrs	r7, r1
 8011bac:	f105 0e04 	add.w	lr, r5, #4
 8011bb0:	46a1      	mov	r9, r4
 8011bb2:	4576      	cmp	r6, lr
 8011bb4:	46f4      	mov	ip, lr
 8011bb6:	d815      	bhi.n	8011be4 <rshift+0x7e>
 8011bb8:	1a9a      	subs	r2, r3, r2
 8011bba:	0092      	lsls	r2, r2, #2
 8011bbc:	3a04      	subs	r2, #4
 8011bbe:	3501      	adds	r5, #1
 8011bc0:	42ae      	cmp	r6, r5
 8011bc2:	bf38      	it	cc
 8011bc4:	2200      	movcc	r2, #0
 8011bc6:	18a3      	adds	r3, r4, r2
 8011bc8:	50a7      	str	r7, [r4, r2]
 8011bca:	b107      	cbz	r7, 8011bce <rshift+0x68>
 8011bcc:	3304      	adds	r3, #4
 8011bce:	1b1a      	subs	r2, r3, r4
 8011bd0:	42a3      	cmp	r3, r4
 8011bd2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011bd6:	bf08      	it	eq
 8011bd8:	2300      	moveq	r3, #0
 8011bda:	6102      	str	r2, [r0, #16]
 8011bdc:	bf08      	it	eq
 8011bde:	6143      	streq	r3, [r0, #20]
 8011be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011be4:	f8dc c000 	ldr.w	ip, [ip]
 8011be8:	fa0c fc08 	lsl.w	ip, ip, r8
 8011bec:	ea4c 0707 	orr.w	r7, ip, r7
 8011bf0:	f849 7b04 	str.w	r7, [r9], #4
 8011bf4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011bf8:	40cf      	lsrs	r7, r1
 8011bfa:	e7da      	b.n	8011bb2 <rshift+0x4c>
 8011bfc:	f851 cb04 	ldr.w	ip, [r1], #4
 8011c00:	f847 cf04 	str.w	ip, [r7, #4]!
 8011c04:	e7c3      	b.n	8011b8e <rshift+0x28>
 8011c06:	4623      	mov	r3, r4
 8011c08:	e7e1      	b.n	8011bce <rshift+0x68>

08011c0a <__hexdig_fun>:
 8011c0a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011c0e:	2b09      	cmp	r3, #9
 8011c10:	d802      	bhi.n	8011c18 <__hexdig_fun+0xe>
 8011c12:	3820      	subs	r0, #32
 8011c14:	b2c0      	uxtb	r0, r0
 8011c16:	4770      	bx	lr
 8011c18:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011c1c:	2b05      	cmp	r3, #5
 8011c1e:	d801      	bhi.n	8011c24 <__hexdig_fun+0x1a>
 8011c20:	3847      	subs	r0, #71	; 0x47
 8011c22:	e7f7      	b.n	8011c14 <__hexdig_fun+0xa>
 8011c24:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011c28:	2b05      	cmp	r3, #5
 8011c2a:	d801      	bhi.n	8011c30 <__hexdig_fun+0x26>
 8011c2c:	3827      	subs	r0, #39	; 0x27
 8011c2e:	e7f1      	b.n	8011c14 <__hexdig_fun+0xa>
 8011c30:	2000      	movs	r0, #0
 8011c32:	4770      	bx	lr

08011c34 <__gethex>:
 8011c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c38:	ed2d 8b02 	vpush	{d8}
 8011c3c:	b089      	sub	sp, #36	; 0x24
 8011c3e:	ee08 0a10 	vmov	s16, r0
 8011c42:	9304      	str	r3, [sp, #16]
 8011c44:	4bb4      	ldr	r3, [pc, #720]	; (8011f18 <__gethex+0x2e4>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	9301      	str	r3, [sp, #4]
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	468b      	mov	fp, r1
 8011c4e:	4690      	mov	r8, r2
 8011c50:	f7ee face 	bl	80001f0 <strlen>
 8011c54:	9b01      	ldr	r3, [sp, #4]
 8011c56:	f8db 2000 	ldr.w	r2, [fp]
 8011c5a:	4403      	add	r3, r0
 8011c5c:	4682      	mov	sl, r0
 8011c5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011c62:	9305      	str	r3, [sp, #20]
 8011c64:	1c93      	adds	r3, r2, #2
 8011c66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011c6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011c6e:	32fe      	adds	r2, #254	; 0xfe
 8011c70:	18d1      	adds	r1, r2, r3
 8011c72:	461f      	mov	r7, r3
 8011c74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011c78:	9100      	str	r1, [sp, #0]
 8011c7a:	2830      	cmp	r0, #48	; 0x30
 8011c7c:	d0f8      	beq.n	8011c70 <__gethex+0x3c>
 8011c7e:	f7ff ffc4 	bl	8011c0a <__hexdig_fun>
 8011c82:	4604      	mov	r4, r0
 8011c84:	2800      	cmp	r0, #0
 8011c86:	d13a      	bne.n	8011cfe <__gethex+0xca>
 8011c88:	9901      	ldr	r1, [sp, #4]
 8011c8a:	4652      	mov	r2, sl
 8011c8c:	4638      	mov	r0, r7
 8011c8e:	f001 fe2f 	bl	80138f0 <strncmp>
 8011c92:	4605      	mov	r5, r0
 8011c94:	2800      	cmp	r0, #0
 8011c96:	d168      	bne.n	8011d6a <__gethex+0x136>
 8011c98:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011c9c:	eb07 060a 	add.w	r6, r7, sl
 8011ca0:	f7ff ffb3 	bl	8011c0a <__hexdig_fun>
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d062      	beq.n	8011d6e <__gethex+0x13a>
 8011ca8:	4633      	mov	r3, r6
 8011caa:	7818      	ldrb	r0, [r3, #0]
 8011cac:	2830      	cmp	r0, #48	; 0x30
 8011cae:	461f      	mov	r7, r3
 8011cb0:	f103 0301 	add.w	r3, r3, #1
 8011cb4:	d0f9      	beq.n	8011caa <__gethex+0x76>
 8011cb6:	f7ff ffa8 	bl	8011c0a <__hexdig_fun>
 8011cba:	2301      	movs	r3, #1
 8011cbc:	fab0 f480 	clz	r4, r0
 8011cc0:	0964      	lsrs	r4, r4, #5
 8011cc2:	4635      	mov	r5, r6
 8011cc4:	9300      	str	r3, [sp, #0]
 8011cc6:	463a      	mov	r2, r7
 8011cc8:	4616      	mov	r6, r2
 8011cca:	3201      	adds	r2, #1
 8011ccc:	7830      	ldrb	r0, [r6, #0]
 8011cce:	f7ff ff9c 	bl	8011c0a <__hexdig_fun>
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d1f8      	bne.n	8011cc8 <__gethex+0x94>
 8011cd6:	9901      	ldr	r1, [sp, #4]
 8011cd8:	4652      	mov	r2, sl
 8011cda:	4630      	mov	r0, r6
 8011cdc:	f001 fe08 	bl	80138f0 <strncmp>
 8011ce0:	b980      	cbnz	r0, 8011d04 <__gethex+0xd0>
 8011ce2:	b94d      	cbnz	r5, 8011cf8 <__gethex+0xc4>
 8011ce4:	eb06 050a 	add.w	r5, r6, sl
 8011ce8:	462a      	mov	r2, r5
 8011cea:	4616      	mov	r6, r2
 8011cec:	3201      	adds	r2, #1
 8011cee:	7830      	ldrb	r0, [r6, #0]
 8011cf0:	f7ff ff8b 	bl	8011c0a <__hexdig_fun>
 8011cf4:	2800      	cmp	r0, #0
 8011cf6:	d1f8      	bne.n	8011cea <__gethex+0xb6>
 8011cf8:	1bad      	subs	r5, r5, r6
 8011cfa:	00ad      	lsls	r5, r5, #2
 8011cfc:	e004      	b.n	8011d08 <__gethex+0xd4>
 8011cfe:	2400      	movs	r4, #0
 8011d00:	4625      	mov	r5, r4
 8011d02:	e7e0      	b.n	8011cc6 <__gethex+0x92>
 8011d04:	2d00      	cmp	r5, #0
 8011d06:	d1f7      	bne.n	8011cf8 <__gethex+0xc4>
 8011d08:	7833      	ldrb	r3, [r6, #0]
 8011d0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011d0e:	2b50      	cmp	r3, #80	; 0x50
 8011d10:	d13b      	bne.n	8011d8a <__gethex+0x156>
 8011d12:	7873      	ldrb	r3, [r6, #1]
 8011d14:	2b2b      	cmp	r3, #43	; 0x2b
 8011d16:	d02c      	beq.n	8011d72 <__gethex+0x13e>
 8011d18:	2b2d      	cmp	r3, #45	; 0x2d
 8011d1a:	d02e      	beq.n	8011d7a <__gethex+0x146>
 8011d1c:	1c71      	adds	r1, r6, #1
 8011d1e:	f04f 0900 	mov.w	r9, #0
 8011d22:	7808      	ldrb	r0, [r1, #0]
 8011d24:	f7ff ff71 	bl	8011c0a <__hexdig_fun>
 8011d28:	1e43      	subs	r3, r0, #1
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	2b18      	cmp	r3, #24
 8011d2e:	d82c      	bhi.n	8011d8a <__gethex+0x156>
 8011d30:	f1a0 0210 	sub.w	r2, r0, #16
 8011d34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011d38:	f7ff ff67 	bl	8011c0a <__hexdig_fun>
 8011d3c:	1e43      	subs	r3, r0, #1
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	2b18      	cmp	r3, #24
 8011d42:	d91d      	bls.n	8011d80 <__gethex+0x14c>
 8011d44:	f1b9 0f00 	cmp.w	r9, #0
 8011d48:	d000      	beq.n	8011d4c <__gethex+0x118>
 8011d4a:	4252      	negs	r2, r2
 8011d4c:	4415      	add	r5, r2
 8011d4e:	f8cb 1000 	str.w	r1, [fp]
 8011d52:	b1e4      	cbz	r4, 8011d8e <__gethex+0x15a>
 8011d54:	9b00      	ldr	r3, [sp, #0]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	bf14      	ite	ne
 8011d5a:	2700      	movne	r7, #0
 8011d5c:	2706      	moveq	r7, #6
 8011d5e:	4638      	mov	r0, r7
 8011d60:	b009      	add	sp, #36	; 0x24
 8011d62:	ecbd 8b02 	vpop	{d8}
 8011d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6a:	463e      	mov	r6, r7
 8011d6c:	4625      	mov	r5, r4
 8011d6e:	2401      	movs	r4, #1
 8011d70:	e7ca      	b.n	8011d08 <__gethex+0xd4>
 8011d72:	f04f 0900 	mov.w	r9, #0
 8011d76:	1cb1      	adds	r1, r6, #2
 8011d78:	e7d3      	b.n	8011d22 <__gethex+0xee>
 8011d7a:	f04f 0901 	mov.w	r9, #1
 8011d7e:	e7fa      	b.n	8011d76 <__gethex+0x142>
 8011d80:	230a      	movs	r3, #10
 8011d82:	fb03 0202 	mla	r2, r3, r2, r0
 8011d86:	3a10      	subs	r2, #16
 8011d88:	e7d4      	b.n	8011d34 <__gethex+0x100>
 8011d8a:	4631      	mov	r1, r6
 8011d8c:	e7df      	b.n	8011d4e <__gethex+0x11a>
 8011d8e:	1bf3      	subs	r3, r6, r7
 8011d90:	3b01      	subs	r3, #1
 8011d92:	4621      	mov	r1, r4
 8011d94:	2b07      	cmp	r3, #7
 8011d96:	dc0b      	bgt.n	8011db0 <__gethex+0x17c>
 8011d98:	ee18 0a10 	vmov	r0, s16
 8011d9c:	f000 fb58 	bl	8012450 <_Balloc>
 8011da0:	4604      	mov	r4, r0
 8011da2:	b940      	cbnz	r0, 8011db6 <__gethex+0x182>
 8011da4:	4b5d      	ldr	r3, [pc, #372]	; (8011f1c <__gethex+0x2e8>)
 8011da6:	4602      	mov	r2, r0
 8011da8:	21de      	movs	r1, #222	; 0xde
 8011daa:	485d      	ldr	r0, [pc, #372]	; (8011f20 <__gethex+0x2ec>)
 8011dac:	f7fb fc10 	bl	800d5d0 <__assert_func>
 8011db0:	3101      	adds	r1, #1
 8011db2:	105b      	asrs	r3, r3, #1
 8011db4:	e7ee      	b.n	8011d94 <__gethex+0x160>
 8011db6:	f100 0914 	add.w	r9, r0, #20
 8011dba:	f04f 0b00 	mov.w	fp, #0
 8011dbe:	f1ca 0301 	rsb	r3, sl, #1
 8011dc2:	f8cd 9008 	str.w	r9, [sp, #8]
 8011dc6:	f8cd b000 	str.w	fp, [sp]
 8011dca:	9306      	str	r3, [sp, #24]
 8011dcc:	42b7      	cmp	r7, r6
 8011dce:	d340      	bcc.n	8011e52 <__gethex+0x21e>
 8011dd0:	9802      	ldr	r0, [sp, #8]
 8011dd2:	9b00      	ldr	r3, [sp, #0]
 8011dd4:	f840 3b04 	str.w	r3, [r0], #4
 8011dd8:	eba0 0009 	sub.w	r0, r0, r9
 8011ddc:	1080      	asrs	r0, r0, #2
 8011dde:	0146      	lsls	r6, r0, #5
 8011de0:	6120      	str	r0, [r4, #16]
 8011de2:	4618      	mov	r0, r3
 8011de4:	f000 fc26 	bl	8012634 <__hi0bits>
 8011de8:	1a30      	subs	r0, r6, r0
 8011dea:	f8d8 6000 	ldr.w	r6, [r8]
 8011dee:	42b0      	cmp	r0, r6
 8011df0:	dd63      	ble.n	8011eba <__gethex+0x286>
 8011df2:	1b87      	subs	r7, r0, r6
 8011df4:	4639      	mov	r1, r7
 8011df6:	4620      	mov	r0, r4
 8011df8:	f000 ffca 	bl	8012d90 <__any_on>
 8011dfc:	4682      	mov	sl, r0
 8011dfe:	b1a8      	cbz	r0, 8011e2c <__gethex+0x1f8>
 8011e00:	1e7b      	subs	r3, r7, #1
 8011e02:	1159      	asrs	r1, r3, #5
 8011e04:	f003 021f 	and.w	r2, r3, #31
 8011e08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011e0c:	f04f 0a01 	mov.w	sl, #1
 8011e10:	fa0a f202 	lsl.w	r2, sl, r2
 8011e14:	420a      	tst	r2, r1
 8011e16:	d009      	beq.n	8011e2c <__gethex+0x1f8>
 8011e18:	4553      	cmp	r3, sl
 8011e1a:	dd05      	ble.n	8011e28 <__gethex+0x1f4>
 8011e1c:	1eb9      	subs	r1, r7, #2
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f000 ffb6 	bl	8012d90 <__any_on>
 8011e24:	2800      	cmp	r0, #0
 8011e26:	d145      	bne.n	8011eb4 <__gethex+0x280>
 8011e28:	f04f 0a02 	mov.w	sl, #2
 8011e2c:	4639      	mov	r1, r7
 8011e2e:	4620      	mov	r0, r4
 8011e30:	f7ff fe99 	bl	8011b66 <rshift>
 8011e34:	443d      	add	r5, r7
 8011e36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e3a:	42ab      	cmp	r3, r5
 8011e3c:	da4c      	bge.n	8011ed8 <__gethex+0x2a4>
 8011e3e:	ee18 0a10 	vmov	r0, s16
 8011e42:	4621      	mov	r1, r4
 8011e44:	f000 fb44 	bl	80124d0 <_Bfree>
 8011e48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	6013      	str	r3, [r2, #0]
 8011e4e:	27a3      	movs	r7, #163	; 0xa3
 8011e50:	e785      	b.n	8011d5e <__gethex+0x12a>
 8011e52:	1e73      	subs	r3, r6, #1
 8011e54:	9a05      	ldr	r2, [sp, #20]
 8011e56:	9303      	str	r3, [sp, #12]
 8011e58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011e5c:	4293      	cmp	r3, r2
 8011e5e:	d019      	beq.n	8011e94 <__gethex+0x260>
 8011e60:	f1bb 0f20 	cmp.w	fp, #32
 8011e64:	d107      	bne.n	8011e76 <__gethex+0x242>
 8011e66:	9b02      	ldr	r3, [sp, #8]
 8011e68:	9a00      	ldr	r2, [sp, #0]
 8011e6a:	f843 2b04 	str.w	r2, [r3], #4
 8011e6e:	9302      	str	r3, [sp, #8]
 8011e70:	2300      	movs	r3, #0
 8011e72:	9300      	str	r3, [sp, #0]
 8011e74:	469b      	mov	fp, r3
 8011e76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011e7a:	f7ff fec6 	bl	8011c0a <__hexdig_fun>
 8011e7e:	9b00      	ldr	r3, [sp, #0]
 8011e80:	f000 000f 	and.w	r0, r0, #15
 8011e84:	fa00 f00b 	lsl.w	r0, r0, fp
 8011e88:	4303      	orrs	r3, r0
 8011e8a:	9300      	str	r3, [sp, #0]
 8011e8c:	f10b 0b04 	add.w	fp, fp, #4
 8011e90:	9b03      	ldr	r3, [sp, #12]
 8011e92:	e00d      	b.n	8011eb0 <__gethex+0x27c>
 8011e94:	9b03      	ldr	r3, [sp, #12]
 8011e96:	9a06      	ldr	r2, [sp, #24]
 8011e98:	4413      	add	r3, r2
 8011e9a:	42bb      	cmp	r3, r7
 8011e9c:	d3e0      	bcc.n	8011e60 <__gethex+0x22c>
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	9901      	ldr	r1, [sp, #4]
 8011ea2:	9307      	str	r3, [sp, #28]
 8011ea4:	4652      	mov	r2, sl
 8011ea6:	f001 fd23 	bl	80138f0 <strncmp>
 8011eaa:	9b07      	ldr	r3, [sp, #28]
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d1d7      	bne.n	8011e60 <__gethex+0x22c>
 8011eb0:	461e      	mov	r6, r3
 8011eb2:	e78b      	b.n	8011dcc <__gethex+0x198>
 8011eb4:	f04f 0a03 	mov.w	sl, #3
 8011eb8:	e7b8      	b.n	8011e2c <__gethex+0x1f8>
 8011eba:	da0a      	bge.n	8011ed2 <__gethex+0x29e>
 8011ebc:	1a37      	subs	r7, r6, r0
 8011ebe:	4621      	mov	r1, r4
 8011ec0:	ee18 0a10 	vmov	r0, s16
 8011ec4:	463a      	mov	r2, r7
 8011ec6:	f000 fd1f 	bl	8012908 <__lshift>
 8011eca:	1bed      	subs	r5, r5, r7
 8011ecc:	4604      	mov	r4, r0
 8011ece:	f100 0914 	add.w	r9, r0, #20
 8011ed2:	f04f 0a00 	mov.w	sl, #0
 8011ed6:	e7ae      	b.n	8011e36 <__gethex+0x202>
 8011ed8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011edc:	42a8      	cmp	r0, r5
 8011ede:	dd72      	ble.n	8011fc6 <__gethex+0x392>
 8011ee0:	1b45      	subs	r5, r0, r5
 8011ee2:	42ae      	cmp	r6, r5
 8011ee4:	dc36      	bgt.n	8011f54 <__gethex+0x320>
 8011ee6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011eea:	2b02      	cmp	r3, #2
 8011eec:	d02a      	beq.n	8011f44 <__gethex+0x310>
 8011eee:	2b03      	cmp	r3, #3
 8011ef0:	d02c      	beq.n	8011f4c <__gethex+0x318>
 8011ef2:	2b01      	cmp	r3, #1
 8011ef4:	d11c      	bne.n	8011f30 <__gethex+0x2fc>
 8011ef6:	42ae      	cmp	r6, r5
 8011ef8:	d11a      	bne.n	8011f30 <__gethex+0x2fc>
 8011efa:	2e01      	cmp	r6, #1
 8011efc:	d112      	bne.n	8011f24 <__gethex+0x2f0>
 8011efe:	9a04      	ldr	r2, [sp, #16]
 8011f00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011f04:	6013      	str	r3, [r2, #0]
 8011f06:	2301      	movs	r3, #1
 8011f08:	6123      	str	r3, [r4, #16]
 8011f0a:	f8c9 3000 	str.w	r3, [r9]
 8011f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f10:	2762      	movs	r7, #98	; 0x62
 8011f12:	601c      	str	r4, [r3, #0]
 8011f14:	e723      	b.n	8011d5e <__gethex+0x12a>
 8011f16:	bf00      	nop
 8011f18:	0803e254 	.word	0x0803e254
 8011f1c:	0803e179 	.word	0x0803e179
 8011f20:	0803e1ec 	.word	0x0803e1ec
 8011f24:	1e71      	subs	r1, r6, #1
 8011f26:	4620      	mov	r0, r4
 8011f28:	f000 ff32 	bl	8012d90 <__any_on>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d1e6      	bne.n	8011efe <__gethex+0x2ca>
 8011f30:	ee18 0a10 	vmov	r0, s16
 8011f34:	4621      	mov	r1, r4
 8011f36:	f000 facb 	bl	80124d0 <_Bfree>
 8011f3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	6013      	str	r3, [r2, #0]
 8011f40:	2750      	movs	r7, #80	; 0x50
 8011f42:	e70c      	b.n	8011d5e <__gethex+0x12a>
 8011f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d1f2      	bne.n	8011f30 <__gethex+0x2fc>
 8011f4a:	e7d8      	b.n	8011efe <__gethex+0x2ca>
 8011f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d1d5      	bne.n	8011efe <__gethex+0x2ca>
 8011f52:	e7ed      	b.n	8011f30 <__gethex+0x2fc>
 8011f54:	1e6f      	subs	r7, r5, #1
 8011f56:	f1ba 0f00 	cmp.w	sl, #0
 8011f5a:	d131      	bne.n	8011fc0 <__gethex+0x38c>
 8011f5c:	b127      	cbz	r7, 8011f68 <__gethex+0x334>
 8011f5e:	4639      	mov	r1, r7
 8011f60:	4620      	mov	r0, r4
 8011f62:	f000 ff15 	bl	8012d90 <__any_on>
 8011f66:	4682      	mov	sl, r0
 8011f68:	117b      	asrs	r3, r7, #5
 8011f6a:	2101      	movs	r1, #1
 8011f6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011f70:	f007 071f 	and.w	r7, r7, #31
 8011f74:	fa01 f707 	lsl.w	r7, r1, r7
 8011f78:	421f      	tst	r7, r3
 8011f7a:	4629      	mov	r1, r5
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	bf18      	it	ne
 8011f80:	f04a 0a02 	orrne.w	sl, sl, #2
 8011f84:	1b76      	subs	r6, r6, r5
 8011f86:	f7ff fdee 	bl	8011b66 <rshift>
 8011f8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011f8e:	2702      	movs	r7, #2
 8011f90:	f1ba 0f00 	cmp.w	sl, #0
 8011f94:	d048      	beq.n	8012028 <__gethex+0x3f4>
 8011f96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f9a:	2b02      	cmp	r3, #2
 8011f9c:	d015      	beq.n	8011fca <__gethex+0x396>
 8011f9e:	2b03      	cmp	r3, #3
 8011fa0:	d017      	beq.n	8011fd2 <__gethex+0x39e>
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d109      	bne.n	8011fba <__gethex+0x386>
 8011fa6:	f01a 0f02 	tst.w	sl, #2
 8011faa:	d006      	beq.n	8011fba <__gethex+0x386>
 8011fac:	f8d9 0000 	ldr.w	r0, [r9]
 8011fb0:	ea4a 0a00 	orr.w	sl, sl, r0
 8011fb4:	f01a 0f01 	tst.w	sl, #1
 8011fb8:	d10e      	bne.n	8011fd8 <__gethex+0x3a4>
 8011fba:	f047 0710 	orr.w	r7, r7, #16
 8011fbe:	e033      	b.n	8012028 <__gethex+0x3f4>
 8011fc0:	f04f 0a01 	mov.w	sl, #1
 8011fc4:	e7d0      	b.n	8011f68 <__gethex+0x334>
 8011fc6:	2701      	movs	r7, #1
 8011fc8:	e7e2      	b.n	8011f90 <__gethex+0x35c>
 8011fca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fcc:	f1c3 0301 	rsb	r3, r3, #1
 8011fd0:	9315      	str	r3, [sp, #84]	; 0x54
 8011fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d0f0      	beq.n	8011fba <__gethex+0x386>
 8011fd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011fdc:	f104 0314 	add.w	r3, r4, #20
 8011fe0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011fe4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011fe8:	f04f 0c00 	mov.w	ip, #0
 8011fec:	4618      	mov	r0, r3
 8011fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ff2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011ff6:	d01c      	beq.n	8012032 <__gethex+0x3fe>
 8011ff8:	3201      	adds	r2, #1
 8011ffa:	6002      	str	r2, [r0, #0]
 8011ffc:	2f02      	cmp	r7, #2
 8011ffe:	f104 0314 	add.w	r3, r4, #20
 8012002:	d13f      	bne.n	8012084 <__gethex+0x450>
 8012004:	f8d8 2000 	ldr.w	r2, [r8]
 8012008:	3a01      	subs	r2, #1
 801200a:	42b2      	cmp	r2, r6
 801200c:	d10a      	bne.n	8012024 <__gethex+0x3f0>
 801200e:	1171      	asrs	r1, r6, #5
 8012010:	2201      	movs	r2, #1
 8012012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012016:	f006 061f 	and.w	r6, r6, #31
 801201a:	fa02 f606 	lsl.w	r6, r2, r6
 801201e:	421e      	tst	r6, r3
 8012020:	bf18      	it	ne
 8012022:	4617      	movne	r7, r2
 8012024:	f047 0720 	orr.w	r7, r7, #32
 8012028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801202a:	601c      	str	r4, [r3, #0]
 801202c:	9b04      	ldr	r3, [sp, #16]
 801202e:	601d      	str	r5, [r3, #0]
 8012030:	e695      	b.n	8011d5e <__gethex+0x12a>
 8012032:	4299      	cmp	r1, r3
 8012034:	f843 cc04 	str.w	ip, [r3, #-4]
 8012038:	d8d8      	bhi.n	8011fec <__gethex+0x3b8>
 801203a:	68a3      	ldr	r3, [r4, #8]
 801203c:	459b      	cmp	fp, r3
 801203e:	db19      	blt.n	8012074 <__gethex+0x440>
 8012040:	6861      	ldr	r1, [r4, #4]
 8012042:	ee18 0a10 	vmov	r0, s16
 8012046:	3101      	adds	r1, #1
 8012048:	f000 fa02 	bl	8012450 <_Balloc>
 801204c:	4681      	mov	r9, r0
 801204e:	b918      	cbnz	r0, 8012058 <__gethex+0x424>
 8012050:	4b1a      	ldr	r3, [pc, #104]	; (80120bc <__gethex+0x488>)
 8012052:	4602      	mov	r2, r0
 8012054:	2184      	movs	r1, #132	; 0x84
 8012056:	e6a8      	b.n	8011daa <__gethex+0x176>
 8012058:	6922      	ldr	r2, [r4, #16]
 801205a:	3202      	adds	r2, #2
 801205c:	f104 010c 	add.w	r1, r4, #12
 8012060:	0092      	lsls	r2, r2, #2
 8012062:	300c      	adds	r0, #12
 8012064:	f7fb fb20 	bl	800d6a8 <memcpy>
 8012068:	4621      	mov	r1, r4
 801206a:	ee18 0a10 	vmov	r0, s16
 801206e:	f000 fa2f 	bl	80124d0 <_Bfree>
 8012072:	464c      	mov	r4, r9
 8012074:	6923      	ldr	r3, [r4, #16]
 8012076:	1c5a      	adds	r2, r3, #1
 8012078:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801207c:	6122      	str	r2, [r4, #16]
 801207e:	2201      	movs	r2, #1
 8012080:	615a      	str	r2, [r3, #20]
 8012082:	e7bb      	b.n	8011ffc <__gethex+0x3c8>
 8012084:	6922      	ldr	r2, [r4, #16]
 8012086:	455a      	cmp	r2, fp
 8012088:	dd0b      	ble.n	80120a2 <__gethex+0x46e>
 801208a:	2101      	movs	r1, #1
 801208c:	4620      	mov	r0, r4
 801208e:	f7ff fd6a 	bl	8011b66 <rshift>
 8012092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012096:	3501      	adds	r5, #1
 8012098:	42ab      	cmp	r3, r5
 801209a:	f6ff aed0 	blt.w	8011e3e <__gethex+0x20a>
 801209e:	2701      	movs	r7, #1
 80120a0:	e7c0      	b.n	8012024 <__gethex+0x3f0>
 80120a2:	f016 061f 	ands.w	r6, r6, #31
 80120a6:	d0fa      	beq.n	801209e <__gethex+0x46a>
 80120a8:	4453      	add	r3, sl
 80120aa:	f1c6 0620 	rsb	r6, r6, #32
 80120ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80120b2:	f000 fabf 	bl	8012634 <__hi0bits>
 80120b6:	42b0      	cmp	r0, r6
 80120b8:	dbe7      	blt.n	801208a <__gethex+0x456>
 80120ba:	e7f0      	b.n	801209e <__gethex+0x46a>
 80120bc:	0803e179 	.word	0x0803e179

080120c0 <L_shift>:
 80120c0:	f1c2 0208 	rsb	r2, r2, #8
 80120c4:	0092      	lsls	r2, r2, #2
 80120c6:	b570      	push	{r4, r5, r6, lr}
 80120c8:	f1c2 0620 	rsb	r6, r2, #32
 80120cc:	6843      	ldr	r3, [r0, #4]
 80120ce:	6804      	ldr	r4, [r0, #0]
 80120d0:	fa03 f506 	lsl.w	r5, r3, r6
 80120d4:	432c      	orrs	r4, r5
 80120d6:	40d3      	lsrs	r3, r2
 80120d8:	6004      	str	r4, [r0, #0]
 80120da:	f840 3f04 	str.w	r3, [r0, #4]!
 80120de:	4288      	cmp	r0, r1
 80120e0:	d3f4      	bcc.n	80120cc <L_shift+0xc>
 80120e2:	bd70      	pop	{r4, r5, r6, pc}

080120e4 <__match>:
 80120e4:	b530      	push	{r4, r5, lr}
 80120e6:	6803      	ldr	r3, [r0, #0]
 80120e8:	3301      	adds	r3, #1
 80120ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120ee:	b914      	cbnz	r4, 80120f6 <__match+0x12>
 80120f0:	6003      	str	r3, [r0, #0]
 80120f2:	2001      	movs	r0, #1
 80120f4:	bd30      	pop	{r4, r5, pc}
 80120f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80120fe:	2d19      	cmp	r5, #25
 8012100:	bf98      	it	ls
 8012102:	3220      	addls	r2, #32
 8012104:	42a2      	cmp	r2, r4
 8012106:	d0f0      	beq.n	80120ea <__match+0x6>
 8012108:	2000      	movs	r0, #0
 801210a:	e7f3      	b.n	80120f4 <__match+0x10>

0801210c <__hexnan>:
 801210c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012110:	680b      	ldr	r3, [r1, #0]
 8012112:	115e      	asrs	r6, r3, #5
 8012114:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012118:	f013 031f 	ands.w	r3, r3, #31
 801211c:	b087      	sub	sp, #28
 801211e:	bf18      	it	ne
 8012120:	3604      	addne	r6, #4
 8012122:	2500      	movs	r5, #0
 8012124:	1f37      	subs	r7, r6, #4
 8012126:	4690      	mov	r8, r2
 8012128:	6802      	ldr	r2, [r0, #0]
 801212a:	9301      	str	r3, [sp, #4]
 801212c:	4682      	mov	sl, r0
 801212e:	f846 5c04 	str.w	r5, [r6, #-4]
 8012132:	46b9      	mov	r9, r7
 8012134:	463c      	mov	r4, r7
 8012136:	9502      	str	r5, [sp, #8]
 8012138:	46ab      	mov	fp, r5
 801213a:	7851      	ldrb	r1, [r2, #1]
 801213c:	1c53      	adds	r3, r2, #1
 801213e:	9303      	str	r3, [sp, #12]
 8012140:	b341      	cbz	r1, 8012194 <__hexnan+0x88>
 8012142:	4608      	mov	r0, r1
 8012144:	9205      	str	r2, [sp, #20]
 8012146:	9104      	str	r1, [sp, #16]
 8012148:	f7ff fd5f 	bl	8011c0a <__hexdig_fun>
 801214c:	2800      	cmp	r0, #0
 801214e:	d14f      	bne.n	80121f0 <__hexnan+0xe4>
 8012150:	9904      	ldr	r1, [sp, #16]
 8012152:	9a05      	ldr	r2, [sp, #20]
 8012154:	2920      	cmp	r1, #32
 8012156:	d818      	bhi.n	801218a <__hexnan+0x7e>
 8012158:	9b02      	ldr	r3, [sp, #8]
 801215a:	459b      	cmp	fp, r3
 801215c:	dd13      	ble.n	8012186 <__hexnan+0x7a>
 801215e:	454c      	cmp	r4, r9
 8012160:	d206      	bcs.n	8012170 <__hexnan+0x64>
 8012162:	2d07      	cmp	r5, #7
 8012164:	dc04      	bgt.n	8012170 <__hexnan+0x64>
 8012166:	462a      	mov	r2, r5
 8012168:	4649      	mov	r1, r9
 801216a:	4620      	mov	r0, r4
 801216c:	f7ff ffa8 	bl	80120c0 <L_shift>
 8012170:	4544      	cmp	r4, r8
 8012172:	d950      	bls.n	8012216 <__hexnan+0x10a>
 8012174:	2300      	movs	r3, #0
 8012176:	f1a4 0904 	sub.w	r9, r4, #4
 801217a:	f844 3c04 	str.w	r3, [r4, #-4]
 801217e:	f8cd b008 	str.w	fp, [sp, #8]
 8012182:	464c      	mov	r4, r9
 8012184:	461d      	mov	r5, r3
 8012186:	9a03      	ldr	r2, [sp, #12]
 8012188:	e7d7      	b.n	801213a <__hexnan+0x2e>
 801218a:	2929      	cmp	r1, #41	; 0x29
 801218c:	d156      	bne.n	801223c <__hexnan+0x130>
 801218e:	3202      	adds	r2, #2
 8012190:	f8ca 2000 	str.w	r2, [sl]
 8012194:	f1bb 0f00 	cmp.w	fp, #0
 8012198:	d050      	beq.n	801223c <__hexnan+0x130>
 801219a:	454c      	cmp	r4, r9
 801219c:	d206      	bcs.n	80121ac <__hexnan+0xa0>
 801219e:	2d07      	cmp	r5, #7
 80121a0:	dc04      	bgt.n	80121ac <__hexnan+0xa0>
 80121a2:	462a      	mov	r2, r5
 80121a4:	4649      	mov	r1, r9
 80121a6:	4620      	mov	r0, r4
 80121a8:	f7ff ff8a 	bl	80120c0 <L_shift>
 80121ac:	4544      	cmp	r4, r8
 80121ae:	d934      	bls.n	801221a <__hexnan+0x10e>
 80121b0:	f1a8 0204 	sub.w	r2, r8, #4
 80121b4:	4623      	mov	r3, r4
 80121b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80121ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80121be:	429f      	cmp	r7, r3
 80121c0:	d2f9      	bcs.n	80121b6 <__hexnan+0xaa>
 80121c2:	1b3b      	subs	r3, r7, r4
 80121c4:	f023 0303 	bic.w	r3, r3, #3
 80121c8:	3304      	adds	r3, #4
 80121ca:	3401      	adds	r4, #1
 80121cc:	3e03      	subs	r6, #3
 80121ce:	42b4      	cmp	r4, r6
 80121d0:	bf88      	it	hi
 80121d2:	2304      	movhi	r3, #4
 80121d4:	4443      	add	r3, r8
 80121d6:	2200      	movs	r2, #0
 80121d8:	f843 2b04 	str.w	r2, [r3], #4
 80121dc:	429f      	cmp	r7, r3
 80121de:	d2fb      	bcs.n	80121d8 <__hexnan+0xcc>
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	b91b      	cbnz	r3, 80121ec <__hexnan+0xe0>
 80121e4:	4547      	cmp	r7, r8
 80121e6:	d127      	bne.n	8012238 <__hexnan+0x12c>
 80121e8:	2301      	movs	r3, #1
 80121ea:	603b      	str	r3, [r7, #0]
 80121ec:	2005      	movs	r0, #5
 80121ee:	e026      	b.n	801223e <__hexnan+0x132>
 80121f0:	3501      	adds	r5, #1
 80121f2:	2d08      	cmp	r5, #8
 80121f4:	f10b 0b01 	add.w	fp, fp, #1
 80121f8:	dd06      	ble.n	8012208 <__hexnan+0xfc>
 80121fa:	4544      	cmp	r4, r8
 80121fc:	d9c3      	bls.n	8012186 <__hexnan+0x7a>
 80121fe:	2300      	movs	r3, #0
 8012200:	f844 3c04 	str.w	r3, [r4, #-4]
 8012204:	2501      	movs	r5, #1
 8012206:	3c04      	subs	r4, #4
 8012208:	6822      	ldr	r2, [r4, #0]
 801220a:	f000 000f 	and.w	r0, r0, #15
 801220e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012212:	6022      	str	r2, [r4, #0]
 8012214:	e7b7      	b.n	8012186 <__hexnan+0x7a>
 8012216:	2508      	movs	r5, #8
 8012218:	e7b5      	b.n	8012186 <__hexnan+0x7a>
 801221a:	9b01      	ldr	r3, [sp, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d0df      	beq.n	80121e0 <__hexnan+0xd4>
 8012220:	f04f 32ff 	mov.w	r2, #4294967295
 8012224:	f1c3 0320 	rsb	r3, r3, #32
 8012228:	fa22 f303 	lsr.w	r3, r2, r3
 801222c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012230:	401a      	ands	r2, r3
 8012232:	f846 2c04 	str.w	r2, [r6, #-4]
 8012236:	e7d3      	b.n	80121e0 <__hexnan+0xd4>
 8012238:	3f04      	subs	r7, #4
 801223a:	e7d1      	b.n	80121e0 <__hexnan+0xd4>
 801223c:	2004      	movs	r0, #4
 801223e:	b007      	add	sp, #28
 8012240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012244 <_findenv_r>:
 8012244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012248:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80122b8 <_findenv_r+0x74>
 801224c:	4607      	mov	r7, r0
 801224e:	4689      	mov	r9, r1
 8012250:	4616      	mov	r6, r2
 8012252:	f001 fba9 	bl	80139a8 <__env_lock>
 8012256:	f8da 4000 	ldr.w	r4, [sl]
 801225a:	b134      	cbz	r4, 801226a <_findenv_r+0x26>
 801225c:	464b      	mov	r3, r9
 801225e:	4698      	mov	r8, r3
 8012260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012264:	b13a      	cbz	r2, 8012276 <_findenv_r+0x32>
 8012266:	2a3d      	cmp	r2, #61	; 0x3d
 8012268:	d1f9      	bne.n	801225e <_findenv_r+0x1a>
 801226a:	4638      	mov	r0, r7
 801226c:	f001 fba2 	bl	80139b4 <__env_unlock>
 8012270:	2000      	movs	r0, #0
 8012272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012276:	eba8 0809 	sub.w	r8, r8, r9
 801227a:	46a3      	mov	fp, r4
 801227c:	f854 0b04 	ldr.w	r0, [r4], #4
 8012280:	2800      	cmp	r0, #0
 8012282:	d0f2      	beq.n	801226a <_findenv_r+0x26>
 8012284:	4642      	mov	r2, r8
 8012286:	4649      	mov	r1, r9
 8012288:	f001 fb32 	bl	80138f0 <strncmp>
 801228c:	2800      	cmp	r0, #0
 801228e:	d1f4      	bne.n	801227a <_findenv_r+0x36>
 8012290:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012294:	eb03 0508 	add.w	r5, r3, r8
 8012298:	f813 3008 	ldrb.w	r3, [r3, r8]
 801229c:	2b3d      	cmp	r3, #61	; 0x3d
 801229e:	d1ec      	bne.n	801227a <_findenv_r+0x36>
 80122a0:	f8da 3000 	ldr.w	r3, [sl]
 80122a4:	ebab 0303 	sub.w	r3, fp, r3
 80122a8:	109b      	asrs	r3, r3, #2
 80122aa:	4638      	mov	r0, r7
 80122ac:	6033      	str	r3, [r6, #0]
 80122ae:	f001 fb81 	bl	80139b4 <__env_unlock>
 80122b2:	1c68      	adds	r0, r5, #1
 80122b4:	e7dd      	b.n	8012272 <_findenv_r+0x2e>
 80122b6:	bf00      	nop
 80122b8:	200004f8 	.word	0x200004f8

080122bc <_getenv_r>:
 80122bc:	b507      	push	{r0, r1, r2, lr}
 80122be:	aa01      	add	r2, sp, #4
 80122c0:	f7ff ffc0 	bl	8012244 <_findenv_r>
 80122c4:	b003      	add	sp, #12
 80122c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080122cc <__gettzinfo>:
 80122cc:	4800      	ldr	r0, [pc, #0]	; (80122d0 <__gettzinfo+0x4>)
 80122ce:	4770      	bx	lr
 80122d0:	20000330 	.word	0x20000330

080122d4 <labs>:
 80122d4:	2800      	cmp	r0, #0
 80122d6:	bfb8      	it	lt
 80122d8:	4240      	neglt	r0, r0
 80122da:	4770      	bx	lr

080122dc <_localeconv_r>:
 80122dc:	4800      	ldr	r0, [pc, #0]	; (80122e0 <_localeconv_r+0x4>)
 80122de:	4770      	bx	lr
 80122e0:	2000047c 	.word	0x2000047c

080122e4 <__retarget_lock_init_recursive>:
 80122e4:	4770      	bx	lr

080122e6 <__retarget_lock_acquire>:
 80122e6:	4770      	bx	lr

080122e8 <__retarget_lock_acquire_recursive>:
 80122e8:	4770      	bx	lr

080122ea <__retarget_lock_release>:
 80122ea:	4770      	bx	lr

080122ec <__retarget_lock_release_recursive>:
 80122ec:	4770      	bx	lr
	...

080122f0 <_lseek_r>:
 80122f0:	b538      	push	{r3, r4, r5, lr}
 80122f2:	4d07      	ldr	r5, [pc, #28]	; (8012310 <_lseek_r+0x20>)
 80122f4:	4604      	mov	r4, r0
 80122f6:	4608      	mov	r0, r1
 80122f8:	4611      	mov	r1, r2
 80122fa:	2200      	movs	r2, #0
 80122fc:	602a      	str	r2, [r5, #0]
 80122fe:	461a      	mov	r2, r3
 8012300:	f003 ffe0 	bl	80162c4 <_lseek>
 8012304:	1c43      	adds	r3, r0, #1
 8012306:	d102      	bne.n	801230e <_lseek_r+0x1e>
 8012308:	682b      	ldr	r3, [r5, #0]
 801230a:	b103      	cbz	r3, 801230e <_lseek_r+0x1e>
 801230c:	6023      	str	r3, [r4, #0]
 801230e:	bd38      	pop	{r3, r4, r5, pc}
 8012310:	20003c28 	.word	0x20003c28

08012314 <__swhatbuf_r>:
 8012314:	b570      	push	{r4, r5, r6, lr}
 8012316:	460e      	mov	r6, r1
 8012318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801231c:	2900      	cmp	r1, #0
 801231e:	b096      	sub	sp, #88	; 0x58
 8012320:	4614      	mov	r4, r2
 8012322:	461d      	mov	r5, r3
 8012324:	da08      	bge.n	8012338 <__swhatbuf_r+0x24>
 8012326:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801232a:	2200      	movs	r2, #0
 801232c:	602a      	str	r2, [r5, #0]
 801232e:	061a      	lsls	r2, r3, #24
 8012330:	d410      	bmi.n	8012354 <__swhatbuf_r+0x40>
 8012332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012336:	e00e      	b.n	8012356 <__swhatbuf_r+0x42>
 8012338:	466a      	mov	r2, sp
 801233a:	f001 fb41 	bl	80139c0 <_fstat_r>
 801233e:	2800      	cmp	r0, #0
 8012340:	dbf1      	blt.n	8012326 <__swhatbuf_r+0x12>
 8012342:	9a01      	ldr	r2, [sp, #4]
 8012344:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012348:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801234c:	425a      	negs	r2, r3
 801234e:	415a      	adcs	r2, r3
 8012350:	602a      	str	r2, [r5, #0]
 8012352:	e7ee      	b.n	8012332 <__swhatbuf_r+0x1e>
 8012354:	2340      	movs	r3, #64	; 0x40
 8012356:	2000      	movs	r0, #0
 8012358:	6023      	str	r3, [r4, #0]
 801235a:	b016      	add	sp, #88	; 0x58
 801235c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012360 <__smakebuf_r>:
 8012360:	898b      	ldrh	r3, [r1, #12]
 8012362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012364:	079d      	lsls	r5, r3, #30
 8012366:	4606      	mov	r6, r0
 8012368:	460c      	mov	r4, r1
 801236a:	d507      	bpl.n	801237c <__smakebuf_r+0x1c>
 801236c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012370:	6023      	str	r3, [r4, #0]
 8012372:	6123      	str	r3, [r4, #16]
 8012374:	2301      	movs	r3, #1
 8012376:	6163      	str	r3, [r4, #20]
 8012378:	b002      	add	sp, #8
 801237a:	bd70      	pop	{r4, r5, r6, pc}
 801237c:	ab01      	add	r3, sp, #4
 801237e:	466a      	mov	r2, sp
 8012380:	f7ff ffc8 	bl	8012314 <__swhatbuf_r>
 8012384:	9900      	ldr	r1, [sp, #0]
 8012386:	4605      	mov	r5, r0
 8012388:	4630      	mov	r0, r6
 801238a:	f7fb fc81 	bl	800dc90 <_malloc_r>
 801238e:	b948      	cbnz	r0, 80123a4 <__smakebuf_r+0x44>
 8012390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012394:	059a      	lsls	r2, r3, #22
 8012396:	d4ef      	bmi.n	8012378 <__smakebuf_r+0x18>
 8012398:	f023 0303 	bic.w	r3, r3, #3
 801239c:	f043 0302 	orr.w	r3, r3, #2
 80123a0:	81a3      	strh	r3, [r4, #12]
 80123a2:	e7e3      	b.n	801236c <__smakebuf_r+0xc>
 80123a4:	4b0d      	ldr	r3, [pc, #52]	; (80123dc <__smakebuf_r+0x7c>)
 80123a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80123a8:	89a3      	ldrh	r3, [r4, #12]
 80123aa:	6020      	str	r0, [r4, #0]
 80123ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123b0:	81a3      	strh	r3, [r4, #12]
 80123b2:	9b00      	ldr	r3, [sp, #0]
 80123b4:	6163      	str	r3, [r4, #20]
 80123b6:	9b01      	ldr	r3, [sp, #4]
 80123b8:	6120      	str	r0, [r4, #16]
 80123ba:	b15b      	cbz	r3, 80123d4 <__smakebuf_r+0x74>
 80123bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123c0:	4630      	mov	r0, r6
 80123c2:	f001 fb0f 	bl	80139e4 <_isatty_r>
 80123c6:	b128      	cbz	r0, 80123d4 <__smakebuf_r+0x74>
 80123c8:	89a3      	ldrh	r3, [r4, #12]
 80123ca:	f023 0303 	bic.w	r3, r3, #3
 80123ce:	f043 0301 	orr.w	r3, r3, #1
 80123d2:	81a3      	strh	r3, [r4, #12]
 80123d4:	89a0      	ldrh	r0, [r4, #12]
 80123d6:	4305      	orrs	r5, r0
 80123d8:	81a5      	strh	r5, [r4, #12]
 80123da:	e7cd      	b.n	8012378 <__smakebuf_r+0x18>
 80123dc:	080119c5 	.word	0x080119c5

080123e0 <__ascii_mbtowc>:
 80123e0:	b082      	sub	sp, #8
 80123e2:	b901      	cbnz	r1, 80123e6 <__ascii_mbtowc+0x6>
 80123e4:	a901      	add	r1, sp, #4
 80123e6:	b142      	cbz	r2, 80123fa <__ascii_mbtowc+0x1a>
 80123e8:	b14b      	cbz	r3, 80123fe <__ascii_mbtowc+0x1e>
 80123ea:	7813      	ldrb	r3, [r2, #0]
 80123ec:	600b      	str	r3, [r1, #0]
 80123ee:	7812      	ldrb	r2, [r2, #0]
 80123f0:	1e10      	subs	r0, r2, #0
 80123f2:	bf18      	it	ne
 80123f4:	2001      	movne	r0, #1
 80123f6:	b002      	add	sp, #8
 80123f8:	4770      	bx	lr
 80123fa:	4610      	mov	r0, r2
 80123fc:	e7fb      	b.n	80123f6 <__ascii_mbtowc+0x16>
 80123fe:	f06f 0001 	mvn.w	r0, #1
 8012402:	e7f8      	b.n	80123f6 <__ascii_mbtowc+0x16>

08012404 <memmove>:
 8012404:	4288      	cmp	r0, r1
 8012406:	b510      	push	{r4, lr}
 8012408:	eb01 0402 	add.w	r4, r1, r2
 801240c:	d902      	bls.n	8012414 <memmove+0x10>
 801240e:	4284      	cmp	r4, r0
 8012410:	4623      	mov	r3, r4
 8012412:	d807      	bhi.n	8012424 <memmove+0x20>
 8012414:	1e43      	subs	r3, r0, #1
 8012416:	42a1      	cmp	r1, r4
 8012418:	d008      	beq.n	801242c <memmove+0x28>
 801241a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801241e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012422:	e7f8      	b.n	8012416 <memmove+0x12>
 8012424:	4402      	add	r2, r0
 8012426:	4601      	mov	r1, r0
 8012428:	428a      	cmp	r2, r1
 801242a:	d100      	bne.n	801242e <memmove+0x2a>
 801242c:	bd10      	pop	{r4, pc}
 801242e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012436:	e7f7      	b.n	8012428 <memmove+0x24>

08012438 <__malloc_lock>:
 8012438:	4801      	ldr	r0, [pc, #4]	; (8012440 <__malloc_lock+0x8>)
 801243a:	f7ff bf55 	b.w	80122e8 <__retarget_lock_acquire_recursive>
 801243e:	bf00      	nop
 8012440:	20003c21 	.word	0x20003c21

08012444 <__malloc_unlock>:
 8012444:	4801      	ldr	r0, [pc, #4]	; (801244c <__malloc_unlock+0x8>)
 8012446:	f7ff bf51 	b.w	80122ec <__retarget_lock_release_recursive>
 801244a:	bf00      	nop
 801244c:	20003c21 	.word	0x20003c21

08012450 <_Balloc>:
 8012450:	b570      	push	{r4, r5, r6, lr}
 8012452:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012454:	4604      	mov	r4, r0
 8012456:	460d      	mov	r5, r1
 8012458:	b976      	cbnz	r6, 8012478 <_Balloc+0x28>
 801245a:	2010      	movs	r0, #16
 801245c:	f7fb f914 	bl	800d688 <malloc>
 8012460:	4602      	mov	r2, r0
 8012462:	6260      	str	r0, [r4, #36]	; 0x24
 8012464:	b920      	cbnz	r0, 8012470 <_Balloc+0x20>
 8012466:	4b18      	ldr	r3, [pc, #96]	; (80124c8 <_Balloc+0x78>)
 8012468:	4818      	ldr	r0, [pc, #96]	; (80124cc <_Balloc+0x7c>)
 801246a:	2166      	movs	r1, #102	; 0x66
 801246c:	f7fb f8b0 	bl	800d5d0 <__assert_func>
 8012470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012474:	6006      	str	r6, [r0, #0]
 8012476:	60c6      	str	r6, [r0, #12]
 8012478:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801247a:	68f3      	ldr	r3, [r6, #12]
 801247c:	b183      	cbz	r3, 80124a0 <_Balloc+0x50>
 801247e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012480:	68db      	ldr	r3, [r3, #12]
 8012482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012486:	b9b8      	cbnz	r0, 80124b8 <_Balloc+0x68>
 8012488:	2101      	movs	r1, #1
 801248a:	fa01 f605 	lsl.w	r6, r1, r5
 801248e:	1d72      	adds	r2, r6, #5
 8012490:	0092      	lsls	r2, r2, #2
 8012492:	4620      	mov	r0, r4
 8012494:	f000 fc9d 	bl	8012dd2 <_calloc_r>
 8012498:	b160      	cbz	r0, 80124b4 <_Balloc+0x64>
 801249a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801249e:	e00e      	b.n	80124be <_Balloc+0x6e>
 80124a0:	2221      	movs	r2, #33	; 0x21
 80124a2:	2104      	movs	r1, #4
 80124a4:	4620      	mov	r0, r4
 80124a6:	f000 fc94 	bl	8012dd2 <_calloc_r>
 80124aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124ac:	60f0      	str	r0, [r6, #12]
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d1e4      	bne.n	801247e <_Balloc+0x2e>
 80124b4:	2000      	movs	r0, #0
 80124b6:	bd70      	pop	{r4, r5, r6, pc}
 80124b8:	6802      	ldr	r2, [r0, #0]
 80124ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80124be:	2300      	movs	r3, #0
 80124c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80124c4:	e7f7      	b.n	80124b6 <_Balloc+0x66>
 80124c6:	bf00      	nop
 80124c8:	0803daf4 	.word	0x0803daf4
 80124cc:	0803e2c8 	.word	0x0803e2c8

080124d0 <_Bfree>:
 80124d0:	b570      	push	{r4, r5, r6, lr}
 80124d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80124d4:	4605      	mov	r5, r0
 80124d6:	460c      	mov	r4, r1
 80124d8:	b976      	cbnz	r6, 80124f8 <_Bfree+0x28>
 80124da:	2010      	movs	r0, #16
 80124dc:	f7fb f8d4 	bl	800d688 <malloc>
 80124e0:	4602      	mov	r2, r0
 80124e2:	6268      	str	r0, [r5, #36]	; 0x24
 80124e4:	b920      	cbnz	r0, 80124f0 <_Bfree+0x20>
 80124e6:	4b09      	ldr	r3, [pc, #36]	; (801250c <_Bfree+0x3c>)
 80124e8:	4809      	ldr	r0, [pc, #36]	; (8012510 <_Bfree+0x40>)
 80124ea:	218a      	movs	r1, #138	; 0x8a
 80124ec:	f7fb f870 	bl	800d5d0 <__assert_func>
 80124f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124f4:	6006      	str	r6, [r0, #0]
 80124f6:	60c6      	str	r6, [r0, #12]
 80124f8:	b13c      	cbz	r4, 801250a <_Bfree+0x3a>
 80124fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80124fc:	6862      	ldr	r2, [r4, #4]
 80124fe:	68db      	ldr	r3, [r3, #12]
 8012500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012504:	6021      	str	r1, [r4, #0]
 8012506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801250a:	bd70      	pop	{r4, r5, r6, pc}
 801250c:	0803daf4 	.word	0x0803daf4
 8012510:	0803e2c8 	.word	0x0803e2c8

08012514 <__multadd>:
 8012514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012518:	690d      	ldr	r5, [r1, #16]
 801251a:	4607      	mov	r7, r0
 801251c:	460c      	mov	r4, r1
 801251e:	461e      	mov	r6, r3
 8012520:	f101 0c14 	add.w	ip, r1, #20
 8012524:	2000      	movs	r0, #0
 8012526:	f8dc 3000 	ldr.w	r3, [ip]
 801252a:	b299      	uxth	r1, r3
 801252c:	fb02 6101 	mla	r1, r2, r1, r6
 8012530:	0c1e      	lsrs	r6, r3, #16
 8012532:	0c0b      	lsrs	r3, r1, #16
 8012534:	fb02 3306 	mla	r3, r2, r6, r3
 8012538:	b289      	uxth	r1, r1
 801253a:	3001      	adds	r0, #1
 801253c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012540:	4285      	cmp	r5, r0
 8012542:	f84c 1b04 	str.w	r1, [ip], #4
 8012546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801254a:	dcec      	bgt.n	8012526 <__multadd+0x12>
 801254c:	b30e      	cbz	r6, 8012592 <__multadd+0x7e>
 801254e:	68a3      	ldr	r3, [r4, #8]
 8012550:	42ab      	cmp	r3, r5
 8012552:	dc19      	bgt.n	8012588 <__multadd+0x74>
 8012554:	6861      	ldr	r1, [r4, #4]
 8012556:	4638      	mov	r0, r7
 8012558:	3101      	adds	r1, #1
 801255a:	f7ff ff79 	bl	8012450 <_Balloc>
 801255e:	4680      	mov	r8, r0
 8012560:	b928      	cbnz	r0, 801256e <__multadd+0x5a>
 8012562:	4602      	mov	r2, r0
 8012564:	4b0c      	ldr	r3, [pc, #48]	; (8012598 <__multadd+0x84>)
 8012566:	480d      	ldr	r0, [pc, #52]	; (801259c <__multadd+0x88>)
 8012568:	21b5      	movs	r1, #181	; 0xb5
 801256a:	f7fb f831 	bl	800d5d0 <__assert_func>
 801256e:	6922      	ldr	r2, [r4, #16]
 8012570:	3202      	adds	r2, #2
 8012572:	f104 010c 	add.w	r1, r4, #12
 8012576:	0092      	lsls	r2, r2, #2
 8012578:	300c      	adds	r0, #12
 801257a:	f7fb f895 	bl	800d6a8 <memcpy>
 801257e:	4621      	mov	r1, r4
 8012580:	4638      	mov	r0, r7
 8012582:	f7ff ffa5 	bl	80124d0 <_Bfree>
 8012586:	4644      	mov	r4, r8
 8012588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801258c:	3501      	adds	r5, #1
 801258e:	615e      	str	r6, [r3, #20]
 8012590:	6125      	str	r5, [r4, #16]
 8012592:	4620      	mov	r0, r4
 8012594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012598:	0803e179 	.word	0x0803e179
 801259c:	0803e2c8 	.word	0x0803e2c8

080125a0 <__s2b>:
 80125a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125a4:	460c      	mov	r4, r1
 80125a6:	4615      	mov	r5, r2
 80125a8:	461f      	mov	r7, r3
 80125aa:	2209      	movs	r2, #9
 80125ac:	3308      	adds	r3, #8
 80125ae:	4606      	mov	r6, r0
 80125b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80125b4:	2100      	movs	r1, #0
 80125b6:	2201      	movs	r2, #1
 80125b8:	429a      	cmp	r2, r3
 80125ba:	db09      	blt.n	80125d0 <__s2b+0x30>
 80125bc:	4630      	mov	r0, r6
 80125be:	f7ff ff47 	bl	8012450 <_Balloc>
 80125c2:	b940      	cbnz	r0, 80125d6 <__s2b+0x36>
 80125c4:	4602      	mov	r2, r0
 80125c6:	4b19      	ldr	r3, [pc, #100]	; (801262c <__s2b+0x8c>)
 80125c8:	4819      	ldr	r0, [pc, #100]	; (8012630 <__s2b+0x90>)
 80125ca:	21ce      	movs	r1, #206	; 0xce
 80125cc:	f7fb f800 	bl	800d5d0 <__assert_func>
 80125d0:	0052      	lsls	r2, r2, #1
 80125d2:	3101      	adds	r1, #1
 80125d4:	e7f0      	b.n	80125b8 <__s2b+0x18>
 80125d6:	9b08      	ldr	r3, [sp, #32]
 80125d8:	6143      	str	r3, [r0, #20]
 80125da:	2d09      	cmp	r5, #9
 80125dc:	f04f 0301 	mov.w	r3, #1
 80125e0:	6103      	str	r3, [r0, #16]
 80125e2:	dd16      	ble.n	8012612 <__s2b+0x72>
 80125e4:	f104 0909 	add.w	r9, r4, #9
 80125e8:	46c8      	mov	r8, r9
 80125ea:	442c      	add	r4, r5
 80125ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80125f0:	4601      	mov	r1, r0
 80125f2:	3b30      	subs	r3, #48	; 0x30
 80125f4:	220a      	movs	r2, #10
 80125f6:	4630      	mov	r0, r6
 80125f8:	f7ff ff8c 	bl	8012514 <__multadd>
 80125fc:	45a0      	cmp	r8, r4
 80125fe:	d1f5      	bne.n	80125ec <__s2b+0x4c>
 8012600:	f1a5 0408 	sub.w	r4, r5, #8
 8012604:	444c      	add	r4, r9
 8012606:	1b2d      	subs	r5, r5, r4
 8012608:	1963      	adds	r3, r4, r5
 801260a:	42bb      	cmp	r3, r7
 801260c:	db04      	blt.n	8012618 <__s2b+0x78>
 801260e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012612:	340a      	adds	r4, #10
 8012614:	2509      	movs	r5, #9
 8012616:	e7f6      	b.n	8012606 <__s2b+0x66>
 8012618:	f814 3b01 	ldrb.w	r3, [r4], #1
 801261c:	4601      	mov	r1, r0
 801261e:	3b30      	subs	r3, #48	; 0x30
 8012620:	220a      	movs	r2, #10
 8012622:	4630      	mov	r0, r6
 8012624:	f7ff ff76 	bl	8012514 <__multadd>
 8012628:	e7ee      	b.n	8012608 <__s2b+0x68>
 801262a:	bf00      	nop
 801262c:	0803e179 	.word	0x0803e179
 8012630:	0803e2c8 	.word	0x0803e2c8

08012634 <__hi0bits>:
 8012634:	0c03      	lsrs	r3, r0, #16
 8012636:	041b      	lsls	r3, r3, #16
 8012638:	b9d3      	cbnz	r3, 8012670 <__hi0bits+0x3c>
 801263a:	0400      	lsls	r0, r0, #16
 801263c:	2310      	movs	r3, #16
 801263e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012642:	bf04      	itt	eq
 8012644:	0200      	lsleq	r0, r0, #8
 8012646:	3308      	addeq	r3, #8
 8012648:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801264c:	bf04      	itt	eq
 801264e:	0100      	lsleq	r0, r0, #4
 8012650:	3304      	addeq	r3, #4
 8012652:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012656:	bf04      	itt	eq
 8012658:	0080      	lsleq	r0, r0, #2
 801265a:	3302      	addeq	r3, #2
 801265c:	2800      	cmp	r0, #0
 801265e:	db05      	blt.n	801266c <__hi0bits+0x38>
 8012660:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012664:	f103 0301 	add.w	r3, r3, #1
 8012668:	bf08      	it	eq
 801266a:	2320      	moveq	r3, #32
 801266c:	4618      	mov	r0, r3
 801266e:	4770      	bx	lr
 8012670:	2300      	movs	r3, #0
 8012672:	e7e4      	b.n	801263e <__hi0bits+0xa>

08012674 <__lo0bits>:
 8012674:	6803      	ldr	r3, [r0, #0]
 8012676:	f013 0207 	ands.w	r2, r3, #7
 801267a:	4601      	mov	r1, r0
 801267c:	d00b      	beq.n	8012696 <__lo0bits+0x22>
 801267e:	07da      	lsls	r2, r3, #31
 8012680:	d423      	bmi.n	80126ca <__lo0bits+0x56>
 8012682:	0798      	lsls	r0, r3, #30
 8012684:	bf49      	itett	mi
 8012686:	085b      	lsrmi	r3, r3, #1
 8012688:	089b      	lsrpl	r3, r3, #2
 801268a:	2001      	movmi	r0, #1
 801268c:	600b      	strmi	r3, [r1, #0]
 801268e:	bf5c      	itt	pl
 8012690:	600b      	strpl	r3, [r1, #0]
 8012692:	2002      	movpl	r0, #2
 8012694:	4770      	bx	lr
 8012696:	b298      	uxth	r0, r3
 8012698:	b9a8      	cbnz	r0, 80126c6 <__lo0bits+0x52>
 801269a:	0c1b      	lsrs	r3, r3, #16
 801269c:	2010      	movs	r0, #16
 801269e:	b2da      	uxtb	r2, r3
 80126a0:	b90a      	cbnz	r2, 80126a6 <__lo0bits+0x32>
 80126a2:	3008      	adds	r0, #8
 80126a4:	0a1b      	lsrs	r3, r3, #8
 80126a6:	071a      	lsls	r2, r3, #28
 80126a8:	bf04      	itt	eq
 80126aa:	091b      	lsreq	r3, r3, #4
 80126ac:	3004      	addeq	r0, #4
 80126ae:	079a      	lsls	r2, r3, #30
 80126b0:	bf04      	itt	eq
 80126b2:	089b      	lsreq	r3, r3, #2
 80126b4:	3002      	addeq	r0, #2
 80126b6:	07da      	lsls	r2, r3, #31
 80126b8:	d403      	bmi.n	80126c2 <__lo0bits+0x4e>
 80126ba:	085b      	lsrs	r3, r3, #1
 80126bc:	f100 0001 	add.w	r0, r0, #1
 80126c0:	d005      	beq.n	80126ce <__lo0bits+0x5a>
 80126c2:	600b      	str	r3, [r1, #0]
 80126c4:	4770      	bx	lr
 80126c6:	4610      	mov	r0, r2
 80126c8:	e7e9      	b.n	801269e <__lo0bits+0x2a>
 80126ca:	2000      	movs	r0, #0
 80126cc:	4770      	bx	lr
 80126ce:	2020      	movs	r0, #32
 80126d0:	4770      	bx	lr
	...

080126d4 <__i2b>:
 80126d4:	b510      	push	{r4, lr}
 80126d6:	460c      	mov	r4, r1
 80126d8:	2101      	movs	r1, #1
 80126da:	f7ff feb9 	bl	8012450 <_Balloc>
 80126de:	4602      	mov	r2, r0
 80126e0:	b928      	cbnz	r0, 80126ee <__i2b+0x1a>
 80126e2:	4b05      	ldr	r3, [pc, #20]	; (80126f8 <__i2b+0x24>)
 80126e4:	4805      	ldr	r0, [pc, #20]	; (80126fc <__i2b+0x28>)
 80126e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80126ea:	f7fa ff71 	bl	800d5d0 <__assert_func>
 80126ee:	2301      	movs	r3, #1
 80126f0:	6144      	str	r4, [r0, #20]
 80126f2:	6103      	str	r3, [r0, #16]
 80126f4:	bd10      	pop	{r4, pc}
 80126f6:	bf00      	nop
 80126f8:	0803e179 	.word	0x0803e179
 80126fc:	0803e2c8 	.word	0x0803e2c8

08012700 <__multiply>:
 8012700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012704:	4691      	mov	r9, r2
 8012706:	690a      	ldr	r2, [r1, #16]
 8012708:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801270c:	429a      	cmp	r2, r3
 801270e:	bfb8      	it	lt
 8012710:	460b      	movlt	r3, r1
 8012712:	460c      	mov	r4, r1
 8012714:	bfbc      	itt	lt
 8012716:	464c      	movlt	r4, r9
 8012718:	4699      	movlt	r9, r3
 801271a:	6927      	ldr	r7, [r4, #16]
 801271c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012720:	68a3      	ldr	r3, [r4, #8]
 8012722:	6861      	ldr	r1, [r4, #4]
 8012724:	eb07 060a 	add.w	r6, r7, sl
 8012728:	42b3      	cmp	r3, r6
 801272a:	b085      	sub	sp, #20
 801272c:	bfb8      	it	lt
 801272e:	3101      	addlt	r1, #1
 8012730:	f7ff fe8e 	bl	8012450 <_Balloc>
 8012734:	b930      	cbnz	r0, 8012744 <__multiply+0x44>
 8012736:	4602      	mov	r2, r0
 8012738:	4b44      	ldr	r3, [pc, #272]	; (801284c <__multiply+0x14c>)
 801273a:	4845      	ldr	r0, [pc, #276]	; (8012850 <__multiply+0x150>)
 801273c:	f240 115d 	movw	r1, #349	; 0x15d
 8012740:	f7fa ff46 	bl	800d5d0 <__assert_func>
 8012744:	f100 0514 	add.w	r5, r0, #20
 8012748:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801274c:	462b      	mov	r3, r5
 801274e:	2200      	movs	r2, #0
 8012750:	4543      	cmp	r3, r8
 8012752:	d321      	bcc.n	8012798 <__multiply+0x98>
 8012754:	f104 0314 	add.w	r3, r4, #20
 8012758:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801275c:	f109 0314 	add.w	r3, r9, #20
 8012760:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012764:	9202      	str	r2, [sp, #8]
 8012766:	1b3a      	subs	r2, r7, r4
 8012768:	3a15      	subs	r2, #21
 801276a:	f022 0203 	bic.w	r2, r2, #3
 801276e:	3204      	adds	r2, #4
 8012770:	f104 0115 	add.w	r1, r4, #21
 8012774:	428f      	cmp	r7, r1
 8012776:	bf38      	it	cc
 8012778:	2204      	movcc	r2, #4
 801277a:	9201      	str	r2, [sp, #4]
 801277c:	9a02      	ldr	r2, [sp, #8]
 801277e:	9303      	str	r3, [sp, #12]
 8012780:	429a      	cmp	r2, r3
 8012782:	d80c      	bhi.n	801279e <__multiply+0x9e>
 8012784:	2e00      	cmp	r6, #0
 8012786:	dd03      	ble.n	8012790 <__multiply+0x90>
 8012788:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801278c:	2b00      	cmp	r3, #0
 801278e:	d05a      	beq.n	8012846 <__multiply+0x146>
 8012790:	6106      	str	r6, [r0, #16]
 8012792:	b005      	add	sp, #20
 8012794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012798:	f843 2b04 	str.w	r2, [r3], #4
 801279c:	e7d8      	b.n	8012750 <__multiply+0x50>
 801279e:	f8b3 a000 	ldrh.w	sl, [r3]
 80127a2:	f1ba 0f00 	cmp.w	sl, #0
 80127a6:	d024      	beq.n	80127f2 <__multiply+0xf2>
 80127a8:	f104 0e14 	add.w	lr, r4, #20
 80127ac:	46a9      	mov	r9, r5
 80127ae:	f04f 0c00 	mov.w	ip, #0
 80127b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80127b6:	f8d9 1000 	ldr.w	r1, [r9]
 80127ba:	fa1f fb82 	uxth.w	fp, r2
 80127be:	b289      	uxth	r1, r1
 80127c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80127c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80127c8:	f8d9 2000 	ldr.w	r2, [r9]
 80127cc:	4461      	add	r1, ip
 80127ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80127d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80127d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80127da:	b289      	uxth	r1, r1
 80127dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80127e0:	4577      	cmp	r7, lr
 80127e2:	f849 1b04 	str.w	r1, [r9], #4
 80127e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80127ea:	d8e2      	bhi.n	80127b2 <__multiply+0xb2>
 80127ec:	9a01      	ldr	r2, [sp, #4]
 80127ee:	f845 c002 	str.w	ip, [r5, r2]
 80127f2:	9a03      	ldr	r2, [sp, #12]
 80127f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80127f8:	3304      	adds	r3, #4
 80127fa:	f1b9 0f00 	cmp.w	r9, #0
 80127fe:	d020      	beq.n	8012842 <__multiply+0x142>
 8012800:	6829      	ldr	r1, [r5, #0]
 8012802:	f104 0c14 	add.w	ip, r4, #20
 8012806:	46ae      	mov	lr, r5
 8012808:	f04f 0a00 	mov.w	sl, #0
 801280c:	f8bc b000 	ldrh.w	fp, [ip]
 8012810:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012814:	fb09 220b 	mla	r2, r9, fp, r2
 8012818:	4492      	add	sl, r2
 801281a:	b289      	uxth	r1, r1
 801281c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012820:	f84e 1b04 	str.w	r1, [lr], #4
 8012824:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012828:	f8be 1000 	ldrh.w	r1, [lr]
 801282c:	0c12      	lsrs	r2, r2, #16
 801282e:	fb09 1102 	mla	r1, r9, r2, r1
 8012832:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012836:	4567      	cmp	r7, ip
 8012838:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801283c:	d8e6      	bhi.n	801280c <__multiply+0x10c>
 801283e:	9a01      	ldr	r2, [sp, #4]
 8012840:	50a9      	str	r1, [r5, r2]
 8012842:	3504      	adds	r5, #4
 8012844:	e79a      	b.n	801277c <__multiply+0x7c>
 8012846:	3e01      	subs	r6, #1
 8012848:	e79c      	b.n	8012784 <__multiply+0x84>
 801284a:	bf00      	nop
 801284c:	0803e179 	.word	0x0803e179
 8012850:	0803e2c8 	.word	0x0803e2c8

08012854 <__pow5mult>:
 8012854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012858:	4615      	mov	r5, r2
 801285a:	f012 0203 	ands.w	r2, r2, #3
 801285e:	4606      	mov	r6, r0
 8012860:	460f      	mov	r7, r1
 8012862:	d007      	beq.n	8012874 <__pow5mult+0x20>
 8012864:	4c25      	ldr	r4, [pc, #148]	; (80128fc <__pow5mult+0xa8>)
 8012866:	3a01      	subs	r2, #1
 8012868:	2300      	movs	r3, #0
 801286a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801286e:	f7ff fe51 	bl	8012514 <__multadd>
 8012872:	4607      	mov	r7, r0
 8012874:	10ad      	asrs	r5, r5, #2
 8012876:	d03d      	beq.n	80128f4 <__pow5mult+0xa0>
 8012878:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801287a:	b97c      	cbnz	r4, 801289c <__pow5mult+0x48>
 801287c:	2010      	movs	r0, #16
 801287e:	f7fa ff03 	bl	800d688 <malloc>
 8012882:	4602      	mov	r2, r0
 8012884:	6270      	str	r0, [r6, #36]	; 0x24
 8012886:	b928      	cbnz	r0, 8012894 <__pow5mult+0x40>
 8012888:	4b1d      	ldr	r3, [pc, #116]	; (8012900 <__pow5mult+0xac>)
 801288a:	481e      	ldr	r0, [pc, #120]	; (8012904 <__pow5mult+0xb0>)
 801288c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012890:	f7fa fe9e 	bl	800d5d0 <__assert_func>
 8012894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012898:	6004      	str	r4, [r0, #0]
 801289a:	60c4      	str	r4, [r0, #12]
 801289c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80128a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80128a4:	b94c      	cbnz	r4, 80128ba <__pow5mult+0x66>
 80128a6:	f240 2171 	movw	r1, #625	; 0x271
 80128aa:	4630      	mov	r0, r6
 80128ac:	f7ff ff12 	bl	80126d4 <__i2b>
 80128b0:	2300      	movs	r3, #0
 80128b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80128b6:	4604      	mov	r4, r0
 80128b8:	6003      	str	r3, [r0, #0]
 80128ba:	f04f 0900 	mov.w	r9, #0
 80128be:	07eb      	lsls	r3, r5, #31
 80128c0:	d50a      	bpl.n	80128d8 <__pow5mult+0x84>
 80128c2:	4639      	mov	r1, r7
 80128c4:	4622      	mov	r2, r4
 80128c6:	4630      	mov	r0, r6
 80128c8:	f7ff ff1a 	bl	8012700 <__multiply>
 80128cc:	4639      	mov	r1, r7
 80128ce:	4680      	mov	r8, r0
 80128d0:	4630      	mov	r0, r6
 80128d2:	f7ff fdfd 	bl	80124d0 <_Bfree>
 80128d6:	4647      	mov	r7, r8
 80128d8:	106d      	asrs	r5, r5, #1
 80128da:	d00b      	beq.n	80128f4 <__pow5mult+0xa0>
 80128dc:	6820      	ldr	r0, [r4, #0]
 80128de:	b938      	cbnz	r0, 80128f0 <__pow5mult+0x9c>
 80128e0:	4622      	mov	r2, r4
 80128e2:	4621      	mov	r1, r4
 80128e4:	4630      	mov	r0, r6
 80128e6:	f7ff ff0b 	bl	8012700 <__multiply>
 80128ea:	6020      	str	r0, [r4, #0]
 80128ec:	f8c0 9000 	str.w	r9, [r0]
 80128f0:	4604      	mov	r4, r0
 80128f2:	e7e4      	b.n	80128be <__pow5mult+0x6a>
 80128f4:	4638      	mov	r0, r7
 80128f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128fa:	bf00      	nop
 80128fc:	0803e418 	.word	0x0803e418
 8012900:	0803daf4 	.word	0x0803daf4
 8012904:	0803e2c8 	.word	0x0803e2c8

08012908 <__lshift>:
 8012908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801290c:	460c      	mov	r4, r1
 801290e:	6849      	ldr	r1, [r1, #4]
 8012910:	6923      	ldr	r3, [r4, #16]
 8012912:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012916:	68a3      	ldr	r3, [r4, #8]
 8012918:	4607      	mov	r7, r0
 801291a:	4691      	mov	r9, r2
 801291c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012920:	f108 0601 	add.w	r6, r8, #1
 8012924:	42b3      	cmp	r3, r6
 8012926:	db0b      	blt.n	8012940 <__lshift+0x38>
 8012928:	4638      	mov	r0, r7
 801292a:	f7ff fd91 	bl	8012450 <_Balloc>
 801292e:	4605      	mov	r5, r0
 8012930:	b948      	cbnz	r0, 8012946 <__lshift+0x3e>
 8012932:	4602      	mov	r2, r0
 8012934:	4b2a      	ldr	r3, [pc, #168]	; (80129e0 <__lshift+0xd8>)
 8012936:	482b      	ldr	r0, [pc, #172]	; (80129e4 <__lshift+0xdc>)
 8012938:	f240 11d9 	movw	r1, #473	; 0x1d9
 801293c:	f7fa fe48 	bl	800d5d0 <__assert_func>
 8012940:	3101      	adds	r1, #1
 8012942:	005b      	lsls	r3, r3, #1
 8012944:	e7ee      	b.n	8012924 <__lshift+0x1c>
 8012946:	2300      	movs	r3, #0
 8012948:	f100 0114 	add.w	r1, r0, #20
 801294c:	f100 0210 	add.w	r2, r0, #16
 8012950:	4618      	mov	r0, r3
 8012952:	4553      	cmp	r3, sl
 8012954:	db37      	blt.n	80129c6 <__lshift+0xbe>
 8012956:	6920      	ldr	r0, [r4, #16]
 8012958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801295c:	f104 0314 	add.w	r3, r4, #20
 8012960:	f019 091f 	ands.w	r9, r9, #31
 8012964:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012968:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801296c:	d02f      	beq.n	80129ce <__lshift+0xc6>
 801296e:	f1c9 0e20 	rsb	lr, r9, #32
 8012972:	468a      	mov	sl, r1
 8012974:	f04f 0c00 	mov.w	ip, #0
 8012978:	681a      	ldr	r2, [r3, #0]
 801297a:	fa02 f209 	lsl.w	r2, r2, r9
 801297e:	ea42 020c 	orr.w	r2, r2, ip
 8012982:	f84a 2b04 	str.w	r2, [sl], #4
 8012986:	f853 2b04 	ldr.w	r2, [r3], #4
 801298a:	4298      	cmp	r0, r3
 801298c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012990:	d8f2      	bhi.n	8012978 <__lshift+0x70>
 8012992:	1b03      	subs	r3, r0, r4
 8012994:	3b15      	subs	r3, #21
 8012996:	f023 0303 	bic.w	r3, r3, #3
 801299a:	3304      	adds	r3, #4
 801299c:	f104 0215 	add.w	r2, r4, #21
 80129a0:	4290      	cmp	r0, r2
 80129a2:	bf38      	it	cc
 80129a4:	2304      	movcc	r3, #4
 80129a6:	f841 c003 	str.w	ip, [r1, r3]
 80129aa:	f1bc 0f00 	cmp.w	ip, #0
 80129ae:	d001      	beq.n	80129b4 <__lshift+0xac>
 80129b0:	f108 0602 	add.w	r6, r8, #2
 80129b4:	3e01      	subs	r6, #1
 80129b6:	4638      	mov	r0, r7
 80129b8:	612e      	str	r6, [r5, #16]
 80129ba:	4621      	mov	r1, r4
 80129bc:	f7ff fd88 	bl	80124d0 <_Bfree>
 80129c0:	4628      	mov	r0, r5
 80129c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80129ca:	3301      	adds	r3, #1
 80129cc:	e7c1      	b.n	8012952 <__lshift+0x4a>
 80129ce:	3904      	subs	r1, #4
 80129d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80129d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80129d8:	4298      	cmp	r0, r3
 80129da:	d8f9      	bhi.n	80129d0 <__lshift+0xc8>
 80129dc:	e7ea      	b.n	80129b4 <__lshift+0xac>
 80129de:	bf00      	nop
 80129e0:	0803e179 	.word	0x0803e179
 80129e4:	0803e2c8 	.word	0x0803e2c8

080129e8 <__mcmp>:
 80129e8:	b530      	push	{r4, r5, lr}
 80129ea:	6902      	ldr	r2, [r0, #16]
 80129ec:	690c      	ldr	r4, [r1, #16]
 80129ee:	1b12      	subs	r2, r2, r4
 80129f0:	d10e      	bne.n	8012a10 <__mcmp+0x28>
 80129f2:	f100 0314 	add.w	r3, r0, #20
 80129f6:	3114      	adds	r1, #20
 80129f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80129fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012a00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012a04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012a08:	42a5      	cmp	r5, r4
 8012a0a:	d003      	beq.n	8012a14 <__mcmp+0x2c>
 8012a0c:	d305      	bcc.n	8012a1a <__mcmp+0x32>
 8012a0e:	2201      	movs	r2, #1
 8012a10:	4610      	mov	r0, r2
 8012a12:	bd30      	pop	{r4, r5, pc}
 8012a14:	4283      	cmp	r3, r0
 8012a16:	d3f3      	bcc.n	8012a00 <__mcmp+0x18>
 8012a18:	e7fa      	b.n	8012a10 <__mcmp+0x28>
 8012a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8012a1e:	e7f7      	b.n	8012a10 <__mcmp+0x28>

08012a20 <__mdiff>:
 8012a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a24:	460c      	mov	r4, r1
 8012a26:	4606      	mov	r6, r0
 8012a28:	4611      	mov	r1, r2
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	4690      	mov	r8, r2
 8012a2e:	f7ff ffdb 	bl	80129e8 <__mcmp>
 8012a32:	1e05      	subs	r5, r0, #0
 8012a34:	d110      	bne.n	8012a58 <__mdiff+0x38>
 8012a36:	4629      	mov	r1, r5
 8012a38:	4630      	mov	r0, r6
 8012a3a:	f7ff fd09 	bl	8012450 <_Balloc>
 8012a3e:	b930      	cbnz	r0, 8012a4e <__mdiff+0x2e>
 8012a40:	4b3a      	ldr	r3, [pc, #232]	; (8012b2c <__mdiff+0x10c>)
 8012a42:	4602      	mov	r2, r0
 8012a44:	f240 2132 	movw	r1, #562	; 0x232
 8012a48:	4839      	ldr	r0, [pc, #228]	; (8012b30 <__mdiff+0x110>)
 8012a4a:	f7fa fdc1 	bl	800d5d0 <__assert_func>
 8012a4e:	2301      	movs	r3, #1
 8012a50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a58:	bfa4      	itt	ge
 8012a5a:	4643      	movge	r3, r8
 8012a5c:	46a0      	movge	r8, r4
 8012a5e:	4630      	mov	r0, r6
 8012a60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012a64:	bfa6      	itte	ge
 8012a66:	461c      	movge	r4, r3
 8012a68:	2500      	movge	r5, #0
 8012a6a:	2501      	movlt	r5, #1
 8012a6c:	f7ff fcf0 	bl	8012450 <_Balloc>
 8012a70:	b920      	cbnz	r0, 8012a7c <__mdiff+0x5c>
 8012a72:	4b2e      	ldr	r3, [pc, #184]	; (8012b2c <__mdiff+0x10c>)
 8012a74:	4602      	mov	r2, r0
 8012a76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012a7a:	e7e5      	b.n	8012a48 <__mdiff+0x28>
 8012a7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012a80:	6926      	ldr	r6, [r4, #16]
 8012a82:	60c5      	str	r5, [r0, #12]
 8012a84:	f104 0914 	add.w	r9, r4, #20
 8012a88:	f108 0514 	add.w	r5, r8, #20
 8012a8c:	f100 0e14 	add.w	lr, r0, #20
 8012a90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012a94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012a98:	f108 0210 	add.w	r2, r8, #16
 8012a9c:	46f2      	mov	sl, lr
 8012a9e:	2100      	movs	r1, #0
 8012aa0:	f859 3b04 	ldr.w	r3, [r9], #4
 8012aa4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012aa8:	fa1f f883 	uxth.w	r8, r3
 8012aac:	fa11 f18b 	uxtah	r1, r1, fp
 8012ab0:	0c1b      	lsrs	r3, r3, #16
 8012ab2:	eba1 0808 	sub.w	r8, r1, r8
 8012ab6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012aba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012abe:	fa1f f888 	uxth.w	r8, r8
 8012ac2:	1419      	asrs	r1, r3, #16
 8012ac4:	454e      	cmp	r6, r9
 8012ac6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012aca:	f84a 3b04 	str.w	r3, [sl], #4
 8012ace:	d8e7      	bhi.n	8012aa0 <__mdiff+0x80>
 8012ad0:	1b33      	subs	r3, r6, r4
 8012ad2:	3b15      	subs	r3, #21
 8012ad4:	f023 0303 	bic.w	r3, r3, #3
 8012ad8:	3304      	adds	r3, #4
 8012ada:	3415      	adds	r4, #21
 8012adc:	42a6      	cmp	r6, r4
 8012ade:	bf38      	it	cc
 8012ae0:	2304      	movcc	r3, #4
 8012ae2:	441d      	add	r5, r3
 8012ae4:	4473      	add	r3, lr
 8012ae6:	469e      	mov	lr, r3
 8012ae8:	462e      	mov	r6, r5
 8012aea:	4566      	cmp	r6, ip
 8012aec:	d30e      	bcc.n	8012b0c <__mdiff+0xec>
 8012aee:	f10c 0203 	add.w	r2, ip, #3
 8012af2:	1b52      	subs	r2, r2, r5
 8012af4:	f022 0203 	bic.w	r2, r2, #3
 8012af8:	3d03      	subs	r5, #3
 8012afa:	45ac      	cmp	ip, r5
 8012afc:	bf38      	it	cc
 8012afe:	2200      	movcc	r2, #0
 8012b00:	441a      	add	r2, r3
 8012b02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012b06:	b17b      	cbz	r3, 8012b28 <__mdiff+0x108>
 8012b08:	6107      	str	r7, [r0, #16]
 8012b0a:	e7a3      	b.n	8012a54 <__mdiff+0x34>
 8012b0c:	f856 8b04 	ldr.w	r8, [r6], #4
 8012b10:	fa11 f288 	uxtah	r2, r1, r8
 8012b14:	1414      	asrs	r4, r2, #16
 8012b16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012b1a:	b292      	uxth	r2, r2
 8012b1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012b20:	f84e 2b04 	str.w	r2, [lr], #4
 8012b24:	1421      	asrs	r1, r4, #16
 8012b26:	e7e0      	b.n	8012aea <__mdiff+0xca>
 8012b28:	3f01      	subs	r7, #1
 8012b2a:	e7ea      	b.n	8012b02 <__mdiff+0xe2>
 8012b2c:	0803e179 	.word	0x0803e179
 8012b30:	0803e2c8 	.word	0x0803e2c8

08012b34 <__ulp>:
 8012b34:	b082      	sub	sp, #8
 8012b36:	ed8d 0b00 	vstr	d0, [sp]
 8012b3a:	9b01      	ldr	r3, [sp, #4]
 8012b3c:	4912      	ldr	r1, [pc, #72]	; (8012b88 <__ulp+0x54>)
 8012b3e:	4019      	ands	r1, r3
 8012b40:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012b44:	2900      	cmp	r1, #0
 8012b46:	dd05      	ble.n	8012b54 <__ulp+0x20>
 8012b48:	2200      	movs	r2, #0
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	ec43 2b10 	vmov	d0, r2, r3
 8012b50:	b002      	add	sp, #8
 8012b52:	4770      	bx	lr
 8012b54:	4249      	negs	r1, r1
 8012b56:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012b5a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012b5e:	f04f 0200 	mov.w	r2, #0
 8012b62:	f04f 0300 	mov.w	r3, #0
 8012b66:	da04      	bge.n	8012b72 <__ulp+0x3e>
 8012b68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012b6c:	fa41 f300 	asr.w	r3, r1, r0
 8012b70:	e7ec      	b.n	8012b4c <__ulp+0x18>
 8012b72:	f1a0 0114 	sub.w	r1, r0, #20
 8012b76:	291e      	cmp	r1, #30
 8012b78:	bfda      	itte	le
 8012b7a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012b7e:	fa20 f101 	lsrle.w	r1, r0, r1
 8012b82:	2101      	movgt	r1, #1
 8012b84:	460a      	mov	r2, r1
 8012b86:	e7e1      	b.n	8012b4c <__ulp+0x18>
 8012b88:	7ff00000 	.word	0x7ff00000

08012b8c <__b2d>:
 8012b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b8e:	6905      	ldr	r5, [r0, #16]
 8012b90:	f100 0714 	add.w	r7, r0, #20
 8012b94:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012b98:	1f2e      	subs	r6, r5, #4
 8012b9a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f7ff fd48 	bl	8012634 <__hi0bits>
 8012ba4:	f1c0 0320 	rsb	r3, r0, #32
 8012ba8:	280a      	cmp	r0, #10
 8012baa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012c28 <__b2d+0x9c>
 8012bae:	600b      	str	r3, [r1, #0]
 8012bb0:	dc14      	bgt.n	8012bdc <__b2d+0x50>
 8012bb2:	f1c0 0e0b 	rsb	lr, r0, #11
 8012bb6:	fa24 f10e 	lsr.w	r1, r4, lr
 8012bba:	42b7      	cmp	r7, r6
 8012bbc:	ea41 030c 	orr.w	r3, r1, ip
 8012bc0:	bf34      	ite	cc
 8012bc2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012bc6:	2100      	movcs	r1, #0
 8012bc8:	3015      	adds	r0, #21
 8012bca:	fa04 f000 	lsl.w	r0, r4, r0
 8012bce:	fa21 f10e 	lsr.w	r1, r1, lr
 8012bd2:	ea40 0201 	orr.w	r2, r0, r1
 8012bd6:	ec43 2b10 	vmov	d0, r2, r3
 8012bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bdc:	42b7      	cmp	r7, r6
 8012bde:	bf3a      	itte	cc
 8012be0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012be4:	f1a5 0608 	subcc.w	r6, r5, #8
 8012be8:	2100      	movcs	r1, #0
 8012bea:	380b      	subs	r0, #11
 8012bec:	d017      	beq.n	8012c1e <__b2d+0x92>
 8012bee:	f1c0 0c20 	rsb	ip, r0, #32
 8012bf2:	fa04 f500 	lsl.w	r5, r4, r0
 8012bf6:	42be      	cmp	r6, r7
 8012bf8:	fa21 f40c 	lsr.w	r4, r1, ip
 8012bfc:	ea45 0504 	orr.w	r5, r5, r4
 8012c00:	bf8c      	ite	hi
 8012c02:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012c06:	2400      	movls	r4, #0
 8012c08:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012c0c:	fa01 f000 	lsl.w	r0, r1, r0
 8012c10:	fa24 f40c 	lsr.w	r4, r4, ip
 8012c14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012c18:	ea40 0204 	orr.w	r2, r0, r4
 8012c1c:	e7db      	b.n	8012bd6 <__b2d+0x4a>
 8012c1e:	ea44 030c 	orr.w	r3, r4, ip
 8012c22:	460a      	mov	r2, r1
 8012c24:	e7d7      	b.n	8012bd6 <__b2d+0x4a>
 8012c26:	bf00      	nop
 8012c28:	3ff00000 	.word	0x3ff00000

08012c2c <__d2b>:
 8012c2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012c30:	4689      	mov	r9, r1
 8012c32:	2101      	movs	r1, #1
 8012c34:	ec57 6b10 	vmov	r6, r7, d0
 8012c38:	4690      	mov	r8, r2
 8012c3a:	f7ff fc09 	bl	8012450 <_Balloc>
 8012c3e:	4604      	mov	r4, r0
 8012c40:	b930      	cbnz	r0, 8012c50 <__d2b+0x24>
 8012c42:	4602      	mov	r2, r0
 8012c44:	4b25      	ldr	r3, [pc, #148]	; (8012cdc <__d2b+0xb0>)
 8012c46:	4826      	ldr	r0, [pc, #152]	; (8012ce0 <__d2b+0xb4>)
 8012c48:	f240 310a 	movw	r1, #778	; 0x30a
 8012c4c:	f7fa fcc0 	bl	800d5d0 <__assert_func>
 8012c50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012c54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012c58:	bb35      	cbnz	r5, 8012ca8 <__d2b+0x7c>
 8012c5a:	2e00      	cmp	r6, #0
 8012c5c:	9301      	str	r3, [sp, #4]
 8012c5e:	d028      	beq.n	8012cb2 <__d2b+0x86>
 8012c60:	4668      	mov	r0, sp
 8012c62:	9600      	str	r6, [sp, #0]
 8012c64:	f7ff fd06 	bl	8012674 <__lo0bits>
 8012c68:	9900      	ldr	r1, [sp, #0]
 8012c6a:	b300      	cbz	r0, 8012cae <__d2b+0x82>
 8012c6c:	9a01      	ldr	r2, [sp, #4]
 8012c6e:	f1c0 0320 	rsb	r3, r0, #32
 8012c72:	fa02 f303 	lsl.w	r3, r2, r3
 8012c76:	430b      	orrs	r3, r1
 8012c78:	40c2      	lsrs	r2, r0
 8012c7a:	6163      	str	r3, [r4, #20]
 8012c7c:	9201      	str	r2, [sp, #4]
 8012c7e:	9b01      	ldr	r3, [sp, #4]
 8012c80:	61a3      	str	r3, [r4, #24]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	bf14      	ite	ne
 8012c86:	2202      	movne	r2, #2
 8012c88:	2201      	moveq	r2, #1
 8012c8a:	6122      	str	r2, [r4, #16]
 8012c8c:	b1d5      	cbz	r5, 8012cc4 <__d2b+0x98>
 8012c8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012c92:	4405      	add	r5, r0
 8012c94:	f8c9 5000 	str.w	r5, [r9]
 8012c98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012c9c:	f8c8 0000 	str.w	r0, [r8]
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	b003      	add	sp, #12
 8012ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012cac:	e7d5      	b.n	8012c5a <__d2b+0x2e>
 8012cae:	6161      	str	r1, [r4, #20]
 8012cb0:	e7e5      	b.n	8012c7e <__d2b+0x52>
 8012cb2:	a801      	add	r0, sp, #4
 8012cb4:	f7ff fcde 	bl	8012674 <__lo0bits>
 8012cb8:	9b01      	ldr	r3, [sp, #4]
 8012cba:	6163      	str	r3, [r4, #20]
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	6122      	str	r2, [r4, #16]
 8012cc0:	3020      	adds	r0, #32
 8012cc2:	e7e3      	b.n	8012c8c <__d2b+0x60>
 8012cc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012cc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012ccc:	f8c9 0000 	str.w	r0, [r9]
 8012cd0:	6918      	ldr	r0, [r3, #16]
 8012cd2:	f7ff fcaf 	bl	8012634 <__hi0bits>
 8012cd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012cda:	e7df      	b.n	8012c9c <__d2b+0x70>
 8012cdc:	0803e179 	.word	0x0803e179
 8012ce0:	0803e2c8 	.word	0x0803e2c8

08012ce4 <__ratio>:
 8012ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce8:	4688      	mov	r8, r1
 8012cea:	4669      	mov	r1, sp
 8012cec:	4681      	mov	r9, r0
 8012cee:	f7ff ff4d 	bl	8012b8c <__b2d>
 8012cf2:	a901      	add	r1, sp, #4
 8012cf4:	4640      	mov	r0, r8
 8012cf6:	ec55 4b10 	vmov	r4, r5, d0
 8012cfa:	f7ff ff47 	bl	8012b8c <__b2d>
 8012cfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012d02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012d06:	eba3 0c02 	sub.w	ip, r3, r2
 8012d0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012d0e:	1a9b      	subs	r3, r3, r2
 8012d10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012d14:	ec51 0b10 	vmov	r0, r1, d0
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	bfd6      	itet	le
 8012d1c:	460a      	movle	r2, r1
 8012d1e:	462a      	movgt	r2, r5
 8012d20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012d24:	468b      	mov	fp, r1
 8012d26:	462f      	mov	r7, r5
 8012d28:	bfd4      	ite	le
 8012d2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012d2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012d32:	4620      	mov	r0, r4
 8012d34:	ee10 2a10 	vmov	r2, s0
 8012d38:	465b      	mov	r3, fp
 8012d3a:	4639      	mov	r1, r7
 8012d3c:	f7ed fda0 	bl	8000880 <__aeabi_ddiv>
 8012d40:	ec41 0b10 	vmov	d0, r0, r1
 8012d44:	b003      	add	sp, #12
 8012d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012d4a <__copybits>:
 8012d4a:	3901      	subs	r1, #1
 8012d4c:	b570      	push	{r4, r5, r6, lr}
 8012d4e:	1149      	asrs	r1, r1, #5
 8012d50:	6914      	ldr	r4, [r2, #16]
 8012d52:	3101      	adds	r1, #1
 8012d54:	f102 0314 	add.w	r3, r2, #20
 8012d58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012d5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012d60:	1f05      	subs	r5, r0, #4
 8012d62:	42a3      	cmp	r3, r4
 8012d64:	d30c      	bcc.n	8012d80 <__copybits+0x36>
 8012d66:	1aa3      	subs	r3, r4, r2
 8012d68:	3b11      	subs	r3, #17
 8012d6a:	f023 0303 	bic.w	r3, r3, #3
 8012d6e:	3211      	adds	r2, #17
 8012d70:	42a2      	cmp	r2, r4
 8012d72:	bf88      	it	hi
 8012d74:	2300      	movhi	r3, #0
 8012d76:	4418      	add	r0, r3
 8012d78:	2300      	movs	r3, #0
 8012d7a:	4288      	cmp	r0, r1
 8012d7c:	d305      	bcc.n	8012d8a <__copybits+0x40>
 8012d7e:	bd70      	pop	{r4, r5, r6, pc}
 8012d80:	f853 6b04 	ldr.w	r6, [r3], #4
 8012d84:	f845 6f04 	str.w	r6, [r5, #4]!
 8012d88:	e7eb      	b.n	8012d62 <__copybits+0x18>
 8012d8a:	f840 3b04 	str.w	r3, [r0], #4
 8012d8e:	e7f4      	b.n	8012d7a <__copybits+0x30>

08012d90 <__any_on>:
 8012d90:	f100 0214 	add.w	r2, r0, #20
 8012d94:	6900      	ldr	r0, [r0, #16]
 8012d96:	114b      	asrs	r3, r1, #5
 8012d98:	4298      	cmp	r0, r3
 8012d9a:	b510      	push	{r4, lr}
 8012d9c:	db11      	blt.n	8012dc2 <__any_on+0x32>
 8012d9e:	dd0a      	ble.n	8012db6 <__any_on+0x26>
 8012da0:	f011 011f 	ands.w	r1, r1, #31
 8012da4:	d007      	beq.n	8012db6 <__any_on+0x26>
 8012da6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012daa:	fa24 f001 	lsr.w	r0, r4, r1
 8012dae:	fa00 f101 	lsl.w	r1, r0, r1
 8012db2:	428c      	cmp	r4, r1
 8012db4:	d10b      	bne.n	8012dce <__any_on+0x3e>
 8012db6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012dba:	4293      	cmp	r3, r2
 8012dbc:	d803      	bhi.n	8012dc6 <__any_on+0x36>
 8012dbe:	2000      	movs	r0, #0
 8012dc0:	bd10      	pop	{r4, pc}
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	e7f7      	b.n	8012db6 <__any_on+0x26>
 8012dc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012dca:	2900      	cmp	r1, #0
 8012dcc:	d0f5      	beq.n	8012dba <__any_on+0x2a>
 8012dce:	2001      	movs	r0, #1
 8012dd0:	e7f6      	b.n	8012dc0 <__any_on+0x30>

08012dd2 <_calloc_r>:
 8012dd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012dd4:	fba1 2402 	umull	r2, r4, r1, r2
 8012dd8:	b94c      	cbnz	r4, 8012dee <_calloc_r+0x1c>
 8012dda:	4611      	mov	r1, r2
 8012ddc:	9201      	str	r2, [sp, #4]
 8012dde:	f7fa ff57 	bl	800dc90 <_malloc_r>
 8012de2:	9a01      	ldr	r2, [sp, #4]
 8012de4:	4605      	mov	r5, r0
 8012de6:	b930      	cbnz	r0, 8012df6 <_calloc_r+0x24>
 8012de8:	4628      	mov	r0, r5
 8012dea:	b003      	add	sp, #12
 8012dec:	bd30      	pop	{r4, r5, pc}
 8012dee:	220c      	movs	r2, #12
 8012df0:	6002      	str	r2, [r0, #0]
 8012df2:	2500      	movs	r5, #0
 8012df4:	e7f8      	b.n	8012de8 <_calloc_r+0x16>
 8012df6:	4621      	mov	r1, r4
 8012df8:	f7fa fc64 	bl	800d6c4 <memset>
 8012dfc:	e7f4      	b.n	8012de8 <_calloc_r+0x16>

08012dfe <_realloc_r>:
 8012dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e02:	4680      	mov	r8, r0
 8012e04:	4614      	mov	r4, r2
 8012e06:	460e      	mov	r6, r1
 8012e08:	b921      	cbnz	r1, 8012e14 <_realloc_r+0x16>
 8012e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e0e:	4611      	mov	r1, r2
 8012e10:	f7fa bf3e 	b.w	800dc90 <_malloc_r>
 8012e14:	b92a      	cbnz	r2, 8012e22 <_realloc_r+0x24>
 8012e16:	f7fa fecf 	bl	800dbb8 <_free_r>
 8012e1a:	4625      	mov	r5, r4
 8012e1c:	4628      	mov	r0, r5
 8012e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e22:	f000 fdef 	bl	8013a04 <_malloc_usable_size_r>
 8012e26:	4284      	cmp	r4, r0
 8012e28:	4607      	mov	r7, r0
 8012e2a:	d802      	bhi.n	8012e32 <_realloc_r+0x34>
 8012e2c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012e30:	d812      	bhi.n	8012e58 <_realloc_r+0x5a>
 8012e32:	4621      	mov	r1, r4
 8012e34:	4640      	mov	r0, r8
 8012e36:	f7fa ff2b 	bl	800dc90 <_malloc_r>
 8012e3a:	4605      	mov	r5, r0
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	d0ed      	beq.n	8012e1c <_realloc_r+0x1e>
 8012e40:	42bc      	cmp	r4, r7
 8012e42:	4622      	mov	r2, r4
 8012e44:	4631      	mov	r1, r6
 8012e46:	bf28      	it	cs
 8012e48:	463a      	movcs	r2, r7
 8012e4a:	f7fa fc2d 	bl	800d6a8 <memcpy>
 8012e4e:	4631      	mov	r1, r6
 8012e50:	4640      	mov	r0, r8
 8012e52:	f7fa feb1 	bl	800dbb8 <_free_r>
 8012e56:	e7e1      	b.n	8012e1c <_realloc_r+0x1e>
 8012e58:	4635      	mov	r5, r6
 8012e5a:	e7df      	b.n	8012e1c <_realloc_r+0x1e>

08012e5c <__ssputs_r>:
 8012e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e60:	688e      	ldr	r6, [r1, #8]
 8012e62:	429e      	cmp	r6, r3
 8012e64:	4682      	mov	sl, r0
 8012e66:	460c      	mov	r4, r1
 8012e68:	4690      	mov	r8, r2
 8012e6a:	461f      	mov	r7, r3
 8012e6c:	d838      	bhi.n	8012ee0 <__ssputs_r+0x84>
 8012e6e:	898a      	ldrh	r2, [r1, #12]
 8012e70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012e74:	d032      	beq.n	8012edc <__ssputs_r+0x80>
 8012e76:	6825      	ldr	r5, [r4, #0]
 8012e78:	6909      	ldr	r1, [r1, #16]
 8012e7a:	eba5 0901 	sub.w	r9, r5, r1
 8012e7e:	6965      	ldr	r5, [r4, #20]
 8012e80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012e88:	3301      	adds	r3, #1
 8012e8a:	444b      	add	r3, r9
 8012e8c:	106d      	asrs	r5, r5, #1
 8012e8e:	429d      	cmp	r5, r3
 8012e90:	bf38      	it	cc
 8012e92:	461d      	movcc	r5, r3
 8012e94:	0553      	lsls	r3, r2, #21
 8012e96:	d531      	bpl.n	8012efc <__ssputs_r+0xa0>
 8012e98:	4629      	mov	r1, r5
 8012e9a:	f7fa fef9 	bl	800dc90 <_malloc_r>
 8012e9e:	4606      	mov	r6, r0
 8012ea0:	b950      	cbnz	r0, 8012eb8 <__ssputs_r+0x5c>
 8012ea2:	230c      	movs	r3, #12
 8012ea4:	f8ca 3000 	str.w	r3, [sl]
 8012ea8:	89a3      	ldrh	r3, [r4, #12]
 8012eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012eae:	81a3      	strh	r3, [r4, #12]
 8012eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eb8:	6921      	ldr	r1, [r4, #16]
 8012eba:	464a      	mov	r2, r9
 8012ebc:	f7fa fbf4 	bl	800d6a8 <memcpy>
 8012ec0:	89a3      	ldrh	r3, [r4, #12]
 8012ec2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012eca:	81a3      	strh	r3, [r4, #12]
 8012ecc:	6126      	str	r6, [r4, #16]
 8012ece:	6165      	str	r5, [r4, #20]
 8012ed0:	444e      	add	r6, r9
 8012ed2:	eba5 0509 	sub.w	r5, r5, r9
 8012ed6:	6026      	str	r6, [r4, #0]
 8012ed8:	60a5      	str	r5, [r4, #8]
 8012eda:	463e      	mov	r6, r7
 8012edc:	42be      	cmp	r6, r7
 8012ede:	d900      	bls.n	8012ee2 <__ssputs_r+0x86>
 8012ee0:	463e      	mov	r6, r7
 8012ee2:	6820      	ldr	r0, [r4, #0]
 8012ee4:	4632      	mov	r2, r6
 8012ee6:	4641      	mov	r1, r8
 8012ee8:	f7ff fa8c 	bl	8012404 <memmove>
 8012eec:	68a3      	ldr	r3, [r4, #8]
 8012eee:	1b9b      	subs	r3, r3, r6
 8012ef0:	60a3      	str	r3, [r4, #8]
 8012ef2:	6823      	ldr	r3, [r4, #0]
 8012ef4:	4433      	add	r3, r6
 8012ef6:	6023      	str	r3, [r4, #0]
 8012ef8:	2000      	movs	r0, #0
 8012efa:	e7db      	b.n	8012eb4 <__ssputs_r+0x58>
 8012efc:	462a      	mov	r2, r5
 8012efe:	f7ff ff7e 	bl	8012dfe <_realloc_r>
 8012f02:	4606      	mov	r6, r0
 8012f04:	2800      	cmp	r0, #0
 8012f06:	d1e1      	bne.n	8012ecc <__ssputs_r+0x70>
 8012f08:	6921      	ldr	r1, [r4, #16]
 8012f0a:	4650      	mov	r0, sl
 8012f0c:	f7fa fe54 	bl	800dbb8 <_free_r>
 8012f10:	e7c7      	b.n	8012ea2 <__ssputs_r+0x46>
	...

08012f14 <_svfiprintf_r>:
 8012f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f18:	4698      	mov	r8, r3
 8012f1a:	898b      	ldrh	r3, [r1, #12]
 8012f1c:	061b      	lsls	r3, r3, #24
 8012f1e:	b09d      	sub	sp, #116	; 0x74
 8012f20:	4607      	mov	r7, r0
 8012f22:	460d      	mov	r5, r1
 8012f24:	4614      	mov	r4, r2
 8012f26:	d50e      	bpl.n	8012f46 <_svfiprintf_r+0x32>
 8012f28:	690b      	ldr	r3, [r1, #16]
 8012f2a:	b963      	cbnz	r3, 8012f46 <_svfiprintf_r+0x32>
 8012f2c:	2140      	movs	r1, #64	; 0x40
 8012f2e:	f7fa feaf 	bl	800dc90 <_malloc_r>
 8012f32:	6028      	str	r0, [r5, #0]
 8012f34:	6128      	str	r0, [r5, #16]
 8012f36:	b920      	cbnz	r0, 8012f42 <_svfiprintf_r+0x2e>
 8012f38:	230c      	movs	r3, #12
 8012f3a:	603b      	str	r3, [r7, #0]
 8012f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f40:	e0d1      	b.n	80130e6 <_svfiprintf_r+0x1d2>
 8012f42:	2340      	movs	r3, #64	; 0x40
 8012f44:	616b      	str	r3, [r5, #20]
 8012f46:	2300      	movs	r3, #0
 8012f48:	9309      	str	r3, [sp, #36]	; 0x24
 8012f4a:	2320      	movs	r3, #32
 8012f4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f54:	2330      	movs	r3, #48	; 0x30
 8012f56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013100 <_svfiprintf_r+0x1ec>
 8012f5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f5e:	f04f 0901 	mov.w	r9, #1
 8012f62:	4623      	mov	r3, r4
 8012f64:	469a      	mov	sl, r3
 8012f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f6a:	b10a      	cbz	r2, 8012f70 <_svfiprintf_r+0x5c>
 8012f6c:	2a25      	cmp	r2, #37	; 0x25
 8012f6e:	d1f9      	bne.n	8012f64 <_svfiprintf_r+0x50>
 8012f70:	ebba 0b04 	subs.w	fp, sl, r4
 8012f74:	d00b      	beq.n	8012f8e <_svfiprintf_r+0x7a>
 8012f76:	465b      	mov	r3, fp
 8012f78:	4622      	mov	r2, r4
 8012f7a:	4629      	mov	r1, r5
 8012f7c:	4638      	mov	r0, r7
 8012f7e:	f7ff ff6d 	bl	8012e5c <__ssputs_r>
 8012f82:	3001      	adds	r0, #1
 8012f84:	f000 80aa 	beq.w	80130dc <_svfiprintf_r+0x1c8>
 8012f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f8a:	445a      	add	r2, fp
 8012f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8012f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	f000 80a2 	beq.w	80130dc <_svfiprintf_r+0x1c8>
 8012f98:	2300      	movs	r3, #0
 8012f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012fa2:	f10a 0a01 	add.w	sl, sl, #1
 8012fa6:	9304      	str	r3, [sp, #16]
 8012fa8:	9307      	str	r3, [sp, #28]
 8012faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012fae:	931a      	str	r3, [sp, #104]	; 0x68
 8012fb0:	4654      	mov	r4, sl
 8012fb2:	2205      	movs	r2, #5
 8012fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fb8:	4851      	ldr	r0, [pc, #324]	; (8013100 <_svfiprintf_r+0x1ec>)
 8012fba:	f7ed f921 	bl	8000200 <memchr>
 8012fbe:	9a04      	ldr	r2, [sp, #16]
 8012fc0:	b9d8      	cbnz	r0, 8012ffa <_svfiprintf_r+0xe6>
 8012fc2:	06d0      	lsls	r0, r2, #27
 8012fc4:	bf44      	itt	mi
 8012fc6:	2320      	movmi	r3, #32
 8012fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fcc:	0711      	lsls	r1, r2, #28
 8012fce:	bf44      	itt	mi
 8012fd0:	232b      	movmi	r3, #43	; 0x2b
 8012fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8012fda:	2b2a      	cmp	r3, #42	; 0x2a
 8012fdc:	d015      	beq.n	801300a <_svfiprintf_r+0xf6>
 8012fde:	9a07      	ldr	r2, [sp, #28]
 8012fe0:	4654      	mov	r4, sl
 8012fe2:	2000      	movs	r0, #0
 8012fe4:	f04f 0c0a 	mov.w	ip, #10
 8012fe8:	4621      	mov	r1, r4
 8012fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fee:	3b30      	subs	r3, #48	; 0x30
 8012ff0:	2b09      	cmp	r3, #9
 8012ff2:	d94e      	bls.n	8013092 <_svfiprintf_r+0x17e>
 8012ff4:	b1b0      	cbz	r0, 8013024 <_svfiprintf_r+0x110>
 8012ff6:	9207      	str	r2, [sp, #28]
 8012ff8:	e014      	b.n	8013024 <_svfiprintf_r+0x110>
 8012ffa:	eba0 0308 	sub.w	r3, r0, r8
 8012ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8013002:	4313      	orrs	r3, r2
 8013004:	9304      	str	r3, [sp, #16]
 8013006:	46a2      	mov	sl, r4
 8013008:	e7d2      	b.n	8012fb0 <_svfiprintf_r+0x9c>
 801300a:	9b03      	ldr	r3, [sp, #12]
 801300c:	1d19      	adds	r1, r3, #4
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	9103      	str	r1, [sp, #12]
 8013012:	2b00      	cmp	r3, #0
 8013014:	bfbb      	ittet	lt
 8013016:	425b      	neglt	r3, r3
 8013018:	f042 0202 	orrlt.w	r2, r2, #2
 801301c:	9307      	strge	r3, [sp, #28]
 801301e:	9307      	strlt	r3, [sp, #28]
 8013020:	bfb8      	it	lt
 8013022:	9204      	strlt	r2, [sp, #16]
 8013024:	7823      	ldrb	r3, [r4, #0]
 8013026:	2b2e      	cmp	r3, #46	; 0x2e
 8013028:	d10c      	bne.n	8013044 <_svfiprintf_r+0x130>
 801302a:	7863      	ldrb	r3, [r4, #1]
 801302c:	2b2a      	cmp	r3, #42	; 0x2a
 801302e:	d135      	bne.n	801309c <_svfiprintf_r+0x188>
 8013030:	9b03      	ldr	r3, [sp, #12]
 8013032:	1d1a      	adds	r2, r3, #4
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	9203      	str	r2, [sp, #12]
 8013038:	2b00      	cmp	r3, #0
 801303a:	bfb8      	it	lt
 801303c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013040:	3402      	adds	r4, #2
 8013042:	9305      	str	r3, [sp, #20]
 8013044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013110 <_svfiprintf_r+0x1fc>
 8013048:	7821      	ldrb	r1, [r4, #0]
 801304a:	2203      	movs	r2, #3
 801304c:	4650      	mov	r0, sl
 801304e:	f7ed f8d7 	bl	8000200 <memchr>
 8013052:	b140      	cbz	r0, 8013066 <_svfiprintf_r+0x152>
 8013054:	2340      	movs	r3, #64	; 0x40
 8013056:	eba0 000a 	sub.w	r0, r0, sl
 801305a:	fa03 f000 	lsl.w	r0, r3, r0
 801305e:	9b04      	ldr	r3, [sp, #16]
 8013060:	4303      	orrs	r3, r0
 8013062:	3401      	adds	r4, #1
 8013064:	9304      	str	r3, [sp, #16]
 8013066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801306a:	4826      	ldr	r0, [pc, #152]	; (8013104 <_svfiprintf_r+0x1f0>)
 801306c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013070:	2206      	movs	r2, #6
 8013072:	f7ed f8c5 	bl	8000200 <memchr>
 8013076:	2800      	cmp	r0, #0
 8013078:	d038      	beq.n	80130ec <_svfiprintf_r+0x1d8>
 801307a:	4b23      	ldr	r3, [pc, #140]	; (8013108 <_svfiprintf_r+0x1f4>)
 801307c:	bb1b      	cbnz	r3, 80130c6 <_svfiprintf_r+0x1b2>
 801307e:	9b03      	ldr	r3, [sp, #12]
 8013080:	3307      	adds	r3, #7
 8013082:	f023 0307 	bic.w	r3, r3, #7
 8013086:	3308      	adds	r3, #8
 8013088:	9303      	str	r3, [sp, #12]
 801308a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801308c:	4433      	add	r3, r6
 801308e:	9309      	str	r3, [sp, #36]	; 0x24
 8013090:	e767      	b.n	8012f62 <_svfiprintf_r+0x4e>
 8013092:	fb0c 3202 	mla	r2, ip, r2, r3
 8013096:	460c      	mov	r4, r1
 8013098:	2001      	movs	r0, #1
 801309a:	e7a5      	b.n	8012fe8 <_svfiprintf_r+0xd4>
 801309c:	2300      	movs	r3, #0
 801309e:	3401      	adds	r4, #1
 80130a0:	9305      	str	r3, [sp, #20]
 80130a2:	4619      	mov	r1, r3
 80130a4:	f04f 0c0a 	mov.w	ip, #10
 80130a8:	4620      	mov	r0, r4
 80130aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130ae:	3a30      	subs	r2, #48	; 0x30
 80130b0:	2a09      	cmp	r2, #9
 80130b2:	d903      	bls.n	80130bc <_svfiprintf_r+0x1a8>
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d0c5      	beq.n	8013044 <_svfiprintf_r+0x130>
 80130b8:	9105      	str	r1, [sp, #20]
 80130ba:	e7c3      	b.n	8013044 <_svfiprintf_r+0x130>
 80130bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80130c0:	4604      	mov	r4, r0
 80130c2:	2301      	movs	r3, #1
 80130c4:	e7f0      	b.n	80130a8 <_svfiprintf_r+0x194>
 80130c6:	ab03      	add	r3, sp, #12
 80130c8:	9300      	str	r3, [sp, #0]
 80130ca:	462a      	mov	r2, r5
 80130cc:	4b0f      	ldr	r3, [pc, #60]	; (801310c <_svfiprintf_r+0x1f8>)
 80130ce:	a904      	add	r1, sp, #16
 80130d0:	4638      	mov	r0, r7
 80130d2:	f7fb f84b 	bl	800e16c <_printf_float>
 80130d6:	1c42      	adds	r2, r0, #1
 80130d8:	4606      	mov	r6, r0
 80130da:	d1d6      	bne.n	801308a <_svfiprintf_r+0x176>
 80130dc:	89ab      	ldrh	r3, [r5, #12]
 80130de:	065b      	lsls	r3, r3, #25
 80130e0:	f53f af2c 	bmi.w	8012f3c <_svfiprintf_r+0x28>
 80130e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130e6:	b01d      	add	sp, #116	; 0x74
 80130e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ec:	ab03      	add	r3, sp, #12
 80130ee:	9300      	str	r3, [sp, #0]
 80130f0:	462a      	mov	r2, r5
 80130f2:	4b06      	ldr	r3, [pc, #24]	; (801310c <_svfiprintf_r+0x1f8>)
 80130f4:	a904      	add	r1, sp, #16
 80130f6:	4638      	mov	r0, r7
 80130f8:	f7fb fadc 	bl	800e6b4 <_printf_i>
 80130fc:	e7eb      	b.n	80130d6 <_svfiprintf_r+0x1c2>
 80130fe:	bf00      	nop
 8013100:	0803dc60 	.word	0x0803dc60
 8013104:	0803dc6a 	.word	0x0803dc6a
 8013108:	0800e16d 	.word	0x0800e16d
 801310c:	08012e5d 	.word	0x08012e5d
 8013110:	0803dc66 	.word	0x0803dc66

08013114 <_sungetc_r>:
 8013114:	b538      	push	{r3, r4, r5, lr}
 8013116:	1c4b      	adds	r3, r1, #1
 8013118:	4614      	mov	r4, r2
 801311a:	d103      	bne.n	8013124 <_sungetc_r+0x10>
 801311c:	f04f 35ff 	mov.w	r5, #4294967295
 8013120:	4628      	mov	r0, r5
 8013122:	bd38      	pop	{r3, r4, r5, pc}
 8013124:	8993      	ldrh	r3, [r2, #12]
 8013126:	f023 0320 	bic.w	r3, r3, #32
 801312a:	8193      	strh	r3, [r2, #12]
 801312c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801312e:	6852      	ldr	r2, [r2, #4]
 8013130:	b2cd      	uxtb	r5, r1
 8013132:	b18b      	cbz	r3, 8013158 <_sungetc_r+0x44>
 8013134:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013136:	4293      	cmp	r3, r2
 8013138:	dd08      	ble.n	801314c <_sungetc_r+0x38>
 801313a:	6823      	ldr	r3, [r4, #0]
 801313c:	1e5a      	subs	r2, r3, #1
 801313e:	6022      	str	r2, [r4, #0]
 8013140:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013144:	6863      	ldr	r3, [r4, #4]
 8013146:	3301      	adds	r3, #1
 8013148:	6063      	str	r3, [r4, #4]
 801314a:	e7e9      	b.n	8013120 <_sungetc_r+0xc>
 801314c:	4621      	mov	r1, r4
 801314e:	f000 fbe3 	bl	8013918 <__submore>
 8013152:	2800      	cmp	r0, #0
 8013154:	d0f1      	beq.n	801313a <_sungetc_r+0x26>
 8013156:	e7e1      	b.n	801311c <_sungetc_r+0x8>
 8013158:	6921      	ldr	r1, [r4, #16]
 801315a:	6823      	ldr	r3, [r4, #0]
 801315c:	b151      	cbz	r1, 8013174 <_sungetc_r+0x60>
 801315e:	4299      	cmp	r1, r3
 8013160:	d208      	bcs.n	8013174 <_sungetc_r+0x60>
 8013162:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013166:	42a9      	cmp	r1, r5
 8013168:	d104      	bne.n	8013174 <_sungetc_r+0x60>
 801316a:	3b01      	subs	r3, #1
 801316c:	3201      	adds	r2, #1
 801316e:	6023      	str	r3, [r4, #0]
 8013170:	6062      	str	r2, [r4, #4]
 8013172:	e7d5      	b.n	8013120 <_sungetc_r+0xc>
 8013174:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801317c:	6363      	str	r3, [r4, #52]	; 0x34
 801317e:	2303      	movs	r3, #3
 8013180:	63a3      	str	r3, [r4, #56]	; 0x38
 8013182:	4623      	mov	r3, r4
 8013184:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013188:	6023      	str	r3, [r4, #0]
 801318a:	2301      	movs	r3, #1
 801318c:	e7dc      	b.n	8013148 <_sungetc_r+0x34>

0801318e <__ssrefill_r>:
 801318e:	b510      	push	{r4, lr}
 8013190:	460c      	mov	r4, r1
 8013192:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013194:	b169      	cbz	r1, 80131b2 <__ssrefill_r+0x24>
 8013196:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801319a:	4299      	cmp	r1, r3
 801319c:	d001      	beq.n	80131a2 <__ssrefill_r+0x14>
 801319e:	f7fa fd0b 	bl	800dbb8 <_free_r>
 80131a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80131a4:	6063      	str	r3, [r4, #4]
 80131a6:	2000      	movs	r0, #0
 80131a8:	6360      	str	r0, [r4, #52]	; 0x34
 80131aa:	b113      	cbz	r3, 80131b2 <__ssrefill_r+0x24>
 80131ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80131ae:	6023      	str	r3, [r4, #0]
 80131b0:	bd10      	pop	{r4, pc}
 80131b2:	6923      	ldr	r3, [r4, #16]
 80131b4:	6023      	str	r3, [r4, #0]
 80131b6:	2300      	movs	r3, #0
 80131b8:	6063      	str	r3, [r4, #4]
 80131ba:	89a3      	ldrh	r3, [r4, #12]
 80131bc:	f043 0320 	orr.w	r3, r3, #32
 80131c0:	81a3      	strh	r3, [r4, #12]
 80131c2:	f04f 30ff 	mov.w	r0, #4294967295
 80131c6:	e7f3      	b.n	80131b0 <__ssrefill_r+0x22>

080131c8 <__ssvfiscanf_r>:
 80131c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131cc:	460c      	mov	r4, r1
 80131ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80131d2:	2100      	movs	r1, #0
 80131d4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80131d8:	49a6      	ldr	r1, [pc, #664]	; (8013474 <__ssvfiscanf_r+0x2ac>)
 80131da:	91a0      	str	r1, [sp, #640]	; 0x280
 80131dc:	f10d 0804 	add.w	r8, sp, #4
 80131e0:	49a5      	ldr	r1, [pc, #660]	; (8013478 <__ssvfiscanf_r+0x2b0>)
 80131e2:	4fa6      	ldr	r7, [pc, #664]	; (801347c <__ssvfiscanf_r+0x2b4>)
 80131e4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013480 <__ssvfiscanf_r+0x2b8>
 80131e8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80131ec:	4606      	mov	r6, r0
 80131ee:	91a1      	str	r1, [sp, #644]	; 0x284
 80131f0:	9300      	str	r3, [sp, #0]
 80131f2:	7813      	ldrb	r3, [r2, #0]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	f000 815a 	beq.w	80134ae <__ssvfiscanf_r+0x2e6>
 80131fa:	5dd9      	ldrb	r1, [r3, r7]
 80131fc:	f011 0108 	ands.w	r1, r1, #8
 8013200:	f102 0501 	add.w	r5, r2, #1
 8013204:	d019      	beq.n	801323a <__ssvfiscanf_r+0x72>
 8013206:	6863      	ldr	r3, [r4, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	dd0f      	ble.n	801322c <__ssvfiscanf_r+0x64>
 801320c:	6823      	ldr	r3, [r4, #0]
 801320e:	781a      	ldrb	r2, [r3, #0]
 8013210:	5cba      	ldrb	r2, [r7, r2]
 8013212:	0712      	lsls	r2, r2, #28
 8013214:	d401      	bmi.n	801321a <__ssvfiscanf_r+0x52>
 8013216:	462a      	mov	r2, r5
 8013218:	e7eb      	b.n	80131f2 <__ssvfiscanf_r+0x2a>
 801321a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801321c:	3201      	adds	r2, #1
 801321e:	9245      	str	r2, [sp, #276]	; 0x114
 8013220:	6862      	ldr	r2, [r4, #4]
 8013222:	3301      	adds	r3, #1
 8013224:	3a01      	subs	r2, #1
 8013226:	6062      	str	r2, [r4, #4]
 8013228:	6023      	str	r3, [r4, #0]
 801322a:	e7ec      	b.n	8013206 <__ssvfiscanf_r+0x3e>
 801322c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801322e:	4621      	mov	r1, r4
 8013230:	4630      	mov	r0, r6
 8013232:	4798      	blx	r3
 8013234:	2800      	cmp	r0, #0
 8013236:	d0e9      	beq.n	801320c <__ssvfiscanf_r+0x44>
 8013238:	e7ed      	b.n	8013216 <__ssvfiscanf_r+0x4e>
 801323a:	2b25      	cmp	r3, #37	; 0x25
 801323c:	d012      	beq.n	8013264 <__ssvfiscanf_r+0x9c>
 801323e:	469a      	mov	sl, r3
 8013240:	6863      	ldr	r3, [r4, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	f340 8091 	ble.w	801336a <__ssvfiscanf_r+0x1a2>
 8013248:	6822      	ldr	r2, [r4, #0]
 801324a:	7813      	ldrb	r3, [r2, #0]
 801324c:	4553      	cmp	r3, sl
 801324e:	f040 812e 	bne.w	80134ae <__ssvfiscanf_r+0x2e6>
 8013252:	6863      	ldr	r3, [r4, #4]
 8013254:	3b01      	subs	r3, #1
 8013256:	6063      	str	r3, [r4, #4]
 8013258:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801325a:	3201      	adds	r2, #1
 801325c:	3301      	adds	r3, #1
 801325e:	6022      	str	r2, [r4, #0]
 8013260:	9345      	str	r3, [sp, #276]	; 0x114
 8013262:	e7d8      	b.n	8013216 <__ssvfiscanf_r+0x4e>
 8013264:	9141      	str	r1, [sp, #260]	; 0x104
 8013266:	9143      	str	r1, [sp, #268]	; 0x10c
 8013268:	7853      	ldrb	r3, [r2, #1]
 801326a:	2b2a      	cmp	r3, #42	; 0x2a
 801326c:	bf02      	ittt	eq
 801326e:	2310      	moveq	r3, #16
 8013270:	1c95      	addeq	r5, r2, #2
 8013272:	9341      	streq	r3, [sp, #260]	; 0x104
 8013274:	220a      	movs	r2, #10
 8013276:	46aa      	mov	sl, r5
 8013278:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801327c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013280:	2b09      	cmp	r3, #9
 8013282:	d91d      	bls.n	80132c0 <__ssvfiscanf_r+0xf8>
 8013284:	487e      	ldr	r0, [pc, #504]	; (8013480 <__ssvfiscanf_r+0x2b8>)
 8013286:	2203      	movs	r2, #3
 8013288:	f7ec ffba 	bl	8000200 <memchr>
 801328c:	b140      	cbz	r0, 80132a0 <__ssvfiscanf_r+0xd8>
 801328e:	2301      	movs	r3, #1
 8013290:	eba0 0009 	sub.w	r0, r0, r9
 8013294:	fa03 f000 	lsl.w	r0, r3, r0
 8013298:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801329a:	4318      	orrs	r0, r3
 801329c:	9041      	str	r0, [sp, #260]	; 0x104
 801329e:	4655      	mov	r5, sl
 80132a0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80132a4:	2b78      	cmp	r3, #120	; 0x78
 80132a6:	d806      	bhi.n	80132b6 <__ssvfiscanf_r+0xee>
 80132a8:	2b57      	cmp	r3, #87	; 0x57
 80132aa:	d810      	bhi.n	80132ce <__ssvfiscanf_r+0x106>
 80132ac:	2b25      	cmp	r3, #37	; 0x25
 80132ae:	d0c6      	beq.n	801323e <__ssvfiscanf_r+0x76>
 80132b0:	d856      	bhi.n	8013360 <__ssvfiscanf_r+0x198>
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d064      	beq.n	8013380 <__ssvfiscanf_r+0x1b8>
 80132b6:	2303      	movs	r3, #3
 80132b8:	9347      	str	r3, [sp, #284]	; 0x11c
 80132ba:	230a      	movs	r3, #10
 80132bc:	9342      	str	r3, [sp, #264]	; 0x108
 80132be:	e071      	b.n	80133a4 <__ssvfiscanf_r+0x1dc>
 80132c0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80132c2:	fb02 1103 	mla	r1, r2, r3, r1
 80132c6:	3930      	subs	r1, #48	; 0x30
 80132c8:	9143      	str	r1, [sp, #268]	; 0x10c
 80132ca:	4655      	mov	r5, sl
 80132cc:	e7d3      	b.n	8013276 <__ssvfiscanf_r+0xae>
 80132ce:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80132d2:	2a20      	cmp	r2, #32
 80132d4:	d8ef      	bhi.n	80132b6 <__ssvfiscanf_r+0xee>
 80132d6:	a101      	add	r1, pc, #4	; (adr r1, 80132dc <__ssvfiscanf_r+0x114>)
 80132d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80132dc:	0801338f 	.word	0x0801338f
 80132e0:	080132b7 	.word	0x080132b7
 80132e4:	080132b7 	.word	0x080132b7
 80132e8:	080133ed 	.word	0x080133ed
 80132ec:	080132b7 	.word	0x080132b7
 80132f0:	080132b7 	.word	0x080132b7
 80132f4:	080132b7 	.word	0x080132b7
 80132f8:	080132b7 	.word	0x080132b7
 80132fc:	080132b7 	.word	0x080132b7
 8013300:	080132b7 	.word	0x080132b7
 8013304:	080132b7 	.word	0x080132b7
 8013308:	08013403 	.word	0x08013403
 801330c:	080133d9 	.word	0x080133d9
 8013310:	08013367 	.word	0x08013367
 8013314:	08013367 	.word	0x08013367
 8013318:	08013367 	.word	0x08013367
 801331c:	080132b7 	.word	0x080132b7
 8013320:	080133dd 	.word	0x080133dd
 8013324:	080132b7 	.word	0x080132b7
 8013328:	080132b7 	.word	0x080132b7
 801332c:	080132b7 	.word	0x080132b7
 8013330:	080132b7 	.word	0x080132b7
 8013334:	08013413 	.word	0x08013413
 8013338:	080133e5 	.word	0x080133e5
 801333c:	08013387 	.word	0x08013387
 8013340:	080132b7 	.word	0x080132b7
 8013344:	080132b7 	.word	0x080132b7
 8013348:	0801340f 	.word	0x0801340f
 801334c:	080132b7 	.word	0x080132b7
 8013350:	080133d9 	.word	0x080133d9
 8013354:	080132b7 	.word	0x080132b7
 8013358:	080132b7 	.word	0x080132b7
 801335c:	0801338f 	.word	0x0801338f
 8013360:	3b45      	subs	r3, #69	; 0x45
 8013362:	2b02      	cmp	r3, #2
 8013364:	d8a7      	bhi.n	80132b6 <__ssvfiscanf_r+0xee>
 8013366:	2305      	movs	r3, #5
 8013368:	e01b      	b.n	80133a2 <__ssvfiscanf_r+0x1da>
 801336a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801336c:	4621      	mov	r1, r4
 801336e:	4630      	mov	r0, r6
 8013370:	4798      	blx	r3
 8013372:	2800      	cmp	r0, #0
 8013374:	f43f af68 	beq.w	8013248 <__ssvfiscanf_r+0x80>
 8013378:	9844      	ldr	r0, [sp, #272]	; 0x110
 801337a:	2800      	cmp	r0, #0
 801337c:	f040 808d 	bne.w	801349a <__ssvfiscanf_r+0x2d2>
 8013380:	f04f 30ff 	mov.w	r0, #4294967295
 8013384:	e08f      	b.n	80134a6 <__ssvfiscanf_r+0x2de>
 8013386:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013388:	f042 0220 	orr.w	r2, r2, #32
 801338c:	9241      	str	r2, [sp, #260]	; 0x104
 801338e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013394:	9241      	str	r2, [sp, #260]	; 0x104
 8013396:	2210      	movs	r2, #16
 8013398:	2b6f      	cmp	r3, #111	; 0x6f
 801339a:	9242      	str	r2, [sp, #264]	; 0x108
 801339c:	bf34      	ite	cc
 801339e:	2303      	movcc	r3, #3
 80133a0:	2304      	movcs	r3, #4
 80133a2:	9347      	str	r3, [sp, #284]	; 0x11c
 80133a4:	6863      	ldr	r3, [r4, #4]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	dd42      	ble.n	8013430 <__ssvfiscanf_r+0x268>
 80133aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80133ac:	0659      	lsls	r1, r3, #25
 80133ae:	d404      	bmi.n	80133ba <__ssvfiscanf_r+0x1f2>
 80133b0:	6823      	ldr	r3, [r4, #0]
 80133b2:	781a      	ldrb	r2, [r3, #0]
 80133b4:	5cba      	ldrb	r2, [r7, r2]
 80133b6:	0712      	lsls	r2, r2, #28
 80133b8:	d441      	bmi.n	801343e <__ssvfiscanf_r+0x276>
 80133ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80133bc:	2b02      	cmp	r3, #2
 80133be:	dc50      	bgt.n	8013462 <__ssvfiscanf_r+0x29a>
 80133c0:	466b      	mov	r3, sp
 80133c2:	4622      	mov	r2, r4
 80133c4:	a941      	add	r1, sp, #260	; 0x104
 80133c6:	4630      	mov	r0, r6
 80133c8:	f000 f876 	bl	80134b8 <_scanf_chars>
 80133cc:	2801      	cmp	r0, #1
 80133ce:	d06e      	beq.n	80134ae <__ssvfiscanf_r+0x2e6>
 80133d0:	2802      	cmp	r0, #2
 80133d2:	f47f af20 	bne.w	8013216 <__ssvfiscanf_r+0x4e>
 80133d6:	e7cf      	b.n	8013378 <__ssvfiscanf_r+0x1b0>
 80133d8:	220a      	movs	r2, #10
 80133da:	e7dd      	b.n	8013398 <__ssvfiscanf_r+0x1d0>
 80133dc:	2300      	movs	r3, #0
 80133de:	9342      	str	r3, [sp, #264]	; 0x108
 80133e0:	2303      	movs	r3, #3
 80133e2:	e7de      	b.n	80133a2 <__ssvfiscanf_r+0x1da>
 80133e4:	2308      	movs	r3, #8
 80133e6:	9342      	str	r3, [sp, #264]	; 0x108
 80133e8:	2304      	movs	r3, #4
 80133ea:	e7da      	b.n	80133a2 <__ssvfiscanf_r+0x1da>
 80133ec:	4629      	mov	r1, r5
 80133ee:	4640      	mov	r0, r8
 80133f0:	f000 f9ce 	bl	8013790 <__sccl>
 80133f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80133f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133fa:	9341      	str	r3, [sp, #260]	; 0x104
 80133fc:	4605      	mov	r5, r0
 80133fe:	2301      	movs	r3, #1
 8013400:	e7cf      	b.n	80133a2 <__ssvfiscanf_r+0x1da>
 8013402:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013408:	9341      	str	r3, [sp, #260]	; 0x104
 801340a:	2300      	movs	r3, #0
 801340c:	e7c9      	b.n	80133a2 <__ssvfiscanf_r+0x1da>
 801340e:	2302      	movs	r3, #2
 8013410:	e7c7      	b.n	80133a2 <__ssvfiscanf_r+0x1da>
 8013412:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013414:	06c3      	lsls	r3, r0, #27
 8013416:	f53f aefe 	bmi.w	8013216 <__ssvfiscanf_r+0x4e>
 801341a:	9b00      	ldr	r3, [sp, #0]
 801341c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801341e:	1d19      	adds	r1, r3, #4
 8013420:	9100      	str	r1, [sp, #0]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	f010 0f01 	tst.w	r0, #1
 8013428:	bf14      	ite	ne
 801342a:	801a      	strhne	r2, [r3, #0]
 801342c:	601a      	streq	r2, [r3, #0]
 801342e:	e6f2      	b.n	8013216 <__ssvfiscanf_r+0x4e>
 8013430:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013432:	4621      	mov	r1, r4
 8013434:	4630      	mov	r0, r6
 8013436:	4798      	blx	r3
 8013438:	2800      	cmp	r0, #0
 801343a:	d0b6      	beq.n	80133aa <__ssvfiscanf_r+0x1e2>
 801343c:	e79c      	b.n	8013378 <__ssvfiscanf_r+0x1b0>
 801343e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013440:	3201      	adds	r2, #1
 8013442:	9245      	str	r2, [sp, #276]	; 0x114
 8013444:	6862      	ldr	r2, [r4, #4]
 8013446:	3a01      	subs	r2, #1
 8013448:	2a00      	cmp	r2, #0
 801344a:	6062      	str	r2, [r4, #4]
 801344c:	dd02      	ble.n	8013454 <__ssvfiscanf_r+0x28c>
 801344e:	3301      	adds	r3, #1
 8013450:	6023      	str	r3, [r4, #0]
 8013452:	e7ad      	b.n	80133b0 <__ssvfiscanf_r+0x1e8>
 8013454:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013456:	4621      	mov	r1, r4
 8013458:	4630      	mov	r0, r6
 801345a:	4798      	blx	r3
 801345c:	2800      	cmp	r0, #0
 801345e:	d0a7      	beq.n	80133b0 <__ssvfiscanf_r+0x1e8>
 8013460:	e78a      	b.n	8013378 <__ssvfiscanf_r+0x1b0>
 8013462:	2b04      	cmp	r3, #4
 8013464:	dc0e      	bgt.n	8013484 <__ssvfiscanf_r+0x2bc>
 8013466:	466b      	mov	r3, sp
 8013468:	4622      	mov	r2, r4
 801346a:	a941      	add	r1, sp, #260	; 0x104
 801346c:	4630      	mov	r0, r6
 801346e:	f000 f87d 	bl	801356c <_scanf_i>
 8013472:	e7ab      	b.n	80133cc <__ssvfiscanf_r+0x204>
 8013474:	08013115 	.word	0x08013115
 8013478:	0801318f 	.word	0x0801318f
 801347c:	0803e011 	.word	0x0803e011
 8013480:	0803dc66 	.word	0x0803dc66
 8013484:	4b0b      	ldr	r3, [pc, #44]	; (80134b4 <__ssvfiscanf_r+0x2ec>)
 8013486:	2b00      	cmp	r3, #0
 8013488:	f43f aec5 	beq.w	8013216 <__ssvfiscanf_r+0x4e>
 801348c:	466b      	mov	r3, sp
 801348e:	4622      	mov	r2, r4
 8013490:	a941      	add	r1, sp, #260	; 0x104
 8013492:	4630      	mov	r0, r6
 8013494:	f3af 8000 	nop.w
 8013498:	e798      	b.n	80133cc <__ssvfiscanf_r+0x204>
 801349a:	89a3      	ldrh	r3, [r4, #12]
 801349c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80134a0:	bf18      	it	ne
 80134a2:	f04f 30ff 	movne.w	r0, #4294967295
 80134a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80134aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134ae:	9844      	ldr	r0, [sp, #272]	; 0x110
 80134b0:	e7f9      	b.n	80134a6 <__ssvfiscanf_r+0x2de>
 80134b2:	bf00      	nop
 80134b4:	00000000 	.word	0x00000000

080134b8 <_scanf_chars>:
 80134b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134bc:	4615      	mov	r5, r2
 80134be:	688a      	ldr	r2, [r1, #8]
 80134c0:	4680      	mov	r8, r0
 80134c2:	460c      	mov	r4, r1
 80134c4:	b932      	cbnz	r2, 80134d4 <_scanf_chars+0x1c>
 80134c6:	698a      	ldr	r2, [r1, #24]
 80134c8:	2a00      	cmp	r2, #0
 80134ca:	bf0c      	ite	eq
 80134cc:	2201      	moveq	r2, #1
 80134ce:	f04f 32ff 	movne.w	r2, #4294967295
 80134d2:	608a      	str	r2, [r1, #8]
 80134d4:	6822      	ldr	r2, [r4, #0]
 80134d6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013568 <_scanf_chars+0xb0>
 80134da:	06d1      	lsls	r1, r2, #27
 80134dc:	bf5f      	itttt	pl
 80134de:	681a      	ldrpl	r2, [r3, #0]
 80134e0:	1d11      	addpl	r1, r2, #4
 80134e2:	6019      	strpl	r1, [r3, #0]
 80134e4:	6816      	ldrpl	r6, [r2, #0]
 80134e6:	2700      	movs	r7, #0
 80134e8:	69a0      	ldr	r0, [r4, #24]
 80134ea:	b188      	cbz	r0, 8013510 <_scanf_chars+0x58>
 80134ec:	2801      	cmp	r0, #1
 80134ee:	d107      	bne.n	8013500 <_scanf_chars+0x48>
 80134f0:	682a      	ldr	r2, [r5, #0]
 80134f2:	7811      	ldrb	r1, [r2, #0]
 80134f4:	6962      	ldr	r2, [r4, #20]
 80134f6:	5c52      	ldrb	r2, [r2, r1]
 80134f8:	b952      	cbnz	r2, 8013510 <_scanf_chars+0x58>
 80134fa:	2f00      	cmp	r7, #0
 80134fc:	d031      	beq.n	8013562 <_scanf_chars+0xaa>
 80134fe:	e022      	b.n	8013546 <_scanf_chars+0x8e>
 8013500:	2802      	cmp	r0, #2
 8013502:	d120      	bne.n	8013546 <_scanf_chars+0x8e>
 8013504:	682b      	ldr	r3, [r5, #0]
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	f813 3009 	ldrb.w	r3, [r3, r9]
 801350c:	071b      	lsls	r3, r3, #28
 801350e:	d41a      	bmi.n	8013546 <_scanf_chars+0x8e>
 8013510:	6823      	ldr	r3, [r4, #0]
 8013512:	06da      	lsls	r2, r3, #27
 8013514:	bf5e      	ittt	pl
 8013516:	682b      	ldrpl	r3, [r5, #0]
 8013518:	781b      	ldrbpl	r3, [r3, #0]
 801351a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801351e:	682a      	ldr	r2, [r5, #0]
 8013520:	686b      	ldr	r3, [r5, #4]
 8013522:	3201      	adds	r2, #1
 8013524:	602a      	str	r2, [r5, #0]
 8013526:	68a2      	ldr	r2, [r4, #8]
 8013528:	3b01      	subs	r3, #1
 801352a:	3a01      	subs	r2, #1
 801352c:	606b      	str	r3, [r5, #4]
 801352e:	3701      	adds	r7, #1
 8013530:	60a2      	str	r2, [r4, #8]
 8013532:	b142      	cbz	r2, 8013546 <_scanf_chars+0x8e>
 8013534:	2b00      	cmp	r3, #0
 8013536:	dcd7      	bgt.n	80134e8 <_scanf_chars+0x30>
 8013538:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801353c:	4629      	mov	r1, r5
 801353e:	4640      	mov	r0, r8
 8013540:	4798      	blx	r3
 8013542:	2800      	cmp	r0, #0
 8013544:	d0d0      	beq.n	80134e8 <_scanf_chars+0x30>
 8013546:	6823      	ldr	r3, [r4, #0]
 8013548:	f013 0310 	ands.w	r3, r3, #16
 801354c:	d105      	bne.n	801355a <_scanf_chars+0xa2>
 801354e:	68e2      	ldr	r2, [r4, #12]
 8013550:	3201      	adds	r2, #1
 8013552:	60e2      	str	r2, [r4, #12]
 8013554:	69a2      	ldr	r2, [r4, #24]
 8013556:	b102      	cbz	r2, 801355a <_scanf_chars+0xa2>
 8013558:	7033      	strb	r3, [r6, #0]
 801355a:	6923      	ldr	r3, [r4, #16]
 801355c:	443b      	add	r3, r7
 801355e:	6123      	str	r3, [r4, #16]
 8013560:	2000      	movs	r0, #0
 8013562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013566:	bf00      	nop
 8013568:	0803e011 	.word	0x0803e011

0801356c <_scanf_i>:
 801356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013570:	4698      	mov	r8, r3
 8013572:	4b76      	ldr	r3, [pc, #472]	; (801374c <_scanf_i+0x1e0>)
 8013574:	460c      	mov	r4, r1
 8013576:	4682      	mov	sl, r0
 8013578:	4616      	mov	r6, r2
 801357a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801357e:	b087      	sub	sp, #28
 8013580:	ab03      	add	r3, sp, #12
 8013582:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013586:	4b72      	ldr	r3, [pc, #456]	; (8013750 <_scanf_i+0x1e4>)
 8013588:	69a1      	ldr	r1, [r4, #24]
 801358a:	4a72      	ldr	r2, [pc, #456]	; (8013754 <_scanf_i+0x1e8>)
 801358c:	2903      	cmp	r1, #3
 801358e:	bf18      	it	ne
 8013590:	461a      	movne	r2, r3
 8013592:	68a3      	ldr	r3, [r4, #8]
 8013594:	9201      	str	r2, [sp, #4]
 8013596:	1e5a      	subs	r2, r3, #1
 8013598:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801359c:	bf88      	it	hi
 801359e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80135a2:	4627      	mov	r7, r4
 80135a4:	bf82      	ittt	hi
 80135a6:	eb03 0905 	addhi.w	r9, r3, r5
 80135aa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80135ae:	60a3      	strhi	r3, [r4, #8]
 80135b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80135b4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80135b8:	bf98      	it	ls
 80135ba:	f04f 0900 	movls.w	r9, #0
 80135be:	6023      	str	r3, [r4, #0]
 80135c0:	463d      	mov	r5, r7
 80135c2:	f04f 0b00 	mov.w	fp, #0
 80135c6:	6831      	ldr	r1, [r6, #0]
 80135c8:	ab03      	add	r3, sp, #12
 80135ca:	7809      	ldrb	r1, [r1, #0]
 80135cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80135d0:	2202      	movs	r2, #2
 80135d2:	f7ec fe15 	bl	8000200 <memchr>
 80135d6:	b328      	cbz	r0, 8013624 <_scanf_i+0xb8>
 80135d8:	f1bb 0f01 	cmp.w	fp, #1
 80135dc:	d159      	bne.n	8013692 <_scanf_i+0x126>
 80135de:	6862      	ldr	r2, [r4, #4]
 80135e0:	b92a      	cbnz	r2, 80135ee <_scanf_i+0x82>
 80135e2:	6822      	ldr	r2, [r4, #0]
 80135e4:	2308      	movs	r3, #8
 80135e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80135ea:	6063      	str	r3, [r4, #4]
 80135ec:	6022      	str	r2, [r4, #0]
 80135ee:	6822      	ldr	r2, [r4, #0]
 80135f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80135f4:	6022      	str	r2, [r4, #0]
 80135f6:	68a2      	ldr	r2, [r4, #8]
 80135f8:	1e51      	subs	r1, r2, #1
 80135fa:	60a1      	str	r1, [r4, #8]
 80135fc:	b192      	cbz	r2, 8013624 <_scanf_i+0xb8>
 80135fe:	6832      	ldr	r2, [r6, #0]
 8013600:	1c51      	adds	r1, r2, #1
 8013602:	6031      	str	r1, [r6, #0]
 8013604:	7812      	ldrb	r2, [r2, #0]
 8013606:	f805 2b01 	strb.w	r2, [r5], #1
 801360a:	6872      	ldr	r2, [r6, #4]
 801360c:	3a01      	subs	r2, #1
 801360e:	2a00      	cmp	r2, #0
 8013610:	6072      	str	r2, [r6, #4]
 8013612:	dc07      	bgt.n	8013624 <_scanf_i+0xb8>
 8013614:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013618:	4631      	mov	r1, r6
 801361a:	4650      	mov	r0, sl
 801361c:	4790      	blx	r2
 801361e:	2800      	cmp	r0, #0
 8013620:	f040 8085 	bne.w	801372e <_scanf_i+0x1c2>
 8013624:	f10b 0b01 	add.w	fp, fp, #1
 8013628:	f1bb 0f03 	cmp.w	fp, #3
 801362c:	d1cb      	bne.n	80135c6 <_scanf_i+0x5a>
 801362e:	6863      	ldr	r3, [r4, #4]
 8013630:	b90b      	cbnz	r3, 8013636 <_scanf_i+0xca>
 8013632:	230a      	movs	r3, #10
 8013634:	6063      	str	r3, [r4, #4]
 8013636:	6863      	ldr	r3, [r4, #4]
 8013638:	4947      	ldr	r1, [pc, #284]	; (8013758 <_scanf_i+0x1ec>)
 801363a:	6960      	ldr	r0, [r4, #20]
 801363c:	1ac9      	subs	r1, r1, r3
 801363e:	f000 f8a7 	bl	8013790 <__sccl>
 8013642:	f04f 0b00 	mov.w	fp, #0
 8013646:	68a3      	ldr	r3, [r4, #8]
 8013648:	6822      	ldr	r2, [r4, #0]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d03d      	beq.n	80136ca <_scanf_i+0x15e>
 801364e:	6831      	ldr	r1, [r6, #0]
 8013650:	6960      	ldr	r0, [r4, #20]
 8013652:	f891 c000 	ldrb.w	ip, [r1]
 8013656:	f810 000c 	ldrb.w	r0, [r0, ip]
 801365a:	2800      	cmp	r0, #0
 801365c:	d035      	beq.n	80136ca <_scanf_i+0x15e>
 801365e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013662:	d124      	bne.n	80136ae <_scanf_i+0x142>
 8013664:	0510      	lsls	r0, r2, #20
 8013666:	d522      	bpl.n	80136ae <_scanf_i+0x142>
 8013668:	f10b 0b01 	add.w	fp, fp, #1
 801366c:	f1b9 0f00 	cmp.w	r9, #0
 8013670:	d003      	beq.n	801367a <_scanf_i+0x10e>
 8013672:	3301      	adds	r3, #1
 8013674:	f109 39ff 	add.w	r9, r9, #4294967295
 8013678:	60a3      	str	r3, [r4, #8]
 801367a:	6873      	ldr	r3, [r6, #4]
 801367c:	3b01      	subs	r3, #1
 801367e:	2b00      	cmp	r3, #0
 8013680:	6073      	str	r3, [r6, #4]
 8013682:	dd1b      	ble.n	80136bc <_scanf_i+0x150>
 8013684:	6833      	ldr	r3, [r6, #0]
 8013686:	3301      	adds	r3, #1
 8013688:	6033      	str	r3, [r6, #0]
 801368a:	68a3      	ldr	r3, [r4, #8]
 801368c:	3b01      	subs	r3, #1
 801368e:	60a3      	str	r3, [r4, #8]
 8013690:	e7d9      	b.n	8013646 <_scanf_i+0xda>
 8013692:	f1bb 0f02 	cmp.w	fp, #2
 8013696:	d1ae      	bne.n	80135f6 <_scanf_i+0x8a>
 8013698:	6822      	ldr	r2, [r4, #0]
 801369a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801369e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80136a2:	d1bf      	bne.n	8013624 <_scanf_i+0xb8>
 80136a4:	2310      	movs	r3, #16
 80136a6:	6063      	str	r3, [r4, #4]
 80136a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80136ac:	e7a2      	b.n	80135f4 <_scanf_i+0x88>
 80136ae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80136b2:	6022      	str	r2, [r4, #0]
 80136b4:	780b      	ldrb	r3, [r1, #0]
 80136b6:	f805 3b01 	strb.w	r3, [r5], #1
 80136ba:	e7de      	b.n	801367a <_scanf_i+0x10e>
 80136bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80136c0:	4631      	mov	r1, r6
 80136c2:	4650      	mov	r0, sl
 80136c4:	4798      	blx	r3
 80136c6:	2800      	cmp	r0, #0
 80136c8:	d0df      	beq.n	801368a <_scanf_i+0x11e>
 80136ca:	6823      	ldr	r3, [r4, #0]
 80136cc:	05db      	lsls	r3, r3, #23
 80136ce:	d50d      	bpl.n	80136ec <_scanf_i+0x180>
 80136d0:	42bd      	cmp	r5, r7
 80136d2:	d909      	bls.n	80136e8 <_scanf_i+0x17c>
 80136d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80136d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80136dc:	4632      	mov	r2, r6
 80136de:	4650      	mov	r0, sl
 80136e0:	4798      	blx	r3
 80136e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80136e6:	464d      	mov	r5, r9
 80136e8:	42bd      	cmp	r5, r7
 80136ea:	d02d      	beq.n	8013748 <_scanf_i+0x1dc>
 80136ec:	6822      	ldr	r2, [r4, #0]
 80136ee:	f012 0210 	ands.w	r2, r2, #16
 80136f2:	d113      	bne.n	801371c <_scanf_i+0x1b0>
 80136f4:	702a      	strb	r2, [r5, #0]
 80136f6:	6863      	ldr	r3, [r4, #4]
 80136f8:	9e01      	ldr	r6, [sp, #4]
 80136fa:	4639      	mov	r1, r7
 80136fc:	4650      	mov	r0, sl
 80136fe:	47b0      	blx	r6
 8013700:	6821      	ldr	r1, [r4, #0]
 8013702:	f8d8 3000 	ldr.w	r3, [r8]
 8013706:	f011 0f20 	tst.w	r1, #32
 801370a:	d013      	beq.n	8013734 <_scanf_i+0x1c8>
 801370c:	1d1a      	adds	r2, r3, #4
 801370e:	f8c8 2000 	str.w	r2, [r8]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	6018      	str	r0, [r3, #0]
 8013716:	68e3      	ldr	r3, [r4, #12]
 8013718:	3301      	adds	r3, #1
 801371a:	60e3      	str	r3, [r4, #12]
 801371c:	1bed      	subs	r5, r5, r7
 801371e:	44ab      	add	fp, r5
 8013720:	6925      	ldr	r5, [r4, #16]
 8013722:	445d      	add	r5, fp
 8013724:	6125      	str	r5, [r4, #16]
 8013726:	2000      	movs	r0, #0
 8013728:	b007      	add	sp, #28
 801372a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801372e:	f04f 0b00 	mov.w	fp, #0
 8013732:	e7ca      	b.n	80136ca <_scanf_i+0x15e>
 8013734:	1d1a      	adds	r2, r3, #4
 8013736:	f8c8 2000 	str.w	r2, [r8]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	f011 0f01 	tst.w	r1, #1
 8013740:	bf14      	ite	ne
 8013742:	8018      	strhne	r0, [r3, #0]
 8013744:	6018      	streq	r0, [r3, #0]
 8013746:	e7e6      	b.n	8013716 <_scanf_i+0x1aa>
 8013748:	2001      	movs	r0, #1
 801374a:	e7ed      	b.n	8013728 <_scanf_i+0x1bc>
 801374c:	08016c60 	.word	0x08016c60
 8013750:	08010465 	.word	0x08010465
 8013754:	08010369 	.word	0x08010369
 8013758:	0803e43d 	.word	0x0803e43d

0801375c <_read_r>:
 801375c:	b538      	push	{r3, r4, r5, lr}
 801375e:	4d07      	ldr	r5, [pc, #28]	; (801377c <_read_r+0x20>)
 8013760:	4604      	mov	r4, r0
 8013762:	4608      	mov	r0, r1
 8013764:	4611      	mov	r1, r2
 8013766:	2200      	movs	r2, #0
 8013768:	602a      	str	r2, [r5, #0]
 801376a:	461a      	mov	r2, r3
 801376c:	f002 fdb2 	bl	80162d4 <_read>
 8013770:	1c43      	adds	r3, r0, #1
 8013772:	d102      	bne.n	801377a <_read_r+0x1e>
 8013774:	682b      	ldr	r3, [r5, #0]
 8013776:	b103      	cbz	r3, 801377a <_read_r+0x1e>
 8013778:	6023      	str	r3, [r4, #0]
 801377a:	bd38      	pop	{r3, r4, r5, pc}
 801377c:	20003c28 	.word	0x20003c28

08013780 <nan>:
 8013780:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013788 <nan+0x8>
 8013784:	4770      	bx	lr
 8013786:	bf00      	nop
 8013788:	00000000 	.word	0x00000000
 801378c:	7ff80000 	.word	0x7ff80000

08013790 <__sccl>:
 8013790:	b570      	push	{r4, r5, r6, lr}
 8013792:	780b      	ldrb	r3, [r1, #0]
 8013794:	4604      	mov	r4, r0
 8013796:	2b5e      	cmp	r3, #94	; 0x5e
 8013798:	bf0b      	itete	eq
 801379a:	784b      	ldrbeq	r3, [r1, #1]
 801379c:	1c48      	addne	r0, r1, #1
 801379e:	1c88      	addeq	r0, r1, #2
 80137a0:	2200      	movne	r2, #0
 80137a2:	bf08      	it	eq
 80137a4:	2201      	moveq	r2, #1
 80137a6:	1e61      	subs	r1, r4, #1
 80137a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80137ac:	f801 2f01 	strb.w	r2, [r1, #1]!
 80137b0:	42a9      	cmp	r1, r5
 80137b2:	d1fb      	bne.n	80137ac <__sccl+0x1c>
 80137b4:	b90b      	cbnz	r3, 80137ba <__sccl+0x2a>
 80137b6:	3801      	subs	r0, #1
 80137b8:	bd70      	pop	{r4, r5, r6, pc}
 80137ba:	f082 0201 	eor.w	r2, r2, #1
 80137be:	54e2      	strb	r2, [r4, r3]
 80137c0:	4605      	mov	r5, r0
 80137c2:	4628      	mov	r0, r5
 80137c4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80137c8:	292d      	cmp	r1, #45	; 0x2d
 80137ca:	d006      	beq.n	80137da <__sccl+0x4a>
 80137cc:	295d      	cmp	r1, #93	; 0x5d
 80137ce:	d0f3      	beq.n	80137b8 <__sccl+0x28>
 80137d0:	b909      	cbnz	r1, 80137d6 <__sccl+0x46>
 80137d2:	4628      	mov	r0, r5
 80137d4:	e7f0      	b.n	80137b8 <__sccl+0x28>
 80137d6:	460b      	mov	r3, r1
 80137d8:	e7f1      	b.n	80137be <__sccl+0x2e>
 80137da:	786e      	ldrb	r6, [r5, #1]
 80137dc:	2e5d      	cmp	r6, #93	; 0x5d
 80137de:	d0fa      	beq.n	80137d6 <__sccl+0x46>
 80137e0:	42b3      	cmp	r3, r6
 80137e2:	dcf8      	bgt.n	80137d6 <__sccl+0x46>
 80137e4:	3502      	adds	r5, #2
 80137e6:	4619      	mov	r1, r3
 80137e8:	3101      	adds	r1, #1
 80137ea:	428e      	cmp	r6, r1
 80137ec:	5462      	strb	r2, [r4, r1]
 80137ee:	dcfb      	bgt.n	80137e8 <__sccl+0x58>
 80137f0:	1af1      	subs	r1, r6, r3
 80137f2:	3901      	subs	r1, #1
 80137f4:	1c58      	adds	r0, r3, #1
 80137f6:	42b3      	cmp	r3, r6
 80137f8:	bfa8      	it	ge
 80137fa:	2100      	movge	r1, #0
 80137fc:	1843      	adds	r3, r0, r1
 80137fe:	e7e0      	b.n	80137c2 <__sccl+0x32>

08013800 <_raise_r>:
 8013800:	291f      	cmp	r1, #31
 8013802:	b538      	push	{r3, r4, r5, lr}
 8013804:	4604      	mov	r4, r0
 8013806:	460d      	mov	r5, r1
 8013808:	d904      	bls.n	8013814 <_raise_r+0x14>
 801380a:	2316      	movs	r3, #22
 801380c:	6003      	str	r3, [r0, #0]
 801380e:	f04f 30ff 	mov.w	r0, #4294967295
 8013812:	bd38      	pop	{r3, r4, r5, pc}
 8013814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013816:	b112      	cbz	r2, 801381e <_raise_r+0x1e>
 8013818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801381c:	b94b      	cbnz	r3, 8013832 <_raise_r+0x32>
 801381e:	4620      	mov	r0, r4
 8013820:	f000 f830 	bl	8013884 <_getpid_r>
 8013824:	462a      	mov	r2, r5
 8013826:	4601      	mov	r1, r0
 8013828:	4620      	mov	r0, r4
 801382a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801382e:	f000 b817 	b.w	8013860 <_kill_r>
 8013832:	2b01      	cmp	r3, #1
 8013834:	d00a      	beq.n	801384c <_raise_r+0x4c>
 8013836:	1c59      	adds	r1, r3, #1
 8013838:	d103      	bne.n	8013842 <_raise_r+0x42>
 801383a:	2316      	movs	r3, #22
 801383c:	6003      	str	r3, [r0, #0]
 801383e:	2001      	movs	r0, #1
 8013840:	e7e7      	b.n	8013812 <_raise_r+0x12>
 8013842:	2400      	movs	r4, #0
 8013844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013848:	4628      	mov	r0, r5
 801384a:	4798      	blx	r3
 801384c:	2000      	movs	r0, #0
 801384e:	e7e0      	b.n	8013812 <_raise_r+0x12>

08013850 <raise>:
 8013850:	4b02      	ldr	r3, [pc, #8]	; (801385c <raise+0xc>)
 8013852:	4601      	mov	r1, r0
 8013854:	6818      	ldr	r0, [r3, #0]
 8013856:	f7ff bfd3 	b.w	8013800 <_raise_r>
 801385a:	bf00      	nop
 801385c:	200002c0 	.word	0x200002c0

08013860 <_kill_r>:
 8013860:	b538      	push	{r3, r4, r5, lr}
 8013862:	4d07      	ldr	r5, [pc, #28]	; (8013880 <_kill_r+0x20>)
 8013864:	2300      	movs	r3, #0
 8013866:	4604      	mov	r4, r0
 8013868:	4608      	mov	r0, r1
 801386a:	4611      	mov	r1, r2
 801386c:	602b      	str	r3, [r5, #0]
 801386e:	f002 fd21 	bl	80162b4 <_kill>
 8013872:	1c43      	adds	r3, r0, #1
 8013874:	d102      	bne.n	801387c <_kill_r+0x1c>
 8013876:	682b      	ldr	r3, [r5, #0]
 8013878:	b103      	cbz	r3, 801387c <_kill_r+0x1c>
 801387a:	6023      	str	r3, [r4, #0]
 801387c:	bd38      	pop	{r3, r4, r5, pc}
 801387e:	bf00      	nop
 8013880:	20003c28 	.word	0x20003c28

08013884 <_getpid_r>:
 8013884:	f002 bd06 	b.w	8016294 <_getpid>

08013888 <sniprintf>:
 8013888:	b40c      	push	{r2, r3}
 801388a:	b530      	push	{r4, r5, lr}
 801388c:	4b17      	ldr	r3, [pc, #92]	; (80138ec <sniprintf+0x64>)
 801388e:	1e0c      	subs	r4, r1, #0
 8013890:	681d      	ldr	r5, [r3, #0]
 8013892:	b09d      	sub	sp, #116	; 0x74
 8013894:	da08      	bge.n	80138a8 <sniprintf+0x20>
 8013896:	238b      	movs	r3, #139	; 0x8b
 8013898:	602b      	str	r3, [r5, #0]
 801389a:	f04f 30ff 	mov.w	r0, #4294967295
 801389e:	b01d      	add	sp, #116	; 0x74
 80138a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138a4:	b002      	add	sp, #8
 80138a6:	4770      	bx	lr
 80138a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80138ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80138b0:	bf14      	ite	ne
 80138b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80138b6:	4623      	moveq	r3, r4
 80138b8:	9304      	str	r3, [sp, #16]
 80138ba:	9307      	str	r3, [sp, #28]
 80138bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80138c0:	9002      	str	r0, [sp, #8]
 80138c2:	9006      	str	r0, [sp, #24]
 80138c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80138c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80138ca:	ab21      	add	r3, sp, #132	; 0x84
 80138cc:	a902      	add	r1, sp, #8
 80138ce:	4628      	mov	r0, r5
 80138d0:	9301      	str	r3, [sp, #4]
 80138d2:	f7ff fb1f 	bl	8012f14 <_svfiprintf_r>
 80138d6:	1c43      	adds	r3, r0, #1
 80138d8:	bfbc      	itt	lt
 80138da:	238b      	movlt	r3, #139	; 0x8b
 80138dc:	602b      	strlt	r3, [r5, #0]
 80138de:	2c00      	cmp	r4, #0
 80138e0:	d0dd      	beq.n	801389e <sniprintf+0x16>
 80138e2:	9b02      	ldr	r3, [sp, #8]
 80138e4:	2200      	movs	r2, #0
 80138e6:	701a      	strb	r2, [r3, #0]
 80138e8:	e7d9      	b.n	801389e <sniprintf+0x16>
 80138ea:	bf00      	nop
 80138ec:	200002c0 	.word	0x200002c0

080138f0 <strncmp>:
 80138f0:	b510      	push	{r4, lr}
 80138f2:	b17a      	cbz	r2, 8013914 <strncmp+0x24>
 80138f4:	4603      	mov	r3, r0
 80138f6:	3901      	subs	r1, #1
 80138f8:	1884      	adds	r4, r0, r2
 80138fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80138fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013902:	4290      	cmp	r0, r2
 8013904:	d101      	bne.n	801390a <strncmp+0x1a>
 8013906:	42a3      	cmp	r3, r4
 8013908:	d101      	bne.n	801390e <strncmp+0x1e>
 801390a:	1a80      	subs	r0, r0, r2
 801390c:	bd10      	pop	{r4, pc}
 801390e:	2800      	cmp	r0, #0
 8013910:	d1f3      	bne.n	80138fa <strncmp+0xa>
 8013912:	e7fa      	b.n	801390a <strncmp+0x1a>
 8013914:	4610      	mov	r0, r2
 8013916:	e7f9      	b.n	801390c <strncmp+0x1c>

08013918 <__submore>:
 8013918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801391c:	460c      	mov	r4, r1
 801391e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013924:	4299      	cmp	r1, r3
 8013926:	d11d      	bne.n	8013964 <__submore+0x4c>
 8013928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801392c:	f7fa f9b0 	bl	800dc90 <_malloc_r>
 8013930:	b918      	cbnz	r0, 801393a <__submore+0x22>
 8013932:	f04f 30ff 	mov.w	r0, #4294967295
 8013936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801393a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801393e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013940:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013944:	6360      	str	r0, [r4, #52]	; 0x34
 8013946:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801394a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801394e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013952:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013956:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801395a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801395e:	6020      	str	r0, [r4, #0]
 8013960:	2000      	movs	r0, #0
 8013962:	e7e8      	b.n	8013936 <__submore+0x1e>
 8013964:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013966:	0077      	lsls	r7, r6, #1
 8013968:	463a      	mov	r2, r7
 801396a:	f7ff fa48 	bl	8012dfe <_realloc_r>
 801396e:	4605      	mov	r5, r0
 8013970:	2800      	cmp	r0, #0
 8013972:	d0de      	beq.n	8013932 <__submore+0x1a>
 8013974:	eb00 0806 	add.w	r8, r0, r6
 8013978:	4601      	mov	r1, r0
 801397a:	4632      	mov	r2, r6
 801397c:	4640      	mov	r0, r8
 801397e:	f7f9 fe93 	bl	800d6a8 <memcpy>
 8013982:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013986:	f8c4 8000 	str.w	r8, [r4]
 801398a:	e7e9      	b.n	8013960 <__submore+0x48>

0801398c <__ascii_wctomb>:
 801398c:	b149      	cbz	r1, 80139a2 <__ascii_wctomb+0x16>
 801398e:	2aff      	cmp	r2, #255	; 0xff
 8013990:	bf85      	ittet	hi
 8013992:	238a      	movhi	r3, #138	; 0x8a
 8013994:	6003      	strhi	r3, [r0, #0]
 8013996:	700a      	strbls	r2, [r1, #0]
 8013998:	f04f 30ff 	movhi.w	r0, #4294967295
 801399c:	bf98      	it	ls
 801399e:	2001      	movls	r0, #1
 80139a0:	4770      	bx	lr
 80139a2:	4608      	mov	r0, r1
 80139a4:	4770      	bx	lr
	...

080139a8 <__env_lock>:
 80139a8:	4801      	ldr	r0, [pc, #4]	; (80139b0 <__env_lock+0x8>)
 80139aa:	f7fe bc9d 	b.w	80122e8 <__retarget_lock_acquire_recursive>
 80139ae:	bf00      	nop
 80139b0:	20003c20 	.word	0x20003c20

080139b4 <__env_unlock>:
 80139b4:	4801      	ldr	r0, [pc, #4]	; (80139bc <__env_unlock+0x8>)
 80139b6:	f7fe bc99 	b.w	80122ec <__retarget_lock_release_recursive>
 80139ba:	bf00      	nop
 80139bc:	20003c20 	.word	0x20003c20

080139c0 <_fstat_r>:
 80139c0:	b538      	push	{r3, r4, r5, lr}
 80139c2:	4d07      	ldr	r5, [pc, #28]	; (80139e0 <_fstat_r+0x20>)
 80139c4:	2300      	movs	r3, #0
 80139c6:	4604      	mov	r4, r0
 80139c8:	4608      	mov	r0, r1
 80139ca:	4611      	mov	r1, r2
 80139cc:	602b      	str	r3, [r5, #0]
 80139ce:	f002 fc59 	bl	8016284 <_fstat>
 80139d2:	1c43      	adds	r3, r0, #1
 80139d4:	d102      	bne.n	80139dc <_fstat_r+0x1c>
 80139d6:	682b      	ldr	r3, [r5, #0]
 80139d8:	b103      	cbz	r3, 80139dc <_fstat_r+0x1c>
 80139da:	6023      	str	r3, [r4, #0]
 80139dc:	bd38      	pop	{r3, r4, r5, pc}
 80139de:	bf00      	nop
 80139e0:	20003c28 	.word	0x20003c28

080139e4 <_isatty_r>:
 80139e4:	b538      	push	{r3, r4, r5, lr}
 80139e6:	4d06      	ldr	r5, [pc, #24]	; (8013a00 <_isatty_r+0x1c>)
 80139e8:	2300      	movs	r3, #0
 80139ea:	4604      	mov	r4, r0
 80139ec:	4608      	mov	r0, r1
 80139ee:	602b      	str	r3, [r5, #0]
 80139f0:	f002 fc58 	bl	80162a4 <_isatty>
 80139f4:	1c43      	adds	r3, r0, #1
 80139f6:	d102      	bne.n	80139fe <_isatty_r+0x1a>
 80139f8:	682b      	ldr	r3, [r5, #0]
 80139fa:	b103      	cbz	r3, 80139fe <_isatty_r+0x1a>
 80139fc:	6023      	str	r3, [r4, #0]
 80139fe:	bd38      	pop	{r3, r4, r5, pc}
 8013a00:	20003c28 	.word	0x20003c28

08013a04 <_malloc_usable_size_r>:
 8013a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a08:	1f18      	subs	r0, r3, #4
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	bfbc      	itt	lt
 8013a0e:	580b      	ldrlt	r3, [r1, r0]
 8013a10:	18c0      	addlt	r0, r0, r3
 8013a12:	4770      	bx	lr
 8013a14:	0000      	movs	r0, r0
	...

08013a18 <cos>:
 8013a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a1a:	ec53 2b10 	vmov	r2, r3, d0
 8013a1e:	4826      	ldr	r0, [pc, #152]	; (8013ab8 <cos+0xa0>)
 8013a20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013a24:	4281      	cmp	r1, r0
 8013a26:	dc06      	bgt.n	8013a36 <cos+0x1e>
 8013a28:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8013ab0 <cos+0x98>
 8013a2c:	b005      	add	sp, #20
 8013a2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a32:	f001 bbf1 	b.w	8015218 <__kernel_cos>
 8013a36:	4821      	ldr	r0, [pc, #132]	; (8013abc <cos+0xa4>)
 8013a38:	4281      	cmp	r1, r0
 8013a3a:	dd09      	ble.n	8013a50 <cos+0x38>
 8013a3c:	ee10 0a10 	vmov	r0, s0
 8013a40:	4619      	mov	r1, r3
 8013a42:	f7ec fc3b 	bl	80002bc <__aeabi_dsub>
 8013a46:	ec41 0b10 	vmov	d0, r0, r1
 8013a4a:	b005      	add	sp, #20
 8013a4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a50:	4668      	mov	r0, sp
 8013a52:	f001 f921 	bl	8014c98 <__ieee754_rem_pio2>
 8013a56:	f000 0003 	and.w	r0, r0, #3
 8013a5a:	2801      	cmp	r0, #1
 8013a5c:	d00b      	beq.n	8013a76 <cos+0x5e>
 8013a5e:	2802      	cmp	r0, #2
 8013a60:	d016      	beq.n	8013a90 <cos+0x78>
 8013a62:	b9e0      	cbnz	r0, 8013a9e <cos+0x86>
 8013a64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013a68:	ed9d 0b00 	vldr	d0, [sp]
 8013a6c:	f001 fbd4 	bl	8015218 <__kernel_cos>
 8013a70:	ec51 0b10 	vmov	r0, r1, d0
 8013a74:	e7e7      	b.n	8013a46 <cos+0x2e>
 8013a76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013a7a:	ed9d 0b00 	vldr	d0, [sp]
 8013a7e:	f001 ffe3 	bl	8015a48 <__kernel_sin>
 8013a82:	ec53 2b10 	vmov	r2, r3, d0
 8013a86:	ee10 0a10 	vmov	r0, s0
 8013a8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013a8e:	e7da      	b.n	8013a46 <cos+0x2e>
 8013a90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013a94:	ed9d 0b00 	vldr	d0, [sp]
 8013a98:	f001 fbbe 	bl	8015218 <__kernel_cos>
 8013a9c:	e7f1      	b.n	8013a82 <cos+0x6a>
 8013a9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013aa2:	ed9d 0b00 	vldr	d0, [sp]
 8013aa6:	2001      	movs	r0, #1
 8013aa8:	f001 ffce 	bl	8015a48 <__kernel_sin>
 8013aac:	e7e0      	b.n	8013a70 <cos+0x58>
 8013aae:	bf00      	nop
	...
 8013ab8:	3fe921fb 	.word	0x3fe921fb
 8013abc:	7fefffff 	.word	0x7fefffff

08013ac0 <sin>:
 8013ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ac2:	ec53 2b10 	vmov	r2, r3, d0
 8013ac6:	4828      	ldr	r0, [pc, #160]	; (8013b68 <sin+0xa8>)
 8013ac8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013acc:	4281      	cmp	r1, r0
 8013ace:	dc07      	bgt.n	8013ae0 <sin+0x20>
 8013ad0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8013b60 <sin+0xa0>
 8013ad4:	2000      	movs	r0, #0
 8013ad6:	b005      	add	sp, #20
 8013ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013adc:	f001 bfb4 	b.w	8015a48 <__kernel_sin>
 8013ae0:	4822      	ldr	r0, [pc, #136]	; (8013b6c <sin+0xac>)
 8013ae2:	4281      	cmp	r1, r0
 8013ae4:	dd09      	ble.n	8013afa <sin+0x3a>
 8013ae6:	ee10 0a10 	vmov	r0, s0
 8013aea:	4619      	mov	r1, r3
 8013aec:	f7ec fbe6 	bl	80002bc <__aeabi_dsub>
 8013af0:	ec41 0b10 	vmov	d0, r0, r1
 8013af4:	b005      	add	sp, #20
 8013af6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013afa:	4668      	mov	r0, sp
 8013afc:	f001 f8cc 	bl	8014c98 <__ieee754_rem_pio2>
 8013b00:	f000 0003 	and.w	r0, r0, #3
 8013b04:	2801      	cmp	r0, #1
 8013b06:	d00c      	beq.n	8013b22 <sin+0x62>
 8013b08:	2802      	cmp	r0, #2
 8013b0a:	d011      	beq.n	8013b30 <sin+0x70>
 8013b0c:	b9f0      	cbnz	r0, 8013b4c <sin+0x8c>
 8013b0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b12:	ed9d 0b00 	vldr	d0, [sp]
 8013b16:	2001      	movs	r0, #1
 8013b18:	f001 ff96 	bl	8015a48 <__kernel_sin>
 8013b1c:	ec51 0b10 	vmov	r0, r1, d0
 8013b20:	e7e6      	b.n	8013af0 <sin+0x30>
 8013b22:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b26:	ed9d 0b00 	vldr	d0, [sp]
 8013b2a:	f001 fb75 	bl	8015218 <__kernel_cos>
 8013b2e:	e7f5      	b.n	8013b1c <sin+0x5c>
 8013b30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b34:	ed9d 0b00 	vldr	d0, [sp]
 8013b38:	2001      	movs	r0, #1
 8013b3a:	f001 ff85 	bl	8015a48 <__kernel_sin>
 8013b3e:	ec53 2b10 	vmov	r2, r3, d0
 8013b42:	ee10 0a10 	vmov	r0, s0
 8013b46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013b4a:	e7d1      	b.n	8013af0 <sin+0x30>
 8013b4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b50:	ed9d 0b00 	vldr	d0, [sp]
 8013b54:	f001 fb60 	bl	8015218 <__kernel_cos>
 8013b58:	e7f1      	b.n	8013b3e <sin+0x7e>
 8013b5a:	bf00      	nop
 8013b5c:	f3af 8000 	nop.w
	...
 8013b68:	3fe921fb 	.word	0x3fe921fb
 8013b6c:	7fefffff 	.word	0x7fefffff

08013b70 <tan>:
 8013b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b72:	ec53 2b10 	vmov	r2, r3, d0
 8013b76:	4816      	ldr	r0, [pc, #88]	; (8013bd0 <tan+0x60>)
 8013b78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013b7c:	4281      	cmp	r1, r0
 8013b7e:	dc07      	bgt.n	8013b90 <tan+0x20>
 8013b80:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8013bc8 <tan+0x58>
 8013b84:	2001      	movs	r0, #1
 8013b86:	b005      	add	sp, #20
 8013b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b8c:	f002 b81c 	b.w	8015bc8 <__kernel_tan>
 8013b90:	4810      	ldr	r0, [pc, #64]	; (8013bd4 <tan+0x64>)
 8013b92:	4281      	cmp	r1, r0
 8013b94:	dd09      	ble.n	8013baa <tan+0x3a>
 8013b96:	ee10 0a10 	vmov	r0, s0
 8013b9a:	4619      	mov	r1, r3
 8013b9c:	f7ec fb8e 	bl	80002bc <__aeabi_dsub>
 8013ba0:	ec41 0b10 	vmov	d0, r0, r1
 8013ba4:	b005      	add	sp, #20
 8013ba6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013baa:	4668      	mov	r0, sp
 8013bac:	f001 f874 	bl	8014c98 <__ieee754_rem_pio2>
 8013bb0:	0040      	lsls	r0, r0, #1
 8013bb2:	f000 0002 	and.w	r0, r0, #2
 8013bb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013bba:	ed9d 0b00 	vldr	d0, [sp]
 8013bbe:	f1c0 0001 	rsb	r0, r0, #1
 8013bc2:	f002 f801 	bl	8015bc8 <__kernel_tan>
 8013bc6:	e7ed      	b.n	8013ba4 <tan+0x34>
	...
 8013bd0:	3fe921fb 	.word	0x3fe921fb
 8013bd4:	7fefffff 	.word	0x7fefffff

08013bd8 <acos>:
 8013bd8:	b538      	push	{r3, r4, r5, lr}
 8013bda:	ed2d 8b02 	vpush	{d8}
 8013bde:	ec55 4b10 	vmov	r4, r5, d0
 8013be2:	f000 f8c9 	bl	8013d78 <__ieee754_acos>
 8013be6:	4622      	mov	r2, r4
 8013be8:	462b      	mov	r3, r5
 8013bea:	4620      	mov	r0, r4
 8013bec:	4629      	mov	r1, r5
 8013bee:	eeb0 8a40 	vmov.f32	s16, s0
 8013bf2:	eef0 8a60 	vmov.f32	s17, s1
 8013bf6:	f7ec ffb3 	bl	8000b60 <__aeabi_dcmpun>
 8013bfa:	b9a8      	cbnz	r0, 8013c28 <acos+0x50>
 8013bfc:	ec45 4b10 	vmov	d0, r4, r5
 8013c00:	f002 fa1c 	bl	801603c <fabs>
 8013c04:	4b0c      	ldr	r3, [pc, #48]	; (8013c38 <acos+0x60>)
 8013c06:	ec51 0b10 	vmov	r0, r1, d0
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	f7ec ff9e 	bl	8000b4c <__aeabi_dcmpgt>
 8013c10:	b150      	cbz	r0, 8013c28 <acos+0x50>
 8013c12:	f7fd fdeb 	bl	80117ec <__errno>
 8013c16:	ecbd 8b02 	vpop	{d8}
 8013c1a:	2321      	movs	r3, #33	; 0x21
 8013c1c:	6003      	str	r3, [r0, #0]
 8013c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c22:	4806      	ldr	r0, [pc, #24]	; (8013c3c <acos+0x64>)
 8013c24:	f7ff bdac 	b.w	8013780 <nan>
 8013c28:	eeb0 0a48 	vmov.f32	s0, s16
 8013c2c:	eef0 0a68 	vmov.f32	s1, s17
 8013c30:	ecbd 8b02 	vpop	{d8}
 8013c34:	bd38      	pop	{r3, r4, r5, pc}
 8013c36:	bf00      	nop
 8013c38:	3ff00000 	.word	0x3ff00000
 8013c3c:	0803db86 	.word	0x0803db86

08013c40 <pow>:
 8013c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c42:	ed2d 8b02 	vpush	{d8}
 8013c46:	eeb0 8a40 	vmov.f32	s16, s0
 8013c4a:	eef0 8a60 	vmov.f32	s17, s1
 8013c4e:	ec55 4b11 	vmov	r4, r5, d1
 8013c52:	f000 faf1 	bl	8014238 <__ieee754_pow>
 8013c56:	4622      	mov	r2, r4
 8013c58:	462b      	mov	r3, r5
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	4629      	mov	r1, r5
 8013c5e:	ec57 6b10 	vmov	r6, r7, d0
 8013c62:	f7ec ff7d 	bl	8000b60 <__aeabi_dcmpun>
 8013c66:	2800      	cmp	r0, #0
 8013c68:	d13b      	bne.n	8013ce2 <pow+0xa2>
 8013c6a:	ec51 0b18 	vmov	r0, r1, d8
 8013c6e:	2200      	movs	r2, #0
 8013c70:	2300      	movs	r3, #0
 8013c72:	f7ec ff43 	bl	8000afc <__aeabi_dcmpeq>
 8013c76:	b1b8      	cbz	r0, 8013ca8 <pow+0x68>
 8013c78:	2200      	movs	r2, #0
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	4629      	mov	r1, r5
 8013c80:	f7ec ff3c 	bl	8000afc <__aeabi_dcmpeq>
 8013c84:	2800      	cmp	r0, #0
 8013c86:	d146      	bne.n	8013d16 <pow+0xd6>
 8013c88:	ec45 4b10 	vmov	d0, r4, r5
 8013c8c:	f002 f9df 	bl	801604e <finite>
 8013c90:	b338      	cbz	r0, 8013ce2 <pow+0xa2>
 8013c92:	2200      	movs	r2, #0
 8013c94:	2300      	movs	r3, #0
 8013c96:	4620      	mov	r0, r4
 8013c98:	4629      	mov	r1, r5
 8013c9a:	f7ec ff39 	bl	8000b10 <__aeabi_dcmplt>
 8013c9e:	b300      	cbz	r0, 8013ce2 <pow+0xa2>
 8013ca0:	f7fd fda4 	bl	80117ec <__errno>
 8013ca4:	2322      	movs	r3, #34	; 0x22
 8013ca6:	e01b      	b.n	8013ce0 <pow+0xa0>
 8013ca8:	ec47 6b10 	vmov	d0, r6, r7
 8013cac:	f002 f9cf 	bl	801604e <finite>
 8013cb0:	b9e0      	cbnz	r0, 8013cec <pow+0xac>
 8013cb2:	eeb0 0a48 	vmov.f32	s0, s16
 8013cb6:	eef0 0a68 	vmov.f32	s1, s17
 8013cba:	f002 f9c8 	bl	801604e <finite>
 8013cbe:	b1a8      	cbz	r0, 8013cec <pow+0xac>
 8013cc0:	ec45 4b10 	vmov	d0, r4, r5
 8013cc4:	f002 f9c3 	bl	801604e <finite>
 8013cc8:	b180      	cbz	r0, 8013cec <pow+0xac>
 8013cca:	4632      	mov	r2, r6
 8013ccc:	463b      	mov	r3, r7
 8013cce:	4630      	mov	r0, r6
 8013cd0:	4639      	mov	r1, r7
 8013cd2:	f7ec ff45 	bl	8000b60 <__aeabi_dcmpun>
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d0e2      	beq.n	8013ca0 <pow+0x60>
 8013cda:	f7fd fd87 	bl	80117ec <__errno>
 8013cde:	2321      	movs	r3, #33	; 0x21
 8013ce0:	6003      	str	r3, [r0, #0]
 8013ce2:	ecbd 8b02 	vpop	{d8}
 8013ce6:	ec47 6b10 	vmov	d0, r6, r7
 8013cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cec:	2200      	movs	r2, #0
 8013cee:	2300      	movs	r3, #0
 8013cf0:	4630      	mov	r0, r6
 8013cf2:	4639      	mov	r1, r7
 8013cf4:	f7ec ff02 	bl	8000afc <__aeabi_dcmpeq>
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	d0f2      	beq.n	8013ce2 <pow+0xa2>
 8013cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8013d00:	eef0 0a68 	vmov.f32	s1, s17
 8013d04:	f002 f9a3 	bl	801604e <finite>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	d0ea      	beq.n	8013ce2 <pow+0xa2>
 8013d0c:	ec45 4b10 	vmov	d0, r4, r5
 8013d10:	f002 f99d 	bl	801604e <finite>
 8013d14:	e7c3      	b.n	8013c9e <pow+0x5e>
 8013d16:	4f01      	ldr	r7, [pc, #4]	; (8013d1c <pow+0xdc>)
 8013d18:	2600      	movs	r6, #0
 8013d1a:	e7e2      	b.n	8013ce2 <pow+0xa2>
 8013d1c:	3ff00000 	.word	0x3ff00000

08013d20 <sqrt>:
 8013d20:	b538      	push	{r3, r4, r5, lr}
 8013d22:	ed2d 8b02 	vpush	{d8}
 8013d26:	ec55 4b10 	vmov	r4, r5, d0
 8013d2a:	f001 f9c1 	bl	80150b0 <__ieee754_sqrt>
 8013d2e:	4622      	mov	r2, r4
 8013d30:	462b      	mov	r3, r5
 8013d32:	4620      	mov	r0, r4
 8013d34:	4629      	mov	r1, r5
 8013d36:	eeb0 8a40 	vmov.f32	s16, s0
 8013d3a:	eef0 8a60 	vmov.f32	s17, s1
 8013d3e:	f7ec ff0f 	bl	8000b60 <__aeabi_dcmpun>
 8013d42:	b990      	cbnz	r0, 8013d6a <sqrt+0x4a>
 8013d44:	2200      	movs	r2, #0
 8013d46:	2300      	movs	r3, #0
 8013d48:	4620      	mov	r0, r4
 8013d4a:	4629      	mov	r1, r5
 8013d4c:	f7ec fee0 	bl	8000b10 <__aeabi_dcmplt>
 8013d50:	b158      	cbz	r0, 8013d6a <sqrt+0x4a>
 8013d52:	f7fd fd4b 	bl	80117ec <__errno>
 8013d56:	2321      	movs	r3, #33	; 0x21
 8013d58:	6003      	str	r3, [r0, #0]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	4610      	mov	r0, r2
 8013d60:	4619      	mov	r1, r3
 8013d62:	f7ec fd8d 	bl	8000880 <__aeabi_ddiv>
 8013d66:	ec41 0b18 	vmov	d8, r0, r1
 8013d6a:	eeb0 0a48 	vmov.f32	s0, s16
 8013d6e:	eef0 0a68 	vmov.f32	s1, s17
 8013d72:	ecbd 8b02 	vpop	{d8}
 8013d76:	bd38      	pop	{r3, r4, r5, pc}

08013d78 <__ieee754_acos>:
 8013d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d7c:	ec55 4b10 	vmov	r4, r5, d0
 8013d80:	49b7      	ldr	r1, [pc, #732]	; (8014060 <__ieee754_acos+0x2e8>)
 8013d82:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013d86:	428b      	cmp	r3, r1
 8013d88:	dd1b      	ble.n	8013dc2 <__ieee754_acos+0x4a>
 8013d8a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8013d8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013d92:	4323      	orrs	r3, r4
 8013d94:	d106      	bne.n	8013da4 <__ieee754_acos+0x2c>
 8013d96:	2d00      	cmp	r5, #0
 8013d98:	f300 8211 	bgt.w	80141be <__ieee754_acos+0x446>
 8013d9c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8013ff8 <__ieee754_acos+0x280>
 8013da0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013da4:	ee10 2a10 	vmov	r2, s0
 8013da8:	462b      	mov	r3, r5
 8013daa:	ee10 0a10 	vmov	r0, s0
 8013dae:	4629      	mov	r1, r5
 8013db0:	f7ec fa84 	bl	80002bc <__aeabi_dsub>
 8013db4:	4602      	mov	r2, r0
 8013db6:	460b      	mov	r3, r1
 8013db8:	f7ec fd62 	bl	8000880 <__aeabi_ddiv>
 8013dbc:	ec41 0b10 	vmov	d0, r0, r1
 8013dc0:	e7ee      	b.n	8013da0 <__ieee754_acos+0x28>
 8013dc2:	49a8      	ldr	r1, [pc, #672]	; (8014064 <__ieee754_acos+0x2ec>)
 8013dc4:	428b      	cmp	r3, r1
 8013dc6:	f300 8087 	bgt.w	8013ed8 <__ieee754_acos+0x160>
 8013dca:	4aa7      	ldr	r2, [pc, #668]	; (8014068 <__ieee754_acos+0x2f0>)
 8013dcc:	4293      	cmp	r3, r2
 8013dce:	f340 81f9 	ble.w	80141c4 <__ieee754_acos+0x44c>
 8013dd2:	ee10 2a10 	vmov	r2, s0
 8013dd6:	ee10 0a10 	vmov	r0, s0
 8013dda:	462b      	mov	r3, r5
 8013ddc:	4629      	mov	r1, r5
 8013dde:	f7ec fc25 	bl	800062c <__aeabi_dmul>
 8013de2:	a387      	add	r3, pc, #540	; (adr r3, 8014000 <__ieee754_acos+0x288>)
 8013de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de8:	4606      	mov	r6, r0
 8013dea:	460f      	mov	r7, r1
 8013dec:	f7ec fc1e 	bl	800062c <__aeabi_dmul>
 8013df0:	a385      	add	r3, pc, #532	; (adr r3, 8014008 <__ieee754_acos+0x290>)
 8013df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df6:	f7ec fa63 	bl	80002c0 <__adddf3>
 8013dfa:	4632      	mov	r2, r6
 8013dfc:	463b      	mov	r3, r7
 8013dfe:	f7ec fc15 	bl	800062c <__aeabi_dmul>
 8013e02:	a383      	add	r3, pc, #524	; (adr r3, 8014010 <__ieee754_acos+0x298>)
 8013e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e08:	f7ec fa58 	bl	80002bc <__aeabi_dsub>
 8013e0c:	4632      	mov	r2, r6
 8013e0e:	463b      	mov	r3, r7
 8013e10:	f7ec fc0c 	bl	800062c <__aeabi_dmul>
 8013e14:	a380      	add	r3, pc, #512	; (adr r3, 8014018 <__ieee754_acos+0x2a0>)
 8013e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e1a:	f7ec fa51 	bl	80002c0 <__adddf3>
 8013e1e:	4632      	mov	r2, r6
 8013e20:	463b      	mov	r3, r7
 8013e22:	f7ec fc03 	bl	800062c <__aeabi_dmul>
 8013e26:	a37e      	add	r3, pc, #504	; (adr r3, 8014020 <__ieee754_acos+0x2a8>)
 8013e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e2c:	f7ec fa46 	bl	80002bc <__aeabi_dsub>
 8013e30:	4632      	mov	r2, r6
 8013e32:	463b      	mov	r3, r7
 8013e34:	f7ec fbfa 	bl	800062c <__aeabi_dmul>
 8013e38:	a37b      	add	r3, pc, #492	; (adr r3, 8014028 <__ieee754_acos+0x2b0>)
 8013e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e3e:	f7ec fa3f 	bl	80002c0 <__adddf3>
 8013e42:	4632      	mov	r2, r6
 8013e44:	463b      	mov	r3, r7
 8013e46:	f7ec fbf1 	bl	800062c <__aeabi_dmul>
 8013e4a:	a379      	add	r3, pc, #484	; (adr r3, 8014030 <__ieee754_acos+0x2b8>)
 8013e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e50:	4680      	mov	r8, r0
 8013e52:	4689      	mov	r9, r1
 8013e54:	4630      	mov	r0, r6
 8013e56:	4639      	mov	r1, r7
 8013e58:	f7ec fbe8 	bl	800062c <__aeabi_dmul>
 8013e5c:	a376      	add	r3, pc, #472	; (adr r3, 8014038 <__ieee754_acos+0x2c0>)
 8013e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e62:	f7ec fa2b 	bl	80002bc <__aeabi_dsub>
 8013e66:	4632      	mov	r2, r6
 8013e68:	463b      	mov	r3, r7
 8013e6a:	f7ec fbdf 	bl	800062c <__aeabi_dmul>
 8013e6e:	a374      	add	r3, pc, #464	; (adr r3, 8014040 <__ieee754_acos+0x2c8>)
 8013e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e74:	f7ec fa24 	bl	80002c0 <__adddf3>
 8013e78:	4632      	mov	r2, r6
 8013e7a:	463b      	mov	r3, r7
 8013e7c:	f7ec fbd6 	bl	800062c <__aeabi_dmul>
 8013e80:	a371      	add	r3, pc, #452	; (adr r3, 8014048 <__ieee754_acos+0x2d0>)
 8013e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e86:	f7ec fa19 	bl	80002bc <__aeabi_dsub>
 8013e8a:	4632      	mov	r2, r6
 8013e8c:	463b      	mov	r3, r7
 8013e8e:	f7ec fbcd 	bl	800062c <__aeabi_dmul>
 8013e92:	4b76      	ldr	r3, [pc, #472]	; (801406c <__ieee754_acos+0x2f4>)
 8013e94:	2200      	movs	r2, #0
 8013e96:	f7ec fa13 	bl	80002c0 <__adddf3>
 8013e9a:	4602      	mov	r2, r0
 8013e9c:	460b      	mov	r3, r1
 8013e9e:	4640      	mov	r0, r8
 8013ea0:	4649      	mov	r1, r9
 8013ea2:	f7ec fced 	bl	8000880 <__aeabi_ddiv>
 8013ea6:	4622      	mov	r2, r4
 8013ea8:	462b      	mov	r3, r5
 8013eaa:	f7ec fbbf 	bl	800062c <__aeabi_dmul>
 8013eae:	4602      	mov	r2, r0
 8013eb0:	460b      	mov	r3, r1
 8013eb2:	a167      	add	r1, pc, #412	; (adr r1, 8014050 <__ieee754_acos+0x2d8>)
 8013eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013eb8:	f7ec fa00 	bl	80002bc <__aeabi_dsub>
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	460b      	mov	r3, r1
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	4629      	mov	r1, r5
 8013ec4:	f7ec f9fa 	bl	80002bc <__aeabi_dsub>
 8013ec8:	4602      	mov	r2, r0
 8013eca:	460b      	mov	r3, r1
 8013ecc:	a162      	add	r1, pc, #392	; (adr r1, 8014058 <__ieee754_acos+0x2e0>)
 8013ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ed2:	f7ec f9f3 	bl	80002bc <__aeabi_dsub>
 8013ed6:	e771      	b.n	8013dbc <__ieee754_acos+0x44>
 8013ed8:	2d00      	cmp	r5, #0
 8013eda:	f280 80cb 	bge.w	8014074 <__ieee754_acos+0x2fc>
 8013ede:	ee10 0a10 	vmov	r0, s0
 8013ee2:	4b62      	ldr	r3, [pc, #392]	; (801406c <__ieee754_acos+0x2f4>)
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	4629      	mov	r1, r5
 8013ee8:	f7ec f9ea 	bl	80002c0 <__adddf3>
 8013eec:	4b60      	ldr	r3, [pc, #384]	; (8014070 <__ieee754_acos+0x2f8>)
 8013eee:	2200      	movs	r2, #0
 8013ef0:	f7ec fb9c 	bl	800062c <__aeabi_dmul>
 8013ef4:	a342      	add	r3, pc, #264	; (adr r3, 8014000 <__ieee754_acos+0x288>)
 8013ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013efa:	4604      	mov	r4, r0
 8013efc:	460d      	mov	r5, r1
 8013efe:	f7ec fb95 	bl	800062c <__aeabi_dmul>
 8013f02:	a341      	add	r3, pc, #260	; (adr r3, 8014008 <__ieee754_acos+0x290>)
 8013f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f08:	f7ec f9da 	bl	80002c0 <__adddf3>
 8013f0c:	4622      	mov	r2, r4
 8013f0e:	462b      	mov	r3, r5
 8013f10:	f7ec fb8c 	bl	800062c <__aeabi_dmul>
 8013f14:	a33e      	add	r3, pc, #248	; (adr r3, 8014010 <__ieee754_acos+0x298>)
 8013f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f1a:	f7ec f9cf 	bl	80002bc <__aeabi_dsub>
 8013f1e:	4622      	mov	r2, r4
 8013f20:	462b      	mov	r3, r5
 8013f22:	f7ec fb83 	bl	800062c <__aeabi_dmul>
 8013f26:	a33c      	add	r3, pc, #240	; (adr r3, 8014018 <__ieee754_acos+0x2a0>)
 8013f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f2c:	f7ec f9c8 	bl	80002c0 <__adddf3>
 8013f30:	4622      	mov	r2, r4
 8013f32:	462b      	mov	r3, r5
 8013f34:	f7ec fb7a 	bl	800062c <__aeabi_dmul>
 8013f38:	a339      	add	r3, pc, #228	; (adr r3, 8014020 <__ieee754_acos+0x2a8>)
 8013f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f3e:	f7ec f9bd 	bl	80002bc <__aeabi_dsub>
 8013f42:	4622      	mov	r2, r4
 8013f44:	462b      	mov	r3, r5
 8013f46:	f7ec fb71 	bl	800062c <__aeabi_dmul>
 8013f4a:	a337      	add	r3, pc, #220	; (adr r3, 8014028 <__ieee754_acos+0x2b0>)
 8013f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f50:	f7ec f9b6 	bl	80002c0 <__adddf3>
 8013f54:	4622      	mov	r2, r4
 8013f56:	462b      	mov	r3, r5
 8013f58:	f7ec fb68 	bl	800062c <__aeabi_dmul>
 8013f5c:	ec45 4b10 	vmov	d0, r4, r5
 8013f60:	4680      	mov	r8, r0
 8013f62:	4689      	mov	r9, r1
 8013f64:	f001 f8a4 	bl	80150b0 <__ieee754_sqrt>
 8013f68:	a331      	add	r3, pc, #196	; (adr r3, 8014030 <__ieee754_acos+0x2b8>)
 8013f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6e:	4620      	mov	r0, r4
 8013f70:	4629      	mov	r1, r5
 8013f72:	ec57 6b10 	vmov	r6, r7, d0
 8013f76:	f7ec fb59 	bl	800062c <__aeabi_dmul>
 8013f7a:	a32f      	add	r3, pc, #188	; (adr r3, 8014038 <__ieee754_acos+0x2c0>)
 8013f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f80:	f7ec f99c 	bl	80002bc <__aeabi_dsub>
 8013f84:	4622      	mov	r2, r4
 8013f86:	462b      	mov	r3, r5
 8013f88:	f7ec fb50 	bl	800062c <__aeabi_dmul>
 8013f8c:	a32c      	add	r3, pc, #176	; (adr r3, 8014040 <__ieee754_acos+0x2c8>)
 8013f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f92:	f7ec f995 	bl	80002c0 <__adddf3>
 8013f96:	4622      	mov	r2, r4
 8013f98:	462b      	mov	r3, r5
 8013f9a:	f7ec fb47 	bl	800062c <__aeabi_dmul>
 8013f9e:	a32a      	add	r3, pc, #168	; (adr r3, 8014048 <__ieee754_acos+0x2d0>)
 8013fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa4:	f7ec f98a 	bl	80002bc <__aeabi_dsub>
 8013fa8:	4622      	mov	r2, r4
 8013faa:	462b      	mov	r3, r5
 8013fac:	f7ec fb3e 	bl	800062c <__aeabi_dmul>
 8013fb0:	4b2e      	ldr	r3, [pc, #184]	; (801406c <__ieee754_acos+0x2f4>)
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	f7ec f984 	bl	80002c0 <__adddf3>
 8013fb8:	4602      	mov	r2, r0
 8013fba:	460b      	mov	r3, r1
 8013fbc:	4640      	mov	r0, r8
 8013fbe:	4649      	mov	r1, r9
 8013fc0:	f7ec fc5e 	bl	8000880 <__aeabi_ddiv>
 8013fc4:	4632      	mov	r2, r6
 8013fc6:	463b      	mov	r3, r7
 8013fc8:	f7ec fb30 	bl	800062c <__aeabi_dmul>
 8013fcc:	a320      	add	r3, pc, #128	; (adr r3, 8014050 <__ieee754_acos+0x2d8>)
 8013fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd2:	f7ec f973 	bl	80002bc <__aeabi_dsub>
 8013fd6:	4632      	mov	r2, r6
 8013fd8:	463b      	mov	r3, r7
 8013fda:	f7ec f971 	bl	80002c0 <__adddf3>
 8013fde:	4602      	mov	r2, r0
 8013fe0:	460b      	mov	r3, r1
 8013fe2:	f7ec f96d 	bl	80002c0 <__adddf3>
 8013fe6:	4602      	mov	r2, r0
 8013fe8:	460b      	mov	r3, r1
 8013fea:	a103      	add	r1, pc, #12	; (adr r1, 8013ff8 <__ieee754_acos+0x280>)
 8013fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ff0:	e76f      	b.n	8013ed2 <__ieee754_acos+0x15a>
 8013ff2:	bf00      	nop
 8013ff4:	f3af 8000 	nop.w
 8013ff8:	54442d18 	.word	0x54442d18
 8013ffc:	400921fb 	.word	0x400921fb
 8014000:	0dfdf709 	.word	0x0dfdf709
 8014004:	3f023de1 	.word	0x3f023de1
 8014008:	7501b288 	.word	0x7501b288
 801400c:	3f49efe0 	.word	0x3f49efe0
 8014010:	b5688f3b 	.word	0xb5688f3b
 8014014:	3fa48228 	.word	0x3fa48228
 8014018:	0e884455 	.word	0x0e884455
 801401c:	3fc9c155 	.word	0x3fc9c155
 8014020:	03eb6f7d 	.word	0x03eb6f7d
 8014024:	3fd4d612 	.word	0x3fd4d612
 8014028:	55555555 	.word	0x55555555
 801402c:	3fc55555 	.word	0x3fc55555
 8014030:	b12e9282 	.word	0xb12e9282
 8014034:	3fb3b8c5 	.word	0x3fb3b8c5
 8014038:	1b8d0159 	.word	0x1b8d0159
 801403c:	3fe6066c 	.word	0x3fe6066c
 8014040:	9c598ac8 	.word	0x9c598ac8
 8014044:	40002ae5 	.word	0x40002ae5
 8014048:	1c8a2d4b 	.word	0x1c8a2d4b
 801404c:	40033a27 	.word	0x40033a27
 8014050:	33145c07 	.word	0x33145c07
 8014054:	3c91a626 	.word	0x3c91a626
 8014058:	54442d18 	.word	0x54442d18
 801405c:	3ff921fb 	.word	0x3ff921fb
 8014060:	3fefffff 	.word	0x3fefffff
 8014064:	3fdfffff 	.word	0x3fdfffff
 8014068:	3c600000 	.word	0x3c600000
 801406c:	3ff00000 	.word	0x3ff00000
 8014070:	3fe00000 	.word	0x3fe00000
 8014074:	ee10 2a10 	vmov	r2, s0
 8014078:	462b      	mov	r3, r5
 801407a:	496d      	ldr	r1, [pc, #436]	; (8014230 <__ieee754_acos+0x4b8>)
 801407c:	2000      	movs	r0, #0
 801407e:	f7ec f91d 	bl	80002bc <__aeabi_dsub>
 8014082:	4b6c      	ldr	r3, [pc, #432]	; (8014234 <__ieee754_acos+0x4bc>)
 8014084:	2200      	movs	r2, #0
 8014086:	f7ec fad1 	bl	800062c <__aeabi_dmul>
 801408a:	4604      	mov	r4, r0
 801408c:	460d      	mov	r5, r1
 801408e:	ec45 4b10 	vmov	d0, r4, r5
 8014092:	f001 f80d 	bl	80150b0 <__ieee754_sqrt>
 8014096:	a34e      	add	r3, pc, #312	; (adr r3, 80141d0 <__ieee754_acos+0x458>)
 8014098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801409c:	4620      	mov	r0, r4
 801409e:	4629      	mov	r1, r5
 80140a0:	ec59 8b10 	vmov	r8, r9, d0
 80140a4:	f7ec fac2 	bl	800062c <__aeabi_dmul>
 80140a8:	a34b      	add	r3, pc, #300	; (adr r3, 80141d8 <__ieee754_acos+0x460>)
 80140aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ae:	f7ec f907 	bl	80002c0 <__adddf3>
 80140b2:	4622      	mov	r2, r4
 80140b4:	462b      	mov	r3, r5
 80140b6:	f7ec fab9 	bl	800062c <__aeabi_dmul>
 80140ba:	a349      	add	r3, pc, #292	; (adr r3, 80141e0 <__ieee754_acos+0x468>)
 80140bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c0:	f7ec f8fc 	bl	80002bc <__aeabi_dsub>
 80140c4:	4622      	mov	r2, r4
 80140c6:	462b      	mov	r3, r5
 80140c8:	f7ec fab0 	bl	800062c <__aeabi_dmul>
 80140cc:	a346      	add	r3, pc, #280	; (adr r3, 80141e8 <__ieee754_acos+0x470>)
 80140ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140d2:	f7ec f8f5 	bl	80002c0 <__adddf3>
 80140d6:	4622      	mov	r2, r4
 80140d8:	462b      	mov	r3, r5
 80140da:	f7ec faa7 	bl	800062c <__aeabi_dmul>
 80140de:	a344      	add	r3, pc, #272	; (adr r3, 80141f0 <__ieee754_acos+0x478>)
 80140e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e4:	f7ec f8ea 	bl	80002bc <__aeabi_dsub>
 80140e8:	4622      	mov	r2, r4
 80140ea:	462b      	mov	r3, r5
 80140ec:	f7ec fa9e 	bl	800062c <__aeabi_dmul>
 80140f0:	a341      	add	r3, pc, #260	; (adr r3, 80141f8 <__ieee754_acos+0x480>)
 80140f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f6:	f7ec f8e3 	bl	80002c0 <__adddf3>
 80140fa:	4622      	mov	r2, r4
 80140fc:	462b      	mov	r3, r5
 80140fe:	f7ec fa95 	bl	800062c <__aeabi_dmul>
 8014102:	a33f      	add	r3, pc, #252	; (adr r3, 8014200 <__ieee754_acos+0x488>)
 8014104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014108:	4682      	mov	sl, r0
 801410a:	468b      	mov	fp, r1
 801410c:	4620      	mov	r0, r4
 801410e:	4629      	mov	r1, r5
 8014110:	f7ec fa8c 	bl	800062c <__aeabi_dmul>
 8014114:	a33c      	add	r3, pc, #240	; (adr r3, 8014208 <__ieee754_acos+0x490>)
 8014116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801411a:	f7ec f8cf 	bl	80002bc <__aeabi_dsub>
 801411e:	4622      	mov	r2, r4
 8014120:	462b      	mov	r3, r5
 8014122:	f7ec fa83 	bl	800062c <__aeabi_dmul>
 8014126:	a33a      	add	r3, pc, #232	; (adr r3, 8014210 <__ieee754_acos+0x498>)
 8014128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801412c:	f7ec f8c8 	bl	80002c0 <__adddf3>
 8014130:	4622      	mov	r2, r4
 8014132:	462b      	mov	r3, r5
 8014134:	f7ec fa7a 	bl	800062c <__aeabi_dmul>
 8014138:	a337      	add	r3, pc, #220	; (adr r3, 8014218 <__ieee754_acos+0x4a0>)
 801413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801413e:	f7ec f8bd 	bl	80002bc <__aeabi_dsub>
 8014142:	4622      	mov	r2, r4
 8014144:	462b      	mov	r3, r5
 8014146:	f7ec fa71 	bl	800062c <__aeabi_dmul>
 801414a:	4b39      	ldr	r3, [pc, #228]	; (8014230 <__ieee754_acos+0x4b8>)
 801414c:	2200      	movs	r2, #0
 801414e:	f7ec f8b7 	bl	80002c0 <__adddf3>
 8014152:	4602      	mov	r2, r0
 8014154:	460b      	mov	r3, r1
 8014156:	4650      	mov	r0, sl
 8014158:	4659      	mov	r1, fp
 801415a:	f7ec fb91 	bl	8000880 <__aeabi_ddiv>
 801415e:	4642      	mov	r2, r8
 8014160:	464b      	mov	r3, r9
 8014162:	f7ec fa63 	bl	800062c <__aeabi_dmul>
 8014166:	2600      	movs	r6, #0
 8014168:	4682      	mov	sl, r0
 801416a:	468b      	mov	fp, r1
 801416c:	4632      	mov	r2, r6
 801416e:	464b      	mov	r3, r9
 8014170:	4630      	mov	r0, r6
 8014172:	4649      	mov	r1, r9
 8014174:	f7ec fa5a 	bl	800062c <__aeabi_dmul>
 8014178:	4602      	mov	r2, r0
 801417a:	460b      	mov	r3, r1
 801417c:	4620      	mov	r0, r4
 801417e:	4629      	mov	r1, r5
 8014180:	f7ec f89c 	bl	80002bc <__aeabi_dsub>
 8014184:	4632      	mov	r2, r6
 8014186:	4604      	mov	r4, r0
 8014188:	460d      	mov	r5, r1
 801418a:	464b      	mov	r3, r9
 801418c:	4640      	mov	r0, r8
 801418e:	4649      	mov	r1, r9
 8014190:	f7ec f896 	bl	80002c0 <__adddf3>
 8014194:	4602      	mov	r2, r0
 8014196:	460b      	mov	r3, r1
 8014198:	4620      	mov	r0, r4
 801419a:	4629      	mov	r1, r5
 801419c:	f7ec fb70 	bl	8000880 <__aeabi_ddiv>
 80141a0:	4602      	mov	r2, r0
 80141a2:	460b      	mov	r3, r1
 80141a4:	4650      	mov	r0, sl
 80141a6:	4659      	mov	r1, fp
 80141a8:	f7ec f88a 	bl	80002c0 <__adddf3>
 80141ac:	4632      	mov	r2, r6
 80141ae:	464b      	mov	r3, r9
 80141b0:	f7ec f886 	bl	80002c0 <__adddf3>
 80141b4:	4602      	mov	r2, r0
 80141b6:	460b      	mov	r3, r1
 80141b8:	f7ec f882 	bl	80002c0 <__adddf3>
 80141bc:	e5fe      	b.n	8013dbc <__ieee754_acos+0x44>
 80141be:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8014220 <__ieee754_acos+0x4a8>
 80141c2:	e5ed      	b.n	8013da0 <__ieee754_acos+0x28>
 80141c4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8014228 <__ieee754_acos+0x4b0>
 80141c8:	e5ea      	b.n	8013da0 <__ieee754_acos+0x28>
 80141ca:	bf00      	nop
 80141cc:	f3af 8000 	nop.w
 80141d0:	0dfdf709 	.word	0x0dfdf709
 80141d4:	3f023de1 	.word	0x3f023de1
 80141d8:	7501b288 	.word	0x7501b288
 80141dc:	3f49efe0 	.word	0x3f49efe0
 80141e0:	b5688f3b 	.word	0xb5688f3b
 80141e4:	3fa48228 	.word	0x3fa48228
 80141e8:	0e884455 	.word	0x0e884455
 80141ec:	3fc9c155 	.word	0x3fc9c155
 80141f0:	03eb6f7d 	.word	0x03eb6f7d
 80141f4:	3fd4d612 	.word	0x3fd4d612
 80141f8:	55555555 	.word	0x55555555
 80141fc:	3fc55555 	.word	0x3fc55555
 8014200:	b12e9282 	.word	0xb12e9282
 8014204:	3fb3b8c5 	.word	0x3fb3b8c5
 8014208:	1b8d0159 	.word	0x1b8d0159
 801420c:	3fe6066c 	.word	0x3fe6066c
 8014210:	9c598ac8 	.word	0x9c598ac8
 8014214:	40002ae5 	.word	0x40002ae5
 8014218:	1c8a2d4b 	.word	0x1c8a2d4b
 801421c:	40033a27 	.word	0x40033a27
	...
 8014228:	54442d18 	.word	0x54442d18
 801422c:	3ff921fb 	.word	0x3ff921fb
 8014230:	3ff00000 	.word	0x3ff00000
 8014234:	3fe00000 	.word	0x3fe00000

08014238 <__ieee754_pow>:
 8014238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801423c:	ed2d 8b06 	vpush	{d8-d10}
 8014240:	b089      	sub	sp, #36	; 0x24
 8014242:	ed8d 1b00 	vstr	d1, [sp]
 8014246:	e9dd 2900 	ldrd	r2, r9, [sp]
 801424a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801424e:	ea58 0102 	orrs.w	r1, r8, r2
 8014252:	ec57 6b10 	vmov	r6, r7, d0
 8014256:	d115      	bne.n	8014284 <__ieee754_pow+0x4c>
 8014258:	19b3      	adds	r3, r6, r6
 801425a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801425e:	4152      	adcs	r2, r2
 8014260:	4299      	cmp	r1, r3
 8014262:	4b89      	ldr	r3, [pc, #548]	; (8014488 <__ieee754_pow+0x250>)
 8014264:	4193      	sbcs	r3, r2
 8014266:	f080 84d2 	bcs.w	8014c0e <__ieee754_pow+0x9d6>
 801426a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801426e:	4630      	mov	r0, r6
 8014270:	4639      	mov	r1, r7
 8014272:	f7ec f825 	bl	80002c0 <__adddf3>
 8014276:	ec41 0b10 	vmov	d0, r0, r1
 801427a:	b009      	add	sp, #36	; 0x24
 801427c:	ecbd 8b06 	vpop	{d8-d10}
 8014280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014284:	4b81      	ldr	r3, [pc, #516]	; (801448c <__ieee754_pow+0x254>)
 8014286:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801428a:	429c      	cmp	r4, r3
 801428c:	ee10 aa10 	vmov	sl, s0
 8014290:	463d      	mov	r5, r7
 8014292:	dc06      	bgt.n	80142a2 <__ieee754_pow+0x6a>
 8014294:	d101      	bne.n	801429a <__ieee754_pow+0x62>
 8014296:	2e00      	cmp	r6, #0
 8014298:	d1e7      	bne.n	801426a <__ieee754_pow+0x32>
 801429a:	4598      	cmp	r8, r3
 801429c:	dc01      	bgt.n	80142a2 <__ieee754_pow+0x6a>
 801429e:	d10f      	bne.n	80142c0 <__ieee754_pow+0x88>
 80142a0:	b172      	cbz	r2, 80142c0 <__ieee754_pow+0x88>
 80142a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80142a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80142aa:	ea55 050a 	orrs.w	r5, r5, sl
 80142ae:	d1dc      	bne.n	801426a <__ieee754_pow+0x32>
 80142b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80142b4:	18db      	adds	r3, r3, r3
 80142b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80142ba:	4152      	adcs	r2, r2
 80142bc:	429d      	cmp	r5, r3
 80142be:	e7d0      	b.n	8014262 <__ieee754_pow+0x2a>
 80142c0:	2d00      	cmp	r5, #0
 80142c2:	da3b      	bge.n	801433c <__ieee754_pow+0x104>
 80142c4:	4b72      	ldr	r3, [pc, #456]	; (8014490 <__ieee754_pow+0x258>)
 80142c6:	4598      	cmp	r8, r3
 80142c8:	dc51      	bgt.n	801436e <__ieee754_pow+0x136>
 80142ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80142ce:	4598      	cmp	r8, r3
 80142d0:	f340 84ac 	ble.w	8014c2c <__ieee754_pow+0x9f4>
 80142d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80142d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80142dc:	2b14      	cmp	r3, #20
 80142de:	dd0f      	ble.n	8014300 <__ieee754_pow+0xc8>
 80142e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80142e4:	fa22 f103 	lsr.w	r1, r2, r3
 80142e8:	fa01 f303 	lsl.w	r3, r1, r3
 80142ec:	4293      	cmp	r3, r2
 80142ee:	f040 849d 	bne.w	8014c2c <__ieee754_pow+0x9f4>
 80142f2:	f001 0101 	and.w	r1, r1, #1
 80142f6:	f1c1 0302 	rsb	r3, r1, #2
 80142fa:	9304      	str	r3, [sp, #16]
 80142fc:	b182      	cbz	r2, 8014320 <__ieee754_pow+0xe8>
 80142fe:	e05f      	b.n	80143c0 <__ieee754_pow+0x188>
 8014300:	2a00      	cmp	r2, #0
 8014302:	d15b      	bne.n	80143bc <__ieee754_pow+0x184>
 8014304:	f1c3 0314 	rsb	r3, r3, #20
 8014308:	fa48 f103 	asr.w	r1, r8, r3
 801430c:	fa01 f303 	lsl.w	r3, r1, r3
 8014310:	4543      	cmp	r3, r8
 8014312:	f040 8488 	bne.w	8014c26 <__ieee754_pow+0x9ee>
 8014316:	f001 0101 	and.w	r1, r1, #1
 801431a:	f1c1 0302 	rsb	r3, r1, #2
 801431e:	9304      	str	r3, [sp, #16]
 8014320:	4b5c      	ldr	r3, [pc, #368]	; (8014494 <__ieee754_pow+0x25c>)
 8014322:	4598      	cmp	r8, r3
 8014324:	d132      	bne.n	801438c <__ieee754_pow+0x154>
 8014326:	f1b9 0f00 	cmp.w	r9, #0
 801432a:	f280 8478 	bge.w	8014c1e <__ieee754_pow+0x9e6>
 801432e:	4959      	ldr	r1, [pc, #356]	; (8014494 <__ieee754_pow+0x25c>)
 8014330:	4632      	mov	r2, r6
 8014332:	463b      	mov	r3, r7
 8014334:	2000      	movs	r0, #0
 8014336:	f7ec faa3 	bl	8000880 <__aeabi_ddiv>
 801433a:	e79c      	b.n	8014276 <__ieee754_pow+0x3e>
 801433c:	2300      	movs	r3, #0
 801433e:	9304      	str	r3, [sp, #16]
 8014340:	2a00      	cmp	r2, #0
 8014342:	d13d      	bne.n	80143c0 <__ieee754_pow+0x188>
 8014344:	4b51      	ldr	r3, [pc, #324]	; (801448c <__ieee754_pow+0x254>)
 8014346:	4598      	cmp	r8, r3
 8014348:	d1ea      	bne.n	8014320 <__ieee754_pow+0xe8>
 801434a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801434e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014352:	ea53 030a 	orrs.w	r3, r3, sl
 8014356:	f000 845a 	beq.w	8014c0e <__ieee754_pow+0x9d6>
 801435a:	4b4f      	ldr	r3, [pc, #316]	; (8014498 <__ieee754_pow+0x260>)
 801435c:	429c      	cmp	r4, r3
 801435e:	dd08      	ble.n	8014372 <__ieee754_pow+0x13a>
 8014360:	f1b9 0f00 	cmp.w	r9, #0
 8014364:	f2c0 8457 	blt.w	8014c16 <__ieee754_pow+0x9de>
 8014368:	e9dd 0100 	ldrd	r0, r1, [sp]
 801436c:	e783      	b.n	8014276 <__ieee754_pow+0x3e>
 801436e:	2302      	movs	r3, #2
 8014370:	e7e5      	b.n	801433e <__ieee754_pow+0x106>
 8014372:	f1b9 0f00 	cmp.w	r9, #0
 8014376:	f04f 0000 	mov.w	r0, #0
 801437a:	f04f 0100 	mov.w	r1, #0
 801437e:	f6bf af7a 	bge.w	8014276 <__ieee754_pow+0x3e>
 8014382:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014386:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801438a:	e774      	b.n	8014276 <__ieee754_pow+0x3e>
 801438c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014390:	d106      	bne.n	80143a0 <__ieee754_pow+0x168>
 8014392:	4632      	mov	r2, r6
 8014394:	463b      	mov	r3, r7
 8014396:	4630      	mov	r0, r6
 8014398:	4639      	mov	r1, r7
 801439a:	f7ec f947 	bl	800062c <__aeabi_dmul>
 801439e:	e76a      	b.n	8014276 <__ieee754_pow+0x3e>
 80143a0:	4b3e      	ldr	r3, [pc, #248]	; (801449c <__ieee754_pow+0x264>)
 80143a2:	4599      	cmp	r9, r3
 80143a4:	d10c      	bne.n	80143c0 <__ieee754_pow+0x188>
 80143a6:	2d00      	cmp	r5, #0
 80143a8:	db0a      	blt.n	80143c0 <__ieee754_pow+0x188>
 80143aa:	ec47 6b10 	vmov	d0, r6, r7
 80143ae:	b009      	add	sp, #36	; 0x24
 80143b0:	ecbd 8b06 	vpop	{d8-d10}
 80143b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143b8:	f000 be7a 	b.w	80150b0 <__ieee754_sqrt>
 80143bc:	2300      	movs	r3, #0
 80143be:	9304      	str	r3, [sp, #16]
 80143c0:	ec47 6b10 	vmov	d0, r6, r7
 80143c4:	f001 fe3a 	bl	801603c <fabs>
 80143c8:	ec51 0b10 	vmov	r0, r1, d0
 80143cc:	f1ba 0f00 	cmp.w	sl, #0
 80143d0:	d129      	bne.n	8014426 <__ieee754_pow+0x1ee>
 80143d2:	b124      	cbz	r4, 80143de <__ieee754_pow+0x1a6>
 80143d4:	4b2f      	ldr	r3, [pc, #188]	; (8014494 <__ieee754_pow+0x25c>)
 80143d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80143da:	429a      	cmp	r2, r3
 80143dc:	d123      	bne.n	8014426 <__ieee754_pow+0x1ee>
 80143de:	f1b9 0f00 	cmp.w	r9, #0
 80143e2:	da05      	bge.n	80143f0 <__ieee754_pow+0x1b8>
 80143e4:	4602      	mov	r2, r0
 80143e6:	460b      	mov	r3, r1
 80143e8:	2000      	movs	r0, #0
 80143ea:	492a      	ldr	r1, [pc, #168]	; (8014494 <__ieee754_pow+0x25c>)
 80143ec:	f7ec fa48 	bl	8000880 <__aeabi_ddiv>
 80143f0:	2d00      	cmp	r5, #0
 80143f2:	f6bf af40 	bge.w	8014276 <__ieee754_pow+0x3e>
 80143f6:	9b04      	ldr	r3, [sp, #16]
 80143f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80143fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014400:	4323      	orrs	r3, r4
 8014402:	d108      	bne.n	8014416 <__ieee754_pow+0x1de>
 8014404:	4602      	mov	r2, r0
 8014406:	460b      	mov	r3, r1
 8014408:	4610      	mov	r0, r2
 801440a:	4619      	mov	r1, r3
 801440c:	f7eb ff56 	bl	80002bc <__aeabi_dsub>
 8014410:	4602      	mov	r2, r0
 8014412:	460b      	mov	r3, r1
 8014414:	e78f      	b.n	8014336 <__ieee754_pow+0xfe>
 8014416:	9b04      	ldr	r3, [sp, #16]
 8014418:	2b01      	cmp	r3, #1
 801441a:	f47f af2c 	bne.w	8014276 <__ieee754_pow+0x3e>
 801441e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014422:	4619      	mov	r1, r3
 8014424:	e727      	b.n	8014276 <__ieee754_pow+0x3e>
 8014426:	0feb      	lsrs	r3, r5, #31
 8014428:	3b01      	subs	r3, #1
 801442a:	9306      	str	r3, [sp, #24]
 801442c:	9a06      	ldr	r2, [sp, #24]
 801442e:	9b04      	ldr	r3, [sp, #16]
 8014430:	4313      	orrs	r3, r2
 8014432:	d102      	bne.n	801443a <__ieee754_pow+0x202>
 8014434:	4632      	mov	r2, r6
 8014436:	463b      	mov	r3, r7
 8014438:	e7e6      	b.n	8014408 <__ieee754_pow+0x1d0>
 801443a:	4b19      	ldr	r3, [pc, #100]	; (80144a0 <__ieee754_pow+0x268>)
 801443c:	4598      	cmp	r8, r3
 801443e:	f340 80fb 	ble.w	8014638 <__ieee754_pow+0x400>
 8014442:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014446:	4598      	cmp	r8, r3
 8014448:	4b13      	ldr	r3, [pc, #76]	; (8014498 <__ieee754_pow+0x260>)
 801444a:	dd0c      	ble.n	8014466 <__ieee754_pow+0x22e>
 801444c:	429c      	cmp	r4, r3
 801444e:	dc0f      	bgt.n	8014470 <__ieee754_pow+0x238>
 8014450:	f1b9 0f00 	cmp.w	r9, #0
 8014454:	da0f      	bge.n	8014476 <__ieee754_pow+0x23e>
 8014456:	2000      	movs	r0, #0
 8014458:	b009      	add	sp, #36	; 0x24
 801445a:	ecbd 8b06 	vpop	{d8-d10}
 801445e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014462:	f001 bde2 	b.w	801602a <__math_oflow>
 8014466:	429c      	cmp	r4, r3
 8014468:	dbf2      	blt.n	8014450 <__ieee754_pow+0x218>
 801446a:	4b0a      	ldr	r3, [pc, #40]	; (8014494 <__ieee754_pow+0x25c>)
 801446c:	429c      	cmp	r4, r3
 801446e:	dd19      	ble.n	80144a4 <__ieee754_pow+0x26c>
 8014470:	f1b9 0f00 	cmp.w	r9, #0
 8014474:	dcef      	bgt.n	8014456 <__ieee754_pow+0x21e>
 8014476:	2000      	movs	r0, #0
 8014478:	b009      	add	sp, #36	; 0x24
 801447a:	ecbd 8b06 	vpop	{d8-d10}
 801447e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014482:	f001 bdc9 	b.w	8016018 <__math_uflow>
 8014486:	bf00      	nop
 8014488:	fff00000 	.word	0xfff00000
 801448c:	7ff00000 	.word	0x7ff00000
 8014490:	433fffff 	.word	0x433fffff
 8014494:	3ff00000 	.word	0x3ff00000
 8014498:	3fefffff 	.word	0x3fefffff
 801449c:	3fe00000 	.word	0x3fe00000
 80144a0:	41e00000 	.word	0x41e00000
 80144a4:	4b60      	ldr	r3, [pc, #384]	; (8014628 <__ieee754_pow+0x3f0>)
 80144a6:	2200      	movs	r2, #0
 80144a8:	f7eb ff08 	bl	80002bc <__aeabi_dsub>
 80144ac:	a354      	add	r3, pc, #336	; (adr r3, 8014600 <__ieee754_pow+0x3c8>)
 80144ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b2:	4604      	mov	r4, r0
 80144b4:	460d      	mov	r5, r1
 80144b6:	f7ec f8b9 	bl	800062c <__aeabi_dmul>
 80144ba:	a353      	add	r3, pc, #332	; (adr r3, 8014608 <__ieee754_pow+0x3d0>)
 80144bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c0:	4606      	mov	r6, r0
 80144c2:	460f      	mov	r7, r1
 80144c4:	4620      	mov	r0, r4
 80144c6:	4629      	mov	r1, r5
 80144c8:	f7ec f8b0 	bl	800062c <__aeabi_dmul>
 80144cc:	4b57      	ldr	r3, [pc, #348]	; (801462c <__ieee754_pow+0x3f4>)
 80144ce:	4682      	mov	sl, r0
 80144d0:	468b      	mov	fp, r1
 80144d2:	2200      	movs	r2, #0
 80144d4:	4620      	mov	r0, r4
 80144d6:	4629      	mov	r1, r5
 80144d8:	f7ec f8a8 	bl	800062c <__aeabi_dmul>
 80144dc:	4602      	mov	r2, r0
 80144de:	460b      	mov	r3, r1
 80144e0:	a14b      	add	r1, pc, #300	; (adr r1, 8014610 <__ieee754_pow+0x3d8>)
 80144e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144e6:	f7eb fee9 	bl	80002bc <__aeabi_dsub>
 80144ea:	4622      	mov	r2, r4
 80144ec:	462b      	mov	r3, r5
 80144ee:	f7ec f89d 	bl	800062c <__aeabi_dmul>
 80144f2:	4602      	mov	r2, r0
 80144f4:	460b      	mov	r3, r1
 80144f6:	2000      	movs	r0, #0
 80144f8:	494d      	ldr	r1, [pc, #308]	; (8014630 <__ieee754_pow+0x3f8>)
 80144fa:	f7eb fedf 	bl	80002bc <__aeabi_dsub>
 80144fe:	4622      	mov	r2, r4
 8014500:	4680      	mov	r8, r0
 8014502:	4689      	mov	r9, r1
 8014504:	462b      	mov	r3, r5
 8014506:	4620      	mov	r0, r4
 8014508:	4629      	mov	r1, r5
 801450a:	f7ec f88f 	bl	800062c <__aeabi_dmul>
 801450e:	4602      	mov	r2, r0
 8014510:	460b      	mov	r3, r1
 8014512:	4640      	mov	r0, r8
 8014514:	4649      	mov	r1, r9
 8014516:	f7ec f889 	bl	800062c <__aeabi_dmul>
 801451a:	a33f      	add	r3, pc, #252	; (adr r3, 8014618 <__ieee754_pow+0x3e0>)
 801451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014520:	f7ec f884 	bl	800062c <__aeabi_dmul>
 8014524:	4602      	mov	r2, r0
 8014526:	460b      	mov	r3, r1
 8014528:	4650      	mov	r0, sl
 801452a:	4659      	mov	r1, fp
 801452c:	f7eb fec6 	bl	80002bc <__aeabi_dsub>
 8014530:	4602      	mov	r2, r0
 8014532:	460b      	mov	r3, r1
 8014534:	4680      	mov	r8, r0
 8014536:	4689      	mov	r9, r1
 8014538:	4630      	mov	r0, r6
 801453a:	4639      	mov	r1, r7
 801453c:	f7eb fec0 	bl	80002c0 <__adddf3>
 8014540:	2000      	movs	r0, #0
 8014542:	4632      	mov	r2, r6
 8014544:	463b      	mov	r3, r7
 8014546:	4604      	mov	r4, r0
 8014548:	460d      	mov	r5, r1
 801454a:	f7eb feb7 	bl	80002bc <__aeabi_dsub>
 801454e:	4602      	mov	r2, r0
 8014550:	460b      	mov	r3, r1
 8014552:	4640      	mov	r0, r8
 8014554:	4649      	mov	r1, r9
 8014556:	f7eb feb1 	bl	80002bc <__aeabi_dsub>
 801455a:	9b04      	ldr	r3, [sp, #16]
 801455c:	9a06      	ldr	r2, [sp, #24]
 801455e:	3b01      	subs	r3, #1
 8014560:	4313      	orrs	r3, r2
 8014562:	4682      	mov	sl, r0
 8014564:	468b      	mov	fp, r1
 8014566:	f040 81e7 	bne.w	8014938 <__ieee754_pow+0x700>
 801456a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8014620 <__ieee754_pow+0x3e8>
 801456e:	eeb0 8a47 	vmov.f32	s16, s14
 8014572:	eef0 8a67 	vmov.f32	s17, s15
 8014576:	e9dd 6700 	ldrd	r6, r7, [sp]
 801457a:	2600      	movs	r6, #0
 801457c:	4632      	mov	r2, r6
 801457e:	463b      	mov	r3, r7
 8014580:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014584:	f7eb fe9a 	bl	80002bc <__aeabi_dsub>
 8014588:	4622      	mov	r2, r4
 801458a:	462b      	mov	r3, r5
 801458c:	f7ec f84e 	bl	800062c <__aeabi_dmul>
 8014590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014594:	4680      	mov	r8, r0
 8014596:	4689      	mov	r9, r1
 8014598:	4650      	mov	r0, sl
 801459a:	4659      	mov	r1, fp
 801459c:	f7ec f846 	bl	800062c <__aeabi_dmul>
 80145a0:	4602      	mov	r2, r0
 80145a2:	460b      	mov	r3, r1
 80145a4:	4640      	mov	r0, r8
 80145a6:	4649      	mov	r1, r9
 80145a8:	f7eb fe8a 	bl	80002c0 <__adddf3>
 80145ac:	4632      	mov	r2, r6
 80145ae:	463b      	mov	r3, r7
 80145b0:	4680      	mov	r8, r0
 80145b2:	4689      	mov	r9, r1
 80145b4:	4620      	mov	r0, r4
 80145b6:	4629      	mov	r1, r5
 80145b8:	f7ec f838 	bl	800062c <__aeabi_dmul>
 80145bc:	460b      	mov	r3, r1
 80145be:	4604      	mov	r4, r0
 80145c0:	460d      	mov	r5, r1
 80145c2:	4602      	mov	r2, r0
 80145c4:	4649      	mov	r1, r9
 80145c6:	4640      	mov	r0, r8
 80145c8:	f7eb fe7a 	bl	80002c0 <__adddf3>
 80145cc:	4b19      	ldr	r3, [pc, #100]	; (8014634 <__ieee754_pow+0x3fc>)
 80145ce:	4299      	cmp	r1, r3
 80145d0:	ec45 4b19 	vmov	d9, r4, r5
 80145d4:	4606      	mov	r6, r0
 80145d6:	460f      	mov	r7, r1
 80145d8:	468b      	mov	fp, r1
 80145da:	f340 82f1 	ble.w	8014bc0 <__ieee754_pow+0x988>
 80145de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80145e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80145e6:	4303      	orrs	r3, r0
 80145e8:	f000 81e4 	beq.w	80149b4 <__ieee754_pow+0x77c>
 80145ec:	ec51 0b18 	vmov	r0, r1, d8
 80145f0:	2200      	movs	r2, #0
 80145f2:	2300      	movs	r3, #0
 80145f4:	f7ec fa8c 	bl	8000b10 <__aeabi_dcmplt>
 80145f8:	3800      	subs	r0, #0
 80145fa:	bf18      	it	ne
 80145fc:	2001      	movne	r0, #1
 80145fe:	e72b      	b.n	8014458 <__ieee754_pow+0x220>
 8014600:	60000000 	.word	0x60000000
 8014604:	3ff71547 	.word	0x3ff71547
 8014608:	f85ddf44 	.word	0xf85ddf44
 801460c:	3e54ae0b 	.word	0x3e54ae0b
 8014610:	55555555 	.word	0x55555555
 8014614:	3fd55555 	.word	0x3fd55555
 8014618:	652b82fe 	.word	0x652b82fe
 801461c:	3ff71547 	.word	0x3ff71547
 8014620:	00000000 	.word	0x00000000
 8014624:	bff00000 	.word	0xbff00000
 8014628:	3ff00000 	.word	0x3ff00000
 801462c:	3fd00000 	.word	0x3fd00000
 8014630:	3fe00000 	.word	0x3fe00000
 8014634:	408fffff 	.word	0x408fffff
 8014638:	4bd5      	ldr	r3, [pc, #852]	; (8014990 <__ieee754_pow+0x758>)
 801463a:	402b      	ands	r3, r5
 801463c:	2200      	movs	r2, #0
 801463e:	b92b      	cbnz	r3, 801464c <__ieee754_pow+0x414>
 8014640:	4bd4      	ldr	r3, [pc, #848]	; (8014994 <__ieee754_pow+0x75c>)
 8014642:	f7eb fff3 	bl	800062c <__aeabi_dmul>
 8014646:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801464a:	460c      	mov	r4, r1
 801464c:	1523      	asrs	r3, r4, #20
 801464e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014652:	4413      	add	r3, r2
 8014654:	9305      	str	r3, [sp, #20]
 8014656:	4bd0      	ldr	r3, [pc, #832]	; (8014998 <__ieee754_pow+0x760>)
 8014658:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801465c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014660:	429c      	cmp	r4, r3
 8014662:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014666:	dd08      	ble.n	801467a <__ieee754_pow+0x442>
 8014668:	4bcc      	ldr	r3, [pc, #816]	; (801499c <__ieee754_pow+0x764>)
 801466a:	429c      	cmp	r4, r3
 801466c:	f340 8162 	ble.w	8014934 <__ieee754_pow+0x6fc>
 8014670:	9b05      	ldr	r3, [sp, #20]
 8014672:	3301      	adds	r3, #1
 8014674:	9305      	str	r3, [sp, #20]
 8014676:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801467a:	2400      	movs	r4, #0
 801467c:	00e3      	lsls	r3, r4, #3
 801467e:	9307      	str	r3, [sp, #28]
 8014680:	4bc7      	ldr	r3, [pc, #796]	; (80149a0 <__ieee754_pow+0x768>)
 8014682:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014686:	ed93 7b00 	vldr	d7, [r3]
 801468a:	4629      	mov	r1, r5
 801468c:	ec53 2b17 	vmov	r2, r3, d7
 8014690:	eeb0 9a47 	vmov.f32	s18, s14
 8014694:	eef0 9a67 	vmov.f32	s19, s15
 8014698:	4682      	mov	sl, r0
 801469a:	f7eb fe0f 	bl	80002bc <__aeabi_dsub>
 801469e:	4652      	mov	r2, sl
 80146a0:	4606      	mov	r6, r0
 80146a2:	460f      	mov	r7, r1
 80146a4:	462b      	mov	r3, r5
 80146a6:	ec51 0b19 	vmov	r0, r1, d9
 80146aa:	f7eb fe09 	bl	80002c0 <__adddf3>
 80146ae:	4602      	mov	r2, r0
 80146b0:	460b      	mov	r3, r1
 80146b2:	2000      	movs	r0, #0
 80146b4:	49bb      	ldr	r1, [pc, #748]	; (80149a4 <__ieee754_pow+0x76c>)
 80146b6:	f7ec f8e3 	bl	8000880 <__aeabi_ddiv>
 80146ba:	ec41 0b1a 	vmov	d10, r0, r1
 80146be:	4602      	mov	r2, r0
 80146c0:	460b      	mov	r3, r1
 80146c2:	4630      	mov	r0, r6
 80146c4:	4639      	mov	r1, r7
 80146c6:	f7eb ffb1 	bl	800062c <__aeabi_dmul>
 80146ca:	2300      	movs	r3, #0
 80146cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80146d0:	9302      	str	r3, [sp, #8]
 80146d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80146d6:	46ab      	mov	fp, r5
 80146d8:	106d      	asrs	r5, r5, #1
 80146da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80146de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80146e2:	ec41 0b18 	vmov	d8, r0, r1
 80146e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80146ea:	2200      	movs	r2, #0
 80146ec:	4640      	mov	r0, r8
 80146ee:	4649      	mov	r1, r9
 80146f0:	4614      	mov	r4, r2
 80146f2:	461d      	mov	r5, r3
 80146f4:	f7eb ff9a 	bl	800062c <__aeabi_dmul>
 80146f8:	4602      	mov	r2, r0
 80146fa:	460b      	mov	r3, r1
 80146fc:	4630      	mov	r0, r6
 80146fe:	4639      	mov	r1, r7
 8014700:	f7eb fddc 	bl	80002bc <__aeabi_dsub>
 8014704:	ec53 2b19 	vmov	r2, r3, d9
 8014708:	4606      	mov	r6, r0
 801470a:	460f      	mov	r7, r1
 801470c:	4620      	mov	r0, r4
 801470e:	4629      	mov	r1, r5
 8014710:	f7eb fdd4 	bl	80002bc <__aeabi_dsub>
 8014714:	4602      	mov	r2, r0
 8014716:	460b      	mov	r3, r1
 8014718:	4650      	mov	r0, sl
 801471a:	4659      	mov	r1, fp
 801471c:	f7eb fdce 	bl	80002bc <__aeabi_dsub>
 8014720:	4642      	mov	r2, r8
 8014722:	464b      	mov	r3, r9
 8014724:	f7eb ff82 	bl	800062c <__aeabi_dmul>
 8014728:	4602      	mov	r2, r0
 801472a:	460b      	mov	r3, r1
 801472c:	4630      	mov	r0, r6
 801472e:	4639      	mov	r1, r7
 8014730:	f7eb fdc4 	bl	80002bc <__aeabi_dsub>
 8014734:	ec53 2b1a 	vmov	r2, r3, d10
 8014738:	f7eb ff78 	bl	800062c <__aeabi_dmul>
 801473c:	ec53 2b18 	vmov	r2, r3, d8
 8014740:	ec41 0b19 	vmov	d9, r0, r1
 8014744:	ec51 0b18 	vmov	r0, r1, d8
 8014748:	f7eb ff70 	bl	800062c <__aeabi_dmul>
 801474c:	a37c      	add	r3, pc, #496	; (adr r3, 8014940 <__ieee754_pow+0x708>)
 801474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014752:	4604      	mov	r4, r0
 8014754:	460d      	mov	r5, r1
 8014756:	f7eb ff69 	bl	800062c <__aeabi_dmul>
 801475a:	a37b      	add	r3, pc, #492	; (adr r3, 8014948 <__ieee754_pow+0x710>)
 801475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014760:	f7eb fdae 	bl	80002c0 <__adddf3>
 8014764:	4622      	mov	r2, r4
 8014766:	462b      	mov	r3, r5
 8014768:	f7eb ff60 	bl	800062c <__aeabi_dmul>
 801476c:	a378      	add	r3, pc, #480	; (adr r3, 8014950 <__ieee754_pow+0x718>)
 801476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014772:	f7eb fda5 	bl	80002c0 <__adddf3>
 8014776:	4622      	mov	r2, r4
 8014778:	462b      	mov	r3, r5
 801477a:	f7eb ff57 	bl	800062c <__aeabi_dmul>
 801477e:	a376      	add	r3, pc, #472	; (adr r3, 8014958 <__ieee754_pow+0x720>)
 8014780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014784:	f7eb fd9c 	bl	80002c0 <__adddf3>
 8014788:	4622      	mov	r2, r4
 801478a:	462b      	mov	r3, r5
 801478c:	f7eb ff4e 	bl	800062c <__aeabi_dmul>
 8014790:	a373      	add	r3, pc, #460	; (adr r3, 8014960 <__ieee754_pow+0x728>)
 8014792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014796:	f7eb fd93 	bl	80002c0 <__adddf3>
 801479a:	4622      	mov	r2, r4
 801479c:	462b      	mov	r3, r5
 801479e:	f7eb ff45 	bl	800062c <__aeabi_dmul>
 80147a2:	a371      	add	r3, pc, #452	; (adr r3, 8014968 <__ieee754_pow+0x730>)
 80147a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147a8:	f7eb fd8a 	bl	80002c0 <__adddf3>
 80147ac:	4622      	mov	r2, r4
 80147ae:	4606      	mov	r6, r0
 80147b0:	460f      	mov	r7, r1
 80147b2:	462b      	mov	r3, r5
 80147b4:	4620      	mov	r0, r4
 80147b6:	4629      	mov	r1, r5
 80147b8:	f7eb ff38 	bl	800062c <__aeabi_dmul>
 80147bc:	4602      	mov	r2, r0
 80147be:	460b      	mov	r3, r1
 80147c0:	4630      	mov	r0, r6
 80147c2:	4639      	mov	r1, r7
 80147c4:	f7eb ff32 	bl	800062c <__aeabi_dmul>
 80147c8:	4642      	mov	r2, r8
 80147ca:	4604      	mov	r4, r0
 80147cc:	460d      	mov	r5, r1
 80147ce:	464b      	mov	r3, r9
 80147d0:	ec51 0b18 	vmov	r0, r1, d8
 80147d4:	f7eb fd74 	bl	80002c0 <__adddf3>
 80147d8:	ec53 2b19 	vmov	r2, r3, d9
 80147dc:	f7eb ff26 	bl	800062c <__aeabi_dmul>
 80147e0:	4622      	mov	r2, r4
 80147e2:	462b      	mov	r3, r5
 80147e4:	f7eb fd6c 	bl	80002c0 <__adddf3>
 80147e8:	4642      	mov	r2, r8
 80147ea:	4682      	mov	sl, r0
 80147ec:	468b      	mov	fp, r1
 80147ee:	464b      	mov	r3, r9
 80147f0:	4640      	mov	r0, r8
 80147f2:	4649      	mov	r1, r9
 80147f4:	f7eb ff1a 	bl	800062c <__aeabi_dmul>
 80147f8:	4b6b      	ldr	r3, [pc, #428]	; (80149a8 <__ieee754_pow+0x770>)
 80147fa:	2200      	movs	r2, #0
 80147fc:	4606      	mov	r6, r0
 80147fe:	460f      	mov	r7, r1
 8014800:	f7eb fd5e 	bl	80002c0 <__adddf3>
 8014804:	4652      	mov	r2, sl
 8014806:	465b      	mov	r3, fp
 8014808:	f7eb fd5a 	bl	80002c0 <__adddf3>
 801480c:	2000      	movs	r0, #0
 801480e:	4604      	mov	r4, r0
 8014810:	460d      	mov	r5, r1
 8014812:	4602      	mov	r2, r0
 8014814:	460b      	mov	r3, r1
 8014816:	4640      	mov	r0, r8
 8014818:	4649      	mov	r1, r9
 801481a:	f7eb ff07 	bl	800062c <__aeabi_dmul>
 801481e:	4b62      	ldr	r3, [pc, #392]	; (80149a8 <__ieee754_pow+0x770>)
 8014820:	4680      	mov	r8, r0
 8014822:	4689      	mov	r9, r1
 8014824:	2200      	movs	r2, #0
 8014826:	4620      	mov	r0, r4
 8014828:	4629      	mov	r1, r5
 801482a:	f7eb fd47 	bl	80002bc <__aeabi_dsub>
 801482e:	4632      	mov	r2, r6
 8014830:	463b      	mov	r3, r7
 8014832:	f7eb fd43 	bl	80002bc <__aeabi_dsub>
 8014836:	4602      	mov	r2, r0
 8014838:	460b      	mov	r3, r1
 801483a:	4650      	mov	r0, sl
 801483c:	4659      	mov	r1, fp
 801483e:	f7eb fd3d 	bl	80002bc <__aeabi_dsub>
 8014842:	ec53 2b18 	vmov	r2, r3, d8
 8014846:	f7eb fef1 	bl	800062c <__aeabi_dmul>
 801484a:	4622      	mov	r2, r4
 801484c:	4606      	mov	r6, r0
 801484e:	460f      	mov	r7, r1
 8014850:	462b      	mov	r3, r5
 8014852:	ec51 0b19 	vmov	r0, r1, d9
 8014856:	f7eb fee9 	bl	800062c <__aeabi_dmul>
 801485a:	4602      	mov	r2, r0
 801485c:	460b      	mov	r3, r1
 801485e:	4630      	mov	r0, r6
 8014860:	4639      	mov	r1, r7
 8014862:	f7eb fd2d 	bl	80002c0 <__adddf3>
 8014866:	4606      	mov	r6, r0
 8014868:	460f      	mov	r7, r1
 801486a:	4602      	mov	r2, r0
 801486c:	460b      	mov	r3, r1
 801486e:	4640      	mov	r0, r8
 8014870:	4649      	mov	r1, r9
 8014872:	f7eb fd25 	bl	80002c0 <__adddf3>
 8014876:	a33e      	add	r3, pc, #248	; (adr r3, 8014970 <__ieee754_pow+0x738>)
 8014878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487c:	2000      	movs	r0, #0
 801487e:	4604      	mov	r4, r0
 8014880:	460d      	mov	r5, r1
 8014882:	f7eb fed3 	bl	800062c <__aeabi_dmul>
 8014886:	4642      	mov	r2, r8
 8014888:	ec41 0b18 	vmov	d8, r0, r1
 801488c:	464b      	mov	r3, r9
 801488e:	4620      	mov	r0, r4
 8014890:	4629      	mov	r1, r5
 8014892:	f7eb fd13 	bl	80002bc <__aeabi_dsub>
 8014896:	4602      	mov	r2, r0
 8014898:	460b      	mov	r3, r1
 801489a:	4630      	mov	r0, r6
 801489c:	4639      	mov	r1, r7
 801489e:	f7eb fd0d 	bl	80002bc <__aeabi_dsub>
 80148a2:	a335      	add	r3, pc, #212	; (adr r3, 8014978 <__ieee754_pow+0x740>)
 80148a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148a8:	f7eb fec0 	bl	800062c <__aeabi_dmul>
 80148ac:	a334      	add	r3, pc, #208	; (adr r3, 8014980 <__ieee754_pow+0x748>)
 80148ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b2:	4606      	mov	r6, r0
 80148b4:	460f      	mov	r7, r1
 80148b6:	4620      	mov	r0, r4
 80148b8:	4629      	mov	r1, r5
 80148ba:	f7eb feb7 	bl	800062c <__aeabi_dmul>
 80148be:	4602      	mov	r2, r0
 80148c0:	460b      	mov	r3, r1
 80148c2:	4630      	mov	r0, r6
 80148c4:	4639      	mov	r1, r7
 80148c6:	f7eb fcfb 	bl	80002c0 <__adddf3>
 80148ca:	9a07      	ldr	r2, [sp, #28]
 80148cc:	4b37      	ldr	r3, [pc, #220]	; (80149ac <__ieee754_pow+0x774>)
 80148ce:	4413      	add	r3, r2
 80148d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d4:	f7eb fcf4 	bl	80002c0 <__adddf3>
 80148d8:	4682      	mov	sl, r0
 80148da:	9805      	ldr	r0, [sp, #20]
 80148dc:	468b      	mov	fp, r1
 80148de:	f7eb fe3b 	bl	8000558 <__aeabi_i2d>
 80148e2:	9a07      	ldr	r2, [sp, #28]
 80148e4:	4b32      	ldr	r3, [pc, #200]	; (80149b0 <__ieee754_pow+0x778>)
 80148e6:	4413      	add	r3, r2
 80148e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80148ec:	4606      	mov	r6, r0
 80148ee:	460f      	mov	r7, r1
 80148f0:	4652      	mov	r2, sl
 80148f2:	465b      	mov	r3, fp
 80148f4:	ec51 0b18 	vmov	r0, r1, d8
 80148f8:	f7eb fce2 	bl	80002c0 <__adddf3>
 80148fc:	4642      	mov	r2, r8
 80148fe:	464b      	mov	r3, r9
 8014900:	f7eb fcde 	bl	80002c0 <__adddf3>
 8014904:	4632      	mov	r2, r6
 8014906:	463b      	mov	r3, r7
 8014908:	f7eb fcda 	bl	80002c0 <__adddf3>
 801490c:	2000      	movs	r0, #0
 801490e:	4632      	mov	r2, r6
 8014910:	463b      	mov	r3, r7
 8014912:	4604      	mov	r4, r0
 8014914:	460d      	mov	r5, r1
 8014916:	f7eb fcd1 	bl	80002bc <__aeabi_dsub>
 801491a:	4642      	mov	r2, r8
 801491c:	464b      	mov	r3, r9
 801491e:	f7eb fccd 	bl	80002bc <__aeabi_dsub>
 8014922:	ec53 2b18 	vmov	r2, r3, d8
 8014926:	f7eb fcc9 	bl	80002bc <__aeabi_dsub>
 801492a:	4602      	mov	r2, r0
 801492c:	460b      	mov	r3, r1
 801492e:	4650      	mov	r0, sl
 8014930:	4659      	mov	r1, fp
 8014932:	e610      	b.n	8014556 <__ieee754_pow+0x31e>
 8014934:	2401      	movs	r4, #1
 8014936:	e6a1      	b.n	801467c <__ieee754_pow+0x444>
 8014938:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014988 <__ieee754_pow+0x750>
 801493c:	e617      	b.n	801456e <__ieee754_pow+0x336>
 801493e:	bf00      	nop
 8014940:	4a454eef 	.word	0x4a454eef
 8014944:	3fca7e28 	.word	0x3fca7e28
 8014948:	93c9db65 	.word	0x93c9db65
 801494c:	3fcd864a 	.word	0x3fcd864a
 8014950:	a91d4101 	.word	0xa91d4101
 8014954:	3fd17460 	.word	0x3fd17460
 8014958:	518f264d 	.word	0x518f264d
 801495c:	3fd55555 	.word	0x3fd55555
 8014960:	db6fabff 	.word	0xdb6fabff
 8014964:	3fdb6db6 	.word	0x3fdb6db6
 8014968:	33333303 	.word	0x33333303
 801496c:	3fe33333 	.word	0x3fe33333
 8014970:	e0000000 	.word	0xe0000000
 8014974:	3feec709 	.word	0x3feec709
 8014978:	dc3a03fd 	.word	0xdc3a03fd
 801497c:	3feec709 	.word	0x3feec709
 8014980:	145b01f5 	.word	0x145b01f5
 8014984:	be3e2fe0 	.word	0xbe3e2fe0
 8014988:	00000000 	.word	0x00000000
 801498c:	3ff00000 	.word	0x3ff00000
 8014990:	7ff00000 	.word	0x7ff00000
 8014994:	43400000 	.word	0x43400000
 8014998:	0003988e 	.word	0x0003988e
 801499c:	000bb679 	.word	0x000bb679
 80149a0:	0803e440 	.word	0x0803e440
 80149a4:	3ff00000 	.word	0x3ff00000
 80149a8:	40080000 	.word	0x40080000
 80149ac:	0803e460 	.word	0x0803e460
 80149b0:	0803e450 	.word	0x0803e450
 80149b4:	a3b5      	add	r3, pc, #724	; (adr r3, 8014c8c <__ieee754_pow+0xa54>)
 80149b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ba:	4640      	mov	r0, r8
 80149bc:	4649      	mov	r1, r9
 80149be:	f7eb fc7f 	bl	80002c0 <__adddf3>
 80149c2:	4622      	mov	r2, r4
 80149c4:	ec41 0b1a 	vmov	d10, r0, r1
 80149c8:	462b      	mov	r3, r5
 80149ca:	4630      	mov	r0, r6
 80149cc:	4639      	mov	r1, r7
 80149ce:	f7eb fc75 	bl	80002bc <__aeabi_dsub>
 80149d2:	4602      	mov	r2, r0
 80149d4:	460b      	mov	r3, r1
 80149d6:	ec51 0b1a 	vmov	r0, r1, d10
 80149da:	f7ec f8b7 	bl	8000b4c <__aeabi_dcmpgt>
 80149de:	2800      	cmp	r0, #0
 80149e0:	f47f ae04 	bne.w	80145ec <__ieee754_pow+0x3b4>
 80149e4:	4aa4      	ldr	r2, [pc, #656]	; (8014c78 <__ieee754_pow+0xa40>)
 80149e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80149ea:	4293      	cmp	r3, r2
 80149ec:	f340 8108 	ble.w	8014c00 <__ieee754_pow+0x9c8>
 80149f0:	151b      	asrs	r3, r3, #20
 80149f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80149f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80149fa:	fa4a f303 	asr.w	r3, sl, r3
 80149fe:	445b      	add	r3, fp
 8014a00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014a04:	4e9d      	ldr	r6, [pc, #628]	; (8014c7c <__ieee754_pow+0xa44>)
 8014a06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014a0a:	4116      	asrs	r6, r2
 8014a0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014a10:	2000      	movs	r0, #0
 8014a12:	ea23 0106 	bic.w	r1, r3, r6
 8014a16:	f1c2 0214 	rsb	r2, r2, #20
 8014a1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014a1e:	fa4a fa02 	asr.w	sl, sl, r2
 8014a22:	f1bb 0f00 	cmp.w	fp, #0
 8014a26:	4602      	mov	r2, r0
 8014a28:	460b      	mov	r3, r1
 8014a2a:	4620      	mov	r0, r4
 8014a2c:	4629      	mov	r1, r5
 8014a2e:	bfb8      	it	lt
 8014a30:	f1ca 0a00 	rsblt	sl, sl, #0
 8014a34:	f7eb fc42 	bl	80002bc <__aeabi_dsub>
 8014a38:	ec41 0b19 	vmov	d9, r0, r1
 8014a3c:	4642      	mov	r2, r8
 8014a3e:	464b      	mov	r3, r9
 8014a40:	ec51 0b19 	vmov	r0, r1, d9
 8014a44:	f7eb fc3c 	bl	80002c0 <__adddf3>
 8014a48:	a37b      	add	r3, pc, #492	; (adr r3, 8014c38 <__ieee754_pow+0xa00>)
 8014a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4e:	2000      	movs	r0, #0
 8014a50:	4604      	mov	r4, r0
 8014a52:	460d      	mov	r5, r1
 8014a54:	f7eb fdea 	bl	800062c <__aeabi_dmul>
 8014a58:	ec53 2b19 	vmov	r2, r3, d9
 8014a5c:	4606      	mov	r6, r0
 8014a5e:	460f      	mov	r7, r1
 8014a60:	4620      	mov	r0, r4
 8014a62:	4629      	mov	r1, r5
 8014a64:	f7eb fc2a 	bl	80002bc <__aeabi_dsub>
 8014a68:	4602      	mov	r2, r0
 8014a6a:	460b      	mov	r3, r1
 8014a6c:	4640      	mov	r0, r8
 8014a6e:	4649      	mov	r1, r9
 8014a70:	f7eb fc24 	bl	80002bc <__aeabi_dsub>
 8014a74:	a372      	add	r3, pc, #456	; (adr r3, 8014c40 <__ieee754_pow+0xa08>)
 8014a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a7a:	f7eb fdd7 	bl	800062c <__aeabi_dmul>
 8014a7e:	a372      	add	r3, pc, #456	; (adr r3, 8014c48 <__ieee754_pow+0xa10>)
 8014a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a84:	4680      	mov	r8, r0
 8014a86:	4689      	mov	r9, r1
 8014a88:	4620      	mov	r0, r4
 8014a8a:	4629      	mov	r1, r5
 8014a8c:	f7eb fdce 	bl	800062c <__aeabi_dmul>
 8014a90:	4602      	mov	r2, r0
 8014a92:	460b      	mov	r3, r1
 8014a94:	4640      	mov	r0, r8
 8014a96:	4649      	mov	r1, r9
 8014a98:	f7eb fc12 	bl	80002c0 <__adddf3>
 8014a9c:	4604      	mov	r4, r0
 8014a9e:	460d      	mov	r5, r1
 8014aa0:	4602      	mov	r2, r0
 8014aa2:	460b      	mov	r3, r1
 8014aa4:	4630      	mov	r0, r6
 8014aa6:	4639      	mov	r1, r7
 8014aa8:	f7eb fc0a 	bl	80002c0 <__adddf3>
 8014aac:	4632      	mov	r2, r6
 8014aae:	463b      	mov	r3, r7
 8014ab0:	4680      	mov	r8, r0
 8014ab2:	4689      	mov	r9, r1
 8014ab4:	f7eb fc02 	bl	80002bc <__aeabi_dsub>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	460b      	mov	r3, r1
 8014abc:	4620      	mov	r0, r4
 8014abe:	4629      	mov	r1, r5
 8014ac0:	f7eb fbfc 	bl	80002bc <__aeabi_dsub>
 8014ac4:	4642      	mov	r2, r8
 8014ac6:	4606      	mov	r6, r0
 8014ac8:	460f      	mov	r7, r1
 8014aca:	464b      	mov	r3, r9
 8014acc:	4640      	mov	r0, r8
 8014ace:	4649      	mov	r1, r9
 8014ad0:	f7eb fdac 	bl	800062c <__aeabi_dmul>
 8014ad4:	a35e      	add	r3, pc, #376	; (adr r3, 8014c50 <__ieee754_pow+0xa18>)
 8014ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ada:	4604      	mov	r4, r0
 8014adc:	460d      	mov	r5, r1
 8014ade:	f7eb fda5 	bl	800062c <__aeabi_dmul>
 8014ae2:	a35d      	add	r3, pc, #372	; (adr r3, 8014c58 <__ieee754_pow+0xa20>)
 8014ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae8:	f7eb fbe8 	bl	80002bc <__aeabi_dsub>
 8014aec:	4622      	mov	r2, r4
 8014aee:	462b      	mov	r3, r5
 8014af0:	f7eb fd9c 	bl	800062c <__aeabi_dmul>
 8014af4:	a35a      	add	r3, pc, #360	; (adr r3, 8014c60 <__ieee754_pow+0xa28>)
 8014af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014afa:	f7eb fbe1 	bl	80002c0 <__adddf3>
 8014afe:	4622      	mov	r2, r4
 8014b00:	462b      	mov	r3, r5
 8014b02:	f7eb fd93 	bl	800062c <__aeabi_dmul>
 8014b06:	a358      	add	r3, pc, #352	; (adr r3, 8014c68 <__ieee754_pow+0xa30>)
 8014b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b0c:	f7eb fbd6 	bl	80002bc <__aeabi_dsub>
 8014b10:	4622      	mov	r2, r4
 8014b12:	462b      	mov	r3, r5
 8014b14:	f7eb fd8a 	bl	800062c <__aeabi_dmul>
 8014b18:	a355      	add	r3, pc, #340	; (adr r3, 8014c70 <__ieee754_pow+0xa38>)
 8014b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1e:	f7eb fbcf 	bl	80002c0 <__adddf3>
 8014b22:	4622      	mov	r2, r4
 8014b24:	462b      	mov	r3, r5
 8014b26:	f7eb fd81 	bl	800062c <__aeabi_dmul>
 8014b2a:	4602      	mov	r2, r0
 8014b2c:	460b      	mov	r3, r1
 8014b2e:	4640      	mov	r0, r8
 8014b30:	4649      	mov	r1, r9
 8014b32:	f7eb fbc3 	bl	80002bc <__aeabi_dsub>
 8014b36:	4604      	mov	r4, r0
 8014b38:	460d      	mov	r5, r1
 8014b3a:	4602      	mov	r2, r0
 8014b3c:	460b      	mov	r3, r1
 8014b3e:	4640      	mov	r0, r8
 8014b40:	4649      	mov	r1, r9
 8014b42:	f7eb fd73 	bl	800062c <__aeabi_dmul>
 8014b46:	2200      	movs	r2, #0
 8014b48:	ec41 0b19 	vmov	d9, r0, r1
 8014b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b50:	4620      	mov	r0, r4
 8014b52:	4629      	mov	r1, r5
 8014b54:	f7eb fbb2 	bl	80002bc <__aeabi_dsub>
 8014b58:	4602      	mov	r2, r0
 8014b5a:	460b      	mov	r3, r1
 8014b5c:	ec51 0b19 	vmov	r0, r1, d9
 8014b60:	f7eb fe8e 	bl	8000880 <__aeabi_ddiv>
 8014b64:	4632      	mov	r2, r6
 8014b66:	4604      	mov	r4, r0
 8014b68:	460d      	mov	r5, r1
 8014b6a:	463b      	mov	r3, r7
 8014b6c:	4640      	mov	r0, r8
 8014b6e:	4649      	mov	r1, r9
 8014b70:	f7eb fd5c 	bl	800062c <__aeabi_dmul>
 8014b74:	4632      	mov	r2, r6
 8014b76:	463b      	mov	r3, r7
 8014b78:	f7eb fba2 	bl	80002c0 <__adddf3>
 8014b7c:	4602      	mov	r2, r0
 8014b7e:	460b      	mov	r3, r1
 8014b80:	4620      	mov	r0, r4
 8014b82:	4629      	mov	r1, r5
 8014b84:	f7eb fb9a 	bl	80002bc <__aeabi_dsub>
 8014b88:	4642      	mov	r2, r8
 8014b8a:	464b      	mov	r3, r9
 8014b8c:	f7eb fb96 	bl	80002bc <__aeabi_dsub>
 8014b90:	460b      	mov	r3, r1
 8014b92:	4602      	mov	r2, r0
 8014b94:	493a      	ldr	r1, [pc, #232]	; (8014c80 <__ieee754_pow+0xa48>)
 8014b96:	2000      	movs	r0, #0
 8014b98:	f7eb fb90 	bl	80002bc <__aeabi_dsub>
 8014b9c:	ec41 0b10 	vmov	d0, r0, r1
 8014ba0:	ee10 3a90 	vmov	r3, s1
 8014ba4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014bac:	da2b      	bge.n	8014c06 <__ieee754_pow+0x9ce>
 8014bae:	4650      	mov	r0, sl
 8014bb0:	f001 fada 	bl	8016168 <scalbn>
 8014bb4:	ec51 0b10 	vmov	r0, r1, d0
 8014bb8:	ec53 2b18 	vmov	r2, r3, d8
 8014bbc:	f7ff bbed 	b.w	801439a <__ieee754_pow+0x162>
 8014bc0:	4b30      	ldr	r3, [pc, #192]	; (8014c84 <__ieee754_pow+0xa4c>)
 8014bc2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014bc6:	429e      	cmp	r6, r3
 8014bc8:	f77f af0c 	ble.w	80149e4 <__ieee754_pow+0x7ac>
 8014bcc:	4b2e      	ldr	r3, [pc, #184]	; (8014c88 <__ieee754_pow+0xa50>)
 8014bce:	440b      	add	r3, r1
 8014bd0:	4303      	orrs	r3, r0
 8014bd2:	d009      	beq.n	8014be8 <__ieee754_pow+0x9b0>
 8014bd4:	ec51 0b18 	vmov	r0, r1, d8
 8014bd8:	2200      	movs	r2, #0
 8014bda:	2300      	movs	r3, #0
 8014bdc:	f7eb ff98 	bl	8000b10 <__aeabi_dcmplt>
 8014be0:	3800      	subs	r0, #0
 8014be2:	bf18      	it	ne
 8014be4:	2001      	movne	r0, #1
 8014be6:	e447      	b.n	8014478 <__ieee754_pow+0x240>
 8014be8:	4622      	mov	r2, r4
 8014bea:	462b      	mov	r3, r5
 8014bec:	f7eb fb66 	bl	80002bc <__aeabi_dsub>
 8014bf0:	4642      	mov	r2, r8
 8014bf2:	464b      	mov	r3, r9
 8014bf4:	f7eb ffa0 	bl	8000b38 <__aeabi_dcmpge>
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	f43f aef3 	beq.w	80149e4 <__ieee754_pow+0x7ac>
 8014bfe:	e7e9      	b.n	8014bd4 <__ieee754_pow+0x99c>
 8014c00:	f04f 0a00 	mov.w	sl, #0
 8014c04:	e71a      	b.n	8014a3c <__ieee754_pow+0x804>
 8014c06:	ec51 0b10 	vmov	r0, r1, d0
 8014c0a:	4619      	mov	r1, r3
 8014c0c:	e7d4      	b.n	8014bb8 <__ieee754_pow+0x980>
 8014c0e:	491c      	ldr	r1, [pc, #112]	; (8014c80 <__ieee754_pow+0xa48>)
 8014c10:	2000      	movs	r0, #0
 8014c12:	f7ff bb30 	b.w	8014276 <__ieee754_pow+0x3e>
 8014c16:	2000      	movs	r0, #0
 8014c18:	2100      	movs	r1, #0
 8014c1a:	f7ff bb2c 	b.w	8014276 <__ieee754_pow+0x3e>
 8014c1e:	4630      	mov	r0, r6
 8014c20:	4639      	mov	r1, r7
 8014c22:	f7ff bb28 	b.w	8014276 <__ieee754_pow+0x3e>
 8014c26:	9204      	str	r2, [sp, #16]
 8014c28:	f7ff bb7a 	b.w	8014320 <__ieee754_pow+0xe8>
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	f7ff bb64 	b.w	80142fa <__ieee754_pow+0xc2>
 8014c32:	bf00      	nop
 8014c34:	f3af 8000 	nop.w
 8014c38:	00000000 	.word	0x00000000
 8014c3c:	3fe62e43 	.word	0x3fe62e43
 8014c40:	fefa39ef 	.word	0xfefa39ef
 8014c44:	3fe62e42 	.word	0x3fe62e42
 8014c48:	0ca86c39 	.word	0x0ca86c39
 8014c4c:	be205c61 	.word	0xbe205c61
 8014c50:	72bea4d0 	.word	0x72bea4d0
 8014c54:	3e663769 	.word	0x3e663769
 8014c58:	c5d26bf1 	.word	0xc5d26bf1
 8014c5c:	3ebbbd41 	.word	0x3ebbbd41
 8014c60:	af25de2c 	.word	0xaf25de2c
 8014c64:	3f11566a 	.word	0x3f11566a
 8014c68:	16bebd93 	.word	0x16bebd93
 8014c6c:	3f66c16c 	.word	0x3f66c16c
 8014c70:	5555553e 	.word	0x5555553e
 8014c74:	3fc55555 	.word	0x3fc55555
 8014c78:	3fe00000 	.word	0x3fe00000
 8014c7c:	000fffff 	.word	0x000fffff
 8014c80:	3ff00000 	.word	0x3ff00000
 8014c84:	4090cbff 	.word	0x4090cbff
 8014c88:	3f6f3400 	.word	0x3f6f3400
 8014c8c:	652b82fe 	.word	0x652b82fe
 8014c90:	3c971547 	.word	0x3c971547
 8014c94:	00000000 	.word	0x00000000

08014c98 <__ieee754_rem_pio2>:
 8014c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c9c:	ed2d 8b02 	vpush	{d8}
 8014ca0:	ec55 4b10 	vmov	r4, r5, d0
 8014ca4:	4bca      	ldr	r3, [pc, #808]	; (8014fd0 <__ieee754_rem_pio2+0x338>)
 8014ca6:	b08b      	sub	sp, #44	; 0x2c
 8014ca8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8014cac:	4598      	cmp	r8, r3
 8014cae:	4682      	mov	sl, r0
 8014cb0:	9502      	str	r5, [sp, #8]
 8014cb2:	dc08      	bgt.n	8014cc6 <__ieee754_rem_pio2+0x2e>
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	ed80 0b00 	vstr	d0, [r0]
 8014cbc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014cc0:	f04f 0b00 	mov.w	fp, #0
 8014cc4:	e028      	b.n	8014d18 <__ieee754_rem_pio2+0x80>
 8014cc6:	4bc3      	ldr	r3, [pc, #780]	; (8014fd4 <__ieee754_rem_pio2+0x33c>)
 8014cc8:	4598      	cmp	r8, r3
 8014cca:	dc78      	bgt.n	8014dbe <__ieee754_rem_pio2+0x126>
 8014ccc:	9b02      	ldr	r3, [sp, #8]
 8014cce:	4ec2      	ldr	r6, [pc, #776]	; (8014fd8 <__ieee754_rem_pio2+0x340>)
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	ee10 0a10 	vmov	r0, s0
 8014cd6:	a3b0      	add	r3, pc, #704	; (adr r3, 8014f98 <__ieee754_rem_pio2+0x300>)
 8014cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cdc:	4629      	mov	r1, r5
 8014cde:	dd39      	ble.n	8014d54 <__ieee754_rem_pio2+0xbc>
 8014ce0:	f7eb faec 	bl	80002bc <__aeabi_dsub>
 8014ce4:	45b0      	cmp	r8, r6
 8014ce6:	4604      	mov	r4, r0
 8014ce8:	460d      	mov	r5, r1
 8014cea:	d01b      	beq.n	8014d24 <__ieee754_rem_pio2+0x8c>
 8014cec:	a3ac      	add	r3, pc, #688	; (adr r3, 8014fa0 <__ieee754_rem_pio2+0x308>)
 8014cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf2:	f7eb fae3 	bl	80002bc <__aeabi_dsub>
 8014cf6:	4602      	mov	r2, r0
 8014cf8:	460b      	mov	r3, r1
 8014cfa:	e9ca 2300 	strd	r2, r3, [sl]
 8014cfe:	4620      	mov	r0, r4
 8014d00:	4629      	mov	r1, r5
 8014d02:	f7eb fadb 	bl	80002bc <__aeabi_dsub>
 8014d06:	a3a6      	add	r3, pc, #664	; (adr r3, 8014fa0 <__ieee754_rem_pio2+0x308>)
 8014d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d0c:	f7eb fad6 	bl	80002bc <__aeabi_dsub>
 8014d10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014d14:	f04f 0b01 	mov.w	fp, #1
 8014d18:	4658      	mov	r0, fp
 8014d1a:	b00b      	add	sp, #44	; 0x2c
 8014d1c:	ecbd 8b02 	vpop	{d8}
 8014d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d24:	a3a0      	add	r3, pc, #640	; (adr r3, 8014fa8 <__ieee754_rem_pio2+0x310>)
 8014d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d2a:	f7eb fac7 	bl	80002bc <__aeabi_dsub>
 8014d2e:	a3a0      	add	r3, pc, #640	; (adr r3, 8014fb0 <__ieee754_rem_pio2+0x318>)
 8014d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d34:	4604      	mov	r4, r0
 8014d36:	460d      	mov	r5, r1
 8014d38:	f7eb fac0 	bl	80002bc <__aeabi_dsub>
 8014d3c:	4602      	mov	r2, r0
 8014d3e:	460b      	mov	r3, r1
 8014d40:	e9ca 2300 	strd	r2, r3, [sl]
 8014d44:	4620      	mov	r0, r4
 8014d46:	4629      	mov	r1, r5
 8014d48:	f7eb fab8 	bl	80002bc <__aeabi_dsub>
 8014d4c:	a398      	add	r3, pc, #608	; (adr r3, 8014fb0 <__ieee754_rem_pio2+0x318>)
 8014d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d52:	e7db      	b.n	8014d0c <__ieee754_rem_pio2+0x74>
 8014d54:	f7eb fab4 	bl	80002c0 <__adddf3>
 8014d58:	45b0      	cmp	r8, r6
 8014d5a:	4604      	mov	r4, r0
 8014d5c:	460d      	mov	r5, r1
 8014d5e:	d016      	beq.n	8014d8e <__ieee754_rem_pio2+0xf6>
 8014d60:	a38f      	add	r3, pc, #572	; (adr r3, 8014fa0 <__ieee754_rem_pio2+0x308>)
 8014d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d66:	f7eb faab 	bl	80002c0 <__adddf3>
 8014d6a:	4602      	mov	r2, r0
 8014d6c:	460b      	mov	r3, r1
 8014d6e:	e9ca 2300 	strd	r2, r3, [sl]
 8014d72:	4620      	mov	r0, r4
 8014d74:	4629      	mov	r1, r5
 8014d76:	f7eb faa1 	bl	80002bc <__aeabi_dsub>
 8014d7a:	a389      	add	r3, pc, #548	; (adr r3, 8014fa0 <__ieee754_rem_pio2+0x308>)
 8014d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d80:	f7eb fa9e 	bl	80002c0 <__adddf3>
 8014d84:	f04f 3bff 	mov.w	fp, #4294967295
 8014d88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014d8c:	e7c4      	b.n	8014d18 <__ieee754_rem_pio2+0x80>
 8014d8e:	a386      	add	r3, pc, #536	; (adr r3, 8014fa8 <__ieee754_rem_pio2+0x310>)
 8014d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d94:	f7eb fa94 	bl	80002c0 <__adddf3>
 8014d98:	a385      	add	r3, pc, #532	; (adr r3, 8014fb0 <__ieee754_rem_pio2+0x318>)
 8014d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9e:	4604      	mov	r4, r0
 8014da0:	460d      	mov	r5, r1
 8014da2:	f7eb fa8d 	bl	80002c0 <__adddf3>
 8014da6:	4602      	mov	r2, r0
 8014da8:	460b      	mov	r3, r1
 8014daa:	e9ca 2300 	strd	r2, r3, [sl]
 8014dae:	4620      	mov	r0, r4
 8014db0:	4629      	mov	r1, r5
 8014db2:	f7eb fa83 	bl	80002bc <__aeabi_dsub>
 8014db6:	a37e      	add	r3, pc, #504	; (adr r3, 8014fb0 <__ieee754_rem_pio2+0x318>)
 8014db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dbc:	e7e0      	b.n	8014d80 <__ieee754_rem_pio2+0xe8>
 8014dbe:	4b87      	ldr	r3, [pc, #540]	; (8014fdc <__ieee754_rem_pio2+0x344>)
 8014dc0:	4598      	cmp	r8, r3
 8014dc2:	f300 80d9 	bgt.w	8014f78 <__ieee754_rem_pio2+0x2e0>
 8014dc6:	f001 f939 	bl	801603c <fabs>
 8014dca:	ec55 4b10 	vmov	r4, r5, d0
 8014dce:	ee10 0a10 	vmov	r0, s0
 8014dd2:	a379      	add	r3, pc, #484	; (adr r3, 8014fb8 <__ieee754_rem_pio2+0x320>)
 8014dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd8:	4629      	mov	r1, r5
 8014dda:	f7eb fc27 	bl	800062c <__aeabi_dmul>
 8014dde:	4b80      	ldr	r3, [pc, #512]	; (8014fe0 <__ieee754_rem_pio2+0x348>)
 8014de0:	2200      	movs	r2, #0
 8014de2:	f7eb fa6d 	bl	80002c0 <__adddf3>
 8014de6:	f7eb fed1 	bl	8000b8c <__aeabi_d2iz>
 8014dea:	4683      	mov	fp, r0
 8014dec:	f7eb fbb4 	bl	8000558 <__aeabi_i2d>
 8014df0:	4602      	mov	r2, r0
 8014df2:	460b      	mov	r3, r1
 8014df4:	ec43 2b18 	vmov	d8, r2, r3
 8014df8:	a367      	add	r3, pc, #412	; (adr r3, 8014f98 <__ieee754_rem_pio2+0x300>)
 8014dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dfe:	f7eb fc15 	bl	800062c <__aeabi_dmul>
 8014e02:	4602      	mov	r2, r0
 8014e04:	460b      	mov	r3, r1
 8014e06:	4620      	mov	r0, r4
 8014e08:	4629      	mov	r1, r5
 8014e0a:	f7eb fa57 	bl	80002bc <__aeabi_dsub>
 8014e0e:	a364      	add	r3, pc, #400	; (adr r3, 8014fa0 <__ieee754_rem_pio2+0x308>)
 8014e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e14:	4606      	mov	r6, r0
 8014e16:	460f      	mov	r7, r1
 8014e18:	ec51 0b18 	vmov	r0, r1, d8
 8014e1c:	f7eb fc06 	bl	800062c <__aeabi_dmul>
 8014e20:	f1bb 0f1f 	cmp.w	fp, #31
 8014e24:	4604      	mov	r4, r0
 8014e26:	460d      	mov	r5, r1
 8014e28:	dc0d      	bgt.n	8014e46 <__ieee754_rem_pio2+0x1ae>
 8014e2a:	4b6e      	ldr	r3, [pc, #440]	; (8014fe4 <__ieee754_rem_pio2+0x34c>)
 8014e2c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8014e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e34:	4543      	cmp	r3, r8
 8014e36:	d006      	beq.n	8014e46 <__ieee754_rem_pio2+0x1ae>
 8014e38:	4622      	mov	r2, r4
 8014e3a:	462b      	mov	r3, r5
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	4639      	mov	r1, r7
 8014e40:	f7eb fa3c 	bl	80002bc <__aeabi_dsub>
 8014e44:	e00f      	b.n	8014e66 <__ieee754_rem_pio2+0x1ce>
 8014e46:	462b      	mov	r3, r5
 8014e48:	4622      	mov	r2, r4
 8014e4a:	4630      	mov	r0, r6
 8014e4c:	4639      	mov	r1, r7
 8014e4e:	f7eb fa35 	bl	80002bc <__aeabi_dsub>
 8014e52:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014e56:	9303      	str	r3, [sp, #12]
 8014e58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014e5c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8014e60:	f1b8 0f10 	cmp.w	r8, #16
 8014e64:	dc02      	bgt.n	8014e6c <__ieee754_rem_pio2+0x1d4>
 8014e66:	e9ca 0100 	strd	r0, r1, [sl]
 8014e6a:	e039      	b.n	8014ee0 <__ieee754_rem_pio2+0x248>
 8014e6c:	a34e      	add	r3, pc, #312	; (adr r3, 8014fa8 <__ieee754_rem_pio2+0x310>)
 8014e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e72:	ec51 0b18 	vmov	r0, r1, d8
 8014e76:	f7eb fbd9 	bl	800062c <__aeabi_dmul>
 8014e7a:	4604      	mov	r4, r0
 8014e7c:	460d      	mov	r5, r1
 8014e7e:	4602      	mov	r2, r0
 8014e80:	460b      	mov	r3, r1
 8014e82:	4630      	mov	r0, r6
 8014e84:	4639      	mov	r1, r7
 8014e86:	f7eb fa19 	bl	80002bc <__aeabi_dsub>
 8014e8a:	4602      	mov	r2, r0
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	4680      	mov	r8, r0
 8014e90:	4689      	mov	r9, r1
 8014e92:	4630      	mov	r0, r6
 8014e94:	4639      	mov	r1, r7
 8014e96:	f7eb fa11 	bl	80002bc <__aeabi_dsub>
 8014e9a:	4622      	mov	r2, r4
 8014e9c:	462b      	mov	r3, r5
 8014e9e:	f7eb fa0d 	bl	80002bc <__aeabi_dsub>
 8014ea2:	a343      	add	r3, pc, #268	; (adr r3, 8014fb0 <__ieee754_rem_pio2+0x318>)
 8014ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ea8:	4604      	mov	r4, r0
 8014eaa:	460d      	mov	r5, r1
 8014eac:	ec51 0b18 	vmov	r0, r1, d8
 8014eb0:	f7eb fbbc 	bl	800062c <__aeabi_dmul>
 8014eb4:	4622      	mov	r2, r4
 8014eb6:	462b      	mov	r3, r5
 8014eb8:	f7eb fa00 	bl	80002bc <__aeabi_dsub>
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	4604      	mov	r4, r0
 8014ec2:	460d      	mov	r5, r1
 8014ec4:	4640      	mov	r0, r8
 8014ec6:	4649      	mov	r1, r9
 8014ec8:	f7eb f9f8 	bl	80002bc <__aeabi_dsub>
 8014ecc:	9a03      	ldr	r2, [sp, #12]
 8014ece:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014ed2:	1ad3      	subs	r3, r2, r3
 8014ed4:	2b31      	cmp	r3, #49	; 0x31
 8014ed6:	dc24      	bgt.n	8014f22 <__ieee754_rem_pio2+0x28a>
 8014ed8:	e9ca 0100 	strd	r0, r1, [sl]
 8014edc:	4646      	mov	r6, r8
 8014ede:	464f      	mov	r7, r9
 8014ee0:	e9da 8900 	ldrd	r8, r9, [sl]
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	4642      	mov	r2, r8
 8014ee8:	464b      	mov	r3, r9
 8014eea:	4639      	mov	r1, r7
 8014eec:	f7eb f9e6 	bl	80002bc <__aeabi_dsub>
 8014ef0:	462b      	mov	r3, r5
 8014ef2:	4622      	mov	r2, r4
 8014ef4:	f7eb f9e2 	bl	80002bc <__aeabi_dsub>
 8014ef8:	9b02      	ldr	r3, [sp, #8]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014f00:	f6bf af0a 	bge.w	8014d18 <__ieee754_rem_pio2+0x80>
 8014f04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014f08:	f8ca 3004 	str.w	r3, [sl, #4]
 8014f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014f10:	f8ca 8000 	str.w	r8, [sl]
 8014f14:	f8ca 0008 	str.w	r0, [sl, #8]
 8014f18:	f8ca 300c 	str.w	r3, [sl, #12]
 8014f1c:	f1cb 0b00 	rsb	fp, fp, #0
 8014f20:	e6fa      	b.n	8014d18 <__ieee754_rem_pio2+0x80>
 8014f22:	a327      	add	r3, pc, #156	; (adr r3, 8014fc0 <__ieee754_rem_pio2+0x328>)
 8014f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f28:	ec51 0b18 	vmov	r0, r1, d8
 8014f2c:	f7eb fb7e 	bl	800062c <__aeabi_dmul>
 8014f30:	4604      	mov	r4, r0
 8014f32:	460d      	mov	r5, r1
 8014f34:	4602      	mov	r2, r0
 8014f36:	460b      	mov	r3, r1
 8014f38:	4640      	mov	r0, r8
 8014f3a:	4649      	mov	r1, r9
 8014f3c:	f7eb f9be 	bl	80002bc <__aeabi_dsub>
 8014f40:	4602      	mov	r2, r0
 8014f42:	460b      	mov	r3, r1
 8014f44:	4606      	mov	r6, r0
 8014f46:	460f      	mov	r7, r1
 8014f48:	4640      	mov	r0, r8
 8014f4a:	4649      	mov	r1, r9
 8014f4c:	f7eb f9b6 	bl	80002bc <__aeabi_dsub>
 8014f50:	4622      	mov	r2, r4
 8014f52:	462b      	mov	r3, r5
 8014f54:	f7eb f9b2 	bl	80002bc <__aeabi_dsub>
 8014f58:	a31b      	add	r3, pc, #108	; (adr r3, 8014fc8 <__ieee754_rem_pio2+0x330>)
 8014f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f5e:	4604      	mov	r4, r0
 8014f60:	460d      	mov	r5, r1
 8014f62:	ec51 0b18 	vmov	r0, r1, d8
 8014f66:	f7eb fb61 	bl	800062c <__aeabi_dmul>
 8014f6a:	4622      	mov	r2, r4
 8014f6c:	462b      	mov	r3, r5
 8014f6e:	f7eb f9a5 	bl	80002bc <__aeabi_dsub>
 8014f72:	4604      	mov	r4, r0
 8014f74:	460d      	mov	r5, r1
 8014f76:	e75f      	b.n	8014e38 <__ieee754_rem_pio2+0x1a0>
 8014f78:	4b1b      	ldr	r3, [pc, #108]	; (8014fe8 <__ieee754_rem_pio2+0x350>)
 8014f7a:	4598      	cmp	r8, r3
 8014f7c:	dd36      	ble.n	8014fec <__ieee754_rem_pio2+0x354>
 8014f7e:	ee10 2a10 	vmov	r2, s0
 8014f82:	462b      	mov	r3, r5
 8014f84:	4620      	mov	r0, r4
 8014f86:	4629      	mov	r1, r5
 8014f88:	f7eb f998 	bl	80002bc <__aeabi_dsub>
 8014f8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014f90:	e9ca 0100 	strd	r0, r1, [sl]
 8014f94:	e694      	b.n	8014cc0 <__ieee754_rem_pio2+0x28>
 8014f96:	bf00      	nop
 8014f98:	54400000 	.word	0x54400000
 8014f9c:	3ff921fb 	.word	0x3ff921fb
 8014fa0:	1a626331 	.word	0x1a626331
 8014fa4:	3dd0b461 	.word	0x3dd0b461
 8014fa8:	1a600000 	.word	0x1a600000
 8014fac:	3dd0b461 	.word	0x3dd0b461
 8014fb0:	2e037073 	.word	0x2e037073
 8014fb4:	3ba3198a 	.word	0x3ba3198a
 8014fb8:	6dc9c883 	.word	0x6dc9c883
 8014fbc:	3fe45f30 	.word	0x3fe45f30
 8014fc0:	2e000000 	.word	0x2e000000
 8014fc4:	3ba3198a 	.word	0x3ba3198a
 8014fc8:	252049c1 	.word	0x252049c1
 8014fcc:	397b839a 	.word	0x397b839a
 8014fd0:	3fe921fb 	.word	0x3fe921fb
 8014fd4:	4002d97b 	.word	0x4002d97b
 8014fd8:	3ff921fb 	.word	0x3ff921fb
 8014fdc:	413921fb 	.word	0x413921fb
 8014fe0:	3fe00000 	.word	0x3fe00000
 8014fe4:	0803e470 	.word	0x0803e470
 8014fe8:	7fefffff 	.word	0x7fefffff
 8014fec:	ea4f 5428 	mov.w	r4, r8, asr #20
 8014ff0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8014ff4:	ee10 0a10 	vmov	r0, s0
 8014ff8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8014ffc:	ee10 6a10 	vmov	r6, s0
 8015000:	460f      	mov	r7, r1
 8015002:	f7eb fdc3 	bl	8000b8c <__aeabi_d2iz>
 8015006:	f7eb faa7 	bl	8000558 <__aeabi_i2d>
 801500a:	4602      	mov	r2, r0
 801500c:	460b      	mov	r3, r1
 801500e:	4630      	mov	r0, r6
 8015010:	4639      	mov	r1, r7
 8015012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015016:	f7eb f951 	bl	80002bc <__aeabi_dsub>
 801501a:	4b23      	ldr	r3, [pc, #140]	; (80150a8 <__ieee754_rem_pio2+0x410>)
 801501c:	2200      	movs	r2, #0
 801501e:	f7eb fb05 	bl	800062c <__aeabi_dmul>
 8015022:	460f      	mov	r7, r1
 8015024:	4606      	mov	r6, r0
 8015026:	f7eb fdb1 	bl	8000b8c <__aeabi_d2iz>
 801502a:	f7eb fa95 	bl	8000558 <__aeabi_i2d>
 801502e:	4602      	mov	r2, r0
 8015030:	460b      	mov	r3, r1
 8015032:	4630      	mov	r0, r6
 8015034:	4639      	mov	r1, r7
 8015036:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801503a:	f7eb f93f 	bl	80002bc <__aeabi_dsub>
 801503e:	4b1a      	ldr	r3, [pc, #104]	; (80150a8 <__ieee754_rem_pio2+0x410>)
 8015040:	2200      	movs	r2, #0
 8015042:	f7eb faf3 	bl	800062c <__aeabi_dmul>
 8015046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801504a:	ad04      	add	r5, sp, #16
 801504c:	f04f 0803 	mov.w	r8, #3
 8015050:	46a9      	mov	r9, r5
 8015052:	2600      	movs	r6, #0
 8015054:	2700      	movs	r7, #0
 8015056:	4632      	mov	r2, r6
 8015058:	463b      	mov	r3, r7
 801505a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801505e:	46c3      	mov	fp, r8
 8015060:	3d08      	subs	r5, #8
 8015062:	f108 38ff 	add.w	r8, r8, #4294967295
 8015066:	f7eb fd49 	bl	8000afc <__aeabi_dcmpeq>
 801506a:	2800      	cmp	r0, #0
 801506c:	d1f3      	bne.n	8015056 <__ieee754_rem_pio2+0x3be>
 801506e:	4b0f      	ldr	r3, [pc, #60]	; (80150ac <__ieee754_rem_pio2+0x414>)
 8015070:	9301      	str	r3, [sp, #4]
 8015072:	2302      	movs	r3, #2
 8015074:	9300      	str	r3, [sp, #0]
 8015076:	4622      	mov	r2, r4
 8015078:	465b      	mov	r3, fp
 801507a:	4651      	mov	r1, sl
 801507c:	4648      	mov	r0, r9
 801507e:	f000 f993 	bl	80153a8 <__kernel_rem_pio2>
 8015082:	9b02      	ldr	r3, [sp, #8]
 8015084:	2b00      	cmp	r3, #0
 8015086:	4683      	mov	fp, r0
 8015088:	f6bf ae46 	bge.w	8014d18 <__ieee754_rem_pio2+0x80>
 801508c:	e9da 2100 	ldrd	r2, r1, [sl]
 8015090:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015094:	e9ca 2300 	strd	r2, r3, [sl]
 8015098:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801509c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80150a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80150a4:	e73a      	b.n	8014f1c <__ieee754_rem_pio2+0x284>
 80150a6:	bf00      	nop
 80150a8:	41700000 	.word	0x41700000
 80150ac:	0803e4f0 	.word	0x0803e4f0

080150b0 <__ieee754_sqrt>:
 80150b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150b4:	ec55 4b10 	vmov	r4, r5, d0
 80150b8:	4e55      	ldr	r6, [pc, #340]	; (8015210 <__ieee754_sqrt+0x160>)
 80150ba:	43ae      	bics	r6, r5
 80150bc:	ee10 0a10 	vmov	r0, s0
 80150c0:	ee10 3a10 	vmov	r3, s0
 80150c4:	462a      	mov	r2, r5
 80150c6:	4629      	mov	r1, r5
 80150c8:	d110      	bne.n	80150ec <__ieee754_sqrt+0x3c>
 80150ca:	ee10 2a10 	vmov	r2, s0
 80150ce:	462b      	mov	r3, r5
 80150d0:	f7eb faac 	bl	800062c <__aeabi_dmul>
 80150d4:	4602      	mov	r2, r0
 80150d6:	460b      	mov	r3, r1
 80150d8:	4620      	mov	r0, r4
 80150da:	4629      	mov	r1, r5
 80150dc:	f7eb f8f0 	bl	80002c0 <__adddf3>
 80150e0:	4604      	mov	r4, r0
 80150e2:	460d      	mov	r5, r1
 80150e4:	ec45 4b10 	vmov	d0, r4, r5
 80150e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150ec:	2d00      	cmp	r5, #0
 80150ee:	dc10      	bgt.n	8015112 <__ieee754_sqrt+0x62>
 80150f0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80150f4:	4330      	orrs	r0, r6
 80150f6:	d0f5      	beq.n	80150e4 <__ieee754_sqrt+0x34>
 80150f8:	b15d      	cbz	r5, 8015112 <__ieee754_sqrt+0x62>
 80150fa:	ee10 2a10 	vmov	r2, s0
 80150fe:	462b      	mov	r3, r5
 8015100:	ee10 0a10 	vmov	r0, s0
 8015104:	f7eb f8da 	bl	80002bc <__aeabi_dsub>
 8015108:	4602      	mov	r2, r0
 801510a:	460b      	mov	r3, r1
 801510c:	f7eb fbb8 	bl	8000880 <__aeabi_ddiv>
 8015110:	e7e6      	b.n	80150e0 <__ieee754_sqrt+0x30>
 8015112:	1512      	asrs	r2, r2, #20
 8015114:	d074      	beq.n	8015200 <__ieee754_sqrt+0x150>
 8015116:	07d4      	lsls	r4, r2, #31
 8015118:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801511c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8015120:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8015124:	bf5e      	ittt	pl
 8015126:	0fda      	lsrpl	r2, r3, #31
 8015128:	005b      	lslpl	r3, r3, #1
 801512a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801512e:	2400      	movs	r4, #0
 8015130:	0fda      	lsrs	r2, r3, #31
 8015132:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8015136:	107f      	asrs	r7, r7, #1
 8015138:	005b      	lsls	r3, r3, #1
 801513a:	2516      	movs	r5, #22
 801513c:	4620      	mov	r0, r4
 801513e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015142:	1886      	adds	r6, r0, r2
 8015144:	428e      	cmp	r6, r1
 8015146:	bfde      	ittt	le
 8015148:	1b89      	suble	r1, r1, r6
 801514a:	18b0      	addle	r0, r6, r2
 801514c:	18a4      	addle	r4, r4, r2
 801514e:	0049      	lsls	r1, r1, #1
 8015150:	3d01      	subs	r5, #1
 8015152:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8015156:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801515a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801515e:	d1f0      	bne.n	8015142 <__ieee754_sqrt+0x92>
 8015160:	462a      	mov	r2, r5
 8015162:	f04f 0e20 	mov.w	lr, #32
 8015166:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801516a:	4281      	cmp	r1, r0
 801516c:	eb06 0c05 	add.w	ip, r6, r5
 8015170:	dc02      	bgt.n	8015178 <__ieee754_sqrt+0xc8>
 8015172:	d113      	bne.n	801519c <__ieee754_sqrt+0xec>
 8015174:	459c      	cmp	ip, r3
 8015176:	d811      	bhi.n	801519c <__ieee754_sqrt+0xec>
 8015178:	f1bc 0f00 	cmp.w	ip, #0
 801517c:	eb0c 0506 	add.w	r5, ip, r6
 8015180:	da43      	bge.n	801520a <__ieee754_sqrt+0x15a>
 8015182:	2d00      	cmp	r5, #0
 8015184:	db41      	blt.n	801520a <__ieee754_sqrt+0x15a>
 8015186:	f100 0801 	add.w	r8, r0, #1
 801518a:	1a09      	subs	r1, r1, r0
 801518c:	459c      	cmp	ip, r3
 801518e:	bf88      	it	hi
 8015190:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8015194:	eba3 030c 	sub.w	r3, r3, ip
 8015198:	4432      	add	r2, r6
 801519a:	4640      	mov	r0, r8
 801519c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80151a0:	f1be 0e01 	subs.w	lr, lr, #1
 80151a4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80151a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80151ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80151b0:	d1db      	bne.n	801516a <__ieee754_sqrt+0xba>
 80151b2:	430b      	orrs	r3, r1
 80151b4:	d006      	beq.n	80151c4 <__ieee754_sqrt+0x114>
 80151b6:	1c50      	adds	r0, r2, #1
 80151b8:	bf13      	iteet	ne
 80151ba:	3201      	addne	r2, #1
 80151bc:	3401      	addeq	r4, #1
 80151be:	4672      	moveq	r2, lr
 80151c0:	f022 0201 	bicne.w	r2, r2, #1
 80151c4:	1063      	asrs	r3, r4, #1
 80151c6:	0852      	lsrs	r2, r2, #1
 80151c8:	07e1      	lsls	r1, r4, #31
 80151ca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80151ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80151d2:	bf48      	it	mi
 80151d4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80151d8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80151dc:	4614      	mov	r4, r2
 80151de:	e781      	b.n	80150e4 <__ieee754_sqrt+0x34>
 80151e0:	0ad9      	lsrs	r1, r3, #11
 80151e2:	3815      	subs	r0, #21
 80151e4:	055b      	lsls	r3, r3, #21
 80151e6:	2900      	cmp	r1, #0
 80151e8:	d0fa      	beq.n	80151e0 <__ieee754_sqrt+0x130>
 80151ea:	02cd      	lsls	r5, r1, #11
 80151ec:	d50a      	bpl.n	8015204 <__ieee754_sqrt+0x154>
 80151ee:	f1c2 0420 	rsb	r4, r2, #32
 80151f2:	fa23 f404 	lsr.w	r4, r3, r4
 80151f6:	1e55      	subs	r5, r2, #1
 80151f8:	4093      	lsls	r3, r2
 80151fa:	4321      	orrs	r1, r4
 80151fc:	1b42      	subs	r2, r0, r5
 80151fe:	e78a      	b.n	8015116 <__ieee754_sqrt+0x66>
 8015200:	4610      	mov	r0, r2
 8015202:	e7f0      	b.n	80151e6 <__ieee754_sqrt+0x136>
 8015204:	0049      	lsls	r1, r1, #1
 8015206:	3201      	adds	r2, #1
 8015208:	e7ef      	b.n	80151ea <__ieee754_sqrt+0x13a>
 801520a:	4680      	mov	r8, r0
 801520c:	e7bd      	b.n	801518a <__ieee754_sqrt+0xda>
 801520e:	bf00      	nop
 8015210:	7ff00000 	.word	0x7ff00000
 8015214:	00000000 	.word	0x00000000

08015218 <__kernel_cos>:
 8015218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521c:	ec57 6b10 	vmov	r6, r7, d0
 8015220:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015224:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015228:	ed8d 1b00 	vstr	d1, [sp]
 801522c:	da07      	bge.n	801523e <__kernel_cos+0x26>
 801522e:	ee10 0a10 	vmov	r0, s0
 8015232:	4639      	mov	r1, r7
 8015234:	f7eb fcaa 	bl	8000b8c <__aeabi_d2iz>
 8015238:	2800      	cmp	r0, #0
 801523a:	f000 8088 	beq.w	801534e <__kernel_cos+0x136>
 801523e:	4632      	mov	r2, r6
 8015240:	463b      	mov	r3, r7
 8015242:	4630      	mov	r0, r6
 8015244:	4639      	mov	r1, r7
 8015246:	f7eb f9f1 	bl	800062c <__aeabi_dmul>
 801524a:	4b51      	ldr	r3, [pc, #324]	; (8015390 <__kernel_cos+0x178>)
 801524c:	2200      	movs	r2, #0
 801524e:	4604      	mov	r4, r0
 8015250:	460d      	mov	r5, r1
 8015252:	f7eb f9eb 	bl	800062c <__aeabi_dmul>
 8015256:	a340      	add	r3, pc, #256	; (adr r3, 8015358 <__kernel_cos+0x140>)
 8015258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801525c:	4682      	mov	sl, r0
 801525e:	468b      	mov	fp, r1
 8015260:	4620      	mov	r0, r4
 8015262:	4629      	mov	r1, r5
 8015264:	f7eb f9e2 	bl	800062c <__aeabi_dmul>
 8015268:	a33d      	add	r3, pc, #244	; (adr r3, 8015360 <__kernel_cos+0x148>)
 801526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801526e:	f7eb f827 	bl	80002c0 <__adddf3>
 8015272:	4622      	mov	r2, r4
 8015274:	462b      	mov	r3, r5
 8015276:	f7eb f9d9 	bl	800062c <__aeabi_dmul>
 801527a:	a33b      	add	r3, pc, #236	; (adr r3, 8015368 <__kernel_cos+0x150>)
 801527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015280:	f7eb f81c 	bl	80002bc <__aeabi_dsub>
 8015284:	4622      	mov	r2, r4
 8015286:	462b      	mov	r3, r5
 8015288:	f7eb f9d0 	bl	800062c <__aeabi_dmul>
 801528c:	a338      	add	r3, pc, #224	; (adr r3, 8015370 <__kernel_cos+0x158>)
 801528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015292:	f7eb f815 	bl	80002c0 <__adddf3>
 8015296:	4622      	mov	r2, r4
 8015298:	462b      	mov	r3, r5
 801529a:	f7eb f9c7 	bl	800062c <__aeabi_dmul>
 801529e:	a336      	add	r3, pc, #216	; (adr r3, 8015378 <__kernel_cos+0x160>)
 80152a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a4:	f7eb f80a 	bl	80002bc <__aeabi_dsub>
 80152a8:	4622      	mov	r2, r4
 80152aa:	462b      	mov	r3, r5
 80152ac:	f7eb f9be 	bl	800062c <__aeabi_dmul>
 80152b0:	a333      	add	r3, pc, #204	; (adr r3, 8015380 <__kernel_cos+0x168>)
 80152b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152b6:	f7eb f803 	bl	80002c0 <__adddf3>
 80152ba:	4622      	mov	r2, r4
 80152bc:	462b      	mov	r3, r5
 80152be:	f7eb f9b5 	bl	800062c <__aeabi_dmul>
 80152c2:	4622      	mov	r2, r4
 80152c4:	462b      	mov	r3, r5
 80152c6:	f7eb f9b1 	bl	800062c <__aeabi_dmul>
 80152ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152ce:	4604      	mov	r4, r0
 80152d0:	460d      	mov	r5, r1
 80152d2:	4630      	mov	r0, r6
 80152d4:	4639      	mov	r1, r7
 80152d6:	f7eb f9a9 	bl	800062c <__aeabi_dmul>
 80152da:	460b      	mov	r3, r1
 80152dc:	4602      	mov	r2, r0
 80152de:	4629      	mov	r1, r5
 80152e0:	4620      	mov	r0, r4
 80152e2:	f7ea ffeb 	bl	80002bc <__aeabi_dsub>
 80152e6:	4b2b      	ldr	r3, [pc, #172]	; (8015394 <__kernel_cos+0x17c>)
 80152e8:	4598      	cmp	r8, r3
 80152ea:	4606      	mov	r6, r0
 80152ec:	460f      	mov	r7, r1
 80152ee:	dc10      	bgt.n	8015312 <__kernel_cos+0xfa>
 80152f0:	4602      	mov	r2, r0
 80152f2:	460b      	mov	r3, r1
 80152f4:	4650      	mov	r0, sl
 80152f6:	4659      	mov	r1, fp
 80152f8:	f7ea ffe0 	bl	80002bc <__aeabi_dsub>
 80152fc:	460b      	mov	r3, r1
 80152fe:	4926      	ldr	r1, [pc, #152]	; (8015398 <__kernel_cos+0x180>)
 8015300:	4602      	mov	r2, r0
 8015302:	2000      	movs	r0, #0
 8015304:	f7ea ffda 	bl	80002bc <__aeabi_dsub>
 8015308:	ec41 0b10 	vmov	d0, r0, r1
 801530c:	b003      	add	sp, #12
 801530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015312:	4b22      	ldr	r3, [pc, #136]	; (801539c <__kernel_cos+0x184>)
 8015314:	4920      	ldr	r1, [pc, #128]	; (8015398 <__kernel_cos+0x180>)
 8015316:	4598      	cmp	r8, r3
 8015318:	bfcc      	ite	gt
 801531a:	4d21      	ldrgt	r5, [pc, #132]	; (80153a0 <__kernel_cos+0x188>)
 801531c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8015320:	2400      	movs	r4, #0
 8015322:	4622      	mov	r2, r4
 8015324:	462b      	mov	r3, r5
 8015326:	2000      	movs	r0, #0
 8015328:	f7ea ffc8 	bl	80002bc <__aeabi_dsub>
 801532c:	4622      	mov	r2, r4
 801532e:	4680      	mov	r8, r0
 8015330:	4689      	mov	r9, r1
 8015332:	462b      	mov	r3, r5
 8015334:	4650      	mov	r0, sl
 8015336:	4659      	mov	r1, fp
 8015338:	f7ea ffc0 	bl	80002bc <__aeabi_dsub>
 801533c:	4632      	mov	r2, r6
 801533e:	463b      	mov	r3, r7
 8015340:	f7ea ffbc 	bl	80002bc <__aeabi_dsub>
 8015344:	4602      	mov	r2, r0
 8015346:	460b      	mov	r3, r1
 8015348:	4640      	mov	r0, r8
 801534a:	4649      	mov	r1, r9
 801534c:	e7da      	b.n	8015304 <__kernel_cos+0xec>
 801534e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8015388 <__kernel_cos+0x170>
 8015352:	e7db      	b.n	801530c <__kernel_cos+0xf4>
 8015354:	f3af 8000 	nop.w
 8015358:	be8838d4 	.word	0xbe8838d4
 801535c:	bda8fae9 	.word	0xbda8fae9
 8015360:	bdb4b1c4 	.word	0xbdb4b1c4
 8015364:	3e21ee9e 	.word	0x3e21ee9e
 8015368:	809c52ad 	.word	0x809c52ad
 801536c:	3e927e4f 	.word	0x3e927e4f
 8015370:	19cb1590 	.word	0x19cb1590
 8015374:	3efa01a0 	.word	0x3efa01a0
 8015378:	16c15177 	.word	0x16c15177
 801537c:	3f56c16c 	.word	0x3f56c16c
 8015380:	5555554c 	.word	0x5555554c
 8015384:	3fa55555 	.word	0x3fa55555
 8015388:	00000000 	.word	0x00000000
 801538c:	3ff00000 	.word	0x3ff00000
 8015390:	3fe00000 	.word	0x3fe00000
 8015394:	3fd33332 	.word	0x3fd33332
 8015398:	3ff00000 	.word	0x3ff00000
 801539c:	3fe90000 	.word	0x3fe90000
 80153a0:	3fd20000 	.word	0x3fd20000
 80153a4:	00000000 	.word	0x00000000

080153a8 <__kernel_rem_pio2>:
 80153a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153ac:	ed2d 8b02 	vpush	{d8}
 80153b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80153b4:	f112 0f14 	cmn.w	r2, #20
 80153b8:	9308      	str	r3, [sp, #32]
 80153ba:	9101      	str	r1, [sp, #4]
 80153bc:	4bc4      	ldr	r3, [pc, #784]	; (80156d0 <__kernel_rem_pio2+0x328>)
 80153be:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80153c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80153c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80153c6:	9302      	str	r3, [sp, #8]
 80153c8:	9b08      	ldr	r3, [sp, #32]
 80153ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80153ce:	bfa8      	it	ge
 80153d0:	1ed4      	subge	r4, r2, #3
 80153d2:	9306      	str	r3, [sp, #24]
 80153d4:	bfb2      	itee	lt
 80153d6:	2400      	movlt	r4, #0
 80153d8:	2318      	movge	r3, #24
 80153da:	fb94 f4f3 	sdivge	r4, r4, r3
 80153de:	f06f 0317 	mvn.w	r3, #23
 80153e2:	fb04 3303 	mla	r3, r4, r3, r3
 80153e6:	eb03 0a02 	add.w	sl, r3, r2
 80153ea:	9b02      	ldr	r3, [sp, #8]
 80153ec:	9a06      	ldr	r2, [sp, #24]
 80153ee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80156c0 <__kernel_rem_pio2+0x318>
 80153f2:	eb03 0802 	add.w	r8, r3, r2
 80153f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80153f8:	1aa7      	subs	r7, r4, r2
 80153fa:	ae22      	add	r6, sp, #136	; 0x88
 80153fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8015400:	2500      	movs	r5, #0
 8015402:	4545      	cmp	r5, r8
 8015404:	dd13      	ble.n	801542e <__kernel_rem_pio2+0x86>
 8015406:	9b08      	ldr	r3, [sp, #32]
 8015408:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80156c0 <__kernel_rem_pio2+0x318>
 801540c:	aa22      	add	r2, sp, #136	; 0x88
 801540e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8015412:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8015416:	f04f 0800 	mov.w	r8, #0
 801541a:	9b02      	ldr	r3, [sp, #8]
 801541c:	4598      	cmp	r8, r3
 801541e:	dc2f      	bgt.n	8015480 <__kernel_rem_pio2+0xd8>
 8015420:	ed8d 8b04 	vstr	d8, [sp, #16]
 8015424:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8015428:	462f      	mov	r7, r5
 801542a:	2600      	movs	r6, #0
 801542c:	e01b      	b.n	8015466 <__kernel_rem_pio2+0xbe>
 801542e:	42ef      	cmn	r7, r5
 8015430:	d407      	bmi.n	8015442 <__kernel_rem_pio2+0x9a>
 8015432:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8015436:	f7eb f88f 	bl	8000558 <__aeabi_i2d>
 801543a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801543e:	3501      	adds	r5, #1
 8015440:	e7df      	b.n	8015402 <__kernel_rem_pio2+0x5a>
 8015442:	ec51 0b18 	vmov	r0, r1, d8
 8015446:	e7f8      	b.n	801543a <__kernel_rem_pio2+0x92>
 8015448:	e9d7 2300 	ldrd	r2, r3, [r7]
 801544c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015450:	f7eb f8ec 	bl	800062c <__aeabi_dmul>
 8015454:	4602      	mov	r2, r0
 8015456:	460b      	mov	r3, r1
 8015458:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801545c:	f7ea ff30 	bl	80002c0 <__adddf3>
 8015460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015464:	3601      	adds	r6, #1
 8015466:	9b06      	ldr	r3, [sp, #24]
 8015468:	429e      	cmp	r6, r3
 801546a:	f1a7 0708 	sub.w	r7, r7, #8
 801546e:	ddeb      	ble.n	8015448 <__kernel_rem_pio2+0xa0>
 8015470:	ed9d 7b04 	vldr	d7, [sp, #16]
 8015474:	f108 0801 	add.w	r8, r8, #1
 8015478:	ecab 7b02 	vstmia	fp!, {d7}
 801547c:	3508      	adds	r5, #8
 801547e:	e7cc      	b.n	801541a <__kernel_rem_pio2+0x72>
 8015480:	9b02      	ldr	r3, [sp, #8]
 8015482:	aa0e      	add	r2, sp, #56	; 0x38
 8015484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015488:	930d      	str	r3, [sp, #52]	; 0x34
 801548a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801548c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015490:	9c02      	ldr	r4, [sp, #8]
 8015492:	930c      	str	r3, [sp, #48]	; 0x30
 8015494:	00e3      	lsls	r3, r4, #3
 8015496:	930a      	str	r3, [sp, #40]	; 0x28
 8015498:	ab9a      	add	r3, sp, #616	; 0x268
 801549a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801549e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80154a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80154a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80154a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80154ac:	46c3      	mov	fp, r8
 80154ae:	46a1      	mov	r9, r4
 80154b0:	f1b9 0f00 	cmp.w	r9, #0
 80154b4:	f1a5 0508 	sub.w	r5, r5, #8
 80154b8:	dc77      	bgt.n	80155aa <__kernel_rem_pio2+0x202>
 80154ba:	ec47 6b10 	vmov	d0, r6, r7
 80154be:	4650      	mov	r0, sl
 80154c0:	f000 fe52 	bl	8016168 <scalbn>
 80154c4:	ec57 6b10 	vmov	r6, r7, d0
 80154c8:	2200      	movs	r2, #0
 80154ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80154ce:	ee10 0a10 	vmov	r0, s0
 80154d2:	4639      	mov	r1, r7
 80154d4:	f7eb f8aa 	bl	800062c <__aeabi_dmul>
 80154d8:	ec41 0b10 	vmov	d0, r0, r1
 80154dc:	f000 fdc4 	bl	8016068 <floor>
 80154e0:	4b7c      	ldr	r3, [pc, #496]	; (80156d4 <__kernel_rem_pio2+0x32c>)
 80154e2:	ec51 0b10 	vmov	r0, r1, d0
 80154e6:	2200      	movs	r2, #0
 80154e8:	f7eb f8a0 	bl	800062c <__aeabi_dmul>
 80154ec:	4602      	mov	r2, r0
 80154ee:	460b      	mov	r3, r1
 80154f0:	4630      	mov	r0, r6
 80154f2:	4639      	mov	r1, r7
 80154f4:	f7ea fee2 	bl	80002bc <__aeabi_dsub>
 80154f8:	460f      	mov	r7, r1
 80154fa:	4606      	mov	r6, r0
 80154fc:	f7eb fb46 	bl	8000b8c <__aeabi_d2iz>
 8015500:	9004      	str	r0, [sp, #16]
 8015502:	f7eb f829 	bl	8000558 <__aeabi_i2d>
 8015506:	4602      	mov	r2, r0
 8015508:	460b      	mov	r3, r1
 801550a:	4630      	mov	r0, r6
 801550c:	4639      	mov	r1, r7
 801550e:	f7ea fed5 	bl	80002bc <__aeabi_dsub>
 8015512:	f1ba 0f00 	cmp.w	sl, #0
 8015516:	4606      	mov	r6, r0
 8015518:	460f      	mov	r7, r1
 801551a:	dd6d      	ble.n	80155f8 <__kernel_rem_pio2+0x250>
 801551c:	1e62      	subs	r2, r4, #1
 801551e:	ab0e      	add	r3, sp, #56	; 0x38
 8015520:	9d04      	ldr	r5, [sp, #16]
 8015522:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015526:	f1ca 0118 	rsb	r1, sl, #24
 801552a:	fa40 f301 	asr.w	r3, r0, r1
 801552e:	441d      	add	r5, r3
 8015530:	408b      	lsls	r3, r1
 8015532:	1ac0      	subs	r0, r0, r3
 8015534:	ab0e      	add	r3, sp, #56	; 0x38
 8015536:	9504      	str	r5, [sp, #16]
 8015538:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801553c:	f1ca 0317 	rsb	r3, sl, #23
 8015540:	fa40 fb03 	asr.w	fp, r0, r3
 8015544:	f1bb 0f00 	cmp.w	fp, #0
 8015548:	dd65      	ble.n	8015616 <__kernel_rem_pio2+0x26e>
 801554a:	9b04      	ldr	r3, [sp, #16]
 801554c:	2200      	movs	r2, #0
 801554e:	3301      	adds	r3, #1
 8015550:	9304      	str	r3, [sp, #16]
 8015552:	4615      	mov	r5, r2
 8015554:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8015558:	4294      	cmp	r4, r2
 801555a:	f300 809c 	bgt.w	8015696 <__kernel_rem_pio2+0x2ee>
 801555e:	f1ba 0f00 	cmp.w	sl, #0
 8015562:	dd07      	ble.n	8015574 <__kernel_rem_pio2+0x1cc>
 8015564:	f1ba 0f01 	cmp.w	sl, #1
 8015568:	f000 80c0 	beq.w	80156ec <__kernel_rem_pio2+0x344>
 801556c:	f1ba 0f02 	cmp.w	sl, #2
 8015570:	f000 80c6 	beq.w	8015700 <__kernel_rem_pio2+0x358>
 8015574:	f1bb 0f02 	cmp.w	fp, #2
 8015578:	d14d      	bne.n	8015616 <__kernel_rem_pio2+0x26e>
 801557a:	4632      	mov	r2, r6
 801557c:	463b      	mov	r3, r7
 801557e:	4956      	ldr	r1, [pc, #344]	; (80156d8 <__kernel_rem_pio2+0x330>)
 8015580:	2000      	movs	r0, #0
 8015582:	f7ea fe9b 	bl	80002bc <__aeabi_dsub>
 8015586:	4606      	mov	r6, r0
 8015588:	460f      	mov	r7, r1
 801558a:	2d00      	cmp	r5, #0
 801558c:	d043      	beq.n	8015616 <__kernel_rem_pio2+0x26e>
 801558e:	4650      	mov	r0, sl
 8015590:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80156c8 <__kernel_rem_pio2+0x320>
 8015594:	f000 fde8 	bl	8016168 <scalbn>
 8015598:	4630      	mov	r0, r6
 801559a:	4639      	mov	r1, r7
 801559c:	ec53 2b10 	vmov	r2, r3, d0
 80155a0:	f7ea fe8c 	bl	80002bc <__aeabi_dsub>
 80155a4:	4606      	mov	r6, r0
 80155a6:	460f      	mov	r7, r1
 80155a8:	e035      	b.n	8015616 <__kernel_rem_pio2+0x26e>
 80155aa:	4b4c      	ldr	r3, [pc, #304]	; (80156dc <__kernel_rem_pio2+0x334>)
 80155ac:	2200      	movs	r2, #0
 80155ae:	4630      	mov	r0, r6
 80155b0:	4639      	mov	r1, r7
 80155b2:	f7eb f83b 	bl	800062c <__aeabi_dmul>
 80155b6:	f7eb fae9 	bl	8000b8c <__aeabi_d2iz>
 80155ba:	f7ea ffcd 	bl	8000558 <__aeabi_i2d>
 80155be:	4602      	mov	r2, r0
 80155c0:	460b      	mov	r3, r1
 80155c2:	ec43 2b18 	vmov	d8, r2, r3
 80155c6:	4b46      	ldr	r3, [pc, #280]	; (80156e0 <__kernel_rem_pio2+0x338>)
 80155c8:	2200      	movs	r2, #0
 80155ca:	f7eb f82f 	bl	800062c <__aeabi_dmul>
 80155ce:	4602      	mov	r2, r0
 80155d0:	460b      	mov	r3, r1
 80155d2:	4630      	mov	r0, r6
 80155d4:	4639      	mov	r1, r7
 80155d6:	f7ea fe71 	bl	80002bc <__aeabi_dsub>
 80155da:	f7eb fad7 	bl	8000b8c <__aeabi_d2iz>
 80155de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80155e2:	f84b 0b04 	str.w	r0, [fp], #4
 80155e6:	ec51 0b18 	vmov	r0, r1, d8
 80155ea:	f7ea fe69 	bl	80002c0 <__adddf3>
 80155ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80155f2:	4606      	mov	r6, r0
 80155f4:	460f      	mov	r7, r1
 80155f6:	e75b      	b.n	80154b0 <__kernel_rem_pio2+0x108>
 80155f8:	d106      	bne.n	8015608 <__kernel_rem_pio2+0x260>
 80155fa:	1e63      	subs	r3, r4, #1
 80155fc:	aa0e      	add	r2, sp, #56	; 0x38
 80155fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015602:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8015606:	e79d      	b.n	8015544 <__kernel_rem_pio2+0x19c>
 8015608:	4b36      	ldr	r3, [pc, #216]	; (80156e4 <__kernel_rem_pio2+0x33c>)
 801560a:	2200      	movs	r2, #0
 801560c:	f7eb fa94 	bl	8000b38 <__aeabi_dcmpge>
 8015610:	2800      	cmp	r0, #0
 8015612:	d13d      	bne.n	8015690 <__kernel_rem_pio2+0x2e8>
 8015614:	4683      	mov	fp, r0
 8015616:	2200      	movs	r2, #0
 8015618:	2300      	movs	r3, #0
 801561a:	4630      	mov	r0, r6
 801561c:	4639      	mov	r1, r7
 801561e:	f7eb fa6d 	bl	8000afc <__aeabi_dcmpeq>
 8015622:	2800      	cmp	r0, #0
 8015624:	f000 80c0 	beq.w	80157a8 <__kernel_rem_pio2+0x400>
 8015628:	1e65      	subs	r5, r4, #1
 801562a:	462b      	mov	r3, r5
 801562c:	2200      	movs	r2, #0
 801562e:	9902      	ldr	r1, [sp, #8]
 8015630:	428b      	cmp	r3, r1
 8015632:	da6c      	bge.n	801570e <__kernel_rem_pio2+0x366>
 8015634:	2a00      	cmp	r2, #0
 8015636:	f000 8089 	beq.w	801574c <__kernel_rem_pio2+0x3a4>
 801563a:	ab0e      	add	r3, sp, #56	; 0x38
 801563c:	f1aa 0a18 	sub.w	sl, sl, #24
 8015640:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8015644:	2b00      	cmp	r3, #0
 8015646:	f000 80ad 	beq.w	80157a4 <__kernel_rem_pio2+0x3fc>
 801564a:	4650      	mov	r0, sl
 801564c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80156c8 <__kernel_rem_pio2+0x320>
 8015650:	f000 fd8a 	bl	8016168 <scalbn>
 8015654:	ab9a      	add	r3, sp, #616	; 0x268
 8015656:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801565a:	ec57 6b10 	vmov	r6, r7, d0
 801565e:	00ec      	lsls	r4, r5, #3
 8015660:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8015664:	46aa      	mov	sl, r5
 8015666:	f1ba 0f00 	cmp.w	sl, #0
 801566a:	f280 80d6 	bge.w	801581a <__kernel_rem_pio2+0x472>
 801566e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80156c0 <__kernel_rem_pio2+0x318>
 8015672:	462e      	mov	r6, r5
 8015674:	2e00      	cmp	r6, #0
 8015676:	f2c0 8104 	blt.w	8015882 <__kernel_rem_pio2+0x4da>
 801567a:	ab72      	add	r3, sp, #456	; 0x1c8
 801567c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8015680:	f8df a064 	ldr.w	sl, [pc, #100]	; 80156e8 <__kernel_rem_pio2+0x340>
 8015684:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8015688:	f04f 0800 	mov.w	r8, #0
 801568c:	1baf      	subs	r7, r5, r6
 801568e:	e0ea      	b.n	8015866 <__kernel_rem_pio2+0x4be>
 8015690:	f04f 0b02 	mov.w	fp, #2
 8015694:	e759      	b.n	801554a <__kernel_rem_pio2+0x1a2>
 8015696:	f8d8 3000 	ldr.w	r3, [r8]
 801569a:	b955      	cbnz	r5, 80156b2 <__kernel_rem_pio2+0x30a>
 801569c:	b123      	cbz	r3, 80156a8 <__kernel_rem_pio2+0x300>
 801569e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80156a2:	f8c8 3000 	str.w	r3, [r8]
 80156a6:	2301      	movs	r3, #1
 80156a8:	3201      	adds	r2, #1
 80156aa:	f108 0804 	add.w	r8, r8, #4
 80156ae:	461d      	mov	r5, r3
 80156b0:	e752      	b.n	8015558 <__kernel_rem_pio2+0x1b0>
 80156b2:	1acb      	subs	r3, r1, r3
 80156b4:	f8c8 3000 	str.w	r3, [r8]
 80156b8:	462b      	mov	r3, r5
 80156ba:	e7f5      	b.n	80156a8 <__kernel_rem_pio2+0x300>
 80156bc:	f3af 8000 	nop.w
	...
 80156cc:	3ff00000 	.word	0x3ff00000
 80156d0:	0803e638 	.word	0x0803e638
 80156d4:	40200000 	.word	0x40200000
 80156d8:	3ff00000 	.word	0x3ff00000
 80156dc:	3e700000 	.word	0x3e700000
 80156e0:	41700000 	.word	0x41700000
 80156e4:	3fe00000 	.word	0x3fe00000
 80156e8:	0803e5f8 	.word	0x0803e5f8
 80156ec:	1e62      	subs	r2, r4, #1
 80156ee:	ab0e      	add	r3, sp, #56	; 0x38
 80156f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80156f8:	a90e      	add	r1, sp, #56	; 0x38
 80156fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80156fe:	e739      	b.n	8015574 <__kernel_rem_pio2+0x1cc>
 8015700:	1e62      	subs	r2, r4, #1
 8015702:	ab0e      	add	r3, sp, #56	; 0x38
 8015704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015708:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801570c:	e7f4      	b.n	80156f8 <__kernel_rem_pio2+0x350>
 801570e:	a90e      	add	r1, sp, #56	; 0x38
 8015710:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015714:	3b01      	subs	r3, #1
 8015716:	430a      	orrs	r2, r1
 8015718:	e789      	b.n	801562e <__kernel_rem_pio2+0x286>
 801571a:	3301      	adds	r3, #1
 801571c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8015720:	2900      	cmp	r1, #0
 8015722:	d0fa      	beq.n	801571a <__kernel_rem_pio2+0x372>
 8015724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015726:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801572a:	446a      	add	r2, sp
 801572c:	3a98      	subs	r2, #152	; 0x98
 801572e:	920a      	str	r2, [sp, #40]	; 0x28
 8015730:	9a08      	ldr	r2, [sp, #32]
 8015732:	18e3      	adds	r3, r4, r3
 8015734:	18a5      	adds	r5, r4, r2
 8015736:	aa22      	add	r2, sp, #136	; 0x88
 8015738:	f104 0801 	add.w	r8, r4, #1
 801573c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8015740:	9304      	str	r3, [sp, #16]
 8015742:	9b04      	ldr	r3, [sp, #16]
 8015744:	4543      	cmp	r3, r8
 8015746:	da04      	bge.n	8015752 <__kernel_rem_pio2+0x3aa>
 8015748:	461c      	mov	r4, r3
 801574a:	e6a3      	b.n	8015494 <__kernel_rem_pio2+0xec>
 801574c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801574e:	2301      	movs	r3, #1
 8015750:	e7e4      	b.n	801571c <__kernel_rem_pio2+0x374>
 8015752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015754:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8015758:	f7ea fefe 	bl	8000558 <__aeabi_i2d>
 801575c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8015760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015762:	46ab      	mov	fp, r5
 8015764:	461c      	mov	r4, r3
 8015766:	f04f 0900 	mov.w	r9, #0
 801576a:	2600      	movs	r6, #0
 801576c:	2700      	movs	r7, #0
 801576e:	9b06      	ldr	r3, [sp, #24]
 8015770:	4599      	cmp	r9, r3
 8015772:	dd06      	ble.n	8015782 <__kernel_rem_pio2+0x3da>
 8015774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015776:	e8e3 6702 	strd	r6, r7, [r3], #8
 801577a:	f108 0801 	add.w	r8, r8, #1
 801577e:	930a      	str	r3, [sp, #40]	; 0x28
 8015780:	e7df      	b.n	8015742 <__kernel_rem_pio2+0x39a>
 8015782:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8015786:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801578a:	f7ea ff4f 	bl	800062c <__aeabi_dmul>
 801578e:	4602      	mov	r2, r0
 8015790:	460b      	mov	r3, r1
 8015792:	4630      	mov	r0, r6
 8015794:	4639      	mov	r1, r7
 8015796:	f7ea fd93 	bl	80002c0 <__adddf3>
 801579a:	f109 0901 	add.w	r9, r9, #1
 801579e:	4606      	mov	r6, r0
 80157a0:	460f      	mov	r7, r1
 80157a2:	e7e4      	b.n	801576e <__kernel_rem_pio2+0x3c6>
 80157a4:	3d01      	subs	r5, #1
 80157a6:	e748      	b.n	801563a <__kernel_rem_pio2+0x292>
 80157a8:	ec47 6b10 	vmov	d0, r6, r7
 80157ac:	f1ca 0000 	rsb	r0, sl, #0
 80157b0:	f000 fcda 	bl	8016168 <scalbn>
 80157b4:	ec57 6b10 	vmov	r6, r7, d0
 80157b8:	4ba0      	ldr	r3, [pc, #640]	; (8015a3c <__kernel_rem_pio2+0x694>)
 80157ba:	ee10 0a10 	vmov	r0, s0
 80157be:	2200      	movs	r2, #0
 80157c0:	4639      	mov	r1, r7
 80157c2:	f7eb f9b9 	bl	8000b38 <__aeabi_dcmpge>
 80157c6:	b1f8      	cbz	r0, 8015808 <__kernel_rem_pio2+0x460>
 80157c8:	4b9d      	ldr	r3, [pc, #628]	; (8015a40 <__kernel_rem_pio2+0x698>)
 80157ca:	2200      	movs	r2, #0
 80157cc:	4630      	mov	r0, r6
 80157ce:	4639      	mov	r1, r7
 80157d0:	f7ea ff2c 	bl	800062c <__aeabi_dmul>
 80157d4:	f7eb f9da 	bl	8000b8c <__aeabi_d2iz>
 80157d8:	4680      	mov	r8, r0
 80157da:	f7ea febd 	bl	8000558 <__aeabi_i2d>
 80157de:	4b97      	ldr	r3, [pc, #604]	; (8015a3c <__kernel_rem_pio2+0x694>)
 80157e0:	2200      	movs	r2, #0
 80157e2:	f7ea ff23 	bl	800062c <__aeabi_dmul>
 80157e6:	460b      	mov	r3, r1
 80157e8:	4602      	mov	r2, r0
 80157ea:	4639      	mov	r1, r7
 80157ec:	4630      	mov	r0, r6
 80157ee:	f7ea fd65 	bl	80002bc <__aeabi_dsub>
 80157f2:	f7eb f9cb 	bl	8000b8c <__aeabi_d2iz>
 80157f6:	1c65      	adds	r5, r4, #1
 80157f8:	ab0e      	add	r3, sp, #56	; 0x38
 80157fa:	f10a 0a18 	add.w	sl, sl, #24
 80157fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015802:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8015806:	e720      	b.n	801564a <__kernel_rem_pio2+0x2a2>
 8015808:	4630      	mov	r0, r6
 801580a:	4639      	mov	r1, r7
 801580c:	f7eb f9be 	bl	8000b8c <__aeabi_d2iz>
 8015810:	ab0e      	add	r3, sp, #56	; 0x38
 8015812:	4625      	mov	r5, r4
 8015814:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015818:	e717      	b.n	801564a <__kernel_rem_pio2+0x2a2>
 801581a:	ab0e      	add	r3, sp, #56	; 0x38
 801581c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8015820:	f7ea fe9a 	bl	8000558 <__aeabi_i2d>
 8015824:	4632      	mov	r2, r6
 8015826:	463b      	mov	r3, r7
 8015828:	f7ea ff00 	bl	800062c <__aeabi_dmul>
 801582c:	4b84      	ldr	r3, [pc, #528]	; (8015a40 <__kernel_rem_pio2+0x698>)
 801582e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8015832:	2200      	movs	r2, #0
 8015834:	4630      	mov	r0, r6
 8015836:	4639      	mov	r1, r7
 8015838:	f7ea fef8 	bl	800062c <__aeabi_dmul>
 801583c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015840:	4606      	mov	r6, r0
 8015842:	460f      	mov	r7, r1
 8015844:	e70f      	b.n	8015666 <__kernel_rem_pio2+0x2be>
 8015846:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801584a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801584e:	f7ea feed 	bl	800062c <__aeabi_dmul>
 8015852:	4602      	mov	r2, r0
 8015854:	460b      	mov	r3, r1
 8015856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801585a:	f7ea fd31 	bl	80002c0 <__adddf3>
 801585e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015862:	f108 0801 	add.w	r8, r8, #1
 8015866:	9b02      	ldr	r3, [sp, #8]
 8015868:	4598      	cmp	r8, r3
 801586a:	dc01      	bgt.n	8015870 <__kernel_rem_pio2+0x4c8>
 801586c:	45b8      	cmp	r8, r7
 801586e:	ddea      	ble.n	8015846 <__kernel_rem_pio2+0x49e>
 8015870:	ed9d 7b06 	vldr	d7, [sp, #24]
 8015874:	ab4a      	add	r3, sp, #296	; 0x128
 8015876:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801587a:	ed87 7b00 	vstr	d7, [r7]
 801587e:	3e01      	subs	r6, #1
 8015880:	e6f8      	b.n	8015674 <__kernel_rem_pio2+0x2cc>
 8015882:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8015884:	2b02      	cmp	r3, #2
 8015886:	dc0b      	bgt.n	80158a0 <__kernel_rem_pio2+0x4f8>
 8015888:	2b00      	cmp	r3, #0
 801588a:	dc35      	bgt.n	80158f8 <__kernel_rem_pio2+0x550>
 801588c:	d059      	beq.n	8015942 <__kernel_rem_pio2+0x59a>
 801588e:	9b04      	ldr	r3, [sp, #16]
 8015890:	f003 0007 	and.w	r0, r3, #7
 8015894:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015898:	ecbd 8b02 	vpop	{d8}
 801589c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80158a2:	2b03      	cmp	r3, #3
 80158a4:	d1f3      	bne.n	801588e <__kernel_rem_pio2+0x4e6>
 80158a6:	ab4a      	add	r3, sp, #296	; 0x128
 80158a8:	4423      	add	r3, r4
 80158aa:	9306      	str	r3, [sp, #24]
 80158ac:	461c      	mov	r4, r3
 80158ae:	469a      	mov	sl, r3
 80158b0:	9502      	str	r5, [sp, #8]
 80158b2:	9b02      	ldr	r3, [sp, #8]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	f1aa 0a08 	sub.w	sl, sl, #8
 80158ba:	dc6b      	bgt.n	8015994 <__kernel_rem_pio2+0x5ec>
 80158bc:	46aa      	mov	sl, r5
 80158be:	f1ba 0f01 	cmp.w	sl, #1
 80158c2:	f1a4 0408 	sub.w	r4, r4, #8
 80158c6:	f300 8085 	bgt.w	80159d4 <__kernel_rem_pio2+0x62c>
 80158ca:	9c06      	ldr	r4, [sp, #24]
 80158cc:	2000      	movs	r0, #0
 80158ce:	3408      	adds	r4, #8
 80158d0:	2100      	movs	r1, #0
 80158d2:	2d01      	cmp	r5, #1
 80158d4:	f300 809d 	bgt.w	8015a12 <__kernel_rem_pio2+0x66a>
 80158d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80158dc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80158e0:	f1bb 0f00 	cmp.w	fp, #0
 80158e4:	f040 809b 	bne.w	8015a1e <__kernel_rem_pio2+0x676>
 80158e8:	9b01      	ldr	r3, [sp, #4]
 80158ea:	e9c3 5600 	strd	r5, r6, [r3]
 80158ee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80158f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80158f6:	e7ca      	b.n	801588e <__kernel_rem_pio2+0x4e6>
 80158f8:	3408      	adds	r4, #8
 80158fa:	ab4a      	add	r3, sp, #296	; 0x128
 80158fc:	441c      	add	r4, r3
 80158fe:	462e      	mov	r6, r5
 8015900:	2000      	movs	r0, #0
 8015902:	2100      	movs	r1, #0
 8015904:	2e00      	cmp	r6, #0
 8015906:	da36      	bge.n	8015976 <__kernel_rem_pio2+0x5ce>
 8015908:	f1bb 0f00 	cmp.w	fp, #0
 801590c:	d039      	beq.n	8015982 <__kernel_rem_pio2+0x5da>
 801590e:	4602      	mov	r2, r0
 8015910:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015914:	9c01      	ldr	r4, [sp, #4]
 8015916:	e9c4 2300 	strd	r2, r3, [r4]
 801591a:	4602      	mov	r2, r0
 801591c:	460b      	mov	r3, r1
 801591e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8015922:	f7ea fccb 	bl	80002bc <__aeabi_dsub>
 8015926:	ae4c      	add	r6, sp, #304	; 0x130
 8015928:	2401      	movs	r4, #1
 801592a:	42a5      	cmp	r5, r4
 801592c:	da2c      	bge.n	8015988 <__kernel_rem_pio2+0x5e0>
 801592e:	f1bb 0f00 	cmp.w	fp, #0
 8015932:	d002      	beq.n	801593a <__kernel_rem_pio2+0x592>
 8015934:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015938:	4619      	mov	r1, r3
 801593a:	9b01      	ldr	r3, [sp, #4]
 801593c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015940:	e7a5      	b.n	801588e <__kernel_rem_pio2+0x4e6>
 8015942:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8015946:	eb0d 0403 	add.w	r4, sp, r3
 801594a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801594e:	2000      	movs	r0, #0
 8015950:	2100      	movs	r1, #0
 8015952:	2d00      	cmp	r5, #0
 8015954:	da09      	bge.n	801596a <__kernel_rem_pio2+0x5c2>
 8015956:	f1bb 0f00 	cmp.w	fp, #0
 801595a:	d002      	beq.n	8015962 <__kernel_rem_pio2+0x5ba>
 801595c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015960:	4619      	mov	r1, r3
 8015962:	9b01      	ldr	r3, [sp, #4]
 8015964:	e9c3 0100 	strd	r0, r1, [r3]
 8015968:	e791      	b.n	801588e <__kernel_rem_pio2+0x4e6>
 801596a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801596e:	f7ea fca7 	bl	80002c0 <__adddf3>
 8015972:	3d01      	subs	r5, #1
 8015974:	e7ed      	b.n	8015952 <__kernel_rem_pio2+0x5aa>
 8015976:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801597a:	f7ea fca1 	bl	80002c0 <__adddf3>
 801597e:	3e01      	subs	r6, #1
 8015980:	e7c0      	b.n	8015904 <__kernel_rem_pio2+0x55c>
 8015982:	4602      	mov	r2, r0
 8015984:	460b      	mov	r3, r1
 8015986:	e7c5      	b.n	8015914 <__kernel_rem_pio2+0x56c>
 8015988:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801598c:	f7ea fc98 	bl	80002c0 <__adddf3>
 8015990:	3401      	adds	r4, #1
 8015992:	e7ca      	b.n	801592a <__kernel_rem_pio2+0x582>
 8015994:	e9da 8900 	ldrd	r8, r9, [sl]
 8015998:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801599c:	9b02      	ldr	r3, [sp, #8]
 801599e:	3b01      	subs	r3, #1
 80159a0:	9302      	str	r3, [sp, #8]
 80159a2:	4632      	mov	r2, r6
 80159a4:	463b      	mov	r3, r7
 80159a6:	4640      	mov	r0, r8
 80159a8:	4649      	mov	r1, r9
 80159aa:	f7ea fc89 	bl	80002c0 <__adddf3>
 80159ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80159b2:	4602      	mov	r2, r0
 80159b4:	460b      	mov	r3, r1
 80159b6:	4640      	mov	r0, r8
 80159b8:	4649      	mov	r1, r9
 80159ba:	f7ea fc7f 	bl	80002bc <__aeabi_dsub>
 80159be:	4632      	mov	r2, r6
 80159c0:	463b      	mov	r3, r7
 80159c2:	f7ea fc7d 	bl	80002c0 <__adddf3>
 80159c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80159ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80159ce:	ed8a 7b00 	vstr	d7, [sl]
 80159d2:	e76e      	b.n	80158b2 <__kernel_rem_pio2+0x50a>
 80159d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80159d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80159dc:	4640      	mov	r0, r8
 80159de:	4632      	mov	r2, r6
 80159e0:	463b      	mov	r3, r7
 80159e2:	4649      	mov	r1, r9
 80159e4:	f7ea fc6c 	bl	80002c0 <__adddf3>
 80159e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80159ec:	4602      	mov	r2, r0
 80159ee:	460b      	mov	r3, r1
 80159f0:	4640      	mov	r0, r8
 80159f2:	4649      	mov	r1, r9
 80159f4:	f7ea fc62 	bl	80002bc <__aeabi_dsub>
 80159f8:	4632      	mov	r2, r6
 80159fa:	463b      	mov	r3, r7
 80159fc:	f7ea fc60 	bl	80002c0 <__adddf3>
 8015a00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015a04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015a08:	ed84 7b00 	vstr	d7, [r4]
 8015a0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015a10:	e755      	b.n	80158be <__kernel_rem_pio2+0x516>
 8015a12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015a16:	f7ea fc53 	bl	80002c0 <__adddf3>
 8015a1a:	3d01      	subs	r5, #1
 8015a1c:	e759      	b.n	80158d2 <__kernel_rem_pio2+0x52a>
 8015a1e:	9b01      	ldr	r3, [sp, #4]
 8015a20:	9a01      	ldr	r2, [sp, #4]
 8015a22:	601d      	str	r5, [r3, #0]
 8015a24:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8015a28:	605c      	str	r4, [r3, #4]
 8015a2a:	609f      	str	r7, [r3, #8]
 8015a2c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8015a30:	60d3      	str	r3, [r2, #12]
 8015a32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015a36:	6110      	str	r0, [r2, #16]
 8015a38:	6153      	str	r3, [r2, #20]
 8015a3a:	e728      	b.n	801588e <__kernel_rem_pio2+0x4e6>
 8015a3c:	41700000 	.word	0x41700000
 8015a40:	3e700000 	.word	0x3e700000
 8015a44:	00000000 	.word	0x00000000

08015a48 <__kernel_sin>:
 8015a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a4c:	ed2d 8b04 	vpush	{d8-d9}
 8015a50:	eeb0 8a41 	vmov.f32	s16, s2
 8015a54:	eef0 8a61 	vmov.f32	s17, s3
 8015a58:	ec55 4b10 	vmov	r4, r5, d0
 8015a5c:	b083      	sub	sp, #12
 8015a5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015a62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015a66:	9001      	str	r0, [sp, #4]
 8015a68:	da06      	bge.n	8015a78 <__kernel_sin+0x30>
 8015a6a:	ee10 0a10 	vmov	r0, s0
 8015a6e:	4629      	mov	r1, r5
 8015a70:	f7eb f88c 	bl	8000b8c <__aeabi_d2iz>
 8015a74:	2800      	cmp	r0, #0
 8015a76:	d051      	beq.n	8015b1c <__kernel_sin+0xd4>
 8015a78:	4622      	mov	r2, r4
 8015a7a:	462b      	mov	r3, r5
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	4629      	mov	r1, r5
 8015a80:	f7ea fdd4 	bl	800062c <__aeabi_dmul>
 8015a84:	4682      	mov	sl, r0
 8015a86:	468b      	mov	fp, r1
 8015a88:	4602      	mov	r2, r0
 8015a8a:	460b      	mov	r3, r1
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	4629      	mov	r1, r5
 8015a90:	f7ea fdcc 	bl	800062c <__aeabi_dmul>
 8015a94:	a341      	add	r3, pc, #260	; (adr r3, 8015b9c <__kernel_sin+0x154>)
 8015a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a9a:	4680      	mov	r8, r0
 8015a9c:	4689      	mov	r9, r1
 8015a9e:	4650      	mov	r0, sl
 8015aa0:	4659      	mov	r1, fp
 8015aa2:	f7ea fdc3 	bl	800062c <__aeabi_dmul>
 8015aa6:	a33f      	add	r3, pc, #252	; (adr r3, 8015ba4 <__kernel_sin+0x15c>)
 8015aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aac:	f7ea fc06 	bl	80002bc <__aeabi_dsub>
 8015ab0:	4652      	mov	r2, sl
 8015ab2:	465b      	mov	r3, fp
 8015ab4:	f7ea fdba 	bl	800062c <__aeabi_dmul>
 8015ab8:	a33c      	add	r3, pc, #240	; (adr r3, 8015bac <__kernel_sin+0x164>)
 8015aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015abe:	f7ea fbff 	bl	80002c0 <__adddf3>
 8015ac2:	4652      	mov	r2, sl
 8015ac4:	465b      	mov	r3, fp
 8015ac6:	f7ea fdb1 	bl	800062c <__aeabi_dmul>
 8015aca:	a33a      	add	r3, pc, #232	; (adr r3, 8015bb4 <__kernel_sin+0x16c>)
 8015acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ad0:	f7ea fbf4 	bl	80002bc <__aeabi_dsub>
 8015ad4:	4652      	mov	r2, sl
 8015ad6:	465b      	mov	r3, fp
 8015ad8:	f7ea fda8 	bl	800062c <__aeabi_dmul>
 8015adc:	a337      	add	r3, pc, #220	; (adr r3, 8015bbc <__kernel_sin+0x174>)
 8015ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae2:	f7ea fbed 	bl	80002c0 <__adddf3>
 8015ae6:	9b01      	ldr	r3, [sp, #4]
 8015ae8:	4606      	mov	r6, r0
 8015aea:	460f      	mov	r7, r1
 8015aec:	b9eb      	cbnz	r3, 8015b2a <__kernel_sin+0xe2>
 8015aee:	4602      	mov	r2, r0
 8015af0:	460b      	mov	r3, r1
 8015af2:	4650      	mov	r0, sl
 8015af4:	4659      	mov	r1, fp
 8015af6:	f7ea fd99 	bl	800062c <__aeabi_dmul>
 8015afa:	a325      	add	r3, pc, #148	; (adr r3, 8015b90 <__kernel_sin+0x148>)
 8015afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b00:	f7ea fbdc 	bl	80002bc <__aeabi_dsub>
 8015b04:	4642      	mov	r2, r8
 8015b06:	464b      	mov	r3, r9
 8015b08:	f7ea fd90 	bl	800062c <__aeabi_dmul>
 8015b0c:	4602      	mov	r2, r0
 8015b0e:	460b      	mov	r3, r1
 8015b10:	4620      	mov	r0, r4
 8015b12:	4629      	mov	r1, r5
 8015b14:	f7ea fbd4 	bl	80002c0 <__adddf3>
 8015b18:	4604      	mov	r4, r0
 8015b1a:	460d      	mov	r5, r1
 8015b1c:	ec45 4b10 	vmov	d0, r4, r5
 8015b20:	b003      	add	sp, #12
 8015b22:	ecbd 8b04 	vpop	{d8-d9}
 8015b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b2a:	4b1b      	ldr	r3, [pc, #108]	; (8015b98 <__kernel_sin+0x150>)
 8015b2c:	ec51 0b18 	vmov	r0, r1, d8
 8015b30:	2200      	movs	r2, #0
 8015b32:	f7ea fd7b 	bl	800062c <__aeabi_dmul>
 8015b36:	4632      	mov	r2, r6
 8015b38:	ec41 0b19 	vmov	d9, r0, r1
 8015b3c:	463b      	mov	r3, r7
 8015b3e:	4640      	mov	r0, r8
 8015b40:	4649      	mov	r1, r9
 8015b42:	f7ea fd73 	bl	800062c <__aeabi_dmul>
 8015b46:	4602      	mov	r2, r0
 8015b48:	460b      	mov	r3, r1
 8015b4a:	ec51 0b19 	vmov	r0, r1, d9
 8015b4e:	f7ea fbb5 	bl	80002bc <__aeabi_dsub>
 8015b52:	4652      	mov	r2, sl
 8015b54:	465b      	mov	r3, fp
 8015b56:	f7ea fd69 	bl	800062c <__aeabi_dmul>
 8015b5a:	ec53 2b18 	vmov	r2, r3, d8
 8015b5e:	f7ea fbad 	bl	80002bc <__aeabi_dsub>
 8015b62:	a30b      	add	r3, pc, #44	; (adr r3, 8015b90 <__kernel_sin+0x148>)
 8015b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b68:	4606      	mov	r6, r0
 8015b6a:	460f      	mov	r7, r1
 8015b6c:	4640      	mov	r0, r8
 8015b6e:	4649      	mov	r1, r9
 8015b70:	f7ea fd5c 	bl	800062c <__aeabi_dmul>
 8015b74:	4602      	mov	r2, r0
 8015b76:	460b      	mov	r3, r1
 8015b78:	4630      	mov	r0, r6
 8015b7a:	4639      	mov	r1, r7
 8015b7c:	f7ea fba0 	bl	80002c0 <__adddf3>
 8015b80:	4602      	mov	r2, r0
 8015b82:	460b      	mov	r3, r1
 8015b84:	4620      	mov	r0, r4
 8015b86:	4629      	mov	r1, r5
 8015b88:	f7ea fb98 	bl	80002bc <__aeabi_dsub>
 8015b8c:	e7c4      	b.n	8015b18 <__kernel_sin+0xd0>
 8015b8e:	bf00      	nop
 8015b90:	55555549 	.word	0x55555549
 8015b94:	3fc55555 	.word	0x3fc55555
 8015b98:	3fe00000 	.word	0x3fe00000
 8015b9c:	5acfd57c 	.word	0x5acfd57c
 8015ba0:	3de5d93a 	.word	0x3de5d93a
 8015ba4:	8a2b9ceb 	.word	0x8a2b9ceb
 8015ba8:	3e5ae5e6 	.word	0x3e5ae5e6
 8015bac:	57b1fe7d 	.word	0x57b1fe7d
 8015bb0:	3ec71de3 	.word	0x3ec71de3
 8015bb4:	19c161d5 	.word	0x19c161d5
 8015bb8:	3f2a01a0 	.word	0x3f2a01a0
 8015bbc:	1110f8a6 	.word	0x1110f8a6
 8015bc0:	3f811111 	.word	0x3f811111
 8015bc4:	00000000 	.word	0x00000000

08015bc8 <__kernel_tan>:
 8015bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bcc:	ed2d 8b06 	vpush	{d8-d10}
 8015bd0:	ec5b ab10 	vmov	sl, fp, d0
 8015bd4:	4be0      	ldr	r3, [pc, #896]	; (8015f58 <__kernel_tan+0x390>)
 8015bd6:	b083      	sub	sp, #12
 8015bd8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8015bdc:	429f      	cmp	r7, r3
 8015bde:	ec59 8b11 	vmov	r8, r9, d1
 8015be2:	4606      	mov	r6, r0
 8015be4:	f8cd b000 	str.w	fp, [sp]
 8015be8:	dc61      	bgt.n	8015cae <__kernel_tan+0xe6>
 8015bea:	ee10 0a10 	vmov	r0, s0
 8015bee:	4659      	mov	r1, fp
 8015bf0:	f7ea ffcc 	bl	8000b8c <__aeabi_d2iz>
 8015bf4:	4605      	mov	r5, r0
 8015bf6:	2800      	cmp	r0, #0
 8015bf8:	f040 8083 	bne.w	8015d02 <__kernel_tan+0x13a>
 8015bfc:	1c73      	adds	r3, r6, #1
 8015bfe:	4652      	mov	r2, sl
 8015c00:	4313      	orrs	r3, r2
 8015c02:	433b      	orrs	r3, r7
 8015c04:	d112      	bne.n	8015c2c <__kernel_tan+0x64>
 8015c06:	ec4b ab10 	vmov	d0, sl, fp
 8015c0a:	f000 fa17 	bl	801603c <fabs>
 8015c0e:	49d3      	ldr	r1, [pc, #844]	; (8015f5c <__kernel_tan+0x394>)
 8015c10:	ec53 2b10 	vmov	r2, r3, d0
 8015c14:	2000      	movs	r0, #0
 8015c16:	f7ea fe33 	bl	8000880 <__aeabi_ddiv>
 8015c1a:	4682      	mov	sl, r0
 8015c1c:	468b      	mov	fp, r1
 8015c1e:	ec4b ab10 	vmov	d0, sl, fp
 8015c22:	b003      	add	sp, #12
 8015c24:	ecbd 8b06 	vpop	{d8-d10}
 8015c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c2c:	2e01      	cmp	r6, #1
 8015c2e:	d0f6      	beq.n	8015c1e <__kernel_tan+0x56>
 8015c30:	4642      	mov	r2, r8
 8015c32:	464b      	mov	r3, r9
 8015c34:	4650      	mov	r0, sl
 8015c36:	4659      	mov	r1, fp
 8015c38:	f7ea fb42 	bl	80002c0 <__adddf3>
 8015c3c:	4602      	mov	r2, r0
 8015c3e:	460b      	mov	r3, r1
 8015c40:	460f      	mov	r7, r1
 8015c42:	2000      	movs	r0, #0
 8015c44:	49c6      	ldr	r1, [pc, #792]	; (8015f60 <__kernel_tan+0x398>)
 8015c46:	f7ea fe1b 	bl	8000880 <__aeabi_ddiv>
 8015c4a:	e9cd 0100 	strd	r0, r1, [sp]
 8015c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015c52:	462e      	mov	r6, r5
 8015c54:	4652      	mov	r2, sl
 8015c56:	462c      	mov	r4, r5
 8015c58:	4630      	mov	r0, r6
 8015c5a:	461d      	mov	r5, r3
 8015c5c:	4639      	mov	r1, r7
 8015c5e:	465b      	mov	r3, fp
 8015c60:	f7ea fb2c 	bl	80002bc <__aeabi_dsub>
 8015c64:	4602      	mov	r2, r0
 8015c66:	460b      	mov	r3, r1
 8015c68:	4640      	mov	r0, r8
 8015c6a:	4649      	mov	r1, r9
 8015c6c:	f7ea fb26 	bl	80002bc <__aeabi_dsub>
 8015c70:	4632      	mov	r2, r6
 8015c72:	462b      	mov	r3, r5
 8015c74:	f7ea fcda 	bl	800062c <__aeabi_dmul>
 8015c78:	4632      	mov	r2, r6
 8015c7a:	4680      	mov	r8, r0
 8015c7c:	4689      	mov	r9, r1
 8015c7e:	462b      	mov	r3, r5
 8015c80:	4630      	mov	r0, r6
 8015c82:	4639      	mov	r1, r7
 8015c84:	f7ea fcd2 	bl	800062c <__aeabi_dmul>
 8015c88:	4bb4      	ldr	r3, [pc, #720]	; (8015f5c <__kernel_tan+0x394>)
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	f7ea fb18 	bl	80002c0 <__adddf3>
 8015c90:	4602      	mov	r2, r0
 8015c92:	460b      	mov	r3, r1
 8015c94:	4640      	mov	r0, r8
 8015c96:	4649      	mov	r1, r9
 8015c98:	f7ea fb12 	bl	80002c0 <__adddf3>
 8015c9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ca0:	f7ea fcc4 	bl	800062c <__aeabi_dmul>
 8015ca4:	4622      	mov	r2, r4
 8015ca6:	462b      	mov	r3, r5
 8015ca8:	f7ea fb0a 	bl	80002c0 <__adddf3>
 8015cac:	e7b5      	b.n	8015c1a <__kernel_tan+0x52>
 8015cae:	4bad      	ldr	r3, [pc, #692]	; (8015f64 <__kernel_tan+0x39c>)
 8015cb0:	429f      	cmp	r7, r3
 8015cb2:	dd26      	ble.n	8015d02 <__kernel_tan+0x13a>
 8015cb4:	9b00      	ldr	r3, [sp, #0]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	da09      	bge.n	8015cce <__kernel_tan+0x106>
 8015cba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015cbe:	469b      	mov	fp, r3
 8015cc0:	ee10 aa10 	vmov	sl, s0
 8015cc4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015cc8:	ee11 8a10 	vmov	r8, s2
 8015ccc:	4699      	mov	r9, r3
 8015cce:	4652      	mov	r2, sl
 8015cd0:	465b      	mov	r3, fp
 8015cd2:	a183      	add	r1, pc, #524	; (adr r1, 8015ee0 <__kernel_tan+0x318>)
 8015cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015cd8:	f7ea faf0 	bl	80002bc <__aeabi_dsub>
 8015cdc:	4642      	mov	r2, r8
 8015cde:	464b      	mov	r3, r9
 8015ce0:	4604      	mov	r4, r0
 8015ce2:	460d      	mov	r5, r1
 8015ce4:	a180      	add	r1, pc, #512	; (adr r1, 8015ee8 <__kernel_tan+0x320>)
 8015ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015cea:	f7ea fae7 	bl	80002bc <__aeabi_dsub>
 8015cee:	4622      	mov	r2, r4
 8015cf0:	462b      	mov	r3, r5
 8015cf2:	f7ea fae5 	bl	80002c0 <__adddf3>
 8015cf6:	f04f 0800 	mov.w	r8, #0
 8015cfa:	4682      	mov	sl, r0
 8015cfc:	468b      	mov	fp, r1
 8015cfe:	f04f 0900 	mov.w	r9, #0
 8015d02:	4652      	mov	r2, sl
 8015d04:	465b      	mov	r3, fp
 8015d06:	4650      	mov	r0, sl
 8015d08:	4659      	mov	r1, fp
 8015d0a:	f7ea fc8f 	bl	800062c <__aeabi_dmul>
 8015d0e:	4602      	mov	r2, r0
 8015d10:	460b      	mov	r3, r1
 8015d12:	ec43 2b18 	vmov	d8, r2, r3
 8015d16:	f7ea fc89 	bl	800062c <__aeabi_dmul>
 8015d1a:	ec53 2b18 	vmov	r2, r3, d8
 8015d1e:	4604      	mov	r4, r0
 8015d20:	460d      	mov	r5, r1
 8015d22:	4650      	mov	r0, sl
 8015d24:	4659      	mov	r1, fp
 8015d26:	f7ea fc81 	bl	800062c <__aeabi_dmul>
 8015d2a:	a371      	add	r3, pc, #452	; (adr r3, 8015ef0 <__kernel_tan+0x328>)
 8015d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d30:	ec41 0b19 	vmov	d9, r0, r1
 8015d34:	4620      	mov	r0, r4
 8015d36:	4629      	mov	r1, r5
 8015d38:	f7ea fc78 	bl	800062c <__aeabi_dmul>
 8015d3c:	a36e      	add	r3, pc, #440	; (adr r3, 8015ef8 <__kernel_tan+0x330>)
 8015d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d42:	f7ea fabd 	bl	80002c0 <__adddf3>
 8015d46:	4622      	mov	r2, r4
 8015d48:	462b      	mov	r3, r5
 8015d4a:	f7ea fc6f 	bl	800062c <__aeabi_dmul>
 8015d4e:	a36c      	add	r3, pc, #432	; (adr r3, 8015f00 <__kernel_tan+0x338>)
 8015d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d54:	f7ea fab4 	bl	80002c0 <__adddf3>
 8015d58:	4622      	mov	r2, r4
 8015d5a:	462b      	mov	r3, r5
 8015d5c:	f7ea fc66 	bl	800062c <__aeabi_dmul>
 8015d60:	a369      	add	r3, pc, #420	; (adr r3, 8015f08 <__kernel_tan+0x340>)
 8015d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d66:	f7ea faab 	bl	80002c0 <__adddf3>
 8015d6a:	4622      	mov	r2, r4
 8015d6c:	462b      	mov	r3, r5
 8015d6e:	f7ea fc5d 	bl	800062c <__aeabi_dmul>
 8015d72:	a367      	add	r3, pc, #412	; (adr r3, 8015f10 <__kernel_tan+0x348>)
 8015d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d78:	f7ea faa2 	bl	80002c0 <__adddf3>
 8015d7c:	4622      	mov	r2, r4
 8015d7e:	462b      	mov	r3, r5
 8015d80:	f7ea fc54 	bl	800062c <__aeabi_dmul>
 8015d84:	a364      	add	r3, pc, #400	; (adr r3, 8015f18 <__kernel_tan+0x350>)
 8015d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d8a:	f7ea fa99 	bl	80002c0 <__adddf3>
 8015d8e:	ec53 2b18 	vmov	r2, r3, d8
 8015d92:	f7ea fc4b 	bl	800062c <__aeabi_dmul>
 8015d96:	a362      	add	r3, pc, #392	; (adr r3, 8015f20 <__kernel_tan+0x358>)
 8015d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d9c:	ec41 0b1a 	vmov	d10, r0, r1
 8015da0:	4620      	mov	r0, r4
 8015da2:	4629      	mov	r1, r5
 8015da4:	f7ea fc42 	bl	800062c <__aeabi_dmul>
 8015da8:	a35f      	add	r3, pc, #380	; (adr r3, 8015f28 <__kernel_tan+0x360>)
 8015daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dae:	f7ea fa87 	bl	80002c0 <__adddf3>
 8015db2:	4622      	mov	r2, r4
 8015db4:	462b      	mov	r3, r5
 8015db6:	f7ea fc39 	bl	800062c <__aeabi_dmul>
 8015dba:	a35d      	add	r3, pc, #372	; (adr r3, 8015f30 <__kernel_tan+0x368>)
 8015dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dc0:	f7ea fa7e 	bl	80002c0 <__adddf3>
 8015dc4:	4622      	mov	r2, r4
 8015dc6:	462b      	mov	r3, r5
 8015dc8:	f7ea fc30 	bl	800062c <__aeabi_dmul>
 8015dcc:	a35a      	add	r3, pc, #360	; (adr r3, 8015f38 <__kernel_tan+0x370>)
 8015dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dd2:	f7ea fa75 	bl	80002c0 <__adddf3>
 8015dd6:	4622      	mov	r2, r4
 8015dd8:	462b      	mov	r3, r5
 8015dda:	f7ea fc27 	bl	800062c <__aeabi_dmul>
 8015dde:	a358      	add	r3, pc, #352	; (adr r3, 8015f40 <__kernel_tan+0x378>)
 8015de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015de4:	f7ea fa6c 	bl	80002c0 <__adddf3>
 8015de8:	4622      	mov	r2, r4
 8015dea:	462b      	mov	r3, r5
 8015dec:	f7ea fc1e 	bl	800062c <__aeabi_dmul>
 8015df0:	a355      	add	r3, pc, #340	; (adr r3, 8015f48 <__kernel_tan+0x380>)
 8015df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015df6:	f7ea fa63 	bl	80002c0 <__adddf3>
 8015dfa:	4602      	mov	r2, r0
 8015dfc:	460b      	mov	r3, r1
 8015dfe:	ec51 0b1a 	vmov	r0, r1, d10
 8015e02:	f7ea fa5d 	bl	80002c0 <__adddf3>
 8015e06:	ec53 2b19 	vmov	r2, r3, d9
 8015e0a:	f7ea fc0f 	bl	800062c <__aeabi_dmul>
 8015e0e:	4642      	mov	r2, r8
 8015e10:	464b      	mov	r3, r9
 8015e12:	f7ea fa55 	bl	80002c0 <__adddf3>
 8015e16:	ec53 2b18 	vmov	r2, r3, d8
 8015e1a:	f7ea fc07 	bl	800062c <__aeabi_dmul>
 8015e1e:	4642      	mov	r2, r8
 8015e20:	464b      	mov	r3, r9
 8015e22:	f7ea fa4d 	bl	80002c0 <__adddf3>
 8015e26:	a34a      	add	r3, pc, #296	; (adr r3, 8015f50 <__kernel_tan+0x388>)
 8015e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e2c:	4604      	mov	r4, r0
 8015e2e:	460d      	mov	r5, r1
 8015e30:	ec51 0b19 	vmov	r0, r1, d9
 8015e34:	f7ea fbfa 	bl	800062c <__aeabi_dmul>
 8015e38:	4622      	mov	r2, r4
 8015e3a:	462b      	mov	r3, r5
 8015e3c:	f7ea fa40 	bl	80002c0 <__adddf3>
 8015e40:	460b      	mov	r3, r1
 8015e42:	ec41 0b18 	vmov	d8, r0, r1
 8015e46:	4602      	mov	r2, r0
 8015e48:	4659      	mov	r1, fp
 8015e4a:	4650      	mov	r0, sl
 8015e4c:	f7ea fa38 	bl	80002c0 <__adddf3>
 8015e50:	4b44      	ldr	r3, [pc, #272]	; (8015f64 <__kernel_tan+0x39c>)
 8015e52:	429f      	cmp	r7, r3
 8015e54:	4604      	mov	r4, r0
 8015e56:	460d      	mov	r5, r1
 8015e58:	f340 8086 	ble.w	8015f68 <__kernel_tan+0x3a0>
 8015e5c:	4630      	mov	r0, r6
 8015e5e:	f7ea fb7b 	bl	8000558 <__aeabi_i2d>
 8015e62:	4622      	mov	r2, r4
 8015e64:	4680      	mov	r8, r0
 8015e66:	4689      	mov	r9, r1
 8015e68:	462b      	mov	r3, r5
 8015e6a:	4620      	mov	r0, r4
 8015e6c:	4629      	mov	r1, r5
 8015e6e:	f7ea fbdd 	bl	800062c <__aeabi_dmul>
 8015e72:	4642      	mov	r2, r8
 8015e74:	4606      	mov	r6, r0
 8015e76:	460f      	mov	r7, r1
 8015e78:	464b      	mov	r3, r9
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	f7ea fa1f 	bl	80002c0 <__adddf3>
 8015e82:	4602      	mov	r2, r0
 8015e84:	460b      	mov	r3, r1
 8015e86:	4630      	mov	r0, r6
 8015e88:	4639      	mov	r1, r7
 8015e8a:	f7ea fcf9 	bl	8000880 <__aeabi_ddiv>
 8015e8e:	ec53 2b18 	vmov	r2, r3, d8
 8015e92:	f7ea fa13 	bl	80002bc <__aeabi_dsub>
 8015e96:	4602      	mov	r2, r0
 8015e98:	460b      	mov	r3, r1
 8015e9a:	4650      	mov	r0, sl
 8015e9c:	4659      	mov	r1, fp
 8015e9e:	f7ea fa0d 	bl	80002bc <__aeabi_dsub>
 8015ea2:	4602      	mov	r2, r0
 8015ea4:	460b      	mov	r3, r1
 8015ea6:	f7ea fa0b 	bl	80002c0 <__adddf3>
 8015eaa:	4602      	mov	r2, r0
 8015eac:	460b      	mov	r3, r1
 8015eae:	4640      	mov	r0, r8
 8015eb0:	4649      	mov	r1, r9
 8015eb2:	f7ea fa03 	bl	80002bc <__aeabi_dsub>
 8015eb6:	9b00      	ldr	r3, [sp, #0]
 8015eb8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8015ebc:	f00a 0a02 	and.w	sl, sl, #2
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	f1ca 0001 	rsb	r0, sl, #1
 8015ec6:	460d      	mov	r5, r1
 8015ec8:	f7ea fb46 	bl	8000558 <__aeabi_i2d>
 8015ecc:	4602      	mov	r2, r0
 8015ece:	460b      	mov	r3, r1
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	4629      	mov	r1, r5
 8015ed4:	f7ea fbaa 	bl	800062c <__aeabi_dmul>
 8015ed8:	e69f      	b.n	8015c1a <__kernel_tan+0x52>
 8015eda:	bf00      	nop
 8015edc:	f3af 8000 	nop.w
 8015ee0:	54442d18 	.word	0x54442d18
 8015ee4:	3fe921fb 	.word	0x3fe921fb
 8015ee8:	33145c07 	.word	0x33145c07
 8015eec:	3c81a626 	.word	0x3c81a626
 8015ef0:	74bf7ad4 	.word	0x74bf7ad4
 8015ef4:	3efb2a70 	.word	0x3efb2a70
 8015ef8:	32f0a7e9 	.word	0x32f0a7e9
 8015efc:	3f12b80f 	.word	0x3f12b80f
 8015f00:	1a8d1068 	.word	0x1a8d1068
 8015f04:	3f3026f7 	.word	0x3f3026f7
 8015f08:	fee08315 	.word	0xfee08315
 8015f0c:	3f57dbc8 	.word	0x3f57dbc8
 8015f10:	e96e8493 	.word	0xe96e8493
 8015f14:	3f8226e3 	.word	0x3f8226e3
 8015f18:	1bb341fe 	.word	0x1bb341fe
 8015f1c:	3faba1ba 	.word	0x3faba1ba
 8015f20:	db605373 	.word	0xdb605373
 8015f24:	bef375cb 	.word	0xbef375cb
 8015f28:	a03792a6 	.word	0xa03792a6
 8015f2c:	3f147e88 	.word	0x3f147e88
 8015f30:	f2f26501 	.word	0xf2f26501
 8015f34:	3f4344d8 	.word	0x3f4344d8
 8015f38:	c9560328 	.word	0xc9560328
 8015f3c:	3f6d6d22 	.word	0x3f6d6d22
 8015f40:	8406d637 	.word	0x8406d637
 8015f44:	3f9664f4 	.word	0x3f9664f4
 8015f48:	1110fe7a 	.word	0x1110fe7a
 8015f4c:	3fc11111 	.word	0x3fc11111
 8015f50:	55555563 	.word	0x55555563
 8015f54:	3fd55555 	.word	0x3fd55555
 8015f58:	3e2fffff 	.word	0x3e2fffff
 8015f5c:	3ff00000 	.word	0x3ff00000
 8015f60:	bff00000 	.word	0xbff00000
 8015f64:	3fe59427 	.word	0x3fe59427
 8015f68:	2e01      	cmp	r6, #1
 8015f6a:	d02f      	beq.n	8015fcc <__kernel_tan+0x404>
 8015f6c:	460f      	mov	r7, r1
 8015f6e:	4602      	mov	r2, r0
 8015f70:	460b      	mov	r3, r1
 8015f72:	4689      	mov	r9, r1
 8015f74:	2000      	movs	r0, #0
 8015f76:	4917      	ldr	r1, [pc, #92]	; (8015fd4 <__kernel_tan+0x40c>)
 8015f78:	f7ea fc82 	bl	8000880 <__aeabi_ddiv>
 8015f7c:	2600      	movs	r6, #0
 8015f7e:	e9cd 0100 	strd	r0, r1, [sp]
 8015f82:	4652      	mov	r2, sl
 8015f84:	465b      	mov	r3, fp
 8015f86:	4630      	mov	r0, r6
 8015f88:	4639      	mov	r1, r7
 8015f8a:	f7ea f997 	bl	80002bc <__aeabi_dsub>
 8015f8e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8015f92:	4602      	mov	r2, r0
 8015f94:	460b      	mov	r3, r1
 8015f96:	ec51 0b18 	vmov	r0, r1, d8
 8015f9a:	f7ea f98f 	bl	80002bc <__aeabi_dsub>
 8015f9e:	4632      	mov	r2, r6
 8015fa0:	462b      	mov	r3, r5
 8015fa2:	f7ea fb43 	bl	800062c <__aeabi_dmul>
 8015fa6:	46b0      	mov	r8, r6
 8015fa8:	460f      	mov	r7, r1
 8015faa:	4642      	mov	r2, r8
 8015fac:	462b      	mov	r3, r5
 8015fae:	4634      	mov	r4, r6
 8015fb0:	4649      	mov	r1, r9
 8015fb2:	4606      	mov	r6, r0
 8015fb4:	4640      	mov	r0, r8
 8015fb6:	f7ea fb39 	bl	800062c <__aeabi_dmul>
 8015fba:	4b07      	ldr	r3, [pc, #28]	; (8015fd8 <__kernel_tan+0x410>)
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	f7ea f97f 	bl	80002c0 <__adddf3>
 8015fc2:	4602      	mov	r2, r0
 8015fc4:	460b      	mov	r3, r1
 8015fc6:	4630      	mov	r0, r6
 8015fc8:	4639      	mov	r1, r7
 8015fca:	e665      	b.n	8015c98 <__kernel_tan+0xd0>
 8015fcc:	4682      	mov	sl, r0
 8015fce:	468b      	mov	fp, r1
 8015fd0:	e625      	b.n	8015c1e <__kernel_tan+0x56>
 8015fd2:	bf00      	nop
 8015fd4:	bff00000 	.word	0xbff00000
 8015fd8:	3ff00000 	.word	0x3ff00000

08015fdc <with_errno>:
 8015fdc:	b570      	push	{r4, r5, r6, lr}
 8015fde:	4604      	mov	r4, r0
 8015fe0:	460d      	mov	r5, r1
 8015fe2:	4616      	mov	r6, r2
 8015fe4:	f7fb fc02 	bl	80117ec <__errno>
 8015fe8:	4629      	mov	r1, r5
 8015fea:	6006      	str	r6, [r0, #0]
 8015fec:	4620      	mov	r0, r4
 8015fee:	bd70      	pop	{r4, r5, r6, pc}

08015ff0 <xflow>:
 8015ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ff2:	4614      	mov	r4, r2
 8015ff4:	461d      	mov	r5, r3
 8015ff6:	b108      	cbz	r0, 8015ffc <xflow+0xc>
 8015ff8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015ffc:	e9cd 2300 	strd	r2, r3, [sp]
 8016000:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016004:	4620      	mov	r0, r4
 8016006:	4629      	mov	r1, r5
 8016008:	f7ea fb10 	bl	800062c <__aeabi_dmul>
 801600c:	2222      	movs	r2, #34	; 0x22
 801600e:	b003      	add	sp, #12
 8016010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016014:	f7ff bfe2 	b.w	8015fdc <with_errno>

08016018 <__math_uflow>:
 8016018:	b508      	push	{r3, lr}
 801601a:	2200      	movs	r2, #0
 801601c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8016020:	f7ff ffe6 	bl	8015ff0 <xflow>
 8016024:	ec41 0b10 	vmov	d0, r0, r1
 8016028:	bd08      	pop	{r3, pc}

0801602a <__math_oflow>:
 801602a:	b508      	push	{r3, lr}
 801602c:	2200      	movs	r2, #0
 801602e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8016032:	f7ff ffdd 	bl	8015ff0 <xflow>
 8016036:	ec41 0b10 	vmov	d0, r0, r1
 801603a:	bd08      	pop	{r3, pc}

0801603c <fabs>:
 801603c:	ec51 0b10 	vmov	r0, r1, d0
 8016040:	ee10 2a10 	vmov	r2, s0
 8016044:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016048:	ec43 2b10 	vmov	d0, r2, r3
 801604c:	4770      	bx	lr

0801604e <finite>:
 801604e:	b082      	sub	sp, #8
 8016050:	ed8d 0b00 	vstr	d0, [sp]
 8016054:	9801      	ldr	r0, [sp, #4]
 8016056:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801605a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801605e:	0fc0      	lsrs	r0, r0, #31
 8016060:	b002      	add	sp, #8
 8016062:	4770      	bx	lr
 8016064:	0000      	movs	r0, r0
	...

08016068 <floor>:
 8016068:	ec51 0b10 	vmov	r0, r1, d0
 801606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016070:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8016074:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016078:	2e13      	cmp	r6, #19
 801607a:	ee10 5a10 	vmov	r5, s0
 801607e:	ee10 8a10 	vmov	r8, s0
 8016082:	460c      	mov	r4, r1
 8016084:	dc32      	bgt.n	80160ec <floor+0x84>
 8016086:	2e00      	cmp	r6, #0
 8016088:	da14      	bge.n	80160b4 <floor+0x4c>
 801608a:	a333      	add	r3, pc, #204	; (adr r3, 8016158 <floor+0xf0>)
 801608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016090:	f7ea f916 	bl	80002c0 <__adddf3>
 8016094:	2200      	movs	r2, #0
 8016096:	2300      	movs	r3, #0
 8016098:	f7ea fd58 	bl	8000b4c <__aeabi_dcmpgt>
 801609c:	b138      	cbz	r0, 80160ae <floor+0x46>
 801609e:	2c00      	cmp	r4, #0
 80160a0:	da57      	bge.n	8016152 <floor+0xea>
 80160a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80160a6:	431d      	orrs	r5, r3
 80160a8:	d001      	beq.n	80160ae <floor+0x46>
 80160aa:	4c2d      	ldr	r4, [pc, #180]	; (8016160 <floor+0xf8>)
 80160ac:	2500      	movs	r5, #0
 80160ae:	4621      	mov	r1, r4
 80160b0:	4628      	mov	r0, r5
 80160b2:	e025      	b.n	8016100 <floor+0x98>
 80160b4:	4f2b      	ldr	r7, [pc, #172]	; (8016164 <floor+0xfc>)
 80160b6:	4137      	asrs	r7, r6
 80160b8:	ea01 0307 	and.w	r3, r1, r7
 80160bc:	4303      	orrs	r3, r0
 80160be:	d01f      	beq.n	8016100 <floor+0x98>
 80160c0:	a325      	add	r3, pc, #148	; (adr r3, 8016158 <floor+0xf0>)
 80160c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c6:	f7ea f8fb 	bl	80002c0 <__adddf3>
 80160ca:	2200      	movs	r2, #0
 80160cc:	2300      	movs	r3, #0
 80160ce:	f7ea fd3d 	bl	8000b4c <__aeabi_dcmpgt>
 80160d2:	2800      	cmp	r0, #0
 80160d4:	d0eb      	beq.n	80160ae <floor+0x46>
 80160d6:	2c00      	cmp	r4, #0
 80160d8:	bfbe      	ittt	lt
 80160da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80160de:	fa43 f606 	asrlt.w	r6, r3, r6
 80160e2:	19a4      	addlt	r4, r4, r6
 80160e4:	ea24 0407 	bic.w	r4, r4, r7
 80160e8:	2500      	movs	r5, #0
 80160ea:	e7e0      	b.n	80160ae <floor+0x46>
 80160ec:	2e33      	cmp	r6, #51	; 0x33
 80160ee:	dd0b      	ble.n	8016108 <floor+0xa0>
 80160f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80160f4:	d104      	bne.n	8016100 <floor+0x98>
 80160f6:	ee10 2a10 	vmov	r2, s0
 80160fa:	460b      	mov	r3, r1
 80160fc:	f7ea f8e0 	bl	80002c0 <__adddf3>
 8016100:	ec41 0b10 	vmov	d0, r0, r1
 8016104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016108:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801610c:	f04f 33ff 	mov.w	r3, #4294967295
 8016110:	fa23 f707 	lsr.w	r7, r3, r7
 8016114:	4207      	tst	r7, r0
 8016116:	d0f3      	beq.n	8016100 <floor+0x98>
 8016118:	a30f      	add	r3, pc, #60	; (adr r3, 8016158 <floor+0xf0>)
 801611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801611e:	f7ea f8cf 	bl	80002c0 <__adddf3>
 8016122:	2200      	movs	r2, #0
 8016124:	2300      	movs	r3, #0
 8016126:	f7ea fd11 	bl	8000b4c <__aeabi_dcmpgt>
 801612a:	2800      	cmp	r0, #0
 801612c:	d0bf      	beq.n	80160ae <floor+0x46>
 801612e:	2c00      	cmp	r4, #0
 8016130:	da02      	bge.n	8016138 <floor+0xd0>
 8016132:	2e14      	cmp	r6, #20
 8016134:	d103      	bne.n	801613e <floor+0xd6>
 8016136:	3401      	adds	r4, #1
 8016138:	ea25 0507 	bic.w	r5, r5, r7
 801613c:	e7b7      	b.n	80160ae <floor+0x46>
 801613e:	2301      	movs	r3, #1
 8016140:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016144:	fa03 f606 	lsl.w	r6, r3, r6
 8016148:	4435      	add	r5, r6
 801614a:	4545      	cmp	r5, r8
 801614c:	bf38      	it	cc
 801614e:	18e4      	addcc	r4, r4, r3
 8016150:	e7f2      	b.n	8016138 <floor+0xd0>
 8016152:	2500      	movs	r5, #0
 8016154:	462c      	mov	r4, r5
 8016156:	e7aa      	b.n	80160ae <floor+0x46>
 8016158:	8800759c 	.word	0x8800759c
 801615c:	7e37e43c 	.word	0x7e37e43c
 8016160:	bff00000 	.word	0xbff00000
 8016164:	000fffff 	.word	0x000fffff

08016168 <scalbn>:
 8016168:	b570      	push	{r4, r5, r6, lr}
 801616a:	ec55 4b10 	vmov	r4, r5, d0
 801616e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016172:	4606      	mov	r6, r0
 8016174:	462b      	mov	r3, r5
 8016176:	b99a      	cbnz	r2, 80161a0 <scalbn+0x38>
 8016178:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801617c:	4323      	orrs	r3, r4
 801617e:	d036      	beq.n	80161ee <scalbn+0x86>
 8016180:	4b39      	ldr	r3, [pc, #228]	; (8016268 <scalbn+0x100>)
 8016182:	4629      	mov	r1, r5
 8016184:	ee10 0a10 	vmov	r0, s0
 8016188:	2200      	movs	r2, #0
 801618a:	f7ea fa4f 	bl	800062c <__aeabi_dmul>
 801618e:	4b37      	ldr	r3, [pc, #220]	; (801626c <scalbn+0x104>)
 8016190:	429e      	cmp	r6, r3
 8016192:	4604      	mov	r4, r0
 8016194:	460d      	mov	r5, r1
 8016196:	da10      	bge.n	80161ba <scalbn+0x52>
 8016198:	a32b      	add	r3, pc, #172	; (adr r3, 8016248 <scalbn+0xe0>)
 801619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801619e:	e03a      	b.n	8016216 <scalbn+0xae>
 80161a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80161a4:	428a      	cmp	r2, r1
 80161a6:	d10c      	bne.n	80161c2 <scalbn+0x5a>
 80161a8:	ee10 2a10 	vmov	r2, s0
 80161ac:	4620      	mov	r0, r4
 80161ae:	4629      	mov	r1, r5
 80161b0:	f7ea f886 	bl	80002c0 <__adddf3>
 80161b4:	4604      	mov	r4, r0
 80161b6:	460d      	mov	r5, r1
 80161b8:	e019      	b.n	80161ee <scalbn+0x86>
 80161ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80161be:	460b      	mov	r3, r1
 80161c0:	3a36      	subs	r2, #54	; 0x36
 80161c2:	4432      	add	r2, r6
 80161c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80161c8:	428a      	cmp	r2, r1
 80161ca:	dd08      	ble.n	80161de <scalbn+0x76>
 80161cc:	2d00      	cmp	r5, #0
 80161ce:	a120      	add	r1, pc, #128	; (adr r1, 8016250 <scalbn+0xe8>)
 80161d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161d4:	da1c      	bge.n	8016210 <scalbn+0xa8>
 80161d6:	a120      	add	r1, pc, #128	; (adr r1, 8016258 <scalbn+0xf0>)
 80161d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161dc:	e018      	b.n	8016210 <scalbn+0xa8>
 80161de:	2a00      	cmp	r2, #0
 80161e0:	dd08      	ble.n	80161f4 <scalbn+0x8c>
 80161e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80161e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80161ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80161ee:	ec45 4b10 	vmov	d0, r4, r5
 80161f2:	bd70      	pop	{r4, r5, r6, pc}
 80161f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80161f8:	da19      	bge.n	801622e <scalbn+0xc6>
 80161fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80161fe:	429e      	cmp	r6, r3
 8016200:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8016204:	dd0a      	ble.n	801621c <scalbn+0xb4>
 8016206:	a112      	add	r1, pc, #72	; (adr r1, 8016250 <scalbn+0xe8>)
 8016208:	e9d1 0100 	ldrd	r0, r1, [r1]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d1e2      	bne.n	80161d6 <scalbn+0x6e>
 8016210:	a30f      	add	r3, pc, #60	; (adr r3, 8016250 <scalbn+0xe8>)
 8016212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016216:	f7ea fa09 	bl	800062c <__aeabi_dmul>
 801621a:	e7cb      	b.n	80161b4 <scalbn+0x4c>
 801621c:	a10a      	add	r1, pc, #40	; (adr r1, 8016248 <scalbn+0xe0>)
 801621e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d0b8      	beq.n	8016198 <scalbn+0x30>
 8016226:	a10e      	add	r1, pc, #56	; (adr r1, 8016260 <scalbn+0xf8>)
 8016228:	e9d1 0100 	ldrd	r0, r1, [r1]
 801622c:	e7b4      	b.n	8016198 <scalbn+0x30>
 801622e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016232:	3236      	adds	r2, #54	; 0x36
 8016234:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016238:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801623c:	4620      	mov	r0, r4
 801623e:	4b0c      	ldr	r3, [pc, #48]	; (8016270 <scalbn+0x108>)
 8016240:	2200      	movs	r2, #0
 8016242:	e7e8      	b.n	8016216 <scalbn+0xae>
 8016244:	f3af 8000 	nop.w
 8016248:	c2f8f359 	.word	0xc2f8f359
 801624c:	01a56e1f 	.word	0x01a56e1f
 8016250:	8800759c 	.word	0x8800759c
 8016254:	7e37e43c 	.word	0x7e37e43c
 8016258:	8800759c 	.word	0x8800759c
 801625c:	fe37e43c 	.word	0xfe37e43c
 8016260:	c2f8f359 	.word	0xc2f8f359
 8016264:	81a56e1f 	.word	0x81a56e1f
 8016268:	43500000 	.word	0x43500000
 801626c:	ffff3cb0 	.word	0xffff3cb0
 8016270:	3c900000 	.word	0x3c900000

08016274 <_close>:
 8016274:	4b02      	ldr	r3, [pc, #8]	; (8016280 <_close+0xc>)
 8016276:	2258      	movs	r2, #88	; 0x58
 8016278:	601a      	str	r2, [r3, #0]
 801627a:	f04f 30ff 	mov.w	r0, #4294967295
 801627e:	4770      	bx	lr
 8016280:	20003c28 	.word	0x20003c28

08016284 <_fstat>:
 8016284:	4b02      	ldr	r3, [pc, #8]	; (8016290 <_fstat+0xc>)
 8016286:	2258      	movs	r2, #88	; 0x58
 8016288:	601a      	str	r2, [r3, #0]
 801628a:	f04f 30ff 	mov.w	r0, #4294967295
 801628e:	4770      	bx	lr
 8016290:	20003c28 	.word	0x20003c28

08016294 <_getpid>:
 8016294:	4b02      	ldr	r3, [pc, #8]	; (80162a0 <_getpid+0xc>)
 8016296:	2258      	movs	r2, #88	; 0x58
 8016298:	601a      	str	r2, [r3, #0]
 801629a:	f04f 30ff 	mov.w	r0, #4294967295
 801629e:	4770      	bx	lr
 80162a0:	20003c28 	.word	0x20003c28

080162a4 <_isatty>:
 80162a4:	4b02      	ldr	r3, [pc, #8]	; (80162b0 <_isatty+0xc>)
 80162a6:	2258      	movs	r2, #88	; 0x58
 80162a8:	601a      	str	r2, [r3, #0]
 80162aa:	2000      	movs	r0, #0
 80162ac:	4770      	bx	lr
 80162ae:	bf00      	nop
 80162b0:	20003c28 	.word	0x20003c28

080162b4 <_kill>:
 80162b4:	4b02      	ldr	r3, [pc, #8]	; (80162c0 <_kill+0xc>)
 80162b6:	2258      	movs	r2, #88	; 0x58
 80162b8:	601a      	str	r2, [r3, #0]
 80162ba:	f04f 30ff 	mov.w	r0, #4294967295
 80162be:	4770      	bx	lr
 80162c0:	20003c28 	.word	0x20003c28

080162c4 <_lseek>:
 80162c4:	4b02      	ldr	r3, [pc, #8]	; (80162d0 <_lseek+0xc>)
 80162c6:	2258      	movs	r2, #88	; 0x58
 80162c8:	601a      	str	r2, [r3, #0]
 80162ca:	f04f 30ff 	mov.w	r0, #4294967295
 80162ce:	4770      	bx	lr
 80162d0:	20003c28 	.word	0x20003c28

080162d4 <_read>:
 80162d4:	4b02      	ldr	r3, [pc, #8]	; (80162e0 <_read+0xc>)
 80162d6:	2258      	movs	r2, #88	; 0x58
 80162d8:	601a      	str	r2, [r3, #0]
 80162da:	f04f 30ff 	mov.w	r0, #4294967295
 80162de:	4770      	bx	lr
 80162e0:	20003c28 	.word	0x20003c28

080162e4 <_sbrk>:
 80162e4:	4a04      	ldr	r2, [pc, #16]	; (80162f8 <_sbrk+0x14>)
 80162e6:	6811      	ldr	r1, [r2, #0]
 80162e8:	4603      	mov	r3, r0
 80162ea:	b909      	cbnz	r1, 80162f0 <_sbrk+0xc>
 80162ec:	4903      	ldr	r1, [pc, #12]	; (80162fc <_sbrk+0x18>)
 80162ee:	6011      	str	r1, [r2, #0]
 80162f0:	6810      	ldr	r0, [r2, #0]
 80162f2:	4403      	add	r3, r0
 80162f4:	6013      	str	r3, [r2, #0]
 80162f6:	4770      	bx	lr
 80162f8:	20003c30 	.word	0x20003c30
 80162fc:	20003c38 	.word	0x20003c38

08016300 <_write>:
 8016300:	4b02      	ldr	r3, [pc, #8]	; (801630c <_write+0xc>)
 8016302:	2258      	movs	r2, #88	; 0x58
 8016304:	601a      	str	r2, [r3, #0]
 8016306:	f04f 30ff 	mov.w	r0, #4294967295
 801630a:	4770      	bx	lr
 801630c:	20003c28 	.word	0x20003c28

08016310 <_exit>:
 8016310:	e7fe      	b.n	8016310 <_exit>
	...

08016314 <_init>:
 8016314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016316:	bf00      	nop
 8016318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801631a:	bc08      	pop	{r3}
 801631c:	469e      	mov	lr, r3
 801631e:	4770      	bx	lr

08016320 <_fini>:
 8016320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016322:	bf00      	nop
 8016324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016326:	bc08      	pop	{r3}
 8016328:	469e      	mov	lr, r3
 801632a:	4770      	bx	lr
