
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bbb4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00040430  0801bd68  0801bd68  0002bd68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805c198  0805c198  00070558  2**0
                  CONTENTS
  4 .ARM          00000008  0805c198  0805c198  0006c198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0805c1a0  0805c1a0  00070558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805c1a0  0805c1a0  0006c1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805c1a4  0805c1a4  0006c1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000558  20000000  0805c1a8  00070000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070558  2**0
                  CONTENTS
 10 .bss          00005910  20000558  20000558  00070558  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005e68  20005e68  00070558  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070558  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d702  00000000  00000000  00070588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007868  00000000  00000000  0009dc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022c0  00000000  00000000  000a54f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fd0  00000000  00000000  000a77b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fd88  00000000  00000000  000a9788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035923  00000000  00000000  000d9510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efe15  00000000  00000000  0010ee33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001fec48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000acac  00000000  00000000  001fec98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000558 	.word	0x20000558
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801bd4c 	.word	0x0801bd4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000055c 	.word	0x2000055c
 80001ec:	0801bd4c 	.word	0x0801bd4c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <SD_logger>:
void Send_Uart (char *string)
{
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}

void SD_logger(char *msg){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	Create_Dir("logs");
 8001040:	4806      	ldr	r0, [pc, #24]	; (800105c <SD_logger+0x24>)
 8001042:	f000 fa5b 	bl	80014fc <Create_Dir>
	Create_File("logs/LOG.TXT");
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <SD_logger+0x28>)
 8001048:	f000 f918 	bl	800127c <Create_File>
	Update_File("logs/LOG.TXT", msg);
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <SD_logger+0x28>)
 8001050:	f000 f9a0 	bl	8001394 <Update_File>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0801bd68 	.word	0x0801bd68
 8001060:	0801bd70 	.word	0x0801bd70

08001064 <Mount_SD>:

uint8_t Mount_SD (const TCHAR* path)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4808      	ldr	r0, [pc, #32]	; (8001094 <Mount_SD+0x30>)
 8001072:	f011 fc6b 	bl	801294c <f_mount>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <Mount_SD+0x34>)
 800107c:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
	if (fresult != FR_OK){
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <Mount_SD+0x34>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <Mount_SD+0x26>
		return SD_ERROR;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <Mount_SD+0x28>
	} else{
		return SD_SUCCESS;
 800108a:	2301      	movs	r3, #1
	}
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000574 	.word	0x20000574
 8001098:	200025f0 	.word	0x200025f0

0800109c <Scan_SD_my>:
	else return SD_ERROR;
}

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_SD_my (DIR *dir, char *filename)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

    if (fresult == FR_OK)
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <Scan_SD_my+0x68>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d123      	bne.n	80010f6 <Scan_SD_my+0x5a>
    {
		fresult = f_readdir(dir, &fno);                   /* Read a directory item */
 80010ae:	4916      	ldr	r1, [pc, #88]	; (8001108 <Scan_SD_my+0x6c>)
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f012 fa91 	bl	80135d8 <f_readdir>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <Scan_SD_my+0x68>)
 80010bc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK || fno.fname[0] == 0)  return fresult;  /* Break on error or end of dir */
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <Scan_SD_my+0x68>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <Scan_SD_my+0x32>
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <Scan_SD_my+0x6c>)
 80010c8:	7a5b      	ldrb	r3, [r3, #9]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <Scan_SD_my+0x38>
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <Scan_SD_my+0x68>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	e012      	b.n	80010fa <Scan_SD_my+0x5e>
		if (fno.fattrib & AM_DIR)     /* It is a directory */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <Scan_SD_my+0x6c>)
 80010d6:	7a1b      	ldrb	r3, [r3, #8]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <Scan_SD_my+0x50>
		{
			sprintf (filename, "Dir: %s\r\n", fno.fname);
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <Scan_SD_my+0x70>)
 80010e2:	490b      	ldr	r1, [pc, #44]	; (8001110 <Scan_SD_my+0x74>)
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f013 ff01 	bl	8014eec <siprintf>
 80010ea:	e004      	b.n	80010f6 <Scan_SD_my+0x5a>
		}
		else
		{   /* It is a file. */
		   sprintf(filename,"File: %s\n", fno.fname);
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <Scan_SD_my+0x70>)
 80010ee:	4909      	ldr	r1, [pc, #36]	; (8001114 <Scan_SD_my+0x78>)
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f013 fefb 	bl	8014eec <siprintf>
		}
    }
    return fresult;
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <Scan_SD_my+0x68>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200025f0 	.word	0x200025f0
 8001108:	200025d8 	.word	0x200025d8
 800110c:	200025e1 	.word	0x200025e1
 8001110:	0801bd80 	.word	0x0801bd80
 8001114:	0801bd8c 	.word	0x0801bd8c

08001118 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name, char *outputBuffer)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001122:	494d      	ldr	r1, [pc, #308]	; (8001258 <Read_File+0x140>)
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f012 fa94 	bl	8013652 <f_stat>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <Read_File+0x144>)
 8001130:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001132:	4b4a      	ldr	r3, [pc, #296]	; (800125c <Read_File+0x144>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00f      	beq.n	800115a <Read_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 800113a:	2064      	movs	r0, #100	; 0x64
 800113c:	f012 fd8a 	bl	8013c54 <malloc>
 8001140:	4603      	mov	r3, r0
 8001142:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4946      	ldr	r1, [pc, #280]	; (8001260 <Read_File+0x148>)
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f013 fecf 	bl	8014eec <siprintf>
//		Send_Uart (buf);
		free(buf);
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	f012 fd88 	bl	8013c64 <free>
	    return fresult;
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <Read_File+0x144>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	e07a      	b.n	8001250 <Read_File+0x138>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 800115a:	2201      	movs	r2, #1
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4841      	ldr	r0, [pc, #260]	; (8001264 <Read_File+0x14c>)
 8001160:	f011 fc3a 	bl	80129d8 <f_open>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b3c      	ldr	r3, [pc, #240]	; (800125c <Read_File+0x144>)
 800116a:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <Read_File+0x144>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d012      	beq.n	800119a <Read_File+0x82>
		{
			char *buf = malloc(100*sizeof(char));
 8001174:	2064      	movs	r0, #100	; 0x64
 8001176:	f012 fd6d 	bl	8013c54 <malloc>
 800117a:	4603      	mov	r3, r0
 800117c:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <Read_File+0x144>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4938      	ldr	r1, [pc, #224]	; (8001268 <Read_File+0x150>)
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f013 feaf 	bl	8014eec <siprintf>
//		    Send_Uart(buf);
		    free(buf);
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f012 fd68 	bl	8013c64 <free>
		    return fresult;
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <Read_File+0x144>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	e05a      	b.n	8001250 <Read_File+0x138>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 800119a:	2004      	movs	r0, #4
 800119c:	f012 fd5a 	bl	8013c54 <malloc>
 80011a0:	4603      	mov	r3, r0
 80011a2:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <Read_File+0x14c>)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <Read_File+0x154>)
 80011aa:	69f9      	ldr	r1, [r7, #28]
 80011ac:	482d      	ldr	r0, [pc, #180]	; (8001264 <Read_File+0x14c>)
 80011ae:	f011 fddf 	bl	8012d70 <f_read>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <Read_File+0x144>)
 80011b8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <Read_File+0x144>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d013      	beq.n	80011ea <Read_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 80011c2:	2064      	movs	r0, #100	; 0x64
 80011c4:	f012 fd46 	bl	8013c54 <malloc>
 80011c8:	4603      	mov	r3, r0
 80011ca:	613b      	str	r3, [r7, #16]
			free(buffer);
 80011cc:	69f8      	ldr	r0, [r7, #28]
 80011ce:	f012 fd49 	bl	8013c64 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <Read_File+0x144>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4925      	ldr	r1, [pc, #148]	; (8001270 <Read_File+0x158>)
 80011dc:	6938      	ldr	r0, [r7, #16]
 80011de:	f013 fe85 	bl	8014eec <siprintf>
//		  	Send_Uart(buffer);
		  	free(buf);
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f012 fd3e 	bl	8013c64 <free>
 80011e8:	e030      	b.n	800124c <Read_File+0x134>
		}

		else
		{
//			Send_Uart(buffer);
			strncpy(outputBuffer, buffer, 49);
 80011ea:	2231      	movs	r2, #49	; 0x31
 80011ec:	69f9      	ldr	r1, [r7, #28]
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f013 ff15 	bl	801501e <strncpy>
			free(buffer);
 80011f4:	69f8      	ldr	r0, [r7, #28]
 80011f6:	f012 fd35 	bl	8013c64 <free>

			/* Close file */
			fresult = f_close(&fil);
 80011fa:	481a      	ldr	r0, [pc, #104]	; (8001264 <Read_File+0x14c>)
 80011fc:	f012 f929 	bl	8013452 <f_close>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <Read_File+0x144>)
 8001206:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <Read_File+0x144>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d010      	beq.n	8001232 <Read_File+0x11a>
			{
				char *buf = malloc(100*sizeof(char));
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f012 fd1f 	bl	8013c54 <malloc>
 8001216:	4603      	mov	r3, r0
 8001218:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <Read_File+0x144>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4914      	ldr	r1, [pc, #80]	; (8001274 <Read_File+0x15c>)
 8001224:	6978      	ldr	r0, [r7, #20]
 8001226:	f013 fe61 	bl	8014eec <siprintf>
//				Send_Uart(buf);
				free(buf);
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f012 fd1a 	bl	8013c64 <free>
 8001230:	e00c      	b.n	800124c <Read_File+0x134>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f012 fd0e 	bl	8013c54 <malloc>
 8001238:	4603      	mov	r3, r0
 800123a:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <Read_File+0x160>)
 8001240:	69b8      	ldr	r0, [r7, #24]
 8001242:	f013 fe53 	bl	8014eec <siprintf>
//				Send_Uart(buf);
				free(buf);
 8001246:	69b8      	ldr	r0, [r7, #24]
 8001248:	f012 fd0c 	bl	8013c64 <free>
			}
		}
	    return fresult;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <Read_File+0x144>)
 800124e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001250:	4618      	mov	r0, r3
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200025d8 	.word	0x200025d8
 800125c:	200025f0 	.word	0x200025f0
 8001260:	0801bea4 	.word	0x0801bea4
 8001264:	200015a8 	.word	0x200015a8
 8001268:	0801bde0 	.word	0x0801bde0
 800126c:	200025f4 	.word	0x200025f4
 8001270:	0801bec8 	.word	0x0801bec8
 8001274:	0801bef0 	.word	0x0801bef0
 8001278:	0801bf18 	.word	0x0801bf18

0800127c <Create_File>:

FRESULT Create_File (char *name)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001284:	493b      	ldr	r1, [pc, #236]	; (8001374 <Create_File+0xf8>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f012 f9e3 	bl	8013652 <f_stat>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <Create_File+0xfc>)
 8001292:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <Create_File+0xfc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10f      	bne.n	80012bc <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f012 fcd9 	bl	8013c54 <malloc>
 80012a2:	4603      	mov	r3, r0
 80012a4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4934      	ldr	r1, [pc, #208]	; (800137c <Create_File+0x100>)
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f013 fe1e 	bl	8014eec <siprintf>
//		Send_Uart(buf);
		free(buf);
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f012 fcd7 	bl	8013c64 <free>
	    return fresult;
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <Create_File+0xfc>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	e057      	b.n	800136c <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80012bc:	220b      	movs	r2, #11
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	482f      	ldr	r0, [pc, #188]	; (8001380 <Create_File+0x104>)
 80012c2:	f011 fb89 	bl	80129d8 <f_open>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <Create_File+0xfc>)
 80012cc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <Create_File+0xfc>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d012      	beq.n	80012fc <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f012 fcbc 	bl	8013c54 <malloc>
 80012dc:	4603      	mov	r3, r0
 80012de:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <Create_File+0xfc>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4926      	ldr	r1, [pc, #152]	; (8001384 <Create_File+0x108>)
 80012ea:	6938      	ldr	r0, [r7, #16]
 80012ec:	f013 fdfe 	bl	8014eec <siprintf>
//			Send_Uart(buf);
			free(buf);
 80012f0:	6938      	ldr	r0, [r7, #16]
 80012f2:	f012 fcb7 	bl	8013c64 <free>
		    return fresult;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <Create_File+0xfc>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	e037      	b.n	800136c <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80012fc:	2064      	movs	r0, #100	; 0x64
 80012fe:	f012 fca9 	bl	8013c54 <malloc>
 8001302:	4603      	mov	r3, r0
 8001304:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	491f      	ldr	r1, [pc, #124]	; (8001388 <Create_File+0x10c>)
 800130a:	69f8      	ldr	r0, [r7, #28]
 800130c:	f013 fdee 	bl	8014eec <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001310:	69f8      	ldr	r0, [r7, #28]
 8001312:	f012 fca7 	bl	8013c64 <free>
		}

		fresult = f_close(&fil);
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <Create_File+0x104>)
 8001318:	f012 f89b 	bl	8013452 <f_close>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <Create_File+0xfc>)
 8001322:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <Create_File+0xfc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d010      	beq.n	800134e <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f012 fc91 	bl	8013c54 <malloc>
 8001332:	4603      	mov	r3, r0
 8001334:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <Create_File+0xfc>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4913      	ldr	r1, [pc, #76]	; (800138c <Create_File+0x110>)
 8001340:	6978      	ldr	r0, [r7, #20]
 8001342:	f013 fdd3 	bl	8014eec <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f012 fc8c 	bl	8013c64 <free>
 800134c:	e00c      	b.n	8001368 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	f012 fc80 	bl	8013c54 <malloc>
 8001354:	4603      	mov	r3, r0
 8001356:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <Create_File+0x114>)
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f013 fdc5 	bl	8014eec <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001362:	69b8      	ldr	r0, [r7, #24]
 8001364:	f012 fc7e 	bl	8013c64 <free>
		}
	}
    return fresult;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <Create_File+0xfc>)
 800136a:	781b      	ldrb	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200025d8 	.word	0x200025d8
 8001378:	200025f0 	.word	0x200025f0
 800137c:	0801bf38 	.word	0x0801bf38
 8001380:	200015a8 	.word	0x200015a8
 8001384:	0801bf70 	.word	0x0801bf70
 8001388:	0801bf98 	.word	0x0801bf98
 800138c:	0801bfd8 	.word	0x0801bfd8
 8001390:	0801bf18 	.word	0x0801bf18

08001394 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800139e:	494d      	ldr	r1, [pc, #308]	; (80014d4 <Update_File+0x140>)
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f012 f956 	bl	8013652 <f_stat>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <Update_File+0x144>)
 80013ac:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <Update_File+0x144>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00f      	beq.n	80013d6 <Update_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f012 fc4c 	bl	8013c54 <malloc>
 80013bc:	4603      	mov	r3, r0
 80013be:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4946      	ldr	r1, [pc, #280]	; (80014dc <Update_File+0x148>)
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f013 fd91 	bl	8014eec <siprintf>
//		Send_Uart (buf);
		free(buf);
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f012 fc4a 	bl	8013c64 <free>
	    return fresult;
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <Update_File+0x144>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	e079      	b.n	80014ca <Update_File+0x136>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80013d6:	2232      	movs	r2, #50	; 0x32
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4841      	ldr	r0, [pc, #260]	; (80014e0 <Update_File+0x14c>)
 80013dc:	f011 fafc 	bl	80129d8 <f_open>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <Update_File+0x144>)
 80013e6:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <Update_File+0x144>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d012      	beq.n	8001416 <Update_File+0x82>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	f012 fc2f 	bl	8013c54 <malloc>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <Update_File+0x144>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4938      	ldr	r1, [pc, #224]	; (80014e4 <Update_File+0x150>)
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f013 fd71 	bl	8014eec <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f012 fc2a 	bl	8013c64 <free>
	        return fresult;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <Update_File+0x144>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	e059      	b.n	80014ca <Update_File+0x136>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f7fe fef4 	bl	8000204 <strlen>
 800141c:	4602      	mov	r2, r0
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <Update_File+0x154>)
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	482f      	ldr	r0, [pc, #188]	; (80014e0 <Update_File+0x14c>)
 8001424:	f011 fe03 	bl	801302e <f_write>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <Update_File+0x144>)
 800142e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <Update_File+0x144>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d010      	beq.n	800145a <Update_File+0xc6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f012 fc0b 	bl	8013c54 <malloc>
 800143e:	4603      	mov	r3, r0
 8001440:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <Update_File+0x144>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4928      	ldr	r1, [pc, #160]	; (80014ec <Update_File+0x158>)
 800144c:	69b8      	ldr	r0, [r7, #24]
 800144e:	f013 fd4d 	bl	8014eec <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 8001452:	69b8      	ldr	r0, [r7, #24]
 8001454:	f012 fc06 	bl	8013c64 <free>
 8001458:	e00c      	b.n	8001474 <Update_File+0xe0>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800145a:	2064      	movs	r0, #100	; 0x64
 800145c:	f012 fbfa 	bl	8013c54 <malloc>
 8001460:	4603      	mov	r3, r0
 8001462:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4922      	ldr	r1, [pc, #136]	; (80014f0 <Update_File+0x15c>)
 8001468:	69f8      	ldr	r0, [r7, #28]
 800146a:	f013 fd3f 	bl	8014eec <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800146e:	69f8      	ldr	r0, [r7, #28]
 8001470:	f012 fbf8 	bl	8013c64 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001474:	481a      	ldr	r0, [pc, #104]	; (80014e0 <Update_File+0x14c>)
 8001476:	f011 ffec 	bl	8013452 <f_close>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <Update_File+0x144>)
 8001480:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <Update_File+0x144>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d010      	beq.n	80014ac <Update_File+0x118>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800148a:	2064      	movs	r0, #100	; 0x64
 800148c:	f012 fbe2 	bl	8013c54 <malloc>
 8001490:	4603      	mov	r3, r0
 8001492:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <Update_File+0x144>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4915      	ldr	r1, [pc, #84]	; (80014f4 <Update_File+0x160>)
 800149e:	6938      	ldr	r0, [r7, #16]
 80014a0:	f013 fd24 	bl	8014eec <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80014a4:	6938      	ldr	r0, [r7, #16]
 80014a6:	f012 fbdd 	bl	8013c64 <free>
 80014aa:	e00c      	b.n	80014c6 <Update_File+0x132>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80014ac:	2064      	movs	r0, #100	; 0x64
 80014ae:	f012 fbd1 	bl	8013c54 <malloc>
 80014b2:	4603      	mov	r3, r0
 80014b4:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	490f      	ldr	r1, [pc, #60]	; (80014f8 <Update_File+0x164>)
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f013 fd16 	bl	8014eec <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f012 fbcf 	bl	8013c64 <free>
	     }
	}
    return fresult;
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <Update_File+0x144>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200025d8 	.word	0x200025d8
 80014d8:	200025f0 	.word	0x200025f0
 80014dc:	0801bdc0 	.word	0x0801bdc0
 80014e0:	200015a8 	.word	0x200015a8
 80014e4:	0801bde0 	.word	0x0801bde0
 80014e8:	200025f8 	.word	0x200025f8
 80014ec:	0801bffc 	.word	0x0801bffc
 80014f0:	0801c024 	.word	0x0801c024
 80014f4:	0801bef0 	.word	0x0801bef0
 80014f8:	0801bf18 	.word	0x0801bf18

080014fc <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f012 f992 	bl	801382e <f_mkdir>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <Create_Dir+0x68>)
 8001510:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <Create_Dir+0x68>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <Create_Dir+0x3a>
    {
    	char *buf = malloc(100*sizeof(char));
 800151a:	2064      	movs	r0, #100	; 0x64
 800151c:	f012 fb9a 	bl	8013c54 <malloc>
 8001520:	4603      	mov	r3, r0
 8001522:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4910      	ldr	r1, [pc, #64]	; (8001568 <Create_Dir+0x6c>)
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f013 fcdf 	bl	8014eec <siprintf>
//    	Send_Uart (buf);
    	free(buf);
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f012 fb98 	bl	8013c64 <free>
 8001534:	e00f      	b.n	8001556 <Create_Dir+0x5a>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001536:	2064      	movs	r0, #100	; 0x64
 8001538:	f012 fb8c 	bl	8013c54 <malloc>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <Create_Dir+0x68>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4908      	ldr	r1, [pc, #32]	; (800156c <Create_Dir+0x70>)
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f013 fcce 	bl	8014eec <siprintf>
//    	Send_Uart(buf);
    	free(buf);
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f012 fb87 	bl	8013c64 <free>
    }
    return fresult;
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <Create_Dir+0x68>)
 8001558:	781b      	ldrb	r3, [r3, #0]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200025f0 	.word	0x200025f0
 8001568:	0801c084 	.word	0x0801c084
 800156c:	0801c0a8 	.word	0x0801c0a8

08001570 <Check_SD_Space>:

void Check_SD_Space (char* free_total)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    /* Check free space */
    f_getfree("", &fre_clust, &pfs);
 8001578:	4a30      	ldr	r2, [pc, #192]	; (800163c <Check_SD_Space+0xcc>)
 800157a:	4931      	ldr	r1, [pc, #196]	; (8001640 <Check_SD_Space+0xd0>)
 800157c:	4831      	ldr	r0, [pc, #196]	; (8001644 <Check_SD_Space+0xd4>)
 800157e:	f012 f8a1 	bl	80136c4 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <Check_SD_Space+0xcc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	3b02      	subs	r3, #2
 800158a:	4a2c      	ldr	r2, [pc, #176]	; (800163c <Check_SD_Space+0xcc>)
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	8952      	ldrh	r2, [r2, #10]
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffd5 	bl	8000544 <__aeabi_ui2d>
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <Check_SD_Space+0xd8>)
 80015a0:	f7ff f84a 	bl	8000638 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fb1c 	bl	8000be8 <__aeabi_d2uiz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <Check_SD_Space+0xdc>)
 80015b4:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 80015b6:	201e      	movs	r0, #30
 80015b8:	f012 fb4c 	bl	8013c54 <malloc>
 80015bc:	4603      	mov	r3, r0
 80015be:	60fb      	str	r3, [r7, #12]
    sprintf (buf, "SD CARD Total Size: \t%lu\n",total);
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <Check_SD_Space+0xdc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4922      	ldr	r1, [pc, #136]	; (8001650 <Check_SD_Space+0xe0>)
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f013 fc8f 	bl	8014eec <siprintf>
//    Send_Uart(buf);
    free(buf);
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f012 fb48 	bl	8013c64 <free>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <Check_SD_Space+0xcc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	895b      	ldrh	r3, [r3, #10]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <Check_SD_Space+0xd0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffad 	bl	8000544 <__aeabi_ui2d>
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <Check_SD_Space+0xd8>)
 80015f0:	f7ff f822 	bl	8000638 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff faf4 	bl	8000be8 <__aeabi_d2uiz>
 8001600:	4603      	mov	r3, r0
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <Check_SD_Space+0xe4>)
 8001604:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 8001606:	201e      	movs	r0, #30
 8001608:	f012 fb24 	bl	8013c54 <malloc>
 800160c:	4603      	mov	r3, r0
 800160e:	60fb      	str	r3, [r7, #12]
    sprintf (buf, "SD CARD Free Space: \t%lu\n",free_space);
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <Check_SD_Space+0xe4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4910      	ldr	r1, [pc, #64]	; (8001658 <Check_SD_Space+0xe8>)
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f013 fc67 	bl	8014eec <siprintf>
//    Send_Uart(buf);
    free(buf);
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f012 fb20 	bl	8013c64 <free>
    sprintf (free_total, "%lu/%lu", free_space, total);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <Check_SD_Space+0xe4>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <Check_SD_Space+0xdc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	490b      	ldr	r1, [pc, #44]	; (800165c <Check_SD_Space+0xec>)
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f013 fc5c 	bl	8014eec <siprintf>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200025fc 	.word	0x200025fc
 8001640:	20002600 	.word	0x20002600
 8001644:	0801c0d4 	.word	0x0801c0d4
 8001648:	3fe00000 	.word	0x3fe00000
 800164c:	20002604 	.word	0x20002604
 8001650:	0801c0d8 	.word	0x0801c0d8
 8001654:	20002608 	.word	0x20002608
 8001658:	0801c0f4 	.word	0x0801c0f4
 800165c:	0801c110 	.word	0x0801c110

08001660 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 800166a:	2300      	movs	r3, #0
 800166c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800166e:	2332      	movs	r3, #50	; 0x32
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	2301      	movs	r3, #1
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	22d0      	movs	r2, #208	; 0xd0
 800167e:	21ef      	movs	r1, #239	; 0xef
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <read_chip_id+0x3c>)
 8001682:	f009 fca7 	bl	800afd4 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001686:	79bb      	ldrb	r3, [r7, #6]
 8001688:	2b55      	cmp	r3, #85	; 0x55
 800168a:	d001      	beq.n	8001690 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 800168c:	2301      	movs	r3, #1
 800168e:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001690:	79fb      	ldrb	r3, [r7, #7]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20002740 	.word	0x20002740

080016a0 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80016ac:	2300      	movs	r3, #0
 80016ae:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d81a      	bhi.n	80016ec <set_oss+0x4c>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <set_oss+0x1c>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	080016d5 	.word	0x080016d5
 80016c4:	080016dd 	.word	0x080016dd
 80016c8:	080016e5 	.word	0x080016e5
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2205      	movs	r2, #5
 80016d0:	705a      	strb	r2, [r3, #1]
			break;
 80016d2:	e00f      	b.n	80016f4 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2208      	movs	r2, #8
 80016d8:	705a      	strb	r2, [r3, #1]
			break;
 80016da:	e00b      	b.n	80016f4 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	220e      	movs	r2, #14
 80016e0:	705a      	strb	r2, [r3, #1]
			break;
 80016e2:	e007      	b.n	80016f4 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	221a      	movs	r2, #26
 80016e8:	705a      	strb	r2, [r3, #1]
			break;
 80016ea:	e003      	b.n	80016f4 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2208      	movs	r2, #8
 80016f0:	705a      	strb	r2, [r3, #1]
			break;
 80016f2:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	019b      	lsls	r3, r3, #6
 80016fe:	70fb      	strb	r3, [r7, #3]
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001704:	2332      	movs	r3, #50	; 0x32
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2302      	movs	r3, #2
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	22f4      	movs	r2, #244	; 0xf4
 8001716:	21ee      	movs	r1, #238	; 0xee
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <set_oss+0x88>)
 800171a:	f009 fb61 	bl	800ade0 <HAL_I2C_Mem_Write>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20002740 	.word	0x20002740

0800172c <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08e      	sub	sp, #56	; 0x38
 8001730:	af04      	add	r7, sp, #16
 8001732:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800175a:	2332      	movs	r3, #50	; 0x32
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2316      	movs	r3, #22
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	22aa      	movs	r2, #170	; 0xaa
 800176c:	21ef      	movs	r1, #239	; 0xef
 800176e:	4827      	ldr	r0, [pc, #156]	; (800180c <read_calib_data+0xe0>)
 8001770:	f009 fc30 	bl	800afd4 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800177a:	e03c      	b.n	80017f6 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800177c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	3328      	adds	r3, #40	; 0x28
 8001784:	443b      	add	r3, r7
 8001786:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	b219      	sxth	r1, r3
 800178e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001792:	3328      	adds	r3, #40	; 0x28
 8001794:	443b      	add	r3, r7
 8001796:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800179a:	b21a      	sxth	r2, r3
 800179c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4403      	add	r3, r0
 80017a6:	430a      	orrs	r2, r1
 80017a8:	b212      	sxth	r2, r2
 80017aa:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80017ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	440b      	add	r3, r1
 80017ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80017ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f0:	3301      	adds	r3, #1
 80017f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017fa:	2b0b      	cmp	r3, #11
 80017fc:	d9be      	bls.n	800177c <read_calib_data+0x50>
		}
	}

	return ret_val;
 80017fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001802:	4618      	mov	r0, r3
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20002740 	.word	0x20002740

08001810 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2204      	movs	r2, #4
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f012 fa36 	bl	8013c90 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001824:	687c      	ldr	r4, [r7, #4]
 8001826:	f7ff ff1b 	bl	8001660 <read_chip_id>
 800182a:	4603      	mov	r3, r0
 800182c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	687c      	ldr	r4, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff79 	bl	800172c <read_calib_data>
 800183a:	4603      	mov	r3, r0
 800183c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3340      	adds	r3, #64	; 0x40
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff2a 	bl	80016a0 <set_oss>
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800185a:	232e      	movs	r3, #46	; 0x2e
 800185c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800185e:	2332      	movs	r3, #50	; 0x32
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2301      	movs	r3, #1
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	22f4      	movs	r2, #244	; 0xf4
 800186e:	21ee      	movs	r1, #238	; 0xee
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <get_ut+0x50>)
 8001872:	f009 fab5 	bl	800ade0 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001876:	2005      	movs	r0, #5
 8001878:	f008 fd96 	bl	800a3a8 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800187c:	2332      	movs	r3, #50	; 0x32
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	2302      	movs	r3, #2
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	22f6      	movs	r2, #246	; 0xf6
 800188c:	21ef      	movs	r1, #239	; 0xef
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <get_ut+0x50>)
 8001890:	f009 fba0 	bl	800afd4 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001894:	793b      	ldrb	r3, [r7, #4]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	797a      	ldrb	r2, [r7, #5]
 800189a:	4313      	orrs	r3, r2
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20002740 	.word	0x20002740

080018a8 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80018c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c8:	ee17 2a90 	vmov	r2, s15
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	895b      	ldrh	r3, [r3, #10]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	8912      	ldrh	r2, [r2, #8]
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	13db      	asrs	r3, r3, #15
 80018dc:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018e4:	02da      	lsls	r2, r3, #11
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018ec:	4619      	mov	r1, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	440b      	add	r3, r1
 80018f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f6:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	441a      	add	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	3308      	adds	r3, #8
 8001908:	111b      	asrs	r3, r3, #4
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001912:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001960 <get_temp+0xb8>
 8001916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191a:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800191e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001922:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001964 <get_temp+0xbc>
 8001926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	d908      	bls.n	8001942 <get_temp+0x9a>
 8001930:	edd7 7a03 	vldr	s15, [r7, #12]
 8001934:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001968 <get_temp+0xc0>
 8001938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	db03      	blt.n	800194a <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2203      	movs	r2, #3
 8001946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	ee07 3a90 	vmov	s15, r3
}
 8001950:	eeb0 0a67 	vmov.f32	s0, s15
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	3dcccccd 	.word	0x3dcccccd
 8001964:	c2200000 	.word	0xc2200000
 8001968:	42aa0000 	.word	0x42aa0000

0800196c <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af04      	add	r7, sp, #16
 8001972:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <get_up+0x7c>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	813b      	strh	r3, [r7, #8]
 800197a:	2300      	movs	r3, #0
 800197c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 8001982:	2334      	movs	r3, #52	; 0x34
 8001984:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001986:	2332      	movs	r3, #50	; 0x32
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2301      	movs	r3, #1
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	22f4      	movs	r2, #244	; 0xf4
 8001998:	21ee      	movs	r1, #238	; 0xee
 800199a:	4814      	ldr	r0, [pc, #80]	; (80019ec <get_up+0x80>)
 800199c:	f009 fa20 	bl	800ade0 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80019a0:	797b      	ldrb	r3, [r7, #5]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f008 fd00 	bl	800a3a8 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80019a8:	2332      	movs	r3, #50	; 0x32
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2303      	movs	r3, #3
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	22f6      	movs	r2, #246	; 0xf6
 80019ba:	21ef      	movs	r1, #239	; 0xef
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <get_up+0x80>)
 80019be:	f009 fb09 	bl	800afd4 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80019c2:	7a3b      	ldrb	r3, [r7, #8]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	7a7b      	ldrb	r3, [r7, #9]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	4413      	add	r3, r2
 80019cc:	7aba      	ldrb	r2, [r7, #10]
 80019ce:	441a      	add	r2, r3
 80019d0:	793b      	ldrb	r3, [r7, #4]
 80019d2:	f1c3 0308 	rsb	r3, r3, #8
 80019d6:	fa42 f303 	asr.w	r3, r2, r3
 80019da:	60fb      	str	r3, [r7, #12]
	return up;
 80019dc:	68fb      	ldr	r3, [r7, #12]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	0801c118 	.word	0x0801c118
 80019ec:	20002740 	.word	0x20002740

080019f0 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80019f0:	b084      	sub	sp, #16
 80019f2:	b480      	push	{r7}
 80019f4:	b089      	sub	sp, #36	; 0x24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80019fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001a0e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001a10:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001a14:	461a      	mov	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fb03 f303 	mul.w	r3, r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da01      	bge.n	8001a24 <get_pressure+0x34>
 8001a20:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001a24:	131b      	asrs	r3, r3, #12
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da01      	bge.n	8001a32 <get_pressure+0x42>
 8001a2e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a32:	12db      	asrs	r3, r3, #11
 8001a34:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001a36:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da01      	bge.n	8001a4a <get_pressure+0x5a>
 8001a46:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a4a:	12db      	asrs	r3, r3, #11
 8001a4c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001a56:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001a5a:	009a      	lsls	r2, r3, #2
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001a64:	4093      	lsls	r3, r2
 8001a66:	3302      	adds	r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da00      	bge.n	8001a6e <get_pressure+0x7e>
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	109b      	asrs	r3, r3, #2
 8001a70:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001a72:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001a76:	461a      	mov	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da02      	bge.n	8001a88 <get_pressure+0x98>
 8001a82:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001a86:	331f      	adds	r3, #31
 8001a88:	135b      	asrs	r3, r3, #13
 8001a8a:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001a8c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001a90:	461a      	mov	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fb03 f303 	mul.w	r3, r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da01      	bge.n	8001aa0 <get_pressure+0xb0>
 8001a9c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001aa0:	131b      	asrs	r3, r3, #12
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da02      	bge.n	8001ab0 <get_pressure+0xc0>
 8001aaa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001aae:	33ff      	adds	r3, #255	; 0xff
 8001ab0:	141b      	asrs	r3, r3, #16
 8001ab2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4413      	add	r3, r2
 8001aba:	3302      	adds	r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <get_pressure+0xd2>
 8001ac0:	3303      	adds	r3, #3
 8001ac2:	109b      	asrs	r3, r3, #2
 8001ac4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 8001ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	0bdb      	lsrs	r3, r3, #15
 8001ad6:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001aea:	410a      	asrs	r2, r1
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db06      	blt.n	8001b06 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	005a      	lsls	r2, r3, #1
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	e005      	b.n	8001b12 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <get_pressure+0x12a>
 8001b18:	33ff      	adds	r3, #255	; 0xff
 8001b1a:	121b      	asrs	r3, r3, #8
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da00      	bge.n	8001b26 <get_pressure+0x136>
 8001b24:	33ff      	adds	r3, #255	; 0xff
 8001b26:	121b      	asrs	r3, r3, #8
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	f640 32de 	movw	r2, #3038	; 0xbde
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	da02      	bge.n	8001b42 <get_pressure+0x152>
 8001b3c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b40:	33ff      	adds	r3, #255	; 0xff
 8001b42:	141b      	asrs	r3, r3, #16
 8001b44:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <get_pressure+0x198>)
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da02      	bge.n	8001b58 <get_pressure+0x168>
 8001b52:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b56:	33ff      	adds	r3, #255	; 0xff
 8001b58:	141b      	asrs	r3, r3, #16
 8001b5a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da00      	bge.n	8001b6c <get_pressure+0x17c>
 8001b6a:	330f      	adds	r3, #15
 8001b6c:	111b      	asrs	r3, r3, #4
 8001b6e:	461a      	mov	r2, r3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]

	return p;
 8001b76:	69fb      	ldr	r3, [r7, #28]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3724      	adds	r7, #36	; 0x24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	b004      	add	sp, #16
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	ffffe343 	.word	0xffffe343
 8001b8c:	00000000 	.word	0x00000000

08001b90 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <get_altitude+0xb8>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bb4:	ee16 0a90 	vmov	r0, s13
 8001bb8:	f7fe fce6 	bl	8000588 <__aeabi_f2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001c38 <get_altitude+0xa8>
 8001bc4:	ec43 2b10 	vmov	d0, r2, r3
 8001bc8:	f017 fda6 	bl	8019718 <pow>
 8001bcc:	ec53 2b10 	vmov	r2, r3, d0
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	491d      	ldr	r1, [pc, #116]	; (8001c4c <get_altitude+0xbc>)
 8001bd6:	f7fe fb77 	bl	80002c8 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	a317      	add	r3, pc, #92	; (adr r3, 8001c40 <get_altitude+0xb0>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fd26 	bl	8000638 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff f818 	bl	8000c28 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c00:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c50 <get_altitude+0xc0>
 8001c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	d908      	bls.n	8001c20 <get_altitude+0x90>
 8001c0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c12:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c54 <get_altitude+0xc4>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	db03      	blt.n	8001c28 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2205      	movs	r2, #5
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	ee07 3a90 	vmov	s15, r3
}
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	ccd9456c 	.word	0xccd9456c
 8001c3c:	3fc85b95 	.word	0x3fc85b95
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40e5a540 	.word	0x40e5a540
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	c3fa0000 	.word	0xc3fa0000
 8001c54:	460ca000 	.word	0x460ca000

08001c58 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc7a 	bl	8000564 <__aeabi_i2d>
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <get_slp+0x80>)
 8001c76:	ed93 7a00 	vldr	s14, [r3]
 8001c7a:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001cdc <get_slp+0x84>
 8001c7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c8a:	ee17 0a90 	vmov	r0, s15
 8001c8e:	f7fe fc7b 	bl	8000588 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001cd0 <get_slp+0x78>
 8001c9a:	ec43 2b10 	vmov	d0, r2, r3
 8001c9e:	f017 fd3b 	bl	8019718 <pow>
 8001ca2:	ec53 2b10 	vmov	r2, r3, d0
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe fdef 	bl	800088c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ffb7 	bl	8000c28 <__aeabi_d2f>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60fb      	str	r3, [r7, #12]

	return slp;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	ee07 3a90 	vmov	s15, r3
}
 8001cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	b851eb85 	.word	0xb851eb85
 8001cd4:	4015051e 	.word	0x4015051e
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	472d2a00 	.word	0x472d2a00

08001ce0 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	b095      	sub	sp, #84	; 0x54
 8001ce4:	af0e      	add	r7, sp, #56	; 0x38
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 8001cea:	f7ff fdb3 	bl	8001854 <get_ut>
 8001cee:	ee07 0a90 	vmov	s15, r0
 8001cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f7ff fdd3 	bl	80018a8 <get_temp>
 8001d02:	eef0 7a40 	vmov.f32	s15, s0
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001d10:	f7ff fe2c 	bl	800196c <get_up>
 8001d14:	4602      	mov	r2, r0
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001d1a:	683e      	ldr	r6, [r7, #0]
 8001d1c:	466d      	mov	r5, sp
 8001d1e:	f106 0410 	add.w	r4, r6, #16
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	602b      	str	r3, [r5, #0]
 8001d32:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d36:	f7ff fe5b 	bl	80019f0 <get_pressure>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001d40:	6838      	ldr	r0, [r7, #0]
 8001d42:	f7ff ff89 	bl	8001c58 <get_slp>
 8001d46:	eef0 7a40 	vmov.f32	s15, s0
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001d50:	6838      	ldr	r0, [r7, #0]
 8001d52:	f7ff ff1d 	bl	8001b90 <get_altitude>
 8001d56:	eef0 7a40 	vmov.f32	s15, s0
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	617b      	str	r3, [r7, #20]
	return result;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	461c      	mov	r4, r3
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d90 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001d9c:	e083      	b.n	8001ea6 <initButtons+0x116>
		btns[i]->pin = pins[i];
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	440b      	add	r3, r1
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4944      	ldr	r1, [pc, #272]	; (8001ebc <initButtons+0x12c>)
 8001dac:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001db0:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	440b      	add	r3, r1
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4940      	ldr	r1, [pc, #256]	; (8001ec0 <initButtons+0x130>)
 8001dc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001dc4:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	7993      	ldrb	r3, [r2, #6]
 8001dd2:	f36f 0300 	bfc	r3, #0, #1
 8001dd6:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	7993      	ldrb	r3, [r2, #6]
 8001de4:	f36f 0341 	bfc	r3, #1, #1
 8001de8:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	f67f af78 	bls.w	8001d9e <initButtons+0xe>
	}
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	20000020 	.word	0x20000020
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <resetButtonHandlers>:

void resetButtonHandlers(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001ece:	e020      	b.n	8001f12 <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <resetButtonHandlers+0x64>)
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efc:	2200      	movs	r2, #0
 8001efe:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <resetButtonHandlers+0x64>)
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	621a      	str	r2, [r3, #32]
		i++;
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d9db      	bls.n	8001ed0 <resetButtonHandlers+0xc>
	}
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	2000002c 	.word	0x2000002c

08001f2c <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	889b      	ldrh	r3, [r3, #4]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f008 fd9a 	bl	800aa78 <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf0c      	ite	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	2300      	movne	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <scanButton>:

void scanButton(Button* btn){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	799b      	ldrb	r3, [r3, #6]
 8001f64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	b2d9      	uxtb	r1, r3
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	7993      	ldrb	r3, [r2, #6]
 8001f78:	f361 0300 	bfi	r3, r1, #0, #1
 8001f7c:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffd4 	bl	8001f2c <readButton>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	b2d9      	uxtb	r1, r3
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	7993      	ldrb	r3, [r2, #6]
 8001f94:	f361 0341 	bfi	r3, r1, #1, #1
 8001f98:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 8001f9a:	7bba      	ldrb	r2, [r7, #14]
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d150      	bne.n	8002044 <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 8001fa2:	7bbb      	ldrb	r3, [r7, #14]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d146      	bne.n	8002036 <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7a9b      	ldrb	r3, [r3, #10]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7a9b      	ldrb	r3, [r3, #10]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <scanButton+0x164>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d32d      	bcc.n	800202e <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7b5b      	ldrb	r3, [r3, #13]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d110      	bne.n	8001ffc <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	4798      	blx	r3
					}
					btn->longSingleOn++;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7a5b      	ldrb	r3, [r3, #9]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7a9b      	ldrb	r3, [r3, #10]
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <scanButton+0x164>)
 8002002:	8852      	ldrh	r2, [r2, #2]
 8002004:	fb93 f1f2 	sdiv	r1, r3, r2
 8002008:	fb01 f202 	mul.w	r2, r1, r2
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2000      	movs	r0, #0
 8002020:	4798      	blx	r3
					}
					btn->longContinuous++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7adb      	ldrb	r3, [r3, #11]
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8002034:	e03e      	b.n	80020b4 <scanButton+0x15c>
			btn->shortSingleHandled = 0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	735a      	strb	r2, [r3, #13]
}
 8002042:	e037      	b.n	80020b4 <scanButton+0x15c>
		if(currStatus == 1){
 8002044:	7bbb      	ldrb	r3, [r7, #14]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d11f      	bne.n	800208a <scanButton+0x132>
			btn->shortContinuous = 0;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7b1b      	ldrb	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d12a      	bne.n	80020b4 <scanButton+0x15c>
				if(btn->onSinglePressHandler != NULL){
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <scanButton+0x11e>
					pulseVib(5, 100);
 8002066:	2164      	movs	r1, #100	; 0x64
 8002068:	2005      	movs	r0, #5
 800206a:	f001 fed5 	bl	8003e18 <pulseVib>
					btn->onSinglePressHandler(NULL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2000      	movs	r0, #0
 8002074:	4798      	blx	r3
				btn->shortSingleOn++;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	79db      	ldrb	r3, [r3, #7]
 800207a:	3301      	adds	r3, #1
 800207c:	b2da      	uxtb	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	731a      	strb	r2, [r3, #12]
}
 8002088:	e014      	b.n	80020b4 <scanButton+0x15c>
			if(btn->releaseHandled == 0){
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7b9b      	ldrb	r3, [r3, #14]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d110      	bne.n	80020b4 <scanButton+0x15c>
				if(btn->onReleaseHandler != NULL){
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <scanButton+0x14a>
					btn->onReleaseHandler(NULL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	2000      	movs	r0, #0
 80020a0:	4798      	blx	r3
				btn->shortSingleOff++;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	7a1b      	ldrb	r3, [r3, #8]
 80020a6:	3301      	adds	r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	739a      	strb	r2, [r3, #14]
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000044 	.word	0x20000044

080020c0 <scanButtons>:

void scanButtons(Button* btns[6]){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80020cc:	e00a      	b.n	80020e4 <scanButtons+0x24>
		scanButton(btns[i]);
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff3d 	bl	8001f58 <scanButton>
		i++;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	3301      	adds	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d9f1      	bls.n	80020ce <scanButtons+0xe>
	}
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08e      	sub	sp, #56	; 0x38
 80020f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
 800210e:	4b72      	ldr	r3, [pc, #456]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a71      	ldr	r2, [pc, #452]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	623b      	str	r3, [r7, #32]
 8002124:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	4b6b      	ldr	r3, [pc, #428]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a6a      	ldr	r2, [pc, #424]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b68      	ldr	r3, [pc, #416]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	4b64      	ldr	r3, [pc, #400]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a63      	ldr	r2, [pc, #396]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 800214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a5c      	ldr	r2, [pc, #368]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b5a      	ldr	r3, [pc, #360]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b56      	ldr	r3, [pc, #344]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a55      	ldr	r2, [pc, #340]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a4e      	ldr	r2, [pc, #312]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 80021a0:	f043 0310 	orr.w	r3, r3, #16
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b48      	ldr	r3, [pc, #288]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a47      	ldr	r2, [pc, #284]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b45      	ldr	r3, [pc, #276]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a40      	ldr	r2, [pc, #256]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 80021d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <MX_GPIO_Init+0x1e4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2140      	movs	r1, #64	; 0x40
 80021ee:	483b      	ldr	r0, [pc, #236]	; (80022dc <MX_GPIO_Init+0x1e8>)
 80021f0:	f008 fc5a 	bl	800aaa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	f244 0181 	movw	r1, #16513	; 0x4081
 80021fa:	4839      	ldr	r0, [pc, #228]	; (80022e0 <MX_GPIO_Init+0x1ec>)
 80021fc:	f008 fc54 	bl	800aaa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	2140      	movs	r1, #64	; 0x40
 8002204:	4837      	ldr	r0, [pc, #220]	; (80022e4 <MX_GPIO_Init+0x1f0>)
 8002206:	f008 fc4f 	bl	800aaa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800220a:	2200      	movs	r2, #0
 800220c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002210:	4835      	ldr	r0, [pc, #212]	; (80022e8 <MX_GPIO_Init+0x1f4>)
 8002212:	f008 fc49 	bl	800aaa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002216:	2340      	movs	r3, #64	; 0x40
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221a:	2301      	movs	r3, #1
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222a:	4619      	mov	r1, r3
 800222c:	482b      	ldr	r0, [pc, #172]	; (80022dc <MX_GPIO_Init+0x1e8>)
 800222e:	f008 fa77 	bl	800a720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002232:	f244 0381 	movw	r3, #16513	; 0x4081
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002248:	4619      	mov	r1, r3
 800224a:	4825      	ldr	r0, [pc, #148]	; (80022e0 <MX_GPIO_Init+0x1ec>)
 800224c:	f008 fa68 	bl	800a720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8002250:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002256:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	4821      	ldr	r0, [pc, #132]	; (80022ec <MX_GPIO_Init+0x1f8>)
 8002268:	f008 fa5a 	bl	800a720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800226c:	2340      	movs	r3, #64	; 0x40
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	2301      	movs	r3, #1
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	4619      	mov	r1, r3
 8002282:	4818      	ldr	r0, [pc, #96]	; (80022e4 <MX_GPIO_Init+0x1f0>)
 8002284:	f008 fa4c 	bl	800a720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002298:	4619      	mov	r1, r3
 800229a:	4812      	ldr	r0, [pc, #72]	; (80022e4 <MX_GPIO_Init+0x1f0>)
 800229c:	f008 fa40 	bl	800a720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80022a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80022b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b6:	4619      	mov	r1, r3
 80022b8:	480b      	ldr	r0, [pc, #44]	; (80022e8 <MX_GPIO_Init+0x1f4>)
 80022ba:	f008 fa31 	bl	800a720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2028      	movs	r0, #40	; 0x28
 80022c4:	f008 f96f 	bl	800a5a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022c8:	2028      	movs	r0, #40	; 0x28
 80022ca:	f008 f988 	bl	800a5de <HAL_NVIC_EnableIRQ>

}
 80022ce:	bf00      	nop
 80022d0:	3738      	adds	r7, #56	; 0x38
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40021800 	.word	0x40021800
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40021000 	.word	0x40021000

080022f0 <hexCharToInt>:
	}


}

int hexCharToInt(char* value){
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	int msb = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b2f      	cmp	r3, #47	; 0x2f
 8002302:	bf8c      	ite	hi
 8002304:	2301      	movhi	r3, #1
 8002306:	2300      	movls	r3, #0
 8002308:	b2da      	uxtb	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b39      	cmp	r3, #57	; 0x39
 8002310:	bf94      	ite	ls
 8002312:	2301      	movls	r3, #1
 8002314:	2300      	movhi	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	4013      	ands	r3, r2
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <hexCharToInt+0x3a>
		msb = *value - 48;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	3b30      	subs	r3, #48	; 0x30
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	e003      	b.n	8002332 <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	3b37      	subs	r3, #55	; 0x37
 8002330:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3301      	adds	r3, #1
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b2f      	cmp	r3, #47	; 0x2f
 800233e:	bf8c      	ite	hi
 8002340:	2301      	movhi	r3, #1
 8002342:	2300      	movls	r3, #0
 8002344:	b2da      	uxtb	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3301      	adds	r3, #1
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b39      	cmp	r3, #57	; 0x39
 800234e:	bf94      	ite	ls
 8002350:	2301      	movls	r3, #1
 8002352:	2300      	movhi	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	4013      	ands	r3, r2
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3301      	adds	r3, #1
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	3b30      	subs	r3, #48	; 0x30
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	e004      	b.n	8002374 <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3301      	adds	r3, #1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	3b37      	subs	r3, #55	; 0x37
 8002372:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
	return(result)
 800237e:	68fb      	ldr	r3, [r7, #12]
;}
 8002380:	4618      	mov	r0, r3
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <getDataFromUart>:
#include <string.h>
#include "gps2.h"

char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	f44f 7216 	mov.w	r2, #600	; 0x258
 800239c:	4619      	mov	r1, r3
 800239e:	4803      	ldr	r0, [pc, #12]	; (80023ac <getDataFromUart+0x20>)
 80023a0:	f00d f88b 	bl	800f4ba <HAL_UART_Receive_DMA>

}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20005d54 	.word	0x20005d54

080023b0 <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023bc:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80023c0:	6018      	str	r0, [r3, #0]
 80023c2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023c6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80023ca:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 80023cc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023d0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80023d4:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80023d8:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 80023e0:	f107 030c 	add.w	r3, r7, #12
 80023e4:	3304      	adds	r3, #4
 80023e6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f012 fe16 	bl	801501e <strncpy>
	gpsModule.getData = &getDataFromUart;
 80023f2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023f6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80023fa:	4a11      	ldr	r2, [pc, #68]	; (8002440 <initGps+0x90>)
 80023fc:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.isReady = 1;
 8002400:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002404:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 800240e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002412:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800241c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f44f 7319 	mov.w	r3, #612	; 0x264
 8002428:	461a      	mov	r2, r3
 800242a:	f011 fc23 	bl	8013c74 <memcpy>
}
 800242e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002432:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	f507 771c 	add.w	r7, r7, #624	; 0x270
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	0800238d 	.word	0x0800238d

08002444 <strtoke>:


/* behaves like strtok() except that it returns empty tokens also
 */
char* strtoke(char *str, const char *delim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <strtoke+0x1a>
 8002458:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <strtoke+0x60>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <strtoke+0x60>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <strtoke+0x26>
 8002466:	2300      	movs	r3, #0
 8002468:	e017      	b.n	800249a <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <strtoke+0x60>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <strtoke+0x60>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f012 fde4 	bl	8015044 <strpbrk>
 800247c:	4603      	mov	r3, r0
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <strtoke+0x60>)
 8002480:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <strtoke+0x60>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <strtoke+0x54>
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <strtoke+0x60>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	4904      	ldr	r1, [pc, #16]	; (80024a4 <strtoke+0x60>)
 8002492:	600a      	str	r2, [r1, #0]
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8002498:	68fb      	ldr	r3, [r7, #12]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20002738 	.word	0x20002738

080024a8 <validateChecksum>:

uint8_t validateChecksum(char* nmeaSentence){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	uint8_t chksum = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 80024b8:	e009      	b.n	80024ce <validateChecksum+0x26>
		chksum ^= nmeaSentence[i];
 80024ba:	7bbb      	ldrb	r3, [r7, #14]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	4053      	eors	r3, r2
 80024c6:	73fb      	strb	r3, [r7, #15]
		i++;
 80024c8:	7bbb      	ldrb	r3, [r7, #14]
 80024ca:	3301      	adds	r3, #1
 80024cc:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 80024ce:	7bbb      	ldrb	r3, [r7, #14]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b2a      	cmp	r3, #42	; 0x2a
 80024d8:	bf14      	ite	ne
 80024da:	2301      	movne	r3, #1
 80024dc:	2300      	moveq	r3, #0
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	7bbb      	ldrb	r3, [r7, #14]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	440b      	add	r3, r1
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf14      	ite	ne
 80024ec:	2301      	movne	r3, #1
 80024ee:	2300      	moveq	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	4013      	ands	r3, r2
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1df      	bne.n	80024ba <validateChecksum+0x12>
	}
	return hexCharToInt(&nmeaSentence[i+1])==chksum;
 80024fa:	7bbb      	ldrb	r3, [r7, #14]
 80024fc:	3301      	adds	r3, #1
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fef4 	bl	80022f0 <hexCharToInt>
 8002508:	4602      	mov	r2, r0
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	429a      	cmp	r2, r3
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <getMessage>:


void getAllMessages(char* buffer){

}
uint8_t getMessage(char* destination, char* source, nmeaSentence_t type){
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	4613      	mov	r3, r2
 800252c:	71fb      	strb	r3, [r7, #7]
	char* start = strstr(source, gpsCmd[type]);
 800252e:	79fa      	ldrb	r2, [r7, #7]
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4a13      	ldr	r2, [pc, #76]	; (8002588 <getMessage+0x68>)
 800253a:	4413      	add	r3, r2
 800253c:	4619      	mov	r1, r3
 800253e:	68b8      	ldr	r0, [r7, #8]
 8002540:	f012 fd9a 	bl	8015078 <strstr>
 8002544:	6178      	str	r0, [r7, #20]
	if(start == NULL) return(0);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <getMessage+0x30>
 800254c:	2300      	movs	r3, #0
 800254e:	e016      	b.n	800257e <getMessage+0x5e>
	if(strtok(start,"\n\r") == NULL) return(0);
 8002550:	490e      	ldr	r1, [pc, #56]	; (800258c <getMessage+0x6c>)
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f013 fbd6 	bl	8015d04 <strtok>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <getMessage+0x42>
 800255e:	2300      	movs	r3, #0
 8002560:	e00d      	b.n	800257e <getMessage+0x5e>
	if(validateChecksum(start)){
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ffa0 	bl	80024a8 <validateChecksum>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d006      	beq.n	800257c <getMessage+0x5c>
		return strcpy(destination,start);
 800256e:	6979      	ldr	r1, [r7, #20]
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f012 fd4c 	bl	801500e <strcpy>
 8002576:	4603      	mov	r3, r0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e000      	b.n	800257e <getMessage+0x5e>
	} else {
		return NULL;
 800257c:	2300      	movs	r3, #0
	}
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	0801ce04 	.word	0x0801ce04
 800258c:	0801c11c 	.word	0x0801c11c

08002590 <getLocation>:
	return result;
}



uint8_t getLocation(struct gpsDevice* dev, location_t* position){
 8002590:	b5b0      	push	{r4, r5, r7, lr}
 8002592:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8002596:	af00      	add	r7, sp, #0
 8002598:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800259c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80025a0:	6018      	str	r0, [r3, #0]
 80025a2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80025a6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80025aa:	6019      	str	r1, [r3, #0]
//	copy buffer - prevent from mutating (when DMA updated)
	char tmpBuf[GPS_BUFFER_SIZE];

	// don't write to buffer while copying
	dev->isReady = 0;
 80025ac:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80025b0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	strncpy(&tmpBuf, dev->buffer, GPS_BUFFER_SIZE);
 80025bc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80025c0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	1d19      	adds	r1, r3, #4
 80025c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025d0:	4618      	mov	r0, r3
 80025d2:	f012 fd24 	bl	801501e <strncpy>
	dev->isReady = 1;
 80025d6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80025da:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260


//	location_t position;
	char sentence[NMEA_MAX_SENTENCE_LENGTH+1];
	// receive and validate message
	if(getMessage(&sentence, &tmpBuf, NMEA_GNGGA) == NULL){
 80025e6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	2200      	movs	r2, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff95 	bl	8002520 <getMessage>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d113      	bne.n	8002624 <getLocation+0x94>
		strcpy(position->debug, "invalid sentence");
 80025fc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002600:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a06      	ldr	r2, [pc, #24]	; (8002620 <getLocation+0x90>)
 8002608:	461d      	mov	r5, r3
 800260a:	4614      	mov	r4, r2
 800260c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260e:	6028      	str	r0, [r5, #0]
 8002610:	6069      	str	r1, [r5, #4]
 8002612:	60aa      	str	r2, [r5, #8]
 8002614:	60eb      	str	r3, [r5, #12]
 8002616:	7823      	ldrb	r3, [r4, #0]
 8002618:	742b      	strb	r3, [r5, #16]
//		position.isValid = 0;
//		position.utc_hour = 0;
//		position.utc_min = 0;
//		position.utc_sec = 0;
//		return position;
		return 0;
 800261a:	2300      	movs	r3, #0
 800261c:	e1ff      	b.n	8002a1e <getLocation+0x48e>
 800261e:	bf00      	nop
 8002620:	0801c124 	.word	0x0801c124
	// test tokenization function
//	struct nmeaSentence snt = tokenizeSentence(sentence);

	//write to struct whole sentence
//	strcpy(&position.debug, sentence);
	strcpy(position->debug, sentence);
 8002624:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002628:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f107 020c 	add.w	r2, r7, #12
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f012 fcea 	bl	801500e <strcpy>

	// tokenize
	// GNGGA
	char* parsePointer = strtoke(sentence, ",");
 800263a:	f107 030c 	add.w	r3, r7, #12
 800263e:	49dd      	ldr	r1, [pc, #884]	; (80029b4 <getLocation+0x424>)
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff feff 	bl	8002444 <strtoke>
 8002646:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[0][0], parsePointer);
 800264a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800264e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002658:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800265c:	4618      	mov	r0, r3
 800265e:	f012 fcd6 	bl	801500e <strcpy>

	// UTC Time
	parsePointer = strtoke(NULL, ",");
 8002662:	49d4      	ldr	r1, [pc, #848]	; (80029b4 <getLocation+0x424>)
 8002664:	2000      	movs	r0, #0
 8002666:	f7ff feed 	bl	8002444 <strtoke>
 800266a:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[1][0], parsePointer);
 800266e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002672:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800267c:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002680:	4618      	mov	r0, r3
 8002682:	f012 fcc4 	bl	801500e <strcpy>
	uint32_t utcTime=atoi(parsePointer);
 8002686:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 800268a:	f011 faa2 	bl	8013bd2 <atoi>
 800268e:	4603      	mov	r3, r0
 8002690:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	position->utc_hour = (utcTime/10000)%100;
 8002694:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002698:	4ac7      	ldr	r2, [pc, #796]	; (80029b8 <getLocation+0x428>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0b5a      	lsrs	r2, r3, #13
 80026a0:	4bc6      	ldr	r3, [pc, #792]	; (80029bc <getLocation+0x42c>)
 80026a2:	fba3 1302 	umull	r1, r3, r3, r2
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2164      	movs	r1, #100	; 0x64
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026b6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	position->utc_min = (utcTime/100)%100;
 80026c0:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80026c4:	4abd      	ldr	r2, [pc, #756]	; (80029bc <getLocation+0x42c>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	095a      	lsrs	r2, r3, #5
 80026cc:	4bbb      	ldr	r3, [pc, #748]	; (80029bc <getLocation+0x42c>)
 80026ce:	fba3 1302 	umull	r1, r3, r3, r2
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2164      	movs	r1, #100	; 0x64
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026e2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	position->utc_sec = utcTime%100;
 80026ec:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 80026f0:	4bb2      	ldr	r3, [pc, #712]	; (80029bc <getLocation+0x42c>)
 80026f2:	fba3 1302 	umull	r1, r3, r3, r2
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2164      	movs	r1, #100	; 0x64
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	b2da      	uxtb	r2, r3
 8002702:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002706:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a

	// DDMM.MMMMM Latitude
	parsePointer = strtoke(NULL, ",");
 8002710:	49a8      	ldr	r1, [pc, #672]	; (80029b4 <getLocation+0x424>)
 8002712:	2000      	movs	r0, #0
 8002714:	f7ff fe96 	bl	8002444 <strtoke>
 8002718:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[2][0], parsePointer);
 800271c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002720:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800272a:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800272e:	4618      	mov	r0, r3
 8002730:	f012 fc6d 	bl	801500e <strcpy>
	double latitude = atof(parsePointer);
 8002734:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002738:	f011 fa48 	bl	8013bcc <atof>
 800273c:	ed87 0bb0 	vstr	d0, [r7, #704]	; 0x2c0
	position->latitudeDeg = latitude/100;
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	4b9e      	ldr	r3, [pc, #632]	; (80029c0 <getLocation+0x430>)
 8002746:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800274a:	f7fe f89f 	bl	800088c <__aeabi_ddiv>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe fa47 	bl	8000be8 <__aeabi_d2uiz>
 800275a:	4603      	mov	r3, r0
 800275c:	b2da      	uxtb	r2, r3
 800275e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002762:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	position->latitudeMin = latitude-position->latitudeDeg*100;
 800276c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002770:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800277a:	461a      	mov	r2, r3
 800277c:	2364      	movs	r3, #100	; 0x64
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd feee 	bl	8000564 <__aeabi_i2d>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8002790:	f7fd fd9a 	bl	80002c8 <__aeabi_dsub>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 800279c:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 80027a0:	6809      	ldr	r1, [r1, #0]
 80027a2:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160

	// Latitude N/S
	parsePointer = strtoke(NULL, ",");
 80027a6:	4983      	ldr	r1, [pc, #524]	; (80029b4 <getLocation+0x424>)
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7ff fe4b 	bl	8002444 <strtoke>
 80027ae:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[3][0], parsePointer);
 80027b2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80027b6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80027c0:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80027c4:	4618      	mov	r0, r3
 80027c6:	f012 fc22 	bl	801500e <strcpy>
	position->n_s = *parsePointer;
 80027ca:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80027d4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170

	// DDDMM.MMMMM Longitude
	parsePointer = strtoke(NULL, ",");
 80027de:	4975      	ldr	r1, [pc, #468]	; (80029b4 <getLocation+0x424>)
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7ff fe2f 	bl	8002444 <strtoke>
 80027e6:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[4][0], parsePointer);
 80027ea:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80027ee:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80027f8:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80027fc:	4618      	mov	r0, r3
 80027fe:	f012 fc06 	bl	801500e <strcpy>
	double longitude = atof(parsePointer);
 8002802:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002806:	f011 f9e1 	bl	8013bcc <atof>
 800280a:	ed87 0bae 	vstr	d0, [r7, #696]	; 0x2b8
	position->longitudeDeg = longitude/100;
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	4b6b      	ldr	r3, [pc, #428]	; (80029c0 <getLocation+0x430>)
 8002814:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8002818:	f7fe f838 	bl	800088c <__aeabi_ddiv>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f7fe f9e0 	bl	8000be8 <__aeabi_d2uiz>
 8002828:	4603      	mov	r3, r0
 800282a:	b2da      	uxtb	r2, r3
 800282c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002830:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	position->longitudeMin = longitude-position->longitudeDeg*100;
 800283a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800283e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8002848:	461a      	mov	r2, r3
 800284a:	2364      	movs	r3, #100	; 0x64
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fe87 	bl	8000564 <__aeabi_i2d>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800285e:	f7fd fd33 	bl	80002c8 <__aeabi_dsub>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 800286a:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 800286e:	6809      	ldr	r1, [r1, #0]
 8002870:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

	// Longitude W/E
	parsePointer = strtoke(NULL, ",");
 8002874:	494f      	ldr	r1, [pc, #316]	; (80029b4 <getLocation+0x424>)
 8002876:	2000      	movs	r0, #0
 8002878:	f7ff fde4 	bl	8002444 <strtoke>
 800287c:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[5][0], parsePointer);
 8002880:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002884:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800288e:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002892:	4618      	mov	r0, r3
 8002894:	f012 fbbb 	bl	801500e <strcpy>
	position->w_e = *parsePointer;
 8002898:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028a2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171

	// Fix type - 0-nofix, 1-GPS, 2-DGPS
	parsePointer = strtoke(NULL, ",");
 80028ac:	4941      	ldr	r1, [pc, #260]	; (80029b4 <getLocation+0x424>)
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7ff fdc8 	bl	8002444 <strtoke>
 80028b4:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[6][0], parsePointer);
 80028b8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028bc:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80028c6:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80028ca:	4618      	mov	r0, r3
 80028cc:	f012 fb9f 	bl	801500e <strcpy>
	if(*parsePointer=='0'){
 80028d0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b30      	cmp	r3, #48	; 0x30
 80028d8:	d007      	beq.n	80028ea <getLocation+0x35a>
//		position->longitudeDeg = 17;
//		position->longitudeMin = 30;
//		position->w_e = 'E';
//		position->n_s = 'N';
	} else {
		position->hasFix = 1;
 80028da:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028de:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}

	// Number of used satellites
	parsePointer = strtoke(NULL, ",");
 80028ea:	4932      	ldr	r1, [pc, #200]	; (80029b4 <getLocation+0x424>)
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7ff fda9 	bl	8002444 <strtoke>
 80028f2:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[7][0], parsePointer);
 80028f6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028fa:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002904:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002908:	4618      	mov	r0, r3
 800290a:	f012 fb80 	bl	801500e <strcpy>
	position->satNum = atoi(parsePointer);
 800290e:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002912:	f011 f95e 	bl	8013bd2 <atoi>
 8002916:	4603      	mov	r3, r0
 8002918:	b2da      	uxtb	r2, r3
 800291a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800291e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	// HDOP
	parsePointer = strtoke(NULL, ",");
 8002928:	4922      	ldr	r1, [pc, #136]	; (80029b4 <getLocation+0x424>)
 800292a:	2000      	movs	r0, #0
 800292c:	f7ff fd8a 	bl	8002444 <strtoke>
 8002930:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[8][0], parsePointer);
 8002934:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002938:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8002942:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002946:	4618      	mov	r0, r3
 8002948:	f012 fb61 	bl	801500e <strcpy>

	// Altitude above mean sea level
	parsePointer = strtoke(NULL, ",");
 800294c:	4919      	ldr	r1, [pc, #100]	; (80029b4 <getLocation+0x424>)
 800294e:	2000      	movs	r0, #0
 8002950:	f7ff fd78 	bl	8002444 <strtoke>
 8002954:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[9][0], parsePointer);
 8002958:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800295c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8002966:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800296a:	4618      	mov	r0, r3
 800296c:	f012 fb4f 	bl	801500e <strcpy>
	position->elevation = atof(parsePointer);
 8002970:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002974:	f011 f92a 	bl	8013bcc <atof>
 8002978:	eeb0 7a40 	vmov.f32	s14, s0
 800297c:	eef0 7a60 	vmov.f32	s15, s1
 8002980:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002984:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150

	// Altitude units
	parsePointer = strtoke(NULL, ",");
 800298e:	4909      	ldr	r1, [pc, #36]	; (80029b4 <getLocation+0x424>)
 8002990:	2000      	movs	r0, #0
 8002992:	f7ff fd57 	bl	8002444 <strtoke>
 8002996:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[10][0], parsePointer);
 800299a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800299e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80029a8:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80029ac:	4618      	mov	r0, r3
 80029ae:	f012 fb2e 	bl	801500e <strcpy>
 80029b2:	e007      	b.n	80029c4 <getLocation+0x434>
 80029b4:	0801c120 	.word	0x0801c120
 80029b8:	d1b71759 	.word	0xd1b71759
 80029bc:	51eb851f 	.word	0x51eb851f
 80029c0:	40590000 	.word	0x40590000

	// Height of mean sea level above WGS-84 earth ellipsoid
	parsePointer = strtoke(NULL, ",");
 80029c4:	4918      	ldr	r1, [pc, #96]	; (8002a28 <getLocation+0x498>)
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7ff fd3c 	bl	8002444 <strtoke>
 80029cc:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[11][0], parsePointer);
 80029d0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029d4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80029de:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80029e2:	4618      	mov	r0, r3
 80029e4:	f012 fb13 	bl	801500e <strcpy>

	// Units of the above geoid separation (M for meters)
	parsePointer = strtoke(NULL, ",");
 80029e8:	490f      	ldr	r1, [pc, #60]	; (8002a28 <getLocation+0x498>)
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7ff fd2a 	bl	8002444 <strtoke>
 80029f0:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[12][0], parsePointer);
 80029f4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029f8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002a02:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002a06:	4618      	mov	r0, r3
 8002a08:	f012 fb01 	bl	801500e <strcpy>

	//	mark position as valid
	position->isValid = 1;
 8002a0c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002a10:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	return 1;
 8002a1c:	2301      	movs	r3, #1
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f507 7734 	add.w	r7, r7, #720	; 0x2d0
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bdb0      	pop	{r4, r5, r7, pc}
 8002a28:	0801c120 	.word	0x0801c120

08002a2c <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
	if(position>0){
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <prevPos+0x2c>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <prevPos+0x1a>
		position--;
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <prevPos+0x2c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <prevPos+0x2c>)
 8002a42:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8002a44:	e002      	b.n	8002a4c <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <prevPos+0x2c>)
 8002a48:	2207      	movs	r2, #7
 8002a4a:	701a      	strb	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000188 	.word	0x20000188

08002a5c <nextPos>:

void nextPos(void){
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <nextPos+0x2c>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b06      	cmp	r3, #6
 8002a66:	d806      	bhi.n	8002a76 <nextPos+0x1a>
		position++;
 8002a68:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <nextPos+0x2c>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <nextPos+0x2c>)
 8002a72:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8002a74:	e002      	b.n	8002a7c <nextPos+0x20>
		position=0;
 8002a76:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <nextPos+0x2c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000188 	.word	0x20000188

08002a8c <nextScreen>:

void nextScreen(void){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	nextPos();
 8002a90:	f7ff ffe4 	bl	8002a5c <nextPos>
	applySelectedScreen();
 8002a94:	f000 f82c 	bl	8002af0 <applySelectedScreen>
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <prevScreen>:
void prevScreen(void){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	prevPos();
 8002aa0:	f7ff ffc4 	bl	8002a2c <prevPos>
	applySelectedScreen();
 8002aa4:	f000 f824 	bl	8002af0 <applySelectedScreen>
}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <resetPos>:
void resetPos(void){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	position=0;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <resetPos+0x14>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8002ab6:	f000 f81b 	bl	8002af0 <applySelectedScreen>
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000188 	.word	0x20000188

08002ac4 <guiApplyView>:

void guiApplyView(struct Module *module){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <guiApplyView+0x24>)
 8002ad2:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <guiApplyView+0x28>)
 8002ada:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002adc:	f000 f830 	bl	8002b40 <selectScreen>
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000190 	.word	0x20000190
 8002aec:	2000018c 	.word	0x2000018c

08002af0 <applySelectedScreen>:

void applySelectedScreen(void){
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <applySelectedScreen+0x40>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	4a0e      	ldr	r2, [pc, #56]	; (8002b34 <applySelectedScreen+0x44>)
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	3320      	adds	r3, #32
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <applySelectedScreen+0x48>)
 8002b0c:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <applySelectedScreen+0x40>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	4619      	mov	r1, r3
 8002b14:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <applySelectedScreen+0x44>)
 8002b16:	460b      	mov	r3, r1
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3324      	adds	r3, #36	; 0x24
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <applySelectedScreen+0x4c>)
 8002b26:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002b28:	f000 f80a 	bl	8002b40 <selectScreen>
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000188 	.word	0x20000188
 8002b34:	20000048 	.word	0x20000048
 8002b38:	20000190 	.word	0x20000190
 8002b3c:	2000018c 	.word	0x2000018c

08002b40 <selectScreen>:

void selectScreen(void){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8002b44:	f7ff f9be 	bl	8001ec4 <resetButtonHandlers>
	isModuleSet = 0;
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <selectScreen+0x1c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <selectScreen+0x20>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <selectScreen+0x24>)
 8002b54:	6013      	str	r3, [r2, #0]
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	2000273c 	.word	0x2000273c
 8002b60:	2000018c 	.word	0x2000018c
 8002b64:	20000194 	.word	0x20000194

08002b68 <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <showGui+0x30>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <showGui+0x18>
		moduleSetupPtr();
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <showGui+0x34>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4798      	blx	r3
		isModuleSet = 1;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <showGui+0x30>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <showGui+0x38>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <showGui+0x26>
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <showGui+0x38>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4798      	blx	r3
	lcdRefresh();
 8002b8e:	f000 ffed 	bl	8003b6c <lcdRefresh>
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000273c 	.word	0x2000273c
 8002b9c:	20000190 	.word	0x20000190
 8002ba0:	20000194 	.word	0x20000194

08002ba4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <MX_I2C1_Init+0x78>)
 8002bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <MX_I2C1_Init+0x7c>)
 8002bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bb4:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002bba:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bc0:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bd4:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002be2:	f007 ffb9 	bl	800ab58 <HAL_I2C_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002bec:	f001 fbb4 	bl	8004358 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4809      	ldr	r0, [pc, #36]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bf4:	f008 ff6f 	bl	800bad6 <HAL_I2CEx_ConfigAnalogFilter>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002bfe:	f001 fbab 	bl	8004358 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c02:	2100      	movs	r1, #0
 8002c04:	4804      	ldr	r0, [pc, #16]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002c06:	f008 ffa2 	bl	800bb4e <HAL_I2CEx_ConfigDigitalFilter>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002c10:	f001 fba2 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20002740 	.word	0x20002740
 8002c1c:	40005400 	.word	0x40005400
 8002c20:	000186a0 	.word	0x000186a0

08002c24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <HAL_I2C_MspInit+0x84>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d12c      	bne.n	8002ca0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	4b18      	ldr	r3, [pc, #96]	; (8002cac <HAL_I2C_MspInit+0x88>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a17      	ldr	r2, [pc, #92]	; (8002cac <HAL_I2C_MspInit+0x88>)
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <HAL_I2C_MspInit+0x88>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c68:	2312      	movs	r3, #18
 8002c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c74:	2304      	movs	r3, #4
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	480c      	ldr	r0, [pc, #48]	; (8002cb0 <HAL_I2C_MspInit+0x8c>)
 8002c80:	f007 fd4e 	bl	800a720 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <HAL_I2C_MspInit+0x88>)
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	4a07      	ldr	r2, [pc, #28]	; (8002cac <HAL_I2C_MspInit+0x88>)
 8002c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c92:	6413      	str	r3, [r2, #64]	; 0x40
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_I2C_MspInit+0x88>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3728      	adds	r7, #40	; 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40005400 	.word	0x40005400
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40020400 	.word	0x40020400

08002cb4 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8002cbe:	2307      	movs	r3, #7
 8002cc0:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8002cce:	e010      	b.n	8002cf2 <reverse_uint8+0x3e>
		result = result << 1;
 8002cd0:	7bbb      	ldrb	r3, [r7, #14]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8002ce4:	7bba      	ldrb	r2, [r7, #14]
 8002ce6:	7b7b      	ldrb	r3, [r7, #13]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	73bb      	strb	r3, [r7, #14]
		times--;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1eb      	bne.n	8002cd0 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f000 f824 	bl	8002d5c <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002d14:	2300      	movs	r3, #0
 8002d16:	71fb      	strb	r3, [r7, #7]
 8002d18:	e014      	b.n	8002d44 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	80bb      	strh	r3, [r7, #4]
 8002d1e:	e00b      	b.n	8002d38 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	2232      	movs	r2, #50	; 0x32
 8002d24:	fb03 f202 	mul.w	r2, r3, r2
 8002d28:	88bb      	ldrh	r3, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <lcdClearBuffer+0x50>)
 8002d2e:	21ff      	movs	r1, #255	; 0xff
 8002d30:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002d32:	88bb      	ldrh	r3, [r7, #4]
 8002d34:	3301      	adds	r3, #1
 8002d36:	80bb      	strh	r3, [r7, #4]
 8002d38:	88bb      	ldrh	r3, [r7, #4]
 8002d3a:	2b31      	cmp	r3, #49	; 0x31
 8002d3c:	d9f0      	bls.n	8002d20 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	3301      	adds	r3, #1
 8002d42:	71fb      	strb	r3, [r7, #7]
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	2bef      	cmp	r3, #239	; 0xef
 8002d48:	d9e7      	bls.n	8002d1a <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	f000 f806 	bl	8002d5c <updateSetting>
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20002798 	.word	0x20002798

08002d5c <updateSetting>:

void updateSetting(uint8_t state){
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8002d66:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <updateSetting+0x1c>)
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	7013      	strb	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	20000198 	.word	0x20000198

08002d7c <lcdPutPix>:

void lcdPutPix(uint16_t x, uint8_t y, uint8_t val){
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
 8002d86:	460b      	mov	r3, r1
 8002d88:	717b      	strb	r3, [r7, #5]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	713b      	strb	r3, [r7, #4]
	uint8_t xBlock = x/8;
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	73bb      	strb	r3, [r7, #14]
	uint8_t finalVal = lcdBuffer[y*SCR_W/8 + xBlock];
 8002d96:	797b      	ldrb	r3, [r7, #5]
 8002d98:	2232      	movs	r2, #50	; 0x32
 8002d9a:	fb03 f202 	mul.w	r2, r3, r2
 8002d9e:	7bbb      	ldrb	r3, [r7, #14]
 8002da0:	4413      	add	r3, r2
 8002da2:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <lcdPutPix+0x98>)
 8002da4:	5cd3      	ldrb	r3, [r2, r3]
 8002da6:	73fb      	strb	r3, [r7, #15]
	uint8_t offset = (1 << (8 - x%8 - 1));
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	2201      	movs	r2, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	737b      	strb	r3, [r7, #13]
	switch(val){
 8002db8:	793b      	ldrb	r3, [r7, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d015      	beq.n	8002dea <lcdPutPix+0x6e>
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	dc18      	bgt.n	8002df4 <lcdPutPix+0x78>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <lcdPutPix+0x50>
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d005      	beq.n	8002dd6 <lcdPutPix+0x5a>
 8002dca:	e013      	b.n	8002df4 <lcdPutPix+0x78>
	case 0:
		finalVal |= offset;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	7b7b      	ldrb	r3, [r7, #13]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	73fb      	strb	r3, [r7, #15]
		break;
 8002dd4:	e00e      	b.n	8002df4 <lcdPutPix+0x78>
	case 1:
		finalVal &= ~offset;
 8002dd6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	b25a      	sxtb	r2, r3
 8002dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de2:	4013      	ands	r3, r2
 8002de4:	b25b      	sxtb	r3, r3
 8002de6:	73fb      	strb	r3, [r7, #15]
		break;
 8002de8:	e004      	b.n	8002df4 <lcdPutPix+0x78>
	case 2:
		finalVal ^= offset;
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	7b7b      	ldrb	r3, [r7, #13]
 8002dee:	4053      	eors	r3, r2
 8002df0:	73fb      	strb	r3, [r7, #15]
		break;
 8002df2:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
 8002df4:	797b      	ldrb	r3, [r7, #5]
 8002df6:	2232      	movs	r2, #50	; 0x32
 8002df8:	fb03 f202 	mul.w	r2, r3, r2
 8002dfc:	7bbb      	ldrb	r3, [r7, #14]
 8002dfe:	4413      	add	r3, r2
 8002e00:	4904      	ldr	r1, [pc, #16]	; (8002e14 <lcdPutPix+0x98>)
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	54ca      	strb	r2, [r1, r3]
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20002798 	.word	0x20002798

08002e18 <lcdPutChar>:

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	4603      	mov	r3, r0
 8002e22:	80fb      	strh	r3, [r7, #6]
 8002e24:	460b      	mov	r3, r1
 8002e26:	717b      	strb	r3, [r7, #5]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	795b      	ldrb	r3, [r3, #5]
 8002e30:	793a      	ldrb	r2, [r7, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d304      	bcc.n	8002e40 <lcdPutChar+0x28>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	799b      	ldrb	r3, [r3, #6]
 8002e3a:	793a      	ldrb	r2, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d902      	bls.n	8002e46 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	79db      	ldrb	r3, [r3, #7]
 8002e44:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	08db      	lsrs	r3, r3, #3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	885b      	ldrh	r3, [r3, #2]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	785b      	ldrb	r3, [r3, #1]
 8002e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e66:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002e68:	2300      	movs	r3, #0
 8002e6a:	75fb      	strb	r3, [r7, #23]
 8002e6c:	e09b      	b.n	8002fa6 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002e6e:	797a      	ldrb	r2, [r7, #5]
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	4413      	add	r3, r2
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	0092      	lsls	r2, r2, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	0091      	lsls	r1, r2, #2
 8002e80:	461a      	mov	r2, r3
 8002e82:	460b      	mov	r3, r1
 8002e84:	4413      	add	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002e92:	793b      	ldrb	r3, [r7, #4]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	7952      	ldrb	r2, [r2, #5]
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	8852      	ldrh	r2, [r2, #2]
 8002e9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	7cb9      	ldrb	r1, [r7, #18]
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	7d3b      	ldrb	r3, [r7, #20]
 8002ebc:	fa42 f303 	asr.w	r3, r2, r3
 8002ec0:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002ec2:	8a3b      	ldrh	r3, [r7, #16]
 8002ec4:	4a3e      	ldr	r2, [pc, #248]	; (8002fc0 <lcdPutChar+0x1a8>)
 8002ec6:	5cd3      	ldrb	r3, [r2, r3]
 8002ec8:	b25a      	sxtb	r2, r3
 8002eca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	b25a      	sxtb	r2, r3
 8002ed6:	8a3b      	ldrh	r3, [r7, #16]
 8002ed8:	b2d1      	uxtb	r1, r2
 8002eda:	4a39      	ldr	r2, [pc, #228]	; (8002fc0 <lcdPutChar+0x1a8>)
 8002edc:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b25a      	sxtb	r2, r3
 8002eea:	7d3b      	ldrb	r3, [r7, #20]
 8002eec:	f1c3 0308 	rsb	r3, r3, #8
 8002ef0:	21ff      	movs	r1, #255	; 0xff
 8002ef2:	fa41 f303 	asr.w	r3, r1, r3
 8002ef6:	b25b      	sxtb	r3, r3
 8002ef8:	4013      	ands	r3, r2
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002efe:	2301      	movs	r3, #1
 8002f00:	757b      	strb	r3, [r7, #21]
 8002f02:	e029      	b.n	8002f58 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8002f04:	7d7a      	ldrb	r2, [r7, #21]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4413      	add	r3, r2
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	7a1b      	ldrb	r3, [r3, #8]
 8002f10:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002f12:	8a3a      	ldrh	r2, [r7, #16]
 8002f14:	7d7b      	ldrb	r3, [r7, #21]
 8002f16:	4413      	add	r3, r2
 8002f18:	4a29      	ldr	r2, [pc, #164]	; (8002fc0 <lcdPutChar+0x1a8>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	b25a      	sxtb	r2, r3
 8002f1e:	7db9      	ldrb	r1, [r7, #22]
 8002f20:	7d3b      	ldrb	r3, [r7, #20]
 8002f22:	f1c3 0308 	rsb	r3, r3, #8
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	b259      	sxtb	r1, r3
 8002f2c:	7af8      	ldrb	r0, [r7, #11]
 8002f2e:	7d3b      	ldrb	r3, [r7, #20]
 8002f30:	fa40 f303 	asr.w	r3, r0, r3
 8002f34:	b25b      	sxtb	r3, r3
 8002f36:	430b      	orrs	r3, r1
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	4013      	ands	r3, r2
 8002f40:	b259      	sxtb	r1, r3
 8002f42:	8a3a      	ldrh	r2, [r7, #16]
 8002f44:	7d7b      	ldrb	r3, [r7, #21]
 8002f46:	4413      	add	r3, r2
 8002f48:	b2c9      	uxtb	r1, r1
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <lcdPutChar+0x1a8>)
 8002f4c:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8002f4e:	7afb      	ldrb	r3, [r7, #11]
 8002f50:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002f52:	7d7b      	ldrb	r3, [r7, #21]
 8002f54:	3301      	adds	r3, #1
 8002f56:	757b      	strb	r3, [r7, #21]
 8002f58:	7d7a      	ldrb	r2, [r7, #21]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	3307      	adds	r3, #7
 8002f60:	10db      	asrs	r3, r3, #3
 8002f62:	429a      	cmp	r2, r3
 8002f64:	dbce      	blt.n	8002f04 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002f66:	8a3a      	ldrh	r2, [r7, #16]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3307      	adds	r3, #7
 8002f6e:	10db      	asrs	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	4a13      	ldr	r2, [pc, #76]	; (8002fc0 <lcdPutChar+0x1a8>)
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	b25a      	sxtb	r2, r3
 8002f78:	7db9      	ldrb	r1, [r7, #22]
 8002f7a:	7d3b      	ldrb	r3, [r7, #20]
 8002f7c:	f1c3 0308 	rsb	r3, r3, #8
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	b259      	sxtb	r1, r3
 8002f8e:	8a3a      	ldrh	r2, [r7, #16]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	3307      	adds	r3, #7
 8002f96:	10db      	asrs	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	b2c9      	uxtb	r1, r1
 8002f9c:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <lcdPutChar+0x1a8>)
 8002f9e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	785b      	ldrb	r3, [r3, #1]
 8002faa:	7dfa      	ldrb	r2, [r7, #23]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	f4ff af5e 	bcc.w	8002e6e <lcdPutChar+0x56>
	}
}
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	20002798 	.word	0x20002798

08002fc4 <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60ba      	str	r2, [r7, #8]
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	4603      	mov	r3, r0
 8002fd0:	81fb      	strh	r3, [r7, #14]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
 8002fda:	e015      	b.n	8003008 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	fb12 f303 	smulbb	r3, r2, r3
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	89fb      	ldrh	r3, [r7, #14]
 8002fee:	4413      	add	r3, r2
 8002ff0:	b298      	uxth	r0, r3
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	781a      	ldrb	r2, [r3, #0]
 8002ffa:	7b79      	ldrb	r1, [r7, #13]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f7ff ff0b 	bl	8002e18 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	3301      	adds	r3, #1
 8003006:	75fb      	strb	r3, [r7, #23]
 8003008:	7dfc      	ldrb	r4, [r7, #23]
 800300a:	68b8      	ldr	r0, [r7, #8]
 800300c:	f7fd f8fa 	bl	8000204 <strlen>
 8003010:	4603      	mov	r3, r0
 8003012:	429c      	cmp	r4, r3
 8003014:	d3e2      	bcc.n	8002fdc <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 8003016:	bf00      	nop
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	bd90      	pop	{r4, r7, pc}

08003020 <lcdPutStrML>:
// multiline
void lcdPutStrML(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60ba      	str	r2, [r7, #8]
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	4603      	mov	r3, r0
 800302c:	81fb      	strh	r3, [r7, #14]
 800302e:	460b      	mov	r3, r1
 8003030:	737b      	strb	r3, [r7, #13]
//			// version with y meaning lcd row
//			  lcdPutChar(x+font->font_Width*i, y+j*font->font_Height, chr[i+j*charNum], font);
//			  }
//	}
	// number of chars in line
	uint8_t lineNum = (SCR_W-x)/font->font_Width;
 8003032:	89fb      	ldrh	r3, [r7, #14]
 8003034:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	7812      	ldrb	r2, [r2, #0]
 800303c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003040:	747b      	strb	r3, [r7, #17]
	uint8_t yPos = y;
 8003042:	7b7b      	ldrb	r3, [r7, #13]
 8003044:	75fb      	strb	r3, [r7, #23]
	uint16_t xPos = x;
 8003046:	89fb      	ldrh	r3, [r7, #14]
 8003048:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 800304a:	2300      	movs	r3, #0
 800304c:	827b      	strh	r3, [r7, #18]
 800304e:	e02d      	b.n	80030ac <lcdPutStrML+0x8c>
		if(xPos > (SCR_W-font->font_Width)){
 8003050:	8aba      	ldrh	r2, [r7, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800305a:	429a      	cmp	r2, r3
 800305c:	dd06      	ble.n	800306c <lcdPutStrML+0x4c>
			yPos += font->font_Height;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	785a      	ldrb	r2, [r3, #1]
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	4413      	add	r3, r2
 8003066:	75fb      	strb	r3, [r7, #23]
			xPos = x;
 8003068:	89fb      	ldrh	r3, [r7, #14]
 800306a:	82bb      	strh	r3, [r7, #20]
		}
		if(chr[i] == 10){
 800306c:	8a7b      	ldrh	r3, [r7, #18]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	4413      	add	r3, r2
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b0a      	cmp	r3, #10
 8003076:	d107      	bne.n	8003088 <lcdPutStrML+0x68>
			xPos = x;
 8003078:	89fb      	ldrh	r3, [r7, #14]
 800307a:	82bb      	strh	r3, [r7, #20]
			yPos += font->font_Height;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	785a      	ldrb	r2, [r3, #1]
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	4413      	add	r3, r2
 8003084:	75fb      	strb	r3, [r7, #23]
 8003086:	e00e      	b.n	80030a6 <lcdPutStrML+0x86>
//			i++;
		} else {
			lcdPutChar(xPos, yPos, chr[i], font);
 8003088:	8a7b      	ldrh	r3, [r7, #18]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	4413      	add	r3, r2
 800308e:	781a      	ldrb	r2, [r3, #0]
 8003090:	7df9      	ldrb	r1, [r7, #23]
 8003092:	8ab8      	ldrh	r0, [r7, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f7ff febf 	bl	8002e18 <lcdPutChar>
			xPos += font->font_Width;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b29a      	uxth	r2, r3
 80030a0:	8abb      	ldrh	r3, [r7, #20]
 80030a2:	4413      	add	r3, r2
 80030a4:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 80030a6:	8a7b      	ldrh	r3, [r7, #18]
 80030a8:	3301      	adds	r3, #1
 80030aa:	827b      	strh	r3, [r7, #18]
 80030ac:	8a7c      	ldrh	r4, [r7, #18]
 80030ae:	68b8      	ldr	r0, [r7, #8]
 80030b0:	f7fd f8a8 	bl	8000204 <strlen>
 80030b4:	4603      	mov	r3, r0
 80030b6:	429c      	cmp	r4, r3
 80030b8:	d3ca      	bcc.n	8003050 <lcdPutStrML+0x30>
		}

	}
}
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}

080030c4 <lcdVLine>:

void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 80030c4:	b490      	push	{r4, r7}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4604      	mov	r4, r0
 80030cc:	4608      	mov	r0, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	80fb      	strh	r3, [r7, #6]
 80030d6:	4603      	mov	r3, r0
 80030d8:	80bb      	strh	r3, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	70fb      	strb	r3, [r7, #3]
 80030de:	4613      	mov	r3, r2
 80030e0:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	08db      	lsrs	r3, r3, #3
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	733b      	strb	r3, [r7, #12]
	if(y1 > y2){
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	88ba      	ldrh	r2, [r7, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d905      	bls.n	800310a <lcdVLine+0x46>
		uint8_t temp = y1;
 80030fe:	88bb      	ldrh	r3, [r7, #4]
 8003100:	72fb      	strb	r3, [r7, #11]
		y1 = y2;
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	80bb      	strh	r3, [r7, #4]
		y2 = temp;
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	70fb      	strb	r3, [r7, #3]
	}
	for(uint8_t y = y1; y <= y2; y++){
 800310a:	88bb      	ldrh	r3, [r7, #4]
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	e04e      	b.n	80031ae <lcdVLine+0xea>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2232      	movs	r2, #50	; 0x32
 8003114:	fb03 f202 	mul.w	r2, r3, r2
 8003118:	7b7b      	ldrb	r3, [r7, #13]
 800311a:	4413      	add	r3, r2
 800311c:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <lcdVLine+0x100>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 8003122:	78bb      	ldrb	r3, [r7, #2]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d01e      	beq.n	8003166 <lcdVLine+0xa2>
 8003128:	2b02      	cmp	r3, #2
 800312a:	dc27      	bgt.n	800317c <lcdVLine+0xb8>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <lcdVLine+0x72>
 8003130:	2b01      	cmp	r3, #1
 8003132:	d00b      	beq.n	800314c <lcdVLine+0x88>
 8003134:	e022      	b.n	800317c <lcdVLine+0xb8>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8003136:	7b3b      	ldrb	r3, [r7, #12]
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	fa42 f303 	asr.w	r3, r2, r3
 800313e:	b25a      	sxtb	r2, r3
 8003140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003144:	4313      	orrs	r3, r2
 8003146:	b25b      	sxtb	r3, r3
 8003148:	73bb      	strb	r3, [r7, #14]
				break;
 800314a:	e024      	b.n	8003196 <lcdVLine+0xd2>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 800314c:	7b3b      	ldrb	r3, [r7, #12]
 800314e:	2280      	movs	r2, #128	; 0x80
 8003150:	fa42 f303 	asr.w	r3, r2, r3
 8003154:	b25b      	sxtb	r3, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	b25a      	sxtb	r2, r3
 800315a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800315e:	4013      	ands	r3, r2
 8003160:	b25b      	sxtb	r3, r3
 8003162:	73bb      	strb	r3, [r7, #14]
				break;
 8003164:	e017      	b.n	8003196 <lcdVLine+0xd2>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8003166:	7b3b      	ldrb	r3, [r7, #12]
 8003168:	2280      	movs	r2, #128	; 0x80
 800316a:	fa42 f303 	asr.w	r3, r2, r3
 800316e:	b25a      	sxtb	r2, r3
 8003170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003174:	4053      	eors	r3, r2
 8003176:	b25b      	sxtb	r3, r3
 8003178:	73bb      	strb	r3, [r7, #14]
				break;
 800317a:	e00c      	b.n	8003196 <lcdVLine+0xd2>
			default:
				content &= ~(0b10000000 >> offset);
 800317c:	7b3b      	ldrb	r3, [r7, #12]
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	fa42 f303 	asr.w	r3, r2, r3
 8003184:	b25b      	sxtb	r3, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	b25a      	sxtb	r2, r3
 800318a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800318e:	4013      	ands	r3, r2
 8003190:	b25b      	sxtb	r3, r3
 8003192:	73bb      	strb	r3, [r7, #14]
				break;
 8003194:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	2232      	movs	r2, #50	; 0x32
 800319a:	fb03 f202 	mul.w	r2, r3, r2
 800319e:	7b7b      	ldrb	r3, [r7, #13]
 80031a0:	4413      	add	r3, r2
 80031a2:	4908      	ldr	r1, [pc, #32]	; (80031c4 <lcdVLine+0x100>)
 80031a4:	7bba      	ldrb	r2, [r7, #14]
 80031a6:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	3301      	adds	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d9ac      	bls.n	8003110 <lcdVLine+0x4c>
	}
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc90      	pop	{r4, r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20002798 	.word	0x20002798

080031c8 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80031c8:	b490      	push	{r4, r7}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4604      	mov	r4, r0
 80031d0:	4608      	mov	r0, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	461a      	mov	r2, r3
 80031d6:	4623      	mov	r3, r4
 80031d8:	80fb      	strh	r3, [r7, #6]
 80031da:	4603      	mov	r3, r0
 80031dc:	80bb      	strh	r3, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	70fb      	strb	r3, [r7, #3]
 80031e2:	4613      	mov	r3, r2
 80031e4:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 80031e6:	23ff      	movs	r3, #255	; 0xff
 80031e8:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 80031ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031ee:	2b14      	cmp	r3, #20
 80031f0:	f200 8208 	bhi.w	8003604 <lcdHLine2+0x43c>
 80031f4:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <lcdHLine2+0x34>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	08003251 	.word	0x08003251
 8003200:	08003257 	.word	0x08003257
 8003204:	0800325d 	.word	0x0800325d
 8003208:	08003263 	.word	0x08003263
 800320c:	0800327b 	.word	0x0800327b
 8003210:	08003293 	.word	0x08003293
 8003214:	080032ab 	.word	0x080032ab
 8003218:	080032f5 	.word	0x080032f5
 800321c:	08003339 	.word	0x08003339
 8003220:	0800337d 	.word	0x0800337d
 8003224:	080033bb 	.word	0x080033bb
 8003228:	080033e1 	.word	0x080033e1
 800322c:	0800340b 	.word	0x0800340b
 8003230:	08003441 	.word	0x08003441
 8003234:	08003459 	.word	0x08003459
 8003238:	0800347f 	.word	0x0800347f
 800323c:	080034b5 	.word	0x080034b5
 8003240:	080034eb 	.word	0x080034eb
 8003244:	0800352d 	.word	0x0800352d
 8003248:	08003587 	.word	0x08003587
 800324c:	080035c3 	.word	0x080035c3
		case 0:	// clear
			pattern = 0x00;
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]
			break;
 8003254:	e1ea      	b.n	800362c <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 8003256:	23ff      	movs	r3, #255	; 0xff
 8003258:	75fb      	strb	r3, [r7, #23]
			break;
 800325a:	e1e7      	b.n	800362c <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 800325c:	2355      	movs	r3, #85	; 0x55
 800325e:	75fb      	strb	r3, [r7, #23]
			break;
 8003260:	e1e4      	b.n	800362c <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <lcdHLine2+0xac>
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 8003272:	e1db      	b.n	800362c <lcdHLine2+0x464>
			else pattern = 0xFF;
 8003274:	23ff      	movs	r3, #255	; 0xff
 8003276:	75fb      	strb	r3, [r7, #23]
			break;
 8003278:	e1d8      	b.n	800362c <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <lcdHLine2+0xc4>
 8003286:	23aa      	movs	r3, #170	; 0xaa
 8003288:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 800328a:	e1cf      	b.n	800362c <lcdHLine2+0x464>
			else pattern = 0x55;
 800328c:	2355      	movs	r3, #85	; 0x55
 800328e:	75fb      	strb	r3, [r7, #23]
			break;
 8003290:	e1cc      	b.n	800362c <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <lcdHLine2+0xdc>
 800329e:	2388      	movs	r3, #136	; 0x88
 80032a0:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 80032a2:	e1c3      	b.n	800362c <lcdHLine2+0x464>
			else pattern = 0b00100010;
 80032a4:	2322      	movs	r3, #34	; 0x22
 80032a6:	75fb      	strb	r3, [r7, #23]
			break;
 80032a8:	e1c0      	b.n	800362c <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <lcdHLine2+0xf4>
 80032b6:	2388      	movs	r3, #136	; 0x88
 80032b8:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80032ba:	e1a6      	b.n	800360a <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d102      	bne.n	80032ce <lcdHLine2+0x106>
 80032c8:	2344      	movs	r3, #68	; 0x44
 80032ca:	75fb      	strb	r3, [r7, #23]
			break;
 80032cc:	e19d      	b.n	800360a <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d102      	bne.n	80032e0 <lcdHLine2+0x118>
 80032da:	2322      	movs	r3, #34	; 0x22
 80032dc:	75fb      	strb	r3, [r7, #23]
			break;
 80032de:	e194      	b.n	800360a <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	f040 818e 	bne.w	800360a <lcdHLine2+0x442>
 80032ee:	2311      	movs	r3, #17
 80032f0:	75fb      	strb	r3, [r7, #23]
			break;
 80032f2:	e18a      	b.n	800360a <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <lcdHLine2+0x144>
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d102      	bne.n	8003312 <lcdHLine2+0x14a>
 800330c:	23aa      	movs	r3, #170	; 0xaa
 800330e:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8003310:	e17d      	b.n	800360e <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d102      	bne.n	8003324 <lcdHLine2+0x15c>
 800331e:	2322      	movs	r3, #34	; 0x22
 8003320:	75fb      	strb	r3, [r7, #23]
			break;
 8003322:	e174      	b.n	800360e <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b03      	cmp	r3, #3
 800332e:	f040 816e 	bne.w	800360e <lcdHLine2+0x446>
 8003332:	2388      	movs	r3, #136	; 0x88
 8003334:	75fb      	strb	r3, [r7, #23]
			break;
 8003336:	e16a      	b.n	800360e <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d005      	beq.n	8003350 <lcdHLine2+0x188>
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b03      	cmp	r3, #3
 800334e:	d102      	bne.n	8003356 <lcdHLine2+0x18e>
 8003350:	2355      	movs	r3, #85	; 0x55
 8003352:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 8003354:	e15d      	b.n	8003612 <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <lcdHLine2+0x1a0>
 8003362:	2388      	movs	r3, #136	; 0x88
 8003364:	75fb      	strb	r3, [r7, #23]
			break;
 8003366:	e154      	b.n	8003612 <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	f040 814e 	bne.w	8003612 <lcdHLine2+0x44a>
 8003376:	2322      	movs	r3, #34	; 0x22
 8003378:	75fb      	strb	r3, [r7, #23]
			break;
 800337a:	e14a      	b.n	8003612 <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <lcdHLine2+0x1cc>
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d102      	bne.n	800339a <lcdHLine2+0x1d2>
 8003394:	23cc      	movs	r3, #204	; 0xcc
 8003396:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 8003398:	e13d      	b.n	8003616 <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d006      	beq.n	80033b4 <lcdHLine2+0x1ec>
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	f040 8131 	bne.w	8003616 <lcdHLine2+0x44e>
 80033b4:	2333      	movs	r3, #51	; 0x33
 80033b6:	75fb      	strb	r3, [r7, #23]
			break;
 80033b8:	e12d      	b.n	8003616 <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d102      	bne.n	80033cc <lcdHLine2+0x204>
 80033c6:	2355      	movs	r3, #85	; 0x55
 80033c8:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 80033ca:	e126      	b.n	800361a <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8120 	beq.w	800361a <lcdHLine2+0x452>
 80033da:	23ff      	movs	r3, #255	; 0xff
 80033dc:	75fb      	strb	r3, [r7, #23]
			break;
 80033de:	e11c      	b.n	800361a <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <lcdHLine2+0x22a>
 80033ec:	23cc      	movs	r3, #204	; 0xcc
 80033ee:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80033f0:	e11c      	b.n	800362c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <lcdHLine2+0x23c>
 80033fe:	2344      	movs	r3, #68	; 0x44
 8003400:	75fb      	strb	r3, [r7, #23]
			break;
 8003402:	e113      	b.n	800362c <lcdHLine2+0x464>
			else pattern = 0x00;
 8003404:	2300      	movs	r3, #0
 8003406:	75fb      	strb	r3, [r7, #23]
			break;
 8003408:	e110      	b.n	800362c <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 800340a:	78fb      	ldrb	r3, [r7, #3]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <lcdHLine2+0x254>
 8003416:	23ee      	movs	r3, #238	; 0xee
 8003418:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 800341a:	e107      	b.n	800362c <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d005      	beq.n	8003434 <lcdHLine2+0x26c>
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d102      	bne.n	800343a <lcdHLine2+0x272>
 8003434:	2322      	movs	r3, #34	; 0x22
 8003436:	75fb      	strb	r3, [r7, #23]
			break;
 8003438:	e0f8      	b.n	800362c <lcdHLine2+0x464>
			else pattern = 0x00;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]
			break;
 800343e:	e0f5      	b.n	800362c <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <lcdHLine2+0x28a>
 800344c:	23ff      	movs	r3, #255	; 0xff
 800344e:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8003450:	e0ec      	b.n	800362c <lcdHLine2+0x464>
			else pattern = 0b10001000;
 8003452:	2388      	movs	r3, #136	; 0x88
 8003454:	75fb      	strb	r3, [r7, #23]
			break;
 8003456:	e0e9      	b.n	800362c <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <lcdHLine2+0x2a2>
 8003464:	23aa      	movs	r3, #170	; 0xaa
 8003466:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8003468:	e0d9      	b.n	800361e <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80d3 	beq.w	800361e <lcdHLine2+0x456>
 8003478:	2300      	movs	r3, #0
 800347a:	75fb      	strb	r3, [r7, #23]
			break;
 800347c:	e0cf      	b.n	800361e <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <lcdHLine2+0x2ce>
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d102      	bne.n	800349c <lcdHLine2+0x2d4>
 8003496:	23aa      	movs	r3, #170	; 0xaa
 8003498:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 800349a:	e0c7      	b.n	800362c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <lcdHLine2+0x2e6>
 80034a8:	2344      	movs	r3, #68	; 0x44
 80034aa:	75fb      	strb	r3, [r7, #23]
			break;
 80034ac:	e0be      	b.n	800362c <lcdHLine2+0x464>
			else pattern = 0x00;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]
			break;
 80034b2:	e0bb      	b.n	800362c <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <lcdHLine2+0x304>
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d102      	bne.n	80034d2 <lcdHLine2+0x30a>
 80034cc:	23ee      	movs	r3, #238	; 0xee
 80034ce:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 80034d0:	e0ac      	b.n	800362c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d102      	bne.n	80034e4 <lcdHLine2+0x31c>
 80034de:	23aa      	movs	r3, #170	; 0xaa
 80034e0:	75fb      	strb	r3, [r7, #23]
			break;
 80034e2:	e0a3      	b.n	800362c <lcdHLine2+0x464>
			else pattern = 0x00;
 80034e4:	2300      	movs	r3, #0
 80034e6:	75fb      	strb	r3, [r7, #23]
			break;
 80034e8:	e0a0      	b.n	800362c <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <lcdHLine2+0x33a>
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d102      	bne.n	8003508 <lcdHLine2+0x340>
 8003502:	2344      	movs	r3, #68	; 0x44
 8003504:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8003506:	e08c      	b.n	8003622 <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d102      	bne.n	800351a <lcdHLine2+0x352>
 8003514:	23aa      	movs	r3, #170	; 0xaa
 8003516:	75fb      	strb	r3, [r7, #23]
			break;
 8003518:	e083      	b.n	8003622 <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b03      	cmp	r3, #3
 8003524:	d17d      	bne.n	8003622 <lcdHLine2+0x45a>
 8003526:	2311      	movs	r3, #17
 8003528:	75fb      	strb	r3, [r7, #23]
			break;
 800352a:	e07a      	b.n	8003622 <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	4baf      	ldr	r3, [pc, #700]	; (80037ec <lcdHLine2+0x624>)
 8003530:	fba3 1302 	umull	r1, r3, r3, r2
 8003534:	0859      	lsrs	r1, r3, #1
 8003536:	460b      	mov	r3, r1
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	440b      	add	r3, r1
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <lcdHLine2+0x382>
 8003544:	2355      	movs	r3, #85	; 0x55
 8003546:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8003548:	e06d      	b.n	8003626 <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	4ba7      	ldr	r3, [pc, #668]	; (80037ec <lcdHLine2+0x624>)
 800354e:	fba3 1302 	umull	r1, r3, r3, r2
 8003552:	0859      	lsrs	r1, r3, #1
 8003554:	460b      	mov	r3, r1
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	440b      	add	r3, r1
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d102      	bne.n	8003568 <lcdHLine2+0x3a0>
 8003562:	23aa      	movs	r3, #170	; 0xaa
 8003564:	75fb      	strb	r3, [r7, #23]
			break;
 8003566:	e05e      	b.n	8003626 <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	4ba0      	ldr	r3, [pc, #640]	; (80037ec <lcdHLine2+0x624>)
 800356c:	fba3 1302 	umull	r1, r3, r3, r2
 8003570:	0859      	lsrs	r1, r3, #1
 8003572:	460b      	mov	r3, r1
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	440b      	add	r3, r1
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d152      	bne.n	8003626 <lcdHLine2+0x45e>
 8003580:	2300      	movs	r3, #0
 8003582:	75fb      	strb	r3, [r7, #23]
			break;
 8003584:	e04f      	b.n	8003626 <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <lcdHLine2+0x3d0>
 8003592:	2322      	movs	r3, #34	; 0x22
 8003594:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 8003596:	e049      	b.n	800362c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d102      	bne.n	80035aa <lcdHLine2+0x3e2>
 80035a4:	2355      	movs	r3, #85	; 0x55
 80035a6:	75fb      	strb	r3, [r7, #23]
			break;
 80035a8:	e040      	b.n	800362c <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d102      	bne.n	80035bc <lcdHLine2+0x3f4>
 80035b6:	2388      	movs	r3, #136	; 0x88
 80035b8:	75fb      	strb	r3, [r7, #23]
			break;
 80035ba:	e037      	b.n	800362c <lcdHLine2+0x464>
			else pattern = 0x00;
 80035bc:	2300      	movs	r3, #0
 80035be:	75fb      	strb	r3, [r7, #23]
			break;
 80035c0:	e034      	b.n	800362c <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d005      	beq.n	80035da <lcdHLine2+0x412>
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d102      	bne.n	80035e0 <lcdHLine2+0x418>
 80035da:	2388      	movs	r3, #136	; 0x88
 80035dc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 80035de:	e024      	b.n	800362a <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <lcdHLine2+0x42a>
 80035ec:	2377      	movs	r3, #119	; 0x77
 80035ee:	75fb      	strb	r3, [r7, #23]
			break;
 80035f0:	e01b      	b.n	800362a <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d115      	bne.n	800362a <lcdHLine2+0x462>
 80035fe:	23aa      	movs	r3, #170	; 0xaa
 8003600:	75fb      	strb	r3, [r7, #23]
			break;
 8003602:	e012      	b.n	800362a <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 8003604:	2300      	movs	r3, #0
 8003606:	75fb      	strb	r3, [r7, #23]
			break;
 8003608:	e010      	b.n	800362c <lcdHLine2+0x464>
			break;
 800360a:	bf00      	nop
 800360c:	e00e      	b.n	800362c <lcdHLine2+0x464>
			break;
 800360e:	bf00      	nop
 8003610:	e00c      	b.n	800362c <lcdHLine2+0x464>
			break;
 8003612:	bf00      	nop
 8003614:	e00a      	b.n	800362c <lcdHLine2+0x464>
			break;
 8003616:	bf00      	nop
 8003618:	e008      	b.n	800362c <lcdHLine2+0x464>
			break;
 800361a:	bf00      	nop
 800361c:	e006      	b.n	800362c <lcdHLine2+0x464>
			break;
 800361e:	bf00      	nop
 8003620:	e004      	b.n	800362c <lcdHLine2+0x464>
			break;
 8003622:	bf00      	nop
 8003624:	e002      	b.n	800362c <lcdHLine2+0x464>
			break;
 8003626:	bf00      	nop
 8003628:	e000      	b.n	800362c <lcdHLine2+0x464>
			break;
 800362a:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	08db      	lsrs	r3, r3, #3
 8003630:	b29b      	uxth	r3, r3
 8003632:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 800363e:	88bb      	ldrh	r3, [r7, #4]
 8003640:	08db      	lsrs	r3, r3, #3
 8003642:	b29b      	uxth	r3, r3
 8003644:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 8003646:	88bb      	ldrh	r3, [r7, #4]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	2232      	movs	r2, #50	; 0x32
 8003654:	fb03 f202 	mul.w	r2, r3, r2
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	4413      	add	r3, r2
 800365c:	4a64      	ldr	r2, [pc, #400]	; (80037f0 <lcdHLine2+0x628>)
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	2232      	movs	r2, #50	; 0x32
 8003666:	fb03 f202 	mul.w	r2, r3, r2
 800366a:	7b7b      	ldrb	r3, [r7, #13]
 800366c:	4413      	add	r3, r2
 800366e:	4a60      	ldr	r2, [pc, #384]	; (80037f0 <lcdHLine2+0x628>)
 8003670:	5cd3      	ldrb	r3, [r2, r3]
 8003672:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 8003674:	23ff      	movs	r3, #255	; 0xff
 8003676:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 8003678:	7bbb      	ldrb	r3, [r7, #14]
 800367a:	f1c3 0208 	rsb	r2, r3, #8
 800367e:	88b9      	ldrh	r1, [r7, #4]
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	1acb      	subs	r3, r1, r3
 8003684:	3301      	adds	r3, #1
 8003686:	429a      	cmp	r2, r3
 8003688:	dd11      	ble.n	80036ae <lcdHLine2+0x4e6>
 800368a:	88ba      	ldrh	r2, [r7, #4]
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	3301      	adds	r3, #1
 8003692:	22ff      	movs	r2, #255	; 0xff
 8003694:	fa42 f303 	asr.w	r3, r2, r3
 8003698:	43da      	mvns	r2, r3
 800369a:	7bbb      	ldrb	r3, [r7, #14]
 800369c:	fa42 f303 	asr.w	r3, r2, r3
 80036a0:	b25a      	sxtb	r2, r3
 80036a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036a6:	4013      	ands	r3, r2
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	753b      	strb	r3, [r7, #20]
 80036ac:	e001      	b.n	80036b2 <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	753b      	strb	r3, [r7, #20]
		switch(mode){
 80036b2:	78bb      	ldrb	r3, [r7, #2]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	f200 8130 	bhi.w	800391a <lcdHLine2+0x752>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <lcdHLine2+0x4f8>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	08003755 	.word	0x08003755
 80036c8:	080037f5 	.word	0x080037f5
 80036cc:	08003879 	.word	0x08003879
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 80036d0:	7bbb      	ldrb	r3, [r7, #14]
 80036d2:	22ff      	movs	r2, #255	; 0xff
 80036d4:	fa42 f303 	asr.w	r3, r2, r3
 80036d8:	b25a      	sxtb	r2, r3
 80036da:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80036de:	4013      	ands	r3, r2
 80036e0:	b25a      	sxtb	r2, r3
 80036e2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	b25b      	sxtb	r3, r3
 80036ea:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 80036ec:	7b3b      	ldrb	r3, [r7, #12]
 80036ee:	f1c3 0307 	rsb	r3, r3, #7
 80036f2:	22ff      	movs	r2, #255	; 0xff
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	b25a      	sxtb	r2, r3
 80036fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036fe:	4013      	ands	r3, r2
 8003700:	b25a      	sxtb	r2, r3
 8003702:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003706:	4313      	orrs	r3, r2
 8003708:	b25b      	sxtb	r3, r3
 800370a:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800370c:	2301      	movs	r3, #1
 800370e:	74fb      	strb	r3, [r7, #19]
 8003710:	e019      	b.n	8003746 <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	2232      	movs	r2, #50	; 0x32
 8003716:	fb03 f202 	mul.w	r2, r3, r2
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	441a      	add	r2, r3
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	4413      	add	r3, r2
 8003722:	4a33      	ldr	r2, [pc, #204]	; (80037f0 <lcdHLine2+0x628>)
 8003724:	5cd1      	ldrb	r1, [r2, r3]
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	2232      	movs	r2, #50	; 0x32
 800372a:	fb03 f202 	mul.w	r2, r3, r2
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	441a      	add	r2, r3
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	4413      	add	r3, r2
 8003736:	7dfa      	ldrb	r2, [r7, #23]
 8003738:	430a      	orrs	r2, r1
 800373a:	b2d1      	uxtb	r1, r2
 800373c:	4a2c      	ldr	r2, [pc, #176]	; (80037f0 <lcdHLine2+0x628>)
 800373e:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	3301      	adds	r3, #1
 8003744:	74fb      	strb	r3, [r7, #19]
 8003746:	7cfa      	ldrb	r2, [r7, #19]
 8003748:	7b79      	ldrb	r1, [r7, #13]
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	1acb      	subs	r3, r1, r3
 800374e:	429a      	cmp	r2, r3
 8003750:	dbdf      	blt.n	8003712 <lcdHLine2+0x54a>
			}
			break;
 8003752:	e0e2      	b.n	800391a <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8003754:	7bbb      	ldrb	r3, [r7, #14]
 8003756:	22ff      	movs	r2, #255	; 0xff
 8003758:	fa42 f303 	asr.w	r3, r2, r3
 800375c:	b25a      	sxtb	r2, r3
 800375e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003762:	4013      	ands	r3, r2
 8003764:	b25b      	sxtb	r3, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	b25a      	sxtb	r2, r3
 800376a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800376e:	4013      	ands	r3, r2
 8003770:	b25b      	sxtb	r3, r3
 8003772:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 8003774:	7b3b      	ldrb	r3, [r7, #12]
 8003776:	f1c3 0307 	rsb	r3, r3, #7
 800377a:	22ff      	movs	r2, #255	; 0xff
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	b25a      	sxtb	r2, r3
 8003782:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003786:	4013      	ands	r3, r2
 8003788:	b25b      	sxtb	r3, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	b25a      	sxtb	r2, r3
 800378e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003792:	4013      	ands	r3, r2
 8003794:	b25b      	sxtb	r3, r3
 8003796:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003798:	2301      	movs	r3, #1
 800379a:	74bb      	strb	r3, [r7, #18]
 800379c:	e01e      	b.n	80037dc <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	2232      	movs	r2, #50	; 0x32
 80037a2:	fb03 f202 	mul.w	r2, r3, r2
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	441a      	add	r2, r3
 80037aa:	7cbb      	ldrb	r3, [r7, #18]
 80037ac:	4413      	add	r3, r2
 80037ae:	4a10      	ldr	r2, [pc, #64]	; (80037f0 <lcdHLine2+0x628>)
 80037b0:	5cd3      	ldrb	r3, [r2, r3]
 80037b2:	b25a      	sxtb	r2, r3
 80037b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	b25b      	sxtb	r3, r3
 80037bc:	4013      	ands	r3, r2
 80037be:	b259      	sxtb	r1, r3
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	2232      	movs	r2, #50	; 0x32
 80037c4:	fb03 f202 	mul.w	r2, r3, r2
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	441a      	add	r2, r3
 80037cc:	7cbb      	ldrb	r3, [r7, #18]
 80037ce:	4413      	add	r3, r2
 80037d0:	b2c9      	uxtb	r1, r1
 80037d2:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <lcdHLine2+0x628>)
 80037d4:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80037d6:	7cbb      	ldrb	r3, [r7, #18]
 80037d8:	3301      	adds	r3, #1
 80037da:	74bb      	strb	r3, [r7, #18]
 80037dc:	7cba      	ldrb	r2, [r7, #18]
 80037de:	7b79      	ldrb	r1, [r7, #13]
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	1acb      	subs	r3, r1, r3
 80037e4:	429a      	cmp	r2, r3
 80037e6:	dbda      	blt.n	800379e <lcdHLine2+0x5d6>
			}
			break;
 80037e8:	e097      	b.n	800391a <lcdHLine2+0x752>
 80037ea:	bf00      	nop
 80037ec:	aaaaaaab 	.word	0xaaaaaaab
 80037f0:	20002798 	.word	0x20002798
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	fa42 f303 	asr.w	r3, r2, r3
 80037fc:	b25a      	sxtb	r2, r3
 80037fe:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003802:	4013      	ands	r3, r2
 8003804:	b25a      	sxtb	r2, r3
 8003806:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800380a:	4053      	eors	r3, r2
 800380c:	b25b      	sxtb	r3, r3
 800380e:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8003810:	7b3b      	ldrb	r3, [r7, #12]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	b25a      	sxtb	r2, r3
 800381e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003822:	4013      	ands	r3, r2
 8003824:	b25a      	sxtb	r2, r3
 8003826:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800382a:	4053      	eors	r3, r2
 800382c:	b25b      	sxtb	r3, r3
 800382e:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003830:	2301      	movs	r3, #1
 8003832:	747b      	strb	r3, [r7, #17]
 8003834:	e019      	b.n	800386a <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	2232      	movs	r2, #50	; 0x32
 800383a:	fb03 f202 	mul.w	r2, r3, r2
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	441a      	add	r2, r3
 8003842:	7c7b      	ldrb	r3, [r7, #17]
 8003844:	4413      	add	r3, r2
 8003846:	4a42      	ldr	r2, [pc, #264]	; (8003950 <lcdHLine2+0x788>)
 8003848:	5cd1      	ldrb	r1, [r2, r3]
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	2232      	movs	r2, #50	; 0x32
 800384e:	fb03 f202 	mul.w	r2, r3, r2
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	441a      	add	r2, r3
 8003856:	7c7b      	ldrb	r3, [r7, #17]
 8003858:	4413      	add	r3, r2
 800385a:	7dfa      	ldrb	r2, [r7, #23]
 800385c:	404a      	eors	r2, r1
 800385e:	b2d1      	uxtb	r1, r2
 8003860:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <lcdHLine2+0x788>)
 8003862:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003864:	7c7b      	ldrb	r3, [r7, #17]
 8003866:	3301      	adds	r3, #1
 8003868:	747b      	strb	r3, [r7, #17]
 800386a:	7c7a      	ldrb	r2, [r7, #17]
 800386c:	7b79      	ldrb	r1, [r7, #13]
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	1acb      	subs	r3, r1, r3
 8003872:	429a      	cmp	r2, r3
 8003874:	dbdf      	blt.n	8003836 <lcdHLine2+0x66e>
			}
			break;
 8003876:	e050      	b.n	800391a <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 8003878:	7bbb      	ldrb	r3, [r7, #14]
 800387a:	22ff      	movs	r2, #255	; 0xff
 800387c:	fa42 f303 	asr.w	r3, r2, r3
 8003880:	b25a      	sxtb	r2, r3
 8003882:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003886:	4013      	ands	r3, r2
 8003888:	b25a      	sxtb	r2, r3
 800388a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800388e:	43db      	mvns	r3, r3
 8003890:	b259      	sxtb	r1, r3
 8003892:	7bbb      	ldrb	r3, [r7, #14]
 8003894:	f1c3 0308 	rsb	r3, r3, #8
 8003898:	20ff      	movs	r0, #255	; 0xff
 800389a:	fa00 f303 	lsl.w	r3, r0, r3
 800389e:	b25b      	sxtb	r3, r3
 80038a0:	400b      	ands	r3, r1
 80038a2:	b25b      	sxtb	r3, r3
 80038a4:	4313      	orrs	r3, r2
 80038a6:	b25b      	sxtb	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 80038ae:	7b3b      	ldrb	r3, [r7, #12]
 80038b0:	f1c3 0307 	rsb	r3, r3, #7
 80038b4:	22ff      	movs	r2, #255	; 0xff
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	b25a      	sxtb	r2, r3
 80038bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038c0:	4013      	ands	r3, r2
 80038c2:	b25a      	sxtb	r2, r3
 80038c4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	b259      	sxtb	r1, r3
 80038cc:	7b3b      	ldrb	r3, [r7, #12]
 80038ce:	3301      	adds	r3, #1
 80038d0:	20ff      	movs	r0, #255	; 0xff
 80038d2:	fa40 f303 	asr.w	r3, r0, r3
 80038d6:	b25b      	sxtb	r3, r3
 80038d8:	400b      	ands	r3, r1
 80038da:	b25b      	sxtb	r3, r3
 80038dc:	4313      	orrs	r3, r2
 80038de:	b25b      	sxtb	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80038e6:	2301      	movs	r3, #1
 80038e8:	743b      	strb	r3, [r7, #16]
 80038ea:	e00f      	b.n	800390c <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	2232      	movs	r2, #50	; 0x32
 80038f0:	fb03 f202 	mul.w	r2, r3, r2
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	441a      	add	r2, r3
 80038f8:	7c3b      	ldrb	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	7dfa      	ldrb	r2, [r7, #23]
 80038fe:	43d2      	mvns	r2, r2
 8003900:	b2d1      	uxtb	r1, r2
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <lcdHLine2+0x788>)
 8003904:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003906:	7c3b      	ldrb	r3, [r7, #16]
 8003908:	3301      	adds	r3, #1
 800390a:	743b      	strb	r3, [r7, #16]
 800390c:	7c3a      	ldrb	r2, [r7, #16]
 800390e:	7b79      	ldrb	r1, [r7, #13]
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	1acb      	subs	r3, r1, r3
 8003914:	429a      	cmp	r2, r3
 8003916:	dbe9      	blt.n	80038ec <lcdHLine2+0x724>
			}
			break;
 8003918:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	2232      	movs	r2, #50	; 0x32
 800391e:	fb03 f202 	mul.w	r2, r3, r2
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	4413      	add	r3, r2
 8003926:	490a      	ldr	r1, [pc, #40]	; (8003950 <lcdHLine2+0x788>)
 8003928:	7dba      	ldrb	r2, [r7, #22]
 800392a:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 800392c:	7b7a      	ldrb	r2, [r7, #13]
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	429a      	cmp	r2, r3
 8003932:	d908      	bls.n	8003946 <lcdHLine2+0x77e>
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	2232      	movs	r2, #50	; 0x32
 8003938:	fb03 f202 	mul.w	r2, r3, r2
 800393c:	7b7b      	ldrb	r3, [r7, #13]
 800393e:	4413      	add	r3, r2
 8003940:	4903      	ldr	r1, [pc, #12]	; (8003950 <lcdHLine2+0x788>)
 8003942:	7d7a      	ldrb	r2, [r7, #21]
 8003944:	54ca      	strb	r2, [r1, r3]
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bc90      	pop	{r4, r7}
 800394e:	4770      	bx	lr
 8003950:	20002798 	.word	0x20002798

08003954 <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8003954:	b490      	push	{r4, r7}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	4604      	mov	r4, r0
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	461a      	mov	r2, r3
 8003962:	4623      	mov	r3, r4
 8003964:	80fb      	strh	r3, [r7, #6]
 8003966:	4603      	mov	r3, r0
 8003968:	80bb      	strh	r3, [r7, #4]
 800396a:	460b      	mov	r3, r1
 800396c:	70fb      	strb	r3, [r7, #3]
 800396e:	4613      	mov	r3, r2
 8003970:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	08db      	lsrs	r3, r3, #3
 8003976:	b29b      	uxth	r3, r3
 8003978:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8003984:	88bb      	ldrh	r3, [r7, #4]
 8003986:	08db      	lsrs	r3, r3, #3
 8003988:	b29b      	uxth	r3, r3
 800398a:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 800398c:	88bb      	ldrh	r3, [r7, #4]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	2232      	movs	r2, #50	; 0x32
 800399a:	fb03 f202 	mul.w	r2, r3, r2
 800399e:	7c7b      	ldrb	r3, [r7, #17]
 80039a0:	4413      	add	r3, r2
 80039a2:	4a71      	ldr	r2, [pc, #452]	; (8003b68 <lcdHLine+0x214>)
 80039a4:	5cd3      	ldrb	r3, [r2, r3]
 80039a6:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	2232      	movs	r2, #50	; 0x32
 80039ac:	fb03 f202 	mul.w	r2, r3, r2
 80039b0:	7c7b      	ldrb	r3, [r7, #17]
 80039b2:	441a      	add	r2, r3
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	4413      	add	r3, r2
 80039b8:	4a6b      	ldr	r2, [pc, #428]	; (8003b68 <lcdHLine+0x214>)
 80039ba:	5cd3      	ldrb	r3, [r2, r3]
 80039bc:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 80039be:	23ff      	movs	r3, #255	; 0xff
 80039c0:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 80039c2:	7c3b      	ldrb	r3, [r7, #16]
 80039c4:	f1c3 0208 	rsb	r2, r3, #8
 80039c8:	88b9      	ldrh	r1, [r7, #4]
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	1acb      	subs	r3, r1, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	429a      	cmp	r2, r3
 80039d2:	dd09      	ble.n	80039e8 <lcdHLine+0x94>
 80039d4:	88ba      	ldrh	r2, [r7, #4]
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	22ff      	movs	r2, #255	; 0xff
 80039de:	fa42 f303 	asr.w	r3, r2, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	757b      	strb	r3, [r7, #21]
	switch(mode){
 80039e8:	78bb      	ldrb	r3, [r7, #2]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d067      	beq.n	8003abe <lcdHLine+0x16a>
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	f300 809e 	bgt.w	8003b30 <lcdHLine+0x1dc>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <lcdHLine+0xaa>
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d02e      	beq.n	8003a5a <lcdHLine+0x106>
 80039fc:	e098      	b.n	8003b30 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 80039fe:	7d7a      	ldrb	r2, [r7, #21]
 8003a00:	7c3b      	ldrb	r3, [r7, #16]
 8003a02:	fa42 f303 	asr.w	r3, r2, r3
 8003a06:	b25a      	sxtb	r2, r3
 8003a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8003a12:	7bbb      	ldrb	r3, [r7, #14]
 8003a14:	f1c3 0307 	rsb	r3, r3, #7
 8003a18:	22ff      	movs	r2, #255	; 0xff
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	b25a      	sxtb	r2, r3
 8003a20:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	753b      	strb	r3, [r7, #20]
 8003a2e:	e00d      	b.n	8003a4c <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	2232      	movs	r2, #50	; 0x32
 8003a34:	fb03 f202 	mul.w	r2, r3, r2
 8003a38:	7c7b      	ldrb	r3, [r7, #17]
 8003a3a:	441a      	add	r2, r3
 8003a3c:	7d3b      	ldrb	r3, [r7, #20]
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a49      	ldr	r2, [pc, #292]	; (8003b68 <lcdHLine+0x214>)
 8003a42:	21ff      	movs	r1, #255	; 0xff
 8003a44:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003a46:	7d3b      	ldrb	r3, [r7, #20]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	753b      	strb	r3, [r7, #20]
 8003a4c:	7d3a      	ldrb	r2, [r7, #20]
 8003a4e:	7bf9      	ldrb	r1, [r7, #15]
 8003a50:	7c7b      	ldrb	r3, [r7, #17]
 8003a52:	1acb      	subs	r3, r1, r3
 8003a54:	429a      	cmp	r2, r3
 8003a56:	dbeb      	blt.n	8003a30 <lcdHLine+0xdc>
		}
		break;
 8003a58:	e06a      	b.n	8003b30 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 8003a5a:	7d7a      	ldrb	r2, [r7, #21]
 8003a5c:	7c3b      	ldrb	r3, [r7, #16]
 8003a5e:	fa42 f303 	asr.w	r3, r2, r3
 8003a62:	b25b      	sxtb	r3, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	b25a      	sxtb	r2, r3
 8003a68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	b25b      	sxtb	r3, r3
 8003a70:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 8003a72:	7bbb      	ldrb	r3, [r7, #14]
 8003a74:	f1c3 0307 	rsb	r3, r3, #7
 8003a78:	22ff      	movs	r2, #255	; 0xff
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	b25b      	sxtb	r3, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	b25a      	sxtb	r2, r3
 8003a84:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b25b      	sxtb	r3, r3
 8003a8c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003a8e:	2301      	movs	r3, #1
 8003a90:	74fb      	strb	r3, [r7, #19]
 8003a92:	e00d      	b.n	8003ab0 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	2232      	movs	r2, #50	; 0x32
 8003a98:	fb03 f202 	mul.w	r2, r3, r2
 8003a9c:	7c7b      	ldrb	r3, [r7, #17]
 8003a9e:	441a      	add	r2, r3
 8003aa0:	7cfb      	ldrb	r3, [r7, #19]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <lcdHLine+0x214>)
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	3301      	adds	r3, #1
 8003aae:	74fb      	strb	r3, [r7, #19]
 8003ab0:	7cfa      	ldrb	r2, [r7, #19]
 8003ab2:	7bf9      	ldrb	r1, [r7, #15]
 8003ab4:	7c7b      	ldrb	r3, [r7, #17]
 8003ab6:	1acb      	subs	r3, r1, r3
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	dbeb      	blt.n	8003a94 <lcdHLine+0x140>
		}
		break;
 8003abc:	e038      	b.n	8003b30 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 8003abe:	7d7a      	ldrb	r2, [r7, #21]
 8003ac0:	7c3b      	ldrb	r3, [r7, #16]
 8003ac2:	fa42 f303 	asr.w	r3, r2, r3
 8003ac6:	b25a      	sxtb	r2, r3
 8003ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003acc:	4053      	eors	r3, r2
 8003ace:	b25b      	sxtb	r3, r3
 8003ad0:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8003ad2:	7bbb      	ldrb	r3, [r7, #14]
 8003ad4:	f1c3 0307 	rsb	r3, r3, #7
 8003ad8:	22ff      	movs	r2, #255	; 0xff
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	b25a      	sxtb	r2, r3
 8003ae0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ae4:	4053      	eors	r3, r2
 8003ae6:	b25b      	sxtb	r3, r3
 8003ae8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003aea:	2301      	movs	r3, #1
 8003aec:	74bb      	strb	r3, [r7, #18]
 8003aee:	e018      	b.n	8003b22 <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	2232      	movs	r2, #50	; 0x32
 8003af4:	fb03 f202 	mul.w	r2, r3, r2
 8003af8:	7c7b      	ldrb	r3, [r7, #17]
 8003afa:	441a      	add	r2, r3
 8003afc:	7cbb      	ldrb	r3, [r7, #18]
 8003afe:	4413      	add	r3, r2
 8003b00:	4a19      	ldr	r2, [pc, #100]	; (8003b68 <lcdHLine+0x214>)
 8003b02:	5cd2      	ldrb	r2, [r2, r3]
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	2132      	movs	r1, #50	; 0x32
 8003b08:	fb03 f101 	mul.w	r1, r3, r1
 8003b0c:	7c7b      	ldrb	r3, [r7, #17]
 8003b0e:	4419      	add	r1, r3
 8003b10:	7cbb      	ldrb	r3, [r7, #18]
 8003b12:	440b      	add	r3, r1
 8003b14:	43d2      	mvns	r2, r2
 8003b16:	b2d1      	uxtb	r1, r2
 8003b18:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <lcdHLine+0x214>)
 8003b1a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003b1c:	7cbb      	ldrb	r3, [r7, #18]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	74bb      	strb	r3, [r7, #18]
 8003b22:	7cba      	ldrb	r2, [r7, #18]
 8003b24:	7bf9      	ldrb	r1, [r7, #15]
 8003b26:	7c7b      	ldrb	r3, [r7, #17]
 8003b28:	1acb      	subs	r3, r1, r3
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	dbe0      	blt.n	8003af0 <lcdHLine+0x19c>
		}
		break;
 8003b2e:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	2232      	movs	r2, #50	; 0x32
 8003b34:	fb03 f202 	mul.w	r2, r3, r2
 8003b38:	7c7b      	ldrb	r3, [r7, #17]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	490a      	ldr	r1, [pc, #40]	; (8003b68 <lcdHLine+0x214>)
 8003b3e:	7dfa      	ldrb	r2, [r7, #23]
 8003b40:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003b42:	7bfa      	ldrb	r2, [r7, #15]
 8003b44:	7c7b      	ldrb	r3, [r7, #17]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d908      	bls.n	8003b5c <lcdHLine+0x208>
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	2232      	movs	r2, #50	; 0x32
 8003b4e:	fb03 f202 	mul.w	r2, r3, r2
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	4413      	add	r3, r2
 8003b56:	4904      	ldr	r1, [pc, #16]	; (8003b68 <lcdHLine+0x214>)
 8003b58:	7dba      	ldrb	r2, [r7, #22]
 8003b5a:	54ca      	strb	r2, [r1, r3]
}
 8003b5c:	bf00      	nop
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc90      	pop	{r4, r7}
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20002798 	.word	0x20002798

08003b6c <lcdRefresh>:

void lcdRefresh(void){
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8003b72:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <lcdRefresh+0x7c>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d032      	beq.n	8003be0 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	2140      	movs	r1, #64	; 0x40
 8003b7e:	481b      	ldr	r0, [pc, #108]	; (8003bec <lcdRefresh+0x80>)
 8003b80:	f006 ff92 	bl	800aaa8 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003b84:	2301      	movs	r3, #1
 8003b86:	71fb      	strb	r3, [r7, #7]
 8003b88:	e01c      	b.n	8003bc4 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f891 	bl	8002cb4 <reverse_uint8>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <lcdRefresh+0x84>)
 8003b98:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8003b9a:	2396      	movs	r3, #150	; 0x96
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	4914      	ldr	r1, [pc, #80]	; (8003bf0 <lcdRefresh+0x84>)
 8003ba0:	4814      	ldr	r0, [pc, #80]	; (8003bf4 <lcdRefresh+0x88>)
 8003ba2:	f00a f97a 	bl	800de9a <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	2232      	movs	r2, #50	; 0x32
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <lcdRefresh+0x8c>)
 8003bb2:	1899      	adds	r1, r3, r2
 8003bb4:	2396      	movs	r3, #150	; 0x96
 8003bb6:	2232      	movs	r2, #50	; 0x32
 8003bb8:	480e      	ldr	r0, [pc, #56]	; (8003bf4 <lcdRefresh+0x88>)
 8003bba:	f00a f96e 	bl	800de9a <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	71fb      	strb	r3, [r7, #7]
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	2bf1      	cmp	r3, #241	; 0xf1
 8003bc8:	d9df      	bls.n	8003b8a <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8003bca:	2396      	movs	r3, #150	; 0x96
 8003bcc:	2202      	movs	r2, #2
 8003bce:	490b      	ldr	r1, [pc, #44]	; (8003bfc <lcdRefresh+0x90>)
 8003bd0:	4808      	ldr	r0, [pc, #32]	; (8003bf4 <lcdRefresh+0x88>)
 8003bd2:	f00a f962 	bl	800de9a <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2140      	movs	r1, #64	; 0x40
 8003bda:	4804      	ldr	r0, [pc, #16]	; (8003bec <lcdRefresh+0x80>)
 8003bdc:	f006 ff64 	bl	800aaa8 <HAL_GPIO_WritePin>
	}
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20000198 	.word	0x20000198
 8003bec:	40020000 	.word	0x40020000
 8003bf0:	2000019c 	.word	0x2000019c
 8003bf4:	20005b44 	.word	0x20005b44
 8003bf8:	20002798 	.word	0x20002798
 8003bfc:	20002794 	.word	0x20002794

08003c00 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4604      	mov	r4, r0
 8003c08:	4608      	mov	r0, r1
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	80fb      	strh	r3, [r7, #6]
 8003c12:	4603      	mov	r3, r0
 8003c14:	80bb      	strh	r3, [r7, #4]
 8003c16:	460b      	mov	r3, r1
 8003c18:	70fb      	strb	r3, [r7, #3]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	73fb      	strb	r3, [r7, #15]
 8003c22:	e009      	b.n	8003c38 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8003c24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	88b9      	ldrh	r1, [r7, #4]
 8003c2c:	88f8      	ldrh	r0, [r7, #6]
 8003c2e:	f7ff fe91 	bl	8003954 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	3301      	adds	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
 8003c38:	7bfa      	ldrb	r2, [r7, #15]
 8003c3a:	78bb      	ldrb	r3, [r7, #2]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d9f1      	bls.n	8003c24 <lcdRect+0x24>
	}
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}

08003c4a <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8003c4a:	b590      	push	{r4, r7, lr}
 8003c4c:	b087      	sub	sp, #28
 8003c4e:	af02      	add	r7, sp, #8
 8003c50:	4604      	mov	r4, r0
 8003c52:	4608      	mov	r0, r1
 8003c54:	4611      	mov	r1, r2
 8003c56:	461a      	mov	r2, r3
 8003c58:	4623      	mov	r3, r4
 8003c5a:	80fb      	strh	r3, [r7, #6]
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	80bb      	strh	r3, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70fb      	strb	r3, [r7, #3]
 8003c64:	4613      	mov	r3, r2
 8003c66:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	88bb      	ldrh	r3, [r7, #4]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d046      	beq.n	8003cfe <lcdRect2+0xb4>
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	78bb      	ldrb	r3, [r7, #2]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d042      	beq.n	8003cfe <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	73fb      	strb	r3, [r7, #15]
 8003c7c:	e00d      	b.n	8003c9a <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8003c7e:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003c82:	7bfa      	ldrb	r2, [r7, #15]
 8003c84:	88b9      	ldrh	r1, [r7, #4]
 8003c86:	88f8      	ldrh	r0, [r7, #6]
 8003c88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	4623      	mov	r3, r4
 8003c90:	f7ff fa9a 	bl	80031c8 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	3301      	adds	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
 8003c9a:	7bfa      	ldrb	r2, [r7, #15]
 8003c9c:	78bb      	ldrb	r3, [r7, #2]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d9ed      	bls.n	8003c7e <lcdRect2+0x34>
		}
		if(outline){
 8003ca2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d029      	beq.n	8003cfe <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8003caa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	88b9      	ldrh	r1, [r7, #4]
 8003cb2:	88f8      	ldrh	r0, [r7, #6]
 8003cb4:	2401      	movs	r4, #1
 8003cb6:	9400      	str	r4, [sp, #0]
 8003cb8:	f7ff fa86 	bl	80031c8 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8003cbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cc0:	78ba      	ldrb	r2, [r7, #2]
 8003cc2:	88b9      	ldrh	r1, [r7, #4]
 8003cc4:	88f8      	ldrh	r0, [r7, #6]
 8003cc6:	2401      	movs	r4, #1
 8003cc8:	9400      	str	r4, [sp, #0]
 8003cca:	f7ff fa7d 	bl	80031c8 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	b299      	uxth	r1, r3
 8003cd6:	78bb      	ldrb	r3, [r7, #2]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ce0:	88f8      	ldrh	r0, [r7, #6]
 8003ce2:	f7ff f9ef 	bl	80030c4 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	b299      	uxth	r1, r3
 8003cee:	78bb      	ldrb	r3, [r7, #2]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cf8:	88b8      	ldrh	r0, [r7, #4]
 8003cfa:	f7ff f9e3 	bl	80030c4 <lcdVLine>
		}
	}
}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd90      	pop	{r4, r7, pc}

08003d06 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003d0e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d12:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d013      	beq.n	8003d46 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003d1e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d22:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003d26:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003d2e:	e000      	b.n	8003d32 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003d30:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003d32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f9      	beq.n	8003d30 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003d3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003d46:	687b      	ldr	r3, [r7, #4]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff ffd1 	bl	8003d06 <ITM_SendChar>
	return(ch);
 8003d64:	687b      	ldr	r3, [r7, #4]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <enableVib>:

uint8_t vibPower = 99;
void enableVib(void){
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
	TIM14->CCR1 = vibPower;
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <enableVib+0x18>)
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <enableVib+0x1c>)
 8003d7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003d7c:	bf00      	nop
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	200001a6 	.word	0x200001a6
 8003d8c:	40002000 	.word	0x40002000

08003d90 <disableVib>:
void disableVib(void){
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
	TIM14->CCR1 = 0;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <disableVib+0x14>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003d9a:	bf00      	nop
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40002000 	.word	0x40002000

08003da8 <toggleVib>:
void toggleVib(void){
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
	if(TIM14->CCR1 == 0){
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <toggleVib+0x28>)
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <toggleVib+0x16>
		TIM14->CCR1 = vibPower;
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <toggleVib+0x2c>)
 8003db6:	781a      	ldrb	r2, [r3, #0]
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <toggleVib+0x28>)
 8003dba:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		TIM14->CCR1 = 0;
	}
}
 8003dbc:	e002      	b.n	8003dc4 <toggleVib+0x1c>
		TIM14->CCR1 = 0;
 8003dbe:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <toggleVib+0x28>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40002000 	.word	0x40002000
 8003dd4:	200001a6 	.word	0x200001a6

08003dd8 <setTimeout>:
uint8_t timeoutState = 0;
uint16_t timeoutValue;
uint16_t timeoutSetpoint;
void (*timeoutClbkPtr)(void);
void setTimeout(uint16_t ms,  void (*callback)(void)){
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	6039      	str	r1, [r7, #0]
 8003de2:	80fb      	strh	r3, [r7, #6]
	// set timeout setpoint
	timeoutSetpoint = ms;
 8003de4:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <setTimeout+0x30>)
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	8013      	strh	r3, [r2, #0]
	// reset timeout value
	timeoutValue = 0;
 8003dea:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <setTimeout+0x34>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	801a      	strh	r2, [r3, #0]
	// set callback function
	timeoutClbkPtr = callback;
 8003df0:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <setTimeout+0x38>)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6013      	str	r3, [r2, #0]
	// flag timeout running
	timeoutState = 1;
 8003df6:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <setTimeout+0x3c>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	20005a94 	.word	0x20005a94
 8003e0c:	20005a92 	.word	0x20005a92
 8003e10:	20005a98 	.word	0x20005a98
 8003e14:	20005a91 	.word	0x20005a91

08003e18 <pulseVib>:
void pulseVib(uint16_t duration, uint8_t power){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	460a      	mov	r2, r1
 8003e22:	80fb      	strh	r3, [r7, #6]
 8003e24:	4613      	mov	r3, r2
 8003e26:	717b      	strb	r3, [r7, #5]
	vibPower = power;
 8003e28:	4a06      	ldr	r2, [pc, #24]	; (8003e44 <pulseVib+0x2c>)
 8003e2a:	797b      	ldrb	r3, [r7, #5]
 8003e2c:	7013      	strb	r3, [r2, #0]
	enableVib();
 8003e2e:	f7ff ff9f 	bl	8003d70 <enableVib>
	setTimeout(duration, &disableVib);
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	4904      	ldr	r1, [pc, #16]	; (8003e48 <pulseVib+0x30>)
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff ffce 	bl	8003dd8 <setTimeout>
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	200001a6 	.word	0x200001a6
 8003e48:	08003d91 	.word	0x08003d91

08003e4c <patternVib>:
uint8_t patternStep = 0;
uint8_t patternState = 0;
void patternVib(void){
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
	if(patternState){
 8003e50:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <patternVib+0x98>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d042      	beq.n	8003ede <patternVib+0x92>
		switch(patternStep){
 8003e58:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <patternVib+0x9c>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d837      	bhi.n	8003ed0 <patternVib+0x84>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <patternVib+0x1c>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e7d 	.word	0x08003e7d
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003ea1 	.word	0x08003ea1
 8003e74:	08003eb1 	.word	0x08003eb1
 8003e78:	08003ec1 	.word	0x08003ec1
		case 0:
			patternState = 0;
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <patternVib+0x98>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
			toggleVib();
 8003e82:	f7ff ff91 	bl	8003da8 <toggleVib>
			setTimeout(10, &toggleVib);
 8003e86:	4919      	ldr	r1, [pc, #100]	; (8003eec <patternVib+0xa0>)
 8003e88:	200a      	movs	r0, #10
 8003e8a:	f7ff ffa5 	bl	8003dd8 <setTimeout>
			break;
 8003e8e:	e027      	b.n	8003ee0 <patternVib+0x94>
		case 1:
			patternState = 0;
 8003e90:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <patternVib+0x98>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	701a      	strb	r2, [r3, #0]
			setTimeout(10, &toggleVib);
 8003e96:	4915      	ldr	r1, [pc, #84]	; (8003eec <patternVib+0xa0>)
 8003e98:	200a      	movs	r0, #10
 8003e9a:	f7ff ff9d 	bl	8003dd8 <setTimeout>
			break;
 8003e9e:	e01f      	b.n	8003ee0 <patternVib+0x94>
		case 2:
			patternState = 0;
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <patternVib+0x98>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
			setTimeout(50, &toggleVib);
 8003ea6:	4911      	ldr	r1, [pc, #68]	; (8003eec <patternVib+0xa0>)
 8003ea8:	2032      	movs	r0, #50	; 0x32
 8003eaa:	f7ff ff95 	bl	8003dd8 <setTimeout>
			break;
 8003eae:	e017      	b.n	8003ee0 <patternVib+0x94>
		case 3:
			patternState = 0;
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <patternVib+0x98>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
			setTimeout(10, &toggleVib);
 8003eb6:	490d      	ldr	r1, [pc, #52]	; (8003eec <patternVib+0xa0>)
 8003eb8:	200a      	movs	r0, #10
 8003eba:	f7ff ff8d 	bl	8003dd8 <setTimeout>
			break;
 8003ebe:	e00f      	b.n	8003ee0 <patternVib+0x94>
		case 4:
			patternState = 0;
 8003ec0:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <patternVib+0x98>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
			setTimeout(10, &toggleVib);
 8003ec6:	4909      	ldr	r1, [pc, #36]	; (8003eec <patternVib+0xa0>)
 8003ec8:	200a      	movs	r0, #10
 8003eca:	f7ff ff85 	bl	8003dd8 <setTimeout>
			break;
 8003ece:	e007      	b.n	8003ee0 <patternVib+0x94>
		default:
			patternState = 0;
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <patternVib+0x98>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
			patternStep = 0;
 8003ed6:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <patternVib+0x9c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
		}

	}

}
 8003edc:	e000      	b.n	8003ee0 <patternVib+0x94>
	}
 8003ede:	bf00      	nop
}
 8003ee0:	bf00      	nop
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20005a9d 	.word	0x20005a9d
 8003ee8:	20005a9c 	.word	0x20005a9c
 8003eec:	08003da9 	.word	0x08003da9

08003ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 8003ef6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ef8:	f006 f9e4 	bl	800a2c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003efc:	f000 f8f6 	bl	80040ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f00:	f7fe f8f8 	bl	80020f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003f04:	f000 fff6 	bl	8004ef4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003f08:	f000 fb16 	bl	8004538 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003f0c:	f000 fd92 	bl	8004a34 <MX_TIM1_Init>
  MX_TIM10_Init();
 8003f10:	f000 fe32 	bl	8004b78 <MX_TIM10_Init>
  MX_I2C1_Init();
 8003f14:	f7fe fe46 	bl	8002ba4 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003f18:	f000 fe52 	bl	8004bc0 <MX_TIM11_Init>
  MX_RTC_Init();
 8003f1c:	f000 fa2a 	bl	8004374 <MX_RTC_Init>
  MX_TIM13_Init();
 8003f20:	f000 fe72 	bl	8004c08 <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 8003f24:	f000 fa80 	bl	8004428 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003f28:	f00c fce0 	bl	80108ec <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8003f2c:	f001 f80c 	bl	8004f48 <MX_USART6_UART_Init>
  MX_TIM14_Init();
 8003f30:	f000 fe8e 	bl	8004c50 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8003f34:	4856      	ldr	r0, [pc, #344]	; (8004090 <main+0x1a0>)
 8003f36:	f00a f9b7 	bl	800e2a8 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8003f3a:	4855      	ldr	r0, [pc, #340]	; (8004090 <main+0x1a0>)
 8003f3c:	f00a fa04 	bl	800e348 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003f40:	2100      	movs	r1, #0
 8003f42:	4853      	ldr	r0, [pc, #332]	; (8004090 <main+0x1a0>)
 8003f44:	f00a faf8 	bl	800e538 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
//  HAL_TIM_Base_Start_IT(&htim10);
  // Vibration motor PWM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4852      	ldr	r0, [pc, #328]	; (8004094 <main+0x1a4>)
 8003f4c:	f00a faf4 	bl	800e538 <HAL_TIM_PWM_Start>

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 8003f50:	4851      	ldr	r0, [pc, #324]	; (8004098 <main+0x1a8>)
 8003f52:	f00a f9f9 	bl	800e348 <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 8003f56:	4851      	ldr	r0, [pc, #324]	; (800409c <main+0x1ac>)
 8003f58:	f7fd ff1a 	bl	8001d90 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 8003f5c:	4850      	ldr	r0, [pc, #320]	; (80040a0 <main+0x1b0>)
 8003f5e:	f00a f9f3 	bl	800e348 <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 8003f62:	4c50      	ldr	r4, [pc, #320]	; (80040a4 <main+0x1b4>)
 8003f64:	463b      	mov	r3, r7
 8003f66:	4950      	ldr	r1, [pc, #320]	; (80040a8 <main+0x1b8>)
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fe fa21 	bl	80023b0 <initGps>
 8003f6e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003f72:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003f76:	4620      	mov	r0, r4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f44f 7319 	mov.w	r3, #612	; 0x264
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f00f fe78 	bl	8013c74 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8003f84:	4849      	ldr	r0, [pc, #292]	; (80040ac <main+0x1bc>)
 8003f86:	f7fd fc43 	bl	8001810 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 8003f8a:	f240 118f 	movw	r1, #399	; 0x18f
 8003f8e:	4848      	ldr	r0, [pc, #288]	; (80040b0 <main+0x1c0>)
 8003f90:	f006 f851 	bl	800a036 <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 8003f94:	f240 128f 	movw	r2, #399	; 0x18f
 8003f98:	2102      	movs	r1, #2
 8003f9a:	4846      	ldr	r0, [pc, #280]	; (80040b4 <main+0x1c4>)
 8003f9c:	f005 ff8e 	bl	8009ebc <cbuf_init>

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fa6:	4844      	ldr	r0, [pc, #272]	; (80040b8 <main+0x1c8>)
 8003fa8:	f006 fd7e 	bl	800aaa8 <HAL_GPIO_WritePin>
  	Mount_SD("/");
 8003fac:	4843      	ldr	r0, [pc, #268]	; (80040bc <main+0x1cc>)
 8003fae:	f7fd f859 	bl	8001064 <Mount_SD>
  	Create_File("FILE1.TXT");
 8003fb2:	4843      	ldr	r0, [pc, #268]	; (80040c0 <main+0x1d0>)
 8003fb4:	f7fd f962 	bl	800127c <Create_File>
  	Update_File("FILE1.TXT", "Hello world, SD cart write \n");
 8003fb8:	4942      	ldr	r1, [pc, #264]	; (80040c4 <main+0x1d4>)
 8003fba:	4841      	ldr	r0, [pc, #260]	; (80040c0 <main+0x1d0>)
 8003fbc:	f7fd f9ea 	bl	8001394 <Update_File>
  	Create_File("FILE4.TXT");
 8003fc0:	4841      	ldr	r0, [pc, #260]	; (80040c8 <main+0x1d8>)
 8003fc2:	f7fd f95b 	bl	800127c <Create_File>
  	char fileText[50];
  	Read_File("config.txt", &fileText);
 8003fc6:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003fca:	4619      	mov	r1, r3
 8003fcc:	483f      	ldr	r0, [pc, #252]	; (80040cc <main+0x1dc>)
 8003fce:	f7fd f8a3 	bl	8001118 <Read_File>

  	// log state after reset
  	HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	493e      	ldr	r1, [pc, #248]	; (80040d0 <main+0x1e0>)
 8003fd6:	483f      	ldr	r0, [pc, #252]	; (80040d4 <main+0x1e4>)
 8003fd8:	f008 fd60 	bl	800ca9c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	493e      	ldr	r1, [pc, #248]	; (80040d8 <main+0x1e8>)
 8003fe0:	483c      	ldr	r0, [pc, #240]	; (80040d4 <main+0x1e4>)
 8003fe2:	f008 fe3d 	bl	800cc60 <HAL_RTC_GetDate>
	char tmpl[50] = {0};
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8003fec:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8003ff0:	222e      	movs	r2, #46	; 0x2e
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f00f fe4b 	bl	8013c90 <memset>
	sprintf(&tmpl, "%02d:%02d:%02d --- Initialized ---\n", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8003ffa:	4b35      	ldr	r3, [pc, #212]	; (80040d0 <main+0x1e0>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b33      	ldr	r3, [pc, #204]	; (80040d0 <main+0x1e0>)
 8004002:	785b      	ldrb	r3, [r3, #1]
 8004004:	4619      	mov	r1, r3
 8004006:	4b32      	ldr	r3, [pc, #200]	; (80040d0 <main+0x1e0>)
 8004008:	789b      	ldrb	r3, [r3, #2]
 800400a:	f507 701a 	add.w	r0, r7, #616	; 0x268
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	460b      	mov	r3, r1
 8004012:	4932      	ldr	r1, [pc, #200]	; (80040dc <main+0x1ec>)
 8004014:	f010 ff6a 	bl	8014eec <siprintf>
	SD_logger(tmpl);
 8004018:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800401c:	4618      	mov	r0, r3
 800401e:	f7fd f80b 	bl	8001038 <SD_logger>
//  	Unmount_SD("/");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 8004022:	f7fe fe71 	bl	8002d08 <lcdClearBuffer>
  lcdRefresh();
 8004026:	f7ff fda1 	bl	8003b6c <lcdRefresh>
  while (1)
  {
	  // periodic execution driven by flag modified inside of timer interrupt
	  if(updateBmpData_flag){
 800402a:	4b2d      	ldr	r3, [pc, #180]	; (80040e0 <main+0x1f0>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00f      	beq.n	8004052 <main+0x162>
		bmpData = getBmpData(&bmp180module);
 8004032:	4c2c      	ldr	r4, [pc, #176]	; (80040e4 <main+0x1f4>)
 8004034:	463b      	mov	r3, r7
 8004036:	491d      	ldr	r1, [pc, #116]	; (80040ac <main+0x1bc>)
 8004038:	4618      	mov	r0, r3
 800403a:	f7fd fe51 	bl	8001ce0 <getBmpData>
 800403e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004042:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8004046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		updateBmpData_flag = 0;
 800404c:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <main+0x1f0>)
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]
	  }
	  // functions executed along with the menu
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8004052:	2200      	movs	r2, #0
 8004054:	491e      	ldr	r1, [pc, #120]	; (80040d0 <main+0x1e0>)
 8004056:	481f      	ldr	r0, [pc, #124]	; (80040d4 <main+0x1e4>)
 8004058:	f008 fd20 	bl	800ca9c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800405c:	2200      	movs	r2, #0
 800405e:	491e      	ldr	r1, [pc, #120]	; (80040d8 <main+0x1e8>)
 8004060:	481c      	ldr	r0, [pc, #112]	; (80040d4 <main+0x1e4>)
 8004062:	f008 fdfd 	bl	800cc60 <HAL_RTC_GetDate>
		if(RtcTime.Minutes == 0 && RtcTime.Seconds==0){
 8004066:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <main+0x1e0>)
 8004068:	785b      	ldrb	r3, [r3, #1]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d108      	bne.n	8004080 <main+0x190>
 800406e:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <main+0x1e0>)
 8004070:	789b      	ldrb	r3, [r3, #2]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d104      	bne.n	8004080 <main+0x190>
//			pulseVib(20, 60);
			patternState = 1;
 8004076:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <main+0x1f8>)
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
			patternVib();
 800407c:	f7ff fee6 	bl	8003e4c <patternVib>
		}
	  lcdClearBuffer();
 8004080:	f7fe fe42 	bl	8002d08 <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 8004084:	f7fe fd70 	bl	8002b68 <showGui>

	  lcdRefresh();
 8004088:	f7ff fd70 	bl	8003b6c <lcdRefresh>
	  if(updateBmpData_flag){
 800408c:	e7cd      	b.n	800402a <main+0x13a>
 800408e:	bf00      	nop
 8004090:	20005ba8 	.word	0x20005ba8
 8004094:	20005cc8 	.word	0x20005cc8
 8004098:	20005c38 	.word	0x20005c38
 800409c:	2000002c 	.word	0x2000002c
 80040a0:	20005c80 	.word	0x20005c80
 80040a4:	2000582c 	.word	0x2000582c
 80040a8:	20005d54 	.word	0x20005d54
 80040ac:	2000260c 	.word	0x2000260c
 80040b0:	2000581c 	.word	0x2000581c
 80040b4:	20005808 	.word	0x20005808
 80040b8:	40020800 	.word	0x40020800
 80040bc:	0801c1f0 	.word	0x0801c1f0
 80040c0:	0801c1f4 	.word	0x0801c1f4
 80040c4:	0801c200 	.word	0x0801c200
 80040c8:	0801c220 	.word	0x0801c220
 80040cc:	0801c22c 	.word	0x0801c22c
 80040d0:	200057f0 	.word	0x200057f0
 80040d4:	20005aa0 	.word	0x20005aa0
 80040d8:	20005804 	.word	0x20005804
 80040dc:	0801c238 	.word	0x0801c238
 80040e0:	200001a5 	.word	0x200001a5
 80040e4:	20002650 	.word	0x20002650
 80040e8:	20005a9d 	.word	0x20005a9d

080040ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b094      	sub	sp, #80	; 0x50
 80040f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040f2:	f107 0320 	add.w	r3, r7, #32
 80040f6:	2230      	movs	r2, #48	; 0x30
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f00f fdc8 	bl	8013c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004100:	f107 030c 	add.w	r3, r7, #12
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	4b29      	ldr	r3, [pc, #164]	; (80041bc <SystemClock_Config+0xd0>)
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	4a28      	ldr	r2, [pc, #160]	; (80041bc <SystemClock_Config+0xd0>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	6413      	str	r3, [r2, #64]	; 0x40
 8004120:	4b26      	ldr	r3, [pc, #152]	; (80041bc <SystemClock_Config+0xd0>)
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800412c:	2300      	movs	r3, #0
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	4b23      	ldr	r3, [pc, #140]	; (80041c0 <SystemClock_Config+0xd4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <SystemClock_Config+0xd4>)
 8004136:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <SystemClock_Config+0xd4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004148:	2305      	movs	r3, #5
 800414a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800414c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004152:	2301      	movs	r3, #1
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004156:	2302      	movs	r3, #2
 8004158:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800415a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004160:	2304      	movs	r3, #4
 8004162:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004164:	23a8      	movs	r3, #168	; 0xa8
 8004166:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004168:	2302      	movs	r3, #2
 800416a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800416c:	2307      	movs	r3, #7
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004170:	f107 0320 	add.w	r3, r7, #32
 8004174:	4618      	mov	r0, r3
 8004176:	f007 fd29 	bl	800bbcc <HAL_RCC_OscConfig>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004180:	f000 f8ea 	bl	8004358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004184:	230f      	movs	r3, #15
 8004186:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004188:	2302      	movs	r3, #2
 800418a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004190:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004194:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800419c:	f107 030c 	add.w	r3, r7, #12
 80041a0:	2105      	movs	r1, #5
 80041a2:	4618      	mov	r0, r3
 80041a4:	f007 ff8a 	bl	800c0bc <HAL_RCC_ClockConfig>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80041ae:	f000 f8d3 	bl	8004358 <Error_Handler>
  }
}
 80041b2:	bf00      	nop
 80041b4:	3750      	adds	r7, #80	; 0x50
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40007000 	.word	0x40007000

080041c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 1Hz
	if(htim->Instance == TIM10){
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a42      	ldr	r2, [pc, #264]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0x118>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d108      	bne.n	80041e8 <HAL_TIM_PeriodElapsedCallback+0x24>
		if(stwS.state){
 80041d6:	4b42      	ldr	r3, [pc, #264]	; (80042e0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80041d8:	78db      	ldrb	r3, [r3, #3]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_TIM_PeriodElapsedCallback+0x24>
			stwTick();
 80041e4:	f000 fafa 	bl	80047dc <stwTick>
		}
	}
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM11){
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a3d      	ldr	r2, [pc, #244]	; (80042e4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d122      	bne.n	8004238 <HAL_TIM_PeriodElapsedCallback+0x74>
		scanButtons(btnsPtrs);
 80041f2:	483d      	ldr	r0, [pc, #244]	; (80042e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80041f4:	f7fd ff64 	bl	80020c0 <scanButtons>
		// check timeouts
		if(timeoutState){
 80041f8:	4b3c      	ldr	r3, [pc, #240]	; (80042ec <HAL_TIM_PeriodElapsedCallback+0x128>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <HAL_TIM_PeriodElapsedCallback+0x74>
			if(timeoutValue == timeoutSetpoint){
 8004200:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004202:	881a      	ldrh	r2, [r3, #0]
 8004204:	4b3b      	ldr	r3, [pc, #236]	; (80042f4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d10f      	bne.n	800422c <HAL_TIM_PeriodElapsedCallback+0x68>
				(*timeoutClbkPtr)();
 800420c:	4b3a      	ldr	r3, [pc, #232]	; (80042f8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4798      	blx	r3
				timeoutState = 0;
 8004212:	4b36      	ldr	r3, [pc, #216]	; (80042ec <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
				patternStep++;
 8004218:	4b38      	ldr	r3, [pc, #224]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0x138>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	4b36      	ldr	r3, [pc, #216]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004222:	701a      	strb	r2, [r3, #0]
				patternState = 1;
 8004224:	4b36      	ldr	r3, [pc, #216]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	e005      	b.n	8004238 <HAL_TIM_PeriodElapsedCallback+0x74>
			} else {
				timeoutValue++;
 800422c:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	3301      	adds	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	4b2e      	ldr	r3, [pc, #184]	; (80042f0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004236:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a31      	ldr	r2, [pc, #196]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d147      	bne.n	80042d2 <HAL_TIM_PeriodElapsedCallback+0x10e>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004244:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <HAL_TIM_PeriodElapsedCallback+0x92>
 800424c:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800424e:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8004252:	482d      	ldr	r0, [pc, #180]	; (8004308 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004254:	4798      	blx	r3


		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8004256:	2101      	movs	r1, #1
 8004258:	482c      	ldr	r0, [pc, #176]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800425a:	f006 fc3e 	bl	800aada <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 800425e:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004260:	7b1b      	ldrb	r3, [r3, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <HAL_TIM_PeriodElapsedCallback+0xbe>
 8004266:	4b2b      	ldr	r3, [pc, #172]	; (8004314 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004268:	edd3 7a00 	vldr	s15, [r3]
 800426c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004278:	ee17 1a90 	vmov	r1, s15
 800427c:	4824      	ldr	r0, [pc, #144]	; (8004310 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800427e:	f005 ff10 	bl	800a0a2 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	4a24      	ldr	r2, [pc, #144]	; (8004318 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	b29b      	uxth	r3, r3
 8004290:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004294:	7c1b      	ldrb	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_TIM_PeriodElapsedCallback+0xe2>
 800429a:	f107 030e 	add.w	r3, r7, #14
 800429e:	4619      	mov	r1, r3
 80042a0:	481e      	ldr	r0, [pc, #120]	; (800431c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80042a2:	f005 fe48 	bl	8009f36 <cbuf_ovw>

		tim13_counter++;
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	3301      	adds	r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80042b0:	701a      	strb	r2, [r3, #0]
		if(tim13_counter == tim13_prescaler){
 80042b2:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80042b4:	781a      	ldrb	r2, [r3, #0]
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d109      	bne.n	80042d2 <HAL_TIM_PeriodElapsedCallback+0x10e>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80042be:	2180      	movs	r1, #128	; 0x80
 80042c0:	4812      	ldr	r0, [pc, #72]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80042c2:	f006 fc0a 	bl	800aada <HAL_GPIO_TogglePin>
			// set flag up - causes to update temp/baro data to update in the main loop
			updateBmpData_flag = 1;
 80042c6:	4b18      	ldr	r3, [pc, #96]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
//			bmpData = getBmpData(&bmp180module);
			tim13_counter = 0;
 80042cc:	4b14      	ldr	r3, [pc, #80]	; (8004320 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]

		}

	}
}
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40014400 	.word	0x40014400
 80042e0:	20005b9c 	.word	0x20005b9c
 80042e4:	40014800 	.word	0x40014800
 80042e8:	2000002c 	.word	0x2000002c
 80042ec:	20005a91 	.word	0x20005a91
 80042f0:	20005a92 	.word	0x20005a92
 80042f4:	20005a94 	.word	0x20005a94
 80042f8:	20005a98 	.word	0x20005a98
 80042fc:	20005a9c 	.word	0x20005a9c
 8004300:	20005a9d 	.word	0x20005a9d
 8004304:	40001c00 	.word	0x40001c00
 8004308:	2000582c 	.word	0x2000582c
 800430c:	40020400 	.word	0x40020400
 8004310:	2000581c 	.word	0x2000581c
 8004314:	20002650 	.word	0x20002650
 8004318:	cccccccd 	.word	0xcccccccd
 800431c:	20005808 	.word	0x20005808
 8004320:	20005a90 	.word	0x20005a90
 8004324:	200001a4 	.word	0x200001a4
 8004328:	200001a5 	.word	0x200001a5

0800432c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a05      	ldr	r2, [pc, #20]	; (8004350 <HAL_UART_RxCpltCallback+0x24>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d103      	bne.n	8004346 <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800433e:	2180      	movs	r1, #128	; 0x80
 8004340:	4804      	ldr	r0, [pc, #16]	; (8004354 <HAL_UART_RxCpltCallback+0x28>)
 8004342:	f006 fbca 	bl	800aada <HAL_GPIO_TogglePin>

	}
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40011400 	.word	0x40011400
 8004354:	40020400 	.word	0x40020400

08004358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800435c:	b672      	cpsid	i
}
 800435e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004360:	2201      	movs	r2, #1
 8004362:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004366:	4802      	ldr	r0, [pc, #8]	; (8004370 <Error_Handler+0x18>)
 8004368:	f006 fb9e 	bl	800aaa8 <HAL_GPIO_WritePin>
  while (1)
 800436c:	e7fe      	b.n	800436c <Error_Handler+0x14>
 800436e:	bf00      	nop
 8004370:	40020400 	.word	0x40020400

08004374 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800437a:	1d3b      	adds	r3, r7, #4
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004388:	2300      	movs	r3, #0
 800438a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <MX_RTC_Init+0x58>)
 800438e:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <MX_RTC_Init+0x5c>)
 8004390:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004392:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <MX_RTC_Init+0x58>)
 8004394:	2200      	movs	r2, #0
 8004396:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <MX_RTC_Init+0x58>)
 800439a:	227f      	movs	r2, #127	; 0x7f
 800439c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <MX_RTC_Init+0x58>)
 80043a0:	22ff      	movs	r2, #255	; 0xff
 80043a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80043a4:	4b09      	ldr	r3, [pc, #36]	; (80043cc <MX_RTC_Init+0x58>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <MX_RTC_Init+0x58>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <MX_RTC_Init+0x58>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80043b6:	4805      	ldr	r0, [pc, #20]	; (80043cc <MX_RTC_Init+0x58>)
 80043b8:	f008 fa60 	bl	800c87c <HAL_RTC_Init>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80043c2:	f7ff ffc9 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20005aa0 	.word	0x20005aa0
 80043d0:	40002800 	.word	0x40002800

080043d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08e      	sub	sp, #56	; 0x38
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043dc:	f107 0308 	add.w	r3, r7, #8
 80043e0:	2230      	movs	r2, #48	; 0x30
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f00f fc53 	bl	8013c90 <memset>
  if(rtcHandle->Instance==RTC)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <HAL_RTC_MspInit+0x4c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d111      	bne.n	8004418 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80043f4:	2320      	movs	r3, #32
 80043f6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80043f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043fc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	4618      	mov	r0, r3
 8004404:	f008 f87a 	bl	800c4fc <HAL_RCCEx_PeriphCLKConfig>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800440e:	f7ff ffa3 	bl	8004358 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004412:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_RTC_MspInit+0x50>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004418:	bf00      	nop
 800441a:	3738      	adds	r7, #56	; 0x38
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40002800 	.word	0x40002800
 8004424:	42470e3c 	.word	0x42470e3c

08004428 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <MX_SDIO_SD_Init+0x38>)
 800442e:	4a0d      	ldr	r2, [pc, #52]	; (8004464 <MX_SDIO_SD_Init+0x3c>)
 8004430:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <MX_SDIO_SD_Init+0x38>)
 8004434:	2200      	movs	r2, #0
 8004436:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <MX_SDIO_SD_Init+0x38>)
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <MX_SDIO_SD_Init+0x38>)
 8004440:	2200      	movs	r2, #0
 8004442:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <MX_SDIO_SD_Init+0x38>)
 8004446:	2200      	movs	r2, #0
 8004448:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800444a:	4b05      	ldr	r3, [pc, #20]	; (8004460 <MX_SDIO_SD_Init+0x38>)
 800444c:	2200      	movs	r2, #0
 800444e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8004450:	4b03      	ldr	r3, [pc, #12]	; (8004460 <MX_SDIO_SD_Init+0x38>)
 8004452:	2204      	movs	r2, #4
 8004454:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004456:	bf00      	nop
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	20005ac0 	.word	0x20005ac0
 8004464:	40012c00 	.word	0x40012c00

08004468 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	60da      	str	r2, [r3, #12]
 800447e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a28      	ldr	r2, [pc, #160]	; (8004528 <HAL_SD_MspInit+0xc0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d14a      	bne.n	8004520 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	4b27      	ldr	r3, [pc, #156]	; (800452c <HAL_SD_MspInit+0xc4>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	4a26      	ldr	r2, [pc, #152]	; (800452c <HAL_SD_MspInit+0xc4>)
 8004494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004498:	6453      	str	r3, [r2, #68]	; 0x44
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <HAL_SD_MspInit+0xc4>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	4b20      	ldr	r3, [pc, #128]	; (800452c <HAL_SD_MspInit+0xc4>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	4a1f      	ldr	r2, [pc, #124]	; (800452c <HAL_SD_MspInit+0xc4>)
 80044b0:	f043 0304 	orr.w	r3, r3, #4
 80044b4:	6313      	str	r3, [r2, #48]	; 0x30
 80044b6:	4b1d      	ldr	r3, [pc, #116]	; (800452c <HAL_SD_MspInit+0xc4>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_SD_MspInit+0xc4>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	4a18      	ldr	r2, [pc, #96]	; (800452c <HAL_SD_MspInit+0xc4>)
 80044cc:	f043 0308 	orr.w	r3, r3, #8
 80044d0:	6313      	str	r3, [r2, #48]	; 0x30
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <HAL_SD_MspInit+0xc4>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80044de:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80044e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e4:	2302      	movs	r3, #2
 80044e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ec:	2303      	movs	r3, #3
 80044ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80044f0:	230c      	movs	r3, #12
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f4:	f107 0314 	add.w	r3, r7, #20
 80044f8:	4619      	mov	r1, r3
 80044fa:	480d      	ldr	r0, [pc, #52]	; (8004530 <HAL_SD_MspInit+0xc8>)
 80044fc:	f006 f910 	bl	800a720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004500:	2304      	movs	r3, #4
 8004502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004504:	2302      	movs	r3, #2
 8004506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450c:	2303      	movs	r3, #3
 800450e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004510:	230c      	movs	r3, #12
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004514:	f107 0314 	add.w	r3, r7, #20
 8004518:	4619      	mov	r1, r3
 800451a:	4806      	ldr	r0, [pc, #24]	; (8004534 <HAL_SD_MspInit+0xcc>)
 800451c:	f006 f900 	bl	800a720 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8004520:	bf00      	nop
 8004522:	3728      	adds	r7, #40	; 0x28
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40023800 	.word	0x40023800
 8004530:	40020800 	.word	0x40020800
 8004534:	40020c00 	.word	0x40020c00

08004538 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800453c:	4b17      	ldr	r3, [pc, #92]	; (800459c <MX_SPI1_Init+0x64>)
 800453e:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <MX_SPI1_Init+0x68>)
 8004540:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004542:	4b16      	ldr	r3, [pc, #88]	; (800459c <MX_SPI1_Init+0x64>)
 8004544:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004548:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800454a:	4b14      	ldr	r3, [pc, #80]	; (800459c <MX_SPI1_Init+0x64>)
 800454c:	2200      	movs	r2, #0
 800454e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004550:	4b12      	ldr	r3, [pc, #72]	; (800459c <MX_SPI1_Init+0x64>)
 8004552:	2200      	movs	r2, #0
 8004554:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004556:	4b11      	ldr	r3, [pc, #68]	; (800459c <MX_SPI1_Init+0x64>)
 8004558:	2200      	movs	r2, #0
 800455a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <MX_SPI1_Init+0x64>)
 800455e:	2200      	movs	r2, #0
 8004560:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004562:	4b0e      	ldr	r3, [pc, #56]	; (800459c <MX_SPI1_Init+0x64>)
 8004564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004568:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800456a:	4b0c      	ldr	r3, [pc, #48]	; (800459c <MX_SPI1_Init+0x64>)
 800456c:	2220      	movs	r2, #32
 800456e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <MX_SPI1_Init+0x64>)
 8004572:	2200      	movs	r2, #0
 8004574:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004576:	4b09      	ldr	r3, [pc, #36]	; (800459c <MX_SPI1_Init+0x64>)
 8004578:	2200      	movs	r2, #0
 800457a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <MX_SPI1_Init+0x64>)
 800457e:	2200      	movs	r2, #0
 8004580:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004582:	4b06      	ldr	r3, [pc, #24]	; (800459c <MX_SPI1_Init+0x64>)
 8004584:	220a      	movs	r2, #10
 8004586:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004588:	4804      	ldr	r0, [pc, #16]	; (800459c <MX_SPI1_Init+0x64>)
 800458a:	f009 fbfd 	bl	800dd88 <HAL_SPI_Init>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004594:	f7ff fee0 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20005b44 	.word	0x20005b44
 80045a0:	40013000 	.word	0x40013000

080045a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ac:	f107 0314 	add.w	r3, r7, #20
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_SPI_MspInit+0x84>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d12b      	bne.n	800461e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	4b18      	ldr	r3, [pc, #96]	; (800462c <HAL_SPI_MspInit+0x88>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	4a17      	ldr	r2, [pc, #92]	; (800462c <HAL_SPI_MspInit+0x88>)
 80045d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045d4:	6453      	str	r3, [r2, #68]	; 0x44
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_SPI_MspInit+0x88>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	4b11      	ldr	r3, [pc, #68]	; (800462c <HAL_SPI_MspInit+0x88>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	4a10      	ldr	r2, [pc, #64]	; (800462c <HAL_SPI_MspInit+0x88>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	6313      	str	r3, [r2, #48]	; 0x30
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <HAL_SPI_MspInit+0x88>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80045fe:	23a0      	movs	r3, #160	; 0xa0
 8004600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004602:	2302      	movs	r3, #2
 8004604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800460a:	2303      	movs	r3, #3
 800460c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800460e:	2305      	movs	r3, #5
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004612:	f107 0314 	add.w	r3, r7, #20
 8004616:	4619      	mov	r1, r3
 8004618:	4805      	ldr	r0, [pc, #20]	; (8004630 <HAL_SPI_MspInit+0x8c>)
 800461a:	f006 f881 	bl	800a720 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800461e:	bf00      	nop
 8004620:	3728      	adds	r7, #40	; 0x28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40013000 	.word	0x40013000
 800462c:	40023800 	.word	0x40023800
 8004630:	40020000 	.word	0x40020000

08004634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	4b10      	ldr	r3, [pc, #64]	; (8004680 <HAL_MspInit+0x4c>)
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	4a0f      	ldr	r2, [pc, #60]	; (8004680 <HAL_MspInit+0x4c>)
 8004644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004648:	6453      	str	r3, [r2, #68]	; 0x44
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <HAL_MspInit+0x4c>)
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_MspInit+0x4c>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	4a08      	ldr	r2, [pc, #32]	; (8004680 <HAL_MspInit+0x4c>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004664:	6413      	str	r3, [r2, #64]	; 0x40
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <HAL_MspInit+0x4c>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800

08004684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004688:	e7fe      	b.n	8004688 <NMI_Handler+0x4>

0800468a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 800468e:	f7ff fe63 	bl	8004358 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004692:	e7fe      	b.n	8004692 <HardFault_Handler+0x8>

08004694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004698:	e7fe      	b.n	8004698 <MemManage_Handler+0x4>

0800469a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800469e:	e7fe      	b.n	800469e <BusFault_Handler+0x4>

080046a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046a4:	e7fe      	b.n	80046a4 <UsageFault_Handler+0x4>

080046a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046a6:	b480      	push	{r7}
 80046a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046c2:	b480      	push	{r7}
 80046c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046d4:	f005 fe48 	bl	800a368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046d8:	bf00      	nop
 80046da:	bd80      	pop	{r7, pc}

080046dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046e0:	4803      	ldr	r0, [pc, #12]	; (80046f0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80046e2:	f009 fff1 	bl	800e6c8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80046e6:	4803      	ldr	r0, [pc, #12]	; (80046f4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80046e8:	f009 ffee 	bl	800e6c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80046ec:	bf00      	nop
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20005ba8 	.word	0x20005ba8
 80046f4:	20005bf0 	.word	0x20005bf0

080046f8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046fc:	4803      	ldr	r0, [pc, #12]	; (800470c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80046fe:	f009 ffe3 	bl	800e6c8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004702:	4803      	ldr	r0, [pc, #12]	; (8004710 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004704:	f009 ffe0 	bl	800e6c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004708:	bf00      	nop
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20005ba8 	.word	0x20005ba8
 8004710:	20005c38 	.word	0x20005c38

08004714 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 8004718:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800471c:	f006 f9f8 	bl	800ab10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 8004720:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004724:	f006 f9f4 	bl	800ab10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004728:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800472c:	f006 f9f0 	bl	800ab10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8004730:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004734:	f006 f9ec 	bl	800ab10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8004738:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800473c:	f006 f9e8 	bl	800ab10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8004740:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004744:	f006 f9e4 	bl	800ab10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004748:	bf00      	nop
 800474a:	bd80      	pop	{r7, pc}

0800474c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004750:	4802      	ldr	r0, [pc, #8]	; (800475c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004752:	f009 ffb9 	bl	800e6c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004756:	bf00      	nop
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20005c80 	.word	0x20005c80

08004760 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 8004764:	2228      	movs	r2, #40	; 0x28
 8004766:	2100      	movs	r1, #0
 8004768:	4804      	ldr	r0, [pc, #16]	; (800477c <clearTable+0x1c>)
 800476a:	f00f fa91 	bl	8013c90 <memset>
	stwT.position = 0;
 800476e:	4b03      	ldr	r3, [pc, #12]	; (800477c <clearTable+0x1c>)
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	200001a8 	.word	0x200001a8

08004780 <addItem>:
void addItem(stw_struct stwS){
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800478e:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <addItem+0x38>)
 8004790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004794:	461a      	mov	r2, r3
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <addItem+0x38>)
 8004798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <addItem+0x38>)
 800479e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047a2:	3301      	adds	r3, #1
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <addItem+0x38>)
 80047a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	200001a8 	.word	0x200001a8

080047bc <stwStart>:

void stwStart(void){
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim10);
 80047c0:	4804      	ldr	r0, [pc, #16]	; (80047d4 <stwStart+0x18>)
 80047c2:	f009 fdc1 	bl	800e348 <HAL_TIM_Base_Start_IT>

	stwS.state = STW_STATE_ENABLED;
 80047c6:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <stwStart+0x1c>)
 80047c8:	78d3      	ldrb	r3, [r2, #3]
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	70d3      	strb	r3, [r2, #3]
}
 80047d0:	bf00      	nop
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20005bf0 	.word	0x20005bf0
 80047d8:	20005b9c 	.word	0x20005b9c

080047dc <stwTick>:
void stwTick(void){
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
	stwS.cnt++;
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <stwTick+0x28>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80047ee:	4905      	ldr	r1, [pc, #20]	; (8004804 <stwTick+0x28>)
 80047f0:	680b      	ldr	r3, [r1, #0]
 80047f2:	f362 0317 	bfi	r3, r2, #0, #24
 80047f6:	600b      	str	r3, [r1, #0]
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20005b9c 	.word	0x20005b9c

08004808 <stwStop>:
void stwStop(void){
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 800480c:	4a04      	ldr	r2, [pc, #16]	; (8004820 <stwStop+0x18>)
 800480e:	78d3      	ldrb	r3, [r2, #3]
 8004810:	f36f 0300 	bfc	r3, #0, #1
 8004814:	70d3      	strb	r3, [r2, #3]
	  HAL_TIM_Base_Stop_IT(&htim10);
 8004816:	4803      	ldr	r0, [pc, #12]	; (8004824 <stwStop+0x1c>)
 8004818:	f009 fe06 	bl	800e428 <HAL_TIM_Base_Stop_IT>

}
 800481c:	bf00      	nop
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20005b9c 	.word	0x20005b9c
 8004824:	20005bf0 	.word	0x20005bf0

08004828 <stwClear>:
void stwClear(void){
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 800482c:	4b06      	ldr	r3, [pc, #24]	; (8004848 <stwClear+0x20>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2200      	movs	r2, #0
 8004832:	625a      	str	r2, [r3, #36]	; 0x24
	stwS.cnt = 0;
 8004834:	4a05      	ldr	r2, [pc, #20]	; (800484c <stwClear+0x24>)
 8004836:	6813      	ldr	r3, [r2, #0]
 8004838:	f36f 0317 	bfc	r3, #0, #24
 800483c:	6013      	str	r3, [r2, #0]
}
 800483e:	bf00      	nop
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20005bf0 	.word	0x20005bf0
 800484c:	20005b9c 	.word	0x20005b9c

08004850 <stwSave>:
void stwSave(void){
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <stwSave+0x18>)
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	4a04      	ldr	r2, [pc, #16]	; (800486c <stwSave+0x1c>)
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8004860:	4610      	mov	r0, r2
 8004862:	4798      	blx	r3
}
 8004864:	bf00      	nop
 8004866:	bd80      	pop	{r7, pc}
 8004868:	200001a8 	.word	0x200001a8
 800486c:	20005b9c 	.word	0x20005b9c

08004870 <getStw>:

uint16_t getStw(void){
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
	return (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <getStw+0x20>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	b29b      	uxth	r3, r3
 800487c:	4a05      	ldr	r2, [pc, #20]	; (8004894 <getStw+0x24>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	b29b      	uxth	r3, r3
}
 8004886:	4618      	mov	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	20005bf0 	.word	0x20005bf0
 8004894:	51eb851f 	.word	0x51eb851f

08004898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
	return 1;
 800489c:	2301      	movs	r3, #1
}
 800489e:	4618      	mov	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <_kill>:

int _kill(int pid, int sig)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80048b2:	f00f f993 	bl	8013bdc <__errno>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2216      	movs	r2, #22
 80048ba:	601a      	str	r2, [r3, #0]
	return -1;
 80048bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <_exit>:

void _exit (int status)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80048d0:	f04f 31ff 	mov.w	r1, #4294967295
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ffe7 	bl	80048a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80048da:	e7fe      	b.n	80048da <_exit+0x12>

080048dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e00a      	b.n	8004904 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80048ee:	f3af 8000 	nop.w
 80048f2:	4601      	mov	r1, r0
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	60ba      	str	r2, [r7, #8]
 80048fa:	b2ca      	uxtb	r2, r1
 80048fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	3301      	adds	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	429a      	cmp	r2, r3
 800490a:	dbf0      	blt.n	80048ee <_read+0x12>
	}

return len;
 800490c:	687b      	ldr	r3, [r7, #4]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e009      	b.n	800493c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	60ba      	str	r2, [r7, #8]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fa0f 	bl	8003d54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	3301      	adds	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	dbf1      	blt.n	8004928 <_write+0x12>
	}
	return len;
 8004944:	687b      	ldr	r3, [r7, #4]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <_close>:

int _close(int file)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
	return -1;
 8004956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004976:	605a      	str	r2, [r3, #4]
	return 0;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <_isatty>:

int _isatty(int file)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
	return 1;
 800498e:	2301      	movs	r3, #1
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
	return 0;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <_sbrk+0x50>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <_sbrk+0x16>
		heap_end = &end;
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <_sbrk+0x50>)
 80049ca:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <_sbrk+0x54>)
 80049cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80049ce:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <_sbrk+0x50>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <_sbrk+0x50>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	466a      	mov	r2, sp
 80049de:	4293      	cmp	r3, r2
 80049e0:	d907      	bls.n	80049f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80049e2:	f00f f8fb 	bl	8013bdc <__errno>
 80049e6:	4603      	mov	r3, r0
 80049e8:	220c      	movs	r2, #12
 80049ea:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
 80049f0:	e006      	b.n	8004a00 <_sbrk+0x48>
	}

	heap_end += incr;
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <_sbrk+0x50>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	4a03      	ldr	r2, [pc, #12]	; (8004a08 <_sbrk+0x50>)
 80049fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80049fe:	68fb      	ldr	r3, [r7, #12]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20005ba4 	.word	0x20005ba4
 8004a0c:	20005e68 	.word	0x20005e68

08004a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <SystemInit+0x20>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <SystemInit+0x20>)
 8004a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000ed00 	.word	0xe000ed00

08004a34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b096      	sub	sp, #88	; 0x58
 8004a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	605a      	str	r2, [r3, #4]
 8004a44:	609a      	str	r2, [r3, #8]
 8004a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	605a      	str	r2, [r3, #4]
 8004a5c:	609a      	str	r2, [r3, #8]
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	611a      	str	r2, [r3, #16]
 8004a62:	615a      	str	r2, [r3, #20]
 8004a64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a66:	1d3b      	adds	r3, r7, #4
 8004a68:	2220      	movs	r2, #32
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f00f f90f 	bl	8013c90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a72:	4b3f      	ldr	r3, [pc, #252]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004a74:	4a3f      	ldr	r2, [pc, #252]	; (8004b74 <MX_TIM1_Init+0x140>)
 8004a76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8004a78:	4b3d      	ldr	r3, [pc, #244]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004a7a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004a7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a80:	4b3b      	ldr	r3, [pc, #236]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8004a86:	4b3a      	ldr	r3, [pc, #232]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004a88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a8e:	4b38      	ldr	r3, [pc, #224]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a94:	4b36      	ldr	r3, [pc, #216]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a9a:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004a9c:	2280      	movs	r2, #128	; 0x80
 8004a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004aa0:	4833      	ldr	r0, [pc, #204]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004aa2:	f009 fc01 	bl	800e2a8 <HAL_TIM_Base_Init>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004aac:	f7ff fc54 	bl	8004358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ab6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004aba:	4619      	mov	r1, r3
 8004abc:	482c      	ldr	r0, [pc, #176]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004abe:	f009 ffcd 	bl	800ea5c <HAL_TIM_ConfigClockSource>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004ac8:	f7ff fc46 	bl	8004358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004acc:	4828      	ldr	r0, [pc, #160]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004ace:	f009 fcda 	bl	800e486 <HAL_TIM_PWM_Init>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004ad8:	f7ff fc3e 	bl	8004358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004adc:	2300      	movs	r3, #0
 8004ade:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ae4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4821      	ldr	r0, [pc, #132]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004aec:	f00a fbb6 	bl	800f25c <HAL_TIMEx_MasterConfigSynchronization>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004af6:	f7ff fc2f 	bl	8004358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004afa:	2360      	movs	r3, #96	; 0x60
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8004afe:	2302      	movs	r3, #2
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b02:	2300      	movs	r3, #0
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b06:	2300      	movs	r3, #0
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b12:	2300      	movs	r3, #0
 8004b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4814      	ldr	r0, [pc, #80]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004b20:	f009 feda 	bl	800e8d8 <HAL_TIM_PWM_ConfigChannel>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004b2a:	f7ff fc15 	bl	8004358 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b4c:	1d3b      	adds	r3, r7, #4
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4807      	ldr	r0, [pc, #28]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004b52:	f00a fbff 	bl	800f354 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004b5c:	f7ff fbfc 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b60:	4803      	ldr	r0, [pc, #12]	; (8004b70 <MX_TIM1_Init+0x13c>)
 8004b62:	f000 f963 	bl	8004e2c <HAL_TIM_MspPostInit>

}
 8004b66:	bf00      	nop
 8004b68:	3758      	adds	r7, #88	; 0x58
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20005ba8 	.word	0x20005ba8
 8004b74:	40010000 	.word	0x40010000

08004b78 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <MX_TIM10_Init+0x40>)
 8004b7e:	4a0f      	ldr	r2, [pc, #60]	; (8004bbc <MX_TIM10_Init+0x44>)
 8004b80:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <MX_TIM10_Init+0x40>)
 8004b84:	f244 129f 	movw	r2, #16799	; 0x419f
 8004b88:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <MX_TIM10_Init+0x40>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8004b90:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <MX_TIM10_Init+0x40>)
 8004b92:	f242 720f 	movw	r2, #9999	; 0x270f
 8004b96:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b98:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <MX_TIM10_Init+0x40>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <MX_TIM10_Init+0x40>)
 8004ba0:	2280      	movs	r2, #128	; 0x80
 8004ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004ba4:	4804      	ldr	r0, [pc, #16]	; (8004bb8 <MX_TIM10_Init+0x40>)
 8004ba6:	f009 fb7f 	bl	800e2a8 <HAL_TIM_Base_Init>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004bb0:	f7ff fbd2 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004bb4:	bf00      	nop
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	20005bf0 	.word	0x20005bf0
 8004bbc:	40014400 	.word	0x40014400

08004bc0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <MX_TIM11_Init+0x40>)
 8004bc6:	4a0f      	ldr	r2, [pc, #60]	; (8004c04 <MX_TIM11_Init+0x44>)
 8004bc8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <MX_TIM11_Init+0x40>)
 8004bcc:	f244 129f 	movw	r2, #16799	; 0x419f
 8004bd0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <MX_TIM11_Init+0x40>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <MX_TIM11_Init+0x40>)
 8004bda:	2263      	movs	r2, #99	; 0x63
 8004bdc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bde:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <MX_TIM11_Init+0x40>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <MX_TIM11_Init+0x40>)
 8004be6:	2280      	movs	r2, #128	; 0x80
 8004be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004bea:	4805      	ldr	r0, [pc, #20]	; (8004c00 <MX_TIM11_Init+0x40>)
 8004bec:	f009 fb5c 	bl	800e2a8 <HAL_TIM_Base_Init>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8004bf6:	f7ff fbaf 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20005c38 	.word	0x20005c38
 8004c04:	40014800 	.word	0x40014800

08004c08 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004c0c:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <MX_TIM13_Init+0x40>)
 8004c0e:	4a0f      	ldr	r2, [pc, #60]	; (8004c4c <MX_TIM13_Init+0x44>)
 8004c10:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <MX_TIM13_Init+0x40>)
 8004c14:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004c18:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <MX_TIM13_Init+0x40>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <MX_TIM13_Init+0x40>)
 8004c22:	f242 720f 	movw	r2, #9999	; 0x270f
 8004c26:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c28:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <MX_TIM13_Init+0x40>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <MX_TIM13_Init+0x40>)
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004c34:	4804      	ldr	r0, [pc, #16]	; (8004c48 <MX_TIM13_Init+0x40>)
 8004c36:	f009 fb37 	bl	800e2a8 <HAL_TIM_Base_Init>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004c40:	f7ff fb8a 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004c44:	bf00      	nop
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20005c80 	.word	0x20005c80
 8004c4c:	40001c00 	.word	0x40001c00

08004c50 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	611a      	str	r2, [r3, #16]
 8004c64:	615a      	str	r2, [r3, #20]
 8004c66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004c68:	4b1e      	ldr	r3, [pc, #120]	; (8004ce4 <MX_TIM14_Init+0x94>)
 8004c6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ce8 <MX_TIM14_Init+0x98>)
 8004c6c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8399;
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <MX_TIM14_Init+0x94>)
 8004c70:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004c74:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c76:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <MX_TIM14_Init+0x94>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8004c7c:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <MX_TIM14_Init+0x94>)
 8004c7e:	2263      	movs	r2, #99	; 0x63
 8004c80:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c82:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <MX_TIM14_Init+0x94>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c88:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <MX_TIM14_Init+0x94>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004c8e:	4815      	ldr	r0, [pc, #84]	; (8004ce4 <MX_TIM14_Init+0x94>)
 8004c90:	f009 fb0a 	bl	800e2a8 <HAL_TIM_Base_Init>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8004c9a:	f7ff fb5d 	bl	8004358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004c9e:	4811      	ldr	r0, [pc, #68]	; (8004ce4 <MX_TIM14_Init+0x94>)
 8004ca0:	f009 fbf1 	bl	800e486 <HAL_TIM_PWM_Init>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8004caa:	f7ff fb55 	bl	8004358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cae:	2360      	movs	r3, #96	; 0x60
 8004cb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cbe:	1d3b      	adds	r3, r7, #4
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4807      	ldr	r0, [pc, #28]	; (8004ce4 <MX_TIM14_Init+0x94>)
 8004cc6:	f009 fe07 	bl	800e8d8 <HAL_TIM_PWM_ConfigChannel>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004cd0:	f7ff fb42 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004cd4:	4803      	ldr	r0, [pc, #12]	; (8004ce4 <MX_TIM14_Init+0x94>)
 8004cd6:	f000 f8a9 	bl	8004e2c <HAL_TIM_MspPostInit>

}
 8004cda:	bf00      	nop
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20005cc8 	.word	0x20005cc8
 8004ce8:	40002000 	.word	0x40002000

08004cec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a46      	ldr	r2, [pc, #280]	; (8004e14 <HAL_TIM_Base_MspInit+0x128>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d11e      	bne.n	8004d3c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	4b45      	ldr	r3, [pc, #276]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d06:	4a44      	ldr	r2, [pc, #272]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d0e:	4b42      	ldr	r3, [pc, #264]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	2019      	movs	r0, #25
 8004d20:	f005 fc41 	bl	800a5a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004d24:	2019      	movs	r0, #25
 8004d26:	f005 fc5a 	bl	800a5de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	201a      	movs	r0, #26
 8004d30:	f005 fc39 	bl	800a5a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004d34:	201a      	movs	r0, #26
 8004d36:	f005 fc52 	bl	800a5de <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004d3a:	e066      	b.n	8004e0a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a36      	ldr	r2, [pc, #216]	; (8004e1c <HAL_TIM_Base_MspInit+0x130>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d116      	bne.n	8004d74 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	4b33      	ldr	r3, [pc, #204]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	4a32      	ldr	r2, [pc, #200]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d54:	6453      	str	r3, [r2, #68]	; 0x44
 8004d56:	4b30      	ldr	r3, [pc, #192]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	61bb      	str	r3, [r7, #24]
 8004d60:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004d62:	2200      	movs	r2, #0
 8004d64:	2100      	movs	r1, #0
 8004d66:	2019      	movs	r0, #25
 8004d68:	f005 fc1d 	bl	800a5a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004d6c:	2019      	movs	r0, #25
 8004d6e:	f005 fc36 	bl	800a5de <HAL_NVIC_EnableIRQ>
}
 8004d72:	e04a      	b.n	8004e0a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a29      	ldr	r2, [pc, #164]	; (8004e20 <HAL_TIM_Base_MspInit+0x134>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d116      	bne.n	8004dac <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	4a24      	ldr	r2, [pc, #144]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d8e:	4b22      	ldr	r3, [pc, #136]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	201a      	movs	r0, #26
 8004da0:	f005 fc01 	bl	800a5a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004da4:	201a      	movs	r0, #26
 8004da6:	f005 fc1a 	bl	800a5de <HAL_NVIC_EnableIRQ>
}
 8004daa:	e02e      	b.n	8004e0a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <HAL_TIM_Base_MspInit+0x138>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d116      	bne.n	8004de4 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc6:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	202c      	movs	r0, #44	; 0x2c
 8004dd8:	f005 fbe5 	bl	800a5a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004ddc:	202c      	movs	r0, #44	; 0x2c
 8004dde:	f005 fbfe 	bl	800a5de <HAL_NVIC_EnableIRQ>
}
 8004de2:	e012      	b.n	8004e0a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM14)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a0f      	ldr	r2, [pc, #60]	; (8004e28 <HAL_TIM_Base_MspInit+0x13c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d10d      	bne.n	8004e0a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	4a08      	ldr	r2, [pc, #32]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <HAL_TIM_Base_MspInit+0x12c>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
}
 8004e0a:	bf00      	nop
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40014400 	.word	0x40014400
 8004e20:	40014800 	.word	0x40014800
 8004e24:	40001c00 	.word	0x40001c00
 8004e28:	40002000 	.word	0x40002000

08004e2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e34:	f107 0314 	add.w	r3, r7, #20
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a25      	ldr	r2, [pc, #148]	; (8004ee0 <HAL_TIM_MspPostInit+0xb4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d11f      	bne.n	8004e8e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <HAL_TIM_MspPostInit+0xb8>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	4a23      	ldr	r2, [pc, #140]	; (8004ee4 <HAL_TIM_MspPostInit+0xb8>)
 8004e58:	f043 0310 	orr.w	r3, r3, #16
 8004e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e5e:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <HAL_TIM_MspPostInit+0xb8>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f003 0310 	and.w	r3, r3, #16
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e70:	2302      	movs	r3, #2
 8004e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e80:	f107 0314 	add.w	r3, r7, #20
 8004e84:	4619      	mov	r1, r3
 8004e86:	4818      	ldr	r0, [pc, #96]	; (8004ee8 <HAL_TIM_MspPostInit+0xbc>)
 8004e88:	f005 fc4a 	bl	800a720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004e8c:	e023      	b.n	8004ed6 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a16      	ldr	r2, [pc, #88]	; (8004eec <HAL_TIM_MspPostInit+0xc0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d11e      	bne.n	8004ed6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <HAL_TIM_MspPostInit+0xb8>)
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	4a10      	ldr	r2, [pc, #64]	; (8004ee4 <HAL_TIM_MspPostInit+0xb8>)
 8004ea2:	f043 0320 	orr.w	r3, r3, #32
 8004ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea8:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <HAL_TIM_MspPostInit+0xb8>)
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004ec6:	2309      	movs	r3, #9
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004eca:	f107 0314 	add.w	r3, r7, #20
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4807      	ldr	r0, [pc, #28]	; (8004ef0 <HAL_TIM_MspPostInit+0xc4>)
 8004ed2:	f005 fc25 	bl	800a720 <HAL_GPIO_Init>
}
 8004ed6:	bf00      	nop
 8004ed8:	3728      	adds	r7, #40	; 0x28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40002000 	.word	0x40002000
 8004ef0:	40021400 	.word	0x40021400

08004ef4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004ef8:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <MX_USART3_UART_Init+0x4c>)
 8004efa:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <MX_USART3_UART_Init+0x50>)
 8004efc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004efe:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <MX_USART3_UART_Init+0x4c>)
 8004f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004f06:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <MX_USART3_UART_Init+0x4c>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004f0c:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <MX_USART3_UART_Init+0x4c>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004f12:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <MX_USART3_UART_Init+0x4c>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <MX_USART3_UART_Init+0x4c>)
 8004f1a:	220c      	movs	r2, #12
 8004f1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f1e:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <MX_USART3_UART_Init+0x4c>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <MX_USART3_UART_Init+0x4c>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004f2a:	4805      	ldr	r0, [pc, #20]	; (8004f40 <MX_USART3_UART_Init+0x4c>)
 8004f2c:	f00a fa78 	bl	800f420 <HAL_UART_Init>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004f36:	f7ff fa0f 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20005d10 	.word	0x20005d10
 8004f44:	40004800 	.word	0x40004800

08004f48 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004f4c:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <MX_USART6_UART_Init+0x4c>)
 8004f4e:	4a12      	ldr	r2, [pc, #72]	; (8004f98 <MX_USART6_UART_Init+0x50>)
 8004f50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <MX_USART6_UART_Init+0x4c>)
 8004f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004f5a:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <MX_USART6_UART_Init+0x4c>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <MX_USART6_UART_Init+0x4c>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <MX_USART6_UART_Init+0x4c>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <MX_USART6_UART_Init+0x4c>)
 8004f6e:	220c      	movs	r2, #12
 8004f70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <MX_USART6_UART_Init+0x4c>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <MX_USART6_UART_Init+0x4c>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004f7e:	4805      	ldr	r0, [pc, #20]	; (8004f94 <MX_USART6_UART_Init+0x4c>)
 8004f80:	f00a fa4e 	bl	800f420 <HAL_UART_Init>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004f8a:	f7ff f9e5 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20005d54 	.word	0x20005d54
 8004f98:	40011400 	.word	0x40011400

08004f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08c      	sub	sp, #48	; 0x30
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa4:	f107 031c 	add.w	r3, r7, #28
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a32      	ldr	r2, [pc, #200]	; (8005084 <HAL_UART_MspInit+0xe8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d12d      	bne.n	800501a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	4b31      	ldr	r3, [pc, #196]	; (8005088 <HAL_UART_MspInit+0xec>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	4a30      	ldr	r2, [pc, #192]	; (8005088 <HAL_UART_MspInit+0xec>)
 8004fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fce:	4b2e      	ldr	r3, [pc, #184]	; (8005088 <HAL_UART_MspInit+0xec>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <HAL_UART_MspInit+0xec>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	4a29      	ldr	r2, [pc, #164]	; (8005088 <HAL_UART_MspInit+0xec>)
 8004fe4:	f043 0308 	orr.w	r3, r3, #8
 8004fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fea:	4b27      	ldr	r3, [pc, #156]	; (8005088 <HAL_UART_MspInit+0xec>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004ff6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005000:	2300      	movs	r3, #0
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005004:	2303      	movs	r3, #3
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005008:	2307      	movs	r3, #7
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800500c:	f107 031c 	add.w	r3, r7, #28
 8005010:	4619      	mov	r1, r3
 8005012:	481e      	ldr	r0, [pc, #120]	; (800508c <HAL_UART_MspInit+0xf0>)
 8005014:	f005 fb84 	bl	800a720 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005018:	e030      	b.n	800507c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1c      	ldr	r2, [pc, #112]	; (8005090 <HAL_UART_MspInit+0xf4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d12b      	bne.n	800507c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005024:	2300      	movs	r3, #0
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	4b17      	ldr	r3, [pc, #92]	; (8005088 <HAL_UART_MspInit+0xec>)
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	4a16      	ldr	r2, [pc, #88]	; (8005088 <HAL_UART_MspInit+0xec>)
 800502e:	f043 0320 	orr.w	r3, r3, #32
 8005032:	6453      	str	r3, [r2, #68]	; 0x44
 8005034:	4b14      	ldr	r3, [pc, #80]	; (8005088 <HAL_UART_MspInit+0xec>)
 8005036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	4b10      	ldr	r3, [pc, #64]	; (8005088 <HAL_UART_MspInit+0xec>)
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	4a0f      	ldr	r2, [pc, #60]	; (8005088 <HAL_UART_MspInit+0xec>)
 800504a:	f043 0304 	orr.w	r3, r3, #4
 800504e:	6313      	str	r3, [r2, #48]	; 0x30
 8005050:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <HAL_UART_MspInit+0xec>)
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800505c:	23c0      	movs	r3, #192	; 0xc0
 800505e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005060:	2302      	movs	r3, #2
 8005062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005064:	2300      	movs	r3, #0
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005068:	2303      	movs	r3, #3
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800506c:	2308      	movs	r3, #8
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005070:	f107 031c 	add.w	r3, r7, #28
 8005074:	4619      	mov	r1, r3
 8005076:	4807      	ldr	r0, [pc, #28]	; (8005094 <HAL_UART_MspInit+0xf8>)
 8005078:	f005 fb52 	bl	800a720 <HAL_GPIO_Init>
}
 800507c:	bf00      	nop
 800507e:	3730      	adds	r7, #48	; 0x30
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40004800 	.word	0x40004800
 8005088:	40023800 	.word	0x40023800
 800508c:	40020c00 	.word	0x40020c00
 8005090:	40011400 	.word	0x40011400
 8005094:	40020800 	.word	0x40020800

08005098 <setDefaultClbcks>:
#include "fonts/fonts.h"

// fixed alt = 0/fixed baro = 1 mode
uint8_t altitudeMode = 1;

static void setDefaultClbcks(void){
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 800509c:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <setDefaultClbcks+0x38>)
 800509e:	4a0d      	ldr	r2, [pc, #52]	; (80050d4 <setDefaultClbcks+0x3c>)
 80050a0:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80050a2:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <setDefaultClbcks+0x40>)
 80050a4:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <setDefaultClbcks+0x44>)
 80050a6:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &changeAltiMode;
 80050a8:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <setDefaultClbcks+0x48>)
 80050aa:	4a0e      	ldr	r2, [pc, #56]	; (80050e4 <setDefaultClbcks+0x4c>)
 80050ac:	611a      	str	r2, [r3, #16]
	btn_B3.onContinuousShortPressHandler = &increaseAltitude;
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <setDefaultClbcks+0x50>)
 80050b0:	4a0e      	ldr	r2, [pc, #56]	; (80050ec <setDefaultClbcks+0x54>)
 80050b2:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &decreaseAltitude;
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <setDefaultClbcks+0x58>)
 80050b6:	4a0f      	ldr	r2, [pc, #60]	; (80050f4 <setDefaultClbcks+0x5c>)
 80050b8:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = &setRefAltitude;
 80050ba:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <setDefaultClbcks+0x60>)
 80050bc:	4a0f      	ldr	r2, [pc, #60]	; (80050fc <setDefaultClbcks+0x64>)
 80050be:	611a      	str	r2, [r3, #16]
	btn_B2.onSingleLongPressHandler = &clearRefAltitude;
 80050c0:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <setDefaultClbcks+0x60>)
 80050c2:	4a0f      	ldr	r2, [pc, #60]	; (8005100 <setDefaultClbcks+0x68>)
 80050c4:	615a      	str	r2, [r3, #20]
}
 80050c6:	bf00      	nop
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	20002660 	.word	0x20002660
 80050d4:	08002a8d 	.word	0x08002a8d
 80050d8:	200026a8 	.word	0x200026a8
 80050dc:	08002a9d 	.word	0x08002a9d
 80050e0:	20002684 	.word	0x20002684
 80050e4:	08005745 	.word	0x08005745
 80050e8:	20002714 	.word	0x20002714
 80050ec:	08005789 	.word	0x08005789
 80050f0:	200026cc 	.word	0x200026cc
 80050f4:	080057d5 	.word	0x080057d5
 80050f8:	200026f0 	.word	0x200026f0
 80050fc:	08005709 	.word	0x08005709
 8005100:	08005729 	.word	0x08005729

08005104 <altiSetup>:

// function executed once on module load
void altiSetup(void){
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005108:	f7ff ffc6 	bl	8005098 <setDefaultClbcks>
	minAltitude = bmpData.altitude;
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <altiSetup+0x1c>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4a04      	ldr	r2, [pc, #16]	; (8005124 <altiSetup+0x20>)
 8005112:	6013      	str	r3, [r2, #0]
	minPressure = bmpData.slpress;
 8005114:	4b02      	ldr	r3, [pc, #8]	; (8005120 <altiSetup+0x1c>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4a03      	ldr	r2, [pc, #12]	; (8005128 <altiSetup+0x24>)
 800511a:	6013      	str	r3, [r2, #0]
}
 800511c:	bf00      	nop
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20002650 	.word	0x20002650
 8005124:	20005d9c 	.word	0x20005d9c
 8005128:	20005da4 	.word	0x20005da4

0800512c <altiMain>:

// main function
void altiMain(void){
 800512c:	b5b0      	push	{r4, r5, r7, lr}
 800512e:	b096      	sub	sp, #88	; 0x58
 8005130:	af02      	add	r7, sp, #8
	bmpData = getBmpData(&bmp180module);
 8005132:	4cab      	ldr	r4, [pc, #684]	; (80053e0 <altiMain+0x2b4>)
 8005134:	463b      	mov	r3, r7
 8005136:	49ab      	ldr	r1, [pc, #684]	; (80053e4 <altiMain+0x2b8>)
 8005138:	4618      	mov	r0, r3
 800513a:	f7fc fdd1 	bl	8001ce0 <getBmpData>
 800513e:	463b      	mov	r3, r7
 8005140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// header bar temperature - time
	char guiPos[6] = {0};
 8005146:	2300      	movs	r3, #0
 8005148:	64bb      	str	r3, [r7, #72]	; 0x48
 800514a:	2300      	movs	r3, #0
 800514c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8005150:	4ba5      	ldr	r3, [pc, #660]	; (80053e8 <altiMain+0x2bc>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	4ba4      	ldr	r3, [pc, #656]	; (80053e8 <altiMain+0x2bc>)
 8005158:	785b      	ldrb	r3, [r3, #1]
 800515a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800515e:	49a3      	ldr	r1, [pc, #652]	; (80053ec <altiMain+0x2c0>)
 8005160:	f00f fec4 	bl	8014eec <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8005164:	2314      	movs	r3, #20
 8005166:	b29c      	uxth	r4, r3
 8005168:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800516c:	4618      	mov	r0, r3
 800516e:	f7fb f849 	bl	8000204 <strlen>
 8005172:	4603      	mov	r3, r0
 8005174:	b29b      	uxth	r3, r3
 8005176:	fb14 f303 	smulbb	r3, r4, r3
 800517a:	b29b      	uxth	r3, r3
 800517c:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8005180:	b298      	uxth	r0, r3
 8005182:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005186:	4b9a      	ldr	r3, [pc, #616]	; (80053f0 <altiMain+0x2c4>)
 8005188:	210a      	movs	r1, #10
 800518a:	f7fd ff1b 	bl	8002fc4 <lcdPutStr>
	sprintf(&guiPos, "%02.1f`C", bmpData.temperature);
 800518e:	4b94      	ldr	r3, [pc, #592]	; (80053e0 <altiMain+0x2b4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fb f9f8 	bl	8000588 <__aeabi_f2d>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80051a0:	4994      	ldr	r1, [pc, #592]	; (80053f4 <altiMain+0x2c8>)
 80051a2:	f00f fea3 	bl	8014eec <siprintf>
	lcdPutStr(10, 10, guiPos, zekton24font);
 80051a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80051aa:	4b91      	ldr	r3, [pc, #580]	; (80053f0 <altiMain+0x2c4>)
 80051ac:	210a      	movs	r1, #10
 80051ae:	200a      	movs	r0, #10
 80051b0:	f7fd ff08 	bl	8002fc4 <lcdPutStr>

	if(altitudeMode){
 80051b4:	4b90      	ldr	r3, [pc, #576]	; (80053f8 <altiMain+0x2cc>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 813d 	beq.w	8005438 <altiMain+0x30c>
		// altitude - pressure at the sea level
		char tmpStr[50] = {0};
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	f107 0318 	add.w	r3, r7, #24
 80051c6:	222e      	movs	r2, #46	; 0x2e
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f00e fd60 	bl	8013c90 <memset>
		sprintf(&tmpStr, "%d", (int16_t)bmpData.altitude);
 80051d0:	4b83      	ldr	r3, [pc, #524]	; (80053e0 <altiMain+0x2b4>)
 80051d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80051d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051da:	ee17 3a90 	vmov	r3, s15
 80051de:	b21b      	sxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	f107 0314 	add.w	r3, r7, #20
 80051e6:	4985      	ldr	r1, [pc, #532]	; (80053fc <altiMain+0x2d0>)
 80051e8:	4618      	mov	r0, r3
 80051ea:	f00f fe7f 	bl	8014eec <siprintf>
		lcdPutStr(350-(*(zekton84font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton84font);
 80051ee:	2342      	movs	r3, #66	; 0x42
 80051f0:	b29c      	uxth	r4, r3
 80051f2:	f107 0314 	add.w	r3, r7, #20
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fb f804 	bl	8000204 <strlen>
 80051fc:	4603      	mov	r3, r0
 80051fe:	3301      	adds	r3, #1
 8005200:	b29b      	uxth	r3, r3
 8005202:	fb14 f303 	smulbb	r3, r4, r3
 8005206:	b29b      	uxth	r3, r3
 8005208:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 800520c:	b298      	uxth	r0, r3
 800520e:	f107 0214 	add.w	r2, r7, #20
 8005212:	4b7b      	ldr	r3, [pc, #492]	; (8005400 <altiMain+0x2d4>)
 8005214:	2142      	movs	r1, #66	; 0x42
 8005216:	f7fd fed5 	bl	8002fc4 <lcdPutStr>
		sprintf(&tmpStr, ".%1um", ((uint16_t)(fabs(bmpData.altitude)*10))%10);
 800521a:	4b71      	ldr	r3, [pc, #452]	; (80053e0 <altiMain+0x2b4>)
 800521c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005220:	eef0 7ae7 	vabs.f32	s15, s15
 8005224:	ee17 0a90 	vmov	r0, s15
 8005228:	f7fb f9ae 	bl	8000588 <__aeabi_f2d>
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	4b74      	ldr	r3, [pc, #464]	; (8005404 <altiMain+0x2d8>)
 8005232:	f7fb fa01 	bl	8000638 <__aeabi_dmul>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	f7fb fcd3 	bl	8000be8 <__aeabi_d2uiz>
 8005242:	4603      	mov	r3, r0
 8005244:	b29a      	uxth	r2, r3
 8005246:	4b70      	ldr	r3, [pc, #448]	; (8005408 <altiMain+0x2dc>)
 8005248:	fba3 1302 	umull	r1, r3, r3, r2
 800524c:	08d9      	lsrs	r1, r3, #3
 800524e:	460b      	mov	r3, r1
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	b29b      	uxth	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	f107 0314 	add.w	r3, r7, #20
 8005260:	496a      	ldr	r1, [pc, #424]	; (800540c <altiMain+0x2e0>)
 8005262:	4618      	mov	r0, r3
 8005264:	f00f fe42 	bl	8014eec <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton45font);
 8005268:	2322      	movs	r3, #34	; 0x22
 800526a:	b29c      	uxth	r4, r3
 800526c:	f107 0314 	add.w	r3, r7, #20
 8005270:	4618      	mov	r0, r3
 8005272:	f7fa ffc7 	bl	8000204 <strlen>
 8005276:	4603      	mov	r3, r0
 8005278:	3301      	adds	r3, #1
 800527a:	b29b      	uxth	r3, r3
 800527c:	fb14 f303 	smulbb	r3, r4, r3
 8005280:	b29b      	uxth	r3, r3
 8005282:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8005286:	b298      	uxth	r0, r3
 8005288:	f107 0214 	add.w	r2, r7, #20
 800528c:	4b60      	ldr	r3, [pc, #384]	; (8005410 <altiMain+0x2e4>)
 800528e:	2142      	movs	r1, #66	; 0x42
 8005290:	f7fd fe98 	bl	8002fc4 <lcdPutStr>
//		sprintf(&tmpStr, "m ", bmpData.pressure%100/10);
//		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 112, tmpStr, zekton45font);
		sprintf(&tmpStr, "ASL %4.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8005294:	4b5f      	ldr	r3, [pc, #380]	; (8005414 <altiMain+0x2e8>)
 8005296:	edd3 7a00 	vldr	s15, [r3]
 800529a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005418 <altiMain+0x2ec>
 800529e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80052a2:	ee16 0a90 	vmov	r0, s13
 80052a6:	f7fb f96f 	bl	8000588 <__aeabi_f2d>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	f107 0014 	add.w	r0, r7, #20
 80052b2:	495a      	ldr	r1, [pc, #360]	; (800541c <altiMain+0x2f0>)
 80052b4:	f00f fe1a 	bl	8014eec <siprintf>
		lcdPutStr(395-(*(font_12_zekton.font_Width)*(strlen(tmpStr)+1)), 165, tmpStr, font_12_zekton);
 80052b8:	2309      	movs	r3, #9
 80052ba:	b29c      	uxth	r4, r3
 80052bc:	f107 0314 	add.w	r3, r7, #20
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fa ff9f 	bl	8000204 <strlen>
 80052c6:	4603      	mov	r3, r0
 80052c8:	3301      	adds	r3, #1
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	fb14 f303 	smulbb	r3, r4, r3
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 80052d6:	3301      	adds	r3, #1
 80052d8:	b298      	uxth	r0, r3
 80052da:	f107 0214 	add.w	r2, r7, #20
 80052de:	4b50      	ldr	r3, [pc, #320]	; (8005420 <altiMain+0x2f4>)
 80052e0:	21a5      	movs	r1, #165	; 0xa5
 80052e2:	f7fd fe6f 	bl	8002fc4 <lcdPutStr>

		// update minimum/maximum/diff
		if(bmpData.altitude < minAltitude) minAltitude = bmpData.altitude;
 80052e6:	4b3e      	ldr	r3, [pc, #248]	; (80053e0 <altiMain+0x2b4>)
 80052e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80052ec:	4b4d      	ldr	r3, [pc, #308]	; (8005424 <altiMain+0x2f8>)
 80052ee:	edd3 7a00 	vldr	s15, [r3]
 80052f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fa:	d503      	bpl.n	8005304 <altiMain+0x1d8>
 80052fc:	4b38      	ldr	r3, [pc, #224]	; (80053e0 <altiMain+0x2b4>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4a48      	ldr	r2, [pc, #288]	; (8005424 <altiMain+0x2f8>)
 8005302:	6013      	str	r3, [r2, #0]
		if(bmpData.altitude > maxAltitude) maxAltitude = bmpData.altitude;
 8005304:	4b36      	ldr	r3, [pc, #216]	; (80053e0 <altiMain+0x2b4>)
 8005306:	ed93 7a02 	vldr	s14, [r3, #8]
 800530a:	4b47      	ldr	r3, [pc, #284]	; (8005428 <altiMain+0x2fc>)
 800530c:	edd3 7a00 	vldr	s15, [r3]
 8005310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005318:	dd03      	ble.n	8005322 <altiMain+0x1f6>
 800531a:	4b31      	ldr	r3, [pc, #196]	; (80053e0 <altiMain+0x2b4>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	4a42      	ldr	r2, [pc, #264]	; (8005428 <altiMain+0x2fc>)
 8005320:	6013      	str	r3, [r2, #0]

//		sprintf(&tmpStr, "ref(diff) %.1fm(%+.1fm)", refAltitude, bmpData.altitude-refAltitude);
		if(refAltitude != 0){
 8005322:	4b42      	ldr	r3, [pc, #264]	; (800542c <altiMain+0x300>)
 8005324:	edd3 7a00 	vldr	s15, [r3]
 8005328:	eef5 7a40 	vcmp.f32	s15, #0.0
 800532c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005330:	d028      	beq.n	8005384 <altiMain+0x258>
			sprintf(&tmpStr, "%+.1fm", bmpData.altitude-refAltitude);
 8005332:	4b2b      	ldr	r3, [pc, #172]	; (80053e0 <altiMain+0x2b4>)
 8005334:	ed93 7a02 	vldr	s14, [r3, #8]
 8005338:	4b3c      	ldr	r3, [pc, #240]	; (800542c <altiMain+0x300>)
 800533a:	edd3 7a00 	vldr	s15, [r3]
 800533e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005342:	ee17 0a90 	vmov	r0, s15
 8005346:	f7fb f91f 	bl	8000588 <__aeabi_f2d>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	f107 0014 	add.w	r0, r7, #20
 8005352:	4937      	ldr	r1, [pc, #220]	; (8005430 <altiMain+0x304>)
 8005354:	f00f fdca 	bl	8014eec <siprintf>
			lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 184, tmpStr, zekton24font);
 8005358:	2314      	movs	r3, #20
 800535a:	b29c      	uxth	r4, r3
 800535c:	f107 0314 	add.w	r3, r7, #20
 8005360:	4618      	mov	r0, r3
 8005362:	f7fa ff4f 	bl	8000204 <strlen>
 8005366:	4603      	mov	r3, r0
 8005368:	3301      	adds	r3, #1
 800536a:	b29b      	uxth	r3, r3
 800536c:	fb14 f303 	smulbb	r3, r4, r3
 8005370:	b29b      	uxth	r3, r3
 8005372:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 8005376:	b298      	uxth	r0, r3
 8005378:	f107 0214 	add.w	r2, r7, #20
 800537c:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <altiMain+0x2c4>)
 800537e:	21b8      	movs	r1, #184	; 0xb8
 8005380:	f7fd fe20 	bl	8002fc4 <lcdPutStr>
		}
		sprintf(&tmpStr, "%.1fm/%.1fm", minAltitude, maxAltitude);
 8005384:	4b27      	ldr	r3, [pc, #156]	; (8005424 <altiMain+0x2f8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f7fb f8fd 	bl	8000588 <__aeabi_f2d>
 800538e:	4604      	mov	r4, r0
 8005390:	460d      	mov	r5, r1
 8005392:	4b25      	ldr	r3, [pc, #148]	; (8005428 <altiMain+0x2fc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f7fb f8f6 	bl	8000588 <__aeabi_f2d>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	f107 0014 	add.w	r0, r7, #20
 80053a4:	e9cd 2300 	strd	r2, r3, [sp]
 80053a8:	4622      	mov	r2, r4
 80053aa:	462b      	mov	r3, r5
 80053ac:	4921      	ldr	r1, [pc, #132]	; (8005434 <altiMain+0x308>)
 80053ae:	f00f fd9d 	bl	8014eec <siprintf>
		lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 210, tmpStr, zekton24font);
 80053b2:	2314      	movs	r3, #20
 80053b4:	b29c      	uxth	r4, r3
 80053b6:	f107 0314 	add.w	r3, r7, #20
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fa ff22 	bl	8000204 <strlen>
 80053c0:	4603      	mov	r3, r0
 80053c2:	3301      	adds	r3, #1
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	fb14 f303 	smulbb	r3, r4, r3
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 80053d0:	b298      	uxth	r0, r3
 80053d2:	f107 0214 	add.w	r2, r7, #20
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <altiMain+0x2c4>)
 80053d8:	21d2      	movs	r1, #210	; 0xd2
 80053da:	f7fd fdf3 	bl	8002fc4 <lcdPutStr>
		if(bmpData.slpress < minPressure) minPressure = bmpData.slpress;
		if(bmpData.slpress > maxPressure) maxPressure = bmpData.slpress;
		sprintf(&tmpStr, "%.1fhPa/%.1fhPa", minPressure/100, maxPressure/100);
		lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 210, tmpStr, zekton24font);
	}
}
 80053de:	e169      	b.n	80056b4 <altiMain+0x588>
 80053e0:	20002650 	.word	0x20002650
 80053e4:	2000260c 	.word	0x2000260c
 80053e8:	200057f0 	.word	0x200057f0
 80053ec:	0801c314 	.word	0x0801c314
 80053f0:	0801d8dc 	.word	0x0801d8dc
 80053f4:	0801c320 	.word	0x0801c320
 80053f8:	200001e4 	.word	0x200001e4
 80053fc:	0801c32c 	.word	0x0801c32c
 8005400:	08024d8c 	.word	0x08024d8c
 8005404:	40240000 	.word	0x40240000
 8005408:	cccccccd 	.word	0xcccccccd
 800540c:	0801c330 	.word	0x0801c330
 8005410:	0801f744 	.word	0x0801f744
 8005414:	20000000 	.word	0x20000000
 8005418:	42c80000 	.word	0x42c80000
 800541c:	0801c338 	.word	0x0801c338
 8005420:	0801ce54 	.word	0x0801ce54
 8005424:	20005d9c 	.word	0x20005d9c
 8005428:	20005da0 	.word	0x20005da0
 800542c:	20005d98 	.word	0x20005d98
 8005430:	0801c348 	.word	0x0801c348
 8005434:	0801c350 	.word	0x0801c350
		char tmpStr[50] = {0};
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	f107 0318 	add.w	r3, r7, #24
 8005440:	222e      	movs	r2, #46	; 0x2e
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f00e fc23 	bl	8013c90 <memset>
		sprintf(&tmpStr, "%d", (uint16_t)(bmpData.slpress/100));
 800544a:	4b9c      	ldr	r3, [pc, #624]	; (80056bc <altiMain+0x590>)
 800544c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005450:	eddf 6a9b 	vldr	s13, [pc, #620]	; 80056c0 <altiMain+0x594>
 8005454:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800545c:	ee17 3a90 	vmov	r3, s15
 8005460:	b29b      	uxth	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	f107 0314 	add.w	r3, r7, #20
 8005468:	4996      	ldr	r1, [pc, #600]	; (80056c4 <altiMain+0x598>)
 800546a:	4618      	mov	r0, r3
 800546c:	f00f fd3e 	bl	8014eec <siprintf>
		lcdPutStr(350-(*(zekton84font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton84font);
 8005470:	2342      	movs	r3, #66	; 0x42
 8005472:	b29c      	uxth	r4, r3
 8005474:	f107 0314 	add.w	r3, r7, #20
 8005478:	4618      	mov	r0, r3
 800547a:	f7fa fec3 	bl	8000204 <strlen>
 800547e:	4603      	mov	r3, r0
 8005480:	3301      	adds	r3, #1
 8005482:	b29b      	uxth	r3, r3
 8005484:	fb14 f303 	smulbb	r3, r4, r3
 8005488:	b29b      	uxth	r3, r3
 800548a:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 800548e:	b298      	uxth	r0, r3
 8005490:	f107 0214 	add.w	r2, r7, #20
 8005494:	4b8c      	ldr	r3, [pc, #560]	; (80056c8 <altiMain+0x59c>)
 8005496:	2142      	movs	r1, #66	; 0x42
 8005498:	f7fd fd94 	bl	8002fc4 <lcdPutStr>
		sprintf(&tmpStr, ".%d ", ((uint16_t)(bmpData.slpress/10))%10);
 800549c:	4b87      	ldr	r3, [pc, #540]	; (80056bc <altiMain+0x590>)
 800549e:	ed93 7a03 	vldr	s14, [r3, #12]
 80054a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80054a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ae:	ee17 3a90 	vmov	r3, s15
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	4b85      	ldr	r3, [pc, #532]	; (80056cc <altiMain+0x5a0>)
 80054b6:	fba3 1302 	umull	r1, r3, r3, r2
 80054ba:	08d9      	lsrs	r1, r3, #3
 80054bc:	460b      	mov	r3, r1
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	f107 0314 	add.w	r3, r7, #20
 80054ce:	4980      	ldr	r1, [pc, #512]	; (80056d0 <altiMain+0x5a4>)
 80054d0:	4618      	mov	r0, r3
 80054d2:	f00f fd0b 	bl	8014eec <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton45font);
 80054d6:	2322      	movs	r3, #34	; 0x22
 80054d8:	b29c      	uxth	r4, r3
 80054da:	f107 0314 	add.w	r3, r7, #20
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fa fe90 	bl	8000204 <strlen>
 80054e4:	4603      	mov	r3, r0
 80054e6:	3301      	adds	r3, #1
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	fb14 f303 	smulbb	r3, r4, r3
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 80054f4:	b298      	uxth	r0, r3
 80054f6:	f107 0214 	add.w	r2, r7, #20
 80054fa:	4b76      	ldr	r3, [pc, #472]	; (80056d4 <altiMain+0x5a8>)
 80054fc:	2142      	movs	r1, #66	; 0x42
 80054fe:	f7fd fd61 	bl	8002fc4 <lcdPutStr>
		sprintf(&tmpStr, "hpa", bmpData.pressure%100/10);
 8005502:	4b6e      	ldr	r3, [pc, #440]	; (80056bc <altiMain+0x590>)
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	4b74      	ldr	r3, [pc, #464]	; (80056d8 <altiMain+0x5ac>)
 8005508:	fba3 1302 	umull	r1, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	2164      	movs	r1, #100	; 0x64
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	4a6d      	ldr	r2, [pc, #436]	; (80056cc <altiMain+0x5a0>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	08da      	lsrs	r2, r3, #3
 800551e:	f107 0314 	add.w	r3, r7, #20
 8005522:	496e      	ldr	r1, [pc, #440]	; (80056dc <altiMain+0x5b0>)
 8005524:	4618      	mov	r0, r3
 8005526:	f00f fce1 	bl	8014eec <siprintf>
		lcdPutStr(432-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 112, tmpStr, zekton45font);
 800552a:	2322      	movs	r3, #34	; 0x22
 800552c:	b29c      	uxth	r4, r3
 800552e:	f107 0314 	add.w	r3, r7, #20
 8005532:	4618      	mov	r0, r3
 8005534:	f7fa fe66 	bl	8000204 <strlen>
 8005538:	4603      	mov	r3, r0
 800553a:	3301      	adds	r3, #1
 800553c:	b29b      	uxth	r3, r3
 800553e:	fb14 f303 	smulbb	r3, r4, r3
 8005542:	b29b      	uxth	r3, r3
 8005544:	f5c3 73d8 	rsb	r3, r3, #432	; 0x1b0
 8005548:	b298      	uxth	r0, r3
 800554a:	f107 0214 	add.w	r2, r7, #20
 800554e:	4b61      	ldr	r3, [pc, #388]	; (80056d4 <altiMain+0x5a8>)
 8005550:	2170      	movs	r1, #112	; 0x70
 8005552:	f7fd fd37 	bl	8002fc4 <lcdPutStr>
		sprintf(&tmpStr, "ambient: %6.1f hPa", ((float)bmpData.pressure/100));
 8005556:	4b59      	ldr	r3, [pc, #356]	; (80056bc <altiMain+0x590>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005562:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80056c0 <altiMain+0x594>
 8005566:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800556a:	ee16 0a90 	vmov	r0, s13
 800556e:	f7fb f80b 	bl	8000588 <__aeabi_f2d>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	f107 0014 	add.w	r0, r7, #20
 800557a:	4959      	ldr	r1, [pc, #356]	; (80056e0 <altiMain+0x5b4>)
 800557c:	f00f fcb6 	bl	8014eec <siprintf>
		lcdPutStr(0, 165, tmpStr, font_12_zekton);
 8005580:	f107 0214 	add.w	r2, r7, #20
 8005584:	4b57      	ldr	r3, [pc, #348]	; (80056e4 <altiMain+0x5b8>)
 8005586:	21a5      	movs	r1, #165	; 0xa5
 8005588:	2000      	movs	r0, #0
 800558a:	f7fd fd1b 	bl	8002fc4 <lcdPutStr>
		sprintf(&tmpStr, "elevation: %.1fm", fixedAltitude);
 800558e:	4b56      	ldr	r3, [pc, #344]	; (80056e8 <altiMain+0x5bc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f7fa fff8 	bl	8000588 <__aeabi_f2d>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	f107 0014 	add.w	r0, r7, #20
 80055a0:	4952      	ldr	r1, [pc, #328]	; (80056ec <altiMain+0x5c0>)
 80055a2:	f00f fca3 	bl	8014eec <siprintf>
		lcdPutStr(0, 180, tmpStr, font_12_zekton);
 80055a6:	f107 0214 	add.w	r2, r7, #20
 80055aa:	4b4e      	ldr	r3, [pc, #312]	; (80056e4 <altiMain+0x5b8>)
 80055ac:	21b4      	movs	r1, #180	; 0xb4
 80055ae:	2000      	movs	r0, #0
 80055b0:	f7fd fd08 	bl	8002fc4 <lcdPutStr>
		sprintf(&tmpStr, "ASL: %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 80055b4:	4b4e      	ldr	r3, [pc, #312]	; (80056f0 <altiMain+0x5c4>)
 80055b6:	edd3 7a00 	vldr	s15, [r3]
 80055ba:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80056c0 <altiMain+0x594>
 80055be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055c2:	ee16 0a90 	vmov	r0, s13
 80055c6:	f7fa ffdf 	bl	8000588 <__aeabi_f2d>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	f107 0014 	add.w	r0, r7, #20
 80055d2:	4948      	ldr	r1, [pc, #288]	; (80056f4 <altiMain+0x5c8>)
 80055d4:	f00f fc8a 	bl	8014eec <siprintf>
		lcdPutStr(395-(*(font_12_zekton.font_Width)*(strlen(tmpStr)+1)), 165, tmpStr, font_12_zekton);
 80055d8:	2309      	movs	r3, #9
 80055da:	b29c      	uxth	r4, r3
 80055dc:	f107 0314 	add.w	r3, r7, #20
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fa fe0f 	bl	8000204 <strlen>
 80055e6:	4603      	mov	r3, r0
 80055e8:	3301      	adds	r3, #1
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	fb14 f303 	smulbb	r3, r4, r3
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 80055f6:	3301      	adds	r3, #1
 80055f8:	b298      	uxth	r0, r3
 80055fa:	f107 0214 	add.w	r2, r7, #20
 80055fe:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <altiMain+0x5b8>)
 8005600:	21a5      	movs	r1, #165	; 0xa5
 8005602:	f7fd fcdf 	bl	8002fc4 <lcdPutStr>
		if(bmpData.slpress < minPressure) minPressure = bmpData.slpress;
 8005606:	4b2d      	ldr	r3, [pc, #180]	; (80056bc <altiMain+0x590>)
 8005608:	ed93 7a03 	vldr	s14, [r3, #12]
 800560c:	4b3a      	ldr	r3, [pc, #232]	; (80056f8 <altiMain+0x5cc>)
 800560e:	edd3 7a00 	vldr	s15, [r3]
 8005612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561a:	d503      	bpl.n	8005624 <altiMain+0x4f8>
 800561c:	4b27      	ldr	r3, [pc, #156]	; (80056bc <altiMain+0x590>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4a35      	ldr	r2, [pc, #212]	; (80056f8 <altiMain+0x5cc>)
 8005622:	6013      	str	r3, [r2, #0]
		if(bmpData.slpress > maxPressure) maxPressure = bmpData.slpress;
 8005624:	4b25      	ldr	r3, [pc, #148]	; (80056bc <altiMain+0x590>)
 8005626:	ed93 7a03 	vldr	s14, [r3, #12]
 800562a:	4b34      	ldr	r3, [pc, #208]	; (80056fc <altiMain+0x5d0>)
 800562c:	edd3 7a00 	vldr	s15, [r3]
 8005630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005638:	dd03      	ble.n	8005642 <altiMain+0x516>
 800563a:	4b20      	ldr	r3, [pc, #128]	; (80056bc <altiMain+0x590>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	4a2f      	ldr	r2, [pc, #188]	; (80056fc <altiMain+0x5d0>)
 8005640:	6013      	str	r3, [r2, #0]
		sprintf(&tmpStr, "%.1fhPa/%.1fhPa", minPressure/100, maxPressure/100);
 8005642:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <altiMain+0x5cc>)
 8005644:	edd3 7a00 	vldr	s15, [r3]
 8005648:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80056c0 <altiMain+0x594>
 800564c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005650:	ee16 0a90 	vmov	r0, s13
 8005654:	f7fa ff98 	bl	8000588 <__aeabi_f2d>
 8005658:	4604      	mov	r4, r0
 800565a:	460d      	mov	r5, r1
 800565c:	4b27      	ldr	r3, [pc, #156]	; (80056fc <altiMain+0x5d0>)
 800565e:	edd3 7a00 	vldr	s15, [r3]
 8005662:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80056c0 <altiMain+0x594>
 8005666:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800566a:	ee16 0a90 	vmov	r0, s13
 800566e:	f7fa ff8b 	bl	8000588 <__aeabi_f2d>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	f107 0014 	add.w	r0, r7, #20
 800567a:	e9cd 2300 	strd	r2, r3, [sp]
 800567e:	4622      	mov	r2, r4
 8005680:	462b      	mov	r3, r5
 8005682:	491f      	ldr	r1, [pc, #124]	; (8005700 <altiMain+0x5d4>)
 8005684:	f00f fc32 	bl	8014eec <siprintf>
		lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 210, tmpStr, zekton24font);
 8005688:	2314      	movs	r3, #20
 800568a:	b29c      	uxth	r4, r3
 800568c:	f107 0314 	add.w	r3, r7, #20
 8005690:	4618      	mov	r0, r3
 8005692:	f7fa fdb7 	bl	8000204 <strlen>
 8005696:	4603      	mov	r3, r0
 8005698:	3301      	adds	r3, #1
 800569a:	b29b      	uxth	r3, r3
 800569c:	fb14 f303 	smulbb	r3, r4, r3
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 80056a6:	b298      	uxth	r0, r3
 80056a8:	f107 0214 	add.w	r2, r7, #20
 80056ac:	4b15      	ldr	r3, [pc, #84]	; (8005704 <altiMain+0x5d8>)
 80056ae:	21d2      	movs	r1, #210	; 0xd2
 80056b0:	f7fd fc88 	bl	8002fc4 <lcdPutStr>
}
 80056b4:	bf00      	nop
 80056b6:	3750      	adds	r7, #80	; 0x50
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bdb0      	pop	{r4, r5, r7, pc}
 80056bc:	20002650 	.word	0x20002650
 80056c0:	42c80000 	.word	0x42c80000
 80056c4:	0801c32c 	.word	0x0801c32c
 80056c8:	08024d8c 	.word	0x08024d8c
 80056cc:	cccccccd 	.word	0xcccccccd
 80056d0:	0801c35c 	.word	0x0801c35c
 80056d4:	0801f744 	.word	0x0801f744
 80056d8:	51eb851f 	.word	0x51eb851f
 80056dc:	0801c364 	.word	0x0801c364
 80056e0:	0801c368 	.word	0x0801c368
 80056e4:	0801ce54 	.word	0x0801ce54
 80056e8:	20000004 	.word	0x20000004
 80056ec:	0801c37c 	.word	0x0801c37c
 80056f0:	20000000 	.word	0x20000000
 80056f4:	0801c390 	.word	0x0801c390
 80056f8:	20005da4 	.word	0x20005da4
 80056fc:	20005da8 	.word	0x20005da8
 8005700:	0801c3a0 	.word	0x0801c3a0
 8005704:	0801d8dc 	.word	0x0801d8dc

08005708 <setRefAltitude>:

void setRefAltitude(void){
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
	refAltitude = bmpData.altitude;
 800570c:	4b04      	ldr	r3, [pc, #16]	; (8005720 <setRefAltitude+0x18>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	4a04      	ldr	r2, [pc, #16]	; (8005724 <setRefAltitude+0x1c>)
 8005712:	6013      	str	r3, [r2, #0]
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20002650 	.word	0x20002650
 8005724:	20005d98 	.word	0x20005d98

08005728 <clearRefAltitude>:
void clearRefAltitude(void){
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
	refAltitude = 0;
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <clearRefAltitude+0x18>)
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
}
 8005734:	bf00      	nop
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	20005d98 	.word	0x20005d98

08005744 <changeAltiMode>:
void changeAltiMode(void){
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
	if(altitudeMode == 1){
 8005748:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <changeAltiMode+0x34>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d107      	bne.n	8005760 <changeAltiMode+0x1c>
		fixedAltitude = bmpData.altitude;
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <changeAltiMode+0x38>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4a0a      	ldr	r2, [pc, #40]	; (8005780 <changeAltiMode+0x3c>)
 8005756:	6013      	str	r3, [r2, #0]
		altitudeMode = 0;
 8005758:	4b07      	ldr	r3, [pc, #28]	; (8005778 <changeAltiMode+0x34>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
	} else {
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
		altitudeMode = 1;
	}
}
 800575e:	e006      	b.n	800576e <changeAltiMode+0x2a>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <changeAltiMode+0x38>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4a07      	ldr	r2, [pc, #28]	; (8005784 <changeAltiMode+0x40>)
 8005766:	6013      	str	r3, [r2, #0]
		altitudeMode = 1;
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <changeAltiMode+0x34>)
 800576a:	2201      	movs	r2, #1
 800576c:	701a      	strb	r2, [r3, #0]
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	200001e4 	.word	0x200001e4
 800577c:	20002650 	.word	0x20002650
 8005780:	20000004 	.word	0x20000004
 8005784:	20000000 	.word	0x20000000

08005788 <increaseAltitude>:
void increaseAltitude(void){
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
	if(altitudeMode == 1){
 800578c:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <increaseAltitude+0x40>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d10a      	bne.n	80057aa <increaseAltitude+0x22>
		BMP_PRESS_CONST_SEA_LEVEL += 1;
 8005794:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <increaseAltitude+0x44>)
 8005796:	edd3 7a00 	vldr	s15, [r3]
 800579a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800579e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <increaseAltitude+0x44>)
 80057a4:	edc3 7a00 	vstr	s15, [r3]
	} else {
		fixedAltitude += 1;
	}
}
 80057a8:	e009      	b.n	80057be <increaseAltitude+0x36>
		fixedAltitude += 1;
 80057aa:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <increaseAltitude+0x48>)
 80057ac:	edd3 7a00 	vldr	s15, [r3]
 80057b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <increaseAltitude+0x48>)
 80057ba:	edc3 7a00 	vstr	s15, [r3]
}
 80057be:	bf00      	nop
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	200001e4 	.word	0x200001e4
 80057cc:	20000000 	.word	0x20000000
 80057d0:	20000004 	.word	0x20000004

080057d4 <decreaseAltitude>:
void decreaseAltitude(void){
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
	if(altitudeMode == 1){
 80057d8:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <decreaseAltitude+0x40>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d10a      	bne.n	80057f6 <decreaseAltitude+0x22>
		BMP_PRESS_CONST_SEA_LEVEL -= 1;
 80057e0:	4b0d      	ldr	r3, [pc, #52]	; (8005818 <decreaseAltitude+0x44>)
 80057e2:	edd3 7a00 	vldr	s15, [r3]
 80057e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <decreaseAltitude+0x44>)
 80057f0:	edc3 7a00 	vstr	s15, [r3]
	} else {
		fixedAltitude -= 1;
	}
}
 80057f4:	e009      	b.n	800580a <decreaseAltitude+0x36>
		fixedAltitude -= 1;
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <decreaseAltitude+0x48>)
 80057f8:	edd3 7a00 	vldr	s15, [r3]
 80057fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005800:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <decreaseAltitude+0x48>)
 8005806:	edc3 7a00 	vstr	s15, [r3]
}
 800580a:	bf00      	nop
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	200001e4 	.word	0x200001e4
 8005818:	20000000 	.word	0x20000000
 800581c:	20000004 	.word	0x20000004

08005820 <setDefaultClbcks>:


// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <setDefaultClbcks+0x34>)
 8005826:	4a0c      	ldr	r2, [pc, #48]	; (8005858 <setDefaultClbcks+0x38>)
 8005828:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800582a:	4b0c      	ldr	r3, [pc, #48]	; (800585c <setDefaultClbcks+0x3c>)
 800582c:	4a0c      	ldr	r2, [pc, #48]	; (8005860 <setDefaultClbcks+0x40>)
 800582e:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <setDefaultClbcks+0x44>)
 8005832:	4a0d      	ldr	r2, [pc, #52]	; (8005868 <setDefaultClbcks+0x48>)
 8005834:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 8005836:	4b0d      	ldr	r3, [pc, #52]	; (800586c <setDefaultClbcks+0x4c>)
 8005838:	4a0d      	ldr	r2, [pc, #52]	; (8005870 <setDefaultClbcks+0x50>)
 800583a:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 800583c:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <setDefaultClbcks+0x54>)
 800583e:	4a0e      	ldr	r2, [pc, #56]	; (8005878 <setDefaultClbcks+0x58>)
 8005840:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 8005842:	4b0e      	ldr	r3, [pc, #56]	; (800587c <setDefaultClbcks+0x5c>)
 8005844:	2200      	movs	r2, #0
 8005846:	611a      	str	r2, [r3, #16]
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20002660 	.word	0x20002660
 8005858:	08002a8d 	.word	0x08002a8d
 800585c:	200026a8 	.word	0x200026a8
 8005860:	08002a9d 	.word	0x08002a9d
 8005864:	20002684 	.word	0x20002684
 8005868:	08005d91 	.word	0x08005d91
 800586c:	20002714 	.word	0x20002714
 8005870:	08005dd9 	.word	0x08005dd9
 8005874:	200026cc 	.word	0x200026cc
 8005878:	08005e25 	.word	0x08005e25
 800587c:	200026f0 	.word	0x200026f0

08005880 <baroSetup>:

// function executed once on module load
void baroSetup(void){
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005884:	f7ff ffcc 	bl	8005820 <setDefaultClbcks>
}
 8005888:	bf00      	nop
 800588a:	bd80      	pop	{r7, pc}

0800588c <baroMain>:
uint16_t maxX = 347;
uint8_t maxHeight = 225;
uint8_t minHeight = 110;

// main function
void baroMain(void){
 800588c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005890:	b0b6      	sub	sp, #216	; 0xd8
 8005892:	af04      	add	r7, sp, #16
	// update data
	bmpData = getBmpData(&bmp180module);
 8005894:	4c92      	ldr	r4, [pc, #584]	; (8005ae0 <baroMain+0x254>)
 8005896:	463b      	mov	r3, r7
 8005898:	4992      	ldr	r1, [pc, #584]	; (8005ae4 <baroMain+0x258>)
 800589a:	4618      	mov	r0, r3
 800589c:	f7fc fa20 	bl	8001ce0 <getBmpData>
 80058a0:	463b      	mov	r3, r7
 80058a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	uint16_t minBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 80058a8:	2100      	movs	r1, #0
 80058aa:	488f      	ldr	r0, [pc, #572]	; (8005ae8 <baroMain+0x25c>)
 80058ac:	f004 fba1 	bl	8009ff2 <cbuf_readn>
 80058b0:	4603      	mov	r3, r0
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t maxBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 80058b8:	2100      	movs	r1, #0
 80058ba:	488b      	ldr	r0, [pc, #556]	; (8005ae8 <baroMain+0x25c>)
 80058bc:	f004 fb99 	bl	8009ff2 <cbuf_readn>
 80058c0:	4603      	mov	r3, r0
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint16_t minTemp = read_nth_ring_buffer(&tempRing, 0);
 80058c8:	2100      	movs	r1, #0
 80058ca:	4888      	ldr	r0, [pc, #544]	; (8005aec <baroMain+0x260>)
 80058cc:	f004 fc37 	bl	800a13e <read_nth_ring_buffer>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	uint16_t maxTemp = read_nth_ring_buffer(&tempRing, 0);
 80058d6:	2100      	movs	r1, #0
 80058d8:	4884      	ldr	r0, [pc, #528]	; (8005aec <baroMain+0x260>)
 80058da:	f004 fc30 	bl	800a13e <read_nth_ring_buffer>
 80058de:	4603      	mov	r3, r0
 80058e0:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	char str1[50] = {0};
 80058e4:	2300      	movs	r3, #0
 80058e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80058ec:	222e      	movs	r2, #46	; 0x2e
 80058ee:	2100      	movs	r1, #0
 80058f0:	4618      	mov	r0, r3
 80058f2:	f00e f9cd 	bl	8013c90 <memset>
	char str3[50] = {0};
 80058f6:	2300      	movs	r3, #0
 80058f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80058fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80058fe:	222e      	movs	r2, #46	; 0x2e
 8005900:	2100      	movs	r1, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f00e f9c4 	bl	8013c90 <memset>
	char str4[50] = {0};
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	f107 0318 	add.w	r3, r7, #24
 8005910:	222e      	movs	r2, #46	; 0x2e
 8005912:	2100      	movs	r1, #0
 8005914:	4618      	mov	r0, r3
 8005916:	f00e f9bb 	bl	8013c90 <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 800591a:	4b71      	ldr	r3, [pc, #452]	; (8005ae0 <baroMain+0x254>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fa fe32 	bl	8000588 <__aeabi_f2d>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800592c:	4970      	ldr	r1, [pc, #448]	; (8005af0 <baroMain+0x264>)
 800592e:	f00f fadd 	bl	8014eec <siprintf>
	lcdPutStr(10, 14, str1, font_12_zekton);
 8005932:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005936:	4b6f      	ldr	r3, [pc, #444]	; (8005af4 <baroMain+0x268>)
 8005938:	210e      	movs	r1, #14
 800593a:	200a      	movs	r0, #10
 800593c:	f7fd fb42 	bl	8002fc4 <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 8005940:	4b67      	ldr	r3, [pc, #412]	; (8005ae0 <baroMain+0x254>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	ee07 3a90 	vmov	s15, r3
 8005948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8005af8 <baroMain+0x26c>
 8005950:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005954:	ee16 0a90 	vmov	r0, s13
 8005958:	f7fa fe16 	bl	8000588 <__aeabi_f2d>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005964:	4965      	ldr	r1, [pc, #404]	; (8005afc <baroMain+0x270>)
 8005966:	f00f fac1 	bl	8014eec <siprintf>
	lcdPutStr(10, 30, str1, font_12_zekton);
 800596a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800596e:	4b61      	ldr	r3, [pc, #388]	; (8005af4 <baroMain+0x268>)
 8005970:	211e      	movs	r1, #30
 8005972:	200a      	movs	r0, #10
 8005974:	f7fd fb26 	bl	8002fc4 <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8005978:	4b61      	ldr	r3, [pc, #388]	; (8005b00 <baroMain+0x274>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d124      	bne.n	80059ca <baroMain+0x13e>
		sprintf(&str4, "Fixed altitude mode");
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	495f      	ldr	r1, [pc, #380]	; (8005b04 <baroMain+0x278>)
 8005986:	4618      	mov	r0, r3
 8005988:	f00f fab0 	bl	8014eec <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 800598c:	4b54      	ldr	r3, [pc, #336]	; (8005ae0 <baroMain+0x254>)
 800598e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005992:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8005af8 <baroMain+0x26c>
 8005996:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800599a:	ee16 0a90 	vmov	r0, s13
 800599e:	f7fa fdf3 	bl	8000588 <__aeabi_f2d>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80059aa:	4957      	ldr	r1, [pc, #348]	; (8005b08 <baroMain+0x27c>)
 80059ac:	f00f fa9e 	bl	8014eec <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 80059b0:	4b56      	ldr	r3, [pc, #344]	; (8005b0c <baroMain+0x280>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fa fde7 	bl	8000588 <__aeabi_f2d>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80059c2:	4953      	ldr	r1, [pc, #332]	; (8005b10 <baroMain+0x284>)
 80059c4:	f00f fa92 	bl	8014eec <siprintf>
 80059c8:	e023      	b.n	8005a12 <baroMain+0x186>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 80059ca:	f107 0314 	add.w	r3, r7, #20
 80059ce:	4951      	ldr	r1, [pc, #324]	; (8005b14 <baroMain+0x288>)
 80059d0:	4618      	mov	r0, r3
 80059d2:	f00f fa8b 	bl	8014eec <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 80059d6:	4b42      	ldr	r3, [pc, #264]	; (8005ae0 <baroMain+0x254>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fa fdd4 	bl	8000588 <__aeabi_f2d>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80059e8:	494b      	ldr	r1, [pc, #300]	; (8005b18 <baroMain+0x28c>)
 80059ea:	f00f fa7f 	bl	8014eec <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 80059ee:	4b4b      	ldr	r3, [pc, #300]	; (8005b1c <baroMain+0x290>)
 80059f0:	edd3 7a00 	vldr	s15, [r3]
 80059f4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8005af8 <baroMain+0x26c>
 80059f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80059fc:	ee16 0a90 	vmov	r0, s13
 8005a00:	f7fa fdc2 	bl	8000588 <__aeabi_f2d>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8005a0c:	4944      	ldr	r1, [pc, #272]	; (8005b20 <baroMain+0x294>)
 8005a0e:	f00f fa6d 	bl	8014eec <siprintf>
	}
	lcdPutStr(10, 50, str4, font_12_zekton);
 8005a12:	f107 0214 	add.w	r2, r7, #20
 8005a16:	4b37      	ldr	r3, [pc, #220]	; (8005af4 <baroMain+0x268>)
 8005a18:	2132      	movs	r1, #50	; 0x32
 8005a1a:	200a      	movs	r0, #10
 8005a1c:	f7fd fad2 	bl	8002fc4 <lcdPutStr>
	lcdPutStr(10, 66, str1, font_12_zekton);
 8005a20:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005a24:	4b33      	ldr	r3, [pc, #204]	; (8005af4 <baroMain+0x268>)
 8005a26:	2142      	movs	r1, #66	; 0x42
 8005a28:	200a      	movs	r0, #10
 8005a2a:	f7fd facb 	bl	8002fc4 <lcdPutStr>
	lcdPutStr(10, 82, str3, font_12_zekton);
 8005a2e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005a32:	4b30      	ldr	r3, [pc, #192]	; (8005af4 <baroMain+0x268>)
 8005a34:	2152      	movs	r1, #82	; 0x52
 8005a36:	200a      	movs	r0, #10
 8005a38:	f7fd fac4 	bl	8002fc4 <lcdPutStr>

	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8005a42:	e041      	b.n	8005ac8 <baroMain+0x23c>
		uint16_t* currB= (uint16_t*)(cbuf_readn(&baroRing, i));
 8005a44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4827      	ldr	r0, [pc, #156]	; (8005ae8 <baroMain+0x25c>)
 8005a4c:	f004 fad1 	bl	8009ff2 <cbuf_readn>
 8005a50:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		uint16_t currT= read_nth_ring_buffer(&tempRing, i);
 8005a54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4824      	ldr	r0, [pc, #144]	; (8005aec <baroMain+0x260>)
 8005a5c:	f004 fb6f 	bl	800a13e <read_nth_ring_buffer>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		if(*currB>=maxBaro) maxBaro = *currB;
 8005a66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d804      	bhi.n	8005a7e <baroMain+0x1f2>
 8005a74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
		if(*currB<=minBaro) minBaro = *currB;
 8005a7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d304      	bcc.n	8005a96 <baroMain+0x20a>
 8005a8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		if(currT>=maxTemp) maxTemp = currT;
 8005a96:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8005a9a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d303      	bcc.n	8005aaa <baroMain+0x21e>
 8005aa2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8005aa6:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
		if(currT<=minTemp) minTemp = currT;
 8005aaa:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8005aae:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d803      	bhi.n	8005abe <baroMain+0x232>
 8005ab6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8005aba:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8005abe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8005ac8:	4b08      	ldr	r3, [pc, #32]	; (8005aec <baroMain+0x260>)
 8005aca:	891b      	ldrh	r3, [r3, #8]
 8005acc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3b7      	bcc.n	8005a44 <baroMain+0x1b8>
	}
	for(uint16_t j=minX; j<maxX; j++){
 8005ad4:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <baroMain+0x298>)
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8005adc:	e0bd      	b.n	8005c5a <baroMain+0x3ce>
 8005ade:	bf00      	nop
 8005ae0:	20002650 	.word	0x20002650
 8005ae4:	2000260c 	.word	0x2000260c
 8005ae8:	20005808 	.word	0x20005808
 8005aec:	2000581c 	.word	0x2000581c
 8005af0:	0801c468 	.word	0x0801c468
 8005af4:	08027100 	.word	0x08027100
 8005af8:	42c80000 	.word	0x42c80000
 8005afc:	0801c480 	.word	0x0801c480
 8005b00:	20005dac 	.word	0x20005dac
 8005b04:	0801c49c 	.word	0x0801c49c
 8005b08:	0801c4b0 	.word	0x0801c4b0
 8005b0c:	20000004 	.word	0x20000004
 8005b10:	0801c4d4 	.word	0x0801c4d4
 8005b14:	0801c4f4 	.word	0x0801c4f4
 8005b18:	0801c508 	.word	0x0801c508
 8005b1c:	20000000 	.word	0x20000000
 8005b20:	0801c528 	.word	0x0801c528
 8005b24:	200001e6 	.word	0x200001e6
		uint16_t i = (j-minX)*baroRing.elemNum/(maxX-minX);
 8005b28:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8005b2c:	4a90      	ldr	r2, [pc, #576]	; (8005d70 <baroMain+0x4e4>)
 8005b2e:	8812      	ldrh	r2, [r2, #0]
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	4a90      	ldr	r2, [pc, #576]	; (8005d74 <baroMain+0x4e8>)
 8005b34:	8912      	ldrh	r2, [r2, #8]
 8005b36:	fb03 f202 	mul.w	r2, r3, r2
 8005b3a:	4b8f      	ldr	r3, [pc, #572]	; (8005d78 <baroMain+0x4ec>)
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4b8b      	ldr	r3, [pc, #556]	; (8005d70 <baroMain+0x4e4>)
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	1acb      	subs	r3, r1, r3
 8005b46:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b4a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
		// graph data
		uint16_t* vvaall= (uint16_t*)(cbuf_readn(&baroRing, i));
 8005b4e:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8005b52:	4619      	mov	r1, r3
 8005b54:	4887      	ldr	r0, [pc, #540]	; (8005d74 <baroMain+0x4e8>)
 8005b56:	f004 fa4c 	bl	8009ff2 <cbuf_readn>
 8005b5a:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
 8005b5e:	f8b7 00bc 	ldrh.w	r0, [r7, #188]	; 0xbc
 8005b62:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8005b66:	1c5c      	adds	r4, r3, #1
 8005b68:	4b84      	ldr	r3, [pc, #528]	; (8005d7c <baroMain+0x4f0>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	461d      	mov	r5, r3
 8005b6e:	4b83      	ldr	r3, [pc, #524]	; (8005d7c <baroMain+0x4f0>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	4b82      	ldr	r3, [pc, #520]	; (8005d80 <baroMain+0x4f4>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b7e:	8812      	ldrh	r2, [r2, #0]
 8005b80:	4611      	mov	r1, r2
 8005b82:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8005b86:	1a8a      	subs	r2, r1, r2
 8005b88:	fb03 f202 	mul.w	r2, r3, r2
 8005b8c:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8005b90:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8005b94:	1acb      	subs	r3, r1, r3
 8005b96:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b9a:	1aea      	subs	r2, r5, r3
 8005b9c:	4b77      	ldr	r3, [pc, #476]	; (8005d7c <baroMain+0x4f0>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9302      	str	r3, [sp, #8]
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	2301      	movs	r3, #1
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	f7fe f84a 	bl	8003c4a <lcdRect2>
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 8005bb6:	f8b7 50bc 	ldrh.w	r5, [r7, #188]	; 0xbc
 8005bba:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8005bbe:	1c5e      	adds	r6, r3, #1
 8005bc0:	4b6e      	ldr	r3, [pc, #440]	; (8005d7c <baroMain+0x4f0>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	4698      	mov	r8, r3
 8005bc6:	4b6d      	ldr	r3, [pc, #436]	; (8005d7c <baroMain+0x4f0>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b6c      	ldr	r3, [pc, #432]	; (8005d80 <baroMain+0x4f4>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	1ad4      	subs	r4, r2, r3
 8005bd2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	486a      	ldr	r0, [pc, #424]	; (8005d84 <baroMain+0x4f8>)
 8005bda:	f004 fab0 	bl	800a13e <read_nth_ring_buffer>
 8005bde:	4602      	mov	r2, r0
 8005be0:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	fb03 f204 	mul.w	r2, r3, r4
 8005bea:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8005bee:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8005bf2:	1acb      	subs	r3, r1, r3
 8005bf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bf8:	eba8 0203 	sub.w	r2, r8, r3
 8005bfc:	4b5f      	ldr	r3, [pc, #380]	; (8005d7c <baroMain+0x4f0>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	4619      	mov	r1, r3
 8005c02:	2300      	movs	r3, #0
 8005c04:	9302      	str	r3, [sp, #8]
 8005c06:	230e      	movs	r3, #14
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	f7fe f819 	bl	8003c4a <lcdRect2>
//		lcdRect2(400/baroRing.maxSize*i, 400/baroRing.maxSize*i+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
//		lcdRect2(400/tempRing.size*i, 400/tempRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		// horizontal lines
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8005c18:	4b55      	ldr	r3, [pc, #340]	; (8005d70 <baroMain+0x4e4>)
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	4b56      	ldr	r3, [pc, #344]	; (8005d78 <baroMain+0x4ec>)
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	4619      	mov	r1, r3
 8005c24:	4b56      	ldr	r3, [pc, #344]	; (8005d80 <baroMain+0x4f4>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f7fd faca 	bl	80031c8 <lcdHLine2>
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8005c34:	4b4e      	ldr	r3, [pc, #312]	; (8005d70 <baroMain+0x4e4>)
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	4b4f      	ldr	r3, [pc, #316]	; (8005d78 <baroMain+0x4ec>)
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4b4e      	ldr	r3, [pc, #312]	; (8005d7c <baroMain+0x4f0>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	2302      	movs	r3, #2
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f7fd fabc 	bl	80031c8 <lcdHLine2>
	for(uint16_t j=minX; j<maxX; j++){
 8005c50:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8005c54:	3301      	adds	r3, #1
 8005c56:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8005c5a:	4b47      	ldr	r3, [pc, #284]	; (8005d78 <baroMain+0x4ec>)
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8005c62:	429a      	cmp	r2, r3
 8005c64:	f4ff af60 	bcc.w	8005b28 <baroMain+0x29c>
//		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
	}
	sprintf(&str4, "%0.1f", ((float)maxTemp)/10);
 8005c68:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8005c6c:	ee07 3a90 	vmov	s15, r3
 8005c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005c78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c7c:	ee16 0a90 	vmov	r0, s13
 8005c80:	f7fa fc82 	bl	8000588 <__aeabi_f2d>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	f107 0014 	add.w	r0, r7, #20
 8005c8c:	493e      	ldr	r1, [pc, #248]	; (8005d88 <baroMain+0x4fc>)
 8005c8e:	f00f f92d 	bl	8014eec <siprintf>
	lcdPutStr(0, minHeight-6, str4, smallestFont);
 8005c92:	4b3b      	ldr	r3, [pc, #236]	; (8005d80 <baroMain+0x4f4>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	3b06      	subs	r3, #6
 8005c98:	b2d9      	uxtb	r1, r3
 8005c9a:	f107 0214 	add.w	r2, r7, #20
 8005c9e:	4b3b      	ldr	r3, [pc, #236]	; (8005d8c <baroMain+0x500>)
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f7fd f98f 	bl	8002fc4 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minTemp)/10);
 8005ca6:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005cb6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005cba:	ee16 0a90 	vmov	r0, s13
 8005cbe:	f7fa fc63 	bl	8000588 <__aeabi_f2d>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	f107 0014 	add.w	r0, r7, #20
 8005cca:	492f      	ldr	r1, [pc, #188]	; (8005d88 <baroMain+0x4fc>)
 8005ccc:	f00f f90e 	bl	8014eec <siprintf>
	lcdPutStr(0, maxHeight-6, str4, smallestFont);
 8005cd0:	4b2a      	ldr	r3, [pc, #168]	; (8005d7c <baroMain+0x4f0>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	3b06      	subs	r3, #6
 8005cd6:	b2d9      	uxtb	r1, r3
 8005cd8:	f107 0214 	add.w	r2, r7, #20
 8005cdc:	4b2b      	ldr	r3, [pc, #172]	; (8005d8c <baroMain+0x500>)
 8005cde:	2000      	movs	r0, #0
 8005ce0:	f7fd f970 	bl	8002fc4 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)maxBaro)/10);
 8005ce4:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8005ce8:	ee07 3a90 	vmov	s15, r3
 8005cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005cf4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005cf8:	ee16 0a90 	vmov	r0, s13
 8005cfc:	f7fa fc44 	bl	8000588 <__aeabi_f2d>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	f107 0014 	add.w	r0, r7, #20
 8005d08:	491f      	ldr	r1, [pc, #124]	; (8005d88 <baroMain+0x4fc>)
 8005d0a:	f00f f8ef 	bl	8014eec <siprintf>
	lcdPutStr(350, minHeight-6, str4, smallestFont);
 8005d0e:	4b1c      	ldr	r3, [pc, #112]	; (8005d80 <baroMain+0x4f4>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	3b06      	subs	r3, #6
 8005d14:	b2d9      	uxtb	r1, r3
 8005d16:	f107 0214 	add.w	r2, r7, #20
 8005d1a:	4b1c      	ldr	r3, [pc, #112]	; (8005d8c <baroMain+0x500>)
 8005d1c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005d20:	f7fd f950 	bl	8002fc4 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minBaro)/10);
 8005d24:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005d34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d38:	ee16 0a90 	vmov	r0, s13
 8005d3c:	f7fa fc24 	bl	8000588 <__aeabi_f2d>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	f107 0014 	add.w	r0, r7, #20
 8005d48:	490f      	ldr	r1, [pc, #60]	; (8005d88 <baroMain+0x4fc>)
 8005d4a:	f00f f8cf 	bl	8014eec <siprintf>
	lcdPutStr(350, maxHeight-6, str4, smallestFont);
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <baroMain+0x4f0>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	3b06      	subs	r3, #6
 8005d54:	b2d9      	uxtb	r1, r3
 8005d56:	f107 0214 	add.w	r2, r7, #20
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <baroMain+0x500>)
 8005d5c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005d60:	f7fd f930 	bl	8002fc4 <lcdPutStr>
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 8005d64:	bf00      	nop
 8005d66:	37c8      	adds	r7, #200	; 0xc8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d6e:	bf00      	nop
 8005d70:	200001e6 	.word	0x200001e6
 8005d74:	20005808 	.word	0x20005808
 8005d78:	200001e8 	.word	0x200001e8
 8005d7c:	200001ea 	.word	0x200001ea
 8005d80:	200001eb 	.word	0x200001eb
 8005d84:	2000581c 	.word	0x2000581c
 8005d88:	0801c548 	.word	0x0801c548
 8005d8c:	08026c84 	.word	0x08026c84

08005d90 <changeBaroMode>:

void changeBaroMode(void){
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8005d94:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <changeBaroMode+0x38>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d107      	bne.n	8005dac <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <changeBaroMode+0x3c>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	4a0b      	ldr	r2, [pc, #44]	; (8005dd0 <changeBaroMode+0x40>)
 8005da2:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 8005da4:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <changeBaroMode+0x38>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	e006      	b.n	8005dba <changeBaroMode+0x2a>
	} else {
		fixedAltitude = bmpData.altitude;
 8005dac:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <changeBaroMode+0x3c>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <changeBaroMode+0x44>)
 8005db2:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 8005db4:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <changeBaroMode+0x38>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
	}
//	toggleVib();
//	setTimeout(10, &toggleVib);
	pulseVib(5, 100);
 8005dba:	2164      	movs	r1, #100	; 0x64
 8005dbc:	2005      	movs	r0, #5
 8005dbe:	f7fe f82b 	bl	8003e18 <pulseVib>
}
 8005dc2:	bf00      	nop
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20005dac 	.word	0x20005dac
 8005dcc:	20002650 	.word	0x20002650
 8005dd0:	20000000 	.word	0x20000000
 8005dd4:	20000004 	.word	0x20000004

08005dd8 <addBaro>:
void addBaro(void){
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8005ddc:	4b0e      	ldr	r3, [pc, #56]	; (8005e18 <addBaro+0x40>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <addBaro+0x22>
			fixedAltitude += 1;
 8005de4:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <addBaro+0x44>)
 8005de6:	edd3 7a00 	vldr	s15, [r3]
 8005dea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005df2:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <addBaro+0x44>)
 8005df4:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 8005df8:	e009      	b.n	8005e0e <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 8005dfa:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <addBaro+0x48>)
 8005dfc:	edd3 7a00 	vldr	s15, [r3]
 8005e00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005e04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e08:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <addBaro+0x48>)
 8005e0a:	edc3 7a00 	vstr	s15, [r3]
}
 8005e0e:	bf00      	nop
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	20005dac 	.word	0x20005dac
 8005e1c:	20000004 	.word	0x20000004
 8005e20:	20000000 	.word	0x20000000

08005e24 <remBaro>:
void remBaro(void){
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8005e28:	4b0e      	ldr	r3, [pc, #56]	; (8005e64 <remBaro+0x40>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <remBaro+0x22>
			fixedAltitude -= 1;
 8005e30:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <remBaro+0x44>)
 8005e32:	edd3 7a00 	vldr	s15, [r3]
 8005e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e3e:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <remBaro+0x44>)
 8005e40:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 8005e44:	e009      	b.n	8005e5a <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 8005e46:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <remBaro+0x48>)
 8005e48:	edd3 7a00 	vldr	s15, [r3]
 8005e4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e54:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <remBaro+0x48>)
 8005e56:	edc3 7a00 	vstr	s15, [r3]
}
 8005e5a:	bf00      	nop
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	20005dac 	.word	0x20005dac
 8005e68:	20000004 	.word	0x20000004
 8005e6c:	20000000 	.word	0x20000000

08005e70 <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 8005e78:	4a04      	ldr	r2, [pc, #16]	; (8005e8c <setupCntxMenu+0x1c>)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6013      	str	r3, [r2, #0]
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20005db0 	.word	0x20005db0

08005e90 <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
	hideCntxMenu();
 8005e94:	f000 f87e 	bl	8005f94 <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 8005e98:	4b04      	ldr	r3, [pc, #16]	; (8005eac <cntxSelect+0x1c>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <cntxSelect+0x20>)
 8005ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	4798      	blx	r3
}
 8005ea8:	bf00      	nop
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20005dae 	.word	0x20005dae
 8005eb0:	20000244 	.word	0x20000244

08005eb4 <nextItem>:

void nextItem(void){
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <nextItem+0x34>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <nextItem+0x38>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	da06      	bge.n	8005ed6 <nextItem+0x22>
		cntxPosition++;
 8005ec8:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <nextItem+0x34>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <nextItem+0x34>)
 8005ed2:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 8005ed4:	e002      	b.n	8005edc <nextItem+0x28>
		cntxPosition = 0;
 8005ed6:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <nextItem+0x34>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
}
 8005edc:	bf00      	nop
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	20005dae 	.word	0x20005dae
 8005eec:	200001ec 	.word	0x200001ec

08005ef0 <prevItem>:
void prevItem(void){
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <prevItem+0x30>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d006      	beq.n	8005f0a <prevItem+0x1a>
		cntxPosition--;
 8005efc:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <prevItem+0x30>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <prevItem+0x30>)
 8005f06:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 8005f08:	e005      	b.n	8005f16 <prevItem+0x26>
		cntxPosition = actionsNum-1;
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <prevItem+0x34>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <prevItem+0x30>)
 8005f14:	701a      	strb	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	20005dae 	.word	0x20005dae
 8005f24:	200001ec 	.word	0x200001ec

08005f28 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <setDefaultClbcks+0x34>)
 8005f2e:	4a0c      	ldr	r2, [pc, #48]	; (8005f60 <setDefaultClbcks+0x38>)
 8005f30:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <setDefaultClbcks+0x3c>)
 8005f34:	4a0c      	ldr	r2, [pc, #48]	; (8005f68 <setDefaultClbcks+0x40>)
 8005f36:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <setDefaultClbcks+0x3c>)
 8005f3a:	4a0b      	ldr	r2, [pc, #44]	; (8005f68 <setDefaultClbcks+0x40>)
 8005f3c:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <setDefaultClbcks+0x44>)
 8005f40:	4a0b      	ldr	r2, [pc, #44]	; (8005f70 <setDefaultClbcks+0x48>)
 8005f42:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <setDefaultClbcks+0x4c>)
 8005f46:	4a0c      	ldr	r2, [pc, #48]	; (8005f78 <setDefaultClbcks+0x50>)
 8005f48:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <setDefaultClbcks+0x4c>)
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	; (8005f78 <setDefaultClbcks+0x50>)
 8005f4e:	61da      	str	r2, [r3, #28]
}
 8005f50:	bf00      	nop
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	20002714 	.word	0x20002714
 8005f60:	08005f95 	.word	0x08005f95
 8005f64:	200026a8 	.word	0x200026a8
 8005f68:	08005ef1 	.word	0x08005ef1
 8005f6c:	20002684 	.word	0x20002684
 8005f70:	08005e91 	.word	0x08005e91
 8005f74:	20002660 	.word	0x20002660
 8005f78:	08005eb5 	.word	0x08005eb5

08005f7c <showCntxMenu>:

void showCntxMenu(void){
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 8005f80:	f7ff ffd2 	bl	8005f28 <setDefaultClbcks>
	isCntxOpen = 1;
 8005f84:	4b02      	ldr	r3, [pc, #8]	; (8005f90 <showCntxMenu+0x14>)
 8005f86:	2201      	movs	r2, #1
 8005f88:	701a      	strb	r2, [r3, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20005dad 	.word	0x20005dad

08005f94 <hideCntxMenu>:
void hideCntxMenu(void){
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 8005f98:	f7fb ff94 	bl	8001ec4 <resetButtonHandlers>
	(*prevClbcks)();
 8005f9c:	4b03      	ldr	r3, [pc, #12]	; (8005fac <hideCntxMenu+0x18>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4798      	blx	r3
	isCntxOpen = 0;
 8005fa2:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <hideCntxMenu+0x1c>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	20005db0 	.word	0x20005db0
 8005fb0:	20005dad 	.word	0x20005dad

08005fb4 <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	; 0x28
 8005fb8:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 8005fba:	4b35      	ldr	r3, [pc, #212]	; (8006090 <enableCntxMenu+0xdc>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d062      	beq.n	8006088 <enableCntxMenu+0xd4>
//		clear rect
		lcdRect(0, 200, 5, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 0);
 8005fc2:	230e      	movs	r3, #14
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4b33      	ldr	r3, [pc, #204]	; (8006094 <enableCntxMenu+0xe0>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	330a      	adds	r3, #10
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	9200      	str	r2, [sp, #0]
 8005fd4:	2205      	movs	r2, #5
 8005fd6:	21c8      	movs	r1, #200	; 0xc8
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f7fd fe11 	bl	8003c00 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 8005fde:	2301      	movs	r3, #1
 8005fe0:	2206      	movs	r2, #6
 8005fe2:	21c8      	movs	r1, #200	; 0xc8
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f7fd fcb5 	bl	8003954 <lcdHLine>
		lcdHLine(0, 200, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 1);
 8005fea:	230e      	movs	r3, #14
 8005fec:	461a      	mov	r2, r3
 8005fee:	4b29      	ldr	r3, [pc, #164]	; (8006094 <enableCntxMenu+0xe0>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	f103 020a 	add.w	r2, r3, #10
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	21c8      	movs	r1, #200	; 0xc8
 8005ffe:	2000      	movs	r0, #0
 8006000:	f7fd fca8 	bl	8003954 <lcdHLine>
//		create list
		char item[30] = {0};
 8006004:	2300      	movs	r3, #0
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	1d3b      	adds	r3, r7, #4
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	605a      	str	r2, [r3, #4]
 8006010:	609a      	str	r2, [r3, #8]
 8006012:	60da      	str	r2, [r3, #12]
 8006014:	611a      	str	r2, [r3, #16]
 8006016:	615a      	str	r2, [r3, #20]
 8006018:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 800601a:	2300      	movs	r3, #0
 800601c:	77fb      	strb	r3, [r7, #31]
 800601e:	e018      	b.n	8006052 <enableCntxMenu+0x9e>
			sprintf(&item, ContextActions[i]->name);
 8006020:	7ffb      	ldrb	r3, [r7, #31]
 8006022:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <enableCntxMenu+0xe4>)
 8006024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006028:	461a      	mov	r2, r3
 800602a:	463b      	mov	r3, r7
 800602c:	4611      	mov	r1, r2
 800602e:	4618      	mov	r0, r3
 8006030:	f00e ff5c 	bl	8014eec <siprintf>
			lcdPutStr(5, 10+(*font_12_zekton.font_Height)*i, item, font_12_zekton);
 8006034:	220e      	movs	r2, #14
 8006036:	7ffb      	ldrb	r3, [r7, #31]
 8006038:	fb13 f302 	smulbb	r3, r3, r2
 800603c:	b2db      	uxtb	r3, r3
 800603e:	330a      	adds	r3, #10
 8006040:	b2d9      	uxtb	r1, r3
 8006042:	463a      	mov	r2, r7
 8006044:	4b15      	ldr	r3, [pc, #84]	; (800609c <enableCntxMenu+0xe8>)
 8006046:	2005      	movs	r0, #5
 8006048:	f7fc ffbc 	bl	8002fc4 <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 800604c:	7ffb      	ldrb	r3, [r7, #31]
 800604e:	3301      	adds	r3, #1
 8006050:	77fb      	strb	r3, [r7, #31]
 8006052:	4b10      	ldr	r3, [pc, #64]	; (8006094 <enableCntxMenu+0xe0>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	7ffa      	ldrb	r2, [r7, #31]
 8006058:	429a      	cmp	r2, r3
 800605a:	d3e1      	bcc.n	8006020 <enableCntxMenu+0x6c>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*font_12_zekton.font_Height)*cntxPosition, 8+(*font_12_zekton.font_Height)*(cntxPosition+1), 2);
 800605c:	230e      	movs	r3, #14
 800605e:	461a      	mov	r2, r3
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <enableCntxMenu+0xec>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	fb02 f303 	mul.w	r3, r2, r3
 8006068:	f103 0208 	add.w	r2, r3, #8
 800606c:	230e      	movs	r3, #14
 800606e:	4619      	mov	r1, r3
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <enableCntxMenu+0xec>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	fb01 f303 	mul.w	r3, r1, r3
 800607a:	3308      	adds	r3, #8
 800607c:	2102      	movs	r1, #2
 800607e:	9100      	str	r1, [sp, #0]
 8006080:	21c8      	movs	r1, #200	; 0xc8
 8006082:	2000      	movs	r0, #0
 8006084:	f7fd fdbc 	bl	8003c00 <lcdRect>

	}
}
 8006088:	bf00      	nop
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20005dad 	.word	0x20005dad
 8006094:	200001ec 	.word	0x200001ec
 8006098:	20000244 	.word	0x20000244
 800609c:	08027b88 	.word	0x08027b88
 80060a0:	20005dae 	.word	0x20005dae

080060a4 <nextPg>:
extern gpsDevice_t gpsDev;
extern char dmaBuffer[];
extern location_t location;


void nextPg(void){
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
	pageNum++;
 80060a8:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <nextPg+0x1c>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	3301      	adds	r3, #1
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	4b03      	ldr	r3, [pc, #12]	; (80060c0 <nextPg+0x1c>)
 80060b2:	701a      	strb	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	20005db4 	.word	0x20005db4

080060c4 <prevPg>:
void prevPg(void){
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
	pageNum--;
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <prevPg+0x1c>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <prevPg+0x1c>)
 80060d2:	701a      	strb	r2, [r3, #0]
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20005db4 	.word	0x20005db4

080060e4 <syncTime>:
void syncTime(void){
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
	if(location.isValid){
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <syncTime+0x5c>)
 80060ea:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d023      	beq.n	800613a <syncTime+0x56>

	RtcTime.Hours = location.utc_hour+GLOBAL_timezone;
 80060f2:	4b13      	ldr	r3, [pc, #76]	; (8006140 <syncTime+0x5c>)
 80060f4:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 80060f8:	4b12      	ldr	r3, [pc, #72]	; (8006144 <syncTime+0x60>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	4413      	add	r3, r2
 8006100:	b2da      	uxtb	r2, r3
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <syncTime+0x64>)
 8006104:	701a      	strb	r2, [r3, #0]
		RtcTime.Minutes = location.utc_min;
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <syncTime+0x5c>)
 8006108:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 800610c:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <syncTime+0x64>)
 800610e:	705a      	strb	r2, [r3, #1]
		RtcTime.Seconds = location.utc_sec;
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <syncTime+0x5c>)
 8006112:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <syncTime+0x64>)
 8006118:	709a      	strb	r2, [r3, #2]
		RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <syncTime+0x64>)
 800611c:	2200      	movs	r2, #0
 800611e:	60da      	str	r2, [r3, #12]
		RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006120:	4b09      	ldr	r3, [pc, #36]	; (8006148 <syncTime+0x64>)
 8006122:	2200      	movs	r2, #0
 8006124:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8006126:	2200      	movs	r2, #0
 8006128:	4907      	ldr	r1, [pc, #28]	; (8006148 <syncTime+0x64>)
 800612a:	4808      	ldr	r0, [pc, #32]	; (800614c <syncTime+0x68>)
 800612c:	f006 fc1c 	bl	800c968 <HAL_RTC_SetTime>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <syncTime+0x56>
		{
		Error_Handler();
 8006136:	f7fe f90f 	bl	8004358 <Error_Handler>
		}
	}
}
 800613a:	bf00      	nop
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20005678 	.word	0x20005678
 8006144:	200001a0 	.word	0x200001a0
 8006148:	200057f0 	.word	0x200057f0
 800614c:	20005aa0 	.word	0x20005aa0

08006150 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8006154:	4b09      	ldr	r3, [pc, #36]	; (800617c <setDefaultClbcks+0x2c>)
 8006156:	4a0a      	ldr	r2, [pc, #40]	; (8006180 <setDefaultClbcks+0x30>)
 8006158:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800615a:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <setDefaultClbcks+0x34>)
 800615c:	4a0a      	ldr	r2, [pc, #40]	; (8006188 <setDefaultClbcks+0x38>)
 800615e:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPg;
 8006160:	4b0a      	ldr	r3, [pc, #40]	; (800618c <setDefaultClbcks+0x3c>)
 8006162:	4a0b      	ldr	r2, [pc, #44]	; (8006190 <setDefaultClbcks+0x40>)
 8006164:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPg;
 8006166:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <setDefaultClbcks+0x44>)
 8006168:	4a0b      	ldr	r2, [pc, #44]	; (8006198 <setDefaultClbcks+0x48>)
 800616a:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &syncTime;
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <setDefaultClbcks+0x4c>)
 800616e:	4a0c      	ldr	r2, [pc, #48]	; (80061a0 <setDefaultClbcks+0x50>)
 8006170:	611a      	str	r2, [r3, #16]
}
 8006172:	bf00      	nop
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	20002660 	.word	0x20002660
 8006180:	08002a8d 	.word	0x08002a8d
 8006184:	200026a8 	.word	0x200026a8
 8006188:	08002a9d 	.word	0x08002a9d
 800618c:	200026cc 	.word	0x200026cc
 8006190:	080060a5 	.word	0x080060a5
 8006194:	20002714 	.word	0x20002714
 8006198:	080060c5 	.word	0x080060c5
 800619c:	200026f0 	.word	0x200026f0
 80061a0:	080060e5 	.word	0x080060e5

080061a4 <gpsSetup>:

void gpsSetup(void){
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80061a8:	f7ff ffd2 	bl	8006150 <setDefaultClbcks>

}
 80061ac:	bf00      	nop
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <gpsMain>:

void gpsMain(void){
 80061b0:	b590      	push	{r4, r7, lr}
 80061b2:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 80061b6:	af02      	add	r7, sp, #8
	char tempStr[51] = {0};
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80061be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80061c2:	222f      	movs	r2, #47	; 0x2f
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f00d fd62 	bl	8013c90 <memset>

	switch(pageNum){
 80061cc:	4bb2      	ldr	r3, [pc, #712]	; (8006498 <gpsMain+0x2e8>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <gpsMain+0x2c>
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	f000 80e7 	beq.w	80063a8 <gpsMain+0x1f8>
 80061da:	e13e      	b.n	800645a <gpsMain+0x2aa>
	case 0: {
		uint8_t locUpdated = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		locUpdated = getLocation(&gpsDev, &location);
 80061e2:	49ae      	ldr	r1, [pc, #696]	; (800649c <gpsMain+0x2ec>)
 80061e4:	48ae      	ldr	r0, [pc, #696]	; (80064a0 <gpsMain+0x2f0>)
 80061e6:	f7fc f9d3 	bl	8002590 <getLocation>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		if(location.hasFix & location.isValid){
 80061f0:	4baa      	ldr	r3, [pc, #680]	; (800649c <gpsMain+0x2ec>)
 80061f2:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 80061f6:	4ba9      	ldr	r3, [pc, #676]	; (800649c <gpsMain+0x2ec>)
 80061f8:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 80061fc:	4013      	ands	r3, r2
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8095 	beq.w	8006330 <gpsMain+0x180>
			sprintf(&tempStr, "GPS fix (%d satellites)", location.satNum);
 8006206:	4ba5      	ldr	r3, [pc, #660]	; (800649c <gpsMain+0x2ec>)
 8006208:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800620c:	461a      	mov	r2, r3
 800620e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8006212:	49a4      	ldr	r1, [pc, #656]	; (80064a4 <gpsMain+0x2f4>)
 8006214:	4618      	mov	r0, r3
 8006216:	f00e fe69 	bl	8014eec <siprintf>
			lcdPutStr(200, 220, tempStr, smallestFont);
 800621a:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800621e:	4ba2      	ldr	r3, [pc, #648]	; (80064a8 <gpsMain+0x2f8>)
 8006220:	21dc      	movs	r1, #220	; 0xdc
 8006222:	20c8      	movs	r0, #200	; 0xc8
 8006224:	f7fc fece 	bl	8002fc4 <lcdPutStr>
			sprintf(&tempStr, "UTC %02d%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 8006228:	4b9c      	ldr	r3, [pc, #624]	; (800649c <gpsMain+0x2ec>)
 800622a:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800622e:	461a      	mov	r2, r3
 8006230:	4b9a      	ldr	r3, [pc, #616]	; (800649c <gpsMain+0x2ec>)
 8006232:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8006236:	4619      	mov	r1, r3
 8006238:	4b98      	ldr	r3, [pc, #608]	; (800649c <gpsMain+0x2ec>)
 800623a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800623e:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	460b      	mov	r3, r1
 8006246:	4999      	ldr	r1, [pc, #612]	; (80064ac <gpsMain+0x2fc>)
 8006248:	f00e fe50 	bl	8014eec <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 800624c:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006250:	4b97      	ldr	r3, [pc, #604]	; (80064b0 <gpsMain+0x300>)
 8006252:	2100      	movs	r1, #0
 8006254:	2000      	movs	r0, #0
 8006256:	f7fc feb5 	bl	8002fc4 <lcdPutStr>
			sprintf(&tempStr, "LOC %02d%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 800625a:	4b96      	ldr	r3, [pc, #600]	; (80064b4 <gpsMain+0x304>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	4b94      	ldr	r3, [pc, #592]	; (80064b4 <gpsMain+0x304>)
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	4619      	mov	r1, r3
 8006266:	4b93      	ldr	r3, [pc, #588]	; (80064b4 <gpsMain+0x304>)
 8006268:	789b      	ldrb	r3, [r3, #2]
 800626a:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	460b      	mov	r3, r1
 8006272:	4991      	ldr	r1, [pc, #580]	; (80064b8 <gpsMain+0x308>)
 8006274:	f00e fe3a 	bl	8014eec <siprintf>
			lcdPutStr(220, 0, tempStr, ocrFont);
 8006278:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800627c:	4b8c      	ldr	r3, [pc, #560]	; (80064b0 <gpsMain+0x300>)
 800627e:	2100      	movs	r1, #0
 8006280:	20dc      	movs	r0, #220	; 0xdc
 8006282:	f7fc fe9f 	bl	8002fc4 <lcdPutStr>
			sprintf(&tempStr, "GMT%+d", GLOBAL_timezone);
 8006286:	4b8d      	ldr	r3, [pc, #564]	; (80064bc <gpsMain+0x30c>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800628e:	498c      	ldr	r1, [pc, #560]	; (80064c0 <gpsMain+0x310>)
 8006290:	4618      	mov	r0, r3
 8006292:	f00e fe2b 	bl	8014eec <siprintf>
			lcdPutStr(220, 20, tempStr, ocrFont);
 8006296:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800629a:	4b85      	ldr	r3, [pc, #532]	; (80064b0 <gpsMain+0x300>)
 800629c:	2114      	movs	r1, #20
 800629e:	20dc      	movs	r0, #220	; 0xdc
 80062a0:	f7fc fe90 	bl	8002fc4 <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.n_s, location.latitudeDeg, location.latitudeMin);
 80062a4:	4b7d      	ldr	r3, [pc, #500]	; (800649c <gpsMain+0x2ec>)
 80062a6:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 80062aa:	4619      	mov	r1, r3
 80062ac:	4b7b      	ldr	r3, [pc, #492]	; (800649c <gpsMain+0x2ec>)
 80062ae:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80062b2:	461c      	mov	r4, r3
 80062b4:	4b79      	ldr	r3, [pc, #484]	; (800649c <gpsMain+0x2ec>)
 80062b6:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 80062ba:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 80062be:	e9cd 2300 	strd	r2, r3, [sp]
 80062c2:	4623      	mov	r3, r4
 80062c4:	460a      	mov	r2, r1
 80062c6:	497f      	ldr	r1, [pc, #508]	; (80064c4 <gpsMain+0x314>)
 80062c8:	f00e fe10 	bl	8014eec <siprintf>
			lcdPutStr(0, 50, tempStr, zekton45font);
 80062cc:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80062d0:	4b7d      	ldr	r3, [pc, #500]	; (80064c8 <gpsMain+0x318>)
 80062d2:	2132      	movs	r1, #50	; 0x32
 80062d4:	2000      	movs	r0, #0
 80062d6:	f7fc fe75 	bl	8002fc4 <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.w_e, location.longitudeDeg, location.longitudeMin);
 80062da:	4b70      	ldr	r3, [pc, #448]	; (800649c <gpsMain+0x2ec>)
 80062dc:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 80062e0:	4619      	mov	r1, r3
 80062e2:	4b6e      	ldr	r3, [pc, #440]	; (800649c <gpsMain+0x2ec>)
 80062e4:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80062e8:	461c      	mov	r4, r3
 80062ea:	4b6c      	ldr	r3, [pc, #432]	; (800649c <gpsMain+0x2ec>)
 80062ec:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 80062f0:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 80062f4:	e9cd 2300 	strd	r2, r3, [sp]
 80062f8:	4623      	mov	r3, r4
 80062fa:	460a      	mov	r2, r1
 80062fc:	4971      	ldr	r1, [pc, #452]	; (80064c4 <gpsMain+0x314>)
 80062fe:	f00e fdf5 	bl	8014eec <siprintf>
			lcdPutStr(0, 110, tempStr, zekton45font);
 8006302:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006306:	4b70      	ldr	r3, [pc, #448]	; (80064c8 <gpsMain+0x318>)
 8006308:	216e      	movs	r1, #110	; 0x6e
 800630a:	2000      	movs	r0, #0
 800630c:	f7fc fe5a 	bl	8002fc4 <lcdPutStr>
			sprintf(&tempStr, "ALT: %.1fm", location.elevation);
 8006310:	4b62      	ldr	r3, [pc, #392]	; (800649c <gpsMain+0x2ec>)
 8006312:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8006316:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800631a:	496c      	ldr	r1, [pc, #432]	; (80064cc <gpsMain+0x31c>)
 800631c:	f00e fde6 	bl	8014eec <siprintf>
			lcdPutStr(20, 170, tempStr, zekton24font);
 8006320:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006324:	4b6a      	ldr	r3, [pc, #424]	; (80064d0 <gpsMain+0x320>)
 8006326:	21aa      	movs	r1, #170	; 0xaa
 8006328:	2014      	movs	r0, #20
 800632a:	f7fc fe4b 	bl	8002fc4 <lcdPutStr>
 800632e:	e029      	b.n	8006384 <gpsMain+0x1d4>

		} else {
			sprintf(&tempStr, "No fix - %d satellites", location.satNum);
 8006330:	4b5a      	ldr	r3, [pc, #360]	; (800649c <gpsMain+0x2ec>)
 8006332:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006336:	461a      	mov	r2, r3
 8006338:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800633c:	4965      	ldr	r1, [pc, #404]	; (80064d4 <gpsMain+0x324>)
 800633e:	4618      	mov	r0, r3
 8006340:	f00e fdd4 	bl	8014eec <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 8006344:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006348:	4b59      	ldr	r3, [pc, #356]	; (80064b0 <gpsMain+0x300>)
 800634a:	2100      	movs	r1, #0
 800634c:	2000      	movs	r0, #0
 800634e:	f7fc fe39 	bl	8002fc4 <lcdPutStr>
			sprintf(&tempStr, "UTC time: %02d:%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 8006352:	4b52      	ldr	r3, [pc, #328]	; (800649c <gpsMain+0x2ec>)
 8006354:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8006358:	461a      	mov	r2, r3
 800635a:	4b50      	ldr	r3, [pc, #320]	; (800649c <gpsMain+0x2ec>)
 800635c:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8006360:	4619      	mov	r1, r3
 8006362:	4b4e      	ldr	r3, [pc, #312]	; (800649c <gpsMain+0x2ec>)
 8006364:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006368:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	460b      	mov	r3, r1
 8006370:	4959      	ldr	r1, [pc, #356]	; (80064d8 <gpsMain+0x328>)
 8006372:	f00e fdbb 	bl	8014eec <siprintf>
			lcdPutStr(0, 30, tempStr, ocrFont);
 8006376:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800637a:	4b4d      	ldr	r3, [pc, #308]	; (80064b0 <gpsMain+0x300>)
 800637c:	211e      	movs	r1, #30
 800637e:	2000      	movs	r0, #0
 8006380:	f7fc fe20 	bl	8002fc4 <lcdPutStr>
		}
		if(locUpdated){
 8006384:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8006388:	2b00      	cmp	r3, #0
 800638a:	d07f      	beq.n	800648c <gpsMain+0x2dc>
			sprintf(&tempStr, "location updated");
 800638c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8006390:	4952      	ldr	r1, [pc, #328]	; (80064dc <gpsMain+0x32c>)
 8006392:	4618      	mov	r0, r3
 8006394:	f00e fdaa 	bl	8014eec <siprintf>
			lcdPutStr(0, 220, tempStr, smallestFont);
 8006398:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800639c:	4b42      	ldr	r3, [pc, #264]	; (80064a8 <gpsMain+0x2f8>)
 800639e:	21dc      	movs	r1, #220	; 0xdc
 80063a0:	2000      	movs	r0, #0
 80063a2:	f7fc fe0f 	bl	8002fc4 <lcdPutStr>
		}
		break;
 80063a6:	e071      	b.n	800648c <gpsMain+0x2dc>
	}
	case 1: {
		getLocation(&gpsDev, &location);
 80063a8:	493c      	ldr	r1, [pc, #240]	; (800649c <gpsMain+0x2ec>)
 80063aa:	483d      	ldr	r0, [pc, #244]	; (80064a0 <gpsMain+0x2f0>)
 80063ac:	f7fc f8f0 	bl	8002590 <getLocation>
		lcdPutStr(0, 25, location.debug, smallestFont);
 80063b0:	4b3d      	ldr	r3, [pc, #244]	; (80064a8 <gpsMain+0x2f8>)
 80063b2:	4a3a      	ldr	r2, [pc, #232]	; (800649c <gpsMain+0x2ec>)
 80063b4:	2119      	movs	r1, #25
 80063b6:	2000      	movs	r0, #0
 80063b8:	f7fc fe04 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(0, 40, location.words[0], smallestFont);
 80063bc:	4b3a      	ldr	r3, [pc, #232]	; (80064a8 <gpsMain+0x2f8>)
 80063be:	4a48      	ldr	r2, [pc, #288]	; (80064e0 <gpsMain+0x330>)
 80063c0:	2128      	movs	r1, #40	; 0x28
 80063c2:	2000      	movs	r0, #0
 80063c4:	f7fc fdfe 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(0, 55, location.words[1], smallestFont);
 80063c8:	4b37      	ldr	r3, [pc, #220]	; (80064a8 <gpsMain+0x2f8>)
 80063ca:	4a46      	ldr	r2, [pc, #280]	; (80064e4 <gpsMain+0x334>)
 80063cc:	2137      	movs	r1, #55	; 0x37
 80063ce:	2000      	movs	r0, #0
 80063d0:	f7fc fdf8 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(0, 70, location.words[2], smallestFont);
 80063d4:	4b34      	ldr	r3, [pc, #208]	; (80064a8 <gpsMain+0x2f8>)
 80063d6:	4a44      	ldr	r2, [pc, #272]	; (80064e8 <gpsMain+0x338>)
 80063d8:	2146      	movs	r1, #70	; 0x46
 80063da:	2000      	movs	r0, #0
 80063dc:	f7fc fdf2 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(0, 85, location.words[3], smallestFont);
 80063e0:	4b31      	ldr	r3, [pc, #196]	; (80064a8 <gpsMain+0x2f8>)
 80063e2:	4a42      	ldr	r2, [pc, #264]	; (80064ec <gpsMain+0x33c>)
 80063e4:	2155      	movs	r1, #85	; 0x55
 80063e6:	2000      	movs	r0, #0
 80063e8:	f7fc fdec 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(0, 100, location.words[4], smallestFont);
 80063ec:	4b2e      	ldr	r3, [pc, #184]	; (80064a8 <gpsMain+0x2f8>)
 80063ee:	4a40      	ldr	r2, [pc, #256]	; (80064f0 <gpsMain+0x340>)
 80063f0:	2164      	movs	r1, #100	; 0x64
 80063f2:	2000      	movs	r0, #0
 80063f4:	f7fc fde6 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(100, 25, location.words[5], smallestFont);
 80063f8:	4b2b      	ldr	r3, [pc, #172]	; (80064a8 <gpsMain+0x2f8>)
 80063fa:	4a3e      	ldr	r2, [pc, #248]	; (80064f4 <gpsMain+0x344>)
 80063fc:	2119      	movs	r1, #25
 80063fe:	2064      	movs	r0, #100	; 0x64
 8006400:	f7fc fde0 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(100, 40, location.words[6], smallestFont);
 8006404:	4b28      	ldr	r3, [pc, #160]	; (80064a8 <gpsMain+0x2f8>)
 8006406:	4a3c      	ldr	r2, [pc, #240]	; (80064f8 <gpsMain+0x348>)
 8006408:	2128      	movs	r1, #40	; 0x28
 800640a:	2064      	movs	r0, #100	; 0x64
 800640c:	f7fc fdda 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(100, 55, location.words[7], smallestFont);
 8006410:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <gpsMain+0x2f8>)
 8006412:	4a3a      	ldr	r2, [pc, #232]	; (80064fc <gpsMain+0x34c>)
 8006414:	2137      	movs	r1, #55	; 0x37
 8006416:	2064      	movs	r0, #100	; 0x64
 8006418:	f7fc fdd4 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(100, 70, location.words[8], smallestFont);
 800641c:	4b22      	ldr	r3, [pc, #136]	; (80064a8 <gpsMain+0x2f8>)
 800641e:	4a38      	ldr	r2, [pc, #224]	; (8006500 <gpsMain+0x350>)
 8006420:	2146      	movs	r1, #70	; 0x46
 8006422:	2064      	movs	r0, #100	; 0x64
 8006424:	f7fc fdce 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(100, 85, location.words[9], smallestFont);
 8006428:	4b1f      	ldr	r3, [pc, #124]	; (80064a8 <gpsMain+0x2f8>)
 800642a:	4a36      	ldr	r2, [pc, #216]	; (8006504 <gpsMain+0x354>)
 800642c:	2155      	movs	r1, #85	; 0x55
 800642e:	2064      	movs	r0, #100	; 0x64
 8006430:	f7fc fdc8 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(100, 100, location.words[10], smallestFont);
 8006434:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <gpsMain+0x2f8>)
 8006436:	4a34      	ldr	r2, [pc, #208]	; (8006508 <gpsMain+0x358>)
 8006438:	2164      	movs	r1, #100	; 0x64
 800643a:	2064      	movs	r0, #100	; 0x64
 800643c:	f7fc fdc2 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(200, 25, location.words[11], smallestFont);
 8006440:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <gpsMain+0x2f8>)
 8006442:	4a32      	ldr	r2, [pc, #200]	; (800650c <gpsMain+0x35c>)
 8006444:	2119      	movs	r1, #25
 8006446:	20c8      	movs	r0, #200	; 0xc8
 8006448:	f7fc fdbc 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(200, 40, location.words[12], smallestFont);
 800644c:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <gpsMain+0x2f8>)
 800644e:	4a30      	ldr	r2, [pc, #192]	; (8006510 <gpsMain+0x360>)
 8006450:	2128      	movs	r1, #40	; 0x28
 8006452:	20c8      	movs	r0, #200	; 0xc8
 8006454:	f7fc fdb6 	bl	8002fc4 <lcdPutStr>
		break;
 8006458:	e019      	b.n	800648e <gpsMain+0x2de>
		// show gpsDev buffer in many lines
//		for(uint8_t i=0; i<6; i++){
//			strncpy(&tempStr, &gpsDev.buffer[50*i], 50);
//			lcdPutStr(0,120+14*i, tempStr, smallestFont);
//		}
		char tempStr2[GPS_BUFFER_SIZE+1] = {0};
 800645a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800645e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	3304      	adds	r3, #4
 8006468:	f240 2255 	movw	r2, #597	; 0x255
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f00d fc0e 	bl	8013c90 <memset>

		strcpy(&tempStr2, &gpsDev.buffer);
 8006474:	463b      	mov	r3, r7
 8006476:	4927      	ldr	r1, [pc, #156]	; (8006514 <gpsMain+0x364>)
 8006478:	4618      	mov	r0, r3
 800647a:	f00e fdc8 	bl	801500e <strcpy>
		lcdPutStrML(0,0, tempStr2, smallestFont);
 800647e:	463a      	mov	r2, r7
 8006480:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <gpsMain+0x2f8>)
 8006482:	2100      	movs	r1, #0
 8006484:	2000      	movs	r0, #0
 8006486:	f7fc fdcb 	bl	8003020 <lcdPutStrML>
		break;
 800648a:	e000      	b.n	800648e <gpsMain+0x2de>
		break;
 800648c:	bf00      	nop





}
 800648e:	bf00      	nop
 8006490:	f507 7725 	add.w	r7, r7, #660	; 0x294
 8006494:	46bd      	mov	sp, r7
 8006496:	bd90      	pop	{r4, r7, pc}
 8006498:	20005db4 	.word	0x20005db4
 800649c:	20005678 	.word	0x20005678
 80064a0:	2000582c 	.word	0x2000582c
 80064a4:	0801c608 	.word	0x0801c608
 80064a8:	08028610 	.word	0x08028610
 80064ac:	0801c620 	.word	0x0801c620
 80064b0:	08028a8c 	.word	0x08028a8c
 80064b4:	200057f0 	.word	0x200057f0
 80064b8:	0801c634 	.word	0x0801c634
 80064bc:	200001a0 	.word	0x200001a0
 80064c0:	0801c648 	.word	0x0801c648
 80064c4:	0801c650 	.word	0x0801c650
 80064c8:	0802bebc 	.word	0x0802bebc
 80064cc:	0801c65c 	.word	0x0801c65c
 80064d0:	0802a054 	.word	0x0802a054
 80064d4:	0801c668 	.word	0x0801c668
 80064d8:	0801c680 	.word	0x0801c680
 80064dc:	0801c69c 	.word	0x0801c69c
 80064e0:	200056ce 	.word	0x200056ce
 80064e4:	200056dd 	.word	0x200056dd
 80064e8:	200056ec 	.word	0x200056ec
 80064ec:	200056fb 	.word	0x200056fb
 80064f0:	2000570a 	.word	0x2000570a
 80064f4:	20005719 	.word	0x20005719
 80064f8:	20005728 	.word	0x20005728
 80064fc:	20005737 	.word	0x20005737
 8006500:	20005746 	.word	0x20005746
 8006504:	20005755 	.word	0x20005755
 8006508:	20005764 	.word	0x20005764
 800650c:	20005773 	.word	0x20005773
 8006510:	20005782 	.word	0x20005782
 8006514:	20005830 	.word	0x20005830

08006518 <switchLocalView>:
void remDay(){
	testTime.tm_mday--;
	mktime(&testTime);

}
void switchLocalView(void){
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
	if(localModuleNum<=3){
 800651c:	4b09      	ldr	r3, [pc, #36]	; (8006544 <switchLocalView+0x2c>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b03      	cmp	r3, #3
 8006522:	d806      	bhi.n	8006532 <switchLocalView+0x1a>
		localModuleNum++;
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <switchLocalView+0x2c>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	b2da      	uxtb	r2, r3
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <switchLocalView+0x2c>)
 800652e:	701a      	strb	r2, [r3, #0]
	} else {
		localModuleNum = 0;
	}
}
 8006530:	e002      	b.n	8006538 <switchLocalView+0x20>
		localModuleNum = 0;
 8006532:	4b04      	ldr	r3, [pc, #16]	; (8006544 <switchLocalView+0x2c>)
 8006534:	2200      	movs	r2, #0
 8006536:	701a      	strb	r2, [r3, #0]
}
 8006538:	bf00      	nop
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20005ddc 	.word	0x20005ddc

08006548 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <setDefaultClbcks+0x20>)
 800654e:	4a07      	ldr	r2, [pc, #28]	; (800656c <setDefaultClbcks+0x24>)
 8006550:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006552:	4b07      	ldr	r3, [pc, #28]	; (8006570 <setDefaultClbcks+0x28>)
 8006554:	4a07      	ldr	r2, [pc, #28]	; (8006574 <setDefaultClbcks+0x2c>)
 8006556:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &switchLocalView;
 8006558:	4b07      	ldr	r3, [pc, #28]	; (8006578 <setDefaultClbcks+0x30>)
 800655a:	4a08      	ldr	r2, [pc, #32]	; (800657c <setDefaultClbcks+0x34>)
 800655c:	611a      	str	r2, [r3, #16]
}
 800655e:	bf00      	nop
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	20002660 	.word	0x20002660
 800656c:	08002a8d 	.word	0x08002a8d
 8006570:	200026a8 	.word	0x200026a8
 8006574:	08002a9d 	.word	0x08002a9d
 8006578:	20002684 	.word	0x20002684
 800657c:	08006519 	.word	0x08006519

08006580 <localSetup>:
void localSetup(void){
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006584:	f7ff ffe0 	bl	8006548 <setDefaultClbcks>
}
 8006588:	bf00      	nop
 800658a:	bd80      	pop	{r7, pc}
 800658c:	0000      	movs	r0, r0
	...

08006590 <fractionalYear>:
	int8_t timezone;	// [h] east+ west-
	double longitude; 	// [deg]
	double latitude;	// [deg]
};
// fractional year = gamma [rad]
float fractionalYear(struct tm *timeStr, struct local_location *location){
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	int dayOfTheYear = testTime.tm_yday+1;
 800659a:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <fractionalYear+0x68>)
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	3301      	adds	r3, #1
 80065a0:	60fb      	str	r3, [r7, #12]
	return (2*M_PI/365)*(dayOfTheYear-1+(timeStr->tm_hour-location->timezone-12)/24);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1e5a      	subs	r2, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	f991 1000 	ldrsb.w	r1, [r1]
 80065b0:	1a5b      	subs	r3, r3, r1
 80065b2:	3b0c      	subs	r3, #12
 80065b4:	4911      	ldr	r1, [pc, #68]	; (80065fc <fractionalYear+0x6c>)
 80065b6:	fb81 0103 	smull	r0, r1, r1, r3
 80065ba:	1089      	asrs	r1, r1, #2
 80065bc:	17db      	asrs	r3, r3, #31
 80065be:	1acb      	subs	r3, r1, r3
 80065c0:	4413      	add	r3, r2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7f9 ffce 	bl	8000564 <__aeabi_i2d>
 80065c8:	a309      	add	r3, pc, #36	; (adr r3, 80065f0 <fractionalYear+0x60>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7fa f833 	bl	8000638 <__aeabi_dmul>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	f7fa fb25 	bl	8000c28 <__aeabi_d2f>
 80065de:	4603      	mov	r3, r0
 80065e0:	ee07 3a90 	vmov	s15, r3
}
 80065e4:	eeb0 0a67 	vmov.f32	s0, s15
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	d4b3ac9a 	.word	0xd4b3ac9a
 80065f4:	3f91a099 	.word	0x3f91a099
 80065f8:	20005db8 	.word	0x20005db8
 80065fc:	2aaaaaab 	.word	0x2aaaaaab

08006600 <equationOfTime>:
// equation of time [min]
float equationOfTime(float fyear){
 8006600:	b5b0      	push	{r4, r5, r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	ed87 0a01 	vstr	s0, [r7, #4]
	return 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7f9 ffbc 	bl	8000588 <__aeabi_f2d>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	ec43 2b10 	vmov	d0, r2, r3
 8006618:	f012 ff6a 	bl	80194f0 <cos>
 800661c:	ec51 0b10 	vmov	r0, r1, d0
 8006620:	a33f      	add	r3, pc, #252	; (adr r3, 8006720 <equationOfTime+0x120>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7fa f807 	bl	8000638 <__aeabi_dmul>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4610      	mov	r0, r2
 8006630:	4619      	mov	r1, r3
 8006632:	a33d      	add	r3, pc, #244	; (adr r3, 8006728 <equationOfTime+0x128>)
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f7f9 fe48 	bl	80002cc <__adddf3>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4614      	mov	r4, r2
 8006642:	461d      	mov	r5, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7f9 ff9f 	bl	8000588 <__aeabi_f2d>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	ec43 2b10 	vmov	d0, r2, r3
 8006652:	f012 ffa1 	bl	8019598 <sin>
 8006656:	ec51 0b10 	vmov	r0, r1, d0
 800665a:	a335      	add	r3, pc, #212	; (adr r3, 8006730 <equationOfTime+0x130>)
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	f7f9 ffea 	bl	8000638 <__aeabi_dmul>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4620      	mov	r0, r4
 800666a:	4629      	mov	r1, r5
 800666c:	f7f9 fe2c 	bl	80002c8 <__aeabi_dsub>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4614      	mov	r4, r2
 8006676:	461d      	mov	r5, r3
 8006678:	edd7 7a01 	vldr	s15, [r7, #4]
 800667c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006680:	ee17 0a90 	vmov	r0, s15
 8006684:	f7f9 ff80 	bl	8000588 <__aeabi_f2d>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	ec43 2b10 	vmov	d0, r2, r3
 8006690:	f012 ff2e 	bl	80194f0 <cos>
 8006694:	ec51 0b10 	vmov	r0, r1, d0
 8006698:	a327      	add	r3, pc, #156	; (adr r3, 8006738 <equationOfTime+0x138>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f7f9 ffcb 	bl	8000638 <__aeabi_dmul>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4620      	mov	r0, r4
 80066a8:	4629      	mov	r1, r5
 80066aa:	f7f9 fe0d 	bl	80002c8 <__aeabi_dsub>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4614      	mov	r4, r2
 80066b4:	461d      	mov	r5, r3
 80066b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80066ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80066be:	ee17 0a90 	vmov	r0, s15
 80066c2:	f7f9 ff61 	bl	8000588 <__aeabi_f2d>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	ec43 2b10 	vmov	d0, r2, r3
 80066ce:	f012 ff63 	bl	8019598 <sin>
 80066d2:	ec51 0b10 	vmov	r0, r1, d0
 80066d6:	a31a      	add	r3, pc, #104	; (adr r3, 8006740 <equationOfTime+0x140>)
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f7f9 ffac 	bl	8000638 <__aeabi_dmul>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4620      	mov	r0, r4
 80066e6:	4629      	mov	r1, r5
 80066e8:	f7f9 fdee 	bl	80002c8 <__aeabi_dsub>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4610      	mov	r0, r2
 80066f2:	4619      	mov	r1, r3
 80066f4:	a314      	add	r3, pc, #80	; (adr r3, 8006748 <equationOfTime+0x148>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f7f9 ff9d 	bl	8000638 <__aeabi_dmul>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4610      	mov	r0, r2
 8006704:	4619      	mov	r1, r3
 8006706:	f7fa fa8f 	bl	8000c28 <__aeabi_d2f>
 800670a:	4603      	mov	r3, r0
 800670c:	ee07 3a90 	vmov	s15, r3
}
 8006710:	eeb0 0a67 	vmov.f32	s0, s15
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bdb0      	pop	{r4, r5, r7, pc}
 800671a:	bf00      	nop
 800671c:	f3af 8000 	nop.w
 8006720:	ba2be059 	.word	0xba2be059
 8006724:	3f5e9af5 	.word	0x3f5e9af5
 8006728:	30553261 	.word	0x30553261
 800672c:	3f13a92a 	.word	0x3f13a92a
 8006730:	83e8576d 	.word	0x83e8576d
 8006734:	3fa06c65 	.word	0x3fa06c65
 8006738:	183f91e6 	.word	0x183f91e6
 800673c:	3f8dee78 	.word	0x3f8dee78
 8006740:	fe260b2d 	.word	0xfe260b2d
 8006744:	3fa4ea28 	.word	0x3fa4ea28
 8006748:	8f5c28f6 	.word	0x8f5c28f6
 800674c:	406ca5c2 	.word	0x406ca5c2

08006750 <solarDeclination>:
// solar declination angle [rad]
float solarDeclination(float fyear){
 8006750:	b5b0      	push	{r4, r5, r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	ed87 0a01 	vstr	s0, [r7, #4]
	return 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7f9 ff14 	bl	8000588 <__aeabi_f2d>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	ec43 2b10 	vmov	d0, r2, r3
 8006768:	f012 fec2 	bl	80194f0 <cos>
 800676c:	ec51 0b10 	vmov	r0, r1, d0
 8006770:	a359      	add	r3, pc, #356	; (adr r3, 80068d8 <solarDeclination+0x188>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 ff5f 	bl	8000638 <__aeabi_dmul>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	a158      	add	r1, pc, #352	; (adr r1, 80068e0 <solarDeclination+0x190>)
 8006780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006784:	f7f9 fda0 	bl	80002c8 <__aeabi_dsub>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4614      	mov	r4, r2
 800678e:	461d      	mov	r5, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7f9 fef9 	bl	8000588 <__aeabi_f2d>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	ec43 2b10 	vmov	d0, r2, r3
 800679e:	f012 fefb 	bl	8019598 <sin>
 80067a2:	ec51 0b10 	vmov	r0, r1, d0
 80067a6:	a350      	add	r3, pc, #320	; (adr r3, 80068e8 <solarDeclination+0x198>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f7f9 ff44 	bl	8000638 <__aeabi_dmul>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4620      	mov	r0, r4
 80067b6:	4629      	mov	r1, r5
 80067b8:	f7f9 fd88 	bl	80002cc <__adddf3>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4614      	mov	r4, r2
 80067c2:	461d      	mov	r5, r3
 80067c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80067c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067cc:	ee17 0a90 	vmov	r0, s15
 80067d0:	f7f9 feda 	bl	8000588 <__aeabi_f2d>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	ec43 2b10 	vmov	d0, r2, r3
 80067dc:	f012 fe88 	bl	80194f0 <cos>
 80067e0:	ec51 0b10 	vmov	r0, r1, d0
 80067e4:	a342      	add	r3, pc, #264	; (adr r3, 80068f0 <solarDeclination+0x1a0>)
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	f7f9 ff25 	bl	8000638 <__aeabi_dmul>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4620      	mov	r0, r4
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7f9 fd67 	bl	80002c8 <__aeabi_dsub>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4614      	mov	r4, r2
 8006800:	461d      	mov	r5, r3
 8006802:	edd7 7a01 	vldr	s15, [r7, #4]
 8006806:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800680a:	ee17 0a90 	vmov	r0, s15
 800680e:	f7f9 febb 	bl	8000588 <__aeabi_f2d>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	ec43 2b10 	vmov	d0, r2, r3
 800681a:	f012 febd 	bl	8019598 <sin>
 800681e:	ec51 0b10 	vmov	r0, r1, d0
 8006822:	a335      	add	r3, pc, #212	; (adr r3, 80068f8 <solarDeclination+0x1a8>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f7f9 ff06 	bl	8000638 <__aeabi_dmul>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4620      	mov	r0, r4
 8006832:	4629      	mov	r1, r5
 8006834:	f7f9 fd4a 	bl	80002cc <__adddf3>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4614      	mov	r4, r2
 800683e:	461d      	mov	r5, r3
 8006840:	edd7 7a01 	vldr	s15, [r7, #4]
 8006844:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800684c:	ee17 0a90 	vmov	r0, s15
 8006850:	f7f9 fe9a 	bl	8000588 <__aeabi_f2d>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	ec43 2b10 	vmov	d0, r2, r3
 800685c:	f012 fe48 	bl	80194f0 <cos>
 8006860:	ec51 0b10 	vmov	r0, r1, d0
 8006864:	a326      	add	r3, pc, #152	; (adr r3, 8006900 <solarDeclination+0x1b0>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f7f9 fee5 	bl	8000638 <__aeabi_dmul>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4620      	mov	r0, r4
 8006874:	4629      	mov	r1, r5
 8006876:	f7f9 fd27 	bl	80002c8 <__aeabi_dsub>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	4614      	mov	r4, r2
 8006880:	461d      	mov	r5, r3
 8006882:	edd7 7a01 	vldr	s15, [r7, #4]
 8006886:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800688a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800688e:	ee17 0a90 	vmov	r0, s15
 8006892:	f7f9 fe79 	bl	8000588 <__aeabi_f2d>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	ec43 2b10 	vmov	d0, r2, r3
 800689e:	f012 fe7b 	bl	8019598 <sin>
 80068a2:	ec51 0b10 	vmov	r0, r1, d0
 80068a6:	a318      	add	r3, pc, #96	; (adr r3, 8006908 <solarDeclination+0x1b8>)
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f7f9 fec4 	bl	8000638 <__aeabi_dmul>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7f9 fd08 	bl	80002cc <__adddf3>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4610      	mov	r0, r2
 80068c2:	4619      	mov	r1, r3
 80068c4:	f7fa f9b0 	bl	8000c28 <__aeabi_d2f>
 80068c8:	4603      	mov	r3, r0
 80068ca:	ee07 3a90 	vmov	s15, r3
}
 80068ce:	eeb0 0a67 	vmov.f32	s0, s15
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bdb0      	pop	{r4, r5, r7, pc}
 80068d8:	8051c9f7 	.word	0x8051c9f7
 80068dc:	3fd99828 	.word	0x3fd99828
 80068e0:	7c0f4517 	.word	0x7c0f4517
 80068e4:	3f7c560c 	.word	0x3f7c560c
 80068e8:	dd50a88f 	.word	0xdd50a88f
 80068ec:	3fb1fc5c 	.word	0x3fb1fc5c
 80068f0:	cfc829d0 	.word	0xcfc829d0
 80068f4:	3f7bae46 	.word	0x3f7bae46
 80068f8:	ab324852 	.word	0xab324852
 80068fc:	3f4db877 	.word	0x3f4db877
 8006900:	d9839475 	.word	0xd9839475
 8006904:	3f661804 	.word	0x3f661804
 8006908:	e646f156 	.word	0xe646f156
 800690c:	3f583f91 	.word	0x3f583f91

08006910 <timeOffset>:
// time offset [min]
float timeOffset(struct local_location *location, float fyear){
 8006910:	b5b0      	push	{r4, r5, r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	ed87 0a00 	vstr	s0, [r7]
	return equationOfTime(fyear)+4*location->longitude-60*location->timezone;
 800691c:	ed97 0a00 	vldr	s0, [r7]
 8006920:	f7ff fe6e 	bl	8006600 <equationOfTime>
 8006924:	ee10 3a10 	vmov	r3, s0
 8006928:	4618      	mov	r0, r3
 800692a:	f7f9 fe2d 	bl	8000588 <__aeabi_f2d>
 800692e:	4604      	mov	r4, r0
 8006930:	460d      	mov	r5, r1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	4b15      	ldr	r3, [pc, #84]	; (8006994 <timeOffset+0x84>)
 800693e:	f7f9 fe7b 	bl	8000638 <__aeabi_dmul>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4620      	mov	r0, r4
 8006948:	4629      	mov	r1, r5
 800694a:	f7f9 fcbf 	bl	80002cc <__adddf3>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4614      	mov	r4, r2
 8006954:	461d      	mov	r5, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f993 3000 	ldrsb.w	r3, [r3]
 800695c:	461a      	mov	r2, r3
 800695e:	4613      	mov	r3, r2
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	1a9b      	subs	r3, r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4618      	mov	r0, r3
 8006968:	f7f9 fdfc 	bl	8000564 <__aeabi_i2d>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4620      	mov	r0, r4
 8006972:	4629      	mov	r1, r5
 8006974:	f7f9 fca8 	bl	80002c8 <__aeabi_dsub>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4610      	mov	r0, r2
 800697e:	4619      	mov	r1, r3
 8006980:	f7fa f952 	bl	8000c28 <__aeabi_d2f>
 8006984:	4603      	mov	r3, r0
 8006986:	ee07 3a90 	vmov	s15, r3
}
 800698a:	eeb0 0a67 	vmov.f32	s0, s15
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bdb0      	pop	{r4, r5, r7, pc}
 8006994:	40100000 	.word	0x40100000

08006998 <trueSolarTime>:
// true solar time [min]
float trueSolarTime(struct tm *timeStr, float timeOffset){
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	ed87 0a00 	vstr	s0, [r7]
	return timeStr->tm_hour*60+timeStr->tm_min+(float)timeStr->tm_sec/60+timeOffset;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	4613      	mov	r3, r2
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	1a9b      	subs	r3, r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	461a      	mov	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	4413      	add	r3, r2
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	ee07 3a90 	vmov	s15, r3
 80069c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80069cc:	ed9f 6a08 	vldr	s12, [pc, #32]	; 80069f0 <trueSolarTime+0x58>
 80069d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80069d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069d8:	edd7 7a00 	vldr	s15, [r7]
 80069dc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80069e0:	eeb0 0a67 	vmov.f32	s0, s15
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	42700000 	.word	0x42700000
 80069f4:	00000000 	.word	0x00000000

080069f8 <solarEventTime>:
//sunrise/sunset/noon times [min]
int solarEventTime(enum SOLAR_EVENT event,struct tm *timeStr, struct local_location *location, float cha){
 80069f8:	b5b0      	push	{r4, r5, r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	ed87 0a00 	vstr	s0, [r7]
 8006a08:	73fb      	strb	r3, [r7, #15]
	float fyear = fractionalYear(timeStr, location);
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	68b8      	ldr	r0, [r7, #8]
 8006a0e:	f7ff fdbf 	bl	8006590 <fractionalYear>
 8006a12:	ed87 0a05 	vstr	s0, [r7, #20]
	float eqTime = equationOfTime(fyear);
 8006a16:	ed97 0a05 	vldr	s0, [r7, #20]
 8006a1a:	f7ff fdf1 	bl	8006600 <equationOfTime>
 8006a1e:	ed87 0a04 	vstr	s0, [r7, #16]
	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	switch(event){
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	f000 8093 	beq.w	8006b50 <solarEventTime+0x158>
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	f300 80e2 	bgt.w	8006bf4 <solarEventTime+0x1fc>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <solarEventTime+0x42>
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d052      	beq.n	8006ade <solarEventTime+0xe6>
 8006a38:	e0dc      	b.n	8006bf4 <solarEventTime+0x1fc>
		case SOLAR_SUNRISE:
			return 720-4*(location->longitude+cha*180/M_PI)-eqTime+60*location->timezone;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006a40:	edd7 7a00 	vldr	s15, [r7]
 8006a44:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8006c08 <solarEventTime+0x210>
 8006a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a4c:	ee17 0a90 	vmov	r0, s15
 8006a50:	f7f9 fd9a 	bl	8000588 <__aeabi_f2d>
 8006a54:	a36a      	add	r3, pc, #424	; (adr r3, 8006c00 <solarEventTime+0x208>)
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f7f9 ff17 	bl	800088c <__aeabi_ddiv>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4620      	mov	r0, r4
 8006a64:	4629      	mov	r1, r5
 8006a66:	f7f9 fc31 	bl	80002cc <__adddf3>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4610      	mov	r0, r2
 8006a70:	4619      	mov	r1, r3
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	4b65      	ldr	r3, [pc, #404]	; (8006c0c <solarEventTime+0x214>)
 8006a78:	f7f9 fdde 	bl	8000638 <__aeabi_dmul>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	f04f 0000 	mov.w	r0, #0
 8006a84:	4962      	ldr	r1, [pc, #392]	; (8006c10 <solarEventTime+0x218>)
 8006a86:	f7f9 fc1f 	bl	80002c8 <__aeabi_dsub>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4614      	mov	r4, r2
 8006a90:	461d      	mov	r5, r3
 8006a92:	6938      	ldr	r0, [r7, #16]
 8006a94:	f7f9 fd78 	bl	8000588 <__aeabi_f2d>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	f7f9 fc12 	bl	80002c8 <__aeabi_dsub>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	461d      	mov	r5, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f993 3000 	ldrsb.w	r3, [r3]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	1a9b      	subs	r3, r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7f9 fd51 	bl	8000564 <__aeabi_i2d>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	4629      	mov	r1, r5
 8006aca:	f7f9 fbff 	bl	80002cc <__adddf3>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f7fa f85f 	bl	8000b98 <__aeabi_d2iz>
 8006ada:	4603      	mov	r3, r0
 8006adc:	e08a      	b.n	8006bf4 <solarEventTime+0x1fc>
		case SOLAR_NOON:
			return 720-4*location->longitude-eqTime+60*location->timezone;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	4b48      	ldr	r3, [pc, #288]	; (8006c0c <solarEventTime+0x214>)
 8006aea:	f7f9 fda5 	bl	8000638 <__aeabi_dmul>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	4946      	ldr	r1, [pc, #280]	; (8006c10 <solarEventTime+0x218>)
 8006af8:	f7f9 fbe6 	bl	80002c8 <__aeabi_dsub>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4614      	mov	r4, r2
 8006b02:	461d      	mov	r5, r3
 8006b04:	6938      	ldr	r0, [r7, #16]
 8006b06:	f7f9 fd3f 	bl	8000588 <__aeabi_f2d>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4620      	mov	r0, r4
 8006b10:	4629      	mov	r1, r5
 8006b12:	f7f9 fbd9 	bl	80002c8 <__aeabi_dsub>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	461d      	mov	r5, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f993 3000 	ldrsb.w	r3, [r3]
 8006b24:	461a      	mov	r2, r3
 8006b26:	4613      	mov	r3, r2
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7f9 fd18 	bl	8000564 <__aeabi_i2d>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4620      	mov	r0, r4
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	f7f9 fbc6 	bl	80002cc <__adddf3>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4610      	mov	r0, r2
 8006b46:	4619      	mov	r1, r3
 8006b48:	f7fa f826 	bl	8000b98 <__aeabi_d2iz>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	e051      	b.n	8006bf4 <solarEventTime+0x1fc>
		case SOLAR_SUNSET:
			return 720-4*(location->longitude-cha*180/M_PI)-eqTime+60*location->timezone;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006b56:	edd7 7a00 	vldr	s15, [r7]
 8006b5a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006c08 <solarEventTime+0x210>
 8006b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b62:	ee17 0a90 	vmov	r0, s15
 8006b66:	f7f9 fd0f 	bl	8000588 <__aeabi_f2d>
 8006b6a:	a325      	add	r3, pc, #148	; (adr r3, 8006c00 <solarEventTime+0x208>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f7f9 fe8c 	bl	800088c <__aeabi_ddiv>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4620      	mov	r0, r4
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	f7f9 fba4 	bl	80002c8 <__aeabi_dsub>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4610      	mov	r0, r2
 8006b86:	4619      	mov	r1, r3
 8006b88:	f04f 0200 	mov.w	r2, #0
 8006b8c:	4b1f      	ldr	r3, [pc, #124]	; (8006c0c <solarEventTime+0x214>)
 8006b8e:	f7f9 fd53 	bl	8000638 <__aeabi_dmul>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	f04f 0000 	mov.w	r0, #0
 8006b9a:	491d      	ldr	r1, [pc, #116]	; (8006c10 <solarEventTime+0x218>)
 8006b9c:	f7f9 fb94 	bl	80002c8 <__aeabi_dsub>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4614      	mov	r4, r2
 8006ba6:	461d      	mov	r5, r3
 8006ba8:	6938      	ldr	r0, [r7, #16]
 8006baa:	f7f9 fced 	bl	8000588 <__aeabi_f2d>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	f7f9 fb87 	bl	80002c8 <__aeabi_dsub>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4614      	mov	r4, r2
 8006bc0:	461d      	mov	r5, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f993 3000 	ldrsb.w	r3, [r3]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4613      	mov	r3, r2
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7f9 fcc6 	bl	8000564 <__aeabi_i2d>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4620      	mov	r0, r4
 8006bde:	4629      	mov	r1, r5
 8006be0:	f7f9 fb74 	bl	80002cc <__adddf3>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4610      	mov	r0, r2
 8006bea:	4619      	mov	r1, r3
 8006bec:	f7f9 ffd4 	bl	8000b98 <__aeabi_d2iz>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	e7ff      	b.n	8006bf4 <solarEventTime+0x1fc>
	}
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8006bfc:	f3af 8000 	nop.w
 8006c00:	54442d18 	.word	0x54442d18
 8006c04:	400921fb 	.word	0x400921fb
 8006c08:	43340000 	.word	0x43340000
 8006c0c:	40100000 	.word	0x40100000
 8006c10:	40868000 	.word	0x40868000
 8006c14:	00000000 	.word	0x00000000

08006c18 <calcSolarAngles>:

struct solarAngles{
	float za, sa;
};

void calcSolarAngles(struct solarAngles *output, struct tm *timeStr, struct local_location *location){
 8006c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c1c:	b08c      	sub	sp, #48	; 0x30
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
	// fractional year = gamma [rad]
	float fyear = fractionalYear(timeStr, location);
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	68b8      	ldr	r0, [r7, #8]
 8006c2a:	f7ff fcb1 	bl	8006590 <fractionalYear>
 8006c2e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	// equation of time [min]
	float eqtime = equationOfTime(fyear);
 8006c32:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8006c36:	f7ff fce3 	bl	8006600 <equationOfTime>
 8006c3a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	// solar declination angle [rad]
	float decl = solarDeclination(fyear);
 8006c3e:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8006c42:	f7ff fd85 	bl	8006750 <solarDeclination>
 8006c46:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	float time_off = timeOffset(location, fyear);
 8006c4a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff fe5e 	bl	8006910 <timeOffset>
 8006c54:	ed87 0a08 	vstr	s0, [r7, #32]
	float tst = trueSolarTime(timeStr, time_off);
 8006c58:	ed97 0a08 	vldr	s0, [r7, #32]
 8006c5c:	68b8      	ldr	r0, [r7, #8]
 8006c5e:	f7ff fe9b 	bl	8006998 <trueSolarTime>
 8006c62:	ed87 0a07 	vstr	s0, [r7, #28]
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 8006c66:	ed97 7a07 	vldr	s14, [r7, #28]
 8006c6a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006c6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c72:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8006f10 <calcSolarAngles+0x2f8>
 8006c76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c7a:	edc7 7a06 	vstr	s15, [r7, #24]
	// solar zenith angle = phi [rad]
	float cosphi = sin(location->latitude*M_PI/180)*sin(decl)+cos(location->latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006c84:	a3a0      	add	r3, pc, #640	; (adr r3, 8006f08 <calcSolarAngles+0x2f0>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f7f9 fcd5 	bl	8000638 <__aeabi_dmul>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4610      	mov	r0, r2
 8006c94:	4619      	mov	r1, r3
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	4b9e      	ldr	r3, [pc, #632]	; (8006f14 <calcSolarAngles+0x2fc>)
 8006c9c:	f7f9 fdf6 	bl	800088c <__aeabi_ddiv>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	ec43 2b17 	vmov	d7, r2, r3
 8006ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8006cac:	eef0 0a67 	vmov.f32	s1, s15
 8006cb0:	f012 fc72 	bl	8019598 <sin>
 8006cb4:	ec59 8b10 	vmov	r8, r9, d0
 8006cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cba:	f7f9 fc65 	bl	8000588 <__aeabi_f2d>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	ec43 2b10 	vmov	d0, r2, r3
 8006cc6:	f012 fc67 	bl	8019598 <sin>
 8006cca:	ec53 2b10 	vmov	r2, r3, d0
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	f7f9 fcb1 	bl	8000638 <__aeabi_dmul>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4690      	mov	r8, r2
 8006cdc:	4699      	mov	r9, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006ce4:	a388      	add	r3, pc, #544	; (adr r3, 8006f08 <calcSolarAngles+0x2f0>)
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	f7f9 fca5 	bl	8000638 <__aeabi_dmul>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	4b86      	ldr	r3, [pc, #536]	; (8006f14 <calcSolarAngles+0x2fc>)
 8006cfc:	f7f9 fdc6 	bl	800088c <__aeabi_ddiv>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	ec43 2b17 	vmov	d7, r2, r3
 8006d08:	eeb0 0a47 	vmov.f32	s0, s14
 8006d0c:	eef0 0a67 	vmov.f32	s1, s15
 8006d10:	f012 fbee 	bl	80194f0 <cos>
 8006d14:	ec5b ab10 	vmov	sl, fp, d0
 8006d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d1a:	f7f9 fc35 	bl	8000588 <__aeabi_f2d>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	ec43 2b10 	vmov	d0, r2, r3
 8006d26:	f012 fbe3 	bl	80194f0 <cos>
 8006d2a:	ec53 2b10 	vmov	r2, r3, d0
 8006d2e:	4650      	mov	r0, sl
 8006d30:	4659      	mov	r1, fp
 8006d32:	f7f9 fc81 	bl	8000638 <__aeabi_dmul>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4692      	mov	sl, r2
 8006d3c:	469b      	mov	fp, r3
 8006d3e:	69b8      	ldr	r0, [r7, #24]
 8006d40:	f7f9 fc22 	bl	8000588 <__aeabi_f2d>
 8006d44:	a370      	add	r3, pc, #448	; (adr r3, 8006f08 <calcSolarAngles+0x2f0>)
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	f7f9 fc75 	bl	8000638 <__aeabi_dmul>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4610      	mov	r0, r2
 8006d54:	4619      	mov	r1, r3
 8006d56:	f04f 0200 	mov.w	r2, #0
 8006d5a:	4b6e      	ldr	r3, [pc, #440]	; (8006f14 <calcSolarAngles+0x2fc>)
 8006d5c:	f7f9 fd96 	bl	800088c <__aeabi_ddiv>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	ec43 2b17 	vmov	d7, r2, r3
 8006d68:	eeb0 0a47 	vmov.f32	s0, s14
 8006d6c:	eef0 0a67 	vmov.f32	s1, s15
 8006d70:	f012 fbbe 	bl	80194f0 <cos>
 8006d74:	ec53 2b10 	vmov	r2, r3, d0
 8006d78:	4650      	mov	r0, sl
 8006d7a:	4659      	mov	r1, fp
 8006d7c:	f7f9 fc5c 	bl	8000638 <__aeabi_dmul>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4640      	mov	r0, r8
 8006d86:	4649      	mov	r1, r9
 8006d88:	f7f9 faa0 	bl	80002cc <__adddf3>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4610      	mov	r0, r2
 8006d92:	4619      	mov	r1, r3
 8006d94:	f7f9 ff48 	bl	8000c28 <__aeabi_d2f>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	617b      	str	r3, [r7, #20]
	output->za = acos(cosphi);
 8006d9c:	6978      	ldr	r0, [r7, #20]
 8006d9e:	f7f9 fbf3 	bl	8000588 <__aeabi_f2d>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	ec43 2b10 	vmov	d0, r2, r3
 8006daa:	f012 fc81 	bl	80196b0 <acos>
 8006dae:	ec53 2b10 	vmov	r2, r3, d0
 8006db2:	4610      	mov	r0, r2
 8006db4:	4619      	mov	r1, r3
 8006db6:	f7f9 ff37 	bl	8000c28 <__aeabi_d2f>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	601a      	str	r2, [r3, #0]
	float sinphi = sqrt(1-cosphi*cosphi);
 8006dc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8006dc4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006dc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dd0:	ee17 0a90 	vmov	r0, s15
 8006dd4:	f7f9 fbd8 	bl	8000588 <__aeabi_f2d>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	ec43 2b10 	vmov	d0, r2, r3
 8006de0:	f012 fd0a 	bl	80197f8 <sqrt>
 8006de4:	ec53 2b10 	vmov	r2, r3, d0
 8006de8:	4610      	mov	r0, r2
 8006dea:	4619      	mov	r1, r3
 8006dec:	f7f9 ff1c 	bl	8000c28 <__aeabi_d2f>
 8006df0:	4603      	mov	r3, r0
 8006df2:	613b      	str	r3, [r7, #16]
	// solar azimuth = theta [rad]
	output->sa = -acos(-(sin(location->latitude*M_PI/180)*cosphi-sin(decl))/(cos(location->latitude*M_PI/180)*sinphi));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006dfa:	a343      	add	r3, pc, #268	; (adr r3, 8006f08 <calcSolarAngles+0x2f0>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f7f9 fc1a 	bl	8000638 <__aeabi_dmul>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	4b40      	ldr	r3, [pc, #256]	; (8006f14 <calcSolarAngles+0x2fc>)
 8006e12:	f7f9 fd3b 	bl	800088c <__aeabi_ddiv>
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	ec43 2b17 	vmov	d7, r2, r3
 8006e1e:	eeb0 0a47 	vmov.f32	s0, s14
 8006e22:	eef0 0a67 	vmov.f32	s1, s15
 8006e26:	f012 fbb7 	bl	8019598 <sin>
 8006e2a:	ec59 8b10 	vmov	r8, r9, d0
 8006e2e:	6978      	ldr	r0, [r7, #20]
 8006e30:	f7f9 fbaa 	bl	8000588 <__aeabi_f2d>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4640      	mov	r0, r8
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	f7f9 fbfc 	bl	8000638 <__aeabi_dmul>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4690      	mov	r8, r2
 8006e46:	4699      	mov	r9, r3
 8006e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e4a:	f7f9 fb9d 	bl	8000588 <__aeabi_f2d>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	ec43 2b10 	vmov	d0, r2, r3
 8006e56:	f012 fb9f 	bl	8019598 <sin>
 8006e5a:	ec53 2b10 	vmov	r2, r3, d0
 8006e5e:	4640      	mov	r0, r8
 8006e60:	4649      	mov	r1, r9
 8006e62:	f7f9 fa31 	bl	80002c8 <__aeabi_dsub>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4614      	mov	r4, r2
 8006e6c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006e76:	a324      	add	r3, pc, #144	; (adr r3, 8006f08 <calcSolarAngles+0x2f0>)
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	f7f9 fbdc 	bl	8000638 <__aeabi_dmul>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4610      	mov	r0, r2
 8006e86:	4619      	mov	r1, r3
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <calcSolarAngles+0x2fc>)
 8006e8e:	f7f9 fcfd 	bl	800088c <__aeabi_ddiv>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	ec43 2b17 	vmov	d7, r2, r3
 8006e9a:	eeb0 0a47 	vmov.f32	s0, s14
 8006e9e:	eef0 0a67 	vmov.f32	s1, s15
 8006ea2:	f012 fb25 	bl	80194f0 <cos>
 8006ea6:	ec59 8b10 	vmov	r8, r9, d0
 8006eaa:	6938      	ldr	r0, [r7, #16]
 8006eac:	f7f9 fb6c 	bl	8000588 <__aeabi_f2d>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 fbbe 	bl	8000638 <__aeabi_dmul>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	f7f9 fce2 	bl	800088c <__aeabi_ddiv>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	ec43 2b17 	vmov	d7, r2, r3
 8006ed0:	eeb0 0a47 	vmov.f32	s0, s14
 8006ed4:	eef0 0a67 	vmov.f32	s1, s15
 8006ed8:	f012 fbea 	bl	80196b0 <acos>
 8006edc:	ec53 2b10 	vmov	r2, r3, d0
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	f7f9 fea0 	bl	8000c28 <__aeabi_d2f>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef1 7a67 	vneg.f32	s15, s15
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006ef8:	bf00      	nop
 8006efa:	3730      	adds	r7, #48	; 0x30
 8006efc:	46bd      	mov	sp, r7
 8006efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f02:	bf00      	nop
 8006f04:	f3af 8000 	nop.w
 8006f08:	54442d18 	.word	0x54442d18
 8006f0c:	400921fb 	.word	0x400921fb
 8006f10:	43340000 	.word	0x43340000
 8006f14:	40668000 	.word	0x40668000

08006f18 <localMain>:



void localMain(void){
 8006f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1c:	b0c5      	sub	sp, #276	; 0x114
 8006f1e:	af08      	add	r7, sp, #32
	testTime.tm_hour = RtcTime.Hours;
 8006f20:	4b3e      	ldr	r3, [pc, #248]	; (800701c <localMain+0x104>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b3e      	ldr	r3, [pc, #248]	; (8007020 <localMain+0x108>)
 8006f28:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8006f2a:	4b3c      	ldr	r3, [pc, #240]	; (800701c <localMain+0x104>)
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	4b3b      	ldr	r3, [pc, #236]	; (8007020 <localMain+0x108>)
 8006f32:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8006f34:	4b39      	ldr	r3, [pc, #228]	; (800701c <localMain+0x104>)
 8006f36:	789b      	ldrb	r3, [r3, #2]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4b39      	ldr	r3, [pc, #228]	; (8007020 <localMain+0x108>)
 8006f3c:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 8006f3e:	4b39      	ldr	r3, [pc, #228]	; (8007024 <localMain+0x10c>)
 8006f40:	789b      	ldrb	r3, [r3, #2]
 8006f42:	461a      	mov	r2, r3
 8006f44:	4b36      	ldr	r3, [pc, #216]	; (8007020 <localMain+0x108>)
 8006f46:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8006f48:	4b36      	ldr	r3, [pc, #216]	; (8007024 <localMain+0x10c>)
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	4a34      	ldr	r2, [pc, #208]	; (8007020 <localMain+0x108>)
 8006f50:	6113      	str	r3, [r2, #16]
	testTime.tm_year = RtcDate.Year+100;
 8006f52:	4b34      	ldr	r3, [pc, #208]	; (8007024 <localMain+0x10c>)
 8006f54:	78db      	ldrb	r3, [r3, #3]
 8006f56:	3364      	adds	r3, #100	; 0x64
 8006f58:	4a31      	ldr	r2, [pc, #196]	; (8007020 <localMain+0x108>)
 8006f5a:	6153      	str	r3, [r2, #20]
	mktime(&testTime);
 8006f5c:	4830      	ldr	r0, [pc, #192]	; (8007020 <localMain+0x108>)
 8006f5e:	f00c ff77 	bl	8013e50 <mktime>

	double longitude; 	// [deg]
	double latitude;	// [deg]
	if(location.hasFix){
 8006f62:	4b31      	ldr	r3, [pc, #196]	; (8007028 <localMain+0x110>)
 8006f64:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d061      	beq.n	8007030 <localMain+0x118>
		longitude = (double)location.longitudeDeg+location.longitudeMin/60; 	// [deg]
 8006f6c:	4b2e      	ldr	r3, [pc, #184]	; (8007028 <localMain+0x110>)
 8006f6e:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7f9 fae6 	bl	8000544 <__aeabi_ui2d>
 8006f78:	4604      	mov	r4, r0
 8006f7a:	460d      	mov	r5, r1
 8006f7c:	4b2a      	ldr	r3, [pc, #168]	; (8007028 <localMain+0x110>)
 8006f7e:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	4b29      	ldr	r3, [pc, #164]	; (800702c <localMain+0x114>)
 8006f88:	f7f9 fc80 	bl	800088c <__aeabi_ddiv>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4620      	mov	r0, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7f9 f99a 	bl	80002cc <__adddf3>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		latitude = (double)location.latitudeDeg+location.latitudeMin/60;	// [deg]
 8006fa0:	4b21      	ldr	r3, [pc, #132]	; (8007028 <localMain+0x110>)
 8006fa2:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7f9 facc 	bl	8000544 <__aeabi_ui2d>
 8006fac:	4604      	mov	r4, r0
 8006fae:	460d      	mov	r5, r1
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <localMain+0x110>)
 8006fb2:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	4b1c      	ldr	r3, [pc, #112]	; (800702c <localMain+0x114>)
 8006fbc:	f7f9 fc66 	bl	800088c <__aeabi_ddiv>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	f7f9 f980 	bl	80002cc <__adddf3>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		if(location.n_s == 'S') longitude = longitude*(-1);
 8006fd4:	4b14      	ldr	r3, [pc, #80]	; (8007028 <localMain+0x110>)
 8006fd6:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8006fda:	2b53      	cmp	r3, #83	; 0x53
 8006fdc:	d10b      	bne.n	8006ff6 <localMain+0xde>
 8006fde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fe2:	60bb      	str	r3, [r7, #8]
 8006fe4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fe8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	ed97 7b02 	vldr	d7, [r7, #8]
 8006ff2:	ed87 7b3a 	vstr	d7, [r7, #232]	; 0xe8
		if(location.w_e == 'W') latitude = latitude*(-1);
 8006ff6:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <localMain+0x110>)
 8006ff8:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 8006ffc:	2b57      	cmp	r3, #87	; 0x57
 8006ffe:	d13f      	bne.n	8007080 <localMain+0x168>
 8007000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800700e:	607b      	str	r3, [r7, #4]
 8007010:	ed97 7b00 	vldr	d7, [r7]
 8007014:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
 8007018:	e032      	b.n	8007080 <localMain+0x168>
 800701a:	bf00      	nop
 800701c:	200057f0 	.word	0x200057f0
 8007020:	20005db8 	.word	0x20005db8
 8007024:	20005804 	.word	0x20005804
 8007028:	20005678 	.word	0x20005678
 800702c:	404e0000 	.word	0x404e0000
	} else {
		longitude = 17; 	// [deg]
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	4be0      	ldr	r3, [pc, #896]	; (80073b8 <localMain+0x4a0>)
 8007036:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		latitude = 51;	// [deg]
 800703a:	f04f 0200 	mov.w	r2, #0
 800703e:	4bdf      	ldr	r3, [pc, #892]	; (80073bc <localMain+0x4a4>)
 8007040:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		if(longitude>=0) location.n_s = 'N';
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8007050:	f7f9 fd78 	bl	8000b44 <__aeabi_dcmpge>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <localMain+0x14a>
 800705a:	4bd9      	ldr	r3, [pc, #868]	; (80073c0 <localMain+0x4a8>)
 800705c:	224e      	movs	r2, #78	; 0x4e
 800705e:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		if(latitude>=0) location.w_e = 'E';
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800706e:	f7f9 fd69 	bl	8000b44 <__aeabi_dcmpge>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <localMain+0x168>
 8007078:	4bd1      	ldr	r3, [pc, #836]	; (80073c0 <localMain+0x4a8>)
 800707a:	2245      	movs	r2, #69	; 0x45
 800707c:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	}
	struct local_location myLocation = {GLOBAL_timezone, longitude, latitude};
 8007080:	4bd0      	ldr	r3, [pc, #832]	; (80073c4 <localMain+0x4ac>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	b25b      	sxtb	r3, r3
 8007086:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800708a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800708e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8007092:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007096:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	// fractional year = gamma [rad]
	float fyear = fractionalYear(&testTime, &myLocation);
 800709a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800709e:	4619      	mov	r1, r3
 80070a0:	48c9      	ldr	r0, [pc, #804]	; (80073c8 <localMain+0x4b0>)
 80070a2:	f7ff fa75 	bl	8006590 <fractionalYear>
 80070a6:	ed87 0a35 	vstr	s0, [r7, #212]	; 0xd4
	// equation of time [min]
	float eqtime = equationOfTime(fyear);
 80070aa:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 80070ae:	f7ff faa7 	bl	8006600 <equationOfTime>
 80070b2:	ed87 0a34 	vstr	s0, [r7, #208]	; 0xd0
	// solar declination angle [rad]
	float decl = solarDeclination(fyear);
 80070b6:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 80070ba:	f7ff fb49 	bl	8006750 <solarDeclination>
 80070be:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc

	float time_off = timeOffset(&myLocation, fyear);
 80070c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070c6:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff fc20 	bl	8006910 <timeOffset>
 80070d0:	ed87 0a32 	vstr	s0, [r7, #200]	; 0xc8
	float tst = trueSolarTime(&testTime, time_off);
 80070d4:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 80070d8:	48bb      	ldr	r0, [pc, #748]	; (80073c8 <localMain+0x4b0>)
 80070da:	f7ff fc5d 	bl	8006998 <trueSolarTime>
 80070de:	ed87 0a31 	vstr	s0, [r7, #196]	; 0xc4
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 80070e2:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80070e6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80070ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070ee:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80073cc <localMain+0x4b4>
 80070f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80070f6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 80070fa:	a3ab      	add	r3, pc, #684	; (adr r3, 80073a8 <localMain+0x490>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007104:	f7f9 fa98 	bl	8000638 <__aeabi_dmul>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4610      	mov	r0, r2
 800710e:	4619      	mov	r1, r3
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	4bae      	ldr	r3, [pc, #696]	; (80073d0 <localMain+0x4b8>)
 8007116:	f7f9 fbb9 	bl	800088c <__aeabi_ddiv>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	ec43 2b17 	vmov	d7, r2, r3
 8007122:	eeb0 0a47 	vmov.f32	s0, s14
 8007126:	eef0 0a67 	vmov.f32	s1, s15
 800712a:	f012 fa35 	bl	8019598 <sin>
 800712e:	ec55 4b10 	vmov	r4, r5, d0
 8007132:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007136:	f7f9 fa27 	bl	8000588 <__aeabi_f2d>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	ec43 2b10 	vmov	d0, r2, r3
 8007142:	f012 fa29 	bl	8019598 <sin>
 8007146:	ec53 2b10 	vmov	r2, r3, d0
 800714a:	4620      	mov	r0, r4
 800714c:	4629      	mov	r1, r5
 800714e:	f7f9 fa73 	bl	8000638 <__aeabi_dmul>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4614      	mov	r4, r2
 8007158:	461d      	mov	r5, r3
 800715a:	a393      	add	r3, pc, #588	; (adr r3, 80073a8 <localMain+0x490>)
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007164:	f7f9 fa68 	bl	8000638 <__aeabi_dmul>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4610      	mov	r0, r2
 800716e:	4619      	mov	r1, r3
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	4b96      	ldr	r3, [pc, #600]	; (80073d0 <localMain+0x4b8>)
 8007176:	f7f9 fb89 	bl	800088c <__aeabi_ddiv>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	ec43 2b17 	vmov	d7, r2, r3
 8007182:	eeb0 0a47 	vmov.f32	s0, s14
 8007186:	eef0 0a67 	vmov.f32	s1, s15
 800718a:	f012 f9b1 	bl	80194f0 <cos>
 800718e:	ec5b ab10 	vmov	sl, fp, d0
 8007192:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007196:	f7f9 f9f7 	bl	8000588 <__aeabi_f2d>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	ec43 2b10 	vmov	d0, r2, r3
 80071a2:	f012 f9a5 	bl	80194f0 <cos>
 80071a6:	ec53 2b10 	vmov	r2, r3, d0
 80071aa:	4650      	mov	r0, sl
 80071ac:	4659      	mov	r1, fp
 80071ae:	f7f9 fa43 	bl	8000638 <__aeabi_dmul>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4692      	mov	sl, r2
 80071b8:	469b      	mov	fp, r3
 80071ba:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80071be:	f7f9 f9e3 	bl	8000588 <__aeabi_f2d>
 80071c2:	a379      	add	r3, pc, #484	; (adr r3, 80073a8 <localMain+0x490>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 fa36 	bl	8000638 <__aeabi_dmul>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4610      	mov	r0, r2
 80071d2:	4619      	mov	r1, r3
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	4b7d      	ldr	r3, [pc, #500]	; (80073d0 <localMain+0x4b8>)
 80071da:	f7f9 fb57 	bl	800088c <__aeabi_ddiv>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	ec43 2b17 	vmov	d7, r2, r3
 80071e6:	eeb0 0a47 	vmov.f32	s0, s14
 80071ea:	eef0 0a67 	vmov.f32	s1, s15
 80071ee:	f012 f97f 	bl	80194f0 <cos>
 80071f2:	ec53 2b10 	vmov	r2, r3, d0
 80071f6:	4650      	mov	r0, sl
 80071f8:	4659      	mov	r1, fp
 80071fa:	f7f9 fa1d 	bl	8000638 <__aeabi_dmul>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	4620      	mov	r0, r4
 8007204:	4629      	mov	r1, r5
 8007206:	f7f9 f861 	bl	80002cc <__adddf3>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4610      	mov	r0, r2
 8007210:	4619      	mov	r1, r3
 8007212:	f7f9 fd09 	bl	8000c28 <__aeabi_d2f>
 8007216:	4603      	mov	r3, r0
 8007218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float phi = acos(cosphi);
 800721c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8007220:	f7f9 f9b2 	bl	8000588 <__aeabi_f2d>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	ec43 2b10 	vmov	d0, r2, r3
 800722c:	f012 fa40 	bl	80196b0 <acos>
 8007230:	ec53 2b10 	vmov	r2, r3, d0
 8007234:	4610      	mov	r0, r2
 8007236:	4619      	mov	r1, r3
 8007238:	f7f9 fcf6 	bl	8000c28 <__aeabi_d2f>
 800723c:	4603      	mov	r3, r0
 800723e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float sinphi = sqrt(1-cosphi*cosphi);
 8007242:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8007246:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800724a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800724e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007252:	ee17 0a90 	vmov	r0, s15
 8007256:	f7f9 f997 	bl	8000588 <__aeabi_f2d>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	ec43 2b10 	vmov	d0, r2, r3
 8007262:	f012 fac9 	bl	80197f8 <sqrt>
 8007266:	ec53 2b10 	vmov	r2, r3, d0
 800726a:	4610      	mov	r0, r2
 800726c:	4619      	mov	r1, r3
 800726e:	f7f9 fcdb 	bl	8000c28 <__aeabi_d2f>
 8007272:	4603      	mov	r3, r0
 8007274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 8007278:	a34b      	add	r3, pc, #300	; (adr r3, 80073a8 <localMain+0x490>)
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007282:	f7f9 f9d9 	bl	8000638 <__aeabi_dmul>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4610      	mov	r0, r2
 800728c:	4619      	mov	r1, r3
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	4b4f      	ldr	r3, [pc, #316]	; (80073d0 <localMain+0x4b8>)
 8007294:	f7f9 fafa 	bl	800088c <__aeabi_ddiv>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	ec43 2b17 	vmov	d7, r2, r3
 80072a0:	eeb0 0a47 	vmov.f32	s0, s14
 80072a4:	eef0 0a67 	vmov.f32	s1, s15
 80072a8:	f012 f976 	bl	8019598 <sin>
 80072ac:	ec55 4b10 	vmov	r4, r5, d0
 80072b0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80072b4:	f7f9 f968 	bl	8000588 <__aeabi_f2d>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4620      	mov	r0, r4
 80072be:	4629      	mov	r1, r5
 80072c0:	f7f9 f9ba 	bl	8000638 <__aeabi_dmul>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4614      	mov	r4, r2
 80072ca:	461d      	mov	r5, r3
 80072cc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80072d0:	f7f9 f95a 	bl	8000588 <__aeabi_f2d>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	ec43 2b10 	vmov	d0, r2, r3
 80072dc:	f012 f95c 	bl	8019598 <sin>
 80072e0:	ec53 2b10 	vmov	r2, r3, d0
 80072e4:	4620      	mov	r0, r4
 80072e6:	4629      	mov	r1, r5
 80072e8:	f7f8 ffee 	bl	80002c8 <__aeabi_dsub>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4690      	mov	r8, r2
 80072f2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80072f6:	a32c      	add	r3, pc, #176	; (adr r3, 80073a8 <localMain+0x490>)
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007300:	f7f9 f99a 	bl	8000638 <__aeabi_dmul>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4610      	mov	r0, r2
 800730a:	4619      	mov	r1, r3
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	4b2f      	ldr	r3, [pc, #188]	; (80073d0 <localMain+0x4b8>)
 8007312:	f7f9 fabb 	bl	800088c <__aeabi_ddiv>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	ec43 2b17 	vmov	d7, r2, r3
 800731e:	eeb0 0a47 	vmov.f32	s0, s14
 8007322:	eef0 0a67 	vmov.f32	s1, s15
 8007326:	f012 f8e3 	bl	80194f0 <cos>
 800732a:	ec55 4b10 	vmov	r4, r5, d0
 800732e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8007332:	f7f9 f929 	bl	8000588 <__aeabi_f2d>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4620      	mov	r0, r4
 800733c:	4629      	mov	r1, r5
 800733e:	f7f9 f97b 	bl	8000638 <__aeabi_dmul>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4640      	mov	r0, r8
 8007348:	4649      	mov	r1, r9
 800734a:	f7f9 fa9f 	bl	800088c <__aeabi_ddiv>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	ec43 2b17 	vmov	d7, r2, r3
 8007356:	eeb0 0a47 	vmov.f32	s0, s14
 800735a:	eef0 0a67 	vmov.f32	s1, s15
 800735e:	f012 f9a7 	bl	80196b0 <acos>
 8007362:	ec53 2b10 	vmov	r2, r3, d0
 8007366:	4610      	mov	r0, r2
 8007368:	4619      	mov	r1, r3
 800736a:	f7f9 fc5d 	bl	8000c28 <__aeabi_d2f>
 800736e:	4603      	mov	r3, r0
 8007370:	ee07 3a90 	vmov	s15, r3
 8007374:	eef1 7a67 	vneg.f32	s15, s15
 8007378:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
//	calcSolarAngles(&angles, &testTime, &location);
//	float phi = angles.za;
//	float sa = angles.sa;

	// setting for sunrise/sunset zenith angle [rad]
	double zenith = (90+GEOMETRICAL_TWILIGHT_DEG)*M_PI/180;
 800737c:	a30c      	add	r3, pc, #48	; (adr r3, 80073b0 <localMain+0x498>)
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8007386:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 800738a:	f012 f8b1 	bl	80194f0 <cos>
 800738e:	ec55 4b10 	vmov	r4, r5, d0
 8007392:	a305      	add	r3, pc, #20	; (adr r3, 80073a8 <localMain+0x490>)
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800739c:	f7f9 f94c 	bl	8000638 <__aeabi_dmul>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4610      	mov	r0, r2
 80073a6:	e015      	b.n	80073d4 <localMain+0x4bc>
 80073a8:	54442d18 	.word	0x54442d18
 80073ac:	400921fb 	.word	0x400921fb
 80073b0:	2604e01b 	.word	0x2604e01b
 80073b4:	3ff95d88 	.word	0x3ff95d88
 80073b8:	40310000 	.word	0x40310000
 80073bc:	40498000 	.word	0x40498000
 80073c0:	20005678 	.word	0x20005678
 80073c4:	200001a0 	.word	0x200001a0
 80073c8:	20005db8 	.word	0x20005db8
 80073cc:	43340000 	.word	0x43340000
 80073d0:	40668000 	.word	0x40668000
 80073d4:	4619      	mov	r1, r3
 80073d6:	f04f 0200 	mov.w	r2, #0
 80073da:	4b79      	ldr	r3, [pc, #484]	; (80075c0 <localMain+0x6a8>)
 80073dc:	f7f9 fa56 	bl	800088c <__aeabi_ddiv>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	ec43 2b17 	vmov	d7, r2, r3
 80073e8:	eeb0 0a47 	vmov.f32	s0, s14
 80073ec:	eef0 0a67 	vmov.f32	s1, s15
 80073f0:	f012 f87e 	bl	80194f0 <cos>
 80073f4:	ec59 8b10 	vmov	r8, r9, d0
 80073f8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80073fc:	f7f9 f8c4 	bl	8000588 <__aeabi_f2d>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	ec43 2b10 	vmov	d0, r2, r3
 8007408:	f012 f872 	bl	80194f0 <cos>
 800740c:	ec53 2b10 	vmov	r2, r3, d0
 8007410:	4640      	mov	r0, r8
 8007412:	4649      	mov	r1, r9
 8007414:	f7f9 f910 	bl	8000638 <__aeabi_dmul>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4620      	mov	r0, r4
 800741e:	4629      	mov	r1, r5
 8007420:	f7f9 fa34 	bl	800088c <__aeabi_ddiv>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4614      	mov	r4, r2
 800742a:	461d      	mov	r5, r3
 800742c:	a362      	add	r3, pc, #392	; (adr r3, 80075b8 <localMain+0x6a0>)
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007436:	f7f9 f8ff 	bl	8000638 <__aeabi_dmul>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4610      	mov	r0, r2
 8007440:	4619      	mov	r1, r3
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	4b5e      	ldr	r3, [pc, #376]	; (80075c0 <localMain+0x6a8>)
 8007448:	f7f9 fa20 	bl	800088c <__aeabi_ddiv>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	ec43 2b17 	vmov	d7, r2, r3
 8007454:	eeb0 0a47 	vmov.f32	s0, s14
 8007458:	eef0 0a67 	vmov.f32	s1, s15
 800745c:	f012 f8f4 	bl	8019648 <tan>
 8007460:	ec59 8b10 	vmov	r8, r9, d0
 8007464:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007468:	f7f9 f88e 	bl	8000588 <__aeabi_f2d>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	ec43 2b10 	vmov	d0, r2, r3
 8007474:	f012 f8e8 	bl	8019648 <tan>
 8007478:	ec53 2b10 	vmov	r2, r3, d0
 800747c:	4640      	mov	r0, r8
 800747e:	4649      	mov	r1, r9
 8007480:	f7f9 f8da 	bl	8000638 <__aeabi_dmul>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4620      	mov	r0, r4
 800748a:	4629      	mov	r1, r5
 800748c:	f7f8 ff1c 	bl	80002c8 <__aeabi_dsub>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	ec43 2b17 	vmov	d7, r2, r3
 8007498:	eeb0 0a47 	vmov.f32	s0, s14
 800749c:	eef0 0a67 	vmov.f32	s1, s15
 80074a0:	f012 f906 	bl	80196b0 <acos>
 80074a4:	ec53 2b10 	vmov	r2, r3, d0
 80074a8:	4610      	mov	r0, r2
 80074aa:	4619      	mov	r1, r3
 80074ac:	f7f9 fbbc 	bl	8000c28 <__aeabi_d2f>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//sunrise/sunset/noon times [min]
	int sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 80074b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80074ba:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 80074be:	461a      	mov	r2, r3
 80074c0:	4940      	ldr	r1, [pc, #256]	; (80075c4 <localMain+0x6ac>)
 80074c2:	2000      	movs	r0, #0
 80074c4:	f7ff fa98 	bl	80069f8 <solarEventTime>
 80074c8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	int sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 80074cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80074d0:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 80074d4:	461a      	mov	r2, r3
 80074d6:	493b      	ldr	r1, [pc, #236]	; (80075c4 <localMain+0x6ac>)
 80074d8:	2002      	movs	r0, #2
 80074da:	f7ff fa8d 	bl	80069f8 <solarEventTime>
 80074de:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	int noon = solarEventTime(SOLAR_NOON, &testTime, &myLocation, cha);
 80074e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80074e6:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 80074ea:	461a      	mov	r2, r3
 80074ec:	4935      	ldr	r1, [pc, #212]	; (80075c4 <localMain+0x6ac>)
 80074ee:	2001      	movs	r0, #1
 80074f0:	f7ff fa82 	bl	80069f8 <solarEventTime>
 80074f4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	struct sunEventsTimes suntimes = {sunrise, sunset, noon};
 80074f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074fc:	647b      	str	r3, [r7, #68]	; 0x44
 80074fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007502:	64bb      	str	r3, [r7, #72]	; 0x48
 8007504:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007508:	64fb      	str	r3, [r7, #76]	; 0x4c


	double saDeg;
	if(sha>180) saDeg = -sa*180/M_PI;
 800750a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800750e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80075c8 <localMain+0x6b0>
 8007512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751a:	dd15      	ble.n	8007548 <localMain+0x630>
 800751c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007520:	eef1 7a67 	vneg.f32	s15, s15
 8007524:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80075c8 <localMain+0x6b0>
 8007528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800752c:	ee17 0a90 	vmov	r0, s15
 8007530:	f7f9 f82a 	bl	8000588 <__aeabi_f2d>
 8007534:	a320      	add	r3, pc, #128	; (adr r3, 80075b8 <localMain+0x6a0>)
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f7f9 f9a7 	bl	800088c <__aeabi_ddiv>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8007546:	e01b      	b.n	8007580 <localMain+0x668>
	else saDeg = 360+sa*180/M_PI;
 8007548:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800754c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80075c8 <localMain+0x6b0>
 8007550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007554:	ee17 0a90 	vmov	r0, s15
 8007558:	f7f9 f816 	bl	8000588 <__aeabi_f2d>
 800755c:	a316      	add	r3, pc, #88	; (adr r3, 80075b8 <localMain+0x6a0>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	f7f9 f993 	bl	800088c <__aeabi_ddiv>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4610      	mov	r0, r2
 800756c:	4619      	mov	r1, r3
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	4b16      	ldr	r3, [pc, #88]	; (80075cc <localMain+0x6b4>)
 8007574:	f7f8 feaa 	bl	80002cc <__adddf3>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8

	char textBuffer[50] = {0};
 8007580:	2300      	movs	r3, #0
 8007582:	613b      	str	r3, [r7, #16]
 8007584:	f107 0314 	add.w	r3, r7, #20
 8007588:	222e      	movs	r2, #46	; 0x2e
 800758a:	2100      	movs	r1, #0
 800758c:	4618      	mov	r0, r3
 800758e:	f00c fb7f 	bl	8013c90 <memset>

	switch(localModuleNum){
 8007592:	4b0f      	ldr	r3, [pc, #60]	; (80075d0 <localMain+0x6b8>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b04      	cmp	r3, #4
 8007598:	f200 86ab 	bhi.w	80082f2 <localMain+0x13da>
 800759c:	a201      	add	r2, pc, #4	; (adr r2, 80075a4 <localMain+0x68c>)
 800759e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a2:	bf00      	nop
 80075a4:	080075d5 	.word	0x080075d5
 80075a8:	080077bd 	.word	0x080077bd
 80075ac:	08008045 	.word	0x08008045
 80075b0:	080081bd 	.word	0x080081bd
 80075b4:	08008211 	.word	0x08008211
 80075b8:	54442d18 	.word	0x54442d18
 80075bc:	400921fb 	.word	0x400921fb
 80075c0:	40668000 	.word	0x40668000
 80075c4:	20005db8 	.word	0x20005db8
 80075c8:	43340000 	.word	0x43340000
 80075cc:	40768000 	.word	0x40768000
 80075d0:	20005ddc 	.word	0x20005ddc
	case 0:{
		uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 80075d4:	4b6e      	ldr	r3, [pc, #440]	; (8007790 <localMain+0x878>)
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	1d9a      	adds	r2, r3, #6
 80075da:	4b6e      	ldr	r3, [pc, #440]	; (8007794 <localMain+0x87c>)
 80075dc:	fb83 1302 	smull	r1, r3, r3, r2
 80075e0:	4413      	add	r3, r2
 80075e2:	1099      	asrs	r1, r3, #2
 80075e4:	17d3      	asrs	r3, r2, #31
 80075e6:	1ac9      	subs	r1, r1, r3
 80075e8:	460b      	mov	r3, r1
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	1a5b      	subs	r3, r3, r1
 80075ee:	1ad1      	subs	r1, r2, r3
 80075f0:	b2cb      	uxtb	r3, r1
 80075f2:	3301      	adds	r3, #1
 80075f4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 80075f8:	4b65      	ldr	r3, [pc, #404]	; (8007790 <localMain+0x878>)
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	f103 0208 	add.w	r2, r3, #8
 8007600:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	4a63      	ldr	r2, [pc, #396]	; (8007794 <localMain+0x87c>)
 8007608:	fb82 1203 	smull	r1, r2, r2, r3
 800760c:	441a      	add	r2, r3
 800760e:	1092      	asrs	r2, r2, #2
 8007610:	17db      	asrs	r3, r3, #31
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		sprintf(&textBuffer, "%s week %d day %d", asctime(&testTime), weekOfTheYear, testTime.tm_yday+1);
 8007618:	485d      	ldr	r0, [pc, #372]	; (8007790 <localMain+0x878>)
 800761a:	f00c fa71 	bl	8013b00 <asctime>
 800761e:	4601      	mov	r1, r0
 8007620:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8007624:	4b5a      	ldr	r3, [pc, #360]	; (8007790 <localMain+0x878>)
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	3301      	adds	r3, #1
 800762a:	f107 0010 	add.w	r0, r7, #16
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	4613      	mov	r3, r2
 8007632:	460a      	mov	r2, r1
 8007634:	4958      	ldr	r1, [pc, #352]	; (8007798 <localMain+0x880>)
 8007636:	f00d fc59 	bl	8014eec <siprintf>
		lcdPutStr(10, 10, textBuffer, font_12_zekton);
 800763a:	f107 0210 	add.w	r2, r7, #16
 800763e:	4b57      	ldr	r3, [pc, #348]	; (800779c <localMain+0x884>)
 8007640:	210a      	movs	r1, #10
 8007642:	200a      	movs	r0, #10
 8007644:	f7fb fcbe 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%02.3f`", 90-phi*180/M_PI);
 8007648:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800764c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80077a0 <localMain+0x888>
 8007650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007654:	ee17 0a90 	vmov	r0, s15
 8007658:	f7f8 ff96 	bl	8000588 <__aeabi_f2d>
 800765c:	a34a      	add	r3, pc, #296	; (adr r3, 8007788 <localMain+0x870>)
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	f7f9 f913 	bl	800088c <__aeabi_ddiv>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	f04f 0000 	mov.w	r0, #0
 800766e:	494d      	ldr	r1, [pc, #308]	; (80077a4 <localMain+0x88c>)
 8007670:	f7f8 fe2a 	bl	80002c8 <__aeabi_dsub>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	f107 0010 	add.w	r0, r7, #16
 800767c:	494a      	ldr	r1, [pc, #296]	; (80077a8 <localMain+0x890>)
 800767e:	f00d fc35 	bl	8014eec <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 66, textBuffer, zekton45font);
 8007682:	2322      	movs	r3, #34	; 0x22
 8007684:	b29c      	uxth	r4, r3
 8007686:	f107 0310 	add.w	r3, r7, #16
 800768a:	4618      	mov	r0, r3
 800768c:	f7f8 fdba 	bl	8000204 <strlen>
 8007690:	4603      	mov	r3, r0
 8007692:	3301      	adds	r3, #1
 8007694:	b29b      	uxth	r3, r3
 8007696:	fb14 f303 	smulbb	r3, r4, r3
 800769a:	b29b      	uxth	r3, r3
 800769c:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 80076a0:	b298      	uxth	r0, r3
 80076a2:	f107 0210 	add.w	r2, r7, #16
 80076a6:	4b41      	ldr	r3, [pc, #260]	; (80077ac <localMain+0x894>)
 80076a8:	2142      	movs	r1, #66	; 0x42
 80076aa:	f7fb fc8b 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%02.3f`", saDeg);
 80076ae:	f107 0010 	add.w	r0, r7, #16
 80076b2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80076b6:	493c      	ldr	r1, [pc, #240]	; (80077a8 <localMain+0x890>)
 80076b8:	f00d fc18 	bl	8014eec <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 115, textBuffer, zekton45font);
 80076bc:	2322      	movs	r3, #34	; 0x22
 80076be:	b29c      	uxth	r4, r3
 80076c0:	f107 0310 	add.w	r3, r7, #16
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7f8 fd9d 	bl	8000204 <strlen>
 80076ca:	4603      	mov	r3, r0
 80076cc:	3301      	adds	r3, #1
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	fb14 f303 	smulbb	r3, r4, r3
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 80076da:	b298      	uxth	r0, r3
 80076dc:	f107 0210 	add.w	r2, r7, #16
 80076e0:	4b32      	ldr	r3, [pc, #200]	; (80077ac <localMain+0x894>)
 80076e2:	2173      	movs	r1, #115	; 0x73
 80076e4:	f7fb fc6e 	bl	8002fc4 <lcdPutStr>

		sprintf(&textBuffer, "%c%.3f %c%.3f, day length:%02dh %02dmin", location.n_s, latitude, location.w_e, longitude, (sunset-sunrise)/60, (sunset-sunrise)%60);
 80076e8:	4b31      	ldr	r3, [pc, #196]	; (80077b0 <localMain+0x898>)
 80076ea:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 80076ee:	461e      	mov	r6, r3
 80076f0:	4b2f      	ldr	r3, [pc, #188]	; (80077b0 <localMain+0x898>)
 80076f2:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 80076f6:	461d      	mov	r5, r3
 80076f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80076fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	4a2c      	ldr	r2, [pc, #176]	; (80077b4 <localMain+0x89c>)
 8007704:	fb82 1203 	smull	r1, r2, r2, r3
 8007708:	441a      	add	r2, r3
 800770a:	1152      	asrs	r2, r2, #5
 800770c:	17db      	asrs	r3, r3, #31
 800770e:	1ad0      	subs	r0, r2, r3
 8007710:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007714:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007718:	1ad2      	subs	r2, r2, r3
 800771a:	4b26      	ldr	r3, [pc, #152]	; (80077b4 <localMain+0x89c>)
 800771c:	fb83 1302 	smull	r1, r3, r3, r2
 8007720:	4413      	add	r3, r2
 8007722:	1159      	asrs	r1, r3, #5
 8007724:	17d3      	asrs	r3, r2, #31
 8007726:	1ac9      	subs	r1, r1, r3
 8007728:	460b      	mov	r3, r1
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	1a5b      	subs	r3, r3, r1
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	1ad1      	subs	r1, r2, r3
 8007732:	f107 0410 	add.w	r4, r7, #16
 8007736:	9107      	str	r1, [sp, #28]
 8007738:	9006      	str	r0, [sp, #24]
 800773a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800773e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007742:	9502      	str	r5, [sp, #8]
 8007744:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007748:	e9cd 2300 	strd	r2, r3, [sp]
 800774c:	4632      	mov	r2, r6
 800774e:	491a      	ldr	r1, [pc, #104]	; (80077b8 <localMain+0x8a0>)
 8007750:	4620      	mov	r0, r4
 8007752:	f00d fbcb 	bl	8014eec <siprintf>
		lcdPutStr(10, 25, textBuffer, font_12_zekton);
 8007756:	f107 0210 	add.w	r2, r7, #16
 800775a:	4b10      	ldr	r3, [pc, #64]	; (800779c <localMain+0x884>)
 800775c:	2119      	movs	r1, #25
 800775e:	200a      	movs	r0, #10
 8007760:	f7fb fc30 	bl	8002fc4 <lcdPutStr>

		drawSunlightGraph(200, 10, 399-10, 50, &suntimes, &myLocation);
 8007764:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	2332      	movs	r3, #50	; 0x32
 8007772:	f240 1285 	movw	r2, #389	; 0x185
 8007776:	210a      	movs	r1, #10
 8007778:	20c8      	movs	r0, #200	; 0xc8
 800777a:	f000 fdc9 	bl	8008310 <drawSunlightGraph>
		break;
 800777e:	f000 bdb8 	b.w	80082f2 <localMain+0x13da>
 8007782:	bf00      	nop
 8007784:	f3af 8000 	nop.w
 8007788:	54442d18 	.word	0x54442d18
 800778c:	400921fb 	.word	0x400921fb
 8007790:	20005db8 	.word	0x20005db8
 8007794:	92492493 	.word	0x92492493
 8007798:	0801c768 	.word	0x0801c768
 800779c:	08031980 	.word	0x08031980
 80077a0:	43340000 	.word	0x43340000
 80077a4:	40568000 	.word	0x40568000
 80077a8:	0801c77c 	.word	0x0801c77c
 80077ac:	08034cf8 	.word	0x08034cf8
 80077b0:	20005678 	.word	0x20005678
 80077b4:	88888889 	.word	0x88888889
 80077b8:	0801c784 	.word	0x0801c784
		}
	case 1:
		sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 80077bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077c0:	4ae1      	ldr	r2, [pc, #900]	; (8007b48 <localMain+0xc30>)
 80077c2:	fb82 1203 	smull	r1, r2, r2, r3
 80077c6:	441a      	add	r2, r3
 80077c8:	1152      	asrs	r2, r2, #5
 80077ca:	17db      	asrs	r3, r3, #31
 80077cc:	1ad4      	subs	r4, r2, r3
 80077ce:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80077d2:	4bdd      	ldr	r3, [pc, #884]	; (8007b48 <localMain+0xc30>)
 80077d4:	fb83 1302 	smull	r1, r3, r3, r2
 80077d8:	4413      	add	r3, r2
 80077da:	1159      	asrs	r1, r3, #5
 80077dc:	17d3      	asrs	r3, r2, #31
 80077de:	1ac9      	subs	r1, r1, r3
 80077e0:	460b      	mov	r3, r1
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	1a5b      	subs	r3, r3, r1
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	1ad1      	subs	r1, r2, r3
 80077ea:	f107 0010 	add.w	r0, r7, #16
 80077ee:	460b      	mov	r3, r1
 80077f0:	4622      	mov	r2, r4
 80077f2:	49d6      	ldr	r1, [pc, #856]	; (8007b4c <localMain+0xc34>)
 80077f4:	f00d fb7a 	bl	8014eec <siprintf>
		lcdPutStr(10, 10, textBuffer, zekton24font);
 80077f8:	f107 0210 	add.w	r2, r7, #16
 80077fc:	4bd4      	ldr	r3, [pc, #848]	; (8007b50 <localMain+0xc38>)
 80077fe:	210a      	movs	r1, #10
 8007800:	200a      	movs	r0, #10
 8007802:	f7fb fbdf 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "SUNRISE");
 8007806:	f107 0310 	add.w	r3, r7, #16
 800780a:	49d2      	ldr	r1, [pc, #840]	; (8007b54 <localMain+0xc3c>)
 800780c:	4618      	mov	r0, r3
 800780e:	f00d fb6d 	bl	8014eec <siprintf>
		lcdPutStr(10, 35, textBuffer, font_12_zekton);
 8007812:	f107 0210 	add.w	r2, r7, #16
 8007816:	4bd0      	ldr	r3, [pc, #832]	; (8007b58 <localMain+0xc40>)
 8007818:	2123      	movs	r1, #35	; 0x23
 800781a:	200a      	movs	r0, #10
 800781c:	f7fb fbd2 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 8007820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007824:	4ac8      	ldr	r2, [pc, #800]	; (8007b48 <localMain+0xc30>)
 8007826:	fb82 1203 	smull	r1, r2, r2, r3
 800782a:	441a      	add	r2, r3
 800782c:	1152      	asrs	r2, r2, #5
 800782e:	17db      	asrs	r3, r3, #31
 8007830:	1ad4      	subs	r4, r2, r3
 8007832:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007836:	4bc4      	ldr	r3, [pc, #784]	; (8007b48 <localMain+0xc30>)
 8007838:	fb83 1302 	smull	r1, r3, r3, r2
 800783c:	4413      	add	r3, r2
 800783e:	1159      	asrs	r1, r3, #5
 8007840:	17d3      	asrs	r3, r2, #31
 8007842:	1ac9      	subs	r1, r1, r3
 8007844:	460b      	mov	r3, r1
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	1a5b      	subs	r3, r3, r1
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	1ad1      	subs	r1, r2, r3
 800784e:	f107 0010 	add.w	r0, r7, #16
 8007852:	460b      	mov	r3, r1
 8007854:	4622      	mov	r2, r4
 8007856:	49bd      	ldr	r1, [pc, #756]	; (8007b4c <localMain+0xc34>)
 8007858:	f00d fb48 	bl	8014eec <siprintf>
		lcdPutStr(200-(*(zekton24font.font_Width)*(strlen(textBuffer)))/2, 10, textBuffer, zekton24font);
 800785c:	2314      	movs	r3, #20
 800785e:	461c      	mov	r4, r3
 8007860:	f107 0310 	add.w	r3, r7, #16
 8007864:	4618      	mov	r0, r3
 8007866:	f7f8 fccd 	bl	8000204 <strlen>
 800786a:	4603      	mov	r3, r0
 800786c:	fb04 f303 	mul.w	r3, r4, r3
 8007870:	085b      	lsrs	r3, r3, #1
 8007872:	b29b      	uxth	r3, r3
 8007874:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8007878:	b298      	uxth	r0, r3
 800787a:	f107 0210 	add.w	r2, r7, #16
 800787e:	4bb4      	ldr	r3, [pc, #720]	; (8007b50 <localMain+0xc38>)
 8007880:	210a      	movs	r1, #10
 8007882:	f7fb fb9f 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "NOON");
 8007886:	f107 0310 	add.w	r3, r7, #16
 800788a:	49b4      	ldr	r1, [pc, #720]	; (8007b5c <localMain+0xc44>)
 800788c:	4618      	mov	r0, r3
 800788e:	f00d fb2d 	bl	8014eec <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 35, textBuffer, font_12_zekton);
 8007892:	2309      	movs	r3, #9
 8007894:	461c      	mov	r4, r3
 8007896:	f107 0310 	add.w	r3, r7, #16
 800789a:	4618      	mov	r0, r3
 800789c:	f7f8 fcb2 	bl	8000204 <strlen>
 80078a0:	4603      	mov	r3, r0
 80078a2:	fb04 f303 	mul.w	r3, r4, r3
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80078ae:	b298      	uxth	r0, r3
 80078b0:	f107 0210 	add.w	r2, r7, #16
 80078b4:	4ba8      	ldr	r3, [pc, #672]	; (8007b58 <localMain+0xc40>)
 80078b6:	2123      	movs	r1, #35	; 0x23
 80078b8:	f7fb fb84 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 80078bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078c0:	4aa1      	ldr	r2, [pc, #644]	; (8007b48 <localMain+0xc30>)
 80078c2:	fb82 1203 	smull	r1, r2, r2, r3
 80078c6:	441a      	add	r2, r3
 80078c8:	1152      	asrs	r2, r2, #5
 80078ca:	17db      	asrs	r3, r3, #31
 80078cc:	1ad4      	subs	r4, r2, r3
 80078ce:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80078d2:	4b9d      	ldr	r3, [pc, #628]	; (8007b48 <localMain+0xc30>)
 80078d4:	fb83 1302 	smull	r1, r3, r3, r2
 80078d8:	4413      	add	r3, r2
 80078da:	1159      	asrs	r1, r3, #5
 80078dc:	17d3      	asrs	r3, r2, #31
 80078de:	1ac9      	subs	r1, r1, r3
 80078e0:	460b      	mov	r3, r1
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	1a5b      	subs	r3, r3, r1
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	1ad1      	subs	r1, r2, r3
 80078ea:	f107 0010 	add.w	r0, r7, #16
 80078ee:	460b      	mov	r3, r1
 80078f0:	4622      	mov	r2, r4
 80078f2:	4996      	ldr	r1, [pc, #600]	; (8007b4c <localMain+0xc34>)
 80078f4:	f00d fafa 	bl	8014eec <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 10, textBuffer, zekton24font);
 80078f8:	2314      	movs	r3, #20
 80078fa:	b29c      	uxth	r4, r3
 80078fc:	f107 0310 	add.w	r3, r7, #16
 8007900:	4618      	mov	r0, r3
 8007902:	f7f8 fc7f 	bl	8000204 <strlen>
 8007906:	4603      	mov	r3, r0
 8007908:	b29b      	uxth	r3, r3
 800790a:	fb14 f303 	smulbb	r3, r4, r3
 800790e:	b29b      	uxth	r3, r3
 8007910:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8007914:	b298      	uxth	r0, r3
 8007916:	f107 0210 	add.w	r2, r7, #16
 800791a:	4b8d      	ldr	r3, [pc, #564]	; (8007b50 <localMain+0xc38>)
 800791c:	210a      	movs	r1, #10
 800791e:	f7fb fb51 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "SUNSET");
 8007922:	f107 0310 	add.w	r3, r7, #16
 8007926:	498e      	ldr	r1, [pc, #568]	; (8007b60 <localMain+0xc48>)
 8007928:	4618      	mov	r0, r3
 800792a:	f00d fadf 	bl	8014eec <siprintf>
		lcdPutStr(390-(*(font_12_zekton.font_Width)*(strlen(textBuffer))), 35, textBuffer, font_12_zekton);
 800792e:	2309      	movs	r3, #9
 8007930:	b29c      	uxth	r4, r3
 8007932:	f107 0310 	add.w	r3, r7, #16
 8007936:	4618      	mov	r0, r3
 8007938:	f7f8 fc64 	bl	8000204 <strlen>
 800793c:	4603      	mov	r3, r0
 800793e:	b29b      	uxth	r3, r3
 8007940:	fb14 f303 	smulbb	r3, r4, r3
 8007944:	b29b      	uxth	r3, r3
 8007946:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 800794a:	b298      	uxth	r0, r3
 800794c:	f107 0210 	add.w	r2, r7, #16
 8007950:	4b81      	ldr	r3, [pc, #516]	; (8007b58 <localMain+0xc40>)
 8007952:	2123      	movs	r1, #35	; 0x23
 8007954:	f7fb fb36 	bl	8002fc4 <lcdPutStr>

		// setting for sunrise/sunset zenith angle [rad]
		double zenith = (90+CIVIL_TWILIGHT_DEG)*M_PI/180;
 8007958:	a377      	add	r3, pc, #476	; (adr r3, 8007b38 <localMain+0xc20>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		// calculated hour angle [rad]
		float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8007962:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8007966:	f011 fdc3 	bl	80194f0 <cos>
 800796a:	ec55 4b10 	vmov	r4, r5, d0
 800796e:	a374      	add	r3, pc, #464	; (adr r3, 8007b40 <localMain+0xc28>)
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007978:	f7f8 fe5e 	bl	8000638 <__aeabi_dmul>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4610      	mov	r0, r2
 8007982:	4619      	mov	r1, r3
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	4b76      	ldr	r3, [pc, #472]	; (8007b64 <localMain+0xc4c>)
 800798a:	f7f8 ff7f 	bl	800088c <__aeabi_ddiv>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	ec43 2b17 	vmov	d7, r2, r3
 8007996:	eeb0 0a47 	vmov.f32	s0, s14
 800799a:	eef0 0a67 	vmov.f32	s1, s15
 800799e:	f011 fda7 	bl	80194f0 <cos>
 80079a2:	ec59 8b10 	vmov	r8, r9, d0
 80079a6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80079aa:	f7f8 fded 	bl	8000588 <__aeabi_f2d>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	ec43 2b10 	vmov	d0, r2, r3
 80079b6:	f011 fd9b 	bl	80194f0 <cos>
 80079ba:	ec53 2b10 	vmov	r2, r3, d0
 80079be:	4640      	mov	r0, r8
 80079c0:	4649      	mov	r1, r9
 80079c2:	f7f8 fe39 	bl	8000638 <__aeabi_dmul>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4620      	mov	r0, r4
 80079cc:	4629      	mov	r1, r5
 80079ce:	f7f8 ff5d 	bl	800088c <__aeabi_ddiv>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4614      	mov	r4, r2
 80079d8:	461d      	mov	r5, r3
 80079da:	a359      	add	r3, pc, #356	; (adr r3, 8007b40 <localMain+0xc28>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80079e4:	f7f8 fe28 	bl	8000638 <__aeabi_dmul>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4610      	mov	r0, r2
 80079ee:	4619      	mov	r1, r3
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	4b5b      	ldr	r3, [pc, #364]	; (8007b64 <localMain+0xc4c>)
 80079f6:	f7f8 ff49 	bl	800088c <__aeabi_ddiv>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	ec43 2b17 	vmov	d7, r2, r3
 8007a02:	eeb0 0a47 	vmov.f32	s0, s14
 8007a06:	eef0 0a67 	vmov.f32	s1, s15
 8007a0a:	f011 fe1d 	bl	8019648 <tan>
 8007a0e:	ec59 8b10 	vmov	r8, r9, d0
 8007a12:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007a16:	f7f8 fdb7 	bl	8000588 <__aeabi_f2d>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	ec43 2b10 	vmov	d0, r2, r3
 8007a22:	f011 fe11 	bl	8019648 <tan>
 8007a26:	ec53 2b10 	vmov	r2, r3, d0
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	f7f8 fe03 	bl	8000638 <__aeabi_dmul>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4620      	mov	r0, r4
 8007a38:	4629      	mov	r1, r5
 8007a3a:	f7f8 fc45 	bl	80002c8 <__aeabi_dsub>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	ec43 2b17 	vmov	d7, r2, r3
 8007a46:	eeb0 0a47 	vmov.f32	s0, s14
 8007a4a:	eef0 0a67 	vmov.f32	s1, s15
 8007a4e:	f011 fe2f 	bl	80196b0 <acos>
 8007a52:	ec53 2b10 	vmov	r2, r3, d0
 8007a56:	4610      	mov	r0, r2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	f7f9 f8e5 	bl	8000c28 <__aeabi_d2f>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		//sunrise/sunset/noon times [min]
		int civil_sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 8007a64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a68:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	493e      	ldr	r1, [pc, #248]	; (8007b68 <localMain+0xc50>)
 8007a70:	2000      	movs	r0, #0
 8007a72:	f7fe ffc1 	bl	80069f8 <solarEventTime>
 8007a76:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		int civil_sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 8007a7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a7e:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8007a82:	461a      	mov	r2, r3
 8007a84:	4938      	ldr	r1, [pc, #224]	; (8007b68 <localMain+0xc50>)
 8007a86:	2002      	movs	r0, #2
 8007a88:	f7fe ffb6 	bl	80069f8 <solarEventTime>
 8007a8c:	67f8      	str	r0, [r7, #124]	; 0x7c
		sprintf(&textBuffer, "CIVIL");
 8007a8e:	f107 0310 	add.w	r3, r7, #16
 8007a92:	4936      	ldr	r1, [pc, #216]	; (8007b6c <localMain+0xc54>)
 8007a94:	4618      	mov	r0, r3
 8007a96:	f00d fa29 	bl	8014eec <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 80, textBuffer, font_12_zekton);
 8007a9a:	2309      	movs	r3, #9
 8007a9c:	461c      	mov	r4, r3
 8007a9e:	f107 0310 	add.w	r3, r7, #16
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7f8 fbae 	bl	8000204 <strlen>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	fb04 f303 	mul.w	r3, r4, r3
 8007aae:	085b      	lsrs	r3, r3, #1
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8007ab6:	b298      	uxth	r0, r3
 8007ab8:	f107 0210 	add.w	r2, r7, #16
 8007abc:	4b26      	ldr	r3, [pc, #152]	; (8007b58 <localMain+0xc40>)
 8007abe:	2150      	movs	r1, #80	; 0x50
 8007ac0:	f7fb fa80 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", civil_sunrise/60, civil_sunrise%60);
 8007ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ac8:	4a1f      	ldr	r2, [pc, #124]	; (8007b48 <localMain+0xc30>)
 8007aca:	fb82 1203 	smull	r1, r2, r2, r3
 8007ace:	441a      	add	r2, r3
 8007ad0:	1152      	asrs	r2, r2, #5
 8007ad2:	17db      	asrs	r3, r3, #31
 8007ad4:	1ad4      	subs	r4, r2, r3
 8007ad6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ada:	4b1b      	ldr	r3, [pc, #108]	; (8007b48 <localMain+0xc30>)
 8007adc:	fb83 1302 	smull	r1, r3, r3, r2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	1159      	asrs	r1, r3, #5
 8007ae4:	17d3      	asrs	r3, r2, #31
 8007ae6:	1ac9      	subs	r1, r1, r3
 8007ae8:	460b      	mov	r3, r1
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	1a5b      	subs	r3, r3, r1
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	1ad1      	subs	r1, r2, r3
 8007af2:	f107 0010 	add.w	r0, r7, #16
 8007af6:	460b      	mov	r3, r1
 8007af8:	4622      	mov	r2, r4
 8007afa:	4914      	ldr	r1, [pc, #80]	; (8007b4c <localMain+0xc34>)
 8007afc:	f00d f9f6 	bl	8014eec <siprintf>
		lcdPutStr(10, 80, textBuffer, zekton24font);
 8007b00:	f107 0210 	add.w	r2, r7, #16
 8007b04:	4b12      	ldr	r3, [pc, #72]	; (8007b50 <localMain+0xc38>)
 8007b06:	2150      	movs	r1, #80	; 0x50
 8007b08:	200a      	movs	r0, #10
 8007b0a:	f7fb fa5b 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", civil_sunset/60, civil_sunset%60);
 8007b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b10:	4a0d      	ldr	r2, [pc, #52]	; (8007b48 <localMain+0xc30>)
 8007b12:	fb82 1203 	smull	r1, r2, r2, r3
 8007b16:	441a      	add	r2, r3
 8007b18:	1152      	asrs	r2, r2, #5
 8007b1a:	17db      	asrs	r3, r3, #31
 8007b1c:	1ad4      	subs	r4, r2, r3
 8007b1e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b20:	4b09      	ldr	r3, [pc, #36]	; (8007b48 <localMain+0xc30>)
 8007b22:	fb83 1302 	smull	r1, r3, r3, r2
 8007b26:	4413      	add	r3, r2
 8007b28:	1159      	asrs	r1, r3, #5
 8007b2a:	17d3      	asrs	r3, r2, #31
 8007b2c:	1ac9      	subs	r1, r1, r3
 8007b2e:	460b      	mov	r3, r1
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	e01d      	b.n	8007b70 <localMain+0xc58>
 8007b34:	f3af 8000 	nop.w
 8007b38:	f37bebd5 	.word	0xf37bebd5
 8007b3c:	3ffacee9 	.word	0x3ffacee9
 8007b40:	54442d18 	.word	0x54442d18
 8007b44:	400921fb 	.word	0x400921fb
 8007b48:	88888889 	.word	0x88888889
 8007b4c:	0801c7ac 	.word	0x0801c7ac
 8007b50:	08032e90 	.word	0x08032e90
 8007b54:	0801c7b8 	.word	0x0801c7b8
 8007b58:	08031980 	.word	0x08031980
 8007b5c:	0801c7c0 	.word	0x0801c7c0
 8007b60:	0801c7c8 	.word	0x0801c7c8
 8007b64:	40668000 	.word	0x40668000
 8007b68:	20005db8 	.word	0x20005db8
 8007b6c:	0801c7d0 	.word	0x0801c7d0
 8007b70:	1a5b      	subs	r3, r3, r1
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	1ad1      	subs	r1, r2, r3
 8007b76:	f107 0010 	add.w	r0, r7, #16
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	49e2      	ldr	r1, [pc, #904]	; (8007f08 <localMain+0xff0>)
 8007b80:	f00d f9b4 	bl	8014eec <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 80, textBuffer, zekton24font);
 8007b84:	2314      	movs	r3, #20
 8007b86:	b29c      	uxth	r4, r3
 8007b88:	f107 0310 	add.w	r3, r7, #16
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7f8 fb39 	bl	8000204 <strlen>
 8007b92:	4603      	mov	r3, r0
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	fb14 f303 	smulbb	r3, r4, r3
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8007ba0:	b298      	uxth	r0, r3
 8007ba2:	f107 0210 	add.w	r2, r7, #16
 8007ba6:	4bd9      	ldr	r3, [pc, #868]	; (8007f0c <localMain+0xff4>)
 8007ba8:	2150      	movs	r1, #80	; 0x50
 8007baa:	f7fb fa0b 	bl	8002fc4 <lcdPutStr>

		// setting for sunrise/sunset zenith angle [rad]
		zenith = (90+NAUTICAL_TWILIGHT_DEG)*M_PI/180;
 8007bae:	a3d0      	add	r3, pc, #832	; (adr r3, 8007ef0 <localMain+0xfd8>)
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		// calculated hour angle [rad]
		cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8007bb8:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8007bbc:	f011 fc98 	bl	80194f0 <cos>
 8007bc0:	ec55 4b10 	vmov	r4, r5, d0
 8007bc4:	a3cc      	add	r3, pc, #816	; (adr r3, 8007ef8 <localMain+0xfe0>)
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007bce:	f7f8 fd33 	bl	8000638 <__aeabi_dmul>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f04f 0200 	mov.w	r2, #0
 8007bde:	4bcc      	ldr	r3, [pc, #816]	; (8007f10 <localMain+0xff8>)
 8007be0:	f7f8 fe54 	bl	800088c <__aeabi_ddiv>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	ec43 2b17 	vmov	d7, r2, r3
 8007bec:	eeb0 0a47 	vmov.f32	s0, s14
 8007bf0:	eef0 0a67 	vmov.f32	s1, s15
 8007bf4:	f011 fc7c 	bl	80194f0 <cos>
 8007bf8:	ec59 8b10 	vmov	r8, r9, d0
 8007bfc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007c00:	f7f8 fcc2 	bl	8000588 <__aeabi_f2d>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	ec43 2b10 	vmov	d0, r2, r3
 8007c0c:	f011 fc70 	bl	80194f0 <cos>
 8007c10:	ec53 2b10 	vmov	r2, r3, d0
 8007c14:	4640      	mov	r0, r8
 8007c16:	4649      	mov	r1, r9
 8007c18:	f7f8 fd0e 	bl	8000638 <__aeabi_dmul>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4620      	mov	r0, r4
 8007c22:	4629      	mov	r1, r5
 8007c24:	f7f8 fe32 	bl	800088c <__aeabi_ddiv>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4614      	mov	r4, r2
 8007c2e:	461d      	mov	r5, r3
 8007c30:	a3b1      	add	r3, pc, #708	; (adr r3, 8007ef8 <localMain+0xfe0>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c3a:	f7f8 fcfd 	bl	8000638 <__aeabi_dmul>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4610      	mov	r0, r2
 8007c44:	4619      	mov	r1, r3
 8007c46:	f04f 0200 	mov.w	r2, #0
 8007c4a:	4bb1      	ldr	r3, [pc, #708]	; (8007f10 <localMain+0xff8>)
 8007c4c:	f7f8 fe1e 	bl	800088c <__aeabi_ddiv>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	ec43 2b17 	vmov	d7, r2, r3
 8007c58:	eeb0 0a47 	vmov.f32	s0, s14
 8007c5c:	eef0 0a67 	vmov.f32	s1, s15
 8007c60:	f011 fcf2 	bl	8019648 <tan>
 8007c64:	ec59 8b10 	vmov	r8, r9, d0
 8007c68:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007c6c:	f7f8 fc8c 	bl	8000588 <__aeabi_f2d>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	ec43 2b10 	vmov	d0, r2, r3
 8007c78:	f011 fce6 	bl	8019648 <tan>
 8007c7c:	ec53 2b10 	vmov	r2, r3, d0
 8007c80:	4640      	mov	r0, r8
 8007c82:	4649      	mov	r1, r9
 8007c84:	f7f8 fcd8 	bl	8000638 <__aeabi_dmul>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	4629      	mov	r1, r5
 8007c90:	f7f8 fb1a 	bl	80002c8 <__aeabi_dsub>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	ec43 2b17 	vmov	d7, r2, r3
 8007c9c:	eeb0 0a47 	vmov.f32	s0, s14
 8007ca0:	eef0 0a67 	vmov.f32	s1, s15
 8007ca4:	f011 fd04 	bl	80196b0 <acos>
 8007ca8:	ec53 2b10 	vmov	r2, r3, d0
 8007cac:	4610      	mov	r0, r2
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f7f8 ffba 	bl	8000c28 <__aeabi_d2f>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		//sunrise/sunset/noon times [min]
		int naut_sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 8007cba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007cbe:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	4993      	ldr	r1, [pc, #588]	; (8007f14 <localMain+0xffc>)
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	f7fe fe96 	bl	80069f8 <solarEventTime>
 8007ccc:	67b8      	str	r0, [r7, #120]	; 0x78
		int naut_sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 8007cce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007cd2:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	498e      	ldr	r1, [pc, #568]	; (8007f14 <localMain+0xffc>)
 8007cda:	2002      	movs	r0, #2
 8007cdc:	f7fe fe8c 	bl	80069f8 <solarEventTime>
 8007ce0:	6778      	str	r0, [r7, #116]	; 0x74
		sprintf(&textBuffer, "NAUTICAL");
 8007ce2:	f107 0310 	add.w	r3, r7, #16
 8007ce6:	498c      	ldr	r1, [pc, #560]	; (8007f18 <localMain+0x1000>)
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f00d f8ff 	bl	8014eec <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 120, textBuffer, font_12_zekton);
 8007cee:	2309      	movs	r3, #9
 8007cf0:	461c      	mov	r4, r3
 8007cf2:	f107 0310 	add.w	r3, r7, #16
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7f8 fa84 	bl	8000204 <strlen>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	fb04 f303 	mul.w	r3, r4, r3
 8007d02:	085b      	lsrs	r3, r3, #1
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8007d0a:	b298      	uxth	r0, r3
 8007d0c:	f107 0210 	add.w	r2, r7, #16
 8007d10:	4b82      	ldr	r3, [pc, #520]	; (8007f1c <localMain+0x1004>)
 8007d12:	2178      	movs	r1, #120	; 0x78
 8007d14:	f7fb f956 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", naut_sunrise/60, naut_sunrise%60);
 8007d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d1a:	4a81      	ldr	r2, [pc, #516]	; (8007f20 <localMain+0x1008>)
 8007d1c:	fb82 1203 	smull	r1, r2, r2, r3
 8007d20:	441a      	add	r2, r3
 8007d22:	1152      	asrs	r2, r2, #5
 8007d24:	17db      	asrs	r3, r3, #31
 8007d26:	1ad4      	subs	r4, r2, r3
 8007d28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d2a:	4b7d      	ldr	r3, [pc, #500]	; (8007f20 <localMain+0x1008>)
 8007d2c:	fb83 1302 	smull	r1, r3, r3, r2
 8007d30:	4413      	add	r3, r2
 8007d32:	1159      	asrs	r1, r3, #5
 8007d34:	17d3      	asrs	r3, r2, #31
 8007d36:	1ac9      	subs	r1, r1, r3
 8007d38:	460b      	mov	r3, r1
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	1a5b      	subs	r3, r3, r1
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	1ad1      	subs	r1, r2, r3
 8007d42:	f107 0010 	add.w	r0, r7, #16
 8007d46:	460b      	mov	r3, r1
 8007d48:	4622      	mov	r2, r4
 8007d4a:	496f      	ldr	r1, [pc, #444]	; (8007f08 <localMain+0xff0>)
 8007d4c:	f00d f8ce 	bl	8014eec <siprintf>
		lcdPutStr(10, 120, textBuffer, zekton24font);
 8007d50:	f107 0210 	add.w	r2, r7, #16
 8007d54:	4b6d      	ldr	r3, [pc, #436]	; (8007f0c <localMain+0xff4>)
 8007d56:	2178      	movs	r1, #120	; 0x78
 8007d58:	200a      	movs	r0, #10
 8007d5a:	f7fb f933 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", naut_sunset/60, naut_sunset%60);
 8007d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d60:	4a6f      	ldr	r2, [pc, #444]	; (8007f20 <localMain+0x1008>)
 8007d62:	fb82 1203 	smull	r1, r2, r2, r3
 8007d66:	441a      	add	r2, r3
 8007d68:	1152      	asrs	r2, r2, #5
 8007d6a:	17db      	asrs	r3, r3, #31
 8007d6c:	1ad4      	subs	r4, r2, r3
 8007d6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d70:	4b6b      	ldr	r3, [pc, #428]	; (8007f20 <localMain+0x1008>)
 8007d72:	fb83 1302 	smull	r1, r3, r3, r2
 8007d76:	4413      	add	r3, r2
 8007d78:	1159      	asrs	r1, r3, #5
 8007d7a:	17d3      	asrs	r3, r2, #31
 8007d7c:	1ac9      	subs	r1, r1, r3
 8007d7e:	460b      	mov	r3, r1
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	1a5b      	subs	r3, r3, r1
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	1ad1      	subs	r1, r2, r3
 8007d88:	f107 0010 	add.w	r0, r7, #16
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4622      	mov	r2, r4
 8007d90:	495d      	ldr	r1, [pc, #372]	; (8007f08 <localMain+0xff0>)
 8007d92:	f00d f8ab 	bl	8014eec <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 120, textBuffer, zekton24font);
 8007d96:	2314      	movs	r3, #20
 8007d98:	b29c      	uxth	r4, r3
 8007d9a:	f107 0310 	add.w	r3, r7, #16
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7f8 fa30 	bl	8000204 <strlen>
 8007da4:	4603      	mov	r3, r0
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	fb14 f303 	smulbb	r3, r4, r3
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8007db2:	b298      	uxth	r0, r3
 8007db4:	f107 0210 	add.w	r2, r7, #16
 8007db8:	4b54      	ldr	r3, [pc, #336]	; (8007f0c <localMain+0xff4>)
 8007dba:	2178      	movs	r1, #120	; 0x78
 8007dbc:	f7fb f902 	bl	8002fc4 <lcdPutStr>

		// setting for sunrise/sunset zenith angle [rad]
		zenith = (90+ASTRONOMICAL_TWILIGHT_DEG)*M_PI/180;
 8007dc0:	a34f      	add	r3, pc, #316	; (adr r3, 8007f00 <localMain+0xfe8>)
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		// calculated hour angle [rad]
		cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8007dca:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8007dce:	f011 fb8f 	bl	80194f0 <cos>
 8007dd2:	ec55 4b10 	vmov	r4, r5, d0
 8007dd6:	a348      	add	r3, pc, #288	; (adr r3, 8007ef8 <localMain+0xfe0>)
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007de0:	f7f8 fc2a 	bl	8000638 <__aeabi_dmul>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4610      	mov	r0, r2
 8007dea:	4619      	mov	r1, r3
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	4b47      	ldr	r3, [pc, #284]	; (8007f10 <localMain+0xff8>)
 8007df2:	f7f8 fd4b 	bl	800088c <__aeabi_ddiv>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	ec43 2b17 	vmov	d7, r2, r3
 8007dfe:	eeb0 0a47 	vmov.f32	s0, s14
 8007e02:	eef0 0a67 	vmov.f32	s1, s15
 8007e06:	f011 fb73 	bl	80194f0 <cos>
 8007e0a:	ec59 8b10 	vmov	r8, r9, d0
 8007e0e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007e12:	f7f8 fbb9 	bl	8000588 <__aeabi_f2d>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	ec43 2b10 	vmov	d0, r2, r3
 8007e1e:	f011 fb67 	bl	80194f0 <cos>
 8007e22:	ec53 2b10 	vmov	r2, r3, d0
 8007e26:	4640      	mov	r0, r8
 8007e28:	4649      	mov	r1, r9
 8007e2a:	f7f8 fc05 	bl	8000638 <__aeabi_dmul>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4620      	mov	r0, r4
 8007e34:	4629      	mov	r1, r5
 8007e36:	f7f8 fd29 	bl	800088c <__aeabi_ddiv>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4614      	mov	r4, r2
 8007e40:	461d      	mov	r5, r3
 8007e42:	a32d      	add	r3, pc, #180	; (adr r3, 8007ef8 <localMain+0xfe0>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e4c:	f7f8 fbf4 	bl	8000638 <__aeabi_dmul>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4610      	mov	r0, r2
 8007e56:	4619      	mov	r1, r3
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	4b2c      	ldr	r3, [pc, #176]	; (8007f10 <localMain+0xff8>)
 8007e5e:	f7f8 fd15 	bl	800088c <__aeabi_ddiv>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	ec43 2b17 	vmov	d7, r2, r3
 8007e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8007e6e:	eef0 0a67 	vmov.f32	s1, s15
 8007e72:	f011 fbe9 	bl	8019648 <tan>
 8007e76:	ec59 8b10 	vmov	r8, r9, d0
 8007e7a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007e7e:	f7f8 fb83 	bl	8000588 <__aeabi_f2d>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	ec43 2b10 	vmov	d0, r2, r3
 8007e8a:	f011 fbdd 	bl	8019648 <tan>
 8007e8e:	ec53 2b10 	vmov	r2, r3, d0
 8007e92:	4640      	mov	r0, r8
 8007e94:	4649      	mov	r1, r9
 8007e96:	f7f8 fbcf 	bl	8000638 <__aeabi_dmul>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	f7f8 fa11 	bl	80002c8 <__aeabi_dsub>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	ec43 2b17 	vmov	d7, r2, r3
 8007eae:	eeb0 0a47 	vmov.f32	s0, s14
 8007eb2:	eef0 0a67 	vmov.f32	s1, s15
 8007eb6:	f011 fbfb 	bl	80196b0 <acos>
 8007eba:	ec53 2b10 	vmov	r2, r3, d0
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	f7f8 feb1 	bl	8000c28 <__aeabi_d2f>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		//sunrise/sunset/noon times [min]
		int astro_sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 8007ecc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ed0:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	490f      	ldr	r1, [pc, #60]	; (8007f14 <localMain+0xffc>)
 8007ed8:	2000      	movs	r0, #0
 8007eda:	f7fe fd8d 	bl	80069f8 <solarEventTime>
 8007ede:	6738      	str	r0, [r7, #112]	; 0x70
		int astro_sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 8007ee0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ee4:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8007ee8:	461a      	mov	r2, r3
 8007eea:	e01b      	b.n	8007f24 <localMain+0x100c>
 8007eec:	f3af 8000 	nop.w
 8007ef0:	92b3aa92 	.word	0x92b3aa92
 8007ef4:	3ffc7bd8 	.word	0x3ffc7bd8
 8007ef8:	54442d18 	.word	0x54442d18
 8007efc:	400921fb 	.word	0x400921fb
 8007f00:	31eb6950 	.word	0x31eb6950
 8007f04:	3ffe28c7 	.word	0x3ffe28c7
 8007f08:	0801c7ac 	.word	0x0801c7ac
 8007f0c:	08032e90 	.word	0x08032e90
 8007f10:	40668000 	.word	0x40668000
 8007f14:	20005db8 	.word	0x20005db8
 8007f18:	0801c7d8 	.word	0x0801c7d8
 8007f1c:	08031980 	.word	0x08031980
 8007f20:	88888889 	.word	0x88888889
 8007f24:	49ac      	ldr	r1, [pc, #688]	; (80081d8 <localMain+0x12c0>)
 8007f26:	2002      	movs	r0, #2
 8007f28:	f7fe fd66 	bl	80069f8 <solarEventTime>
 8007f2c:	66f8      	str	r0, [r7, #108]	; 0x6c
		sprintf(&textBuffer, "ASTRONOMICAL");
 8007f2e:	f107 0310 	add.w	r3, r7, #16
 8007f32:	49aa      	ldr	r1, [pc, #680]	; (80081dc <localMain+0x12c4>)
 8007f34:	4618      	mov	r0, r3
 8007f36:	f00c ffd9 	bl	8014eec <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 160, textBuffer, font_12_zekton);
 8007f3a:	2309      	movs	r3, #9
 8007f3c:	461c      	mov	r4, r3
 8007f3e:	f107 0310 	add.w	r3, r7, #16
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7f8 f95e 	bl	8000204 <strlen>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	fb04 f303 	mul.w	r3, r4, r3
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8007f56:	b298      	uxth	r0, r3
 8007f58:	f107 0210 	add.w	r2, r7, #16
 8007f5c:	4ba0      	ldr	r3, [pc, #640]	; (80081e0 <localMain+0x12c8>)
 8007f5e:	21a0      	movs	r1, #160	; 0xa0
 8007f60:	f7fb f830 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", astro_sunrise/60, astro_sunrise%60);
 8007f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f66:	4a9f      	ldr	r2, [pc, #636]	; (80081e4 <localMain+0x12cc>)
 8007f68:	fb82 1203 	smull	r1, r2, r2, r3
 8007f6c:	441a      	add	r2, r3
 8007f6e:	1152      	asrs	r2, r2, #5
 8007f70:	17db      	asrs	r3, r3, #31
 8007f72:	1ad4      	subs	r4, r2, r3
 8007f74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f76:	4b9b      	ldr	r3, [pc, #620]	; (80081e4 <localMain+0x12cc>)
 8007f78:	fb83 1302 	smull	r1, r3, r3, r2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	1159      	asrs	r1, r3, #5
 8007f80:	17d3      	asrs	r3, r2, #31
 8007f82:	1ac9      	subs	r1, r1, r3
 8007f84:	460b      	mov	r3, r1
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	1a5b      	subs	r3, r3, r1
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	1ad1      	subs	r1, r2, r3
 8007f8e:	f107 0010 	add.w	r0, r7, #16
 8007f92:	460b      	mov	r3, r1
 8007f94:	4622      	mov	r2, r4
 8007f96:	4994      	ldr	r1, [pc, #592]	; (80081e8 <localMain+0x12d0>)
 8007f98:	f00c ffa8 	bl	8014eec <siprintf>
		lcdPutStr(10, 160, textBuffer, zekton24font);
 8007f9c:	f107 0210 	add.w	r2, r7, #16
 8007fa0:	4b92      	ldr	r3, [pc, #584]	; (80081ec <localMain+0x12d4>)
 8007fa2:	21a0      	movs	r1, #160	; 0xa0
 8007fa4:	200a      	movs	r0, #10
 8007fa6:	f7fb f80d 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", astro_sunset/60, astro_sunset%60);
 8007faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fac:	4a8d      	ldr	r2, [pc, #564]	; (80081e4 <localMain+0x12cc>)
 8007fae:	fb82 1203 	smull	r1, r2, r2, r3
 8007fb2:	441a      	add	r2, r3
 8007fb4:	1152      	asrs	r2, r2, #5
 8007fb6:	17db      	asrs	r3, r3, #31
 8007fb8:	1ad4      	subs	r4, r2, r3
 8007fba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fbc:	4b89      	ldr	r3, [pc, #548]	; (80081e4 <localMain+0x12cc>)
 8007fbe:	fb83 1302 	smull	r1, r3, r3, r2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	1159      	asrs	r1, r3, #5
 8007fc6:	17d3      	asrs	r3, r2, #31
 8007fc8:	1ac9      	subs	r1, r1, r3
 8007fca:	460b      	mov	r3, r1
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	1a5b      	subs	r3, r3, r1
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	1ad1      	subs	r1, r2, r3
 8007fd4:	f107 0010 	add.w	r0, r7, #16
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4622      	mov	r2, r4
 8007fdc:	4982      	ldr	r1, [pc, #520]	; (80081e8 <localMain+0x12d0>)
 8007fde:	f00c ff85 	bl	8014eec <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 160, textBuffer, zekton24font);
 8007fe2:	2314      	movs	r3, #20
 8007fe4:	b29c      	uxth	r4, r3
 8007fe6:	f107 0310 	add.w	r3, r7, #16
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7f8 f90a 	bl	8000204 <strlen>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	fb14 f303 	smulbb	r3, r4, r3
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8007ffe:	b298      	uxth	r0, r3
 8008000:	f107 0210 	add.w	r2, r7, #16
 8008004:	4b79      	ldr	r3, [pc, #484]	; (80081ec <localMain+0x12d4>)
 8008006:	21a0      	movs	r1, #160	; 0xa0
 8008008:	f7fa ffdc 	bl	8002fc4 <lcdPutStr>


		sprintf(&textBuffer, "SUNSET");
 800800c:	f107 0310 	add.w	r3, r7, #16
 8008010:	4977      	ldr	r1, [pc, #476]	; (80081f0 <localMain+0x12d8>)
 8008012:	4618      	mov	r0, r3
 8008014:	f00c ff6a 	bl	8014eec <siprintf>
		lcdPutStr(390-(*(font_12_zekton.font_Width)*(strlen(textBuffer))), 35, textBuffer, font_12_zekton);
 8008018:	2309      	movs	r3, #9
 800801a:	b29c      	uxth	r4, r3
 800801c:	f107 0310 	add.w	r3, r7, #16
 8008020:	4618      	mov	r0, r3
 8008022:	f7f8 f8ef 	bl	8000204 <strlen>
 8008026:	4603      	mov	r3, r0
 8008028:	b29b      	uxth	r3, r3
 800802a:	fb14 f303 	smulbb	r3, r4, r3
 800802e:	b29b      	uxth	r3, r3
 8008030:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8008034:	b298      	uxth	r0, r3
 8008036:	f107 0210 	add.w	r2, r7, #16
 800803a:	4b69      	ldr	r3, [pc, #420]	; (80081e0 <localMain+0x12c8>)
 800803c:	2123      	movs	r1, #35	; 0x23
 800803e:	f7fa ffc1 	bl	8002fc4 <lcdPutStr>
		break;
 8008042:	e156      	b.n	80082f2 <localMain+0x13da>
	case 2:
	{
		double perc = (testTime.tm_hour*60+testTime.tm_min+(double)testTime.tm_sec/60-sunrise)*100/(sunset-sunrise);
 8008044:	4b64      	ldr	r3, [pc, #400]	; (80081d8 <localMain+0x12c0>)
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	4613      	mov	r3, r2
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	1a9b      	subs	r3, r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	461a      	mov	r2, r3
 8008052:	4b61      	ldr	r3, [pc, #388]	; (80081d8 <localMain+0x12c0>)
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	4413      	add	r3, r2
 8008058:	4618      	mov	r0, r3
 800805a:	f7f8 fa83 	bl	8000564 <__aeabi_i2d>
 800805e:	4604      	mov	r4, r0
 8008060:	460d      	mov	r5, r1
 8008062:	4b5d      	ldr	r3, [pc, #372]	; (80081d8 <localMain+0x12c0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f7f8 fa7c 	bl	8000564 <__aeabi_i2d>
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	4b60      	ldr	r3, [pc, #384]	; (80081f4 <localMain+0x12dc>)
 8008072:	f7f8 fc0b 	bl	800088c <__aeabi_ddiv>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4620      	mov	r0, r4
 800807c:	4629      	mov	r1, r5
 800807e:	f7f8 f925 	bl	80002cc <__adddf3>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4614      	mov	r4, r2
 8008088:	461d      	mov	r5, r3
 800808a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800808e:	f7f8 fa69 	bl	8000564 <__aeabi_i2d>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4620      	mov	r0, r4
 8008098:	4629      	mov	r1, r5
 800809a:	f7f8 f915 	bl	80002c8 <__aeabi_dsub>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4610      	mov	r0, r2
 80080a4:	4619      	mov	r1, r3
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	4b53      	ldr	r3, [pc, #332]	; (80081f8 <localMain+0x12e0>)
 80080ac:	f7f8 fac4 	bl	8000638 <__aeabi_dmul>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4614      	mov	r4, r2
 80080b6:	461d      	mov	r5, r3
 80080b8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80080bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7f8 fa4e 	bl	8000564 <__aeabi_i2d>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4620      	mov	r0, r4
 80080ce:	4629      	mov	r1, r5
 80080d0:	f7f8 fbdc 	bl	800088c <__aeabi_ddiv>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		sprintf(&textBuffer, "percentage daylight:");
 80080dc:	f107 0310 	add.w	r3, r7, #16
 80080e0:	4946      	ldr	r1, [pc, #280]	; (80081fc <localMain+0x12e4>)
 80080e2:	4618      	mov	r0, r3
 80080e4:	f00c ff02 	bl	8014eec <siprintf>
		lcdPutStr(10, 116, textBuffer, font_12_zekton_bold);
 80080e8:	f107 0210 	add.w	r2, r7, #16
 80080ec:	4b44      	ldr	r3, [pc, #272]	; (8008200 <localMain+0x12e8>)
 80080ee:	2174      	movs	r1, #116	; 0x74
 80080f0:	200a      	movs	r0, #10
 80080f2:	f7fa ff67 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%2.3f%%", perc);
 80080f6:	f107 0010 	add.w	r0, r7, #16
 80080fa:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80080fe:	4941      	ldr	r1, [pc, #260]	; (8008204 <localMain+0x12ec>)
 8008100:	f00c fef4 	bl	8014eec <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 116, textBuffer, zekton24font);
 8008104:	2314      	movs	r3, #20
 8008106:	b29c      	uxth	r4, r3
 8008108:	f107 0310 	add.w	r3, r7, #16
 800810c:	4618      	mov	r0, r3
 800810e:	f7f8 f879 	bl	8000204 <strlen>
 8008112:	4603      	mov	r3, r0
 8008114:	b29b      	uxth	r3, r3
 8008116:	fb14 f303 	smulbb	r3, r4, r3
 800811a:	b29b      	uxth	r3, r3
 800811c:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8008120:	b298      	uxth	r0, r3
 8008122:	f107 0210 	add.w	r2, r7, #16
 8008126:	4b31      	ldr	r3, [pc, #196]	; (80081ec <localMain+0x12d4>)
 8008128:	2174      	movs	r1, #116	; 0x74
 800812a:	f7fa ff4b 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "day length:");
 800812e:	f107 0310 	add.w	r3, r7, #16
 8008132:	4935      	ldr	r1, [pc, #212]	; (8008208 <localMain+0x12f0>)
 8008134:	4618      	mov	r0, r3
 8008136:	f00c fed9 	bl	8014eec <siprintf>
		lcdPutStr(10, 160, textBuffer, font_12_zekton_bold);
 800813a:	f107 0210 	add.w	r2, r7, #16
 800813e:	4b30      	ldr	r3, [pc, #192]	; (8008200 <localMain+0x12e8>)
 8008140:	21a0      	movs	r1, #160	; 0xa0
 8008142:	200a      	movs	r0, #10
 8008144:	f7fa ff3e 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "%02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 8008148:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800814c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	4a24      	ldr	r2, [pc, #144]	; (80081e4 <localMain+0x12cc>)
 8008154:	fb82 1203 	smull	r1, r2, r2, r3
 8008158:	441a      	add	r2, r3
 800815a:	1152      	asrs	r2, r2, #5
 800815c:	17db      	asrs	r3, r3, #31
 800815e:	1ad4      	subs	r4, r2, r3
 8008160:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008168:	1ad2      	subs	r2, r2, r3
 800816a:	4b1e      	ldr	r3, [pc, #120]	; (80081e4 <localMain+0x12cc>)
 800816c:	fb83 1302 	smull	r1, r3, r3, r2
 8008170:	4413      	add	r3, r2
 8008172:	1159      	asrs	r1, r3, #5
 8008174:	17d3      	asrs	r3, r2, #31
 8008176:	1ac9      	subs	r1, r1, r3
 8008178:	460b      	mov	r3, r1
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	1a5b      	subs	r3, r3, r1
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	1ad1      	subs	r1, r2, r3
 8008182:	f107 0010 	add.w	r0, r7, #16
 8008186:	460b      	mov	r3, r1
 8008188:	4622      	mov	r2, r4
 800818a:	4920      	ldr	r1, [pc, #128]	; (800820c <localMain+0x12f4>)
 800818c:	f00c feae 	bl	8014eec <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 160, textBuffer, zekton24font);
 8008190:	2314      	movs	r3, #20
 8008192:	b29c      	uxth	r4, r3
 8008194:	f107 0310 	add.w	r3, r7, #16
 8008198:	4618      	mov	r0, r3
 800819a:	f7f8 f833 	bl	8000204 <strlen>
 800819e:	4603      	mov	r3, r0
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	fb14 f303 	smulbb	r3, r4, r3
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 80081ac:	b298      	uxth	r0, r3
 80081ae:	f107 0210 	add.w	r2, r7, #16
 80081b2:	4b0e      	ldr	r3, [pc, #56]	; (80081ec <localMain+0x12d4>)
 80081b4:	21a0      	movs	r1, #160	; 0xa0
 80081b6:	f7fa ff05 	bl	8002fc4 <lcdPutStr>
		break;
 80081ba:	e09a      	b.n	80082f2 <localMain+0x13da>
	}
	case 3:

		drawSunlightGraph(120, 5, 395, 160, &suntimes, &myLocation);
 80081bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	23a0      	movs	r3, #160	; 0xa0
 80081ca:	f240 128b 	movw	r2, #395	; 0x18b
 80081ce:	2105      	movs	r1, #5
 80081d0:	2078      	movs	r0, #120	; 0x78
 80081d2:	f000 f89d 	bl	8008310 <drawSunlightGraph>
		break;
 80081d6:	e08c      	b.n	80082f2 <localMain+0x13da>
 80081d8:	20005db8 	.word	0x20005db8
 80081dc:	0801c7e4 	.word	0x0801c7e4
 80081e0:	08031980 	.word	0x08031980
 80081e4:	88888889 	.word	0x88888889
 80081e8:	0801c7ac 	.word	0x0801c7ac
 80081ec:	08032e90 	.word	0x08032e90
 80081f0:	0801c7c8 	.word	0x0801c7c8
 80081f4:	404e0000 	.word	0x404e0000
 80081f8:	40590000 	.word	0x40590000
 80081fc:	0801c7f4 	.word	0x0801c7f4
 8008200:	08032408 	.word	0x08032408
 8008204:	0801c80c 	.word	0x0801c80c
 8008208:	0801c814 	.word	0x0801c814
 800820c:	0801c820 	.word	0x0801c820
	case 4:{
		sprintf(&textBuffer, "18250d");
 8008210:	f107 0310 	add.w	r3, r7, #16
 8008214:	4939      	ldr	r1, [pc, #228]	; (80082fc <localMain+0x13e4>)
 8008216:	4618      	mov	r0, r3
 8008218:	f00c fe68 	bl	8014eec <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 30, textBuffer, zekton45font);
 800821c:	2322      	movs	r3, #34	; 0x22
 800821e:	b29c      	uxth	r4, r3
 8008220:	f107 0310 	add.w	r3, r7, #16
 8008224:	4618      	mov	r0, r3
 8008226:	f7f7 ffed 	bl	8000204 <strlen>
 800822a:	4603      	mov	r3, r0
 800822c:	3301      	adds	r3, #1
 800822e:	b29b      	uxth	r3, r3
 8008230:	fb14 f303 	smulbb	r3, r4, r3
 8008234:	b29b      	uxth	r3, r3
 8008236:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 800823a:	b298      	uxth	r0, r3
 800823c:	f107 0210 	add.w	r2, r7, #16
 8008240:	4b2f      	ldr	r3, [pc, #188]	; (8008300 <localMain+0x13e8>)
 8008242:	211e      	movs	r1, #30
 8008244:	f7fa febe 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "20h");
 8008248:	f107 0310 	add.w	r3, r7, #16
 800824c:	492d      	ldr	r1, [pc, #180]	; (8008304 <localMain+0x13ec>)
 800824e:	4618      	mov	r0, r3
 8008250:	f00c fe4c 	bl	8014eec <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 80, textBuffer, zekton45font);
 8008254:	2322      	movs	r3, #34	; 0x22
 8008256:	b29c      	uxth	r4, r3
 8008258:	f107 0310 	add.w	r3, r7, #16
 800825c:	4618      	mov	r0, r3
 800825e:	f7f7 ffd1 	bl	8000204 <strlen>
 8008262:	4603      	mov	r3, r0
 8008264:	3301      	adds	r3, #1
 8008266:	b29b      	uxth	r3, r3
 8008268:	fb14 f303 	smulbb	r3, r4, r3
 800826c:	b29b      	uxth	r3, r3
 800826e:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8008272:	b298      	uxth	r0, r3
 8008274:	f107 0210 	add.w	r2, r7, #16
 8008278:	4b21      	ldr	r3, [pc, #132]	; (8008300 <localMain+0x13e8>)
 800827a:	2150      	movs	r1, #80	; 0x50
 800827c:	f7fa fea2 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "54min");
 8008280:	f107 0310 	add.w	r3, r7, #16
 8008284:	4920      	ldr	r1, [pc, #128]	; (8008308 <localMain+0x13f0>)
 8008286:	4618      	mov	r0, r3
 8008288:	f00c fe30 	bl	8014eec <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 130, textBuffer, zekton45font);
 800828c:	2322      	movs	r3, #34	; 0x22
 800828e:	b29c      	uxth	r4, r3
 8008290:	f107 0310 	add.w	r3, r7, #16
 8008294:	4618      	mov	r0, r3
 8008296:	f7f7 ffb5 	bl	8000204 <strlen>
 800829a:	4603      	mov	r3, r0
 800829c:	3301      	adds	r3, #1
 800829e:	b29b      	uxth	r3, r3
 80082a0:	fb14 f303 	smulbb	r3, r4, r3
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 80082aa:	b298      	uxth	r0, r3
 80082ac:	f107 0210 	add.w	r2, r7, #16
 80082b0:	4b13      	ldr	r3, [pc, #76]	; (8008300 <localMain+0x13e8>)
 80082b2:	2182      	movs	r1, #130	; 0x82
 80082b4:	f7fa fe86 	bl	8002fc4 <lcdPutStr>
		sprintf(&textBuffer, "12s");
 80082b8:	f107 0310 	add.w	r3, r7, #16
 80082bc:	4913      	ldr	r1, [pc, #76]	; (800830c <localMain+0x13f4>)
 80082be:	4618      	mov	r0, r3
 80082c0:	f00c fe14 	bl	8014eec <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 180, textBuffer, zekton45font);
 80082c4:	2322      	movs	r3, #34	; 0x22
 80082c6:	b29c      	uxth	r4, r3
 80082c8:	f107 0310 	add.w	r3, r7, #16
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7f7 ff99 	bl	8000204 <strlen>
 80082d2:	4603      	mov	r3, r0
 80082d4:	3301      	adds	r3, #1
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	fb14 f303 	smulbb	r3, r4, r3
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 80082e2:	b298      	uxth	r0, r3
 80082e4:	f107 0210 	add.w	r2, r7, #16
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <localMain+0x13e8>)
 80082ea:	21b4      	movs	r1, #180	; 0xb4
 80082ec:	f7fa fe6a 	bl	8002fc4 <lcdPutStr>

		break;
 80082f0:	bf00      	nop
		}
	}
}
 80082f2:	bf00      	nop
 80082f4:	37f4      	adds	r7, #244	; 0xf4
 80082f6:	46bd      	mov	sp, r7
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	0801c830 	.word	0x0801c830
 8008300:	08034cf8 	.word	0x08034cf8
 8008304:	0801c838 	.word	0x0801c838
 8008308:	0801c83c 	.word	0x0801c83c
 800830c:	0801c844 	.word	0x0801c844

08008310 <drawSunlightGraph>:

void drawSunlightGraph(uint8_t yPos, uint16_t x1, uint16_t x2, uint8_t height, struct sunEventsTimes *suntimes, struct local_location *location){
 8008310:	b5b0      	push	{r4, r5, r7, lr}
 8008312:	b0a2      	sub	sp, #136	; 0x88
 8008314:	af02      	add	r7, sp, #8
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	4611      	mov	r1, r2
 800831c:	461a      	mov	r2, r3
 800831e:	4623      	mov	r3, r4
 8008320:	71fb      	strb	r3, [r7, #7]
 8008322:	4603      	mov	r3, r0
 8008324:	80bb      	strh	r3, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	807b      	strh	r3, [r7, #2]
 800832a:	4613      	mov	r3, r2
 800832c:	71bb      	strb	r3, [r7, #6]
	lcdHLine(x1,x2,yPos,1);
 800832e:	88b8      	ldrh	r0, [r7, #4]
 8008330:	8879      	ldrh	r1, [r7, #2]
 8008332:	79fa      	ldrb	r2, [r7, #7]
 8008334:	2301      	movs	r3, #1
 8008336:	f7fb fb0d 	bl	8003954 <lcdHLine>
	lcdVLine(x1, yPos-2, yPos+2, 1);
 800833a:	88b8      	ldrh	r0, [r7, #4]
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	1e99      	subs	r1, r3, #2
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	1c9a      	adds	r2, r3, #2
 8008344:	2301      	movs	r3, #1
 8008346:	f7fa febd 	bl	80030c4 <lcdVLine>
	lcdVLine(x2, yPos-2, yPos+2, 1);
 800834a:	8878      	ldrh	r0, [r7, #2]
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	1e99      	subs	r1, r3, #2
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	1c9a      	adds	r2, r3, #2
 8008354:	2301      	movs	r3, #1
 8008356:	f7fa feb5 	bl	80030c4 <lcdVLine>

	uint16_t scaleXrise = x1+(x2-x1+1)*suntimes->sunrise/(24*60-0);
 800835a:	887a      	ldrh	r2, [r7, #2]
 800835c:	88bb      	ldrh	r3, [r7, #4]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	3301      	adds	r3, #1
 8008362:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008366:	6812      	ldr	r2, [r2, #0]
 8008368:	fb02 f303 	mul.w	r3, r2, r3
 800836c:	4ab0      	ldr	r2, [pc, #704]	; (8008630 <drawSunlightGraph+0x320>)
 800836e:	fb82 1203 	smull	r1, r2, r2, r3
 8008372:	441a      	add	r2, r3
 8008374:	1292      	asrs	r2, r2, #10
 8008376:	17db      	asrs	r3, r3, #31
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	b29a      	uxth	r2, r3
 800837c:	88bb      	ldrh	r3, [r7, #4]
 800837e:	4413      	add	r3, r2
 8008380:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	uint16_t scaleXset = x1+(x2-x1+1)*suntimes->sunset/(24*60-0);
 8008384:	887a      	ldrh	r2, [r7, #2]
 8008386:	88bb      	ldrh	r3, [r7, #4]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	3301      	adds	r3, #1
 800838c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008390:	6892      	ldr	r2, [r2, #8]
 8008392:	fb02 f303 	mul.w	r3, r2, r3
 8008396:	4aa6      	ldr	r2, [pc, #664]	; (8008630 <drawSunlightGraph+0x320>)
 8008398:	fb82 1203 	smull	r1, r2, r2, r3
 800839c:	441a      	add	r2, r3
 800839e:	1292      	asrs	r2, r2, #10
 80083a0:	17db      	asrs	r3, r3, #31
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	88bb      	ldrh	r3, [r7, #4]
 80083a8:	4413      	add	r3, r2
 80083aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	uint16_t scaleXnoon = x1+(x2-x1+1)*suntimes->noon/(24*60-0);
 80083ae:	887a      	ldrh	r2, [r7, #2]
 80083b0:	88bb      	ldrh	r3, [r7, #4]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	3301      	adds	r3, #1
 80083b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80083ba:	6852      	ldr	r2, [r2, #4]
 80083bc:	fb02 f303 	mul.w	r3, r2, r3
 80083c0:	4a9b      	ldr	r2, [pc, #620]	; (8008630 <drawSunlightGraph+0x320>)
 80083c2:	fb82 1203 	smull	r1, r2, r2, r3
 80083c6:	441a      	add	r2, r3
 80083c8:	1292      	asrs	r2, r2, #10
 80083ca:	17db      	asrs	r3, r3, #31
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	88bb      	ldrh	r3, [r7, #4]
 80083d2:	4413      	add	r3, r2
 80083d4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	uint16_t scaleXnow = x1+(x2-x1+1)*(testTime.tm_hour*60+testTime.tm_min)/(24*60-0);
 80083d8:	887a      	ldrh	r2, [r7, #2]
 80083da:	88bb      	ldrh	r3, [r7, #4]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	1c59      	adds	r1, r3, #1
 80083e0:	4b94      	ldr	r3, [pc, #592]	; (8008634 <drawSunlightGraph+0x324>)
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	4613      	mov	r3, r2
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	1a9b      	subs	r3, r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	461a      	mov	r2, r3
 80083ee:	4b91      	ldr	r3, [pc, #580]	; (8008634 <drawSunlightGraph+0x324>)
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	4413      	add	r3, r2
 80083f4:	fb01 f303 	mul.w	r3, r1, r3
 80083f8:	4a8d      	ldr	r2, [pc, #564]	; (8008630 <drawSunlightGraph+0x320>)
 80083fa:	fb82 1203 	smull	r1, r2, r2, r3
 80083fe:	441a      	add	r2, r3
 8008400:	1292      	asrs	r2, r2, #10
 8008402:	17db      	asrs	r3, r3, #31
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	b29a      	uxth	r2, r3
 8008408:	88bb      	ldrh	r3, [r7, #4]
 800840a:	4413      	add	r3, r2
 800840c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	lcdVLine(scaleXrise, yPos-5, yPos+5, 2);
 8008410:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	1f59      	subs	r1, r3, #5
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	1d5a      	adds	r2, r3, #5
 800841c:	2302      	movs	r3, #2
 800841e:	f7fa fe51 	bl	80030c4 <lcdVLine>
	lcdVLine(scaleXset, yPos, yPos+5, 2);
 8008422:	f8b7 007a 	ldrh.w	r0, [r7, #122]	; 0x7a
 8008426:	79f9      	ldrb	r1, [r7, #7]
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	1d5a      	adds	r2, r3, #5
 800842c:	2302      	movs	r3, #2
 800842e:	f7fa fe49 	bl	80030c4 <lcdVLine>
	lcdVLine(scaleXnoon, yPos-5, yPos+5, 2);
 8008432:	f8b7 0078 	ldrh.w	r0, [r7, #120]	; 0x78
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	1f59      	subs	r1, r3, #5
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	1d5a      	adds	r2, r3, #5
 800843e:	2302      	movs	r3, #2
 8008440:	f7fa fe40 	bl	80030c4 <lcdVLine>
//	lcdVLine(scaleXnow, yPos-10, yPos+10, 2);

	char textBuffer[50] = {0};
 8008444:	2300      	movs	r3, #0
 8008446:	63bb      	str	r3, [r7, #56]	; 0x38
 8008448:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800844c:	222e      	movs	r2, #46	; 0x2e
 800844e:	2100      	movs	r1, #0
 8008450:	4618      	mov	r0, r3
 8008452:	f00b fc1d 	bl	8013c90 <memset>
	sprintf(&textBuffer, "%02d:%02d", suntimes->sunrise/60, suntimes->sunrise%60);
 8008456:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a76      	ldr	r2, [pc, #472]	; (8008638 <drawSunlightGraph+0x328>)
 800845e:	fb82 1203 	smull	r1, r2, r2, r3
 8008462:	441a      	add	r2, r3
 8008464:	1152      	asrs	r2, r2, #5
 8008466:	17db      	asrs	r3, r3, #31
 8008468:	1ad4      	subs	r4, r2, r3
 800846a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	4b71      	ldr	r3, [pc, #452]	; (8008638 <drawSunlightGraph+0x328>)
 8008472:	fb83 1302 	smull	r1, r3, r3, r2
 8008476:	4413      	add	r3, r2
 8008478:	1159      	asrs	r1, r3, #5
 800847a:	17d3      	asrs	r3, r2, #31
 800847c:	1ac9      	subs	r1, r1, r3
 800847e:	460b      	mov	r3, r1
 8008480:	011b      	lsls	r3, r3, #4
 8008482:	1a5b      	subs	r3, r3, r1
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	1ad1      	subs	r1, r2, r3
 8008488:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800848c:	460b      	mov	r3, r1
 800848e:	4622      	mov	r2, r4
 8008490:	496a      	ldr	r1, [pc, #424]	; (800863c <drawSunlightGraph+0x32c>)
 8008492:	f00c fd2b 	bl	8014eec <siprintf>
	lcdPutStr(scaleXrise-42, yPos-15, textBuffer, smallestFont);
 8008496:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800849a:	3b2a      	subs	r3, #42	; 0x2a
 800849c:	b298      	uxth	r0, r3
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	3b0f      	subs	r3, #15
 80084a2:	b2d9      	uxtb	r1, r3
 80084a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80084a8:	4b65      	ldr	r3, [pc, #404]	; (8008640 <drawSunlightGraph+0x330>)
 80084aa:	f7fa fd8b 	bl	8002fc4 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", suntimes->sunset/60, suntimes->sunset%60);
 80084ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	4a60      	ldr	r2, [pc, #384]	; (8008638 <drawSunlightGraph+0x328>)
 80084b6:	fb82 1203 	smull	r1, r2, r2, r3
 80084ba:	441a      	add	r2, r3
 80084bc:	1152      	asrs	r2, r2, #5
 80084be:	17db      	asrs	r3, r3, #31
 80084c0:	1ad4      	subs	r4, r2, r3
 80084c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	4b5b      	ldr	r3, [pc, #364]	; (8008638 <drawSunlightGraph+0x328>)
 80084ca:	fb83 1302 	smull	r1, r3, r3, r2
 80084ce:	4413      	add	r3, r2
 80084d0:	1159      	asrs	r1, r3, #5
 80084d2:	17d3      	asrs	r3, r2, #31
 80084d4:	1ac9      	subs	r1, r1, r3
 80084d6:	460b      	mov	r3, r1
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	1a5b      	subs	r3, r3, r1
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	1ad1      	subs	r1, r2, r3
 80084e0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80084e4:	460b      	mov	r3, r1
 80084e6:	4622      	mov	r2, r4
 80084e8:	4954      	ldr	r1, [pc, #336]	; (800863c <drawSunlightGraph+0x32c>)
 80084ea:	f00c fcff 	bl	8014eec <siprintf>
	lcdPutStr(scaleXset-19, yPos+5, textBuffer, smallestFont);
 80084ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80084f2:	3b13      	subs	r3, #19
 80084f4:	b298      	uxth	r0, r3
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	3305      	adds	r3, #5
 80084fa:	b2d9      	uxtb	r1, r3
 80084fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008500:	4b4f      	ldr	r3, [pc, #316]	; (8008640 <drawSunlightGraph+0x330>)
 8008502:	f7fa fd5f 	bl	8002fc4 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", suntimes->noon/60, suntimes->noon%60);
 8008506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	4a4a      	ldr	r2, [pc, #296]	; (8008638 <drawSunlightGraph+0x328>)
 800850e:	fb82 1203 	smull	r1, r2, r2, r3
 8008512:	441a      	add	r2, r3
 8008514:	1152      	asrs	r2, r2, #5
 8008516:	17db      	asrs	r3, r3, #31
 8008518:	1ad4      	subs	r4, r2, r3
 800851a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	4b45      	ldr	r3, [pc, #276]	; (8008638 <drawSunlightGraph+0x328>)
 8008522:	fb83 1302 	smull	r1, r3, r3, r2
 8008526:	4413      	add	r3, r2
 8008528:	1159      	asrs	r1, r3, #5
 800852a:	17d3      	asrs	r3, r2, #31
 800852c:	1ac9      	subs	r1, r1, r3
 800852e:	460b      	mov	r3, r1
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	1a5b      	subs	r3, r3, r1
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	1ad1      	subs	r1, r2, r3
 8008538:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800853c:	460b      	mov	r3, r1
 800853e:	4622      	mov	r2, r4
 8008540:	493e      	ldr	r1, [pc, #248]	; (800863c <drawSunlightGraph+0x32c>)
 8008542:	f00c fcd3 	bl	8014eec <siprintf>
	lcdPutStr(scaleXnoon+4, yPos-15, textBuffer, smallestFont);
 8008546:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800854a:	3304      	adds	r3, #4
 800854c:	b298      	uxth	r0, r3
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	3b0f      	subs	r3, #15
 8008552:	b2d9      	uxtb	r1, r3
 8008554:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008558:	4b39      	ldr	r3, [pc, #228]	; (8008640 <drawSunlightGraph+0x330>)
 800855a:	f7fa fd33 	bl	8002fc4 <lcdPutStr>
	struct solarAngles angles = {0,0};
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	633b      	str	r3, [r7, #48]	; 0x30
 8008564:	f04f 0300 	mov.w	r3, #0
 8008568:	637b      	str	r3, [r7, #52]	; 0x34
	struct tm myTime;
	myTime = testTime;
 800856a:	4b32      	ldr	r3, [pc, #200]	; (8008634 <drawSunlightGraph+0x324>)
 800856c:	f107 040c 	add.w	r4, r7, #12
 8008570:	461d      	mov	r5, r3
 8008572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800857a:	682b      	ldr	r3, [r5, #0]
 800857c:	6023      	str	r3, [r4, #0]
	int sunElev;

	calcSolarAngles(&angles, &testTime, location);
 800857e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008582:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008586:	492b      	ldr	r1, [pc, #172]	; (8008634 <drawSunlightGraph+0x324>)
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe fb45 	bl	8006c18 <calcSolarAngles>
	sunElev = (90-angles.za*180/M_PI)*height/90;
 800858e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008592:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8008644 <drawSunlightGraph+0x334>
 8008596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800859a:	ee17 0a90 	vmov	r0, s15
 800859e:	f7f7 fff3 	bl	8000588 <__aeabi_f2d>
 80085a2:	a321      	add	r3, pc, #132	; (adr r3, 8008628 <drawSunlightGraph+0x318>)
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f7f8 f970 	bl	800088c <__aeabi_ddiv>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	f04f 0000 	mov.w	r0, #0
 80085b4:	4924      	ldr	r1, [pc, #144]	; (8008648 <drawSunlightGraph+0x338>)
 80085b6:	f7f7 fe87 	bl	80002c8 <__aeabi_dsub>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4614      	mov	r4, r2
 80085c0:	461d      	mov	r5, r3
 80085c2:	79bb      	ldrb	r3, [r7, #6]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7f7 ffcd 	bl	8000564 <__aeabi_i2d>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4620      	mov	r0, r4
 80085d0:	4629      	mov	r1, r5
 80085d2:	f7f8 f831 	bl	8000638 <__aeabi_dmul>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4610      	mov	r0, r2
 80085dc:	4619      	mov	r1, r3
 80085de:	f04f 0200 	mov.w	r2, #0
 80085e2:	4b19      	ldr	r3, [pc, #100]	; (8008648 <drawSunlightGraph+0x338>)
 80085e4:	f7f8 f952 	bl	800088c <__aeabi_ddiv>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4610      	mov	r0, r2
 80085ee:	4619      	mov	r1, r3
 80085f0:	f7f8 fad2 	bl	8000b98 <__aeabi_d2iz>
 80085f4:	4603      	mov	r3, r0
 80085f6:	673b      	str	r3, [r7, #112]	; 0x70
	lcdRect(scaleXnow-1, scaleXnow+1, yPos-sunElev-1, yPos-sunElev+1, 1);
 80085f8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80085fc:	1e58      	subs	r0, r3, #1
 80085fe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008602:	1c59      	adds	r1, r3, #1
 8008604:	79fa      	ldrb	r2, [r7, #7]
 8008606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	1e5c      	subs	r4, r3, #1
 800860c:	79fa      	ldrb	r2, [r7, #7]
 800860e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	3301      	adds	r3, #1
 8008614:	2201      	movs	r2, #1
 8008616:	9200      	str	r2, [sp, #0]
 8008618:	4622      	mov	r2, r4
 800861a:	f7fb faf1 	bl	8003c00 <lcdRect>

	for(uint16_t pix = x1; pix <= x2; pix+=3){
 800861e:	88bb      	ldrh	r3, [r7, #4]
 8008620:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8008624:	e099      	b.n	800875a <drawSunlightGraph+0x44a>
 8008626:	bf00      	nop
 8008628:	54442d18 	.word	0x54442d18
 800862c:	400921fb 	.word	0x400921fb
 8008630:	b60b60b7 	.word	0xb60b60b7
 8008634:	20005db8 	.word	0x20005db8
 8008638:	88888889 	.word	0x88888889
 800863c:	0801c7ac 	.word	0x0801c7ac
 8008640:	08031504 	.word	0x08031504
 8008644:	43340000 	.word	0x43340000
 8008648:	40568000 	.word	0x40568000
		uint16_t min_sum = (pix-x1)*24*60/(x2-x1);
 800864c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8008650:	88bb      	ldrh	r3, [r7, #4]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8008658:	fb03 f202 	mul.w	r2, r3, r2
 800865c:	8879      	ldrh	r1, [r7, #2]
 800865e:	88bb      	ldrh	r3, [r7, #4]
 8008660:	1acb      	subs	r3, r1, r3
 8008662:	fb92 f3f3 	sdiv	r3, r2, r3
 8008666:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		uint8_t hrs = min_sum/60;
 800866a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800866e:	4a42      	ldr	r2, [pc, #264]	; (8008778 <drawSunlightGraph+0x468>)
 8008670:	fba2 2303 	umull	r2, r3, r2, r3
 8008674:	095b      	lsrs	r3, r3, #5
 8008676:	b29b      	uxth	r3, r3
 8008678:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		uint8_t min = min_sum%60;
 800867c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8008680:	4b3d      	ldr	r3, [pc, #244]	; (8008778 <drawSunlightGraph+0x468>)
 8008682:	fba3 1302 	umull	r1, r3, r3, r2
 8008686:	0959      	lsrs	r1, r3, #5
 8008688:	460b      	mov	r3, r1
 800868a:	011b      	lsls	r3, r3, #4
 800868c:	1a5b      	subs	r3, r3, r1
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	b29b      	uxth	r3, r3
 8008694:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
		myTime.tm_hour = hrs;
 8008698:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800869c:	617b      	str	r3, [r7, #20]
		myTime.tm_min = min;
 800869e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80086a2:	613b      	str	r3, [r7, #16]
		calcSolarAngles(&angles, &myTime, location);
 80086a4:	f107 010c 	add.w	r1, r7, #12
 80086a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fe fab1 	bl	8006c18 <calcSolarAngles>
		sunElev = (90-angles.za*180/M_PI)*height/90;
 80086b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80086ba:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800877c <drawSunlightGraph+0x46c>
 80086be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086c2:	ee17 0a90 	vmov	r0, s15
 80086c6:	f7f7 ff5f 	bl	8000588 <__aeabi_f2d>
 80086ca:	a329      	add	r3, pc, #164	; (adr r3, 8008770 <drawSunlightGraph+0x460>)
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f7f8 f8dc 	bl	800088c <__aeabi_ddiv>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	f04f 0000 	mov.w	r0, #0
 80086dc:	4928      	ldr	r1, [pc, #160]	; (8008780 <drawSunlightGraph+0x470>)
 80086de:	f7f7 fdf3 	bl	80002c8 <__aeabi_dsub>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4614      	mov	r4, r2
 80086e8:	461d      	mov	r5, r3
 80086ea:	79bb      	ldrb	r3, [r7, #6]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7f7 ff39 	bl	8000564 <__aeabi_i2d>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	4620      	mov	r0, r4
 80086f8:	4629      	mov	r1, r5
 80086fa:	f7f7 ff9d 	bl	8000638 <__aeabi_dmul>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4610      	mov	r0, r2
 8008704:	4619      	mov	r1, r3
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	4b1d      	ldr	r3, [pc, #116]	; (8008780 <drawSunlightGraph+0x470>)
 800870c:	f7f8 f8be 	bl	800088c <__aeabi_ddiv>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4610      	mov	r0, r2
 8008716:	4619      	mov	r1, r3
 8008718:	f7f8 fa3e 	bl	8000b98 <__aeabi_d2iz>
 800871c:	4603      	mov	r3, r0
 800871e:	673b      	str	r3, [r7, #112]	; 0x70
		lcdPutPix(pix, yPos-sunElev, 1);
 8008720:	f8b7 007e 	ldrh.w	r0, [r7, #126]	; 0x7e
 8008724:	79fa      	ldrb	r2, [r7, #7]
 8008726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2201      	movs	r2, #1
 800872c:	4619      	mov	r1, r3
 800872e:	f7fa fb25 	bl	8002d7c <lcdPutPix>
		if(pix < scaleXnow) lcdVLine(pix, yPos-sunElev, yPos, 1);
 8008732:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8008736:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800873a:	429a      	cmp	r2, r3
 800873c:	d208      	bcs.n	8008750 <drawSunlightGraph+0x440>
 800873e:	f8b7 007e 	ldrh.w	r0, [r7, #126]	; 0x7e
 8008742:	79fa      	ldrb	r2, [r7, #7]
 8008744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008746:	1ad1      	subs	r1, r2, r3
 8008748:	79fa      	ldrb	r2, [r7, #7]
 800874a:	2301      	movs	r3, #1
 800874c:	f7fa fcba 	bl	80030c4 <lcdVLine>
	for(uint16_t pix = x1; pix <= x2; pix+=3){
 8008750:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8008754:	3303      	adds	r3, #3
 8008756:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800875a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800875e:	887b      	ldrh	r3, [r7, #2]
 8008760:	429a      	cmp	r2, r3
 8008762:	f67f af73 	bls.w	800864c <drawSunlightGraph+0x33c>
	}
}
 8008766:	bf00      	nop
 8008768:	bf00      	nop
 800876a:	3780      	adds	r7, #128	; 0x80
 800876c:	46bd      	mov	sp, r7
 800876e:	bdb0      	pop	{r4, r5, r7, pc}
 8008770:	54442d18 	.word	0x54442d18
 8008774:	400921fb 	.word	0x400921fb
 8008778:	88888889 	.word	0x88888889
 800877c:	43340000 	.word	0x43340000
 8008780:	40568000 	.word	0x40568000

08008784 <setDefaultClbcks>:
#include "sdcardModule.h"
#include "contextMenu.h"
#include "fonts/fonts.h"
#include "File_Handling.h"

static void setDefaultClbcks(void){
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
	// module callbacks
//	btn_B2.onSinglePressHandler = &showCntxMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8008788:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <setDefaultClbcks+0x1c>)
 800878a:	4a06      	ldr	r2, [pc, #24]	; (80087a4 <setDefaultClbcks+0x20>)
 800878c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800878e:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <setDefaultClbcks+0x24>)
 8008790:	4a06      	ldr	r2, [pc, #24]	; (80087ac <setDefaultClbcks+0x28>)
 8008792:	611a      	str	r2, [r3, #16]
}
 8008794:	bf00      	nop
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	20002660 	.word	0x20002660
 80087a4:	08002a8d 	.word	0x08002a8d
 80087a8:	200026a8 	.word	0x200026a8
 80087ac:	08002a9d 	.word	0x08002a9d

080087b0 <sdcardSetup>:
//static const struct ContextAction action2 = {"Unmount SD card", &setDateAction};
//static const struct ContextAction action3 = {"Customize", &setTimeAction};
//static const struct ContextAction action4 = {"Lock", &setTimeAction};
//static const struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void sdcardSetup(void){
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80087b4:	f7ff ffe6 	bl	8008784 <setDefaultClbcks>
//	setupCntxMenu(&setDefaultClbcks);
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 80087b8:	bf00      	nop
 80087ba:	bd80      	pop	{r7, pc}

080087bc <sdcardMain>:
void sdcardMain(void){
 80087bc:	b580      	push	{r7, lr}
 80087be:	b0a8      	sub	sp, #160	; 0xa0
 80087c0:	af00      	add	r7, sp, #0
	char title[50] = {0};
 80087c2:	2300      	movs	r3, #0
 80087c4:	667b      	str	r3, [r7, #100]	; 0x64
 80087c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80087ca:	222e      	movs	r2, #46	; 0x2e
 80087cc:	2100      	movs	r1, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f00b fa5e 	bl	8013c90 <memset>
	sprintf(&title, "SD card explorer");
 80087d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80087d8:	492f      	ldr	r1, [pc, #188]	; (8008898 <sdcardMain+0xdc>)
 80087da:	4618      	mov	r0, r3
 80087dc:	f00c fb86 	bl	8014eec <siprintf>
	lcdPutStr(0, 0, title, smallestFont);
 80087e0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80087e4:	4b2d      	ldr	r3, [pc, #180]	; (800889c <sdcardMain+0xe0>)
 80087e6:	2100      	movs	r1, #0
 80087e8:	2000      	movs	r0, #0
 80087ea:	f7fa fbeb 	bl	8002fc4 <lcdPutStr>
	char freeTotal[50];
	Check_SD_Space(&freeTotal);
 80087ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7f8 febc 	bl	8001570 <Check_SD_Space>
	sprintf(&title, "Free/total space: %s [kB]", freeTotal);
 80087f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80087fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008800:	4927      	ldr	r1, [pc, #156]	; (80088a0 <sdcardMain+0xe4>)
 8008802:	4618      	mov	r0, r3
 8008804:	f00c fb72 	bl	8014eec <siprintf>
	lcdPutStr(0, 12, title, smallestFont);
 8008808:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800880c:	4b23      	ldr	r3, [pc, #140]	; (800889c <sdcardMain+0xe0>)
 800880e:	210c      	movs	r1, #12
 8008810:	2000      	movs	r0, #0
 8008812:	f7fa fbd7 	bl	8002fc4 <lcdPutStr>

    DIR dir;
	UINT i;
	char *path = malloc(20*sizeof (char));
 8008816:	2014      	movs	r0, #20
 8008818:	f00b fa1c 	bl	8013c54 <malloc>
 800881c:	4603      	mov	r3, r0
 800881e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	sprintf (path, "%s","/");
 8008822:	4a20      	ldr	r2, [pc, #128]	; (80088a4 <sdcardMain+0xe8>)
 8008824:	4920      	ldr	r1, [pc, #128]	; (80088a8 <sdcardMain+0xec>)
 8008826:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800882a:	f00c fb5f 	bl	8014eec <siprintf>
    f_opendir(&dir, path);                       /* Open the directory */
 800882e:	463b      	mov	r3, r7
 8008830:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008834:	4618      	mov	r0, r3
 8008836:	f00a fe36 	bl	80134a6 <f_opendir>
	for(uint8_t i = 1; i<10; i++){
 800883a:	2301      	movs	r3, #1
 800883c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8008840:	e01a      	b.n	8008878 <sdcardMain+0xbc>
		Scan_SD_my(&dir, &title);
 8008842:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008846:	463b      	mov	r3, r7
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7f8 fc26 	bl	800109c <Scan_SD_my>
		lcdPutStr(0, 12+i*12, title, smallestFont);
 8008850:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008854:	3301      	adds	r3, #1
 8008856:	b2db      	uxtb	r3, r3
 8008858:	461a      	mov	r2, r3
 800885a:	0052      	lsls	r2, r2, #1
 800885c:	4413      	add	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	b2d9      	uxtb	r1, r3
 8008862:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008866:	4b0d      	ldr	r3, [pc, #52]	; (800889c <sdcardMain+0xe0>)
 8008868:	2000      	movs	r0, #0
 800886a:	f7fa fbab 	bl	8002fc4 <lcdPutStr>
	for(uint8_t i = 1; i<10; i++){
 800886e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008872:	3301      	adds	r3, #1
 8008874:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8008878:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800887c:	2b09      	cmp	r3, #9
 800887e:	d9e0      	bls.n	8008842 <sdcardMain+0x86>
	}
	f_closedir(&dir);
 8008880:	463b      	mov	r3, r7
 8008882:	4618      	mov	r0, r3
 8008884:	f00a fe82 	bl	801358c <f_closedir>
    free(path);
 8008888:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800888c:	f00b f9ea 	bl	8013c64 <free>

//	lcdPutStr(0,60, fileText, smallestFont);
//	lcdRefresh();
//	enableCntxMenu();
}
 8008890:	bf00      	nop
 8008892:	37a0      	adds	r7, #160	; 0xa0
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	0801c900 	.word	0x0801c900
 800889c:	0803a340 	.word	0x0803a340
 80088a0:	0801c914 	.word	0x0801c914
 80088a4:	0801c930 	.word	0x0801c930
 80088a8:	0801c934 	.word	0x0801c934

080088ac <prevPage>:
//#include "fonts/zekton24.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
	if(currentPage>0){
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <prevPage+0x30>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d006      	beq.n	80088c6 <prevPage+0x1a>
		currentPage--;
 80088b8:	4b08      	ldr	r3, [pc, #32]	; (80088dc <prevPage+0x30>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	3b01      	subs	r3, #1
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	4b06      	ldr	r3, [pc, #24]	; (80088dc <prevPage+0x30>)
 80088c2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 80088c4:	e005      	b.n	80088d2 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 80088c6:	4b06      	ldr	r3, [pc, #24]	; (80088e0 <prevPage+0x34>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	4b03      	ldr	r3, [pc, #12]	; (80088dc <prevPage+0x30>)
 80088d0:	701a      	strb	r2, [r3, #0]
}
 80088d2:	bf00      	nop
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	20005ddd 	.word	0x20005ddd
 80088e0:	200001ed 	.word	0x200001ed

080088e4 <nextPage>:
void nextPage(void){
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 80088e8:	4b0b      	ldr	r3, [pc, #44]	; (8008918 <nextPage+0x34>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	4b0b      	ldr	r3, [pc, #44]	; (800891c <nextPage+0x38>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	429a      	cmp	r2, r3
 80088f6:	da06      	bge.n	8008906 <nextPage+0x22>
		currentPage++;
 80088f8:	4b07      	ldr	r3, [pc, #28]	; (8008918 <nextPage+0x34>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	3301      	adds	r3, #1
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	4b05      	ldr	r3, [pc, #20]	; (8008918 <nextPage+0x34>)
 8008902:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 8008904:	e002      	b.n	800890c <nextPage+0x28>
		currentPage=0;
 8008906:	4b04      	ldr	r3, [pc, #16]	; (8008918 <nextPage+0x34>)
 8008908:	2200      	movs	r2, #0
 800890a:	701a      	strb	r2, [r3, #0]
}
 800890c:	bf00      	nop
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20005ddd 	.word	0x20005ddd
 800891c:	200001ed 	.word	0x200001ed

08008920 <showPage1>:

void showPage1(void){
 8008920:	b580      	push	{r7, lr}
 8008922:	b092      	sub	sp, #72	; 0x48
 8008924:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 8008926:	2300      	movs	r3, #0
 8008928:	623b      	str	r3, [r7, #32]
 800892a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800892e:	2200      	movs	r2, #0
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	605a      	str	r2, [r3, #4]
 8008934:	609a      	str	r2, [r3, #8]
 8008936:	60da      	str	r2, [r3, #12]
 8008938:	611a      	str	r2, [r3, #16]
 800893a:	615a      	str	r2, [r3, #20]
 800893c:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 800893e:	2300      	movs	r3, #0
 8008940:	603b      	str	r3, [r7, #0]
 8008942:	1d3b      	adds	r3, r7, #4
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	605a      	str	r2, [r3, #4]
 800894a:	609a      	str	r2, [r3, #8]
 800894c:	60da      	str	r2, [r3, #12]
 800894e:	611a      	str	r2, [r3, #16]
 8008950:	615a      	str	r2, [r3, #20]
 8008952:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8008954:	4b17      	ldr	r3, [pc, #92]	; (80089b4 <showPage1+0x94>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	461a      	mov	r2, r3
 800895a:	4b16      	ldr	r3, [pc, #88]	; (80089b4 <showPage1+0x94>)
 800895c:	785b      	ldrb	r3, [r3, #1]
 800895e:	4619      	mov	r1, r3
 8008960:	4b14      	ldr	r3, [pc, #80]	; (80089b4 <showPage1+0x94>)
 8008962:	789b      	ldrb	r3, [r3, #2]
 8008964:	4638      	mov	r0, r7
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	460b      	mov	r3, r1
 800896a:	4913      	ldr	r1, [pc, #76]	; (80089b8 <showPage1+0x98>)
 800896c:	f00c fabe 	bl	8014eec <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 8008970:	463a      	mov	r2, r7
 8008972:	4b12      	ldr	r3, [pc, #72]	; (80089bc <showPage1+0x9c>)
 8008974:	210b      	movs	r1, #11
 8008976:	200e      	movs	r0, #14
 8008978:	f7fa fb24 	bl	8002fc4 <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 800897c:	2301      	movs	r3, #1
 800897e:	2227      	movs	r2, #39	; 0x27
 8008980:	2106      	movs	r1, #6
 8008982:	2001      	movs	r0, #1
 8008984:	f7fa fb9e 	bl	80030c4 <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 8008988:	2301      	movs	r3, #1
 800898a:	2228      	movs	r2, #40	; 0x28
 800898c:	2105      	movs	r1, #5
 800898e:	2002      	movs	r0, #2
 8008990:	f7fa fb98 	bl	80030c4 <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 8008994:	2301      	movs	r3, #1
 8008996:	2228      	movs	r2, #40	; 0x28
 8008998:	2105      	movs	r1, #5
 800899a:	2003      	movs	r0, #3
 800899c:	f7fa fb92 	bl	80030c4 <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 80089a0:	2301      	movs	r3, #1
 80089a2:	2227      	movs	r2, #39	; 0x27
 80089a4:	2106      	movs	r1, #6
 80089a6:	2004      	movs	r0, #4
 80089a8:	f7fa fb8c 	bl	80030c4 <lcdVLine>
}
 80089ac:	bf00      	nop
 80089ae:	3740      	adds	r7, #64	; 0x40
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	200057f0 	.word	0x200057f0
 80089b8:	0801c9f0 	.word	0x0801c9f0
 80089bc:	0803f2b4 	.word	0x0803f2b4

080089c0 <showPage2>:
void showPage2(void){
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80089c6:	2300      	movs	r3, #0
 80089c8:	603b      	str	r3, [r7, #0]
 80089ca:	1d3b      	adds	r3, r7, #4
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	605a      	str	r2, [r3, #4]
 80089d2:	609a      	str	r2, [r3, #8]
 80089d4:	60da      	str	r2, [r3, #12]
 80089d6:	611a      	str	r2, [r3, #16]
 80089d8:	615a      	str	r2, [r3, #20]
 80089da:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 80089dc:	463b      	mov	r3, r7
 80089de:	4913      	ldr	r1, [pc, #76]	; (8008a2c <showPage2+0x6c>)
 80089e0:	4618      	mov	r0, r3
 80089e2:	f00c fa83 	bl	8014eec <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 80089e6:	463a      	mov	r2, r7
 80089e8:	4b11      	ldr	r3, [pc, #68]	; (8008a30 <showPage2+0x70>)
 80089ea:	2132      	movs	r1, #50	; 0x32
 80089ec:	200e      	movs	r0, #14
 80089ee:	f7fa fae9 	bl	8002fc4 <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 80089f2:	2301      	movs	r3, #1
 80089f4:	224e      	movs	r2, #78	; 0x4e
 80089f6:	212d      	movs	r1, #45	; 0x2d
 80089f8:	2001      	movs	r0, #1
 80089fa:	f7fa fb63 	bl	80030c4 <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 80089fe:	2301      	movs	r3, #1
 8008a00:	224f      	movs	r2, #79	; 0x4f
 8008a02:	212c      	movs	r1, #44	; 0x2c
 8008a04:	2002      	movs	r0, #2
 8008a06:	f7fa fb5d 	bl	80030c4 <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	224f      	movs	r2, #79	; 0x4f
 8008a0e:	212c      	movs	r1, #44	; 0x2c
 8008a10:	2003      	movs	r0, #3
 8008a12:	f7fa fb57 	bl	80030c4 <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8008a16:	2301      	movs	r3, #1
 8008a18:	224e      	movs	r2, #78	; 0x4e
 8008a1a:	212d      	movs	r1, #45	; 0x2d
 8008a1c:	2004      	movs	r0, #4
 8008a1e:	f7fa fb51 	bl	80030c4 <lcdVLine>
}
 8008a22:	bf00      	nop
 8008a24:	3720      	adds	r7, #32
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	0801ca00 	.word	0x0801ca00
 8008a30:	0803f2b4 	.word	0x0803f2b4

08008a34 <showPage3>:
void showPage3(void){
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b088      	sub	sp, #32
 8008a38:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	603b      	str	r3, [r7, #0]
 8008a3e:	1d3b      	adds	r3, r7, #4
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	605a      	str	r2, [r3, #4]
 8008a46:	609a      	str	r2, [r3, #8]
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	611a      	str	r2, [r3, #16]
 8008a4c:	615a      	str	r2, [r3, #20]
 8008a4e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 8008a50:	463b      	mov	r3, r7
 8008a52:	4913      	ldr	r1, [pc, #76]	; (8008aa0 <showPage3+0x6c>)
 8008a54:	4618      	mov	r0, r3
 8008a56:	f00c fa49 	bl	8014eec <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8008a5a:	463a      	mov	r2, r7
 8008a5c:	4b11      	ldr	r3, [pc, #68]	; (8008aa4 <showPage3+0x70>)
 8008a5e:	2100      	movs	r1, #0
 8008a60:	2000      	movs	r0, #0
 8008a62:	f7fa faaf 	bl	8002fc4 <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8008a66:	2301      	movs	r3, #1
 8008a68:	2275      	movs	r2, #117	; 0x75
 8008a6a:	2154      	movs	r1, #84	; 0x54
 8008a6c:	2001      	movs	r0, #1
 8008a6e:	f7fa fb29 	bl	80030c4 <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8008a72:	2301      	movs	r3, #1
 8008a74:	2276      	movs	r2, #118	; 0x76
 8008a76:	2153      	movs	r1, #83	; 0x53
 8008a78:	2002      	movs	r0, #2
 8008a7a:	f7fa fb23 	bl	80030c4 <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8008a7e:	2301      	movs	r3, #1
 8008a80:	2276      	movs	r2, #118	; 0x76
 8008a82:	2153      	movs	r1, #83	; 0x53
 8008a84:	2003      	movs	r0, #3
 8008a86:	f7fa fb1d 	bl	80030c4 <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	2275      	movs	r2, #117	; 0x75
 8008a8e:	2154      	movs	r1, #84	; 0x54
 8008a90:	2004      	movs	r0, #4
 8008a92:	f7fa fb17 	bl	80030c4 <lcdVLine>
}
 8008a96:	bf00      	nop
 8008a98:	3720      	adds	r7, #32
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	0801ca04 	.word	0x0801ca04
 8008aa4:	0803f2b4 	.word	0x0803f2b4

08008aa8 <showPage4>:
void showPage4(void){
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8008aae:	2300      	movs	r3, #0
 8008ab0:	603b      	str	r3, [r7, #0]
 8008ab2:	1d3b      	adds	r3, r7, #4
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	605a      	str	r2, [r3, #4]
 8008aba:	609a      	str	r2, [r3, #8]
 8008abc:	60da      	str	r2, [r3, #12]
 8008abe:	611a      	str	r2, [r3, #16]
 8008ac0:	615a      	str	r2, [r3, #20]
 8008ac2:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	4913      	ldr	r1, [pc, #76]	; (8008b14 <showPage4+0x6c>)
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f00c fa0f 	bl	8014eec <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8008ace:	463a      	mov	r2, r7
 8008ad0:	4b11      	ldr	r3, [pc, #68]	; (8008b18 <showPage4+0x70>)
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f7fa fa75 	bl	8002fc4 <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8008ada:	2301      	movs	r3, #1
 8008adc:	229c      	movs	r2, #156	; 0x9c
 8008ade:	217b      	movs	r1, #123	; 0x7b
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	f7fa faef 	bl	80030c4 <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	229d      	movs	r2, #157	; 0x9d
 8008aea:	217a      	movs	r1, #122	; 0x7a
 8008aec:	2002      	movs	r0, #2
 8008aee:	f7fa fae9 	bl	80030c4 <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8008af2:	2301      	movs	r3, #1
 8008af4:	229d      	movs	r2, #157	; 0x9d
 8008af6:	217a      	movs	r1, #122	; 0x7a
 8008af8:	2003      	movs	r0, #3
 8008afa:	f7fa fae3 	bl	80030c4 <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8008afe:	2301      	movs	r3, #1
 8008b00:	229c      	movs	r2, #156	; 0x9c
 8008b02:	217b      	movs	r1, #123	; 0x7b
 8008b04:	2004      	movs	r0, #4
 8008b06:	f7fa fadd 	bl	80030c4 <lcdVLine>
}
 8008b0a:	bf00      	nop
 8008b0c:	3720      	adds	r7, #32
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	0801ca10 	.word	0x0801ca10
 8008b18:	0803f2b4 	.word	0x0803f2b4

08008b1c <showPage5>:
void showPage5(void){
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8008b22:	2300      	movs	r3, #0
 8008b24:	603b      	str	r3, [r7, #0]
 8008b26:	1d3b      	adds	r3, r7, #4
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	605a      	str	r2, [r3, #4]
 8008b2e:	609a      	str	r2, [r3, #8]
 8008b30:	60da      	str	r2, [r3, #12]
 8008b32:	611a      	str	r2, [r3, #16]
 8008b34:	615a      	str	r2, [r3, #20]
 8008b36:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 8008b38:	463b      	mov	r3, r7
 8008b3a:	4925      	ldr	r1, [pc, #148]	; (8008bd0 <showPage5+0xb4>)
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f00c f9d5 	bl	8014eec <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 8008b42:	463a      	mov	r2, r7
 8008b44:	4b23      	ldr	r3, [pc, #140]	; (8008bd4 <showPage5+0xb8>)
 8008b46:	2100      	movs	r1, #0
 8008b48:	200a      	movs	r0, #10
 8008b4a:	f7fa fa3b 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 8008b4e:	463a      	mov	r2, r7
 8008b50:	4b21      	ldr	r3, [pc, #132]	; (8008bd8 <showPage5+0xbc>)
 8008b52:	210f      	movs	r1, #15
 8008b54:	200a      	movs	r0, #10
 8008b56:	f7fa fa35 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 8008b5a:	463a      	mov	r2, r7
 8008b5c:	4b1f      	ldr	r3, [pc, #124]	; (8008bdc <showPage5+0xc0>)
 8008b5e:	2132      	movs	r1, #50	; 0x32
 8008b60:	200a      	movs	r0, #10
 8008b62:	f7fa fa2f 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 8008b66:	463a      	mov	r2, r7
 8008b68:	4b1d      	ldr	r3, [pc, #116]	; (8008be0 <showPage5+0xc4>)
 8008b6a:	213c      	movs	r1, #60	; 0x3c
 8008b6c:	200a      	movs	r0, #10
 8008b6e:	f7fa fa29 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 8008b72:	463a      	mov	r2, r7
 8008b74:	4b1b      	ldr	r3, [pc, #108]	; (8008be4 <showPage5+0xc8>)
 8008b76:	215a      	movs	r1, #90	; 0x5a
 8008b78:	200a      	movs	r0, #10
 8008b7a:	f7fa fa23 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 8008b7e:	463a      	mov	r2, r7
 8008b80:	4b19      	ldr	r3, [pc, #100]	; (8008be8 <showPage5+0xcc>)
 8008b82:	2178      	movs	r1, #120	; 0x78
 8008b84:	200a      	movs	r0, #10
 8008b86:	f7fa fa1d 	bl	8002fc4 <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 8008b8a:	463a      	mov	r2, r7
 8008b8c:	4b17      	ldr	r3, [pc, #92]	; (8008bec <showPage5+0xd0>)
 8008b8e:	2196      	movs	r1, #150	; 0x96
 8008b90:	200a      	movs	r0, #10
 8008b92:	f7fa fa17 	bl	8002fc4 <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8008b96:	2301      	movs	r3, #1
 8008b98:	22c3      	movs	r2, #195	; 0xc3
 8008b9a:	21a2      	movs	r1, #162	; 0xa2
 8008b9c:	2001      	movs	r0, #1
 8008b9e:	f7fa fa91 	bl	80030c4 <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	22c4      	movs	r2, #196	; 0xc4
 8008ba6:	21a1      	movs	r1, #161	; 0xa1
 8008ba8:	2002      	movs	r0, #2
 8008baa:	f7fa fa8b 	bl	80030c4 <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8008bae:	2301      	movs	r3, #1
 8008bb0:	22c4      	movs	r2, #196	; 0xc4
 8008bb2:	21a1      	movs	r1, #161	; 0xa1
 8008bb4:	2003      	movs	r0, #3
 8008bb6:	f7fa fa85 	bl	80030c4 <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8008bba:	2301      	movs	r3, #1
 8008bbc:	22c3      	movs	r2, #195	; 0xc3
 8008bbe:	21a2      	movs	r1, #162	; 0xa2
 8008bc0:	2004      	movs	r0, #4
 8008bc2:	f7fa fa7f 	bl	80030c4 <lcdVLine>
}
 8008bc6:	bf00      	nop
 8008bc8:	3720      	adds	r7, #32
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	0801ca1c 	.word	0x0801ca1c
 8008bd4:	0803d1a4 	.word	0x0803d1a4
 8008bd8:	0803dcec 	.word	0x0803dcec
 8008bdc:	0803a7bc 	.word	0x0803a7bc
 8008be0:	0803ac38 	.word	0x0803ac38
 8008be4:	0803bc94 	.word	0x0803bc94
 8008be8:	0803c71c 	.word	0x0803c71c
 8008bec:	0803f2b4 	.word	0x0803f2b4

08008bf0 <showPage6>:
void showPage6(void){
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	22ea      	movs	r2, #234	; 0xea
 8008bfa:	21c9      	movs	r1, #201	; 0xc9
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	f7fa fa61 	bl	80030c4 <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8008c02:	2301      	movs	r3, #1
 8008c04:	22eb      	movs	r2, #235	; 0xeb
 8008c06:	21c8      	movs	r1, #200	; 0xc8
 8008c08:	2002      	movs	r0, #2
 8008c0a:	f7fa fa5b 	bl	80030c4 <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8008c0e:	2301      	movs	r3, #1
 8008c10:	22eb      	movs	r2, #235	; 0xeb
 8008c12:	21c8      	movs	r1, #200	; 0xc8
 8008c14:	2003      	movs	r0, #3
 8008c16:	f7fa fa55 	bl	80030c4 <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	22ea      	movs	r2, #234	; 0xea
 8008c1e:	21c9      	movs	r1, #201	; 0xc9
 8008c20:	2004      	movs	r0, #4
 8008c22:	f7fa fa4f 	bl	80030c4 <lcdVLine>
		lcdRect(0,399,25,80,1);
 8008c26:	2301      	movs	r3, #1
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	2350      	movs	r3, #80	; 0x50
 8008c2c:	2219      	movs	r2, #25
 8008c2e:	f240 118f 	movw	r1, #399	; 0x18f
 8008c32:	2000      	movs	r0, #0
 8008c34:	f7fa ffe4 	bl	8003c00 <lcdRect>
		lcdRect(0,399,120,180,1);
 8008c38:	2301      	movs	r3, #1
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	23b4      	movs	r3, #180	; 0xb4
 8008c3e:	2278      	movs	r2, #120	; 0x78
 8008c40:	f240 118f 	movw	r1, #399	; 0x18f
 8008c44:	2000      	movs	r0, #0
 8008c46:	f7fa ffdb 	bl	8003c00 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	9302      	str	r3, [sp, #8]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	2303      	movs	r3, #3
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	2332      	movs	r3, #50	; 0x32
 8008c58:	220a      	movs	r2, #10
 8008c5a:	2132      	movs	r1, #50	; 0x32
 8008c5c:	200a      	movs	r0, #10
 8008c5e:	f7fa fff4 	bl	8003c4a <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 8008c62:	2301      	movs	r3, #1
 8008c64:	9302      	str	r3, [sp, #8]
 8008c66:	2301      	movs	r3, #1
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	2332      	movs	r3, #50	; 0x32
 8008c70:	220a      	movs	r2, #10
 8008c72:	2164      	movs	r1, #100	; 0x64
 8008c74:	203c      	movs	r0, #60	; 0x3c
 8008c76:	f7fa ffe8 	bl	8003c4a <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	9302      	str	r3, [sp, #8]
 8008c7e:	2302      	movs	r3, #2
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	2303      	movs	r3, #3
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	2332      	movs	r3, #50	; 0x32
 8008c88:	220a      	movs	r2, #10
 8008c8a:	2196      	movs	r1, #150	; 0x96
 8008c8c:	206e      	movs	r0, #110	; 0x6e
 8008c8e:	f7fa ffdc 	bl	8003c4a <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 8008c92:	2301      	movs	r3, #1
 8008c94:	9302      	str	r3, [sp, #8]
 8008c96:	2303      	movs	r3, #3
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	2332      	movs	r3, #50	; 0x32
 8008ca0:	220a      	movs	r2, #10
 8008ca2:	21c8      	movs	r1, #200	; 0xc8
 8008ca4:	20a0      	movs	r0, #160	; 0xa0
 8008ca6:	f7fa ffd0 	bl	8003c4a <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 8008caa:	2301      	movs	r3, #1
 8008cac:	9302      	str	r3, [sp, #8]
 8008cae:	2304      	movs	r3, #4
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	2332      	movs	r3, #50	; 0x32
 8008cb8:	220a      	movs	r2, #10
 8008cba:	21fa      	movs	r1, #250	; 0xfa
 8008cbc:	20d2      	movs	r0, #210	; 0xd2
 8008cbe:	f7fa ffc4 	bl	8003c4a <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	9302      	str	r3, [sp, #8]
 8008cc6:	2305      	movs	r3, #5
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	2303      	movs	r3, #3
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	2332      	movs	r3, #50	; 0x32
 8008cd0:	220a      	movs	r2, #10
 8008cd2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008cd6:	f44f 7082 	mov.w	r0, #260	; 0x104
 8008cda:	f7fa ffb6 	bl	8003c4a <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 8008cde:	2301      	movs	r3, #1
 8008ce0:	9302      	str	r3, [sp, #8]
 8008ce2:	2306      	movs	r3, #6
 8008ce4:	9301      	str	r3, [sp, #4]
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	2332      	movs	r3, #50	; 0x32
 8008cec:	220a      	movs	r2, #10
 8008cee:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008cf2:	f44f 709b 	mov.w	r0, #310	; 0x136
 8008cf6:	f7fa ffa8 	bl	8003c4a <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	9302      	str	r3, [sp, #8]
 8008cfe:	2307      	movs	r3, #7
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	2303      	movs	r3, #3
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	2364      	movs	r3, #100	; 0x64
 8008d08:	223c      	movs	r2, #60	; 0x3c
 8008d0a:	2132      	movs	r1, #50	; 0x32
 8008d0c:	200a      	movs	r0, #10
 8008d0e:	f7fa ff9c 	bl	8003c4a <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 8008d12:	2301      	movs	r3, #1
 8008d14:	9302      	str	r3, [sp, #8]
 8008d16:	2308      	movs	r3, #8
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	2364      	movs	r3, #100	; 0x64
 8008d20:	223c      	movs	r2, #60	; 0x3c
 8008d22:	2164      	movs	r1, #100	; 0x64
 8008d24:	203c      	movs	r0, #60	; 0x3c
 8008d26:	f7fa ff90 	bl	8003c4a <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	9302      	str	r3, [sp, #8]
 8008d2e:	2309      	movs	r3, #9
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	2303      	movs	r3, #3
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	2364      	movs	r3, #100	; 0x64
 8008d38:	223c      	movs	r2, #60	; 0x3c
 8008d3a:	2196      	movs	r1, #150	; 0x96
 8008d3c:	206e      	movs	r0, #110	; 0x6e
 8008d3e:	f7fa ff84 	bl	8003c4a <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 8008d42:	2301      	movs	r3, #1
 8008d44:	9302      	str	r3, [sp, #8]
 8008d46:	230a      	movs	r3, #10
 8008d48:	9301      	str	r3, [sp, #4]
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	2364      	movs	r3, #100	; 0x64
 8008d50:	223c      	movs	r2, #60	; 0x3c
 8008d52:	21c8      	movs	r1, #200	; 0xc8
 8008d54:	20a0      	movs	r0, #160	; 0xa0
 8008d56:	f7fa ff78 	bl	8003c4a <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	9302      	str	r3, [sp, #8]
 8008d5e:	230b      	movs	r3, #11
 8008d60:	9301      	str	r3, [sp, #4]
 8008d62:	2303      	movs	r3, #3
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	2364      	movs	r3, #100	; 0x64
 8008d68:	223c      	movs	r2, #60	; 0x3c
 8008d6a:	21fa      	movs	r1, #250	; 0xfa
 8008d6c:	20d2      	movs	r0, #210	; 0xd2
 8008d6e:	f7fa ff6c 	bl	8003c4a <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 8008d72:	2301      	movs	r3, #1
 8008d74:	9302      	str	r3, [sp, #8]
 8008d76:	230c      	movs	r3, #12
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	2364      	movs	r3, #100	; 0x64
 8008d80:	223c      	movs	r2, #60	; 0x3c
 8008d82:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008d86:	f44f 7082 	mov.w	r0, #260	; 0x104
 8008d8a:	f7fa ff5e 	bl	8003c4a <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 8008d8e:	2301      	movs	r3, #1
 8008d90:	9302      	str	r3, [sp, #8]
 8008d92:	230d      	movs	r3, #13
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	2303      	movs	r3, #3
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	2364      	movs	r3, #100	; 0x64
 8008d9c:	223c      	movs	r2, #60	; 0x3c
 8008d9e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008da2:	f44f 709b 	mov.w	r0, #310	; 0x136
 8008da6:	f7fa ff50 	bl	8003c4a <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 8008daa:	2301      	movs	r3, #1
 8008dac:	9302      	str	r3, [sp, #8]
 8008dae:	230e      	movs	r3, #14
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	2303      	movs	r3, #3
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	2396      	movs	r3, #150	; 0x96
 8008db8:	226e      	movs	r2, #110	; 0x6e
 8008dba:	2132      	movs	r1, #50	; 0x32
 8008dbc:	200a      	movs	r0, #10
 8008dbe:	f7fa ff44 	bl	8003c4a <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	9302      	str	r3, [sp, #8]
 8008dc6:	230f      	movs	r3, #15
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	2303      	movs	r3, #3
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	2396      	movs	r3, #150	; 0x96
 8008dd0:	226e      	movs	r2, #110	; 0x6e
 8008dd2:	2164      	movs	r1, #100	; 0x64
 8008dd4:	203c      	movs	r0, #60	; 0x3c
 8008dd6:	f7fa ff38 	bl	8003c4a <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 8008dda:	2301      	movs	r3, #1
 8008ddc:	9302      	str	r3, [sp, #8]
 8008dde:	2310      	movs	r3, #16
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	2303      	movs	r3, #3
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	2396      	movs	r3, #150	; 0x96
 8008de8:	226e      	movs	r2, #110	; 0x6e
 8008dea:	2196      	movs	r1, #150	; 0x96
 8008dec:	206e      	movs	r0, #110	; 0x6e
 8008dee:	f7fa ff2c 	bl	8003c4a <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 8008df2:	2301      	movs	r3, #1
 8008df4:	9302      	str	r3, [sp, #8]
 8008df6:	2311      	movs	r3, #17
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	2396      	movs	r3, #150	; 0x96
 8008e00:	226e      	movs	r2, #110	; 0x6e
 8008e02:	21c8      	movs	r1, #200	; 0xc8
 8008e04:	20a0      	movs	r0, #160	; 0xa0
 8008e06:	f7fa ff20 	bl	8003c4a <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	9302      	str	r3, [sp, #8]
 8008e0e:	2312      	movs	r3, #18
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	2303      	movs	r3, #3
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	2396      	movs	r3, #150	; 0x96
 8008e18:	226e      	movs	r2, #110	; 0x6e
 8008e1a:	21fa      	movs	r1, #250	; 0xfa
 8008e1c:	20d2      	movs	r0, #210	; 0xd2
 8008e1e:	f7fa ff14 	bl	8003c4a <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 8008e22:	2301      	movs	r3, #1
 8008e24:	9302      	str	r3, [sp, #8]
 8008e26:	2313      	movs	r3, #19
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	2396      	movs	r3, #150	; 0x96
 8008e30:	226e      	movs	r2, #110	; 0x6e
 8008e32:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008e36:	f44f 7082 	mov.w	r0, #260	; 0x104
 8008e3a:	f7fa ff06 	bl	8003c4a <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 8008e3e:	2301      	movs	r3, #1
 8008e40:	9302      	str	r3, [sp, #8]
 8008e42:	2314      	movs	r3, #20
 8008e44:	9301      	str	r3, [sp, #4]
 8008e46:	2303      	movs	r3, #3
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	2396      	movs	r3, #150	; 0x96
 8008e4c:	226e      	movs	r2, #110	; 0x6e
 8008e4e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008e52:	f44f 709b 	mov.w	r0, #310	; 0x136
 8008e56:	f7fa fef8 	bl	8003c4a <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 8008e5a:	2304      	movs	r3, #4
 8008e5c:	9301      	str	r3, [sp, #4]
 8008e5e:	2301      	movs	r3, #1
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	23c8      	movs	r3, #200	; 0xc8
 8008e64:	22a0      	movs	r2, #160	; 0xa0
 8008e66:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008e6a:	200a      	movs	r0, #10
 8008e6c:	f7fa feed 	bl	8003c4a <lcdRect2>
}
 8008e70:	bf00      	nop
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <showPage>:

void showPage(uint8_t pageNum){
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8008e82:	79fb      	ldrb	r3, [r7, #7]
 8008e84:	2b05      	cmp	r3, #5
 8008e86:	d821      	bhi.n	8008ecc <showPage+0x54>
 8008e88:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <showPage+0x18>)
 8008e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8e:	bf00      	nop
 8008e90:	08008ea9 	.word	0x08008ea9
 8008e94:	08008eaf 	.word	0x08008eaf
 8008e98:	08008eb5 	.word	0x08008eb5
 8008e9c:	08008ebb 	.word	0x08008ebb
 8008ea0:	08008ec1 	.word	0x08008ec1
 8008ea4:	08008ec7 	.word	0x08008ec7
	case 0:
		showPage1();
 8008ea8:	f7ff fd3a 	bl	8008920 <showPage1>
		break;
 8008eac:	e00e      	b.n	8008ecc <showPage+0x54>
	case 1:
		showPage2();
 8008eae:	f7ff fd87 	bl	80089c0 <showPage2>
		break;
 8008eb2:	e00b      	b.n	8008ecc <showPage+0x54>
	case 2:
		showPage3();
 8008eb4:	f7ff fdbe 	bl	8008a34 <showPage3>
		break;
 8008eb8:	e008      	b.n	8008ecc <showPage+0x54>
	case 3:
		showPage4();
 8008eba:	f7ff fdf5 	bl	8008aa8 <showPage4>
		break;
 8008ebe:	e005      	b.n	8008ecc <showPage+0x54>
	case 4:
		showPage5();
 8008ec0:	f7ff fe2c 	bl	8008b1c <showPage5>
		break;
 8008ec4:	e002      	b.n	8008ecc <showPage+0x54>
	case 5:
		showPage6();
 8008ec6:	f7ff fe93 	bl	8008bf0 <showPage6>
		break;
 8008eca:	bf00      	nop
	}
}
 8008ecc:	bf00      	nop
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8008ed8:	4b08      	ldr	r3, [pc, #32]	; (8008efc <setDefaultClbcks+0x28>)
 8008eda:	4a09      	ldr	r2, [pc, #36]	; (8008f00 <setDefaultClbcks+0x2c>)
 8008edc:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8008ede:	4b09      	ldr	r3, [pc, #36]	; (8008f04 <setDefaultClbcks+0x30>)
 8008ee0:	4a09      	ldr	r2, [pc, #36]	; (8008f08 <setDefaultClbcks+0x34>)
 8008ee2:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 8008ee4:	4b09      	ldr	r3, [pc, #36]	; (8008f0c <setDefaultClbcks+0x38>)
 8008ee6:	4a0a      	ldr	r2, [pc, #40]	; (8008f10 <setDefaultClbcks+0x3c>)
 8008ee8:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8008eea:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <setDefaultClbcks+0x40>)
 8008eec:	4a0a      	ldr	r2, [pc, #40]	; (8008f18 <setDefaultClbcks+0x44>)
 8008eee:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 8008ef0:	bf00      	nop
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20002660 	.word	0x20002660
 8008f00:	08002a8d 	.word	0x08002a8d
 8008f04:	200026a8 	.word	0x200026a8
 8008f08:	08002a9d 	.word	0x08002a9d
 8008f0c:	20002714 	.word	0x20002714
 8008f10:	080088ad 	.word	0x080088ad
 8008f14:	200026cc 	.word	0x200026cc
 8008f18:	080088e5 	.word	0x080088e5

08008f1c <settingsSetup>:


void settingsSetup(void){
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8008f20:	f7ff ffd8 	bl	8008ed4 <setDefaultClbcks>
}
 8008f24:	bf00      	nop
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <settingsMain>:

void settingsMain(void){
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8008f2e:	2300      	movs	r3, #0
 8008f30:	603b      	str	r3, [r7, #0]
 8008f32:	1d3b      	adds	r3, r7, #4
 8008f34:	2200      	movs	r2, #0
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	605a      	str	r2, [r3, #4]
 8008f3a:	609a      	str	r2, [r3, #8]
 8008f3c:	60da      	str	r2, [r3, #12]
 8008f3e:	611a      	str	r2, [r3, #16]
 8008f40:	615a      	str	r2, [r3, #20]
 8008f42:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8008f44:	4b04      	ldr	r3, [pc, #16]	; (8008f58 <settingsMain+0x30>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7ff ff95 	bl	8008e78 <showPage>

}
 8008f4e:	bf00      	nop
 8008f50:	3720      	adds	r7, #32
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20005ddd 	.word	0x20005ddd

08008f5c <startStopwatch>:

#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

void startStopwatch(){
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
	stwStart();
 8008f60:	f7fb fc2c 	bl	80047bc <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8008f64:	4b03      	ldr	r3, [pc, #12]	; (8008f74 <startStopwatch+0x18>)
 8008f66:	4a04      	ldr	r2, [pc, #16]	; (8008f78 <startStopwatch+0x1c>)
 8008f68:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 8008f6a:	4b04      	ldr	r3, [pc, #16]	; (8008f7c <startStopwatch+0x20>)
 8008f6c:	4a04      	ldr	r2, [pc, #16]	; (8008f80 <startStopwatch+0x24>)
 8008f6e:	611a      	str	r2, [r3, #16]
}
 8008f70:	bf00      	nop
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	20002684 	.word	0x20002684
 8008f78:	08008f85 	.word	0x08008f85
 8008f7c:	200026f0 	.word	0x200026f0
 8008f80:	08008fc5 	.word	0x08008fc5

08008f84 <stopStopwatch>:
void stopStopwatch(){
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
	stwStop();
 8008f88:	f7fb fc3e 	bl	8004808 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8008f8c:	4b03      	ldr	r3, [pc, #12]	; (8008f9c <stopStopwatch+0x18>)
 8008f8e:	4a04      	ldr	r2, [pc, #16]	; (8008fa0 <stopStopwatch+0x1c>)
 8008f90:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8008f92:	4b04      	ldr	r3, [pc, #16]	; (8008fa4 <stopStopwatch+0x20>)
 8008f94:	4a04      	ldr	r2, [pc, #16]	; (8008fa8 <stopStopwatch+0x24>)
 8008f96:	611a      	str	r2, [r3, #16]
}
 8008f98:	bf00      	nop
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	20002684 	.word	0x20002684
 8008fa0:	08008f5d 	.word	0x08008f5d
 8008fa4:	200026f0 	.word	0x200026f0
 8008fa8:	08008fad 	.word	0x08008fad

08008fac <resetStopwatch>:
void resetStopwatch(){
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
	stwClear();
 8008fb0:	f7fb fc3a 	bl	8004828 <stwClear>
	stwT.clear();
 8008fb4:	4b02      	ldr	r3, [pc, #8]	; (8008fc0 <resetStopwatch+0x14>)
 8008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb8:	4798      	blx	r3
}
 8008fba:	bf00      	nop
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	200001a8 	.word	0x200001a8

08008fc4 <saveStopwatch>:
void saveStopwatch(){
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
	stwSave();
 8008fc8:	f7fb fc42 	bl	8004850 <stwSave>
}
 8008fcc:	bf00      	nop
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8008fd0:	b480      	push	{r7}
 8008fd2:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &resetPos;
 8008fd4:	4b10      	ldr	r3, [pc, #64]	; (8009018 <setDefaultClbcks+0x48>)
 8008fd6:	4a11      	ldr	r2, [pc, #68]	; (800901c <setDefaultClbcks+0x4c>)
 8008fd8:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8008fda:	4b11      	ldr	r3, [pc, #68]	; (8009020 <setDefaultClbcks+0x50>)
 8008fdc:	4a11      	ldr	r2, [pc, #68]	; (8009024 <setDefaultClbcks+0x54>)
 8008fde:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8008fe0:	4b11      	ldr	r3, [pc, #68]	; (8009028 <setDefaultClbcks+0x58>)
 8008fe2:	4a12      	ldr	r2, [pc, #72]	; (800902c <setDefaultClbcks+0x5c>)
 8008fe4:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8008fe6:	4b12      	ldr	r3, [pc, #72]	; (8009030 <setDefaultClbcks+0x60>)
 8008fe8:	78db      	ldrb	r3, [r3, #3]
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d006      	beq.n	8009002 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8008ff4:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <setDefaultClbcks+0x64>)
 8008ff6:	4a10      	ldr	r2, [pc, #64]	; (8009038 <setDefaultClbcks+0x68>)
 8008ff8:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8008ffa:	4b10      	ldr	r3, [pc, #64]	; (800903c <setDefaultClbcks+0x6c>)
 8008ffc:	4a10      	ldr	r2, [pc, #64]	; (8009040 <setDefaultClbcks+0x70>)
 8008ffe:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8009000:	e005      	b.n	800900e <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8009002:	4b0c      	ldr	r3, [pc, #48]	; (8009034 <setDefaultClbcks+0x64>)
 8009004:	4a0f      	ldr	r2, [pc, #60]	; (8009044 <setDefaultClbcks+0x74>)
 8009006:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8009008:	4b0c      	ldr	r3, [pc, #48]	; (800903c <setDefaultClbcks+0x6c>)
 800900a:	4a0f      	ldr	r2, [pc, #60]	; (8009048 <setDefaultClbcks+0x78>)
 800900c:	611a      	str	r2, [r3, #16]
}
 800900e:	bf00      	nop
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	20002714 	.word	0x20002714
 800901c:	08002aad 	.word	0x08002aad
 8009020:	20002660 	.word	0x20002660
 8009024:	08002a8d 	.word	0x08002a8d
 8009028:	200026a8 	.word	0x200026a8
 800902c:	08002a9d 	.word	0x08002a9d
 8009030:	20005b9c 	.word	0x20005b9c
 8009034:	20002684 	.word	0x20002684
 8009038:	08008f85 	.word	0x08008f85
 800903c:	200026f0 	.word	0x200026f0
 8009040:	08008fc5 	.word	0x08008fc5
 8009044:	08008f5d 	.word	0x08008f5d
 8009048:	08008fad 	.word	0x08008fad

0800904c <convertTicks>:

// initialize stopwatch values
struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	099b      	lsrs	r3, r3, #6
 8009058:	4a22      	ldr	r2, [pc, #136]	; (80090e4 <convertTicks+0x98>)
 800905a:	fba2 2303 	umull	r2, r3, r2, r3
 800905e:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8009060:	b2db      	uxtb	r3, r3
 8009062:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	0993      	lsrs	r3, r2, #6
 8009068:	491e      	ldr	r1, [pc, #120]	; (80090e4 <convertTicks+0x98>)
 800906a:	fba1 1303 	umull	r1, r3, r1, r3
 800906e:	089b      	lsrs	r3, r3, #2
 8009070:	491d      	ldr	r1, [pc, #116]	; (80090e8 <convertTicks+0x9c>)
 8009072:	fb01 f303 	mul.w	r3, r1, r3
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	4a1c      	ldr	r2, [pc, #112]	; (80090ec <convertTicks+0xa0>)
 800907a:	fba2 2303 	umull	r2, r3, r2, r3
 800907e:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 8009080:	b2db      	uxtb	r3, r3
 8009082:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	4b19      	ldr	r3, [pc, #100]	; (80090ec <convertTicks+0xa0>)
 8009088:	fba3 1302 	umull	r1, r3, r3, r2
 800908c:	09db      	lsrs	r3, r3, #7
 800908e:	f241 7170 	movw	r1, #6000	; 0x1770
 8009092:	fb01 f303 	mul.w	r3, r1, r3
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	4a15      	ldr	r2, [pc, #84]	; (80090f0 <convertTicks+0xa4>)
 800909a:	fba2 2303 	umull	r2, r3, r2, r3
 800909e:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	72bb      	strb	r3, [r7, #10]
		ticks%100
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4b12      	ldr	r3, [pc, #72]	; (80090f0 <convertTicks+0xa4>)
 80090a8:	fba3 1302 	umull	r1, r3, r3, r2
 80090ac:	095b      	lsrs	r3, r3, #5
 80090ae:	2164      	movs	r1, #100	; 0x64
 80090b0:	fb01 f303 	mul.w	r3, r1, r3
 80090b4:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	2300      	movs	r3, #0
 80090c0:	7b3a      	ldrb	r2, [r7, #12]
 80090c2:	f362 0307 	bfi	r3, r2, #0, #8
 80090c6:	7b7a      	ldrb	r2, [r7, #13]
 80090c8:	f362 230f 	bfi	r3, r2, #8, #8
 80090cc:	7bba      	ldrb	r2, [r7, #14]
 80090ce:	f362 4317 	bfi	r3, r2, #16, #8
 80090d2:	7bfa      	ldrb	r2, [r7, #15]
 80090d4:	f362 631f 	bfi	r3, r2, #24, #8
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	002e9a77 	.word	0x002e9a77
 80090e8:	00057e40 	.word	0x00057e40
 80090ec:	057619f1 	.word	0x057619f1
 80090f0:	51eb851f 	.word	0x51eb851f

080090f4 <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 80090fe:	793b      	ldrb	r3, [r7, #4]
 8009100:	4619      	mov	r1, r3
 8009102:	797b      	ldrb	r3, [r7, #5]
 8009104:	4618      	mov	r0, r3
 8009106:	79bb      	ldrb	r3, [r7, #6]
 8009108:	79fa      	ldrb	r2, [r7, #7]
 800910a:	9201      	str	r2, [sp, #4]
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	4603      	mov	r3, r0
 8009110:	460a      	mov	r2, r1
 8009112:	4904      	ldr	r1, [pc, #16]	; (8009124 <stwString+0x30>)
 8009114:	6838      	ldr	r0, [r7, #0]
 8009116:	f00b fee9 	bl	8014eec <siprintf>
	return str;
 800911a:	683b      	ldr	r3, [r7, #0]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	0801cae4 	.word	0x0801cae4

08009128 <updateStopwatch>:
void updateStopwatch(void){
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
//	stw_val.hours = stwS.cnt/(100*60*60);
//	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
//	stw_val.sec = stwS.cnt%(60*100)/(100);
//	stw_val.csec = stwS.cnt%100;
	stw_val.hours = stwS.cnt/(60*60);
 800912c:	4b22      	ldr	r3, [pc, #136]	; (80091b8 <updateStopwatch+0x90>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8009134:	4a21      	ldr	r2, [pc, #132]	; (80091bc <updateStopwatch+0x94>)
 8009136:	fb82 1203 	smull	r1, r2, r2, r3
 800913a:	441a      	add	r2, r3
 800913c:	12d2      	asrs	r2, r2, #11
 800913e:	17db      	asrs	r3, r3, #31
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	b2da      	uxtb	r2, r3
 8009144:	4b1e      	ldr	r3, [pc, #120]	; (80091c0 <updateStopwatch+0x98>)
 8009146:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(60*60)/(60);
 8009148:	4b1b      	ldr	r3, [pc, #108]	; (80091b8 <updateStopwatch+0x90>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8009150:	461a      	mov	r2, r3
 8009152:	4b1a      	ldr	r3, [pc, #104]	; (80091bc <updateStopwatch+0x94>)
 8009154:	fb83 1302 	smull	r1, r3, r3, r2
 8009158:	4413      	add	r3, r2
 800915a:	12d9      	asrs	r1, r3, #11
 800915c:	17d3      	asrs	r3, r2, #31
 800915e:	1acb      	subs	r3, r1, r3
 8009160:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009164:	fb01 f303 	mul.w	r3, r1, r3
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	4a16      	ldr	r2, [pc, #88]	; (80091c4 <updateStopwatch+0x9c>)
 800916c:	fb82 1203 	smull	r1, r2, r2, r3
 8009170:	441a      	add	r2, r3
 8009172:	1152      	asrs	r2, r2, #5
 8009174:	17db      	asrs	r3, r3, #31
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	b2da      	uxtb	r2, r3
 800917a:	4b11      	ldr	r3, [pc, #68]	; (80091c0 <updateStopwatch+0x98>)
 800917c:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%60;
 800917e:	4b0e      	ldr	r3, [pc, #56]	; (80091b8 <updateStopwatch+0x90>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8009186:	461a      	mov	r2, r3
 8009188:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <updateStopwatch+0x9c>)
 800918a:	fb83 1302 	smull	r1, r3, r3, r2
 800918e:	4413      	add	r3, r2
 8009190:	1159      	asrs	r1, r3, #5
 8009192:	17d3      	asrs	r3, r2, #31
 8009194:	1ac9      	subs	r1, r1, r3
 8009196:	460b      	mov	r3, r1
 8009198:	011b      	lsls	r3, r3, #4
 800919a:	1a5b      	subs	r3, r3, r1
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	1ad1      	subs	r1, r2, r3
 80091a0:	b2ca      	uxtb	r2, r1
 80091a2:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <updateStopwatch+0x98>)
 80091a4:	709a      	strb	r2, [r3, #2]
	stw_val.csec = (uint8_t)getStw();
 80091a6:	f7fb fb63 	bl	8004870 <getStw>
 80091aa:	4603      	mov	r3, r0
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <updateStopwatch+0x98>)
 80091b0:	70da      	strb	r2, [r3, #3]
}
 80091b2:	bf00      	nop
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20005b9c 	.word	0x20005b9c
 80091bc:	91a2b3c5 	.word	0x91a2b3c5
 80091c0:	20005de0 	.word	0x20005de0
 80091c4:	88888889 	.word	0x88888889

080091c8 <stwSetup>:

void stwSetup(void){
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80091cc:	f7ff ff00 	bl	8008fd0 <setDefaultClbcks>
}
 80091d0:	bf00      	nop
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 80091d4:	b590      	push	{r4, r7, lr}
 80091d6:	b091      	sub	sp, #68	; 0x44
 80091d8:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 80091da:	2300      	movs	r3, #0
 80091dc:	623b      	str	r3, [r7, #32]
 80091de:	2300      	movs	r3, #0
 80091e0:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 80091e2:	4b83      	ldr	r3, [pc, #524]	; (80093f0 <stwMain+0x21c>)
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	4b81      	ldr	r3, [pc, #516]	; (80093f0 <stwMain+0x21c>)
 80091ea:	785b      	ldrb	r3, [r3, #1]
 80091ec:	f107 0020 	add.w	r0, r7, #32
 80091f0:	4980      	ldr	r1, [pc, #512]	; (80093f4 <stwMain+0x220>)
 80091f2:	f00b fe7b 	bl	8014eec <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 80091f6:	2314      	movs	r3, #20
 80091f8:	b29c      	uxth	r4, r3
 80091fa:	f107 0320 	add.w	r3, r7, #32
 80091fe:	4618      	mov	r0, r3
 8009200:	f7f7 f800 	bl	8000204 <strlen>
 8009204:	4603      	mov	r3, r0
 8009206:	b29b      	uxth	r3, r3
 8009208:	fb14 f303 	smulbb	r3, r4, r3
 800920c:	b29b      	uxth	r3, r3
 800920e:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8009212:	b298      	uxth	r0, r3
 8009214:	f107 0220 	add.w	r2, r7, #32
 8009218:	4b77      	ldr	r3, [pc, #476]	; (80093f8 <stwMain+0x224>)
 800921a:	210a      	movs	r1, #10
 800921c:	f7f9 fed2 	bl	8002fc4 <lcdPutStr>

	char tempStr2[30] = {0};
 8009220:	2300      	movs	r3, #0
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	1d3b      	adds	r3, r7, #4
 8009226:	2200      	movs	r2, #0
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	605a      	str	r2, [r3, #4]
 800922c:	609a      	str	r2, [r3, #8]
 800922e:	60da      	str	r2, [r3, #12]
 8009230:	611a      	str	r2, [r3, #16]
 8009232:	615a      	str	r2, [r3, #20]
 8009234:	831a      	strh	r2, [r3, #24]
	sprintf(&guiPos, "Stopwatch");
 8009236:	f107 0320 	add.w	r3, r7, #32
 800923a:	4970      	ldr	r1, [pc, #448]	; (80093fc <stwMain+0x228>)
 800923c:	4618      	mov	r0, r3
 800923e:	f00b fe55 	bl	8014eec <siprintf>
	lcdPutStr(0, 10, guiPos, zekton24font);
 8009242:	f107 0220 	add.w	r2, r7, #32
 8009246:	4b6c      	ldr	r3, [pc, #432]	; (80093f8 <stwMain+0x224>)
 8009248:	210a      	movs	r1, #10
 800924a:	2000      	movs	r0, #0
 800924c:	f7f9 feba 	bl	8002fc4 <lcdPutStr>

	updateStopwatch();
 8009250:	f7ff ff6a 	bl	8009128 <updateStopwatch>

	if(stw_val.hours != 0){
 8009254:	4b6a      	ldr	r3, [pc, #424]	; (8009400 <stwMain+0x22c>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d007      	beq.n	800926c <stwMain+0x98>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 800925c:	4b68      	ldr	r3, [pc, #416]	; (8009400 <stwMain+0x22c>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	463b      	mov	r3, r7
 8009264:	4967      	ldr	r1, [pc, #412]	; (8009404 <stwMain+0x230>)
 8009266:	4618      	mov	r0, r3
 8009268:	f00b fe40 	bl	8014eec <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 800926c:	463a      	mov	r2, r7
 800926e:	4b62      	ldr	r3, [pc, #392]	; (80093f8 <stwMain+0x224>)
 8009270:	215f      	movs	r1, #95	; 0x5f
 8009272:	2014      	movs	r0, #20
 8009274:	f7f9 fea6 	bl	8002fc4 <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8009278:	4b61      	ldr	r3, [pc, #388]	; (8009400 <stwMain+0x22c>)
 800927a:	785b      	ldrb	r3, [r3, #1]
 800927c:	461a      	mov	r2, r3
 800927e:	4b60      	ldr	r3, [pc, #384]	; (8009400 <stwMain+0x22c>)
 8009280:	789b      	ldrb	r3, [r3, #2]
 8009282:	4619      	mov	r1, r3
 8009284:	4b5e      	ldr	r3, [pc, #376]	; (8009400 <stwMain+0x22c>)
 8009286:	78db      	ldrb	r3, [r3, #3]
 8009288:	4638      	mov	r0, r7
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	460b      	mov	r3, r1
 800928e:	495e      	ldr	r1, [pc, #376]	; (8009408 <stwMain+0x234>)
 8009290:	f00b fe2c 	bl	8014eec <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 8009294:	2322      	movs	r3, #34	; 0x22
 8009296:	b29c      	uxth	r4, r3
 8009298:	463b      	mov	r3, r7
 800929a:	4618      	mov	r0, r3
 800929c:	f7f6 ffb2 	bl	8000204 <strlen>
 80092a0:	4603      	mov	r3, r0
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	fb14 f303 	smulbb	r3, r4, r3
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 80092ae:	b298      	uxth	r0, r3
 80092b0:	463a      	mov	r2, r7
 80092b2:	4b56      	ldr	r3, [pc, #344]	; (800940c <stwMain+0x238>)
 80092b4:	214c      	movs	r1, #76	; 0x4c
 80092b6:	f7f9 fe85 	bl	8002fc4 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 80092ba:	2300      	movs	r3, #0
 80092bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80092c0:	e08b      	b.n	80093da <stwMain+0x206>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 80092c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092c6:	4a52      	ldr	r2, [pc, #328]	; (8009410 <stwMain+0x23c>)
 80092c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d07f      	beq.n	80093d0 <stwMain+0x1fc>
			sprintf(&tempStr2, "Lap %d:", i+1);
 80092d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	463b      	mov	r3, r7
 80092d8:	494e      	ldr	r1, [pc, #312]	; (8009414 <stwMain+0x240>)
 80092da:	4618      	mov	r0, r3
 80092dc:	f00b fe06 	bl	8014eec <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, font_12_zekton);
 80092e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092e4:	011b      	lsls	r3, r3, #4
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	3b7e      	subs	r3, #126	; 0x7e
 80092ea:	b2d9      	uxtb	r1, r3
 80092ec:	463a      	mov	r2, r7
 80092ee:	4b4a      	ldr	r3, [pc, #296]	; (8009418 <stwMain+0x244>)
 80092f0:	2000      	movs	r0, #0
 80092f2:	f7f9 fe67 	bl	8002fc4 <lcdPutStr>
			if(i>0){
 80092f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d022      	beq.n	8009344 <stwMain+0x170>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), font_12_zekton);
 80092fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009302:	011b      	lsls	r3, r3, #4
 8009304:	b2db      	uxtb	r3, r3
 8009306:	3b7e      	subs	r3, #126	; 0x7e
 8009308:	b2dc      	uxtb	r4, r3
 800930a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800930e:	4a40      	ldr	r2, [pc, #256]	; (8009410 <stwMain+0x23c>)
 8009310:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009318:	3b01      	subs	r3, #1
 800931a:	493d      	ldr	r1, [pc, #244]	; (8009410 <stwMain+0x23c>)
 800931c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff fe92 	bl	800904c <convertTicks>
 8009328:	4603      	mov	r3, r0
 800932a:	62bb      	str	r3, [r7, #40]	; 0x28
 800932c:	463b      	mov	r3, r7
 800932e:	4619      	mov	r1, r3
 8009330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009332:	f7ff fedf 	bl	80090f4 <stwString>
 8009336:	4602      	mov	r2, r0
 8009338:	4b37      	ldr	r3, [pc, #220]	; (8009418 <stwMain+0x244>)
 800933a:	4621      	mov	r1, r4
 800933c:	2037      	movs	r0, #55	; 0x37
 800933e:	f7f9 fe41 	bl	8002fc4 <lcdPutStr>
 8009342:	e01a      	b.n	800937a <stwMain+0x1a6>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8009344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009348:	011b      	lsls	r3, r3, #4
 800934a:	b2db      	uxtb	r3, r3
 800934c:	3b7e      	subs	r3, #126	; 0x7e
 800934e:	b2dc      	uxtb	r4, r3
 8009350:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009354:	4a2e      	ldr	r2, [pc, #184]	; (8009410 <stwMain+0x23c>)
 8009356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff fe76 	bl	800904c <convertTicks>
 8009360:	4603      	mov	r3, r0
 8009362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009364:	463b      	mov	r3, r7
 8009366:	4619      	mov	r1, r3
 8009368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800936a:	f7ff fec3 	bl	80090f4 <stwString>
 800936e:	4602      	mov	r2, r0
 8009370:	4b29      	ldr	r3, [pc, #164]	; (8009418 <stwMain+0x244>)
 8009372:	4621      	mov	r1, r4
 8009374:	2037      	movs	r0, #55	; 0x37
 8009376:	f7f9 fe25 	bl	8002fc4 <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 800937a:	463b      	mov	r3, r7
 800937c:	4927      	ldr	r1, [pc, #156]	; (800941c <stwMain+0x248>)
 800937e:	4618      	mov	r0, r3
 8009380:	f00b fdb4 	bl	8014eec <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, font_12_zekton);
 8009384:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009388:	011b      	lsls	r3, r3, #4
 800938a:	b2db      	uxtb	r3, r3
 800938c:	3b7e      	subs	r3, #126	; 0x7e
 800938e:	b2d9      	uxtb	r1, r3
 8009390:	463a      	mov	r2, r7
 8009392:	4b21      	ldr	r3, [pc, #132]	; (8009418 <stwMain+0x244>)
 8009394:	20a5      	movs	r0, #165	; 0xa5
 8009396:	f7f9 fe15 	bl	8002fc4 <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 800939a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800939e:	011b      	lsls	r3, r3, #4
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	3b7e      	subs	r3, #126	; 0x7e
 80093a4:	b2dc      	uxtb	r4, r3
 80093a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093aa:	4a19      	ldr	r2, [pc, #100]	; (8009410 <stwMain+0x23c>)
 80093ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7ff fe4b 	bl	800904c <convertTicks>
 80093b6:	4603      	mov	r3, r0
 80093b8:	633b      	str	r3, [r7, #48]	; 0x30
 80093ba:	463b      	mov	r3, r7
 80093bc:	4619      	mov	r1, r3
 80093be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093c0:	f7ff fe98 	bl	80090f4 <stwString>
 80093c4:	4602      	mov	r2, r0
 80093c6:	4b14      	ldr	r3, [pc, #80]	; (8009418 <stwMain+0x244>)
 80093c8:	4621      	mov	r1, r4
 80093ca:	20e1      	movs	r0, #225	; 0xe1
 80093cc:	f7f9 fdfa 	bl	8002fc4 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 80093d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093d4:	3301      	adds	r3, #1
 80093d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80093da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093de:	2b06      	cmp	r3, #6
 80093e0:	f67f af6f 	bls.w	80092c2 <stwMain+0xee>
		}
	}
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop
 80093e8:	373c      	adds	r7, #60	; 0x3c
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd90      	pop	{r4, r7, pc}
 80093ee:	bf00      	nop
 80093f0:	200057f0 	.word	0x200057f0
 80093f4:	0801caf8 	.word	0x0801caf8
 80093f8:	08041ba4 	.word	0x08041ba4
 80093fc:	0801cb04 	.word	0x0801cb04
 8009400:	20005de0 	.word	0x20005de0
 8009404:	0801cb10 	.word	0x0801cb10
 8009408:	0801cb18 	.word	0x0801cb18
 800940c:	08043a0c 	.word	0x08043a0c
 8009410:	200001a8 	.word	0x200001a8
 8009414:	0801cb28 	.word	0x0801cb28
 8009418:	0804111c 	.word	0x0804111c
 800941c:	0801cb30 	.word	0x0801cb30

08009420 <setDefaultClbcks>:
#include "contextMenu.h"

// fonts
#include "fonts/fonts.h"

static void setDefaultClbcks(void){
 8009420:	b480      	push	{r7}
 8009422:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 8009424:	4b06      	ldr	r3, [pc, #24]	; (8009440 <setDefaultClbcks+0x20>)
 8009426:	4a07      	ldr	r2, [pc, #28]	; (8009444 <setDefaultClbcks+0x24>)
 8009428:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 800942a:	4b07      	ldr	r3, [pc, #28]	; (8009448 <setDefaultClbcks+0x28>)
 800942c:	4a07      	ldr	r2, [pc, #28]	; (800944c <setDefaultClbcks+0x2c>)
 800942e:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8009430:	4b07      	ldr	r3, [pc, #28]	; (8009450 <setDefaultClbcks+0x30>)
 8009432:	4a08      	ldr	r2, [pc, #32]	; (8009454 <setDefaultClbcks+0x34>)
 8009434:	611a      	str	r2, [r3, #16]
}
 8009436:	bf00      	nop
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	200026f0 	.word	0x200026f0
 8009444:	08005f7d 	.word	0x08005f7d
 8009448:	20002660 	.word	0x20002660
 800944c:	08002a8d 	.word	0x08002a8d
 8009450:	200026a8 	.word	0x200026a8
 8009454:	08002a9d 	.word	0x08002a9d

08009458 <setTimeAction>:

static void setTimeAction(void){
 8009458:	b580      	push	{r7, lr}
 800945a:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 800945c:	4802      	ldr	r0, [pc, #8]	; (8009468 <setTimeAction+0x10>)
 800945e:	f7f9 fb31 	bl	8002ac4 <guiApplyView>
}
 8009462:	bf00      	nop
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	200002f4 	.word	0x200002f4

0800946c <setDateAction>:
static void setDateAction(void){
 800946c:	b580      	push	{r7, lr}
 800946e:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 8009470:	4802      	ldr	r0, [pc, #8]	; (800947c <setDateAction+0x10>)
 8009472:	f7f9 fb27 	bl	8002ac4 <guiApplyView>
}
 8009476:	bf00      	nop
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	200002c0 	.word	0x200002c0

08009480 <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8009484:	f7ff ffcc 	bl	8009420 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 8009488:	4802      	ldr	r0, [pc, #8]	; (8009494 <faceSetup+0x14>)
 800948a:	f7fc fcf1 	bl	8005e70 <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 800948e:	bf00      	nop
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	08009421 	.word	0x08009421

08009498 <faceMain>:

void faceMain(void){
 8009498:	b590      	push	{r4, r7, lr}
 800949a:	b0b1      	sub	sp, #196	; 0xc4
 800949c:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 800949e:	2300      	movs	r3, #0
 80094a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	609a      	str	r2, [r3, #8]
 80094b0:	60da      	str	r2, [r3, #12]
 80094b2:	611a      	str	r2, [r3, #16]
 80094b4:	615a      	str	r2, [r3, #20]
 80094b6:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 80094b8:	4b83      	ldr	r3, [pc, #524]	; (80096c8 <faceMain+0x230>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4618      	mov	r0, r3
 80094be:	f7f7 f863 	bl	8000588 <__aeabi_f2d>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80094ca:	4980      	ldr	r1, [pc, #512]	; (80096cc <faceMain+0x234>)
 80094cc:	f00b fd0e 	bl	8014eec <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 80094d0:	2314      	movs	r3, #20
 80094d2:	b29c      	uxth	r4, r3
 80094d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80094d8:	4618      	mov	r0, r3
 80094da:	f7f6 fe93 	bl	8000204 <strlen>
 80094de:	4603      	mov	r3, r0
 80094e0:	f1c3 030d 	rsb	r3, r3, #13
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	fb14 f303 	smulbb	r3, r4, r3
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	3323      	adds	r3, #35	; 0x23
 80094ee:	b298      	uxth	r0, r3
 80094f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80094f4:	4b76      	ldr	r3, [pc, #472]	; (80096d0 <faceMain+0x238>)
 80094f6:	210e      	movs	r1, #14
 80094f8:	f7f9 fd64 	bl	8002fc4 <lcdPutStr>
	char baroStr[30] = {0};
 80094fc:	2300      	movs	r3, #0
 80094fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009502:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	605a      	str	r2, [r3, #4]
 800950c:	609a      	str	r2, [r3, #8]
 800950e:	60da      	str	r2, [r3, #12]
 8009510:	611a      	str	r2, [r3, #16]
 8009512:	615a      	str	r2, [r3, #20]
 8009514:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 8009516:	4b6c      	ldr	r3, [pc, #432]	; (80096c8 <faceMain+0x230>)
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009522:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80096d4 <faceMain+0x23c>
 8009526:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800952a:	ee16 0a90 	vmov	r0, s13
 800952e:	f7f7 f82b 	bl	8000588 <__aeabi_f2d>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800953a:	4967      	ldr	r1, [pc, #412]	; (80096d8 <faceMain+0x240>)
 800953c:	f00b fcd6 	bl	8014eec <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 8009540:	2314      	movs	r3, #20
 8009542:	b29c      	uxth	r4, r3
 8009544:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009548:	4618      	mov	r0, r3
 800954a:	f7f6 fe5b 	bl	8000204 <strlen>
 800954e:	4603      	mov	r3, r0
 8009550:	f1c3 030d 	rsb	r3, r3, #13
 8009554:	b29b      	uxth	r3, r3
 8009556:	fb14 f303 	smulbb	r3, r4, r3
 800955a:	b29b      	uxth	r3, r3
 800955c:	3323      	adds	r3, #35	; 0x23
 800955e:	b298      	uxth	r0, r3
 8009560:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8009564:	4b5a      	ldr	r3, [pc, #360]	; (80096d0 <faceMain+0x238>)
 8009566:	212a      	movs	r1, #42	; 0x2a
 8009568:	f7f9 fd2c 	bl	8002fc4 <lcdPutStr>

	char fracStr[30] = {0};
 800956c:	2300      	movs	r3, #0
 800956e:	663b      	str	r3, [r7, #96]	; 0x60
 8009570:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	605a      	str	r2, [r3, #4]
 800957a:	609a      	str	r2, [r3, #8]
 800957c:	60da      	str	r2, [r3, #12]
 800957e:	611a      	str	r2, [r3, #16]
 8009580:	615a      	str	r2, [r3, #20]
 8009582:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 8009584:	2300      	movs	r3, #0
 8009586:	643b      	str	r3, [r7, #64]	; 0x40
 8009588:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	605a      	str	r2, [r3, #4]
 8009592:	609a      	str	r2, [r3, #8]
 8009594:	60da      	str	r2, [r3, #12]
 8009596:	611a      	str	r2, [r3, #16]
 8009598:	615a      	str	r2, [r3, #20]
 800959a:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 800959c:	2300      	movs	r3, #0
 800959e:	623b      	str	r3, [r7, #32]
 80095a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095a4:	2200      	movs	r2, #0
 80095a6:	601a      	str	r2, [r3, #0]
 80095a8:	605a      	str	r2, [r3, #4]
 80095aa:	609a      	str	r2, [r3, #8]
 80095ac:	60da      	str	r2, [r3, #12]
 80095ae:	611a      	str	r2, [r3, #16]
 80095b0:	615a      	str	r2, [r3, #20]
 80095b2:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 80095b4:	4b49      	ldr	r3, [pc, #292]	; (80096dc <faceMain+0x244>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	461a      	mov	r2, r3
 80095ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80095be:	4948      	ldr	r1, [pc, #288]	; (80096e0 <faceMain+0x248>)
 80095c0:	4618      	mov	r0, r3
 80095c2:	f00b fc93 	bl	8014eec <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 80095c6:	4b45      	ldr	r3, [pc, #276]	; (80096dc <faceMain+0x244>)
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	461a      	mov	r2, r3
 80095cc:	f107 0320 	add.w	r3, r7, #32
 80095d0:	4943      	ldr	r1, [pc, #268]	; (80096e0 <faceMain+0x248>)
 80095d2:	4618      	mov	r0, r3
 80095d4:	f00b fc8a 	bl	8014eec <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 80095d8:	4b40      	ldr	r3, [pc, #256]	; (80096dc <faceMain+0x244>)
 80095da:	789b      	ldrb	r3, [r3, #2]
 80095dc:	461a      	mov	r2, r3
 80095de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80095e2:	493f      	ldr	r1, [pc, #252]	; (80096e0 <faceMain+0x248>)
 80095e4:	4618      	mov	r0, r3
 80095e6:	f00b fc81 	bl	8014eec <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 80095ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80095ee:	4b3d      	ldr	r3, [pc, #244]	; (80096e4 <faceMain+0x24c>)
 80095f0:	214c      	movs	r1, #76	; 0x4c
 80095f2:	2014      	movs	r0, #20
 80095f4:	f7f9 fce6 	bl	8002fc4 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 80095f8:	f107 0220 	add.w	r2, r7, #32
 80095fc:	4b39      	ldr	r3, [pc, #228]	; (80096e4 <faceMain+0x24c>)
 80095fe:	214c      	movs	r1, #76	; 0x4c
 8009600:	20aa      	movs	r0, #170	; 0xaa
 8009602:	f7f9 fcdf 	bl	8002fc4 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 8009606:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800960a:	4b37      	ldr	r3, [pc, #220]	; (80096e8 <faceMain+0x250>)
 800960c:	214c      	movs	r1, #76	; 0x4c
 800960e:	f240 103b 	movw	r0, #315	; 0x13b
 8009612:	f7f9 fcd7 	bl	8002fc4 <lcdPutStr>

	char buffString[30] = {0};
 8009616:	2300      	movs	r3, #0
 8009618:	603b      	str	r3, [r7, #0]
 800961a:	1d3b      	adds	r3, r7, #4
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	605a      	str	r2, [r3, #4]
 8009622:	609a      	str	r2, [r3, #8]
 8009624:	60da      	str	r2, [r3, #12]
 8009626:	611a      	str	r2, [r3, #16]
 8009628:	615a      	str	r2, [r3, #20]
 800962a:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 800962c:	463b      	mov	r3, r7
 800962e:	492f      	ldr	r1, [pc, #188]	; (80096ec <faceMain+0x254>)
 8009630:	4618      	mov	r0, r3
 8009632:	f00b fc5b 	bl	8014eec <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 8009636:	4b2e      	ldr	r3, [pc, #184]	; (80096f0 <faceMain+0x258>)
 8009638:	785b      	ldrb	r3, [r3, #1]
 800963a:	461a      	mov	r2, r3
 800963c:	4b2d      	ldr	r3, [pc, #180]	; (80096f4 <faceMain+0x25c>)
 800963e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009642:	4b2b      	ldr	r3, [pc, #172]	; (80096f0 <faceMain+0x258>)
 8009644:	78db      	ldrb	r3, [r3, #3]
 8009646:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800964a:	4638      	mov	r0, r7
 800964c:	492a      	ldr	r1, [pc, #168]	; (80096f8 <faceMain+0x260>)
 800964e:	f00b fc4d 	bl	8014eec <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8009652:	2314      	movs	r3, #20
 8009654:	b29c      	uxth	r4, r3
 8009656:	463b      	mov	r3, r7
 8009658:	4618      	mov	r0, r3
 800965a:	f7f6 fdd3 	bl	8000204 <strlen>
 800965e:	4603      	mov	r3, r0
 8009660:	f1c3 030d 	rsb	r3, r3, #13
 8009664:	b29b      	uxth	r3, r3
 8009666:	fb14 f303 	smulbb	r3, r4, r3
 800966a:	b29b      	uxth	r3, r3
 800966c:	3323      	adds	r3, #35	; 0x23
 800966e:	b298      	uxth	r0, r3
 8009670:	463a      	mov	r2, r7
 8009672:	4b17      	ldr	r3, [pc, #92]	; (80096d0 <faceMain+0x238>)
 8009674:	21ae      	movs	r1, #174	; 0xae
 8009676:	f7f9 fca5 	bl	8002fc4 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 800967a:	4b1d      	ldr	r3, [pc, #116]	; (80096f0 <faceMain+0x258>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	4b1e      	ldr	r3, [pc, #120]	; (80096fc <faceMain+0x264>)
 8009682:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009686:	4b1a      	ldr	r3, [pc, #104]	; (80096f0 <faceMain+0x258>)
 8009688:	789b      	ldrb	r3, [r3, #2]
 800968a:	4638      	mov	r0, r7
 800968c:	491a      	ldr	r1, [pc, #104]	; (80096f8 <faceMain+0x260>)
 800968e:	f00b fc2d 	bl	8014eec <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8009692:	2314      	movs	r3, #20
 8009694:	b29c      	uxth	r4, r3
 8009696:	463b      	mov	r3, r7
 8009698:	4618      	mov	r0, r3
 800969a:	f7f6 fdb3 	bl	8000204 <strlen>
 800969e:	4603      	mov	r3, r0
 80096a0:	f1c3 030d 	rsb	r3, r3, #13
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	fb14 f303 	smulbb	r3, r4, r3
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	3323      	adds	r3, #35	; 0x23
 80096ae:	b298      	uxth	r0, r3
 80096b0:	463a      	mov	r2, r7
 80096b2:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <faceMain+0x238>)
 80096b4:	21ca      	movs	r1, #202	; 0xca
 80096b6:	f7f9 fc85 	bl	8002fc4 <lcdPutStr>

	enableCntxMenu();
 80096ba:	f7fc fc7b 	bl	8005fb4 <enableCntxMenu>
}
 80096be:	bf00      	nop
 80096c0:	37c4      	adds	r7, #196	; 0xc4
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd90      	pop	{r4, r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20002650 	.word	0x20002650
 80096cc:	0801cbf0 	.word	0x0801cbf0
 80096d0:	08049054 	.word	0x08049054
 80096d4:	42c80000 	.word	0x42c80000
 80096d8:	0801cbf8 	.word	0x0801cbf8
 80096dc:	200057f0 	.word	0x200057f0
 80096e0:	0801cc04 	.word	0x0801cc04
 80096e4:	08050504 	.word	0x08050504
 80096e8:	0804aebc 	.word	0x0804aebc
 80096ec:	0801cc0c 	.word	0x0801cc0c
 80096f0:	20005804 	.word	0x20005804
 80096f4:	20000210 	.word	0x20000210
 80096f8:	0801cc1c 	.word	0x0801cc1c
 80096fc:	200001f0 	.word	0x200001f0

08009700 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 8009700:	b480      	push	{r7}
 8009702:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 8009704:	4b0b      	ldr	r3, [pc, #44]	; (8009734 <setDefaultClbcks+0x34>)
 8009706:	4a0c      	ldr	r2, [pc, #48]	; (8009738 <setDefaultClbcks+0x38>)
 8009708:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 800970a:	4b0c      	ldr	r3, [pc, #48]	; (800973c <setDefaultClbcks+0x3c>)
 800970c:	4a0c      	ldr	r2, [pc, #48]	; (8009740 <setDefaultClbcks+0x40>)
 800970e:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8009710:	4b0c      	ldr	r3, [pc, #48]	; (8009744 <setDefaultClbcks+0x44>)
 8009712:	4a0d      	ldr	r2, [pc, #52]	; (8009748 <setDefaultClbcks+0x48>)
 8009714:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8009716:	4b0d      	ldr	r3, [pc, #52]	; (800974c <setDefaultClbcks+0x4c>)
 8009718:	4a0d      	ldr	r2, [pc, #52]	; (8009750 <setDefaultClbcks+0x50>)
 800971a:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 800971c:	4b0d      	ldr	r3, [pc, #52]	; (8009754 <setDefaultClbcks+0x54>)
 800971e:	4a0e      	ldr	r2, [pc, #56]	; (8009758 <setDefaultClbcks+0x58>)
 8009720:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8009722:	4b0e      	ldr	r3, [pc, #56]	; (800975c <setDefaultClbcks+0x5c>)
 8009724:	4a0e      	ldr	r2, [pc, #56]	; (8009760 <setDefaultClbcks+0x60>)
 8009726:	611a      	str	r2, [r3, #16]
}
 8009728:	bf00      	nop
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	20002714 	.word	0x20002714
 8009738:	08009a71 	.word	0x08009a71
 800973c:	200026f0 	.word	0x200026f0
 8009740:	08009931 	.word	0x08009931
 8009744:	200026cc 	.word	0x200026cc
 8009748:	08009a7d 	.word	0x08009a7d
 800974c:	20002660 	.word	0x20002660
 8009750:	080099e9 	.word	0x080099e9
 8009754:	20002684 	.word	0x20002684
 8009758:	08009901 	.word	0x08009901
 800975c:	200026a8 	.word	0x200026a8
 8009760:	08009961 	.word	0x08009961

08009764 <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8009768:	f7ff ffca 	bl	8009700 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 800976c:	4b06      	ldr	r3, [pc, #24]	; (8009788 <dateInputSetup+0x24>)
 800976e:	789a      	ldrb	r2, [r3, #2]
 8009770:	4b06      	ldr	r3, [pc, #24]	; (800978c <dateInputSetup+0x28>)
 8009772:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <dateInputSetup+0x24>)
 8009776:	785a      	ldrb	r2, [r3, #1]
 8009778:	4b04      	ldr	r3, [pc, #16]	; (800978c <dateInputSetup+0x28>)
 800977a:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 800977c:	4b02      	ldr	r3, [pc, #8]	; (8009788 <dateInputSetup+0x24>)
 800977e:	78da      	ldrb	r2, [r3, #3]
 8009780:	4b02      	ldr	r3, [pc, #8]	; (800978c <dateInputSetup+0x28>)
 8009782:	709a      	strb	r2, [r3, #2]
}
 8009784:	bf00      	nop
 8009786:	bd80      	pop	{r7, pc}
 8009788:	20005804 	.word	0x20005804
 800978c:	20005de8 	.word	0x20005de8

08009790 <dateInputMain>:

void dateInputMain(void){
 8009790:	b590      	push	{r4, r7, lr}
 8009792:	b089      	sub	sp, #36	; 0x24
 8009794:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 8009796:	2300      	movs	r3, #0
 8009798:	603b      	str	r3, [r7, #0]
 800979a:	1d3b      	adds	r3, r7, #4
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
 80097a0:	605a      	str	r2, [r3, #4]
 80097a2:	609a      	str	r2, [r3, #8]
 80097a4:	60da      	str	r2, [r3, #12]
 80097a6:	611a      	str	r2, [r3, #16]
 80097a8:	615a      	str	r2, [r3, #20]
 80097aa:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 80097ac:	463b      	mov	r3, r7
 80097ae:	494a      	ldr	r1, [pc, #296]	; (80098d8 <dateInputMain+0x148>)
 80097b0:	4618      	mov	r0, r3
 80097b2:	f00b fb9b 	bl	8014eec <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 80097b6:	4b49      	ldr	r3, [pc, #292]	; (80098dc <dateInputMain+0x14c>)
 80097b8:	785b      	ldrb	r3, [r3, #1]
 80097ba:	461a      	mov	r2, r3
 80097bc:	4b48      	ldr	r3, [pc, #288]	; (80098e0 <dateInputMain+0x150>)
 80097be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097c2:	4b46      	ldr	r3, [pc, #280]	; (80098dc <dateInputMain+0x14c>)
 80097c4:	789b      	ldrb	r3, [r3, #2]
 80097c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80097ca:	4638      	mov	r0, r7
 80097cc:	4945      	ldr	r1, [pc, #276]	; (80098e4 <dateInputMain+0x154>)
 80097ce:	f00b fb8d 	bl	8014eec <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 80097d2:	2314      	movs	r3, #20
 80097d4:	b29c      	uxth	r4, r3
 80097d6:	463b      	mov	r3, r7
 80097d8:	4618      	mov	r0, r3
 80097da:	f7f6 fd13 	bl	8000204 <strlen>
 80097de:	4603      	mov	r3, r0
 80097e0:	f1c3 030d 	rsb	r3, r3, #13
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	fb14 f303 	smulbb	r3, r4, r3
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	3323      	adds	r3, #35	; 0x23
 80097ee:	b298      	uxth	r0, r3
 80097f0:	463a      	mov	r2, r7
 80097f2:	4b3d      	ldr	r3, [pc, #244]	; (80098e8 <dateInputMain+0x158>)
 80097f4:	21ae      	movs	r1, #174	; 0xae
 80097f6:	f7f9 fbe5 	bl	8002fc4 <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 80097fa:	4b38      	ldr	r3, [pc, #224]	; (80098dc <dateInputMain+0x14c>)
 80097fc:	7818      	ldrb	r0, [r3, #0]
 80097fe:	4b37      	ldr	r3, [pc, #220]	; (80098dc <dateInputMain+0x14c>)
 8009800:	7859      	ldrb	r1, [r3, #1]
 8009802:	4b36      	ldr	r3, [pc, #216]	; (80098dc <dateInputMain+0x14c>)
 8009804:	789b      	ldrb	r3, [r3, #2]
 8009806:	b29b      	uxth	r3, r3
 8009808:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800980c:	b29b      	uxth	r3, r3
 800980e:	461a      	mov	r2, r3
 8009810:	f000 fcb6 	bl	800a180 <zellerCongruence>
 8009814:	4603      	mov	r3, r0
 8009816:	461a      	mov	r2, r3
 8009818:	4b34      	ldr	r3, [pc, #208]	; (80098ec <dateInputMain+0x15c>)
 800981a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800981e:	4b2f      	ldr	r3, [pc, #188]	; (80098dc <dateInputMain+0x14c>)
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	4638      	mov	r0, r7
 8009824:	492f      	ldr	r1, [pc, #188]	; (80098e4 <dateInputMain+0x154>)
 8009826:	f00b fb61 	bl	8014eec <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 800982a:	2314      	movs	r3, #20
 800982c:	b29c      	uxth	r4, r3
 800982e:	463b      	mov	r3, r7
 8009830:	4618      	mov	r0, r3
 8009832:	f7f6 fce7 	bl	8000204 <strlen>
 8009836:	4603      	mov	r3, r0
 8009838:	f1c3 030d 	rsb	r3, r3, #13
 800983c:	b29b      	uxth	r3, r3
 800983e:	fb14 f303 	smulbb	r3, r4, r3
 8009842:	b29b      	uxth	r3, r3
 8009844:	3323      	adds	r3, #35	; 0x23
 8009846:	b298      	uxth	r0, r3
 8009848:	463a      	mov	r2, r7
 800984a:	4b27      	ldr	r3, [pc, #156]	; (80098e8 <dateInputMain+0x158>)
 800984c:	21ca      	movs	r1, #202	; 0xca
 800984e:	f7f9 fbb9 	bl	8002fc4 <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 8009852:	4b27      	ldr	r3, [pc, #156]	; (80098f0 <dateInputMain+0x160>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	4b26      	ldr	r3, [pc, #152]	; (80098f4 <dateInputMain+0x164>)
 800985a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800985e:	4618      	mov	r0, r3
 8009860:	4b23      	ldr	r3, [pc, #140]	; (80098f0 <dateInputMain+0x160>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	461a      	mov	r2, r3
 8009866:	4b23      	ldr	r3, [pc, #140]	; (80098f4 <dateInputMain+0x164>)
 8009868:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800986c:	461a      	mov	r2, r3
 800986e:	4b20      	ldr	r3, [pc, #128]	; (80098f0 <dateInputMain+0x160>)
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	4619      	mov	r1, r3
 8009874:	4b20      	ldr	r3, [pc, #128]	; (80098f8 <dateInputMain+0x168>)
 8009876:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800987a:	18d1      	adds	r1, r2, r3
 800987c:	4b1c      	ldr	r3, [pc, #112]	; (80098f0 <dateInputMain+0x160>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	461a      	mov	r2, r3
 8009882:	4b1e      	ldr	r3, [pc, #120]	; (80098fc <dateInputMain+0x16c>)
 8009884:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009888:	461a      	mov	r2, r3
 800988a:	2301      	movs	r3, #1
 800988c:	f7fa f862 	bl	8003954 <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 8009890:	4b17      	ldr	r3, [pc, #92]	; (80098f0 <dateInputMain+0x160>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	461a      	mov	r2, r3
 8009896:	4b17      	ldr	r3, [pc, #92]	; (80098f4 <dateInputMain+0x164>)
 8009898:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800989c:	4618      	mov	r0, r3
 800989e:	4b14      	ldr	r3, [pc, #80]	; (80098f0 <dateInputMain+0x160>)
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <dateInputMain+0x164>)
 80098a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80098aa:	461a      	mov	r2, r3
 80098ac:	4b10      	ldr	r3, [pc, #64]	; (80098f0 <dateInputMain+0x160>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	4619      	mov	r1, r3
 80098b2:	4b11      	ldr	r3, [pc, #68]	; (80098f8 <dateInputMain+0x168>)
 80098b4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80098b8:	18d1      	adds	r1, r2, r3
 80098ba:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <dateInputMain+0x160>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	461a      	mov	r2, r3
 80098c0:	4b0e      	ldr	r3, [pc, #56]	; (80098fc <dateInputMain+0x16c>)
 80098c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	2301      	movs	r3, #1
 80098ca:	f7fa f843 	bl	8003954 <lcdHLine>
}
 80098ce:	bf00      	nop
 80098d0:	3724      	adds	r7, #36	; 0x24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd90      	pop	{r4, r7, pc}
 80098d6:	bf00      	nop
 80098d8:	0801ccdc 	.word	0x0801ccdc
 80098dc:	20005de8 	.word	0x20005de8
 80098e0:	20000274 	.word	0x20000274
 80098e4:	0801ccec 	.word	0x0801ccec
 80098e8:	0805248c 	.word	0x0805248c
 80098ec:	20000254 	.word	0x20000254
 80098f0:	20005de4 	.word	0x20005de4
 80098f4:	200002a8 	.word	0x200002a8
 80098f8:	200002b8 	.word	0x200002b8
 80098fc:	200002b0 	.word	0x200002b0

08009900 <cursorNext>:

static void cursorNext(void){
 8009900:	b480      	push	{r7}
 8009902:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 8009904:	4b09      	ldr	r3, [pc, #36]	; (800992c <cursorNext+0x2c>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d806      	bhi.n	800991a <cursorNext+0x1a>
 800990c:	4b07      	ldr	r3, [pc, #28]	; (800992c <cursorNext+0x2c>)
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	3301      	adds	r3, #1
 8009912:	b2da      	uxtb	r2, r3
 8009914:	4b05      	ldr	r3, [pc, #20]	; (800992c <cursorNext+0x2c>)
 8009916:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8009918:	e002      	b.n	8009920 <cursorNext+0x20>
	else curPosition = 0;
 800991a:	4b04      	ldr	r3, [pc, #16]	; (800992c <cursorNext+0x2c>)
 800991c:	2200      	movs	r2, #0
 800991e:	701a      	strb	r2, [r3, #0]
}
 8009920:	bf00      	nop
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	20005de4 	.word	0x20005de4

08009930 <cursorPrev>:
static void cursorPrev(void){
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8009934:	4b09      	ldr	r3, [pc, #36]	; (800995c <cursorPrev+0x2c>)
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d006      	beq.n	800994a <cursorPrev+0x1a>
 800993c:	4b07      	ldr	r3, [pc, #28]	; (800995c <cursorPrev+0x2c>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	3b01      	subs	r3, #1
 8009942:	b2da      	uxtb	r2, r3
 8009944:	4b05      	ldr	r3, [pc, #20]	; (800995c <cursorPrev+0x2c>)
 8009946:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 8009948:	e002      	b.n	8009950 <cursorPrev+0x20>
	else curPosition = 2;
 800994a:	4b04      	ldr	r3, [pc, #16]	; (800995c <cursorPrev+0x2c>)
 800994c:	2202      	movs	r2, #2
 800994e:	701a      	strb	r2, [r3, #0]
}
 8009950:	bf00      	nop
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	20005de4 	.word	0x20005de4

08009960 <increment>:
static void increment(void){
 8009960:	b480      	push	{r7}
 8009962:	af00      	add	r7, sp, #0
	switch(curPosition){
 8009964:	4b1e      	ldr	r3, [pc, #120]	; (80099e0 <increment+0x80>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b02      	cmp	r3, #2
 800996a:	d024      	beq.n	80099b6 <increment+0x56>
 800996c:	2b02      	cmp	r3, #2
 800996e:	dc31      	bgt.n	80099d4 <increment+0x74>
 8009970:	2b00      	cmp	r3, #0
 8009972:	d002      	beq.n	800997a <increment+0x1a>
 8009974:	2b01      	cmp	r3, #1
 8009976:	d00f      	beq.n	8009998 <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 8009978:	e02c      	b.n	80099d4 <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 800997a:	4b1a      	ldr	r3, [pc, #104]	; (80099e4 <increment+0x84>)
 800997c:	785b      	ldrb	r3, [r3, #1]
 800997e:	2b0b      	cmp	r3, #11
 8009980:	d806      	bhi.n	8009990 <increment+0x30>
 8009982:	4b18      	ldr	r3, [pc, #96]	; (80099e4 <increment+0x84>)
 8009984:	785b      	ldrb	r3, [r3, #1]
 8009986:	3301      	adds	r3, #1
 8009988:	b2da      	uxtb	r2, r3
 800998a:	4b16      	ldr	r3, [pc, #88]	; (80099e4 <increment+0x84>)
 800998c:	705a      	strb	r2, [r3, #1]
			break;
 800998e:	e021      	b.n	80099d4 <increment+0x74>
			else valDatePos[1] = 1;
 8009990:	4b14      	ldr	r3, [pc, #80]	; (80099e4 <increment+0x84>)
 8009992:	2201      	movs	r2, #1
 8009994:	705a      	strb	r2, [r3, #1]
			break;
 8009996:	e01d      	b.n	80099d4 <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 8009998:	4b12      	ldr	r3, [pc, #72]	; (80099e4 <increment+0x84>)
 800999a:	789b      	ldrb	r3, [r3, #2]
 800999c:	2b63      	cmp	r3, #99	; 0x63
 800999e:	d806      	bhi.n	80099ae <increment+0x4e>
 80099a0:	4b10      	ldr	r3, [pc, #64]	; (80099e4 <increment+0x84>)
 80099a2:	789b      	ldrb	r3, [r3, #2]
 80099a4:	3301      	adds	r3, #1
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <increment+0x84>)
 80099aa:	709a      	strb	r2, [r3, #2]
			break;
 80099ac:	e012      	b.n	80099d4 <increment+0x74>
			else valDatePos[2] = 0;
 80099ae:	4b0d      	ldr	r3, [pc, #52]	; (80099e4 <increment+0x84>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	709a      	strb	r2, [r3, #2]
			break;
 80099b4:	e00e      	b.n	80099d4 <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <increment+0x84>)
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	2b1e      	cmp	r3, #30
 80099bc:	d806      	bhi.n	80099cc <increment+0x6c>
 80099be:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <increment+0x84>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	3301      	adds	r3, #1
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <increment+0x84>)
 80099c8:	701a      	strb	r2, [r3, #0]
			break;
 80099ca:	e002      	b.n	80099d2 <increment+0x72>
			else valDatePos[0] = 1;
 80099cc:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <increment+0x84>)
 80099ce:	2201      	movs	r2, #1
 80099d0:	701a      	strb	r2, [r3, #0]
			break;
 80099d2:	bf00      	nop
}
 80099d4:	bf00      	nop
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	20005de4 	.word	0x20005de4
 80099e4:	20005de8 	.word	0x20005de8

080099e8 <decrement>:
static void decrement(void){
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0
	switch(curPosition){
 80099ec:	4b1e      	ldr	r3, [pc, #120]	; (8009a68 <decrement+0x80>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d024      	beq.n	8009a3e <decrement+0x56>
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	dc31      	bgt.n	8009a5c <decrement+0x74>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <decrement+0x1a>
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d00f      	beq.n	8009a20 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 8009a00:	e02c      	b.n	8009a5c <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 8009a02:	4b1a      	ldr	r3, [pc, #104]	; (8009a6c <decrement+0x84>)
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d006      	beq.n	8009a18 <decrement+0x30>
 8009a0a:	4b18      	ldr	r3, [pc, #96]	; (8009a6c <decrement+0x84>)
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	4b16      	ldr	r3, [pc, #88]	; (8009a6c <decrement+0x84>)
 8009a14:	705a      	strb	r2, [r3, #1]
				break;
 8009a16:	e021      	b.n	8009a5c <decrement+0x74>
				else valDatePos[1] = 12;
 8009a18:	4b14      	ldr	r3, [pc, #80]	; (8009a6c <decrement+0x84>)
 8009a1a:	220c      	movs	r2, #12
 8009a1c:	705a      	strb	r2, [r3, #1]
				break;
 8009a1e:	e01d      	b.n	8009a5c <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 8009a20:	4b12      	ldr	r3, [pc, #72]	; (8009a6c <decrement+0x84>)
 8009a22:	789b      	ldrb	r3, [r3, #2]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d006      	beq.n	8009a36 <decrement+0x4e>
 8009a28:	4b10      	ldr	r3, [pc, #64]	; (8009a6c <decrement+0x84>)
 8009a2a:	789b      	ldrb	r3, [r3, #2]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	4b0e      	ldr	r3, [pc, #56]	; (8009a6c <decrement+0x84>)
 8009a32:	709a      	strb	r2, [r3, #2]
				break;
 8009a34:	e012      	b.n	8009a5c <decrement+0x74>
				else valDatePos[2] = 100;
 8009a36:	4b0d      	ldr	r3, [pc, #52]	; (8009a6c <decrement+0x84>)
 8009a38:	2264      	movs	r2, #100	; 0x64
 8009a3a:	709a      	strb	r2, [r3, #2]
				break;
 8009a3c:	e00e      	b.n	8009a5c <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 8009a3e:	4b0b      	ldr	r3, [pc, #44]	; (8009a6c <decrement+0x84>)
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d906      	bls.n	8009a54 <decrement+0x6c>
 8009a46:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <decrement+0x84>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	4b07      	ldr	r3, [pc, #28]	; (8009a6c <decrement+0x84>)
 8009a50:	701a      	strb	r2, [r3, #0]
				break;
 8009a52:	e002      	b.n	8009a5a <decrement+0x72>
				else valDatePos[0] = 31;
 8009a54:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <decrement+0x84>)
 8009a56:	221f      	movs	r2, #31
 8009a58:	701a      	strb	r2, [r3, #0]
				break;
 8009a5a:	bf00      	nop
}
 8009a5c:	bf00      	nop
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	20005de4 	.word	0x20005de4
 8009a6c:	20005de8 	.word	0x20005de8

08009a70 <exitScr>:
static void exitScr(void){
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
	applySelectedScreen();
 8009a74:	f7f9 f83c 	bl	8002af0 <applySelectedScreen>
}
 8009a78:	bf00      	nop
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <accept>:
static void accept(void){
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 8009a80:	4b15      	ldr	r3, [pc, #84]	; (8009ad8 <accept+0x5c>)
 8009a82:	785a      	ldrb	r2, [r3, #1]
 8009a84:	4b15      	ldr	r3, [pc, #84]	; (8009adc <accept+0x60>)
 8009a86:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 8009a88:	4b13      	ldr	r3, [pc, #76]	; (8009ad8 <accept+0x5c>)
 8009a8a:	781a      	ldrb	r2, [r3, #0]
 8009a8c:	4b13      	ldr	r3, [pc, #76]	; (8009adc <accept+0x60>)
 8009a8e:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 8009a90:	4b11      	ldr	r3, [pc, #68]	; (8009ad8 <accept+0x5c>)
 8009a92:	789a      	ldrb	r2, [r3, #2]
 8009a94:	4b11      	ldr	r3, [pc, #68]	; (8009adc <accept+0x60>)
 8009a96:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 8009a98:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <accept+0x5c>)
 8009a9a:	7818      	ldrb	r0, [r3, #0]
 8009a9c:	4b0e      	ldr	r3, [pc, #56]	; (8009ad8 <accept+0x5c>)
 8009a9e:	7859      	ldrb	r1, [r3, #1]
 8009aa0:	4b0d      	ldr	r3, [pc, #52]	; (8009ad8 <accept+0x5c>)
 8009aa2:	789b      	ldrb	r3, [r3, #2]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	461a      	mov	r2, r3
 8009aae:	f000 fb67 	bl	800a180 <zellerCongruence>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	4b09      	ldr	r3, [pc, #36]	; (8009adc <accept+0x60>)
 8009ab8:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 8009aba:	2200      	movs	r2, #0
 8009abc:	4907      	ldr	r1, [pc, #28]	; (8009adc <accept+0x60>)
 8009abe:	4808      	ldr	r0, [pc, #32]	; (8009ae0 <accept+0x64>)
 8009ac0:	f003 f84a 	bl	800cb58 <HAL_RTC_SetDate>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <accept+0x52>
	{
	Error_Handler();
 8009aca:	f7fa fc45 	bl	8004358 <Error_Handler>
	}
	exitScr();
 8009ace:	f7ff ffcf 	bl	8009a70 <exitScr>
}
 8009ad2:	bf00      	nop
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20005de8 	.word	0x20005de8
 8009adc:	20005804 	.word	0x20005804
 8009ae0:	20005aa0 	.word	0x20005aa0

08009ae4 <setDefaultClbcks>:
//#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 8009ae4:	b480      	push	{r7}
 8009ae6:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 8009ae8:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <setDefaultClbcks+0x34>)
 8009aea:	4a0c      	ldr	r2, [pc, #48]	; (8009b1c <setDefaultClbcks+0x38>)
 8009aec:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 8009aee:	4b0c      	ldr	r3, [pc, #48]	; (8009b20 <setDefaultClbcks+0x3c>)
 8009af0:	4a0c      	ldr	r2, [pc, #48]	; (8009b24 <setDefaultClbcks+0x40>)
 8009af2:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8009af4:	4b0c      	ldr	r3, [pc, #48]	; (8009b28 <setDefaultClbcks+0x44>)
 8009af6:	4a0d      	ldr	r2, [pc, #52]	; (8009b2c <setDefaultClbcks+0x48>)
 8009af8:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8009afa:	4b0d      	ldr	r3, [pc, #52]	; (8009b30 <setDefaultClbcks+0x4c>)
 8009afc:	4a0d      	ldr	r2, [pc, #52]	; (8009b34 <setDefaultClbcks+0x50>)
 8009afe:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8009b00:	4b0d      	ldr	r3, [pc, #52]	; (8009b38 <setDefaultClbcks+0x54>)
 8009b02:	4a0e      	ldr	r2, [pc, #56]	; (8009b3c <setDefaultClbcks+0x58>)
 8009b04:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8009b06:	4b0e      	ldr	r3, [pc, #56]	; (8009b40 <setDefaultClbcks+0x5c>)
 8009b08:	4a0e      	ldr	r2, [pc, #56]	; (8009b44 <setDefaultClbcks+0x60>)
 8009b0a:	611a      	str	r2, [r3, #16]
}
 8009b0c:	bf00      	nop
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	20002714 	.word	0x20002714
 8009b1c:	08009e69 	.word	0x08009e69
 8009b20:	200026f0 	.word	0x200026f0
 8009b24:	08009cad 	.word	0x08009cad
 8009b28:	200026cc 	.word	0x200026cc
 8009b2c:	08009e75 	.word	0x08009e75
 8009b30:	20002660 	.word	0x20002660
 8009b34:	08009d99 	.word	0x08009d99
 8009b38:	20002684 	.word	0x20002684
 8009b3c:	08009c7d 	.word	0x08009c7d
 8009b40:	200026a8 	.word	0x200026a8
 8009b44:	08009cdd 	.word	0x08009cdd

08009b48 <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8009b4c:	f7ff ffca 	bl	8009ae4 <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 8009b50:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <timeInputSetup+0x24>)
 8009b52:	781a      	ldrb	r2, [r3, #0]
 8009b54:	4b06      	ldr	r3, [pc, #24]	; (8009b70 <timeInputSetup+0x28>)
 8009b56:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 8009b58:	4b04      	ldr	r3, [pc, #16]	; (8009b6c <timeInputSetup+0x24>)
 8009b5a:	785a      	ldrb	r2, [r3, #1]
 8009b5c:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <timeInputSetup+0x28>)
 8009b5e:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 8009b60:	4b02      	ldr	r3, [pc, #8]	; (8009b6c <timeInputSetup+0x24>)
 8009b62:	789a      	ldrb	r2, [r3, #2]
 8009b64:	4b02      	ldr	r3, [pc, #8]	; (8009b70 <timeInputSetup+0x28>)
 8009b66:	709a      	strb	r2, [r3, #2]
}
 8009b68:	bf00      	nop
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	200057f0 	.word	0x200057f0
 8009b70:	20005dec 	.word	0x20005dec

08009b74 <timeInputMain>:

void timeInputMain(void){
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b088      	sub	sp, #32
 8009b78:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	603b      	str	r3, [r7, #0]
 8009b7e:	1d3b      	adds	r3, r7, #4
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	605a      	str	r2, [r3, #4]
 8009b86:	609a      	str	r2, [r3, #8]
 8009b88:	60da      	str	r2, [r3, #12]
 8009b8a:	611a      	str	r2, [r3, #16]
 8009b8c:	615a      	str	r2, [r3, #20]
 8009b8e:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 8009b90:	4b33      	ldr	r3, [pc, #204]	; (8009c60 <timeInputMain+0xec>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	461a      	mov	r2, r3
 8009b96:	463b      	mov	r3, r7
 8009b98:	4932      	ldr	r1, [pc, #200]	; (8009c64 <timeInputMain+0xf0>)
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f00b f9a6 	bl	8014eec <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 8009ba0:	463a      	mov	r2, r7
 8009ba2:	4b31      	ldr	r3, [pc, #196]	; (8009c68 <timeInputMain+0xf4>)
 8009ba4:	214c      	movs	r1, #76	; 0x4c
 8009ba6:	2014      	movs	r0, #20
 8009ba8:	f7f9 fa0c 	bl	8002fc4 <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 8009bac:	4b2c      	ldr	r3, [pc, #176]	; (8009c60 <timeInputMain+0xec>)
 8009bae:	785b      	ldrb	r3, [r3, #1]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	463b      	mov	r3, r7
 8009bb4:	492b      	ldr	r1, [pc, #172]	; (8009c64 <timeInputMain+0xf0>)
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f00b f998 	bl	8014eec <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 8009bbc:	463a      	mov	r2, r7
 8009bbe:	4b2a      	ldr	r3, [pc, #168]	; (8009c68 <timeInputMain+0xf4>)
 8009bc0:	214c      	movs	r1, #76	; 0x4c
 8009bc2:	20aa      	movs	r0, #170	; 0xaa
 8009bc4:	f7f9 f9fe 	bl	8002fc4 <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 8009bc8:	4b28      	ldr	r3, [pc, #160]	; (8009c6c <timeInputMain+0xf8>)
 8009bca:	789b      	ldrb	r3, [r3, #2]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	463b      	mov	r3, r7
 8009bd0:	4924      	ldr	r1, [pc, #144]	; (8009c64 <timeInputMain+0xf0>)
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f00b f98a 	bl	8014eec <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 8009bd8:	463a      	mov	r2, r7
 8009bda:	4b25      	ldr	r3, [pc, #148]	; (8009c70 <timeInputMain+0xfc>)
 8009bdc:	214c      	movs	r1, #76	; 0x4c
 8009bde:	f240 103b 	movw	r0, #315	; 0x13b
 8009be2:	f7f9 f9ef 	bl	8002fc4 <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 8009be6:	4b23      	ldr	r3, [pc, #140]	; (8009c74 <timeInputMain+0x100>)
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	4b22      	ldr	r3, [pc, #136]	; (8009c78 <timeInputMain+0x104>)
 8009bee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	4b1f      	ldr	r3, [pc, #124]	; (8009c74 <timeInputMain+0x100>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	4b1f      	ldr	r3, [pc, #124]	; (8009c78 <timeInputMain+0x104>)
 8009bfc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009c00:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009c04:	2301      	movs	r3, #1
 8009c06:	22af      	movs	r2, #175	; 0xaf
 8009c08:	f7f9 fea4 	bl	8003954 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 8009c0c:	4b19      	ldr	r3, [pc, #100]	; (8009c74 <timeInputMain+0x100>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	4b19      	ldr	r3, [pc, #100]	; (8009c78 <timeInputMain+0x104>)
 8009c14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	4b16      	ldr	r3, [pc, #88]	; (8009c74 <timeInputMain+0x100>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <timeInputMain+0x104>)
 8009c22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009c26:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	22b0      	movs	r2, #176	; 0xb0
 8009c2e:	f7f9 fe91 	bl	8003954 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 8009c32:	4b10      	ldr	r3, [pc, #64]	; (8009c74 <timeInputMain+0x100>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <timeInputMain+0x104>)
 8009c3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	4b0c      	ldr	r3, [pc, #48]	; (8009c74 <timeInputMain+0x100>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	461a      	mov	r2, r3
 8009c46:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <timeInputMain+0x104>)
 8009c48:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009c4c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009c50:	2301      	movs	r3, #1
 8009c52:	22b1      	movs	r2, #177	; 0xb1
 8009c54:	f7f9 fe7e 	bl	8003954 <lcdHLine>
}
 8009c58:	bf00      	nop
 8009c5a:	3720      	adds	r7, #32
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	20005dec 	.word	0x20005dec
 8009c64:	0801cdac 	.word	0x0801cdac
 8009c68:	0805993c 	.word	0x0805993c
 8009c6c:	200057f0 	.word	0x200057f0
 8009c70:	080542f4 	.word	0x080542f4
 8009c74:	20005deb 	.word	0x20005deb
 8009c78:	200002e8 	.word	0x200002e8

08009c7c <cursorNext>:

static void cursorNext(void){
 8009c7c:	b480      	push	{r7}
 8009c7e:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 8009c80:	4b09      	ldr	r3, [pc, #36]	; (8009ca8 <cursorNext+0x2c>)
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d806      	bhi.n	8009c96 <cursorNext+0x1a>
 8009c88:	4b07      	ldr	r3, [pc, #28]	; (8009ca8 <cursorNext+0x2c>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <cursorNext+0x2c>)
 8009c92:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8009c94:	e002      	b.n	8009c9c <cursorNext+0x20>
	else curPosition = 0;
 8009c96:	4b04      	ldr	r3, [pc, #16]	; (8009ca8 <cursorNext+0x2c>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	701a      	strb	r2, [r3, #0]
}
 8009c9c:	bf00      	nop
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	20005deb 	.word	0x20005deb

08009cac <cursorPrev>:
static void cursorPrev(void){
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8009cb0:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <cursorPrev+0x2c>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d006      	beq.n	8009cc6 <cursorPrev+0x1a>
 8009cb8:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <cursorPrev+0x2c>)
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	4b05      	ldr	r3, [pc, #20]	; (8009cd8 <cursorPrev+0x2c>)
 8009cc2:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 8009cc4:	e002      	b.n	8009ccc <cursorPrev+0x20>
	else curPosition = 4;
 8009cc6:	4b04      	ldr	r3, [pc, #16]	; (8009cd8 <cursorPrev+0x2c>)
 8009cc8:	2204      	movs	r2, #4
 8009cca:	701a      	strb	r2, [r3, #0]
}
 8009ccc:	bf00      	nop
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	20005deb 	.word	0x20005deb

08009cdc <increment>:
static void increment(void){
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
	switch(curPosition){
 8009ce0:	4b2b      	ldr	r3, [pc, #172]	; (8009d90 <increment+0xb4>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b04      	cmp	r3, #4
 8009ce6:	d84d      	bhi.n	8009d84 <increment+0xa8>
 8009ce8:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <increment+0x14>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d05 	.word	0x08009d05
 8009cf4:	08009d23 	.word	0x08009d23
 8009cf8:	08009d41 	.word	0x08009d41
 8009cfc:	08009d5f 	.word	0x08009d5f
 8009d00:	08009d7d 	.word	0x08009d7d
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 8009d04:	4b23      	ldr	r3, [pc, #140]	; (8009d94 <increment+0xb8>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	2b0c      	cmp	r3, #12
 8009d0a:	d806      	bhi.n	8009d1a <increment+0x3e>
 8009d0c:	4b21      	ldr	r3, [pc, #132]	; (8009d94 <increment+0xb8>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	330a      	adds	r3, #10
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	4b1f      	ldr	r3, [pc, #124]	; (8009d94 <increment+0xb8>)
 8009d16:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 8009d18:	e034      	b.n	8009d84 <increment+0xa8>
			else valTimePos[0] = 20;
 8009d1a:	4b1e      	ldr	r3, [pc, #120]	; (8009d94 <increment+0xb8>)
 8009d1c:	2214      	movs	r2, #20
 8009d1e:	701a      	strb	r2, [r3, #0]
			break;
 8009d20:	e030      	b.n	8009d84 <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 8009d22:	4b1c      	ldr	r3, [pc, #112]	; (8009d94 <increment+0xb8>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b17      	cmp	r3, #23
 8009d28:	d806      	bhi.n	8009d38 <increment+0x5c>
 8009d2a:	4b1a      	ldr	r3, [pc, #104]	; (8009d94 <increment+0xb8>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	4b18      	ldr	r3, [pc, #96]	; (8009d94 <increment+0xb8>)
 8009d34:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 8009d36:	e025      	b.n	8009d84 <increment+0xa8>
			else valTimePos[0] = 0;
 8009d38:	4b16      	ldr	r3, [pc, #88]	; (8009d94 <increment+0xb8>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	701a      	strb	r2, [r3, #0]
			break;
 8009d3e:	e021      	b.n	8009d84 <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 8009d40:	4b14      	ldr	r3, [pc, #80]	; (8009d94 <increment+0xb8>)
 8009d42:	785b      	ldrb	r3, [r3, #1]
 8009d44:	2b30      	cmp	r3, #48	; 0x30
 8009d46:	d806      	bhi.n	8009d56 <increment+0x7a>
 8009d48:	4b12      	ldr	r3, [pc, #72]	; (8009d94 <increment+0xb8>)
 8009d4a:	785b      	ldrb	r3, [r3, #1]
 8009d4c:	330a      	adds	r3, #10
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	4b10      	ldr	r3, [pc, #64]	; (8009d94 <increment+0xb8>)
 8009d52:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8009d54:	e016      	b.n	8009d84 <increment+0xa8>
			else valTimePos[1] = 0;
 8009d56:	4b0f      	ldr	r3, [pc, #60]	; (8009d94 <increment+0xb8>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	705a      	strb	r2, [r3, #1]
			break;
 8009d5c:	e012      	b.n	8009d84 <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 8009d5e:	4b0d      	ldr	r3, [pc, #52]	; (8009d94 <increment+0xb8>)
 8009d60:	785b      	ldrb	r3, [r3, #1]
 8009d62:	2b3a      	cmp	r3, #58	; 0x3a
 8009d64:	d806      	bhi.n	8009d74 <increment+0x98>
 8009d66:	4b0b      	ldr	r3, [pc, #44]	; (8009d94 <increment+0xb8>)
 8009d68:	785b      	ldrb	r3, [r3, #1]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <increment+0xb8>)
 8009d70:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8009d72:	e007      	b.n	8009d84 <increment+0xa8>
			else valTimePos[1] = 0;
 8009d74:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <increment+0xb8>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	705a      	strb	r2, [r3, #1]
			break;
 8009d7a:	e003      	b.n	8009d84 <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 8009d7c:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <increment+0xb8>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	709a      	strb	r2, [r3, #2]
			break;
 8009d82:	bf00      	nop
	}
}
 8009d84:	bf00      	nop
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	20005deb 	.word	0x20005deb
 8009d94:	20005dec 	.word	0x20005dec

08009d98 <decrement>:
static void decrement(void){
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
	switch(curPosition){
 8009d9c:	4b2e      	ldr	r3, [pc, #184]	; (8009e58 <decrement+0xc0>)
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d857      	bhi.n	8009e54 <decrement+0xbc>
 8009da4:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <decrement+0x14>)
 8009da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009daa:	bf00      	nop
 8009dac:	08009dc1 	.word	0x08009dc1
 8009db0:	08009ddf 	.word	0x08009ddf
 8009db4:	08009dfd 	.word	0x08009dfd
 8009db8:	08009e1b 	.word	0x08009e1b
 8009dbc:	08009e39 	.word	0x08009e39
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 8009dc0:	4b26      	ldr	r3, [pc, #152]	; (8009e5c <decrement+0xc4>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b09      	cmp	r3, #9
 8009dc6:	d906      	bls.n	8009dd6 <decrement+0x3e>
 8009dc8:	4b24      	ldr	r3, [pc, #144]	; (8009e5c <decrement+0xc4>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	3b0a      	subs	r3, #10
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	4b22      	ldr	r3, [pc, #136]	; (8009e5c <decrement+0xc4>)
 8009dd2:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 8009dd4:	e03e      	b.n	8009e54 <decrement+0xbc>
				else valTimePos[0] = 0;
 8009dd6:	4b21      	ldr	r3, [pc, #132]	; (8009e5c <decrement+0xc4>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	701a      	strb	r2, [r3, #0]
				break;
 8009ddc:	e03a      	b.n	8009e54 <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 8009dde:	4b1f      	ldr	r3, [pc, #124]	; (8009e5c <decrement+0xc4>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d006      	beq.n	8009df4 <decrement+0x5c>
 8009de6:	4b1d      	ldr	r3, [pc, #116]	; (8009e5c <decrement+0xc4>)
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	4b1b      	ldr	r3, [pc, #108]	; (8009e5c <decrement+0xc4>)
 8009df0:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 8009df2:	e02f      	b.n	8009e54 <decrement+0xbc>
				else valTimePos[0] = 23;
 8009df4:	4b19      	ldr	r3, [pc, #100]	; (8009e5c <decrement+0xc4>)
 8009df6:	2217      	movs	r2, #23
 8009df8:	701a      	strb	r2, [r3, #0]
				break;
 8009dfa:	e02b      	b.n	8009e54 <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 8009dfc:	4b17      	ldr	r3, [pc, #92]	; (8009e5c <decrement+0xc4>)
 8009dfe:	785b      	ldrb	r3, [r3, #1]
 8009e00:	2b09      	cmp	r3, #9
 8009e02:	d906      	bls.n	8009e12 <decrement+0x7a>
 8009e04:	4b15      	ldr	r3, [pc, #84]	; (8009e5c <decrement+0xc4>)
 8009e06:	785b      	ldrb	r3, [r3, #1]
 8009e08:	3b0a      	subs	r3, #10
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	4b13      	ldr	r3, [pc, #76]	; (8009e5c <decrement+0xc4>)
 8009e0e:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 8009e10:	e020      	b.n	8009e54 <decrement+0xbc>
				else valTimePos[1] = 0;
 8009e12:	4b12      	ldr	r3, [pc, #72]	; (8009e5c <decrement+0xc4>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	705a      	strb	r2, [r3, #1]
				break;
 8009e18:	e01c      	b.n	8009e54 <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 8009e1a:	4b10      	ldr	r3, [pc, #64]	; (8009e5c <decrement+0xc4>)
 8009e1c:	785b      	ldrb	r3, [r3, #1]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d006      	beq.n	8009e30 <decrement+0x98>
 8009e22:	4b0e      	ldr	r3, [pc, #56]	; (8009e5c <decrement+0xc4>)
 8009e24:	785b      	ldrb	r3, [r3, #1]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <decrement+0xc4>)
 8009e2c:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 8009e2e:	e011      	b.n	8009e54 <decrement+0xbc>
				else valTimePos[1] = 59;
 8009e30:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <decrement+0xc4>)
 8009e32:	223b      	movs	r2, #59	; 0x3b
 8009e34:	705a      	strb	r2, [r3, #1]
				break;
 8009e36:	e00d      	b.n	8009e54 <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 8009e38:	4b09      	ldr	r3, [pc, #36]	; (8009e60 <decrement+0xc8>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4907      	ldr	r1, [pc, #28]	; (8009e60 <decrement+0xc8>)
 8009e42:	4808      	ldr	r0, [pc, #32]	; (8009e64 <decrement+0xcc>)
 8009e44:	f002 fd90 	bl	800c968 <HAL_RTC_SetTime>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <decrement+0xba>
					{
						Error_Handler();
 8009e4e:	f7fa fa83 	bl	8004358 <Error_Handler>
					}
				break;
 8009e52:	bf00      	nop
		}
}
 8009e54:	bf00      	nop
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20005deb 	.word	0x20005deb
 8009e5c:	20005dec 	.word	0x20005dec
 8009e60:	200057f0 	.word	0x200057f0
 8009e64:	20005aa0 	.word	0x20005aa0

08009e68 <exitScr>:
static void exitScr(void){
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
	applySelectedScreen();
 8009e6c:	f7f8 fe40 	bl	8002af0 <applySelectedScreen>
}
 8009e70:	bf00      	nop
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <accept>:
static void accept(void){
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 8009e78:	4b0d      	ldr	r3, [pc, #52]	; (8009eb0 <accept+0x3c>)
 8009e7a:	781a      	ldrb	r2, [r3, #0]
 8009e7c:	4b0d      	ldr	r3, [pc, #52]	; (8009eb4 <accept+0x40>)
 8009e7e:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 8009e80:	4b0b      	ldr	r3, [pc, #44]	; (8009eb0 <accept+0x3c>)
 8009e82:	785a      	ldrb	r2, [r3, #1]
 8009e84:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <accept+0x40>)
 8009e86:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009e88:	4b0a      	ldr	r3, [pc, #40]	; (8009eb4 <accept+0x40>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009e8e:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <accept+0x40>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8009e94:	2200      	movs	r2, #0
 8009e96:	4907      	ldr	r1, [pc, #28]	; (8009eb4 <accept+0x40>)
 8009e98:	4807      	ldr	r0, [pc, #28]	; (8009eb8 <accept+0x44>)
 8009e9a:	f002 fd65 	bl	800c968 <HAL_RTC_SetTime>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <accept+0x34>
	{
	Error_Handler();
 8009ea4:	f7fa fa58 	bl	8004358 <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exitScr();
 8009ea8:	f7ff ffde 	bl	8009e68 <exitScr>
}
 8009eac:	bf00      	nop
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	20005dec 	.word	0x20005dec
 8009eb4:	200057f0 	.word	0x200057f0
 8009eb8:	20005aa0 	.word	0x20005aa0

08009ebc <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	88fa      	ldrh	r2, [r7, #6]
 8009ed4:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	895b      	ldrh	r3, [r3, #10]
 8009eda:	461a      	mov	r2, r3
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	fb02 f303 	mul.w	r3, r2, r3
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f009 feb6 	bl	8013c54 <malloc>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	461a      	mov	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2201      	movs	r2, #1
 8009f06:	741a      	strb	r2, [r3, #16]
}
 8009f08:	bf00      	nop
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	891a      	ldrh	r2, [r3, #8]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	895b      	ldrh	r3, [r3, #10]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	bf0c      	ite	eq
 8009f24:	2301      	moveq	r3, #1
 8009f26:	2300      	movne	r3, #0
 8009f28:	b2db      	uxtb	r3, r3
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7ff ffe5 	bl	8009f10 <cbuf_isFull>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d02a      	beq.n	8009fa2 <cbuf_ovw+0x6c>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	88db      	ldrh	r3, [r3, #6]
 8009f54:	4619      	mov	r1, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	fb01 f303 	mul.w	r3, r1, r3
 8009f5e:	18d0      	adds	r0, r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	461a      	mov	r2, r3
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	f009 fe84 	bl	8013c74 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	88db      	ldrh	r3, [r3, #6]
 8009f70:	3301      	adds	r3, #1
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	8952      	ldrh	r2, [r2, #10]
 8009f76:	fb93 f1f2 	sdiv	r1, r3, r2
 8009f7a:	fb01 f202 	mul.w	r2, r1, r2
 8009f7e:	1a9b      	subs	r3, r3, r2
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	889b      	ldrh	r3, [r3, #4]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	8952      	ldrh	r2, [r2, #10]
 8009f90:	fb93 f1f2 	sdiv	r1, r3, r2
 8009f94:	fb01 f202 	mul.w	r2, r1, r2
 8009f98:	1a9b      	subs	r3, r3, r2
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	809a      	strh	r2, [r3, #4]
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
		b->elemNum++;
		b->tail = (b->tail + 1) % b->maxSize;
		return 1;
	}
}
 8009fa0:	e023      	b.n	8009fea <cbuf_ovw+0xb4>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	88db      	ldrh	r3, [r3, #6]
 8009faa:	4619      	mov	r1, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	fb01 f303 	mul.w	r3, r1, r3
 8009fb4:	18d0      	adds	r0, r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	f009 fe59 	bl	8013c74 <memcpy>
		b->elemNum++;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	891b      	ldrh	r3, [r3, #8]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	88db      	ldrh	r3, [r3, #6]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	8952      	ldrh	r2, [r2, #10]
 8009fd8:	fb93 f1f2 	sdiv	r1, r3, r2
 8009fdc:	fb01 f202 	mul.w	r2, r1, r2
 8009fe0:	1a9b      	subs	r3, r3, r2
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	80da      	strh	r2, [r3, #6]
		return 1;
 8009fe8:	2301      	movs	r3, #1
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <cbuf_readn>:
// non-destructive read
void* cbuf_read(cbuf_t* b);
// non-destructive read of nth element
void* cbuf_readn(cbuf_t* b, uint16_t pos){
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	807b      	strh	r3, [r7, #2]
	pos += b->head;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	889a      	ldrh	r2, [r3, #4]
 800a002:	887b      	ldrh	r3, [r7, #2]
 800a004:	4413      	add	r3, r2
 800a006:	807b      	strh	r3, [r7, #2]
	pos = pos % b->maxSize;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	895a      	ldrh	r2, [r3, #10]
 800a00c:	887b      	ldrh	r3, [r7, #2]
 800a00e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a012:	fb01 f202 	mul.w	r2, r1, r2
 800a016:	1a9b      	subs	r3, r3, r2
 800a018:	807b      	strh	r3, [r7, #2]
	return(b->elements+pos*b->elemSize);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	887b      	ldrh	r3, [r7, #2]
 800a020:	6879      	ldr	r1, [r7, #4]
 800a022:	68c9      	ldr	r1, [r1, #12]
 800a024:	fb01 f303 	mul.w	r3, r1, r3
 800a028:	4413      	add	r3, r2
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	460b      	mov	r3, r1
 800a040:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	887a      	ldrh	r2, [r7, #2]
 800a046:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	895b      	ldrh	r3, [r3, #10]
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4618      	mov	r0, r3
 800a050:	f009 fe00 	bl	8013c54 <malloc>
 800a054:	4603      	mov	r3, r0
 800a056:	461a      	mov	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2201      	movs	r2, #1
 800a072:	731a      	strb	r2, [r3, #12]
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	891a      	ldrh	r2, [r3, #8]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	895b      	ldrh	r3, [r3, #10]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	bf0c      	ite	eq
 800a090:	2301      	moveq	r3, #1
 800a092:	2300      	movne	r3, #0
 800a094:	b2db      	uxtb	r3, r3
}
 800a096:	4618      	mov	r0, r3
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b082      	sub	sp, #8
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff ffe5 	bl	800a07c <ring_buffer_full>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d022      	beq.n	800a0fe <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	88db      	ldrh	r3, [r3, #6]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	88db      	ldrh	r3, [r3, #6]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	8952      	ldrh	r2, [r2, #10]
 800a0d2:	fb93 f1f2 	sdiv	r1, r3, r2
 800a0d6:	fb01 f202 	mul.w	r2, r1, r2
 800a0da:	1a9b      	subs	r3, r3, r2
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	889b      	ldrh	r3, [r3, #4]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	8952      	ldrh	r2, [r2, #10]
 800a0ec:	fb93 f1f2 	sdiv	r1, r3, r2
 800a0f0:	fb01 f202 	mul.w	r2, r1, r2
 800a0f4:	1a9b      	subs	r3, r3, r2
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 800a0fc:	e01b      	b.n	800a136 <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	88db      	ldrh	r3, [r3, #6]
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	891b      	ldrh	r3, [r3, #8]
 800a112:	3301      	adds	r3, #1
 800a114:	b29a      	uxth	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	88db      	ldrh	r3, [r3, #6]
 800a11e:	3301      	adds	r3, #1
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	8952      	ldrh	r2, [r2, #10]
 800a124:	fb93 f1f2 	sdiv	r1, r3, r2
 800a128:	fb01 f202 	mul.w	r2, r1, r2
 800a12c:	1a9b      	subs	r3, r3, r2
 800a12e:	b29a      	uxth	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	80da      	strh	r2, [r3, #6]
		return 1;
 800a134:	2301      	movs	r3, #1
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	460b      	mov	r3, r1
 800a148:	807b      	strh	r3, [r7, #2]
	position += b->head;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	889a      	ldrh	r2, [r3, #4]
 800a14e:	887b      	ldrh	r3, [r7, #2]
 800a150:	4413      	add	r3, r2
 800a152:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	895a      	ldrh	r2, [r3, #10]
 800a158:	887b      	ldrh	r3, [r7, #2]
 800a15a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a15e:	fb01 f202 	mul.w	r2, r1, r2
 800a162:	1a9b      	subs	r3, r3, r2
 800a164:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	887b      	ldrh	r3, [r7, #2]
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	681b      	ldr	r3, [r3, #0]
}
 800a172:	4618      	mov	r0, r3
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
	...

0800a180 <zellerCongruence>:
 */

#include "timeUtils.h"


uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	4603      	mov	r3, r0
 800a188:	71fb      	strb	r3, [r7, #7]
 800a18a:	460b      	mov	r3, r1
 800a18c:	71bb      	strb	r3, [r7, #6]
 800a18e:	4613      	mov	r3, r2
 800a190:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 800a192:	79bb      	ldrb	r3, [r7, #6]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d104      	bne.n	800a1a2 <zellerCongruence+0x22>
	        month = 13;
 800a198:	230d      	movs	r3, #13
 800a19a:	71bb      	strb	r3, [r7, #6]
	        year--;
 800a19c:	88bb      	ldrh	r3, [r7, #4]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 800a1a2:	79bb      	ldrb	r3, [r7, #6]
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d104      	bne.n	800a1b2 <zellerCongruence+0x32>
	        month = 14;
 800a1a8:	230e      	movs	r3, #14
 800a1aa:	71bb      	strb	r3, [r7, #6]
	        year--;
 800a1ac:	88bb      	ldrh	r3, [r7, #4]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 800a1b6:	79bb      	ldrb	r3, [r7, #6]
 800a1b8:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 800a1ba:	88bb      	ldrh	r3, [r7, #4]
 800a1bc:	4a29      	ldr	r2, [pc, #164]	; (800a264 <zellerCongruence+0xe4>)
 800a1be:	fba2 1203 	umull	r1, r2, r2, r3
 800a1c2:	0952      	lsrs	r2, r2, #5
 800a1c4:	2164      	movs	r1, #100	; 0x64
 800a1c6:	fb01 f202 	mul.w	r2, r1, r2
 800a1ca:	1a9b      	subs	r3, r3, r2
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 800a1d0:	88bb      	ldrh	r3, [r7, #4]
 800a1d2:	4a24      	ldr	r2, [pc, #144]	; (800a264 <zellerCongruence+0xe4>)
 800a1d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d8:	095b      	lsrs	r3, r3, #5
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800a1de:	7bf9      	ldrb	r1, [r7, #15]
 800a1e0:	7bbb      	ldrb	r3, [r7, #14]
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	4413      	add	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	4a1e      	ldr	r2, [pc, #120]	; (800a268 <zellerCongruence+0xe8>)
 800a1f0:	fb82 0203 	smull	r0, r2, r2, r3
 800a1f4:	1052      	asrs	r2, r2, #1
 800a1f6:	17db      	asrs	r3, r3, #31
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	18ca      	adds	r2, r1, r3
 800a1fc:	7b7b      	ldrb	r3, [r7, #13]
 800a1fe:	4413      	add	r3, r2
 800a200:	7b7a      	ldrb	r2, [r7, #13]
 800a202:	0892      	lsrs	r2, r2, #2
 800a204:	b2d2      	uxtb	r2, r2
 800a206:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 800a208:	7b3a      	ldrb	r2, [r7, #12]
 800a20a:	0892      	lsrs	r2, r2, #2
 800a20c:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800a20e:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 800a210:	7b3a      	ldrb	r2, [r7, #12]
 800a212:	4613      	mov	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800a218:	440b      	add	r3, r1
 800a21a:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	4b13      	ldr	r3, [pc, #76]	; (800a26c <zellerCongruence+0xec>)
 800a220:	fb83 1302 	smull	r1, r3, r3, r2
 800a224:	4413      	add	r3, r2
 800a226:	1099      	asrs	r1, r3, #2
 800a228:	17d3      	asrs	r3, r2, #31
 800a22a:	1ac9      	subs	r1, r1, r3
 800a22c:	460b      	mov	r3, r1
 800a22e:	00db      	lsls	r3, r3, #3
 800a230:	1a5b      	subs	r3, r3, r1
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	1d5a      	adds	r2, r3, #5
 800a23a:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <zellerCongruence+0xec>)
 800a23c:	fb83 1302 	smull	r1, r3, r3, r2
 800a240:	4413      	add	r3, r2
 800a242:	1099      	asrs	r1, r3, #2
 800a244:	17d3      	asrs	r3, r2, #31
 800a246:	1ac9      	subs	r1, r1, r3
 800a248:	460b      	mov	r3, r1
 800a24a:	00db      	lsls	r3, r3, #3
 800a24c:	1a5b      	subs	r3, r3, r1
 800a24e:	1ad1      	subs	r1, r2, r3
 800a250:	b2cb      	uxtb	r3, r1
 800a252:	3301      	adds	r3, #1
 800a254:	b2db      	uxtb	r3, r3
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	51eb851f 	.word	0x51eb851f
 800a268:	66666667 	.word	0x66666667
 800a26c:	92492493 	.word	0x92492493

0800a270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800a270:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a2a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a274:	480d      	ldr	r0, [pc, #52]	; (800a2ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a276:	490e      	ldr	r1, [pc, #56]	; (800a2b0 <LoopFillZerobss+0x1a>)
                                         ldr r2, =_sidata
 800a278:	4a0e      	ldr	r2, [pc, #56]	; (800a2b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a27a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a27c:	e002      	b.n	800a284 <LoopCopyDataInit>

0800a27e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a27e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a282:	3304      	adds	r3, #4

0800a284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a288:	d3f9      	bcc.n	800a27e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a28a:	4a0b      	ldr	r2, [pc, #44]	; (800a2b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a28c:	4c0b      	ldr	r4, [pc, #44]	; (800a2bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800a28e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a290:	e001      	b.n	800a296 <LoopFillZerobss>

0800a292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a294:	3204      	adds	r2, #4

0800a296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a298:	d3fb      	bcc.n	800a292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a29a:	f7fa fbb9 	bl	8004a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a29e:	f009 fcb5 	bl	8013c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a2a2:	f7f9 fe25 	bl	8003ef0 <main>
  bx  lr    
 800a2a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800a2a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800a2ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a2b0:	20000558 	.word	0x20000558
                                         ldr r2, =_sidata
 800a2b4:	0805c1a8 	.word	0x0805c1a8
  ldr r2, =_sbss
 800a2b8:	20000558 	.word	0x20000558
  ldr r4, =_ebss
 800a2bc:	20005e68 	.word	0x20005e68

0800a2c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a2c0:	e7fe      	b.n	800a2c0 <ADC_IRQHandler>
	...

0800a2c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a2c8:	4b0e      	ldr	r3, [pc, #56]	; (800a304 <HAL_Init+0x40>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a0d      	ldr	r2, [pc, #52]	; (800a304 <HAL_Init+0x40>)
 800a2ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a2d4:	4b0b      	ldr	r3, [pc, #44]	; (800a304 <HAL_Init+0x40>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a0a      	ldr	r2, [pc, #40]	; (800a304 <HAL_Init+0x40>)
 800a2da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a2e0:	4b08      	ldr	r3, [pc, #32]	; (800a304 <HAL_Init+0x40>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a07      	ldr	r2, [pc, #28]	; (800a304 <HAL_Init+0x40>)
 800a2e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a2ec:	2003      	movs	r0, #3
 800a2ee:	f000 f94f 	bl	800a590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	f000 f808 	bl	800a308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a2f8:	f7fa f99c 	bl	8004634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	40023c00 	.word	0x40023c00

0800a308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a310:	4b12      	ldr	r3, [pc, #72]	; (800a35c <HAL_InitTick+0x54>)
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	4b12      	ldr	r3, [pc, #72]	; (800a360 <HAL_InitTick+0x58>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	4619      	mov	r1, r3
 800a31a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a31e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a322:	fbb2 f3f3 	udiv	r3, r2, r3
 800a326:	4618      	mov	r0, r3
 800a328:	f000 f967 	bl	800a5fa <HAL_SYSTICK_Config>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e00e      	b.n	800a354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b0f      	cmp	r3, #15
 800a33a:	d80a      	bhi.n	800a352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a33c:	2200      	movs	r2, #0
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	f000 f92f 	bl	800a5a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a348:	4a06      	ldr	r2, [pc, #24]	; (800a364 <HAL_InitTick+0x5c>)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	e000      	b.n	800a354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	200001e0 	.word	0x200001e0
 800a360:	20000320 	.word	0x20000320
 800a364:	2000031c 	.word	0x2000031c

0800a368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a368:	b480      	push	{r7}
 800a36a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a36c:	4b06      	ldr	r3, [pc, #24]	; (800a388 <HAL_IncTick+0x20>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	461a      	mov	r2, r3
 800a372:	4b06      	ldr	r3, [pc, #24]	; (800a38c <HAL_IncTick+0x24>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4413      	add	r3, r2
 800a378:	4a04      	ldr	r2, [pc, #16]	; (800a38c <HAL_IncTick+0x24>)
 800a37a:	6013      	str	r3, [r2, #0]
}
 800a37c:	bf00      	nop
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	20000320 	.word	0x20000320
 800a38c:	20005df0 	.word	0x20005df0

0800a390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a390:	b480      	push	{r7}
 800a392:	af00      	add	r7, sp, #0
  return uwTick;
 800a394:	4b03      	ldr	r3, [pc, #12]	; (800a3a4 <HAL_GetTick+0x14>)
 800a396:	681b      	ldr	r3, [r3, #0]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	20005df0 	.word	0x20005df0

0800a3a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a3b0:	f7ff ffee 	bl	800a390 <HAL_GetTick>
 800a3b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c0:	d005      	beq.n	800a3ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a3c2:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <HAL_Delay+0x44>)
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a3ce:	bf00      	nop
 800a3d0:	f7ff ffde 	bl	800a390 <HAL_GetTick>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d8f7      	bhi.n	800a3d0 <HAL_Delay+0x28>
  {
  }
}
 800a3e0:	bf00      	nop
 800a3e2:	bf00      	nop
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000320 	.word	0x20000320

0800a3f0 <__NVIC_SetPriorityGrouping>:
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f003 0307 	and.w	r3, r3, #7
 800a3fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a400:	4b0c      	ldr	r3, [pc, #48]	; (800a434 <__NVIC_SetPriorityGrouping+0x44>)
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a40c:	4013      	ands	r3, r2
 800a40e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a41c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a422:	4a04      	ldr	r2, [pc, #16]	; (800a434 <__NVIC_SetPriorityGrouping+0x44>)
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	60d3      	str	r3, [r2, #12]
}
 800a428:	bf00      	nop
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	e000ed00 	.word	0xe000ed00

0800a438 <__NVIC_GetPriorityGrouping>:
{
 800a438:	b480      	push	{r7}
 800a43a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a43c:	4b04      	ldr	r3, [pc, #16]	; (800a450 <__NVIC_GetPriorityGrouping+0x18>)
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	0a1b      	lsrs	r3, r3, #8
 800a442:	f003 0307 	and.w	r3, r3, #7
}
 800a446:	4618      	mov	r0, r3
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	e000ed00 	.word	0xe000ed00

0800a454 <__NVIC_EnableIRQ>:
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a45e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a462:	2b00      	cmp	r3, #0
 800a464:	db0b      	blt.n	800a47e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a466:	79fb      	ldrb	r3, [r7, #7]
 800a468:	f003 021f 	and.w	r2, r3, #31
 800a46c:	4907      	ldr	r1, [pc, #28]	; (800a48c <__NVIC_EnableIRQ+0x38>)
 800a46e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a472:	095b      	lsrs	r3, r3, #5
 800a474:	2001      	movs	r0, #1
 800a476:	fa00 f202 	lsl.w	r2, r0, r2
 800a47a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a47e:	bf00      	nop
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	e000e100 	.word	0xe000e100

0800a490 <__NVIC_SetPriority>:
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	6039      	str	r1, [r7, #0]
 800a49a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a49c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	db0a      	blt.n	800a4ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	490c      	ldr	r1, [pc, #48]	; (800a4dc <__NVIC_SetPriority+0x4c>)
 800a4aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4ae:	0112      	lsls	r2, r2, #4
 800a4b0:	b2d2      	uxtb	r2, r2
 800a4b2:	440b      	add	r3, r1
 800a4b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a4b8:	e00a      	b.n	800a4d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	4908      	ldr	r1, [pc, #32]	; (800a4e0 <__NVIC_SetPriority+0x50>)
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	f003 030f 	and.w	r3, r3, #15
 800a4c6:	3b04      	subs	r3, #4
 800a4c8:	0112      	lsls	r2, r2, #4
 800a4ca:	b2d2      	uxtb	r2, r2
 800a4cc:	440b      	add	r3, r1
 800a4ce:	761a      	strb	r2, [r3, #24]
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	e000e100 	.word	0xe000e100
 800a4e0:	e000ed00 	.word	0xe000ed00

0800a4e4 <NVIC_EncodePriority>:
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b089      	sub	sp, #36	; 0x24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	f1c3 0307 	rsb	r3, r3, #7
 800a4fe:	2b04      	cmp	r3, #4
 800a500:	bf28      	it	cs
 800a502:	2304      	movcs	r3, #4
 800a504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	3304      	adds	r3, #4
 800a50a:	2b06      	cmp	r3, #6
 800a50c:	d902      	bls.n	800a514 <NVIC_EncodePriority+0x30>
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	3b03      	subs	r3, #3
 800a512:	e000      	b.n	800a516 <NVIC_EncodePriority+0x32>
 800a514:	2300      	movs	r3, #0
 800a516:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a518:	f04f 32ff 	mov.w	r2, #4294967295
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	fa02 f303 	lsl.w	r3, r2, r3
 800a522:	43da      	mvns	r2, r3
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	401a      	ands	r2, r3
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a52c:	f04f 31ff 	mov.w	r1, #4294967295
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	fa01 f303 	lsl.w	r3, r1, r3
 800a536:	43d9      	mvns	r1, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a53c:	4313      	orrs	r3, r2
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3724      	adds	r7, #36	; 0x24
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
	...

0800a54c <SysTick_Config>:
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3b01      	subs	r3, #1
 800a558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a55c:	d301      	bcc.n	800a562 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800a55e:	2301      	movs	r3, #1
 800a560:	e00f      	b.n	800a582 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a562:	4a0a      	ldr	r2, [pc, #40]	; (800a58c <SysTick_Config+0x40>)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3b01      	subs	r3, #1
 800a568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a56a:	210f      	movs	r1, #15
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295
 800a570:	f7ff ff8e 	bl	800a490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a574:	4b05      	ldr	r3, [pc, #20]	; (800a58c <SysTick_Config+0x40>)
 800a576:	2200      	movs	r2, #0
 800a578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a57a:	4b04      	ldr	r3, [pc, #16]	; (800a58c <SysTick_Config+0x40>)
 800a57c:	2207      	movs	r2, #7
 800a57e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	e000e010 	.word	0xe000e010

0800a590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7ff ff29 	bl	800a3f0 <__NVIC_SetPriorityGrouping>
}
 800a59e:	bf00      	nop
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b086      	sub	sp, #24
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	60b9      	str	r1, [r7, #8]
 800a5b0:	607a      	str	r2, [r7, #4]
 800a5b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a5b8:	f7ff ff3e 	bl	800a438 <__NVIC_GetPriorityGrouping>
 800a5bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	68b9      	ldr	r1, [r7, #8]
 800a5c2:	6978      	ldr	r0, [r7, #20]
 800a5c4:	f7ff ff8e 	bl	800a4e4 <NVIC_EncodePriority>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7ff ff5d 	bl	800a490 <__NVIC_SetPriority>
}
 800a5d6:	bf00      	nop
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a5e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7ff ff31 	bl	800a454 <__NVIC_EnableIRQ>
}
 800a5f2:	bf00      	nop
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b082      	sub	sp, #8
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7ff ffa2 	bl	800a54c <SysTick_Config>
 800a608:	4603      	mov	r3, r0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b086      	sub	sp, #24
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
 800a61e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a628:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_DMA_Start_IT+0x26>
 800a634:	2302      	movs	r3, #2
 800a636:	e040      	b.n	800a6ba <HAL_DMA_Start_IT+0xa8>
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a646:	b2db      	uxtb	r3, r3
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d12f      	bne.n	800a6ac <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2202      	movs	r2, #2
 800a650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f000 f82e 	bl	800a6c2 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a66a:	223f      	movs	r2, #63	; 0x3f
 800a66c:	409a      	lsls	r2, r3
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f042 0216 	orr.w	r2, r2, #22
 800a680:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a686:	2b00      	cmp	r3, #0
 800a688:	d007      	beq.n	800a69a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f042 0208 	orr.w	r2, r2, #8
 800a698:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f042 0201 	orr.w	r2, r2, #1
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	e005      	b.n	800a6b8 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3718      	adds	r7, #24
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b085      	sub	sp, #20
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	607a      	str	r2, [r7, #4]
 800a6ce:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a6de:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	2b40      	cmp	r3, #64	; 0x40
 800a6ee:	d108      	bne.n	800a702 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a700:	e007      	b.n	800a712 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	60da      	str	r2, [r3, #12]
}
 800a712:	bf00      	nop
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
	...

0800a720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a720:	b480      	push	{r7}
 800a722:	b089      	sub	sp, #36	; 0x24
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a72e:	2300      	movs	r3, #0
 800a730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a732:	2300      	movs	r3, #0
 800a734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a736:	2300      	movs	r3, #0
 800a738:	61fb      	str	r3, [r7, #28]
 800a73a:	e177      	b.n	800aa2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a73c:	2201      	movs	r2, #1
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	fa02 f303 	lsl.w	r3, r2, r3
 800a744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	4013      	ands	r3, r2
 800a74e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	429a      	cmp	r2, r3
 800a756:	f040 8166 	bne.w	800aa26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f003 0303 	and.w	r3, r3, #3
 800a762:	2b01      	cmp	r3, #1
 800a764:	d005      	beq.n	800a772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d130      	bne.n	800a7d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	005b      	lsls	r3, r3, #1
 800a77c:	2203      	movs	r2, #3
 800a77e:	fa02 f303 	lsl.w	r3, r2, r3
 800a782:	43db      	mvns	r3, r3
 800a784:	69ba      	ldr	r2, [r7, #24]
 800a786:	4013      	ands	r3, r2
 800a788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	68da      	ldr	r2, [r3, #12]
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	fa02 f303 	lsl.w	r3, r2, r3
 800a796:	69ba      	ldr	r2, [r7, #24]
 800a798:	4313      	orrs	r3, r2
 800a79a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	69ba      	ldr	r2, [r7, #24]
 800a7a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b0:	43db      	mvns	r3, r3
 800a7b2:	69ba      	ldr	r2, [r7, #24]
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	091b      	lsrs	r3, r3, #4
 800a7be:	f003 0201 	and.w	r2, r3, #1
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	69ba      	ldr	r2, [r7, #24]
 800a7d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	f003 0303 	and.w	r3, r3, #3
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	d017      	beq.n	800a810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	005b      	lsls	r3, r3, #1
 800a7ea:	2203      	movs	r2, #3
 800a7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f0:	43db      	mvns	r3, r3
 800a7f2:	69ba      	ldr	r2, [r7, #24]
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	689a      	ldr	r2, [r3, #8]
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	005b      	lsls	r3, r3, #1
 800a800:	fa02 f303 	lsl.w	r3, r2, r3
 800a804:	69ba      	ldr	r2, [r7, #24]
 800a806:	4313      	orrs	r3, r2
 800a808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	69ba      	ldr	r2, [r7, #24]
 800a80e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	f003 0303 	and.w	r3, r3, #3
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d123      	bne.n	800a864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	08da      	lsrs	r2, r3, #3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3208      	adds	r2, #8
 800a824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	f003 0307 	and.w	r3, r3, #7
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	220f      	movs	r2, #15
 800a834:	fa02 f303 	lsl.w	r3, r2, r3
 800a838:	43db      	mvns	r3, r3
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	4013      	ands	r3, r2
 800a83e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	691a      	ldr	r2, [r3, #16]
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	f003 0307 	and.w	r3, r3, #7
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	fa02 f303 	lsl.w	r3, r2, r3
 800a850:	69ba      	ldr	r2, [r7, #24]
 800a852:	4313      	orrs	r3, r2
 800a854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	08da      	lsrs	r2, r3, #3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	3208      	adds	r2, #8
 800a85e:	69b9      	ldr	r1, [r7, #24]
 800a860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	005b      	lsls	r3, r3, #1
 800a86e:	2203      	movs	r2, #3
 800a870:	fa02 f303 	lsl.w	r3, r2, r3
 800a874:	43db      	mvns	r3, r3
 800a876:	69ba      	ldr	r2, [r7, #24]
 800a878:	4013      	ands	r3, r2
 800a87a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	f003 0203 	and.w	r2, r3, #3
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	005b      	lsls	r3, r3, #1
 800a888:	fa02 f303 	lsl.w	r3, r2, r3
 800a88c:	69ba      	ldr	r2, [r7, #24]
 800a88e:	4313      	orrs	r3, r2
 800a890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	69ba      	ldr	r2, [r7, #24]
 800a896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 80c0 	beq.w	800aa26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60fb      	str	r3, [r7, #12]
 800a8aa:	4b66      	ldr	r3, [pc, #408]	; (800aa44 <HAL_GPIO_Init+0x324>)
 800a8ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ae:	4a65      	ldr	r2, [pc, #404]	; (800aa44 <HAL_GPIO_Init+0x324>)
 800a8b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8b4:	6453      	str	r3, [r2, #68]	; 0x44
 800a8b6:	4b63      	ldr	r3, [pc, #396]	; (800aa44 <HAL_GPIO_Init+0x324>)
 800a8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a8c2:	4a61      	ldr	r2, [pc, #388]	; (800aa48 <HAL_GPIO_Init+0x328>)
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	089b      	lsrs	r3, r3, #2
 800a8c8:	3302      	adds	r3, #2
 800a8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	220f      	movs	r2, #15
 800a8da:	fa02 f303 	lsl.w	r3, r2, r3
 800a8de:	43db      	mvns	r3, r3
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a58      	ldr	r2, [pc, #352]	; (800aa4c <HAL_GPIO_Init+0x32c>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d037      	beq.n	800a95e <HAL_GPIO_Init+0x23e>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a57      	ldr	r2, [pc, #348]	; (800aa50 <HAL_GPIO_Init+0x330>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d031      	beq.n	800a95a <HAL_GPIO_Init+0x23a>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a56      	ldr	r2, [pc, #344]	; (800aa54 <HAL_GPIO_Init+0x334>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d02b      	beq.n	800a956 <HAL_GPIO_Init+0x236>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a55      	ldr	r2, [pc, #340]	; (800aa58 <HAL_GPIO_Init+0x338>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d025      	beq.n	800a952 <HAL_GPIO_Init+0x232>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a54      	ldr	r2, [pc, #336]	; (800aa5c <HAL_GPIO_Init+0x33c>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d01f      	beq.n	800a94e <HAL_GPIO_Init+0x22e>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a53      	ldr	r2, [pc, #332]	; (800aa60 <HAL_GPIO_Init+0x340>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d019      	beq.n	800a94a <HAL_GPIO_Init+0x22a>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a52      	ldr	r2, [pc, #328]	; (800aa64 <HAL_GPIO_Init+0x344>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d013      	beq.n	800a946 <HAL_GPIO_Init+0x226>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a51      	ldr	r2, [pc, #324]	; (800aa68 <HAL_GPIO_Init+0x348>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d00d      	beq.n	800a942 <HAL_GPIO_Init+0x222>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a50      	ldr	r2, [pc, #320]	; (800aa6c <HAL_GPIO_Init+0x34c>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d007      	beq.n	800a93e <HAL_GPIO_Init+0x21e>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a4f      	ldr	r2, [pc, #316]	; (800aa70 <HAL_GPIO_Init+0x350>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d101      	bne.n	800a93a <HAL_GPIO_Init+0x21a>
 800a936:	2309      	movs	r3, #9
 800a938:	e012      	b.n	800a960 <HAL_GPIO_Init+0x240>
 800a93a:	230a      	movs	r3, #10
 800a93c:	e010      	b.n	800a960 <HAL_GPIO_Init+0x240>
 800a93e:	2308      	movs	r3, #8
 800a940:	e00e      	b.n	800a960 <HAL_GPIO_Init+0x240>
 800a942:	2307      	movs	r3, #7
 800a944:	e00c      	b.n	800a960 <HAL_GPIO_Init+0x240>
 800a946:	2306      	movs	r3, #6
 800a948:	e00a      	b.n	800a960 <HAL_GPIO_Init+0x240>
 800a94a:	2305      	movs	r3, #5
 800a94c:	e008      	b.n	800a960 <HAL_GPIO_Init+0x240>
 800a94e:	2304      	movs	r3, #4
 800a950:	e006      	b.n	800a960 <HAL_GPIO_Init+0x240>
 800a952:	2303      	movs	r3, #3
 800a954:	e004      	b.n	800a960 <HAL_GPIO_Init+0x240>
 800a956:	2302      	movs	r3, #2
 800a958:	e002      	b.n	800a960 <HAL_GPIO_Init+0x240>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e000      	b.n	800a960 <HAL_GPIO_Init+0x240>
 800a95e:	2300      	movs	r3, #0
 800a960:	69fa      	ldr	r2, [r7, #28]
 800a962:	f002 0203 	and.w	r2, r2, #3
 800a966:	0092      	lsls	r2, r2, #2
 800a968:	4093      	lsls	r3, r2
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a970:	4935      	ldr	r1, [pc, #212]	; (800aa48 <HAL_GPIO_Init+0x328>)
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	089b      	lsrs	r3, r3, #2
 800a976:	3302      	adds	r3, #2
 800a978:	69ba      	ldr	r2, [r7, #24]
 800a97a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a97e:	4b3d      	ldr	r3, [pc, #244]	; (800aa74 <HAL_GPIO_Init+0x354>)
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	43db      	mvns	r3, r3
 800a988:	69ba      	ldr	r2, [r7, #24]
 800a98a:	4013      	ands	r3, r2
 800a98c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a99a:	69ba      	ldr	r2, [r7, #24]
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a9a2:	4a34      	ldr	r2, [pc, #208]	; (800aa74 <HAL_GPIO_Init+0x354>)
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a9a8:	4b32      	ldr	r3, [pc, #200]	; (800aa74 <HAL_GPIO_Init+0x354>)
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	43db      	mvns	r3, r3
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d003      	beq.n	800a9cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a9cc:	4a29      	ldr	r2, [pc, #164]	; (800aa74 <HAL_GPIO_Init+0x354>)
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a9d2:	4b28      	ldr	r3, [pc, #160]	; (800aa74 <HAL_GPIO_Init+0x354>)
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	43db      	mvns	r3, r3
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a9f6:	4a1f      	ldr	r2, [pc, #124]	; (800aa74 <HAL_GPIO_Init+0x354>)
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a9fc:	4b1d      	ldr	r3, [pc, #116]	; (800aa74 <HAL_GPIO_Init+0x354>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	43db      	mvns	r3, r3
 800aa06:	69ba      	ldr	r2, [r7, #24]
 800aa08:	4013      	ands	r3, r2
 800aa0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d003      	beq.n	800aa20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800aa20:	4a14      	ldr	r2, [pc, #80]	; (800aa74 <HAL_GPIO_Init+0x354>)
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	61fb      	str	r3, [r7, #28]
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	2b0f      	cmp	r3, #15
 800aa30:	f67f ae84 	bls.w	800a73c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop
 800aa38:	3724      	adds	r7, #36	; 0x24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	40023800 	.word	0x40023800
 800aa48:	40013800 	.word	0x40013800
 800aa4c:	40020000 	.word	0x40020000
 800aa50:	40020400 	.word	0x40020400
 800aa54:	40020800 	.word	0x40020800
 800aa58:	40020c00 	.word	0x40020c00
 800aa5c:	40021000 	.word	0x40021000
 800aa60:	40021400 	.word	0x40021400
 800aa64:	40021800 	.word	0x40021800
 800aa68:	40021c00 	.word	0x40021c00
 800aa6c:	40022000 	.word	0x40022000
 800aa70:	40022400 	.word	0x40022400
 800aa74:	40013c00 	.word	0x40013c00

0800aa78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691a      	ldr	r2, [r3, #16]
 800aa88:	887b      	ldrh	r3, [r7, #2]
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aa90:	2301      	movs	r3, #1
 800aa92:	73fb      	strb	r3, [r7, #15]
 800aa94:	e001      	b.n	800aa9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aa96:	2300      	movs	r3, #0
 800aa98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aa9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	807b      	strh	r3, [r7, #2]
 800aab4:	4613      	mov	r3, r2
 800aab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aab8:	787b      	ldrb	r3, [r7, #1]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aabe:	887a      	ldrh	r2, [r7, #2]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aac4:	e003      	b.n	800aace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aac6:	887b      	ldrh	r3, [r7, #2]
 800aac8:	041a      	lsls	r2, r3, #16
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	619a      	str	r2, [r3, #24]
}
 800aace:	bf00      	nop
 800aad0:	370c      	adds	r7, #12
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aada:	b480      	push	{r7}
 800aadc:	b085      	sub	sp, #20
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	460b      	mov	r3, r1
 800aae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aaec:	887a      	ldrh	r2, [r7, #2]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	041a      	lsls	r2, r3, #16
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	43d9      	mvns	r1, r3
 800aaf8:	887b      	ldrh	r3, [r7, #2]
 800aafa:	400b      	ands	r3, r1
 800aafc:	431a      	orrs	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	619a      	str	r2, [r3, #24]
}
 800ab02:	bf00      	nop
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
	...

0800ab10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ab1a:	4b08      	ldr	r3, [pc, #32]	; (800ab3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ab1c:	695a      	ldr	r2, [r3, #20]
 800ab1e:	88fb      	ldrh	r3, [r7, #6]
 800ab20:	4013      	ands	r3, r2
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d006      	beq.n	800ab34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ab26:	4a05      	ldr	r2, [pc, #20]	; (800ab3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ab28:	88fb      	ldrh	r3, [r7, #6]
 800ab2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ab2c:	88fb      	ldrh	r3, [r7, #6]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 f806 	bl	800ab40 <HAL_GPIO_EXTI_Callback>
  }
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	40013c00 	.word	0x40013c00

0800ab40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800ab4a:	bf00      	nop
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
	...

0800ab58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d101      	bne.n	800ab6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e12b      	b.n	800adc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7f8 f850 	bl	8002c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2224      	movs	r2, #36	; 0x24
 800ab88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f022 0201 	bic.w	r2, r2, #1
 800ab9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800abba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800abbc:	f001 fc76 	bl	800c4ac <HAL_RCC_GetPCLK1Freq>
 800abc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	4a81      	ldr	r2, [pc, #516]	; (800adcc <HAL_I2C_Init+0x274>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d807      	bhi.n	800abdc <HAL_I2C_Init+0x84>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4a80      	ldr	r2, [pc, #512]	; (800add0 <HAL_I2C_Init+0x278>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	bf94      	ite	ls
 800abd4:	2301      	movls	r3, #1
 800abd6:	2300      	movhi	r3, #0
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	e006      	b.n	800abea <HAL_I2C_Init+0x92>
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	4a7d      	ldr	r2, [pc, #500]	; (800add4 <HAL_I2C_Init+0x27c>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	bf94      	ite	ls
 800abe4:	2301      	movls	r3, #1
 800abe6:	2300      	movhi	r3, #0
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e0e7      	b.n	800adc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	4a78      	ldr	r2, [pc, #480]	; (800add8 <HAL_I2C_Init+0x280>)
 800abf6:	fba2 2303 	umull	r2, r3, r2, r3
 800abfa:	0c9b      	lsrs	r3, r3, #18
 800abfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68ba      	ldr	r2, [r7, #8]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	4a6a      	ldr	r2, [pc, #424]	; (800adcc <HAL_I2C_Init+0x274>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d802      	bhi.n	800ac2c <HAL_I2C_Init+0xd4>
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	e009      	b.n	800ac40 <HAL_I2C_Init+0xe8>
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ac32:	fb02 f303 	mul.w	r3, r2, r3
 800ac36:	4a69      	ldr	r2, [pc, #420]	; (800addc <HAL_I2C_Init+0x284>)
 800ac38:	fba2 2303 	umull	r2, r3, r2, r3
 800ac3c:	099b      	lsrs	r3, r3, #6
 800ac3e:	3301      	adds	r3, #1
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	6812      	ldr	r2, [r2, #0]
 800ac44:	430b      	orrs	r3, r1
 800ac46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ac52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	495c      	ldr	r1, [pc, #368]	; (800adcc <HAL_I2C_Init+0x274>)
 800ac5c:	428b      	cmp	r3, r1
 800ac5e:	d819      	bhi.n	800ac94 <HAL_I2C_Init+0x13c>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	1e59      	subs	r1, r3, #1
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	005b      	lsls	r3, r3, #1
 800ac6a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac6e:	1c59      	adds	r1, r3, #1
 800ac70:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ac74:	400b      	ands	r3, r1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <HAL_I2C_Init+0x138>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	1e59      	subs	r1, r3, #1
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	005b      	lsls	r3, r3, #1
 800ac84:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac88:	3301      	adds	r3, #1
 800ac8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac8e:	e051      	b.n	800ad34 <HAL_I2C_Init+0x1dc>
 800ac90:	2304      	movs	r3, #4
 800ac92:	e04f      	b.n	800ad34 <HAL_I2C_Init+0x1dc>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d111      	bne.n	800acc0 <HAL_I2C_Init+0x168>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	1e58      	subs	r0, r3, #1
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6859      	ldr	r1, [r3, #4]
 800aca4:	460b      	mov	r3, r1
 800aca6:	005b      	lsls	r3, r3, #1
 800aca8:	440b      	add	r3, r1
 800acaa:	fbb0 f3f3 	udiv	r3, r0, r3
 800acae:	3301      	adds	r3, #1
 800acb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	bf0c      	ite	eq
 800acb8:	2301      	moveq	r3, #1
 800acba:	2300      	movne	r3, #0
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	e012      	b.n	800ace6 <HAL_I2C_Init+0x18e>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	1e58      	subs	r0, r3, #1
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6859      	ldr	r1, [r3, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	0099      	lsls	r1, r3, #2
 800acd0:	440b      	add	r3, r1
 800acd2:	fbb0 f3f3 	udiv	r3, r0, r3
 800acd6:	3301      	adds	r3, #1
 800acd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acdc:	2b00      	cmp	r3, #0
 800acde:	bf0c      	ite	eq
 800ace0:	2301      	moveq	r3, #1
 800ace2:	2300      	movne	r3, #0
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <HAL_I2C_Init+0x196>
 800acea:	2301      	movs	r3, #1
 800acec:	e022      	b.n	800ad34 <HAL_I2C_Init+0x1dc>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10e      	bne.n	800ad14 <HAL_I2C_Init+0x1bc>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	1e58      	subs	r0, r3, #1
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6859      	ldr	r1, [r3, #4]
 800acfe:	460b      	mov	r3, r1
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	440b      	add	r3, r1
 800ad04:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad08:	3301      	adds	r3, #1
 800ad0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad12:	e00f      	b.n	800ad34 <HAL_I2C_Init+0x1dc>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	1e58      	subs	r0, r3, #1
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6859      	ldr	r1, [r3, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	440b      	add	r3, r1
 800ad22:	0099      	lsls	r1, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad34:	6879      	ldr	r1, [r7, #4]
 800ad36:	6809      	ldr	r1, [r1, #0]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	69da      	ldr	r2, [r3, #28]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	431a      	orrs	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	430a      	orrs	r2, r1
 800ad56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ad62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	6911      	ldr	r1, [r2, #16]
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	68d2      	ldr	r2, [r2, #12]
 800ad6e:	4311      	orrs	r1, r2
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	6812      	ldr	r2, [r2, #0]
 800ad74:	430b      	orrs	r3, r1
 800ad76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	695a      	ldr	r2, [r3, #20]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	431a      	orrs	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	430a      	orrs	r2, r1
 800ad92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f042 0201 	orr.w	r2, r2, #1
 800ada2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2220      	movs	r2, #32
 800adae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	000186a0 	.word	0x000186a0
 800add0:	001e847f 	.word	0x001e847f
 800add4:	003d08ff 	.word	0x003d08ff
 800add8:	431bde83 	.word	0x431bde83
 800addc:	10624dd3 	.word	0x10624dd3

0800ade0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af02      	add	r7, sp, #8
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	4608      	mov	r0, r1
 800adea:	4611      	mov	r1, r2
 800adec:	461a      	mov	r2, r3
 800adee:	4603      	mov	r3, r0
 800adf0:	817b      	strh	r3, [r7, #10]
 800adf2:	460b      	mov	r3, r1
 800adf4:	813b      	strh	r3, [r7, #8]
 800adf6:	4613      	mov	r3, r2
 800adf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800adfa:	f7ff fac9 	bl	800a390 <HAL_GetTick>
 800adfe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b20      	cmp	r3, #32
 800ae0a:	f040 80d9 	bne.w	800afc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	2319      	movs	r3, #25
 800ae14:	2201      	movs	r2, #1
 800ae16:	496d      	ldr	r1, [pc, #436]	; (800afcc <HAL_I2C_Mem_Write+0x1ec>)
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f000 fc7f 	bl	800b71c <I2C_WaitOnFlagUntilTimeout>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ae24:	2302      	movs	r3, #2
 800ae26:	e0cc      	b.n	800afc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d101      	bne.n	800ae36 <HAL_I2C_Mem_Write+0x56>
 800ae32:	2302      	movs	r3, #2
 800ae34:	e0c5      	b.n	800afc2 <HAL_I2C_Mem_Write+0x1e2>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d007      	beq.n	800ae5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f042 0201 	orr.w	r2, r2, #1
 800ae5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2221      	movs	r2, #33	; 0x21
 800ae70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2240      	movs	r2, #64	; 0x40
 800ae78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6a3a      	ldr	r2, [r7, #32]
 800ae86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ae8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	4a4d      	ldr	r2, [pc, #308]	; (800afd0 <HAL_I2C_Mem_Write+0x1f0>)
 800ae9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ae9e:	88f8      	ldrh	r0, [r7, #6]
 800aea0:	893a      	ldrh	r2, [r7, #8]
 800aea2:	8979      	ldrh	r1, [r7, #10]
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	4603      	mov	r3, r0
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f000 fab6 	bl	800b420 <I2C_RequestMemoryWrite>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d052      	beq.n	800af60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e081      	b.n	800afc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 fd00 	bl	800b8c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00d      	beq.n	800aeea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	d107      	bne.n	800aee6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aee4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	e06b      	b.n	800afc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeee:	781a      	ldrb	r2, [r3, #0]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af04:	3b01      	subs	r3, #1
 800af06:	b29a      	uxth	r2, r3
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af10:	b29b      	uxth	r3, r3
 800af12:	3b01      	subs	r3, #1
 800af14:	b29a      	uxth	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	f003 0304 	and.w	r3, r3, #4
 800af24:	2b04      	cmp	r3, #4
 800af26:	d11b      	bne.n	800af60 <HAL_I2C_Mem_Write+0x180>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d017      	beq.n	800af60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	781a      	ldrb	r2, [r3, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af40:	1c5a      	adds	r2, r3, #1
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af4a:	3b01      	subs	r3, #1
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af56:	b29b      	uxth	r3, r3
 800af58:	3b01      	subs	r3, #1
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af64:	2b00      	cmp	r3, #0
 800af66:	d1aa      	bne.n	800aebe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f000 fcec 	bl	800b94a <I2C_WaitOnBTFFlagUntilTimeout>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d00d      	beq.n	800af94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7c:	2b04      	cmp	r3, #4
 800af7e:	d107      	bne.n	800af90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	e016      	b.n	800afc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	e000      	b.n	800afc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800afc0:	2302      	movs	r3, #2
  }
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3718      	adds	r7, #24
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	00100002 	.word	0x00100002
 800afd0:	ffff0000 	.word	0xffff0000

0800afd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08c      	sub	sp, #48	; 0x30
 800afd8:	af02      	add	r7, sp, #8
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	4608      	mov	r0, r1
 800afde:	4611      	mov	r1, r2
 800afe0:	461a      	mov	r2, r3
 800afe2:	4603      	mov	r3, r0
 800afe4:	817b      	strh	r3, [r7, #10]
 800afe6:	460b      	mov	r3, r1
 800afe8:	813b      	strh	r3, [r7, #8]
 800afea:	4613      	mov	r3, r2
 800afec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800afee:	f7ff f9cf 	bl	800a390 <HAL_GetTick>
 800aff2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b20      	cmp	r3, #32
 800affe:	f040 8208 	bne.w	800b412 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	2319      	movs	r3, #25
 800b008:	2201      	movs	r2, #1
 800b00a:	497b      	ldr	r1, [pc, #492]	; (800b1f8 <HAL_I2C_Mem_Read+0x224>)
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f000 fb85 	bl	800b71c <I2C_WaitOnFlagUntilTimeout>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b018:	2302      	movs	r3, #2
 800b01a:	e1fb      	b.n	800b414 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b022:	2b01      	cmp	r3, #1
 800b024:	d101      	bne.n	800b02a <HAL_I2C_Mem_Read+0x56>
 800b026:	2302      	movs	r3, #2
 800b028:	e1f4      	b.n	800b414 <HAL_I2C_Mem_Read+0x440>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d007      	beq.n	800b050 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f042 0201 	orr.w	r2, r2, #1
 800b04e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b05e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2222      	movs	r2, #34	; 0x22
 800b064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2240      	movs	r2, #64	; 0x40
 800b06c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b07a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b086:	b29a      	uxth	r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4a5b      	ldr	r2, [pc, #364]	; (800b1fc <HAL_I2C_Mem_Read+0x228>)
 800b090:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b092:	88f8      	ldrh	r0, [r7, #6]
 800b094:	893a      	ldrh	r2, [r7, #8]
 800b096:	8979      	ldrh	r1, [r7, #10]
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	9301      	str	r3, [sp, #4]
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 fa52 	bl	800b54c <I2C_RequestMemoryRead>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e1b0      	b.n	800b414 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d113      	bne.n	800b0e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	623b      	str	r3, [r7, #32]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	695b      	ldr	r3, [r3, #20]
 800b0c4:	623b      	str	r3, [r7, #32]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	623b      	str	r3, [r7, #32]
 800b0ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	e184      	b.n	800b3ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d11b      	bne.n	800b122 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	61fb      	str	r3, [r7, #28]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	61fb      	str	r3, [r7, #28]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	61fb      	str	r3, [r7, #28]
 800b10e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	e164      	b.n	800b3ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b126:	2b02      	cmp	r3, #2
 800b128:	d11b      	bne.n	800b162 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b138:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b148:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b14a:	2300      	movs	r3, #0
 800b14c:	61bb      	str	r3, [r7, #24]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	61bb      	str	r3, [r7, #24]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	61bb      	str	r3, [r7, #24]
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	e144      	b.n	800b3ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b162:	2300      	movs	r3, #0
 800b164:	617b      	str	r3, [r7, #20]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	695b      	ldr	r3, [r3, #20]
 800b16c:	617b      	str	r3, [r7, #20]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	617b      	str	r3, [r7, #20]
 800b176:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b178:	e138      	b.n	800b3ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b17e:	2b03      	cmp	r3, #3
 800b180:	f200 80f1 	bhi.w	800b366 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d123      	bne.n	800b1d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b18e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 fc1b 	bl	800b9cc <I2C_WaitOnRXNEFlagUntilTimeout>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e139      	b.n	800b414 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	691a      	ldr	r2, [r3, #16]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	b2d2      	uxtb	r2, r2
 800b1ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b1d2:	e10b      	b.n	800b3ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d14e      	bne.n	800b27a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	4906      	ldr	r1, [pc, #24]	; (800b200 <HAL_I2C_Mem_Read+0x22c>)
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f000 fa98 	bl	800b71c <I2C_WaitOnFlagUntilTimeout>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d008      	beq.n	800b204 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e10e      	b.n	800b414 <HAL_I2C_Mem_Read+0x440>
 800b1f6:	bf00      	nop
 800b1f8:	00100002 	.word	0x00100002
 800b1fc:	ffff0000 	.word	0xffff0000
 800b200:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b212:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	691a      	ldr	r2, [r3, #16]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	b2d2      	uxtb	r2, r2
 800b220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b230:	3b01      	subs	r3, #1
 800b232:	b29a      	uxth	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	3b01      	subs	r3, #1
 800b240:	b29a      	uxth	r2, r3
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	691a      	ldr	r2, [r3, #16]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b250:	b2d2      	uxtb	r2, r2
 800b252:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b262:	3b01      	subs	r3, #1
 800b264:	b29a      	uxth	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b26e:	b29b      	uxth	r3, r3
 800b270:	3b01      	subs	r3, #1
 800b272:	b29a      	uxth	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b278:	e0b8      	b.n	800b3ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b280:	2200      	movs	r2, #0
 800b282:	4966      	ldr	r1, [pc, #408]	; (800b41c <HAL_I2C_Mem_Read+0x448>)
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f000 fa49 	bl	800b71c <I2C_WaitOnFlagUntilTimeout>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d001      	beq.n	800b294 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	e0bf      	b.n	800b414 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	691a      	ldr	r2, [r3, #16]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ae:	b2d2      	uxtb	r2, r2
 800b2b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2dc:	2200      	movs	r2, #0
 800b2de:	494f      	ldr	r1, [pc, #316]	; (800b41c <HAL_I2C_Mem_Read+0x448>)
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f000 fa1b 	bl	800b71c <I2C_WaitOnFlagUntilTimeout>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e091      	b.n	800b414 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	691a      	ldr	r2, [r3, #16]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b31c:	3b01      	subs	r3, #1
 800b31e:	b29a      	uxth	r2, r3
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b328:	b29b      	uxth	r3, r3
 800b32a:	3b01      	subs	r3, #1
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	691a      	ldr	r2, [r3, #16]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33c:	b2d2      	uxtb	r2, r2
 800b33e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b344:	1c5a      	adds	r2, r3, #1
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b34e:	3b01      	subs	r3, #1
 800b350:	b29a      	uxth	r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	3b01      	subs	r3, #1
 800b35e:	b29a      	uxth	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b364:	e042      	b.n	800b3ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b368:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f000 fb2e 	bl	800b9cc <I2C_WaitOnRXNEFlagUntilTimeout>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e04c      	b.n	800b414 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	691a      	ldr	r2, [r3, #16]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b384:	b2d2      	uxtb	r2, r2
 800b386:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38c:	1c5a      	adds	r2, r3, #1
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b396:	3b01      	subs	r3, #1
 800b398:	b29a      	uxth	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	f003 0304 	and.w	r3, r3, #4
 800b3b6:	2b04      	cmp	r3, #4
 800b3b8:	d118      	bne.n	800b3ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	691a      	ldr	r2, [r3, #16]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c4:	b2d2      	uxtb	r2, r2
 800b3c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f47f aec2 	bne.w	800b17a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2220      	movs	r2, #32
 800b3fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	e000      	b.n	800b414 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b412:	2302      	movs	r3, #2
  }
}
 800b414:	4618      	mov	r0, r3
 800b416:	3728      	adds	r7, #40	; 0x28
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	00010004 	.word	0x00010004

0800b420 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af02      	add	r7, sp, #8
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	4608      	mov	r0, r1
 800b42a:	4611      	mov	r1, r2
 800b42c:	461a      	mov	r2, r3
 800b42e:	4603      	mov	r3, r0
 800b430:	817b      	strh	r3, [r7, #10]
 800b432:	460b      	mov	r3, r1
 800b434:	813b      	strh	r3, [r7, #8]
 800b436:	4613      	mov	r3, r2
 800b438:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	6a3b      	ldr	r3, [r7, #32]
 800b450:	2200      	movs	r2, #0
 800b452:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f000 f960 	bl	800b71c <I2C_WaitOnFlagUntilTimeout>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00d      	beq.n	800b47e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b46c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b470:	d103      	bne.n	800b47a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b478:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e05f      	b.n	800b53e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b47e:	897b      	ldrh	r3, [r7, #10]
 800b480:	b2db      	uxtb	r3, r3
 800b482:	461a      	mov	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b48c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	6a3a      	ldr	r2, [r7, #32]
 800b492:	492d      	ldr	r1, [pc, #180]	; (800b548 <I2C_RequestMemoryWrite+0x128>)
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f000 f998 	bl	800b7ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d001      	beq.n	800b4a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e04c      	b.n	800b53e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	617b      	str	r3, [r7, #20]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	617b      	str	r3, [r7, #20]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	617b      	str	r3, [r7, #20]
 800b4b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4bc:	6a39      	ldr	r1, [r7, #32]
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f000 fa02 	bl	800b8c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00d      	beq.n	800b4e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ce:	2b04      	cmp	r3, #4
 800b4d0:	d107      	bne.n	800b4e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e02b      	b.n	800b53e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b4e6:	88fb      	ldrh	r3, [r7, #6]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d105      	bne.n	800b4f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b4ec:	893b      	ldrh	r3, [r7, #8]
 800b4ee:	b2da      	uxtb	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	611a      	str	r2, [r3, #16]
 800b4f6:	e021      	b.n	800b53c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b4f8:	893b      	ldrh	r3, [r7, #8]
 800b4fa:	0a1b      	lsrs	r3, r3, #8
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b508:	6a39      	ldr	r1, [r7, #32]
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f000 f9dc 	bl	800b8c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00d      	beq.n	800b532 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51a:	2b04      	cmp	r3, #4
 800b51c:	d107      	bne.n	800b52e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b52c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	e005      	b.n	800b53e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b532:	893b      	ldrh	r3, [r7, #8]
 800b534:	b2da      	uxtb	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3718      	adds	r7, #24
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	00010002 	.word	0x00010002

0800b54c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b088      	sub	sp, #32
 800b550:	af02      	add	r7, sp, #8
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	4608      	mov	r0, r1
 800b556:	4611      	mov	r1, r2
 800b558:	461a      	mov	r2, r3
 800b55a:	4603      	mov	r3, r0
 800b55c:	817b      	strh	r3, [r7, #10]
 800b55e:	460b      	mov	r3, r1
 800b560:	813b      	strh	r3, [r7, #8]
 800b562:	4613      	mov	r3, r2
 800b564:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b574:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f000 f8c2 	bl	800b71c <I2C_WaitOnFlagUntilTimeout>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00d      	beq.n	800b5ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ac:	d103      	bne.n	800b5b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e0aa      	b.n	800b710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b5ba:	897b      	ldrh	r3, [r7, #10]
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	461a      	mov	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b5c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	6a3a      	ldr	r2, [r7, #32]
 800b5ce:	4952      	ldr	r1, [pc, #328]	; (800b718 <I2C_RequestMemoryRead+0x1cc>)
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 f8fa 	bl	800b7ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d001      	beq.n	800b5e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e097      	b.n	800b710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	617b      	str	r3, [r7, #20]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	695b      	ldr	r3, [r3, #20]
 800b5ea:	617b      	str	r3, [r7, #20]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5f8:	6a39      	ldr	r1, [r7, #32]
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 f964 	bl	800b8c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00d      	beq.n	800b622 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60a:	2b04      	cmp	r3, #4
 800b60c:	d107      	bne.n	800b61e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b61c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e076      	b.n	800b710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b622:	88fb      	ldrh	r3, [r7, #6]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d105      	bne.n	800b634 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b628:	893b      	ldrh	r3, [r7, #8]
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	611a      	str	r2, [r3, #16]
 800b632:	e021      	b.n	800b678 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b634:	893b      	ldrh	r3, [r7, #8]
 800b636:	0a1b      	lsrs	r3, r3, #8
 800b638:	b29b      	uxth	r3, r3
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b644:	6a39      	ldr	r1, [r7, #32]
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 f93e 	bl	800b8c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00d      	beq.n	800b66e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b656:	2b04      	cmp	r3, #4
 800b658:	d107      	bne.n	800b66a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b668:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e050      	b.n	800b710 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b66e:	893b      	ldrh	r3, [r7, #8]
 800b670:	b2da      	uxtb	r2, r3
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b67a:	6a39      	ldr	r1, [r7, #32]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f000 f923 	bl	800b8c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00d      	beq.n	800b6a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68c:	2b04      	cmp	r3, #4
 800b68e:	d107      	bne.n	800b6a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b69e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e035      	b.n	800b710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	6a3b      	ldr	r3, [r7, #32]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 f82b 	bl	800b71c <I2C_WaitOnFlagUntilTimeout>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00d      	beq.n	800b6e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6da:	d103      	bne.n	800b6e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e013      	b.n	800b710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b6e8:	897b      	ldrh	r3, [r7, #10]
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	f043 0301 	orr.w	r3, r3, #1
 800b6f0:	b2da      	uxtb	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	6a3a      	ldr	r2, [r7, #32]
 800b6fc:	4906      	ldr	r1, [pc, #24]	; (800b718 <I2C_RequestMemoryRead+0x1cc>)
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f000 f863 	bl	800b7ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e000      	b.n	800b710 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	00010002 	.word	0x00010002

0800b71c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	603b      	str	r3, [r7, #0]
 800b728:	4613      	mov	r3, r2
 800b72a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b72c:	e025      	b.n	800b77a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b734:	d021      	beq.n	800b77a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b736:	f7fe fe2b 	bl	800a390 <HAL_GetTick>
 800b73a:	4602      	mov	r2, r0
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	429a      	cmp	r2, r3
 800b744:	d302      	bcc.n	800b74c <I2C_WaitOnFlagUntilTimeout+0x30>
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d116      	bne.n	800b77a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2220      	movs	r2, #32
 800b756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b766:	f043 0220 	orr.w	r2, r3, #32
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b776:	2301      	movs	r3, #1
 800b778:	e023      	b.n	800b7c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	0c1b      	lsrs	r3, r3, #16
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	2b01      	cmp	r3, #1
 800b782:	d10d      	bne.n	800b7a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	43da      	mvns	r2, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4013      	ands	r3, r2
 800b790:	b29b      	uxth	r3, r3
 800b792:	2b00      	cmp	r3, #0
 800b794:	bf0c      	ite	eq
 800b796:	2301      	moveq	r3, #1
 800b798:	2300      	movne	r3, #0
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	461a      	mov	r2, r3
 800b79e:	e00c      	b.n	800b7ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	43da      	mvns	r2, r3
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	bf0c      	ite	eq
 800b7b2:	2301      	moveq	r3, #1
 800b7b4:	2300      	movne	r3, #0
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d0b6      	beq.n	800b72e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b084      	sub	sp, #16
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	60f8      	str	r0, [r7, #12]
 800b7d2:	60b9      	str	r1, [r7, #8]
 800b7d4:	607a      	str	r2, [r7, #4]
 800b7d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b7d8:	e051      	b.n	800b87e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	695b      	ldr	r3, [r3, #20]
 800b7e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7e8:	d123      	bne.n	800b832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b802:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2200      	movs	r2, #0
 800b808:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b81e:	f043 0204 	orr.w	r2, r3, #4
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2200      	movs	r2, #0
 800b82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e046      	b.n	800b8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b838:	d021      	beq.n	800b87e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b83a:	f7fe fda9 	bl	800a390 <HAL_GetTick>
 800b83e:	4602      	mov	r2, r0
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	429a      	cmp	r2, r3
 800b848:	d302      	bcc.n	800b850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d116      	bne.n	800b87e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2220      	movs	r2, #32
 800b85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86a:	f043 0220 	orr.w	r2, r3, #32
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e020      	b.n	800b8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	0c1b      	lsrs	r3, r3, #16
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2b01      	cmp	r3, #1
 800b886:	d10c      	bne.n	800b8a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	43da      	mvns	r2, r3
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	4013      	ands	r3, r2
 800b894:	b29b      	uxth	r3, r3
 800b896:	2b00      	cmp	r3, #0
 800b898:	bf14      	ite	ne
 800b89a:	2301      	movne	r3, #1
 800b89c:	2300      	moveq	r3, #0
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	e00b      	b.n	800b8ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	43da      	mvns	r2, r3
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	bf14      	ite	ne
 800b8b4:	2301      	movne	r3, #1
 800b8b6:	2300      	moveq	r3, #0
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d18d      	bne.n	800b7da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b8d4:	e02d      	b.n	800b932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f000 f8ce 	bl	800ba78 <I2C_IsAcknowledgeFailed>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e02d      	b.n	800b942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ec:	d021      	beq.n	800b932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8ee:	f7fe fd4f 	bl	800a390 <HAL_GetTick>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d302      	bcc.n	800b904 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d116      	bne.n	800b932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2220      	movs	r2, #32
 800b90e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	f043 0220 	orr.w	r2, r3, #32
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e007      	b.n	800b942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	695b      	ldr	r3, [r3, #20]
 800b938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b93c:	2b80      	cmp	r3, #128	; 0x80
 800b93e:	d1ca      	bne.n	800b8d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	60f8      	str	r0, [r7, #12]
 800b952:	60b9      	str	r1, [r7, #8]
 800b954:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b956:	e02d      	b.n	800b9b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f000 f88d 	bl	800ba78 <I2C_IsAcknowledgeFailed>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d001      	beq.n	800b968 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	e02d      	b.n	800b9c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96e:	d021      	beq.n	800b9b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b970:	f7fe fd0e 	bl	800a390 <HAL_GetTick>
 800b974:	4602      	mov	r2, r0
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d302      	bcc.n	800b986 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d116      	bne.n	800b9b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2220      	movs	r2, #32
 800b990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a0:	f043 0220 	orr.w	r2, r3, #32
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e007      	b.n	800b9c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	f003 0304 	and.w	r3, r3, #4
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	d1ca      	bne.n	800b958 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b9d8:	e042      	b.n	800ba60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	695b      	ldr	r3, [r3, #20]
 800b9e0:	f003 0310 	and.w	r3, r3, #16
 800b9e4:	2b10      	cmp	r3, #16
 800b9e6:	d119      	bne.n	800ba1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f06f 0210 	mvn.w	r2, #16
 800b9f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2220      	movs	r2, #32
 800b9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e029      	b.n	800ba70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba1c:	f7fe fcb8 	bl	800a390 <HAL_GetTick>
 800ba20:	4602      	mov	r2, r0
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d302      	bcc.n	800ba32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d116      	bne.n	800ba60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2220      	movs	r2, #32
 800ba3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4c:	f043 0220 	orr.w	r2, r3, #32
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e007      	b.n	800ba70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba6a:	2b40      	cmp	r3, #64	; 0x40
 800ba6c:	d1b5      	bne.n	800b9da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	695b      	ldr	r3, [r3, #20]
 800ba86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba8e:	d11b      	bne.n	800bac8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ba98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2220      	movs	r2, #32
 800baa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab4:	f043 0204 	orr.w	r2, r3, #4
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e000      	b.n	800baca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	370c      	adds	r7, #12
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b083      	sub	sp, #12
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b20      	cmp	r3, #32
 800baea:	d129      	bne.n	800bb40 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2224      	movs	r2, #36	; 0x24
 800baf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f022 0201 	bic.w	r2, r2, #1
 800bb02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f022 0210 	bic.w	r2, r2, #16
 800bb12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	430a      	orrs	r2, r1
 800bb22:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f042 0201 	orr.w	r2, r2, #1
 800bb32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2220      	movs	r2, #32
 800bb38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	e000      	b.n	800bb42 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800bb40:	2302      	movs	r3, #2
  }
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	370c      	adds	r7, #12
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bb4e:	b480      	push	{r7}
 800bb50:	b085      	sub	sp, #20
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
 800bb56:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b20      	cmp	r3, #32
 800bb66:	d12a      	bne.n	800bbbe <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2224      	movs	r2, #36	; 0x24
 800bb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f022 0201 	bic.w	r2, r2, #1
 800bb7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb86:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800bb88:	89fb      	ldrh	r3, [r7, #14]
 800bb8a:	f023 030f 	bic.w	r3, r3, #15
 800bb8e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	89fb      	ldrh	r3, [r7, #14]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	89fa      	ldrh	r2, [r7, #14]
 800bba0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f042 0201 	orr.w	r2, r2, #1
 800bbb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2220      	movs	r2, #32
 800bbb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e000      	b.n	800bbc0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800bbbe:	2302      	movs	r3, #2
  }
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e267      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d075      	beq.n	800bcd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bbea:	4b88      	ldr	r3, [pc, #544]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f003 030c 	and.w	r3, r3, #12
 800bbf2:	2b04      	cmp	r3, #4
 800bbf4:	d00c      	beq.n	800bc10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bbf6:	4b85      	ldr	r3, [pc, #532]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bbfe:	2b08      	cmp	r3, #8
 800bc00:	d112      	bne.n	800bc28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bc02:	4b82      	ldr	r3, [pc, #520]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc0e:	d10b      	bne.n	800bc28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc10:	4b7e      	ldr	r3, [pc, #504]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d05b      	beq.n	800bcd4 <HAL_RCC_OscConfig+0x108>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d157      	bne.n	800bcd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e242      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc30:	d106      	bne.n	800bc40 <HAL_RCC_OscConfig+0x74>
 800bc32:	4b76      	ldr	r3, [pc, #472]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a75      	ldr	r2, [pc, #468]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc3c:	6013      	str	r3, [r2, #0]
 800bc3e:	e01d      	b.n	800bc7c <HAL_RCC_OscConfig+0xb0>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc48:	d10c      	bne.n	800bc64 <HAL_RCC_OscConfig+0x98>
 800bc4a:	4b70      	ldr	r3, [pc, #448]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a6f      	ldr	r2, [pc, #444]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc54:	6013      	str	r3, [r2, #0]
 800bc56:	4b6d      	ldr	r3, [pc, #436]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a6c      	ldr	r2, [pc, #432]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc60:	6013      	str	r3, [r2, #0]
 800bc62:	e00b      	b.n	800bc7c <HAL_RCC_OscConfig+0xb0>
 800bc64:	4b69      	ldr	r3, [pc, #420]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a68      	ldr	r2, [pc, #416]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	4b66      	ldr	r3, [pc, #408]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a65      	ldr	r2, [pc, #404]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bc76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d013      	beq.n	800bcac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc84:	f7fe fb84 	bl	800a390 <HAL_GetTick>
 800bc88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc8a:	e008      	b.n	800bc9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc8c:	f7fe fb80 	bl	800a390 <HAL_GetTick>
 800bc90:	4602      	mov	r2, r0
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	2b64      	cmp	r3, #100	; 0x64
 800bc98:	d901      	bls.n	800bc9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e207      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc9e:	4b5b      	ldr	r3, [pc, #364]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d0f0      	beq.n	800bc8c <HAL_RCC_OscConfig+0xc0>
 800bcaa:	e014      	b.n	800bcd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bcac:	f7fe fb70 	bl	800a390 <HAL_GetTick>
 800bcb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bcb2:	e008      	b.n	800bcc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bcb4:	f7fe fb6c 	bl	800a390 <HAL_GetTick>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	1ad3      	subs	r3, r2, r3
 800bcbe:	2b64      	cmp	r3, #100	; 0x64
 800bcc0:	d901      	bls.n	800bcc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	e1f3      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bcc6:	4b51      	ldr	r3, [pc, #324]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1f0      	bne.n	800bcb4 <HAL_RCC_OscConfig+0xe8>
 800bcd2:	e000      	b.n	800bcd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bcd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 0302 	and.w	r3, r3, #2
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d063      	beq.n	800bdaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bce2:	4b4a      	ldr	r3, [pc, #296]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	f003 030c 	and.w	r3, r3, #12
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00b      	beq.n	800bd06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bcee:	4b47      	ldr	r3, [pc, #284]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bcf6:	2b08      	cmp	r3, #8
 800bcf8:	d11c      	bne.n	800bd34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bcfa:	4b44      	ldr	r3, [pc, #272]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d116      	bne.n	800bd34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd06:	4b41      	ldr	r3, [pc, #260]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 0302 	and.w	r3, r3, #2
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d005      	beq.n	800bd1e <HAL_RCC_OscConfig+0x152>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d001      	beq.n	800bd1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e1c7      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd1e:	4b3b      	ldr	r3, [pc, #236]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	00db      	lsls	r3, r3, #3
 800bd2c:	4937      	ldr	r1, [pc, #220]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd32:	e03a      	b.n	800bdaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d020      	beq.n	800bd7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bd3c:	4b34      	ldr	r3, [pc, #208]	; (800be10 <HAL_RCC_OscConfig+0x244>)
 800bd3e:	2201      	movs	r2, #1
 800bd40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd42:	f7fe fb25 	bl	800a390 <HAL_GetTick>
 800bd46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd48:	e008      	b.n	800bd5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd4a:	f7fe fb21 	bl	800a390 <HAL_GetTick>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	1ad3      	subs	r3, r2, r3
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d901      	bls.n	800bd5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	e1a8      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd5c:	4b2b      	ldr	r3, [pc, #172]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f003 0302 	and.w	r3, r3, #2
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d0f0      	beq.n	800bd4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd68:	4b28      	ldr	r3, [pc, #160]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	00db      	lsls	r3, r3, #3
 800bd76:	4925      	ldr	r1, [pc, #148]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	600b      	str	r3, [r1, #0]
 800bd7c:	e015      	b.n	800bdaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd7e:	4b24      	ldr	r3, [pc, #144]	; (800be10 <HAL_RCC_OscConfig+0x244>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd84:	f7fe fb04 	bl	800a390 <HAL_GetTick>
 800bd88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd8a:	e008      	b.n	800bd9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd8c:	f7fe fb00 	bl	800a390 <HAL_GetTick>
 800bd90:	4602      	mov	r2, r0
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d901      	bls.n	800bd9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	e187      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd9e:	4b1b      	ldr	r3, [pc, #108]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 0302 	and.w	r3, r3, #2
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1f0      	bne.n	800bd8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0308 	and.w	r3, r3, #8
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d036      	beq.n	800be24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d016      	beq.n	800bdec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bdbe:	4b15      	ldr	r3, [pc, #84]	; (800be14 <HAL_RCC_OscConfig+0x248>)
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdc4:	f7fe fae4 	bl	800a390 <HAL_GetTick>
 800bdc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bdca:	e008      	b.n	800bdde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bdcc:	f7fe fae0 	bl	800a390 <HAL_GetTick>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d901      	bls.n	800bdde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bdda:	2303      	movs	r3, #3
 800bddc:	e167      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bdde:	4b0b      	ldr	r3, [pc, #44]	; (800be0c <HAL_RCC_OscConfig+0x240>)
 800bde0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bde2:	f003 0302 	and.w	r3, r3, #2
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d0f0      	beq.n	800bdcc <HAL_RCC_OscConfig+0x200>
 800bdea:	e01b      	b.n	800be24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bdec:	4b09      	ldr	r3, [pc, #36]	; (800be14 <HAL_RCC_OscConfig+0x248>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bdf2:	f7fe facd 	bl	800a390 <HAL_GetTick>
 800bdf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bdf8:	e00e      	b.n	800be18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bdfa:	f7fe fac9 	bl	800a390 <HAL_GetTick>
 800bdfe:	4602      	mov	r2, r0
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	2b02      	cmp	r3, #2
 800be06:	d907      	bls.n	800be18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800be08:	2303      	movs	r3, #3
 800be0a:	e150      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
 800be0c:	40023800 	.word	0x40023800
 800be10:	42470000 	.word	0x42470000
 800be14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be18:	4b88      	ldr	r3, [pc, #544]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800be1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be1c:	f003 0302 	and.w	r3, r3, #2
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1ea      	bne.n	800bdfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 0304 	and.w	r3, r3, #4
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 8097 	beq.w	800bf60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be32:	2300      	movs	r3, #0
 800be34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800be36:	4b81      	ldr	r3, [pc, #516]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800be38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10f      	bne.n	800be62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be42:	2300      	movs	r3, #0
 800be44:	60bb      	str	r3, [r7, #8]
 800be46:	4b7d      	ldr	r3, [pc, #500]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800be48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4a:	4a7c      	ldr	r2, [pc, #496]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800be4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be50:	6413      	str	r3, [r2, #64]	; 0x40
 800be52:	4b7a      	ldr	r3, [pc, #488]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800be54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be5a:	60bb      	str	r3, [r7, #8]
 800be5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be5e:	2301      	movs	r3, #1
 800be60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be62:	4b77      	ldr	r3, [pc, #476]	; (800c040 <HAL_RCC_OscConfig+0x474>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d118      	bne.n	800bea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800be6e:	4b74      	ldr	r3, [pc, #464]	; (800c040 <HAL_RCC_OscConfig+0x474>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a73      	ldr	r2, [pc, #460]	; (800c040 <HAL_RCC_OscConfig+0x474>)
 800be74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800be7a:	f7fe fa89 	bl	800a390 <HAL_GetTick>
 800be7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be80:	e008      	b.n	800be94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be82:	f7fe fa85 	bl	800a390 <HAL_GetTick>
 800be86:	4602      	mov	r2, r0
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d901      	bls.n	800be94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800be90:	2303      	movs	r3, #3
 800be92:	e10c      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be94:	4b6a      	ldr	r3, [pc, #424]	; (800c040 <HAL_RCC_OscConfig+0x474>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d0f0      	beq.n	800be82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d106      	bne.n	800beb6 <HAL_RCC_OscConfig+0x2ea>
 800bea8:	4b64      	ldr	r3, [pc, #400]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800beaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beac:	4a63      	ldr	r2, [pc, #396]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800beae:	f043 0301 	orr.w	r3, r3, #1
 800beb2:	6713      	str	r3, [r2, #112]	; 0x70
 800beb4:	e01c      	b.n	800bef0 <HAL_RCC_OscConfig+0x324>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	2b05      	cmp	r3, #5
 800bebc:	d10c      	bne.n	800bed8 <HAL_RCC_OscConfig+0x30c>
 800bebe:	4b5f      	ldr	r3, [pc, #380]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec2:	4a5e      	ldr	r2, [pc, #376]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bec4:	f043 0304 	orr.w	r3, r3, #4
 800bec8:	6713      	str	r3, [r2, #112]	; 0x70
 800beca:	4b5c      	ldr	r3, [pc, #368]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800becc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bece:	4a5b      	ldr	r2, [pc, #364]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bed0:	f043 0301 	orr.w	r3, r3, #1
 800bed4:	6713      	str	r3, [r2, #112]	; 0x70
 800bed6:	e00b      	b.n	800bef0 <HAL_RCC_OscConfig+0x324>
 800bed8:	4b58      	ldr	r3, [pc, #352]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800beda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bedc:	4a57      	ldr	r2, [pc, #348]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bede:	f023 0301 	bic.w	r3, r3, #1
 800bee2:	6713      	str	r3, [r2, #112]	; 0x70
 800bee4:	4b55      	ldr	r3, [pc, #340]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee8:	4a54      	ldr	r2, [pc, #336]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800beea:	f023 0304 	bic.w	r3, r3, #4
 800beee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d015      	beq.n	800bf24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bef8:	f7fe fa4a 	bl	800a390 <HAL_GetTick>
 800befc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800befe:	e00a      	b.n	800bf16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf00:	f7fe fa46 	bl	800a390 <HAL_GetTick>
 800bf04:	4602      	mov	r2, r0
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d901      	bls.n	800bf16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e0cb      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf16:	4b49      	ldr	r3, [pc, #292]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bf18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf1a:	f003 0302 	and.w	r3, r3, #2
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d0ee      	beq.n	800bf00 <HAL_RCC_OscConfig+0x334>
 800bf22:	e014      	b.n	800bf4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bf24:	f7fe fa34 	bl	800a390 <HAL_GetTick>
 800bf28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bf2a:	e00a      	b.n	800bf42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf2c:	f7fe fa30 	bl	800a390 <HAL_GetTick>
 800bf30:	4602      	mov	r2, r0
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d901      	bls.n	800bf42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	e0b5      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bf42:	4b3e      	ldr	r3, [pc, #248]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bf44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf46:	f003 0302 	and.w	r3, r3, #2
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d1ee      	bne.n	800bf2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d105      	bne.n	800bf60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf54:	4b39      	ldr	r3, [pc, #228]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf58:	4a38      	ldr	r2, [pc, #224]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bf5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f000 80a1 	beq.w	800c0ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bf6a:	4b34      	ldr	r3, [pc, #208]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	f003 030c 	and.w	r3, r3, #12
 800bf72:	2b08      	cmp	r3, #8
 800bf74:	d05c      	beq.n	800c030 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	699b      	ldr	r3, [r3, #24]
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d141      	bne.n	800c002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf7e:	4b31      	ldr	r3, [pc, #196]	; (800c044 <HAL_RCC_OscConfig+0x478>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf84:	f7fe fa04 	bl	800a390 <HAL_GetTick>
 800bf88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf8a:	e008      	b.n	800bf9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf8c:	f7fe fa00 	bl	800a390 <HAL_GetTick>
 800bf90:	4602      	mov	r2, r0
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	1ad3      	subs	r3, r2, r3
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d901      	bls.n	800bf9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	e087      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf9e:	4b27      	ldr	r3, [pc, #156]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1f0      	bne.n	800bf8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	69da      	ldr	r2, [r3, #28]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a1b      	ldr	r3, [r3, #32]
 800bfb2:	431a      	orrs	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb8:	019b      	lsls	r3, r3, #6
 800bfba:	431a      	orrs	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc0:	085b      	lsrs	r3, r3, #1
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	041b      	lsls	r3, r3, #16
 800bfc6:	431a      	orrs	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfcc:	061b      	lsls	r3, r3, #24
 800bfce:	491b      	ldr	r1, [pc, #108]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bfd4:	4b1b      	ldr	r3, [pc, #108]	; (800c044 <HAL_RCC_OscConfig+0x478>)
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfda:	f7fe f9d9 	bl	800a390 <HAL_GetTick>
 800bfde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bfe0:	e008      	b.n	800bff4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfe2:	f7fe f9d5 	bl	800a390 <HAL_GetTick>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d901      	bls.n	800bff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e05c      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bff4:	4b11      	ldr	r3, [pc, #68]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d0f0      	beq.n	800bfe2 <HAL_RCC_OscConfig+0x416>
 800c000:	e054      	b.n	800c0ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c002:	4b10      	ldr	r3, [pc, #64]	; (800c044 <HAL_RCC_OscConfig+0x478>)
 800c004:	2200      	movs	r2, #0
 800c006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c008:	f7fe f9c2 	bl	800a390 <HAL_GetTick>
 800c00c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c00e:	e008      	b.n	800c022 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c010:	f7fe f9be 	bl	800a390 <HAL_GetTick>
 800c014:	4602      	mov	r2, r0
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d901      	bls.n	800c022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c01e:	2303      	movs	r3, #3
 800c020:	e045      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c022:	4b06      	ldr	r3, [pc, #24]	; (800c03c <HAL_RCC_OscConfig+0x470>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d1f0      	bne.n	800c010 <HAL_RCC_OscConfig+0x444>
 800c02e:	e03d      	b.n	800c0ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d107      	bne.n	800c048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	e038      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
 800c03c:	40023800 	.word	0x40023800
 800c040:	40007000 	.word	0x40007000
 800c044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c048:	4b1b      	ldr	r3, [pc, #108]	; (800c0b8 <HAL_RCC_OscConfig+0x4ec>)
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	699b      	ldr	r3, [r3, #24]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d028      	beq.n	800c0a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c060:	429a      	cmp	r2, r3
 800c062:	d121      	bne.n	800c0a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c06e:	429a      	cmp	r2, r3
 800c070:	d11a      	bne.n	800c0a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c078:	4013      	ands	r3, r2
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c07e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c080:	4293      	cmp	r3, r2
 800c082:	d111      	bne.n	800c0a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08e:	085b      	lsrs	r3, r3, #1
 800c090:	3b01      	subs	r3, #1
 800c092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c094:	429a      	cmp	r2, r3
 800c096:	d107      	bne.n	800c0a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d001      	beq.n	800c0ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	e000      	b.n	800c0ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	40023800 	.word	0x40023800

0800c0bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d101      	bne.n	800c0d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e0cc      	b.n	800c26a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c0d0:	4b68      	ldr	r3, [pc, #416]	; (800c274 <HAL_RCC_ClockConfig+0x1b8>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f003 030f 	and.w	r3, r3, #15
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d90c      	bls.n	800c0f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0de:	4b65      	ldr	r3, [pc, #404]	; (800c274 <HAL_RCC_ClockConfig+0x1b8>)
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	b2d2      	uxtb	r2, r2
 800c0e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0e6:	4b63      	ldr	r3, [pc, #396]	; (800c274 <HAL_RCC_ClockConfig+0x1b8>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 030f 	and.w	r3, r3, #15
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d001      	beq.n	800c0f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	e0b8      	b.n	800c26a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f003 0302 	and.w	r3, r3, #2
 800c100:	2b00      	cmp	r3, #0
 800c102:	d020      	beq.n	800c146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 0304 	and.w	r3, r3, #4
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d005      	beq.n	800c11c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c110:	4b59      	ldr	r3, [pc, #356]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	4a58      	ldr	r2, [pc, #352]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c11a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 0308 	and.w	r3, r3, #8
 800c124:	2b00      	cmp	r3, #0
 800c126:	d005      	beq.n	800c134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c128:	4b53      	ldr	r3, [pc, #332]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	4a52      	ldr	r2, [pc, #328]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c12e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c134:	4b50      	ldr	r3, [pc, #320]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	494d      	ldr	r1, [pc, #308]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c142:	4313      	orrs	r3, r2
 800c144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0301 	and.w	r3, r3, #1
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d044      	beq.n	800c1dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d107      	bne.n	800c16a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c15a:	4b47      	ldr	r3, [pc, #284]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c162:	2b00      	cmp	r3, #0
 800c164:	d119      	bne.n	800c19a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	e07f      	b.n	800c26a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d003      	beq.n	800c17a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c176:	2b03      	cmp	r3, #3
 800c178:	d107      	bne.n	800c18a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c17a:	4b3f      	ldr	r3, [pc, #252]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c182:	2b00      	cmp	r3, #0
 800c184:	d109      	bne.n	800c19a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	e06f      	b.n	800c26a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c18a:	4b3b      	ldr	r3, [pc, #236]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f003 0302 	and.w	r3, r3, #2
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e067      	b.n	800c26a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c19a:	4b37      	ldr	r3, [pc, #220]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f023 0203 	bic.w	r2, r3, #3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	4934      	ldr	r1, [pc, #208]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c1ac:	f7fe f8f0 	bl	800a390 <HAL_GetTick>
 800c1b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1b2:	e00a      	b.n	800c1ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c1b4:	f7fe f8ec 	bl	800a390 <HAL_GetTick>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d901      	bls.n	800c1ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c1c6:	2303      	movs	r3, #3
 800c1c8:	e04f      	b.n	800c26a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1ca:	4b2b      	ldr	r3, [pc, #172]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	f003 020c 	and.w	r2, r3, #12
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d1eb      	bne.n	800c1b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c1dc:	4b25      	ldr	r3, [pc, #148]	; (800c274 <HAL_RCC_ClockConfig+0x1b8>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f003 030f 	and.w	r3, r3, #15
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d20c      	bcs.n	800c204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1ea:	4b22      	ldr	r3, [pc, #136]	; (800c274 <HAL_RCC_ClockConfig+0x1b8>)
 800c1ec:	683a      	ldr	r2, [r7, #0]
 800c1ee:	b2d2      	uxtb	r2, r2
 800c1f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1f2:	4b20      	ldr	r3, [pc, #128]	; (800c274 <HAL_RCC_ClockConfig+0x1b8>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f003 030f 	and.w	r3, r3, #15
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d001      	beq.n	800c204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c200:	2301      	movs	r3, #1
 800c202:	e032      	b.n	800c26a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f003 0304 	and.w	r3, r3, #4
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d008      	beq.n	800c222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c210:	4b19      	ldr	r3, [pc, #100]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	4916      	ldr	r1, [pc, #88]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c21e:	4313      	orrs	r3, r2
 800c220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f003 0308 	and.w	r3, r3, #8
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d009      	beq.n	800c242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c22e:	4b12      	ldr	r3, [pc, #72]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	00db      	lsls	r3, r3, #3
 800c23c:	490e      	ldr	r1, [pc, #56]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c23e:	4313      	orrs	r3, r2
 800c240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c242:	f000 f821 	bl	800c288 <HAL_RCC_GetSysClockFreq>
 800c246:	4602      	mov	r2, r0
 800c248:	4b0b      	ldr	r3, [pc, #44]	; (800c278 <HAL_RCC_ClockConfig+0x1bc>)
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	091b      	lsrs	r3, r3, #4
 800c24e:	f003 030f 	and.w	r3, r3, #15
 800c252:	490a      	ldr	r1, [pc, #40]	; (800c27c <HAL_RCC_ClockConfig+0x1c0>)
 800c254:	5ccb      	ldrb	r3, [r1, r3]
 800c256:	fa22 f303 	lsr.w	r3, r2, r3
 800c25a:	4a09      	ldr	r2, [pc, #36]	; (800c280 <HAL_RCC_ClockConfig+0x1c4>)
 800c25c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c25e:	4b09      	ldr	r3, [pc, #36]	; (800c284 <HAL_RCC_ClockConfig+0x1c8>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe f850 	bl	800a308 <HAL_InitTick>

  return HAL_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	40023c00 	.word	0x40023c00
 800c278:	40023800 	.word	0x40023800
 800c27c:	0801ce3c 	.word	0x0801ce3c
 800c280:	200001e0 	.word	0x200001e0
 800c284:	2000031c 	.word	0x2000031c

0800c288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c28c:	b094      	sub	sp, #80	; 0x50
 800c28e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c290:	2300      	movs	r3, #0
 800c292:	647b      	str	r3, [r7, #68]	; 0x44
 800c294:	2300      	movs	r3, #0
 800c296:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c298:	2300      	movs	r3, #0
 800c29a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800c29c:	2300      	movs	r3, #0
 800c29e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c2a0:	4b79      	ldr	r3, [pc, #484]	; (800c488 <HAL_RCC_GetSysClockFreq+0x200>)
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	f003 030c 	and.w	r3, r3, #12
 800c2a8:	2b08      	cmp	r3, #8
 800c2aa:	d00d      	beq.n	800c2c8 <HAL_RCC_GetSysClockFreq+0x40>
 800c2ac:	2b08      	cmp	r3, #8
 800c2ae:	f200 80e1 	bhi.w	800c474 <HAL_RCC_GetSysClockFreq+0x1ec>
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d002      	beq.n	800c2bc <HAL_RCC_GetSysClockFreq+0x34>
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	d003      	beq.n	800c2c2 <HAL_RCC_GetSysClockFreq+0x3a>
 800c2ba:	e0db      	b.n	800c474 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c2bc:	4b73      	ldr	r3, [pc, #460]	; (800c48c <HAL_RCC_GetSysClockFreq+0x204>)
 800c2be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800c2c0:	e0db      	b.n	800c47a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c2c2:	4b73      	ldr	r3, [pc, #460]	; (800c490 <HAL_RCC_GetSysClockFreq+0x208>)
 800c2c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c2c6:	e0d8      	b.n	800c47a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c2c8:	4b6f      	ldr	r3, [pc, #444]	; (800c488 <HAL_RCC_GetSysClockFreq+0x200>)
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c2d2:	4b6d      	ldr	r3, [pc, #436]	; (800c488 <HAL_RCC_GetSysClockFreq+0x200>)
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d063      	beq.n	800c3a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c2de:	4b6a      	ldr	r3, [pc, #424]	; (800c488 <HAL_RCC_GetSysClockFreq+0x200>)
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	099b      	lsrs	r3, r3, #6
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f0:	633b      	str	r3, [r7, #48]	; 0x30
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	637b      	str	r3, [r7, #52]	; 0x34
 800c2f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c2fa:	4622      	mov	r2, r4
 800c2fc:	462b      	mov	r3, r5
 800c2fe:	f04f 0000 	mov.w	r0, #0
 800c302:	f04f 0100 	mov.w	r1, #0
 800c306:	0159      	lsls	r1, r3, #5
 800c308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c30c:	0150      	lsls	r0, r2, #5
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	4621      	mov	r1, r4
 800c314:	1a51      	subs	r1, r2, r1
 800c316:	6139      	str	r1, [r7, #16]
 800c318:	4629      	mov	r1, r5
 800c31a:	eb63 0301 	sbc.w	r3, r3, r1
 800c31e:	617b      	str	r3, [r7, #20]
 800c320:	f04f 0200 	mov.w	r2, #0
 800c324:	f04f 0300 	mov.w	r3, #0
 800c328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c32c:	4659      	mov	r1, fp
 800c32e:	018b      	lsls	r3, r1, #6
 800c330:	4651      	mov	r1, sl
 800c332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c336:	4651      	mov	r1, sl
 800c338:	018a      	lsls	r2, r1, #6
 800c33a:	4651      	mov	r1, sl
 800c33c:	ebb2 0801 	subs.w	r8, r2, r1
 800c340:	4659      	mov	r1, fp
 800c342:	eb63 0901 	sbc.w	r9, r3, r1
 800c346:	f04f 0200 	mov.w	r2, #0
 800c34a:	f04f 0300 	mov.w	r3, #0
 800c34e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c35a:	4690      	mov	r8, r2
 800c35c:	4699      	mov	r9, r3
 800c35e:	4623      	mov	r3, r4
 800c360:	eb18 0303 	adds.w	r3, r8, r3
 800c364:	60bb      	str	r3, [r7, #8]
 800c366:	462b      	mov	r3, r5
 800c368:	eb49 0303 	adc.w	r3, r9, r3
 800c36c:	60fb      	str	r3, [r7, #12]
 800c36e:	f04f 0200 	mov.w	r2, #0
 800c372:	f04f 0300 	mov.w	r3, #0
 800c376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c37a:	4629      	mov	r1, r5
 800c37c:	024b      	lsls	r3, r1, #9
 800c37e:	4621      	mov	r1, r4
 800c380:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c384:	4621      	mov	r1, r4
 800c386:	024a      	lsls	r2, r1, #9
 800c388:	4610      	mov	r0, r2
 800c38a:	4619      	mov	r1, r3
 800c38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c38e:	2200      	movs	r2, #0
 800c390:	62bb      	str	r3, [r7, #40]	; 0x28
 800c392:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c398:	f7f4 fc96 	bl	8000cc8 <__aeabi_uldivmod>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a4:	e058      	b.n	800c458 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c3a6:	4b38      	ldr	r3, [pc, #224]	; (800c488 <HAL_RCC_GetSysClockFreq+0x200>)
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	099b      	lsrs	r3, r3, #6
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c3b6:	623b      	str	r3, [r7, #32]
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	627b      	str	r3, [r7, #36]	; 0x24
 800c3bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c3c0:	4642      	mov	r2, r8
 800c3c2:	464b      	mov	r3, r9
 800c3c4:	f04f 0000 	mov.w	r0, #0
 800c3c8:	f04f 0100 	mov.w	r1, #0
 800c3cc:	0159      	lsls	r1, r3, #5
 800c3ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c3d2:	0150      	lsls	r0, r2, #5
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4641      	mov	r1, r8
 800c3da:	ebb2 0a01 	subs.w	sl, r2, r1
 800c3de:	4649      	mov	r1, r9
 800c3e0:	eb63 0b01 	sbc.w	fp, r3, r1
 800c3e4:	f04f 0200 	mov.w	r2, #0
 800c3e8:	f04f 0300 	mov.w	r3, #0
 800c3ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c3f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c3f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c3f8:	ebb2 040a 	subs.w	r4, r2, sl
 800c3fc:	eb63 050b 	sbc.w	r5, r3, fp
 800c400:	f04f 0200 	mov.w	r2, #0
 800c404:	f04f 0300 	mov.w	r3, #0
 800c408:	00eb      	lsls	r3, r5, #3
 800c40a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c40e:	00e2      	lsls	r2, r4, #3
 800c410:	4614      	mov	r4, r2
 800c412:	461d      	mov	r5, r3
 800c414:	4643      	mov	r3, r8
 800c416:	18e3      	adds	r3, r4, r3
 800c418:	603b      	str	r3, [r7, #0]
 800c41a:	464b      	mov	r3, r9
 800c41c:	eb45 0303 	adc.w	r3, r5, r3
 800c420:	607b      	str	r3, [r7, #4]
 800c422:	f04f 0200 	mov.w	r2, #0
 800c426:	f04f 0300 	mov.w	r3, #0
 800c42a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c42e:	4629      	mov	r1, r5
 800c430:	028b      	lsls	r3, r1, #10
 800c432:	4621      	mov	r1, r4
 800c434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c438:	4621      	mov	r1, r4
 800c43a:	028a      	lsls	r2, r1, #10
 800c43c:	4610      	mov	r0, r2
 800c43e:	4619      	mov	r1, r3
 800c440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c442:	2200      	movs	r2, #0
 800c444:	61bb      	str	r3, [r7, #24]
 800c446:	61fa      	str	r2, [r7, #28]
 800c448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c44c:	f7f4 fc3c 	bl	8000cc8 <__aeabi_uldivmod>
 800c450:	4602      	mov	r2, r0
 800c452:	460b      	mov	r3, r1
 800c454:	4613      	mov	r3, r2
 800c456:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c458:	4b0b      	ldr	r3, [pc, #44]	; (800c488 <HAL_RCC_GetSysClockFreq+0x200>)
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	0c1b      	lsrs	r3, r3, #16
 800c45e:	f003 0303 	and.w	r3, r3, #3
 800c462:	3301      	adds	r3, #1
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800c468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c472:	e002      	b.n	800c47a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c474:	4b05      	ldr	r3, [pc, #20]	; (800c48c <HAL_RCC_GetSysClockFreq+0x204>)
 800c476:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c47a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3750      	adds	r7, #80	; 0x50
 800c480:	46bd      	mov	sp, r7
 800c482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c486:	bf00      	nop
 800c488:	40023800 	.word	0x40023800
 800c48c:	00f42400 	.word	0x00f42400
 800c490:	007a1200 	.word	0x007a1200

0800c494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c494:	b480      	push	{r7}
 800c496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c498:	4b03      	ldr	r3, [pc, #12]	; (800c4a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c49a:	681b      	ldr	r3, [r3, #0]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop
 800c4a8:	200001e0 	.word	0x200001e0

0800c4ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c4b0:	f7ff fff0 	bl	800c494 <HAL_RCC_GetHCLKFreq>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	4b05      	ldr	r3, [pc, #20]	; (800c4cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	0a9b      	lsrs	r3, r3, #10
 800c4bc:	f003 0307 	and.w	r3, r3, #7
 800c4c0:	4903      	ldr	r1, [pc, #12]	; (800c4d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c4c2:	5ccb      	ldrb	r3, [r1, r3]
 800c4c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	40023800 	.word	0x40023800
 800c4d0:	0801ce4c 	.word	0x0801ce4c

0800c4d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c4d8:	f7ff ffdc 	bl	800c494 <HAL_RCC_GetHCLKFreq>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	0b5b      	lsrs	r3, r3, #13
 800c4e4:	f003 0307 	and.w	r3, r3, #7
 800c4e8:	4903      	ldr	r1, [pc, #12]	; (800c4f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c4ea:	5ccb      	ldrb	r3, [r1, r3]
 800c4ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	40023800 	.word	0x40023800
 800c4f8:	0801ce4c 	.word	0x0801ce4c

0800c4fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c504:	2300      	movs	r3, #0
 800c506:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c508:	2300      	movs	r3, #0
 800c50a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 0301 	and.w	r3, r3, #1
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10b      	bne.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c520:	2b00      	cmp	r3, #0
 800c522:	d105      	bne.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d075      	beq.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c530:	4b91      	ldr	r3, [pc, #580]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800c532:	2200      	movs	r2, #0
 800c534:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c536:	f7fd ff2b 	bl	800a390 <HAL_GetTick>
 800c53a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c53c:	e008      	b.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c53e:	f7fd ff27 	bl	800a390 <HAL_GetTick>
 800c542:	4602      	mov	r2, r0
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	2b02      	cmp	r3, #2
 800c54a:	d901      	bls.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c54c:	2303      	movs	r3, #3
 800c54e:	e189      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c550:	4b8a      	ldr	r3, [pc, #552]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1f0      	bne.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f003 0301 	and.w	r3, r3, #1
 800c564:	2b00      	cmp	r3, #0
 800c566:	d009      	beq.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	019a      	lsls	r2, r3, #6
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	071b      	lsls	r3, r3, #28
 800c574:	4981      	ldr	r1, [pc, #516]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c576:	4313      	orrs	r3, r2
 800c578:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 0302 	and.w	r3, r3, #2
 800c584:	2b00      	cmp	r3, #0
 800c586:	d01f      	beq.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c588:	4b7c      	ldr	r3, [pc, #496]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c58a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c58e:	0f1b      	lsrs	r3, r3, #28
 800c590:	f003 0307 	and.w	r3, r3, #7
 800c594:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	019a      	lsls	r2, r3, #6
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	061b      	lsls	r3, r3, #24
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	071b      	lsls	r3, r3, #28
 800c5a8:	4974      	ldr	r1, [pc, #464]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c5b0:	4b72      	ldr	r3, [pc, #456]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c5b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5b6:	f023 021f 	bic.w	r2, r3, #31
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	69db      	ldr	r3, [r3, #28]
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	496e      	ldr	r1, [pc, #440]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d00d      	beq.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	019a      	lsls	r2, r3, #6
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	061b      	lsls	r3, r3, #24
 800c5e0:	431a      	orrs	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	071b      	lsls	r3, r3, #28
 800c5e8:	4964      	ldr	r1, [pc, #400]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c5f0:	4b61      	ldr	r3, [pc, #388]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c5f6:	f7fd fecb 	bl	800a390 <HAL_GetTick>
 800c5fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c5fc:	e008      	b.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c5fe:	f7fd fec7 	bl	800a390 <HAL_GetTick>
 800c602:	4602      	mov	r2, r0
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d901      	bls.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c60c:	2303      	movs	r3, #3
 800c60e:	e129      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c610:	4b5a      	ldr	r3, [pc, #360]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d0f0      	beq.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 0304 	and.w	r3, r3, #4
 800c624:	2b00      	cmp	r3, #0
 800c626:	d105      	bne.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c630:	2b00      	cmp	r3, #0
 800c632:	d079      	beq.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c634:	4b52      	ldr	r3, [pc, #328]	; (800c780 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800c636:	2200      	movs	r2, #0
 800c638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c63a:	f7fd fea9 	bl	800a390 <HAL_GetTick>
 800c63e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c640:	e008      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c642:	f7fd fea5 	bl	800a390 <HAL_GetTick>
 800c646:	4602      	mov	r2, r0
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d901      	bls.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e107      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c654:	4b49      	ldr	r3, [pc, #292]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c65c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c660:	d0ef      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0304 	and.w	r3, r3, #4
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d020      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c66e:	4b43      	ldr	r3, [pc, #268]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c674:	0f1b      	lsrs	r3, r3, #28
 800c676:	f003 0307 	and.w	r3, r3, #7
 800c67a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	019a      	lsls	r2, r3, #6
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	061b      	lsls	r3, r3, #24
 800c688:	431a      	orrs	r2, r3
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	071b      	lsls	r3, r3, #28
 800c68e:	493b      	ldr	r1, [pc, #236]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c690:	4313      	orrs	r3, r2
 800c692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c696:	4b39      	ldr	r3, [pc, #228]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c69c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6a1b      	ldr	r3, [r3, #32]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	021b      	lsls	r3, r3, #8
 800c6a8:	4934      	ldr	r1, [pc, #208]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f003 0308 	and.w	r3, r3, #8
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d01e      	beq.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c6bc:	4b2f      	ldr	r3, [pc, #188]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6c2:	0e1b      	lsrs	r3, r3, #24
 800c6c4:	f003 030f 	and.w	r3, r3, #15
 800c6c8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	019a      	lsls	r2, r3, #6
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	061b      	lsls	r3, r3, #24
 800c6d4:	431a      	orrs	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	699b      	ldr	r3, [r3, #24]
 800c6da:	071b      	lsls	r3, r3, #28
 800c6dc:	4927      	ldr	r1, [pc, #156]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c6e4:	4b25      	ldr	r3, [pc, #148]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c6e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f2:	4922      	ldr	r1, [pc, #136]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c6fa:	4b21      	ldr	r3, [pc, #132]	; (800c780 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c700:	f7fd fe46 	bl	800a390 <HAL_GetTick>
 800c704:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c706:	e008      	b.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c708:	f7fd fe42 	bl	800a390 <HAL_GetTick>
 800c70c:	4602      	mov	r2, r0
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	2b02      	cmp	r3, #2
 800c714:	d901      	bls.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c716:	2303      	movs	r3, #3
 800c718:	e0a4      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c71a:	4b18      	ldr	r3, [pc, #96]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c726:	d1ef      	bne.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f003 0320 	and.w	r3, r3, #32
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 808b 	beq.w	800c84c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c736:	2300      	movs	r3, #0
 800c738:	60fb      	str	r3, [r7, #12]
 800c73a:	4b10      	ldr	r3, [pc, #64]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73e:	4a0f      	ldr	r2, [pc, #60]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c744:	6413      	str	r3, [r2, #64]	; 0x40
 800c746:	4b0d      	ldr	r3, [pc, #52]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800c748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c752:	4b0c      	ldr	r3, [pc, #48]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a0b      	ldr	r2, [pc, #44]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800c758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c75c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c75e:	f7fd fe17 	bl	800a390 <HAL_GetTick>
 800c762:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c764:	e010      	b.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c766:	f7fd fe13 	bl	800a390 <HAL_GetTick>
 800c76a:	4602      	mov	r2, r0
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	2b02      	cmp	r3, #2
 800c772:	d909      	bls.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800c774:	2303      	movs	r3, #3
 800c776:	e075      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800c778:	42470068 	.word	0x42470068
 800c77c:	40023800 	.word	0x40023800
 800c780:	42470070 	.word	0x42470070
 800c784:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c788:	4b38      	ldr	r3, [pc, #224]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c790:	2b00      	cmp	r3, #0
 800c792:	d0e8      	beq.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c794:	4b36      	ldr	r3, [pc, #216]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c79c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d02f      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7ac:	693a      	ldr	r2, [r7, #16]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d028      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c7b2:	4b2f      	ldr	r3, [pc, #188]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c7b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c7bc:	4b2d      	ldr	r3, [pc, #180]	; (800c874 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800c7be:	2201      	movs	r2, #1
 800c7c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c7c2:	4b2c      	ldr	r3, [pc, #176]	; (800c874 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c7c8:	4a29      	ldr	r2, [pc, #164]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c7ce:	4b28      	ldr	r3, [pc, #160]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d2:	f003 0301 	and.w	r3, r3, #1
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d114      	bne.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c7da:	f7fd fdd9 	bl	800a390 <HAL_GetTick>
 800c7de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7e0:	e00a      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c7e2:	f7fd fdd5 	bl	800a390 <HAL_GetTick>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	1ad3      	subs	r3, r2, r3
 800c7ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d901      	bls.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	e035      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7f8:	4b1d      	ldr	r3, [pc, #116]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c7fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7fc:	f003 0302 	and.w	r3, r3, #2
 800c800:	2b00      	cmp	r3, #0
 800c802:	d0ee      	beq.n	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c80c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c810:	d10d      	bne.n	800c82e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800c812:	4b17      	ldr	r3, [pc, #92]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c81e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c826:	4912      	ldr	r1, [pc, #72]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c828:	4313      	orrs	r3, r2
 800c82a:	608b      	str	r3, [r1, #8]
 800c82c:	e005      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800c82e:	4b10      	ldr	r3, [pc, #64]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	4a0f      	ldr	r2, [pc, #60]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c834:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c838:	6093      	str	r3, [r2, #8]
 800c83a:	4b0d      	ldr	r3, [pc, #52]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c83c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c846:	490a      	ldr	r1, [pc, #40]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c848:	4313      	orrs	r3, r2
 800c84a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0310 	and.w	r3, r3, #16
 800c854:	2b00      	cmp	r3, #0
 800c856:	d004      	beq.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c85e:	4b06      	ldr	r3, [pc, #24]	; (800c878 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800c860:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	40007000 	.word	0x40007000
 800c870:	40023800 	.word	0x40023800
 800c874:	42470e40 	.word	0x42470e40
 800c878:	424711e0 	.word	0x424711e0

0800c87c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e066      	b.n	800c960 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	7f5b      	ldrb	r3, [r3, #29]
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d105      	bne.n	800c8a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7f7 fd96 	bl	80043d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	22ca      	movs	r2, #202	; 0xca
 800c8b4:	625a      	str	r2, [r3, #36]	; 0x24
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2253      	movs	r2, #83	; 0x53
 800c8bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fa45 	bl	800cd4e <RTC_EnterInitMode>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d12c      	bne.n	800c928 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	6812      	ldr	r2, [r2, #0]
 800c8d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8e0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	6899      	ldr	r1, [r3, #8]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	691b      	ldr	r3, [r3, #16]
 800c8f0:	431a      	orrs	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	695b      	ldr	r3, [r3, #20]
 800c8f6:	431a      	orrs	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	430a      	orrs	r2, r1
 800c8fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	68d2      	ldr	r2, [r2, #12]
 800c908:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	6919      	ldr	r1, [r3, #16]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	041a      	lsls	r2, r3, #16
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	430a      	orrs	r2, r1
 800c91c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fa4c 	bl	800cdbc <RTC_ExitInitMode>
 800c924:	4603      	mov	r3, r0
 800c926:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c928:	7bfb      	ldrb	r3, [r7, #15]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d113      	bne.n	800c956 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c93c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	699a      	ldr	r2, [r3, #24]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	430a      	orrs	r2, r1
 800c94e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	22ff      	movs	r2, #255	; 0xff
 800c95c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c968:	b590      	push	{r4, r7, lr}
 800c96a:	b087      	sub	sp, #28
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c974:	2300      	movs	r3, #0
 800c976:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	7f1b      	ldrb	r3, [r3, #28]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d101      	bne.n	800c984 <HAL_RTC_SetTime+0x1c>
 800c980:	2302      	movs	r3, #2
 800c982:	e087      	b.n	800ca94 <HAL_RTC_SetTime+0x12c>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2201      	movs	r2, #1
 800c988:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2202      	movs	r2, #2
 800c98e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d126      	bne.n	800c9e4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d102      	bne.n	800c9aa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 fa29 	bl	800ce06 <RTC_ByteToBcd2>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	785b      	ldrb	r3, [r3, #1]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f000 fa22 	bl	800ce06 <RTC_ByteToBcd2>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c9c6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	789b      	ldrb	r3, [r3, #2]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 fa1a 	bl	800ce06 <RTC_ByteToBcd2>
 800c9d2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9d4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	78db      	ldrb	r3, [r3, #3]
 800c9dc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	617b      	str	r3, [r7, #20]
 800c9e2:	e018      	b.n	800ca16 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d102      	bne.n	800c9f8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	785b      	ldrb	r3, [r3, #1]
 800ca02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ca04:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ca0a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	78db      	ldrb	r3, [r3, #3]
 800ca10:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ca12:	4313      	orrs	r3, r2
 800ca14:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	22ca      	movs	r2, #202	; 0xca
 800ca1c:	625a      	str	r2, [r3, #36]	; 0x24
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2253      	movs	r2, #83	; 0x53
 800ca24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f000 f991 	bl	800cd4e <RTC_EnterInitMode>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ca30:	7cfb      	ldrb	r3, [r7, #19]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d120      	bne.n	800ca78 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ca40:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ca44:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	689a      	ldr	r2, [r3, #8]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ca54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	6899      	ldr	r1, [r3, #8]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	68da      	ldr	r2, [r3, #12]
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	691b      	ldr	r3, [r3, #16]
 800ca64:	431a      	orrs	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	430a      	orrs	r2, r1
 800ca6c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f000 f9a4 	bl	800cdbc <RTC_ExitInitMode>
 800ca74:	4603      	mov	r3, r0
 800ca76:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ca78:	7cfb      	ldrb	r3, [r7, #19]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d102      	bne.n	800ca84 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2201      	movs	r2, #1
 800ca82:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	22ff      	movs	r2, #255	; 0xff
 800ca8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	771a      	strb	r2, [r3, #28]

  return status;
 800ca92:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	371c      	adds	r7, #28
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd90      	pop	{r4, r7, pc}

0800ca9c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800caa8:	2300      	movs	r3, #0
 800caaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cace:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cad2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	0c1b      	lsrs	r3, r3, #16
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	0a1b      	lsrs	r3, r3, #8
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cafc:	b2da      	uxtb	r2, r3
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	0d9b      	lsrs	r3, r3, #22
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	f003 0301 	and.w	r3, r3, #1
 800cb0c:	b2da      	uxtb	r2, r3
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d11a      	bne.n	800cb4e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 f98f 	bl	800ce40 <RTC_Bcd2ToByte>
 800cb22:	4603      	mov	r3, r0
 800cb24:	461a      	mov	r2, r3
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	785b      	ldrb	r3, [r3, #1]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f000 f986 	bl	800ce40 <RTC_Bcd2ToByte>
 800cb34:	4603      	mov	r3, r0
 800cb36:	461a      	mov	r2, r3
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	789b      	ldrb	r3, [r3, #2]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 f97d 	bl	800ce40 <RTC_Bcd2ToByte>
 800cb46:	4603      	mov	r3, r0
 800cb48:	461a      	mov	r2, r3
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3718      	adds	r7, #24
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cb58:	b590      	push	{r4, r7, lr}
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cb64:	2300      	movs	r3, #0
 800cb66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	7f1b      	ldrb	r3, [r3, #28]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d101      	bne.n	800cb74 <HAL_RTC_SetDate+0x1c>
 800cb70:	2302      	movs	r3, #2
 800cb72:	e071      	b.n	800cc58 <HAL_RTC_SetDate+0x100>
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2201      	movs	r2, #1
 800cb78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2202      	movs	r2, #2
 800cb7e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d10e      	bne.n	800cba4 <HAL_RTC_SetDate+0x4c>
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	785b      	ldrb	r3, [r3, #1]
 800cb8a:	f003 0310 	and.w	r3, r3, #16
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d008      	beq.n	800cba4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	785b      	ldrb	r3, [r3, #1]
 800cb96:	f023 0310 	bic.w	r3, r3, #16
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	330a      	adds	r3, #10
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d11c      	bne.n	800cbe4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	78db      	ldrb	r3, [r3, #3]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 f929 	bl	800ce06 <RTC_ByteToBcd2>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	785b      	ldrb	r3, [r3, #1]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f000 f922 	bl	800ce06 <RTC_ByteToBcd2>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cbc6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	789b      	ldrb	r3, [r3, #2]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 f91a 	bl	800ce06 <RTC_ByteToBcd2>
 800cbd2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cbd4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	617b      	str	r3, [r7, #20]
 800cbe2:	e00e      	b.n	800cc02 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	78db      	ldrb	r3, [r3, #3]
 800cbe8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	785b      	ldrb	r3, [r3, #1]
 800cbee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cbf0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cbf6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	22ca      	movs	r2, #202	; 0xca
 800cc08:	625a      	str	r2, [r3, #36]	; 0x24
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2253      	movs	r2, #83	; 0x53
 800cc10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f000 f89b 	bl	800cd4e <RTC_EnterInitMode>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cc1c:	7cfb      	ldrb	r3, [r7, #19]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10c      	bne.n	800cc3c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f000 f8c2 	bl	800cdbc <RTC_ExitInitMode>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cc3c:	7cfb      	ldrb	r3, [r7, #19]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d102      	bne.n	800cc48 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2201      	movs	r2, #1
 800cc46:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	22ff      	movs	r2, #255	; 0xff
 800cc4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2200      	movs	r2, #0
 800cc54:	771a      	strb	r2, [r3, #28]

  return status;
 800cc56:	7cfb      	ldrb	r3, [r7, #19]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	371c      	adds	r7, #28
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd90      	pop	{r4, r7, pc}

0800cc60 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	0c1b      	lsrs	r3, r3, #16
 800cc84:	b2da      	uxtb	r2, r3
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	0a1b      	lsrs	r3, r3, #8
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	f003 031f 	and.w	r3, r3, #31
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	0b5b      	lsrs	r3, r3, #13
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	f003 0307 	and.w	r3, r3, #7
 800ccb2:	b2da      	uxtb	r2, r3
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d11a      	bne.n	800ccf4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	78db      	ldrb	r3, [r3, #3]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 f8bc 	bl	800ce40 <RTC_Bcd2ToByte>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	461a      	mov	r2, r3
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	785b      	ldrb	r3, [r3, #1]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 f8b3 	bl	800ce40 <RTC_Bcd2ToByte>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	461a      	mov	r2, r3
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	789b      	ldrb	r3, [r3, #2]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f000 f8aa 	bl	800ce40 <RTC_Bcd2ToByte>
 800ccec:	4603      	mov	r3, r0
 800ccee:	461a      	mov	r2, r3
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3718      	adds	r7, #24
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b084      	sub	sp, #16
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cd06:	2300      	movs	r3, #0
 800cd08:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68da      	ldr	r2, [r3, #12]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cd18:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cd1a:	f7fd fb39 	bl	800a390 <HAL_GetTick>
 800cd1e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cd20:	e009      	b.n	800cd36 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cd22:	f7fd fb35 	bl	800a390 <HAL_GetTick>
 800cd26:	4602      	mov	r2, r0
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	1ad3      	subs	r3, r2, r3
 800cd2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd30:	d901      	bls.n	800cd36 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cd32:	2303      	movs	r3, #3
 800cd34:	e007      	b.n	800cd46 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	f003 0320 	and.w	r3, r3, #32
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d0ee      	beq.n	800cd22 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b084      	sub	sp, #16
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cd56:	2300      	movs	r3, #0
 800cd58:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d122      	bne.n	800cdb2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68da      	ldr	r2, [r3, #12]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cd7c:	f7fd fb08 	bl	800a390 <HAL_GetTick>
 800cd80:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cd82:	e00c      	b.n	800cd9e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cd84:	f7fd fb04 	bl	800a390 <HAL_GetTick>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	1ad3      	subs	r3, r2, r3
 800cd8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd92:	d904      	bls.n	800cd9e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2204      	movs	r2, #4
 800cd98:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d102      	bne.n	800cdb2 <RTC_EnterInitMode+0x64>
 800cdac:	7bfb      	ldrb	r3, [r7, #15]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d1e8      	bne.n	800cd84 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800cdb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	68da      	ldr	r2, [r3, #12]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdd6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	f003 0320 	and.w	r3, r3, #32
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10a      	bne.n	800cdfc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f7ff ff89 	bl	800ccfe <HAL_RTC_WaitForSynchro>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d004      	beq.n	800cdfc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2204      	movs	r2, #4
 800cdf6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b085      	sub	sp, #20
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800ce10:	2300      	movs	r3, #0
 800ce12:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800ce14:	e005      	b.n	800ce22 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800ce1c:	79fb      	ldrb	r3, [r7, #7]
 800ce1e:	3b0a      	subs	r3, #10
 800ce20:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	2b09      	cmp	r3, #9
 800ce26:	d8f6      	bhi.n	800ce16 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
 800ce2a:	011b      	lsls	r3, r3, #4
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	79fb      	ldrb	r3, [r7, #7]
 800ce30:	4313      	orrs	r3, r2
 800ce32:	b2db      	uxtb	r3, r3
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3714      	adds	r7, #20
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	091b      	lsrs	r3, r3, #4
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	461a      	mov	r2, r3
 800ce56:	0092      	lsls	r2, r2, #2
 800ce58:	4413      	add	r3, r2
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800ce5e:	79fb      	ldrb	r3, [r7, #7]
 800ce60:	f003 030f 	and.w	r3, r3, #15
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
 800ce68:	4413      	add	r3, r2
 800ce6a:	b2db      	uxtb	r3, r3
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d101      	bne.n	800ce8a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e022      	b.n	800ced0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d105      	bne.n	800cea2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7f7 fae3 	bl	8004468 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2203      	movs	r2, #3
 800cea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 f814 	bl	800ced8 <HAL_SD_InitCard>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d001      	beq.n	800ceba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e00a      	b.n	800ced0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2201      	movs	r2, #1
 800ceca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ced8:	b5b0      	push	{r4, r5, r7, lr}
 800ceda:	b08e      	sub	sp, #56	; 0x38
 800cedc:	af04      	add	r7, sp, #16
 800cede:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cee0:	2300      	movs	r3, #0
 800cee2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cee4:	2300      	movs	r3, #0
 800cee6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cee8:	2300      	movs	r3, #0
 800ceea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800ceec:	2300      	movs	r3, #0
 800ceee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cef0:	2300      	movs	r3, #0
 800cef2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cef4:	2376      	movs	r3, #118	; 0x76
 800cef6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681d      	ldr	r5, [r3, #0]
 800cefc:	466c      	mov	r4, sp
 800cefe:	f107 0314 	add.w	r3, r7, #20
 800cf02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf0a:	f107 0308 	add.w	r3, r7, #8
 800cf0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf10:	4628      	mov	r0, r5
 800cf12:	f002 ffb9 	bl	800fe88 <SDIO_Init>
 800cf16:	4603      	mov	r3, r0
 800cf18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cf1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cf24:	2301      	movs	r3, #1
 800cf26:	e04f      	b.n	800cfc8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cf28:	4b29      	ldr	r3, [pc, #164]	; (800cfd0 <HAL_SD_InitCard+0xf8>)
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f002 fff1 	bl	800ff1a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cf38:	4b25      	ldr	r3, [pc, #148]	; (800cfd0 <HAL_SD_InitCard+0xf8>)
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800cf3e:	2002      	movs	r0, #2
 800cf40:	f7fd fa32 	bl	800a3a8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fe69 	bl	800dc1c <SD_PowerON>
 800cf4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf4c:	6a3b      	ldr	r3, [r7, #32]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00b      	beq.n	800cf6a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2201      	movs	r2, #1
 800cf56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf5e:	6a3b      	ldr	r3, [r7, #32]
 800cf60:	431a      	orrs	r2, r3
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf66:	2301      	movs	r3, #1
 800cf68:	e02e      	b.n	800cfc8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 fd88 	bl	800da80 <SD_InitCard>
 800cf70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf72:	6a3b      	ldr	r3, [r7, #32]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00b      	beq.n	800cf90 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	431a      	orrs	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e01b      	b.n	800cfc8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f003 f850 	bl	801003e <SDMMC_CmdBlockLength>
 800cf9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00f      	beq.n	800cfc6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a0a      	ldr	r2, [pc, #40]	; (800cfd4 <HAL_SD_InitCard+0xfc>)
 800cfac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfb2:	6a3b      	ldr	r3, [r7, #32]
 800cfb4:	431a      	orrs	r2, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e000      	b.n	800cfc8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3728      	adds	r7, #40	; 0x28
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bdb0      	pop	{r4, r5, r7, pc}
 800cfd0:	422580a0 	.word	0x422580a0
 800cfd4:	004005ff 	.word	0x004005ff

0800cfd8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b092      	sub	sp, #72	; 0x48
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
 800cfe4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cfe6:	f7fd f9d3 	bl	800a390 <HAL_GetTick>
 800cfea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d107      	bne.n	800d00a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e1bd      	b.n	800d386 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d010:	b2db      	uxtb	r3, r3
 800d012:	2b01      	cmp	r3, #1
 800d014:	f040 81b0 	bne.w	800d378 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d01e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	441a      	add	r2, r3
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d028:	429a      	cmp	r2, r3
 800d02a:	d907      	bls.n	800d03c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d030:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	e1a4      	b.n	800d386 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2203      	movs	r2, #3
 800d040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2200      	movs	r2, #0
 800d04a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d050:	2b01      	cmp	r3, #1
 800d052:	d002      	beq.n	800d05a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800d054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d056:	025b      	lsls	r3, r3, #9
 800d058:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d05a:	f04f 33ff 	mov.w	r3, #4294967295
 800d05e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	025b      	lsls	r3, r3, #9
 800d064:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d066:	2390      	movs	r3, #144	; 0x90
 800d068:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d06a:	2302      	movs	r3, #2
 800d06c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d06e:	2300      	movs	r3, #0
 800d070:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d072:	2301      	movs	r3, #1
 800d074:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f107 0214 	add.w	r2, r7, #20
 800d07e:	4611      	mov	r1, r2
 800d080:	4618      	mov	r0, r3
 800d082:	f002 ffb0 	bl	800ffe6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d90a      	bls.n	800d0a2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2202      	movs	r2, #2
 800d090:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d098:	4618      	mov	r0, r3
 800d09a:	f003 f814 	bl	80100c6 <SDMMC_CmdReadMultiBlock>
 800d09e:	6478      	str	r0, [r7, #68]	; 0x44
 800d0a0:	e009      	b.n	800d0b6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f002 ffe7 	bl	8010082 <SDMMC_CmdReadSingleBlock>
 800d0b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d012      	beq.n	800d0e2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a7a      	ldr	r2, [pc, #488]	; (800d2ac <HAL_SD_ReadBlocks+0x2d4>)
 800d0c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ca:	431a      	orrs	r2, r3
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e151      	b.n	800d386 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d0e6:	e061      	b.n	800d1ac <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d03c      	beq.n	800d170 <HAL_SD_ReadBlocks+0x198>
 800d0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d039      	beq.n	800d170 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	643b      	str	r3, [r7, #64]	; 0x40
 800d100:	e033      	b.n	800d16a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4618      	mov	r0, r3
 800d108:	f002 fee9 	bl	800fede <SDIO_ReadFIFO>
 800d10c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d110:	b2da      	uxtb	r2, r3
 800d112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d114:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d118:	3301      	adds	r3, #1
 800d11a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d11e:	3b01      	subs	r3, #1
 800d120:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d124:	0a1b      	lsrs	r3, r3, #8
 800d126:	b2da      	uxtb	r2, r3
 800d128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12e:	3301      	adds	r3, #1
 800d130:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d134:	3b01      	subs	r3, #1
 800d136:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13a:	0c1b      	lsrs	r3, r3, #16
 800d13c:	b2da      	uxtb	r2, r3
 800d13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d140:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d144:	3301      	adds	r3, #1
 800d146:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d14a:	3b01      	subs	r3, #1
 800d14c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d150:	0e1b      	lsrs	r3, r3, #24
 800d152:	b2da      	uxtb	r2, r3
 800d154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d156:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15a:	3301      	adds	r3, #1
 800d15c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d15e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d160:	3b01      	subs	r3, #1
 800d162:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800d164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d166:	3301      	adds	r3, #1
 800d168:	643b      	str	r3, [r7, #64]	; 0x40
 800d16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d16c:	2b07      	cmp	r3, #7
 800d16e:	d9c8      	bls.n	800d102 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d170:	f7fd f90e 	bl	800a390 <HAL_GetTick>
 800d174:	4602      	mov	r2, r0
 800d176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d902      	bls.n	800d186 <HAL_SD_ReadBlocks+0x1ae>
 800d180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d182:	2b00      	cmp	r3, #0
 800d184:	d112      	bne.n	800d1ac <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a48      	ldr	r2, [pc, #288]	; (800d2ac <HAL_SD_ReadBlocks+0x2d4>)
 800d18c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d192:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2201      	movs	r2, #1
 800d19e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d1a8:	2303      	movs	r3, #3
 800d1aa:	e0ec      	b.n	800d386 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1b2:	f240 332a 	movw	r3, #810	; 0x32a
 800d1b6:	4013      	ands	r3, r2
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d095      	beq.n	800d0e8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d022      	beq.n	800d210 <HAL_SD_ReadBlocks+0x238>
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d91f      	bls.n	800d210 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1d4:	2b03      	cmp	r3, #3
 800d1d6:	d01b      	beq.n	800d210 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f002 ffd9 	bl	8010194 <SDMMC_CmdStopTransfer>
 800d1e2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d1e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d012      	beq.n	800d210 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a2f      	ldr	r2, [pc, #188]	; (800d2ac <HAL_SD_ReadBlocks+0x2d4>)
 800d1f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1f8:	431a      	orrs	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	e0ba      	b.n	800d386 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d216:	f003 0308 	and.w	r3, r3, #8
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d012      	beq.n	800d244 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a22      	ldr	r2, [pc, #136]	; (800d2ac <HAL_SD_ReadBlocks+0x2d4>)
 800d224:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d22a:	f043 0208 	orr.w	r2, r3, #8
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2200      	movs	r2, #0
 800d23e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e0a0      	b.n	800d386 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d24a:	f003 0302 	and.w	r3, r3, #2
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d012      	beq.n	800d278 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a15      	ldr	r2, [pc, #84]	; (800d2ac <HAL_SD_ReadBlocks+0x2d4>)
 800d258:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d25e:	f043 0202 	orr.w	r2, r3, #2
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2201      	movs	r2, #1
 800d26a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2200      	movs	r2, #0
 800d272:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	e086      	b.n	800d386 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d27e:	f003 0320 	and.w	r3, r3, #32
 800d282:	2b00      	cmp	r3, #0
 800d284:	d063      	beq.n	800d34e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a08      	ldr	r2, [pc, #32]	; (800d2ac <HAL_SD_ReadBlocks+0x2d4>)
 800d28c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d292:	f043 0220 	orr.w	r2, r3, #32
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e06c      	b.n	800d386 <HAL_SD_ReadBlocks+0x3ae>
 800d2ac:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f002 fe12 	bl	800fede <SDIO_ReadFIFO>
 800d2ba:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d2:	0a1b      	lsrs	r3, r3, #8
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2dc:	3301      	adds	r3, #1
 800d2de:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e8:	0c1b      	lsrs	r3, r3, #16
 800d2ea:	b2da      	uxtb	r2, r3
 800d2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fe:	0e1b      	lsrs	r3, r3, #24
 800d300:	b2da      	uxtb	r2, r3
 800d302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d304:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d308:	3301      	adds	r3, #1
 800d30a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d30e:	3b01      	subs	r3, #1
 800d310:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d312:	f7fd f83d 	bl	800a390 <HAL_GetTick>
 800d316:	4602      	mov	r2, r0
 800d318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d31e:	429a      	cmp	r2, r3
 800d320:	d902      	bls.n	800d328 <HAL_SD_ReadBlocks+0x350>
 800d322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d324:	2b00      	cmp	r3, #0
 800d326:	d112      	bne.n	800d34e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a18      	ldr	r2, [pc, #96]	; (800d390 <HAL_SD_ReadBlocks+0x3b8>)
 800d32e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d334:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2201      	movs	r2, #1
 800d340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2200      	movs	r2, #0
 800d348:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d34a:	2301      	movs	r3, #1
 800d34c:	e01b      	b.n	800d386 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <HAL_SD_ReadBlocks+0x38a>
 800d35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d1a6      	bne.n	800d2b0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f240 523a 	movw	r2, #1338	; 0x53a
 800d36a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d374:	2300      	movs	r3, #0
 800d376:	e006      	b.n	800d386 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d37c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d384:	2301      	movs	r3, #1
  }
}
 800d386:	4618      	mov	r0, r3
 800d388:	3748      	adds	r7, #72	; 0x48
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	004005ff 	.word	0x004005ff

0800d394 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b092      	sub	sp, #72	; 0x48
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	607a      	str	r2, [r7, #4]
 800d3a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d3a2:	f7fc fff5 	bl	800a390 <HAL_GetTick>
 800d3a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d107      	bne.n	800d3c6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e166      	b.n	800d694 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	f040 8159 	bne.w	800d686 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d3da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	441a      	add	r2, r3
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d907      	bls.n	800d3f8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e14d      	b.n	800d694 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2203      	movs	r2, #3
 800d3fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2200      	movs	r2, #0
 800d406:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d002      	beq.n	800d416 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d412:	025b      	lsls	r3, r3, #9
 800d414:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d416:	f04f 33ff 	mov.w	r3, #4294967295
 800d41a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	025b      	lsls	r3, r3, #9
 800d420:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d422:	2390      	movs	r3, #144	; 0x90
 800d424:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d426:	2300      	movs	r3, #0
 800d428:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d42a:	2300      	movs	r3, #0
 800d42c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d42e:	2301      	movs	r3, #1
 800d430:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f107 0218 	add.w	r2, r7, #24
 800d43a:	4611      	mov	r1, r2
 800d43c:	4618      	mov	r0, r3
 800d43e:	f002 fdd2 	bl	800ffe6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d90a      	bls.n	800d45e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2220      	movs	r2, #32
 800d44c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d454:	4618      	mov	r0, r3
 800d456:	f002 fe7a 	bl	801014e <SDMMC_CmdWriteMultiBlock>
 800d45a:	6478      	str	r0, [r7, #68]	; 0x44
 800d45c:	e009      	b.n	800d472 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2210      	movs	r2, #16
 800d462:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d46a:	4618      	mov	r0, r3
 800d46c:	f002 fe4d 	bl	801010a <SDMMC_CmdWriteSingleBlock>
 800d470:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d474:	2b00      	cmp	r3, #0
 800d476:	d012      	beq.n	800d49e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a87      	ldr	r2, [pc, #540]	; (800d69c <HAL_SD_WriteBlocks+0x308>)
 800d47e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d486:	431a      	orrs	r2, r3
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2200      	movs	r2, #0
 800d498:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d49a:	2301      	movs	r3, #1
 800d49c:	e0fa      	b.n	800d694 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d4a2:	e065      	b.n	800d570 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d040      	beq.n	800d534 <HAL_SD_WriteBlocks+0x1a0>
 800d4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d03d      	beq.n	800d534 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	643b      	str	r3, [r7, #64]	; 0x40
 800d4bc:	e037      	b.n	800d52e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	021a      	lsls	r2, r3, #8
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4de:	3301      	adds	r3, #1
 800d4e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	041a      	lsls	r2, r3, #16
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	061a      	lsls	r2, r3, #24
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	4313      	orrs	r3, r2
 800d50a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50e:	3301      	adds	r3, #1
 800d510:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d514:	3b01      	subs	r3, #1
 800d516:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f107 0214 	add.w	r2, r7, #20
 800d520:	4611      	mov	r1, r2
 800d522:	4618      	mov	r0, r3
 800d524:	f002 fce8 	bl	800fef8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d52a:	3301      	adds	r3, #1
 800d52c:	643b      	str	r3, [r7, #64]	; 0x40
 800d52e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d530:	2b07      	cmp	r3, #7
 800d532:	d9c4      	bls.n	800d4be <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d534:	f7fc ff2c 	bl	800a390 <HAL_GetTick>
 800d538:	4602      	mov	r2, r0
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	1ad3      	subs	r3, r2, r3
 800d53e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d540:	429a      	cmp	r2, r3
 800d542:	d902      	bls.n	800d54a <HAL_SD_WriteBlocks+0x1b6>
 800d544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d546:	2b00      	cmp	r3, #0
 800d548:	d112      	bne.n	800d570 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a53      	ldr	r2, [pc, #332]	; (800d69c <HAL_SD_WriteBlocks+0x308>)
 800d550:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d558:	431a      	orrs	r2, r3
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2200      	movs	r2, #0
 800d56a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d56c:	2303      	movs	r3, #3
 800d56e:	e091      	b.n	800d694 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d576:	f240 331a 	movw	r3, #794	; 0x31a
 800d57a:	4013      	ands	r3, r2
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d091      	beq.n	800d4a4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d022      	beq.n	800d5d4 <HAL_SD_WriteBlocks+0x240>
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d91f      	bls.n	800d5d4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d598:	2b03      	cmp	r3, #3
 800d59a:	d01b      	beq.n	800d5d4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f002 fdf7 	bl	8010194 <SDMMC_CmdStopTransfer>
 800d5a6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d5a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d012      	beq.n	800d5d4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a3a      	ldr	r2, [pc, #232]	; (800d69c <HAL_SD_WriteBlocks+0x308>)
 800d5b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5bc:	431a      	orrs	r2, r3
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e05f      	b.n	800d694 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5da:	f003 0308 	and.w	r3, r3, #8
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d012      	beq.n	800d608 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a2d      	ldr	r2, [pc, #180]	; (800d69c <HAL_SD_WriteBlocks+0x308>)
 800d5e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ee:	f043 0208 	orr.w	r2, r3, #8
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2200      	movs	r2, #0
 800d602:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d604:	2301      	movs	r3, #1
 800d606:	e045      	b.n	800d694 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d60e:	f003 0302 	and.w	r3, r3, #2
 800d612:	2b00      	cmp	r3, #0
 800d614:	d012      	beq.n	800d63c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a20      	ldr	r2, [pc, #128]	; (800d69c <HAL_SD_WriteBlocks+0x308>)
 800d61c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d622:	f043 0202 	orr.w	r2, r3, #2
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2201      	movs	r2, #1
 800d62e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2200      	movs	r2, #0
 800d636:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d638:	2301      	movs	r3, #1
 800d63a:	e02b      	b.n	800d694 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d642:	f003 0310 	and.w	r3, r3, #16
 800d646:	2b00      	cmp	r3, #0
 800d648:	d012      	beq.n	800d670 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a13      	ldr	r2, [pc, #76]	; (800d69c <HAL_SD_WriteBlocks+0x308>)
 800d650:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d656:	f043 0210 	orr.w	r2, r3, #16
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2201      	movs	r2, #1
 800d662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2200      	movs	r2, #0
 800d66a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	e011      	b.n	800d694 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f240 523a 	movw	r2, #1338	; 0x53a
 800d678:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d682:	2300      	movs	r3, #0
 800d684:	e006      	b.n	800d694 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d692:	2301      	movs	r3, #1
  }
}
 800d694:	4618      	mov	r0, r3
 800d696:	3748      	adds	r7, #72	; 0x48
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	004005ff 	.word	0x004005ff

0800d6a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ae:	0f9b      	lsrs	r3, r3, #30
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ba:	0e9b      	lsrs	r3, r3, #26
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	f003 030f 	and.w	r3, r3, #15
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6cc:	0e1b      	lsrs	r3, r3, #24
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	f003 0303 	and.w	r3, r3, #3
 800d6d4:	b2da      	uxtb	r2, r3
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6de:	0c1b      	lsrs	r3, r3, #16
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ea:	0a1b      	lsrs	r3, r3, #8
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6f6:	b2da      	uxtb	r2, r3
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d700:	0d1b      	lsrs	r3, r3, #20
 800d702:	b29a      	uxth	r2, r3
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d70c:	0c1b      	lsrs	r3, r3, #16
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	f003 030f 	and.w	r3, r3, #15
 800d714:	b2da      	uxtb	r2, r3
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d71e:	0bdb      	lsrs	r3, r3, #15
 800d720:	b2db      	uxtb	r3, r3
 800d722:	f003 0301 	and.w	r3, r3, #1
 800d726:	b2da      	uxtb	r2, r3
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d730:	0b9b      	lsrs	r3, r3, #14
 800d732:	b2db      	uxtb	r3, r3
 800d734:	f003 0301 	and.w	r3, r3, #1
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d742:	0b5b      	lsrs	r3, r3, #13
 800d744:	b2db      	uxtb	r3, r3
 800d746:	f003 0301 	and.w	r3, r3, #1
 800d74a:	b2da      	uxtb	r2, r3
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d754:	0b1b      	lsrs	r3, r3, #12
 800d756:	b2db      	uxtb	r3, r3
 800d758:	f003 0301 	and.w	r3, r3, #1
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	2200      	movs	r2, #0
 800d766:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d163      	bne.n	800d838 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d774:	009a      	lsls	r2, r3, #2
 800d776:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d77a:	4013      	ands	r3, r2
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d780:	0f92      	lsrs	r2, r2, #30
 800d782:	431a      	orrs	r2, r3
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d78c:	0edb      	lsrs	r3, r3, #27
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	f003 0307 	and.w	r3, r3, #7
 800d794:	b2da      	uxtb	r2, r3
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d79e:	0e1b      	lsrs	r3, r3, #24
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	f003 0307 	and.w	r3, r3, #7
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7b0:	0d5b      	lsrs	r3, r3, #21
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	f003 0307 	and.w	r3, r3, #7
 800d7b8:	b2da      	uxtb	r2, r3
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c2:	0c9b      	lsrs	r3, r3, #18
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	f003 0307 	and.w	r3, r3, #7
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7d4:	0bdb      	lsrs	r3, r3, #15
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	f003 0307 	and.w	r3, r3, #7
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	691b      	ldr	r3, [r3, #16]
 800d7e6:	1c5a      	adds	r2, r3, #1
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	7e1b      	ldrb	r3, [r3, #24]
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	f003 0307 	and.w	r3, r3, #7
 800d7f6:	3302      	adds	r3, #2
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d802:	fb03 f202 	mul.w	r2, r3, r2
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	7a1b      	ldrb	r3, [r3, #8]
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	f003 030f 	and.w	r3, r3, #15
 800d814:	2201      	movs	r2, #1
 800d816:	409a      	lsls	r2, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d824:	0a52      	lsrs	r2, r2, #9
 800d826:	fb03 f202 	mul.w	r2, r3, r2
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d834:	661a      	str	r2, [r3, #96]	; 0x60
 800d836:	e031      	b.n	800d89c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d11d      	bne.n	800d87c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d844:	041b      	lsls	r3, r3, #16
 800d846:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d84e:	0c1b      	lsrs	r3, r3, #16
 800d850:	431a      	orrs	r2, r3
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	691b      	ldr	r3, [r3, #16]
 800d85a:	3301      	adds	r3, #1
 800d85c:	029a      	lsls	r2, r3, #10
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d870:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	661a      	str	r2, [r3, #96]	; 0x60
 800d87a:	e00f      	b.n	800d89c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a58      	ldr	r2, [pc, #352]	; (800d9e4 <HAL_SD_GetCardCSD+0x344>)
 800d882:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d888:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d898:	2301      	movs	r3, #1
 800d89a:	e09d      	b.n	800d9d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8a0:	0b9b      	lsrs	r3, r3, #14
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	f003 0301 	and.w	r3, r3, #1
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8b2:	09db      	lsrs	r3, r3, #7
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8d4:	0fdb      	lsrs	r3, r3, #31
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e0:	0f5b      	lsrs	r3, r3, #29
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	f003 0303 	and.w	r3, r3, #3
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f2:	0e9b      	lsrs	r3, r3, #26
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	f003 0307 	and.w	r3, r3, #7
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d904:	0d9b      	lsrs	r3, r3, #22
 800d906:	b2db      	uxtb	r3, r3
 800d908:	f003 030f 	and.w	r3, r3, #15
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d916:	0d5b      	lsrs	r3, r3, #21
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	f003 0301 	and.w	r3, r3, #1
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	2200      	movs	r2, #0
 800d92a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d932:	0c1b      	lsrs	r3, r3, #16
 800d934:	b2db      	uxtb	r3, r3
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d946:	0bdb      	lsrs	r3, r3, #15
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	f003 0301 	and.w	r3, r3, #1
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d95a:	0b9b      	lsrs	r3, r3, #14
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	f003 0301 	and.w	r3, r3, #1
 800d962:	b2da      	uxtb	r2, r3
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d96e:	0b5b      	lsrs	r3, r3, #13
 800d970:	b2db      	uxtb	r3, r3
 800d972:	f003 0301 	and.w	r3, r3, #1
 800d976:	b2da      	uxtb	r2, r3
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d982:	0b1b      	lsrs	r3, r3, #12
 800d984:	b2db      	uxtb	r3, r3
 800d986:	f003 0301 	and.w	r3, r3, #1
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d996:	0a9b      	lsrs	r3, r3, #10
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	f003 0303 	and.w	r3, r3, #3
 800d99e:	b2da      	uxtb	r2, r3
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9aa:	0a1b      	lsrs	r3, r3, #8
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	f003 0303 	and.w	r3, r3, #3
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9be:	085b      	lsrs	r3, r3, #1
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9c6:	b2da      	uxtb	r2, r3
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d9d6:	2300      	movs	r3, #0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	370c      	adds	r7, #12
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr
 800d9e4:	004005ff 	.word	0x004005ff

0800d9e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800da32:	2300      	movs	r3, #0
}
 800da34:	4618      	mov	r0, r3
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800da48:	2300      	movs	r3, #0
 800da4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800da4c:	f107 030c 	add.w	r3, r7, #12
 800da50:	4619      	mov	r1, r3
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f970 	bl	800dd38 <SD_SendStatus>
 800da58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d005      	beq.n	800da6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	431a      	orrs	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	0a5b      	lsrs	r3, r3, #9
 800da70:	f003 030f 	and.w	r3, r3, #15
 800da74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800da76:	693b      	ldr	r3, [r7, #16]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3718      	adds	r7, #24
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800da80:	b5b0      	push	{r4, r5, r7, lr}
 800da82:	b094      	sub	sp, #80	; 0x50
 800da84:	af04      	add	r7, sp, #16
 800da86:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800da88:	2301      	movs	r3, #1
 800da8a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4618      	mov	r0, r3
 800da92:	f002 fa50 	bl	800ff36 <SDIO_GetPowerState>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d102      	bne.n	800daa2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800daa0:	e0b8      	b.n	800dc14 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daa6:	2b03      	cmp	r3, #3
 800daa8:	d02f      	beq.n	800db0a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4618      	mov	r0, r3
 800dab0:	f002 fc37 	bl	8010322 <SDMMC_CmdSendCID>
 800dab4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d001      	beq.n	800dac0 <SD_InitCard+0x40>
    {
      return errorstate;
 800dabc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dabe:	e0a9      	b.n	800dc14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2100      	movs	r1, #0
 800dac6:	4618      	mov	r0, r3
 800dac8:	f002 fa7a 	bl	800ffc0 <SDIO_GetResponse>
 800dacc:	4602      	mov	r2, r0
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2104      	movs	r1, #4
 800dad8:	4618      	mov	r0, r3
 800dada:	f002 fa71 	bl	800ffc0 <SDIO_GetResponse>
 800dade:	4602      	mov	r2, r0
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2108      	movs	r1, #8
 800daea:	4618      	mov	r0, r3
 800daec:	f002 fa68 	bl	800ffc0 <SDIO_GetResponse>
 800daf0:	4602      	mov	r2, r0
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	210c      	movs	r1, #12
 800dafc:	4618      	mov	r0, r3
 800dafe:	f002 fa5f 	bl	800ffc0 <SDIO_GetResponse>
 800db02:	4602      	mov	r2, r0
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db0e:	2b03      	cmp	r3, #3
 800db10:	d00d      	beq.n	800db2e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f107 020e 	add.w	r2, r7, #14
 800db1a:	4611      	mov	r1, r2
 800db1c:	4618      	mov	r0, r3
 800db1e:	f002 fc3d 	bl	801039c <SDMMC_CmdSetRelAdd>
 800db22:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800db24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <SD_InitCard+0xae>
    {
      return errorstate;
 800db2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db2c:	e072      	b.n	800dc14 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db32:	2b03      	cmp	r3, #3
 800db34:	d036      	beq.n	800dba4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800db36:	89fb      	ldrh	r3, [r7, #14]
 800db38:	461a      	mov	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db46:	041b      	lsls	r3, r3, #16
 800db48:	4619      	mov	r1, r3
 800db4a:	4610      	mov	r0, r2
 800db4c:	f002 fc07 	bl	801035e <SDMMC_CmdSendCSD>
 800db50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800db52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <SD_InitCard+0xdc>
    {
      return errorstate;
 800db58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5a:	e05b      	b.n	800dc14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2100      	movs	r1, #0
 800db62:	4618      	mov	r0, r3
 800db64:	f002 fa2c 	bl	800ffc0 <SDIO_GetResponse>
 800db68:	4602      	mov	r2, r0
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2104      	movs	r1, #4
 800db74:	4618      	mov	r0, r3
 800db76:	f002 fa23 	bl	800ffc0 <SDIO_GetResponse>
 800db7a:	4602      	mov	r2, r0
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2108      	movs	r1, #8
 800db86:	4618      	mov	r0, r3
 800db88:	f002 fa1a 	bl	800ffc0 <SDIO_GetResponse>
 800db8c:	4602      	mov	r2, r0
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	210c      	movs	r1, #12
 800db98:	4618      	mov	r0, r3
 800db9a:	f002 fa11 	bl	800ffc0 <SDIO_GetResponse>
 800db9e:	4602      	mov	r2, r0
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2104      	movs	r1, #4
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f002 fa08 	bl	800ffc0 <SDIO_GetResponse>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	0d1a      	lsrs	r2, r3, #20
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dbb8:	f107 0310 	add.w	r3, r7, #16
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff fd6e 	bl	800d6a0 <HAL_SD_GetCardCSD>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d002      	beq.n	800dbd0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dbca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dbce:	e021      	b.n	800dc14 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6819      	ldr	r1, [r3, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbd8:	041b      	lsls	r3, r3, #16
 800dbda:	2200      	movs	r2, #0
 800dbdc:	461c      	mov	r4, r3
 800dbde:	4615      	mov	r5, r2
 800dbe0:	4622      	mov	r2, r4
 800dbe2:	462b      	mov	r3, r5
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	f002 faf7 	bl	80101d8 <SDMMC_CmdSelDesel>
 800dbea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d001      	beq.n	800dbf6 <SD_InitCard+0x176>
  {
    return errorstate;
 800dbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbf4:	e00e      	b.n	800dc14 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681d      	ldr	r5, [r3, #0]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	466c      	mov	r4, sp
 800dbfe:	f103 0210 	add.w	r2, r3, #16
 800dc02:	ca07      	ldmia	r2, {r0, r1, r2}
 800dc04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc08:	3304      	adds	r3, #4
 800dc0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	f002 f93b 	bl	800fe88 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3740      	adds	r7, #64	; 0x40
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bdb0      	pop	{r4, r5, r7, pc}

0800dc1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc24:	2300      	movs	r3, #0
 800dc26:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	617b      	str	r3, [r7, #20]
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f002 faf2 	bl	801021e <SDMMC_CmdGoIdleState>
 800dc3a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d001      	beq.n	800dc46 <SD_PowerON+0x2a>
  {
    return errorstate;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	e072      	b.n	800dd2c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f002 fb05 	bl	801025a <SDMMC_CmdOperCond>
 800dc50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d00d      	beq.n	800dc74 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f002 fadb 	bl	801021e <SDMMC_CmdGoIdleState>
 800dc68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d004      	beq.n	800dc7a <SD_PowerON+0x5e>
    {
      return errorstate;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	e05b      	b.n	800dd2c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d137      	bne.n	800dcf2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2100      	movs	r1, #0
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f002 fb05 	bl	8010298 <SDMMC_CmdAppCommand>
 800dc8e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d02d      	beq.n	800dcf2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc9a:	e047      	b.n	800dd2c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2100      	movs	r1, #0
 800dca2:	4618      	mov	r0, r3
 800dca4:	f002 faf8 	bl	8010298 <SDMMC_CmdAppCommand>
 800dca8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d001      	beq.n	800dcb4 <SD_PowerON+0x98>
    {
      return errorstate;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	e03b      	b.n	800dd2c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	491e      	ldr	r1, [pc, #120]	; (800dd34 <SD_PowerON+0x118>)
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f002 fb0e 	bl	80102dc <SDMMC_CmdAppOperCommand>
 800dcc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d002      	beq.n	800dcce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dccc:	e02e      	b.n	800dd2c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f002 f973 	bl	800ffc0 <SDIO_GetResponse>
 800dcda:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	0fdb      	lsrs	r3, r3, #31
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d101      	bne.n	800dce8 <SD_PowerON+0xcc>
 800dce4:	2301      	movs	r3, #1
 800dce6:	e000      	b.n	800dcea <SD_PowerON+0xce>
 800dce8:	2300      	movs	r3, #0
 800dcea:	613b      	str	r3, [r7, #16]

    count++;
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d802      	bhi.n	800dd02 <SD_PowerON+0xe6>
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d0cc      	beq.n	800dc9c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d902      	bls.n	800dd12 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dd0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dd10:	e00c      	b.n	800dd2c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d003      	beq.n	800dd24 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	645a      	str	r2, [r3, #68]	; 0x44
 800dd22:	e002      	b.n	800dd2a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2200      	movs	r2, #0
 800dd28:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3718      	adds	r7, #24
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	c1100000 	.word	0xc1100000

0800dd38 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d102      	bne.n	800dd4e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dd48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd4c:	e018      	b.n	800dd80 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd56:	041b      	lsls	r3, r3, #16
 800dd58:	4619      	mov	r1, r3
 800dd5a:	4610      	mov	r0, r2
 800dd5c:	f002 fb3f 	bl	80103de <SDMMC_CmdSendStatus>
 800dd60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d001      	beq.n	800dd6c <SD_SendStatus+0x34>
  {
    return errorstate;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	e009      	b.n	800dd80 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2100      	movs	r1, #0
 800dd72:	4618      	mov	r0, r3
 800dd74:	f002 f924 	bl	800ffc0 <SDIO_GetResponse>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d101      	bne.n	800dd9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd96:	2301      	movs	r3, #1
 800dd98:	e07b      	b.n	800de92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d108      	bne.n	800ddb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ddaa:	d009      	beq.n	800ddc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	61da      	str	r2, [r3, #28]
 800ddb2:	e005      	b.n	800ddc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d106      	bne.n	800dde0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f7f6 fbe2 	bl	80045a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2202      	movs	r2, #2
 800dde4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	689b      	ldr	r3, [r3, #8]
 800de04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800de08:	431a      	orrs	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de12:	431a      	orrs	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	691b      	ldr	r3, [r3, #16]
 800de18:	f003 0302 	and.w	r3, r3, #2
 800de1c:	431a      	orrs	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	695b      	ldr	r3, [r3, #20]
 800de22:	f003 0301 	and.w	r3, r3, #1
 800de26:	431a      	orrs	r2, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	699b      	ldr	r3, [r3, #24]
 800de2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de30:	431a      	orrs	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	69db      	ldr	r3, [r3, #28]
 800de36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de3a:	431a      	orrs	r2, r3
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6a1b      	ldr	r3, [r3, #32]
 800de40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de44:	ea42 0103 	orr.w	r1, r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	430a      	orrs	r2, r1
 800de56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	699b      	ldr	r3, [r3, #24]
 800de5c:	0c1b      	lsrs	r3, r3, #16
 800de5e:	f003 0104 	and.w	r1, r3, #4
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de66:	f003 0210 	and.w	r2, r3, #16
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	430a      	orrs	r2, r1
 800de70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	69da      	ldr	r2, [r3, #28]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800de80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2200      	movs	r2, #0
 800de86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b088      	sub	sp, #32
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	60f8      	str	r0, [r7, #12]
 800dea2:	60b9      	str	r1, [r7, #8]
 800dea4:	603b      	str	r3, [r7, #0]
 800dea6:	4613      	mov	r3, r2
 800dea8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800deaa:	2300      	movs	r3, #0
 800deac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d101      	bne.n	800debc <HAL_SPI_Transmit+0x22>
 800deb8:	2302      	movs	r3, #2
 800deba:	e126      	b.n	800e10a <HAL_SPI_Transmit+0x270>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2201      	movs	r2, #1
 800dec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dec4:	f7fc fa64 	bl	800a390 <HAL_GetTick>
 800dec8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800deca:	88fb      	ldrh	r3, [r7, #6]
 800decc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d002      	beq.n	800dee0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800deda:	2302      	movs	r3, #2
 800dedc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800dede:	e10b      	b.n	800e0f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d002      	beq.n	800deec <HAL_SPI_Transmit+0x52>
 800dee6:	88fb      	ldrh	r3, [r7, #6]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800deec:	2301      	movs	r3, #1
 800deee:	77fb      	strb	r3, [r7, #31]
    goto error;
 800def0:	e102      	b.n	800e0f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2203      	movs	r2, #3
 800def6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	88fa      	ldrh	r2, [r7, #6]
 800df0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	88fa      	ldrh	r2, [r7, #6]
 800df10:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2200      	movs	r2, #0
 800df16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2200      	movs	r2, #0
 800df28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2200      	movs	r2, #0
 800df2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df38:	d10f      	bne.n	800df5a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df64:	2b40      	cmp	r3, #64	; 0x40
 800df66:	d007      	beq.n	800df78 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df80:	d14b      	bne.n	800e01a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d002      	beq.n	800df90 <HAL_SPI_Transmit+0xf6>
 800df8a:	8afb      	ldrh	r3, [r7, #22]
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d13e      	bne.n	800e00e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df94:	881a      	ldrh	r2, [r3, #0]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa0:	1c9a      	adds	r2, r3, #2
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	3b01      	subs	r3, #1
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dfb4:	e02b      	b.n	800e00e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	f003 0302 	and.w	r3, r3, #2
 800dfc0:	2b02      	cmp	r3, #2
 800dfc2:	d112      	bne.n	800dfea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfc8:	881a      	ldrh	r2, [r3, #0]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfd4:	1c9a      	adds	r2, r3, #2
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	3b01      	subs	r3, #1
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	86da      	strh	r2, [r3, #54]	; 0x36
 800dfe8:	e011      	b.n	800e00e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfea:	f7fc f9d1 	bl	800a390 <HAL_GetTick>
 800dfee:	4602      	mov	r2, r0
 800dff0:	69bb      	ldr	r3, [r7, #24]
 800dff2:	1ad3      	subs	r3, r2, r3
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d803      	bhi.n	800e002 <HAL_SPI_Transmit+0x168>
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e000:	d102      	bne.n	800e008 <HAL_SPI_Transmit+0x16e>
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d102      	bne.n	800e00e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800e008:	2303      	movs	r3, #3
 800e00a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e00c:	e074      	b.n	800e0f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e012:	b29b      	uxth	r3, r3
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1ce      	bne.n	800dfb6 <HAL_SPI_Transmit+0x11c>
 800e018:	e04c      	b.n	800e0b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d002      	beq.n	800e028 <HAL_SPI_Transmit+0x18e>
 800e022:	8afb      	ldrh	r3, [r7, #22]
 800e024:	2b01      	cmp	r3, #1
 800e026:	d140      	bne.n	800e0aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	330c      	adds	r3, #12
 800e032:	7812      	ldrb	r2, [r2, #0]
 800e034:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e03a:	1c5a      	adds	r2, r3, #1
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e044:	b29b      	uxth	r3, r3
 800e046:	3b01      	subs	r3, #1
 800e048:	b29a      	uxth	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e04e:	e02c      	b.n	800e0aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	f003 0302 	and.w	r3, r3, #2
 800e05a:	2b02      	cmp	r3, #2
 800e05c:	d113      	bne.n	800e086 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	330c      	adds	r3, #12
 800e068:	7812      	ldrb	r2, [r2, #0]
 800e06a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e070:	1c5a      	adds	r2, r3, #1
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	3b01      	subs	r3, #1
 800e07e:	b29a      	uxth	r2, r3
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	86da      	strh	r2, [r3, #54]	; 0x36
 800e084:	e011      	b.n	800e0aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e086:	f7fc f983 	bl	800a390 <HAL_GetTick>
 800e08a:	4602      	mov	r2, r0
 800e08c:	69bb      	ldr	r3, [r7, #24]
 800e08e:	1ad3      	subs	r3, r2, r3
 800e090:	683a      	ldr	r2, [r7, #0]
 800e092:	429a      	cmp	r2, r3
 800e094:	d803      	bhi.n	800e09e <HAL_SPI_Transmit+0x204>
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e09c:	d102      	bne.n	800e0a4 <HAL_SPI_Transmit+0x20a>
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800e0a4:	2303      	movs	r3, #3
 800e0a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e0a8:	e026      	b.n	800e0f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d1cd      	bne.n	800e050 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e0b4:	69ba      	ldr	r2, [r7, #24]
 800e0b6:	6839      	ldr	r1, [r7, #0]
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f000 f8b3 	bl	800e224 <SPI_EndRxTxTransaction>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d002      	beq.n	800e0ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2220      	movs	r2, #32
 800e0c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d10a      	bne.n	800e0e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	613b      	str	r3, [r7, #16]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	613b      	str	r3, [r7, #16]
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	613b      	str	r3, [r7, #16]
 800e0e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	77fb      	strb	r3, [r7, #31]
 800e0f4:	e000      	b.n	800e0f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800e0f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2200      	movs	r2, #0
 800e104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e108:	7ffb      	ldrb	r3, [r7, #31]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3720      	adds	r7, #32
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
	...

0800e114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b088      	sub	sp, #32
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	603b      	str	r3, [r7, #0]
 800e120:	4613      	mov	r3, r2
 800e122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e124:	f7fc f934 	bl	800a390 <HAL_GetTick>
 800e128:	4602      	mov	r2, r0
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	1a9b      	subs	r3, r3, r2
 800e12e:	683a      	ldr	r2, [r7, #0]
 800e130:	4413      	add	r3, r2
 800e132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e134:	f7fc f92c 	bl	800a390 <HAL_GetTick>
 800e138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e13a:	4b39      	ldr	r3, [pc, #228]	; (800e220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	015b      	lsls	r3, r3, #5
 800e140:	0d1b      	lsrs	r3, r3, #20
 800e142:	69fa      	ldr	r2, [r7, #28]
 800e144:	fb02 f303 	mul.w	r3, r2, r3
 800e148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e14a:	e054      	b.n	800e1f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e152:	d050      	beq.n	800e1f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e154:	f7fc f91c 	bl	800a390 <HAL_GetTick>
 800e158:	4602      	mov	r2, r0
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	1ad3      	subs	r3, r2, r3
 800e15e:	69fa      	ldr	r2, [r7, #28]
 800e160:	429a      	cmp	r2, r3
 800e162:	d902      	bls.n	800e16a <SPI_WaitFlagStateUntilTimeout+0x56>
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d13d      	bne.n	800e1e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e182:	d111      	bne.n	800e1a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e18c:	d004      	beq.n	800e198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	689b      	ldr	r3, [r3, #8]
 800e192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e196:	d107      	bne.n	800e1a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1b0:	d10f      	bne.n	800e1d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e1c0:	601a      	str	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e1d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e1e2:	2303      	movs	r3, #3
 800e1e4:	e017      	b.n	800e216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d101      	bne.n	800e1f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	689a      	ldr	r2, [r3, #8]
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	4013      	ands	r3, r2
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	429a      	cmp	r2, r3
 800e204:	bf0c      	ite	eq
 800e206:	2301      	moveq	r3, #1
 800e208:	2300      	movne	r3, #0
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	461a      	mov	r2, r3
 800e20e:	79fb      	ldrb	r3, [r7, #7]
 800e210:	429a      	cmp	r2, r3
 800e212:	d19b      	bne.n	800e14c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e214:	2300      	movs	r3, #0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3720      	adds	r7, #32
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	200001e0 	.word	0x200001e0

0800e224 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af02      	add	r7, sp, #8
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e230:	4b1b      	ldr	r3, [pc, #108]	; (800e2a0 <SPI_EndRxTxTransaction+0x7c>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a1b      	ldr	r2, [pc, #108]	; (800e2a4 <SPI_EndRxTxTransaction+0x80>)
 800e236:	fba2 2303 	umull	r2, r3, r2, r3
 800e23a:	0d5b      	lsrs	r3, r3, #21
 800e23c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e240:	fb02 f303 	mul.w	r3, r2, r3
 800e244:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e24e:	d112      	bne.n	800e276 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	2200      	movs	r2, #0
 800e258:	2180      	movs	r1, #128	; 0x80
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f7ff ff5a 	bl	800e114 <SPI_WaitFlagStateUntilTimeout>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d016      	beq.n	800e294 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e26a:	f043 0220 	orr.w	r2, r3, #32
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e272:	2303      	movs	r3, #3
 800e274:	e00f      	b.n	800e296 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00a      	beq.n	800e292 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	3b01      	subs	r3, #1
 800e280:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e28c:	2b80      	cmp	r3, #128	; 0x80
 800e28e:	d0f2      	beq.n	800e276 <SPI_EndRxTxTransaction+0x52>
 800e290:	e000      	b.n	800e294 <SPI_EndRxTxTransaction+0x70>
        break;
 800e292:	bf00      	nop
  }

  return HAL_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3718      	adds	r7, #24
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	200001e0 	.word	0x200001e0
 800e2a4:	165e9f81 	.word	0x165e9f81

0800e2a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e041      	b.n	800e33e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d106      	bne.n	800e2d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f7f6 fd0c 	bl	8004cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2202      	movs	r2, #2
 800e2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	3304      	adds	r3, #4
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	4610      	mov	r0, r2
 800e2e8:	f000 fca8 	bl	800ec3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2201      	movs	r2, #1
 800e300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2201      	movs	r2, #1
 800e308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2201      	movs	r2, #1
 800e318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2201      	movs	r2, #1
 800e320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2201      	movs	r2, #1
 800e328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
	...

0800e348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e356:	b2db      	uxtb	r3, r3
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d001      	beq.n	800e360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e35c:	2301      	movs	r3, #1
 800e35e:	e04e      	b.n	800e3fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2202      	movs	r2, #2
 800e364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	68da      	ldr	r2, [r3, #12]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f042 0201 	orr.w	r2, r2, #1
 800e376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a23      	ldr	r2, [pc, #140]	; (800e40c <HAL_TIM_Base_Start_IT+0xc4>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d022      	beq.n	800e3c8 <HAL_TIM_Base_Start_IT+0x80>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e38a:	d01d      	beq.n	800e3c8 <HAL_TIM_Base_Start_IT+0x80>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a1f      	ldr	r2, [pc, #124]	; (800e410 <HAL_TIM_Base_Start_IT+0xc8>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d018      	beq.n	800e3c8 <HAL_TIM_Base_Start_IT+0x80>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a1e      	ldr	r2, [pc, #120]	; (800e414 <HAL_TIM_Base_Start_IT+0xcc>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d013      	beq.n	800e3c8 <HAL_TIM_Base_Start_IT+0x80>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a1c      	ldr	r2, [pc, #112]	; (800e418 <HAL_TIM_Base_Start_IT+0xd0>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d00e      	beq.n	800e3c8 <HAL_TIM_Base_Start_IT+0x80>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4a1b      	ldr	r2, [pc, #108]	; (800e41c <HAL_TIM_Base_Start_IT+0xd4>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d009      	beq.n	800e3c8 <HAL_TIM_Base_Start_IT+0x80>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a19      	ldr	r2, [pc, #100]	; (800e420 <HAL_TIM_Base_Start_IT+0xd8>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d004      	beq.n	800e3c8 <HAL_TIM_Base_Start_IT+0x80>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a18      	ldr	r2, [pc, #96]	; (800e424 <HAL_TIM_Base_Start_IT+0xdc>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d111      	bne.n	800e3ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	f003 0307 	and.w	r3, r3, #7
 800e3d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2b06      	cmp	r3, #6
 800e3d8:	d010      	beq.n	800e3fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f042 0201 	orr.w	r2, r2, #1
 800e3e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3ea:	e007      	b.n	800e3fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f042 0201 	orr.w	r2, r2, #1
 800e3fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3714      	adds	r7, #20
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	40010000 	.word	0x40010000
 800e410:	40000400 	.word	0x40000400
 800e414:	40000800 	.word	0x40000800
 800e418:	40000c00 	.word	0x40000c00
 800e41c:	40010400 	.word	0x40010400
 800e420:	40014000 	.word	0x40014000
 800e424:	40001800 	.word	0x40001800

0800e428 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68da      	ldr	r2, [r3, #12]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f022 0201 	bic.w	r2, r2, #1
 800e43e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6a1a      	ldr	r2, [r3, #32]
 800e446:	f241 1311 	movw	r3, #4369	; 0x1111
 800e44a:	4013      	ands	r3, r2
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d10f      	bne.n	800e470 <HAL_TIM_Base_Stop_IT+0x48>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6a1a      	ldr	r2, [r3, #32]
 800e456:	f240 4344 	movw	r3, #1092	; 0x444
 800e45a:	4013      	ands	r3, r2
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d107      	bne.n	800e470 <HAL_TIM_Base_Stop_IT+0x48>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f022 0201 	bic.w	r2, r2, #1
 800e46e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2201      	movs	r2, #1
 800e474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e478:	2300      	movs	r3, #0
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	370c      	adds	r7, #12
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr

0800e486 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e486:	b580      	push	{r7, lr}
 800e488:	b082      	sub	sp, #8
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d101      	bne.n	800e498 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e494:	2301      	movs	r3, #1
 800e496:	e041      	b.n	800e51c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d106      	bne.n	800e4b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 f839 	bl	800e524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2202      	movs	r2, #2
 800e4b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	3304      	adds	r3, #4
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	f000 fbb9 	bl	800ec3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2201      	movs	r2, #1
 800e4de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2201      	movs	r2, #1
 800e506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2201      	movs	r2, #1
 800e50e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2201      	movs	r2, #1
 800e516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e52c:	bf00      	nop
 800e52e:	370c      	adds	r7, #12
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b084      	sub	sp, #16
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d109      	bne.n	800e55c <HAL_TIM_PWM_Start+0x24>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	2b01      	cmp	r3, #1
 800e552:	bf14      	ite	ne
 800e554:	2301      	movne	r3, #1
 800e556:	2300      	moveq	r3, #0
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	e022      	b.n	800e5a2 <HAL_TIM_PWM_Start+0x6a>
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	2b04      	cmp	r3, #4
 800e560:	d109      	bne.n	800e576 <HAL_TIM_PWM_Start+0x3e>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	bf14      	ite	ne
 800e56e:	2301      	movne	r3, #1
 800e570:	2300      	moveq	r3, #0
 800e572:	b2db      	uxtb	r3, r3
 800e574:	e015      	b.n	800e5a2 <HAL_TIM_PWM_Start+0x6a>
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2b08      	cmp	r3, #8
 800e57a:	d109      	bne.n	800e590 <HAL_TIM_PWM_Start+0x58>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e582:	b2db      	uxtb	r3, r3
 800e584:	2b01      	cmp	r3, #1
 800e586:	bf14      	ite	ne
 800e588:	2301      	movne	r3, #1
 800e58a:	2300      	moveq	r3, #0
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	e008      	b.n	800e5a2 <HAL_TIM_PWM_Start+0x6a>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e596:	b2db      	uxtb	r3, r3
 800e598:	2b01      	cmp	r3, #1
 800e59a:	bf14      	ite	ne
 800e59c:	2301      	movne	r3, #1
 800e59e:	2300      	moveq	r3, #0
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e07c      	b.n	800e6a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d104      	bne.n	800e5ba <HAL_TIM_PWM_Start+0x82>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2202      	movs	r2, #2
 800e5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e5b8:	e013      	b.n	800e5e2 <HAL_TIM_PWM_Start+0xaa>
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	2b04      	cmp	r3, #4
 800e5be:	d104      	bne.n	800e5ca <HAL_TIM_PWM_Start+0x92>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2202      	movs	r2, #2
 800e5c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5c8:	e00b      	b.n	800e5e2 <HAL_TIM_PWM_Start+0xaa>
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	2b08      	cmp	r3, #8
 800e5ce:	d104      	bne.n	800e5da <HAL_TIM_PWM_Start+0xa2>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2202      	movs	r2, #2
 800e5d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5d8:	e003      	b.n	800e5e2 <HAL_TIM_PWM_Start+0xaa>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2202      	movs	r2, #2
 800e5de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f000 fe10 	bl	800f210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a2d      	ldr	r2, [pc, #180]	; (800e6ac <HAL_TIM_PWM_Start+0x174>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d004      	beq.n	800e604 <HAL_TIM_PWM_Start+0xcc>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a2c      	ldr	r2, [pc, #176]	; (800e6b0 <HAL_TIM_PWM_Start+0x178>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d101      	bne.n	800e608 <HAL_TIM_PWM_Start+0xd0>
 800e604:	2301      	movs	r3, #1
 800e606:	e000      	b.n	800e60a <HAL_TIM_PWM_Start+0xd2>
 800e608:	2300      	movs	r3, #0
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d007      	beq.n	800e61e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e61c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4a22      	ldr	r2, [pc, #136]	; (800e6ac <HAL_TIM_PWM_Start+0x174>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d022      	beq.n	800e66e <HAL_TIM_PWM_Start+0x136>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e630:	d01d      	beq.n	800e66e <HAL_TIM_PWM_Start+0x136>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4a1f      	ldr	r2, [pc, #124]	; (800e6b4 <HAL_TIM_PWM_Start+0x17c>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d018      	beq.n	800e66e <HAL_TIM_PWM_Start+0x136>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4a1d      	ldr	r2, [pc, #116]	; (800e6b8 <HAL_TIM_PWM_Start+0x180>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d013      	beq.n	800e66e <HAL_TIM_PWM_Start+0x136>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4a1c      	ldr	r2, [pc, #112]	; (800e6bc <HAL_TIM_PWM_Start+0x184>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d00e      	beq.n	800e66e <HAL_TIM_PWM_Start+0x136>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a16      	ldr	r2, [pc, #88]	; (800e6b0 <HAL_TIM_PWM_Start+0x178>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d009      	beq.n	800e66e <HAL_TIM_PWM_Start+0x136>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4a18      	ldr	r2, [pc, #96]	; (800e6c0 <HAL_TIM_PWM_Start+0x188>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d004      	beq.n	800e66e <HAL_TIM_PWM_Start+0x136>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4a16      	ldr	r2, [pc, #88]	; (800e6c4 <HAL_TIM_PWM_Start+0x18c>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d111      	bne.n	800e692 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	689b      	ldr	r3, [r3, #8]
 800e674:	f003 0307 	and.w	r3, r3, #7
 800e678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2b06      	cmp	r3, #6
 800e67e:	d010      	beq.n	800e6a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f042 0201 	orr.w	r2, r2, #1
 800e68e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e690:	e007      	b.n	800e6a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f042 0201 	orr.w	r2, r2, #1
 800e6a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3710      	adds	r7, #16
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	40010000 	.word	0x40010000
 800e6b0:	40010400 	.word	0x40010400
 800e6b4:	40000400 	.word	0x40000400
 800e6b8:	40000800 	.word	0x40000800
 800e6bc:	40000c00 	.word	0x40000c00
 800e6c0:	40014000 	.word	0x40014000
 800e6c4:	40001800 	.word	0x40001800

0800e6c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	691b      	ldr	r3, [r3, #16]
 800e6d6:	f003 0302 	and.w	r3, r3, #2
 800e6da:	2b02      	cmp	r3, #2
 800e6dc:	d122      	bne.n	800e724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	f003 0302 	and.w	r3, r3, #2
 800e6e8:	2b02      	cmp	r3, #2
 800e6ea:	d11b      	bne.n	800e724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f06f 0202 	mvn.w	r2, #2
 800e6f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	699b      	ldr	r3, [r3, #24]
 800e702:	f003 0303 	and.w	r3, r3, #3
 800e706:	2b00      	cmp	r3, #0
 800e708:	d003      	beq.n	800e712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 fa77 	bl	800ebfe <HAL_TIM_IC_CaptureCallback>
 800e710:	e005      	b.n	800e71e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 fa69 	bl	800ebea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f000 fa7a 	bl	800ec12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	691b      	ldr	r3, [r3, #16]
 800e72a:	f003 0304 	and.w	r3, r3, #4
 800e72e:	2b04      	cmp	r3, #4
 800e730:	d122      	bne.n	800e778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	f003 0304 	and.w	r3, r3, #4
 800e73c:	2b04      	cmp	r3, #4
 800e73e:	d11b      	bne.n	800e778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f06f 0204 	mvn.w	r2, #4
 800e748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2202      	movs	r2, #2
 800e74e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	699b      	ldr	r3, [r3, #24]
 800e756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d003      	beq.n	800e766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 fa4d 	bl	800ebfe <HAL_TIM_IC_CaptureCallback>
 800e764:	e005      	b.n	800e772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 fa3f 	bl	800ebea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 fa50 	bl	800ec12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	691b      	ldr	r3, [r3, #16]
 800e77e:	f003 0308 	and.w	r3, r3, #8
 800e782:	2b08      	cmp	r3, #8
 800e784:	d122      	bne.n	800e7cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	f003 0308 	and.w	r3, r3, #8
 800e790:	2b08      	cmp	r3, #8
 800e792:	d11b      	bne.n	800e7cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f06f 0208 	mvn.w	r2, #8
 800e79c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2204      	movs	r2, #4
 800e7a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	69db      	ldr	r3, [r3, #28]
 800e7aa:	f003 0303 	and.w	r3, r3, #3
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d003      	beq.n	800e7ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fa23 	bl	800ebfe <HAL_TIM_IC_CaptureCallback>
 800e7b8:	e005      	b.n	800e7c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 fa15 	bl	800ebea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 fa26 	bl	800ec12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	691b      	ldr	r3, [r3, #16]
 800e7d2:	f003 0310 	and.w	r3, r3, #16
 800e7d6:	2b10      	cmp	r3, #16
 800e7d8:	d122      	bne.n	800e820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	f003 0310 	and.w	r3, r3, #16
 800e7e4:	2b10      	cmp	r3, #16
 800e7e6:	d11b      	bne.n	800e820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f06f 0210 	mvn.w	r2, #16
 800e7f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2208      	movs	r2, #8
 800e7f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	69db      	ldr	r3, [r3, #28]
 800e7fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e802:	2b00      	cmp	r3, #0
 800e804:	d003      	beq.n	800e80e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 f9f9 	bl	800ebfe <HAL_TIM_IC_CaptureCallback>
 800e80c:	e005      	b.n	800e81a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 f9eb 	bl	800ebea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 f9fc 	bl	800ec12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2200      	movs	r2, #0
 800e81e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	f003 0301 	and.w	r3, r3, #1
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d10e      	bne.n	800e84c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	f003 0301 	and.w	r3, r3, #1
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d107      	bne.n	800e84c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f06f 0201 	mvn.w	r2, #1
 800e844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f7f5 fcbc 	bl	80041c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e856:	2b80      	cmp	r3, #128	; 0x80
 800e858:	d10e      	bne.n	800e878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e864:	2b80      	cmp	r3, #128	; 0x80
 800e866:	d107      	bne.n	800e878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 fdca 	bl	800f40c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	691b      	ldr	r3, [r3, #16]
 800e87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e882:	2b40      	cmp	r3, #64	; 0x40
 800e884:	d10e      	bne.n	800e8a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e890:	2b40      	cmp	r3, #64	; 0x40
 800e892:	d107      	bne.n	800e8a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e89c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 f9c1 	bl	800ec26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	f003 0320 	and.w	r3, r3, #32
 800e8ae:	2b20      	cmp	r3, #32
 800e8b0:	d10e      	bne.n	800e8d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	f003 0320 	and.w	r3, r3, #32
 800e8bc:	2b20      	cmp	r3, #32
 800e8be:	d107      	bne.n	800e8d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f06f 0220 	mvn.w	r2, #32
 800e8c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 fd94 	bl	800f3f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e8d0:	bf00      	nop
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b086      	sub	sp, #24
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8ee:	2b01      	cmp	r3, #1
 800e8f0:	d101      	bne.n	800e8f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e8f2:	2302      	movs	r3, #2
 800e8f4:	e0ae      	b.n	800ea54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2b0c      	cmp	r3, #12
 800e902:	f200 809f 	bhi.w	800ea44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e906:	a201      	add	r2, pc, #4	; (adr r2, 800e90c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e90c:	0800e941 	.word	0x0800e941
 800e910:	0800ea45 	.word	0x0800ea45
 800e914:	0800ea45 	.word	0x0800ea45
 800e918:	0800ea45 	.word	0x0800ea45
 800e91c:	0800e981 	.word	0x0800e981
 800e920:	0800ea45 	.word	0x0800ea45
 800e924:	0800ea45 	.word	0x0800ea45
 800e928:	0800ea45 	.word	0x0800ea45
 800e92c:	0800e9c3 	.word	0x0800e9c3
 800e930:	0800ea45 	.word	0x0800ea45
 800e934:	0800ea45 	.word	0x0800ea45
 800e938:	0800ea45 	.word	0x0800ea45
 800e93c:	0800ea03 	.word	0x0800ea03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	68b9      	ldr	r1, [r7, #8]
 800e946:	4618      	mov	r0, r3
 800e948:	f000 fa18 	bl	800ed7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	699a      	ldr	r2, [r3, #24]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f042 0208 	orr.w	r2, r2, #8
 800e95a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	699a      	ldr	r2, [r3, #24]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f022 0204 	bic.w	r2, r2, #4
 800e96a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	6999      	ldr	r1, [r3, #24]
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	691a      	ldr	r2, [r3, #16]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	430a      	orrs	r2, r1
 800e97c:	619a      	str	r2, [r3, #24]
      break;
 800e97e:	e064      	b.n	800ea4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	68b9      	ldr	r1, [r7, #8]
 800e986:	4618      	mov	r0, r3
 800e988:	f000 fa68 	bl	800ee5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	699a      	ldr	r2, [r3, #24]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e99a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	699a      	ldr	r2, [r3, #24]
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e9aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	6999      	ldr	r1, [r3, #24]
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	691b      	ldr	r3, [r3, #16]
 800e9b6:	021a      	lsls	r2, r3, #8
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	430a      	orrs	r2, r1
 800e9be:	619a      	str	r2, [r3, #24]
      break;
 800e9c0:	e043      	b.n	800ea4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	68b9      	ldr	r1, [r7, #8]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f000 fabd 	bl	800ef48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	69da      	ldr	r2, [r3, #28]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f042 0208 	orr.w	r2, r2, #8
 800e9dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	69da      	ldr	r2, [r3, #28]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f022 0204 	bic.w	r2, r2, #4
 800e9ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	69d9      	ldr	r1, [r3, #28]
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	691a      	ldr	r2, [r3, #16]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	430a      	orrs	r2, r1
 800e9fe:	61da      	str	r2, [r3, #28]
      break;
 800ea00:	e023      	b.n	800ea4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	68b9      	ldr	r1, [r7, #8]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f000 fb11 	bl	800f030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	69da      	ldr	r2, [r3, #28]
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	69da      	ldr	r2, [r3, #28]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	69d9      	ldr	r1, [r3, #28]
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	691b      	ldr	r3, [r3, #16]
 800ea38:	021a      	lsls	r2, r3, #8
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	430a      	orrs	r2, r1
 800ea40:	61da      	str	r2, [r3, #28]
      break;
 800ea42:	e002      	b.n	800ea4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ea44:	2301      	movs	r3, #1
 800ea46:	75fb      	strb	r3, [r7, #23]
      break;
 800ea48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ea52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3718      	adds	r7, #24
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b084      	sub	sp, #16
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea66:	2300      	movs	r3, #0
 800ea68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d101      	bne.n	800ea78 <HAL_TIM_ConfigClockSource+0x1c>
 800ea74:	2302      	movs	r3, #2
 800ea76:	e0b4      	b.n	800ebe2 <HAL_TIM_ConfigClockSource+0x186>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2202      	movs	r2, #2
 800ea84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ea96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68ba      	ldr	r2, [r7, #8]
 800eaa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eab0:	d03e      	beq.n	800eb30 <HAL_TIM_ConfigClockSource+0xd4>
 800eab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eab6:	f200 8087 	bhi.w	800ebc8 <HAL_TIM_ConfigClockSource+0x16c>
 800eaba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eabe:	f000 8086 	beq.w	800ebce <HAL_TIM_ConfigClockSource+0x172>
 800eac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eac6:	d87f      	bhi.n	800ebc8 <HAL_TIM_ConfigClockSource+0x16c>
 800eac8:	2b70      	cmp	r3, #112	; 0x70
 800eaca:	d01a      	beq.n	800eb02 <HAL_TIM_ConfigClockSource+0xa6>
 800eacc:	2b70      	cmp	r3, #112	; 0x70
 800eace:	d87b      	bhi.n	800ebc8 <HAL_TIM_ConfigClockSource+0x16c>
 800ead0:	2b60      	cmp	r3, #96	; 0x60
 800ead2:	d050      	beq.n	800eb76 <HAL_TIM_ConfigClockSource+0x11a>
 800ead4:	2b60      	cmp	r3, #96	; 0x60
 800ead6:	d877      	bhi.n	800ebc8 <HAL_TIM_ConfigClockSource+0x16c>
 800ead8:	2b50      	cmp	r3, #80	; 0x50
 800eada:	d03c      	beq.n	800eb56 <HAL_TIM_ConfigClockSource+0xfa>
 800eadc:	2b50      	cmp	r3, #80	; 0x50
 800eade:	d873      	bhi.n	800ebc8 <HAL_TIM_ConfigClockSource+0x16c>
 800eae0:	2b40      	cmp	r3, #64	; 0x40
 800eae2:	d058      	beq.n	800eb96 <HAL_TIM_ConfigClockSource+0x13a>
 800eae4:	2b40      	cmp	r3, #64	; 0x40
 800eae6:	d86f      	bhi.n	800ebc8 <HAL_TIM_ConfigClockSource+0x16c>
 800eae8:	2b30      	cmp	r3, #48	; 0x30
 800eaea:	d064      	beq.n	800ebb6 <HAL_TIM_ConfigClockSource+0x15a>
 800eaec:	2b30      	cmp	r3, #48	; 0x30
 800eaee:	d86b      	bhi.n	800ebc8 <HAL_TIM_ConfigClockSource+0x16c>
 800eaf0:	2b20      	cmp	r3, #32
 800eaf2:	d060      	beq.n	800ebb6 <HAL_TIM_ConfigClockSource+0x15a>
 800eaf4:	2b20      	cmp	r3, #32
 800eaf6:	d867      	bhi.n	800ebc8 <HAL_TIM_ConfigClockSource+0x16c>
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d05c      	beq.n	800ebb6 <HAL_TIM_ConfigClockSource+0x15a>
 800eafc:	2b10      	cmp	r3, #16
 800eafe:	d05a      	beq.n	800ebb6 <HAL_TIM_ConfigClockSource+0x15a>
 800eb00:	e062      	b.n	800ebc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6818      	ldr	r0, [r3, #0]
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	6899      	ldr	r1, [r3, #8]
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	685a      	ldr	r2, [r3, #4]
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	f000 fb5d 	bl	800f1d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eb24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	68ba      	ldr	r2, [r7, #8]
 800eb2c:	609a      	str	r2, [r3, #8]
      break;
 800eb2e:	e04f      	b.n	800ebd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6818      	ldr	r0, [r3, #0]
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	6899      	ldr	r1, [r3, #8]
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	685a      	ldr	r2, [r3, #4]
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	f000 fb46 	bl	800f1d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	689a      	ldr	r2, [r3, #8]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eb52:	609a      	str	r2, [r3, #8]
      break;
 800eb54:	e03c      	b.n	800ebd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6818      	ldr	r0, [r3, #0]
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	6859      	ldr	r1, [r3, #4]
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	461a      	mov	r2, r3
 800eb64:	f000 faba 	bl	800f0dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2150      	movs	r1, #80	; 0x50
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 fb13 	bl	800f19a <TIM_ITRx_SetConfig>
      break;
 800eb74:	e02c      	b.n	800ebd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6818      	ldr	r0, [r3, #0]
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	6859      	ldr	r1, [r3, #4]
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	461a      	mov	r2, r3
 800eb84:	f000 fad9 	bl	800f13a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2160      	movs	r1, #96	; 0x60
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f000 fb03 	bl	800f19a <TIM_ITRx_SetConfig>
      break;
 800eb94:	e01c      	b.n	800ebd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6818      	ldr	r0, [r3, #0]
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	6859      	ldr	r1, [r3, #4]
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	461a      	mov	r2, r3
 800eba4:	f000 fa9a 	bl	800f0dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2140      	movs	r1, #64	; 0x40
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 faf3 	bl	800f19a <TIM_ITRx_SetConfig>
      break;
 800ebb4:	e00c      	b.n	800ebd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	4610      	mov	r0, r2
 800ebc2:	f000 faea 	bl	800f19a <TIM_ITRx_SetConfig>
      break;
 800ebc6:	e003      	b.n	800ebd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	73fb      	strb	r3, [r7, #15]
      break;
 800ebcc:	e000      	b.n	800ebd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ebce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ebe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ebea:	b480      	push	{r7}
 800ebec:	b083      	sub	sp, #12
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ebf2:	bf00      	nop
 800ebf4:	370c      	adds	r7, #12
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr

0800ebfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ebfe:	b480      	push	{r7}
 800ec00:	b083      	sub	sp, #12
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ec06:	bf00      	nop
 800ec08:	370c      	adds	r7, #12
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr

0800ec12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec12:	b480      	push	{r7}
 800ec14:	b083      	sub	sp, #12
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ec1a:	bf00      	nop
 800ec1c:	370c      	adds	r7, #12
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ec26:	b480      	push	{r7}
 800ec28:	b083      	sub	sp, #12
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ec2e:	bf00      	nop
 800ec30:	370c      	adds	r7, #12
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
	...

0800ec3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	4a40      	ldr	r2, [pc, #256]	; (800ed50 <TIM_Base_SetConfig+0x114>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d013      	beq.n	800ec7c <TIM_Base_SetConfig+0x40>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec5a:	d00f      	beq.n	800ec7c <TIM_Base_SetConfig+0x40>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4a3d      	ldr	r2, [pc, #244]	; (800ed54 <TIM_Base_SetConfig+0x118>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d00b      	beq.n	800ec7c <TIM_Base_SetConfig+0x40>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	4a3c      	ldr	r2, [pc, #240]	; (800ed58 <TIM_Base_SetConfig+0x11c>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d007      	beq.n	800ec7c <TIM_Base_SetConfig+0x40>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	4a3b      	ldr	r2, [pc, #236]	; (800ed5c <TIM_Base_SetConfig+0x120>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d003      	beq.n	800ec7c <TIM_Base_SetConfig+0x40>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	4a3a      	ldr	r2, [pc, #232]	; (800ed60 <TIM_Base_SetConfig+0x124>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d108      	bne.n	800ec8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	4a2f      	ldr	r2, [pc, #188]	; (800ed50 <TIM_Base_SetConfig+0x114>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d02b      	beq.n	800ecee <TIM_Base_SetConfig+0xb2>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec9c:	d027      	beq.n	800ecee <TIM_Base_SetConfig+0xb2>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4a2c      	ldr	r2, [pc, #176]	; (800ed54 <TIM_Base_SetConfig+0x118>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d023      	beq.n	800ecee <TIM_Base_SetConfig+0xb2>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	4a2b      	ldr	r2, [pc, #172]	; (800ed58 <TIM_Base_SetConfig+0x11c>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d01f      	beq.n	800ecee <TIM_Base_SetConfig+0xb2>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4a2a      	ldr	r2, [pc, #168]	; (800ed5c <TIM_Base_SetConfig+0x120>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d01b      	beq.n	800ecee <TIM_Base_SetConfig+0xb2>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4a29      	ldr	r2, [pc, #164]	; (800ed60 <TIM_Base_SetConfig+0x124>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d017      	beq.n	800ecee <TIM_Base_SetConfig+0xb2>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4a28      	ldr	r2, [pc, #160]	; (800ed64 <TIM_Base_SetConfig+0x128>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d013      	beq.n	800ecee <TIM_Base_SetConfig+0xb2>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	4a27      	ldr	r2, [pc, #156]	; (800ed68 <TIM_Base_SetConfig+0x12c>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d00f      	beq.n	800ecee <TIM_Base_SetConfig+0xb2>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4a26      	ldr	r2, [pc, #152]	; (800ed6c <TIM_Base_SetConfig+0x130>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d00b      	beq.n	800ecee <TIM_Base_SetConfig+0xb2>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	4a25      	ldr	r2, [pc, #148]	; (800ed70 <TIM_Base_SetConfig+0x134>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d007      	beq.n	800ecee <TIM_Base_SetConfig+0xb2>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4a24      	ldr	r2, [pc, #144]	; (800ed74 <TIM_Base_SetConfig+0x138>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d003      	beq.n	800ecee <TIM_Base_SetConfig+0xb2>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	4a23      	ldr	r2, [pc, #140]	; (800ed78 <TIM_Base_SetConfig+0x13c>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d108      	bne.n	800ed00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ecf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	68fa      	ldr	r2, [r7, #12]
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	689a      	ldr	r2, [r3, #8]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4a0a      	ldr	r2, [pc, #40]	; (800ed50 <TIM_Base_SetConfig+0x114>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d003      	beq.n	800ed34 <TIM_Base_SetConfig+0xf8>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4a0c      	ldr	r2, [pc, #48]	; (800ed60 <TIM_Base_SetConfig+0x124>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d103      	bne.n	800ed3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	691a      	ldr	r2, [r3, #16]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	615a      	str	r2, [r3, #20]
}
 800ed42:	bf00      	nop
 800ed44:	3714      	adds	r7, #20
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop
 800ed50:	40010000 	.word	0x40010000
 800ed54:	40000400 	.word	0x40000400
 800ed58:	40000800 	.word	0x40000800
 800ed5c:	40000c00 	.word	0x40000c00
 800ed60:	40010400 	.word	0x40010400
 800ed64:	40014000 	.word	0x40014000
 800ed68:	40014400 	.word	0x40014400
 800ed6c:	40014800 	.word	0x40014800
 800ed70:	40001800 	.word	0x40001800
 800ed74:	40001c00 	.word	0x40001c00
 800ed78:	40002000 	.word	0x40002000

0800ed7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b087      	sub	sp, #28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6a1b      	ldr	r3, [r3, #32]
 800ed8a:	f023 0201 	bic.w	r2, r3, #1
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6a1b      	ldr	r3, [r3, #32]
 800ed96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	699b      	ldr	r3, [r3, #24]
 800eda2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f023 0303 	bic.w	r3, r3, #3
 800edb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	68fa      	ldr	r2, [r7, #12]
 800edba:	4313      	orrs	r3, r2
 800edbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	f023 0302 	bic.w	r3, r3, #2
 800edc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	697a      	ldr	r2, [r7, #20]
 800edcc:	4313      	orrs	r3, r2
 800edce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	4a20      	ldr	r2, [pc, #128]	; (800ee54 <TIM_OC1_SetConfig+0xd8>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d003      	beq.n	800ede0 <TIM_OC1_SetConfig+0x64>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4a1f      	ldr	r2, [pc, #124]	; (800ee58 <TIM_OC1_SetConfig+0xdc>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d10c      	bne.n	800edfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	f023 0308 	bic.w	r3, r3, #8
 800ede6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	697a      	ldr	r2, [r7, #20]
 800edee:	4313      	orrs	r3, r2
 800edf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	f023 0304 	bic.w	r3, r3, #4
 800edf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4a15      	ldr	r2, [pc, #84]	; (800ee54 <TIM_OC1_SetConfig+0xd8>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d003      	beq.n	800ee0a <TIM_OC1_SetConfig+0x8e>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	4a14      	ldr	r2, [pc, #80]	; (800ee58 <TIM_OC1_SetConfig+0xdc>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d111      	bne.n	800ee2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ee18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	695b      	ldr	r3, [r3, #20]
 800ee1e:	693a      	ldr	r2, [r7, #16]
 800ee20:	4313      	orrs	r3, r2
 800ee22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	699b      	ldr	r3, [r3, #24]
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	693a      	ldr	r2, [r7, #16]
 800ee32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	68fa      	ldr	r2, [r7, #12]
 800ee38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	685a      	ldr	r2, [r3, #4]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	697a      	ldr	r2, [r7, #20]
 800ee46:	621a      	str	r2, [r3, #32]
}
 800ee48:	bf00      	nop
 800ee4a:	371c      	adds	r7, #28
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr
 800ee54:	40010000 	.word	0x40010000
 800ee58:	40010400 	.word	0x40010400

0800ee5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b087      	sub	sp, #28
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	f023 0210 	bic.w	r2, r3, #16
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a1b      	ldr	r3, [r3, #32]
 800ee76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	699b      	ldr	r3, [r3, #24]
 800ee82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	021b      	lsls	r3, r3, #8
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	f023 0320 	bic.w	r3, r3, #32
 800eea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	011b      	lsls	r3, r3, #4
 800eeae:	697a      	ldr	r2, [r7, #20]
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a22      	ldr	r2, [pc, #136]	; (800ef40 <TIM_OC2_SetConfig+0xe4>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d003      	beq.n	800eec4 <TIM_OC2_SetConfig+0x68>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a21      	ldr	r2, [pc, #132]	; (800ef44 <TIM_OC2_SetConfig+0xe8>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d10d      	bne.n	800eee0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eeca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	011b      	lsls	r3, r3, #4
 800eed2:	697a      	ldr	r2, [r7, #20]
 800eed4:	4313      	orrs	r3, r2
 800eed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a17      	ldr	r2, [pc, #92]	; (800ef40 <TIM_OC2_SetConfig+0xe4>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d003      	beq.n	800eef0 <TIM_OC2_SetConfig+0x94>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4a16      	ldr	r2, [pc, #88]	; (800ef44 <TIM_OC2_SetConfig+0xe8>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d113      	bne.n	800ef18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eefe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	695b      	ldr	r3, [r3, #20]
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	693a      	ldr	r2, [r7, #16]
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	699b      	ldr	r3, [r3, #24]
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	693a      	ldr	r2, [r7, #16]
 800ef14:	4313      	orrs	r3, r2
 800ef16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	693a      	ldr	r2, [r7, #16]
 800ef1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	685a      	ldr	r2, [r3, #4]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	697a      	ldr	r2, [r7, #20]
 800ef30:	621a      	str	r2, [r3, #32]
}
 800ef32:	bf00      	nop
 800ef34:	371c      	adds	r7, #28
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	40010000 	.word	0x40010000
 800ef44:	40010400 	.word	0x40010400

0800ef48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b087      	sub	sp, #28
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6a1b      	ldr	r3, [r3, #32]
 800ef56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6a1b      	ldr	r3, [r3, #32]
 800ef62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	69db      	ldr	r3, [r3, #28]
 800ef6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f023 0303 	bic.w	r3, r3, #3
 800ef7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	68fa      	ldr	r2, [r7, #12]
 800ef86:	4313      	orrs	r3, r2
 800ef88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ef90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	689b      	ldr	r3, [r3, #8]
 800ef96:	021b      	lsls	r3, r3, #8
 800ef98:	697a      	ldr	r2, [r7, #20]
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4a21      	ldr	r2, [pc, #132]	; (800f028 <TIM_OC3_SetConfig+0xe0>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d003      	beq.n	800efae <TIM_OC3_SetConfig+0x66>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	4a20      	ldr	r2, [pc, #128]	; (800f02c <TIM_OC3_SetConfig+0xe4>)
 800efaa:	4293      	cmp	r3, r2
 800efac:	d10d      	bne.n	800efca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800efb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	68db      	ldr	r3, [r3, #12]
 800efba:	021b      	lsls	r3, r3, #8
 800efbc:	697a      	ldr	r2, [r7, #20]
 800efbe:	4313      	orrs	r3, r2
 800efc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800efc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4a16      	ldr	r2, [pc, #88]	; (800f028 <TIM_OC3_SetConfig+0xe0>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d003      	beq.n	800efda <TIM_OC3_SetConfig+0x92>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4a15      	ldr	r2, [pc, #84]	; (800f02c <TIM_OC3_SetConfig+0xe4>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d113      	bne.n	800f002 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800efe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	695b      	ldr	r3, [r3, #20]
 800efee:	011b      	lsls	r3, r3, #4
 800eff0:	693a      	ldr	r2, [r7, #16]
 800eff2:	4313      	orrs	r3, r2
 800eff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	699b      	ldr	r3, [r3, #24]
 800effa:	011b      	lsls	r3, r3, #4
 800effc:	693a      	ldr	r2, [r7, #16]
 800effe:	4313      	orrs	r3, r2
 800f000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	693a      	ldr	r2, [r7, #16]
 800f006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	68fa      	ldr	r2, [r7, #12]
 800f00c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	697a      	ldr	r2, [r7, #20]
 800f01a:	621a      	str	r2, [r3, #32]
}
 800f01c:	bf00      	nop
 800f01e:	371c      	adds	r7, #28
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr
 800f028:	40010000 	.word	0x40010000
 800f02c:	40010400 	.word	0x40010400

0800f030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f030:	b480      	push	{r7}
 800f032:	b087      	sub	sp, #28
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6a1b      	ldr	r3, [r3, #32]
 800f03e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6a1b      	ldr	r3, [r3, #32]
 800f04a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	69db      	ldr	r3, [r3, #28]
 800f056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f05e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	021b      	lsls	r3, r3, #8
 800f06e:	68fa      	ldr	r2, [r7, #12]
 800f070:	4313      	orrs	r3, r2
 800f072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f07a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	031b      	lsls	r3, r3, #12
 800f082:	693a      	ldr	r2, [r7, #16]
 800f084:	4313      	orrs	r3, r2
 800f086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4a12      	ldr	r2, [pc, #72]	; (800f0d4 <TIM_OC4_SetConfig+0xa4>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d003      	beq.n	800f098 <TIM_OC4_SetConfig+0x68>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4a11      	ldr	r2, [pc, #68]	; (800f0d8 <TIM_OC4_SetConfig+0xa8>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d109      	bne.n	800f0ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f09e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	695b      	ldr	r3, [r3, #20]
 800f0a4:	019b      	lsls	r3, r3, #6
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	697a      	ldr	r2, [r7, #20]
 800f0b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	685a      	ldr	r2, [r3, #4]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	693a      	ldr	r2, [r7, #16]
 800f0c4:	621a      	str	r2, [r3, #32]
}
 800f0c6:	bf00      	nop
 800f0c8:	371c      	adds	r7, #28
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop
 800f0d4:	40010000 	.word	0x40010000
 800f0d8:	40010400 	.word	0x40010400

0800f0dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b087      	sub	sp, #28
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6a1b      	ldr	r3, [r3, #32]
 800f0ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	f023 0201 	bic.w	r2, r3, #1
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	699b      	ldr	r3, [r3, #24]
 800f0fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	011b      	lsls	r3, r3, #4
 800f10c:	693a      	ldr	r2, [r7, #16]
 800f10e:	4313      	orrs	r3, r2
 800f110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f023 030a 	bic.w	r3, r3, #10
 800f118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f11a:	697a      	ldr	r2, [r7, #20]
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	4313      	orrs	r3, r2
 800f120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	693a      	ldr	r2, [r7, #16]
 800f126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	697a      	ldr	r2, [r7, #20]
 800f12c:	621a      	str	r2, [r3, #32]
}
 800f12e:	bf00      	nop
 800f130:	371c      	adds	r7, #28
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr

0800f13a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f13a:	b480      	push	{r7}
 800f13c:	b087      	sub	sp, #28
 800f13e:	af00      	add	r7, sp, #0
 800f140:	60f8      	str	r0, [r7, #12]
 800f142:	60b9      	str	r1, [r7, #8]
 800f144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6a1b      	ldr	r3, [r3, #32]
 800f14a:	f023 0210 	bic.w	r2, r3, #16
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	699b      	ldr	r3, [r3, #24]
 800f156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	6a1b      	ldr	r3, [r3, #32]
 800f15c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	031b      	lsls	r3, r3, #12
 800f16a:	697a      	ldr	r2, [r7, #20]
 800f16c:	4313      	orrs	r3, r2
 800f16e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	011b      	lsls	r3, r3, #4
 800f17c:	693a      	ldr	r2, [r7, #16]
 800f17e:	4313      	orrs	r3, r2
 800f180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	697a      	ldr	r2, [r7, #20]
 800f186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	621a      	str	r2, [r3, #32]
}
 800f18e:	bf00      	nop
 800f190:	371c      	adds	r7, #28
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f19a:	b480      	push	{r7}
 800f19c:	b085      	sub	sp, #20
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f1b2:	683a      	ldr	r2, [r7, #0]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	f043 0307 	orr.w	r3, r3, #7
 800f1bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	609a      	str	r2, [r3, #8]
}
 800f1c4:	bf00      	nop
 800f1c6:	3714      	adds	r7, #20
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b087      	sub	sp, #28
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
 800f1dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	689b      	ldr	r3, [r3, #8]
 800f1e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f1ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	021a      	lsls	r2, r3, #8
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	431a      	orrs	r2, r3
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	697a      	ldr	r2, [r7, #20]
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	697a      	ldr	r2, [r7, #20]
 800f202:	609a      	str	r2, [r3, #8]
}
 800f204:	bf00      	nop
 800f206:	371c      	adds	r7, #28
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f210:	b480      	push	{r7}
 800f212:	b087      	sub	sp, #28
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	f003 031f 	and.w	r3, r3, #31
 800f222:	2201      	movs	r2, #1
 800f224:	fa02 f303 	lsl.w	r3, r2, r3
 800f228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6a1a      	ldr	r2, [r3, #32]
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	43db      	mvns	r3, r3
 800f232:	401a      	ands	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6a1a      	ldr	r2, [r3, #32]
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	f003 031f 	and.w	r3, r3, #31
 800f242:	6879      	ldr	r1, [r7, #4]
 800f244:	fa01 f303 	lsl.w	r3, r1, r3
 800f248:	431a      	orrs	r2, r3
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	621a      	str	r2, [r3, #32]
}
 800f24e:	bf00      	nop
 800f250:	371c      	adds	r7, #28
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr
	...

0800f25c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b085      	sub	sp, #20
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d101      	bne.n	800f274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f270:	2302      	movs	r3, #2
 800f272:	e05a      	b.n	800f32a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2201      	movs	r2, #1
 800f278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2202      	movs	r2, #2
 800f280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	689b      	ldr	r3, [r3, #8]
 800f292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f29a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	68fa      	ldr	r2, [r7, #12]
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4a21      	ldr	r2, [pc, #132]	; (800f338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d022      	beq.n	800f2fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2c0:	d01d      	beq.n	800f2fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4a1d      	ldr	r2, [pc, #116]	; (800f33c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d018      	beq.n	800f2fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a1b      	ldr	r2, [pc, #108]	; (800f340 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d013      	beq.n	800f2fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a1a      	ldr	r2, [pc, #104]	; (800f344 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d00e      	beq.n	800f2fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	4a18      	ldr	r2, [pc, #96]	; (800f348 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d009      	beq.n	800f2fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4a17      	ldr	r2, [pc, #92]	; (800f34c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d004      	beq.n	800f2fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a15      	ldr	r2, [pc, #84]	; (800f350 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d10c      	bne.n	800f318 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	68ba      	ldr	r2, [r7, #8]
 800f30c:	4313      	orrs	r3, r2
 800f30e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	68ba      	ldr	r2, [r7, #8]
 800f316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2201      	movs	r2, #1
 800f31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f328:	2300      	movs	r3, #0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3714      	adds	r7, #20
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	40010000 	.word	0x40010000
 800f33c:	40000400 	.word	0x40000400
 800f340:	40000800 	.word	0x40000800
 800f344:	40000c00 	.word	0x40000c00
 800f348:	40010400 	.word	0x40010400
 800f34c:	40014000 	.word	0x40014000
 800f350:	40001800 	.word	0x40001800

0800f354 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f354:	b480      	push	{r7}
 800f356:	b085      	sub	sp, #20
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f35e:	2300      	movs	r3, #0
 800f360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d101      	bne.n	800f370 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f36c:	2302      	movs	r3, #2
 800f36e:	e03d      	b.n	800f3ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2201      	movs	r2, #1
 800f374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	4313      	orrs	r3, r2
 800f384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	4313      	orrs	r3, r2
 800f392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	4313      	orrs	r3, r2
 800f3a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	691b      	ldr	r3, [r3, #16]
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	695b      	ldr	r3, [r3, #20]
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	69db      	ldr	r3, [r3, #28]
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f3ea:	2300      	movs	r3, #0
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3714      	adds	r7, #20
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f6:	4770      	bx	lr

0800f3f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b083      	sub	sp, #12
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f400:	bf00      	nop
 800f402:	370c      	adds	r7, #12
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr

0800f40c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f414:	bf00      	nop
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr

0800f420 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d101      	bne.n	800f432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f42e:	2301      	movs	r3, #1
 800f430:	e03f      	b.n	800f4b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d106      	bne.n	800f44c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2200      	movs	r2, #0
 800f442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f7f5 fda8 	bl	8004f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2224      	movs	r2, #36	; 0x24
 800f450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68da      	ldr	r2, [r3, #12]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f462:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f000 fa9b 	bl	800f9a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	691a      	ldr	r2, [r3, #16]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f478:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	695a      	ldr	r2, [r3, #20]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f488:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	68da      	ldr	r2, [r3, #12]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f498:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2220      	movs	r2, #32
 800f4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2220      	movs	r2, #32
 800f4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f4b0:	2300      	movs	r3, #0
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3708      	adds	r7, #8
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b084      	sub	sp, #16
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	60f8      	str	r0, [r7, #12]
 800f4c2:	60b9      	str	r1, [r7, #8]
 800f4c4:	4613      	mov	r3, r2
 800f4c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	2b20      	cmp	r3, #32
 800f4d2:	d11d      	bne.n	800f510 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d002      	beq.n	800f4e0 <HAL_UART_Receive_DMA+0x26>
 800f4da:	88fb      	ldrh	r3, [r7, #6]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d101      	bne.n	800f4e4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	e016      	b.n	800f512 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d101      	bne.n	800f4f2 <HAL_UART_Receive_DMA+0x38>
 800f4ee:	2302      	movs	r3, #2
 800f4f0:	e00f      	b.n	800f512 <HAL_UART_Receive_DMA+0x58>
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f500:	88fb      	ldrh	r3, [r7, #6]
 800f502:	461a      	mov	r2, r3
 800f504:	68b9      	ldr	r1, [r7, #8]
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f000 f920 	bl	800f74c <UART_Start_Receive_DMA>
 800f50c:	4603      	mov	r3, r0
 800f50e:	e000      	b.n	800f512 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f510:	2302      	movs	r3, #2
  }
}
 800f512:	4618      	mov	r0, r3
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f51a:	b480      	push	{r7}
 800f51c:	b083      	sub	sp, #12
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800f522:	bf00      	nop
 800f524:	370c      	adds	r7, #12
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr

0800f52e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f52e:	b480      	push	{r7}
 800f530:	b083      	sub	sp, #12
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f536:	bf00      	nop
 800f538:	370c      	adds	r7, #12
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr

0800f542 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f542:	b480      	push	{r7}
 800f544:	b083      	sub	sp, #12
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	460b      	mov	r3, r1
 800f54c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f54e:	bf00      	nop
 800f550:	370c      	adds	r7, #12
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr

0800f55a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b09c      	sub	sp, #112	; 0x70
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f566:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f572:	2b00      	cmp	r3, #0
 800f574:	d172      	bne.n	800f65c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f578:	2200      	movs	r2, #0
 800f57a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	330c      	adds	r3, #12
 800f582:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f586:	e853 3f00 	ldrex	r3, [r3]
 800f58a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f58c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f58e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f592:	66bb      	str	r3, [r7, #104]	; 0x68
 800f594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	330c      	adds	r3, #12
 800f59a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f59c:	65ba      	str	r2, [r7, #88]	; 0x58
 800f59e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5a4:	e841 2300 	strex	r3, r2, [r1]
 800f5a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d1e5      	bne.n	800f57c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	3314      	adds	r3, #20
 800f5b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ba:	e853 3f00 	ldrex	r3, [r3]
 800f5be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5c2:	f023 0301 	bic.w	r3, r3, #1
 800f5c6:	667b      	str	r3, [r7, #100]	; 0x64
 800f5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3314      	adds	r3, #20
 800f5ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f5d0:	647a      	str	r2, [r7, #68]	; 0x44
 800f5d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f5d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5d8:	e841 2300 	strex	r3, r2, [r1]
 800f5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d1e5      	bne.n	800f5b0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3314      	adds	r3, #20
 800f5ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ee:	e853 3f00 	ldrex	r3, [r3]
 800f5f2:	623b      	str	r3, [r7, #32]
   return(result);
 800f5f4:	6a3b      	ldr	r3, [r7, #32]
 800f5f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5fa:	663b      	str	r3, [r7, #96]	; 0x60
 800f5fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	3314      	adds	r3, #20
 800f602:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f604:	633a      	str	r2, [r7, #48]	; 0x30
 800f606:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f60a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f60c:	e841 2300 	strex	r3, r2, [r1]
 800f610:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f614:	2b00      	cmp	r3, #0
 800f616:	d1e5      	bne.n	800f5e4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f61a:	2220      	movs	r2, #32
 800f61c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f624:	2b01      	cmp	r3, #1
 800f626:	d119      	bne.n	800f65c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	330c      	adds	r3, #12
 800f62e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	e853 3f00 	ldrex	r3, [r3]
 800f636:	60fb      	str	r3, [r7, #12]
   return(result);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f023 0310 	bic.w	r3, r3, #16
 800f63e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	330c      	adds	r3, #12
 800f646:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f648:	61fa      	str	r2, [r7, #28]
 800f64a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64c:	69b9      	ldr	r1, [r7, #24]
 800f64e:	69fa      	ldr	r2, [r7, #28]
 800f650:	e841 2300 	strex	r3, r2, [r1]
 800f654:	617b      	str	r3, [r7, #20]
   return(result);
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1e5      	bne.n	800f628 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f65c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f660:	2b01      	cmp	r3, #1
 800f662:	d106      	bne.n	800f672 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f666:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f668:	4619      	mov	r1, r3
 800f66a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f66c:	f7ff ff69 	bl	800f542 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f670:	e002      	b.n	800f678 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800f672:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f674:	f7f4 fe5a 	bl	800432c <HAL_UART_RxCpltCallback>
}
 800f678:	bf00      	nop
 800f67a:	3770      	adds	r7, #112	; 0x70
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f68c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f692:	2b01      	cmp	r3, #1
 800f694:	d108      	bne.n	800f6a8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f69a:	085b      	lsrs	r3, r3, #1
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	4619      	mov	r1, r3
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f7ff ff4e 	bl	800f542 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f6a6:	e002      	b.n	800f6ae <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	f7ff ff36 	bl	800f51a <HAL_UART_RxHalfCpltCallback>
}
 800f6ae:	bf00      	nop
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b084      	sub	sp, #16
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	695b      	ldr	r3, [r3, #20]
 800f6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6d2:	2b80      	cmp	r3, #128	; 0x80
 800f6d4:	bf0c      	ite	eq
 800f6d6:	2301      	moveq	r3, #1
 800f6d8:	2300      	movne	r3, #0
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	2b21      	cmp	r3, #33	; 0x21
 800f6e8:	d108      	bne.n	800f6fc <UART_DMAError+0x46>
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d005      	beq.n	800f6fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800f6f6:	68b8      	ldr	r0, [r7, #8]
 800f6f8:	f000 f8c6 	bl	800f888 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	695b      	ldr	r3, [r3, #20]
 800f702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f706:	2b40      	cmp	r3, #64	; 0x40
 800f708:	bf0c      	ite	eq
 800f70a:	2301      	moveq	r3, #1
 800f70c:	2300      	movne	r3, #0
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	2b22      	cmp	r3, #34	; 0x22
 800f71c:	d108      	bne.n	800f730 <UART_DMAError+0x7a>
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d005      	beq.n	800f730 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	2200      	movs	r2, #0
 800f728:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800f72a:	68b8      	ldr	r0, [r7, #8]
 800f72c:	f000 f8d4 	bl	800f8d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f734:	f043 0210 	orr.w	r2, r3, #16
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f73c:	68b8      	ldr	r0, [r7, #8]
 800f73e:	f7ff fef6 	bl	800f52e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f742:	bf00      	nop
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
	...

0800f74c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b098      	sub	sp, #96	; 0x60
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	4613      	mov	r3, r2
 800f758:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800f75a:	68ba      	ldr	r2, [r7, #8]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	88fa      	ldrh	r2, [r7, #6]
 800f764:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2200      	movs	r2, #0
 800f76a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2222      	movs	r2, #34	; 0x22
 800f770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f778:	4a40      	ldr	r2, [pc, #256]	; (800f87c <UART_Start_Receive_DMA+0x130>)
 800f77a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f780:	4a3f      	ldr	r2, [pc, #252]	; (800f880 <UART_Start_Receive_DMA+0x134>)
 800f782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f788:	4a3e      	ldr	r2, [pc, #248]	; (800f884 <UART_Start_Receive_DMA+0x138>)
 800f78a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f790:	2200      	movs	r2, #0
 800f792:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800f794:	f107 0308 	add.w	r3, r7, #8
 800f798:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	3304      	adds	r3, #4
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	88fb      	ldrh	r3, [r7, #6]
 800f7ac:	f7fa ff31 	bl	800a612 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	613b      	str	r3, [r7, #16]
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	613b      	str	r3, [r7, #16]
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	613b      	str	r3, [r7, #16]
 800f7c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	691b      	ldr	r3, [r3, #16]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d019      	beq.n	800f80a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	330c      	adds	r3, #12
 800f7dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7e0:	e853 3f00 	ldrex	r3, [r3]
 800f7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f7ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	330c      	adds	r3, #12
 800f7f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f7f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f7fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f7fe:	e841 2300 	strex	r3, r2, [r1]
 800f802:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f806:	2b00      	cmp	r3, #0
 800f808:	d1e5      	bne.n	800f7d6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	3314      	adds	r3, #20
 800f810:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f814:	e853 3f00 	ldrex	r3, [r3]
 800f818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81c:	f043 0301 	orr.w	r3, r3, #1
 800f820:	657b      	str	r3, [r7, #84]	; 0x54
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	3314      	adds	r3, #20
 800f828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f82a:	63ba      	str	r2, [r7, #56]	; 0x38
 800f82c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f82e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f832:	e841 2300 	strex	r3, r2, [r1]
 800f836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d1e5      	bne.n	800f80a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	3314      	adds	r3, #20
 800f844:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	e853 3f00 	ldrex	r3, [r3]
 800f84c:	617b      	str	r3, [r7, #20]
   return(result);
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f854:	653b      	str	r3, [r7, #80]	; 0x50
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	3314      	adds	r3, #20
 800f85c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f85e:	627a      	str	r2, [r7, #36]	; 0x24
 800f860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f862:	6a39      	ldr	r1, [r7, #32]
 800f864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f866:	e841 2300 	strex	r3, r2, [r1]
 800f86a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d1e5      	bne.n	800f83e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3760      	adds	r7, #96	; 0x60
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	0800f55b 	.word	0x0800f55b
 800f880:	0800f681 	.word	0x0800f681
 800f884:	0800f6b7 	.word	0x0800f6b7

0800f888 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f888:	b480      	push	{r7}
 800f88a:	b089      	sub	sp, #36	; 0x24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	330c      	adds	r3, #12
 800f896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	e853 3f00 	ldrex	r3, [r3]
 800f89e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f8a6:	61fb      	str	r3, [r7, #28]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	330c      	adds	r3, #12
 800f8ae:	69fa      	ldr	r2, [r7, #28]
 800f8b0:	61ba      	str	r2, [r7, #24]
 800f8b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b4:	6979      	ldr	r1, [r7, #20]
 800f8b6:	69ba      	ldr	r2, [r7, #24]
 800f8b8:	e841 2300 	strex	r3, r2, [r1]
 800f8bc:	613b      	str	r3, [r7, #16]
   return(result);
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1e5      	bne.n	800f890 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2220      	movs	r2, #32
 800f8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800f8cc:	bf00      	nop
 800f8ce:	3724      	adds	r7, #36	; 0x24
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr

0800f8d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b095      	sub	sp, #84	; 0x54
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	330c      	adds	r3, #12
 800f8e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ea:	e853 3f00 	ldrex	r3, [r3]
 800f8ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	330c      	adds	r3, #12
 800f8fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f900:	643a      	str	r2, [r7, #64]	; 0x40
 800f902:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f904:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f908:	e841 2300 	strex	r3, r2, [r1]
 800f90c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	2b00      	cmp	r3, #0
 800f912:	d1e5      	bne.n	800f8e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	3314      	adds	r3, #20
 800f91a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f91c:	6a3b      	ldr	r3, [r7, #32]
 800f91e:	e853 3f00 	ldrex	r3, [r3]
 800f922:	61fb      	str	r3, [r7, #28]
   return(result);
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	f023 0301 	bic.w	r3, r3, #1
 800f92a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	3314      	adds	r3, #20
 800f932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f934:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f93a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f93c:	e841 2300 	strex	r3, r2, [r1]
 800f940:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f944:	2b00      	cmp	r3, #0
 800f946:	d1e5      	bne.n	800f914 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f94c:	2b01      	cmp	r3, #1
 800f94e:	d119      	bne.n	800f984 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	330c      	adds	r3, #12
 800f956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	e853 3f00 	ldrex	r3, [r3]
 800f95e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	f023 0310 	bic.w	r3, r3, #16
 800f966:	647b      	str	r3, [r7, #68]	; 0x44
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	330c      	adds	r3, #12
 800f96e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f970:	61ba      	str	r2, [r7, #24]
 800f972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f974:	6979      	ldr	r1, [r7, #20]
 800f976:	69ba      	ldr	r2, [r7, #24]
 800f978:	e841 2300 	strex	r3, r2, [r1]
 800f97c:	613b      	str	r3, [r7, #16]
   return(result);
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d1e5      	bne.n	800f950 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2220      	movs	r2, #32
 800f988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2200      	movs	r2, #0
 800f990:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f992:	bf00      	nop
 800f994:	3754      	adds	r7, #84	; 0x54
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr
	...

0800f9a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f9a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f9a4:	b0c0      	sub	sp, #256	; 0x100
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	691b      	ldr	r3, [r3, #16]
 800f9b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f9b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f9bc:	68d9      	ldr	r1, [r3, #12]
 800f9be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	ea40 0301 	orr.w	r3, r0, r1
 800f9c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f9ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f9ce:	689a      	ldr	r2, [r3, #8]
 800f9d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f9d4:	691b      	ldr	r3, [r3, #16]
 800f9d6:	431a      	orrs	r2, r3
 800f9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f9dc:	695b      	ldr	r3, [r3, #20]
 800f9de:	431a      	orrs	r2, r3
 800f9e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f9e4:	69db      	ldr	r3, [r3, #28]
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800f9ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f9f8:	f021 010c 	bic.w	r1, r1, #12
 800f9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fa00:	681a      	ldr	r2, [r3, #0]
 800fa02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fa06:	430b      	orrs	r3, r1
 800fa08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fa0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	695b      	ldr	r3, [r3, #20]
 800fa12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800fa16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fa1a:	6999      	ldr	r1, [r3, #24]
 800fa1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	ea40 0301 	orr.w	r3, r0, r1
 800fa26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fa28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fa2c:	681a      	ldr	r2, [r3, #0]
 800fa2e:	4b8f      	ldr	r3, [pc, #572]	; (800fc6c <UART_SetConfig+0x2cc>)
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d005      	beq.n	800fa40 <UART_SetConfig+0xa0>
 800fa34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	4b8d      	ldr	r3, [pc, #564]	; (800fc70 <UART_SetConfig+0x2d0>)
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d104      	bne.n	800fa4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fa40:	f7fc fd48 	bl	800c4d4 <HAL_RCC_GetPCLK2Freq>
 800fa44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800fa48:	e003      	b.n	800fa52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fa4a:	f7fc fd2f 	bl	800c4ac <HAL_RCC_GetPCLK1Freq>
 800fa4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fa52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fa56:	69db      	ldr	r3, [r3, #28]
 800fa58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa5c:	f040 810c 	bne.w	800fc78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fa60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa64:	2200      	movs	r2, #0
 800fa66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fa6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800fa6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800fa72:	4622      	mov	r2, r4
 800fa74:	462b      	mov	r3, r5
 800fa76:	1891      	adds	r1, r2, r2
 800fa78:	65b9      	str	r1, [r7, #88]	; 0x58
 800fa7a:	415b      	adcs	r3, r3
 800fa7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800fa82:	4621      	mov	r1, r4
 800fa84:	eb12 0801 	adds.w	r8, r2, r1
 800fa88:	4629      	mov	r1, r5
 800fa8a:	eb43 0901 	adc.w	r9, r3, r1
 800fa8e:	f04f 0200 	mov.w	r2, #0
 800fa92:	f04f 0300 	mov.w	r3, #0
 800fa96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800fa9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800fa9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800faa2:	4690      	mov	r8, r2
 800faa4:	4699      	mov	r9, r3
 800faa6:	4623      	mov	r3, r4
 800faa8:	eb18 0303 	adds.w	r3, r8, r3
 800faac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fab0:	462b      	mov	r3, r5
 800fab2:	eb49 0303 	adc.w	r3, r9, r3
 800fab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800faba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	2200      	movs	r2, #0
 800fac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fac6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800faca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800face:	460b      	mov	r3, r1
 800fad0:	18db      	adds	r3, r3, r3
 800fad2:	653b      	str	r3, [r7, #80]	; 0x50
 800fad4:	4613      	mov	r3, r2
 800fad6:	eb42 0303 	adc.w	r3, r2, r3
 800fada:	657b      	str	r3, [r7, #84]	; 0x54
 800fadc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800fae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800fae4:	f7f1 f8f0 	bl	8000cc8 <__aeabi_uldivmod>
 800fae8:	4602      	mov	r2, r0
 800faea:	460b      	mov	r3, r1
 800faec:	4b61      	ldr	r3, [pc, #388]	; (800fc74 <UART_SetConfig+0x2d4>)
 800faee:	fba3 2302 	umull	r2, r3, r3, r2
 800faf2:	095b      	lsrs	r3, r3, #5
 800faf4:	011c      	lsls	r4, r3, #4
 800faf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fafa:	2200      	movs	r2, #0
 800fafc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fb00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800fb04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800fb08:	4642      	mov	r2, r8
 800fb0a:	464b      	mov	r3, r9
 800fb0c:	1891      	adds	r1, r2, r2
 800fb0e:	64b9      	str	r1, [r7, #72]	; 0x48
 800fb10:	415b      	adcs	r3, r3
 800fb12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800fb18:	4641      	mov	r1, r8
 800fb1a:	eb12 0a01 	adds.w	sl, r2, r1
 800fb1e:	4649      	mov	r1, r9
 800fb20:	eb43 0b01 	adc.w	fp, r3, r1
 800fb24:	f04f 0200 	mov.w	r2, #0
 800fb28:	f04f 0300 	mov.w	r3, #0
 800fb2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800fb30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800fb34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb38:	4692      	mov	sl, r2
 800fb3a:	469b      	mov	fp, r3
 800fb3c:	4643      	mov	r3, r8
 800fb3e:	eb1a 0303 	adds.w	r3, sl, r3
 800fb42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fb46:	464b      	mov	r3, r9
 800fb48:	eb4b 0303 	adc.w	r3, fp, r3
 800fb4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fb50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	2200      	movs	r2, #0
 800fb58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fb5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800fb60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800fb64:	460b      	mov	r3, r1
 800fb66:	18db      	adds	r3, r3, r3
 800fb68:	643b      	str	r3, [r7, #64]	; 0x40
 800fb6a:	4613      	mov	r3, r2
 800fb6c:	eb42 0303 	adc.w	r3, r2, r3
 800fb70:	647b      	str	r3, [r7, #68]	; 0x44
 800fb72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fb76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800fb7a:	f7f1 f8a5 	bl	8000cc8 <__aeabi_uldivmod>
 800fb7e:	4602      	mov	r2, r0
 800fb80:	460b      	mov	r3, r1
 800fb82:	4611      	mov	r1, r2
 800fb84:	4b3b      	ldr	r3, [pc, #236]	; (800fc74 <UART_SetConfig+0x2d4>)
 800fb86:	fba3 2301 	umull	r2, r3, r3, r1
 800fb8a:	095b      	lsrs	r3, r3, #5
 800fb8c:	2264      	movs	r2, #100	; 0x64
 800fb8e:	fb02 f303 	mul.w	r3, r2, r3
 800fb92:	1acb      	subs	r3, r1, r3
 800fb94:	00db      	lsls	r3, r3, #3
 800fb96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800fb9a:	4b36      	ldr	r3, [pc, #216]	; (800fc74 <UART_SetConfig+0x2d4>)
 800fb9c:	fba3 2302 	umull	r2, r3, r3, r2
 800fba0:	095b      	lsrs	r3, r3, #5
 800fba2:	005b      	lsls	r3, r3, #1
 800fba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fba8:	441c      	add	r4, r3
 800fbaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fbae:	2200      	movs	r2, #0
 800fbb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fbb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800fbb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800fbbc:	4642      	mov	r2, r8
 800fbbe:	464b      	mov	r3, r9
 800fbc0:	1891      	adds	r1, r2, r2
 800fbc2:	63b9      	str	r1, [r7, #56]	; 0x38
 800fbc4:	415b      	adcs	r3, r3
 800fbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fbcc:	4641      	mov	r1, r8
 800fbce:	1851      	adds	r1, r2, r1
 800fbd0:	6339      	str	r1, [r7, #48]	; 0x30
 800fbd2:	4649      	mov	r1, r9
 800fbd4:	414b      	adcs	r3, r1
 800fbd6:	637b      	str	r3, [r7, #52]	; 0x34
 800fbd8:	f04f 0200 	mov.w	r2, #0
 800fbdc:	f04f 0300 	mov.w	r3, #0
 800fbe0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800fbe4:	4659      	mov	r1, fp
 800fbe6:	00cb      	lsls	r3, r1, #3
 800fbe8:	4651      	mov	r1, sl
 800fbea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800fbee:	4651      	mov	r1, sl
 800fbf0:	00ca      	lsls	r2, r1, #3
 800fbf2:	4610      	mov	r0, r2
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	4642      	mov	r2, r8
 800fbfa:	189b      	adds	r3, r3, r2
 800fbfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fc00:	464b      	mov	r3, r9
 800fc02:	460a      	mov	r2, r1
 800fc04:	eb42 0303 	adc.w	r3, r2, r3
 800fc08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fc0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	2200      	movs	r2, #0
 800fc14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fc18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800fc1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800fc20:	460b      	mov	r3, r1
 800fc22:	18db      	adds	r3, r3, r3
 800fc24:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc26:	4613      	mov	r3, r2
 800fc28:	eb42 0303 	adc.w	r3, r2, r3
 800fc2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fc32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800fc36:	f7f1 f847 	bl	8000cc8 <__aeabi_uldivmod>
 800fc3a:	4602      	mov	r2, r0
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	4b0d      	ldr	r3, [pc, #52]	; (800fc74 <UART_SetConfig+0x2d4>)
 800fc40:	fba3 1302 	umull	r1, r3, r3, r2
 800fc44:	095b      	lsrs	r3, r3, #5
 800fc46:	2164      	movs	r1, #100	; 0x64
 800fc48:	fb01 f303 	mul.w	r3, r1, r3
 800fc4c:	1ad3      	subs	r3, r2, r3
 800fc4e:	00db      	lsls	r3, r3, #3
 800fc50:	3332      	adds	r3, #50	; 0x32
 800fc52:	4a08      	ldr	r2, [pc, #32]	; (800fc74 <UART_SetConfig+0x2d4>)
 800fc54:	fba2 2303 	umull	r2, r3, r2, r3
 800fc58:	095b      	lsrs	r3, r3, #5
 800fc5a:	f003 0207 	and.w	r2, r3, #7
 800fc5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4422      	add	r2, r4
 800fc66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800fc68:	e105      	b.n	800fe76 <UART_SetConfig+0x4d6>
 800fc6a:	bf00      	nop
 800fc6c:	40011000 	.word	0x40011000
 800fc70:	40011400 	.word	0x40011400
 800fc74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fc78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fc82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fc86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800fc8a:	4642      	mov	r2, r8
 800fc8c:	464b      	mov	r3, r9
 800fc8e:	1891      	adds	r1, r2, r2
 800fc90:	6239      	str	r1, [r7, #32]
 800fc92:	415b      	adcs	r3, r3
 800fc94:	627b      	str	r3, [r7, #36]	; 0x24
 800fc96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fc9a:	4641      	mov	r1, r8
 800fc9c:	1854      	adds	r4, r2, r1
 800fc9e:	4649      	mov	r1, r9
 800fca0:	eb43 0501 	adc.w	r5, r3, r1
 800fca4:	f04f 0200 	mov.w	r2, #0
 800fca8:	f04f 0300 	mov.w	r3, #0
 800fcac:	00eb      	lsls	r3, r5, #3
 800fcae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800fcb2:	00e2      	lsls	r2, r4, #3
 800fcb4:	4614      	mov	r4, r2
 800fcb6:	461d      	mov	r5, r3
 800fcb8:	4643      	mov	r3, r8
 800fcba:	18e3      	adds	r3, r4, r3
 800fcbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fcc0:	464b      	mov	r3, r9
 800fcc2:	eb45 0303 	adc.w	r3, r5, r3
 800fcc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fcca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fcd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fcda:	f04f 0200 	mov.w	r2, #0
 800fcde:	f04f 0300 	mov.w	r3, #0
 800fce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800fce6:	4629      	mov	r1, r5
 800fce8:	008b      	lsls	r3, r1, #2
 800fcea:	4621      	mov	r1, r4
 800fcec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	008a      	lsls	r2, r1, #2
 800fcf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800fcf8:	f7f0 ffe6 	bl	8000cc8 <__aeabi_uldivmod>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	460b      	mov	r3, r1
 800fd00:	4b60      	ldr	r3, [pc, #384]	; (800fe84 <UART_SetConfig+0x4e4>)
 800fd02:	fba3 2302 	umull	r2, r3, r3, r2
 800fd06:	095b      	lsrs	r3, r3, #5
 800fd08:	011c      	lsls	r4, r3, #4
 800fd0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fd0e:	2200      	movs	r2, #0
 800fd10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fd14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fd18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800fd1c:	4642      	mov	r2, r8
 800fd1e:	464b      	mov	r3, r9
 800fd20:	1891      	adds	r1, r2, r2
 800fd22:	61b9      	str	r1, [r7, #24]
 800fd24:	415b      	adcs	r3, r3
 800fd26:	61fb      	str	r3, [r7, #28]
 800fd28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fd2c:	4641      	mov	r1, r8
 800fd2e:	1851      	adds	r1, r2, r1
 800fd30:	6139      	str	r1, [r7, #16]
 800fd32:	4649      	mov	r1, r9
 800fd34:	414b      	adcs	r3, r1
 800fd36:	617b      	str	r3, [r7, #20]
 800fd38:	f04f 0200 	mov.w	r2, #0
 800fd3c:	f04f 0300 	mov.w	r3, #0
 800fd40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800fd44:	4659      	mov	r1, fp
 800fd46:	00cb      	lsls	r3, r1, #3
 800fd48:	4651      	mov	r1, sl
 800fd4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800fd4e:	4651      	mov	r1, sl
 800fd50:	00ca      	lsls	r2, r1, #3
 800fd52:	4610      	mov	r0, r2
 800fd54:	4619      	mov	r1, r3
 800fd56:	4603      	mov	r3, r0
 800fd58:	4642      	mov	r2, r8
 800fd5a:	189b      	adds	r3, r3, r2
 800fd5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd60:	464b      	mov	r3, r9
 800fd62:	460a      	mov	r2, r1
 800fd64:	eb42 0303 	adc.w	r3, r2, r3
 800fd68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fd6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	67bb      	str	r3, [r7, #120]	; 0x78
 800fd76:	67fa      	str	r2, [r7, #124]	; 0x7c
 800fd78:	f04f 0200 	mov.w	r2, #0
 800fd7c:	f04f 0300 	mov.w	r3, #0
 800fd80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800fd84:	4649      	mov	r1, r9
 800fd86:	008b      	lsls	r3, r1, #2
 800fd88:	4641      	mov	r1, r8
 800fd8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800fd8e:	4641      	mov	r1, r8
 800fd90:	008a      	lsls	r2, r1, #2
 800fd92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800fd96:	f7f0 ff97 	bl	8000cc8 <__aeabi_uldivmod>
 800fd9a:	4602      	mov	r2, r0
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	4b39      	ldr	r3, [pc, #228]	; (800fe84 <UART_SetConfig+0x4e4>)
 800fda0:	fba3 1302 	umull	r1, r3, r3, r2
 800fda4:	095b      	lsrs	r3, r3, #5
 800fda6:	2164      	movs	r1, #100	; 0x64
 800fda8:	fb01 f303 	mul.w	r3, r1, r3
 800fdac:	1ad3      	subs	r3, r2, r3
 800fdae:	011b      	lsls	r3, r3, #4
 800fdb0:	3332      	adds	r3, #50	; 0x32
 800fdb2:	4a34      	ldr	r2, [pc, #208]	; (800fe84 <UART_SetConfig+0x4e4>)
 800fdb4:	fba2 2303 	umull	r2, r3, r2, r3
 800fdb8:	095b      	lsrs	r3, r3, #5
 800fdba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fdbe:	441c      	add	r4, r3
 800fdc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	673b      	str	r3, [r7, #112]	; 0x70
 800fdc8:	677a      	str	r2, [r7, #116]	; 0x74
 800fdca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800fdce:	4642      	mov	r2, r8
 800fdd0:	464b      	mov	r3, r9
 800fdd2:	1891      	adds	r1, r2, r2
 800fdd4:	60b9      	str	r1, [r7, #8]
 800fdd6:	415b      	adcs	r3, r3
 800fdd8:	60fb      	str	r3, [r7, #12]
 800fdda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fdde:	4641      	mov	r1, r8
 800fde0:	1851      	adds	r1, r2, r1
 800fde2:	6039      	str	r1, [r7, #0]
 800fde4:	4649      	mov	r1, r9
 800fde6:	414b      	adcs	r3, r1
 800fde8:	607b      	str	r3, [r7, #4]
 800fdea:	f04f 0200 	mov.w	r2, #0
 800fdee:	f04f 0300 	mov.w	r3, #0
 800fdf2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800fdf6:	4659      	mov	r1, fp
 800fdf8:	00cb      	lsls	r3, r1, #3
 800fdfa:	4651      	mov	r1, sl
 800fdfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800fe00:	4651      	mov	r1, sl
 800fe02:	00ca      	lsls	r2, r1, #3
 800fe04:	4610      	mov	r0, r2
 800fe06:	4619      	mov	r1, r3
 800fe08:	4603      	mov	r3, r0
 800fe0a:	4642      	mov	r2, r8
 800fe0c:	189b      	adds	r3, r3, r2
 800fe0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe10:	464b      	mov	r3, r9
 800fe12:	460a      	mov	r2, r1
 800fe14:	eb42 0303 	adc.w	r3, r2, r3
 800fe18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	2200      	movs	r2, #0
 800fe22:	663b      	str	r3, [r7, #96]	; 0x60
 800fe24:	667a      	str	r2, [r7, #100]	; 0x64
 800fe26:	f04f 0200 	mov.w	r2, #0
 800fe2a:	f04f 0300 	mov.w	r3, #0
 800fe2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800fe32:	4649      	mov	r1, r9
 800fe34:	008b      	lsls	r3, r1, #2
 800fe36:	4641      	mov	r1, r8
 800fe38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800fe3c:	4641      	mov	r1, r8
 800fe3e:	008a      	lsls	r2, r1, #2
 800fe40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800fe44:	f7f0 ff40 	bl	8000cc8 <__aeabi_uldivmod>
 800fe48:	4602      	mov	r2, r0
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	4b0d      	ldr	r3, [pc, #52]	; (800fe84 <UART_SetConfig+0x4e4>)
 800fe4e:	fba3 1302 	umull	r1, r3, r3, r2
 800fe52:	095b      	lsrs	r3, r3, #5
 800fe54:	2164      	movs	r1, #100	; 0x64
 800fe56:	fb01 f303 	mul.w	r3, r1, r3
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	011b      	lsls	r3, r3, #4
 800fe5e:	3332      	adds	r3, #50	; 0x32
 800fe60:	4a08      	ldr	r2, [pc, #32]	; (800fe84 <UART_SetConfig+0x4e4>)
 800fe62:	fba2 2303 	umull	r2, r3, r2, r3
 800fe66:	095b      	lsrs	r3, r3, #5
 800fe68:	f003 020f 	and.w	r2, r3, #15
 800fe6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	4422      	add	r2, r4
 800fe74:	609a      	str	r2, [r3, #8]
}
 800fe76:	bf00      	nop
 800fe78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fe82:	bf00      	nop
 800fe84:	51eb851f 	.word	0x51eb851f

0800fe88 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800fe88:	b084      	sub	sp, #16
 800fe8a:	b480      	push	{r7}
 800fe8c:	b085      	sub	sp, #20
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
 800fe92:	f107 001c 	add.w	r0, r7, #28
 800fe96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fe9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fea0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fea2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800fea6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800feaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800feac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800feae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800feb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800feb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800feb4:	68fa      	ldr	r2, [r7, #12]
 800feb6:	4313      	orrs	r3, r2
 800feb8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800fec2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fec6:	68fa      	ldr	r2, [r7, #12]
 800fec8:	431a      	orrs	r2, r3
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fece:	2300      	movs	r3, #0
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3714      	adds	r7, #20
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	b004      	add	sp, #16
 800fedc:	4770      	bx	lr

0800fede <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800fede:	b480      	push	{r7}
 800fee0:	b083      	sub	sp, #12
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800feec:	4618      	mov	r0, r3
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr

0800fef8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ff0c:	2300      	movs	r3, #0
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	370c      	adds	r7, #12
 800ff12:	46bd      	mov	sp, r7
 800ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff18:	4770      	bx	lr

0800ff1a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ff1a:	b480      	push	{r7}
 800ff1c:	b083      	sub	sp, #12
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2203      	movs	r2, #3
 800ff26:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ff28:	2300      	movs	r3, #0
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	370c      	adds	r7, #12
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff34:	4770      	bx	lr

0800ff36 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ff36:	b480      	push	{r7}
 800ff38:	b083      	sub	sp, #12
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f003 0303 	and.w	r3, r3, #3
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	370c      	adds	r7, #12
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr

0800ff52 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ff52:	b480      	push	{r7}
 800ff54:	b085      	sub	sp, #20
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
 800ff5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	681a      	ldr	r2, [r3, #0]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff70:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ff76:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ff7c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff7e:	68fa      	ldr	r2, [r7, #12]
 800ff80:	4313      	orrs	r3, r2
 800ff82:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ff8c:	f023 030f 	bic.w	r3, r3, #15
 800ff90:	68fa      	ldr	r2, [r7, #12]
 800ff92:	431a      	orrs	r2, r3
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ff98:	2300      	movs	r3, #0
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3714      	adds	r7, #20
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ffa6:	b480      	push	{r7}
 800ffa8:	b083      	sub	sp, #12
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	691b      	ldr	r3, [r3, #16]
 800ffb2:	b2db      	uxtb	r3, r3
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	370c      	adds	r7, #12
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr

0800ffc0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b085      	sub	sp, #20
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	3314      	adds	r3, #20
 800ffce:	461a      	mov	r2, r3
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
}  
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3714      	adds	r7, #20
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ffe6:	b480      	push	{r7}
 800ffe8:	b085      	sub	sp, #20
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
 800ffee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fff0:	2300      	movs	r3, #0
 800fff2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	685a      	ldr	r2, [r3, #4]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801000c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010012:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010018:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	4313      	orrs	r3, r2
 801001e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010024:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	431a      	orrs	r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010030:	2300      	movs	r3, #0

}
 8010032:	4618      	mov	r0, r3
 8010034:	3714      	adds	r7, #20
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr

0801003e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 801003e:	b580      	push	{r7, lr}
 8010040:	b088      	sub	sp, #32
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
 8010046:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801004c:	2310      	movs	r3, #16
 801004e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010050:	2340      	movs	r3, #64	; 0x40
 8010052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010054:	2300      	movs	r3, #0
 8010056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801005c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801005e:	f107 0308 	add.w	r3, r7, #8
 8010062:	4619      	mov	r1, r3
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f7ff ff74 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801006a:	f241 3288 	movw	r2, #5000	; 0x1388
 801006e:	2110      	movs	r1, #16
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 f9d7 	bl	8010424 <SDMMC_GetCmdResp1>
 8010076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010078:	69fb      	ldr	r3, [r7, #28]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3720      	adds	r7, #32
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b088      	sub	sp, #32
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
 801008a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010090:	2311      	movs	r3, #17
 8010092:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010094:	2340      	movs	r3, #64	; 0x40
 8010096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010098:	2300      	movs	r3, #0
 801009a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801009c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100a2:	f107 0308 	add.w	r3, r7, #8
 80100a6:	4619      	mov	r1, r3
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f7ff ff52 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80100ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80100b2:	2111      	movs	r1, #17
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f000 f9b5 	bl	8010424 <SDMMC_GetCmdResp1>
 80100ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100bc:	69fb      	ldr	r3, [r7, #28]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3720      	adds	r7, #32
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}

080100c6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80100c6:	b580      	push	{r7, lr}
 80100c8:	b088      	sub	sp, #32
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
 80100ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80100d4:	2312      	movs	r3, #18
 80100d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80100d8:	2340      	movs	r3, #64	; 0x40
 80100da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80100dc:	2300      	movs	r3, #0
 80100de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80100e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100e6:	f107 0308 	add.w	r3, r7, #8
 80100ea:	4619      	mov	r1, r3
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f7ff ff30 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80100f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80100f6:	2112      	movs	r1, #18
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 f993 	bl	8010424 <SDMMC_GetCmdResp1>
 80100fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010100:	69fb      	ldr	r3, [r7, #28]
}
 8010102:	4618      	mov	r0, r3
 8010104:	3720      	adds	r7, #32
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b088      	sub	sp, #32
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
 8010112:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010118:	2318      	movs	r3, #24
 801011a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801011c:	2340      	movs	r3, #64	; 0x40
 801011e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010120:	2300      	movs	r3, #0
 8010122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010128:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801012a:	f107 0308 	add.w	r3, r7, #8
 801012e:	4619      	mov	r1, r3
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f7ff ff0e 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010136:	f241 3288 	movw	r2, #5000	; 0x1388
 801013a:	2118      	movs	r1, #24
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 f971 	bl	8010424 <SDMMC_GetCmdResp1>
 8010142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010144:	69fb      	ldr	r3, [r7, #28]
}
 8010146:	4618      	mov	r0, r3
 8010148:	3720      	adds	r7, #32
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}

0801014e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801014e:	b580      	push	{r7, lr}
 8010150:	b088      	sub	sp, #32
 8010152:	af00      	add	r7, sp, #0
 8010154:	6078      	str	r0, [r7, #4]
 8010156:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801015c:	2319      	movs	r3, #25
 801015e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010160:	2340      	movs	r3, #64	; 0x40
 8010162:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010164:	2300      	movs	r3, #0
 8010166:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801016c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801016e:	f107 0308 	add.w	r3, r7, #8
 8010172:	4619      	mov	r1, r3
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f7ff feec 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801017a:	f241 3288 	movw	r2, #5000	; 0x1388
 801017e:	2119      	movs	r1, #25
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 f94f 	bl	8010424 <SDMMC_GetCmdResp1>
 8010186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010188:	69fb      	ldr	r3, [r7, #28]
}
 801018a:	4618      	mov	r0, r3
 801018c:	3720      	adds	r7, #32
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
	...

08010194 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b088      	sub	sp, #32
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801019c:	2300      	movs	r3, #0
 801019e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80101a0:	230c      	movs	r3, #12
 80101a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101a4:	2340      	movs	r3, #64	; 0x40
 80101a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101a8:	2300      	movs	r3, #0
 80101aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101b2:	f107 0308 	add.w	r3, r7, #8
 80101b6:	4619      	mov	r1, r3
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7ff feca 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80101be:	4a05      	ldr	r2, [pc, #20]	; (80101d4 <SDMMC_CmdStopTransfer+0x40>)
 80101c0:	210c      	movs	r1, #12
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f000 f92e 	bl	8010424 <SDMMC_GetCmdResp1>
 80101c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101ca:	69fb      	ldr	r3, [r7, #28]
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3720      	adds	r7, #32
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}
 80101d4:	05f5e100 	.word	0x05f5e100

080101d8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b08a      	sub	sp, #40	; 0x28
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80101e8:	2307      	movs	r3, #7
 80101ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101ec:	2340      	movs	r3, #64	; 0x40
 80101ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101f0:	2300      	movs	r3, #0
 80101f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101f8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101fa:	f107 0310 	add.w	r3, r7, #16
 80101fe:	4619      	mov	r1, r3
 8010200:	68f8      	ldr	r0, [r7, #12]
 8010202:	f7ff fea6 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010206:	f241 3288 	movw	r2, #5000	; 0x1388
 801020a:	2107      	movs	r1, #7
 801020c:	68f8      	ldr	r0, [r7, #12]
 801020e:	f000 f909 	bl	8010424 <SDMMC_GetCmdResp1>
 8010212:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010216:	4618      	mov	r0, r3
 8010218:	3728      	adds	r7, #40	; 0x28
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}

0801021e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801021e:	b580      	push	{r7, lr}
 8010220:	b088      	sub	sp, #32
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010226:	2300      	movs	r3, #0
 8010228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801022a:	2300      	movs	r3, #0
 801022c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801022e:	2300      	movs	r3, #0
 8010230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010232:	2300      	movs	r3, #0
 8010234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801023a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801023c:	f107 0308 	add.w	r3, r7, #8
 8010240:	4619      	mov	r1, r3
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f7ff fe85 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f000 fb23 	bl	8010894 <SDMMC_GetCmdError>
 801024e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010250:	69fb      	ldr	r3, [r7, #28]
}
 8010252:	4618      	mov	r0, r3
 8010254:	3720      	adds	r7, #32
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801025a:	b580      	push	{r7, lr}
 801025c:	b088      	sub	sp, #32
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010262:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010268:	2308      	movs	r3, #8
 801026a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801026c:	2340      	movs	r3, #64	; 0x40
 801026e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010270:	2300      	movs	r3, #0
 8010272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010278:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801027a:	f107 0308 	add.w	r3, r7, #8
 801027e:	4619      	mov	r1, r3
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f7ff fe66 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 fab6 	bl	80107f8 <SDMMC_GetCmdResp7>
 801028c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801028e:	69fb      	ldr	r3, [r7, #28]
}
 8010290:	4618      	mov	r0, r3
 8010292:	3720      	adds	r7, #32
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}

08010298 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b088      	sub	sp, #32
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80102a6:	2337      	movs	r3, #55	; 0x37
 80102a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102aa:	2340      	movs	r3, #64	; 0x40
 80102ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102ae:	2300      	movs	r3, #0
 80102b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102b8:	f107 0308 	add.w	r3, r7, #8
 80102bc:	4619      	mov	r1, r3
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f7ff fe47 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80102c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80102c8:	2137      	movs	r1, #55	; 0x37
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 f8aa 	bl	8010424 <SDMMC_GetCmdResp1>
 80102d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102d2:	69fb      	ldr	r3, [r7, #28]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3720      	adds	r7, #32
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b088      	sub	sp, #32
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80102ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80102f2:	2329      	movs	r3, #41	; 0x29
 80102f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102f6:	2340      	movs	r3, #64	; 0x40
 80102f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102fa:	2300      	movs	r3, #0
 80102fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010304:	f107 0308 	add.w	r3, r7, #8
 8010308:	4619      	mov	r1, r3
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f7ff fe21 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 f9bd 	bl	8010690 <SDMMC_GetCmdResp3>
 8010316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010318:	69fb      	ldr	r3, [r7, #28]
}
 801031a:	4618      	mov	r0, r3
 801031c:	3720      	adds	r7, #32
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}

08010322 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010322:	b580      	push	{r7, lr}
 8010324:	b088      	sub	sp, #32
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801032a:	2300      	movs	r3, #0
 801032c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801032e:	2302      	movs	r3, #2
 8010330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010332:	23c0      	movs	r3, #192	; 0xc0
 8010334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010336:	2300      	movs	r3, #0
 8010338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801033a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801033e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010340:	f107 0308 	add.w	r3, r7, #8
 8010344:	4619      	mov	r1, r3
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f7ff fe03 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f000 f957 	bl	8010600 <SDMMC_GetCmdResp2>
 8010352:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010354:	69fb      	ldr	r3, [r7, #28]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3720      	adds	r7, #32
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}

0801035e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801035e:	b580      	push	{r7, lr}
 8010360:	b088      	sub	sp, #32
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
 8010366:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801036c:	2309      	movs	r3, #9
 801036e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010370:	23c0      	movs	r3, #192	; 0xc0
 8010372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010374:	2300      	movs	r3, #0
 8010376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801037c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801037e:	f107 0308 	add.w	r3, r7, #8
 8010382:	4619      	mov	r1, r3
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f7ff fde4 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f000 f938 	bl	8010600 <SDMMC_GetCmdResp2>
 8010390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010392:	69fb      	ldr	r3, [r7, #28]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3720      	adds	r7, #32
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b088      	sub	sp, #32
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80103a6:	2300      	movs	r3, #0
 80103a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80103aa:	2303      	movs	r3, #3
 80103ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103ae:	2340      	movs	r3, #64	; 0x40
 80103b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103b2:	2300      	movs	r3, #0
 80103b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103bc:	f107 0308 	add.w	r3, r7, #8
 80103c0:	4619      	mov	r1, r3
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f7ff fdc5 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80103c8:	683a      	ldr	r2, [r7, #0]
 80103ca:	2103      	movs	r1, #3
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f000 f99d 	bl	801070c <SDMMC_GetCmdResp6>
 80103d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103d4:	69fb      	ldr	r3, [r7, #28]
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3720      	adds	r7, #32
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b088      	sub	sp, #32
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80103ec:	230d      	movs	r3, #13
 80103ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103f0:	2340      	movs	r3, #64	; 0x40
 80103f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103f4:	2300      	movs	r3, #0
 80103f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103fe:	f107 0308 	add.w	r3, r7, #8
 8010402:	4619      	mov	r1, r3
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7ff fda4 	bl	800ff52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 801040a:	f241 3288 	movw	r2, #5000	; 0x1388
 801040e:	210d      	movs	r1, #13
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f000 f807 	bl	8010424 <SDMMC_GetCmdResp1>
 8010416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010418:	69fb      	ldr	r3, [r7, #28]
}
 801041a:	4618      	mov	r0, r3
 801041c:	3720      	adds	r7, #32
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
	...

08010424 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b088      	sub	sp, #32
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	460b      	mov	r3, r1
 801042e:	607a      	str	r2, [r7, #4]
 8010430:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010432:	4b70      	ldr	r3, [pc, #448]	; (80105f4 <SDMMC_GetCmdResp1+0x1d0>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4a70      	ldr	r2, [pc, #448]	; (80105f8 <SDMMC_GetCmdResp1+0x1d4>)
 8010438:	fba2 2303 	umull	r2, r3, r2, r3
 801043c:	0a5a      	lsrs	r2, r3, #9
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	fb02 f303 	mul.w	r3, r2, r3
 8010444:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	1e5a      	subs	r2, r3, #1
 801044a:	61fa      	str	r2, [r7, #28]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d102      	bne.n	8010456 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010450:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010454:	e0c9      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801045a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010462:	2b00      	cmp	r3, #0
 8010464:	d0ef      	beq.n	8010446 <SDMMC_GetCmdResp1+0x22>
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801046c:	2b00      	cmp	r3, #0
 801046e:	d1ea      	bne.n	8010446 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010474:	f003 0304 	and.w	r3, r3, #4
 8010478:	2b00      	cmp	r3, #0
 801047a:	d004      	beq.n	8010486 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2204      	movs	r2, #4
 8010480:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010482:	2304      	movs	r3, #4
 8010484:	e0b1      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801048a:	f003 0301 	and.w	r3, r3, #1
 801048e:	2b00      	cmp	r3, #0
 8010490:	d004      	beq.n	801049c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	2201      	movs	r2, #1
 8010496:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010498:	2301      	movs	r3, #1
 801049a:	e0a6      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	22c5      	movs	r2, #197	; 0xc5
 80104a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	f7ff fd7f 	bl	800ffa6 <SDIO_GetCommandResponse>
 80104a8:	4603      	mov	r3, r0
 80104aa:	461a      	mov	r2, r3
 80104ac:	7afb      	ldrb	r3, [r7, #11]
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d001      	beq.n	80104b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80104b2:	2301      	movs	r3, #1
 80104b4:	e099      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80104b6:	2100      	movs	r1, #0
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f7ff fd81 	bl	800ffc0 <SDIO_GetResponse>
 80104be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80104c0:	697a      	ldr	r2, [r7, #20]
 80104c2:	4b4e      	ldr	r3, [pc, #312]	; (80105fc <SDMMC_GetCmdResp1+0x1d8>)
 80104c4:	4013      	ands	r3, r2
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d101      	bne.n	80104ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80104ca:	2300      	movs	r3, #0
 80104cc:	e08d      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	da02      	bge.n	80104da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80104d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80104d8:	e087      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d001      	beq.n	80104e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80104e4:	2340      	movs	r3, #64	; 0x40
 80104e6:	e080      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80104f2:	2380      	movs	r3, #128	; 0x80
 80104f4:	e079      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d002      	beq.n	8010506 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010504:	e071      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801050c:	2b00      	cmp	r3, #0
 801050e:	d002      	beq.n	8010516 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010514:	e069      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801051c:	2b00      	cmp	r3, #0
 801051e:	d002      	beq.n	8010526 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010524:	e061      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801052c:	2b00      	cmp	r3, #0
 801052e:	d002      	beq.n	8010536 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010534:	e059      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801053c:	2b00      	cmp	r3, #0
 801053e:	d002      	beq.n	8010546 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010544:	e051      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801054c:	2b00      	cmp	r3, #0
 801054e:	d002      	beq.n	8010556 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010554:	e049      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801055c:	2b00      	cmp	r3, #0
 801055e:	d002      	beq.n	8010566 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010560:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010564:	e041      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801056c:	2b00      	cmp	r3, #0
 801056e:	d002      	beq.n	8010576 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010574:	e039      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010584:	e031      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801058c:	2b00      	cmp	r3, #0
 801058e:	d002      	beq.n	8010596 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010590:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010594:	e029      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801059c:	2b00      	cmp	r3, #0
 801059e:	d002      	beq.n	80105a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80105a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80105a4:	e021      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d002      	beq.n	80105b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80105b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80105b4:	e019      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d002      	beq.n	80105c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80105c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80105c4:	e011      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d002      	beq.n	80105d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80105d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80105d4:	e009      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	f003 0308 	and.w	r3, r3, #8
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d002      	beq.n	80105e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80105e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80105e4:	e001      	b.n	80105ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80105e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3720      	adds	r7, #32
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	200001e0 	.word	0x200001e0
 80105f8:	10624dd3 	.word	0x10624dd3
 80105fc:	fdffe008 	.word	0xfdffe008

08010600 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010600:	b480      	push	{r7}
 8010602:	b085      	sub	sp, #20
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010608:	4b1f      	ldr	r3, [pc, #124]	; (8010688 <SDMMC_GetCmdResp2+0x88>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4a1f      	ldr	r2, [pc, #124]	; (801068c <SDMMC_GetCmdResp2+0x8c>)
 801060e:	fba2 2303 	umull	r2, r3, r2, r3
 8010612:	0a5b      	lsrs	r3, r3, #9
 8010614:	f241 3288 	movw	r2, #5000	; 0x1388
 8010618:	fb02 f303 	mul.w	r3, r2, r3
 801061c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	1e5a      	subs	r2, r3, #1
 8010622:	60fa      	str	r2, [r7, #12]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d102      	bne.n	801062e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801062c:	e026      	b.n	801067c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010632:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801063a:	2b00      	cmp	r3, #0
 801063c:	d0ef      	beq.n	801061e <SDMMC_GetCmdResp2+0x1e>
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1ea      	bne.n	801061e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801064c:	f003 0304 	and.w	r3, r3, #4
 8010650:	2b00      	cmp	r3, #0
 8010652:	d004      	beq.n	801065e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2204      	movs	r2, #4
 8010658:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801065a:	2304      	movs	r3, #4
 801065c:	e00e      	b.n	801067c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010662:	f003 0301 	and.w	r3, r3, #1
 8010666:	2b00      	cmp	r3, #0
 8010668:	d004      	beq.n	8010674 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2201      	movs	r2, #1
 801066e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010670:	2301      	movs	r3, #1
 8010672:	e003      	b.n	801067c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	22c5      	movs	r2, #197	; 0xc5
 8010678:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801067a:	2300      	movs	r3, #0
}
 801067c:	4618      	mov	r0, r3
 801067e:	3714      	adds	r7, #20
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr
 8010688:	200001e0 	.word	0x200001e0
 801068c:	10624dd3 	.word	0x10624dd3

08010690 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010690:	b480      	push	{r7}
 8010692:	b085      	sub	sp, #20
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010698:	4b1a      	ldr	r3, [pc, #104]	; (8010704 <SDMMC_GetCmdResp3+0x74>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a1a      	ldr	r2, [pc, #104]	; (8010708 <SDMMC_GetCmdResp3+0x78>)
 801069e:	fba2 2303 	umull	r2, r3, r2, r3
 80106a2:	0a5b      	lsrs	r3, r3, #9
 80106a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80106a8:	fb02 f303 	mul.w	r3, r2, r3
 80106ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	1e5a      	subs	r2, r3, #1
 80106b2:	60fa      	str	r2, [r7, #12]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d102      	bne.n	80106be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80106bc:	e01b      	b.n	80106f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d0ef      	beq.n	80106ae <SDMMC_GetCmdResp3+0x1e>
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1ea      	bne.n	80106ae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106dc:	f003 0304 	and.w	r3, r3, #4
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d004      	beq.n	80106ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2204      	movs	r2, #4
 80106e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80106ea:	2304      	movs	r3, #4
 80106ec:	e003      	b.n	80106f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	22c5      	movs	r2, #197	; 0xc5
 80106f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80106f4:	2300      	movs	r3, #0
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3714      	adds	r7, #20
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	200001e0 	.word	0x200001e0
 8010708:	10624dd3 	.word	0x10624dd3

0801070c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b088      	sub	sp, #32
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	460b      	mov	r3, r1
 8010716:	607a      	str	r2, [r7, #4]
 8010718:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801071a:	4b35      	ldr	r3, [pc, #212]	; (80107f0 <SDMMC_GetCmdResp6+0xe4>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	4a35      	ldr	r2, [pc, #212]	; (80107f4 <SDMMC_GetCmdResp6+0xe8>)
 8010720:	fba2 2303 	umull	r2, r3, r2, r3
 8010724:	0a5b      	lsrs	r3, r3, #9
 8010726:	f241 3288 	movw	r2, #5000	; 0x1388
 801072a:	fb02 f303 	mul.w	r3, r2, r3
 801072e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	1e5a      	subs	r2, r3, #1
 8010734:	61fa      	str	r2, [r7, #28]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d102      	bne.n	8010740 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801073a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801073e:	e052      	b.n	80107e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010744:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010746:	69bb      	ldr	r3, [r7, #24]
 8010748:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801074c:	2b00      	cmp	r3, #0
 801074e:	d0ef      	beq.n	8010730 <SDMMC_GetCmdResp6+0x24>
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010756:	2b00      	cmp	r3, #0
 8010758:	d1ea      	bne.n	8010730 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801075e:	f003 0304 	and.w	r3, r3, #4
 8010762:	2b00      	cmp	r3, #0
 8010764:	d004      	beq.n	8010770 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2204      	movs	r2, #4
 801076a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801076c:	2304      	movs	r3, #4
 801076e:	e03a      	b.n	80107e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010774:	f003 0301 	and.w	r3, r3, #1
 8010778:	2b00      	cmp	r3, #0
 801077a:	d004      	beq.n	8010786 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2201      	movs	r2, #1
 8010780:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010782:	2301      	movs	r3, #1
 8010784:	e02f      	b.n	80107e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f7ff fc0d 	bl	800ffa6 <SDIO_GetCommandResponse>
 801078c:	4603      	mov	r3, r0
 801078e:	461a      	mov	r2, r3
 8010790:	7afb      	ldrb	r3, [r7, #11]
 8010792:	4293      	cmp	r3, r2
 8010794:	d001      	beq.n	801079a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010796:	2301      	movs	r3, #1
 8010798:	e025      	b.n	80107e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	22c5      	movs	r2, #197	; 0xc5
 801079e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80107a0:	2100      	movs	r1, #0
 80107a2:	68f8      	ldr	r0, [r7, #12]
 80107a4:	f7ff fc0c 	bl	800ffc0 <SDIO_GetResponse>
 80107a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d106      	bne.n	80107c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	0c1b      	lsrs	r3, r3, #16
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80107be:	2300      	movs	r3, #0
 80107c0:	e011      	b.n	80107e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d002      	beq.n	80107d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80107cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80107d0:	e009      	b.n	80107e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d002      	beq.n	80107e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80107dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107e0:	e001      	b.n	80107e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80107e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3720      	adds	r7, #32
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
 80107ee:	bf00      	nop
 80107f0:	200001e0 	.word	0x200001e0
 80107f4:	10624dd3 	.word	0x10624dd3

080107f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010800:	4b22      	ldr	r3, [pc, #136]	; (801088c <SDMMC_GetCmdResp7+0x94>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	4a22      	ldr	r2, [pc, #136]	; (8010890 <SDMMC_GetCmdResp7+0x98>)
 8010806:	fba2 2303 	umull	r2, r3, r2, r3
 801080a:	0a5b      	lsrs	r3, r3, #9
 801080c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010810:	fb02 f303 	mul.w	r3, r2, r3
 8010814:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	1e5a      	subs	r2, r3, #1
 801081a:	60fa      	str	r2, [r7, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d102      	bne.n	8010826 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010824:	e02c      	b.n	8010880 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801082a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010832:	2b00      	cmp	r3, #0
 8010834:	d0ef      	beq.n	8010816 <SDMMC_GetCmdResp7+0x1e>
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801083c:	2b00      	cmp	r3, #0
 801083e:	d1ea      	bne.n	8010816 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010844:	f003 0304 	and.w	r3, r3, #4
 8010848:	2b00      	cmp	r3, #0
 801084a:	d004      	beq.n	8010856 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2204      	movs	r2, #4
 8010850:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010852:	2304      	movs	r3, #4
 8010854:	e014      	b.n	8010880 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	2b00      	cmp	r3, #0
 8010860:	d004      	beq.n	801086c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2201      	movs	r2, #1
 8010866:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010868:	2301      	movs	r3, #1
 801086a:	e009      	b.n	8010880 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010874:	2b00      	cmp	r3, #0
 8010876:	d002      	beq.n	801087e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2240      	movs	r2, #64	; 0x40
 801087c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801087e:	2300      	movs	r3, #0
  
}
 8010880:	4618      	mov	r0, r3
 8010882:	3714      	adds	r7, #20
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr
 801088c:	200001e0 	.word	0x200001e0
 8010890:	10624dd3 	.word	0x10624dd3

08010894 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010894:	b480      	push	{r7}
 8010896:	b085      	sub	sp, #20
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801089c:	4b11      	ldr	r3, [pc, #68]	; (80108e4 <SDMMC_GetCmdError+0x50>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4a11      	ldr	r2, [pc, #68]	; (80108e8 <SDMMC_GetCmdError+0x54>)
 80108a2:	fba2 2303 	umull	r2, r3, r2, r3
 80108a6:	0a5b      	lsrs	r3, r3, #9
 80108a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80108ac:	fb02 f303 	mul.w	r3, r2, r3
 80108b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	1e5a      	subs	r2, r3, #1
 80108b6:	60fa      	str	r2, [r7, #12]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d102      	bne.n	80108c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80108c0:	e009      	b.n	80108d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d0f1      	beq.n	80108b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	22c5      	movs	r2, #197	; 0xc5
 80108d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3714      	adds	r7, #20
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	200001e0 	.word	0x200001e0
 80108e8:	10624dd3 	.word	0x10624dd3

080108ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80108f0:	4904      	ldr	r1, [pc, #16]	; (8010904 <MX_FATFS_Init+0x18>)
 80108f2:	4805      	ldr	r0, [pc, #20]	; (8010908 <MX_FATFS_Init+0x1c>)
 80108f4:	f003 f8f4 	bl	8013ae0 <FATFS_LinkDriver>
 80108f8:	4603      	mov	r3, r0
 80108fa:	461a      	mov	r2, r3
 80108fc:	4b03      	ldr	r3, [pc, #12]	; (801090c <MX_FATFS_Init+0x20>)
 80108fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010900:	bf00      	nop
 8010902:	bd80      	pop	{r7, pc}
 8010904:	20005df8 	.word	0x20005df8
 8010908:	0805b834 	.word	0x0805b834
 801090c:	20005df4 	.word	0x20005df4

08010910 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010910:	b480      	push	{r7}
 8010912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010914:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010916:	4618      	mov	r0, r3
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010926:	2300      	movs	r3, #0
 8010928:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801092a:	f000 f86b 	bl	8010a04 <BSP_SD_IsDetected>
 801092e:	4603      	mov	r3, r0
 8010930:	2b01      	cmp	r3, #1
 8010932:	d001      	beq.n	8010938 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010934:	2301      	movs	r3, #1
 8010936:	e005      	b.n	8010944 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010938:	4804      	ldr	r0, [pc, #16]	; (801094c <BSP_SD_Init+0x2c>)
 801093a:	f7fc fa9d 	bl	800ce78 <HAL_SD_Init>
 801093e:	4603      	mov	r3, r0
 8010940:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8010942:	79fb      	ldrb	r3, [r7, #7]
}
 8010944:	4618      	mov	r0, r3
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	20005ac0 	.word	0x20005ac0

08010950 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b088      	sub	sp, #32
 8010954:	af02      	add	r7, sp, #8
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
 801095c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801095e:	2300      	movs	r3, #0
 8010960:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	9300      	str	r3, [sp, #0]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	68ba      	ldr	r2, [r7, #8]
 801096a:	68f9      	ldr	r1, [r7, #12]
 801096c:	4806      	ldr	r0, [pc, #24]	; (8010988 <BSP_SD_ReadBlocks+0x38>)
 801096e:	f7fc fb33 	bl	800cfd8 <HAL_SD_ReadBlocks>
 8010972:	4603      	mov	r3, r0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d001      	beq.n	801097c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010978:	2301      	movs	r3, #1
 801097a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801097c:	7dfb      	ldrb	r3, [r7, #23]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3718      	adds	r7, #24
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	20005ac0 	.word	0x20005ac0

0801098c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b088      	sub	sp, #32
 8010990:	af02      	add	r7, sp, #8
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	60b9      	str	r1, [r7, #8]
 8010996:	607a      	str	r2, [r7, #4]
 8010998:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801099a:	2300      	movs	r3, #0
 801099c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	9300      	str	r3, [sp, #0]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	68ba      	ldr	r2, [r7, #8]
 80109a6:	68f9      	ldr	r1, [r7, #12]
 80109a8:	4806      	ldr	r0, [pc, #24]	; (80109c4 <BSP_SD_WriteBlocks+0x38>)
 80109aa:	f7fc fcf3 	bl	800d394 <HAL_SD_WriteBlocks>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d001      	beq.n	80109b8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80109b4:	2301      	movs	r3, #1
 80109b6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80109b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3718      	adds	r7, #24
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	20005ac0 	.word	0x20005ac0

080109c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80109cc:	4805      	ldr	r0, [pc, #20]	; (80109e4 <BSP_SD_GetCardState+0x1c>)
 80109ce:	f7fd f837 	bl	800da40 <HAL_SD_GetCardState>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b04      	cmp	r3, #4
 80109d6:	bf14      	ite	ne
 80109d8:	2301      	movne	r3, #1
 80109da:	2300      	moveq	r3, #0
 80109dc:	b2db      	uxtb	r3, r3
}
 80109de:	4618      	mov	r0, r3
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	20005ac0 	.word	0x20005ac0

080109e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80109f0:	6879      	ldr	r1, [r7, #4]
 80109f2:	4803      	ldr	r0, [pc, #12]	; (8010a00 <BSP_SD_GetCardInfo+0x18>)
 80109f4:	f7fc fff8 	bl	800d9e8 <HAL_SD_GetCardInfo>
}
 80109f8:	bf00      	nop
 80109fa:	3708      	adds	r7, #8
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}
 8010a00:	20005ac0 	.word	0x20005ac0

08010a04 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010a04:	b480      	push	{r7}
 8010a06:	b083      	sub	sp, #12
 8010a08:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8010a0e:	79fb      	ldrb	r3, [r7, #7]
 8010a10:	b2db      	uxtb	r3, r3
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	370c      	adds	r7, #12
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr
	...

08010a20 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	4603      	mov	r3, r0
 8010a28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010a2a:	4b0b      	ldr	r3, [pc, #44]	; (8010a58 <SD_CheckStatus+0x38>)
 8010a2c:	2201      	movs	r2, #1
 8010a2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010a30:	f7ff ffca 	bl	80109c8 <BSP_SD_GetCardState>
 8010a34:	4603      	mov	r3, r0
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d107      	bne.n	8010a4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010a3a:	4b07      	ldr	r3, [pc, #28]	; (8010a58 <SD_CheckStatus+0x38>)
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	f023 0301 	bic.w	r3, r3, #1
 8010a44:	b2da      	uxtb	r2, r3
 8010a46:	4b04      	ldr	r3, [pc, #16]	; (8010a58 <SD_CheckStatus+0x38>)
 8010a48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010a4a:	4b03      	ldr	r3, [pc, #12]	; (8010a58 <SD_CheckStatus+0x38>)
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	b2db      	uxtb	r3, r3
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	20000321 	.word	0x20000321

08010a5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	4603      	mov	r3, r0
 8010a64:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8010a66:	4b0b      	ldr	r3, [pc, #44]	; (8010a94 <SD_initialize+0x38>)
 8010a68:	2201      	movs	r2, #1
 8010a6a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010a6c:	f7ff ff58 	bl	8010920 <BSP_SD_Init>
 8010a70:	4603      	mov	r3, r0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d107      	bne.n	8010a86 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010a76:	79fb      	ldrb	r3, [r7, #7]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7ff ffd1 	bl	8010a20 <SD_CheckStatus>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	461a      	mov	r2, r3
 8010a82:	4b04      	ldr	r3, [pc, #16]	; (8010a94 <SD_initialize+0x38>)
 8010a84:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010a86:	4b03      	ldr	r3, [pc, #12]	; (8010a94 <SD_initialize+0x38>)
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	b2db      	uxtb	r3, r3
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	20000321 	.word	0x20000321

08010a98 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010aa2:	79fb      	ldrb	r3, [r7, #7]
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7ff ffbb 	bl	8010a20 <SD_CheckStatus>
 8010aaa:	4603      	mov	r3, r0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3708      	adds	r7, #8
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b086      	sub	sp, #24
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60b9      	str	r1, [r7, #8]
 8010abc:	607a      	str	r2, [r7, #4]
 8010abe:	603b      	str	r3, [r7, #0]
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8010acc:	683a      	ldr	r2, [r7, #0]
 8010ace:	6879      	ldr	r1, [r7, #4]
 8010ad0:	68b8      	ldr	r0, [r7, #8]
 8010ad2:	f7ff ff3d 	bl	8010950 <BSP_SD_ReadBlocks>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d107      	bne.n	8010aec <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010adc:	bf00      	nop
 8010ade:	f7ff ff73 	bl	80109c8 <BSP_SD_GetCardState>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d1fa      	bne.n	8010ade <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3718      	adds	r7, #24
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b086      	sub	sp, #24
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
 8010b00:	603b      	str	r3, [r7, #0]
 8010b02:	4603      	mov	r3, r0
 8010b04:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010b06:	2301      	movs	r3, #1
 8010b08:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b0e:	683a      	ldr	r2, [r7, #0]
 8010b10:	6879      	ldr	r1, [r7, #4]
 8010b12:	68b8      	ldr	r0, [r7, #8]
 8010b14:	f7ff ff3a 	bl	801098c <BSP_SD_WriteBlocks>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d107      	bne.n	8010b2e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010b1e:	bf00      	nop
 8010b20:	f7ff ff52 	bl	80109c8 <BSP_SD_GetCardState>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d1fa      	bne.n	8010b20 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3718      	adds	r7, #24
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}

08010b38 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b08c      	sub	sp, #48	; 0x30
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	4603      	mov	r3, r0
 8010b40:	603a      	str	r2, [r7, #0]
 8010b42:	71fb      	strb	r3, [r7, #7]
 8010b44:	460b      	mov	r3, r1
 8010b46:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010b48:	2301      	movs	r3, #1
 8010b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010b4e:	4b25      	ldr	r3, [pc, #148]	; (8010be4 <SD_ioctl+0xac>)
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	b2db      	uxtb	r3, r3
 8010b54:	f003 0301 	and.w	r3, r3, #1
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d001      	beq.n	8010b60 <SD_ioctl+0x28>
 8010b5c:	2303      	movs	r3, #3
 8010b5e:	e03c      	b.n	8010bda <SD_ioctl+0xa2>

  switch (cmd)
 8010b60:	79bb      	ldrb	r3, [r7, #6]
 8010b62:	2b03      	cmp	r3, #3
 8010b64:	d834      	bhi.n	8010bd0 <SD_ioctl+0x98>
 8010b66:	a201      	add	r2, pc, #4	; (adr r2, 8010b6c <SD_ioctl+0x34>)
 8010b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b6c:	08010b7d 	.word	0x08010b7d
 8010b70:	08010b85 	.word	0x08010b85
 8010b74:	08010b9d 	.word	0x08010b9d
 8010b78:	08010bb7 	.word	0x08010bb7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010b82:	e028      	b.n	8010bd6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010b84:	f107 030c 	add.w	r3, r7, #12
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7ff ff2d 	bl	80109e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010b94:	2300      	movs	r3, #0
 8010b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010b9a:	e01c      	b.n	8010bd6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010b9c:	f107 030c 	add.w	r3, r7, #12
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7ff ff21 	bl	80109e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba8:	b29a      	uxth	r2, r3
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010bb4:	e00f      	b.n	8010bd6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010bb6:	f107 030c 	add.w	r3, r7, #12
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7ff ff14 	bl	80109e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc2:	0a5a      	lsrs	r2, r3, #9
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010bce:	e002      	b.n	8010bd6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010bd0:	2304      	movs	r3, #4
 8010bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3730      	adds	r7, #48	; 0x30
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	20000321 	.word	0x20000321

08010be8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	4603      	mov	r3, r0
 8010bf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010bf2:	79fb      	ldrb	r3, [r7, #7]
 8010bf4:	4a08      	ldr	r2, [pc, #32]	; (8010c18 <disk_status+0x30>)
 8010bf6:	009b      	lsls	r3, r3, #2
 8010bf8:	4413      	add	r3, r2
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	79fa      	ldrb	r2, [r7, #7]
 8010c00:	4905      	ldr	r1, [pc, #20]	; (8010c18 <disk_status+0x30>)
 8010c02:	440a      	add	r2, r1
 8010c04:	7a12      	ldrb	r2, [r2, #8]
 8010c06:	4610      	mov	r0, r2
 8010c08:	4798      	blx	r3
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	20005e24 	.word	0x20005e24

08010c1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	4603      	mov	r3, r0
 8010c24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010c26:	2300      	movs	r3, #0
 8010c28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010c2a:	79fb      	ldrb	r3, [r7, #7]
 8010c2c:	4a0d      	ldr	r2, [pc, #52]	; (8010c64 <disk_initialize+0x48>)
 8010c2e:	5cd3      	ldrb	r3, [r2, r3]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d111      	bne.n	8010c58 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010c34:	79fb      	ldrb	r3, [r7, #7]
 8010c36:	4a0b      	ldr	r2, [pc, #44]	; (8010c64 <disk_initialize+0x48>)
 8010c38:	2101      	movs	r1, #1
 8010c3a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010c3c:	79fb      	ldrb	r3, [r7, #7]
 8010c3e:	4a09      	ldr	r2, [pc, #36]	; (8010c64 <disk_initialize+0x48>)
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	4413      	add	r3, r2
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	79fa      	ldrb	r2, [r7, #7]
 8010c4a:	4906      	ldr	r1, [pc, #24]	; (8010c64 <disk_initialize+0x48>)
 8010c4c:	440a      	add	r2, r1
 8010c4e:	7a12      	ldrb	r2, [r2, #8]
 8010c50:	4610      	mov	r0, r2
 8010c52:	4798      	blx	r3
 8010c54:	4603      	mov	r3, r0
 8010c56:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	20005e24 	.word	0x20005e24

08010c68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010c68:	b590      	push	{r4, r7, lr}
 8010c6a:	b087      	sub	sp, #28
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60b9      	str	r1, [r7, #8]
 8010c70:	607a      	str	r2, [r7, #4]
 8010c72:	603b      	str	r3, [r7, #0]
 8010c74:	4603      	mov	r3, r0
 8010c76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010c78:	7bfb      	ldrb	r3, [r7, #15]
 8010c7a:	4a0a      	ldr	r2, [pc, #40]	; (8010ca4 <disk_read+0x3c>)
 8010c7c:	009b      	lsls	r3, r3, #2
 8010c7e:	4413      	add	r3, r2
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	689c      	ldr	r4, [r3, #8]
 8010c84:	7bfb      	ldrb	r3, [r7, #15]
 8010c86:	4a07      	ldr	r2, [pc, #28]	; (8010ca4 <disk_read+0x3c>)
 8010c88:	4413      	add	r3, r2
 8010c8a:	7a18      	ldrb	r0, [r3, #8]
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	68b9      	ldr	r1, [r7, #8]
 8010c92:	47a0      	blx	r4
 8010c94:	4603      	mov	r3, r0
 8010c96:	75fb      	strb	r3, [r7, #23]
  return res;
 8010c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	371c      	adds	r7, #28
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd90      	pop	{r4, r7, pc}
 8010ca2:	bf00      	nop
 8010ca4:	20005e24 	.word	0x20005e24

08010ca8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010ca8:	b590      	push	{r4, r7, lr}
 8010caa:	b087      	sub	sp, #28
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60b9      	str	r1, [r7, #8]
 8010cb0:	607a      	str	r2, [r7, #4]
 8010cb2:	603b      	str	r3, [r7, #0]
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010cb8:	7bfb      	ldrb	r3, [r7, #15]
 8010cba:	4a0a      	ldr	r2, [pc, #40]	; (8010ce4 <disk_write+0x3c>)
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	4413      	add	r3, r2
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	68dc      	ldr	r4, [r3, #12]
 8010cc4:	7bfb      	ldrb	r3, [r7, #15]
 8010cc6:	4a07      	ldr	r2, [pc, #28]	; (8010ce4 <disk_write+0x3c>)
 8010cc8:	4413      	add	r3, r2
 8010cca:	7a18      	ldrb	r0, [r3, #8]
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	68b9      	ldr	r1, [r7, #8]
 8010cd2:	47a0      	blx	r4
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8010cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	371c      	adds	r7, #28
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd90      	pop	{r4, r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	20005e24 	.word	0x20005e24

08010ce8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	4603      	mov	r3, r0
 8010cf0:	603a      	str	r2, [r7, #0]
 8010cf2:	71fb      	strb	r3, [r7, #7]
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010cf8:	79fb      	ldrb	r3, [r7, #7]
 8010cfa:	4a09      	ldr	r2, [pc, #36]	; (8010d20 <disk_ioctl+0x38>)
 8010cfc:	009b      	lsls	r3, r3, #2
 8010cfe:	4413      	add	r3, r2
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	79fa      	ldrb	r2, [r7, #7]
 8010d06:	4906      	ldr	r1, [pc, #24]	; (8010d20 <disk_ioctl+0x38>)
 8010d08:	440a      	add	r2, r1
 8010d0a:	7a10      	ldrb	r0, [r2, #8]
 8010d0c:	79b9      	ldrb	r1, [r7, #6]
 8010d0e:	683a      	ldr	r2, [r7, #0]
 8010d10:	4798      	blx	r3
 8010d12:	4603      	mov	r3, r0
 8010d14:	73fb      	strb	r3, [r7, #15]
  return res;
 8010d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3710      	adds	r7, #16
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	20005e24 	.word	0x20005e24

08010d24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010d24:	b480      	push	{r7}
 8010d26:	b085      	sub	sp, #20
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	3301      	adds	r3, #1
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010d34:	89fb      	ldrh	r3, [r7, #14]
 8010d36:	021b      	lsls	r3, r3, #8
 8010d38:	b21a      	sxth	r2, r3
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	b21b      	sxth	r3, r3
 8010d40:	4313      	orrs	r3, r2
 8010d42:	b21b      	sxth	r3, r3
 8010d44:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010d46:	89fb      	ldrh	r3, [r7, #14]
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3714      	adds	r7, #20
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr

08010d54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010d54:	b480      	push	{r7}
 8010d56:	b085      	sub	sp, #20
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	3303      	adds	r3, #3
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	021b      	lsls	r3, r3, #8
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	3202      	adds	r2, #2
 8010d6c:	7812      	ldrb	r2, [r2, #0]
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	021b      	lsls	r3, r3, #8
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	3201      	adds	r2, #1
 8010d7a:	7812      	ldrb	r2, [r2, #0]
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	021b      	lsls	r3, r3, #8
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	7812      	ldrb	r2, [r2, #0]
 8010d88:	4313      	orrs	r3, r2
 8010d8a:	60fb      	str	r3, [r7, #12]
	return rv;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3714      	adds	r7, #20
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr

08010d9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010d9a:	b480      	push	{r7}
 8010d9c:	b083      	sub	sp, #12
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	6078      	str	r0, [r7, #4]
 8010da2:	460b      	mov	r3, r1
 8010da4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	1c5a      	adds	r2, r3, #1
 8010daa:	607a      	str	r2, [r7, #4]
 8010dac:	887a      	ldrh	r2, [r7, #2]
 8010dae:	b2d2      	uxtb	r2, r2
 8010db0:	701a      	strb	r2, [r3, #0]
 8010db2:	887b      	ldrh	r3, [r7, #2]
 8010db4:	0a1b      	lsrs	r3, r3, #8
 8010db6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	1c5a      	adds	r2, r3, #1
 8010dbc:	607a      	str	r2, [r7, #4]
 8010dbe:	887a      	ldrh	r2, [r7, #2]
 8010dc0:	b2d2      	uxtb	r2, r2
 8010dc2:	701a      	strb	r2, [r3, #0]
}
 8010dc4:	bf00      	nop
 8010dc6:	370c      	adds	r7, #12
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b083      	sub	sp, #12
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	1c5a      	adds	r2, r3, #1
 8010dde:	607a      	str	r2, [r7, #4]
 8010de0:	683a      	ldr	r2, [r7, #0]
 8010de2:	b2d2      	uxtb	r2, r2
 8010de4:	701a      	strb	r2, [r3, #0]
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	0a1b      	lsrs	r3, r3, #8
 8010dea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	1c5a      	adds	r2, r3, #1
 8010df0:	607a      	str	r2, [r7, #4]
 8010df2:	683a      	ldr	r2, [r7, #0]
 8010df4:	b2d2      	uxtb	r2, r2
 8010df6:	701a      	strb	r2, [r3, #0]
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	0a1b      	lsrs	r3, r3, #8
 8010dfc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	1c5a      	adds	r2, r3, #1
 8010e02:	607a      	str	r2, [r7, #4]
 8010e04:	683a      	ldr	r2, [r7, #0]
 8010e06:	b2d2      	uxtb	r2, r2
 8010e08:	701a      	strb	r2, [r3, #0]
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	0a1b      	lsrs	r3, r3, #8
 8010e0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	1c5a      	adds	r2, r3, #1
 8010e14:	607a      	str	r2, [r7, #4]
 8010e16:	683a      	ldr	r2, [r7, #0]
 8010e18:	b2d2      	uxtb	r2, r2
 8010e1a:	701a      	strb	r2, [r3, #0]
}
 8010e1c:	bf00      	nop
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010e28:	b480      	push	{r7}
 8010e2a:	b087      	sub	sp, #28
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00d      	beq.n	8010e5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010e42:	693a      	ldr	r2, [r7, #16]
 8010e44:	1c53      	adds	r3, r2, #1
 8010e46:	613b      	str	r3, [r7, #16]
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	1c59      	adds	r1, r3, #1
 8010e4c:	6179      	str	r1, [r7, #20]
 8010e4e:	7812      	ldrb	r2, [r2, #0]
 8010e50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	3b01      	subs	r3, #1
 8010e56:	607b      	str	r3, [r7, #4]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d1f1      	bne.n	8010e42 <mem_cpy+0x1a>
	}
}
 8010e5e:	bf00      	nop
 8010e60:	371c      	adds	r7, #28
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr

08010e6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010e6a:	b480      	push	{r7}
 8010e6c:	b087      	sub	sp, #28
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	60f8      	str	r0, [r7, #12]
 8010e72:	60b9      	str	r1, [r7, #8]
 8010e74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	1c5a      	adds	r2, r3, #1
 8010e7e:	617a      	str	r2, [r7, #20]
 8010e80:	68ba      	ldr	r2, [r7, #8]
 8010e82:	b2d2      	uxtb	r2, r2
 8010e84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	3b01      	subs	r3, #1
 8010e8a:	607b      	str	r3, [r7, #4]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1f3      	bne.n	8010e7a <mem_set+0x10>
}
 8010e92:	bf00      	nop
 8010e94:	bf00      	nop
 8010e96:	371c      	adds	r7, #28
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010ea0:	b480      	push	{r7}
 8010ea2:	b089      	sub	sp, #36	; 0x24
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	61fb      	str	r3, [r7, #28]
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	61fa      	str	r2, [r7, #28]
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	69bb      	ldr	r3, [r7, #24]
 8010ec4:	1c5a      	adds	r2, r3, #1
 8010ec6:	61ba      	str	r2, [r7, #24]
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	1acb      	subs	r3, r1, r3
 8010ecc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	3b01      	subs	r3, #1
 8010ed2:	607b      	str	r3, [r7, #4]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d002      	beq.n	8010ee0 <mem_cmp+0x40>
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d0eb      	beq.n	8010eb8 <mem_cmp+0x18>

	return r;
 8010ee0:	697b      	ldr	r3, [r7, #20]
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3724      	adds	r7, #36	; 0x24
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr

08010eee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010eee:	b480      	push	{r7}
 8010ef0:	b083      	sub	sp, #12
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
 8010ef6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010ef8:	e002      	b.n	8010f00 <chk_chr+0x12>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	3301      	adds	r3, #1
 8010efe:	607b      	str	r3, [r7, #4]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d005      	beq.n	8010f14 <chk_chr+0x26>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	4293      	cmp	r3, r2
 8010f12:	d1f2      	bne.n	8010efa <chk_chr+0xc>
	return *str;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	781b      	ldrb	r3, [r3, #0]
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b085      	sub	sp, #20
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010f2e:	2300      	movs	r3, #0
 8010f30:	60bb      	str	r3, [r7, #8]
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	60fb      	str	r3, [r7, #12]
 8010f36:	e029      	b.n	8010f8c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010f38:	4a27      	ldr	r2, [pc, #156]	; (8010fd8 <chk_lock+0xb4>)
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	011b      	lsls	r3, r3, #4
 8010f3e:	4413      	add	r3, r2
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d01d      	beq.n	8010f82 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010f46:	4a24      	ldr	r2, [pc, #144]	; (8010fd8 <chk_lock+0xb4>)
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	011b      	lsls	r3, r3, #4
 8010f4c:	4413      	add	r3, r2
 8010f4e:	681a      	ldr	r2, [r3, #0]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d116      	bne.n	8010f86 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010f58:	4a1f      	ldr	r2, [pc, #124]	; (8010fd8 <chk_lock+0xb4>)
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	011b      	lsls	r3, r3, #4
 8010f5e:	4413      	add	r3, r2
 8010f60:	3304      	adds	r3, #4
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d10c      	bne.n	8010f86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010f6c:	4a1a      	ldr	r2, [pc, #104]	; (8010fd8 <chk_lock+0xb4>)
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	011b      	lsls	r3, r3, #4
 8010f72:	4413      	add	r3, r2
 8010f74:	3308      	adds	r3, #8
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d102      	bne.n	8010f86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010f80:	e007      	b.n	8010f92 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010f82:	2301      	movs	r3, #1
 8010f84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	3301      	adds	r3, #1
 8010f8a:	60fb      	str	r3, [r7, #12]
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2b01      	cmp	r3, #1
 8010f90:	d9d2      	bls.n	8010f38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2b02      	cmp	r3, #2
 8010f96:	d109      	bne.n	8010fac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d102      	bne.n	8010fa4 <chk_lock+0x80>
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	2b02      	cmp	r3, #2
 8010fa2:	d101      	bne.n	8010fa8 <chk_lock+0x84>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	e010      	b.n	8010fca <chk_lock+0xa6>
 8010fa8:	2312      	movs	r3, #18
 8010faa:	e00e      	b.n	8010fca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d108      	bne.n	8010fc4 <chk_lock+0xa0>
 8010fb2:	4a09      	ldr	r2, [pc, #36]	; (8010fd8 <chk_lock+0xb4>)
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	011b      	lsls	r3, r3, #4
 8010fb8:	4413      	add	r3, r2
 8010fba:	330c      	adds	r3, #12
 8010fbc:	881b      	ldrh	r3, [r3, #0]
 8010fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fc2:	d101      	bne.n	8010fc8 <chk_lock+0xa4>
 8010fc4:	2310      	movs	r3, #16
 8010fc6:	e000      	b.n	8010fca <chk_lock+0xa6>
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3714      	adds	r7, #20
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	20005e04 	.word	0x20005e04

08010fdc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	607b      	str	r3, [r7, #4]
 8010fe6:	e002      	b.n	8010fee <enq_lock+0x12>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	3301      	adds	r3, #1
 8010fec:	607b      	str	r3, [r7, #4]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d806      	bhi.n	8011002 <enq_lock+0x26>
 8010ff4:	4a09      	ldr	r2, [pc, #36]	; (801101c <enq_lock+0x40>)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	011b      	lsls	r3, r3, #4
 8010ffa:	4413      	add	r3, r2
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d1f2      	bne.n	8010fe8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2b02      	cmp	r3, #2
 8011006:	bf14      	ite	ne
 8011008:	2301      	movne	r3, #1
 801100a:	2300      	moveq	r3, #0
 801100c:	b2db      	uxtb	r3, r3
}
 801100e:	4618      	mov	r0, r3
 8011010:	370c      	adds	r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop
 801101c:	20005e04 	.word	0x20005e04

08011020 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011020:	b480      	push	{r7}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801102a:	2300      	movs	r3, #0
 801102c:	60fb      	str	r3, [r7, #12]
 801102e:	e01f      	b.n	8011070 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011030:	4a41      	ldr	r2, [pc, #260]	; (8011138 <inc_lock+0x118>)
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	011b      	lsls	r3, r3, #4
 8011036:	4413      	add	r3, r2
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	429a      	cmp	r2, r3
 8011040:	d113      	bne.n	801106a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011042:	4a3d      	ldr	r2, [pc, #244]	; (8011138 <inc_lock+0x118>)
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	011b      	lsls	r3, r3, #4
 8011048:	4413      	add	r3, r2
 801104a:	3304      	adds	r3, #4
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011052:	429a      	cmp	r2, r3
 8011054:	d109      	bne.n	801106a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011056:	4a38      	ldr	r2, [pc, #224]	; (8011138 <inc_lock+0x118>)
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	011b      	lsls	r3, r3, #4
 801105c:	4413      	add	r3, r2
 801105e:	3308      	adds	r3, #8
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011066:	429a      	cmp	r2, r3
 8011068:	d006      	beq.n	8011078 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	3301      	adds	r3, #1
 801106e:	60fb      	str	r3, [r7, #12]
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2b01      	cmp	r3, #1
 8011074:	d9dc      	bls.n	8011030 <inc_lock+0x10>
 8011076:	e000      	b.n	801107a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011078:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2b02      	cmp	r3, #2
 801107e:	d132      	bne.n	80110e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011080:	2300      	movs	r3, #0
 8011082:	60fb      	str	r3, [r7, #12]
 8011084:	e002      	b.n	801108c <inc_lock+0x6c>
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	3301      	adds	r3, #1
 801108a:	60fb      	str	r3, [r7, #12]
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	2b01      	cmp	r3, #1
 8011090:	d806      	bhi.n	80110a0 <inc_lock+0x80>
 8011092:	4a29      	ldr	r2, [pc, #164]	; (8011138 <inc_lock+0x118>)
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	011b      	lsls	r3, r3, #4
 8011098:	4413      	add	r3, r2
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d1f2      	bne.n	8011086 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	2b02      	cmp	r3, #2
 80110a4:	d101      	bne.n	80110aa <inc_lock+0x8a>
 80110a6:	2300      	movs	r3, #0
 80110a8:	e040      	b.n	801112c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681a      	ldr	r2, [r3, #0]
 80110ae:	4922      	ldr	r1, [pc, #136]	; (8011138 <inc_lock+0x118>)
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	011b      	lsls	r3, r3, #4
 80110b4:	440b      	add	r3, r1
 80110b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	689a      	ldr	r2, [r3, #8]
 80110bc:	491e      	ldr	r1, [pc, #120]	; (8011138 <inc_lock+0x118>)
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	011b      	lsls	r3, r3, #4
 80110c2:	440b      	add	r3, r1
 80110c4:	3304      	adds	r3, #4
 80110c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	695a      	ldr	r2, [r3, #20]
 80110cc:	491a      	ldr	r1, [pc, #104]	; (8011138 <inc_lock+0x118>)
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	011b      	lsls	r3, r3, #4
 80110d2:	440b      	add	r3, r1
 80110d4:	3308      	adds	r3, #8
 80110d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80110d8:	4a17      	ldr	r2, [pc, #92]	; (8011138 <inc_lock+0x118>)
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	011b      	lsls	r3, r3, #4
 80110de:	4413      	add	r3, r2
 80110e0:	330c      	adds	r3, #12
 80110e2:	2200      	movs	r2, #0
 80110e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d009      	beq.n	8011100 <inc_lock+0xe0>
 80110ec:	4a12      	ldr	r2, [pc, #72]	; (8011138 <inc_lock+0x118>)
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	011b      	lsls	r3, r3, #4
 80110f2:	4413      	add	r3, r2
 80110f4:	330c      	adds	r3, #12
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d001      	beq.n	8011100 <inc_lock+0xe0>
 80110fc:	2300      	movs	r3, #0
 80110fe:	e015      	b.n	801112c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d108      	bne.n	8011118 <inc_lock+0xf8>
 8011106:	4a0c      	ldr	r2, [pc, #48]	; (8011138 <inc_lock+0x118>)
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	011b      	lsls	r3, r3, #4
 801110c:	4413      	add	r3, r2
 801110e:	330c      	adds	r3, #12
 8011110:	881b      	ldrh	r3, [r3, #0]
 8011112:	3301      	adds	r3, #1
 8011114:	b29a      	uxth	r2, r3
 8011116:	e001      	b.n	801111c <inc_lock+0xfc>
 8011118:	f44f 7280 	mov.w	r2, #256	; 0x100
 801111c:	4906      	ldr	r1, [pc, #24]	; (8011138 <inc_lock+0x118>)
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	011b      	lsls	r3, r3, #4
 8011122:	440b      	add	r3, r1
 8011124:	330c      	adds	r3, #12
 8011126:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	3301      	adds	r3, #1
}
 801112c:	4618      	mov	r0, r3
 801112e:	3714      	adds	r7, #20
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr
 8011138:	20005e04 	.word	0x20005e04

0801113c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	3b01      	subs	r3, #1
 8011148:	607b      	str	r3, [r7, #4]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d825      	bhi.n	801119c <dec_lock+0x60>
		n = Files[i].ctr;
 8011150:	4a17      	ldr	r2, [pc, #92]	; (80111b0 <dec_lock+0x74>)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	011b      	lsls	r3, r3, #4
 8011156:	4413      	add	r3, r2
 8011158:	330c      	adds	r3, #12
 801115a:	881b      	ldrh	r3, [r3, #0]
 801115c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801115e:	89fb      	ldrh	r3, [r7, #14]
 8011160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011164:	d101      	bne.n	801116a <dec_lock+0x2e>
 8011166:	2300      	movs	r3, #0
 8011168:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801116a:	89fb      	ldrh	r3, [r7, #14]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d002      	beq.n	8011176 <dec_lock+0x3a>
 8011170:	89fb      	ldrh	r3, [r7, #14]
 8011172:	3b01      	subs	r3, #1
 8011174:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011176:	4a0e      	ldr	r2, [pc, #56]	; (80111b0 <dec_lock+0x74>)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	011b      	lsls	r3, r3, #4
 801117c:	4413      	add	r3, r2
 801117e:	330c      	adds	r3, #12
 8011180:	89fa      	ldrh	r2, [r7, #14]
 8011182:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011184:	89fb      	ldrh	r3, [r7, #14]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d105      	bne.n	8011196 <dec_lock+0x5a>
 801118a:	4a09      	ldr	r2, [pc, #36]	; (80111b0 <dec_lock+0x74>)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	011b      	lsls	r3, r3, #4
 8011190:	4413      	add	r3, r2
 8011192:	2200      	movs	r2, #0
 8011194:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011196:	2300      	movs	r3, #0
 8011198:	737b      	strb	r3, [r7, #13]
 801119a:	e001      	b.n	80111a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801119c:	2302      	movs	r3, #2
 801119e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80111a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3714      	adds	r7, #20
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr
 80111ae:	bf00      	nop
 80111b0:	20005e04 	.word	0x20005e04

080111b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b085      	sub	sp, #20
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80111bc:	2300      	movs	r3, #0
 80111be:	60fb      	str	r3, [r7, #12]
 80111c0:	e010      	b.n	80111e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80111c2:	4a0d      	ldr	r2, [pc, #52]	; (80111f8 <clear_lock+0x44>)
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	011b      	lsls	r3, r3, #4
 80111c8:	4413      	add	r3, r2
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d105      	bne.n	80111de <clear_lock+0x2a>
 80111d2:	4a09      	ldr	r2, [pc, #36]	; (80111f8 <clear_lock+0x44>)
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	011b      	lsls	r3, r3, #4
 80111d8:	4413      	add	r3, r2
 80111da:	2200      	movs	r2, #0
 80111dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	3301      	adds	r3, #1
 80111e2:	60fb      	str	r3, [r7, #12]
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	d9eb      	bls.n	80111c2 <clear_lock+0xe>
	}
}
 80111ea:	bf00      	nop
 80111ec:	bf00      	nop
 80111ee:	3714      	adds	r7, #20
 80111f0:	46bd      	mov	sp, r7
 80111f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f6:	4770      	bx	lr
 80111f8:	20005e04 	.word	0x20005e04

080111fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011204:	2300      	movs	r3, #0
 8011206:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	78db      	ldrb	r3, [r3, #3]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d034      	beq.n	801127a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011214:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	7858      	ldrb	r0, [r3, #1]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011220:	2301      	movs	r3, #1
 8011222:	697a      	ldr	r2, [r7, #20]
 8011224:	f7ff fd40 	bl	8010ca8 <disk_write>
 8011228:	4603      	mov	r3, r0
 801122a:	2b00      	cmp	r3, #0
 801122c:	d002      	beq.n	8011234 <sync_window+0x38>
			res = FR_DISK_ERR;
 801122e:	2301      	movs	r3, #1
 8011230:	73fb      	strb	r3, [r7, #15]
 8011232:	e022      	b.n	801127a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2200      	movs	r2, #0
 8011238:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801123e:	697a      	ldr	r2, [r7, #20]
 8011240:	1ad2      	subs	r2, r2, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	69db      	ldr	r3, [r3, #28]
 8011246:	429a      	cmp	r2, r3
 8011248:	d217      	bcs.n	801127a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	789b      	ldrb	r3, [r3, #2]
 801124e:	613b      	str	r3, [r7, #16]
 8011250:	e010      	b.n	8011274 <sync_window+0x78>
					wsect += fs->fsize;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	69db      	ldr	r3, [r3, #28]
 8011256:	697a      	ldr	r2, [r7, #20]
 8011258:	4413      	add	r3, r2
 801125a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	7858      	ldrb	r0, [r3, #1]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011266:	2301      	movs	r3, #1
 8011268:	697a      	ldr	r2, [r7, #20]
 801126a:	f7ff fd1d 	bl	8010ca8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	3b01      	subs	r3, #1
 8011272:	613b      	str	r3, [r7, #16]
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	2b01      	cmp	r3, #1
 8011278:	d8eb      	bhi.n	8011252 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801127a:	7bfb      	ldrb	r3, [r7, #15]
}
 801127c:	4618      	mov	r0, r3
 801127e:	3718      	adds	r7, #24
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801128e:	2300      	movs	r3, #0
 8011290:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011296:	683a      	ldr	r2, [r7, #0]
 8011298:	429a      	cmp	r2, r3
 801129a:	d01b      	beq.n	80112d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7ff ffad 	bl	80111fc <sync_window>
 80112a2:	4603      	mov	r3, r0
 80112a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80112a6:	7bfb      	ldrb	r3, [r7, #15]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d113      	bne.n	80112d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	7858      	ldrb	r0, [r3, #1]
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80112b6:	2301      	movs	r3, #1
 80112b8:	683a      	ldr	r2, [r7, #0]
 80112ba:	f7ff fcd5 	bl	8010c68 <disk_read>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d004      	beq.n	80112ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80112c4:	f04f 33ff 	mov.w	r3, #4294967295
 80112c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80112ca:	2301      	movs	r3, #1
 80112cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	683a      	ldr	r2, [r7, #0]
 80112d2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80112d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3710      	adds	r7, #16
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}
	...

080112e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7ff ff87 	bl	80111fc <sync_window>
 80112ee:	4603      	mov	r3, r0
 80112f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80112f2:	7bfb      	ldrb	r3, [r7, #15]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d159      	bne.n	80113ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	2b03      	cmp	r3, #3
 80112fe:	d149      	bne.n	8011394 <sync_fs+0xb4>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	791b      	ldrb	r3, [r3, #4]
 8011304:	2b01      	cmp	r3, #1
 8011306:	d145      	bne.n	8011394 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	899b      	ldrh	r3, [r3, #12]
 8011312:	461a      	mov	r2, r3
 8011314:	2100      	movs	r1, #0
 8011316:	f7ff fda8 	bl	8010e6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	3334      	adds	r3, #52	; 0x34
 801131e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011322:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011326:	4618      	mov	r0, r3
 8011328:	f7ff fd37 	bl	8010d9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	3334      	adds	r3, #52	; 0x34
 8011330:	4921      	ldr	r1, [pc, #132]	; (80113b8 <sync_fs+0xd8>)
 8011332:	4618      	mov	r0, r3
 8011334:	f7ff fd4c 	bl	8010dd0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	3334      	adds	r3, #52	; 0x34
 801133c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011340:	491e      	ldr	r1, [pc, #120]	; (80113bc <sync_fs+0xdc>)
 8011342:	4618      	mov	r0, r3
 8011344:	f7ff fd44 	bl	8010dd0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	3334      	adds	r3, #52	; 0x34
 801134c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	695b      	ldr	r3, [r3, #20]
 8011354:	4619      	mov	r1, r3
 8011356:	4610      	mov	r0, r2
 8011358:	f7ff fd3a 	bl	8010dd0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3334      	adds	r3, #52	; 0x34
 8011360:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	691b      	ldr	r3, [r3, #16]
 8011368:	4619      	mov	r1, r3
 801136a:	4610      	mov	r0, r2
 801136c:	f7ff fd30 	bl	8010dd0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6a1b      	ldr	r3, [r3, #32]
 8011374:	1c5a      	adds	r2, r3, #1
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	7858      	ldrb	r0, [r3, #1]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011388:	2301      	movs	r3, #1
 801138a:	f7ff fc8d 	bl	8010ca8 <disk_write>
			fs->fsi_flag = 0;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2200      	movs	r2, #0
 8011392:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	785b      	ldrb	r3, [r3, #1]
 8011398:	2200      	movs	r2, #0
 801139a:	2100      	movs	r1, #0
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff fca3 	bl	8010ce8 <disk_ioctl>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d001      	beq.n	80113ac <sync_fs+0xcc>
 80113a8:	2301      	movs	r3, #1
 80113aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80113ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3710      	adds	r7, #16
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	41615252 	.word	0x41615252
 80113bc:	61417272 	.word	0x61417272

080113c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	3b02      	subs	r3, #2
 80113ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	699b      	ldr	r3, [r3, #24]
 80113d4:	3b02      	subs	r3, #2
 80113d6:	683a      	ldr	r2, [r7, #0]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d301      	bcc.n	80113e0 <clust2sect+0x20>
 80113dc:	2300      	movs	r3, #0
 80113de:	e008      	b.n	80113f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	895b      	ldrh	r3, [r3, #10]
 80113e4:	461a      	mov	r2, r3
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	fb03 f202 	mul.w	r2, r3, r2
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f0:	4413      	add	r3, r2
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	370c      	adds	r7, #12
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr

080113fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80113fe:	b580      	push	{r7, lr}
 8011400:	b086      	sub	sp, #24
 8011402:	af00      	add	r7, sp, #0
 8011404:	6078      	str	r0, [r7, #4]
 8011406:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	2b01      	cmp	r3, #1
 8011412:	d904      	bls.n	801141e <get_fat+0x20>
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	699b      	ldr	r3, [r3, #24]
 8011418:	683a      	ldr	r2, [r7, #0]
 801141a:	429a      	cmp	r2, r3
 801141c:	d302      	bcc.n	8011424 <get_fat+0x26>
		val = 1;	/* Internal error */
 801141e:	2301      	movs	r3, #1
 8011420:	617b      	str	r3, [r7, #20]
 8011422:	e0bb      	b.n	801159c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011424:	f04f 33ff 	mov.w	r3, #4294967295
 8011428:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	2b03      	cmp	r3, #3
 8011430:	f000 8083 	beq.w	801153a <get_fat+0x13c>
 8011434:	2b03      	cmp	r3, #3
 8011436:	f300 80a7 	bgt.w	8011588 <get_fat+0x18a>
 801143a:	2b01      	cmp	r3, #1
 801143c:	d002      	beq.n	8011444 <get_fat+0x46>
 801143e:	2b02      	cmp	r3, #2
 8011440:	d056      	beq.n	80114f0 <get_fat+0xf2>
 8011442:	e0a1      	b.n	8011588 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	60fb      	str	r3, [r7, #12]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	085b      	lsrs	r3, r3, #1
 801144c:	68fa      	ldr	r2, [r7, #12]
 801144e:	4413      	add	r3, r2
 8011450:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	899b      	ldrh	r3, [r3, #12]
 801145a:	4619      	mov	r1, r3
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011462:	4413      	add	r3, r2
 8011464:	4619      	mov	r1, r3
 8011466:	6938      	ldr	r0, [r7, #16]
 8011468:	f7ff ff0c 	bl	8011284 <move_window>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	f040 808d 	bne.w	801158e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	1c5a      	adds	r2, r3, #1
 8011478:	60fa      	str	r2, [r7, #12]
 801147a:	693a      	ldr	r2, [r7, #16]
 801147c:	8992      	ldrh	r2, [r2, #12]
 801147e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011482:	fb01 f202 	mul.w	r2, r1, r2
 8011486:	1a9b      	subs	r3, r3, r2
 8011488:	693a      	ldr	r2, [r7, #16]
 801148a:	4413      	add	r3, r2
 801148c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011490:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	899b      	ldrh	r3, [r3, #12]
 801149a:	4619      	mov	r1, r3
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80114a2:	4413      	add	r3, r2
 80114a4:	4619      	mov	r1, r3
 80114a6:	6938      	ldr	r0, [r7, #16]
 80114a8:	f7ff feec 	bl	8011284 <move_window>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d16f      	bne.n	8011592 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	899b      	ldrh	r3, [r3, #12]
 80114b6:	461a      	mov	r2, r3
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80114be:	fb01 f202 	mul.w	r2, r1, r2
 80114c2:	1a9b      	subs	r3, r3, r2
 80114c4:	693a      	ldr	r2, [r7, #16]
 80114c6:	4413      	add	r3, r2
 80114c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80114cc:	021b      	lsls	r3, r3, #8
 80114ce:	461a      	mov	r2, r3
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	4313      	orrs	r3, r2
 80114d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	f003 0301 	and.w	r3, r3, #1
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d002      	beq.n	80114e6 <get_fat+0xe8>
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	091b      	lsrs	r3, r3, #4
 80114e4:	e002      	b.n	80114ec <get_fat+0xee>
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80114ec:	617b      	str	r3, [r7, #20]
			break;
 80114ee:	e055      	b.n	801159c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	899b      	ldrh	r3, [r3, #12]
 80114f8:	085b      	lsrs	r3, r3, #1
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	4619      	mov	r1, r3
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	fbb3 f3f1 	udiv	r3, r3, r1
 8011504:	4413      	add	r3, r2
 8011506:	4619      	mov	r1, r3
 8011508:	6938      	ldr	r0, [r7, #16]
 801150a:	f7ff febb 	bl	8011284 <move_window>
 801150e:	4603      	mov	r3, r0
 8011510:	2b00      	cmp	r3, #0
 8011512:	d140      	bne.n	8011596 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	005b      	lsls	r3, r3, #1
 801151e:	693a      	ldr	r2, [r7, #16]
 8011520:	8992      	ldrh	r2, [r2, #12]
 8011522:	fbb3 f0f2 	udiv	r0, r3, r2
 8011526:	fb00 f202 	mul.w	r2, r0, r2
 801152a:	1a9b      	subs	r3, r3, r2
 801152c:	440b      	add	r3, r1
 801152e:	4618      	mov	r0, r3
 8011530:	f7ff fbf8 	bl	8010d24 <ld_word>
 8011534:	4603      	mov	r3, r0
 8011536:	617b      	str	r3, [r7, #20]
			break;
 8011538:	e030      	b.n	801159c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	899b      	ldrh	r3, [r3, #12]
 8011542:	089b      	lsrs	r3, r3, #2
 8011544:	b29b      	uxth	r3, r3
 8011546:	4619      	mov	r1, r3
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	fbb3 f3f1 	udiv	r3, r3, r1
 801154e:	4413      	add	r3, r2
 8011550:	4619      	mov	r1, r3
 8011552:	6938      	ldr	r0, [r7, #16]
 8011554:	f7ff fe96 	bl	8011284 <move_window>
 8011558:	4603      	mov	r3, r0
 801155a:	2b00      	cmp	r3, #0
 801155c:	d11d      	bne.n	801159a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	693a      	ldr	r2, [r7, #16]
 801156a:	8992      	ldrh	r2, [r2, #12]
 801156c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011570:	fb00 f202 	mul.w	r2, r0, r2
 8011574:	1a9b      	subs	r3, r3, r2
 8011576:	440b      	add	r3, r1
 8011578:	4618      	mov	r0, r3
 801157a:	f7ff fbeb 	bl	8010d54 <ld_dword>
 801157e:	4603      	mov	r3, r0
 8011580:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011584:	617b      	str	r3, [r7, #20]
			break;
 8011586:	e009      	b.n	801159c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011588:	2301      	movs	r3, #1
 801158a:	617b      	str	r3, [r7, #20]
 801158c:	e006      	b.n	801159c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801158e:	bf00      	nop
 8011590:	e004      	b.n	801159c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011592:	bf00      	nop
 8011594:	e002      	b.n	801159c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011596:	bf00      	nop
 8011598:	e000      	b.n	801159c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801159a:	bf00      	nop
		}
	}

	return val;
 801159c:	697b      	ldr	r3, [r7, #20]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3718      	adds	r7, #24
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}

080115a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80115a6:	b590      	push	{r4, r7, lr}
 80115a8:	b089      	sub	sp, #36	; 0x24
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	60f8      	str	r0, [r7, #12]
 80115ae:	60b9      	str	r1, [r7, #8]
 80115b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80115b2:	2302      	movs	r3, #2
 80115b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	2b01      	cmp	r3, #1
 80115ba:	f240 8102 	bls.w	80117c2 <put_fat+0x21c>
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	699b      	ldr	r3, [r3, #24]
 80115c2:	68ba      	ldr	r2, [r7, #8]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	f080 80fc 	bcs.w	80117c2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	2b03      	cmp	r3, #3
 80115d0:	f000 80b6 	beq.w	8011740 <put_fat+0x19a>
 80115d4:	2b03      	cmp	r3, #3
 80115d6:	f300 80fd 	bgt.w	80117d4 <put_fat+0x22e>
 80115da:	2b01      	cmp	r3, #1
 80115dc:	d003      	beq.n	80115e6 <put_fat+0x40>
 80115de:	2b02      	cmp	r3, #2
 80115e0:	f000 8083 	beq.w	80116ea <put_fat+0x144>
 80115e4:	e0f6      	b.n	80117d4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	61bb      	str	r3, [r7, #24]
 80115ea:	69bb      	ldr	r3, [r7, #24]
 80115ec:	085b      	lsrs	r3, r3, #1
 80115ee:	69ba      	ldr	r2, [r7, #24]
 80115f0:	4413      	add	r3, r2
 80115f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	899b      	ldrh	r3, [r3, #12]
 80115fc:	4619      	mov	r1, r3
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	fbb3 f3f1 	udiv	r3, r3, r1
 8011604:	4413      	add	r3, r2
 8011606:	4619      	mov	r1, r3
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	f7ff fe3b 	bl	8011284 <move_window>
 801160e:	4603      	mov	r3, r0
 8011610:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011612:	7ffb      	ldrb	r3, [r7, #31]
 8011614:	2b00      	cmp	r3, #0
 8011616:	f040 80d6 	bne.w	80117c6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011620:	69bb      	ldr	r3, [r7, #24]
 8011622:	1c5a      	adds	r2, r3, #1
 8011624:	61ba      	str	r2, [r7, #24]
 8011626:	68fa      	ldr	r2, [r7, #12]
 8011628:	8992      	ldrh	r2, [r2, #12]
 801162a:	fbb3 f0f2 	udiv	r0, r3, r2
 801162e:	fb00 f202 	mul.w	r2, r0, r2
 8011632:	1a9b      	subs	r3, r3, r2
 8011634:	440b      	add	r3, r1
 8011636:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	f003 0301 	and.w	r3, r3, #1
 801163e:	2b00      	cmp	r3, #0
 8011640:	d00d      	beq.n	801165e <put_fat+0xb8>
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	781b      	ldrb	r3, [r3, #0]
 8011646:	b25b      	sxtb	r3, r3
 8011648:	f003 030f 	and.w	r3, r3, #15
 801164c:	b25a      	sxtb	r2, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	b2db      	uxtb	r3, r3
 8011652:	011b      	lsls	r3, r3, #4
 8011654:	b25b      	sxtb	r3, r3
 8011656:	4313      	orrs	r3, r2
 8011658:	b25b      	sxtb	r3, r3
 801165a:	b2db      	uxtb	r3, r3
 801165c:	e001      	b.n	8011662 <put_fat+0xbc>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	b2db      	uxtb	r3, r3
 8011662:	697a      	ldr	r2, [r7, #20]
 8011664:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2201      	movs	r2, #1
 801166a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	899b      	ldrh	r3, [r3, #12]
 8011674:	4619      	mov	r1, r3
 8011676:	69bb      	ldr	r3, [r7, #24]
 8011678:	fbb3 f3f1 	udiv	r3, r3, r1
 801167c:	4413      	add	r3, r2
 801167e:	4619      	mov	r1, r3
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f7ff fdff 	bl	8011284 <move_window>
 8011686:	4603      	mov	r3, r0
 8011688:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801168a:	7ffb      	ldrb	r3, [r7, #31]
 801168c:	2b00      	cmp	r3, #0
 801168e:	f040 809c 	bne.w	80117ca <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	899b      	ldrh	r3, [r3, #12]
 801169c:	461a      	mov	r2, r3
 801169e:	69bb      	ldr	r3, [r7, #24]
 80116a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80116a4:	fb00 f202 	mul.w	r2, r0, r2
 80116a8:	1a9b      	subs	r3, r3, r2
 80116aa:	440b      	add	r3, r1
 80116ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	f003 0301 	and.w	r3, r3, #1
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d003      	beq.n	80116c0 <put_fat+0x11a>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	091b      	lsrs	r3, r3, #4
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	e00e      	b.n	80116de <put_fat+0x138>
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	b25b      	sxtb	r3, r3
 80116c6:	f023 030f 	bic.w	r3, r3, #15
 80116ca:	b25a      	sxtb	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	0a1b      	lsrs	r3, r3, #8
 80116d0:	b25b      	sxtb	r3, r3
 80116d2:	f003 030f 	and.w	r3, r3, #15
 80116d6:	b25b      	sxtb	r3, r3
 80116d8:	4313      	orrs	r3, r2
 80116da:	b25b      	sxtb	r3, r3
 80116dc:	b2db      	uxtb	r3, r3
 80116de:	697a      	ldr	r2, [r7, #20]
 80116e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2201      	movs	r2, #1
 80116e6:	70da      	strb	r2, [r3, #3]
			break;
 80116e8:	e074      	b.n	80117d4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	899b      	ldrh	r3, [r3, #12]
 80116f2:	085b      	lsrs	r3, r3, #1
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	4619      	mov	r1, r3
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80116fe:	4413      	add	r3, r2
 8011700:	4619      	mov	r1, r3
 8011702:	68f8      	ldr	r0, [r7, #12]
 8011704:	f7ff fdbe 	bl	8011284 <move_window>
 8011708:	4603      	mov	r3, r0
 801170a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801170c:	7ffb      	ldrb	r3, [r7, #31]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d15d      	bne.n	80117ce <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	005b      	lsls	r3, r3, #1
 801171c:	68fa      	ldr	r2, [r7, #12]
 801171e:	8992      	ldrh	r2, [r2, #12]
 8011720:	fbb3 f0f2 	udiv	r0, r3, r2
 8011724:	fb00 f202 	mul.w	r2, r0, r2
 8011728:	1a9b      	subs	r3, r3, r2
 801172a:	440b      	add	r3, r1
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	b292      	uxth	r2, r2
 8011730:	4611      	mov	r1, r2
 8011732:	4618      	mov	r0, r3
 8011734:	f7ff fb31 	bl	8010d9a <st_word>
			fs->wflag = 1;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2201      	movs	r2, #1
 801173c:	70da      	strb	r2, [r3, #3]
			break;
 801173e:	e049      	b.n	80117d4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	899b      	ldrh	r3, [r3, #12]
 8011748:	089b      	lsrs	r3, r3, #2
 801174a:	b29b      	uxth	r3, r3
 801174c:	4619      	mov	r1, r3
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	fbb3 f3f1 	udiv	r3, r3, r1
 8011754:	4413      	add	r3, r2
 8011756:	4619      	mov	r1, r3
 8011758:	68f8      	ldr	r0, [r7, #12]
 801175a:	f7ff fd93 	bl	8011284 <move_window>
 801175e:	4603      	mov	r3, r0
 8011760:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011762:	7ffb      	ldrb	r3, [r7, #31]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d134      	bne.n	80117d2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	009b      	lsls	r3, r3, #2
 8011778:	68fa      	ldr	r2, [r7, #12]
 801177a:	8992      	ldrh	r2, [r2, #12]
 801177c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011780:	fb00 f202 	mul.w	r2, r0, r2
 8011784:	1a9b      	subs	r3, r3, r2
 8011786:	440b      	add	r3, r1
 8011788:	4618      	mov	r0, r3
 801178a:	f7ff fae3 	bl	8010d54 <ld_dword>
 801178e:	4603      	mov	r3, r0
 8011790:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011794:	4323      	orrs	r3, r4
 8011796:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	8992      	ldrh	r2, [r2, #12]
 80117a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80117aa:	fb00 f202 	mul.w	r2, r0, r2
 80117ae:	1a9b      	subs	r3, r3, r2
 80117b0:	440b      	add	r3, r1
 80117b2:	6879      	ldr	r1, [r7, #4]
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7ff fb0b 	bl	8010dd0 <st_dword>
			fs->wflag = 1;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2201      	movs	r2, #1
 80117be:	70da      	strb	r2, [r3, #3]
			break;
 80117c0:	e008      	b.n	80117d4 <put_fat+0x22e>
		}
	}
 80117c2:	bf00      	nop
 80117c4:	e006      	b.n	80117d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80117c6:	bf00      	nop
 80117c8:	e004      	b.n	80117d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80117ca:	bf00      	nop
 80117cc:	e002      	b.n	80117d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80117ce:	bf00      	nop
 80117d0:	e000      	b.n	80117d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80117d2:	bf00      	nop
	return res;
 80117d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3724      	adds	r7, #36	; 0x24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd90      	pop	{r4, r7, pc}

080117de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80117de:	b580      	push	{r7, lr}
 80117e0:	b088      	sub	sp, #32
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	60f8      	str	r0, [r7, #12]
 80117e6:	60b9      	str	r1, [r7, #8]
 80117e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80117ea:	2300      	movs	r3, #0
 80117ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	2b01      	cmp	r3, #1
 80117f8:	d904      	bls.n	8011804 <remove_chain+0x26>
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	699b      	ldr	r3, [r3, #24]
 80117fe:	68ba      	ldr	r2, [r7, #8]
 8011800:	429a      	cmp	r2, r3
 8011802:	d301      	bcc.n	8011808 <remove_chain+0x2a>
 8011804:	2302      	movs	r3, #2
 8011806:	e04b      	b.n	80118a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d00c      	beq.n	8011828 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801180e:	f04f 32ff 	mov.w	r2, #4294967295
 8011812:	6879      	ldr	r1, [r7, #4]
 8011814:	69b8      	ldr	r0, [r7, #24]
 8011816:	f7ff fec6 	bl	80115a6 <put_fat>
 801181a:	4603      	mov	r3, r0
 801181c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801181e:	7ffb      	ldrb	r3, [r7, #31]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d001      	beq.n	8011828 <remove_chain+0x4a>
 8011824:	7ffb      	ldrb	r3, [r7, #31]
 8011826:	e03b      	b.n	80118a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011828:	68b9      	ldr	r1, [r7, #8]
 801182a:	68f8      	ldr	r0, [r7, #12]
 801182c:	f7ff fde7 	bl	80113fe <get_fat>
 8011830:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d031      	beq.n	801189c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	2b01      	cmp	r3, #1
 801183c:	d101      	bne.n	8011842 <remove_chain+0x64>
 801183e:	2302      	movs	r3, #2
 8011840:	e02e      	b.n	80118a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011848:	d101      	bne.n	801184e <remove_chain+0x70>
 801184a:	2301      	movs	r3, #1
 801184c:	e028      	b.n	80118a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801184e:	2200      	movs	r2, #0
 8011850:	68b9      	ldr	r1, [r7, #8]
 8011852:	69b8      	ldr	r0, [r7, #24]
 8011854:	f7ff fea7 	bl	80115a6 <put_fat>
 8011858:	4603      	mov	r3, r0
 801185a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801185c:	7ffb      	ldrb	r3, [r7, #31]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d001      	beq.n	8011866 <remove_chain+0x88>
 8011862:	7ffb      	ldrb	r3, [r7, #31]
 8011864:	e01c      	b.n	80118a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011866:	69bb      	ldr	r3, [r7, #24]
 8011868:	695a      	ldr	r2, [r3, #20]
 801186a:	69bb      	ldr	r3, [r7, #24]
 801186c:	699b      	ldr	r3, [r3, #24]
 801186e:	3b02      	subs	r3, #2
 8011870:	429a      	cmp	r2, r3
 8011872:	d20b      	bcs.n	801188c <remove_chain+0xae>
			fs->free_clst++;
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	695b      	ldr	r3, [r3, #20]
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801187e:	69bb      	ldr	r3, [r7, #24]
 8011880:	791b      	ldrb	r3, [r3, #4]
 8011882:	f043 0301 	orr.w	r3, r3, #1
 8011886:	b2da      	uxtb	r2, r3
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	699b      	ldr	r3, [r3, #24]
 8011894:	68ba      	ldr	r2, [r7, #8]
 8011896:	429a      	cmp	r2, r3
 8011898:	d3c6      	bcc.n	8011828 <remove_chain+0x4a>
 801189a:	e000      	b.n	801189e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801189c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801189e:	2300      	movs	r3, #0
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3720      	adds	r7, #32
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}

080118a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b088      	sub	sp, #32
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d10d      	bne.n	80118da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	691b      	ldr	r3, [r3, #16]
 80118c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d004      	beq.n	80118d4 <create_chain+0x2c>
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	699b      	ldr	r3, [r3, #24]
 80118ce:	69ba      	ldr	r2, [r7, #24]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d31b      	bcc.n	801190c <create_chain+0x64>
 80118d4:	2301      	movs	r3, #1
 80118d6:	61bb      	str	r3, [r7, #24]
 80118d8:	e018      	b.n	801190c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80118da:	6839      	ldr	r1, [r7, #0]
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f7ff fd8e 	bl	80113fe <get_fat>
 80118e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d801      	bhi.n	80118ee <create_chain+0x46>
 80118ea:	2301      	movs	r3, #1
 80118ec:	e070      	b.n	80119d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f4:	d101      	bne.n	80118fa <create_chain+0x52>
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	e06a      	b.n	80119d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	699b      	ldr	r3, [r3, #24]
 80118fe:	68fa      	ldr	r2, [r7, #12]
 8011900:	429a      	cmp	r2, r3
 8011902:	d201      	bcs.n	8011908 <create_chain+0x60>
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	e063      	b.n	80119d0 <create_chain+0x128>
		scl = clst;
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801190c:	69bb      	ldr	r3, [r7, #24]
 801190e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	3301      	adds	r3, #1
 8011914:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011916:	693b      	ldr	r3, [r7, #16]
 8011918:	699b      	ldr	r3, [r3, #24]
 801191a:	69fa      	ldr	r2, [r7, #28]
 801191c:	429a      	cmp	r2, r3
 801191e:	d307      	bcc.n	8011930 <create_chain+0x88>
				ncl = 2;
 8011920:	2302      	movs	r3, #2
 8011922:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011924:	69fa      	ldr	r2, [r7, #28]
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	429a      	cmp	r2, r3
 801192a:	d901      	bls.n	8011930 <create_chain+0x88>
 801192c:	2300      	movs	r3, #0
 801192e:	e04f      	b.n	80119d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011930:	69f9      	ldr	r1, [r7, #28]
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f7ff fd63 	bl	80113fe <get_fat>
 8011938:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00e      	beq.n	801195e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2b01      	cmp	r3, #1
 8011944:	d003      	beq.n	801194e <create_chain+0xa6>
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f1b3 3fff 	cmp.w	r3, #4294967295
 801194c:	d101      	bne.n	8011952 <create_chain+0xaa>
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	e03e      	b.n	80119d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011952:	69fa      	ldr	r2, [r7, #28]
 8011954:	69bb      	ldr	r3, [r7, #24]
 8011956:	429a      	cmp	r2, r3
 8011958:	d1da      	bne.n	8011910 <create_chain+0x68>
 801195a:	2300      	movs	r3, #0
 801195c:	e038      	b.n	80119d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801195e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011960:	f04f 32ff 	mov.w	r2, #4294967295
 8011964:	69f9      	ldr	r1, [r7, #28]
 8011966:	6938      	ldr	r0, [r7, #16]
 8011968:	f7ff fe1d 	bl	80115a6 <put_fat>
 801196c:	4603      	mov	r3, r0
 801196e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011970:	7dfb      	ldrb	r3, [r7, #23]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d109      	bne.n	801198a <create_chain+0xe2>
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d006      	beq.n	801198a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801197c:	69fa      	ldr	r2, [r7, #28]
 801197e:	6839      	ldr	r1, [r7, #0]
 8011980:	6938      	ldr	r0, [r7, #16]
 8011982:	f7ff fe10 	bl	80115a6 <put_fat>
 8011986:	4603      	mov	r3, r0
 8011988:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801198a:	7dfb      	ldrb	r3, [r7, #23]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d116      	bne.n	80119be <create_chain+0x116>
		fs->last_clst = ncl;
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	69fa      	ldr	r2, [r7, #28]
 8011994:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	695a      	ldr	r2, [r3, #20]
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	699b      	ldr	r3, [r3, #24]
 801199e:	3b02      	subs	r3, #2
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d804      	bhi.n	80119ae <create_chain+0x106>
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	695b      	ldr	r3, [r3, #20]
 80119a8:	1e5a      	subs	r2, r3, #1
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	791b      	ldrb	r3, [r3, #4]
 80119b2:	f043 0301 	orr.w	r3, r3, #1
 80119b6:	b2da      	uxtb	r2, r3
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	711a      	strb	r2, [r3, #4]
 80119bc:	e007      	b.n	80119ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80119be:	7dfb      	ldrb	r3, [r7, #23]
 80119c0:	2b01      	cmp	r3, #1
 80119c2:	d102      	bne.n	80119ca <create_chain+0x122>
 80119c4:	f04f 33ff 	mov.w	r3, #4294967295
 80119c8:	e000      	b.n	80119cc <create_chain+0x124>
 80119ca:	2301      	movs	r3, #1
 80119cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80119ce:	69fb      	ldr	r3, [r7, #28]
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3720      	adds	r7, #32
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80119d8:	b480      	push	{r7}
 80119da:	b087      	sub	sp, #28
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ec:	3304      	adds	r3, #4
 80119ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	899b      	ldrh	r3, [r3, #12]
 80119f4:	461a      	mov	r2, r3
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80119fc:	68fa      	ldr	r2, [r7, #12]
 80119fe:	8952      	ldrh	r2, [r2, #10]
 8011a00:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a04:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	1d1a      	adds	r2, r3, #4
 8011a0a:	613a      	str	r2, [r7, #16]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d101      	bne.n	8011a1a <clmt_clust+0x42>
 8011a16:	2300      	movs	r3, #0
 8011a18:	e010      	b.n	8011a3c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011a1a:	697a      	ldr	r2, [r7, #20]
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d307      	bcc.n	8011a32 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011a22:	697a      	ldr	r2, [r7, #20]
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	1ad3      	subs	r3, r2, r3
 8011a28:	617b      	str	r3, [r7, #20]
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	3304      	adds	r3, #4
 8011a2e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a30:	e7e9      	b.n	8011a06 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011a32:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011a34:	693b      	ldr	r3, [r7, #16]
 8011a36:	681a      	ldr	r2, [r3, #0]
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	4413      	add	r3, r2
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	371c      	adds	r7, #28
 8011a40:	46bd      	mov	sp, r7
 8011a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a46:	4770      	bx	lr

08011a48 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b086      	sub	sp, #24
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011a5e:	d204      	bcs.n	8011a6a <dir_sdi+0x22>
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	f003 031f 	and.w	r3, r3, #31
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d001      	beq.n	8011a6e <dir_sdi+0x26>
		return FR_INT_ERR;
 8011a6a:	2302      	movs	r3, #2
 8011a6c:	e071      	b.n	8011b52 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	683a      	ldr	r2, [r7, #0]
 8011a72:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	689b      	ldr	r3, [r3, #8]
 8011a78:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d106      	bne.n	8011a8e <dir_sdi+0x46>
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	2b02      	cmp	r3, #2
 8011a86:	d902      	bls.n	8011a8e <dir_sdi+0x46>
		clst = fs->dirbase;
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a8c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d10c      	bne.n	8011aae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	095b      	lsrs	r3, r3, #5
 8011a98:	693a      	ldr	r2, [r7, #16]
 8011a9a:	8912      	ldrh	r2, [r2, #8]
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d301      	bcc.n	8011aa4 <dir_sdi+0x5c>
 8011aa0:	2302      	movs	r3, #2
 8011aa2:	e056      	b.n	8011b52 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	61da      	str	r2, [r3, #28]
 8011aac:	e02d      	b.n	8011b0a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	895b      	ldrh	r3, [r3, #10]
 8011ab2:	461a      	mov	r2, r3
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	899b      	ldrh	r3, [r3, #12]
 8011ab8:	fb02 f303 	mul.w	r3, r2, r3
 8011abc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011abe:	e019      	b.n	8011af4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6979      	ldr	r1, [r7, #20]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7ff fc9a 	bl	80113fe <get_fat>
 8011aca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ad2:	d101      	bne.n	8011ad8 <dir_sdi+0x90>
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	e03c      	b.n	8011b52 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d904      	bls.n	8011ae8 <dir_sdi+0xa0>
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	699b      	ldr	r3, [r3, #24]
 8011ae2:	697a      	ldr	r2, [r7, #20]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d301      	bcc.n	8011aec <dir_sdi+0xa4>
 8011ae8:	2302      	movs	r3, #2
 8011aea:	e032      	b.n	8011b52 <dir_sdi+0x10a>
			ofs -= csz;
 8011aec:	683a      	ldr	r2, [r7, #0]
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	1ad3      	subs	r3, r2, r3
 8011af2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011af4:	683a      	ldr	r2, [r7, #0]
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d2e1      	bcs.n	8011ac0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011afc:	6979      	ldr	r1, [r7, #20]
 8011afe:	6938      	ldr	r0, [r7, #16]
 8011b00:	f7ff fc5e 	bl	80113c0 <clust2sect>
 8011b04:	4602      	mov	r2, r0
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	697a      	ldr	r2, [r7, #20]
 8011b0e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	69db      	ldr	r3, [r3, #28]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d101      	bne.n	8011b1c <dir_sdi+0xd4>
 8011b18:	2302      	movs	r3, #2
 8011b1a:	e01a      	b.n	8011b52 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	69da      	ldr	r2, [r3, #28]
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	899b      	ldrh	r3, [r3, #12]
 8011b24:	4619      	mov	r1, r3
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b2c:	441a      	add	r2, r3
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	899b      	ldrh	r3, [r3, #12]
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b44:	fb00 f202 	mul.w	r2, r0, r2
 8011b48:	1a9b      	subs	r3, r3, r2
 8011b4a:	18ca      	adds	r2, r1, r3
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3718      	adds	r7, #24
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}

08011b5a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011b5a:	b580      	push	{r7, lr}
 8011b5c:	b086      	sub	sp, #24
 8011b5e:	af00      	add	r7, sp, #0
 8011b60:	6078      	str	r0, [r7, #4]
 8011b62:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	695b      	ldr	r3, [r3, #20]
 8011b6e:	3320      	adds	r3, #32
 8011b70:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	69db      	ldr	r3, [r3, #28]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d003      	beq.n	8011b82 <dir_next+0x28>
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011b80:	d301      	bcc.n	8011b86 <dir_next+0x2c>
 8011b82:	2304      	movs	r3, #4
 8011b84:	e0bb      	b.n	8011cfe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	899b      	ldrh	r3, [r3, #12]
 8011b8a:	461a      	mov	r2, r3
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b92:	fb01 f202 	mul.w	r2, r1, r2
 8011b96:	1a9b      	subs	r3, r3, r2
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f040 809d 	bne.w	8011cd8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	69db      	ldr	r3, [r3, #28]
 8011ba2:	1c5a      	adds	r2, r3, #1
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	699b      	ldr	r3, [r3, #24]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d10b      	bne.n	8011bc8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	095b      	lsrs	r3, r3, #5
 8011bb4:	68fa      	ldr	r2, [r7, #12]
 8011bb6:	8912      	ldrh	r2, [r2, #8]
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	f0c0 808d 	bcc.w	8011cd8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	61da      	str	r2, [r3, #28]
 8011bc4:	2304      	movs	r3, #4
 8011bc6:	e09a      	b.n	8011cfe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	899b      	ldrh	r3, [r3, #12]
 8011bcc:	461a      	mov	r2, r3
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	8952      	ldrh	r2, [r2, #10]
 8011bd8:	3a01      	subs	r2, #1
 8011bda:	4013      	ands	r3, r2
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d17b      	bne.n	8011cd8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	699b      	ldr	r3, [r3, #24]
 8011be6:	4619      	mov	r1, r3
 8011be8:	4610      	mov	r0, r2
 8011bea:	f7ff fc08 	bl	80113fe <get_fat>
 8011bee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d801      	bhi.n	8011bfa <dir_next+0xa0>
 8011bf6:	2302      	movs	r3, #2
 8011bf8:	e081      	b.n	8011cfe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c00:	d101      	bne.n	8011c06 <dir_next+0xac>
 8011c02:	2301      	movs	r3, #1
 8011c04:	e07b      	b.n	8011cfe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	699b      	ldr	r3, [r3, #24]
 8011c0a:	697a      	ldr	r2, [r7, #20]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d359      	bcc.n	8011cc4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d104      	bne.n	8011c20 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	61da      	str	r2, [r3, #28]
 8011c1c:	2304      	movs	r3, #4
 8011c1e:	e06e      	b.n	8011cfe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	699b      	ldr	r3, [r3, #24]
 8011c26:	4619      	mov	r1, r3
 8011c28:	4610      	mov	r0, r2
 8011c2a:	f7ff fe3d 	bl	80118a8 <create_chain>
 8011c2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d101      	bne.n	8011c3a <dir_next+0xe0>
 8011c36:	2307      	movs	r3, #7
 8011c38:	e061      	b.n	8011cfe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d101      	bne.n	8011c44 <dir_next+0xea>
 8011c40:	2302      	movs	r3, #2
 8011c42:	e05c      	b.n	8011cfe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c4a:	d101      	bne.n	8011c50 <dir_next+0xf6>
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e056      	b.n	8011cfe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011c50:	68f8      	ldr	r0, [r7, #12]
 8011c52:	f7ff fad3 	bl	80111fc <sync_window>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d001      	beq.n	8011c60 <dir_next+0x106>
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	e04e      	b.n	8011cfe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	899b      	ldrh	r3, [r3, #12]
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	2100      	movs	r1, #0
 8011c6e:	f7ff f8fc 	bl	8010e6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c72:	2300      	movs	r3, #0
 8011c74:	613b      	str	r3, [r7, #16]
 8011c76:	6979      	ldr	r1, [r7, #20]
 8011c78:	68f8      	ldr	r0, [r7, #12]
 8011c7a:	f7ff fba1 	bl	80113c0 <clust2sect>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	631a      	str	r2, [r3, #48]	; 0x30
 8011c84:	e012      	b.n	8011cac <dir_next+0x152>
						fs->wflag = 1;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2201      	movs	r2, #1
 8011c8a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011c8c:	68f8      	ldr	r0, [r7, #12]
 8011c8e:	f7ff fab5 	bl	80111fc <sync_window>
 8011c92:	4603      	mov	r3, r0
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d001      	beq.n	8011c9c <dir_next+0x142>
 8011c98:	2301      	movs	r3, #1
 8011c9a:	e030      	b.n	8011cfe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	613b      	str	r3, [r7, #16]
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ca6:	1c5a      	adds	r2, r3, #1
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	631a      	str	r2, [r3, #48]	; 0x30
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	895b      	ldrh	r3, [r3, #10]
 8011cb0:	461a      	mov	r2, r3
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d3e6      	bcc.n	8011c86 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011cbc:	693b      	ldr	r3, [r7, #16]
 8011cbe:	1ad2      	subs	r2, r2, r3
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	697a      	ldr	r2, [r7, #20]
 8011cc8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011cca:	6979      	ldr	r1, [r7, #20]
 8011ccc:	68f8      	ldr	r0, [r7, #12]
 8011cce:	f7ff fb77 	bl	80113c0 <clust2sect>
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	68ba      	ldr	r2, [r7, #8]
 8011cdc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	899b      	ldrh	r3, [r3, #12]
 8011ce8:	461a      	mov	r2, r3
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cf0:	fb00 f202 	mul.w	r2, r0, r2
 8011cf4:	1a9b      	subs	r3, r3, r2
 8011cf6:	18ca      	adds	r2, r1, r3
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011cfc:	2300      	movs	r3, #0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3718      	adds	r7, #24
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}

08011d06 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011d06:	b580      	push	{r7, lr}
 8011d08:	b086      	sub	sp, #24
 8011d0a:	af00      	add	r7, sp, #0
 8011d0c:	6078      	str	r0, [r7, #4]
 8011d0e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011d16:	2100      	movs	r1, #0
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7ff fe95 	bl	8011a48 <dir_sdi>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011d22:	7dfb      	ldrb	r3, [r7, #23]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d12b      	bne.n	8011d80 <dir_alloc+0x7a>
		n = 0;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	69db      	ldr	r3, [r3, #28]
 8011d30:	4619      	mov	r1, r3
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f7ff faa6 	bl	8011284 <move_window>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011d3c:	7dfb      	ldrb	r3, [r7, #23]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d11d      	bne.n	8011d7e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6a1b      	ldr	r3, [r3, #32]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	2be5      	cmp	r3, #229	; 0xe5
 8011d4a:	d004      	beq.n	8011d56 <dir_alloc+0x50>
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6a1b      	ldr	r3, [r3, #32]
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d107      	bne.n	8011d66 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	3301      	adds	r3, #1
 8011d5a:	613b      	str	r3, [r7, #16]
 8011d5c:	693a      	ldr	r2, [r7, #16]
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d102      	bne.n	8011d6a <dir_alloc+0x64>
 8011d64:	e00c      	b.n	8011d80 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011d66:	2300      	movs	r3, #0
 8011d68:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011d6a:	2101      	movs	r1, #1
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f7ff fef4 	bl	8011b5a <dir_next>
 8011d72:	4603      	mov	r3, r0
 8011d74:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011d76:	7dfb      	ldrb	r3, [r7, #23]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d0d7      	beq.n	8011d2c <dir_alloc+0x26>
 8011d7c:	e000      	b.n	8011d80 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011d7e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011d80:	7dfb      	ldrb	r3, [r7, #23]
 8011d82:	2b04      	cmp	r3, #4
 8011d84:	d101      	bne.n	8011d8a <dir_alloc+0x84>
 8011d86:	2307      	movs	r3, #7
 8011d88:	75fb      	strb	r3, [r7, #23]
	return res;
 8011d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	3718      	adds	r7, #24
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b084      	sub	sp, #16
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	331a      	adds	r3, #26
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fe ffbe 	bl	8010d24 <ld_word>
 8011da8:	4603      	mov	r3, r0
 8011daa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	2b03      	cmp	r3, #3
 8011db2:	d109      	bne.n	8011dc8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	3314      	adds	r3, #20
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7fe ffb3 	bl	8010d24 <ld_word>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	041b      	lsls	r3, r3, #16
 8011dc2:	68fa      	ldr	r2, [r7, #12]
 8011dc4:	4313      	orrs	r3, r2
 8011dc6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3710      	adds	r7, #16
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}

08011dd2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011dd2:	b580      	push	{r7, lr}
 8011dd4:	b084      	sub	sp, #16
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	60f8      	str	r0, [r7, #12]
 8011dda:	60b9      	str	r1, [r7, #8]
 8011ddc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	331a      	adds	r3, #26
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	b292      	uxth	r2, r2
 8011de6:	4611      	mov	r1, r2
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7fe ffd6 	bl	8010d9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	2b03      	cmp	r3, #3
 8011df4:	d109      	bne.n	8011e0a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	f103 0214 	add.w	r2, r3, #20
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	0c1b      	lsrs	r3, r3, #16
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	4619      	mov	r1, r3
 8011e04:	4610      	mov	r0, r2
 8011e06:	f7fe ffc8 	bl	8010d9a <st_word>
	}
}
 8011e0a:	bf00      	nop
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b086      	sub	sp, #24
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
 8011e1a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011e1c:	2304      	movs	r3, #4
 8011e1e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011e26:	e03c      	b.n	8011ea2 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	69db      	ldr	r3, [r3, #28]
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	6938      	ldr	r0, [r7, #16]
 8011e30:	f7ff fa28 	bl	8011284 <move_window>
 8011e34:	4603      	mov	r3, r0
 8011e36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011e38:	7dfb      	ldrb	r3, [r7, #23]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d136      	bne.n	8011eac <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6a1b      	ldr	r3, [r3, #32]
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011e46:	7bfb      	ldrb	r3, [r7, #15]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d102      	bne.n	8011e52 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011e4c:	2304      	movs	r3, #4
 8011e4e:	75fb      	strb	r3, [r7, #23]
 8011e50:	e031      	b.n	8011eb6 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6a1b      	ldr	r3, [r3, #32]
 8011e56:	330b      	adds	r3, #11
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e5e:	73bb      	strb	r3, [r7, #14]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	7bba      	ldrb	r2, [r7, #14]
 8011e64:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011e66:	7bfb      	ldrb	r3, [r7, #15]
 8011e68:	2be5      	cmp	r3, #229	; 0xe5
 8011e6a:	d011      	beq.n	8011e90 <dir_read+0x7e>
 8011e6c:	7bfb      	ldrb	r3, [r7, #15]
 8011e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8011e70:	d00e      	beq.n	8011e90 <dir_read+0x7e>
 8011e72:	7bbb      	ldrb	r3, [r7, #14]
 8011e74:	2b0f      	cmp	r3, #15
 8011e76:	d00b      	beq.n	8011e90 <dir_read+0x7e>
 8011e78:	7bbb      	ldrb	r3, [r7, #14]
 8011e7a:	f023 0320 	bic.w	r3, r3, #32
 8011e7e:	2b08      	cmp	r3, #8
 8011e80:	bf0c      	ite	eq
 8011e82:	2301      	moveq	r3, #1
 8011e84:	2300      	movne	r3, #0
 8011e86:	b2db      	uxtb	r3, r3
 8011e88:	461a      	mov	r2, r3
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	d00f      	beq.n	8011eb0 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011e90:	2100      	movs	r1, #0
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f7ff fe61 	bl	8011b5a <dir_next>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011e9c:	7dfb      	ldrb	r3, [r7, #23]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d108      	bne.n	8011eb4 <dir_read+0xa2>
	while (dp->sect) {
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	69db      	ldr	r3, [r3, #28]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d1be      	bne.n	8011e28 <dir_read+0x16>
 8011eaa:	e004      	b.n	8011eb6 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011eac:	bf00      	nop
 8011eae:	e002      	b.n	8011eb6 <dir_read+0xa4>
				break;
 8011eb0:	bf00      	nop
 8011eb2:	e000      	b.n	8011eb6 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011eb4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011eb6:	7dfb      	ldrb	r3, [r7, #23]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d002      	beq.n	8011ec2 <dir_read+0xb0>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	61da      	str	r2, [r3, #28]
	return res;
 8011ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3718      	adds	r7, #24
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b086      	sub	sp, #24
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011eda:	2100      	movs	r1, #0
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f7ff fdb3 	bl	8011a48 <dir_sdi>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011ee6:	7dfb      	ldrb	r3, [r7, #23]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d001      	beq.n	8011ef0 <dir_find+0x24>
 8011eec:	7dfb      	ldrb	r3, [r7, #23]
 8011eee:	e03e      	b.n	8011f6e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	69db      	ldr	r3, [r3, #28]
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	6938      	ldr	r0, [r7, #16]
 8011ef8:	f7ff f9c4 	bl	8011284 <move_window>
 8011efc:	4603      	mov	r3, r0
 8011efe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f00:	7dfb      	ldrb	r3, [r7, #23]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d12f      	bne.n	8011f66 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6a1b      	ldr	r3, [r3, #32]
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011f0e:	7bfb      	ldrb	r3, [r7, #15]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d102      	bne.n	8011f1a <dir_find+0x4e>
 8011f14:	2304      	movs	r3, #4
 8011f16:	75fb      	strb	r3, [r7, #23]
 8011f18:	e028      	b.n	8011f6c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6a1b      	ldr	r3, [r3, #32]
 8011f1e:	330b      	adds	r3, #11
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f26:	b2da      	uxtb	r2, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6a1b      	ldr	r3, [r3, #32]
 8011f30:	330b      	adds	r3, #11
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	f003 0308 	and.w	r3, r3, #8
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d10a      	bne.n	8011f52 <dir_find+0x86>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6a18      	ldr	r0, [r3, #32]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	3324      	adds	r3, #36	; 0x24
 8011f44:	220b      	movs	r2, #11
 8011f46:	4619      	mov	r1, r3
 8011f48:	f7fe ffaa 	bl	8010ea0 <mem_cmp>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d00b      	beq.n	8011f6a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011f52:	2100      	movs	r1, #0
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f7ff fe00 	bl	8011b5a <dir_next>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011f5e:	7dfb      	ldrb	r3, [r7, #23]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d0c5      	beq.n	8011ef0 <dir_find+0x24>
 8011f64:	e002      	b.n	8011f6c <dir_find+0xa0>
		if (res != FR_OK) break;
 8011f66:	bf00      	nop
 8011f68:	e000      	b.n	8011f6c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011f6a:	bf00      	nop

	return res;
 8011f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3718      	adds	r7, #24
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}

08011f76 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011f76:	b580      	push	{r7, lr}
 8011f78:	b084      	sub	sp, #16
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011f84:	2101      	movs	r1, #1
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7ff febd 	bl	8011d06 <dir_alloc>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011f90:	7bfb      	ldrb	r3, [r7, #15]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d11c      	bne.n	8011fd0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	69db      	ldr	r3, [r3, #28]
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	68b8      	ldr	r0, [r7, #8]
 8011f9e:	f7ff f971 	bl	8011284 <move_window>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011fa6:	7bfb      	ldrb	r3, [r7, #15]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d111      	bne.n	8011fd0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	6a1b      	ldr	r3, [r3, #32]
 8011fb0:	2220      	movs	r2, #32
 8011fb2:	2100      	movs	r1, #0
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7fe ff58 	bl	8010e6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6a18      	ldr	r0, [r3, #32]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	3324      	adds	r3, #36	; 0x24
 8011fc2:	220b      	movs	r2, #11
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	f7fe ff2f 	bl	8010e28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	2201      	movs	r2, #1
 8011fce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b086      	sub	sp, #24
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
 8011fe2:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	69db      	ldr	r3, [r3, #28]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d04e      	beq.n	8012090 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	613b      	str	r3, [r7, #16]
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8011ffa:	e021      	b.n	8012040 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6a1a      	ldr	r2, [r3, #32]
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	1c59      	adds	r1, r3, #1
 8012004:	6179      	str	r1, [r7, #20]
 8012006:	4413      	add	r3, r2
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801200c:	7bfb      	ldrb	r3, [r7, #15]
 801200e:	2b20      	cmp	r3, #32
 8012010:	d100      	bne.n	8012014 <get_fileinfo+0x3a>
 8012012:	e015      	b.n	8012040 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012014:	7bfb      	ldrb	r3, [r7, #15]
 8012016:	2b05      	cmp	r3, #5
 8012018:	d101      	bne.n	801201e <get_fileinfo+0x44>
 801201a:	23e5      	movs	r3, #229	; 0xe5
 801201c:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	2b09      	cmp	r3, #9
 8012022:	d106      	bne.n	8012032 <get_fileinfo+0x58>
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	1c5a      	adds	r2, r3, #1
 8012028:	613a      	str	r2, [r7, #16]
 801202a:	683a      	ldr	r2, [r7, #0]
 801202c:	4413      	add	r3, r2
 801202e:	222e      	movs	r2, #46	; 0x2e
 8012030:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	1c5a      	adds	r2, r3, #1
 8012036:	613a      	str	r2, [r7, #16]
 8012038:	683a      	ldr	r2, [r7, #0]
 801203a:	4413      	add	r3, r2
 801203c:	7bfa      	ldrb	r2, [r7, #15]
 801203e:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	2b0a      	cmp	r3, #10
 8012044:	d9da      	bls.n	8011ffc <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8012046:	683a      	ldr	r2, [r7, #0]
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	4413      	add	r3, r2
 801204c:	3309      	adds	r3, #9
 801204e:	2200      	movs	r2, #0
 8012050:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6a1b      	ldr	r3, [r3, #32]
 8012056:	7ada      	ldrb	r2, [r3, #11]
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6a1b      	ldr	r3, [r3, #32]
 8012060:	331c      	adds	r3, #28
 8012062:	4618      	mov	r0, r3
 8012064:	f7fe fe76 	bl	8010d54 <ld_dword>
 8012068:	4602      	mov	r2, r0
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6a1b      	ldr	r3, [r3, #32]
 8012072:	3316      	adds	r3, #22
 8012074:	4618      	mov	r0, r3
 8012076:	f7fe fe6d 	bl	8010d54 <ld_dword>
 801207a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	b29a      	uxth	r2, r3
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	80da      	strh	r2, [r3, #6]
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	0c1b      	lsrs	r3, r3, #16
 8012088:	b29a      	uxth	r2, r3
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	809a      	strh	r2, [r3, #4]
 801208e:	e000      	b.n	8012092 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012090:	bf00      	nop
}
 8012092:	3718      	adds	r7, #24
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}

08012098 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b088      	sub	sp, #32
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	60fb      	str	r3, [r7, #12]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	3324      	adds	r3, #36	; 0x24
 80120ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80120ae:	220b      	movs	r2, #11
 80120b0:	2120      	movs	r1, #32
 80120b2:	68b8      	ldr	r0, [r7, #8]
 80120b4:	f7fe fed9 	bl	8010e6a <mem_set>
	si = i = 0; ni = 8;
 80120b8:	2300      	movs	r3, #0
 80120ba:	613b      	str	r3, [r7, #16]
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	61fb      	str	r3, [r7, #28]
 80120c0:	2308      	movs	r3, #8
 80120c2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80120c4:	69fb      	ldr	r3, [r7, #28]
 80120c6:	1c5a      	adds	r2, r3, #1
 80120c8:	61fa      	str	r2, [r7, #28]
 80120ca:	68fa      	ldr	r2, [r7, #12]
 80120cc:	4413      	add	r3, r2
 80120ce:	781b      	ldrb	r3, [r3, #0]
 80120d0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80120d2:	7efb      	ldrb	r3, [r7, #27]
 80120d4:	2b20      	cmp	r3, #32
 80120d6:	d94e      	bls.n	8012176 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80120d8:	7efb      	ldrb	r3, [r7, #27]
 80120da:	2b2f      	cmp	r3, #47	; 0x2f
 80120dc:	d006      	beq.n	80120ec <create_name+0x54>
 80120de:	7efb      	ldrb	r3, [r7, #27]
 80120e0:	2b5c      	cmp	r3, #92	; 0x5c
 80120e2:	d110      	bne.n	8012106 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80120e4:	e002      	b.n	80120ec <create_name+0x54>
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	3301      	adds	r3, #1
 80120ea:	61fb      	str	r3, [r7, #28]
 80120ec:	68fa      	ldr	r2, [r7, #12]
 80120ee:	69fb      	ldr	r3, [r7, #28]
 80120f0:	4413      	add	r3, r2
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	2b2f      	cmp	r3, #47	; 0x2f
 80120f6:	d0f6      	beq.n	80120e6 <create_name+0x4e>
 80120f8:	68fa      	ldr	r2, [r7, #12]
 80120fa:	69fb      	ldr	r3, [r7, #28]
 80120fc:	4413      	add	r3, r2
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	2b5c      	cmp	r3, #92	; 0x5c
 8012102:	d0f0      	beq.n	80120e6 <create_name+0x4e>
			break;
 8012104:	e038      	b.n	8012178 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012106:	7efb      	ldrb	r3, [r7, #27]
 8012108:	2b2e      	cmp	r3, #46	; 0x2e
 801210a:	d003      	beq.n	8012114 <create_name+0x7c>
 801210c:	693a      	ldr	r2, [r7, #16]
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	429a      	cmp	r2, r3
 8012112:	d30c      	bcc.n	801212e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	2b0b      	cmp	r3, #11
 8012118:	d002      	beq.n	8012120 <create_name+0x88>
 801211a:	7efb      	ldrb	r3, [r7, #27]
 801211c:	2b2e      	cmp	r3, #46	; 0x2e
 801211e:	d001      	beq.n	8012124 <create_name+0x8c>
 8012120:	2306      	movs	r3, #6
 8012122:	e044      	b.n	80121ae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012124:	2308      	movs	r3, #8
 8012126:	613b      	str	r3, [r7, #16]
 8012128:	230b      	movs	r3, #11
 801212a:	617b      	str	r3, [r7, #20]
			continue;
 801212c:	e022      	b.n	8012174 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801212e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012132:	2b00      	cmp	r3, #0
 8012134:	da04      	bge.n	8012140 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012136:	7efb      	ldrb	r3, [r7, #27]
 8012138:	3b80      	subs	r3, #128	; 0x80
 801213a:	4a1f      	ldr	r2, [pc, #124]	; (80121b8 <create_name+0x120>)
 801213c:	5cd3      	ldrb	r3, [r2, r3]
 801213e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012140:	7efb      	ldrb	r3, [r7, #27]
 8012142:	4619      	mov	r1, r3
 8012144:	481d      	ldr	r0, [pc, #116]	; (80121bc <create_name+0x124>)
 8012146:	f7fe fed2 	bl	8010eee <chk_chr>
 801214a:	4603      	mov	r3, r0
 801214c:	2b00      	cmp	r3, #0
 801214e:	d001      	beq.n	8012154 <create_name+0xbc>
 8012150:	2306      	movs	r3, #6
 8012152:	e02c      	b.n	80121ae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012154:	7efb      	ldrb	r3, [r7, #27]
 8012156:	2b60      	cmp	r3, #96	; 0x60
 8012158:	d905      	bls.n	8012166 <create_name+0xce>
 801215a:	7efb      	ldrb	r3, [r7, #27]
 801215c:	2b7a      	cmp	r3, #122	; 0x7a
 801215e:	d802      	bhi.n	8012166 <create_name+0xce>
 8012160:	7efb      	ldrb	r3, [r7, #27]
 8012162:	3b20      	subs	r3, #32
 8012164:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	1c5a      	adds	r2, r3, #1
 801216a:	613a      	str	r2, [r7, #16]
 801216c:	68ba      	ldr	r2, [r7, #8]
 801216e:	4413      	add	r3, r2
 8012170:	7efa      	ldrb	r2, [r7, #27]
 8012172:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012174:	e7a6      	b.n	80120c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012176:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012178:	68fa      	ldr	r2, [r7, #12]
 801217a:	69fb      	ldr	r3, [r7, #28]
 801217c:	441a      	add	r2, r3
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012182:	693b      	ldr	r3, [r7, #16]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d101      	bne.n	801218c <create_name+0xf4>
 8012188:	2306      	movs	r3, #6
 801218a:	e010      	b.n	80121ae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	2be5      	cmp	r3, #229	; 0xe5
 8012192:	d102      	bne.n	801219a <create_name+0x102>
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	2205      	movs	r2, #5
 8012198:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801219a:	7efb      	ldrb	r3, [r7, #27]
 801219c:	2b20      	cmp	r3, #32
 801219e:	d801      	bhi.n	80121a4 <create_name+0x10c>
 80121a0:	2204      	movs	r2, #4
 80121a2:	e000      	b.n	80121a6 <create_name+0x10e>
 80121a4:	2200      	movs	r2, #0
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	330b      	adds	r3, #11
 80121aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80121ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3720      	adds	r7, #32
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
 80121b6:	bf00      	nop
 80121b8:	0805b848 	.word	0x0805b848
 80121bc:	0801cdb4 	.word	0x0801cdb4

080121c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b086      	sub	sp, #24
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80121d4:	e002      	b.n	80121dc <follow_path+0x1c>
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	3301      	adds	r3, #1
 80121da:	603b      	str	r3, [r7, #0]
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	2b2f      	cmp	r3, #47	; 0x2f
 80121e2:	d0f8      	beq.n	80121d6 <follow_path+0x16>
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	2b5c      	cmp	r3, #92	; 0x5c
 80121ea:	d0f4      	beq.n	80121d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	2200      	movs	r2, #0
 80121f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	2b1f      	cmp	r3, #31
 80121f8:	d80a      	bhi.n	8012210 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2280      	movs	r2, #128	; 0x80
 80121fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012202:	2100      	movs	r1, #0
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f7ff fc1f 	bl	8011a48 <dir_sdi>
 801220a:	4603      	mov	r3, r0
 801220c:	75fb      	strb	r3, [r7, #23]
 801220e:	e048      	b.n	80122a2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012210:	463b      	mov	r3, r7
 8012212:	4619      	mov	r1, r3
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f7ff ff3f 	bl	8012098 <create_name>
 801221a:	4603      	mov	r3, r0
 801221c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801221e:	7dfb      	ldrb	r3, [r7, #23]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d139      	bne.n	8012298 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f7ff fe51 	bl	8011ecc <dir_find>
 801222a:	4603      	mov	r3, r0
 801222c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012234:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012236:	7dfb      	ldrb	r3, [r7, #23]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d00a      	beq.n	8012252 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801223c:	7dfb      	ldrb	r3, [r7, #23]
 801223e:	2b04      	cmp	r3, #4
 8012240:	d12c      	bne.n	801229c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012242:	7afb      	ldrb	r3, [r7, #11]
 8012244:	f003 0304 	and.w	r3, r3, #4
 8012248:	2b00      	cmp	r3, #0
 801224a:	d127      	bne.n	801229c <follow_path+0xdc>
 801224c:	2305      	movs	r3, #5
 801224e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012250:	e024      	b.n	801229c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012252:	7afb      	ldrb	r3, [r7, #11]
 8012254:	f003 0304 	and.w	r3, r3, #4
 8012258:	2b00      	cmp	r3, #0
 801225a:	d121      	bne.n	80122a0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	799b      	ldrb	r3, [r3, #6]
 8012260:	f003 0310 	and.w	r3, r3, #16
 8012264:	2b00      	cmp	r3, #0
 8012266:	d102      	bne.n	801226e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012268:	2305      	movs	r3, #5
 801226a:	75fb      	strb	r3, [r7, #23]
 801226c:	e019      	b.n	80122a2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	695b      	ldr	r3, [r3, #20]
 8012278:	68fa      	ldr	r2, [r7, #12]
 801227a:	8992      	ldrh	r2, [r2, #12]
 801227c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012280:	fb00 f202 	mul.w	r2, r0, r2
 8012284:	1a9b      	subs	r3, r3, r2
 8012286:	440b      	add	r3, r1
 8012288:	4619      	mov	r1, r3
 801228a:	68f8      	ldr	r0, [r7, #12]
 801228c:	f7ff fd82 	bl	8011d94 <ld_clust>
 8012290:	4602      	mov	r2, r0
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012296:	e7bb      	b.n	8012210 <follow_path+0x50>
			if (res != FR_OK) break;
 8012298:	bf00      	nop
 801229a:	e002      	b.n	80122a2 <follow_path+0xe2>
				break;
 801229c:	bf00      	nop
 801229e:	e000      	b.n	80122a2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80122a0:	bf00      	nop
			}
		}
	}

	return res;
 80122a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3718      	adds	r7, #24
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80122ac:	b480      	push	{r7}
 80122ae:	b087      	sub	sp, #28
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80122b4:	f04f 33ff 	mov.w	r3, #4294967295
 80122b8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d031      	beq.n	8012326 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	617b      	str	r3, [r7, #20]
 80122c8:	e002      	b.n	80122d0 <get_ldnumber+0x24>
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	3301      	adds	r3, #1
 80122ce:	617b      	str	r3, [r7, #20]
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	2b20      	cmp	r3, #32
 80122d6:	d903      	bls.n	80122e0 <get_ldnumber+0x34>
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	2b3a      	cmp	r3, #58	; 0x3a
 80122de:	d1f4      	bne.n	80122ca <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	2b3a      	cmp	r3, #58	; 0x3a
 80122e6:	d11c      	bne.n	8012322 <get_ldnumber+0x76>
			tp = *path;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	1c5a      	adds	r2, r3, #1
 80122f2:	60fa      	str	r2, [r7, #12]
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	3b30      	subs	r3, #48	; 0x30
 80122f8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	2b09      	cmp	r3, #9
 80122fe:	d80e      	bhi.n	801231e <get_ldnumber+0x72>
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	429a      	cmp	r2, r3
 8012306:	d10a      	bne.n	801231e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d107      	bne.n	801231e <get_ldnumber+0x72>
					vol = (int)i;
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	3301      	adds	r3, #1
 8012316:	617b      	str	r3, [r7, #20]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	697a      	ldr	r2, [r7, #20]
 801231c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	e002      	b.n	8012328 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012322:	2300      	movs	r3, #0
 8012324:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012326:	693b      	ldr	r3, [r7, #16]
}
 8012328:	4618      	mov	r0, r3
 801232a:	371c      	adds	r7, #28
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2200      	movs	r2, #0
 8012342:	70da      	strb	r2, [r3, #3]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f04f 32ff 	mov.w	r2, #4294967295
 801234a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801234c:	6839      	ldr	r1, [r7, #0]
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f7fe ff98 	bl	8011284 <move_window>
 8012354:	4603      	mov	r3, r0
 8012356:	2b00      	cmp	r3, #0
 8012358:	d001      	beq.n	801235e <check_fs+0x2a>
 801235a:	2304      	movs	r3, #4
 801235c:	e038      	b.n	80123d0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	3334      	adds	r3, #52	; 0x34
 8012362:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012366:	4618      	mov	r0, r3
 8012368:	f7fe fcdc 	bl	8010d24 <ld_word>
 801236c:	4603      	mov	r3, r0
 801236e:	461a      	mov	r2, r3
 8012370:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012374:	429a      	cmp	r2, r3
 8012376:	d001      	beq.n	801237c <check_fs+0x48>
 8012378:	2303      	movs	r3, #3
 801237a:	e029      	b.n	80123d0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012382:	2be9      	cmp	r3, #233	; 0xe9
 8012384:	d009      	beq.n	801239a <check_fs+0x66>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801238c:	2beb      	cmp	r3, #235	; 0xeb
 801238e:	d11e      	bne.n	80123ce <check_fs+0x9a>
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012396:	2b90      	cmp	r3, #144	; 0x90
 8012398:	d119      	bne.n	80123ce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	3334      	adds	r3, #52	; 0x34
 801239e:	3336      	adds	r3, #54	; 0x36
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7fe fcd7 	bl	8010d54 <ld_dword>
 80123a6:	4603      	mov	r3, r0
 80123a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80123ac:	4a0a      	ldr	r2, [pc, #40]	; (80123d8 <check_fs+0xa4>)
 80123ae:	4293      	cmp	r3, r2
 80123b0:	d101      	bne.n	80123b6 <check_fs+0x82>
 80123b2:	2300      	movs	r3, #0
 80123b4:	e00c      	b.n	80123d0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	3334      	adds	r3, #52	; 0x34
 80123ba:	3352      	adds	r3, #82	; 0x52
 80123bc:	4618      	mov	r0, r3
 80123be:	f7fe fcc9 	bl	8010d54 <ld_dword>
 80123c2:	4603      	mov	r3, r0
 80123c4:	4a05      	ldr	r2, [pc, #20]	; (80123dc <check_fs+0xa8>)
 80123c6:	4293      	cmp	r3, r2
 80123c8:	d101      	bne.n	80123ce <check_fs+0x9a>
 80123ca:	2300      	movs	r3, #0
 80123cc:	e000      	b.n	80123d0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80123ce:	2302      	movs	r3, #2
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	00544146 	.word	0x00544146
 80123dc:	33544146 	.word	0x33544146

080123e0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b096      	sub	sp, #88	; 0x58
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	60f8      	str	r0, [r7, #12]
 80123e8:	60b9      	str	r1, [r7, #8]
 80123ea:	4613      	mov	r3, r2
 80123ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	2200      	movs	r2, #0
 80123f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80123f4:	68f8      	ldr	r0, [r7, #12]
 80123f6:	f7ff ff59 	bl	80122ac <get_ldnumber>
 80123fa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80123fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123fe:	2b00      	cmp	r3, #0
 8012400:	da01      	bge.n	8012406 <find_volume+0x26>
 8012402:	230b      	movs	r3, #11
 8012404:	e262      	b.n	80128cc <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012406:	4a9f      	ldr	r2, [pc, #636]	; (8012684 <find_volume+0x2a4>)
 8012408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801240e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012412:	2b00      	cmp	r3, #0
 8012414:	d101      	bne.n	801241a <find_volume+0x3a>
 8012416:	230c      	movs	r3, #12
 8012418:	e258      	b.n	80128cc <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801241e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012420:	79fb      	ldrb	r3, [r7, #7]
 8012422:	f023 0301 	bic.w	r3, r3, #1
 8012426:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d01a      	beq.n	8012466 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012432:	785b      	ldrb	r3, [r3, #1]
 8012434:	4618      	mov	r0, r3
 8012436:	f7fe fbd7 	bl	8010be8 <disk_status>
 801243a:	4603      	mov	r3, r0
 801243c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012440:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012444:	f003 0301 	and.w	r3, r3, #1
 8012448:	2b00      	cmp	r3, #0
 801244a:	d10c      	bne.n	8012466 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801244c:	79fb      	ldrb	r3, [r7, #7]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d007      	beq.n	8012462 <find_volume+0x82>
 8012452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012456:	f003 0304 	and.w	r3, r3, #4
 801245a:	2b00      	cmp	r3, #0
 801245c:	d001      	beq.n	8012462 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801245e:	230a      	movs	r3, #10
 8012460:	e234      	b.n	80128cc <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8012462:	2300      	movs	r3, #0
 8012464:	e232      	b.n	80128cc <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012468:	2200      	movs	r2, #0
 801246a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801246c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801246e:	b2da      	uxtb	r2, r3
 8012470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012472:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012476:	785b      	ldrb	r3, [r3, #1]
 8012478:	4618      	mov	r0, r3
 801247a:	f7fe fbcf 	bl	8010c1c <disk_initialize>
 801247e:	4603      	mov	r3, r0
 8012480:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012484:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012488:	f003 0301 	and.w	r3, r3, #1
 801248c:	2b00      	cmp	r3, #0
 801248e:	d001      	beq.n	8012494 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012490:	2303      	movs	r3, #3
 8012492:	e21b      	b.n	80128cc <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012494:	79fb      	ldrb	r3, [r7, #7]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d007      	beq.n	80124aa <find_volume+0xca>
 801249a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801249e:	f003 0304 	and.w	r3, r3, #4
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d001      	beq.n	80124aa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80124a6:	230a      	movs	r3, #10
 80124a8:	e210      	b.n	80128cc <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80124aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ac:	7858      	ldrb	r0, [r3, #1]
 80124ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b0:	330c      	adds	r3, #12
 80124b2:	461a      	mov	r2, r3
 80124b4:	2102      	movs	r1, #2
 80124b6:	f7fe fc17 	bl	8010ce8 <disk_ioctl>
 80124ba:	4603      	mov	r3, r0
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d001      	beq.n	80124c4 <find_volume+0xe4>
 80124c0:	2301      	movs	r3, #1
 80124c2:	e203      	b.n	80128cc <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80124c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c6:	899b      	ldrh	r3, [r3, #12]
 80124c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80124cc:	d80d      	bhi.n	80124ea <find_volume+0x10a>
 80124ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d0:	899b      	ldrh	r3, [r3, #12]
 80124d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124d6:	d308      	bcc.n	80124ea <find_volume+0x10a>
 80124d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124da:	899b      	ldrh	r3, [r3, #12]
 80124dc:	461a      	mov	r2, r3
 80124de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e0:	899b      	ldrh	r3, [r3, #12]
 80124e2:	3b01      	subs	r3, #1
 80124e4:	4013      	ands	r3, r2
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d001      	beq.n	80124ee <find_volume+0x10e>
 80124ea:	2301      	movs	r3, #1
 80124ec:	e1ee      	b.n	80128cc <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80124ee:	2300      	movs	r3, #0
 80124f0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80124f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80124f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80124f6:	f7ff ff1d 	bl	8012334 <check_fs>
 80124fa:	4603      	mov	r3, r0
 80124fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012504:	2b02      	cmp	r3, #2
 8012506:	d149      	bne.n	801259c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012508:	2300      	movs	r3, #0
 801250a:	643b      	str	r3, [r7, #64]	; 0x40
 801250c:	e01e      	b.n	801254c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801250e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012510:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012516:	011b      	lsls	r3, r3, #4
 8012518:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801251c:	4413      	add	r3, r2
 801251e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012522:	3304      	adds	r3, #4
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d006      	beq.n	8012538 <find_volume+0x158>
 801252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801252c:	3308      	adds	r3, #8
 801252e:	4618      	mov	r0, r3
 8012530:	f7fe fc10 	bl	8010d54 <ld_dword>
 8012534:	4602      	mov	r2, r0
 8012536:	e000      	b.n	801253a <find_volume+0x15a>
 8012538:	2200      	movs	r2, #0
 801253a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801253c:	009b      	lsls	r3, r3, #2
 801253e:	3358      	adds	r3, #88	; 0x58
 8012540:	443b      	add	r3, r7
 8012542:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012548:	3301      	adds	r3, #1
 801254a:	643b      	str	r3, [r7, #64]	; 0x40
 801254c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801254e:	2b03      	cmp	r3, #3
 8012550:	d9dd      	bls.n	801250e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012552:	2300      	movs	r3, #0
 8012554:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012558:	2b00      	cmp	r3, #0
 801255a:	d002      	beq.n	8012562 <find_volume+0x182>
 801255c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801255e:	3b01      	subs	r3, #1
 8012560:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012564:	009b      	lsls	r3, r3, #2
 8012566:	3358      	adds	r3, #88	; 0x58
 8012568:	443b      	add	r3, r7
 801256a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801256e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012572:	2b00      	cmp	r3, #0
 8012574:	d005      	beq.n	8012582 <find_volume+0x1a2>
 8012576:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012578:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801257a:	f7ff fedb 	bl	8012334 <check_fs>
 801257e:	4603      	mov	r3, r0
 8012580:	e000      	b.n	8012584 <find_volume+0x1a4>
 8012582:	2303      	movs	r3, #3
 8012584:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012588:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801258c:	2b01      	cmp	r3, #1
 801258e:	d905      	bls.n	801259c <find_volume+0x1bc>
 8012590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012592:	3301      	adds	r3, #1
 8012594:	643b      	str	r3, [r7, #64]	; 0x40
 8012596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012598:	2b03      	cmp	r3, #3
 801259a:	d9e2      	bls.n	8012562 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801259c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125a0:	2b04      	cmp	r3, #4
 80125a2:	d101      	bne.n	80125a8 <find_volume+0x1c8>
 80125a4:	2301      	movs	r3, #1
 80125a6:	e191      	b.n	80128cc <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80125a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125ac:	2b01      	cmp	r3, #1
 80125ae:	d901      	bls.n	80125b4 <find_volume+0x1d4>
 80125b0:	230d      	movs	r3, #13
 80125b2:	e18b      	b.n	80128cc <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80125b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b6:	3334      	adds	r3, #52	; 0x34
 80125b8:	330b      	adds	r3, #11
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7fe fbb2 	bl	8010d24 <ld_word>
 80125c0:	4603      	mov	r3, r0
 80125c2:	461a      	mov	r2, r3
 80125c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c6:	899b      	ldrh	r3, [r3, #12]
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d001      	beq.n	80125d0 <find_volume+0x1f0>
 80125cc:	230d      	movs	r3, #13
 80125ce:	e17d      	b.n	80128cc <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80125d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d2:	3334      	adds	r3, #52	; 0x34
 80125d4:	3316      	adds	r3, #22
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fe fba4 	bl	8010d24 <ld_word>
 80125dc:	4603      	mov	r3, r0
 80125de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80125e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d106      	bne.n	80125f4 <find_volume+0x214>
 80125e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e8:	3334      	adds	r3, #52	; 0x34
 80125ea:	3324      	adds	r3, #36	; 0x24
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7fe fbb1 	bl	8010d54 <ld_dword>
 80125f2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80125f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80125f8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80125fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012602:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012606:	789b      	ldrb	r3, [r3, #2]
 8012608:	2b01      	cmp	r3, #1
 801260a:	d005      	beq.n	8012618 <find_volume+0x238>
 801260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260e:	789b      	ldrb	r3, [r3, #2]
 8012610:	2b02      	cmp	r3, #2
 8012612:	d001      	beq.n	8012618 <find_volume+0x238>
 8012614:	230d      	movs	r3, #13
 8012616:	e159      	b.n	80128cc <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261a:	789b      	ldrb	r3, [r3, #2]
 801261c:	461a      	mov	r2, r3
 801261e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012620:	fb02 f303 	mul.w	r3, r2, r3
 8012624:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801262c:	b29a      	uxth	r2, r3
 801262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012630:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012634:	895b      	ldrh	r3, [r3, #10]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d008      	beq.n	801264c <find_volume+0x26c>
 801263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263c:	895b      	ldrh	r3, [r3, #10]
 801263e:	461a      	mov	r2, r3
 8012640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012642:	895b      	ldrh	r3, [r3, #10]
 8012644:	3b01      	subs	r3, #1
 8012646:	4013      	ands	r3, r2
 8012648:	2b00      	cmp	r3, #0
 801264a:	d001      	beq.n	8012650 <find_volume+0x270>
 801264c:	230d      	movs	r3, #13
 801264e:	e13d      	b.n	80128cc <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012652:	3334      	adds	r3, #52	; 0x34
 8012654:	3311      	adds	r3, #17
 8012656:	4618      	mov	r0, r3
 8012658:	f7fe fb64 	bl	8010d24 <ld_word>
 801265c:	4603      	mov	r3, r0
 801265e:	461a      	mov	r2, r3
 8012660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012662:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012666:	891b      	ldrh	r3, [r3, #8]
 8012668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801266a:	8992      	ldrh	r2, [r2, #12]
 801266c:	0952      	lsrs	r2, r2, #5
 801266e:	b292      	uxth	r2, r2
 8012670:	fbb3 f1f2 	udiv	r1, r3, r2
 8012674:	fb01 f202 	mul.w	r2, r1, r2
 8012678:	1a9b      	subs	r3, r3, r2
 801267a:	b29b      	uxth	r3, r3
 801267c:	2b00      	cmp	r3, #0
 801267e:	d003      	beq.n	8012688 <find_volume+0x2a8>
 8012680:	230d      	movs	r3, #13
 8012682:	e123      	b.n	80128cc <find_volume+0x4ec>
 8012684:	20005dfc 	.word	0x20005dfc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268a:	3334      	adds	r3, #52	; 0x34
 801268c:	3313      	adds	r3, #19
 801268e:	4618      	mov	r0, r3
 8012690:	f7fe fb48 	bl	8010d24 <ld_word>
 8012694:	4603      	mov	r3, r0
 8012696:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801269a:	2b00      	cmp	r3, #0
 801269c:	d106      	bne.n	80126ac <find_volume+0x2cc>
 801269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a0:	3334      	adds	r3, #52	; 0x34
 80126a2:	3320      	adds	r3, #32
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7fe fb55 	bl	8010d54 <ld_dword>
 80126aa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80126ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ae:	3334      	adds	r3, #52	; 0x34
 80126b0:	330e      	adds	r3, #14
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7fe fb36 	bl	8010d24 <ld_word>
 80126b8:	4603      	mov	r3, r0
 80126ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80126bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d101      	bne.n	80126c6 <find_volume+0x2e6>
 80126c2:	230d      	movs	r3, #13
 80126c4:	e102      	b.n	80128cc <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80126c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80126c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126ca:	4413      	add	r3, r2
 80126cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126ce:	8911      	ldrh	r1, [r2, #8]
 80126d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126d2:	8992      	ldrh	r2, [r2, #12]
 80126d4:	0952      	lsrs	r2, r2, #5
 80126d6:	b292      	uxth	r2, r2
 80126d8:	fbb1 f2f2 	udiv	r2, r1, r2
 80126dc:	b292      	uxth	r2, r2
 80126de:	4413      	add	r3, r2
 80126e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80126e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80126e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d201      	bcs.n	80126ee <find_volume+0x30e>
 80126ea:	230d      	movs	r3, #13
 80126ec:	e0ee      	b.n	80128cc <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80126ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80126f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f2:	1ad3      	subs	r3, r2, r3
 80126f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126f6:	8952      	ldrh	r2, [r2, #10]
 80126f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80126fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80126fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012700:	2b00      	cmp	r3, #0
 8012702:	d101      	bne.n	8012708 <find_volume+0x328>
 8012704:	230d      	movs	r3, #13
 8012706:	e0e1      	b.n	80128cc <find_volume+0x4ec>
		fmt = FS_FAT32;
 8012708:	2303      	movs	r3, #3
 801270a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012710:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012714:	4293      	cmp	r3, r2
 8012716:	d802      	bhi.n	801271e <find_volume+0x33e>
 8012718:	2302      	movs	r3, #2
 801271a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012720:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012724:	4293      	cmp	r3, r2
 8012726:	d802      	bhi.n	801272e <find_volume+0x34e>
 8012728:	2301      	movs	r3, #1
 801272a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012730:	1c9a      	adds	r2, r3, #2
 8012732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012734:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012738:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801273a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801273c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801273e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012740:	441a      	add	r2, r3
 8012742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012744:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012746:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274a:	441a      	add	r2, r3
 801274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012754:	2b03      	cmp	r3, #3
 8012756:	d11e      	bne.n	8012796 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801275a:	3334      	adds	r3, #52	; 0x34
 801275c:	332a      	adds	r3, #42	; 0x2a
 801275e:	4618      	mov	r0, r3
 8012760:	f7fe fae0 	bl	8010d24 <ld_word>
 8012764:	4603      	mov	r3, r0
 8012766:	2b00      	cmp	r3, #0
 8012768:	d001      	beq.n	801276e <find_volume+0x38e>
 801276a:	230d      	movs	r3, #13
 801276c:	e0ae      	b.n	80128cc <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012770:	891b      	ldrh	r3, [r3, #8]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d001      	beq.n	801277a <find_volume+0x39a>
 8012776:	230d      	movs	r3, #13
 8012778:	e0a8      	b.n	80128cc <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801277c:	3334      	adds	r3, #52	; 0x34
 801277e:	332c      	adds	r3, #44	; 0x2c
 8012780:	4618      	mov	r0, r3
 8012782:	f7fe fae7 	bl	8010d54 <ld_dword>
 8012786:	4602      	mov	r2, r0
 8012788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278e:	699b      	ldr	r3, [r3, #24]
 8012790:	009b      	lsls	r3, r3, #2
 8012792:	647b      	str	r3, [r7, #68]	; 0x44
 8012794:	e01f      	b.n	80127d6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012798:	891b      	ldrh	r3, [r3, #8]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d101      	bne.n	80127a2 <find_volume+0x3c2>
 801279e:	230d      	movs	r3, #13
 80127a0:	e094      	b.n	80128cc <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80127a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80127a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127a8:	441a      	add	r2, r3
 80127aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ac:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80127ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127b2:	2b02      	cmp	r3, #2
 80127b4:	d103      	bne.n	80127be <find_volume+0x3de>
 80127b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b8:	699b      	ldr	r3, [r3, #24]
 80127ba:	005b      	lsls	r3, r3, #1
 80127bc:	e00a      	b.n	80127d4 <find_volume+0x3f4>
 80127be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c0:	699a      	ldr	r2, [r3, #24]
 80127c2:	4613      	mov	r3, r2
 80127c4:	005b      	lsls	r3, r3, #1
 80127c6:	4413      	add	r3, r2
 80127c8:	085a      	lsrs	r2, r3, #1
 80127ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127cc:	699b      	ldr	r3, [r3, #24]
 80127ce:	f003 0301 	and.w	r3, r3, #1
 80127d2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80127d4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80127d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d8:	69da      	ldr	r2, [r3, #28]
 80127da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127dc:	899b      	ldrh	r3, [r3, #12]
 80127de:	4619      	mov	r1, r3
 80127e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127e2:	440b      	add	r3, r1
 80127e4:	3b01      	subs	r3, #1
 80127e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80127e8:	8989      	ldrh	r1, [r1, #12]
 80127ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d201      	bcs.n	80127f6 <find_volume+0x416>
 80127f2:	230d      	movs	r3, #13
 80127f4:	e06a      	b.n	80128cc <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80127f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f8:	f04f 32ff 	mov.w	r2, #4294967295
 80127fc:	615a      	str	r2, [r3, #20]
 80127fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012800:	695a      	ldr	r2, [r3, #20]
 8012802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012804:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012808:	2280      	movs	r2, #128	; 0x80
 801280a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801280c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012810:	2b03      	cmp	r3, #3
 8012812:	d149      	bne.n	80128a8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012816:	3334      	adds	r3, #52	; 0x34
 8012818:	3330      	adds	r3, #48	; 0x30
 801281a:	4618      	mov	r0, r3
 801281c:	f7fe fa82 	bl	8010d24 <ld_word>
 8012820:	4603      	mov	r3, r0
 8012822:	2b01      	cmp	r3, #1
 8012824:	d140      	bne.n	80128a8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012828:	3301      	adds	r3, #1
 801282a:	4619      	mov	r1, r3
 801282c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801282e:	f7fe fd29 	bl	8011284 <move_window>
 8012832:	4603      	mov	r3, r0
 8012834:	2b00      	cmp	r3, #0
 8012836:	d137      	bne.n	80128a8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8012838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801283a:	2200      	movs	r2, #0
 801283c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012840:	3334      	adds	r3, #52	; 0x34
 8012842:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012846:	4618      	mov	r0, r3
 8012848:	f7fe fa6c 	bl	8010d24 <ld_word>
 801284c:	4603      	mov	r3, r0
 801284e:	461a      	mov	r2, r3
 8012850:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012854:	429a      	cmp	r2, r3
 8012856:	d127      	bne.n	80128a8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285a:	3334      	adds	r3, #52	; 0x34
 801285c:	4618      	mov	r0, r3
 801285e:	f7fe fa79 	bl	8010d54 <ld_dword>
 8012862:	4603      	mov	r3, r0
 8012864:	4a1b      	ldr	r2, [pc, #108]	; (80128d4 <find_volume+0x4f4>)
 8012866:	4293      	cmp	r3, r2
 8012868:	d11e      	bne.n	80128a8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801286c:	3334      	adds	r3, #52	; 0x34
 801286e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012872:	4618      	mov	r0, r3
 8012874:	f7fe fa6e 	bl	8010d54 <ld_dword>
 8012878:	4603      	mov	r3, r0
 801287a:	4a17      	ldr	r2, [pc, #92]	; (80128d8 <find_volume+0x4f8>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d113      	bne.n	80128a8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012882:	3334      	adds	r3, #52	; 0x34
 8012884:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012888:	4618      	mov	r0, r3
 801288a:	f7fe fa63 	bl	8010d54 <ld_dword>
 801288e:	4602      	mov	r2, r0
 8012890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012892:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012896:	3334      	adds	r3, #52	; 0x34
 8012898:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801289c:	4618      	mov	r0, r3
 801289e:	f7fe fa59 	bl	8010d54 <ld_dword>
 80128a2:	4602      	mov	r2, r0
 80128a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80128a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80128ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80128b0:	4b0a      	ldr	r3, [pc, #40]	; (80128dc <find_volume+0x4fc>)
 80128b2:	881b      	ldrh	r3, [r3, #0]
 80128b4:	3301      	adds	r3, #1
 80128b6:	b29a      	uxth	r2, r3
 80128b8:	4b08      	ldr	r3, [pc, #32]	; (80128dc <find_volume+0x4fc>)
 80128ba:	801a      	strh	r2, [r3, #0]
 80128bc:	4b07      	ldr	r3, [pc, #28]	; (80128dc <find_volume+0x4fc>)
 80128be:	881a      	ldrh	r2, [r3, #0]
 80128c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80128c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80128c6:	f7fe fc75 	bl	80111b4 <clear_lock>
#endif
	return FR_OK;
 80128ca:	2300      	movs	r3, #0
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3758      	adds	r7, #88	; 0x58
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}
 80128d4:	41615252 	.word	0x41615252
 80128d8:	61417272 	.word	0x61417272
 80128dc:	20005e00 	.word	0x20005e00

080128e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b084      	sub	sp, #16
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80128ea:	2309      	movs	r3, #9
 80128ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d01c      	beq.n	801292e <validate+0x4e>
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d018      	beq.n	801292e <validate+0x4e>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d013      	beq.n	801292e <validate+0x4e>
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	889a      	ldrh	r2, [r3, #4]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	88db      	ldrh	r3, [r3, #6]
 8012910:	429a      	cmp	r2, r3
 8012912:	d10c      	bne.n	801292e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	785b      	ldrb	r3, [r3, #1]
 801291a:	4618      	mov	r0, r3
 801291c:	f7fe f964 	bl	8010be8 <disk_status>
 8012920:	4603      	mov	r3, r0
 8012922:	f003 0301 	and.w	r3, r3, #1
 8012926:	2b00      	cmp	r3, #0
 8012928:	d101      	bne.n	801292e <validate+0x4e>
			res = FR_OK;
 801292a:	2300      	movs	r3, #0
 801292c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801292e:	7bfb      	ldrb	r3, [r7, #15]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d102      	bne.n	801293a <validate+0x5a>
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	e000      	b.n	801293c <validate+0x5c>
 801293a:	2300      	movs	r3, #0
 801293c:	683a      	ldr	r2, [r7, #0]
 801293e:	6013      	str	r3, [r2, #0]
	return res;
 8012940:	7bfb      	ldrb	r3, [r7, #15]
}
 8012942:	4618      	mov	r0, r3
 8012944:	3710      	adds	r7, #16
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}
	...

0801294c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b088      	sub	sp, #32
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	4613      	mov	r3, r2
 8012958:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801295e:	f107 0310 	add.w	r3, r7, #16
 8012962:	4618      	mov	r0, r3
 8012964:	f7ff fca2 	bl	80122ac <get_ldnumber>
 8012968:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801296a:	69fb      	ldr	r3, [r7, #28]
 801296c:	2b00      	cmp	r3, #0
 801296e:	da01      	bge.n	8012974 <f_mount+0x28>
 8012970:	230b      	movs	r3, #11
 8012972:	e02b      	b.n	80129cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012974:	4a17      	ldr	r2, [pc, #92]	; (80129d4 <f_mount+0x88>)
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801297c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801297e:	69bb      	ldr	r3, [r7, #24]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d005      	beq.n	8012990 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012984:	69b8      	ldr	r0, [r7, #24]
 8012986:	f7fe fc15 	bl	80111b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801298a:	69bb      	ldr	r3, [r7, #24]
 801298c:	2200      	movs	r2, #0
 801298e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d002      	beq.n	801299c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	2200      	movs	r2, #0
 801299a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801299c:	68fa      	ldr	r2, [r7, #12]
 801299e:	490d      	ldr	r1, [pc, #52]	; (80129d4 <f_mount+0x88>)
 80129a0:	69fb      	ldr	r3, [r7, #28]
 80129a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d002      	beq.n	80129b2 <f_mount+0x66>
 80129ac:	79fb      	ldrb	r3, [r7, #7]
 80129ae:	2b01      	cmp	r3, #1
 80129b0:	d001      	beq.n	80129b6 <f_mount+0x6a>
 80129b2:	2300      	movs	r3, #0
 80129b4:	e00a      	b.n	80129cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80129b6:	f107 010c 	add.w	r1, r7, #12
 80129ba:	f107 0308 	add.w	r3, r7, #8
 80129be:	2200      	movs	r2, #0
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7ff fd0d 	bl	80123e0 <find_volume>
 80129c6:	4603      	mov	r3, r0
 80129c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80129ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3720      	adds	r7, #32
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}
 80129d4:	20005dfc 	.word	0x20005dfc

080129d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b098      	sub	sp, #96	; 0x60
 80129dc:	af00      	add	r7, sp, #0
 80129de:	60f8      	str	r0, [r7, #12]
 80129e0:	60b9      	str	r1, [r7, #8]
 80129e2:	4613      	mov	r3, r2
 80129e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d101      	bne.n	80129f0 <f_open+0x18>
 80129ec:	2309      	movs	r3, #9
 80129ee:	e1bb      	b.n	8012d68 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80129f0:	79fb      	ldrb	r3, [r7, #7]
 80129f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80129f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80129f8:	79fa      	ldrb	r2, [r7, #7]
 80129fa:	f107 0110 	add.w	r1, r7, #16
 80129fe:	f107 0308 	add.w	r3, r7, #8
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7ff fcec 	bl	80123e0 <find_volume>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	f040 819f 	bne.w	8012d56 <f_open+0x37e>
		dj.obj.fs = fs;
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012a1c:	68ba      	ldr	r2, [r7, #8]
 8012a1e:	f107 0314 	add.w	r3, r7, #20
 8012a22:	4611      	mov	r1, r2
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7ff fbcb 	bl	80121c0 <follow_path>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012a30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d11a      	bne.n	8012a6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012a38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012a3c:	b25b      	sxtb	r3, r3
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	da03      	bge.n	8012a4a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012a42:	2306      	movs	r3, #6
 8012a44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012a48:	e011      	b.n	8012a6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012a4a:	79fb      	ldrb	r3, [r7, #7]
 8012a4c:	f023 0301 	bic.w	r3, r3, #1
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	bf14      	ite	ne
 8012a54:	2301      	movne	r3, #1
 8012a56:	2300      	moveq	r3, #0
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	f107 0314 	add.w	r3, r7, #20
 8012a60:	4611      	mov	r1, r2
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7fe fa5e 	bl	8010f24 <chk_lock>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012a6e:	79fb      	ldrb	r3, [r7, #7]
 8012a70:	f003 031c 	and.w	r3, r3, #28
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d07f      	beq.n	8012b78 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012a78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d017      	beq.n	8012ab0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012a84:	2b04      	cmp	r3, #4
 8012a86:	d10e      	bne.n	8012aa6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012a88:	f7fe faa8 	bl	8010fdc <enq_lock>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d006      	beq.n	8012aa0 <f_open+0xc8>
 8012a92:	f107 0314 	add.w	r3, r7, #20
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7ff fa6d 	bl	8011f76 <dir_register>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	e000      	b.n	8012aa2 <f_open+0xca>
 8012aa0:	2312      	movs	r3, #18
 8012aa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012aa6:	79fb      	ldrb	r3, [r7, #7]
 8012aa8:	f043 0308 	orr.w	r3, r3, #8
 8012aac:	71fb      	strb	r3, [r7, #7]
 8012aae:	e010      	b.n	8012ad2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012ab0:	7ebb      	ldrb	r3, [r7, #26]
 8012ab2:	f003 0311 	and.w	r3, r3, #17
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d003      	beq.n	8012ac2 <f_open+0xea>
					res = FR_DENIED;
 8012aba:	2307      	movs	r3, #7
 8012abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012ac0:	e007      	b.n	8012ad2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012ac2:	79fb      	ldrb	r3, [r7, #7]
 8012ac4:	f003 0304 	and.w	r3, r3, #4
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d002      	beq.n	8012ad2 <f_open+0xfa>
 8012acc:	2308      	movs	r3, #8
 8012ace:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d168      	bne.n	8012bac <f_open+0x1d4>
 8012ada:	79fb      	ldrb	r3, [r7, #7]
 8012adc:	f003 0308 	and.w	r3, r3, #8
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d063      	beq.n	8012bac <f_open+0x1d4>
				dw = GET_FATTIME();
 8012ae4:	f7fd ff14 	bl	8010910 <get_fattime>
 8012ae8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aec:	330e      	adds	r3, #14
 8012aee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7fe f96d 	bl	8010dd0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012af8:	3316      	adds	r3, #22
 8012afa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7fe f967 	bl	8010dd0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b04:	330b      	adds	r3, #11
 8012b06:	2220      	movs	r2, #32
 8012b08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b0e:	4611      	mov	r1, r2
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7ff f93f 	bl	8011d94 <ld_clust>
 8012b16:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f7ff f957 	bl	8011dd2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b26:	331c      	adds	r3, #28
 8012b28:	2100      	movs	r1, #0
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7fe f950 	bl	8010dd0 <st_dword>
					fs->wflag = 1;
 8012b30:	693b      	ldr	r3, [r7, #16]
 8012b32:	2201      	movs	r2, #1
 8012b34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d037      	beq.n	8012bac <f_open+0x1d4>
						dw = fs->winsect;
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b40:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012b42:	f107 0314 	add.w	r3, r7, #20
 8012b46:	2200      	movs	r2, #0
 8012b48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7fe fe47 	bl	80117de <remove_chain>
 8012b50:	4603      	mov	r3, r0
 8012b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012b56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d126      	bne.n	8012bac <f_open+0x1d4>
							res = move_window(fs, dw);
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7fe fb8e 	bl	8011284 <move_window>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b72:	3a01      	subs	r2, #1
 8012b74:	611a      	str	r2, [r3, #16]
 8012b76:	e019      	b.n	8012bac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012b78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d115      	bne.n	8012bac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012b80:	7ebb      	ldrb	r3, [r7, #26]
 8012b82:	f003 0310 	and.w	r3, r3, #16
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d003      	beq.n	8012b92 <f_open+0x1ba>
					res = FR_NO_FILE;
 8012b8a:	2304      	movs	r3, #4
 8012b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012b90:	e00c      	b.n	8012bac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012b92:	79fb      	ldrb	r3, [r7, #7]
 8012b94:	f003 0302 	and.w	r3, r3, #2
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d007      	beq.n	8012bac <f_open+0x1d4>
 8012b9c:	7ebb      	ldrb	r3, [r7, #26]
 8012b9e:	f003 0301 	and.w	r3, r3, #1
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d002      	beq.n	8012bac <f_open+0x1d4>
						res = FR_DENIED;
 8012ba6:	2307      	movs	r3, #7
 8012ba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012bac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d128      	bne.n	8012c06 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012bb4:	79fb      	ldrb	r3, [r7, #7]
 8012bb6:	f003 0308 	and.w	r3, r3, #8
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d003      	beq.n	8012bc6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012bbe:	79fb      	ldrb	r3, [r7, #7]
 8012bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bc4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012bc6:	693b      	ldr	r3, [r7, #16]
 8012bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012bd4:	79fb      	ldrb	r3, [r7, #7]
 8012bd6:	f023 0301 	bic.w	r3, r3, #1
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	bf14      	ite	ne
 8012bde:	2301      	movne	r3, #1
 8012be0:	2300      	moveq	r3, #0
 8012be2:	b2db      	uxtb	r3, r3
 8012be4:	461a      	mov	r2, r3
 8012be6:	f107 0314 	add.w	r3, r7, #20
 8012bea:	4611      	mov	r1, r2
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7fe fa17 	bl	8011020 <inc_lock>
 8012bf2:	4602      	mov	r2, r0
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	691b      	ldr	r3, [r3, #16]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d102      	bne.n	8012c06 <f_open+0x22e>
 8012c00:	2302      	movs	r3, #2
 8012c02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	f040 80a3 	bne.w	8012d56 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012c10:	693b      	ldr	r3, [r7, #16]
 8012c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c14:	4611      	mov	r1, r2
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7ff f8bc 	bl	8011d94 <ld_clust>
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c24:	331c      	adds	r3, #28
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7fe f894 	bl	8010d54 <ld_dword>
 8012c2c:	4602      	mov	r2, r0
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	2200      	movs	r2, #0
 8012c36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012c38:	693a      	ldr	r2, [r7, #16]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	88da      	ldrh	r2, [r3, #6]
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	79fa      	ldrb	r2, [r7, #7]
 8012c4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	2200      	movs	r2, #0
 8012c56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	3330      	adds	r3, #48	; 0x30
 8012c62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012c66:	2100      	movs	r1, #0
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f7fe f8fe 	bl	8010e6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012c6e:	79fb      	ldrb	r3, [r7, #7]
 8012c70:	f003 0320 	and.w	r3, r3, #32
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d06e      	beq.n	8012d56 <f_open+0x37e>
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	68db      	ldr	r3, [r3, #12]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d06a      	beq.n	8012d56 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	68da      	ldr	r2, [r3, #12]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	895b      	ldrh	r3, [r3, #10]
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	899b      	ldrh	r3, [r3, #12]
 8012c92:	fb02 f303 	mul.w	r3, r2, r3
 8012c96:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	689b      	ldr	r3, [r3, #8]
 8012c9c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	68db      	ldr	r3, [r3, #12]
 8012ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8012ca4:	e016      	b.n	8012cd4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fe fba7 	bl	80113fe <get_fat>
 8012cb0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012cb4:	2b01      	cmp	r3, #1
 8012cb6:	d802      	bhi.n	8012cbe <f_open+0x2e6>
 8012cb8:	2302      	movs	r3, #2
 8012cba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cc4:	d102      	bne.n	8012ccc <f_open+0x2f4>
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012ccc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cd0:	1ad3      	subs	r3, r2, r3
 8012cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8012cd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d103      	bne.n	8012ce4 <f_open+0x30c>
 8012cdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d8e0      	bhi.n	8012ca6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ce8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012cea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d131      	bne.n	8012d56 <f_open+0x37e>
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	899b      	ldrh	r3, [r3, #12]
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8012cfe:	fb01 f202 	mul.w	r2, r1, r2
 8012d02:	1a9b      	subs	r3, r3, r2
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d026      	beq.n	8012d56 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7fe fb57 	bl	80113c0 <clust2sect>
 8012d12:	6478      	str	r0, [r7, #68]	; 0x44
 8012d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d103      	bne.n	8012d22 <f_open+0x34a>
						res = FR_INT_ERR;
 8012d1a:	2302      	movs	r3, #2
 8012d1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012d20:	e019      	b.n	8012d56 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	899b      	ldrh	r3, [r3, #12]
 8012d26:	461a      	mov	r2, r3
 8012d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8012d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d30:	441a      	add	r2, r3
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	7858      	ldrb	r0, [r3, #1]
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	6a1a      	ldr	r2, [r3, #32]
 8012d44:	2301      	movs	r3, #1
 8012d46:	f7fd ff8f 	bl	8010c68 <disk_read>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d002      	beq.n	8012d56 <f_open+0x37e>
 8012d50:	2301      	movs	r3, #1
 8012d52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012d56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d002      	beq.n	8012d64 <f_open+0x38c>
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	2200      	movs	r2, #0
 8012d62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012d64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3760      	adds	r7, #96	; 0x60
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}

08012d70 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b08e      	sub	sp, #56	; 0x38
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	60b9      	str	r1, [r7, #8]
 8012d7a:	607a      	str	r2, [r7, #4]
 8012d7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	2200      	movs	r2, #0
 8012d86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	f107 0214 	add.w	r2, r7, #20
 8012d8e:	4611      	mov	r1, r2
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7ff fda5 	bl	80128e0 <validate>
 8012d96:	4603      	mov	r3, r0
 8012d98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012d9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d107      	bne.n	8012db4 <f_read+0x44>
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	7d5b      	ldrb	r3, [r3, #21]
 8012da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012dac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d002      	beq.n	8012dba <f_read+0x4a>
 8012db4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012db8:	e135      	b.n	8013026 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	7d1b      	ldrb	r3, [r3, #20]
 8012dbe:	f003 0301 	and.w	r3, r3, #1
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d101      	bne.n	8012dca <f_read+0x5a>
 8012dc6:	2307      	movs	r3, #7
 8012dc8:	e12d      	b.n	8013026 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	68da      	ldr	r2, [r3, #12]
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	699b      	ldr	r3, [r3, #24]
 8012dd2:	1ad3      	subs	r3, r2, r3
 8012dd4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012dd6:	687a      	ldr	r2, [r7, #4]
 8012dd8:	6a3b      	ldr	r3, [r7, #32]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	f240 811e 	bls.w	801301c <f_read+0x2ac>
 8012de0:	6a3b      	ldr	r3, [r7, #32]
 8012de2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012de4:	e11a      	b.n	801301c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	699b      	ldr	r3, [r3, #24]
 8012dea:	697a      	ldr	r2, [r7, #20]
 8012dec:	8992      	ldrh	r2, [r2, #12]
 8012dee:	fbb3 f1f2 	udiv	r1, r3, r2
 8012df2:	fb01 f202 	mul.w	r2, r1, r2
 8012df6:	1a9b      	subs	r3, r3, r2
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	f040 80d5 	bne.w	8012fa8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	699b      	ldr	r3, [r3, #24]
 8012e02:	697a      	ldr	r2, [r7, #20]
 8012e04:	8992      	ldrh	r2, [r2, #12]
 8012e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e0a:	697a      	ldr	r2, [r7, #20]
 8012e0c:	8952      	ldrh	r2, [r2, #10]
 8012e0e:	3a01      	subs	r2, #1
 8012e10:	4013      	ands	r3, r2
 8012e12:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d12f      	bne.n	8012e7a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	699b      	ldr	r3, [r3, #24]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d103      	bne.n	8012e2a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	689b      	ldr	r3, [r3, #8]
 8012e26:	633b      	str	r3, [r7, #48]	; 0x30
 8012e28:	e013      	b.n	8012e52 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d007      	beq.n	8012e42 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	699b      	ldr	r3, [r3, #24]
 8012e36:	4619      	mov	r1, r3
 8012e38:	68f8      	ldr	r0, [r7, #12]
 8012e3a:	f7fe fdcd 	bl	80119d8 <clmt_clust>
 8012e3e:	6338      	str	r0, [r7, #48]	; 0x30
 8012e40:	e007      	b.n	8012e52 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012e42:	68fa      	ldr	r2, [r7, #12]
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	69db      	ldr	r3, [r3, #28]
 8012e48:	4619      	mov	r1, r3
 8012e4a:	4610      	mov	r0, r2
 8012e4c:	f7fe fad7 	bl	80113fe <get_fat>
 8012e50:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	d804      	bhi.n	8012e62 <f_read+0xf2>
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	2202      	movs	r2, #2
 8012e5c:	755a      	strb	r2, [r3, #21]
 8012e5e:	2302      	movs	r3, #2
 8012e60:	e0e1      	b.n	8013026 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e68:	d104      	bne.n	8012e74 <f_read+0x104>
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	2201      	movs	r2, #1
 8012e6e:	755a      	strb	r2, [r3, #21]
 8012e70:	2301      	movs	r3, #1
 8012e72:	e0d8      	b.n	8013026 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e78:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012e7a:	697a      	ldr	r2, [r7, #20]
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	69db      	ldr	r3, [r3, #28]
 8012e80:	4619      	mov	r1, r3
 8012e82:	4610      	mov	r0, r2
 8012e84:	f7fe fa9c 	bl	80113c0 <clust2sect>
 8012e88:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d104      	bne.n	8012e9a <f_read+0x12a>
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	2202      	movs	r2, #2
 8012e94:	755a      	strb	r2, [r3, #21]
 8012e96:	2302      	movs	r3, #2
 8012e98:	e0c5      	b.n	8013026 <f_read+0x2b6>
			sect += csect;
 8012e9a:	69ba      	ldr	r2, [r7, #24]
 8012e9c:	69fb      	ldr	r3, [r7, #28]
 8012e9e:	4413      	add	r3, r2
 8012ea0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	899b      	ldrh	r3, [r3, #12]
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8012eae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d041      	beq.n	8012f3a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012eb6:	69fa      	ldr	r2, [r7, #28]
 8012eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eba:	4413      	add	r3, r2
 8012ebc:	697a      	ldr	r2, [r7, #20]
 8012ebe:	8952      	ldrh	r2, [r2, #10]
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	d905      	bls.n	8012ed0 <f_read+0x160>
					cc = fs->csize - csect;
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	895b      	ldrh	r3, [r3, #10]
 8012ec8:	461a      	mov	r2, r3
 8012eca:	69fb      	ldr	r3, [r7, #28]
 8012ecc:	1ad3      	subs	r3, r2, r3
 8012ece:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012ed0:	697b      	ldr	r3, [r7, #20]
 8012ed2:	7858      	ldrb	r0, [r3, #1]
 8012ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed6:	69ba      	ldr	r2, [r7, #24]
 8012ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012eda:	f7fd fec5 	bl	8010c68 <disk_read>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d004      	beq.n	8012eee <f_read+0x17e>
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	755a      	strb	r2, [r3, #21]
 8012eea:	2301      	movs	r3, #1
 8012eec:	e09b      	b.n	8013026 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	7d1b      	ldrb	r3, [r3, #20]
 8012ef2:	b25b      	sxtb	r3, r3
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	da18      	bge.n	8012f2a <f_read+0x1ba>
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	6a1a      	ldr	r2, [r3, #32]
 8012efc:	69bb      	ldr	r3, [r7, #24]
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d911      	bls.n	8012f2a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	6a1a      	ldr	r2, [r3, #32]
 8012f0a:	69bb      	ldr	r3, [r7, #24]
 8012f0c:	1ad3      	subs	r3, r2, r3
 8012f0e:	697a      	ldr	r2, [r7, #20]
 8012f10:	8992      	ldrh	r2, [r2, #12]
 8012f12:	fb02 f303 	mul.w	r3, r2, r3
 8012f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f18:	18d0      	adds	r0, r2, r3
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	899b      	ldrh	r3, [r3, #12]
 8012f24:	461a      	mov	r2, r3
 8012f26:	f7fd ff7f 	bl	8010e28 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	899b      	ldrh	r3, [r3, #12]
 8012f2e:	461a      	mov	r2, r3
 8012f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f32:	fb02 f303 	mul.w	r3, r2, r3
 8012f36:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012f38:	e05c      	b.n	8012ff4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	6a1b      	ldr	r3, [r3, #32]
 8012f3e:	69ba      	ldr	r2, [r7, #24]
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d02e      	beq.n	8012fa2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	7d1b      	ldrb	r3, [r3, #20]
 8012f48:	b25b      	sxtb	r3, r3
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	da18      	bge.n	8012f80 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	7858      	ldrb	r0, [r3, #1]
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	6a1a      	ldr	r2, [r3, #32]
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	f7fd fea3 	bl	8010ca8 <disk_write>
 8012f62:	4603      	mov	r3, r0
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d004      	beq.n	8012f72 <f_read+0x202>
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	755a      	strb	r2, [r3, #21]
 8012f6e:	2301      	movs	r3, #1
 8012f70:	e059      	b.n	8013026 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	7d1b      	ldrb	r3, [r3, #20]
 8012f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f7a:	b2da      	uxtb	r2, r3
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	7858      	ldrb	r0, [r3, #1]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	69ba      	ldr	r2, [r7, #24]
 8012f8e:	f7fd fe6b 	bl	8010c68 <disk_read>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d004      	beq.n	8012fa2 <f_read+0x232>
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	2201      	movs	r2, #1
 8012f9c:	755a      	strb	r2, [r3, #21]
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	e041      	b.n	8013026 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	69ba      	ldr	r2, [r7, #24]
 8012fa6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	899b      	ldrh	r3, [r3, #12]
 8012fac:	4618      	mov	r0, r3
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	699b      	ldr	r3, [r3, #24]
 8012fb2:	697a      	ldr	r2, [r7, #20]
 8012fb4:	8992      	ldrh	r2, [r2, #12]
 8012fb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8012fba:	fb01 f202 	mul.w	r2, r1, r2
 8012fbe:	1a9b      	subs	r3, r3, r2
 8012fc0:	1ac3      	subs	r3, r0, r3
 8012fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d901      	bls.n	8012fd0 <f_read+0x260>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	699b      	ldr	r3, [r3, #24]
 8012fda:	697a      	ldr	r2, [r7, #20]
 8012fdc:	8992      	ldrh	r2, [r2, #12]
 8012fde:	fbb3 f0f2 	udiv	r0, r3, r2
 8012fe2:	fb00 f202 	mul.w	r2, r0, r2
 8012fe6:	1a9b      	subs	r3, r3, r2
 8012fe8:	440b      	add	r3, r1
 8012fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fec:	4619      	mov	r1, r3
 8012fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ff0:	f7fd ff1a 	bl	8010e28 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff8:	4413      	add	r3, r2
 8012ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	699a      	ldr	r2, [r3, #24]
 8013000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013002:	441a      	add	r2, r3
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	619a      	str	r2, [r3, #24]
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	681a      	ldr	r2, [r3, #0]
 801300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801300e:	441a      	add	r2, r3
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	601a      	str	r2, [r3, #0]
 8013014:	687a      	ldr	r2, [r7, #4]
 8013016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013018:	1ad3      	subs	r3, r2, r3
 801301a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2b00      	cmp	r3, #0
 8013020:	f47f aee1 	bne.w	8012de6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013024:	2300      	movs	r3, #0
}
 8013026:	4618      	mov	r0, r3
 8013028:	3738      	adds	r7, #56	; 0x38
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}

0801302e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801302e:	b580      	push	{r7, lr}
 8013030:	b08c      	sub	sp, #48	; 0x30
 8013032:	af00      	add	r7, sp, #0
 8013034:	60f8      	str	r0, [r7, #12]
 8013036:	60b9      	str	r1, [r7, #8]
 8013038:	607a      	str	r2, [r7, #4]
 801303a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	2200      	movs	r2, #0
 8013044:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	f107 0210 	add.w	r2, r7, #16
 801304c:	4611      	mov	r1, r2
 801304e:	4618      	mov	r0, r3
 8013050:	f7ff fc46 	bl	80128e0 <validate>
 8013054:	4603      	mov	r3, r0
 8013056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801305a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801305e:	2b00      	cmp	r3, #0
 8013060:	d107      	bne.n	8013072 <f_write+0x44>
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	7d5b      	ldrb	r3, [r3, #21]
 8013066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801306a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801306e:	2b00      	cmp	r3, #0
 8013070:	d002      	beq.n	8013078 <f_write+0x4a>
 8013072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013076:	e16a      	b.n	801334e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	7d1b      	ldrb	r3, [r3, #20]
 801307c:	f003 0302 	and.w	r3, r3, #2
 8013080:	2b00      	cmp	r3, #0
 8013082:	d101      	bne.n	8013088 <f_write+0x5a>
 8013084:	2307      	movs	r3, #7
 8013086:	e162      	b.n	801334e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	699a      	ldr	r2, [r3, #24]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	441a      	add	r2, r3
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	699b      	ldr	r3, [r3, #24]
 8013094:	429a      	cmp	r2, r3
 8013096:	f080 814c 	bcs.w	8013332 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	699b      	ldr	r3, [r3, #24]
 801309e:	43db      	mvns	r3, r3
 80130a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80130a2:	e146      	b.n	8013332 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	699b      	ldr	r3, [r3, #24]
 80130a8:	693a      	ldr	r2, [r7, #16]
 80130aa:	8992      	ldrh	r2, [r2, #12]
 80130ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80130b0:	fb01 f202 	mul.w	r2, r1, r2
 80130b4:	1a9b      	subs	r3, r3, r2
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	f040 80f1 	bne.w	801329e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	699b      	ldr	r3, [r3, #24]
 80130c0:	693a      	ldr	r2, [r7, #16]
 80130c2:	8992      	ldrh	r2, [r2, #12]
 80130c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80130c8:	693a      	ldr	r2, [r7, #16]
 80130ca:	8952      	ldrh	r2, [r2, #10]
 80130cc:	3a01      	subs	r2, #1
 80130ce:	4013      	ands	r3, r2
 80130d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80130d2:	69bb      	ldr	r3, [r7, #24]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d143      	bne.n	8013160 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	699b      	ldr	r3, [r3, #24]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d10c      	bne.n	80130fa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	689b      	ldr	r3, [r3, #8]
 80130e4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80130e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d11a      	bne.n	8013122 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2100      	movs	r1, #0
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7fe fbd9 	bl	80118a8 <create_chain>
 80130f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80130f8:	e013      	b.n	8013122 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d007      	beq.n	8013112 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	699b      	ldr	r3, [r3, #24]
 8013106:	4619      	mov	r1, r3
 8013108:	68f8      	ldr	r0, [r7, #12]
 801310a:	f7fe fc65 	bl	80119d8 <clmt_clust>
 801310e:	62b8      	str	r0, [r7, #40]	; 0x28
 8013110:	e007      	b.n	8013122 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013112:	68fa      	ldr	r2, [r7, #12]
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	69db      	ldr	r3, [r3, #28]
 8013118:	4619      	mov	r1, r3
 801311a:	4610      	mov	r0, r2
 801311c:	f7fe fbc4 	bl	80118a8 <create_chain>
 8013120:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013124:	2b00      	cmp	r3, #0
 8013126:	f000 8109 	beq.w	801333c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312c:	2b01      	cmp	r3, #1
 801312e:	d104      	bne.n	801313a <f_write+0x10c>
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	2202      	movs	r2, #2
 8013134:	755a      	strb	r2, [r3, #21]
 8013136:	2302      	movs	r3, #2
 8013138:	e109      	b.n	801334e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013140:	d104      	bne.n	801314c <f_write+0x11e>
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	2201      	movs	r2, #1
 8013146:	755a      	strb	r2, [r3, #21]
 8013148:	2301      	movs	r3, #1
 801314a:	e100      	b.n	801334e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013150:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	689b      	ldr	r3, [r3, #8]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d102      	bne.n	8013160 <f_write+0x132>
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801315e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	7d1b      	ldrb	r3, [r3, #20]
 8013164:	b25b      	sxtb	r3, r3
 8013166:	2b00      	cmp	r3, #0
 8013168:	da18      	bge.n	801319c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	7858      	ldrb	r0, [r3, #1]
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	6a1a      	ldr	r2, [r3, #32]
 8013178:	2301      	movs	r3, #1
 801317a:	f7fd fd95 	bl	8010ca8 <disk_write>
 801317e:	4603      	mov	r3, r0
 8013180:	2b00      	cmp	r3, #0
 8013182:	d004      	beq.n	801318e <f_write+0x160>
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	2201      	movs	r2, #1
 8013188:	755a      	strb	r2, [r3, #21]
 801318a:	2301      	movs	r3, #1
 801318c:	e0df      	b.n	801334e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	7d1b      	ldrb	r3, [r3, #20]
 8013192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013196:	b2da      	uxtb	r2, r3
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801319c:	693a      	ldr	r2, [r7, #16]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	69db      	ldr	r3, [r3, #28]
 80131a2:	4619      	mov	r1, r3
 80131a4:	4610      	mov	r0, r2
 80131a6:	f7fe f90b 	bl	80113c0 <clust2sect>
 80131aa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d104      	bne.n	80131bc <f_write+0x18e>
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	2202      	movs	r2, #2
 80131b6:	755a      	strb	r2, [r3, #21]
 80131b8:	2302      	movs	r3, #2
 80131ba:	e0c8      	b.n	801334e <f_write+0x320>
			sect += csect;
 80131bc:	697a      	ldr	r2, [r7, #20]
 80131be:	69bb      	ldr	r3, [r7, #24]
 80131c0:	4413      	add	r3, r2
 80131c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	899b      	ldrh	r3, [r3, #12]
 80131c8:	461a      	mov	r2, r3
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80131d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80131d2:	6a3b      	ldr	r3, [r7, #32]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d043      	beq.n	8013260 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80131d8:	69ba      	ldr	r2, [r7, #24]
 80131da:	6a3b      	ldr	r3, [r7, #32]
 80131dc:	4413      	add	r3, r2
 80131de:	693a      	ldr	r2, [r7, #16]
 80131e0:	8952      	ldrh	r2, [r2, #10]
 80131e2:	4293      	cmp	r3, r2
 80131e4:	d905      	bls.n	80131f2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80131e6:	693b      	ldr	r3, [r7, #16]
 80131e8:	895b      	ldrh	r3, [r3, #10]
 80131ea:	461a      	mov	r2, r3
 80131ec:	69bb      	ldr	r3, [r7, #24]
 80131ee:	1ad3      	subs	r3, r2, r3
 80131f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80131f2:	693b      	ldr	r3, [r7, #16]
 80131f4:	7858      	ldrb	r0, [r3, #1]
 80131f6:	6a3b      	ldr	r3, [r7, #32]
 80131f8:	697a      	ldr	r2, [r7, #20]
 80131fa:	69f9      	ldr	r1, [r7, #28]
 80131fc:	f7fd fd54 	bl	8010ca8 <disk_write>
 8013200:	4603      	mov	r3, r0
 8013202:	2b00      	cmp	r3, #0
 8013204:	d004      	beq.n	8013210 <f_write+0x1e2>
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2201      	movs	r2, #1
 801320a:	755a      	strb	r2, [r3, #21]
 801320c:	2301      	movs	r3, #1
 801320e:	e09e      	b.n	801334e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	6a1a      	ldr	r2, [r3, #32]
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	1ad3      	subs	r3, r2, r3
 8013218:	6a3a      	ldr	r2, [r7, #32]
 801321a:	429a      	cmp	r2, r3
 801321c:	d918      	bls.n	8013250 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	6a1a      	ldr	r2, [r3, #32]
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	1ad3      	subs	r3, r2, r3
 801322c:	693a      	ldr	r2, [r7, #16]
 801322e:	8992      	ldrh	r2, [r2, #12]
 8013230:	fb02 f303 	mul.w	r3, r2, r3
 8013234:	69fa      	ldr	r2, [r7, #28]
 8013236:	18d1      	adds	r1, r2, r3
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	899b      	ldrh	r3, [r3, #12]
 801323c:	461a      	mov	r2, r3
 801323e:	f7fd fdf3 	bl	8010e28 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	7d1b      	ldrb	r3, [r3, #20]
 8013246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801324a:	b2da      	uxtb	r2, r3
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	899b      	ldrh	r3, [r3, #12]
 8013254:	461a      	mov	r2, r3
 8013256:	6a3b      	ldr	r3, [r7, #32]
 8013258:	fb02 f303 	mul.w	r3, r2, r3
 801325c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801325e:	e04b      	b.n	80132f8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	6a1b      	ldr	r3, [r3, #32]
 8013264:	697a      	ldr	r2, [r7, #20]
 8013266:	429a      	cmp	r2, r3
 8013268:	d016      	beq.n	8013298 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	699a      	ldr	r2, [r3, #24]
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013272:	429a      	cmp	r2, r3
 8013274:	d210      	bcs.n	8013298 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013276:	693b      	ldr	r3, [r7, #16]
 8013278:	7858      	ldrb	r0, [r3, #1]
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013280:	2301      	movs	r3, #1
 8013282:	697a      	ldr	r2, [r7, #20]
 8013284:	f7fd fcf0 	bl	8010c68 <disk_read>
 8013288:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801328a:	2b00      	cmp	r3, #0
 801328c:	d004      	beq.n	8013298 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2201      	movs	r2, #1
 8013292:	755a      	strb	r2, [r3, #21]
 8013294:	2301      	movs	r3, #1
 8013296:	e05a      	b.n	801334e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	697a      	ldr	r2, [r7, #20]
 801329c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	899b      	ldrh	r3, [r3, #12]
 80132a2:	4618      	mov	r0, r3
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	699b      	ldr	r3, [r3, #24]
 80132a8:	693a      	ldr	r2, [r7, #16]
 80132aa:	8992      	ldrh	r2, [r2, #12]
 80132ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80132b0:	fb01 f202 	mul.w	r2, r1, r2
 80132b4:	1a9b      	subs	r3, r3, r2
 80132b6:	1ac3      	subs	r3, r0, r3
 80132b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80132ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	429a      	cmp	r2, r3
 80132c0:	d901      	bls.n	80132c6 <f_write+0x298>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	699b      	ldr	r3, [r3, #24]
 80132d0:	693a      	ldr	r2, [r7, #16]
 80132d2:	8992      	ldrh	r2, [r2, #12]
 80132d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80132d8:	fb00 f202 	mul.w	r2, r0, r2
 80132dc:	1a9b      	subs	r3, r3, r2
 80132de:	440b      	add	r3, r1
 80132e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132e2:	69f9      	ldr	r1, [r7, #28]
 80132e4:	4618      	mov	r0, r3
 80132e6:	f7fd fd9f 	bl	8010e28 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	7d1b      	ldrb	r3, [r3, #20]
 80132ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80132f2:	b2da      	uxtb	r2, r3
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80132f8:	69fa      	ldr	r2, [r7, #28]
 80132fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132fc:	4413      	add	r3, r2
 80132fe:	61fb      	str	r3, [r7, #28]
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	699a      	ldr	r2, [r3, #24]
 8013304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013306:	441a      	add	r2, r3
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	619a      	str	r2, [r3, #24]
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	68da      	ldr	r2, [r3, #12]
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	699b      	ldr	r3, [r3, #24]
 8013314:	429a      	cmp	r2, r3
 8013316:	bf38      	it	cc
 8013318:	461a      	movcc	r2, r3
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	60da      	str	r2, [r3, #12]
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013324:	441a      	add	r2, r3
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	601a      	str	r2, [r3, #0]
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801332e:	1ad3      	subs	r3, r2, r3
 8013330:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	2b00      	cmp	r3, #0
 8013336:	f47f aeb5 	bne.w	80130a4 <f_write+0x76>
 801333a:	e000      	b.n	801333e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801333c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	7d1b      	ldrb	r3, [r3, #20]
 8013342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013346:	b2da      	uxtb	r2, r3
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801334c:	2300      	movs	r3, #0
}
 801334e:	4618      	mov	r0, r3
 8013350:	3730      	adds	r7, #48	; 0x30
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}

08013356 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013356:	b580      	push	{r7, lr}
 8013358:	b086      	sub	sp, #24
 801335a:	af00      	add	r7, sp, #0
 801335c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f107 0208 	add.w	r2, r7, #8
 8013364:	4611      	mov	r1, r2
 8013366:	4618      	mov	r0, r3
 8013368:	f7ff faba 	bl	80128e0 <validate>
 801336c:	4603      	mov	r3, r0
 801336e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013370:	7dfb      	ldrb	r3, [r7, #23]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d168      	bne.n	8013448 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	7d1b      	ldrb	r3, [r3, #20]
 801337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801337e:	2b00      	cmp	r3, #0
 8013380:	d062      	beq.n	8013448 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	7d1b      	ldrb	r3, [r3, #20]
 8013386:	b25b      	sxtb	r3, r3
 8013388:	2b00      	cmp	r3, #0
 801338a:	da15      	bge.n	80133b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	7858      	ldrb	r0, [r3, #1]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6a1a      	ldr	r2, [r3, #32]
 801339a:	2301      	movs	r3, #1
 801339c:	f7fd fc84 	bl	8010ca8 <disk_write>
 80133a0:	4603      	mov	r3, r0
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d001      	beq.n	80133aa <f_sync+0x54>
 80133a6:	2301      	movs	r3, #1
 80133a8:	e04f      	b.n	801344a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	7d1b      	ldrb	r3, [r3, #20]
 80133ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133b2:	b2da      	uxtb	r2, r3
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80133b8:	f7fd faaa 	bl	8010910 <get_fattime>
 80133bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80133be:	68ba      	ldr	r2, [r7, #8]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133c4:	4619      	mov	r1, r3
 80133c6:	4610      	mov	r0, r2
 80133c8:	f7fd ff5c 	bl	8011284 <move_window>
 80133cc:	4603      	mov	r3, r0
 80133ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80133d0:	7dfb      	ldrb	r3, [r7, #23]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d138      	bne.n	8013448 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	330b      	adds	r3, #11
 80133e0:	781a      	ldrb	r2, [r3, #0]
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	330b      	adds	r3, #11
 80133e6:	f042 0220 	orr.w	r2, r2, #32
 80133ea:	b2d2      	uxtb	r2, r2
 80133ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6818      	ldr	r0, [r3, #0]
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	689b      	ldr	r3, [r3, #8]
 80133f6:	461a      	mov	r2, r3
 80133f8:	68f9      	ldr	r1, [r7, #12]
 80133fa:	f7fe fcea 	bl	8011dd2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	f103 021c 	add.w	r2, r3, #28
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	4619      	mov	r1, r3
 801340a:	4610      	mov	r0, r2
 801340c:	f7fd fce0 	bl	8010dd0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	3316      	adds	r3, #22
 8013414:	6939      	ldr	r1, [r7, #16]
 8013416:	4618      	mov	r0, r3
 8013418:	f7fd fcda 	bl	8010dd0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	3312      	adds	r3, #18
 8013420:	2100      	movs	r1, #0
 8013422:	4618      	mov	r0, r3
 8013424:	f7fd fcb9 	bl	8010d9a <st_word>
					fs->wflag = 1;
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	2201      	movs	r2, #1
 801342c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	4618      	mov	r0, r3
 8013432:	f7fd ff55 	bl	80112e0 <sync_fs>
 8013436:	4603      	mov	r3, r0
 8013438:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	7d1b      	ldrb	r3, [r3, #20]
 801343e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013442:	b2da      	uxtb	r2, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013448:	7dfb      	ldrb	r3, [r7, #23]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3718      	adds	r7, #24
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}

08013452 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013452:	b580      	push	{r7, lr}
 8013454:	b084      	sub	sp, #16
 8013456:	af00      	add	r7, sp, #0
 8013458:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801345a:	6878      	ldr	r0, [r7, #4]
 801345c:	f7ff ff7b 	bl	8013356 <f_sync>
 8013460:	4603      	mov	r3, r0
 8013462:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013464:	7bfb      	ldrb	r3, [r7, #15]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d118      	bne.n	801349c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f107 0208 	add.w	r2, r7, #8
 8013470:	4611      	mov	r1, r2
 8013472:	4618      	mov	r0, r3
 8013474:	f7ff fa34 	bl	80128e0 <validate>
 8013478:	4603      	mov	r3, r0
 801347a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801347c:	7bfb      	ldrb	r3, [r7, #15]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d10c      	bne.n	801349c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	691b      	ldr	r3, [r3, #16]
 8013486:	4618      	mov	r0, r3
 8013488:	f7fd fe58 	bl	801113c <dec_lock>
 801348c:	4603      	mov	r3, r0
 801348e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013490:	7bfb      	ldrb	r3, [r7, #15]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d102      	bne.n	801349c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	2200      	movs	r2, #0
 801349a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801349c:	7bfb      	ldrb	r3, [r7, #15]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3710      	adds	r7, #16
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b086      	sub	sp, #24
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
 80134ae:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d101      	bne.n	80134ba <f_opendir+0x14>
 80134b6:	2309      	movs	r3, #9
 80134b8:	e064      	b.n	8013584 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80134be:	f107 010c 	add.w	r1, r7, #12
 80134c2:	463b      	mov	r3, r7
 80134c4:	2200      	movs	r2, #0
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7fe ff8a 	bl	80123e0 <find_volume>
 80134cc:	4603      	mov	r3, r0
 80134ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80134d0:	7dfb      	ldrb	r3, [r7, #23]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d14f      	bne.n	8013576 <f_opendir+0xd0>
		obj->fs = fs;
 80134d6:	68fa      	ldr	r2, [r7, #12]
 80134d8:	693b      	ldr	r3, [r7, #16]
 80134da:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	4619      	mov	r1, r3
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f7fe fe6d 	bl	80121c0 <follow_path>
 80134e6:	4603      	mov	r3, r0
 80134e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80134ea:	7dfb      	ldrb	r3, [r7, #23]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d13d      	bne.n	801356c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80134f6:	b25b      	sxtb	r3, r3
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	db12      	blt.n	8013522 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80134fc:	693b      	ldr	r3, [r7, #16]
 80134fe:	799b      	ldrb	r3, [r3, #6]
 8013500:	f003 0310 	and.w	r3, r3, #16
 8013504:	2b00      	cmp	r3, #0
 8013506:	d00a      	beq.n	801351e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013508:	68fa      	ldr	r2, [r7, #12]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6a1b      	ldr	r3, [r3, #32]
 801350e:	4619      	mov	r1, r3
 8013510:	4610      	mov	r0, r2
 8013512:	f7fe fc3f 	bl	8011d94 <ld_clust>
 8013516:	4602      	mov	r2, r0
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	609a      	str	r2, [r3, #8]
 801351c:	e001      	b.n	8013522 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801351e:	2305      	movs	r3, #5
 8013520:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8013522:	7dfb      	ldrb	r3, [r7, #23]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d121      	bne.n	801356c <f_opendir+0xc6>
				obj->id = fs->id;
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	88da      	ldrh	r2, [r3, #6]
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013530:	2100      	movs	r1, #0
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f7fe fa88 	bl	8011a48 <dir_sdi>
 8013538:	4603      	mov	r3, r0
 801353a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801353c:	7dfb      	ldrb	r3, [r7, #23]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d114      	bne.n	801356c <f_opendir+0xc6>
					if (obj->sclust) {
 8013542:	693b      	ldr	r3, [r7, #16]
 8013544:	689b      	ldr	r3, [r3, #8]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d00d      	beq.n	8013566 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801354a:	2100      	movs	r1, #0
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f7fd fd67 	bl	8011020 <inc_lock>
 8013552:	4602      	mov	r2, r0
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	691b      	ldr	r3, [r3, #16]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d105      	bne.n	801356c <f_opendir+0xc6>
 8013560:	2312      	movs	r3, #18
 8013562:	75fb      	strb	r3, [r7, #23]
 8013564:	e002      	b.n	801356c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	2200      	movs	r2, #0
 801356a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801356c:	7dfb      	ldrb	r3, [r7, #23]
 801356e:	2b04      	cmp	r3, #4
 8013570:	d101      	bne.n	8013576 <f_opendir+0xd0>
 8013572:	2305      	movs	r3, #5
 8013574:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013576:	7dfb      	ldrb	r3, [r7, #23]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d002      	beq.n	8013582 <f_opendir+0xdc>
 801357c:	693b      	ldr	r3, [r7, #16]
 801357e:	2200      	movs	r2, #0
 8013580:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013582:	7dfb      	ldrb	r3, [r7, #23]
}
 8013584:	4618      	mov	r0, r3
 8013586:	3718      	adds	r7, #24
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f107 0208 	add.w	r2, r7, #8
 801359a:	4611      	mov	r1, r2
 801359c:	4618      	mov	r0, r3
 801359e:	f7ff f99f 	bl	80128e0 <validate>
 80135a2:	4603      	mov	r3, r0
 80135a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80135a6:	7bfb      	ldrb	r3, [r7, #15]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d110      	bne.n	80135ce <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	691b      	ldr	r3, [r3, #16]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d006      	beq.n	80135c2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	691b      	ldr	r3, [r3, #16]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fd fdbf 	bl	801113c <dec_lock>
 80135be:	4603      	mov	r3, r0
 80135c0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80135c2:	7bfb      	ldrb	r3, [r7, #15]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d102      	bne.n	80135ce <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2200      	movs	r2, #0
 80135cc:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80135ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	3710      	adds	r7, #16
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f107 0208 	add.w	r2, r7, #8
 80135e8:	4611      	mov	r1, r2
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7ff f978 	bl	80128e0 <validate>
 80135f0:	4603      	mov	r3, r0
 80135f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80135f4:	7bfb      	ldrb	r3, [r7, #15]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d126      	bne.n	8013648 <f_readdir+0x70>
		if (!fno) {
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d106      	bne.n	801360e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013600:	2100      	movs	r1, #0
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f7fe fa20 	bl	8011a48 <dir_sdi>
 8013608:	4603      	mov	r3, r0
 801360a:	73fb      	strb	r3, [r7, #15]
 801360c:	e01c      	b.n	8013648 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801360e:	2100      	movs	r1, #0
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f7fe fbfe 	bl	8011e12 <dir_read>
 8013616:	4603      	mov	r3, r0
 8013618:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801361a:	7bfb      	ldrb	r3, [r7, #15]
 801361c:	2b04      	cmp	r3, #4
 801361e:	d101      	bne.n	8013624 <f_readdir+0x4c>
 8013620:	2300      	movs	r3, #0
 8013622:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8013624:	7bfb      	ldrb	r3, [r7, #15]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d10e      	bne.n	8013648 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801362a:	6839      	ldr	r1, [r7, #0]
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f7fe fcd4 	bl	8011fda <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013632:	2100      	movs	r1, #0
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f7fe fa90 	bl	8011b5a <dir_next>
 801363a:	4603      	mov	r3, r0
 801363c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801363e:	7bfb      	ldrb	r3, [r7, #15]
 8013640:	2b04      	cmp	r3, #4
 8013642:	d101      	bne.n	8013648 <f_readdir+0x70>
 8013644:	2300      	movs	r3, #0
 8013646:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8013648:	7bfb      	ldrb	r3, [r7, #15]
}
 801364a:	4618      	mov	r0, r3
 801364c:	3710      	adds	r7, #16
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}

08013652 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013652:	b580      	push	{r7, lr}
 8013654:	b090      	sub	sp, #64	; 0x40
 8013656:	af00      	add	r7, sp, #0
 8013658:	6078      	str	r0, [r7, #4]
 801365a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801365c:	f107 010c 	add.w	r1, r7, #12
 8013660:	1d3b      	adds	r3, r7, #4
 8013662:	2200      	movs	r2, #0
 8013664:	4618      	mov	r0, r3
 8013666:	f7fe febb 	bl	80123e0 <find_volume>
 801366a:	4603      	mov	r3, r0
 801366c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013670:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013674:	2b00      	cmp	r3, #0
 8013676:	d11f      	bne.n	80136b8 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013678:	687a      	ldr	r2, [r7, #4]
 801367a:	f107 030c 	add.w	r3, r7, #12
 801367e:	4611      	mov	r1, r2
 8013680:	4618      	mov	r0, r3
 8013682:	f7fe fd9d 	bl	80121c0 <follow_path>
 8013686:	4603      	mov	r3, r0
 8013688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801368c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013690:	2b00      	cmp	r3, #0
 8013692:	d111      	bne.n	80136b8 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8013694:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013698:	b25b      	sxtb	r3, r3
 801369a:	2b00      	cmp	r3, #0
 801369c:	da03      	bge.n	80136a6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801369e:	2306      	movs	r3, #6
 80136a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80136a4:	e008      	b.n	80136b8 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d005      	beq.n	80136b8 <f_stat+0x66>
 80136ac:	f107 030c 	add.w	r3, r7, #12
 80136b0:	6839      	ldr	r1, [r7, #0]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7fe fc91 	bl	8011fda <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80136b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80136bc:	4618      	mov	r0, r3
 80136be:	3740      	adds	r7, #64	; 0x40
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}

080136c4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b092      	sub	sp, #72	; 0x48
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	60f8      	str	r0, [r7, #12]
 80136cc:	60b9      	str	r1, [r7, #8]
 80136ce:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80136d0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80136d4:	f107 030c 	add.w	r3, r7, #12
 80136d8:	2200      	movs	r2, #0
 80136da:	4618      	mov	r0, r3
 80136dc:	f7fe fe80 	bl	80123e0 <find_volume>
 80136e0:	4603      	mov	r3, r0
 80136e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80136e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f040 8099 	bne.w	8013822 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80136f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80136f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f8:	695a      	ldr	r2, [r3, #20]
 80136fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fc:	699b      	ldr	r3, [r3, #24]
 80136fe:	3b02      	subs	r3, #2
 8013700:	429a      	cmp	r2, r3
 8013702:	d804      	bhi.n	801370e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8013704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013706:	695a      	ldr	r2, [r3, #20]
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	601a      	str	r2, [r3, #0]
 801370c:	e089      	b.n	8013822 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801370e:	2300      	movs	r3, #0
 8013710:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8013712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	2b01      	cmp	r3, #1
 8013718:	d128      	bne.n	801376c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801371a:	2302      	movs	r3, #2
 801371c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013720:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8013722:	f107 0314 	add.w	r3, r7, #20
 8013726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013728:	4618      	mov	r0, r3
 801372a:	f7fd fe68 	bl	80113fe <get_fat>
 801372e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8013730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013736:	d103      	bne.n	8013740 <f_getfree+0x7c>
 8013738:	2301      	movs	r3, #1
 801373a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801373e:	e063      	b.n	8013808 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8013740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013742:	2b01      	cmp	r3, #1
 8013744:	d103      	bne.n	801374e <f_getfree+0x8a>
 8013746:	2302      	movs	r3, #2
 8013748:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801374c:	e05c      	b.n	8013808 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013750:	2b00      	cmp	r3, #0
 8013752:	d102      	bne.n	801375a <f_getfree+0x96>
 8013754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013756:	3301      	adds	r3, #1
 8013758:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 801375a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801375c:	3301      	adds	r3, #1
 801375e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013762:	699b      	ldr	r3, [r3, #24]
 8013764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013766:	429a      	cmp	r2, r3
 8013768:	d3db      	bcc.n	8013722 <f_getfree+0x5e>
 801376a:	e04d      	b.n	8013808 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801376e:	699b      	ldr	r3, [r3, #24]
 8013770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013776:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8013778:	2300      	movs	r3, #0
 801377a:	637b      	str	r3, [r7, #52]	; 0x34
 801377c:	2300      	movs	r3, #0
 801377e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8013780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013782:	2b00      	cmp	r3, #0
 8013784:	d113      	bne.n	80137ae <f_getfree+0xea>
							res = move_window(fs, sect++);
 8013786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801378a:	1c5a      	adds	r2, r3, #1
 801378c:	63ba      	str	r2, [r7, #56]	; 0x38
 801378e:	4619      	mov	r1, r3
 8013790:	f7fd fd78 	bl	8011284 <move_window>
 8013794:	4603      	mov	r3, r0
 8013796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801379a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d131      	bne.n	8013806 <f_getfree+0x142>
							p = fs->win;
 80137a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a4:	3334      	adds	r3, #52	; 0x34
 80137a6:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80137a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137aa:	899b      	ldrh	r3, [r3, #12]
 80137ac:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80137ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	2b02      	cmp	r3, #2
 80137b4:	d10f      	bne.n	80137d6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80137b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137b8:	f7fd fab4 	bl	8010d24 <ld_word>
 80137bc:	4603      	mov	r3, r0
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d102      	bne.n	80137c8 <f_getfree+0x104>
 80137c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137c4:	3301      	adds	r3, #1
 80137c6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80137c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ca:	3302      	adds	r3, #2
 80137cc:	633b      	str	r3, [r7, #48]	; 0x30
 80137ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137d0:	3b02      	subs	r3, #2
 80137d2:	637b      	str	r3, [r7, #52]	; 0x34
 80137d4:	e010      	b.n	80137f8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80137d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137d8:	f7fd fabc 	bl	8010d54 <ld_dword>
 80137dc:	4603      	mov	r3, r0
 80137de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d102      	bne.n	80137ec <f_getfree+0x128>
 80137e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137e8:	3301      	adds	r3, #1
 80137ea:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80137ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ee:	3304      	adds	r3, #4
 80137f0:	633b      	str	r3, [r7, #48]	; 0x30
 80137f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137f4:	3b04      	subs	r3, #4
 80137f6:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80137f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137fa:	3b01      	subs	r3, #1
 80137fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013800:	2b00      	cmp	r3, #0
 8013802:	d1bd      	bne.n	8013780 <f_getfree+0xbc>
 8013804:	e000      	b.n	8013808 <f_getfree+0x144>
							if (res != FR_OK) break;
 8013806:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801380c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013812:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8013814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013816:	791a      	ldrb	r2, [r3, #4]
 8013818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801381a:	f042 0201 	orr.w	r2, r2, #1
 801381e:	b2d2      	uxtb	r2, r2
 8013820:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8013822:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8013826:	4618      	mov	r0, r3
 8013828:	3748      	adds	r7, #72	; 0x48
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}

0801382e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801382e:	b580      	push	{r7, lr}
 8013830:	b096      	sub	sp, #88	; 0x58
 8013832:	af00      	add	r7, sp, #0
 8013834:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013836:	f107 0108 	add.w	r1, r7, #8
 801383a:	1d3b      	adds	r3, r7, #4
 801383c:	2202      	movs	r2, #2
 801383e:	4618      	mov	r0, r3
 8013840:	f7fe fdce 	bl	80123e0 <find_volume>
 8013844:	4603      	mov	r3, r0
 8013846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801384e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013852:	2b00      	cmp	r3, #0
 8013854:	f040 80f2 	bne.w	8013a3c <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013858:	687a      	ldr	r2, [r7, #4]
 801385a:	f107 030c 	add.w	r3, r7, #12
 801385e:	4611      	mov	r1, r2
 8013860:	4618      	mov	r0, r3
 8013862:	f7fe fcad 	bl	80121c0 <follow_path>
 8013866:	4603      	mov	r3, r0
 8013868:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801386c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013870:	2b00      	cmp	r3, #0
 8013872:	d102      	bne.n	801387a <f_mkdir+0x4c>
 8013874:	2308      	movs	r3, #8
 8013876:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801387a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801387e:	2b04      	cmp	r3, #4
 8013880:	f040 80dc 	bne.w	8013a3c <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013884:	f107 030c 	add.w	r3, r7, #12
 8013888:	2100      	movs	r1, #0
 801388a:	4618      	mov	r0, r3
 801388c:	f7fe f80c 	bl	80118a8 <create_chain>
 8013890:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	895b      	ldrh	r3, [r3, #10]
 8013896:	461a      	mov	r2, r3
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	899b      	ldrh	r3, [r3, #12]
 801389c:	fb02 f303 	mul.w	r3, r2, r3
 80138a0:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80138a2:	2300      	movs	r3, #0
 80138a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80138a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d102      	bne.n	80138b4 <f_mkdir+0x86>
 80138ae:	2307      	movs	r3, #7
 80138b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80138b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138b6:	2b01      	cmp	r3, #1
 80138b8:	d102      	bne.n	80138c0 <f_mkdir+0x92>
 80138ba:	2302      	movs	r3, #2
 80138bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80138c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138c6:	d102      	bne.n	80138ce <f_mkdir+0xa0>
 80138c8:	2301      	movs	r3, #1
 80138ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80138ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d106      	bne.n	80138e4 <f_mkdir+0xb6>
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	4618      	mov	r0, r3
 80138da:	f7fd fc8f 	bl	80111fc <sync_window>
 80138de:	4603      	mov	r3, r0
 80138e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80138e4:	f7fd f814 	bl	8010910 <get_fattime>
 80138e8:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80138ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d16c      	bne.n	80139cc <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7fd fd62 	bl	80113c0 <clust2sect>
 80138fc:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	3334      	adds	r3, #52	; 0x34
 8013902:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	899b      	ldrh	r3, [r3, #12]
 8013908:	461a      	mov	r2, r3
 801390a:	2100      	movs	r1, #0
 801390c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801390e:	f7fd faac 	bl	8010e6a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013912:	220b      	movs	r2, #11
 8013914:	2120      	movs	r1, #32
 8013916:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013918:	f7fd faa7 	bl	8010e6a <mem_set>
					dir[DIR_Name] = '.';
 801391c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801391e:	222e      	movs	r2, #46	; 0x2e
 8013920:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013924:	330b      	adds	r3, #11
 8013926:	2210      	movs	r2, #16
 8013928:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801392a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801392c:	3316      	adds	r3, #22
 801392e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013930:	4618      	mov	r0, r3
 8013932:	f7fd fa4d 	bl	8010dd0 <st_dword>
					st_clust(fs, dir, dcl);
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801393a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801393c:	4618      	mov	r0, r3
 801393e:	f7fe fa48 	bl	8011dd2 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013944:	3320      	adds	r3, #32
 8013946:	2220      	movs	r2, #32
 8013948:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801394a:	4618      	mov	r0, r3
 801394c:	f7fd fa6c 	bl	8010e28 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013952:	3321      	adds	r3, #33	; 0x21
 8013954:	222e      	movs	r2, #46	; 0x2e
 8013956:	701a      	strb	r2, [r3, #0]
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	781b      	ldrb	r3, [r3, #0]
 8013960:	2b03      	cmp	r3, #3
 8013962:	d106      	bne.n	8013972 <f_mkdir+0x144>
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801396a:	429a      	cmp	r2, r3
 801396c:	d101      	bne.n	8013972 <f_mkdir+0x144>
 801396e:	2300      	movs	r3, #0
 8013970:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013972:	68b8      	ldr	r0, [r7, #8]
 8013974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013976:	3320      	adds	r3, #32
 8013978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801397a:	4619      	mov	r1, r3
 801397c:	f7fe fa29 	bl	8011dd2 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	895b      	ldrh	r3, [r3, #10]
 8013984:	653b      	str	r3, [r7, #80]	; 0x50
 8013986:	e01c      	b.n	80139c2 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8013988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801398a:	1c5a      	adds	r2, r3, #1
 801398c:	64fa      	str	r2, [r7, #76]	; 0x4c
 801398e:	68ba      	ldr	r2, [r7, #8]
 8013990:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	2201      	movs	r2, #1
 8013996:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013998:	68bb      	ldr	r3, [r7, #8]
 801399a:	4618      	mov	r0, r3
 801399c:	f7fd fc2e 	bl	80111fc <sync_window>
 80139a0:	4603      	mov	r3, r0
 80139a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80139a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d10d      	bne.n	80139ca <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80139ae:	68bb      	ldr	r3, [r7, #8]
 80139b0:	899b      	ldrh	r3, [r3, #12]
 80139b2:	461a      	mov	r2, r3
 80139b4:	2100      	movs	r1, #0
 80139b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80139b8:	f7fd fa57 	bl	8010e6a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80139bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139be:	3b01      	subs	r3, #1
 80139c0:	653b      	str	r3, [r7, #80]	; 0x50
 80139c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d1df      	bne.n	8013988 <f_mkdir+0x15a>
 80139c8:	e000      	b.n	80139cc <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80139ca:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80139cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d107      	bne.n	80139e4 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80139d4:	f107 030c 	add.w	r3, r7, #12
 80139d8:	4618      	mov	r0, r3
 80139da:	f7fe facc 	bl	8011f76 <dir_register>
 80139de:	4603      	mov	r3, r0
 80139e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80139e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d120      	bne.n	8013a2e <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80139ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ee:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80139f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139f2:	3316      	adds	r3, #22
 80139f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7fd f9ea 	bl	8010dd0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7fe f9e5 	bl	8011dd2 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a0a:	330b      	adds	r3, #11
 8013a0c:	2210      	movs	r2, #16
 8013a0e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	2201      	movs	r2, #1
 8013a14:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013a16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d10e      	bne.n	8013a3c <f_mkdir+0x20e>
					res = sync_fs(fs);
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7fd fc5d 	bl	80112e0 <sync_fs>
 8013a26:	4603      	mov	r3, r0
 8013a28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013a2c:	e006      	b.n	8013a3c <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013a2e:	f107 030c 	add.w	r3, r7, #12
 8013a32:	2200      	movs	r2, #0
 8013a34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7fd fed1 	bl	80117de <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013a3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	3758      	adds	r7, #88	; 0x58
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b087      	sub	sp, #28
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	4613      	mov	r3, r2
 8013a54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013a56:	2301      	movs	r3, #1
 8013a58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013a5e:	4b1f      	ldr	r3, [pc, #124]	; (8013adc <FATFS_LinkDriverEx+0x94>)
 8013a60:	7a5b      	ldrb	r3, [r3, #9]
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d131      	bne.n	8013acc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013a68:	4b1c      	ldr	r3, [pc, #112]	; (8013adc <FATFS_LinkDriverEx+0x94>)
 8013a6a:	7a5b      	ldrb	r3, [r3, #9]
 8013a6c:	b2db      	uxtb	r3, r3
 8013a6e:	461a      	mov	r2, r3
 8013a70:	4b1a      	ldr	r3, [pc, #104]	; (8013adc <FATFS_LinkDriverEx+0x94>)
 8013a72:	2100      	movs	r1, #0
 8013a74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013a76:	4b19      	ldr	r3, [pc, #100]	; (8013adc <FATFS_LinkDriverEx+0x94>)
 8013a78:	7a5b      	ldrb	r3, [r3, #9]
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	4a17      	ldr	r2, [pc, #92]	; (8013adc <FATFS_LinkDriverEx+0x94>)
 8013a7e:	009b      	lsls	r3, r3, #2
 8013a80:	4413      	add	r3, r2
 8013a82:	68fa      	ldr	r2, [r7, #12]
 8013a84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013a86:	4b15      	ldr	r3, [pc, #84]	; (8013adc <FATFS_LinkDriverEx+0x94>)
 8013a88:	7a5b      	ldrb	r3, [r3, #9]
 8013a8a:	b2db      	uxtb	r3, r3
 8013a8c:	461a      	mov	r2, r3
 8013a8e:	4b13      	ldr	r3, [pc, #76]	; (8013adc <FATFS_LinkDriverEx+0x94>)
 8013a90:	4413      	add	r3, r2
 8013a92:	79fa      	ldrb	r2, [r7, #7]
 8013a94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013a96:	4b11      	ldr	r3, [pc, #68]	; (8013adc <FATFS_LinkDriverEx+0x94>)
 8013a98:	7a5b      	ldrb	r3, [r3, #9]
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	1c5a      	adds	r2, r3, #1
 8013a9e:	b2d1      	uxtb	r1, r2
 8013aa0:	4a0e      	ldr	r2, [pc, #56]	; (8013adc <FATFS_LinkDriverEx+0x94>)
 8013aa2:	7251      	strb	r1, [r2, #9]
 8013aa4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013aa6:	7dbb      	ldrb	r3, [r7, #22]
 8013aa8:	3330      	adds	r3, #48	; 0x30
 8013aaa:	b2da      	uxtb	r2, r3
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	223a      	movs	r2, #58	; 0x3a
 8013ab6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	3302      	adds	r3, #2
 8013abc:	222f      	movs	r2, #47	; 0x2f
 8013abe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	3303      	adds	r3, #3
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	371c      	adds	r7, #28
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad8:	4770      	bx	lr
 8013ada:	bf00      	nop
 8013adc:	20005e24 	.word	0x20005e24

08013ae0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b082      	sub	sp, #8
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
 8013ae8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013aea:	2200      	movs	r2, #0
 8013aec:	6839      	ldr	r1, [r7, #0]
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f7ff ffaa 	bl	8013a48 <FATFS_LinkDriverEx>
 8013af4:	4603      	mov	r3, r0
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3708      	adds	r7, #8
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
	...

08013b00 <asctime>:
 8013b00:	4b0d      	ldr	r3, [pc, #52]	; (8013b38 <asctime+0x38>)
 8013b02:	b570      	push	{r4, r5, r6, lr}
 8013b04:	681d      	ldr	r5, [r3, #0]
 8013b06:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8013b08:	4604      	mov	r4, r0
 8013b0a:	b976      	cbnz	r6, 8013b2a <asctime+0x2a>
 8013b0c:	201a      	movs	r0, #26
 8013b0e:	f000 f8a1 	bl	8013c54 <malloc>
 8013b12:	4602      	mov	r2, r0
 8013b14:	6428      	str	r0, [r5, #64]	; 0x40
 8013b16:	b920      	cbnz	r0, 8013b22 <asctime+0x22>
 8013b18:	4b08      	ldr	r3, [pc, #32]	; (8013b3c <asctime+0x3c>)
 8013b1a:	4809      	ldr	r0, [pc, #36]	; (8013b40 <asctime+0x40>)
 8013b1c:	2137      	movs	r1, #55	; 0x37
 8013b1e:	f000 f837 	bl	8013b90 <__assert_func>
 8013b22:	221a      	movs	r2, #26
 8013b24:	4631      	mov	r1, r6
 8013b26:	f000 f8b3 	bl	8013c90 <memset>
 8013b2a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b32:	f000 b807 	b.w	8013b44 <asctime_r>
 8013b36:	bf00      	nop
 8013b38:	20000324 	.word	0x20000324
 8013b3c:	0805b8c8 	.word	0x0805b8c8
 8013b40:	0805b8df 	.word	0x0805b8df

08013b44 <asctime_r>:
 8013b44:	b510      	push	{r4, lr}
 8013b46:	460c      	mov	r4, r1
 8013b48:	6941      	ldr	r1, [r0, #20]
 8013b4a:	6903      	ldr	r3, [r0, #16]
 8013b4c:	6982      	ldr	r2, [r0, #24]
 8013b4e:	b086      	sub	sp, #24
 8013b50:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8013b54:	9104      	str	r1, [sp, #16]
 8013b56:	6801      	ldr	r1, [r0, #0]
 8013b58:	9103      	str	r1, [sp, #12]
 8013b5a:	6841      	ldr	r1, [r0, #4]
 8013b5c:	9102      	str	r1, [sp, #8]
 8013b5e:	6881      	ldr	r1, [r0, #8]
 8013b60:	9101      	str	r1, [sp, #4]
 8013b62:	68c1      	ldr	r1, [r0, #12]
 8013b64:	9100      	str	r1, [sp, #0]
 8013b66:	4907      	ldr	r1, [pc, #28]	; (8013b84 <asctime_r+0x40>)
 8013b68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013b6c:	440b      	add	r3, r1
 8013b6e:	4906      	ldr	r1, [pc, #24]	; (8013b88 <asctime_r+0x44>)
 8013b70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013b74:	440a      	add	r2, r1
 8013b76:	4620      	mov	r0, r4
 8013b78:	4904      	ldr	r1, [pc, #16]	; (8013b8c <asctime_r+0x48>)
 8013b7a:	f001 f9b7 	bl	8014eec <siprintf>
 8013b7e:	4620      	mov	r0, r4
 8013b80:	b006      	add	sp, #24
 8013b82:	bd10      	pop	{r4, pc}
 8013b84:	0805b970 	.word	0x0805b970
 8013b88:	0805b95b 	.word	0x0805b95b
 8013b8c:	0805b93b 	.word	0x0805b93b

08013b90 <__assert_func>:
 8013b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b92:	4614      	mov	r4, r2
 8013b94:	461a      	mov	r2, r3
 8013b96:	4b09      	ldr	r3, [pc, #36]	; (8013bbc <__assert_func+0x2c>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	68d8      	ldr	r0, [r3, #12]
 8013b9e:	b14c      	cbz	r4, 8013bb4 <__assert_func+0x24>
 8013ba0:	4b07      	ldr	r3, [pc, #28]	; (8013bc0 <__assert_func+0x30>)
 8013ba2:	9100      	str	r1, [sp, #0]
 8013ba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ba8:	4906      	ldr	r1, [pc, #24]	; (8013bc4 <__assert_func+0x34>)
 8013baa:	462b      	mov	r3, r5
 8013bac:	f000 f81c 	bl	8013be8 <fiprintf>
 8013bb0:	f002 fca0 	bl	80164f4 <abort>
 8013bb4:	4b04      	ldr	r3, [pc, #16]	; (8013bc8 <__assert_func+0x38>)
 8013bb6:	461c      	mov	r4, r3
 8013bb8:	e7f3      	b.n	8013ba2 <__assert_func+0x12>
 8013bba:	bf00      	nop
 8013bbc:	20000324 	.word	0x20000324
 8013bc0:	0805b994 	.word	0x0805b994
 8013bc4:	0805b9a1 	.word	0x0805b9a1
 8013bc8:	0805b95a 	.word	0x0805b95a

08013bcc <atof>:
 8013bcc:	2100      	movs	r1, #0
 8013bce:	f002 b88d 	b.w	8015cec <strtod>

08013bd2 <atoi>:
 8013bd2:	220a      	movs	r2, #10
 8013bd4:	2100      	movs	r1, #0
 8013bd6:	f002 b975 	b.w	8015ec4 <strtol>
	...

08013bdc <__errno>:
 8013bdc:	4b01      	ldr	r3, [pc, #4]	; (8013be4 <__errno+0x8>)
 8013bde:	6818      	ldr	r0, [r3, #0]
 8013be0:	4770      	bx	lr
 8013be2:	bf00      	nop
 8013be4:	20000324 	.word	0x20000324

08013be8 <fiprintf>:
 8013be8:	b40e      	push	{r1, r2, r3}
 8013bea:	b503      	push	{r0, r1, lr}
 8013bec:	4601      	mov	r1, r0
 8013bee:	ab03      	add	r3, sp, #12
 8013bf0:	4805      	ldr	r0, [pc, #20]	; (8013c08 <fiprintf+0x20>)
 8013bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bf6:	6800      	ldr	r0, [r0, #0]
 8013bf8:	9301      	str	r3, [sp, #4]
 8013bfa:	f000 fbcd 	bl	8014398 <_vfiprintf_r>
 8013bfe:	b002      	add	sp, #8
 8013c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c04:	b003      	add	sp, #12
 8013c06:	4770      	bx	lr
 8013c08:	20000324 	.word	0x20000324

08013c0c <__libc_init_array>:
 8013c0c:	b570      	push	{r4, r5, r6, lr}
 8013c0e:	4d0d      	ldr	r5, [pc, #52]	; (8013c44 <__libc_init_array+0x38>)
 8013c10:	4c0d      	ldr	r4, [pc, #52]	; (8013c48 <__libc_init_array+0x3c>)
 8013c12:	1b64      	subs	r4, r4, r5
 8013c14:	10a4      	asrs	r4, r4, #2
 8013c16:	2600      	movs	r6, #0
 8013c18:	42a6      	cmp	r6, r4
 8013c1a:	d109      	bne.n	8013c30 <__libc_init_array+0x24>
 8013c1c:	4d0b      	ldr	r5, [pc, #44]	; (8013c4c <__libc_init_array+0x40>)
 8013c1e:	4c0c      	ldr	r4, [pc, #48]	; (8013c50 <__libc_init_array+0x44>)
 8013c20:	f008 f894 	bl	801bd4c <_init>
 8013c24:	1b64      	subs	r4, r4, r5
 8013c26:	10a4      	asrs	r4, r4, #2
 8013c28:	2600      	movs	r6, #0
 8013c2a:	42a6      	cmp	r6, r4
 8013c2c:	d105      	bne.n	8013c3a <__libc_init_array+0x2e>
 8013c2e:	bd70      	pop	{r4, r5, r6, pc}
 8013c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c34:	4798      	blx	r3
 8013c36:	3601      	adds	r6, #1
 8013c38:	e7ee      	b.n	8013c18 <__libc_init_array+0xc>
 8013c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c3e:	4798      	blx	r3
 8013c40:	3601      	adds	r6, #1
 8013c42:	e7f2      	b.n	8013c2a <__libc_init_array+0x1e>
 8013c44:	0805c1a0 	.word	0x0805c1a0
 8013c48:	0805c1a0 	.word	0x0805c1a0
 8013c4c:	0805c1a0 	.word	0x0805c1a0
 8013c50:	0805c1a4 	.word	0x0805c1a4

08013c54 <malloc>:
 8013c54:	4b02      	ldr	r3, [pc, #8]	; (8013c60 <malloc+0xc>)
 8013c56:	4601      	mov	r1, r0
 8013c58:	6818      	ldr	r0, [r3, #0]
 8013c5a:	f000 baff 	b.w	801425c <_malloc_r>
 8013c5e:	bf00      	nop
 8013c60:	20000324 	.word	0x20000324

08013c64 <free>:
 8013c64:	4b02      	ldr	r3, [pc, #8]	; (8013c70 <free+0xc>)
 8013c66:	4601      	mov	r1, r0
 8013c68:	6818      	ldr	r0, [r3, #0]
 8013c6a:	f000 ba8b 	b.w	8014184 <_free_r>
 8013c6e:	bf00      	nop
 8013c70:	20000324 	.word	0x20000324

08013c74 <memcpy>:
 8013c74:	440a      	add	r2, r1
 8013c76:	4291      	cmp	r1, r2
 8013c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c7c:	d100      	bne.n	8013c80 <memcpy+0xc>
 8013c7e:	4770      	bx	lr
 8013c80:	b510      	push	{r4, lr}
 8013c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c8a:	4291      	cmp	r1, r2
 8013c8c:	d1f9      	bne.n	8013c82 <memcpy+0xe>
 8013c8e:	bd10      	pop	{r4, pc}

08013c90 <memset>:
 8013c90:	4402      	add	r2, r0
 8013c92:	4603      	mov	r3, r0
 8013c94:	4293      	cmp	r3, r2
 8013c96:	d100      	bne.n	8013c9a <memset+0xa>
 8013c98:	4770      	bx	lr
 8013c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8013c9e:	e7f9      	b.n	8013c94 <memset+0x4>

08013ca0 <validate_structure>:
 8013ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ca2:	6801      	ldr	r1, [r0, #0]
 8013ca4:	293b      	cmp	r1, #59	; 0x3b
 8013ca6:	4604      	mov	r4, r0
 8013ca8:	d911      	bls.n	8013cce <validate_structure+0x2e>
 8013caa:	223c      	movs	r2, #60	; 0x3c
 8013cac:	4668      	mov	r0, sp
 8013cae:	f002 fc39 	bl	8016524 <div>
 8013cb2:	9a01      	ldr	r2, [sp, #4]
 8013cb4:	6863      	ldr	r3, [r4, #4]
 8013cb6:	9900      	ldr	r1, [sp, #0]
 8013cb8:	2a00      	cmp	r2, #0
 8013cba:	440b      	add	r3, r1
 8013cbc:	6063      	str	r3, [r4, #4]
 8013cbe:	bfbb      	ittet	lt
 8013cc0:	323c      	addlt	r2, #60	; 0x3c
 8013cc2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8013cc6:	6022      	strge	r2, [r4, #0]
 8013cc8:	6022      	strlt	r2, [r4, #0]
 8013cca:	bfb8      	it	lt
 8013ccc:	6063      	strlt	r3, [r4, #4]
 8013cce:	6861      	ldr	r1, [r4, #4]
 8013cd0:	293b      	cmp	r1, #59	; 0x3b
 8013cd2:	d911      	bls.n	8013cf8 <validate_structure+0x58>
 8013cd4:	223c      	movs	r2, #60	; 0x3c
 8013cd6:	4668      	mov	r0, sp
 8013cd8:	f002 fc24 	bl	8016524 <div>
 8013cdc:	9a01      	ldr	r2, [sp, #4]
 8013cde:	68a3      	ldr	r3, [r4, #8]
 8013ce0:	9900      	ldr	r1, [sp, #0]
 8013ce2:	2a00      	cmp	r2, #0
 8013ce4:	440b      	add	r3, r1
 8013ce6:	60a3      	str	r3, [r4, #8]
 8013ce8:	bfbb      	ittet	lt
 8013cea:	323c      	addlt	r2, #60	; 0x3c
 8013cec:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8013cf0:	6062      	strge	r2, [r4, #4]
 8013cf2:	6062      	strlt	r2, [r4, #4]
 8013cf4:	bfb8      	it	lt
 8013cf6:	60a3      	strlt	r3, [r4, #8]
 8013cf8:	68a1      	ldr	r1, [r4, #8]
 8013cfa:	2917      	cmp	r1, #23
 8013cfc:	d911      	bls.n	8013d22 <validate_structure+0x82>
 8013cfe:	2218      	movs	r2, #24
 8013d00:	4668      	mov	r0, sp
 8013d02:	f002 fc0f 	bl	8016524 <div>
 8013d06:	9a01      	ldr	r2, [sp, #4]
 8013d08:	68e3      	ldr	r3, [r4, #12]
 8013d0a:	9900      	ldr	r1, [sp, #0]
 8013d0c:	2a00      	cmp	r2, #0
 8013d0e:	440b      	add	r3, r1
 8013d10:	60e3      	str	r3, [r4, #12]
 8013d12:	bfbb      	ittet	lt
 8013d14:	3218      	addlt	r2, #24
 8013d16:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8013d1a:	60a2      	strge	r2, [r4, #8]
 8013d1c:	60a2      	strlt	r2, [r4, #8]
 8013d1e:	bfb8      	it	lt
 8013d20:	60e3      	strlt	r3, [r4, #12]
 8013d22:	6921      	ldr	r1, [r4, #16]
 8013d24:	290b      	cmp	r1, #11
 8013d26:	d911      	bls.n	8013d4c <validate_structure+0xac>
 8013d28:	220c      	movs	r2, #12
 8013d2a:	4668      	mov	r0, sp
 8013d2c:	f002 fbfa 	bl	8016524 <div>
 8013d30:	9a01      	ldr	r2, [sp, #4]
 8013d32:	6963      	ldr	r3, [r4, #20]
 8013d34:	9900      	ldr	r1, [sp, #0]
 8013d36:	2a00      	cmp	r2, #0
 8013d38:	440b      	add	r3, r1
 8013d3a:	6163      	str	r3, [r4, #20]
 8013d3c:	bfbb      	ittet	lt
 8013d3e:	320c      	addlt	r2, #12
 8013d40:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8013d44:	6122      	strge	r2, [r4, #16]
 8013d46:	6122      	strlt	r2, [r4, #16]
 8013d48:	bfb8      	it	lt
 8013d4a:	6163      	strlt	r3, [r4, #20]
 8013d4c:	6963      	ldr	r3, [r4, #20]
 8013d4e:	0798      	lsls	r0, r3, #30
 8013d50:	d120      	bne.n	8013d94 <validate_structure+0xf4>
 8013d52:	2164      	movs	r1, #100	; 0x64
 8013d54:	fb93 f2f1 	sdiv	r2, r3, r1
 8013d58:	fb01 3212 	mls	r2, r1, r2, r3
 8013d5c:	b9e2      	cbnz	r2, 8013d98 <validate_structure+0xf8>
 8013d5e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8013d62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013d66:	fb93 f1f2 	sdiv	r1, r3, r2
 8013d6a:	fb02 3311 	mls	r3, r2, r1, r3
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	bf14      	ite	ne
 8013d72:	231c      	movne	r3, #28
 8013d74:	231d      	moveq	r3, #29
 8013d76:	68e2      	ldr	r2, [r4, #12]
 8013d78:	2a00      	cmp	r2, #0
 8013d7a:	dc0f      	bgt.n	8013d9c <validate_structure+0xfc>
 8013d7c:	4f33      	ldr	r7, [pc, #204]	; (8013e4c <validate_structure+0x1ac>)
 8013d7e:	260b      	movs	r6, #11
 8013d80:	2064      	movs	r0, #100	; 0x64
 8013d82:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8013d86:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8013d8a:	f1bc 0f00 	cmp.w	ip, #0
 8013d8e:	dd31      	ble.n	8013df4 <validate_structure+0x154>
 8013d90:	b003      	add	sp, #12
 8013d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d94:	231c      	movs	r3, #28
 8013d96:	e7ee      	b.n	8013d76 <validate_structure+0xd6>
 8013d98:	231d      	movs	r3, #29
 8013d9a:	e7ec      	b.n	8013d76 <validate_structure+0xd6>
 8013d9c:	4e2b      	ldr	r6, [pc, #172]	; (8013e4c <validate_structure+0x1ac>)
 8013d9e:	2700      	movs	r7, #0
 8013da0:	2064      	movs	r0, #100	; 0x64
 8013da2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8013da6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8013daa:	2a01      	cmp	r2, #1
 8013dac:	bf14      	ite	ne
 8013dae:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8013db2:	469c      	moveq	ip, r3
 8013db4:	4561      	cmp	r1, ip
 8013db6:	ddeb      	ble.n	8013d90 <validate_structure+0xf0>
 8013db8:	3201      	adds	r2, #1
 8013dba:	eba1 010c 	sub.w	r1, r1, ip
 8013dbe:	2a0c      	cmp	r2, #12
 8013dc0:	60e1      	str	r1, [r4, #12]
 8013dc2:	6122      	str	r2, [r4, #16]
 8013dc4:	d1ef      	bne.n	8013da6 <validate_structure+0x106>
 8013dc6:	6963      	ldr	r3, [r4, #20]
 8013dc8:	1c5a      	adds	r2, r3, #1
 8013dca:	0791      	lsls	r1, r2, #30
 8013dcc:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8013dd0:	d137      	bne.n	8013e42 <validate_structure+0x1a2>
 8013dd2:	fb92 f1f0 	sdiv	r1, r2, r0
 8013dd6:	fb00 2211 	mls	r2, r0, r1, r2
 8013dda:	2a00      	cmp	r2, #0
 8013ddc:	d133      	bne.n	8013e46 <validate_structure+0x1a6>
 8013dde:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8013de2:	fb93 f2f5 	sdiv	r2, r3, r5
 8013de6:	fb05 3312 	mls	r3, r5, r2, r3
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	bf14      	ite	ne
 8013dee:	231c      	movne	r3, #28
 8013df0:	231d      	moveq	r3, #29
 8013df2:	e7d8      	b.n	8013da6 <validate_structure+0x106>
 8013df4:	6921      	ldr	r1, [r4, #16]
 8013df6:	3901      	subs	r1, #1
 8013df8:	6121      	str	r1, [r4, #16]
 8013dfa:	3101      	adds	r1, #1
 8013dfc:	d114      	bne.n	8013e28 <validate_structure+0x188>
 8013dfe:	6963      	ldr	r3, [r4, #20]
 8013e00:	1e5a      	subs	r2, r3, #1
 8013e02:	0791      	lsls	r1, r2, #30
 8013e04:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8013e08:	d117      	bne.n	8013e3a <validate_structure+0x19a>
 8013e0a:	fb92 f1f0 	sdiv	r1, r2, r0
 8013e0e:	fb00 2211 	mls	r2, r0, r1, r2
 8013e12:	b9a2      	cbnz	r2, 8013e3e <validate_structure+0x19e>
 8013e14:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8013e18:	fb93 f2f5 	sdiv	r2, r3, r5
 8013e1c:	fb05 3312 	mls	r3, r5, r2, r3
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	bf14      	ite	ne
 8013e24:	231c      	movne	r3, #28
 8013e26:	231d      	moveq	r3, #29
 8013e28:	6922      	ldr	r2, [r4, #16]
 8013e2a:	2a01      	cmp	r2, #1
 8013e2c:	bf14      	ite	ne
 8013e2e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8013e32:	461a      	moveq	r2, r3
 8013e34:	4462      	add	r2, ip
 8013e36:	60e2      	str	r2, [r4, #12]
 8013e38:	e7a5      	b.n	8013d86 <validate_structure+0xe6>
 8013e3a:	231c      	movs	r3, #28
 8013e3c:	e7f4      	b.n	8013e28 <validate_structure+0x188>
 8013e3e:	231d      	movs	r3, #29
 8013e40:	e7f2      	b.n	8013e28 <validate_structure+0x188>
 8013e42:	231c      	movs	r3, #28
 8013e44:	e7af      	b.n	8013da6 <validate_structure+0x106>
 8013e46:	231d      	movs	r3, #29
 8013e48:	e7ad      	b.n	8013da6 <validate_structure+0x106>
 8013e4a:	bf00      	nop
 8013e4c:	0805b9d4 	.word	0x0805b9d4

08013e50 <mktime>:
 8013e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e54:	b085      	sub	sp, #20
 8013e56:	4607      	mov	r7, r0
 8013e58:	f003 ff5e 	bl	8017d18 <__gettzinfo>
 8013e5c:	4681      	mov	r9, r0
 8013e5e:	4638      	mov	r0, r7
 8013e60:	f7ff ff1e 	bl	8013ca0 <validate_structure>
 8013e64:	e9d7 4000 	ldrd	r4, r0, [r7]
 8013e68:	233c      	movs	r3, #60	; 0x3c
 8013e6a:	fb03 4400 	mla	r4, r3, r0, r4
 8013e6e:	68b8      	ldr	r0, [r7, #8]
 8013e70:	4abc      	ldr	r2, [pc, #752]	; (8014164 <mktime+0x314>)
 8013e72:	697e      	ldr	r6, [r7, #20]
 8013e74:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8013e78:	fb03 4400 	mla	r4, r3, r0, r4
 8013e7c:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8013e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013e84:	3d01      	subs	r5, #1
 8013e86:	2b01      	cmp	r3, #1
 8013e88:	4415      	add	r5, r2
 8013e8a:	dd11      	ble.n	8013eb0 <mktime+0x60>
 8013e8c:	07b1      	lsls	r1, r6, #30
 8013e8e:	d10f      	bne.n	8013eb0 <mktime+0x60>
 8013e90:	2264      	movs	r2, #100	; 0x64
 8013e92:	fb96 f3f2 	sdiv	r3, r6, r2
 8013e96:	fb02 6313 	mls	r3, r2, r3, r6
 8013e9a:	b943      	cbnz	r3, 8013eae <mktime+0x5e>
 8013e9c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8013ea0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013ea4:	fb93 f1f2 	sdiv	r1, r3, r2
 8013ea8:	fb02 3311 	mls	r3, r2, r1, r3
 8013eac:	b903      	cbnz	r3, 8013eb0 <mktime+0x60>
 8013eae:	3501      	adds	r5, #1
 8013eb0:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8013eb4:	3310      	adds	r3, #16
 8013eb6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8013eba:	4293      	cmp	r3, r2
 8013ebc:	61fd      	str	r5, [r7, #28]
 8013ebe:	f200 815d 	bhi.w	801417c <mktime+0x32c>
 8013ec2:	2e46      	cmp	r6, #70	; 0x46
 8013ec4:	dd71      	ble.n	8013faa <mktime+0x15a>
 8013ec6:	2346      	movs	r3, #70	; 0x46
 8013ec8:	f240 1c6d 	movw	ip, #365	; 0x16d
 8013ecc:	2164      	movs	r1, #100	; 0x64
 8013ece:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8013ed2:	079a      	lsls	r2, r3, #30
 8013ed4:	d163      	bne.n	8013f9e <mktime+0x14e>
 8013ed6:	fb93 f2f1 	sdiv	r2, r3, r1
 8013eda:	fb01 3212 	mls	r2, r1, r2, r3
 8013ede:	2a00      	cmp	r2, #0
 8013ee0:	d160      	bne.n	8013fa4 <mktime+0x154>
 8013ee2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8013ee6:	fb92 fef0 	sdiv	lr, r2, r0
 8013eea:	fb00 221e 	mls	r2, r0, lr, r2
 8013eee:	2a00      	cmp	r2, #0
 8013ef0:	bf14      	ite	ne
 8013ef2:	4662      	movne	r2, ip
 8013ef4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8013ef8:	3301      	adds	r3, #1
 8013efa:	429e      	cmp	r6, r3
 8013efc:	4415      	add	r5, r2
 8013efe:	d1e8      	bne.n	8013ed2 <mktime+0x82>
 8013f00:	4b99      	ldr	r3, [pc, #612]	; (8014168 <mktime+0x318>)
 8013f02:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8013f06:	fbc5 4803 	smlal	r4, r8, r5, r3
 8013f0a:	f002 f88f 	bl	801602c <__tz_lock>
 8013f0e:	f002 f899 	bl	8016044 <_tzset_unlocked>
 8013f12:	4b96      	ldr	r3, [pc, #600]	; (801416c <mktime+0x31c>)
 8013f14:	f8d3 b000 	ldr.w	fp, [r3]
 8013f18:	f1bb 0f00 	cmp.w	fp, #0
 8013f1c:	d039      	beq.n	8013f92 <mktime+0x142>
 8013f1e:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8013f22:	6978      	ldr	r0, [r7, #20]
 8013f24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013f28:	f1bb 0f01 	cmp.w	fp, #1
 8013f2c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013f30:	46da      	mov	sl, fp
 8013f32:	bfa8      	it	ge
 8013f34:	f04f 0a01 	movge.w	sl, #1
 8013f38:	4283      	cmp	r3, r0
 8013f3a:	d178      	bne.n	801402e <mktime+0x1de>
 8013f3c:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8013f40:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8013f44:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8013f48:	1a5b      	subs	r3, r3, r1
 8013f4a:	9302      	str	r3, [sp, #8]
 8013f4c:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8013f50:	9303      	str	r3, [sp, #12]
 8013f52:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8013f56:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8013f5a:	9301      	str	r3, [sp, #4]
 8013f5c:	ebb3 0c02 	subs.w	ip, r3, r2
 8013f60:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8013f64:	4564      	cmp	r4, ip
 8013f66:	eb78 0300 	sbcs.w	r3, r8, r0
 8013f6a:	da66      	bge.n	801403a <mktime+0x1ea>
 8013f6c:	f8d9 3000 	ldr.w	r3, [r9]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d06f      	beq.n	8014054 <mktime+0x204>
 8013f74:	9b02      	ldr	r3, [sp, #8]
 8013f76:	429c      	cmp	r4, r3
 8013f78:	9b03      	ldr	r3, [sp, #12]
 8013f7a:	eb78 0303 	sbcs.w	r3, r8, r3
 8013f7e:	db03      	blt.n	8013f88 <mktime+0x138>
 8013f80:	4564      	cmp	r4, ip
 8013f82:	eb78 0300 	sbcs.w	r3, r8, r0
 8013f86:	db6b      	blt.n	8014060 <mktime+0x210>
 8013f88:	f1bb 0f00 	cmp.w	fp, #0
 8013f8c:	f04f 0b00 	mov.w	fp, #0
 8013f90:	da6b      	bge.n	801406a <mktime+0x21a>
 8013f92:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8013f96:	190c      	adds	r4, r1, r4
 8013f98:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8013f9c:	e0a9      	b.n	80140f2 <mktime+0x2a2>
 8013f9e:	f240 126d 	movw	r2, #365	; 0x16d
 8013fa2:	e7a9      	b.n	8013ef8 <mktime+0xa8>
 8013fa4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8013fa8:	e7a6      	b.n	8013ef8 <mktime+0xa8>
 8013faa:	d0a9      	beq.n	8013f00 <mktime+0xb0>
 8013fac:	2345      	movs	r3, #69	; 0x45
 8013fae:	f240 1c6d 	movw	ip, #365	; 0x16d
 8013fb2:	2164      	movs	r1, #100	; 0x64
 8013fb4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8013fb8:	e012      	b.n	8013fe0 <mktime+0x190>
 8013fba:	bb62      	cbnz	r2, 8014016 <mktime+0x1c6>
 8013fbc:	fb93 f2f1 	sdiv	r2, r3, r1
 8013fc0:	fb01 3212 	mls	r2, r1, r2, r3
 8013fc4:	bb52      	cbnz	r2, 801401c <mktime+0x1cc>
 8013fc6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8013fca:	fb92 fef0 	sdiv	lr, r2, r0
 8013fce:	fb00 221e 	mls	r2, r0, lr, r2
 8013fd2:	2a00      	cmp	r2, #0
 8013fd4:	bf14      	ite	ne
 8013fd6:	4662      	movne	r2, ip
 8013fd8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8013fdc:	1aad      	subs	r5, r5, r2
 8013fde:	3b01      	subs	r3, #1
 8013fe0:	429e      	cmp	r6, r3
 8013fe2:	f003 0203 	and.w	r2, r3, #3
 8013fe6:	dbe8      	blt.n	8013fba <mktime+0x16a>
 8013fe8:	b9da      	cbnz	r2, 8014022 <mktime+0x1d2>
 8013fea:	2264      	movs	r2, #100	; 0x64
 8013fec:	fb96 f3f2 	sdiv	r3, r6, r2
 8013ff0:	fb02 6313 	mls	r3, r2, r3, r6
 8013ff4:	b9c3      	cbnz	r3, 8014028 <mktime+0x1d8>
 8013ff6:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8013ffa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013ffe:	fb93 f1f2 	sdiv	r1, r3, r2
 8014002:	fb02 3311 	mls	r3, r2, r1, r3
 8014006:	2b00      	cmp	r3, #0
 8014008:	f240 136d 	movw	r3, #365	; 0x16d
 801400c:	bf08      	it	eq
 801400e:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8014012:	1aed      	subs	r5, r5, r3
 8014014:	e774      	b.n	8013f00 <mktime+0xb0>
 8014016:	f240 126d 	movw	r2, #365	; 0x16d
 801401a:	e7df      	b.n	8013fdc <mktime+0x18c>
 801401c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014020:	e7dc      	b.n	8013fdc <mktime+0x18c>
 8014022:	f240 136d 	movw	r3, #365	; 0x16d
 8014026:	e7f4      	b.n	8014012 <mktime+0x1c2>
 8014028:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801402c:	e7f1      	b.n	8014012 <mktime+0x1c2>
 801402e:	f001 ff53 	bl	8015ed8 <__tzcalc_limits>
 8014032:	2800      	cmp	r0, #0
 8014034:	d182      	bne.n	8013f3c <mktime+0xec>
 8014036:	46d3      	mov	fp, sl
 8014038:	e050      	b.n	80140dc <mktime+0x28c>
 801403a:	9b01      	ldr	r3, [sp, #4]
 801403c:	1a5b      	subs	r3, r3, r1
 801403e:	9301      	str	r3, [sp, #4]
 8014040:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8014044:	eb6e 0e03 	sbc.w	lr, lr, r3
 8014048:	9b01      	ldr	r3, [sp, #4]
 801404a:	429c      	cmp	r4, r3
 801404c:	eb78 030e 	sbcs.w	r3, r8, lr
 8014050:	dbf1      	blt.n	8014036 <mktime+0x1e6>
 8014052:	e78b      	b.n	8013f6c <mktime+0x11c>
 8014054:	9b02      	ldr	r3, [sp, #8]
 8014056:	429c      	cmp	r4, r3
 8014058:	9b03      	ldr	r3, [sp, #12]
 801405a:	eb78 0303 	sbcs.w	r3, r8, r3
 801405e:	db8f      	blt.n	8013f80 <mktime+0x130>
 8014060:	f1bb 0f00 	cmp.w	fp, #0
 8014064:	db3e      	blt.n	80140e4 <mktime+0x294>
 8014066:	f04f 0b01 	mov.w	fp, #1
 801406a:	ea8a 0a0b 	eor.w	sl, sl, fp
 801406e:	f1ba 0f01 	cmp.w	sl, #1
 8014072:	d133      	bne.n	80140dc <mktime+0x28c>
 8014074:	f1bb 0f00 	cmp.w	fp, #0
 8014078:	d04e      	beq.n	8014118 <mktime+0x2c8>
 801407a:	1a52      	subs	r2, r2, r1
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8014082:	4413      	add	r3, r2
 8014084:	1914      	adds	r4, r2, r4
 8014086:	603b      	str	r3, [r7, #0]
 8014088:	4638      	mov	r0, r7
 801408a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 801408e:	f7ff fe07 	bl	8013ca0 <validate_structure>
 8014092:	68fa      	ldr	r2, [r7, #12]
 8014094:	ebb2 020a 	subs.w	r2, r2, sl
 8014098:	d020      	beq.n	80140dc <mktime+0x28c>
 801409a:	2a01      	cmp	r2, #1
 801409c:	dc3e      	bgt.n	801411c <mktime+0x2cc>
 801409e:	1c90      	adds	r0, r2, #2
 80140a0:	bfd8      	it	le
 80140a2:	2201      	movle	r2, #1
 80140a4:	69fb      	ldr	r3, [r7, #28]
 80140a6:	18d3      	adds	r3, r2, r3
 80140a8:	4415      	add	r5, r2
 80140aa:	d540      	bpl.n	801412e <mktime+0x2de>
 80140ac:	1e73      	subs	r3, r6, #1
 80140ae:	0799      	lsls	r1, r3, #30
 80140b0:	d137      	bne.n	8014122 <mktime+0x2d2>
 80140b2:	2264      	movs	r2, #100	; 0x64
 80140b4:	fb93 f1f2 	sdiv	r1, r3, r2
 80140b8:	fb02 3311 	mls	r3, r2, r1, r3
 80140bc:	bba3      	cbnz	r3, 8014128 <mktime+0x2d8>
 80140be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80140c2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80140c6:	fb96 f2f3 	sdiv	r2, r6, r3
 80140ca:	fb03 6612 	mls	r6, r3, r2, r6
 80140ce:	2e00      	cmp	r6, #0
 80140d0:	f240 136d 	movw	r3, #365	; 0x16d
 80140d4:	bf18      	it	ne
 80140d6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80140da:	61fb      	str	r3, [r7, #28]
 80140dc:	f1bb 0f01 	cmp.w	fp, #1
 80140e0:	f47f af57 	bne.w	8013f92 <mktime+0x142>
 80140e4:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80140e8:	190c      	adds	r4, r1, r4
 80140ea:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80140ee:	f04f 0b01 	mov.w	fp, #1
 80140f2:	f001 ffa1 	bl	8016038 <__tz_unlock>
 80140f6:	3504      	adds	r5, #4
 80140f8:	2307      	movs	r3, #7
 80140fa:	fb95 f3f3 	sdiv	r3, r5, r3
 80140fe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014102:	1aed      	subs	r5, r5, r3
 8014104:	bf48      	it	mi
 8014106:	3507      	addmi	r5, #7
 8014108:	f8c7 b020 	str.w	fp, [r7, #32]
 801410c:	61bd      	str	r5, [r7, #24]
 801410e:	4620      	mov	r0, r4
 8014110:	4641      	mov	r1, r8
 8014112:	b005      	add	sp, #20
 8014114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014118:	1a8a      	subs	r2, r1, r2
 801411a:	e7af      	b.n	801407c <mktime+0x22c>
 801411c:	f04f 32ff 	mov.w	r2, #4294967295
 8014120:	e7c0      	b.n	80140a4 <mktime+0x254>
 8014122:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8014126:	e7d8      	b.n	80140da <mktime+0x28a>
 8014128:	f240 136d 	movw	r3, #365	; 0x16d
 801412c:	e7d5      	b.n	80140da <mktime+0x28a>
 801412e:	07b2      	lsls	r2, r6, #30
 8014130:	d11e      	bne.n	8014170 <mktime+0x320>
 8014132:	2164      	movs	r1, #100	; 0x64
 8014134:	fb96 f2f1 	sdiv	r2, r6, r1
 8014138:	fb01 6212 	mls	r2, r1, r2, r6
 801413c:	b9da      	cbnz	r2, 8014176 <mktime+0x326>
 801413e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014142:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8014146:	fb96 f1f2 	sdiv	r1, r6, r2
 801414a:	fb02 6611 	mls	r6, r2, r1, r6
 801414e:	2e00      	cmp	r6, #0
 8014150:	f240 126d 	movw	r2, #365	; 0x16d
 8014154:	bf08      	it	eq
 8014156:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801415a:	4293      	cmp	r3, r2
 801415c:	bfa8      	it	ge
 801415e:	1a9b      	subge	r3, r3, r2
 8014160:	e7bb      	b.n	80140da <mktime+0x28a>
 8014162:	bf00      	nop
 8014164:	0805ba04 	.word	0x0805ba04
 8014168:	00015180 	.word	0x00015180
 801416c:	20005e54 	.word	0x20005e54
 8014170:	f240 126d 	movw	r2, #365	; 0x16d
 8014174:	e7f1      	b.n	801415a <mktime+0x30a>
 8014176:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801417a:	e7ee      	b.n	801415a <mktime+0x30a>
 801417c:	f04f 34ff 	mov.w	r4, #4294967295
 8014180:	46a0      	mov	r8, r4
 8014182:	e7c4      	b.n	801410e <mktime+0x2be>

08014184 <_free_r>:
 8014184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014186:	2900      	cmp	r1, #0
 8014188:	d044      	beq.n	8014214 <_free_r+0x90>
 801418a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801418e:	9001      	str	r0, [sp, #4]
 8014190:	2b00      	cmp	r3, #0
 8014192:	f1a1 0404 	sub.w	r4, r1, #4
 8014196:	bfb8      	it	lt
 8014198:	18e4      	addlt	r4, r4, r3
 801419a:	f003 fe6f 	bl	8017e7c <__malloc_lock>
 801419e:	4a1e      	ldr	r2, [pc, #120]	; (8014218 <_free_r+0x94>)
 80141a0:	9801      	ldr	r0, [sp, #4]
 80141a2:	6813      	ldr	r3, [r2, #0]
 80141a4:	b933      	cbnz	r3, 80141b4 <_free_r+0x30>
 80141a6:	6063      	str	r3, [r4, #4]
 80141a8:	6014      	str	r4, [r2, #0]
 80141aa:	b003      	add	sp, #12
 80141ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141b0:	f003 be6a 	b.w	8017e88 <__malloc_unlock>
 80141b4:	42a3      	cmp	r3, r4
 80141b6:	d908      	bls.n	80141ca <_free_r+0x46>
 80141b8:	6825      	ldr	r5, [r4, #0]
 80141ba:	1961      	adds	r1, r4, r5
 80141bc:	428b      	cmp	r3, r1
 80141be:	bf01      	itttt	eq
 80141c0:	6819      	ldreq	r1, [r3, #0]
 80141c2:	685b      	ldreq	r3, [r3, #4]
 80141c4:	1949      	addeq	r1, r1, r5
 80141c6:	6021      	streq	r1, [r4, #0]
 80141c8:	e7ed      	b.n	80141a6 <_free_r+0x22>
 80141ca:	461a      	mov	r2, r3
 80141cc:	685b      	ldr	r3, [r3, #4]
 80141ce:	b10b      	cbz	r3, 80141d4 <_free_r+0x50>
 80141d0:	42a3      	cmp	r3, r4
 80141d2:	d9fa      	bls.n	80141ca <_free_r+0x46>
 80141d4:	6811      	ldr	r1, [r2, #0]
 80141d6:	1855      	adds	r5, r2, r1
 80141d8:	42a5      	cmp	r5, r4
 80141da:	d10b      	bne.n	80141f4 <_free_r+0x70>
 80141dc:	6824      	ldr	r4, [r4, #0]
 80141de:	4421      	add	r1, r4
 80141e0:	1854      	adds	r4, r2, r1
 80141e2:	42a3      	cmp	r3, r4
 80141e4:	6011      	str	r1, [r2, #0]
 80141e6:	d1e0      	bne.n	80141aa <_free_r+0x26>
 80141e8:	681c      	ldr	r4, [r3, #0]
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	6053      	str	r3, [r2, #4]
 80141ee:	4421      	add	r1, r4
 80141f0:	6011      	str	r1, [r2, #0]
 80141f2:	e7da      	b.n	80141aa <_free_r+0x26>
 80141f4:	d902      	bls.n	80141fc <_free_r+0x78>
 80141f6:	230c      	movs	r3, #12
 80141f8:	6003      	str	r3, [r0, #0]
 80141fa:	e7d6      	b.n	80141aa <_free_r+0x26>
 80141fc:	6825      	ldr	r5, [r4, #0]
 80141fe:	1961      	adds	r1, r4, r5
 8014200:	428b      	cmp	r3, r1
 8014202:	bf04      	itt	eq
 8014204:	6819      	ldreq	r1, [r3, #0]
 8014206:	685b      	ldreq	r3, [r3, #4]
 8014208:	6063      	str	r3, [r4, #4]
 801420a:	bf04      	itt	eq
 801420c:	1949      	addeq	r1, r1, r5
 801420e:	6021      	streq	r1, [r4, #0]
 8014210:	6054      	str	r4, [r2, #4]
 8014212:	e7ca      	b.n	80141aa <_free_r+0x26>
 8014214:	b003      	add	sp, #12
 8014216:	bd30      	pop	{r4, r5, pc}
 8014218:	20005e30 	.word	0x20005e30

0801421c <sbrk_aligned>:
 801421c:	b570      	push	{r4, r5, r6, lr}
 801421e:	4e0e      	ldr	r6, [pc, #56]	; (8014258 <sbrk_aligned+0x3c>)
 8014220:	460c      	mov	r4, r1
 8014222:	6831      	ldr	r1, [r6, #0]
 8014224:	4605      	mov	r5, r0
 8014226:	b911      	cbnz	r1, 801422e <sbrk_aligned+0x12>
 8014228:	f000 fe50 	bl	8014ecc <_sbrk_r>
 801422c:	6030      	str	r0, [r6, #0]
 801422e:	4621      	mov	r1, r4
 8014230:	4628      	mov	r0, r5
 8014232:	f000 fe4b 	bl	8014ecc <_sbrk_r>
 8014236:	1c43      	adds	r3, r0, #1
 8014238:	d00a      	beq.n	8014250 <sbrk_aligned+0x34>
 801423a:	1cc4      	adds	r4, r0, #3
 801423c:	f024 0403 	bic.w	r4, r4, #3
 8014240:	42a0      	cmp	r0, r4
 8014242:	d007      	beq.n	8014254 <sbrk_aligned+0x38>
 8014244:	1a21      	subs	r1, r4, r0
 8014246:	4628      	mov	r0, r5
 8014248:	f000 fe40 	bl	8014ecc <_sbrk_r>
 801424c:	3001      	adds	r0, #1
 801424e:	d101      	bne.n	8014254 <sbrk_aligned+0x38>
 8014250:	f04f 34ff 	mov.w	r4, #4294967295
 8014254:	4620      	mov	r0, r4
 8014256:	bd70      	pop	{r4, r5, r6, pc}
 8014258:	20005e34 	.word	0x20005e34

0801425c <_malloc_r>:
 801425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014260:	1ccd      	adds	r5, r1, #3
 8014262:	f025 0503 	bic.w	r5, r5, #3
 8014266:	3508      	adds	r5, #8
 8014268:	2d0c      	cmp	r5, #12
 801426a:	bf38      	it	cc
 801426c:	250c      	movcc	r5, #12
 801426e:	2d00      	cmp	r5, #0
 8014270:	4607      	mov	r7, r0
 8014272:	db01      	blt.n	8014278 <_malloc_r+0x1c>
 8014274:	42a9      	cmp	r1, r5
 8014276:	d905      	bls.n	8014284 <_malloc_r+0x28>
 8014278:	230c      	movs	r3, #12
 801427a:	603b      	str	r3, [r7, #0]
 801427c:	2600      	movs	r6, #0
 801427e:	4630      	mov	r0, r6
 8014280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014284:	4e2e      	ldr	r6, [pc, #184]	; (8014340 <_malloc_r+0xe4>)
 8014286:	f003 fdf9 	bl	8017e7c <__malloc_lock>
 801428a:	6833      	ldr	r3, [r6, #0]
 801428c:	461c      	mov	r4, r3
 801428e:	bb34      	cbnz	r4, 80142de <_malloc_r+0x82>
 8014290:	4629      	mov	r1, r5
 8014292:	4638      	mov	r0, r7
 8014294:	f7ff ffc2 	bl	801421c <sbrk_aligned>
 8014298:	1c43      	adds	r3, r0, #1
 801429a:	4604      	mov	r4, r0
 801429c:	d14d      	bne.n	801433a <_malloc_r+0xde>
 801429e:	6834      	ldr	r4, [r6, #0]
 80142a0:	4626      	mov	r6, r4
 80142a2:	2e00      	cmp	r6, #0
 80142a4:	d140      	bne.n	8014328 <_malloc_r+0xcc>
 80142a6:	6823      	ldr	r3, [r4, #0]
 80142a8:	4631      	mov	r1, r6
 80142aa:	4638      	mov	r0, r7
 80142ac:	eb04 0803 	add.w	r8, r4, r3
 80142b0:	f000 fe0c 	bl	8014ecc <_sbrk_r>
 80142b4:	4580      	cmp	r8, r0
 80142b6:	d13a      	bne.n	801432e <_malloc_r+0xd2>
 80142b8:	6821      	ldr	r1, [r4, #0]
 80142ba:	3503      	adds	r5, #3
 80142bc:	1a6d      	subs	r5, r5, r1
 80142be:	f025 0503 	bic.w	r5, r5, #3
 80142c2:	3508      	adds	r5, #8
 80142c4:	2d0c      	cmp	r5, #12
 80142c6:	bf38      	it	cc
 80142c8:	250c      	movcc	r5, #12
 80142ca:	4629      	mov	r1, r5
 80142cc:	4638      	mov	r0, r7
 80142ce:	f7ff ffa5 	bl	801421c <sbrk_aligned>
 80142d2:	3001      	adds	r0, #1
 80142d4:	d02b      	beq.n	801432e <_malloc_r+0xd2>
 80142d6:	6823      	ldr	r3, [r4, #0]
 80142d8:	442b      	add	r3, r5
 80142da:	6023      	str	r3, [r4, #0]
 80142dc:	e00e      	b.n	80142fc <_malloc_r+0xa0>
 80142de:	6822      	ldr	r2, [r4, #0]
 80142e0:	1b52      	subs	r2, r2, r5
 80142e2:	d41e      	bmi.n	8014322 <_malloc_r+0xc6>
 80142e4:	2a0b      	cmp	r2, #11
 80142e6:	d916      	bls.n	8014316 <_malloc_r+0xba>
 80142e8:	1961      	adds	r1, r4, r5
 80142ea:	42a3      	cmp	r3, r4
 80142ec:	6025      	str	r5, [r4, #0]
 80142ee:	bf18      	it	ne
 80142f0:	6059      	strne	r1, [r3, #4]
 80142f2:	6863      	ldr	r3, [r4, #4]
 80142f4:	bf08      	it	eq
 80142f6:	6031      	streq	r1, [r6, #0]
 80142f8:	5162      	str	r2, [r4, r5]
 80142fa:	604b      	str	r3, [r1, #4]
 80142fc:	4638      	mov	r0, r7
 80142fe:	f104 060b 	add.w	r6, r4, #11
 8014302:	f003 fdc1 	bl	8017e88 <__malloc_unlock>
 8014306:	f026 0607 	bic.w	r6, r6, #7
 801430a:	1d23      	adds	r3, r4, #4
 801430c:	1af2      	subs	r2, r6, r3
 801430e:	d0b6      	beq.n	801427e <_malloc_r+0x22>
 8014310:	1b9b      	subs	r3, r3, r6
 8014312:	50a3      	str	r3, [r4, r2]
 8014314:	e7b3      	b.n	801427e <_malloc_r+0x22>
 8014316:	6862      	ldr	r2, [r4, #4]
 8014318:	42a3      	cmp	r3, r4
 801431a:	bf0c      	ite	eq
 801431c:	6032      	streq	r2, [r6, #0]
 801431e:	605a      	strne	r2, [r3, #4]
 8014320:	e7ec      	b.n	80142fc <_malloc_r+0xa0>
 8014322:	4623      	mov	r3, r4
 8014324:	6864      	ldr	r4, [r4, #4]
 8014326:	e7b2      	b.n	801428e <_malloc_r+0x32>
 8014328:	4634      	mov	r4, r6
 801432a:	6876      	ldr	r6, [r6, #4]
 801432c:	e7b9      	b.n	80142a2 <_malloc_r+0x46>
 801432e:	230c      	movs	r3, #12
 8014330:	603b      	str	r3, [r7, #0]
 8014332:	4638      	mov	r0, r7
 8014334:	f003 fda8 	bl	8017e88 <__malloc_unlock>
 8014338:	e7a1      	b.n	801427e <_malloc_r+0x22>
 801433a:	6025      	str	r5, [r4, #0]
 801433c:	e7de      	b.n	80142fc <_malloc_r+0xa0>
 801433e:	bf00      	nop
 8014340:	20005e30 	.word	0x20005e30

08014344 <__sfputc_r>:
 8014344:	6893      	ldr	r3, [r2, #8]
 8014346:	3b01      	subs	r3, #1
 8014348:	2b00      	cmp	r3, #0
 801434a:	b410      	push	{r4}
 801434c:	6093      	str	r3, [r2, #8]
 801434e:	da08      	bge.n	8014362 <__sfputc_r+0x1e>
 8014350:	6994      	ldr	r4, [r2, #24]
 8014352:	42a3      	cmp	r3, r4
 8014354:	db01      	blt.n	801435a <__sfputc_r+0x16>
 8014356:	290a      	cmp	r1, #10
 8014358:	d103      	bne.n	8014362 <__sfputc_r+0x1e>
 801435a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801435e:	f001 bff7 	b.w	8016350 <__swbuf_r>
 8014362:	6813      	ldr	r3, [r2, #0]
 8014364:	1c58      	adds	r0, r3, #1
 8014366:	6010      	str	r0, [r2, #0]
 8014368:	7019      	strb	r1, [r3, #0]
 801436a:	4608      	mov	r0, r1
 801436c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014370:	4770      	bx	lr

08014372 <__sfputs_r>:
 8014372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014374:	4606      	mov	r6, r0
 8014376:	460f      	mov	r7, r1
 8014378:	4614      	mov	r4, r2
 801437a:	18d5      	adds	r5, r2, r3
 801437c:	42ac      	cmp	r4, r5
 801437e:	d101      	bne.n	8014384 <__sfputs_r+0x12>
 8014380:	2000      	movs	r0, #0
 8014382:	e007      	b.n	8014394 <__sfputs_r+0x22>
 8014384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014388:	463a      	mov	r2, r7
 801438a:	4630      	mov	r0, r6
 801438c:	f7ff ffda 	bl	8014344 <__sfputc_r>
 8014390:	1c43      	adds	r3, r0, #1
 8014392:	d1f3      	bne.n	801437c <__sfputs_r+0xa>
 8014394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014398 <_vfiprintf_r>:
 8014398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801439c:	460d      	mov	r5, r1
 801439e:	b09d      	sub	sp, #116	; 0x74
 80143a0:	4614      	mov	r4, r2
 80143a2:	4698      	mov	r8, r3
 80143a4:	4606      	mov	r6, r0
 80143a6:	b118      	cbz	r0, 80143b0 <_vfiprintf_r+0x18>
 80143a8:	6983      	ldr	r3, [r0, #24]
 80143aa:	b90b      	cbnz	r3, 80143b0 <_vfiprintf_r+0x18>
 80143ac:	f003 f864 	bl	8017478 <__sinit>
 80143b0:	4b89      	ldr	r3, [pc, #548]	; (80145d8 <_vfiprintf_r+0x240>)
 80143b2:	429d      	cmp	r5, r3
 80143b4:	d11b      	bne.n	80143ee <_vfiprintf_r+0x56>
 80143b6:	6875      	ldr	r5, [r6, #4]
 80143b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143ba:	07d9      	lsls	r1, r3, #31
 80143bc:	d405      	bmi.n	80143ca <_vfiprintf_r+0x32>
 80143be:	89ab      	ldrh	r3, [r5, #12]
 80143c0:	059a      	lsls	r2, r3, #22
 80143c2:	d402      	bmi.n	80143ca <_vfiprintf_r+0x32>
 80143c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143c6:	f003 fcb1 	bl	8017d2c <__retarget_lock_acquire_recursive>
 80143ca:	89ab      	ldrh	r3, [r5, #12]
 80143cc:	071b      	lsls	r3, r3, #28
 80143ce:	d501      	bpl.n	80143d4 <_vfiprintf_r+0x3c>
 80143d0:	692b      	ldr	r3, [r5, #16]
 80143d2:	b9eb      	cbnz	r3, 8014410 <_vfiprintf_r+0x78>
 80143d4:	4629      	mov	r1, r5
 80143d6:	4630      	mov	r0, r6
 80143d8:	f002 f81e 	bl	8016418 <__swsetup_r>
 80143dc:	b1c0      	cbz	r0, 8014410 <_vfiprintf_r+0x78>
 80143de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143e0:	07dc      	lsls	r4, r3, #31
 80143e2:	d50e      	bpl.n	8014402 <_vfiprintf_r+0x6a>
 80143e4:	f04f 30ff 	mov.w	r0, #4294967295
 80143e8:	b01d      	add	sp, #116	; 0x74
 80143ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ee:	4b7b      	ldr	r3, [pc, #492]	; (80145dc <_vfiprintf_r+0x244>)
 80143f0:	429d      	cmp	r5, r3
 80143f2:	d101      	bne.n	80143f8 <_vfiprintf_r+0x60>
 80143f4:	68b5      	ldr	r5, [r6, #8]
 80143f6:	e7df      	b.n	80143b8 <_vfiprintf_r+0x20>
 80143f8:	4b79      	ldr	r3, [pc, #484]	; (80145e0 <_vfiprintf_r+0x248>)
 80143fa:	429d      	cmp	r5, r3
 80143fc:	bf08      	it	eq
 80143fe:	68f5      	ldreq	r5, [r6, #12]
 8014400:	e7da      	b.n	80143b8 <_vfiprintf_r+0x20>
 8014402:	89ab      	ldrh	r3, [r5, #12]
 8014404:	0598      	lsls	r0, r3, #22
 8014406:	d4ed      	bmi.n	80143e4 <_vfiprintf_r+0x4c>
 8014408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801440a:	f003 fc91 	bl	8017d30 <__retarget_lock_release_recursive>
 801440e:	e7e9      	b.n	80143e4 <_vfiprintf_r+0x4c>
 8014410:	2300      	movs	r3, #0
 8014412:	9309      	str	r3, [sp, #36]	; 0x24
 8014414:	2320      	movs	r3, #32
 8014416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801441a:	f8cd 800c 	str.w	r8, [sp, #12]
 801441e:	2330      	movs	r3, #48	; 0x30
 8014420:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80145e4 <_vfiprintf_r+0x24c>
 8014424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014428:	f04f 0901 	mov.w	r9, #1
 801442c:	4623      	mov	r3, r4
 801442e:	469a      	mov	sl, r3
 8014430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014434:	b10a      	cbz	r2, 801443a <_vfiprintf_r+0xa2>
 8014436:	2a25      	cmp	r2, #37	; 0x25
 8014438:	d1f9      	bne.n	801442e <_vfiprintf_r+0x96>
 801443a:	ebba 0b04 	subs.w	fp, sl, r4
 801443e:	d00b      	beq.n	8014458 <_vfiprintf_r+0xc0>
 8014440:	465b      	mov	r3, fp
 8014442:	4622      	mov	r2, r4
 8014444:	4629      	mov	r1, r5
 8014446:	4630      	mov	r0, r6
 8014448:	f7ff ff93 	bl	8014372 <__sfputs_r>
 801444c:	3001      	adds	r0, #1
 801444e:	f000 80aa 	beq.w	80145a6 <_vfiprintf_r+0x20e>
 8014452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014454:	445a      	add	r2, fp
 8014456:	9209      	str	r2, [sp, #36]	; 0x24
 8014458:	f89a 3000 	ldrb.w	r3, [sl]
 801445c:	2b00      	cmp	r3, #0
 801445e:	f000 80a2 	beq.w	80145a6 <_vfiprintf_r+0x20e>
 8014462:	2300      	movs	r3, #0
 8014464:	f04f 32ff 	mov.w	r2, #4294967295
 8014468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801446c:	f10a 0a01 	add.w	sl, sl, #1
 8014470:	9304      	str	r3, [sp, #16]
 8014472:	9307      	str	r3, [sp, #28]
 8014474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014478:	931a      	str	r3, [sp, #104]	; 0x68
 801447a:	4654      	mov	r4, sl
 801447c:	2205      	movs	r2, #5
 801447e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014482:	4858      	ldr	r0, [pc, #352]	; (80145e4 <_vfiprintf_r+0x24c>)
 8014484:	f7eb fecc 	bl	8000220 <memchr>
 8014488:	9a04      	ldr	r2, [sp, #16]
 801448a:	b9d8      	cbnz	r0, 80144c4 <_vfiprintf_r+0x12c>
 801448c:	06d1      	lsls	r1, r2, #27
 801448e:	bf44      	itt	mi
 8014490:	2320      	movmi	r3, #32
 8014492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014496:	0713      	lsls	r3, r2, #28
 8014498:	bf44      	itt	mi
 801449a:	232b      	movmi	r3, #43	; 0x2b
 801449c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144a0:	f89a 3000 	ldrb.w	r3, [sl]
 80144a4:	2b2a      	cmp	r3, #42	; 0x2a
 80144a6:	d015      	beq.n	80144d4 <_vfiprintf_r+0x13c>
 80144a8:	9a07      	ldr	r2, [sp, #28]
 80144aa:	4654      	mov	r4, sl
 80144ac:	2000      	movs	r0, #0
 80144ae:	f04f 0c0a 	mov.w	ip, #10
 80144b2:	4621      	mov	r1, r4
 80144b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144b8:	3b30      	subs	r3, #48	; 0x30
 80144ba:	2b09      	cmp	r3, #9
 80144bc:	d94e      	bls.n	801455c <_vfiprintf_r+0x1c4>
 80144be:	b1b0      	cbz	r0, 80144ee <_vfiprintf_r+0x156>
 80144c0:	9207      	str	r2, [sp, #28]
 80144c2:	e014      	b.n	80144ee <_vfiprintf_r+0x156>
 80144c4:	eba0 0308 	sub.w	r3, r0, r8
 80144c8:	fa09 f303 	lsl.w	r3, r9, r3
 80144cc:	4313      	orrs	r3, r2
 80144ce:	9304      	str	r3, [sp, #16]
 80144d0:	46a2      	mov	sl, r4
 80144d2:	e7d2      	b.n	801447a <_vfiprintf_r+0xe2>
 80144d4:	9b03      	ldr	r3, [sp, #12]
 80144d6:	1d19      	adds	r1, r3, #4
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	9103      	str	r1, [sp, #12]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	bfbb      	ittet	lt
 80144e0:	425b      	neglt	r3, r3
 80144e2:	f042 0202 	orrlt.w	r2, r2, #2
 80144e6:	9307      	strge	r3, [sp, #28]
 80144e8:	9307      	strlt	r3, [sp, #28]
 80144ea:	bfb8      	it	lt
 80144ec:	9204      	strlt	r2, [sp, #16]
 80144ee:	7823      	ldrb	r3, [r4, #0]
 80144f0:	2b2e      	cmp	r3, #46	; 0x2e
 80144f2:	d10c      	bne.n	801450e <_vfiprintf_r+0x176>
 80144f4:	7863      	ldrb	r3, [r4, #1]
 80144f6:	2b2a      	cmp	r3, #42	; 0x2a
 80144f8:	d135      	bne.n	8014566 <_vfiprintf_r+0x1ce>
 80144fa:	9b03      	ldr	r3, [sp, #12]
 80144fc:	1d1a      	adds	r2, r3, #4
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	9203      	str	r2, [sp, #12]
 8014502:	2b00      	cmp	r3, #0
 8014504:	bfb8      	it	lt
 8014506:	f04f 33ff 	movlt.w	r3, #4294967295
 801450a:	3402      	adds	r4, #2
 801450c:	9305      	str	r3, [sp, #20]
 801450e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80145f4 <_vfiprintf_r+0x25c>
 8014512:	7821      	ldrb	r1, [r4, #0]
 8014514:	2203      	movs	r2, #3
 8014516:	4650      	mov	r0, sl
 8014518:	f7eb fe82 	bl	8000220 <memchr>
 801451c:	b140      	cbz	r0, 8014530 <_vfiprintf_r+0x198>
 801451e:	2340      	movs	r3, #64	; 0x40
 8014520:	eba0 000a 	sub.w	r0, r0, sl
 8014524:	fa03 f000 	lsl.w	r0, r3, r0
 8014528:	9b04      	ldr	r3, [sp, #16]
 801452a:	4303      	orrs	r3, r0
 801452c:	3401      	adds	r4, #1
 801452e:	9304      	str	r3, [sp, #16]
 8014530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014534:	482c      	ldr	r0, [pc, #176]	; (80145e8 <_vfiprintf_r+0x250>)
 8014536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801453a:	2206      	movs	r2, #6
 801453c:	f7eb fe70 	bl	8000220 <memchr>
 8014540:	2800      	cmp	r0, #0
 8014542:	d03f      	beq.n	80145c4 <_vfiprintf_r+0x22c>
 8014544:	4b29      	ldr	r3, [pc, #164]	; (80145ec <_vfiprintf_r+0x254>)
 8014546:	bb1b      	cbnz	r3, 8014590 <_vfiprintf_r+0x1f8>
 8014548:	9b03      	ldr	r3, [sp, #12]
 801454a:	3307      	adds	r3, #7
 801454c:	f023 0307 	bic.w	r3, r3, #7
 8014550:	3308      	adds	r3, #8
 8014552:	9303      	str	r3, [sp, #12]
 8014554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014556:	443b      	add	r3, r7
 8014558:	9309      	str	r3, [sp, #36]	; 0x24
 801455a:	e767      	b.n	801442c <_vfiprintf_r+0x94>
 801455c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014560:	460c      	mov	r4, r1
 8014562:	2001      	movs	r0, #1
 8014564:	e7a5      	b.n	80144b2 <_vfiprintf_r+0x11a>
 8014566:	2300      	movs	r3, #0
 8014568:	3401      	adds	r4, #1
 801456a:	9305      	str	r3, [sp, #20]
 801456c:	4619      	mov	r1, r3
 801456e:	f04f 0c0a 	mov.w	ip, #10
 8014572:	4620      	mov	r0, r4
 8014574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014578:	3a30      	subs	r2, #48	; 0x30
 801457a:	2a09      	cmp	r2, #9
 801457c:	d903      	bls.n	8014586 <_vfiprintf_r+0x1ee>
 801457e:	2b00      	cmp	r3, #0
 8014580:	d0c5      	beq.n	801450e <_vfiprintf_r+0x176>
 8014582:	9105      	str	r1, [sp, #20]
 8014584:	e7c3      	b.n	801450e <_vfiprintf_r+0x176>
 8014586:	fb0c 2101 	mla	r1, ip, r1, r2
 801458a:	4604      	mov	r4, r0
 801458c:	2301      	movs	r3, #1
 801458e:	e7f0      	b.n	8014572 <_vfiprintf_r+0x1da>
 8014590:	ab03      	add	r3, sp, #12
 8014592:	9300      	str	r3, [sp, #0]
 8014594:	462a      	mov	r2, r5
 8014596:	4b16      	ldr	r3, [pc, #88]	; (80145f0 <_vfiprintf_r+0x258>)
 8014598:	a904      	add	r1, sp, #16
 801459a:	4630      	mov	r0, r6
 801459c:	f000 f8cc 	bl	8014738 <_printf_float>
 80145a0:	4607      	mov	r7, r0
 80145a2:	1c78      	adds	r0, r7, #1
 80145a4:	d1d6      	bne.n	8014554 <_vfiprintf_r+0x1bc>
 80145a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145a8:	07d9      	lsls	r1, r3, #31
 80145aa:	d405      	bmi.n	80145b8 <_vfiprintf_r+0x220>
 80145ac:	89ab      	ldrh	r3, [r5, #12]
 80145ae:	059a      	lsls	r2, r3, #22
 80145b0:	d402      	bmi.n	80145b8 <_vfiprintf_r+0x220>
 80145b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80145b4:	f003 fbbc 	bl	8017d30 <__retarget_lock_release_recursive>
 80145b8:	89ab      	ldrh	r3, [r5, #12]
 80145ba:	065b      	lsls	r3, r3, #25
 80145bc:	f53f af12 	bmi.w	80143e4 <_vfiprintf_r+0x4c>
 80145c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145c2:	e711      	b.n	80143e8 <_vfiprintf_r+0x50>
 80145c4:	ab03      	add	r3, sp, #12
 80145c6:	9300      	str	r3, [sp, #0]
 80145c8:	462a      	mov	r2, r5
 80145ca:	4b09      	ldr	r3, [pc, #36]	; (80145f0 <_vfiprintf_r+0x258>)
 80145cc:	a904      	add	r1, sp, #16
 80145ce:	4630      	mov	r0, r6
 80145d0:	f000 fb56 	bl	8014c80 <_printf_i>
 80145d4:	e7e4      	b.n	80145a0 <_vfiprintf_r+0x208>
 80145d6:	bf00      	nop
 80145d8:	0805bcfc 	.word	0x0805bcfc
 80145dc:	0805bd1c 	.word	0x0805bd1c
 80145e0:	0805bcdc 	.word	0x0805bcdc
 80145e4:	0805ba34 	.word	0x0805ba34
 80145e8:	0805ba3e 	.word	0x0805ba3e
 80145ec:	08014739 	.word	0x08014739
 80145f0:	08014373 	.word	0x08014373
 80145f4:	0805ba3a 	.word	0x0805ba3a

080145f8 <__cvt>:
 80145f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80145fc:	ec55 4b10 	vmov	r4, r5, d0
 8014600:	2d00      	cmp	r5, #0
 8014602:	460e      	mov	r6, r1
 8014604:	4619      	mov	r1, r3
 8014606:	462b      	mov	r3, r5
 8014608:	bfbb      	ittet	lt
 801460a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801460e:	461d      	movlt	r5, r3
 8014610:	2300      	movge	r3, #0
 8014612:	232d      	movlt	r3, #45	; 0x2d
 8014614:	700b      	strb	r3, [r1, #0]
 8014616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014618:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801461c:	4691      	mov	r9, r2
 801461e:	f023 0820 	bic.w	r8, r3, #32
 8014622:	bfbc      	itt	lt
 8014624:	4622      	movlt	r2, r4
 8014626:	4614      	movlt	r4, r2
 8014628:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801462c:	d005      	beq.n	801463a <__cvt+0x42>
 801462e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014632:	d100      	bne.n	8014636 <__cvt+0x3e>
 8014634:	3601      	adds	r6, #1
 8014636:	2102      	movs	r1, #2
 8014638:	e000      	b.n	801463c <__cvt+0x44>
 801463a:	2103      	movs	r1, #3
 801463c:	ab03      	add	r3, sp, #12
 801463e:	9301      	str	r3, [sp, #4]
 8014640:	ab02      	add	r3, sp, #8
 8014642:	9300      	str	r3, [sp, #0]
 8014644:	ec45 4b10 	vmov	d0, r4, r5
 8014648:	4653      	mov	r3, sl
 801464a:	4632      	mov	r2, r6
 801464c:	f002 f80c 	bl	8016668 <_dtoa_r>
 8014650:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014654:	4607      	mov	r7, r0
 8014656:	d102      	bne.n	801465e <__cvt+0x66>
 8014658:	f019 0f01 	tst.w	r9, #1
 801465c:	d022      	beq.n	80146a4 <__cvt+0xac>
 801465e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014662:	eb07 0906 	add.w	r9, r7, r6
 8014666:	d110      	bne.n	801468a <__cvt+0x92>
 8014668:	783b      	ldrb	r3, [r7, #0]
 801466a:	2b30      	cmp	r3, #48	; 0x30
 801466c:	d10a      	bne.n	8014684 <__cvt+0x8c>
 801466e:	2200      	movs	r2, #0
 8014670:	2300      	movs	r3, #0
 8014672:	4620      	mov	r0, r4
 8014674:	4629      	mov	r1, r5
 8014676:	f7ec fa47 	bl	8000b08 <__aeabi_dcmpeq>
 801467a:	b918      	cbnz	r0, 8014684 <__cvt+0x8c>
 801467c:	f1c6 0601 	rsb	r6, r6, #1
 8014680:	f8ca 6000 	str.w	r6, [sl]
 8014684:	f8da 3000 	ldr.w	r3, [sl]
 8014688:	4499      	add	r9, r3
 801468a:	2200      	movs	r2, #0
 801468c:	2300      	movs	r3, #0
 801468e:	4620      	mov	r0, r4
 8014690:	4629      	mov	r1, r5
 8014692:	f7ec fa39 	bl	8000b08 <__aeabi_dcmpeq>
 8014696:	b108      	cbz	r0, 801469c <__cvt+0xa4>
 8014698:	f8cd 900c 	str.w	r9, [sp, #12]
 801469c:	2230      	movs	r2, #48	; 0x30
 801469e:	9b03      	ldr	r3, [sp, #12]
 80146a0:	454b      	cmp	r3, r9
 80146a2:	d307      	bcc.n	80146b4 <__cvt+0xbc>
 80146a4:	9b03      	ldr	r3, [sp, #12]
 80146a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80146a8:	1bdb      	subs	r3, r3, r7
 80146aa:	4638      	mov	r0, r7
 80146ac:	6013      	str	r3, [r2, #0]
 80146ae:	b004      	add	sp, #16
 80146b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146b4:	1c59      	adds	r1, r3, #1
 80146b6:	9103      	str	r1, [sp, #12]
 80146b8:	701a      	strb	r2, [r3, #0]
 80146ba:	e7f0      	b.n	801469e <__cvt+0xa6>

080146bc <__exponent>:
 80146bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80146be:	4603      	mov	r3, r0
 80146c0:	2900      	cmp	r1, #0
 80146c2:	bfb8      	it	lt
 80146c4:	4249      	neglt	r1, r1
 80146c6:	f803 2b02 	strb.w	r2, [r3], #2
 80146ca:	bfb4      	ite	lt
 80146cc:	222d      	movlt	r2, #45	; 0x2d
 80146ce:	222b      	movge	r2, #43	; 0x2b
 80146d0:	2909      	cmp	r1, #9
 80146d2:	7042      	strb	r2, [r0, #1]
 80146d4:	dd2a      	ble.n	801472c <__exponent+0x70>
 80146d6:	f10d 0407 	add.w	r4, sp, #7
 80146da:	46a4      	mov	ip, r4
 80146dc:	270a      	movs	r7, #10
 80146de:	46a6      	mov	lr, r4
 80146e0:	460a      	mov	r2, r1
 80146e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80146e6:	fb07 1516 	mls	r5, r7, r6, r1
 80146ea:	3530      	adds	r5, #48	; 0x30
 80146ec:	2a63      	cmp	r2, #99	; 0x63
 80146ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80146f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80146f6:	4631      	mov	r1, r6
 80146f8:	dcf1      	bgt.n	80146de <__exponent+0x22>
 80146fa:	3130      	adds	r1, #48	; 0x30
 80146fc:	f1ae 0502 	sub.w	r5, lr, #2
 8014700:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014704:	1c44      	adds	r4, r0, #1
 8014706:	4629      	mov	r1, r5
 8014708:	4561      	cmp	r1, ip
 801470a:	d30a      	bcc.n	8014722 <__exponent+0x66>
 801470c:	f10d 0209 	add.w	r2, sp, #9
 8014710:	eba2 020e 	sub.w	r2, r2, lr
 8014714:	4565      	cmp	r5, ip
 8014716:	bf88      	it	hi
 8014718:	2200      	movhi	r2, #0
 801471a:	4413      	add	r3, r2
 801471c:	1a18      	subs	r0, r3, r0
 801471e:	b003      	add	sp, #12
 8014720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014726:	f804 2f01 	strb.w	r2, [r4, #1]!
 801472a:	e7ed      	b.n	8014708 <__exponent+0x4c>
 801472c:	2330      	movs	r3, #48	; 0x30
 801472e:	3130      	adds	r1, #48	; 0x30
 8014730:	7083      	strb	r3, [r0, #2]
 8014732:	70c1      	strb	r1, [r0, #3]
 8014734:	1d03      	adds	r3, r0, #4
 8014736:	e7f1      	b.n	801471c <__exponent+0x60>

08014738 <_printf_float>:
 8014738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801473c:	ed2d 8b02 	vpush	{d8}
 8014740:	b08d      	sub	sp, #52	; 0x34
 8014742:	460c      	mov	r4, r1
 8014744:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014748:	4616      	mov	r6, r2
 801474a:	461f      	mov	r7, r3
 801474c:	4605      	mov	r5, r0
 801474e:	f003 fae7 	bl	8017d20 <_localeconv_r>
 8014752:	f8d0 a000 	ldr.w	sl, [r0]
 8014756:	4650      	mov	r0, sl
 8014758:	f7eb fd54 	bl	8000204 <strlen>
 801475c:	2300      	movs	r3, #0
 801475e:	930a      	str	r3, [sp, #40]	; 0x28
 8014760:	6823      	ldr	r3, [r4, #0]
 8014762:	9305      	str	r3, [sp, #20]
 8014764:	f8d8 3000 	ldr.w	r3, [r8]
 8014768:	f894 b018 	ldrb.w	fp, [r4, #24]
 801476c:	3307      	adds	r3, #7
 801476e:	f023 0307 	bic.w	r3, r3, #7
 8014772:	f103 0208 	add.w	r2, r3, #8
 8014776:	f8c8 2000 	str.w	r2, [r8]
 801477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801477e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014782:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014786:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801478a:	9307      	str	r3, [sp, #28]
 801478c:	f8cd 8018 	str.w	r8, [sp, #24]
 8014790:	ee08 0a10 	vmov	s16, r0
 8014794:	4b9f      	ldr	r3, [pc, #636]	; (8014a14 <_printf_float+0x2dc>)
 8014796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801479a:	f04f 32ff 	mov.w	r2, #4294967295
 801479e:	f7ec f9e5 	bl	8000b6c <__aeabi_dcmpun>
 80147a2:	bb88      	cbnz	r0, 8014808 <_printf_float+0xd0>
 80147a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80147a8:	4b9a      	ldr	r3, [pc, #616]	; (8014a14 <_printf_float+0x2dc>)
 80147aa:	f04f 32ff 	mov.w	r2, #4294967295
 80147ae:	f7ec f9bf 	bl	8000b30 <__aeabi_dcmple>
 80147b2:	bb48      	cbnz	r0, 8014808 <_printf_float+0xd0>
 80147b4:	2200      	movs	r2, #0
 80147b6:	2300      	movs	r3, #0
 80147b8:	4640      	mov	r0, r8
 80147ba:	4649      	mov	r1, r9
 80147bc:	f7ec f9ae 	bl	8000b1c <__aeabi_dcmplt>
 80147c0:	b110      	cbz	r0, 80147c8 <_printf_float+0x90>
 80147c2:	232d      	movs	r3, #45	; 0x2d
 80147c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80147c8:	4b93      	ldr	r3, [pc, #588]	; (8014a18 <_printf_float+0x2e0>)
 80147ca:	4894      	ldr	r0, [pc, #592]	; (8014a1c <_printf_float+0x2e4>)
 80147cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80147d0:	bf94      	ite	ls
 80147d2:	4698      	movls	r8, r3
 80147d4:	4680      	movhi	r8, r0
 80147d6:	2303      	movs	r3, #3
 80147d8:	6123      	str	r3, [r4, #16]
 80147da:	9b05      	ldr	r3, [sp, #20]
 80147dc:	f023 0204 	bic.w	r2, r3, #4
 80147e0:	6022      	str	r2, [r4, #0]
 80147e2:	f04f 0900 	mov.w	r9, #0
 80147e6:	9700      	str	r7, [sp, #0]
 80147e8:	4633      	mov	r3, r6
 80147ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80147ec:	4621      	mov	r1, r4
 80147ee:	4628      	mov	r0, r5
 80147f0:	f000 f9d8 	bl	8014ba4 <_printf_common>
 80147f4:	3001      	adds	r0, #1
 80147f6:	f040 8090 	bne.w	801491a <_printf_float+0x1e2>
 80147fa:	f04f 30ff 	mov.w	r0, #4294967295
 80147fe:	b00d      	add	sp, #52	; 0x34
 8014800:	ecbd 8b02 	vpop	{d8}
 8014804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014808:	4642      	mov	r2, r8
 801480a:	464b      	mov	r3, r9
 801480c:	4640      	mov	r0, r8
 801480e:	4649      	mov	r1, r9
 8014810:	f7ec f9ac 	bl	8000b6c <__aeabi_dcmpun>
 8014814:	b140      	cbz	r0, 8014828 <_printf_float+0xf0>
 8014816:	464b      	mov	r3, r9
 8014818:	2b00      	cmp	r3, #0
 801481a:	bfbc      	itt	lt
 801481c:	232d      	movlt	r3, #45	; 0x2d
 801481e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014822:	487f      	ldr	r0, [pc, #508]	; (8014a20 <_printf_float+0x2e8>)
 8014824:	4b7f      	ldr	r3, [pc, #508]	; (8014a24 <_printf_float+0x2ec>)
 8014826:	e7d1      	b.n	80147cc <_printf_float+0x94>
 8014828:	6863      	ldr	r3, [r4, #4]
 801482a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801482e:	9206      	str	r2, [sp, #24]
 8014830:	1c5a      	adds	r2, r3, #1
 8014832:	d13f      	bne.n	80148b4 <_printf_float+0x17c>
 8014834:	2306      	movs	r3, #6
 8014836:	6063      	str	r3, [r4, #4]
 8014838:	9b05      	ldr	r3, [sp, #20]
 801483a:	6861      	ldr	r1, [r4, #4]
 801483c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014840:	2300      	movs	r3, #0
 8014842:	9303      	str	r3, [sp, #12]
 8014844:	ab0a      	add	r3, sp, #40	; 0x28
 8014846:	e9cd b301 	strd	fp, r3, [sp, #4]
 801484a:	ab09      	add	r3, sp, #36	; 0x24
 801484c:	ec49 8b10 	vmov	d0, r8, r9
 8014850:	9300      	str	r3, [sp, #0]
 8014852:	6022      	str	r2, [r4, #0]
 8014854:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014858:	4628      	mov	r0, r5
 801485a:	f7ff fecd 	bl	80145f8 <__cvt>
 801485e:	9b06      	ldr	r3, [sp, #24]
 8014860:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014862:	2b47      	cmp	r3, #71	; 0x47
 8014864:	4680      	mov	r8, r0
 8014866:	d108      	bne.n	801487a <_printf_float+0x142>
 8014868:	1cc8      	adds	r0, r1, #3
 801486a:	db02      	blt.n	8014872 <_printf_float+0x13a>
 801486c:	6863      	ldr	r3, [r4, #4]
 801486e:	4299      	cmp	r1, r3
 8014870:	dd41      	ble.n	80148f6 <_printf_float+0x1be>
 8014872:	f1ab 0b02 	sub.w	fp, fp, #2
 8014876:	fa5f fb8b 	uxtb.w	fp, fp
 801487a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801487e:	d820      	bhi.n	80148c2 <_printf_float+0x18a>
 8014880:	3901      	subs	r1, #1
 8014882:	465a      	mov	r2, fp
 8014884:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014888:	9109      	str	r1, [sp, #36]	; 0x24
 801488a:	f7ff ff17 	bl	80146bc <__exponent>
 801488e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014890:	1813      	adds	r3, r2, r0
 8014892:	2a01      	cmp	r2, #1
 8014894:	4681      	mov	r9, r0
 8014896:	6123      	str	r3, [r4, #16]
 8014898:	dc02      	bgt.n	80148a0 <_printf_float+0x168>
 801489a:	6822      	ldr	r2, [r4, #0]
 801489c:	07d2      	lsls	r2, r2, #31
 801489e:	d501      	bpl.n	80148a4 <_printf_float+0x16c>
 80148a0:	3301      	adds	r3, #1
 80148a2:	6123      	str	r3, [r4, #16]
 80148a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d09c      	beq.n	80147e6 <_printf_float+0xae>
 80148ac:	232d      	movs	r3, #45	; 0x2d
 80148ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148b2:	e798      	b.n	80147e6 <_printf_float+0xae>
 80148b4:	9a06      	ldr	r2, [sp, #24]
 80148b6:	2a47      	cmp	r2, #71	; 0x47
 80148b8:	d1be      	bne.n	8014838 <_printf_float+0x100>
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d1bc      	bne.n	8014838 <_printf_float+0x100>
 80148be:	2301      	movs	r3, #1
 80148c0:	e7b9      	b.n	8014836 <_printf_float+0xfe>
 80148c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80148c6:	d118      	bne.n	80148fa <_printf_float+0x1c2>
 80148c8:	2900      	cmp	r1, #0
 80148ca:	6863      	ldr	r3, [r4, #4]
 80148cc:	dd0b      	ble.n	80148e6 <_printf_float+0x1ae>
 80148ce:	6121      	str	r1, [r4, #16]
 80148d0:	b913      	cbnz	r3, 80148d8 <_printf_float+0x1a0>
 80148d2:	6822      	ldr	r2, [r4, #0]
 80148d4:	07d0      	lsls	r0, r2, #31
 80148d6:	d502      	bpl.n	80148de <_printf_float+0x1a6>
 80148d8:	3301      	adds	r3, #1
 80148da:	440b      	add	r3, r1
 80148dc:	6123      	str	r3, [r4, #16]
 80148de:	65a1      	str	r1, [r4, #88]	; 0x58
 80148e0:	f04f 0900 	mov.w	r9, #0
 80148e4:	e7de      	b.n	80148a4 <_printf_float+0x16c>
 80148e6:	b913      	cbnz	r3, 80148ee <_printf_float+0x1b6>
 80148e8:	6822      	ldr	r2, [r4, #0]
 80148ea:	07d2      	lsls	r2, r2, #31
 80148ec:	d501      	bpl.n	80148f2 <_printf_float+0x1ba>
 80148ee:	3302      	adds	r3, #2
 80148f0:	e7f4      	b.n	80148dc <_printf_float+0x1a4>
 80148f2:	2301      	movs	r3, #1
 80148f4:	e7f2      	b.n	80148dc <_printf_float+0x1a4>
 80148f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80148fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148fc:	4299      	cmp	r1, r3
 80148fe:	db05      	blt.n	801490c <_printf_float+0x1d4>
 8014900:	6823      	ldr	r3, [r4, #0]
 8014902:	6121      	str	r1, [r4, #16]
 8014904:	07d8      	lsls	r0, r3, #31
 8014906:	d5ea      	bpl.n	80148de <_printf_float+0x1a6>
 8014908:	1c4b      	adds	r3, r1, #1
 801490a:	e7e7      	b.n	80148dc <_printf_float+0x1a4>
 801490c:	2900      	cmp	r1, #0
 801490e:	bfd4      	ite	le
 8014910:	f1c1 0202 	rsble	r2, r1, #2
 8014914:	2201      	movgt	r2, #1
 8014916:	4413      	add	r3, r2
 8014918:	e7e0      	b.n	80148dc <_printf_float+0x1a4>
 801491a:	6823      	ldr	r3, [r4, #0]
 801491c:	055a      	lsls	r2, r3, #21
 801491e:	d407      	bmi.n	8014930 <_printf_float+0x1f8>
 8014920:	6923      	ldr	r3, [r4, #16]
 8014922:	4642      	mov	r2, r8
 8014924:	4631      	mov	r1, r6
 8014926:	4628      	mov	r0, r5
 8014928:	47b8      	blx	r7
 801492a:	3001      	adds	r0, #1
 801492c:	d12c      	bne.n	8014988 <_printf_float+0x250>
 801492e:	e764      	b.n	80147fa <_printf_float+0xc2>
 8014930:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014934:	f240 80e0 	bls.w	8014af8 <_printf_float+0x3c0>
 8014938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801493c:	2200      	movs	r2, #0
 801493e:	2300      	movs	r3, #0
 8014940:	f7ec f8e2 	bl	8000b08 <__aeabi_dcmpeq>
 8014944:	2800      	cmp	r0, #0
 8014946:	d034      	beq.n	80149b2 <_printf_float+0x27a>
 8014948:	4a37      	ldr	r2, [pc, #220]	; (8014a28 <_printf_float+0x2f0>)
 801494a:	2301      	movs	r3, #1
 801494c:	4631      	mov	r1, r6
 801494e:	4628      	mov	r0, r5
 8014950:	47b8      	blx	r7
 8014952:	3001      	adds	r0, #1
 8014954:	f43f af51 	beq.w	80147fa <_printf_float+0xc2>
 8014958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801495c:	429a      	cmp	r2, r3
 801495e:	db02      	blt.n	8014966 <_printf_float+0x22e>
 8014960:	6823      	ldr	r3, [r4, #0]
 8014962:	07d8      	lsls	r0, r3, #31
 8014964:	d510      	bpl.n	8014988 <_printf_float+0x250>
 8014966:	ee18 3a10 	vmov	r3, s16
 801496a:	4652      	mov	r2, sl
 801496c:	4631      	mov	r1, r6
 801496e:	4628      	mov	r0, r5
 8014970:	47b8      	blx	r7
 8014972:	3001      	adds	r0, #1
 8014974:	f43f af41 	beq.w	80147fa <_printf_float+0xc2>
 8014978:	f04f 0800 	mov.w	r8, #0
 801497c:	f104 091a 	add.w	r9, r4, #26
 8014980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014982:	3b01      	subs	r3, #1
 8014984:	4543      	cmp	r3, r8
 8014986:	dc09      	bgt.n	801499c <_printf_float+0x264>
 8014988:	6823      	ldr	r3, [r4, #0]
 801498a:	079b      	lsls	r3, r3, #30
 801498c:	f100 8105 	bmi.w	8014b9a <_printf_float+0x462>
 8014990:	68e0      	ldr	r0, [r4, #12]
 8014992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014994:	4298      	cmp	r0, r3
 8014996:	bfb8      	it	lt
 8014998:	4618      	movlt	r0, r3
 801499a:	e730      	b.n	80147fe <_printf_float+0xc6>
 801499c:	2301      	movs	r3, #1
 801499e:	464a      	mov	r2, r9
 80149a0:	4631      	mov	r1, r6
 80149a2:	4628      	mov	r0, r5
 80149a4:	47b8      	blx	r7
 80149a6:	3001      	adds	r0, #1
 80149a8:	f43f af27 	beq.w	80147fa <_printf_float+0xc2>
 80149ac:	f108 0801 	add.w	r8, r8, #1
 80149b0:	e7e6      	b.n	8014980 <_printf_float+0x248>
 80149b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	dc39      	bgt.n	8014a2c <_printf_float+0x2f4>
 80149b8:	4a1b      	ldr	r2, [pc, #108]	; (8014a28 <_printf_float+0x2f0>)
 80149ba:	2301      	movs	r3, #1
 80149bc:	4631      	mov	r1, r6
 80149be:	4628      	mov	r0, r5
 80149c0:	47b8      	blx	r7
 80149c2:	3001      	adds	r0, #1
 80149c4:	f43f af19 	beq.w	80147fa <_printf_float+0xc2>
 80149c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80149cc:	4313      	orrs	r3, r2
 80149ce:	d102      	bne.n	80149d6 <_printf_float+0x29e>
 80149d0:	6823      	ldr	r3, [r4, #0]
 80149d2:	07d9      	lsls	r1, r3, #31
 80149d4:	d5d8      	bpl.n	8014988 <_printf_float+0x250>
 80149d6:	ee18 3a10 	vmov	r3, s16
 80149da:	4652      	mov	r2, sl
 80149dc:	4631      	mov	r1, r6
 80149de:	4628      	mov	r0, r5
 80149e0:	47b8      	blx	r7
 80149e2:	3001      	adds	r0, #1
 80149e4:	f43f af09 	beq.w	80147fa <_printf_float+0xc2>
 80149e8:	f04f 0900 	mov.w	r9, #0
 80149ec:	f104 0a1a 	add.w	sl, r4, #26
 80149f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149f2:	425b      	negs	r3, r3
 80149f4:	454b      	cmp	r3, r9
 80149f6:	dc01      	bgt.n	80149fc <_printf_float+0x2c4>
 80149f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149fa:	e792      	b.n	8014922 <_printf_float+0x1ea>
 80149fc:	2301      	movs	r3, #1
 80149fe:	4652      	mov	r2, sl
 8014a00:	4631      	mov	r1, r6
 8014a02:	4628      	mov	r0, r5
 8014a04:	47b8      	blx	r7
 8014a06:	3001      	adds	r0, #1
 8014a08:	f43f aef7 	beq.w	80147fa <_printf_float+0xc2>
 8014a0c:	f109 0901 	add.w	r9, r9, #1
 8014a10:	e7ee      	b.n	80149f0 <_printf_float+0x2b8>
 8014a12:	bf00      	nop
 8014a14:	7fefffff 	.word	0x7fefffff
 8014a18:	0805ba45 	.word	0x0805ba45
 8014a1c:	0805ba49 	.word	0x0805ba49
 8014a20:	0805ba51 	.word	0x0805ba51
 8014a24:	0805ba4d 	.word	0x0805ba4d
 8014a28:	0805bf78 	.word	0x0805bf78
 8014a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014a30:	429a      	cmp	r2, r3
 8014a32:	bfa8      	it	ge
 8014a34:	461a      	movge	r2, r3
 8014a36:	2a00      	cmp	r2, #0
 8014a38:	4691      	mov	r9, r2
 8014a3a:	dc37      	bgt.n	8014aac <_printf_float+0x374>
 8014a3c:	f04f 0b00 	mov.w	fp, #0
 8014a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014a44:	f104 021a 	add.w	r2, r4, #26
 8014a48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014a4a:	9305      	str	r3, [sp, #20]
 8014a4c:	eba3 0309 	sub.w	r3, r3, r9
 8014a50:	455b      	cmp	r3, fp
 8014a52:	dc33      	bgt.n	8014abc <_printf_float+0x384>
 8014a54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014a58:	429a      	cmp	r2, r3
 8014a5a:	db3b      	blt.n	8014ad4 <_printf_float+0x39c>
 8014a5c:	6823      	ldr	r3, [r4, #0]
 8014a5e:	07da      	lsls	r2, r3, #31
 8014a60:	d438      	bmi.n	8014ad4 <_printf_float+0x39c>
 8014a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a64:	9a05      	ldr	r2, [sp, #20]
 8014a66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a68:	1a9a      	subs	r2, r3, r2
 8014a6a:	eba3 0901 	sub.w	r9, r3, r1
 8014a6e:	4591      	cmp	r9, r2
 8014a70:	bfa8      	it	ge
 8014a72:	4691      	movge	r9, r2
 8014a74:	f1b9 0f00 	cmp.w	r9, #0
 8014a78:	dc35      	bgt.n	8014ae6 <_printf_float+0x3ae>
 8014a7a:	f04f 0800 	mov.w	r8, #0
 8014a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014a82:	f104 0a1a 	add.w	sl, r4, #26
 8014a86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014a8a:	1a9b      	subs	r3, r3, r2
 8014a8c:	eba3 0309 	sub.w	r3, r3, r9
 8014a90:	4543      	cmp	r3, r8
 8014a92:	f77f af79 	ble.w	8014988 <_printf_float+0x250>
 8014a96:	2301      	movs	r3, #1
 8014a98:	4652      	mov	r2, sl
 8014a9a:	4631      	mov	r1, r6
 8014a9c:	4628      	mov	r0, r5
 8014a9e:	47b8      	blx	r7
 8014aa0:	3001      	adds	r0, #1
 8014aa2:	f43f aeaa 	beq.w	80147fa <_printf_float+0xc2>
 8014aa6:	f108 0801 	add.w	r8, r8, #1
 8014aaa:	e7ec      	b.n	8014a86 <_printf_float+0x34e>
 8014aac:	4613      	mov	r3, r2
 8014aae:	4631      	mov	r1, r6
 8014ab0:	4642      	mov	r2, r8
 8014ab2:	4628      	mov	r0, r5
 8014ab4:	47b8      	blx	r7
 8014ab6:	3001      	adds	r0, #1
 8014ab8:	d1c0      	bne.n	8014a3c <_printf_float+0x304>
 8014aba:	e69e      	b.n	80147fa <_printf_float+0xc2>
 8014abc:	2301      	movs	r3, #1
 8014abe:	4631      	mov	r1, r6
 8014ac0:	4628      	mov	r0, r5
 8014ac2:	9205      	str	r2, [sp, #20]
 8014ac4:	47b8      	blx	r7
 8014ac6:	3001      	adds	r0, #1
 8014ac8:	f43f ae97 	beq.w	80147fa <_printf_float+0xc2>
 8014acc:	9a05      	ldr	r2, [sp, #20]
 8014ace:	f10b 0b01 	add.w	fp, fp, #1
 8014ad2:	e7b9      	b.n	8014a48 <_printf_float+0x310>
 8014ad4:	ee18 3a10 	vmov	r3, s16
 8014ad8:	4652      	mov	r2, sl
 8014ada:	4631      	mov	r1, r6
 8014adc:	4628      	mov	r0, r5
 8014ade:	47b8      	blx	r7
 8014ae0:	3001      	adds	r0, #1
 8014ae2:	d1be      	bne.n	8014a62 <_printf_float+0x32a>
 8014ae4:	e689      	b.n	80147fa <_printf_float+0xc2>
 8014ae6:	9a05      	ldr	r2, [sp, #20]
 8014ae8:	464b      	mov	r3, r9
 8014aea:	4442      	add	r2, r8
 8014aec:	4631      	mov	r1, r6
 8014aee:	4628      	mov	r0, r5
 8014af0:	47b8      	blx	r7
 8014af2:	3001      	adds	r0, #1
 8014af4:	d1c1      	bne.n	8014a7a <_printf_float+0x342>
 8014af6:	e680      	b.n	80147fa <_printf_float+0xc2>
 8014af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014afa:	2a01      	cmp	r2, #1
 8014afc:	dc01      	bgt.n	8014b02 <_printf_float+0x3ca>
 8014afe:	07db      	lsls	r3, r3, #31
 8014b00:	d538      	bpl.n	8014b74 <_printf_float+0x43c>
 8014b02:	2301      	movs	r3, #1
 8014b04:	4642      	mov	r2, r8
 8014b06:	4631      	mov	r1, r6
 8014b08:	4628      	mov	r0, r5
 8014b0a:	47b8      	blx	r7
 8014b0c:	3001      	adds	r0, #1
 8014b0e:	f43f ae74 	beq.w	80147fa <_printf_float+0xc2>
 8014b12:	ee18 3a10 	vmov	r3, s16
 8014b16:	4652      	mov	r2, sl
 8014b18:	4631      	mov	r1, r6
 8014b1a:	4628      	mov	r0, r5
 8014b1c:	47b8      	blx	r7
 8014b1e:	3001      	adds	r0, #1
 8014b20:	f43f ae6b 	beq.w	80147fa <_printf_float+0xc2>
 8014b24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014b28:	2200      	movs	r2, #0
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	f7eb ffec 	bl	8000b08 <__aeabi_dcmpeq>
 8014b30:	b9d8      	cbnz	r0, 8014b6a <_printf_float+0x432>
 8014b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b34:	f108 0201 	add.w	r2, r8, #1
 8014b38:	3b01      	subs	r3, #1
 8014b3a:	4631      	mov	r1, r6
 8014b3c:	4628      	mov	r0, r5
 8014b3e:	47b8      	blx	r7
 8014b40:	3001      	adds	r0, #1
 8014b42:	d10e      	bne.n	8014b62 <_printf_float+0x42a>
 8014b44:	e659      	b.n	80147fa <_printf_float+0xc2>
 8014b46:	2301      	movs	r3, #1
 8014b48:	4652      	mov	r2, sl
 8014b4a:	4631      	mov	r1, r6
 8014b4c:	4628      	mov	r0, r5
 8014b4e:	47b8      	blx	r7
 8014b50:	3001      	adds	r0, #1
 8014b52:	f43f ae52 	beq.w	80147fa <_printf_float+0xc2>
 8014b56:	f108 0801 	add.w	r8, r8, #1
 8014b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b5c:	3b01      	subs	r3, #1
 8014b5e:	4543      	cmp	r3, r8
 8014b60:	dcf1      	bgt.n	8014b46 <_printf_float+0x40e>
 8014b62:	464b      	mov	r3, r9
 8014b64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014b68:	e6dc      	b.n	8014924 <_printf_float+0x1ec>
 8014b6a:	f04f 0800 	mov.w	r8, #0
 8014b6e:	f104 0a1a 	add.w	sl, r4, #26
 8014b72:	e7f2      	b.n	8014b5a <_printf_float+0x422>
 8014b74:	2301      	movs	r3, #1
 8014b76:	4642      	mov	r2, r8
 8014b78:	e7df      	b.n	8014b3a <_printf_float+0x402>
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	464a      	mov	r2, r9
 8014b7e:	4631      	mov	r1, r6
 8014b80:	4628      	mov	r0, r5
 8014b82:	47b8      	blx	r7
 8014b84:	3001      	adds	r0, #1
 8014b86:	f43f ae38 	beq.w	80147fa <_printf_float+0xc2>
 8014b8a:	f108 0801 	add.w	r8, r8, #1
 8014b8e:	68e3      	ldr	r3, [r4, #12]
 8014b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014b92:	1a5b      	subs	r3, r3, r1
 8014b94:	4543      	cmp	r3, r8
 8014b96:	dcf0      	bgt.n	8014b7a <_printf_float+0x442>
 8014b98:	e6fa      	b.n	8014990 <_printf_float+0x258>
 8014b9a:	f04f 0800 	mov.w	r8, #0
 8014b9e:	f104 0919 	add.w	r9, r4, #25
 8014ba2:	e7f4      	b.n	8014b8e <_printf_float+0x456>

08014ba4 <_printf_common>:
 8014ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ba8:	4616      	mov	r6, r2
 8014baa:	4699      	mov	r9, r3
 8014bac:	688a      	ldr	r2, [r1, #8]
 8014bae:	690b      	ldr	r3, [r1, #16]
 8014bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	bfb8      	it	lt
 8014bb8:	4613      	movlt	r3, r2
 8014bba:	6033      	str	r3, [r6, #0]
 8014bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014bc0:	4607      	mov	r7, r0
 8014bc2:	460c      	mov	r4, r1
 8014bc4:	b10a      	cbz	r2, 8014bca <_printf_common+0x26>
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	6033      	str	r3, [r6, #0]
 8014bca:	6823      	ldr	r3, [r4, #0]
 8014bcc:	0699      	lsls	r1, r3, #26
 8014bce:	bf42      	ittt	mi
 8014bd0:	6833      	ldrmi	r3, [r6, #0]
 8014bd2:	3302      	addmi	r3, #2
 8014bd4:	6033      	strmi	r3, [r6, #0]
 8014bd6:	6825      	ldr	r5, [r4, #0]
 8014bd8:	f015 0506 	ands.w	r5, r5, #6
 8014bdc:	d106      	bne.n	8014bec <_printf_common+0x48>
 8014bde:	f104 0a19 	add.w	sl, r4, #25
 8014be2:	68e3      	ldr	r3, [r4, #12]
 8014be4:	6832      	ldr	r2, [r6, #0]
 8014be6:	1a9b      	subs	r3, r3, r2
 8014be8:	42ab      	cmp	r3, r5
 8014bea:	dc26      	bgt.n	8014c3a <_printf_common+0x96>
 8014bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014bf0:	1e13      	subs	r3, r2, #0
 8014bf2:	6822      	ldr	r2, [r4, #0]
 8014bf4:	bf18      	it	ne
 8014bf6:	2301      	movne	r3, #1
 8014bf8:	0692      	lsls	r2, r2, #26
 8014bfa:	d42b      	bmi.n	8014c54 <_printf_common+0xb0>
 8014bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c00:	4649      	mov	r1, r9
 8014c02:	4638      	mov	r0, r7
 8014c04:	47c0      	blx	r8
 8014c06:	3001      	adds	r0, #1
 8014c08:	d01e      	beq.n	8014c48 <_printf_common+0xa4>
 8014c0a:	6823      	ldr	r3, [r4, #0]
 8014c0c:	68e5      	ldr	r5, [r4, #12]
 8014c0e:	6832      	ldr	r2, [r6, #0]
 8014c10:	f003 0306 	and.w	r3, r3, #6
 8014c14:	2b04      	cmp	r3, #4
 8014c16:	bf08      	it	eq
 8014c18:	1aad      	subeq	r5, r5, r2
 8014c1a:	68a3      	ldr	r3, [r4, #8]
 8014c1c:	6922      	ldr	r2, [r4, #16]
 8014c1e:	bf0c      	ite	eq
 8014c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c24:	2500      	movne	r5, #0
 8014c26:	4293      	cmp	r3, r2
 8014c28:	bfc4      	itt	gt
 8014c2a:	1a9b      	subgt	r3, r3, r2
 8014c2c:	18ed      	addgt	r5, r5, r3
 8014c2e:	2600      	movs	r6, #0
 8014c30:	341a      	adds	r4, #26
 8014c32:	42b5      	cmp	r5, r6
 8014c34:	d11a      	bne.n	8014c6c <_printf_common+0xc8>
 8014c36:	2000      	movs	r0, #0
 8014c38:	e008      	b.n	8014c4c <_printf_common+0xa8>
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	4652      	mov	r2, sl
 8014c3e:	4649      	mov	r1, r9
 8014c40:	4638      	mov	r0, r7
 8014c42:	47c0      	blx	r8
 8014c44:	3001      	adds	r0, #1
 8014c46:	d103      	bne.n	8014c50 <_printf_common+0xac>
 8014c48:	f04f 30ff 	mov.w	r0, #4294967295
 8014c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c50:	3501      	adds	r5, #1
 8014c52:	e7c6      	b.n	8014be2 <_printf_common+0x3e>
 8014c54:	18e1      	adds	r1, r4, r3
 8014c56:	1c5a      	adds	r2, r3, #1
 8014c58:	2030      	movs	r0, #48	; 0x30
 8014c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c5e:	4422      	add	r2, r4
 8014c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c68:	3302      	adds	r3, #2
 8014c6a:	e7c7      	b.n	8014bfc <_printf_common+0x58>
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	4622      	mov	r2, r4
 8014c70:	4649      	mov	r1, r9
 8014c72:	4638      	mov	r0, r7
 8014c74:	47c0      	blx	r8
 8014c76:	3001      	adds	r0, #1
 8014c78:	d0e6      	beq.n	8014c48 <_printf_common+0xa4>
 8014c7a:	3601      	adds	r6, #1
 8014c7c:	e7d9      	b.n	8014c32 <_printf_common+0x8e>
	...

08014c80 <_printf_i>:
 8014c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c84:	7e0f      	ldrb	r7, [r1, #24]
 8014c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014c88:	2f78      	cmp	r7, #120	; 0x78
 8014c8a:	4691      	mov	r9, r2
 8014c8c:	4680      	mov	r8, r0
 8014c8e:	460c      	mov	r4, r1
 8014c90:	469a      	mov	sl, r3
 8014c92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014c96:	d807      	bhi.n	8014ca8 <_printf_i+0x28>
 8014c98:	2f62      	cmp	r7, #98	; 0x62
 8014c9a:	d80a      	bhi.n	8014cb2 <_printf_i+0x32>
 8014c9c:	2f00      	cmp	r7, #0
 8014c9e:	f000 80d8 	beq.w	8014e52 <_printf_i+0x1d2>
 8014ca2:	2f58      	cmp	r7, #88	; 0x58
 8014ca4:	f000 80a3 	beq.w	8014dee <_printf_i+0x16e>
 8014ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014cb0:	e03a      	b.n	8014d28 <_printf_i+0xa8>
 8014cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014cb6:	2b15      	cmp	r3, #21
 8014cb8:	d8f6      	bhi.n	8014ca8 <_printf_i+0x28>
 8014cba:	a101      	add	r1, pc, #4	; (adr r1, 8014cc0 <_printf_i+0x40>)
 8014cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014cc0:	08014d19 	.word	0x08014d19
 8014cc4:	08014d2d 	.word	0x08014d2d
 8014cc8:	08014ca9 	.word	0x08014ca9
 8014ccc:	08014ca9 	.word	0x08014ca9
 8014cd0:	08014ca9 	.word	0x08014ca9
 8014cd4:	08014ca9 	.word	0x08014ca9
 8014cd8:	08014d2d 	.word	0x08014d2d
 8014cdc:	08014ca9 	.word	0x08014ca9
 8014ce0:	08014ca9 	.word	0x08014ca9
 8014ce4:	08014ca9 	.word	0x08014ca9
 8014ce8:	08014ca9 	.word	0x08014ca9
 8014cec:	08014e39 	.word	0x08014e39
 8014cf0:	08014d5d 	.word	0x08014d5d
 8014cf4:	08014e1b 	.word	0x08014e1b
 8014cf8:	08014ca9 	.word	0x08014ca9
 8014cfc:	08014ca9 	.word	0x08014ca9
 8014d00:	08014e5b 	.word	0x08014e5b
 8014d04:	08014ca9 	.word	0x08014ca9
 8014d08:	08014d5d 	.word	0x08014d5d
 8014d0c:	08014ca9 	.word	0x08014ca9
 8014d10:	08014ca9 	.word	0x08014ca9
 8014d14:	08014e23 	.word	0x08014e23
 8014d18:	682b      	ldr	r3, [r5, #0]
 8014d1a:	1d1a      	adds	r2, r3, #4
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	602a      	str	r2, [r5, #0]
 8014d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d28:	2301      	movs	r3, #1
 8014d2a:	e0a3      	b.n	8014e74 <_printf_i+0x1f4>
 8014d2c:	6820      	ldr	r0, [r4, #0]
 8014d2e:	6829      	ldr	r1, [r5, #0]
 8014d30:	0606      	lsls	r6, r0, #24
 8014d32:	f101 0304 	add.w	r3, r1, #4
 8014d36:	d50a      	bpl.n	8014d4e <_printf_i+0xce>
 8014d38:	680e      	ldr	r6, [r1, #0]
 8014d3a:	602b      	str	r3, [r5, #0]
 8014d3c:	2e00      	cmp	r6, #0
 8014d3e:	da03      	bge.n	8014d48 <_printf_i+0xc8>
 8014d40:	232d      	movs	r3, #45	; 0x2d
 8014d42:	4276      	negs	r6, r6
 8014d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d48:	485e      	ldr	r0, [pc, #376]	; (8014ec4 <_printf_i+0x244>)
 8014d4a:	230a      	movs	r3, #10
 8014d4c:	e019      	b.n	8014d82 <_printf_i+0x102>
 8014d4e:	680e      	ldr	r6, [r1, #0]
 8014d50:	602b      	str	r3, [r5, #0]
 8014d52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d56:	bf18      	it	ne
 8014d58:	b236      	sxthne	r6, r6
 8014d5a:	e7ef      	b.n	8014d3c <_printf_i+0xbc>
 8014d5c:	682b      	ldr	r3, [r5, #0]
 8014d5e:	6820      	ldr	r0, [r4, #0]
 8014d60:	1d19      	adds	r1, r3, #4
 8014d62:	6029      	str	r1, [r5, #0]
 8014d64:	0601      	lsls	r1, r0, #24
 8014d66:	d501      	bpl.n	8014d6c <_printf_i+0xec>
 8014d68:	681e      	ldr	r6, [r3, #0]
 8014d6a:	e002      	b.n	8014d72 <_printf_i+0xf2>
 8014d6c:	0646      	lsls	r6, r0, #25
 8014d6e:	d5fb      	bpl.n	8014d68 <_printf_i+0xe8>
 8014d70:	881e      	ldrh	r6, [r3, #0]
 8014d72:	4854      	ldr	r0, [pc, #336]	; (8014ec4 <_printf_i+0x244>)
 8014d74:	2f6f      	cmp	r7, #111	; 0x6f
 8014d76:	bf0c      	ite	eq
 8014d78:	2308      	moveq	r3, #8
 8014d7a:	230a      	movne	r3, #10
 8014d7c:	2100      	movs	r1, #0
 8014d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014d82:	6865      	ldr	r5, [r4, #4]
 8014d84:	60a5      	str	r5, [r4, #8]
 8014d86:	2d00      	cmp	r5, #0
 8014d88:	bfa2      	ittt	ge
 8014d8a:	6821      	ldrge	r1, [r4, #0]
 8014d8c:	f021 0104 	bicge.w	r1, r1, #4
 8014d90:	6021      	strge	r1, [r4, #0]
 8014d92:	b90e      	cbnz	r6, 8014d98 <_printf_i+0x118>
 8014d94:	2d00      	cmp	r5, #0
 8014d96:	d04d      	beq.n	8014e34 <_printf_i+0x1b4>
 8014d98:	4615      	mov	r5, r2
 8014d9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8014d9e:	fb03 6711 	mls	r7, r3, r1, r6
 8014da2:	5dc7      	ldrb	r7, [r0, r7]
 8014da4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014da8:	4637      	mov	r7, r6
 8014daa:	42bb      	cmp	r3, r7
 8014dac:	460e      	mov	r6, r1
 8014dae:	d9f4      	bls.n	8014d9a <_printf_i+0x11a>
 8014db0:	2b08      	cmp	r3, #8
 8014db2:	d10b      	bne.n	8014dcc <_printf_i+0x14c>
 8014db4:	6823      	ldr	r3, [r4, #0]
 8014db6:	07de      	lsls	r6, r3, #31
 8014db8:	d508      	bpl.n	8014dcc <_printf_i+0x14c>
 8014dba:	6923      	ldr	r3, [r4, #16]
 8014dbc:	6861      	ldr	r1, [r4, #4]
 8014dbe:	4299      	cmp	r1, r3
 8014dc0:	bfde      	ittt	le
 8014dc2:	2330      	movle	r3, #48	; 0x30
 8014dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014dc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014dcc:	1b52      	subs	r2, r2, r5
 8014dce:	6122      	str	r2, [r4, #16]
 8014dd0:	f8cd a000 	str.w	sl, [sp]
 8014dd4:	464b      	mov	r3, r9
 8014dd6:	aa03      	add	r2, sp, #12
 8014dd8:	4621      	mov	r1, r4
 8014dda:	4640      	mov	r0, r8
 8014ddc:	f7ff fee2 	bl	8014ba4 <_printf_common>
 8014de0:	3001      	adds	r0, #1
 8014de2:	d14c      	bne.n	8014e7e <_printf_i+0x1fe>
 8014de4:	f04f 30ff 	mov.w	r0, #4294967295
 8014de8:	b004      	add	sp, #16
 8014dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dee:	4835      	ldr	r0, [pc, #212]	; (8014ec4 <_printf_i+0x244>)
 8014df0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014df4:	6829      	ldr	r1, [r5, #0]
 8014df6:	6823      	ldr	r3, [r4, #0]
 8014df8:	f851 6b04 	ldr.w	r6, [r1], #4
 8014dfc:	6029      	str	r1, [r5, #0]
 8014dfe:	061d      	lsls	r5, r3, #24
 8014e00:	d514      	bpl.n	8014e2c <_printf_i+0x1ac>
 8014e02:	07df      	lsls	r7, r3, #31
 8014e04:	bf44      	itt	mi
 8014e06:	f043 0320 	orrmi.w	r3, r3, #32
 8014e0a:	6023      	strmi	r3, [r4, #0]
 8014e0c:	b91e      	cbnz	r6, 8014e16 <_printf_i+0x196>
 8014e0e:	6823      	ldr	r3, [r4, #0]
 8014e10:	f023 0320 	bic.w	r3, r3, #32
 8014e14:	6023      	str	r3, [r4, #0]
 8014e16:	2310      	movs	r3, #16
 8014e18:	e7b0      	b.n	8014d7c <_printf_i+0xfc>
 8014e1a:	6823      	ldr	r3, [r4, #0]
 8014e1c:	f043 0320 	orr.w	r3, r3, #32
 8014e20:	6023      	str	r3, [r4, #0]
 8014e22:	2378      	movs	r3, #120	; 0x78
 8014e24:	4828      	ldr	r0, [pc, #160]	; (8014ec8 <_printf_i+0x248>)
 8014e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014e2a:	e7e3      	b.n	8014df4 <_printf_i+0x174>
 8014e2c:	0659      	lsls	r1, r3, #25
 8014e2e:	bf48      	it	mi
 8014e30:	b2b6      	uxthmi	r6, r6
 8014e32:	e7e6      	b.n	8014e02 <_printf_i+0x182>
 8014e34:	4615      	mov	r5, r2
 8014e36:	e7bb      	b.n	8014db0 <_printf_i+0x130>
 8014e38:	682b      	ldr	r3, [r5, #0]
 8014e3a:	6826      	ldr	r6, [r4, #0]
 8014e3c:	6961      	ldr	r1, [r4, #20]
 8014e3e:	1d18      	adds	r0, r3, #4
 8014e40:	6028      	str	r0, [r5, #0]
 8014e42:	0635      	lsls	r5, r6, #24
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	d501      	bpl.n	8014e4c <_printf_i+0x1cc>
 8014e48:	6019      	str	r1, [r3, #0]
 8014e4a:	e002      	b.n	8014e52 <_printf_i+0x1d2>
 8014e4c:	0670      	lsls	r0, r6, #25
 8014e4e:	d5fb      	bpl.n	8014e48 <_printf_i+0x1c8>
 8014e50:	8019      	strh	r1, [r3, #0]
 8014e52:	2300      	movs	r3, #0
 8014e54:	6123      	str	r3, [r4, #16]
 8014e56:	4615      	mov	r5, r2
 8014e58:	e7ba      	b.n	8014dd0 <_printf_i+0x150>
 8014e5a:	682b      	ldr	r3, [r5, #0]
 8014e5c:	1d1a      	adds	r2, r3, #4
 8014e5e:	602a      	str	r2, [r5, #0]
 8014e60:	681d      	ldr	r5, [r3, #0]
 8014e62:	6862      	ldr	r2, [r4, #4]
 8014e64:	2100      	movs	r1, #0
 8014e66:	4628      	mov	r0, r5
 8014e68:	f7eb f9da 	bl	8000220 <memchr>
 8014e6c:	b108      	cbz	r0, 8014e72 <_printf_i+0x1f2>
 8014e6e:	1b40      	subs	r0, r0, r5
 8014e70:	6060      	str	r0, [r4, #4]
 8014e72:	6863      	ldr	r3, [r4, #4]
 8014e74:	6123      	str	r3, [r4, #16]
 8014e76:	2300      	movs	r3, #0
 8014e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e7c:	e7a8      	b.n	8014dd0 <_printf_i+0x150>
 8014e7e:	6923      	ldr	r3, [r4, #16]
 8014e80:	462a      	mov	r2, r5
 8014e82:	4649      	mov	r1, r9
 8014e84:	4640      	mov	r0, r8
 8014e86:	47d0      	blx	sl
 8014e88:	3001      	adds	r0, #1
 8014e8a:	d0ab      	beq.n	8014de4 <_printf_i+0x164>
 8014e8c:	6823      	ldr	r3, [r4, #0]
 8014e8e:	079b      	lsls	r3, r3, #30
 8014e90:	d413      	bmi.n	8014eba <_printf_i+0x23a>
 8014e92:	68e0      	ldr	r0, [r4, #12]
 8014e94:	9b03      	ldr	r3, [sp, #12]
 8014e96:	4298      	cmp	r0, r3
 8014e98:	bfb8      	it	lt
 8014e9a:	4618      	movlt	r0, r3
 8014e9c:	e7a4      	b.n	8014de8 <_printf_i+0x168>
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	4632      	mov	r2, r6
 8014ea2:	4649      	mov	r1, r9
 8014ea4:	4640      	mov	r0, r8
 8014ea6:	47d0      	blx	sl
 8014ea8:	3001      	adds	r0, #1
 8014eaa:	d09b      	beq.n	8014de4 <_printf_i+0x164>
 8014eac:	3501      	adds	r5, #1
 8014eae:	68e3      	ldr	r3, [r4, #12]
 8014eb0:	9903      	ldr	r1, [sp, #12]
 8014eb2:	1a5b      	subs	r3, r3, r1
 8014eb4:	42ab      	cmp	r3, r5
 8014eb6:	dcf2      	bgt.n	8014e9e <_printf_i+0x21e>
 8014eb8:	e7eb      	b.n	8014e92 <_printf_i+0x212>
 8014eba:	2500      	movs	r5, #0
 8014ebc:	f104 0619 	add.w	r6, r4, #25
 8014ec0:	e7f5      	b.n	8014eae <_printf_i+0x22e>
 8014ec2:	bf00      	nop
 8014ec4:	0805ba55 	.word	0x0805ba55
 8014ec8:	0805ba66 	.word	0x0805ba66

08014ecc <_sbrk_r>:
 8014ecc:	b538      	push	{r3, r4, r5, lr}
 8014ece:	4d06      	ldr	r5, [pc, #24]	; (8014ee8 <_sbrk_r+0x1c>)
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	4604      	mov	r4, r0
 8014ed4:	4608      	mov	r0, r1
 8014ed6:	602b      	str	r3, [r5, #0]
 8014ed8:	f7ef fd6e 	bl	80049b8 <_sbrk>
 8014edc:	1c43      	adds	r3, r0, #1
 8014ede:	d102      	bne.n	8014ee6 <_sbrk_r+0x1a>
 8014ee0:	682b      	ldr	r3, [r5, #0]
 8014ee2:	b103      	cbz	r3, 8014ee6 <_sbrk_r+0x1a>
 8014ee4:	6023      	str	r3, [r4, #0]
 8014ee6:	bd38      	pop	{r3, r4, r5, pc}
 8014ee8:	20005e64 	.word	0x20005e64

08014eec <siprintf>:
 8014eec:	b40e      	push	{r1, r2, r3}
 8014eee:	b500      	push	{lr}
 8014ef0:	b09c      	sub	sp, #112	; 0x70
 8014ef2:	ab1d      	add	r3, sp, #116	; 0x74
 8014ef4:	9002      	str	r0, [sp, #8]
 8014ef6:	9006      	str	r0, [sp, #24]
 8014ef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014efc:	4809      	ldr	r0, [pc, #36]	; (8014f24 <siprintf+0x38>)
 8014efe:	9107      	str	r1, [sp, #28]
 8014f00:	9104      	str	r1, [sp, #16]
 8014f02:	4909      	ldr	r1, [pc, #36]	; (8014f28 <siprintf+0x3c>)
 8014f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f08:	9105      	str	r1, [sp, #20]
 8014f0a:	6800      	ldr	r0, [r0, #0]
 8014f0c:	9301      	str	r3, [sp, #4]
 8014f0e:	a902      	add	r1, sp, #8
 8014f10:	f003 fd22 	bl	8018958 <_svfiprintf_r>
 8014f14:	9b02      	ldr	r3, [sp, #8]
 8014f16:	2200      	movs	r2, #0
 8014f18:	701a      	strb	r2, [r3, #0]
 8014f1a:	b01c      	add	sp, #112	; 0x70
 8014f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f20:	b003      	add	sp, #12
 8014f22:	4770      	bx	lr
 8014f24:	20000324 	.word	0x20000324
 8014f28:	ffff0208 	.word	0xffff0208

08014f2c <siscanf>:
 8014f2c:	b40e      	push	{r1, r2, r3}
 8014f2e:	b510      	push	{r4, lr}
 8014f30:	b09f      	sub	sp, #124	; 0x7c
 8014f32:	ac21      	add	r4, sp, #132	; 0x84
 8014f34:	f44f 7101 	mov.w	r1, #516	; 0x204
 8014f38:	f854 2b04 	ldr.w	r2, [r4], #4
 8014f3c:	9201      	str	r2, [sp, #4]
 8014f3e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014f42:	9004      	str	r0, [sp, #16]
 8014f44:	9008      	str	r0, [sp, #32]
 8014f46:	f7eb f95d 	bl	8000204 <strlen>
 8014f4a:	4b0c      	ldr	r3, [pc, #48]	; (8014f7c <siscanf+0x50>)
 8014f4c:	9005      	str	r0, [sp, #20]
 8014f4e:	9009      	str	r0, [sp, #36]	; 0x24
 8014f50:	930d      	str	r3, [sp, #52]	; 0x34
 8014f52:	480b      	ldr	r0, [pc, #44]	; (8014f80 <siscanf+0x54>)
 8014f54:	9a01      	ldr	r2, [sp, #4]
 8014f56:	6800      	ldr	r0, [r0, #0]
 8014f58:	9403      	str	r4, [sp, #12]
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	9311      	str	r3, [sp, #68]	; 0x44
 8014f5e:	9316      	str	r3, [sp, #88]	; 0x58
 8014f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f64:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014f68:	a904      	add	r1, sp, #16
 8014f6a:	4623      	mov	r3, r4
 8014f6c:	f003 fe4e 	bl	8018c0c <__ssvfiscanf_r>
 8014f70:	b01f      	add	sp, #124	; 0x7c
 8014f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f76:	b003      	add	sp, #12
 8014f78:	4770      	bx	lr
 8014f7a:	bf00      	nop
 8014f7c:	08014fa7 	.word	0x08014fa7
 8014f80:	20000324 	.word	0x20000324

08014f84 <__sread>:
 8014f84:	b510      	push	{r4, lr}
 8014f86:	460c      	mov	r4, r1
 8014f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f8c:	f004 f908 	bl	80191a0 <_read_r>
 8014f90:	2800      	cmp	r0, #0
 8014f92:	bfab      	itete	ge
 8014f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014f96:	89a3      	ldrhlt	r3, [r4, #12]
 8014f98:	181b      	addge	r3, r3, r0
 8014f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014f9e:	bfac      	ite	ge
 8014fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8014fa2:	81a3      	strhlt	r3, [r4, #12]
 8014fa4:	bd10      	pop	{r4, pc}

08014fa6 <__seofread>:
 8014fa6:	2000      	movs	r0, #0
 8014fa8:	4770      	bx	lr

08014faa <__swrite>:
 8014faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fae:	461f      	mov	r7, r3
 8014fb0:	898b      	ldrh	r3, [r1, #12]
 8014fb2:	05db      	lsls	r3, r3, #23
 8014fb4:	4605      	mov	r5, r0
 8014fb6:	460c      	mov	r4, r1
 8014fb8:	4616      	mov	r6, r2
 8014fba:	d505      	bpl.n	8014fc8 <__swrite+0x1e>
 8014fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fc0:	2302      	movs	r3, #2
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	f002 feb6 	bl	8017d34 <_lseek_r>
 8014fc8:	89a3      	ldrh	r3, [r4, #12]
 8014fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014fd2:	81a3      	strh	r3, [r4, #12]
 8014fd4:	4632      	mov	r2, r6
 8014fd6:	463b      	mov	r3, r7
 8014fd8:	4628      	mov	r0, r5
 8014fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fde:	f001 ba09 	b.w	80163f4 <_write_r>

08014fe2 <__sseek>:
 8014fe2:	b510      	push	{r4, lr}
 8014fe4:	460c      	mov	r4, r1
 8014fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fea:	f002 fea3 	bl	8017d34 <_lseek_r>
 8014fee:	1c43      	adds	r3, r0, #1
 8014ff0:	89a3      	ldrh	r3, [r4, #12]
 8014ff2:	bf15      	itete	ne
 8014ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8014ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014ffe:	81a3      	strheq	r3, [r4, #12]
 8015000:	bf18      	it	ne
 8015002:	81a3      	strhne	r3, [r4, #12]
 8015004:	bd10      	pop	{r4, pc}

08015006 <__sclose>:
 8015006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801500a:	f001 ba7b 	b.w	8016504 <_close_r>

0801500e <strcpy>:
 801500e:	4603      	mov	r3, r0
 8015010:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015014:	f803 2b01 	strb.w	r2, [r3], #1
 8015018:	2a00      	cmp	r2, #0
 801501a:	d1f9      	bne.n	8015010 <strcpy+0x2>
 801501c:	4770      	bx	lr

0801501e <strncpy>:
 801501e:	b510      	push	{r4, lr}
 8015020:	3901      	subs	r1, #1
 8015022:	4603      	mov	r3, r0
 8015024:	b132      	cbz	r2, 8015034 <strncpy+0x16>
 8015026:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801502a:	f803 4b01 	strb.w	r4, [r3], #1
 801502e:	3a01      	subs	r2, #1
 8015030:	2c00      	cmp	r4, #0
 8015032:	d1f7      	bne.n	8015024 <strncpy+0x6>
 8015034:	441a      	add	r2, r3
 8015036:	2100      	movs	r1, #0
 8015038:	4293      	cmp	r3, r2
 801503a:	d100      	bne.n	801503e <strncpy+0x20>
 801503c:	bd10      	pop	{r4, pc}
 801503e:	f803 1b01 	strb.w	r1, [r3], #1
 8015042:	e7f9      	b.n	8015038 <strncpy+0x1a>

08015044 <strpbrk>:
 8015044:	b570      	push	{r4, r5, r6, lr}
 8015046:	7803      	ldrb	r3, [r0, #0]
 8015048:	b1a3      	cbz	r3, 8015074 <strpbrk+0x30>
 801504a:	4603      	mov	r3, r0
 801504c:	460c      	mov	r4, r1
 801504e:	4618      	mov	r0, r3
 8015050:	f813 5b01 	ldrb.w	r5, [r3], #1
 8015054:	b14d      	cbz	r5, 801506a <strpbrk+0x26>
 8015056:	460a      	mov	r2, r1
 8015058:	e001      	b.n	801505e <strpbrk+0x1a>
 801505a:	42ae      	cmp	r6, r5
 801505c:	d009      	beq.n	8015072 <strpbrk+0x2e>
 801505e:	4614      	mov	r4, r2
 8015060:	f812 6b01 	ldrb.w	r6, [r2], #1
 8015064:	2e00      	cmp	r6, #0
 8015066:	d1f8      	bne.n	801505a <strpbrk+0x16>
 8015068:	e7f1      	b.n	801504e <strpbrk+0xa>
 801506a:	7823      	ldrb	r3, [r4, #0]
 801506c:	2b00      	cmp	r3, #0
 801506e:	bf08      	it	eq
 8015070:	2000      	moveq	r0, #0
 8015072:	bd70      	pop	{r4, r5, r6, pc}
 8015074:	4618      	mov	r0, r3
 8015076:	e7fc      	b.n	8015072 <strpbrk+0x2e>

08015078 <strstr>:
 8015078:	780a      	ldrb	r2, [r1, #0]
 801507a:	b570      	push	{r4, r5, r6, lr}
 801507c:	b96a      	cbnz	r2, 801509a <strstr+0x22>
 801507e:	bd70      	pop	{r4, r5, r6, pc}
 8015080:	429a      	cmp	r2, r3
 8015082:	d109      	bne.n	8015098 <strstr+0x20>
 8015084:	460c      	mov	r4, r1
 8015086:	4605      	mov	r5, r0
 8015088:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801508c:	2b00      	cmp	r3, #0
 801508e:	d0f6      	beq.n	801507e <strstr+0x6>
 8015090:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015094:	429e      	cmp	r6, r3
 8015096:	d0f7      	beq.n	8015088 <strstr+0x10>
 8015098:	3001      	adds	r0, #1
 801509a:	7803      	ldrb	r3, [r0, #0]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d1ef      	bne.n	8015080 <strstr+0x8>
 80150a0:	4618      	mov	r0, r3
 80150a2:	e7ec      	b.n	801507e <strstr+0x6>

080150a4 <sulp>:
 80150a4:	b570      	push	{r4, r5, r6, lr}
 80150a6:	4604      	mov	r4, r0
 80150a8:	460d      	mov	r5, r1
 80150aa:	ec45 4b10 	vmov	d0, r4, r5
 80150ae:	4616      	mov	r6, r2
 80150b0:	f003 fa62 	bl	8018578 <__ulp>
 80150b4:	ec51 0b10 	vmov	r0, r1, d0
 80150b8:	b17e      	cbz	r6, 80150da <sulp+0x36>
 80150ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80150be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	dd09      	ble.n	80150da <sulp+0x36>
 80150c6:	051b      	lsls	r3, r3, #20
 80150c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80150cc:	2400      	movs	r4, #0
 80150ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80150d2:	4622      	mov	r2, r4
 80150d4:	462b      	mov	r3, r5
 80150d6:	f7eb faaf 	bl	8000638 <__aeabi_dmul>
 80150da:	bd70      	pop	{r4, r5, r6, pc}
 80150dc:	0000      	movs	r0, r0
	...

080150e0 <_strtod_l>:
 80150e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150e4:	ed2d 8b02 	vpush	{d8}
 80150e8:	b09d      	sub	sp, #116	; 0x74
 80150ea:	461f      	mov	r7, r3
 80150ec:	2300      	movs	r3, #0
 80150ee:	9318      	str	r3, [sp, #96]	; 0x60
 80150f0:	4ba2      	ldr	r3, [pc, #648]	; (801537c <_strtod_l+0x29c>)
 80150f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	9305      	str	r3, [sp, #20]
 80150f8:	4604      	mov	r4, r0
 80150fa:	4618      	mov	r0, r3
 80150fc:	4688      	mov	r8, r1
 80150fe:	f7eb f881 	bl	8000204 <strlen>
 8015102:	f04f 0a00 	mov.w	sl, #0
 8015106:	4605      	mov	r5, r0
 8015108:	f04f 0b00 	mov.w	fp, #0
 801510c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015112:	781a      	ldrb	r2, [r3, #0]
 8015114:	2a2b      	cmp	r2, #43	; 0x2b
 8015116:	d04e      	beq.n	80151b6 <_strtod_l+0xd6>
 8015118:	d83b      	bhi.n	8015192 <_strtod_l+0xb2>
 801511a:	2a0d      	cmp	r2, #13
 801511c:	d834      	bhi.n	8015188 <_strtod_l+0xa8>
 801511e:	2a08      	cmp	r2, #8
 8015120:	d834      	bhi.n	801518c <_strtod_l+0xac>
 8015122:	2a00      	cmp	r2, #0
 8015124:	d03e      	beq.n	80151a4 <_strtod_l+0xc4>
 8015126:	2300      	movs	r3, #0
 8015128:	930a      	str	r3, [sp, #40]	; 0x28
 801512a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801512c:	7833      	ldrb	r3, [r6, #0]
 801512e:	2b30      	cmp	r3, #48	; 0x30
 8015130:	f040 80b0 	bne.w	8015294 <_strtod_l+0x1b4>
 8015134:	7873      	ldrb	r3, [r6, #1]
 8015136:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801513a:	2b58      	cmp	r3, #88	; 0x58
 801513c:	d168      	bne.n	8015210 <_strtod_l+0x130>
 801513e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015140:	9301      	str	r3, [sp, #4]
 8015142:	ab18      	add	r3, sp, #96	; 0x60
 8015144:	9702      	str	r7, [sp, #8]
 8015146:	9300      	str	r3, [sp, #0]
 8015148:	4a8d      	ldr	r2, [pc, #564]	; (8015380 <_strtod_l+0x2a0>)
 801514a:	ab19      	add	r3, sp, #100	; 0x64
 801514c:	a917      	add	r1, sp, #92	; 0x5c
 801514e:	4620      	mov	r0, r4
 8015150:	f002 fa96 	bl	8017680 <__gethex>
 8015154:	f010 0707 	ands.w	r7, r0, #7
 8015158:	4605      	mov	r5, r0
 801515a:	d005      	beq.n	8015168 <_strtod_l+0x88>
 801515c:	2f06      	cmp	r7, #6
 801515e:	d12c      	bne.n	80151ba <_strtod_l+0xda>
 8015160:	3601      	adds	r6, #1
 8015162:	2300      	movs	r3, #0
 8015164:	9617      	str	r6, [sp, #92]	; 0x5c
 8015166:	930a      	str	r3, [sp, #40]	; 0x28
 8015168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801516a:	2b00      	cmp	r3, #0
 801516c:	f040 8590 	bne.w	8015c90 <_strtod_l+0xbb0>
 8015170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015172:	b1eb      	cbz	r3, 80151b0 <_strtod_l+0xd0>
 8015174:	4652      	mov	r2, sl
 8015176:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801517a:	ec43 2b10 	vmov	d0, r2, r3
 801517e:	b01d      	add	sp, #116	; 0x74
 8015180:	ecbd 8b02 	vpop	{d8}
 8015184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015188:	2a20      	cmp	r2, #32
 801518a:	d1cc      	bne.n	8015126 <_strtod_l+0x46>
 801518c:	3301      	adds	r3, #1
 801518e:	9317      	str	r3, [sp, #92]	; 0x5c
 8015190:	e7be      	b.n	8015110 <_strtod_l+0x30>
 8015192:	2a2d      	cmp	r2, #45	; 0x2d
 8015194:	d1c7      	bne.n	8015126 <_strtod_l+0x46>
 8015196:	2201      	movs	r2, #1
 8015198:	920a      	str	r2, [sp, #40]	; 0x28
 801519a:	1c5a      	adds	r2, r3, #1
 801519c:	9217      	str	r2, [sp, #92]	; 0x5c
 801519e:	785b      	ldrb	r3, [r3, #1]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d1c2      	bne.n	801512a <_strtod_l+0x4a>
 80151a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80151a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	f040 856e 	bne.w	8015c8c <_strtod_l+0xbac>
 80151b0:	4652      	mov	r2, sl
 80151b2:	465b      	mov	r3, fp
 80151b4:	e7e1      	b.n	801517a <_strtod_l+0x9a>
 80151b6:	2200      	movs	r2, #0
 80151b8:	e7ee      	b.n	8015198 <_strtod_l+0xb8>
 80151ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80151bc:	b13a      	cbz	r2, 80151ce <_strtod_l+0xee>
 80151be:	2135      	movs	r1, #53	; 0x35
 80151c0:	a81a      	add	r0, sp, #104	; 0x68
 80151c2:	f003 fae4 	bl	801878e <__copybits>
 80151c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80151c8:	4620      	mov	r0, r4
 80151ca:	f002 fea3 	bl	8017f14 <_Bfree>
 80151ce:	3f01      	subs	r7, #1
 80151d0:	2f04      	cmp	r7, #4
 80151d2:	d806      	bhi.n	80151e2 <_strtod_l+0x102>
 80151d4:	e8df f007 	tbb	[pc, r7]
 80151d8:	1714030a 	.word	0x1714030a
 80151dc:	0a          	.byte	0x0a
 80151dd:	00          	.byte	0x00
 80151de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80151e2:	0728      	lsls	r0, r5, #28
 80151e4:	d5c0      	bpl.n	8015168 <_strtod_l+0x88>
 80151e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80151ea:	e7bd      	b.n	8015168 <_strtod_l+0x88>
 80151ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80151f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80151f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80151f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80151fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80151fe:	e7f0      	b.n	80151e2 <_strtod_l+0x102>
 8015200:	f8df b180 	ldr.w	fp, [pc, #384]	; 8015384 <_strtod_l+0x2a4>
 8015204:	e7ed      	b.n	80151e2 <_strtod_l+0x102>
 8015206:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801520a:	f04f 3aff 	mov.w	sl, #4294967295
 801520e:	e7e8      	b.n	80151e2 <_strtod_l+0x102>
 8015210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015212:	1c5a      	adds	r2, r3, #1
 8015214:	9217      	str	r2, [sp, #92]	; 0x5c
 8015216:	785b      	ldrb	r3, [r3, #1]
 8015218:	2b30      	cmp	r3, #48	; 0x30
 801521a:	d0f9      	beq.n	8015210 <_strtod_l+0x130>
 801521c:	2b00      	cmp	r3, #0
 801521e:	d0a3      	beq.n	8015168 <_strtod_l+0x88>
 8015220:	2301      	movs	r3, #1
 8015222:	f04f 0900 	mov.w	r9, #0
 8015226:	9304      	str	r3, [sp, #16]
 8015228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801522a:	9308      	str	r3, [sp, #32]
 801522c:	f8cd 901c 	str.w	r9, [sp, #28]
 8015230:	464f      	mov	r7, r9
 8015232:	220a      	movs	r2, #10
 8015234:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015236:	7806      	ldrb	r6, [r0, #0]
 8015238:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801523c:	b2d9      	uxtb	r1, r3
 801523e:	2909      	cmp	r1, #9
 8015240:	d92a      	bls.n	8015298 <_strtod_l+0x1b8>
 8015242:	9905      	ldr	r1, [sp, #20]
 8015244:	462a      	mov	r2, r5
 8015246:	f004 f843 	bl	80192d0 <strncmp>
 801524a:	b398      	cbz	r0, 80152b4 <_strtod_l+0x1d4>
 801524c:	2000      	movs	r0, #0
 801524e:	4632      	mov	r2, r6
 8015250:	463d      	mov	r5, r7
 8015252:	9005      	str	r0, [sp, #20]
 8015254:	4603      	mov	r3, r0
 8015256:	2a65      	cmp	r2, #101	; 0x65
 8015258:	d001      	beq.n	801525e <_strtod_l+0x17e>
 801525a:	2a45      	cmp	r2, #69	; 0x45
 801525c:	d118      	bne.n	8015290 <_strtod_l+0x1b0>
 801525e:	b91d      	cbnz	r5, 8015268 <_strtod_l+0x188>
 8015260:	9a04      	ldr	r2, [sp, #16]
 8015262:	4302      	orrs	r2, r0
 8015264:	d09e      	beq.n	80151a4 <_strtod_l+0xc4>
 8015266:	2500      	movs	r5, #0
 8015268:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801526c:	f108 0201 	add.w	r2, r8, #1
 8015270:	9217      	str	r2, [sp, #92]	; 0x5c
 8015272:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015276:	2a2b      	cmp	r2, #43	; 0x2b
 8015278:	d075      	beq.n	8015366 <_strtod_l+0x286>
 801527a:	2a2d      	cmp	r2, #45	; 0x2d
 801527c:	d07b      	beq.n	8015376 <_strtod_l+0x296>
 801527e:	f04f 0c00 	mov.w	ip, #0
 8015282:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015286:	2909      	cmp	r1, #9
 8015288:	f240 8082 	bls.w	8015390 <_strtod_l+0x2b0>
 801528c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015290:	2600      	movs	r6, #0
 8015292:	e09d      	b.n	80153d0 <_strtod_l+0x2f0>
 8015294:	2300      	movs	r3, #0
 8015296:	e7c4      	b.n	8015222 <_strtod_l+0x142>
 8015298:	2f08      	cmp	r7, #8
 801529a:	bfd8      	it	le
 801529c:	9907      	ldrle	r1, [sp, #28]
 801529e:	f100 0001 	add.w	r0, r0, #1
 80152a2:	bfda      	itte	le
 80152a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80152a8:	9307      	strle	r3, [sp, #28]
 80152aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80152ae:	3701      	adds	r7, #1
 80152b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80152b2:	e7bf      	b.n	8015234 <_strtod_l+0x154>
 80152b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80152b6:	195a      	adds	r2, r3, r5
 80152b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80152ba:	5d5a      	ldrb	r2, [r3, r5]
 80152bc:	2f00      	cmp	r7, #0
 80152be:	d037      	beq.n	8015330 <_strtod_l+0x250>
 80152c0:	9005      	str	r0, [sp, #20]
 80152c2:	463d      	mov	r5, r7
 80152c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80152c8:	2b09      	cmp	r3, #9
 80152ca:	d912      	bls.n	80152f2 <_strtod_l+0x212>
 80152cc:	2301      	movs	r3, #1
 80152ce:	e7c2      	b.n	8015256 <_strtod_l+0x176>
 80152d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80152d2:	1c5a      	adds	r2, r3, #1
 80152d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80152d6:	785a      	ldrb	r2, [r3, #1]
 80152d8:	3001      	adds	r0, #1
 80152da:	2a30      	cmp	r2, #48	; 0x30
 80152dc:	d0f8      	beq.n	80152d0 <_strtod_l+0x1f0>
 80152de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80152e2:	2b08      	cmp	r3, #8
 80152e4:	f200 84d9 	bhi.w	8015c9a <_strtod_l+0xbba>
 80152e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80152ea:	9005      	str	r0, [sp, #20]
 80152ec:	2000      	movs	r0, #0
 80152ee:	9308      	str	r3, [sp, #32]
 80152f0:	4605      	mov	r5, r0
 80152f2:	3a30      	subs	r2, #48	; 0x30
 80152f4:	f100 0301 	add.w	r3, r0, #1
 80152f8:	d014      	beq.n	8015324 <_strtod_l+0x244>
 80152fa:	9905      	ldr	r1, [sp, #20]
 80152fc:	4419      	add	r1, r3
 80152fe:	9105      	str	r1, [sp, #20]
 8015300:	462b      	mov	r3, r5
 8015302:	eb00 0e05 	add.w	lr, r0, r5
 8015306:	210a      	movs	r1, #10
 8015308:	4573      	cmp	r3, lr
 801530a:	d113      	bne.n	8015334 <_strtod_l+0x254>
 801530c:	182b      	adds	r3, r5, r0
 801530e:	2b08      	cmp	r3, #8
 8015310:	f105 0501 	add.w	r5, r5, #1
 8015314:	4405      	add	r5, r0
 8015316:	dc1c      	bgt.n	8015352 <_strtod_l+0x272>
 8015318:	9907      	ldr	r1, [sp, #28]
 801531a:	230a      	movs	r3, #10
 801531c:	fb03 2301 	mla	r3, r3, r1, r2
 8015320:	9307      	str	r3, [sp, #28]
 8015322:	2300      	movs	r3, #0
 8015324:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015326:	1c51      	adds	r1, r2, #1
 8015328:	9117      	str	r1, [sp, #92]	; 0x5c
 801532a:	7852      	ldrb	r2, [r2, #1]
 801532c:	4618      	mov	r0, r3
 801532e:	e7c9      	b.n	80152c4 <_strtod_l+0x1e4>
 8015330:	4638      	mov	r0, r7
 8015332:	e7d2      	b.n	80152da <_strtod_l+0x1fa>
 8015334:	2b08      	cmp	r3, #8
 8015336:	dc04      	bgt.n	8015342 <_strtod_l+0x262>
 8015338:	9e07      	ldr	r6, [sp, #28]
 801533a:	434e      	muls	r6, r1
 801533c:	9607      	str	r6, [sp, #28]
 801533e:	3301      	adds	r3, #1
 8015340:	e7e2      	b.n	8015308 <_strtod_l+0x228>
 8015342:	f103 0c01 	add.w	ip, r3, #1
 8015346:	f1bc 0f10 	cmp.w	ip, #16
 801534a:	bfd8      	it	le
 801534c:	fb01 f909 	mulle.w	r9, r1, r9
 8015350:	e7f5      	b.n	801533e <_strtod_l+0x25e>
 8015352:	2d10      	cmp	r5, #16
 8015354:	bfdc      	itt	le
 8015356:	230a      	movle	r3, #10
 8015358:	fb03 2909 	mlale	r9, r3, r9, r2
 801535c:	e7e1      	b.n	8015322 <_strtod_l+0x242>
 801535e:	2300      	movs	r3, #0
 8015360:	9305      	str	r3, [sp, #20]
 8015362:	2301      	movs	r3, #1
 8015364:	e77c      	b.n	8015260 <_strtod_l+0x180>
 8015366:	f04f 0c00 	mov.w	ip, #0
 801536a:	f108 0202 	add.w	r2, r8, #2
 801536e:	9217      	str	r2, [sp, #92]	; 0x5c
 8015370:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015374:	e785      	b.n	8015282 <_strtod_l+0x1a2>
 8015376:	f04f 0c01 	mov.w	ip, #1
 801537a:	e7f6      	b.n	801536a <_strtod_l+0x28a>
 801537c:	0805bda4 	.word	0x0805bda4
 8015380:	0805ba78 	.word	0x0805ba78
 8015384:	7ff00000 	.word	0x7ff00000
 8015388:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801538a:	1c51      	adds	r1, r2, #1
 801538c:	9117      	str	r1, [sp, #92]	; 0x5c
 801538e:	7852      	ldrb	r2, [r2, #1]
 8015390:	2a30      	cmp	r2, #48	; 0x30
 8015392:	d0f9      	beq.n	8015388 <_strtod_l+0x2a8>
 8015394:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8015398:	2908      	cmp	r1, #8
 801539a:	f63f af79 	bhi.w	8015290 <_strtod_l+0x1b0>
 801539e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80153a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80153a4:	9206      	str	r2, [sp, #24]
 80153a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80153a8:	1c51      	adds	r1, r2, #1
 80153aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80153ac:	7852      	ldrb	r2, [r2, #1]
 80153ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80153b2:	2e09      	cmp	r6, #9
 80153b4:	d937      	bls.n	8015426 <_strtod_l+0x346>
 80153b6:	9e06      	ldr	r6, [sp, #24]
 80153b8:	1b89      	subs	r1, r1, r6
 80153ba:	2908      	cmp	r1, #8
 80153bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80153c0:	dc02      	bgt.n	80153c8 <_strtod_l+0x2e8>
 80153c2:	4576      	cmp	r6, lr
 80153c4:	bfa8      	it	ge
 80153c6:	4676      	movge	r6, lr
 80153c8:	f1bc 0f00 	cmp.w	ip, #0
 80153cc:	d000      	beq.n	80153d0 <_strtod_l+0x2f0>
 80153ce:	4276      	negs	r6, r6
 80153d0:	2d00      	cmp	r5, #0
 80153d2:	d14d      	bne.n	8015470 <_strtod_l+0x390>
 80153d4:	9904      	ldr	r1, [sp, #16]
 80153d6:	4301      	orrs	r1, r0
 80153d8:	f47f aec6 	bne.w	8015168 <_strtod_l+0x88>
 80153dc:	2b00      	cmp	r3, #0
 80153de:	f47f aee1 	bne.w	80151a4 <_strtod_l+0xc4>
 80153e2:	2a69      	cmp	r2, #105	; 0x69
 80153e4:	d027      	beq.n	8015436 <_strtod_l+0x356>
 80153e6:	dc24      	bgt.n	8015432 <_strtod_l+0x352>
 80153e8:	2a49      	cmp	r2, #73	; 0x49
 80153ea:	d024      	beq.n	8015436 <_strtod_l+0x356>
 80153ec:	2a4e      	cmp	r2, #78	; 0x4e
 80153ee:	f47f aed9 	bne.w	80151a4 <_strtod_l+0xc4>
 80153f2:	499f      	ldr	r1, [pc, #636]	; (8015670 <_strtod_l+0x590>)
 80153f4:	a817      	add	r0, sp, #92	; 0x5c
 80153f6:	f002 fb9b 	bl	8017b30 <__match>
 80153fa:	2800      	cmp	r0, #0
 80153fc:	f43f aed2 	beq.w	80151a4 <_strtod_l+0xc4>
 8015400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015402:	781b      	ldrb	r3, [r3, #0]
 8015404:	2b28      	cmp	r3, #40	; 0x28
 8015406:	d12d      	bne.n	8015464 <_strtod_l+0x384>
 8015408:	499a      	ldr	r1, [pc, #616]	; (8015674 <_strtod_l+0x594>)
 801540a:	aa1a      	add	r2, sp, #104	; 0x68
 801540c:	a817      	add	r0, sp, #92	; 0x5c
 801540e:	f002 fba3 	bl	8017b58 <__hexnan>
 8015412:	2805      	cmp	r0, #5
 8015414:	d126      	bne.n	8015464 <_strtod_l+0x384>
 8015416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015418:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801541c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015420:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015424:	e6a0      	b.n	8015168 <_strtod_l+0x88>
 8015426:	210a      	movs	r1, #10
 8015428:	fb01 2e0e 	mla	lr, r1, lr, r2
 801542c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015430:	e7b9      	b.n	80153a6 <_strtod_l+0x2c6>
 8015432:	2a6e      	cmp	r2, #110	; 0x6e
 8015434:	e7db      	b.n	80153ee <_strtod_l+0x30e>
 8015436:	4990      	ldr	r1, [pc, #576]	; (8015678 <_strtod_l+0x598>)
 8015438:	a817      	add	r0, sp, #92	; 0x5c
 801543a:	f002 fb79 	bl	8017b30 <__match>
 801543e:	2800      	cmp	r0, #0
 8015440:	f43f aeb0 	beq.w	80151a4 <_strtod_l+0xc4>
 8015444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015446:	498d      	ldr	r1, [pc, #564]	; (801567c <_strtod_l+0x59c>)
 8015448:	3b01      	subs	r3, #1
 801544a:	a817      	add	r0, sp, #92	; 0x5c
 801544c:	9317      	str	r3, [sp, #92]	; 0x5c
 801544e:	f002 fb6f 	bl	8017b30 <__match>
 8015452:	b910      	cbnz	r0, 801545a <_strtod_l+0x37a>
 8015454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015456:	3301      	adds	r3, #1
 8015458:	9317      	str	r3, [sp, #92]	; 0x5c
 801545a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801568c <_strtod_l+0x5ac>
 801545e:	f04f 0a00 	mov.w	sl, #0
 8015462:	e681      	b.n	8015168 <_strtod_l+0x88>
 8015464:	4886      	ldr	r0, [pc, #536]	; (8015680 <_strtod_l+0x5a0>)
 8015466:	f003 feaf 	bl	80191c8 <nan>
 801546a:	ec5b ab10 	vmov	sl, fp, d0
 801546e:	e67b      	b.n	8015168 <_strtod_l+0x88>
 8015470:	9b05      	ldr	r3, [sp, #20]
 8015472:	9807      	ldr	r0, [sp, #28]
 8015474:	1af3      	subs	r3, r6, r3
 8015476:	2f00      	cmp	r7, #0
 8015478:	bf08      	it	eq
 801547a:	462f      	moveq	r7, r5
 801547c:	2d10      	cmp	r5, #16
 801547e:	9306      	str	r3, [sp, #24]
 8015480:	46a8      	mov	r8, r5
 8015482:	bfa8      	it	ge
 8015484:	f04f 0810 	movge.w	r8, #16
 8015488:	f7eb f85c 	bl	8000544 <__aeabi_ui2d>
 801548c:	2d09      	cmp	r5, #9
 801548e:	4682      	mov	sl, r0
 8015490:	468b      	mov	fp, r1
 8015492:	dd13      	ble.n	80154bc <_strtod_l+0x3dc>
 8015494:	4b7b      	ldr	r3, [pc, #492]	; (8015684 <_strtod_l+0x5a4>)
 8015496:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801549a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801549e:	f7eb f8cb 	bl	8000638 <__aeabi_dmul>
 80154a2:	4682      	mov	sl, r0
 80154a4:	4648      	mov	r0, r9
 80154a6:	468b      	mov	fp, r1
 80154a8:	f7eb f84c 	bl	8000544 <__aeabi_ui2d>
 80154ac:	4602      	mov	r2, r0
 80154ae:	460b      	mov	r3, r1
 80154b0:	4650      	mov	r0, sl
 80154b2:	4659      	mov	r1, fp
 80154b4:	f7ea ff0a 	bl	80002cc <__adddf3>
 80154b8:	4682      	mov	sl, r0
 80154ba:	468b      	mov	fp, r1
 80154bc:	2d0f      	cmp	r5, #15
 80154be:	dc38      	bgt.n	8015532 <_strtod_l+0x452>
 80154c0:	9b06      	ldr	r3, [sp, #24]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	f43f ae50 	beq.w	8015168 <_strtod_l+0x88>
 80154c8:	dd24      	ble.n	8015514 <_strtod_l+0x434>
 80154ca:	2b16      	cmp	r3, #22
 80154cc:	dc0b      	bgt.n	80154e6 <_strtod_l+0x406>
 80154ce:	496d      	ldr	r1, [pc, #436]	; (8015684 <_strtod_l+0x5a4>)
 80154d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80154d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154d8:	4652      	mov	r2, sl
 80154da:	465b      	mov	r3, fp
 80154dc:	f7eb f8ac 	bl	8000638 <__aeabi_dmul>
 80154e0:	4682      	mov	sl, r0
 80154e2:	468b      	mov	fp, r1
 80154e4:	e640      	b.n	8015168 <_strtod_l+0x88>
 80154e6:	9a06      	ldr	r2, [sp, #24]
 80154e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80154ec:	4293      	cmp	r3, r2
 80154ee:	db20      	blt.n	8015532 <_strtod_l+0x452>
 80154f0:	4c64      	ldr	r4, [pc, #400]	; (8015684 <_strtod_l+0x5a4>)
 80154f2:	f1c5 050f 	rsb	r5, r5, #15
 80154f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80154fa:	4652      	mov	r2, sl
 80154fc:	465b      	mov	r3, fp
 80154fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015502:	f7eb f899 	bl	8000638 <__aeabi_dmul>
 8015506:	9b06      	ldr	r3, [sp, #24]
 8015508:	1b5d      	subs	r5, r3, r5
 801550a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801550e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015512:	e7e3      	b.n	80154dc <_strtod_l+0x3fc>
 8015514:	9b06      	ldr	r3, [sp, #24]
 8015516:	3316      	adds	r3, #22
 8015518:	db0b      	blt.n	8015532 <_strtod_l+0x452>
 801551a:	9b05      	ldr	r3, [sp, #20]
 801551c:	1b9e      	subs	r6, r3, r6
 801551e:	4b59      	ldr	r3, [pc, #356]	; (8015684 <_strtod_l+0x5a4>)
 8015520:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8015524:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015528:	4650      	mov	r0, sl
 801552a:	4659      	mov	r1, fp
 801552c:	f7eb f9ae 	bl	800088c <__aeabi_ddiv>
 8015530:	e7d6      	b.n	80154e0 <_strtod_l+0x400>
 8015532:	9b06      	ldr	r3, [sp, #24]
 8015534:	eba5 0808 	sub.w	r8, r5, r8
 8015538:	4498      	add	r8, r3
 801553a:	f1b8 0f00 	cmp.w	r8, #0
 801553e:	dd74      	ble.n	801562a <_strtod_l+0x54a>
 8015540:	f018 030f 	ands.w	r3, r8, #15
 8015544:	d00a      	beq.n	801555c <_strtod_l+0x47c>
 8015546:	494f      	ldr	r1, [pc, #316]	; (8015684 <_strtod_l+0x5a4>)
 8015548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801554c:	4652      	mov	r2, sl
 801554e:	465b      	mov	r3, fp
 8015550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015554:	f7eb f870 	bl	8000638 <__aeabi_dmul>
 8015558:	4682      	mov	sl, r0
 801555a:	468b      	mov	fp, r1
 801555c:	f038 080f 	bics.w	r8, r8, #15
 8015560:	d04f      	beq.n	8015602 <_strtod_l+0x522>
 8015562:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015566:	dd22      	ble.n	80155ae <_strtod_l+0x4ce>
 8015568:	2500      	movs	r5, #0
 801556a:	462e      	mov	r6, r5
 801556c:	9507      	str	r5, [sp, #28]
 801556e:	9505      	str	r5, [sp, #20]
 8015570:	2322      	movs	r3, #34	; 0x22
 8015572:	f8df b118 	ldr.w	fp, [pc, #280]	; 801568c <_strtod_l+0x5ac>
 8015576:	6023      	str	r3, [r4, #0]
 8015578:	f04f 0a00 	mov.w	sl, #0
 801557c:	9b07      	ldr	r3, [sp, #28]
 801557e:	2b00      	cmp	r3, #0
 8015580:	f43f adf2 	beq.w	8015168 <_strtod_l+0x88>
 8015584:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015586:	4620      	mov	r0, r4
 8015588:	f002 fcc4 	bl	8017f14 <_Bfree>
 801558c:	9905      	ldr	r1, [sp, #20]
 801558e:	4620      	mov	r0, r4
 8015590:	f002 fcc0 	bl	8017f14 <_Bfree>
 8015594:	4631      	mov	r1, r6
 8015596:	4620      	mov	r0, r4
 8015598:	f002 fcbc 	bl	8017f14 <_Bfree>
 801559c:	9907      	ldr	r1, [sp, #28]
 801559e:	4620      	mov	r0, r4
 80155a0:	f002 fcb8 	bl	8017f14 <_Bfree>
 80155a4:	4629      	mov	r1, r5
 80155a6:	4620      	mov	r0, r4
 80155a8:	f002 fcb4 	bl	8017f14 <_Bfree>
 80155ac:	e5dc      	b.n	8015168 <_strtod_l+0x88>
 80155ae:	4b36      	ldr	r3, [pc, #216]	; (8015688 <_strtod_l+0x5a8>)
 80155b0:	9304      	str	r3, [sp, #16]
 80155b2:	2300      	movs	r3, #0
 80155b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80155b8:	4650      	mov	r0, sl
 80155ba:	4659      	mov	r1, fp
 80155bc:	4699      	mov	r9, r3
 80155be:	f1b8 0f01 	cmp.w	r8, #1
 80155c2:	dc21      	bgt.n	8015608 <_strtod_l+0x528>
 80155c4:	b10b      	cbz	r3, 80155ca <_strtod_l+0x4ea>
 80155c6:	4682      	mov	sl, r0
 80155c8:	468b      	mov	fp, r1
 80155ca:	4b2f      	ldr	r3, [pc, #188]	; (8015688 <_strtod_l+0x5a8>)
 80155cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80155d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80155d4:	4652      	mov	r2, sl
 80155d6:	465b      	mov	r3, fp
 80155d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80155dc:	f7eb f82c 	bl	8000638 <__aeabi_dmul>
 80155e0:	4b2a      	ldr	r3, [pc, #168]	; (801568c <_strtod_l+0x5ac>)
 80155e2:	460a      	mov	r2, r1
 80155e4:	400b      	ands	r3, r1
 80155e6:	492a      	ldr	r1, [pc, #168]	; (8015690 <_strtod_l+0x5b0>)
 80155e8:	428b      	cmp	r3, r1
 80155ea:	4682      	mov	sl, r0
 80155ec:	d8bc      	bhi.n	8015568 <_strtod_l+0x488>
 80155ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80155f2:	428b      	cmp	r3, r1
 80155f4:	bf86      	itte	hi
 80155f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8015694 <_strtod_l+0x5b4>
 80155fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80155fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015602:	2300      	movs	r3, #0
 8015604:	9304      	str	r3, [sp, #16]
 8015606:	e084      	b.n	8015712 <_strtod_l+0x632>
 8015608:	f018 0f01 	tst.w	r8, #1
 801560c:	d005      	beq.n	801561a <_strtod_l+0x53a>
 801560e:	9b04      	ldr	r3, [sp, #16]
 8015610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015614:	f7eb f810 	bl	8000638 <__aeabi_dmul>
 8015618:	2301      	movs	r3, #1
 801561a:	9a04      	ldr	r2, [sp, #16]
 801561c:	3208      	adds	r2, #8
 801561e:	f109 0901 	add.w	r9, r9, #1
 8015622:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015626:	9204      	str	r2, [sp, #16]
 8015628:	e7c9      	b.n	80155be <_strtod_l+0x4de>
 801562a:	d0ea      	beq.n	8015602 <_strtod_l+0x522>
 801562c:	f1c8 0800 	rsb	r8, r8, #0
 8015630:	f018 020f 	ands.w	r2, r8, #15
 8015634:	d00a      	beq.n	801564c <_strtod_l+0x56c>
 8015636:	4b13      	ldr	r3, [pc, #76]	; (8015684 <_strtod_l+0x5a4>)
 8015638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801563c:	4650      	mov	r0, sl
 801563e:	4659      	mov	r1, fp
 8015640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015644:	f7eb f922 	bl	800088c <__aeabi_ddiv>
 8015648:	4682      	mov	sl, r0
 801564a:	468b      	mov	fp, r1
 801564c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015650:	d0d7      	beq.n	8015602 <_strtod_l+0x522>
 8015652:	f1b8 0f1f 	cmp.w	r8, #31
 8015656:	dd1f      	ble.n	8015698 <_strtod_l+0x5b8>
 8015658:	2500      	movs	r5, #0
 801565a:	462e      	mov	r6, r5
 801565c:	9507      	str	r5, [sp, #28]
 801565e:	9505      	str	r5, [sp, #20]
 8015660:	2322      	movs	r3, #34	; 0x22
 8015662:	f04f 0a00 	mov.w	sl, #0
 8015666:	f04f 0b00 	mov.w	fp, #0
 801566a:	6023      	str	r3, [r4, #0]
 801566c:	e786      	b.n	801557c <_strtod_l+0x49c>
 801566e:	bf00      	nop
 8015670:	0805ba52 	.word	0x0805ba52
 8015674:	0805ba8c 	.word	0x0805ba8c
 8015678:	0805ba4a 	.word	0x0805ba4a
 801567c:	0805bc65 	.word	0x0805bc65
 8015680:	0805b95a 	.word	0x0805b95a
 8015684:	0805bea0 	.word	0x0805bea0
 8015688:	0805be78 	.word	0x0805be78
 801568c:	7ff00000 	.word	0x7ff00000
 8015690:	7ca00000 	.word	0x7ca00000
 8015694:	7fefffff 	.word	0x7fefffff
 8015698:	f018 0310 	ands.w	r3, r8, #16
 801569c:	bf18      	it	ne
 801569e:	236a      	movne	r3, #106	; 0x6a
 80156a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8015a50 <_strtod_l+0x970>
 80156a4:	9304      	str	r3, [sp, #16]
 80156a6:	4650      	mov	r0, sl
 80156a8:	4659      	mov	r1, fp
 80156aa:	2300      	movs	r3, #0
 80156ac:	f018 0f01 	tst.w	r8, #1
 80156b0:	d004      	beq.n	80156bc <_strtod_l+0x5dc>
 80156b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80156b6:	f7ea ffbf 	bl	8000638 <__aeabi_dmul>
 80156ba:	2301      	movs	r3, #1
 80156bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80156c0:	f109 0908 	add.w	r9, r9, #8
 80156c4:	d1f2      	bne.n	80156ac <_strtod_l+0x5cc>
 80156c6:	b10b      	cbz	r3, 80156cc <_strtod_l+0x5ec>
 80156c8:	4682      	mov	sl, r0
 80156ca:	468b      	mov	fp, r1
 80156cc:	9b04      	ldr	r3, [sp, #16]
 80156ce:	b1c3      	cbz	r3, 8015702 <_strtod_l+0x622>
 80156d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80156d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80156d8:	2b00      	cmp	r3, #0
 80156da:	4659      	mov	r1, fp
 80156dc:	dd11      	ble.n	8015702 <_strtod_l+0x622>
 80156de:	2b1f      	cmp	r3, #31
 80156e0:	f340 8124 	ble.w	801592c <_strtod_l+0x84c>
 80156e4:	2b34      	cmp	r3, #52	; 0x34
 80156e6:	bfde      	ittt	le
 80156e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80156ec:	f04f 33ff 	movle.w	r3, #4294967295
 80156f0:	fa03 f202 	lslle.w	r2, r3, r2
 80156f4:	f04f 0a00 	mov.w	sl, #0
 80156f8:	bfcc      	ite	gt
 80156fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80156fe:	ea02 0b01 	andle.w	fp, r2, r1
 8015702:	2200      	movs	r2, #0
 8015704:	2300      	movs	r3, #0
 8015706:	4650      	mov	r0, sl
 8015708:	4659      	mov	r1, fp
 801570a:	f7eb f9fd 	bl	8000b08 <__aeabi_dcmpeq>
 801570e:	2800      	cmp	r0, #0
 8015710:	d1a2      	bne.n	8015658 <_strtod_l+0x578>
 8015712:	9b07      	ldr	r3, [sp, #28]
 8015714:	9300      	str	r3, [sp, #0]
 8015716:	9908      	ldr	r1, [sp, #32]
 8015718:	462b      	mov	r3, r5
 801571a:	463a      	mov	r2, r7
 801571c:	4620      	mov	r0, r4
 801571e:	f002 fc61 	bl	8017fe4 <__s2b>
 8015722:	9007      	str	r0, [sp, #28]
 8015724:	2800      	cmp	r0, #0
 8015726:	f43f af1f 	beq.w	8015568 <_strtod_l+0x488>
 801572a:	9b05      	ldr	r3, [sp, #20]
 801572c:	1b9e      	subs	r6, r3, r6
 801572e:	9b06      	ldr	r3, [sp, #24]
 8015730:	2b00      	cmp	r3, #0
 8015732:	bfb4      	ite	lt
 8015734:	4633      	movlt	r3, r6
 8015736:	2300      	movge	r3, #0
 8015738:	930c      	str	r3, [sp, #48]	; 0x30
 801573a:	9b06      	ldr	r3, [sp, #24]
 801573c:	2500      	movs	r5, #0
 801573e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015742:	9312      	str	r3, [sp, #72]	; 0x48
 8015744:	462e      	mov	r6, r5
 8015746:	9b07      	ldr	r3, [sp, #28]
 8015748:	4620      	mov	r0, r4
 801574a:	6859      	ldr	r1, [r3, #4]
 801574c:	f002 fba2 	bl	8017e94 <_Balloc>
 8015750:	9005      	str	r0, [sp, #20]
 8015752:	2800      	cmp	r0, #0
 8015754:	f43f af0c 	beq.w	8015570 <_strtod_l+0x490>
 8015758:	9b07      	ldr	r3, [sp, #28]
 801575a:	691a      	ldr	r2, [r3, #16]
 801575c:	3202      	adds	r2, #2
 801575e:	f103 010c 	add.w	r1, r3, #12
 8015762:	0092      	lsls	r2, r2, #2
 8015764:	300c      	adds	r0, #12
 8015766:	f7fe fa85 	bl	8013c74 <memcpy>
 801576a:	ec4b ab10 	vmov	d0, sl, fp
 801576e:	aa1a      	add	r2, sp, #104	; 0x68
 8015770:	a919      	add	r1, sp, #100	; 0x64
 8015772:	4620      	mov	r0, r4
 8015774:	f002 ff7c 	bl	8018670 <__d2b>
 8015778:	ec4b ab18 	vmov	d8, sl, fp
 801577c:	9018      	str	r0, [sp, #96]	; 0x60
 801577e:	2800      	cmp	r0, #0
 8015780:	f43f aef6 	beq.w	8015570 <_strtod_l+0x490>
 8015784:	2101      	movs	r1, #1
 8015786:	4620      	mov	r0, r4
 8015788:	f002 fcc6 	bl	8018118 <__i2b>
 801578c:	4606      	mov	r6, r0
 801578e:	2800      	cmp	r0, #0
 8015790:	f43f aeee 	beq.w	8015570 <_strtod_l+0x490>
 8015794:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015796:	9904      	ldr	r1, [sp, #16]
 8015798:	2b00      	cmp	r3, #0
 801579a:	bfab      	itete	ge
 801579c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801579e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80157a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80157a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80157a6:	bfac      	ite	ge
 80157a8:	eb03 0902 	addge.w	r9, r3, r2
 80157ac:	1ad7      	sublt	r7, r2, r3
 80157ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80157b0:	eba3 0801 	sub.w	r8, r3, r1
 80157b4:	4490      	add	r8, r2
 80157b6:	4ba1      	ldr	r3, [pc, #644]	; (8015a3c <_strtod_l+0x95c>)
 80157b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80157bc:	4598      	cmp	r8, r3
 80157be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80157c2:	f280 80c7 	bge.w	8015954 <_strtod_l+0x874>
 80157c6:	eba3 0308 	sub.w	r3, r3, r8
 80157ca:	2b1f      	cmp	r3, #31
 80157cc:	eba2 0203 	sub.w	r2, r2, r3
 80157d0:	f04f 0101 	mov.w	r1, #1
 80157d4:	f300 80b1 	bgt.w	801593a <_strtod_l+0x85a>
 80157d8:	fa01 f303 	lsl.w	r3, r1, r3
 80157dc:	930d      	str	r3, [sp, #52]	; 0x34
 80157de:	2300      	movs	r3, #0
 80157e0:	9308      	str	r3, [sp, #32]
 80157e2:	eb09 0802 	add.w	r8, r9, r2
 80157e6:	9b04      	ldr	r3, [sp, #16]
 80157e8:	45c1      	cmp	r9, r8
 80157ea:	4417      	add	r7, r2
 80157ec:	441f      	add	r7, r3
 80157ee:	464b      	mov	r3, r9
 80157f0:	bfa8      	it	ge
 80157f2:	4643      	movge	r3, r8
 80157f4:	42bb      	cmp	r3, r7
 80157f6:	bfa8      	it	ge
 80157f8:	463b      	movge	r3, r7
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	bfc2      	ittt	gt
 80157fe:	eba8 0803 	subgt.w	r8, r8, r3
 8015802:	1aff      	subgt	r7, r7, r3
 8015804:	eba9 0903 	subgt.w	r9, r9, r3
 8015808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801580a:	2b00      	cmp	r3, #0
 801580c:	dd17      	ble.n	801583e <_strtod_l+0x75e>
 801580e:	4631      	mov	r1, r6
 8015810:	461a      	mov	r2, r3
 8015812:	4620      	mov	r0, r4
 8015814:	f002 fd40 	bl	8018298 <__pow5mult>
 8015818:	4606      	mov	r6, r0
 801581a:	2800      	cmp	r0, #0
 801581c:	f43f aea8 	beq.w	8015570 <_strtod_l+0x490>
 8015820:	4601      	mov	r1, r0
 8015822:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015824:	4620      	mov	r0, r4
 8015826:	f002 fc8d 	bl	8018144 <__multiply>
 801582a:	900b      	str	r0, [sp, #44]	; 0x2c
 801582c:	2800      	cmp	r0, #0
 801582e:	f43f ae9f 	beq.w	8015570 <_strtod_l+0x490>
 8015832:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015834:	4620      	mov	r0, r4
 8015836:	f002 fb6d 	bl	8017f14 <_Bfree>
 801583a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801583c:	9318      	str	r3, [sp, #96]	; 0x60
 801583e:	f1b8 0f00 	cmp.w	r8, #0
 8015842:	f300 808c 	bgt.w	801595e <_strtod_l+0x87e>
 8015846:	9b06      	ldr	r3, [sp, #24]
 8015848:	2b00      	cmp	r3, #0
 801584a:	dd08      	ble.n	801585e <_strtod_l+0x77e>
 801584c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801584e:	9905      	ldr	r1, [sp, #20]
 8015850:	4620      	mov	r0, r4
 8015852:	f002 fd21 	bl	8018298 <__pow5mult>
 8015856:	9005      	str	r0, [sp, #20]
 8015858:	2800      	cmp	r0, #0
 801585a:	f43f ae89 	beq.w	8015570 <_strtod_l+0x490>
 801585e:	2f00      	cmp	r7, #0
 8015860:	dd08      	ble.n	8015874 <_strtod_l+0x794>
 8015862:	9905      	ldr	r1, [sp, #20]
 8015864:	463a      	mov	r2, r7
 8015866:	4620      	mov	r0, r4
 8015868:	f002 fd70 	bl	801834c <__lshift>
 801586c:	9005      	str	r0, [sp, #20]
 801586e:	2800      	cmp	r0, #0
 8015870:	f43f ae7e 	beq.w	8015570 <_strtod_l+0x490>
 8015874:	f1b9 0f00 	cmp.w	r9, #0
 8015878:	dd08      	ble.n	801588c <_strtod_l+0x7ac>
 801587a:	4631      	mov	r1, r6
 801587c:	464a      	mov	r2, r9
 801587e:	4620      	mov	r0, r4
 8015880:	f002 fd64 	bl	801834c <__lshift>
 8015884:	4606      	mov	r6, r0
 8015886:	2800      	cmp	r0, #0
 8015888:	f43f ae72 	beq.w	8015570 <_strtod_l+0x490>
 801588c:	9a05      	ldr	r2, [sp, #20]
 801588e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015890:	4620      	mov	r0, r4
 8015892:	f002 fde7 	bl	8018464 <__mdiff>
 8015896:	4605      	mov	r5, r0
 8015898:	2800      	cmp	r0, #0
 801589a:	f43f ae69 	beq.w	8015570 <_strtod_l+0x490>
 801589e:	68c3      	ldr	r3, [r0, #12]
 80158a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80158a2:	2300      	movs	r3, #0
 80158a4:	60c3      	str	r3, [r0, #12]
 80158a6:	4631      	mov	r1, r6
 80158a8:	f002 fdc0 	bl	801842c <__mcmp>
 80158ac:	2800      	cmp	r0, #0
 80158ae:	da60      	bge.n	8015972 <_strtod_l+0x892>
 80158b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158b2:	ea53 030a 	orrs.w	r3, r3, sl
 80158b6:	f040 8082 	bne.w	80159be <_strtod_l+0x8de>
 80158ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d17d      	bne.n	80159be <_strtod_l+0x8de>
 80158c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80158c6:	0d1b      	lsrs	r3, r3, #20
 80158c8:	051b      	lsls	r3, r3, #20
 80158ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80158ce:	d976      	bls.n	80159be <_strtod_l+0x8de>
 80158d0:	696b      	ldr	r3, [r5, #20]
 80158d2:	b913      	cbnz	r3, 80158da <_strtod_l+0x7fa>
 80158d4:	692b      	ldr	r3, [r5, #16]
 80158d6:	2b01      	cmp	r3, #1
 80158d8:	dd71      	ble.n	80159be <_strtod_l+0x8de>
 80158da:	4629      	mov	r1, r5
 80158dc:	2201      	movs	r2, #1
 80158de:	4620      	mov	r0, r4
 80158e0:	f002 fd34 	bl	801834c <__lshift>
 80158e4:	4631      	mov	r1, r6
 80158e6:	4605      	mov	r5, r0
 80158e8:	f002 fda0 	bl	801842c <__mcmp>
 80158ec:	2800      	cmp	r0, #0
 80158ee:	dd66      	ble.n	80159be <_strtod_l+0x8de>
 80158f0:	9904      	ldr	r1, [sp, #16]
 80158f2:	4a53      	ldr	r2, [pc, #332]	; (8015a40 <_strtod_l+0x960>)
 80158f4:	465b      	mov	r3, fp
 80158f6:	2900      	cmp	r1, #0
 80158f8:	f000 8081 	beq.w	80159fe <_strtod_l+0x91e>
 80158fc:	ea02 010b 	and.w	r1, r2, fp
 8015900:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015904:	dc7b      	bgt.n	80159fe <_strtod_l+0x91e>
 8015906:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801590a:	f77f aea9 	ble.w	8015660 <_strtod_l+0x580>
 801590e:	4b4d      	ldr	r3, [pc, #308]	; (8015a44 <_strtod_l+0x964>)
 8015910:	4650      	mov	r0, sl
 8015912:	4659      	mov	r1, fp
 8015914:	2200      	movs	r2, #0
 8015916:	f7ea fe8f 	bl	8000638 <__aeabi_dmul>
 801591a:	460b      	mov	r3, r1
 801591c:	4303      	orrs	r3, r0
 801591e:	bf08      	it	eq
 8015920:	2322      	moveq	r3, #34	; 0x22
 8015922:	4682      	mov	sl, r0
 8015924:	468b      	mov	fp, r1
 8015926:	bf08      	it	eq
 8015928:	6023      	streq	r3, [r4, #0]
 801592a:	e62b      	b.n	8015584 <_strtod_l+0x4a4>
 801592c:	f04f 32ff 	mov.w	r2, #4294967295
 8015930:	fa02 f303 	lsl.w	r3, r2, r3
 8015934:	ea03 0a0a 	and.w	sl, r3, sl
 8015938:	e6e3      	b.n	8015702 <_strtod_l+0x622>
 801593a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801593e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8015942:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8015946:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801594a:	fa01 f308 	lsl.w	r3, r1, r8
 801594e:	9308      	str	r3, [sp, #32]
 8015950:	910d      	str	r1, [sp, #52]	; 0x34
 8015952:	e746      	b.n	80157e2 <_strtod_l+0x702>
 8015954:	2300      	movs	r3, #0
 8015956:	9308      	str	r3, [sp, #32]
 8015958:	2301      	movs	r3, #1
 801595a:	930d      	str	r3, [sp, #52]	; 0x34
 801595c:	e741      	b.n	80157e2 <_strtod_l+0x702>
 801595e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015960:	4642      	mov	r2, r8
 8015962:	4620      	mov	r0, r4
 8015964:	f002 fcf2 	bl	801834c <__lshift>
 8015968:	9018      	str	r0, [sp, #96]	; 0x60
 801596a:	2800      	cmp	r0, #0
 801596c:	f47f af6b 	bne.w	8015846 <_strtod_l+0x766>
 8015970:	e5fe      	b.n	8015570 <_strtod_l+0x490>
 8015972:	465f      	mov	r7, fp
 8015974:	d16e      	bne.n	8015a54 <_strtod_l+0x974>
 8015976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015978:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801597c:	b342      	cbz	r2, 80159d0 <_strtod_l+0x8f0>
 801597e:	4a32      	ldr	r2, [pc, #200]	; (8015a48 <_strtod_l+0x968>)
 8015980:	4293      	cmp	r3, r2
 8015982:	d128      	bne.n	80159d6 <_strtod_l+0x8f6>
 8015984:	9b04      	ldr	r3, [sp, #16]
 8015986:	4651      	mov	r1, sl
 8015988:	b1eb      	cbz	r3, 80159c6 <_strtod_l+0x8e6>
 801598a:	4b2d      	ldr	r3, [pc, #180]	; (8015a40 <_strtod_l+0x960>)
 801598c:	403b      	ands	r3, r7
 801598e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015992:	f04f 32ff 	mov.w	r2, #4294967295
 8015996:	d819      	bhi.n	80159cc <_strtod_l+0x8ec>
 8015998:	0d1b      	lsrs	r3, r3, #20
 801599a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801599e:	fa02 f303 	lsl.w	r3, r2, r3
 80159a2:	4299      	cmp	r1, r3
 80159a4:	d117      	bne.n	80159d6 <_strtod_l+0x8f6>
 80159a6:	4b29      	ldr	r3, [pc, #164]	; (8015a4c <_strtod_l+0x96c>)
 80159a8:	429f      	cmp	r7, r3
 80159aa:	d102      	bne.n	80159b2 <_strtod_l+0x8d2>
 80159ac:	3101      	adds	r1, #1
 80159ae:	f43f addf 	beq.w	8015570 <_strtod_l+0x490>
 80159b2:	4b23      	ldr	r3, [pc, #140]	; (8015a40 <_strtod_l+0x960>)
 80159b4:	403b      	ands	r3, r7
 80159b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80159ba:	f04f 0a00 	mov.w	sl, #0
 80159be:	9b04      	ldr	r3, [sp, #16]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d1a4      	bne.n	801590e <_strtod_l+0x82e>
 80159c4:	e5de      	b.n	8015584 <_strtod_l+0x4a4>
 80159c6:	f04f 33ff 	mov.w	r3, #4294967295
 80159ca:	e7ea      	b.n	80159a2 <_strtod_l+0x8c2>
 80159cc:	4613      	mov	r3, r2
 80159ce:	e7e8      	b.n	80159a2 <_strtod_l+0x8c2>
 80159d0:	ea53 030a 	orrs.w	r3, r3, sl
 80159d4:	d08c      	beq.n	80158f0 <_strtod_l+0x810>
 80159d6:	9b08      	ldr	r3, [sp, #32]
 80159d8:	b1db      	cbz	r3, 8015a12 <_strtod_l+0x932>
 80159da:	423b      	tst	r3, r7
 80159dc:	d0ef      	beq.n	80159be <_strtod_l+0x8de>
 80159de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159e0:	9a04      	ldr	r2, [sp, #16]
 80159e2:	4650      	mov	r0, sl
 80159e4:	4659      	mov	r1, fp
 80159e6:	b1c3      	cbz	r3, 8015a1a <_strtod_l+0x93a>
 80159e8:	f7ff fb5c 	bl	80150a4 <sulp>
 80159ec:	4602      	mov	r2, r0
 80159ee:	460b      	mov	r3, r1
 80159f0:	ec51 0b18 	vmov	r0, r1, d8
 80159f4:	f7ea fc6a 	bl	80002cc <__adddf3>
 80159f8:	4682      	mov	sl, r0
 80159fa:	468b      	mov	fp, r1
 80159fc:	e7df      	b.n	80159be <_strtod_l+0x8de>
 80159fe:	4013      	ands	r3, r2
 8015a00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015a04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015a08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015a0c:	f04f 3aff 	mov.w	sl, #4294967295
 8015a10:	e7d5      	b.n	80159be <_strtod_l+0x8de>
 8015a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a14:	ea13 0f0a 	tst.w	r3, sl
 8015a18:	e7e0      	b.n	80159dc <_strtod_l+0x8fc>
 8015a1a:	f7ff fb43 	bl	80150a4 <sulp>
 8015a1e:	4602      	mov	r2, r0
 8015a20:	460b      	mov	r3, r1
 8015a22:	ec51 0b18 	vmov	r0, r1, d8
 8015a26:	f7ea fc4f 	bl	80002c8 <__aeabi_dsub>
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	4682      	mov	sl, r0
 8015a30:	468b      	mov	fp, r1
 8015a32:	f7eb f869 	bl	8000b08 <__aeabi_dcmpeq>
 8015a36:	2800      	cmp	r0, #0
 8015a38:	d0c1      	beq.n	80159be <_strtod_l+0x8de>
 8015a3a:	e611      	b.n	8015660 <_strtod_l+0x580>
 8015a3c:	fffffc02 	.word	0xfffffc02
 8015a40:	7ff00000 	.word	0x7ff00000
 8015a44:	39500000 	.word	0x39500000
 8015a48:	000fffff 	.word	0x000fffff
 8015a4c:	7fefffff 	.word	0x7fefffff
 8015a50:	0805baa0 	.word	0x0805baa0
 8015a54:	4631      	mov	r1, r6
 8015a56:	4628      	mov	r0, r5
 8015a58:	f002 fe66 	bl	8018728 <__ratio>
 8015a5c:	ec59 8b10 	vmov	r8, r9, d0
 8015a60:	ee10 0a10 	vmov	r0, s0
 8015a64:	2200      	movs	r2, #0
 8015a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015a6a:	4649      	mov	r1, r9
 8015a6c:	f7eb f860 	bl	8000b30 <__aeabi_dcmple>
 8015a70:	2800      	cmp	r0, #0
 8015a72:	d07a      	beq.n	8015b6a <_strtod_l+0xa8a>
 8015a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d04a      	beq.n	8015b10 <_strtod_l+0xa30>
 8015a7a:	4b95      	ldr	r3, [pc, #596]	; (8015cd0 <_strtod_l+0xbf0>)
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015a82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8015cd0 <_strtod_l+0xbf0>
 8015a86:	f04f 0800 	mov.w	r8, #0
 8015a8a:	4b92      	ldr	r3, [pc, #584]	; (8015cd4 <_strtod_l+0xbf4>)
 8015a8c:	403b      	ands	r3, r7
 8015a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8015a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015a92:	4b91      	ldr	r3, [pc, #580]	; (8015cd8 <_strtod_l+0xbf8>)
 8015a94:	429a      	cmp	r2, r3
 8015a96:	f040 80b0 	bne.w	8015bfa <_strtod_l+0xb1a>
 8015a9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015a9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8015aa2:	ec4b ab10 	vmov	d0, sl, fp
 8015aa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015aaa:	f002 fd65 	bl	8018578 <__ulp>
 8015aae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015ab2:	ec53 2b10 	vmov	r2, r3, d0
 8015ab6:	f7ea fdbf 	bl	8000638 <__aeabi_dmul>
 8015aba:	4652      	mov	r2, sl
 8015abc:	465b      	mov	r3, fp
 8015abe:	f7ea fc05 	bl	80002cc <__adddf3>
 8015ac2:	460b      	mov	r3, r1
 8015ac4:	4983      	ldr	r1, [pc, #524]	; (8015cd4 <_strtod_l+0xbf4>)
 8015ac6:	4a85      	ldr	r2, [pc, #532]	; (8015cdc <_strtod_l+0xbfc>)
 8015ac8:	4019      	ands	r1, r3
 8015aca:	4291      	cmp	r1, r2
 8015acc:	4682      	mov	sl, r0
 8015ace:	d960      	bls.n	8015b92 <_strtod_l+0xab2>
 8015ad0:	ee18 3a90 	vmov	r3, s17
 8015ad4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015ad8:	4293      	cmp	r3, r2
 8015ada:	d104      	bne.n	8015ae6 <_strtod_l+0xa06>
 8015adc:	ee18 3a10 	vmov	r3, s16
 8015ae0:	3301      	adds	r3, #1
 8015ae2:	f43f ad45 	beq.w	8015570 <_strtod_l+0x490>
 8015ae6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8015ce8 <_strtod_l+0xc08>
 8015aea:	f04f 3aff 	mov.w	sl, #4294967295
 8015aee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015af0:	4620      	mov	r0, r4
 8015af2:	f002 fa0f 	bl	8017f14 <_Bfree>
 8015af6:	9905      	ldr	r1, [sp, #20]
 8015af8:	4620      	mov	r0, r4
 8015afa:	f002 fa0b 	bl	8017f14 <_Bfree>
 8015afe:	4631      	mov	r1, r6
 8015b00:	4620      	mov	r0, r4
 8015b02:	f002 fa07 	bl	8017f14 <_Bfree>
 8015b06:	4629      	mov	r1, r5
 8015b08:	4620      	mov	r0, r4
 8015b0a:	f002 fa03 	bl	8017f14 <_Bfree>
 8015b0e:	e61a      	b.n	8015746 <_strtod_l+0x666>
 8015b10:	f1ba 0f00 	cmp.w	sl, #0
 8015b14:	d11b      	bne.n	8015b4e <_strtod_l+0xa6e>
 8015b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015b1a:	b9f3      	cbnz	r3, 8015b5a <_strtod_l+0xa7a>
 8015b1c:	4b6c      	ldr	r3, [pc, #432]	; (8015cd0 <_strtod_l+0xbf0>)
 8015b1e:	2200      	movs	r2, #0
 8015b20:	4640      	mov	r0, r8
 8015b22:	4649      	mov	r1, r9
 8015b24:	f7ea fffa 	bl	8000b1c <__aeabi_dcmplt>
 8015b28:	b9d0      	cbnz	r0, 8015b60 <_strtod_l+0xa80>
 8015b2a:	4640      	mov	r0, r8
 8015b2c:	4649      	mov	r1, r9
 8015b2e:	4b6c      	ldr	r3, [pc, #432]	; (8015ce0 <_strtod_l+0xc00>)
 8015b30:	2200      	movs	r2, #0
 8015b32:	f7ea fd81 	bl	8000638 <__aeabi_dmul>
 8015b36:	4680      	mov	r8, r0
 8015b38:	4689      	mov	r9, r1
 8015b3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015b3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8015b42:	9315      	str	r3, [sp, #84]	; 0x54
 8015b44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015b48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015b4c:	e79d      	b.n	8015a8a <_strtod_l+0x9aa>
 8015b4e:	f1ba 0f01 	cmp.w	sl, #1
 8015b52:	d102      	bne.n	8015b5a <_strtod_l+0xa7a>
 8015b54:	2f00      	cmp	r7, #0
 8015b56:	f43f ad83 	beq.w	8015660 <_strtod_l+0x580>
 8015b5a:	4b62      	ldr	r3, [pc, #392]	; (8015ce4 <_strtod_l+0xc04>)
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	e78e      	b.n	8015a7e <_strtod_l+0x99e>
 8015b60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8015ce0 <_strtod_l+0xc00>
 8015b64:	f04f 0800 	mov.w	r8, #0
 8015b68:	e7e7      	b.n	8015b3a <_strtod_l+0xa5a>
 8015b6a:	4b5d      	ldr	r3, [pc, #372]	; (8015ce0 <_strtod_l+0xc00>)
 8015b6c:	4640      	mov	r0, r8
 8015b6e:	4649      	mov	r1, r9
 8015b70:	2200      	movs	r2, #0
 8015b72:	f7ea fd61 	bl	8000638 <__aeabi_dmul>
 8015b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b78:	4680      	mov	r8, r0
 8015b7a:	4689      	mov	r9, r1
 8015b7c:	b933      	cbnz	r3, 8015b8c <_strtod_l+0xaac>
 8015b7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015b82:	900e      	str	r0, [sp, #56]	; 0x38
 8015b84:	930f      	str	r3, [sp, #60]	; 0x3c
 8015b86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8015b8a:	e7dd      	b.n	8015b48 <_strtod_l+0xa68>
 8015b8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8015b90:	e7f9      	b.n	8015b86 <_strtod_l+0xaa6>
 8015b92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015b96:	9b04      	ldr	r3, [sp, #16]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d1a8      	bne.n	8015aee <_strtod_l+0xa0e>
 8015b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ba2:	0d1b      	lsrs	r3, r3, #20
 8015ba4:	051b      	lsls	r3, r3, #20
 8015ba6:	429a      	cmp	r2, r3
 8015ba8:	d1a1      	bne.n	8015aee <_strtod_l+0xa0e>
 8015baa:	4640      	mov	r0, r8
 8015bac:	4649      	mov	r1, r9
 8015bae:	f7eb f8a3 	bl	8000cf8 <__aeabi_d2lz>
 8015bb2:	f7ea fd13 	bl	80005dc <__aeabi_l2d>
 8015bb6:	4602      	mov	r2, r0
 8015bb8:	460b      	mov	r3, r1
 8015bba:	4640      	mov	r0, r8
 8015bbc:	4649      	mov	r1, r9
 8015bbe:	f7ea fb83 	bl	80002c8 <__aeabi_dsub>
 8015bc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015bc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015bc8:	ea43 030a 	orr.w	r3, r3, sl
 8015bcc:	4313      	orrs	r3, r2
 8015bce:	4680      	mov	r8, r0
 8015bd0:	4689      	mov	r9, r1
 8015bd2:	d055      	beq.n	8015c80 <_strtod_l+0xba0>
 8015bd4:	a336      	add	r3, pc, #216	; (adr r3, 8015cb0 <_strtod_l+0xbd0>)
 8015bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bda:	f7ea ff9f 	bl	8000b1c <__aeabi_dcmplt>
 8015bde:	2800      	cmp	r0, #0
 8015be0:	f47f acd0 	bne.w	8015584 <_strtod_l+0x4a4>
 8015be4:	a334      	add	r3, pc, #208	; (adr r3, 8015cb8 <_strtod_l+0xbd8>)
 8015be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bea:	4640      	mov	r0, r8
 8015bec:	4649      	mov	r1, r9
 8015bee:	f7ea ffb3 	bl	8000b58 <__aeabi_dcmpgt>
 8015bf2:	2800      	cmp	r0, #0
 8015bf4:	f43f af7b 	beq.w	8015aee <_strtod_l+0xa0e>
 8015bf8:	e4c4      	b.n	8015584 <_strtod_l+0x4a4>
 8015bfa:	9b04      	ldr	r3, [sp, #16]
 8015bfc:	b333      	cbz	r3, 8015c4c <_strtod_l+0xb6c>
 8015bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015c04:	d822      	bhi.n	8015c4c <_strtod_l+0xb6c>
 8015c06:	a32e      	add	r3, pc, #184	; (adr r3, 8015cc0 <_strtod_l+0xbe0>)
 8015c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c0c:	4640      	mov	r0, r8
 8015c0e:	4649      	mov	r1, r9
 8015c10:	f7ea ff8e 	bl	8000b30 <__aeabi_dcmple>
 8015c14:	b1a0      	cbz	r0, 8015c40 <_strtod_l+0xb60>
 8015c16:	4649      	mov	r1, r9
 8015c18:	4640      	mov	r0, r8
 8015c1a:	f7ea ffe5 	bl	8000be8 <__aeabi_d2uiz>
 8015c1e:	2801      	cmp	r0, #1
 8015c20:	bf38      	it	cc
 8015c22:	2001      	movcc	r0, #1
 8015c24:	f7ea fc8e 	bl	8000544 <__aeabi_ui2d>
 8015c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c2a:	4680      	mov	r8, r0
 8015c2c:	4689      	mov	r9, r1
 8015c2e:	bb23      	cbnz	r3, 8015c7a <_strtod_l+0xb9a>
 8015c30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015c34:	9010      	str	r0, [sp, #64]	; 0x40
 8015c36:	9311      	str	r3, [sp, #68]	; 0x44
 8015c38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015c3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015c44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015c48:	1a9b      	subs	r3, r3, r2
 8015c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8015c4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015c50:	eeb0 0a48 	vmov.f32	s0, s16
 8015c54:	eef0 0a68 	vmov.f32	s1, s17
 8015c58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015c5c:	f002 fc8c 	bl	8018578 <__ulp>
 8015c60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015c64:	ec53 2b10 	vmov	r2, r3, d0
 8015c68:	f7ea fce6 	bl	8000638 <__aeabi_dmul>
 8015c6c:	ec53 2b18 	vmov	r2, r3, d8
 8015c70:	f7ea fb2c 	bl	80002cc <__adddf3>
 8015c74:	4682      	mov	sl, r0
 8015c76:	468b      	mov	fp, r1
 8015c78:	e78d      	b.n	8015b96 <_strtod_l+0xab6>
 8015c7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8015c7e:	e7db      	b.n	8015c38 <_strtod_l+0xb58>
 8015c80:	a311      	add	r3, pc, #68	; (adr r3, 8015cc8 <_strtod_l+0xbe8>)
 8015c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c86:	f7ea ff49 	bl	8000b1c <__aeabi_dcmplt>
 8015c8a:	e7b2      	b.n	8015bf2 <_strtod_l+0xb12>
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8015c90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015c92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c94:	6013      	str	r3, [r2, #0]
 8015c96:	f7ff ba6b 	b.w	8015170 <_strtod_l+0x90>
 8015c9a:	2a65      	cmp	r2, #101	; 0x65
 8015c9c:	f43f ab5f 	beq.w	801535e <_strtod_l+0x27e>
 8015ca0:	2a45      	cmp	r2, #69	; 0x45
 8015ca2:	f43f ab5c 	beq.w	801535e <_strtod_l+0x27e>
 8015ca6:	2301      	movs	r3, #1
 8015ca8:	f7ff bb94 	b.w	80153d4 <_strtod_l+0x2f4>
 8015cac:	f3af 8000 	nop.w
 8015cb0:	94a03595 	.word	0x94a03595
 8015cb4:	3fdfffff 	.word	0x3fdfffff
 8015cb8:	35afe535 	.word	0x35afe535
 8015cbc:	3fe00000 	.word	0x3fe00000
 8015cc0:	ffc00000 	.word	0xffc00000
 8015cc4:	41dfffff 	.word	0x41dfffff
 8015cc8:	94a03595 	.word	0x94a03595
 8015ccc:	3fcfffff 	.word	0x3fcfffff
 8015cd0:	3ff00000 	.word	0x3ff00000
 8015cd4:	7ff00000 	.word	0x7ff00000
 8015cd8:	7fe00000 	.word	0x7fe00000
 8015cdc:	7c9fffff 	.word	0x7c9fffff
 8015ce0:	3fe00000 	.word	0x3fe00000
 8015ce4:	bff00000 	.word	0xbff00000
 8015ce8:	7fefffff 	.word	0x7fefffff

08015cec <strtod>:
 8015cec:	460a      	mov	r2, r1
 8015cee:	4601      	mov	r1, r0
 8015cf0:	4802      	ldr	r0, [pc, #8]	; (8015cfc <strtod+0x10>)
 8015cf2:	4b03      	ldr	r3, [pc, #12]	; (8015d00 <strtod+0x14>)
 8015cf4:	6800      	ldr	r0, [r0, #0]
 8015cf6:	f7ff b9f3 	b.w	80150e0 <_strtod_l>
 8015cfa:	bf00      	nop
 8015cfc:	20000324 	.word	0x20000324
 8015d00:	200003ec 	.word	0x200003ec

08015d04 <strtok>:
 8015d04:	4b16      	ldr	r3, [pc, #88]	; (8015d60 <strtok+0x5c>)
 8015d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d08:	681e      	ldr	r6, [r3, #0]
 8015d0a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8015d0c:	4605      	mov	r5, r0
 8015d0e:	b9fc      	cbnz	r4, 8015d50 <strtok+0x4c>
 8015d10:	2050      	movs	r0, #80	; 0x50
 8015d12:	9101      	str	r1, [sp, #4]
 8015d14:	f7fd ff9e 	bl	8013c54 <malloc>
 8015d18:	9901      	ldr	r1, [sp, #4]
 8015d1a:	65b0      	str	r0, [r6, #88]	; 0x58
 8015d1c:	4602      	mov	r2, r0
 8015d1e:	b920      	cbnz	r0, 8015d2a <strtok+0x26>
 8015d20:	4b10      	ldr	r3, [pc, #64]	; (8015d64 <strtok+0x60>)
 8015d22:	4811      	ldr	r0, [pc, #68]	; (8015d68 <strtok+0x64>)
 8015d24:	2157      	movs	r1, #87	; 0x57
 8015d26:	f7fd ff33 	bl	8013b90 <__assert_func>
 8015d2a:	e9c0 4400 	strd	r4, r4, [r0]
 8015d2e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8015d32:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8015d36:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8015d3a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8015d3e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8015d42:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8015d46:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8015d4a:	6184      	str	r4, [r0, #24]
 8015d4c:	7704      	strb	r4, [r0, #28]
 8015d4e:	6244      	str	r4, [r0, #36]	; 0x24
 8015d50:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8015d52:	2301      	movs	r3, #1
 8015d54:	4628      	mov	r0, r5
 8015d56:	b002      	add	sp, #8
 8015d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d5c:	f000 b806 	b.w	8015d6c <__strtok_r>
 8015d60:	20000324 	.word	0x20000324
 8015d64:	0805b8c8 	.word	0x0805b8c8
 8015d68:	0805bac8 	.word	0x0805bac8

08015d6c <__strtok_r>:
 8015d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d6e:	b908      	cbnz	r0, 8015d74 <__strtok_r+0x8>
 8015d70:	6810      	ldr	r0, [r2, #0]
 8015d72:	b188      	cbz	r0, 8015d98 <__strtok_r+0x2c>
 8015d74:	4604      	mov	r4, r0
 8015d76:	4620      	mov	r0, r4
 8015d78:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015d7c:	460f      	mov	r7, r1
 8015d7e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8015d82:	b91e      	cbnz	r6, 8015d8c <__strtok_r+0x20>
 8015d84:	b965      	cbnz	r5, 8015da0 <__strtok_r+0x34>
 8015d86:	6015      	str	r5, [r2, #0]
 8015d88:	4628      	mov	r0, r5
 8015d8a:	e005      	b.n	8015d98 <__strtok_r+0x2c>
 8015d8c:	42b5      	cmp	r5, r6
 8015d8e:	d1f6      	bne.n	8015d7e <__strtok_r+0x12>
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d1f0      	bne.n	8015d76 <__strtok_r+0xa>
 8015d94:	6014      	str	r4, [r2, #0]
 8015d96:	7003      	strb	r3, [r0, #0]
 8015d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d9a:	461c      	mov	r4, r3
 8015d9c:	e00c      	b.n	8015db8 <__strtok_r+0x4c>
 8015d9e:	b915      	cbnz	r5, 8015da6 <__strtok_r+0x3a>
 8015da0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015da4:	460e      	mov	r6, r1
 8015da6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8015daa:	42ab      	cmp	r3, r5
 8015dac:	d1f7      	bne.n	8015d9e <__strtok_r+0x32>
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d0f3      	beq.n	8015d9a <__strtok_r+0x2e>
 8015db2:	2300      	movs	r3, #0
 8015db4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015db8:	6014      	str	r4, [r2, #0]
 8015dba:	e7ed      	b.n	8015d98 <__strtok_r+0x2c>

08015dbc <_strtol_l.constprop.0>:
 8015dbc:	2b01      	cmp	r3, #1
 8015dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dc2:	d001      	beq.n	8015dc8 <_strtol_l.constprop.0+0xc>
 8015dc4:	2b24      	cmp	r3, #36	; 0x24
 8015dc6:	d906      	bls.n	8015dd6 <_strtol_l.constprop.0+0x1a>
 8015dc8:	f7fd ff08 	bl	8013bdc <__errno>
 8015dcc:	2316      	movs	r3, #22
 8015dce:	6003      	str	r3, [r0, #0]
 8015dd0:	2000      	movs	r0, #0
 8015dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015ebc <_strtol_l.constprop.0+0x100>
 8015dda:	460d      	mov	r5, r1
 8015ddc:	462e      	mov	r6, r5
 8015dde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015de2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8015de6:	f017 0708 	ands.w	r7, r7, #8
 8015dea:	d1f7      	bne.n	8015ddc <_strtol_l.constprop.0+0x20>
 8015dec:	2c2d      	cmp	r4, #45	; 0x2d
 8015dee:	d132      	bne.n	8015e56 <_strtol_l.constprop.0+0x9a>
 8015df0:	782c      	ldrb	r4, [r5, #0]
 8015df2:	2701      	movs	r7, #1
 8015df4:	1cb5      	adds	r5, r6, #2
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d05b      	beq.n	8015eb2 <_strtol_l.constprop.0+0xf6>
 8015dfa:	2b10      	cmp	r3, #16
 8015dfc:	d109      	bne.n	8015e12 <_strtol_l.constprop.0+0x56>
 8015dfe:	2c30      	cmp	r4, #48	; 0x30
 8015e00:	d107      	bne.n	8015e12 <_strtol_l.constprop.0+0x56>
 8015e02:	782c      	ldrb	r4, [r5, #0]
 8015e04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015e08:	2c58      	cmp	r4, #88	; 0x58
 8015e0a:	d14d      	bne.n	8015ea8 <_strtol_l.constprop.0+0xec>
 8015e0c:	786c      	ldrb	r4, [r5, #1]
 8015e0e:	2310      	movs	r3, #16
 8015e10:	3502      	adds	r5, #2
 8015e12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8015e16:	f108 38ff 	add.w	r8, r8, #4294967295
 8015e1a:	f04f 0c00 	mov.w	ip, #0
 8015e1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8015e22:	4666      	mov	r6, ip
 8015e24:	fb03 8a19 	mls	sl, r3, r9, r8
 8015e28:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8015e2c:	f1be 0f09 	cmp.w	lr, #9
 8015e30:	d816      	bhi.n	8015e60 <_strtol_l.constprop.0+0xa4>
 8015e32:	4674      	mov	r4, lr
 8015e34:	42a3      	cmp	r3, r4
 8015e36:	dd24      	ble.n	8015e82 <_strtol_l.constprop.0+0xc6>
 8015e38:	f1bc 0f00 	cmp.w	ip, #0
 8015e3c:	db1e      	blt.n	8015e7c <_strtol_l.constprop.0+0xc0>
 8015e3e:	45b1      	cmp	r9, r6
 8015e40:	d31c      	bcc.n	8015e7c <_strtol_l.constprop.0+0xc0>
 8015e42:	d101      	bne.n	8015e48 <_strtol_l.constprop.0+0x8c>
 8015e44:	45a2      	cmp	sl, r4
 8015e46:	db19      	blt.n	8015e7c <_strtol_l.constprop.0+0xc0>
 8015e48:	fb06 4603 	mla	r6, r6, r3, r4
 8015e4c:	f04f 0c01 	mov.w	ip, #1
 8015e50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015e54:	e7e8      	b.n	8015e28 <_strtol_l.constprop.0+0x6c>
 8015e56:	2c2b      	cmp	r4, #43	; 0x2b
 8015e58:	bf04      	itt	eq
 8015e5a:	782c      	ldrbeq	r4, [r5, #0]
 8015e5c:	1cb5      	addeq	r5, r6, #2
 8015e5e:	e7ca      	b.n	8015df6 <_strtol_l.constprop.0+0x3a>
 8015e60:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8015e64:	f1be 0f19 	cmp.w	lr, #25
 8015e68:	d801      	bhi.n	8015e6e <_strtol_l.constprop.0+0xb2>
 8015e6a:	3c37      	subs	r4, #55	; 0x37
 8015e6c:	e7e2      	b.n	8015e34 <_strtol_l.constprop.0+0x78>
 8015e6e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8015e72:	f1be 0f19 	cmp.w	lr, #25
 8015e76:	d804      	bhi.n	8015e82 <_strtol_l.constprop.0+0xc6>
 8015e78:	3c57      	subs	r4, #87	; 0x57
 8015e7a:	e7db      	b.n	8015e34 <_strtol_l.constprop.0+0x78>
 8015e7c:	f04f 3cff 	mov.w	ip, #4294967295
 8015e80:	e7e6      	b.n	8015e50 <_strtol_l.constprop.0+0x94>
 8015e82:	f1bc 0f00 	cmp.w	ip, #0
 8015e86:	da05      	bge.n	8015e94 <_strtol_l.constprop.0+0xd8>
 8015e88:	2322      	movs	r3, #34	; 0x22
 8015e8a:	6003      	str	r3, [r0, #0]
 8015e8c:	4646      	mov	r6, r8
 8015e8e:	b942      	cbnz	r2, 8015ea2 <_strtol_l.constprop.0+0xe6>
 8015e90:	4630      	mov	r0, r6
 8015e92:	e79e      	b.n	8015dd2 <_strtol_l.constprop.0+0x16>
 8015e94:	b107      	cbz	r7, 8015e98 <_strtol_l.constprop.0+0xdc>
 8015e96:	4276      	negs	r6, r6
 8015e98:	2a00      	cmp	r2, #0
 8015e9a:	d0f9      	beq.n	8015e90 <_strtol_l.constprop.0+0xd4>
 8015e9c:	f1bc 0f00 	cmp.w	ip, #0
 8015ea0:	d000      	beq.n	8015ea4 <_strtol_l.constprop.0+0xe8>
 8015ea2:	1e69      	subs	r1, r5, #1
 8015ea4:	6011      	str	r1, [r2, #0]
 8015ea6:	e7f3      	b.n	8015e90 <_strtol_l.constprop.0+0xd4>
 8015ea8:	2430      	movs	r4, #48	; 0x30
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d1b1      	bne.n	8015e12 <_strtol_l.constprop.0+0x56>
 8015eae:	2308      	movs	r3, #8
 8015eb0:	e7af      	b.n	8015e12 <_strtol_l.constprop.0+0x56>
 8015eb2:	2c30      	cmp	r4, #48	; 0x30
 8015eb4:	d0a5      	beq.n	8015e02 <_strtol_l.constprop.0+0x46>
 8015eb6:	230a      	movs	r3, #10
 8015eb8:	e7ab      	b.n	8015e12 <_strtol_l.constprop.0+0x56>
 8015eba:	bf00      	nop
 8015ebc:	0805bb62 	.word	0x0805bb62

08015ec0 <_strtol_r>:
 8015ec0:	f7ff bf7c 	b.w	8015dbc <_strtol_l.constprop.0>

08015ec4 <strtol>:
 8015ec4:	4613      	mov	r3, r2
 8015ec6:	460a      	mov	r2, r1
 8015ec8:	4601      	mov	r1, r0
 8015eca:	4802      	ldr	r0, [pc, #8]	; (8015ed4 <strtol+0x10>)
 8015ecc:	6800      	ldr	r0, [r0, #0]
 8015ece:	f7ff bf75 	b.w	8015dbc <_strtol_l.constprop.0>
 8015ed2:	bf00      	nop
 8015ed4:	20000324 	.word	0x20000324

08015ed8 <__tzcalc_limits>:
 8015ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015edc:	4605      	mov	r5, r0
 8015ede:	f001 ff1b 	bl	8017d18 <__gettzinfo>
 8015ee2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8015ee6:	429d      	cmp	r5, r3
 8015ee8:	f340 8099 	ble.w	801601e <__tzcalc_limits+0x146>
 8015eec:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8015ef0:	18ac      	adds	r4, r5, r2
 8015ef2:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8015ef6:	f240 126d 	movw	r2, #365	; 0x16d
 8015efa:	10a4      	asrs	r4, r4, #2
 8015efc:	fb02 4403 	mla	r4, r2, r3, r4
 8015f00:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8015f04:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8015f08:	fb93 f3f2 	sdiv	r3, r3, r2
 8015f0c:	441c      	add	r4, r3
 8015f0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015f12:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8015f16:	fb95 fcf3 	sdiv	ip, r5, r3
 8015f1a:	fb03 5c1c 	mls	ip, r3, ip, r5
 8015f1e:	186a      	adds	r2, r5, r1
 8015f20:	fabc f68c 	clz	r6, ip
 8015f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8015f28:	f005 0303 	and.w	r3, r5, #3
 8015f2c:	4414      	add	r4, r2
 8015f2e:	2264      	movs	r2, #100	; 0x64
 8015f30:	6045      	str	r5, [r0, #4]
 8015f32:	fb95 f7f2 	sdiv	r7, r5, r2
 8015f36:	0976      	lsrs	r6, r6, #5
 8015f38:	fb02 5717 	mls	r7, r2, r7, r5
 8015f3c:	4601      	mov	r1, r0
 8015f3e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8015f42:	9300      	str	r3, [sp, #0]
 8015f44:	f04f 0a07 	mov.w	sl, #7
 8015f48:	7a0d      	ldrb	r5, [r1, #8]
 8015f4a:	694b      	ldr	r3, [r1, #20]
 8015f4c:	2d4a      	cmp	r5, #74	; 0x4a
 8015f4e:	d12d      	bne.n	8015fac <__tzcalc_limits+0xd4>
 8015f50:	9a00      	ldr	r2, [sp, #0]
 8015f52:	eb04 0e03 	add.w	lr, r4, r3
 8015f56:	b902      	cbnz	r2, 8015f5a <__tzcalc_limits+0x82>
 8015f58:	b917      	cbnz	r7, 8015f60 <__tzcalc_limits+0x88>
 8015f5a:	f1bc 0f00 	cmp.w	ip, #0
 8015f5e:	d123      	bne.n	8015fa8 <__tzcalc_limits+0xd0>
 8015f60:	2b3b      	cmp	r3, #59	; 0x3b
 8015f62:	bfd4      	ite	le
 8015f64:	2300      	movle	r3, #0
 8015f66:	2301      	movgt	r3, #1
 8015f68:	4473      	add	r3, lr
 8015f6a:	3b01      	subs	r3, #1
 8015f6c:	698d      	ldr	r5, [r1, #24]
 8015f6e:	4a2d      	ldr	r2, [pc, #180]	; (8016024 <__tzcalc_limits+0x14c>)
 8015f70:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8015f74:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8015f78:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8015f7a:	18ed      	adds	r5, r5, r3
 8015f7c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8015f80:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8015f84:	3128      	adds	r1, #40	; 0x28
 8015f86:	458b      	cmp	fp, r1
 8015f88:	d1de      	bne.n	8015f48 <__tzcalc_limits+0x70>
 8015f8a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8015f8e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8015f92:	428c      	cmp	r4, r1
 8015f94:	eb72 0303 	sbcs.w	r3, r2, r3
 8015f98:	bfb4      	ite	lt
 8015f9a:	2301      	movlt	r3, #1
 8015f9c:	2300      	movge	r3, #0
 8015f9e:	6003      	str	r3, [r0, #0]
 8015fa0:	2001      	movs	r0, #1
 8015fa2:	b003      	add	sp, #12
 8015fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fa8:	2300      	movs	r3, #0
 8015faa:	e7dd      	b.n	8015f68 <__tzcalc_limits+0x90>
 8015fac:	2d44      	cmp	r5, #68	; 0x44
 8015fae:	d101      	bne.n	8015fb4 <__tzcalc_limits+0xdc>
 8015fb0:	4423      	add	r3, r4
 8015fb2:	e7db      	b.n	8015f6c <__tzcalc_limits+0x94>
 8015fb4:	9a00      	ldr	r2, [sp, #0]
 8015fb6:	bb62      	cbnz	r2, 8016012 <__tzcalc_limits+0x13a>
 8015fb8:	2f00      	cmp	r7, #0
 8015fba:	bf0c      	ite	eq
 8015fbc:	4635      	moveq	r5, r6
 8015fbe:	2501      	movne	r5, #1
 8015fc0:	68ca      	ldr	r2, [r1, #12]
 8015fc2:	9201      	str	r2, [sp, #4]
 8015fc4:	4a18      	ldr	r2, [pc, #96]	; (8016028 <__tzcalc_limits+0x150>)
 8015fc6:	f04f 0930 	mov.w	r9, #48	; 0x30
 8015fca:	fb09 2505 	mla	r5, r9, r5, r2
 8015fce:	46a6      	mov	lr, r4
 8015fd0:	f04f 0800 	mov.w	r8, #0
 8015fd4:	3d04      	subs	r5, #4
 8015fd6:	9a01      	ldr	r2, [sp, #4]
 8015fd8:	f108 0801 	add.w	r8, r8, #1
 8015fdc:	4542      	cmp	r2, r8
 8015fde:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8015fe2:	dc18      	bgt.n	8016016 <__tzcalc_limits+0x13e>
 8015fe4:	f10e 0504 	add.w	r5, lr, #4
 8015fe8:	fb95 f8fa 	sdiv	r8, r5, sl
 8015fec:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8015ff0:	eba5 0808 	sub.w	r8, r5, r8
 8015ff4:	ebb3 0808 	subs.w	r8, r3, r8
 8015ff8:	690b      	ldr	r3, [r1, #16]
 8015ffa:	f103 33ff 	add.w	r3, r3, #4294967295
 8015ffe:	bf48      	it	mi
 8016000:	f108 0807 	addmi.w	r8, r8, #7
 8016004:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8016008:	4443      	add	r3, r8
 801600a:	454b      	cmp	r3, r9
 801600c:	da05      	bge.n	801601a <__tzcalc_limits+0x142>
 801600e:	4473      	add	r3, lr
 8016010:	e7ac      	b.n	8015f6c <__tzcalc_limits+0x94>
 8016012:	4635      	mov	r5, r6
 8016014:	e7d4      	b.n	8015fc0 <__tzcalc_limits+0xe8>
 8016016:	44ce      	add	lr, r9
 8016018:	e7dd      	b.n	8015fd6 <__tzcalc_limits+0xfe>
 801601a:	3b07      	subs	r3, #7
 801601c:	e7f5      	b.n	801600a <__tzcalc_limits+0x132>
 801601e:	2000      	movs	r0, #0
 8016020:	e7bf      	b.n	8015fa2 <__tzcalc_limits+0xca>
 8016022:	bf00      	nop
 8016024:	00015180 	.word	0x00015180
 8016028:	0805bdb8 	.word	0x0805bdb8

0801602c <__tz_lock>:
 801602c:	4801      	ldr	r0, [pc, #4]	; (8016034 <__tz_lock+0x8>)
 801602e:	f001 be7c 	b.w	8017d2a <__retarget_lock_acquire>
 8016032:	bf00      	nop
 8016034:	20005e60 	.word	0x20005e60

08016038 <__tz_unlock>:
 8016038:	4801      	ldr	r0, [pc, #4]	; (8016040 <__tz_unlock+0x8>)
 801603a:	f001 be78 	b.w	8017d2e <__retarget_lock_release>
 801603e:	bf00      	nop
 8016040:	20005e60 	.word	0x20005e60

08016044 <_tzset_unlocked>:
 8016044:	4b01      	ldr	r3, [pc, #4]	; (801604c <_tzset_unlocked+0x8>)
 8016046:	6818      	ldr	r0, [r3, #0]
 8016048:	f000 b802 	b.w	8016050 <_tzset_unlocked_r>
 801604c:	20000324 	.word	0x20000324

08016050 <_tzset_unlocked_r>:
 8016050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016054:	b08d      	sub	sp, #52	; 0x34
 8016056:	4607      	mov	r7, r0
 8016058:	f001 fe5e 	bl	8017d18 <__gettzinfo>
 801605c:	49b0      	ldr	r1, [pc, #704]	; (8016320 <_tzset_unlocked_r+0x2d0>)
 801605e:	4eb1      	ldr	r6, [pc, #708]	; (8016324 <_tzset_unlocked_r+0x2d4>)
 8016060:	4605      	mov	r5, r0
 8016062:	4638      	mov	r0, r7
 8016064:	f001 fe50 	bl	8017d08 <_getenv_r>
 8016068:	4604      	mov	r4, r0
 801606a:	b970      	cbnz	r0, 801608a <_tzset_unlocked_r+0x3a>
 801606c:	4bae      	ldr	r3, [pc, #696]	; (8016328 <_tzset_unlocked_r+0x2d8>)
 801606e:	4aaf      	ldr	r2, [pc, #700]	; (801632c <_tzset_unlocked_r+0x2dc>)
 8016070:	6018      	str	r0, [r3, #0]
 8016072:	4baf      	ldr	r3, [pc, #700]	; (8016330 <_tzset_unlocked_r+0x2e0>)
 8016074:	6018      	str	r0, [r3, #0]
 8016076:	4baf      	ldr	r3, [pc, #700]	; (8016334 <_tzset_unlocked_r+0x2e4>)
 8016078:	6830      	ldr	r0, [r6, #0]
 801607a:	e9c3 2200 	strd	r2, r2, [r3]
 801607e:	f7fd fdf1 	bl	8013c64 <free>
 8016082:	6034      	str	r4, [r6, #0]
 8016084:	b00d      	add	sp, #52	; 0x34
 8016086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801608a:	6831      	ldr	r1, [r6, #0]
 801608c:	2900      	cmp	r1, #0
 801608e:	d162      	bne.n	8016156 <_tzset_unlocked_r+0x106>
 8016090:	6830      	ldr	r0, [r6, #0]
 8016092:	f7fd fde7 	bl	8013c64 <free>
 8016096:	4620      	mov	r0, r4
 8016098:	f7ea f8b4 	bl	8000204 <strlen>
 801609c:	1c41      	adds	r1, r0, #1
 801609e:	4638      	mov	r0, r7
 80160a0:	f7fe f8dc 	bl	801425c <_malloc_r>
 80160a4:	6030      	str	r0, [r6, #0]
 80160a6:	2800      	cmp	r0, #0
 80160a8:	d15a      	bne.n	8016160 <_tzset_unlocked_r+0x110>
 80160aa:	7823      	ldrb	r3, [r4, #0]
 80160ac:	4aa2      	ldr	r2, [pc, #648]	; (8016338 <_tzset_unlocked_r+0x2e8>)
 80160ae:	49a3      	ldr	r1, [pc, #652]	; (801633c <_tzset_unlocked_r+0x2ec>)
 80160b0:	2b3a      	cmp	r3, #58	; 0x3a
 80160b2:	bf08      	it	eq
 80160b4:	3401      	addeq	r4, #1
 80160b6:	ae0a      	add	r6, sp, #40	; 0x28
 80160b8:	4633      	mov	r3, r6
 80160ba:	4620      	mov	r0, r4
 80160bc:	f7fe ff36 	bl	8014f2c <siscanf>
 80160c0:	2800      	cmp	r0, #0
 80160c2:	dddf      	ble.n	8016084 <_tzset_unlocked_r+0x34>
 80160c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160c6:	18e7      	adds	r7, r4, r3
 80160c8:	5ce3      	ldrb	r3, [r4, r3]
 80160ca:	2b2d      	cmp	r3, #45	; 0x2d
 80160cc:	d14c      	bne.n	8016168 <_tzset_unlocked_r+0x118>
 80160ce:	3701      	adds	r7, #1
 80160d0:	f04f 38ff 	mov.w	r8, #4294967295
 80160d4:	f10d 0a20 	add.w	sl, sp, #32
 80160d8:	f10d 0b1e 	add.w	fp, sp, #30
 80160dc:	2400      	movs	r4, #0
 80160de:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80160e2:	4997      	ldr	r1, [pc, #604]	; (8016340 <_tzset_unlocked_r+0x2f0>)
 80160e4:	9603      	str	r6, [sp, #12]
 80160e6:	f8cd b000 	str.w	fp, [sp]
 80160ea:	4633      	mov	r3, r6
 80160ec:	aa07      	add	r2, sp, #28
 80160ee:	4638      	mov	r0, r7
 80160f0:	f8ad 401e 	strh.w	r4, [sp, #30]
 80160f4:	f8ad 4020 	strh.w	r4, [sp, #32]
 80160f8:	f7fe ff18 	bl	8014f2c <siscanf>
 80160fc:	42a0      	cmp	r0, r4
 80160fe:	ddc1      	ble.n	8016084 <_tzset_unlocked_r+0x34>
 8016100:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016104:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016108:	f8df 9240 	ldr.w	r9, [pc, #576]	; 801634c <_tzset_unlocked_r+0x2fc>
 801610c:	213c      	movs	r1, #60	; 0x3c
 801610e:	fb01 3302 	mla	r3, r1, r2, r3
 8016112:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8016116:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801611a:	fb01 3302 	mla	r3, r1, r2, r3
 801611e:	fb08 f303 	mul.w	r3, r8, r3
 8016122:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8016334 <_tzset_unlocked_r+0x2e4>
 8016126:	62ab      	str	r3, [r5, #40]	; 0x28
 8016128:	4b83      	ldr	r3, [pc, #524]	; (8016338 <_tzset_unlocked_r+0x2e8>)
 801612a:	f8c8 3000 	str.w	r3, [r8]
 801612e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016130:	4982      	ldr	r1, [pc, #520]	; (801633c <_tzset_unlocked_r+0x2ec>)
 8016132:	441f      	add	r7, r3
 8016134:	464a      	mov	r2, r9
 8016136:	4633      	mov	r3, r6
 8016138:	4638      	mov	r0, r7
 801613a:	f7fe fef7 	bl	8014f2c <siscanf>
 801613e:	42a0      	cmp	r0, r4
 8016140:	dc18      	bgt.n	8016174 <_tzset_unlocked_r+0x124>
 8016142:	f8d8 3000 	ldr.w	r3, [r8]
 8016146:	f8c8 3004 	str.w	r3, [r8, #4]
 801614a:	4b77      	ldr	r3, [pc, #476]	; (8016328 <_tzset_unlocked_r+0x2d8>)
 801614c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801614e:	601a      	str	r2, [r3, #0]
 8016150:	4b77      	ldr	r3, [pc, #476]	; (8016330 <_tzset_unlocked_r+0x2e0>)
 8016152:	601c      	str	r4, [r3, #0]
 8016154:	e796      	b.n	8016084 <_tzset_unlocked_r+0x34>
 8016156:	f7ea f84b 	bl	80001f0 <strcmp>
 801615a:	2800      	cmp	r0, #0
 801615c:	d198      	bne.n	8016090 <_tzset_unlocked_r+0x40>
 801615e:	e791      	b.n	8016084 <_tzset_unlocked_r+0x34>
 8016160:	4621      	mov	r1, r4
 8016162:	f7fe ff54 	bl	801500e <strcpy>
 8016166:	e7a0      	b.n	80160aa <_tzset_unlocked_r+0x5a>
 8016168:	2b2b      	cmp	r3, #43	; 0x2b
 801616a:	bf08      	it	eq
 801616c:	3701      	addeq	r7, #1
 801616e:	f04f 0801 	mov.w	r8, #1
 8016172:	e7af      	b.n	80160d4 <_tzset_unlocked_r+0x84>
 8016174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016176:	f8c8 9004 	str.w	r9, [r8, #4]
 801617a:	18fc      	adds	r4, r7, r3
 801617c:	5cfb      	ldrb	r3, [r7, r3]
 801617e:	2b2d      	cmp	r3, #45	; 0x2d
 8016180:	f040 808b 	bne.w	801629a <_tzset_unlocked_r+0x24a>
 8016184:	3401      	adds	r4, #1
 8016186:	f04f 37ff 	mov.w	r7, #4294967295
 801618a:	2300      	movs	r3, #0
 801618c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016190:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016194:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016198:	930a      	str	r3, [sp, #40]	; 0x28
 801619a:	e9cd a602 	strd	sl, r6, [sp, #8]
 801619e:	e9cd b600 	strd	fp, r6, [sp]
 80161a2:	4967      	ldr	r1, [pc, #412]	; (8016340 <_tzset_unlocked_r+0x2f0>)
 80161a4:	4633      	mov	r3, r6
 80161a6:	aa07      	add	r2, sp, #28
 80161a8:	4620      	mov	r0, r4
 80161aa:	f7fe febf 	bl	8014f2c <siscanf>
 80161ae:	2800      	cmp	r0, #0
 80161b0:	dc78      	bgt.n	80162a4 <_tzset_unlocked_r+0x254>
 80161b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80161b4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80161b8:	652b      	str	r3, [r5, #80]	; 0x50
 80161ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161bc:	462f      	mov	r7, r5
 80161be:	441c      	add	r4, r3
 80161c0:	f04f 0900 	mov.w	r9, #0
 80161c4:	7823      	ldrb	r3, [r4, #0]
 80161c6:	2b2c      	cmp	r3, #44	; 0x2c
 80161c8:	bf08      	it	eq
 80161ca:	3401      	addeq	r4, #1
 80161cc:	f894 8000 	ldrb.w	r8, [r4]
 80161d0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80161d4:	d178      	bne.n	80162c8 <_tzset_unlocked_r+0x278>
 80161d6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80161da:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80161de:	ab09      	add	r3, sp, #36	; 0x24
 80161e0:	9300      	str	r3, [sp, #0]
 80161e2:	4958      	ldr	r1, [pc, #352]	; (8016344 <_tzset_unlocked_r+0x2f4>)
 80161e4:	9603      	str	r6, [sp, #12]
 80161e6:	4633      	mov	r3, r6
 80161e8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80161ec:	4620      	mov	r0, r4
 80161ee:	f7fe fe9d 	bl	8014f2c <siscanf>
 80161f2:	2803      	cmp	r0, #3
 80161f4:	f47f af46 	bne.w	8016084 <_tzset_unlocked_r+0x34>
 80161f8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80161fc:	1e4b      	subs	r3, r1, #1
 80161fe:	2b0b      	cmp	r3, #11
 8016200:	f63f af40 	bhi.w	8016084 <_tzset_unlocked_r+0x34>
 8016204:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8016208:	1e53      	subs	r3, r2, #1
 801620a:	2b04      	cmp	r3, #4
 801620c:	f63f af3a 	bhi.w	8016084 <_tzset_unlocked_r+0x34>
 8016210:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8016214:	2b06      	cmp	r3, #6
 8016216:	f63f af35 	bhi.w	8016084 <_tzset_unlocked_r+0x34>
 801621a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801621e:	f887 8008 	strb.w	r8, [r7, #8]
 8016222:	617b      	str	r3, [r7, #20]
 8016224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016226:	eb04 0803 	add.w	r8, r4, r3
 801622a:	2302      	movs	r3, #2
 801622c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016230:	2300      	movs	r3, #0
 8016232:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016236:	f8ad 3020 	strh.w	r3, [sp, #32]
 801623a:	930a      	str	r3, [sp, #40]	; 0x28
 801623c:	f898 3000 	ldrb.w	r3, [r8]
 8016240:	2b2f      	cmp	r3, #47	; 0x2f
 8016242:	d109      	bne.n	8016258 <_tzset_unlocked_r+0x208>
 8016244:	e9cd a602 	strd	sl, r6, [sp, #8]
 8016248:	e9cd b600 	strd	fp, r6, [sp]
 801624c:	493e      	ldr	r1, [pc, #248]	; (8016348 <_tzset_unlocked_r+0x2f8>)
 801624e:	4633      	mov	r3, r6
 8016250:	aa07      	add	r2, sp, #28
 8016252:	4640      	mov	r0, r8
 8016254:	f7fe fe6a 	bl	8014f2c <siscanf>
 8016258:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801625c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016260:	213c      	movs	r1, #60	; 0x3c
 8016262:	fb01 3302 	mla	r3, r1, r2, r3
 8016266:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801626a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801626e:	fb01 3302 	mla	r3, r1, r2, r3
 8016272:	61bb      	str	r3, [r7, #24]
 8016274:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016276:	3728      	adds	r7, #40	; 0x28
 8016278:	4444      	add	r4, r8
 801627a:	f1b9 0f00 	cmp.w	r9, #0
 801627e:	d020      	beq.n	80162c2 <_tzset_unlocked_r+0x272>
 8016280:	6868      	ldr	r0, [r5, #4]
 8016282:	f7ff fe29 	bl	8015ed8 <__tzcalc_limits>
 8016286:	4b28      	ldr	r3, [pc, #160]	; (8016328 <_tzset_unlocked_r+0x2d8>)
 8016288:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801628a:	601a      	str	r2, [r3, #0]
 801628c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801628e:	1a9b      	subs	r3, r3, r2
 8016290:	4a27      	ldr	r2, [pc, #156]	; (8016330 <_tzset_unlocked_r+0x2e0>)
 8016292:	bf18      	it	ne
 8016294:	2301      	movne	r3, #1
 8016296:	6013      	str	r3, [r2, #0]
 8016298:	e6f4      	b.n	8016084 <_tzset_unlocked_r+0x34>
 801629a:	2b2b      	cmp	r3, #43	; 0x2b
 801629c:	bf08      	it	eq
 801629e:	3401      	addeq	r4, #1
 80162a0:	2701      	movs	r7, #1
 80162a2:	e772      	b.n	801618a <_tzset_unlocked_r+0x13a>
 80162a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80162a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80162ac:	213c      	movs	r1, #60	; 0x3c
 80162ae:	fb01 3302 	mla	r3, r1, r2, r3
 80162b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80162b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80162ba:	fb01 3302 	mla	r3, r1, r2, r3
 80162be:	437b      	muls	r3, r7
 80162c0:	e77a      	b.n	80161b8 <_tzset_unlocked_r+0x168>
 80162c2:	f04f 0901 	mov.w	r9, #1
 80162c6:	e77d      	b.n	80161c4 <_tzset_unlocked_r+0x174>
 80162c8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80162cc:	bf06      	itte	eq
 80162ce:	3401      	addeq	r4, #1
 80162d0:	4643      	moveq	r3, r8
 80162d2:	2344      	movne	r3, #68	; 0x44
 80162d4:	220a      	movs	r2, #10
 80162d6:	a90b      	add	r1, sp, #44	; 0x2c
 80162d8:	4620      	mov	r0, r4
 80162da:	9305      	str	r3, [sp, #20]
 80162dc:	f003 f880 	bl	80193e0 <strtoul>
 80162e0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80162e4:	9b05      	ldr	r3, [sp, #20]
 80162e6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80162ea:	45a0      	cmp	r8, r4
 80162ec:	d114      	bne.n	8016318 <_tzset_unlocked_r+0x2c8>
 80162ee:	234d      	movs	r3, #77	; 0x4d
 80162f0:	f1b9 0f00 	cmp.w	r9, #0
 80162f4:	d107      	bne.n	8016306 <_tzset_unlocked_r+0x2b6>
 80162f6:	722b      	strb	r3, [r5, #8]
 80162f8:	2103      	movs	r1, #3
 80162fa:	2302      	movs	r3, #2
 80162fc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8016300:	f8c5 9014 	str.w	r9, [r5, #20]
 8016304:	e791      	b.n	801622a <_tzset_unlocked_r+0x1da>
 8016306:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801630a:	220b      	movs	r2, #11
 801630c:	2301      	movs	r3, #1
 801630e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8016312:	2300      	movs	r3, #0
 8016314:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016316:	e788      	b.n	801622a <_tzset_unlocked_r+0x1da>
 8016318:	b280      	uxth	r0, r0
 801631a:	723b      	strb	r3, [r7, #8]
 801631c:	6178      	str	r0, [r7, #20]
 801631e:	e784      	b.n	801622a <_tzset_unlocked_r+0x1da>
 8016320:	0805bb25 	.word	0x0805bb25
 8016324:	20005e50 	.word	0x20005e50
 8016328:	20005e58 	.word	0x20005e58
 801632c:	0805bb28 	.word	0x0805bb28
 8016330:	20005e54 	.word	0x20005e54
 8016334:	20000388 	.word	0x20000388
 8016338:	20005e43 	.word	0x20005e43
 801633c:	0805bb2c 	.word	0x0805bb2c
 8016340:	0805bb4f 	.word	0x0805bb4f
 8016344:	0805bb3b 	.word	0x0805bb3b
 8016348:	0805bb4e 	.word	0x0805bb4e
 801634c:	20005e38 	.word	0x20005e38

08016350 <__swbuf_r>:
 8016350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016352:	460e      	mov	r6, r1
 8016354:	4614      	mov	r4, r2
 8016356:	4605      	mov	r5, r0
 8016358:	b118      	cbz	r0, 8016362 <__swbuf_r+0x12>
 801635a:	6983      	ldr	r3, [r0, #24]
 801635c:	b90b      	cbnz	r3, 8016362 <__swbuf_r+0x12>
 801635e:	f001 f88b 	bl	8017478 <__sinit>
 8016362:	4b21      	ldr	r3, [pc, #132]	; (80163e8 <__swbuf_r+0x98>)
 8016364:	429c      	cmp	r4, r3
 8016366:	d12b      	bne.n	80163c0 <__swbuf_r+0x70>
 8016368:	686c      	ldr	r4, [r5, #4]
 801636a:	69a3      	ldr	r3, [r4, #24]
 801636c:	60a3      	str	r3, [r4, #8]
 801636e:	89a3      	ldrh	r3, [r4, #12]
 8016370:	071a      	lsls	r2, r3, #28
 8016372:	d52f      	bpl.n	80163d4 <__swbuf_r+0x84>
 8016374:	6923      	ldr	r3, [r4, #16]
 8016376:	b36b      	cbz	r3, 80163d4 <__swbuf_r+0x84>
 8016378:	6923      	ldr	r3, [r4, #16]
 801637a:	6820      	ldr	r0, [r4, #0]
 801637c:	1ac0      	subs	r0, r0, r3
 801637e:	6963      	ldr	r3, [r4, #20]
 8016380:	b2f6      	uxtb	r6, r6
 8016382:	4283      	cmp	r3, r0
 8016384:	4637      	mov	r7, r6
 8016386:	dc04      	bgt.n	8016392 <__swbuf_r+0x42>
 8016388:	4621      	mov	r1, r4
 801638a:	4628      	mov	r0, r5
 801638c:	f000 ffe0 	bl	8017350 <_fflush_r>
 8016390:	bb30      	cbnz	r0, 80163e0 <__swbuf_r+0x90>
 8016392:	68a3      	ldr	r3, [r4, #8]
 8016394:	3b01      	subs	r3, #1
 8016396:	60a3      	str	r3, [r4, #8]
 8016398:	6823      	ldr	r3, [r4, #0]
 801639a:	1c5a      	adds	r2, r3, #1
 801639c:	6022      	str	r2, [r4, #0]
 801639e:	701e      	strb	r6, [r3, #0]
 80163a0:	6963      	ldr	r3, [r4, #20]
 80163a2:	3001      	adds	r0, #1
 80163a4:	4283      	cmp	r3, r0
 80163a6:	d004      	beq.n	80163b2 <__swbuf_r+0x62>
 80163a8:	89a3      	ldrh	r3, [r4, #12]
 80163aa:	07db      	lsls	r3, r3, #31
 80163ac:	d506      	bpl.n	80163bc <__swbuf_r+0x6c>
 80163ae:	2e0a      	cmp	r6, #10
 80163b0:	d104      	bne.n	80163bc <__swbuf_r+0x6c>
 80163b2:	4621      	mov	r1, r4
 80163b4:	4628      	mov	r0, r5
 80163b6:	f000 ffcb 	bl	8017350 <_fflush_r>
 80163ba:	b988      	cbnz	r0, 80163e0 <__swbuf_r+0x90>
 80163bc:	4638      	mov	r0, r7
 80163be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163c0:	4b0a      	ldr	r3, [pc, #40]	; (80163ec <__swbuf_r+0x9c>)
 80163c2:	429c      	cmp	r4, r3
 80163c4:	d101      	bne.n	80163ca <__swbuf_r+0x7a>
 80163c6:	68ac      	ldr	r4, [r5, #8]
 80163c8:	e7cf      	b.n	801636a <__swbuf_r+0x1a>
 80163ca:	4b09      	ldr	r3, [pc, #36]	; (80163f0 <__swbuf_r+0xa0>)
 80163cc:	429c      	cmp	r4, r3
 80163ce:	bf08      	it	eq
 80163d0:	68ec      	ldreq	r4, [r5, #12]
 80163d2:	e7ca      	b.n	801636a <__swbuf_r+0x1a>
 80163d4:	4621      	mov	r1, r4
 80163d6:	4628      	mov	r0, r5
 80163d8:	f000 f81e 	bl	8016418 <__swsetup_r>
 80163dc:	2800      	cmp	r0, #0
 80163de:	d0cb      	beq.n	8016378 <__swbuf_r+0x28>
 80163e0:	f04f 37ff 	mov.w	r7, #4294967295
 80163e4:	e7ea      	b.n	80163bc <__swbuf_r+0x6c>
 80163e6:	bf00      	nop
 80163e8:	0805bcfc 	.word	0x0805bcfc
 80163ec:	0805bd1c 	.word	0x0805bd1c
 80163f0:	0805bcdc 	.word	0x0805bcdc

080163f4 <_write_r>:
 80163f4:	b538      	push	{r3, r4, r5, lr}
 80163f6:	4d07      	ldr	r5, [pc, #28]	; (8016414 <_write_r+0x20>)
 80163f8:	4604      	mov	r4, r0
 80163fa:	4608      	mov	r0, r1
 80163fc:	4611      	mov	r1, r2
 80163fe:	2200      	movs	r2, #0
 8016400:	602a      	str	r2, [r5, #0]
 8016402:	461a      	mov	r2, r3
 8016404:	f7ee fa87 	bl	8004916 <_write>
 8016408:	1c43      	adds	r3, r0, #1
 801640a:	d102      	bne.n	8016412 <_write_r+0x1e>
 801640c:	682b      	ldr	r3, [r5, #0]
 801640e:	b103      	cbz	r3, 8016412 <_write_r+0x1e>
 8016410:	6023      	str	r3, [r4, #0]
 8016412:	bd38      	pop	{r3, r4, r5, pc}
 8016414:	20005e64 	.word	0x20005e64

08016418 <__swsetup_r>:
 8016418:	4b32      	ldr	r3, [pc, #200]	; (80164e4 <__swsetup_r+0xcc>)
 801641a:	b570      	push	{r4, r5, r6, lr}
 801641c:	681d      	ldr	r5, [r3, #0]
 801641e:	4606      	mov	r6, r0
 8016420:	460c      	mov	r4, r1
 8016422:	b125      	cbz	r5, 801642e <__swsetup_r+0x16>
 8016424:	69ab      	ldr	r3, [r5, #24]
 8016426:	b913      	cbnz	r3, 801642e <__swsetup_r+0x16>
 8016428:	4628      	mov	r0, r5
 801642a:	f001 f825 	bl	8017478 <__sinit>
 801642e:	4b2e      	ldr	r3, [pc, #184]	; (80164e8 <__swsetup_r+0xd0>)
 8016430:	429c      	cmp	r4, r3
 8016432:	d10f      	bne.n	8016454 <__swsetup_r+0x3c>
 8016434:	686c      	ldr	r4, [r5, #4]
 8016436:	89a3      	ldrh	r3, [r4, #12]
 8016438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801643c:	0719      	lsls	r1, r3, #28
 801643e:	d42c      	bmi.n	801649a <__swsetup_r+0x82>
 8016440:	06dd      	lsls	r5, r3, #27
 8016442:	d411      	bmi.n	8016468 <__swsetup_r+0x50>
 8016444:	2309      	movs	r3, #9
 8016446:	6033      	str	r3, [r6, #0]
 8016448:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801644c:	81a3      	strh	r3, [r4, #12]
 801644e:	f04f 30ff 	mov.w	r0, #4294967295
 8016452:	e03e      	b.n	80164d2 <__swsetup_r+0xba>
 8016454:	4b25      	ldr	r3, [pc, #148]	; (80164ec <__swsetup_r+0xd4>)
 8016456:	429c      	cmp	r4, r3
 8016458:	d101      	bne.n	801645e <__swsetup_r+0x46>
 801645a:	68ac      	ldr	r4, [r5, #8]
 801645c:	e7eb      	b.n	8016436 <__swsetup_r+0x1e>
 801645e:	4b24      	ldr	r3, [pc, #144]	; (80164f0 <__swsetup_r+0xd8>)
 8016460:	429c      	cmp	r4, r3
 8016462:	bf08      	it	eq
 8016464:	68ec      	ldreq	r4, [r5, #12]
 8016466:	e7e6      	b.n	8016436 <__swsetup_r+0x1e>
 8016468:	0758      	lsls	r0, r3, #29
 801646a:	d512      	bpl.n	8016492 <__swsetup_r+0x7a>
 801646c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801646e:	b141      	cbz	r1, 8016482 <__swsetup_r+0x6a>
 8016470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016474:	4299      	cmp	r1, r3
 8016476:	d002      	beq.n	801647e <__swsetup_r+0x66>
 8016478:	4630      	mov	r0, r6
 801647a:	f7fd fe83 	bl	8014184 <_free_r>
 801647e:	2300      	movs	r3, #0
 8016480:	6363      	str	r3, [r4, #52]	; 0x34
 8016482:	89a3      	ldrh	r3, [r4, #12]
 8016484:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016488:	81a3      	strh	r3, [r4, #12]
 801648a:	2300      	movs	r3, #0
 801648c:	6063      	str	r3, [r4, #4]
 801648e:	6923      	ldr	r3, [r4, #16]
 8016490:	6023      	str	r3, [r4, #0]
 8016492:	89a3      	ldrh	r3, [r4, #12]
 8016494:	f043 0308 	orr.w	r3, r3, #8
 8016498:	81a3      	strh	r3, [r4, #12]
 801649a:	6923      	ldr	r3, [r4, #16]
 801649c:	b94b      	cbnz	r3, 80164b2 <__swsetup_r+0x9a>
 801649e:	89a3      	ldrh	r3, [r4, #12]
 80164a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80164a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164a8:	d003      	beq.n	80164b2 <__swsetup_r+0x9a>
 80164aa:	4621      	mov	r1, r4
 80164ac:	4630      	mov	r0, r6
 80164ae:	f001 fc79 	bl	8017da4 <__smakebuf_r>
 80164b2:	89a0      	ldrh	r0, [r4, #12]
 80164b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80164b8:	f010 0301 	ands.w	r3, r0, #1
 80164bc:	d00a      	beq.n	80164d4 <__swsetup_r+0xbc>
 80164be:	2300      	movs	r3, #0
 80164c0:	60a3      	str	r3, [r4, #8]
 80164c2:	6963      	ldr	r3, [r4, #20]
 80164c4:	425b      	negs	r3, r3
 80164c6:	61a3      	str	r3, [r4, #24]
 80164c8:	6923      	ldr	r3, [r4, #16]
 80164ca:	b943      	cbnz	r3, 80164de <__swsetup_r+0xc6>
 80164cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80164d0:	d1ba      	bne.n	8016448 <__swsetup_r+0x30>
 80164d2:	bd70      	pop	{r4, r5, r6, pc}
 80164d4:	0781      	lsls	r1, r0, #30
 80164d6:	bf58      	it	pl
 80164d8:	6963      	ldrpl	r3, [r4, #20]
 80164da:	60a3      	str	r3, [r4, #8]
 80164dc:	e7f4      	b.n	80164c8 <__swsetup_r+0xb0>
 80164de:	2000      	movs	r0, #0
 80164e0:	e7f7      	b.n	80164d2 <__swsetup_r+0xba>
 80164e2:	bf00      	nop
 80164e4:	20000324 	.word	0x20000324
 80164e8:	0805bcfc 	.word	0x0805bcfc
 80164ec:	0805bd1c 	.word	0x0805bd1c
 80164f0:	0805bcdc 	.word	0x0805bcdc

080164f4 <abort>:
 80164f4:	b508      	push	{r3, lr}
 80164f6:	2006      	movs	r0, #6
 80164f8:	f002 fece 	bl	8019298 <raise>
 80164fc:	2001      	movs	r0, #1
 80164fe:	f7ee f9e3 	bl	80048c8 <_exit>
	...

08016504 <_close_r>:
 8016504:	b538      	push	{r3, r4, r5, lr}
 8016506:	4d06      	ldr	r5, [pc, #24]	; (8016520 <_close_r+0x1c>)
 8016508:	2300      	movs	r3, #0
 801650a:	4604      	mov	r4, r0
 801650c:	4608      	mov	r0, r1
 801650e:	602b      	str	r3, [r5, #0]
 8016510:	f7ee fa1d 	bl	800494e <_close>
 8016514:	1c43      	adds	r3, r0, #1
 8016516:	d102      	bne.n	801651e <_close_r+0x1a>
 8016518:	682b      	ldr	r3, [r5, #0]
 801651a:	b103      	cbz	r3, 801651e <_close_r+0x1a>
 801651c:	6023      	str	r3, [r4, #0]
 801651e:	bd38      	pop	{r3, r4, r5, pc}
 8016520:	20005e64 	.word	0x20005e64

08016524 <div>:
 8016524:	2900      	cmp	r1, #0
 8016526:	b510      	push	{r4, lr}
 8016528:	fb91 f4f2 	sdiv	r4, r1, r2
 801652c:	fb02 1314 	mls	r3, r2, r4, r1
 8016530:	db06      	blt.n	8016540 <div+0x1c>
 8016532:	2b00      	cmp	r3, #0
 8016534:	da01      	bge.n	801653a <div+0x16>
 8016536:	3401      	adds	r4, #1
 8016538:	1a9b      	subs	r3, r3, r2
 801653a:	e9c0 4300 	strd	r4, r3, [r0]
 801653e:	bd10      	pop	{r4, pc}
 8016540:	2b00      	cmp	r3, #0
 8016542:	bfc4      	itt	gt
 8016544:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8016548:	189b      	addgt	r3, r3, r2
 801654a:	e7f6      	b.n	801653a <div+0x16>

0801654c <quorem>:
 801654c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016550:	6903      	ldr	r3, [r0, #16]
 8016552:	690c      	ldr	r4, [r1, #16]
 8016554:	42a3      	cmp	r3, r4
 8016556:	4607      	mov	r7, r0
 8016558:	f2c0 8081 	blt.w	801665e <quorem+0x112>
 801655c:	3c01      	subs	r4, #1
 801655e:	f101 0814 	add.w	r8, r1, #20
 8016562:	f100 0514 	add.w	r5, r0, #20
 8016566:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801656a:	9301      	str	r3, [sp, #4]
 801656c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016570:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016574:	3301      	adds	r3, #1
 8016576:	429a      	cmp	r2, r3
 8016578:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801657c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016580:	fbb2 f6f3 	udiv	r6, r2, r3
 8016584:	d331      	bcc.n	80165ea <quorem+0x9e>
 8016586:	f04f 0e00 	mov.w	lr, #0
 801658a:	4640      	mov	r0, r8
 801658c:	46ac      	mov	ip, r5
 801658e:	46f2      	mov	sl, lr
 8016590:	f850 2b04 	ldr.w	r2, [r0], #4
 8016594:	b293      	uxth	r3, r2
 8016596:	fb06 e303 	mla	r3, r6, r3, lr
 801659a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801659e:	b29b      	uxth	r3, r3
 80165a0:	ebaa 0303 	sub.w	r3, sl, r3
 80165a4:	f8dc a000 	ldr.w	sl, [ip]
 80165a8:	0c12      	lsrs	r2, r2, #16
 80165aa:	fa13 f38a 	uxtah	r3, r3, sl
 80165ae:	fb06 e202 	mla	r2, r6, r2, lr
 80165b2:	9300      	str	r3, [sp, #0]
 80165b4:	9b00      	ldr	r3, [sp, #0]
 80165b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80165ba:	b292      	uxth	r2, r2
 80165bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80165c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80165c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80165c8:	4581      	cmp	r9, r0
 80165ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80165ce:	f84c 3b04 	str.w	r3, [ip], #4
 80165d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80165d6:	d2db      	bcs.n	8016590 <quorem+0x44>
 80165d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80165dc:	b92b      	cbnz	r3, 80165ea <quorem+0x9e>
 80165de:	9b01      	ldr	r3, [sp, #4]
 80165e0:	3b04      	subs	r3, #4
 80165e2:	429d      	cmp	r5, r3
 80165e4:	461a      	mov	r2, r3
 80165e6:	d32e      	bcc.n	8016646 <quorem+0xfa>
 80165e8:	613c      	str	r4, [r7, #16]
 80165ea:	4638      	mov	r0, r7
 80165ec:	f001 ff1e 	bl	801842c <__mcmp>
 80165f0:	2800      	cmp	r0, #0
 80165f2:	db24      	blt.n	801663e <quorem+0xf2>
 80165f4:	3601      	adds	r6, #1
 80165f6:	4628      	mov	r0, r5
 80165f8:	f04f 0c00 	mov.w	ip, #0
 80165fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8016600:	f8d0 e000 	ldr.w	lr, [r0]
 8016604:	b293      	uxth	r3, r2
 8016606:	ebac 0303 	sub.w	r3, ip, r3
 801660a:	0c12      	lsrs	r2, r2, #16
 801660c:	fa13 f38e 	uxtah	r3, r3, lr
 8016610:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016614:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016618:	b29b      	uxth	r3, r3
 801661a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801661e:	45c1      	cmp	r9, r8
 8016620:	f840 3b04 	str.w	r3, [r0], #4
 8016624:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016628:	d2e8      	bcs.n	80165fc <quorem+0xb0>
 801662a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801662e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016632:	b922      	cbnz	r2, 801663e <quorem+0xf2>
 8016634:	3b04      	subs	r3, #4
 8016636:	429d      	cmp	r5, r3
 8016638:	461a      	mov	r2, r3
 801663a:	d30a      	bcc.n	8016652 <quorem+0x106>
 801663c:	613c      	str	r4, [r7, #16]
 801663e:	4630      	mov	r0, r6
 8016640:	b003      	add	sp, #12
 8016642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016646:	6812      	ldr	r2, [r2, #0]
 8016648:	3b04      	subs	r3, #4
 801664a:	2a00      	cmp	r2, #0
 801664c:	d1cc      	bne.n	80165e8 <quorem+0x9c>
 801664e:	3c01      	subs	r4, #1
 8016650:	e7c7      	b.n	80165e2 <quorem+0x96>
 8016652:	6812      	ldr	r2, [r2, #0]
 8016654:	3b04      	subs	r3, #4
 8016656:	2a00      	cmp	r2, #0
 8016658:	d1f0      	bne.n	801663c <quorem+0xf0>
 801665a:	3c01      	subs	r4, #1
 801665c:	e7eb      	b.n	8016636 <quorem+0xea>
 801665e:	2000      	movs	r0, #0
 8016660:	e7ee      	b.n	8016640 <quorem+0xf4>
 8016662:	0000      	movs	r0, r0
 8016664:	0000      	movs	r0, r0
	...

08016668 <_dtoa_r>:
 8016668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801666c:	ed2d 8b04 	vpush	{d8-d9}
 8016670:	ec57 6b10 	vmov	r6, r7, d0
 8016674:	b093      	sub	sp, #76	; 0x4c
 8016676:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016678:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801667c:	9106      	str	r1, [sp, #24]
 801667e:	ee10 aa10 	vmov	sl, s0
 8016682:	4604      	mov	r4, r0
 8016684:	9209      	str	r2, [sp, #36]	; 0x24
 8016686:	930c      	str	r3, [sp, #48]	; 0x30
 8016688:	46bb      	mov	fp, r7
 801668a:	b975      	cbnz	r5, 80166aa <_dtoa_r+0x42>
 801668c:	2010      	movs	r0, #16
 801668e:	f7fd fae1 	bl	8013c54 <malloc>
 8016692:	4602      	mov	r2, r0
 8016694:	6260      	str	r0, [r4, #36]	; 0x24
 8016696:	b920      	cbnz	r0, 80166a2 <_dtoa_r+0x3a>
 8016698:	4ba7      	ldr	r3, [pc, #668]	; (8016938 <_dtoa_r+0x2d0>)
 801669a:	21ea      	movs	r1, #234	; 0xea
 801669c:	48a7      	ldr	r0, [pc, #668]	; (801693c <_dtoa_r+0x2d4>)
 801669e:	f7fd fa77 	bl	8013b90 <__assert_func>
 80166a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80166a6:	6005      	str	r5, [r0, #0]
 80166a8:	60c5      	str	r5, [r0, #12]
 80166aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166ac:	6819      	ldr	r1, [r3, #0]
 80166ae:	b151      	cbz	r1, 80166c6 <_dtoa_r+0x5e>
 80166b0:	685a      	ldr	r2, [r3, #4]
 80166b2:	604a      	str	r2, [r1, #4]
 80166b4:	2301      	movs	r3, #1
 80166b6:	4093      	lsls	r3, r2
 80166b8:	608b      	str	r3, [r1, #8]
 80166ba:	4620      	mov	r0, r4
 80166bc:	f001 fc2a 	bl	8017f14 <_Bfree>
 80166c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166c2:	2200      	movs	r2, #0
 80166c4:	601a      	str	r2, [r3, #0]
 80166c6:	1e3b      	subs	r3, r7, #0
 80166c8:	bfaa      	itet	ge
 80166ca:	2300      	movge	r3, #0
 80166cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80166d0:	f8c8 3000 	strge.w	r3, [r8]
 80166d4:	4b9a      	ldr	r3, [pc, #616]	; (8016940 <_dtoa_r+0x2d8>)
 80166d6:	bfbc      	itt	lt
 80166d8:	2201      	movlt	r2, #1
 80166da:	f8c8 2000 	strlt.w	r2, [r8]
 80166de:	ea33 030b 	bics.w	r3, r3, fp
 80166e2:	d11b      	bne.n	801671c <_dtoa_r+0xb4>
 80166e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80166ea:	6013      	str	r3, [r2, #0]
 80166ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80166f0:	4333      	orrs	r3, r6
 80166f2:	f000 8592 	beq.w	801721a <_dtoa_r+0xbb2>
 80166f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80166f8:	b963      	cbnz	r3, 8016714 <_dtoa_r+0xac>
 80166fa:	4b92      	ldr	r3, [pc, #584]	; (8016944 <_dtoa_r+0x2dc>)
 80166fc:	e022      	b.n	8016744 <_dtoa_r+0xdc>
 80166fe:	4b92      	ldr	r3, [pc, #584]	; (8016948 <_dtoa_r+0x2e0>)
 8016700:	9301      	str	r3, [sp, #4]
 8016702:	3308      	adds	r3, #8
 8016704:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016706:	6013      	str	r3, [r2, #0]
 8016708:	9801      	ldr	r0, [sp, #4]
 801670a:	b013      	add	sp, #76	; 0x4c
 801670c:	ecbd 8b04 	vpop	{d8-d9}
 8016710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016714:	4b8b      	ldr	r3, [pc, #556]	; (8016944 <_dtoa_r+0x2dc>)
 8016716:	9301      	str	r3, [sp, #4]
 8016718:	3303      	adds	r3, #3
 801671a:	e7f3      	b.n	8016704 <_dtoa_r+0x9c>
 801671c:	2200      	movs	r2, #0
 801671e:	2300      	movs	r3, #0
 8016720:	4650      	mov	r0, sl
 8016722:	4659      	mov	r1, fp
 8016724:	f7ea f9f0 	bl	8000b08 <__aeabi_dcmpeq>
 8016728:	ec4b ab19 	vmov	d9, sl, fp
 801672c:	4680      	mov	r8, r0
 801672e:	b158      	cbz	r0, 8016748 <_dtoa_r+0xe0>
 8016730:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016732:	2301      	movs	r3, #1
 8016734:	6013      	str	r3, [r2, #0]
 8016736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016738:	2b00      	cmp	r3, #0
 801673a:	f000 856b 	beq.w	8017214 <_dtoa_r+0xbac>
 801673e:	4883      	ldr	r0, [pc, #524]	; (801694c <_dtoa_r+0x2e4>)
 8016740:	6018      	str	r0, [r3, #0]
 8016742:	1e43      	subs	r3, r0, #1
 8016744:	9301      	str	r3, [sp, #4]
 8016746:	e7df      	b.n	8016708 <_dtoa_r+0xa0>
 8016748:	ec4b ab10 	vmov	d0, sl, fp
 801674c:	aa10      	add	r2, sp, #64	; 0x40
 801674e:	a911      	add	r1, sp, #68	; 0x44
 8016750:	4620      	mov	r0, r4
 8016752:	f001 ff8d 	bl	8018670 <__d2b>
 8016756:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801675a:	ee08 0a10 	vmov	s16, r0
 801675e:	2d00      	cmp	r5, #0
 8016760:	f000 8084 	beq.w	801686c <_dtoa_r+0x204>
 8016764:	ee19 3a90 	vmov	r3, s19
 8016768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801676c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016770:	4656      	mov	r6, sl
 8016772:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016776:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801677a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801677e:	4b74      	ldr	r3, [pc, #464]	; (8016950 <_dtoa_r+0x2e8>)
 8016780:	2200      	movs	r2, #0
 8016782:	4630      	mov	r0, r6
 8016784:	4639      	mov	r1, r7
 8016786:	f7e9 fd9f 	bl	80002c8 <__aeabi_dsub>
 801678a:	a365      	add	r3, pc, #404	; (adr r3, 8016920 <_dtoa_r+0x2b8>)
 801678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016790:	f7e9 ff52 	bl	8000638 <__aeabi_dmul>
 8016794:	a364      	add	r3, pc, #400	; (adr r3, 8016928 <_dtoa_r+0x2c0>)
 8016796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679a:	f7e9 fd97 	bl	80002cc <__adddf3>
 801679e:	4606      	mov	r6, r0
 80167a0:	4628      	mov	r0, r5
 80167a2:	460f      	mov	r7, r1
 80167a4:	f7e9 fede 	bl	8000564 <__aeabi_i2d>
 80167a8:	a361      	add	r3, pc, #388	; (adr r3, 8016930 <_dtoa_r+0x2c8>)
 80167aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ae:	f7e9 ff43 	bl	8000638 <__aeabi_dmul>
 80167b2:	4602      	mov	r2, r0
 80167b4:	460b      	mov	r3, r1
 80167b6:	4630      	mov	r0, r6
 80167b8:	4639      	mov	r1, r7
 80167ba:	f7e9 fd87 	bl	80002cc <__adddf3>
 80167be:	4606      	mov	r6, r0
 80167c0:	460f      	mov	r7, r1
 80167c2:	f7ea f9e9 	bl	8000b98 <__aeabi_d2iz>
 80167c6:	2200      	movs	r2, #0
 80167c8:	9000      	str	r0, [sp, #0]
 80167ca:	2300      	movs	r3, #0
 80167cc:	4630      	mov	r0, r6
 80167ce:	4639      	mov	r1, r7
 80167d0:	f7ea f9a4 	bl	8000b1c <__aeabi_dcmplt>
 80167d4:	b150      	cbz	r0, 80167ec <_dtoa_r+0x184>
 80167d6:	9800      	ldr	r0, [sp, #0]
 80167d8:	f7e9 fec4 	bl	8000564 <__aeabi_i2d>
 80167dc:	4632      	mov	r2, r6
 80167de:	463b      	mov	r3, r7
 80167e0:	f7ea f992 	bl	8000b08 <__aeabi_dcmpeq>
 80167e4:	b910      	cbnz	r0, 80167ec <_dtoa_r+0x184>
 80167e6:	9b00      	ldr	r3, [sp, #0]
 80167e8:	3b01      	subs	r3, #1
 80167ea:	9300      	str	r3, [sp, #0]
 80167ec:	9b00      	ldr	r3, [sp, #0]
 80167ee:	2b16      	cmp	r3, #22
 80167f0:	d85a      	bhi.n	80168a8 <_dtoa_r+0x240>
 80167f2:	9a00      	ldr	r2, [sp, #0]
 80167f4:	4b57      	ldr	r3, [pc, #348]	; (8016954 <_dtoa_r+0x2ec>)
 80167f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80167fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167fe:	ec51 0b19 	vmov	r0, r1, d9
 8016802:	f7ea f98b 	bl	8000b1c <__aeabi_dcmplt>
 8016806:	2800      	cmp	r0, #0
 8016808:	d050      	beq.n	80168ac <_dtoa_r+0x244>
 801680a:	9b00      	ldr	r3, [sp, #0]
 801680c:	3b01      	subs	r3, #1
 801680e:	9300      	str	r3, [sp, #0]
 8016810:	2300      	movs	r3, #0
 8016812:	930b      	str	r3, [sp, #44]	; 0x2c
 8016814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016816:	1b5d      	subs	r5, r3, r5
 8016818:	1e6b      	subs	r3, r5, #1
 801681a:	9305      	str	r3, [sp, #20]
 801681c:	bf45      	ittet	mi
 801681e:	f1c5 0301 	rsbmi	r3, r5, #1
 8016822:	9304      	strmi	r3, [sp, #16]
 8016824:	2300      	movpl	r3, #0
 8016826:	2300      	movmi	r3, #0
 8016828:	bf4c      	ite	mi
 801682a:	9305      	strmi	r3, [sp, #20]
 801682c:	9304      	strpl	r3, [sp, #16]
 801682e:	9b00      	ldr	r3, [sp, #0]
 8016830:	2b00      	cmp	r3, #0
 8016832:	db3d      	blt.n	80168b0 <_dtoa_r+0x248>
 8016834:	9b05      	ldr	r3, [sp, #20]
 8016836:	9a00      	ldr	r2, [sp, #0]
 8016838:	920a      	str	r2, [sp, #40]	; 0x28
 801683a:	4413      	add	r3, r2
 801683c:	9305      	str	r3, [sp, #20]
 801683e:	2300      	movs	r3, #0
 8016840:	9307      	str	r3, [sp, #28]
 8016842:	9b06      	ldr	r3, [sp, #24]
 8016844:	2b09      	cmp	r3, #9
 8016846:	f200 8089 	bhi.w	801695c <_dtoa_r+0x2f4>
 801684a:	2b05      	cmp	r3, #5
 801684c:	bfc4      	itt	gt
 801684e:	3b04      	subgt	r3, #4
 8016850:	9306      	strgt	r3, [sp, #24]
 8016852:	9b06      	ldr	r3, [sp, #24]
 8016854:	f1a3 0302 	sub.w	r3, r3, #2
 8016858:	bfcc      	ite	gt
 801685a:	2500      	movgt	r5, #0
 801685c:	2501      	movle	r5, #1
 801685e:	2b03      	cmp	r3, #3
 8016860:	f200 8087 	bhi.w	8016972 <_dtoa_r+0x30a>
 8016864:	e8df f003 	tbb	[pc, r3]
 8016868:	59383a2d 	.word	0x59383a2d
 801686c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016870:	441d      	add	r5, r3
 8016872:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016876:	2b20      	cmp	r3, #32
 8016878:	bfc1      	itttt	gt
 801687a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801687e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016882:	fa0b f303 	lslgt.w	r3, fp, r3
 8016886:	fa26 f000 	lsrgt.w	r0, r6, r0
 801688a:	bfda      	itte	le
 801688c:	f1c3 0320 	rsble	r3, r3, #32
 8016890:	fa06 f003 	lslle.w	r0, r6, r3
 8016894:	4318      	orrgt	r0, r3
 8016896:	f7e9 fe55 	bl	8000544 <__aeabi_ui2d>
 801689a:	2301      	movs	r3, #1
 801689c:	4606      	mov	r6, r0
 801689e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80168a2:	3d01      	subs	r5, #1
 80168a4:	930e      	str	r3, [sp, #56]	; 0x38
 80168a6:	e76a      	b.n	801677e <_dtoa_r+0x116>
 80168a8:	2301      	movs	r3, #1
 80168aa:	e7b2      	b.n	8016812 <_dtoa_r+0x1aa>
 80168ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80168ae:	e7b1      	b.n	8016814 <_dtoa_r+0x1ac>
 80168b0:	9b04      	ldr	r3, [sp, #16]
 80168b2:	9a00      	ldr	r2, [sp, #0]
 80168b4:	1a9b      	subs	r3, r3, r2
 80168b6:	9304      	str	r3, [sp, #16]
 80168b8:	4253      	negs	r3, r2
 80168ba:	9307      	str	r3, [sp, #28]
 80168bc:	2300      	movs	r3, #0
 80168be:	930a      	str	r3, [sp, #40]	; 0x28
 80168c0:	e7bf      	b.n	8016842 <_dtoa_r+0x1da>
 80168c2:	2300      	movs	r3, #0
 80168c4:	9308      	str	r3, [sp, #32]
 80168c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	dc55      	bgt.n	8016978 <_dtoa_r+0x310>
 80168cc:	2301      	movs	r3, #1
 80168ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80168d2:	461a      	mov	r2, r3
 80168d4:	9209      	str	r2, [sp, #36]	; 0x24
 80168d6:	e00c      	b.n	80168f2 <_dtoa_r+0x28a>
 80168d8:	2301      	movs	r3, #1
 80168da:	e7f3      	b.n	80168c4 <_dtoa_r+0x25c>
 80168dc:	2300      	movs	r3, #0
 80168de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80168e0:	9308      	str	r3, [sp, #32]
 80168e2:	9b00      	ldr	r3, [sp, #0]
 80168e4:	4413      	add	r3, r2
 80168e6:	9302      	str	r3, [sp, #8]
 80168e8:	3301      	adds	r3, #1
 80168ea:	2b01      	cmp	r3, #1
 80168ec:	9303      	str	r3, [sp, #12]
 80168ee:	bfb8      	it	lt
 80168f0:	2301      	movlt	r3, #1
 80168f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80168f4:	2200      	movs	r2, #0
 80168f6:	6042      	str	r2, [r0, #4]
 80168f8:	2204      	movs	r2, #4
 80168fa:	f102 0614 	add.w	r6, r2, #20
 80168fe:	429e      	cmp	r6, r3
 8016900:	6841      	ldr	r1, [r0, #4]
 8016902:	d93d      	bls.n	8016980 <_dtoa_r+0x318>
 8016904:	4620      	mov	r0, r4
 8016906:	f001 fac5 	bl	8017e94 <_Balloc>
 801690a:	9001      	str	r0, [sp, #4]
 801690c:	2800      	cmp	r0, #0
 801690e:	d13b      	bne.n	8016988 <_dtoa_r+0x320>
 8016910:	4b11      	ldr	r3, [pc, #68]	; (8016958 <_dtoa_r+0x2f0>)
 8016912:	4602      	mov	r2, r0
 8016914:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016918:	e6c0      	b.n	801669c <_dtoa_r+0x34>
 801691a:	2301      	movs	r3, #1
 801691c:	e7df      	b.n	80168de <_dtoa_r+0x276>
 801691e:	bf00      	nop
 8016920:	636f4361 	.word	0x636f4361
 8016924:	3fd287a7 	.word	0x3fd287a7
 8016928:	8b60c8b3 	.word	0x8b60c8b3
 801692c:	3fc68a28 	.word	0x3fc68a28
 8016930:	509f79fb 	.word	0x509f79fb
 8016934:	3fd34413 	.word	0x3fd34413
 8016938:	0805b8c8 	.word	0x0805b8c8
 801693c:	0805bc6f 	.word	0x0805bc6f
 8016940:	7ff00000 	.word	0x7ff00000
 8016944:	0805bc6b 	.word	0x0805bc6b
 8016948:	0805bc62 	.word	0x0805bc62
 801694c:	0805bf79 	.word	0x0805bf79
 8016950:	3ff80000 	.word	0x3ff80000
 8016954:	0805bea0 	.word	0x0805bea0
 8016958:	0805bcca 	.word	0x0805bcca
 801695c:	2501      	movs	r5, #1
 801695e:	2300      	movs	r3, #0
 8016960:	9306      	str	r3, [sp, #24]
 8016962:	9508      	str	r5, [sp, #32]
 8016964:	f04f 33ff 	mov.w	r3, #4294967295
 8016968:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801696c:	2200      	movs	r2, #0
 801696e:	2312      	movs	r3, #18
 8016970:	e7b0      	b.n	80168d4 <_dtoa_r+0x26c>
 8016972:	2301      	movs	r3, #1
 8016974:	9308      	str	r3, [sp, #32]
 8016976:	e7f5      	b.n	8016964 <_dtoa_r+0x2fc>
 8016978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801697a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801697e:	e7b8      	b.n	80168f2 <_dtoa_r+0x28a>
 8016980:	3101      	adds	r1, #1
 8016982:	6041      	str	r1, [r0, #4]
 8016984:	0052      	lsls	r2, r2, #1
 8016986:	e7b8      	b.n	80168fa <_dtoa_r+0x292>
 8016988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801698a:	9a01      	ldr	r2, [sp, #4]
 801698c:	601a      	str	r2, [r3, #0]
 801698e:	9b03      	ldr	r3, [sp, #12]
 8016990:	2b0e      	cmp	r3, #14
 8016992:	f200 809d 	bhi.w	8016ad0 <_dtoa_r+0x468>
 8016996:	2d00      	cmp	r5, #0
 8016998:	f000 809a 	beq.w	8016ad0 <_dtoa_r+0x468>
 801699c:	9b00      	ldr	r3, [sp, #0]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	dd32      	ble.n	8016a08 <_dtoa_r+0x3a0>
 80169a2:	4ab7      	ldr	r2, [pc, #732]	; (8016c80 <_dtoa_r+0x618>)
 80169a4:	f003 030f 	and.w	r3, r3, #15
 80169a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80169ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80169b0:	9b00      	ldr	r3, [sp, #0]
 80169b2:	05d8      	lsls	r0, r3, #23
 80169b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80169b8:	d516      	bpl.n	80169e8 <_dtoa_r+0x380>
 80169ba:	4bb2      	ldr	r3, [pc, #712]	; (8016c84 <_dtoa_r+0x61c>)
 80169bc:	ec51 0b19 	vmov	r0, r1, d9
 80169c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80169c4:	f7e9 ff62 	bl	800088c <__aeabi_ddiv>
 80169c8:	f007 070f 	and.w	r7, r7, #15
 80169cc:	4682      	mov	sl, r0
 80169ce:	468b      	mov	fp, r1
 80169d0:	2503      	movs	r5, #3
 80169d2:	4eac      	ldr	r6, [pc, #688]	; (8016c84 <_dtoa_r+0x61c>)
 80169d4:	b957      	cbnz	r7, 80169ec <_dtoa_r+0x384>
 80169d6:	4642      	mov	r2, r8
 80169d8:	464b      	mov	r3, r9
 80169da:	4650      	mov	r0, sl
 80169dc:	4659      	mov	r1, fp
 80169de:	f7e9 ff55 	bl	800088c <__aeabi_ddiv>
 80169e2:	4682      	mov	sl, r0
 80169e4:	468b      	mov	fp, r1
 80169e6:	e028      	b.n	8016a3a <_dtoa_r+0x3d2>
 80169e8:	2502      	movs	r5, #2
 80169ea:	e7f2      	b.n	80169d2 <_dtoa_r+0x36a>
 80169ec:	07f9      	lsls	r1, r7, #31
 80169ee:	d508      	bpl.n	8016a02 <_dtoa_r+0x39a>
 80169f0:	4640      	mov	r0, r8
 80169f2:	4649      	mov	r1, r9
 80169f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80169f8:	f7e9 fe1e 	bl	8000638 <__aeabi_dmul>
 80169fc:	3501      	adds	r5, #1
 80169fe:	4680      	mov	r8, r0
 8016a00:	4689      	mov	r9, r1
 8016a02:	107f      	asrs	r7, r7, #1
 8016a04:	3608      	adds	r6, #8
 8016a06:	e7e5      	b.n	80169d4 <_dtoa_r+0x36c>
 8016a08:	f000 809b 	beq.w	8016b42 <_dtoa_r+0x4da>
 8016a0c:	9b00      	ldr	r3, [sp, #0]
 8016a0e:	4f9d      	ldr	r7, [pc, #628]	; (8016c84 <_dtoa_r+0x61c>)
 8016a10:	425e      	negs	r6, r3
 8016a12:	4b9b      	ldr	r3, [pc, #620]	; (8016c80 <_dtoa_r+0x618>)
 8016a14:	f006 020f 	and.w	r2, r6, #15
 8016a18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a20:	ec51 0b19 	vmov	r0, r1, d9
 8016a24:	f7e9 fe08 	bl	8000638 <__aeabi_dmul>
 8016a28:	1136      	asrs	r6, r6, #4
 8016a2a:	4682      	mov	sl, r0
 8016a2c:	468b      	mov	fp, r1
 8016a2e:	2300      	movs	r3, #0
 8016a30:	2502      	movs	r5, #2
 8016a32:	2e00      	cmp	r6, #0
 8016a34:	d17a      	bne.n	8016b2c <_dtoa_r+0x4c4>
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d1d3      	bne.n	80169e2 <_dtoa_r+0x37a>
 8016a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	f000 8082 	beq.w	8016b46 <_dtoa_r+0x4de>
 8016a42:	4b91      	ldr	r3, [pc, #580]	; (8016c88 <_dtoa_r+0x620>)
 8016a44:	2200      	movs	r2, #0
 8016a46:	4650      	mov	r0, sl
 8016a48:	4659      	mov	r1, fp
 8016a4a:	f7ea f867 	bl	8000b1c <__aeabi_dcmplt>
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	d079      	beq.n	8016b46 <_dtoa_r+0x4de>
 8016a52:	9b03      	ldr	r3, [sp, #12]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d076      	beq.n	8016b46 <_dtoa_r+0x4de>
 8016a58:	9b02      	ldr	r3, [sp, #8]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	dd36      	ble.n	8016acc <_dtoa_r+0x464>
 8016a5e:	9b00      	ldr	r3, [sp, #0]
 8016a60:	4650      	mov	r0, sl
 8016a62:	4659      	mov	r1, fp
 8016a64:	1e5f      	subs	r7, r3, #1
 8016a66:	2200      	movs	r2, #0
 8016a68:	4b88      	ldr	r3, [pc, #544]	; (8016c8c <_dtoa_r+0x624>)
 8016a6a:	f7e9 fde5 	bl	8000638 <__aeabi_dmul>
 8016a6e:	9e02      	ldr	r6, [sp, #8]
 8016a70:	4682      	mov	sl, r0
 8016a72:	468b      	mov	fp, r1
 8016a74:	3501      	adds	r5, #1
 8016a76:	4628      	mov	r0, r5
 8016a78:	f7e9 fd74 	bl	8000564 <__aeabi_i2d>
 8016a7c:	4652      	mov	r2, sl
 8016a7e:	465b      	mov	r3, fp
 8016a80:	f7e9 fdda 	bl	8000638 <__aeabi_dmul>
 8016a84:	4b82      	ldr	r3, [pc, #520]	; (8016c90 <_dtoa_r+0x628>)
 8016a86:	2200      	movs	r2, #0
 8016a88:	f7e9 fc20 	bl	80002cc <__adddf3>
 8016a8c:	46d0      	mov	r8, sl
 8016a8e:	46d9      	mov	r9, fp
 8016a90:	4682      	mov	sl, r0
 8016a92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8016a96:	2e00      	cmp	r6, #0
 8016a98:	d158      	bne.n	8016b4c <_dtoa_r+0x4e4>
 8016a9a:	4b7e      	ldr	r3, [pc, #504]	; (8016c94 <_dtoa_r+0x62c>)
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	4640      	mov	r0, r8
 8016aa0:	4649      	mov	r1, r9
 8016aa2:	f7e9 fc11 	bl	80002c8 <__aeabi_dsub>
 8016aa6:	4652      	mov	r2, sl
 8016aa8:	465b      	mov	r3, fp
 8016aaa:	4680      	mov	r8, r0
 8016aac:	4689      	mov	r9, r1
 8016aae:	f7ea f853 	bl	8000b58 <__aeabi_dcmpgt>
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	f040 8295 	bne.w	8016fe2 <_dtoa_r+0x97a>
 8016ab8:	4652      	mov	r2, sl
 8016aba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016abe:	4640      	mov	r0, r8
 8016ac0:	4649      	mov	r1, r9
 8016ac2:	f7ea f82b 	bl	8000b1c <__aeabi_dcmplt>
 8016ac6:	2800      	cmp	r0, #0
 8016ac8:	f040 8289 	bne.w	8016fde <_dtoa_r+0x976>
 8016acc:	ec5b ab19 	vmov	sl, fp, d9
 8016ad0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	f2c0 8148 	blt.w	8016d68 <_dtoa_r+0x700>
 8016ad8:	9a00      	ldr	r2, [sp, #0]
 8016ada:	2a0e      	cmp	r2, #14
 8016adc:	f300 8144 	bgt.w	8016d68 <_dtoa_r+0x700>
 8016ae0:	4b67      	ldr	r3, [pc, #412]	; (8016c80 <_dtoa_r+0x618>)
 8016ae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016ae6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	f280 80d5 	bge.w	8016c9c <_dtoa_r+0x634>
 8016af2:	9b03      	ldr	r3, [sp, #12]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	f300 80d1 	bgt.w	8016c9c <_dtoa_r+0x634>
 8016afa:	f040 826f 	bne.w	8016fdc <_dtoa_r+0x974>
 8016afe:	4b65      	ldr	r3, [pc, #404]	; (8016c94 <_dtoa_r+0x62c>)
 8016b00:	2200      	movs	r2, #0
 8016b02:	4640      	mov	r0, r8
 8016b04:	4649      	mov	r1, r9
 8016b06:	f7e9 fd97 	bl	8000638 <__aeabi_dmul>
 8016b0a:	4652      	mov	r2, sl
 8016b0c:	465b      	mov	r3, fp
 8016b0e:	f7ea f819 	bl	8000b44 <__aeabi_dcmpge>
 8016b12:	9e03      	ldr	r6, [sp, #12]
 8016b14:	4637      	mov	r7, r6
 8016b16:	2800      	cmp	r0, #0
 8016b18:	f040 8245 	bne.w	8016fa6 <_dtoa_r+0x93e>
 8016b1c:	9d01      	ldr	r5, [sp, #4]
 8016b1e:	2331      	movs	r3, #49	; 0x31
 8016b20:	f805 3b01 	strb.w	r3, [r5], #1
 8016b24:	9b00      	ldr	r3, [sp, #0]
 8016b26:	3301      	adds	r3, #1
 8016b28:	9300      	str	r3, [sp, #0]
 8016b2a:	e240      	b.n	8016fae <_dtoa_r+0x946>
 8016b2c:	07f2      	lsls	r2, r6, #31
 8016b2e:	d505      	bpl.n	8016b3c <_dtoa_r+0x4d4>
 8016b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b34:	f7e9 fd80 	bl	8000638 <__aeabi_dmul>
 8016b38:	3501      	adds	r5, #1
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	1076      	asrs	r6, r6, #1
 8016b3e:	3708      	adds	r7, #8
 8016b40:	e777      	b.n	8016a32 <_dtoa_r+0x3ca>
 8016b42:	2502      	movs	r5, #2
 8016b44:	e779      	b.n	8016a3a <_dtoa_r+0x3d2>
 8016b46:	9f00      	ldr	r7, [sp, #0]
 8016b48:	9e03      	ldr	r6, [sp, #12]
 8016b4a:	e794      	b.n	8016a76 <_dtoa_r+0x40e>
 8016b4c:	9901      	ldr	r1, [sp, #4]
 8016b4e:	4b4c      	ldr	r3, [pc, #304]	; (8016c80 <_dtoa_r+0x618>)
 8016b50:	4431      	add	r1, r6
 8016b52:	910d      	str	r1, [sp, #52]	; 0x34
 8016b54:	9908      	ldr	r1, [sp, #32]
 8016b56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016b5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016b5e:	2900      	cmp	r1, #0
 8016b60:	d043      	beq.n	8016bea <_dtoa_r+0x582>
 8016b62:	494d      	ldr	r1, [pc, #308]	; (8016c98 <_dtoa_r+0x630>)
 8016b64:	2000      	movs	r0, #0
 8016b66:	f7e9 fe91 	bl	800088c <__aeabi_ddiv>
 8016b6a:	4652      	mov	r2, sl
 8016b6c:	465b      	mov	r3, fp
 8016b6e:	f7e9 fbab 	bl	80002c8 <__aeabi_dsub>
 8016b72:	9d01      	ldr	r5, [sp, #4]
 8016b74:	4682      	mov	sl, r0
 8016b76:	468b      	mov	fp, r1
 8016b78:	4649      	mov	r1, r9
 8016b7a:	4640      	mov	r0, r8
 8016b7c:	f7ea f80c 	bl	8000b98 <__aeabi_d2iz>
 8016b80:	4606      	mov	r6, r0
 8016b82:	f7e9 fcef 	bl	8000564 <__aeabi_i2d>
 8016b86:	4602      	mov	r2, r0
 8016b88:	460b      	mov	r3, r1
 8016b8a:	4640      	mov	r0, r8
 8016b8c:	4649      	mov	r1, r9
 8016b8e:	f7e9 fb9b 	bl	80002c8 <__aeabi_dsub>
 8016b92:	3630      	adds	r6, #48	; 0x30
 8016b94:	f805 6b01 	strb.w	r6, [r5], #1
 8016b98:	4652      	mov	r2, sl
 8016b9a:	465b      	mov	r3, fp
 8016b9c:	4680      	mov	r8, r0
 8016b9e:	4689      	mov	r9, r1
 8016ba0:	f7e9 ffbc 	bl	8000b1c <__aeabi_dcmplt>
 8016ba4:	2800      	cmp	r0, #0
 8016ba6:	d163      	bne.n	8016c70 <_dtoa_r+0x608>
 8016ba8:	4642      	mov	r2, r8
 8016baa:	464b      	mov	r3, r9
 8016bac:	4936      	ldr	r1, [pc, #216]	; (8016c88 <_dtoa_r+0x620>)
 8016bae:	2000      	movs	r0, #0
 8016bb0:	f7e9 fb8a 	bl	80002c8 <__aeabi_dsub>
 8016bb4:	4652      	mov	r2, sl
 8016bb6:	465b      	mov	r3, fp
 8016bb8:	f7e9 ffb0 	bl	8000b1c <__aeabi_dcmplt>
 8016bbc:	2800      	cmp	r0, #0
 8016bbe:	f040 80b5 	bne.w	8016d2c <_dtoa_r+0x6c4>
 8016bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016bc4:	429d      	cmp	r5, r3
 8016bc6:	d081      	beq.n	8016acc <_dtoa_r+0x464>
 8016bc8:	4b30      	ldr	r3, [pc, #192]	; (8016c8c <_dtoa_r+0x624>)
 8016bca:	2200      	movs	r2, #0
 8016bcc:	4650      	mov	r0, sl
 8016bce:	4659      	mov	r1, fp
 8016bd0:	f7e9 fd32 	bl	8000638 <__aeabi_dmul>
 8016bd4:	4b2d      	ldr	r3, [pc, #180]	; (8016c8c <_dtoa_r+0x624>)
 8016bd6:	4682      	mov	sl, r0
 8016bd8:	468b      	mov	fp, r1
 8016bda:	4640      	mov	r0, r8
 8016bdc:	4649      	mov	r1, r9
 8016bde:	2200      	movs	r2, #0
 8016be0:	f7e9 fd2a 	bl	8000638 <__aeabi_dmul>
 8016be4:	4680      	mov	r8, r0
 8016be6:	4689      	mov	r9, r1
 8016be8:	e7c6      	b.n	8016b78 <_dtoa_r+0x510>
 8016bea:	4650      	mov	r0, sl
 8016bec:	4659      	mov	r1, fp
 8016bee:	f7e9 fd23 	bl	8000638 <__aeabi_dmul>
 8016bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016bf4:	9d01      	ldr	r5, [sp, #4]
 8016bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8016bf8:	4682      	mov	sl, r0
 8016bfa:	468b      	mov	fp, r1
 8016bfc:	4649      	mov	r1, r9
 8016bfe:	4640      	mov	r0, r8
 8016c00:	f7e9 ffca 	bl	8000b98 <__aeabi_d2iz>
 8016c04:	4606      	mov	r6, r0
 8016c06:	f7e9 fcad 	bl	8000564 <__aeabi_i2d>
 8016c0a:	3630      	adds	r6, #48	; 0x30
 8016c0c:	4602      	mov	r2, r0
 8016c0e:	460b      	mov	r3, r1
 8016c10:	4640      	mov	r0, r8
 8016c12:	4649      	mov	r1, r9
 8016c14:	f7e9 fb58 	bl	80002c8 <__aeabi_dsub>
 8016c18:	f805 6b01 	strb.w	r6, [r5], #1
 8016c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c1e:	429d      	cmp	r5, r3
 8016c20:	4680      	mov	r8, r0
 8016c22:	4689      	mov	r9, r1
 8016c24:	f04f 0200 	mov.w	r2, #0
 8016c28:	d124      	bne.n	8016c74 <_dtoa_r+0x60c>
 8016c2a:	4b1b      	ldr	r3, [pc, #108]	; (8016c98 <_dtoa_r+0x630>)
 8016c2c:	4650      	mov	r0, sl
 8016c2e:	4659      	mov	r1, fp
 8016c30:	f7e9 fb4c 	bl	80002cc <__adddf3>
 8016c34:	4602      	mov	r2, r0
 8016c36:	460b      	mov	r3, r1
 8016c38:	4640      	mov	r0, r8
 8016c3a:	4649      	mov	r1, r9
 8016c3c:	f7e9 ff8c 	bl	8000b58 <__aeabi_dcmpgt>
 8016c40:	2800      	cmp	r0, #0
 8016c42:	d173      	bne.n	8016d2c <_dtoa_r+0x6c4>
 8016c44:	4652      	mov	r2, sl
 8016c46:	465b      	mov	r3, fp
 8016c48:	4913      	ldr	r1, [pc, #76]	; (8016c98 <_dtoa_r+0x630>)
 8016c4a:	2000      	movs	r0, #0
 8016c4c:	f7e9 fb3c 	bl	80002c8 <__aeabi_dsub>
 8016c50:	4602      	mov	r2, r0
 8016c52:	460b      	mov	r3, r1
 8016c54:	4640      	mov	r0, r8
 8016c56:	4649      	mov	r1, r9
 8016c58:	f7e9 ff60 	bl	8000b1c <__aeabi_dcmplt>
 8016c5c:	2800      	cmp	r0, #0
 8016c5e:	f43f af35 	beq.w	8016acc <_dtoa_r+0x464>
 8016c62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016c64:	1e6b      	subs	r3, r5, #1
 8016c66:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016c6c:	2b30      	cmp	r3, #48	; 0x30
 8016c6e:	d0f8      	beq.n	8016c62 <_dtoa_r+0x5fa>
 8016c70:	9700      	str	r7, [sp, #0]
 8016c72:	e049      	b.n	8016d08 <_dtoa_r+0x6a0>
 8016c74:	4b05      	ldr	r3, [pc, #20]	; (8016c8c <_dtoa_r+0x624>)
 8016c76:	f7e9 fcdf 	bl	8000638 <__aeabi_dmul>
 8016c7a:	4680      	mov	r8, r0
 8016c7c:	4689      	mov	r9, r1
 8016c7e:	e7bd      	b.n	8016bfc <_dtoa_r+0x594>
 8016c80:	0805bea0 	.word	0x0805bea0
 8016c84:	0805be78 	.word	0x0805be78
 8016c88:	3ff00000 	.word	0x3ff00000
 8016c8c:	40240000 	.word	0x40240000
 8016c90:	401c0000 	.word	0x401c0000
 8016c94:	40140000 	.word	0x40140000
 8016c98:	3fe00000 	.word	0x3fe00000
 8016c9c:	9d01      	ldr	r5, [sp, #4]
 8016c9e:	4656      	mov	r6, sl
 8016ca0:	465f      	mov	r7, fp
 8016ca2:	4642      	mov	r2, r8
 8016ca4:	464b      	mov	r3, r9
 8016ca6:	4630      	mov	r0, r6
 8016ca8:	4639      	mov	r1, r7
 8016caa:	f7e9 fdef 	bl	800088c <__aeabi_ddiv>
 8016cae:	f7e9 ff73 	bl	8000b98 <__aeabi_d2iz>
 8016cb2:	4682      	mov	sl, r0
 8016cb4:	f7e9 fc56 	bl	8000564 <__aeabi_i2d>
 8016cb8:	4642      	mov	r2, r8
 8016cba:	464b      	mov	r3, r9
 8016cbc:	f7e9 fcbc 	bl	8000638 <__aeabi_dmul>
 8016cc0:	4602      	mov	r2, r0
 8016cc2:	460b      	mov	r3, r1
 8016cc4:	4630      	mov	r0, r6
 8016cc6:	4639      	mov	r1, r7
 8016cc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8016ccc:	f7e9 fafc 	bl	80002c8 <__aeabi_dsub>
 8016cd0:	f805 6b01 	strb.w	r6, [r5], #1
 8016cd4:	9e01      	ldr	r6, [sp, #4]
 8016cd6:	9f03      	ldr	r7, [sp, #12]
 8016cd8:	1bae      	subs	r6, r5, r6
 8016cda:	42b7      	cmp	r7, r6
 8016cdc:	4602      	mov	r2, r0
 8016cde:	460b      	mov	r3, r1
 8016ce0:	d135      	bne.n	8016d4e <_dtoa_r+0x6e6>
 8016ce2:	f7e9 faf3 	bl	80002cc <__adddf3>
 8016ce6:	4642      	mov	r2, r8
 8016ce8:	464b      	mov	r3, r9
 8016cea:	4606      	mov	r6, r0
 8016cec:	460f      	mov	r7, r1
 8016cee:	f7e9 ff33 	bl	8000b58 <__aeabi_dcmpgt>
 8016cf2:	b9d0      	cbnz	r0, 8016d2a <_dtoa_r+0x6c2>
 8016cf4:	4642      	mov	r2, r8
 8016cf6:	464b      	mov	r3, r9
 8016cf8:	4630      	mov	r0, r6
 8016cfa:	4639      	mov	r1, r7
 8016cfc:	f7e9 ff04 	bl	8000b08 <__aeabi_dcmpeq>
 8016d00:	b110      	cbz	r0, 8016d08 <_dtoa_r+0x6a0>
 8016d02:	f01a 0f01 	tst.w	sl, #1
 8016d06:	d110      	bne.n	8016d2a <_dtoa_r+0x6c2>
 8016d08:	4620      	mov	r0, r4
 8016d0a:	ee18 1a10 	vmov	r1, s16
 8016d0e:	f001 f901 	bl	8017f14 <_Bfree>
 8016d12:	2300      	movs	r3, #0
 8016d14:	9800      	ldr	r0, [sp, #0]
 8016d16:	702b      	strb	r3, [r5, #0]
 8016d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d1a:	3001      	adds	r0, #1
 8016d1c:	6018      	str	r0, [r3, #0]
 8016d1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	f43f acf1 	beq.w	8016708 <_dtoa_r+0xa0>
 8016d26:	601d      	str	r5, [r3, #0]
 8016d28:	e4ee      	b.n	8016708 <_dtoa_r+0xa0>
 8016d2a:	9f00      	ldr	r7, [sp, #0]
 8016d2c:	462b      	mov	r3, r5
 8016d2e:	461d      	mov	r5, r3
 8016d30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016d34:	2a39      	cmp	r2, #57	; 0x39
 8016d36:	d106      	bne.n	8016d46 <_dtoa_r+0x6de>
 8016d38:	9a01      	ldr	r2, [sp, #4]
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	d1f7      	bne.n	8016d2e <_dtoa_r+0x6c6>
 8016d3e:	9901      	ldr	r1, [sp, #4]
 8016d40:	2230      	movs	r2, #48	; 0x30
 8016d42:	3701      	adds	r7, #1
 8016d44:	700a      	strb	r2, [r1, #0]
 8016d46:	781a      	ldrb	r2, [r3, #0]
 8016d48:	3201      	adds	r2, #1
 8016d4a:	701a      	strb	r2, [r3, #0]
 8016d4c:	e790      	b.n	8016c70 <_dtoa_r+0x608>
 8016d4e:	4ba6      	ldr	r3, [pc, #664]	; (8016fe8 <_dtoa_r+0x980>)
 8016d50:	2200      	movs	r2, #0
 8016d52:	f7e9 fc71 	bl	8000638 <__aeabi_dmul>
 8016d56:	2200      	movs	r2, #0
 8016d58:	2300      	movs	r3, #0
 8016d5a:	4606      	mov	r6, r0
 8016d5c:	460f      	mov	r7, r1
 8016d5e:	f7e9 fed3 	bl	8000b08 <__aeabi_dcmpeq>
 8016d62:	2800      	cmp	r0, #0
 8016d64:	d09d      	beq.n	8016ca2 <_dtoa_r+0x63a>
 8016d66:	e7cf      	b.n	8016d08 <_dtoa_r+0x6a0>
 8016d68:	9a08      	ldr	r2, [sp, #32]
 8016d6a:	2a00      	cmp	r2, #0
 8016d6c:	f000 80d7 	beq.w	8016f1e <_dtoa_r+0x8b6>
 8016d70:	9a06      	ldr	r2, [sp, #24]
 8016d72:	2a01      	cmp	r2, #1
 8016d74:	f300 80ba 	bgt.w	8016eec <_dtoa_r+0x884>
 8016d78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d7a:	2a00      	cmp	r2, #0
 8016d7c:	f000 80b2 	beq.w	8016ee4 <_dtoa_r+0x87c>
 8016d80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016d84:	9e07      	ldr	r6, [sp, #28]
 8016d86:	9d04      	ldr	r5, [sp, #16]
 8016d88:	9a04      	ldr	r2, [sp, #16]
 8016d8a:	441a      	add	r2, r3
 8016d8c:	9204      	str	r2, [sp, #16]
 8016d8e:	9a05      	ldr	r2, [sp, #20]
 8016d90:	2101      	movs	r1, #1
 8016d92:	441a      	add	r2, r3
 8016d94:	4620      	mov	r0, r4
 8016d96:	9205      	str	r2, [sp, #20]
 8016d98:	f001 f9be 	bl	8018118 <__i2b>
 8016d9c:	4607      	mov	r7, r0
 8016d9e:	2d00      	cmp	r5, #0
 8016da0:	dd0c      	ble.n	8016dbc <_dtoa_r+0x754>
 8016da2:	9b05      	ldr	r3, [sp, #20]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	dd09      	ble.n	8016dbc <_dtoa_r+0x754>
 8016da8:	42ab      	cmp	r3, r5
 8016daa:	9a04      	ldr	r2, [sp, #16]
 8016dac:	bfa8      	it	ge
 8016dae:	462b      	movge	r3, r5
 8016db0:	1ad2      	subs	r2, r2, r3
 8016db2:	9204      	str	r2, [sp, #16]
 8016db4:	9a05      	ldr	r2, [sp, #20]
 8016db6:	1aed      	subs	r5, r5, r3
 8016db8:	1ad3      	subs	r3, r2, r3
 8016dba:	9305      	str	r3, [sp, #20]
 8016dbc:	9b07      	ldr	r3, [sp, #28]
 8016dbe:	b31b      	cbz	r3, 8016e08 <_dtoa_r+0x7a0>
 8016dc0:	9b08      	ldr	r3, [sp, #32]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	f000 80af 	beq.w	8016f26 <_dtoa_r+0x8be>
 8016dc8:	2e00      	cmp	r6, #0
 8016dca:	dd13      	ble.n	8016df4 <_dtoa_r+0x78c>
 8016dcc:	4639      	mov	r1, r7
 8016dce:	4632      	mov	r2, r6
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	f001 fa61 	bl	8018298 <__pow5mult>
 8016dd6:	ee18 2a10 	vmov	r2, s16
 8016dda:	4601      	mov	r1, r0
 8016ddc:	4607      	mov	r7, r0
 8016dde:	4620      	mov	r0, r4
 8016de0:	f001 f9b0 	bl	8018144 <__multiply>
 8016de4:	ee18 1a10 	vmov	r1, s16
 8016de8:	4680      	mov	r8, r0
 8016dea:	4620      	mov	r0, r4
 8016dec:	f001 f892 	bl	8017f14 <_Bfree>
 8016df0:	ee08 8a10 	vmov	s16, r8
 8016df4:	9b07      	ldr	r3, [sp, #28]
 8016df6:	1b9a      	subs	r2, r3, r6
 8016df8:	d006      	beq.n	8016e08 <_dtoa_r+0x7a0>
 8016dfa:	ee18 1a10 	vmov	r1, s16
 8016dfe:	4620      	mov	r0, r4
 8016e00:	f001 fa4a 	bl	8018298 <__pow5mult>
 8016e04:	ee08 0a10 	vmov	s16, r0
 8016e08:	2101      	movs	r1, #1
 8016e0a:	4620      	mov	r0, r4
 8016e0c:	f001 f984 	bl	8018118 <__i2b>
 8016e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	4606      	mov	r6, r0
 8016e16:	f340 8088 	ble.w	8016f2a <_dtoa_r+0x8c2>
 8016e1a:	461a      	mov	r2, r3
 8016e1c:	4601      	mov	r1, r0
 8016e1e:	4620      	mov	r0, r4
 8016e20:	f001 fa3a 	bl	8018298 <__pow5mult>
 8016e24:	9b06      	ldr	r3, [sp, #24]
 8016e26:	2b01      	cmp	r3, #1
 8016e28:	4606      	mov	r6, r0
 8016e2a:	f340 8081 	ble.w	8016f30 <_dtoa_r+0x8c8>
 8016e2e:	f04f 0800 	mov.w	r8, #0
 8016e32:	6933      	ldr	r3, [r6, #16]
 8016e34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016e38:	6918      	ldr	r0, [r3, #16]
 8016e3a:	f001 f91d 	bl	8018078 <__hi0bits>
 8016e3e:	f1c0 0020 	rsb	r0, r0, #32
 8016e42:	9b05      	ldr	r3, [sp, #20]
 8016e44:	4418      	add	r0, r3
 8016e46:	f010 001f 	ands.w	r0, r0, #31
 8016e4a:	f000 8092 	beq.w	8016f72 <_dtoa_r+0x90a>
 8016e4e:	f1c0 0320 	rsb	r3, r0, #32
 8016e52:	2b04      	cmp	r3, #4
 8016e54:	f340 808a 	ble.w	8016f6c <_dtoa_r+0x904>
 8016e58:	f1c0 001c 	rsb	r0, r0, #28
 8016e5c:	9b04      	ldr	r3, [sp, #16]
 8016e5e:	4403      	add	r3, r0
 8016e60:	9304      	str	r3, [sp, #16]
 8016e62:	9b05      	ldr	r3, [sp, #20]
 8016e64:	4403      	add	r3, r0
 8016e66:	4405      	add	r5, r0
 8016e68:	9305      	str	r3, [sp, #20]
 8016e6a:	9b04      	ldr	r3, [sp, #16]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	dd07      	ble.n	8016e80 <_dtoa_r+0x818>
 8016e70:	ee18 1a10 	vmov	r1, s16
 8016e74:	461a      	mov	r2, r3
 8016e76:	4620      	mov	r0, r4
 8016e78:	f001 fa68 	bl	801834c <__lshift>
 8016e7c:	ee08 0a10 	vmov	s16, r0
 8016e80:	9b05      	ldr	r3, [sp, #20]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	dd05      	ble.n	8016e92 <_dtoa_r+0x82a>
 8016e86:	4631      	mov	r1, r6
 8016e88:	461a      	mov	r2, r3
 8016e8a:	4620      	mov	r0, r4
 8016e8c:	f001 fa5e 	bl	801834c <__lshift>
 8016e90:	4606      	mov	r6, r0
 8016e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d06e      	beq.n	8016f76 <_dtoa_r+0x90e>
 8016e98:	ee18 0a10 	vmov	r0, s16
 8016e9c:	4631      	mov	r1, r6
 8016e9e:	f001 fac5 	bl	801842c <__mcmp>
 8016ea2:	2800      	cmp	r0, #0
 8016ea4:	da67      	bge.n	8016f76 <_dtoa_r+0x90e>
 8016ea6:	9b00      	ldr	r3, [sp, #0]
 8016ea8:	3b01      	subs	r3, #1
 8016eaa:	ee18 1a10 	vmov	r1, s16
 8016eae:	9300      	str	r3, [sp, #0]
 8016eb0:	220a      	movs	r2, #10
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	f001 f84f 	bl	8017f58 <__multadd>
 8016eba:	9b08      	ldr	r3, [sp, #32]
 8016ebc:	ee08 0a10 	vmov	s16, r0
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	f000 81b1 	beq.w	8017228 <_dtoa_r+0xbc0>
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	4639      	mov	r1, r7
 8016eca:	220a      	movs	r2, #10
 8016ecc:	4620      	mov	r0, r4
 8016ece:	f001 f843 	bl	8017f58 <__multadd>
 8016ed2:	9b02      	ldr	r3, [sp, #8]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	4607      	mov	r7, r0
 8016ed8:	f300 808e 	bgt.w	8016ff8 <_dtoa_r+0x990>
 8016edc:	9b06      	ldr	r3, [sp, #24]
 8016ede:	2b02      	cmp	r3, #2
 8016ee0:	dc51      	bgt.n	8016f86 <_dtoa_r+0x91e>
 8016ee2:	e089      	b.n	8016ff8 <_dtoa_r+0x990>
 8016ee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ee6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016eea:	e74b      	b.n	8016d84 <_dtoa_r+0x71c>
 8016eec:	9b03      	ldr	r3, [sp, #12]
 8016eee:	1e5e      	subs	r6, r3, #1
 8016ef0:	9b07      	ldr	r3, [sp, #28]
 8016ef2:	42b3      	cmp	r3, r6
 8016ef4:	bfbf      	itttt	lt
 8016ef6:	9b07      	ldrlt	r3, [sp, #28]
 8016ef8:	9607      	strlt	r6, [sp, #28]
 8016efa:	1af2      	sublt	r2, r6, r3
 8016efc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016efe:	bfb6      	itet	lt
 8016f00:	189b      	addlt	r3, r3, r2
 8016f02:	1b9e      	subge	r6, r3, r6
 8016f04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8016f06:	9b03      	ldr	r3, [sp, #12]
 8016f08:	bfb8      	it	lt
 8016f0a:	2600      	movlt	r6, #0
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	bfb7      	itett	lt
 8016f10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8016f14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016f18:	1a9d      	sublt	r5, r3, r2
 8016f1a:	2300      	movlt	r3, #0
 8016f1c:	e734      	b.n	8016d88 <_dtoa_r+0x720>
 8016f1e:	9e07      	ldr	r6, [sp, #28]
 8016f20:	9d04      	ldr	r5, [sp, #16]
 8016f22:	9f08      	ldr	r7, [sp, #32]
 8016f24:	e73b      	b.n	8016d9e <_dtoa_r+0x736>
 8016f26:	9a07      	ldr	r2, [sp, #28]
 8016f28:	e767      	b.n	8016dfa <_dtoa_r+0x792>
 8016f2a:	9b06      	ldr	r3, [sp, #24]
 8016f2c:	2b01      	cmp	r3, #1
 8016f2e:	dc18      	bgt.n	8016f62 <_dtoa_r+0x8fa>
 8016f30:	f1ba 0f00 	cmp.w	sl, #0
 8016f34:	d115      	bne.n	8016f62 <_dtoa_r+0x8fa>
 8016f36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f3a:	b993      	cbnz	r3, 8016f62 <_dtoa_r+0x8fa>
 8016f3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016f40:	0d1b      	lsrs	r3, r3, #20
 8016f42:	051b      	lsls	r3, r3, #20
 8016f44:	b183      	cbz	r3, 8016f68 <_dtoa_r+0x900>
 8016f46:	9b04      	ldr	r3, [sp, #16]
 8016f48:	3301      	adds	r3, #1
 8016f4a:	9304      	str	r3, [sp, #16]
 8016f4c:	9b05      	ldr	r3, [sp, #20]
 8016f4e:	3301      	adds	r3, #1
 8016f50:	9305      	str	r3, [sp, #20]
 8016f52:	f04f 0801 	mov.w	r8, #1
 8016f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	f47f af6a 	bne.w	8016e32 <_dtoa_r+0x7ca>
 8016f5e:	2001      	movs	r0, #1
 8016f60:	e76f      	b.n	8016e42 <_dtoa_r+0x7da>
 8016f62:	f04f 0800 	mov.w	r8, #0
 8016f66:	e7f6      	b.n	8016f56 <_dtoa_r+0x8ee>
 8016f68:	4698      	mov	r8, r3
 8016f6a:	e7f4      	b.n	8016f56 <_dtoa_r+0x8ee>
 8016f6c:	f43f af7d 	beq.w	8016e6a <_dtoa_r+0x802>
 8016f70:	4618      	mov	r0, r3
 8016f72:	301c      	adds	r0, #28
 8016f74:	e772      	b.n	8016e5c <_dtoa_r+0x7f4>
 8016f76:	9b03      	ldr	r3, [sp, #12]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	dc37      	bgt.n	8016fec <_dtoa_r+0x984>
 8016f7c:	9b06      	ldr	r3, [sp, #24]
 8016f7e:	2b02      	cmp	r3, #2
 8016f80:	dd34      	ble.n	8016fec <_dtoa_r+0x984>
 8016f82:	9b03      	ldr	r3, [sp, #12]
 8016f84:	9302      	str	r3, [sp, #8]
 8016f86:	9b02      	ldr	r3, [sp, #8]
 8016f88:	b96b      	cbnz	r3, 8016fa6 <_dtoa_r+0x93e>
 8016f8a:	4631      	mov	r1, r6
 8016f8c:	2205      	movs	r2, #5
 8016f8e:	4620      	mov	r0, r4
 8016f90:	f000 ffe2 	bl	8017f58 <__multadd>
 8016f94:	4601      	mov	r1, r0
 8016f96:	4606      	mov	r6, r0
 8016f98:	ee18 0a10 	vmov	r0, s16
 8016f9c:	f001 fa46 	bl	801842c <__mcmp>
 8016fa0:	2800      	cmp	r0, #0
 8016fa2:	f73f adbb 	bgt.w	8016b1c <_dtoa_r+0x4b4>
 8016fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fa8:	9d01      	ldr	r5, [sp, #4]
 8016faa:	43db      	mvns	r3, r3
 8016fac:	9300      	str	r3, [sp, #0]
 8016fae:	f04f 0800 	mov.w	r8, #0
 8016fb2:	4631      	mov	r1, r6
 8016fb4:	4620      	mov	r0, r4
 8016fb6:	f000 ffad 	bl	8017f14 <_Bfree>
 8016fba:	2f00      	cmp	r7, #0
 8016fbc:	f43f aea4 	beq.w	8016d08 <_dtoa_r+0x6a0>
 8016fc0:	f1b8 0f00 	cmp.w	r8, #0
 8016fc4:	d005      	beq.n	8016fd2 <_dtoa_r+0x96a>
 8016fc6:	45b8      	cmp	r8, r7
 8016fc8:	d003      	beq.n	8016fd2 <_dtoa_r+0x96a>
 8016fca:	4641      	mov	r1, r8
 8016fcc:	4620      	mov	r0, r4
 8016fce:	f000 ffa1 	bl	8017f14 <_Bfree>
 8016fd2:	4639      	mov	r1, r7
 8016fd4:	4620      	mov	r0, r4
 8016fd6:	f000 ff9d 	bl	8017f14 <_Bfree>
 8016fda:	e695      	b.n	8016d08 <_dtoa_r+0x6a0>
 8016fdc:	2600      	movs	r6, #0
 8016fde:	4637      	mov	r7, r6
 8016fe0:	e7e1      	b.n	8016fa6 <_dtoa_r+0x93e>
 8016fe2:	9700      	str	r7, [sp, #0]
 8016fe4:	4637      	mov	r7, r6
 8016fe6:	e599      	b.n	8016b1c <_dtoa_r+0x4b4>
 8016fe8:	40240000 	.word	0x40240000
 8016fec:	9b08      	ldr	r3, [sp, #32]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	f000 80ca 	beq.w	8017188 <_dtoa_r+0xb20>
 8016ff4:	9b03      	ldr	r3, [sp, #12]
 8016ff6:	9302      	str	r3, [sp, #8]
 8016ff8:	2d00      	cmp	r5, #0
 8016ffa:	dd05      	ble.n	8017008 <_dtoa_r+0x9a0>
 8016ffc:	4639      	mov	r1, r7
 8016ffe:	462a      	mov	r2, r5
 8017000:	4620      	mov	r0, r4
 8017002:	f001 f9a3 	bl	801834c <__lshift>
 8017006:	4607      	mov	r7, r0
 8017008:	f1b8 0f00 	cmp.w	r8, #0
 801700c:	d05b      	beq.n	80170c6 <_dtoa_r+0xa5e>
 801700e:	6879      	ldr	r1, [r7, #4]
 8017010:	4620      	mov	r0, r4
 8017012:	f000 ff3f 	bl	8017e94 <_Balloc>
 8017016:	4605      	mov	r5, r0
 8017018:	b928      	cbnz	r0, 8017026 <_dtoa_r+0x9be>
 801701a:	4b87      	ldr	r3, [pc, #540]	; (8017238 <_dtoa_r+0xbd0>)
 801701c:	4602      	mov	r2, r0
 801701e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017022:	f7ff bb3b 	b.w	801669c <_dtoa_r+0x34>
 8017026:	693a      	ldr	r2, [r7, #16]
 8017028:	3202      	adds	r2, #2
 801702a:	0092      	lsls	r2, r2, #2
 801702c:	f107 010c 	add.w	r1, r7, #12
 8017030:	300c      	adds	r0, #12
 8017032:	f7fc fe1f 	bl	8013c74 <memcpy>
 8017036:	2201      	movs	r2, #1
 8017038:	4629      	mov	r1, r5
 801703a:	4620      	mov	r0, r4
 801703c:	f001 f986 	bl	801834c <__lshift>
 8017040:	9b01      	ldr	r3, [sp, #4]
 8017042:	f103 0901 	add.w	r9, r3, #1
 8017046:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801704a:	4413      	add	r3, r2
 801704c:	9305      	str	r3, [sp, #20]
 801704e:	f00a 0301 	and.w	r3, sl, #1
 8017052:	46b8      	mov	r8, r7
 8017054:	9304      	str	r3, [sp, #16]
 8017056:	4607      	mov	r7, r0
 8017058:	4631      	mov	r1, r6
 801705a:	ee18 0a10 	vmov	r0, s16
 801705e:	f7ff fa75 	bl	801654c <quorem>
 8017062:	4641      	mov	r1, r8
 8017064:	9002      	str	r0, [sp, #8]
 8017066:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801706a:	ee18 0a10 	vmov	r0, s16
 801706e:	f001 f9dd 	bl	801842c <__mcmp>
 8017072:	463a      	mov	r2, r7
 8017074:	9003      	str	r0, [sp, #12]
 8017076:	4631      	mov	r1, r6
 8017078:	4620      	mov	r0, r4
 801707a:	f001 f9f3 	bl	8018464 <__mdiff>
 801707e:	68c2      	ldr	r2, [r0, #12]
 8017080:	f109 3bff 	add.w	fp, r9, #4294967295
 8017084:	4605      	mov	r5, r0
 8017086:	bb02      	cbnz	r2, 80170ca <_dtoa_r+0xa62>
 8017088:	4601      	mov	r1, r0
 801708a:	ee18 0a10 	vmov	r0, s16
 801708e:	f001 f9cd 	bl	801842c <__mcmp>
 8017092:	4602      	mov	r2, r0
 8017094:	4629      	mov	r1, r5
 8017096:	4620      	mov	r0, r4
 8017098:	9207      	str	r2, [sp, #28]
 801709a:	f000 ff3b 	bl	8017f14 <_Bfree>
 801709e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80170a2:	ea43 0102 	orr.w	r1, r3, r2
 80170a6:	9b04      	ldr	r3, [sp, #16]
 80170a8:	430b      	orrs	r3, r1
 80170aa:	464d      	mov	r5, r9
 80170ac:	d10f      	bne.n	80170ce <_dtoa_r+0xa66>
 80170ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80170b2:	d02a      	beq.n	801710a <_dtoa_r+0xaa2>
 80170b4:	9b03      	ldr	r3, [sp, #12]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	dd02      	ble.n	80170c0 <_dtoa_r+0xa58>
 80170ba:	9b02      	ldr	r3, [sp, #8]
 80170bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80170c0:	f88b a000 	strb.w	sl, [fp]
 80170c4:	e775      	b.n	8016fb2 <_dtoa_r+0x94a>
 80170c6:	4638      	mov	r0, r7
 80170c8:	e7ba      	b.n	8017040 <_dtoa_r+0x9d8>
 80170ca:	2201      	movs	r2, #1
 80170cc:	e7e2      	b.n	8017094 <_dtoa_r+0xa2c>
 80170ce:	9b03      	ldr	r3, [sp, #12]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	db04      	blt.n	80170de <_dtoa_r+0xa76>
 80170d4:	9906      	ldr	r1, [sp, #24]
 80170d6:	430b      	orrs	r3, r1
 80170d8:	9904      	ldr	r1, [sp, #16]
 80170da:	430b      	orrs	r3, r1
 80170dc:	d122      	bne.n	8017124 <_dtoa_r+0xabc>
 80170de:	2a00      	cmp	r2, #0
 80170e0:	ddee      	ble.n	80170c0 <_dtoa_r+0xa58>
 80170e2:	ee18 1a10 	vmov	r1, s16
 80170e6:	2201      	movs	r2, #1
 80170e8:	4620      	mov	r0, r4
 80170ea:	f001 f92f 	bl	801834c <__lshift>
 80170ee:	4631      	mov	r1, r6
 80170f0:	ee08 0a10 	vmov	s16, r0
 80170f4:	f001 f99a 	bl	801842c <__mcmp>
 80170f8:	2800      	cmp	r0, #0
 80170fa:	dc03      	bgt.n	8017104 <_dtoa_r+0xa9c>
 80170fc:	d1e0      	bne.n	80170c0 <_dtoa_r+0xa58>
 80170fe:	f01a 0f01 	tst.w	sl, #1
 8017102:	d0dd      	beq.n	80170c0 <_dtoa_r+0xa58>
 8017104:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017108:	d1d7      	bne.n	80170ba <_dtoa_r+0xa52>
 801710a:	2339      	movs	r3, #57	; 0x39
 801710c:	f88b 3000 	strb.w	r3, [fp]
 8017110:	462b      	mov	r3, r5
 8017112:	461d      	mov	r5, r3
 8017114:	3b01      	subs	r3, #1
 8017116:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801711a:	2a39      	cmp	r2, #57	; 0x39
 801711c:	d071      	beq.n	8017202 <_dtoa_r+0xb9a>
 801711e:	3201      	adds	r2, #1
 8017120:	701a      	strb	r2, [r3, #0]
 8017122:	e746      	b.n	8016fb2 <_dtoa_r+0x94a>
 8017124:	2a00      	cmp	r2, #0
 8017126:	dd07      	ble.n	8017138 <_dtoa_r+0xad0>
 8017128:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801712c:	d0ed      	beq.n	801710a <_dtoa_r+0xaa2>
 801712e:	f10a 0301 	add.w	r3, sl, #1
 8017132:	f88b 3000 	strb.w	r3, [fp]
 8017136:	e73c      	b.n	8016fb2 <_dtoa_r+0x94a>
 8017138:	9b05      	ldr	r3, [sp, #20]
 801713a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801713e:	4599      	cmp	r9, r3
 8017140:	d047      	beq.n	80171d2 <_dtoa_r+0xb6a>
 8017142:	ee18 1a10 	vmov	r1, s16
 8017146:	2300      	movs	r3, #0
 8017148:	220a      	movs	r2, #10
 801714a:	4620      	mov	r0, r4
 801714c:	f000 ff04 	bl	8017f58 <__multadd>
 8017150:	45b8      	cmp	r8, r7
 8017152:	ee08 0a10 	vmov	s16, r0
 8017156:	f04f 0300 	mov.w	r3, #0
 801715a:	f04f 020a 	mov.w	r2, #10
 801715e:	4641      	mov	r1, r8
 8017160:	4620      	mov	r0, r4
 8017162:	d106      	bne.n	8017172 <_dtoa_r+0xb0a>
 8017164:	f000 fef8 	bl	8017f58 <__multadd>
 8017168:	4680      	mov	r8, r0
 801716a:	4607      	mov	r7, r0
 801716c:	f109 0901 	add.w	r9, r9, #1
 8017170:	e772      	b.n	8017058 <_dtoa_r+0x9f0>
 8017172:	f000 fef1 	bl	8017f58 <__multadd>
 8017176:	4639      	mov	r1, r7
 8017178:	4680      	mov	r8, r0
 801717a:	2300      	movs	r3, #0
 801717c:	220a      	movs	r2, #10
 801717e:	4620      	mov	r0, r4
 8017180:	f000 feea 	bl	8017f58 <__multadd>
 8017184:	4607      	mov	r7, r0
 8017186:	e7f1      	b.n	801716c <_dtoa_r+0xb04>
 8017188:	9b03      	ldr	r3, [sp, #12]
 801718a:	9302      	str	r3, [sp, #8]
 801718c:	9d01      	ldr	r5, [sp, #4]
 801718e:	ee18 0a10 	vmov	r0, s16
 8017192:	4631      	mov	r1, r6
 8017194:	f7ff f9da 	bl	801654c <quorem>
 8017198:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801719c:	9b01      	ldr	r3, [sp, #4]
 801719e:	f805 ab01 	strb.w	sl, [r5], #1
 80171a2:	1aea      	subs	r2, r5, r3
 80171a4:	9b02      	ldr	r3, [sp, #8]
 80171a6:	4293      	cmp	r3, r2
 80171a8:	dd09      	ble.n	80171be <_dtoa_r+0xb56>
 80171aa:	ee18 1a10 	vmov	r1, s16
 80171ae:	2300      	movs	r3, #0
 80171b0:	220a      	movs	r2, #10
 80171b2:	4620      	mov	r0, r4
 80171b4:	f000 fed0 	bl	8017f58 <__multadd>
 80171b8:	ee08 0a10 	vmov	s16, r0
 80171bc:	e7e7      	b.n	801718e <_dtoa_r+0xb26>
 80171be:	9b02      	ldr	r3, [sp, #8]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	bfc8      	it	gt
 80171c4:	461d      	movgt	r5, r3
 80171c6:	9b01      	ldr	r3, [sp, #4]
 80171c8:	bfd8      	it	le
 80171ca:	2501      	movle	r5, #1
 80171cc:	441d      	add	r5, r3
 80171ce:	f04f 0800 	mov.w	r8, #0
 80171d2:	ee18 1a10 	vmov	r1, s16
 80171d6:	2201      	movs	r2, #1
 80171d8:	4620      	mov	r0, r4
 80171da:	f001 f8b7 	bl	801834c <__lshift>
 80171de:	4631      	mov	r1, r6
 80171e0:	ee08 0a10 	vmov	s16, r0
 80171e4:	f001 f922 	bl	801842c <__mcmp>
 80171e8:	2800      	cmp	r0, #0
 80171ea:	dc91      	bgt.n	8017110 <_dtoa_r+0xaa8>
 80171ec:	d102      	bne.n	80171f4 <_dtoa_r+0xb8c>
 80171ee:	f01a 0f01 	tst.w	sl, #1
 80171f2:	d18d      	bne.n	8017110 <_dtoa_r+0xaa8>
 80171f4:	462b      	mov	r3, r5
 80171f6:	461d      	mov	r5, r3
 80171f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80171fc:	2a30      	cmp	r2, #48	; 0x30
 80171fe:	d0fa      	beq.n	80171f6 <_dtoa_r+0xb8e>
 8017200:	e6d7      	b.n	8016fb2 <_dtoa_r+0x94a>
 8017202:	9a01      	ldr	r2, [sp, #4]
 8017204:	429a      	cmp	r2, r3
 8017206:	d184      	bne.n	8017112 <_dtoa_r+0xaaa>
 8017208:	9b00      	ldr	r3, [sp, #0]
 801720a:	3301      	adds	r3, #1
 801720c:	9300      	str	r3, [sp, #0]
 801720e:	2331      	movs	r3, #49	; 0x31
 8017210:	7013      	strb	r3, [r2, #0]
 8017212:	e6ce      	b.n	8016fb2 <_dtoa_r+0x94a>
 8017214:	4b09      	ldr	r3, [pc, #36]	; (801723c <_dtoa_r+0xbd4>)
 8017216:	f7ff ba95 	b.w	8016744 <_dtoa_r+0xdc>
 801721a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801721c:	2b00      	cmp	r3, #0
 801721e:	f47f aa6e 	bne.w	80166fe <_dtoa_r+0x96>
 8017222:	4b07      	ldr	r3, [pc, #28]	; (8017240 <_dtoa_r+0xbd8>)
 8017224:	f7ff ba8e 	b.w	8016744 <_dtoa_r+0xdc>
 8017228:	9b02      	ldr	r3, [sp, #8]
 801722a:	2b00      	cmp	r3, #0
 801722c:	dcae      	bgt.n	801718c <_dtoa_r+0xb24>
 801722e:	9b06      	ldr	r3, [sp, #24]
 8017230:	2b02      	cmp	r3, #2
 8017232:	f73f aea8 	bgt.w	8016f86 <_dtoa_r+0x91e>
 8017236:	e7a9      	b.n	801718c <_dtoa_r+0xb24>
 8017238:	0805bcca 	.word	0x0805bcca
 801723c:	0805bf78 	.word	0x0805bf78
 8017240:	0805bc62 	.word	0x0805bc62

08017244 <__sflush_r>:
 8017244:	898a      	ldrh	r2, [r1, #12]
 8017246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801724a:	4605      	mov	r5, r0
 801724c:	0710      	lsls	r0, r2, #28
 801724e:	460c      	mov	r4, r1
 8017250:	d458      	bmi.n	8017304 <__sflush_r+0xc0>
 8017252:	684b      	ldr	r3, [r1, #4]
 8017254:	2b00      	cmp	r3, #0
 8017256:	dc05      	bgt.n	8017264 <__sflush_r+0x20>
 8017258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801725a:	2b00      	cmp	r3, #0
 801725c:	dc02      	bgt.n	8017264 <__sflush_r+0x20>
 801725e:	2000      	movs	r0, #0
 8017260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017266:	2e00      	cmp	r6, #0
 8017268:	d0f9      	beq.n	801725e <__sflush_r+0x1a>
 801726a:	2300      	movs	r3, #0
 801726c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017270:	682f      	ldr	r7, [r5, #0]
 8017272:	602b      	str	r3, [r5, #0]
 8017274:	d032      	beq.n	80172dc <__sflush_r+0x98>
 8017276:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017278:	89a3      	ldrh	r3, [r4, #12]
 801727a:	075a      	lsls	r2, r3, #29
 801727c:	d505      	bpl.n	801728a <__sflush_r+0x46>
 801727e:	6863      	ldr	r3, [r4, #4]
 8017280:	1ac0      	subs	r0, r0, r3
 8017282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017284:	b10b      	cbz	r3, 801728a <__sflush_r+0x46>
 8017286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017288:	1ac0      	subs	r0, r0, r3
 801728a:	2300      	movs	r3, #0
 801728c:	4602      	mov	r2, r0
 801728e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017290:	6a21      	ldr	r1, [r4, #32]
 8017292:	4628      	mov	r0, r5
 8017294:	47b0      	blx	r6
 8017296:	1c43      	adds	r3, r0, #1
 8017298:	89a3      	ldrh	r3, [r4, #12]
 801729a:	d106      	bne.n	80172aa <__sflush_r+0x66>
 801729c:	6829      	ldr	r1, [r5, #0]
 801729e:	291d      	cmp	r1, #29
 80172a0:	d82c      	bhi.n	80172fc <__sflush_r+0xb8>
 80172a2:	4a2a      	ldr	r2, [pc, #168]	; (801734c <__sflush_r+0x108>)
 80172a4:	40ca      	lsrs	r2, r1
 80172a6:	07d6      	lsls	r6, r2, #31
 80172a8:	d528      	bpl.n	80172fc <__sflush_r+0xb8>
 80172aa:	2200      	movs	r2, #0
 80172ac:	6062      	str	r2, [r4, #4]
 80172ae:	04d9      	lsls	r1, r3, #19
 80172b0:	6922      	ldr	r2, [r4, #16]
 80172b2:	6022      	str	r2, [r4, #0]
 80172b4:	d504      	bpl.n	80172c0 <__sflush_r+0x7c>
 80172b6:	1c42      	adds	r2, r0, #1
 80172b8:	d101      	bne.n	80172be <__sflush_r+0x7a>
 80172ba:	682b      	ldr	r3, [r5, #0]
 80172bc:	b903      	cbnz	r3, 80172c0 <__sflush_r+0x7c>
 80172be:	6560      	str	r0, [r4, #84]	; 0x54
 80172c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172c2:	602f      	str	r7, [r5, #0]
 80172c4:	2900      	cmp	r1, #0
 80172c6:	d0ca      	beq.n	801725e <__sflush_r+0x1a>
 80172c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172cc:	4299      	cmp	r1, r3
 80172ce:	d002      	beq.n	80172d6 <__sflush_r+0x92>
 80172d0:	4628      	mov	r0, r5
 80172d2:	f7fc ff57 	bl	8014184 <_free_r>
 80172d6:	2000      	movs	r0, #0
 80172d8:	6360      	str	r0, [r4, #52]	; 0x34
 80172da:	e7c1      	b.n	8017260 <__sflush_r+0x1c>
 80172dc:	6a21      	ldr	r1, [r4, #32]
 80172de:	2301      	movs	r3, #1
 80172e0:	4628      	mov	r0, r5
 80172e2:	47b0      	blx	r6
 80172e4:	1c41      	adds	r1, r0, #1
 80172e6:	d1c7      	bne.n	8017278 <__sflush_r+0x34>
 80172e8:	682b      	ldr	r3, [r5, #0]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d0c4      	beq.n	8017278 <__sflush_r+0x34>
 80172ee:	2b1d      	cmp	r3, #29
 80172f0:	d001      	beq.n	80172f6 <__sflush_r+0xb2>
 80172f2:	2b16      	cmp	r3, #22
 80172f4:	d101      	bne.n	80172fa <__sflush_r+0xb6>
 80172f6:	602f      	str	r7, [r5, #0]
 80172f8:	e7b1      	b.n	801725e <__sflush_r+0x1a>
 80172fa:	89a3      	ldrh	r3, [r4, #12]
 80172fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017300:	81a3      	strh	r3, [r4, #12]
 8017302:	e7ad      	b.n	8017260 <__sflush_r+0x1c>
 8017304:	690f      	ldr	r7, [r1, #16]
 8017306:	2f00      	cmp	r7, #0
 8017308:	d0a9      	beq.n	801725e <__sflush_r+0x1a>
 801730a:	0793      	lsls	r3, r2, #30
 801730c:	680e      	ldr	r6, [r1, #0]
 801730e:	bf08      	it	eq
 8017310:	694b      	ldreq	r3, [r1, #20]
 8017312:	600f      	str	r7, [r1, #0]
 8017314:	bf18      	it	ne
 8017316:	2300      	movne	r3, #0
 8017318:	eba6 0807 	sub.w	r8, r6, r7
 801731c:	608b      	str	r3, [r1, #8]
 801731e:	f1b8 0f00 	cmp.w	r8, #0
 8017322:	dd9c      	ble.n	801725e <__sflush_r+0x1a>
 8017324:	6a21      	ldr	r1, [r4, #32]
 8017326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017328:	4643      	mov	r3, r8
 801732a:	463a      	mov	r2, r7
 801732c:	4628      	mov	r0, r5
 801732e:	47b0      	blx	r6
 8017330:	2800      	cmp	r0, #0
 8017332:	dc06      	bgt.n	8017342 <__sflush_r+0xfe>
 8017334:	89a3      	ldrh	r3, [r4, #12]
 8017336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801733a:	81a3      	strh	r3, [r4, #12]
 801733c:	f04f 30ff 	mov.w	r0, #4294967295
 8017340:	e78e      	b.n	8017260 <__sflush_r+0x1c>
 8017342:	4407      	add	r7, r0
 8017344:	eba8 0800 	sub.w	r8, r8, r0
 8017348:	e7e9      	b.n	801731e <__sflush_r+0xda>
 801734a:	bf00      	nop
 801734c:	20400001 	.word	0x20400001

08017350 <_fflush_r>:
 8017350:	b538      	push	{r3, r4, r5, lr}
 8017352:	690b      	ldr	r3, [r1, #16]
 8017354:	4605      	mov	r5, r0
 8017356:	460c      	mov	r4, r1
 8017358:	b913      	cbnz	r3, 8017360 <_fflush_r+0x10>
 801735a:	2500      	movs	r5, #0
 801735c:	4628      	mov	r0, r5
 801735e:	bd38      	pop	{r3, r4, r5, pc}
 8017360:	b118      	cbz	r0, 801736a <_fflush_r+0x1a>
 8017362:	6983      	ldr	r3, [r0, #24]
 8017364:	b90b      	cbnz	r3, 801736a <_fflush_r+0x1a>
 8017366:	f000 f887 	bl	8017478 <__sinit>
 801736a:	4b14      	ldr	r3, [pc, #80]	; (80173bc <_fflush_r+0x6c>)
 801736c:	429c      	cmp	r4, r3
 801736e:	d11b      	bne.n	80173a8 <_fflush_r+0x58>
 8017370:	686c      	ldr	r4, [r5, #4]
 8017372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d0ef      	beq.n	801735a <_fflush_r+0xa>
 801737a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801737c:	07d0      	lsls	r0, r2, #31
 801737e:	d404      	bmi.n	801738a <_fflush_r+0x3a>
 8017380:	0599      	lsls	r1, r3, #22
 8017382:	d402      	bmi.n	801738a <_fflush_r+0x3a>
 8017384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017386:	f000 fcd1 	bl	8017d2c <__retarget_lock_acquire_recursive>
 801738a:	4628      	mov	r0, r5
 801738c:	4621      	mov	r1, r4
 801738e:	f7ff ff59 	bl	8017244 <__sflush_r>
 8017392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017394:	07da      	lsls	r2, r3, #31
 8017396:	4605      	mov	r5, r0
 8017398:	d4e0      	bmi.n	801735c <_fflush_r+0xc>
 801739a:	89a3      	ldrh	r3, [r4, #12]
 801739c:	059b      	lsls	r3, r3, #22
 801739e:	d4dd      	bmi.n	801735c <_fflush_r+0xc>
 80173a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173a2:	f000 fcc5 	bl	8017d30 <__retarget_lock_release_recursive>
 80173a6:	e7d9      	b.n	801735c <_fflush_r+0xc>
 80173a8:	4b05      	ldr	r3, [pc, #20]	; (80173c0 <_fflush_r+0x70>)
 80173aa:	429c      	cmp	r4, r3
 80173ac:	d101      	bne.n	80173b2 <_fflush_r+0x62>
 80173ae:	68ac      	ldr	r4, [r5, #8]
 80173b0:	e7df      	b.n	8017372 <_fflush_r+0x22>
 80173b2:	4b04      	ldr	r3, [pc, #16]	; (80173c4 <_fflush_r+0x74>)
 80173b4:	429c      	cmp	r4, r3
 80173b6:	bf08      	it	eq
 80173b8:	68ec      	ldreq	r4, [r5, #12]
 80173ba:	e7da      	b.n	8017372 <_fflush_r+0x22>
 80173bc:	0805bcfc 	.word	0x0805bcfc
 80173c0:	0805bd1c 	.word	0x0805bd1c
 80173c4:	0805bcdc 	.word	0x0805bcdc

080173c8 <std>:
 80173c8:	2300      	movs	r3, #0
 80173ca:	b510      	push	{r4, lr}
 80173cc:	4604      	mov	r4, r0
 80173ce:	e9c0 3300 	strd	r3, r3, [r0]
 80173d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80173d6:	6083      	str	r3, [r0, #8]
 80173d8:	8181      	strh	r1, [r0, #12]
 80173da:	6643      	str	r3, [r0, #100]	; 0x64
 80173dc:	81c2      	strh	r2, [r0, #14]
 80173de:	6183      	str	r3, [r0, #24]
 80173e0:	4619      	mov	r1, r3
 80173e2:	2208      	movs	r2, #8
 80173e4:	305c      	adds	r0, #92	; 0x5c
 80173e6:	f7fc fc53 	bl	8013c90 <memset>
 80173ea:	4b05      	ldr	r3, [pc, #20]	; (8017400 <std+0x38>)
 80173ec:	6263      	str	r3, [r4, #36]	; 0x24
 80173ee:	4b05      	ldr	r3, [pc, #20]	; (8017404 <std+0x3c>)
 80173f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80173f2:	4b05      	ldr	r3, [pc, #20]	; (8017408 <std+0x40>)
 80173f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80173f6:	4b05      	ldr	r3, [pc, #20]	; (801740c <std+0x44>)
 80173f8:	6224      	str	r4, [r4, #32]
 80173fa:	6323      	str	r3, [r4, #48]	; 0x30
 80173fc:	bd10      	pop	{r4, pc}
 80173fe:	bf00      	nop
 8017400:	08014f85 	.word	0x08014f85
 8017404:	08014fab 	.word	0x08014fab
 8017408:	08014fe3 	.word	0x08014fe3
 801740c:	08015007 	.word	0x08015007

08017410 <_cleanup_r>:
 8017410:	4901      	ldr	r1, [pc, #4]	; (8017418 <_cleanup_r+0x8>)
 8017412:	f000 b8af 	b.w	8017574 <_fwalk_reent>
 8017416:	bf00      	nop
 8017418:	08017351 	.word	0x08017351

0801741c <__sfmoreglue>:
 801741c:	b570      	push	{r4, r5, r6, lr}
 801741e:	2268      	movs	r2, #104	; 0x68
 8017420:	1e4d      	subs	r5, r1, #1
 8017422:	4355      	muls	r5, r2
 8017424:	460e      	mov	r6, r1
 8017426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801742a:	f7fc ff17 	bl	801425c <_malloc_r>
 801742e:	4604      	mov	r4, r0
 8017430:	b140      	cbz	r0, 8017444 <__sfmoreglue+0x28>
 8017432:	2100      	movs	r1, #0
 8017434:	e9c0 1600 	strd	r1, r6, [r0]
 8017438:	300c      	adds	r0, #12
 801743a:	60a0      	str	r0, [r4, #8]
 801743c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017440:	f7fc fc26 	bl	8013c90 <memset>
 8017444:	4620      	mov	r0, r4
 8017446:	bd70      	pop	{r4, r5, r6, pc}

08017448 <__sfp_lock_acquire>:
 8017448:	4801      	ldr	r0, [pc, #4]	; (8017450 <__sfp_lock_acquire+0x8>)
 801744a:	f000 bc6f 	b.w	8017d2c <__retarget_lock_acquire_recursive>
 801744e:	bf00      	nop
 8017450:	20005e5e 	.word	0x20005e5e

08017454 <__sfp_lock_release>:
 8017454:	4801      	ldr	r0, [pc, #4]	; (801745c <__sfp_lock_release+0x8>)
 8017456:	f000 bc6b 	b.w	8017d30 <__retarget_lock_release_recursive>
 801745a:	bf00      	nop
 801745c:	20005e5e 	.word	0x20005e5e

08017460 <__sinit_lock_acquire>:
 8017460:	4801      	ldr	r0, [pc, #4]	; (8017468 <__sinit_lock_acquire+0x8>)
 8017462:	f000 bc63 	b.w	8017d2c <__retarget_lock_acquire_recursive>
 8017466:	bf00      	nop
 8017468:	20005e5f 	.word	0x20005e5f

0801746c <__sinit_lock_release>:
 801746c:	4801      	ldr	r0, [pc, #4]	; (8017474 <__sinit_lock_release+0x8>)
 801746e:	f000 bc5f 	b.w	8017d30 <__retarget_lock_release_recursive>
 8017472:	bf00      	nop
 8017474:	20005e5f 	.word	0x20005e5f

08017478 <__sinit>:
 8017478:	b510      	push	{r4, lr}
 801747a:	4604      	mov	r4, r0
 801747c:	f7ff fff0 	bl	8017460 <__sinit_lock_acquire>
 8017480:	69a3      	ldr	r3, [r4, #24]
 8017482:	b11b      	cbz	r3, 801748c <__sinit+0x14>
 8017484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017488:	f7ff bff0 	b.w	801746c <__sinit_lock_release>
 801748c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017490:	6523      	str	r3, [r4, #80]	; 0x50
 8017492:	4b13      	ldr	r3, [pc, #76]	; (80174e0 <__sinit+0x68>)
 8017494:	4a13      	ldr	r2, [pc, #76]	; (80174e4 <__sinit+0x6c>)
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	62a2      	str	r2, [r4, #40]	; 0x28
 801749a:	42a3      	cmp	r3, r4
 801749c:	bf04      	itt	eq
 801749e:	2301      	moveq	r3, #1
 80174a0:	61a3      	streq	r3, [r4, #24]
 80174a2:	4620      	mov	r0, r4
 80174a4:	f000 f820 	bl	80174e8 <__sfp>
 80174a8:	6060      	str	r0, [r4, #4]
 80174aa:	4620      	mov	r0, r4
 80174ac:	f000 f81c 	bl	80174e8 <__sfp>
 80174b0:	60a0      	str	r0, [r4, #8]
 80174b2:	4620      	mov	r0, r4
 80174b4:	f000 f818 	bl	80174e8 <__sfp>
 80174b8:	2200      	movs	r2, #0
 80174ba:	60e0      	str	r0, [r4, #12]
 80174bc:	2104      	movs	r1, #4
 80174be:	6860      	ldr	r0, [r4, #4]
 80174c0:	f7ff ff82 	bl	80173c8 <std>
 80174c4:	68a0      	ldr	r0, [r4, #8]
 80174c6:	2201      	movs	r2, #1
 80174c8:	2109      	movs	r1, #9
 80174ca:	f7ff ff7d 	bl	80173c8 <std>
 80174ce:	68e0      	ldr	r0, [r4, #12]
 80174d0:	2202      	movs	r2, #2
 80174d2:	2112      	movs	r1, #18
 80174d4:	f7ff ff78 	bl	80173c8 <std>
 80174d8:	2301      	movs	r3, #1
 80174da:	61a3      	str	r3, [r4, #24]
 80174dc:	e7d2      	b.n	8017484 <__sinit+0xc>
 80174de:	bf00      	nop
 80174e0:	0805b9d0 	.word	0x0805b9d0
 80174e4:	08017411 	.word	0x08017411

080174e8 <__sfp>:
 80174e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ea:	4607      	mov	r7, r0
 80174ec:	f7ff ffac 	bl	8017448 <__sfp_lock_acquire>
 80174f0:	4b1e      	ldr	r3, [pc, #120]	; (801756c <__sfp+0x84>)
 80174f2:	681e      	ldr	r6, [r3, #0]
 80174f4:	69b3      	ldr	r3, [r6, #24]
 80174f6:	b913      	cbnz	r3, 80174fe <__sfp+0x16>
 80174f8:	4630      	mov	r0, r6
 80174fa:	f7ff ffbd 	bl	8017478 <__sinit>
 80174fe:	3648      	adds	r6, #72	; 0x48
 8017500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017504:	3b01      	subs	r3, #1
 8017506:	d503      	bpl.n	8017510 <__sfp+0x28>
 8017508:	6833      	ldr	r3, [r6, #0]
 801750a:	b30b      	cbz	r3, 8017550 <__sfp+0x68>
 801750c:	6836      	ldr	r6, [r6, #0]
 801750e:	e7f7      	b.n	8017500 <__sfp+0x18>
 8017510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017514:	b9d5      	cbnz	r5, 801754c <__sfp+0x64>
 8017516:	4b16      	ldr	r3, [pc, #88]	; (8017570 <__sfp+0x88>)
 8017518:	60e3      	str	r3, [r4, #12]
 801751a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801751e:	6665      	str	r5, [r4, #100]	; 0x64
 8017520:	f000 fc02 	bl	8017d28 <__retarget_lock_init_recursive>
 8017524:	f7ff ff96 	bl	8017454 <__sfp_lock_release>
 8017528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801752c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017530:	6025      	str	r5, [r4, #0]
 8017532:	61a5      	str	r5, [r4, #24]
 8017534:	2208      	movs	r2, #8
 8017536:	4629      	mov	r1, r5
 8017538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801753c:	f7fc fba8 	bl	8013c90 <memset>
 8017540:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017544:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017548:	4620      	mov	r0, r4
 801754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801754c:	3468      	adds	r4, #104	; 0x68
 801754e:	e7d9      	b.n	8017504 <__sfp+0x1c>
 8017550:	2104      	movs	r1, #4
 8017552:	4638      	mov	r0, r7
 8017554:	f7ff ff62 	bl	801741c <__sfmoreglue>
 8017558:	4604      	mov	r4, r0
 801755a:	6030      	str	r0, [r6, #0]
 801755c:	2800      	cmp	r0, #0
 801755e:	d1d5      	bne.n	801750c <__sfp+0x24>
 8017560:	f7ff ff78 	bl	8017454 <__sfp_lock_release>
 8017564:	230c      	movs	r3, #12
 8017566:	603b      	str	r3, [r7, #0]
 8017568:	e7ee      	b.n	8017548 <__sfp+0x60>
 801756a:	bf00      	nop
 801756c:	0805b9d0 	.word	0x0805b9d0
 8017570:	ffff0001 	.word	0xffff0001

08017574 <_fwalk_reent>:
 8017574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017578:	4606      	mov	r6, r0
 801757a:	4688      	mov	r8, r1
 801757c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017580:	2700      	movs	r7, #0
 8017582:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017586:	f1b9 0901 	subs.w	r9, r9, #1
 801758a:	d505      	bpl.n	8017598 <_fwalk_reent+0x24>
 801758c:	6824      	ldr	r4, [r4, #0]
 801758e:	2c00      	cmp	r4, #0
 8017590:	d1f7      	bne.n	8017582 <_fwalk_reent+0xe>
 8017592:	4638      	mov	r0, r7
 8017594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017598:	89ab      	ldrh	r3, [r5, #12]
 801759a:	2b01      	cmp	r3, #1
 801759c:	d907      	bls.n	80175ae <_fwalk_reent+0x3a>
 801759e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80175a2:	3301      	adds	r3, #1
 80175a4:	d003      	beq.n	80175ae <_fwalk_reent+0x3a>
 80175a6:	4629      	mov	r1, r5
 80175a8:	4630      	mov	r0, r6
 80175aa:	47c0      	blx	r8
 80175ac:	4307      	orrs	r7, r0
 80175ae:	3568      	adds	r5, #104	; 0x68
 80175b0:	e7e9      	b.n	8017586 <_fwalk_reent+0x12>

080175b2 <rshift>:
 80175b2:	6903      	ldr	r3, [r0, #16]
 80175b4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80175b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175bc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80175c0:	f100 0414 	add.w	r4, r0, #20
 80175c4:	dd45      	ble.n	8017652 <rshift+0xa0>
 80175c6:	f011 011f 	ands.w	r1, r1, #31
 80175ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80175ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80175d2:	d10c      	bne.n	80175ee <rshift+0x3c>
 80175d4:	f100 0710 	add.w	r7, r0, #16
 80175d8:	4629      	mov	r1, r5
 80175da:	42b1      	cmp	r1, r6
 80175dc:	d334      	bcc.n	8017648 <rshift+0x96>
 80175de:	1a9b      	subs	r3, r3, r2
 80175e0:	009b      	lsls	r3, r3, #2
 80175e2:	1eea      	subs	r2, r5, #3
 80175e4:	4296      	cmp	r6, r2
 80175e6:	bf38      	it	cc
 80175e8:	2300      	movcc	r3, #0
 80175ea:	4423      	add	r3, r4
 80175ec:	e015      	b.n	801761a <rshift+0x68>
 80175ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80175f2:	f1c1 0820 	rsb	r8, r1, #32
 80175f6:	40cf      	lsrs	r7, r1
 80175f8:	f105 0e04 	add.w	lr, r5, #4
 80175fc:	46a1      	mov	r9, r4
 80175fe:	4576      	cmp	r6, lr
 8017600:	46f4      	mov	ip, lr
 8017602:	d815      	bhi.n	8017630 <rshift+0x7e>
 8017604:	1a9a      	subs	r2, r3, r2
 8017606:	0092      	lsls	r2, r2, #2
 8017608:	3a04      	subs	r2, #4
 801760a:	3501      	adds	r5, #1
 801760c:	42ae      	cmp	r6, r5
 801760e:	bf38      	it	cc
 8017610:	2200      	movcc	r2, #0
 8017612:	18a3      	adds	r3, r4, r2
 8017614:	50a7      	str	r7, [r4, r2]
 8017616:	b107      	cbz	r7, 801761a <rshift+0x68>
 8017618:	3304      	adds	r3, #4
 801761a:	1b1a      	subs	r2, r3, r4
 801761c:	42a3      	cmp	r3, r4
 801761e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017622:	bf08      	it	eq
 8017624:	2300      	moveq	r3, #0
 8017626:	6102      	str	r2, [r0, #16]
 8017628:	bf08      	it	eq
 801762a:	6143      	streq	r3, [r0, #20]
 801762c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017630:	f8dc c000 	ldr.w	ip, [ip]
 8017634:	fa0c fc08 	lsl.w	ip, ip, r8
 8017638:	ea4c 0707 	orr.w	r7, ip, r7
 801763c:	f849 7b04 	str.w	r7, [r9], #4
 8017640:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017644:	40cf      	lsrs	r7, r1
 8017646:	e7da      	b.n	80175fe <rshift+0x4c>
 8017648:	f851 cb04 	ldr.w	ip, [r1], #4
 801764c:	f847 cf04 	str.w	ip, [r7, #4]!
 8017650:	e7c3      	b.n	80175da <rshift+0x28>
 8017652:	4623      	mov	r3, r4
 8017654:	e7e1      	b.n	801761a <rshift+0x68>

08017656 <__hexdig_fun>:
 8017656:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801765a:	2b09      	cmp	r3, #9
 801765c:	d802      	bhi.n	8017664 <__hexdig_fun+0xe>
 801765e:	3820      	subs	r0, #32
 8017660:	b2c0      	uxtb	r0, r0
 8017662:	4770      	bx	lr
 8017664:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017668:	2b05      	cmp	r3, #5
 801766a:	d801      	bhi.n	8017670 <__hexdig_fun+0x1a>
 801766c:	3847      	subs	r0, #71	; 0x47
 801766e:	e7f7      	b.n	8017660 <__hexdig_fun+0xa>
 8017670:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017674:	2b05      	cmp	r3, #5
 8017676:	d801      	bhi.n	801767c <__hexdig_fun+0x26>
 8017678:	3827      	subs	r0, #39	; 0x27
 801767a:	e7f1      	b.n	8017660 <__hexdig_fun+0xa>
 801767c:	2000      	movs	r0, #0
 801767e:	4770      	bx	lr

08017680 <__gethex>:
 8017680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017684:	ed2d 8b02 	vpush	{d8}
 8017688:	b089      	sub	sp, #36	; 0x24
 801768a:	ee08 0a10 	vmov	s16, r0
 801768e:	9304      	str	r3, [sp, #16]
 8017690:	4bb4      	ldr	r3, [pc, #720]	; (8017964 <__gethex+0x2e4>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	9301      	str	r3, [sp, #4]
 8017696:	4618      	mov	r0, r3
 8017698:	468b      	mov	fp, r1
 801769a:	4690      	mov	r8, r2
 801769c:	f7e8 fdb2 	bl	8000204 <strlen>
 80176a0:	9b01      	ldr	r3, [sp, #4]
 80176a2:	f8db 2000 	ldr.w	r2, [fp]
 80176a6:	4403      	add	r3, r0
 80176a8:	4682      	mov	sl, r0
 80176aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80176ae:	9305      	str	r3, [sp, #20]
 80176b0:	1c93      	adds	r3, r2, #2
 80176b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80176b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80176ba:	32fe      	adds	r2, #254	; 0xfe
 80176bc:	18d1      	adds	r1, r2, r3
 80176be:	461f      	mov	r7, r3
 80176c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80176c4:	9100      	str	r1, [sp, #0]
 80176c6:	2830      	cmp	r0, #48	; 0x30
 80176c8:	d0f8      	beq.n	80176bc <__gethex+0x3c>
 80176ca:	f7ff ffc4 	bl	8017656 <__hexdig_fun>
 80176ce:	4604      	mov	r4, r0
 80176d0:	2800      	cmp	r0, #0
 80176d2:	d13a      	bne.n	801774a <__gethex+0xca>
 80176d4:	9901      	ldr	r1, [sp, #4]
 80176d6:	4652      	mov	r2, sl
 80176d8:	4638      	mov	r0, r7
 80176da:	f001 fdf9 	bl	80192d0 <strncmp>
 80176de:	4605      	mov	r5, r0
 80176e0:	2800      	cmp	r0, #0
 80176e2:	d168      	bne.n	80177b6 <__gethex+0x136>
 80176e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80176e8:	eb07 060a 	add.w	r6, r7, sl
 80176ec:	f7ff ffb3 	bl	8017656 <__hexdig_fun>
 80176f0:	2800      	cmp	r0, #0
 80176f2:	d062      	beq.n	80177ba <__gethex+0x13a>
 80176f4:	4633      	mov	r3, r6
 80176f6:	7818      	ldrb	r0, [r3, #0]
 80176f8:	2830      	cmp	r0, #48	; 0x30
 80176fa:	461f      	mov	r7, r3
 80176fc:	f103 0301 	add.w	r3, r3, #1
 8017700:	d0f9      	beq.n	80176f6 <__gethex+0x76>
 8017702:	f7ff ffa8 	bl	8017656 <__hexdig_fun>
 8017706:	2301      	movs	r3, #1
 8017708:	fab0 f480 	clz	r4, r0
 801770c:	0964      	lsrs	r4, r4, #5
 801770e:	4635      	mov	r5, r6
 8017710:	9300      	str	r3, [sp, #0]
 8017712:	463a      	mov	r2, r7
 8017714:	4616      	mov	r6, r2
 8017716:	3201      	adds	r2, #1
 8017718:	7830      	ldrb	r0, [r6, #0]
 801771a:	f7ff ff9c 	bl	8017656 <__hexdig_fun>
 801771e:	2800      	cmp	r0, #0
 8017720:	d1f8      	bne.n	8017714 <__gethex+0x94>
 8017722:	9901      	ldr	r1, [sp, #4]
 8017724:	4652      	mov	r2, sl
 8017726:	4630      	mov	r0, r6
 8017728:	f001 fdd2 	bl	80192d0 <strncmp>
 801772c:	b980      	cbnz	r0, 8017750 <__gethex+0xd0>
 801772e:	b94d      	cbnz	r5, 8017744 <__gethex+0xc4>
 8017730:	eb06 050a 	add.w	r5, r6, sl
 8017734:	462a      	mov	r2, r5
 8017736:	4616      	mov	r6, r2
 8017738:	3201      	adds	r2, #1
 801773a:	7830      	ldrb	r0, [r6, #0]
 801773c:	f7ff ff8b 	bl	8017656 <__hexdig_fun>
 8017740:	2800      	cmp	r0, #0
 8017742:	d1f8      	bne.n	8017736 <__gethex+0xb6>
 8017744:	1bad      	subs	r5, r5, r6
 8017746:	00ad      	lsls	r5, r5, #2
 8017748:	e004      	b.n	8017754 <__gethex+0xd4>
 801774a:	2400      	movs	r4, #0
 801774c:	4625      	mov	r5, r4
 801774e:	e7e0      	b.n	8017712 <__gethex+0x92>
 8017750:	2d00      	cmp	r5, #0
 8017752:	d1f7      	bne.n	8017744 <__gethex+0xc4>
 8017754:	7833      	ldrb	r3, [r6, #0]
 8017756:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801775a:	2b50      	cmp	r3, #80	; 0x50
 801775c:	d13b      	bne.n	80177d6 <__gethex+0x156>
 801775e:	7873      	ldrb	r3, [r6, #1]
 8017760:	2b2b      	cmp	r3, #43	; 0x2b
 8017762:	d02c      	beq.n	80177be <__gethex+0x13e>
 8017764:	2b2d      	cmp	r3, #45	; 0x2d
 8017766:	d02e      	beq.n	80177c6 <__gethex+0x146>
 8017768:	1c71      	adds	r1, r6, #1
 801776a:	f04f 0900 	mov.w	r9, #0
 801776e:	7808      	ldrb	r0, [r1, #0]
 8017770:	f7ff ff71 	bl	8017656 <__hexdig_fun>
 8017774:	1e43      	subs	r3, r0, #1
 8017776:	b2db      	uxtb	r3, r3
 8017778:	2b18      	cmp	r3, #24
 801777a:	d82c      	bhi.n	80177d6 <__gethex+0x156>
 801777c:	f1a0 0210 	sub.w	r2, r0, #16
 8017780:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017784:	f7ff ff67 	bl	8017656 <__hexdig_fun>
 8017788:	1e43      	subs	r3, r0, #1
 801778a:	b2db      	uxtb	r3, r3
 801778c:	2b18      	cmp	r3, #24
 801778e:	d91d      	bls.n	80177cc <__gethex+0x14c>
 8017790:	f1b9 0f00 	cmp.w	r9, #0
 8017794:	d000      	beq.n	8017798 <__gethex+0x118>
 8017796:	4252      	negs	r2, r2
 8017798:	4415      	add	r5, r2
 801779a:	f8cb 1000 	str.w	r1, [fp]
 801779e:	b1e4      	cbz	r4, 80177da <__gethex+0x15a>
 80177a0:	9b00      	ldr	r3, [sp, #0]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	bf14      	ite	ne
 80177a6:	2700      	movne	r7, #0
 80177a8:	2706      	moveq	r7, #6
 80177aa:	4638      	mov	r0, r7
 80177ac:	b009      	add	sp, #36	; 0x24
 80177ae:	ecbd 8b02 	vpop	{d8}
 80177b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177b6:	463e      	mov	r6, r7
 80177b8:	4625      	mov	r5, r4
 80177ba:	2401      	movs	r4, #1
 80177bc:	e7ca      	b.n	8017754 <__gethex+0xd4>
 80177be:	f04f 0900 	mov.w	r9, #0
 80177c2:	1cb1      	adds	r1, r6, #2
 80177c4:	e7d3      	b.n	801776e <__gethex+0xee>
 80177c6:	f04f 0901 	mov.w	r9, #1
 80177ca:	e7fa      	b.n	80177c2 <__gethex+0x142>
 80177cc:	230a      	movs	r3, #10
 80177ce:	fb03 0202 	mla	r2, r3, r2, r0
 80177d2:	3a10      	subs	r2, #16
 80177d4:	e7d4      	b.n	8017780 <__gethex+0x100>
 80177d6:	4631      	mov	r1, r6
 80177d8:	e7df      	b.n	801779a <__gethex+0x11a>
 80177da:	1bf3      	subs	r3, r6, r7
 80177dc:	3b01      	subs	r3, #1
 80177de:	4621      	mov	r1, r4
 80177e0:	2b07      	cmp	r3, #7
 80177e2:	dc0b      	bgt.n	80177fc <__gethex+0x17c>
 80177e4:	ee18 0a10 	vmov	r0, s16
 80177e8:	f000 fb54 	bl	8017e94 <_Balloc>
 80177ec:	4604      	mov	r4, r0
 80177ee:	b940      	cbnz	r0, 8017802 <__gethex+0x182>
 80177f0:	4b5d      	ldr	r3, [pc, #372]	; (8017968 <__gethex+0x2e8>)
 80177f2:	4602      	mov	r2, r0
 80177f4:	21de      	movs	r1, #222	; 0xde
 80177f6:	485d      	ldr	r0, [pc, #372]	; (801796c <__gethex+0x2ec>)
 80177f8:	f7fc f9ca 	bl	8013b90 <__assert_func>
 80177fc:	3101      	adds	r1, #1
 80177fe:	105b      	asrs	r3, r3, #1
 8017800:	e7ee      	b.n	80177e0 <__gethex+0x160>
 8017802:	f100 0914 	add.w	r9, r0, #20
 8017806:	f04f 0b00 	mov.w	fp, #0
 801780a:	f1ca 0301 	rsb	r3, sl, #1
 801780e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017812:	f8cd b000 	str.w	fp, [sp]
 8017816:	9306      	str	r3, [sp, #24]
 8017818:	42b7      	cmp	r7, r6
 801781a:	d340      	bcc.n	801789e <__gethex+0x21e>
 801781c:	9802      	ldr	r0, [sp, #8]
 801781e:	9b00      	ldr	r3, [sp, #0]
 8017820:	f840 3b04 	str.w	r3, [r0], #4
 8017824:	eba0 0009 	sub.w	r0, r0, r9
 8017828:	1080      	asrs	r0, r0, #2
 801782a:	0146      	lsls	r6, r0, #5
 801782c:	6120      	str	r0, [r4, #16]
 801782e:	4618      	mov	r0, r3
 8017830:	f000 fc22 	bl	8018078 <__hi0bits>
 8017834:	1a30      	subs	r0, r6, r0
 8017836:	f8d8 6000 	ldr.w	r6, [r8]
 801783a:	42b0      	cmp	r0, r6
 801783c:	dd63      	ble.n	8017906 <__gethex+0x286>
 801783e:	1b87      	subs	r7, r0, r6
 8017840:	4639      	mov	r1, r7
 8017842:	4620      	mov	r0, r4
 8017844:	f000 ffc6 	bl	80187d4 <__any_on>
 8017848:	4682      	mov	sl, r0
 801784a:	b1a8      	cbz	r0, 8017878 <__gethex+0x1f8>
 801784c:	1e7b      	subs	r3, r7, #1
 801784e:	1159      	asrs	r1, r3, #5
 8017850:	f003 021f 	and.w	r2, r3, #31
 8017854:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017858:	f04f 0a01 	mov.w	sl, #1
 801785c:	fa0a f202 	lsl.w	r2, sl, r2
 8017860:	420a      	tst	r2, r1
 8017862:	d009      	beq.n	8017878 <__gethex+0x1f8>
 8017864:	4553      	cmp	r3, sl
 8017866:	dd05      	ble.n	8017874 <__gethex+0x1f4>
 8017868:	1eb9      	subs	r1, r7, #2
 801786a:	4620      	mov	r0, r4
 801786c:	f000 ffb2 	bl	80187d4 <__any_on>
 8017870:	2800      	cmp	r0, #0
 8017872:	d145      	bne.n	8017900 <__gethex+0x280>
 8017874:	f04f 0a02 	mov.w	sl, #2
 8017878:	4639      	mov	r1, r7
 801787a:	4620      	mov	r0, r4
 801787c:	f7ff fe99 	bl	80175b2 <rshift>
 8017880:	443d      	add	r5, r7
 8017882:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017886:	42ab      	cmp	r3, r5
 8017888:	da4c      	bge.n	8017924 <__gethex+0x2a4>
 801788a:	ee18 0a10 	vmov	r0, s16
 801788e:	4621      	mov	r1, r4
 8017890:	f000 fb40 	bl	8017f14 <_Bfree>
 8017894:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017896:	2300      	movs	r3, #0
 8017898:	6013      	str	r3, [r2, #0]
 801789a:	27a3      	movs	r7, #163	; 0xa3
 801789c:	e785      	b.n	80177aa <__gethex+0x12a>
 801789e:	1e73      	subs	r3, r6, #1
 80178a0:	9a05      	ldr	r2, [sp, #20]
 80178a2:	9303      	str	r3, [sp, #12]
 80178a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80178a8:	4293      	cmp	r3, r2
 80178aa:	d019      	beq.n	80178e0 <__gethex+0x260>
 80178ac:	f1bb 0f20 	cmp.w	fp, #32
 80178b0:	d107      	bne.n	80178c2 <__gethex+0x242>
 80178b2:	9b02      	ldr	r3, [sp, #8]
 80178b4:	9a00      	ldr	r2, [sp, #0]
 80178b6:	f843 2b04 	str.w	r2, [r3], #4
 80178ba:	9302      	str	r3, [sp, #8]
 80178bc:	2300      	movs	r3, #0
 80178be:	9300      	str	r3, [sp, #0]
 80178c0:	469b      	mov	fp, r3
 80178c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80178c6:	f7ff fec6 	bl	8017656 <__hexdig_fun>
 80178ca:	9b00      	ldr	r3, [sp, #0]
 80178cc:	f000 000f 	and.w	r0, r0, #15
 80178d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80178d4:	4303      	orrs	r3, r0
 80178d6:	9300      	str	r3, [sp, #0]
 80178d8:	f10b 0b04 	add.w	fp, fp, #4
 80178dc:	9b03      	ldr	r3, [sp, #12]
 80178de:	e00d      	b.n	80178fc <__gethex+0x27c>
 80178e0:	9b03      	ldr	r3, [sp, #12]
 80178e2:	9a06      	ldr	r2, [sp, #24]
 80178e4:	4413      	add	r3, r2
 80178e6:	42bb      	cmp	r3, r7
 80178e8:	d3e0      	bcc.n	80178ac <__gethex+0x22c>
 80178ea:	4618      	mov	r0, r3
 80178ec:	9901      	ldr	r1, [sp, #4]
 80178ee:	9307      	str	r3, [sp, #28]
 80178f0:	4652      	mov	r2, sl
 80178f2:	f001 fced 	bl	80192d0 <strncmp>
 80178f6:	9b07      	ldr	r3, [sp, #28]
 80178f8:	2800      	cmp	r0, #0
 80178fa:	d1d7      	bne.n	80178ac <__gethex+0x22c>
 80178fc:	461e      	mov	r6, r3
 80178fe:	e78b      	b.n	8017818 <__gethex+0x198>
 8017900:	f04f 0a03 	mov.w	sl, #3
 8017904:	e7b8      	b.n	8017878 <__gethex+0x1f8>
 8017906:	da0a      	bge.n	801791e <__gethex+0x29e>
 8017908:	1a37      	subs	r7, r6, r0
 801790a:	4621      	mov	r1, r4
 801790c:	ee18 0a10 	vmov	r0, s16
 8017910:	463a      	mov	r2, r7
 8017912:	f000 fd1b 	bl	801834c <__lshift>
 8017916:	1bed      	subs	r5, r5, r7
 8017918:	4604      	mov	r4, r0
 801791a:	f100 0914 	add.w	r9, r0, #20
 801791e:	f04f 0a00 	mov.w	sl, #0
 8017922:	e7ae      	b.n	8017882 <__gethex+0x202>
 8017924:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017928:	42a8      	cmp	r0, r5
 801792a:	dd72      	ble.n	8017a12 <__gethex+0x392>
 801792c:	1b45      	subs	r5, r0, r5
 801792e:	42ae      	cmp	r6, r5
 8017930:	dc36      	bgt.n	80179a0 <__gethex+0x320>
 8017932:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017936:	2b02      	cmp	r3, #2
 8017938:	d02a      	beq.n	8017990 <__gethex+0x310>
 801793a:	2b03      	cmp	r3, #3
 801793c:	d02c      	beq.n	8017998 <__gethex+0x318>
 801793e:	2b01      	cmp	r3, #1
 8017940:	d11c      	bne.n	801797c <__gethex+0x2fc>
 8017942:	42ae      	cmp	r6, r5
 8017944:	d11a      	bne.n	801797c <__gethex+0x2fc>
 8017946:	2e01      	cmp	r6, #1
 8017948:	d112      	bne.n	8017970 <__gethex+0x2f0>
 801794a:	9a04      	ldr	r2, [sp, #16]
 801794c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017950:	6013      	str	r3, [r2, #0]
 8017952:	2301      	movs	r3, #1
 8017954:	6123      	str	r3, [r4, #16]
 8017956:	f8c9 3000 	str.w	r3, [r9]
 801795a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801795c:	2762      	movs	r7, #98	; 0x62
 801795e:	601c      	str	r4, [r3, #0]
 8017960:	e723      	b.n	80177aa <__gethex+0x12a>
 8017962:	bf00      	nop
 8017964:	0805bda4 	.word	0x0805bda4
 8017968:	0805bcca 	.word	0x0805bcca
 801796c:	0805bd3c 	.word	0x0805bd3c
 8017970:	1e71      	subs	r1, r6, #1
 8017972:	4620      	mov	r0, r4
 8017974:	f000 ff2e 	bl	80187d4 <__any_on>
 8017978:	2800      	cmp	r0, #0
 801797a:	d1e6      	bne.n	801794a <__gethex+0x2ca>
 801797c:	ee18 0a10 	vmov	r0, s16
 8017980:	4621      	mov	r1, r4
 8017982:	f000 fac7 	bl	8017f14 <_Bfree>
 8017986:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017988:	2300      	movs	r3, #0
 801798a:	6013      	str	r3, [r2, #0]
 801798c:	2750      	movs	r7, #80	; 0x50
 801798e:	e70c      	b.n	80177aa <__gethex+0x12a>
 8017990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017992:	2b00      	cmp	r3, #0
 8017994:	d1f2      	bne.n	801797c <__gethex+0x2fc>
 8017996:	e7d8      	b.n	801794a <__gethex+0x2ca>
 8017998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801799a:	2b00      	cmp	r3, #0
 801799c:	d1d5      	bne.n	801794a <__gethex+0x2ca>
 801799e:	e7ed      	b.n	801797c <__gethex+0x2fc>
 80179a0:	1e6f      	subs	r7, r5, #1
 80179a2:	f1ba 0f00 	cmp.w	sl, #0
 80179a6:	d131      	bne.n	8017a0c <__gethex+0x38c>
 80179a8:	b127      	cbz	r7, 80179b4 <__gethex+0x334>
 80179aa:	4639      	mov	r1, r7
 80179ac:	4620      	mov	r0, r4
 80179ae:	f000 ff11 	bl	80187d4 <__any_on>
 80179b2:	4682      	mov	sl, r0
 80179b4:	117b      	asrs	r3, r7, #5
 80179b6:	2101      	movs	r1, #1
 80179b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80179bc:	f007 071f 	and.w	r7, r7, #31
 80179c0:	fa01 f707 	lsl.w	r7, r1, r7
 80179c4:	421f      	tst	r7, r3
 80179c6:	4629      	mov	r1, r5
 80179c8:	4620      	mov	r0, r4
 80179ca:	bf18      	it	ne
 80179cc:	f04a 0a02 	orrne.w	sl, sl, #2
 80179d0:	1b76      	subs	r6, r6, r5
 80179d2:	f7ff fdee 	bl	80175b2 <rshift>
 80179d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80179da:	2702      	movs	r7, #2
 80179dc:	f1ba 0f00 	cmp.w	sl, #0
 80179e0:	d048      	beq.n	8017a74 <__gethex+0x3f4>
 80179e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80179e6:	2b02      	cmp	r3, #2
 80179e8:	d015      	beq.n	8017a16 <__gethex+0x396>
 80179ea:	2b03      	cmp	r3, #3
 80179ec:	d017      	beq.n	8017a1e <__gethex+0x39e>
 80179ee:	2b01      	cmp	r3, #1
 80179f0:	d109      	bne.n	8017a06 <__gethex+0x386>
 80179f2:	f01a 0f02 	tst.w	sl, #2
 80179f6:	d006      	beq.n	8017a06 <__gethex+0x386>
 80179f8:	f8d9 0000 	ldr.w	r0, [r9]
 80179fc:	ea4a 0a00 	orr.w	sl, sl, r0
 8017a00:	f01a 0f01 	tst.w	sl, #1
 8017a04:	d10e      	bne.n	8017a24 <__gethex+0x3a4>
 8017a06:	f047 0710 	orr.w	r7, r7, #16
 8017a0a:	e033      	b.n	8017a74 <__gethex+0x3f4>
 8017a0c:	f04f 0a01 	mov.w	sl, #1
 8017a10:	e7d0      	b.n	80179b4 <__gethex+0x334>
 8017a12:	2701      	movs	r7, #1
 8017a14:	e7e2      	b.n	80179dc <__gethex+0x35c>
 8017a16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a18:	f1c3 0301 	rsb	r3, r3, #1
 8017a1c:	9315      	str	r3, [sp, #84]	; 0x54
 8017a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d0f0      	beq.n	8017a06 <__gethex+0x386>
 8017a24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017a28:	f104 0314 	add.w	r3, r4, #20
 8017a2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017a30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017a34:	f04f 0c00 	mov.w	ip, #0
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017a42:	d01c      	beq.n	8017a7e <__gethex+0x3fe>
 8017a44:	3201      	adds	r2, #1
 8017a46:	6002      	str	r2, [r0, #0]
 8017a48:	2f02      	cmp	r7, #2
 8017a4a:	f104 0314 	add.w	r3, r4, #20
 8017a4e:	d13f      	bne.n	8017ad0 <__gethex+0x450>
 8017a50:	f8d8 2000 	ldr.w	r2, [r8]
 8017a54:	3a01      	subs	r2, #1
 8017a56:	42b2      	cmp	r2, r6
 8017a58:	d10a      	bne.n	8017a70 <__gethex+0x3f0>
 8017a5a:	1171      	asrs	r1, r6, #5
 8017a5c:	2201      	movs	r2, #1
 8017a5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017a62:	f006 061f 	and.w	r6, r6, #31
 8017a66:	fa02 f606 	lsl.w	r6, r2, r6
 8017a6a:	421e      	tst	r6, r3
 8017a6c:	bf18      	it	ne
 8017a6e:	4617      	movne	r7, r2
 8017a70:	f047 0720 	orr.w	r7, r7, #32
 8017a74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017a76:	601c      	str	r4, [r3, #0]
 8017a78:	9b04      	ldr	r3, [sp, #16]
 8017a7a:	601d      	str	r5, [r3, #0]
 8017a7c:	e695      	b.n	80177aa <__gethex+0x12a>
 8017a7e:	4299      	cmp	r1, r3
 8017a80:	f843 cc04 	str.w	ip, [r3, #-4]
 8017a84:	d8d8      	bhi.n	8017a38 <__gethex+0x3b8>
 8017a86:	68a3      	ldr	r3, [r4, #8]
 8017a88:	459b      	cmp	fp, r3
 8017a8a:	db19      	blt.n	8017ac0 <__gethex+0x440>
 8017a8c:	6861      	ldr	r1, [r4, #4]
 8017a8e:	ee18 0a10 	vmov	r0, s16
 8017a92:	3101      	adds	r1, #1
 8017a94:	f000 f9fe 	bl	8017e94 <_Balloc>
 8017a98:	4681      	mov	r9, r0
 8017a9a:	b918      	cbnz	r0, 8017aa4 <__gethex+0x424>
 8017a9c:	4b1a      	ldr	r3, [pc, #104]	; (8017b08 <__gethex+0x488>)
 8017a9e:	4602      	mov	r2, r0
 8017aa0:	2184      	movs	r1, #132	; 0x84
 8017aa2:	e6a8      	b.n	80177f6 <__gethex+0x176>
 8017aa4:	6922      	ldr	r2, [r4, #16]
 8017aa6:	3202      	adds	r2, #2
 8017aa8:	f104 010c 	add.w	r1, r4, #12
 8017aac:	0092      	lsls	r2, r2, #2
 8017aae:	300c      	adds	r0, #12
 8017ab0:	f7fc f8e0 	bl	8013c74 <memcpy>
 8017ab4:	4621      	mov	r1, r4
 8017ab6:	ee18 0a10 	vmov	r0, s16
 8017aba:	f000 fa2b 	bl	8017f14 <_Bfree>
 8017abe:	464c      	mov	r4, r9
 8017ac0:	6923      	ldr	r3, [r4, #16]
 8017ac2:	1c5a      	adds	r2, r3, #1
 8017ac4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017ac8:	6122      	str	r2, [r4, #16]
 8017aca:	2201      	movs	r2, #1
 8017acc:	615a      	str	r2, [r3, #20]
 8017ace:	e7bb      	b.n	8017a48 <__gethex+0x3c8>
 8017ad0:	6922      	ldr	r2, [r4, #16]
 8017ad2:	455a      	cmp	r2, fp
 8017ad4:	dd0b      	ble.n	8017aee <__gethex+0x46e>
 8017ad6:	2101      	movs	r1, #1
 8017ad8:	4620      	mov	r0, r4
 8017ada:	f7ff fd6a 	bl	80175b2 <rshift>
 8017ade:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017ae2:	3501      	adds	r5, #1
 8017ae4:	42ab      	cmp	r3, r5
 8017ae6:	f6ff aed0 	blt.w	801788a <__gethex+0x20a>
 8017aea:	2701      	movs	r7, #1
 8017aec:	e7c0      	b.n	8017a70 <__gethex+0x3f0>
 8017aee:	f016 061f 	ands.w	r6, r6, #31
 8017af2:	d0fa      	beq.n	8017aea <__gethex+0x46a>
 8017af4:	4453      	add	r3, sl
 8017af6:	f1c6 0620 	rsb	r6, r6, #32
 8017afa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017afe:	f000 fabb 	bl	8018078 <__hi0bits>
 8017b02:	42b0      	cmp	r0, r6
 8017b04:	dbe7      	blt.n	8017ad6 <__gethex+0x456>
 8017b06:	e7f0      	b.n	8017aea <__gethex+0x46a>
 8017b08:	0805bcca 	.word	0x0805bcca

08017b0c <L_shift>:
 8017b0c:	f1c2 0208 	rsb	r2, r2, #8
 8017b10:	0092      	lsls	r2, r2, #2
 8017b12:	b570      	push	{r4, r5, r6, lr}
 8017b14:	f1c2 0620 	rsb	r6, r2, #32
 8017b18:	6843      	ldr	r3, [r0, #4]
 8017b1a:	6804      	ldr	r4, [r0, #0]
 8017b1c:	fa03 f506 	lsl.w	r5, r3, r6
 8017b20:	432c      	orrs	r4, r5
 8017b22:	40d3      	lsrs	r3, r2
 8017b24:	6004      	str	r4, [r0, #0]
 8017b26:	f840 3f04 	str.w	r3, [r0, #4]!
 8017b2a:	4288      	cmp	r0, r1
 8017b2c:	d3f4      	bcc.n	8017b18 <L_shift+0xc>
 8017b2e:	bd70      	pop	{r4, r5, r6, pc}

08017b30 <__match>:
 8017b30:	b530      	push	{r4, r5, lr}
 8017b32:	6803      	ldr	r3, [r0, #0]
 8017b34:	3301      	adds	r3, #1
 8017b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b3a:	b914      	cbnz	r4, 8017b42 <__match+0x12>
 8017b3c:	6003      	str	r3, [r0, #0]
 8017b3e:	2001      	movs	r0, #1
 8017b40:	bd30      	pop	{r4, r5, pc}
 8017b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017b4a:	2d19      	cmp	r5, #25
 8017b4c:	bf98      	it	ls
 8017b4e:	3220      	addls	r2, #32
 8017b50:	42a2      	cmp	r2, r4
 8017b52:	d0f0      	beq.n	8017b36 <__match+0x6>
 8017b54:	2000      	movs	r0, #0
 8017b56:	e7f3      	b.n	8017b40 <__match+0x10>

08017b58 <__hexnan>:
 8017b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b5c:	680b      	ldr	r3, [r1, #0]
 8017b5e:	115e      	asrs	r6, r3, #5
 8017b60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017b64:	f013 031f 	ands.w	r3, r3, #31
 8017b68:	b087      	sub	sp, #28
 8017b6a:	bf18      	it	ne
 8017b6c:	3604      	addne	r6, #4
 8017b6e:	2500      	movs	r5, #0
 8017b70:	1f37      	subs	r7, r6, #4
 8017b72:	4690      	mov	r8, r2
 8017b74:	6802      	ldr	r2, [r0, #0]
 8017b76:	9301      	str	r3, [sp, #4]
 8017b78:	4682      	mov	sl, r0
 8017b7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8017b7e:	46b9      	mov	r9, r7
 8017b80:	463c      	mov	r4, r7
 8017b82:	9502      	str	r5, [sp, #8]
 8017b84:	46ab      	mov	fp, r5
 8017b86:	7851      	ldrb	r1, [r2, #1]
 8017b88:	1c53      	adds	r3, r2, #1
 8017b8a:	9303      	str	r3, [sp, #12]
 8017b8c:	b341      	cbz	r1, 8017be0 <__hexnan+0x88>
 8017b8e:	4608      	mov	r0, r1
 8017b90:	9205      	str	r2, [sp, #20]
 8017b92:	9104      	str	r1, [sp, #16]
 8017b94:	f7ff fd5f 	bl	8017656 <__hexdig_fun>
 8017b98:	2800      	cmp	r0, #0
 8017b9a:	d14f      	bne.n	8017c3c <__hexnan+0xe4>
 8017b9c:	9904      	ldr	r1, [sp, #16]
 8017b9e:	9a05      	ldr	r2, [sp, #20]
 8017ba0:	2920      	cmp	r1, #32
 8017ba2:	d818      	bhi.n	8017bd6 <__hexnan+0x7e>
 8017ba4:	9b02      	ldr	r3, [sp, #8]
 8017ba6:	459b      	cmp	fp, r3
 8017ba8:	dd13      	ble.n	8017bd2 <__hexnan+0x7a>
 8017baa:	454c      	cmp	r4, r9
 8017bac:	d206      	bcs.n	8017bbc <__hexnan+0x64>
 8017bae:	2d07      	cmp	r5, #7
 8017bb0:	dc04      	bgt.n	8017bbc <__hexnan+0x64>
 8017bb2:	462a      	mov	r2, r5
 8017bb4:	4649      	mov	r1, r9
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	f7ff ffa8 	bl	8017b0c <L_shift>
 8017bbc:	4544      	cmp	r4, r8
 8017bbe:	d950      	bls.n	8017c62 <__hexnan+0x10a>
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	f1a4 0904 	sub.w	r9, r4, #4
 8017bc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8017bca:	f8cd b008 	str.w	fp, [sp, #8]
 8017bce:	464c      	mov	r4, r9
 8017bd0:	461d      	mov	r5, r3
 8017bd2:	9a03      	ldr	r2, [sp, #12]
 8017bd4:	e7d7      	b.n	8017b86 <__hexnan+0x2e>
 8017bd6:	2929      	cmp	r1, #41	; 0x29
 8017bd8:	d156      	bne.n	8017c88 <__hexnan+0x130>
 8017bda:	3202      	adds	r2, #2
 8017bdc:	f8ca 2000 	str.w	r2, [sl]
 8017be0:	f1bb 0f00 	cmp.w	fp, #0
 8017be4:	d050      	beq.n	8017c88 <__hexnan+0x130>
 8017be6:	454c      	cmp	r4, r9
 8017be8:	d206      	bcs.n	8017bf8 <__hexnan+0xa0>
 8017bea:	2d07      	cmp	r5, #7
 8017bec:	dc04      	bgt.n	8017bf8 <__hexnan+0xa0>
 8017bee:	462a      	mov	r2, r5
 8017bf0:	4649      	mov	r1, r9
 8017bf2:	4620      	mov	r0, r4
 8017bf4:	f7ff ff8a 	bl	8017b0c <L_shift>
 8017bf8:	4544      	cmp	r4, r8
 8017bfa:	d934      	bls.n	8017c66 <__hexnan+0x10e>
 8017bfc:	f1a8 0204 	sub.w	r2, r8, #4
 8017c00:	4623      	mov	r3, r4
 8017c02:	f853 1b04 	ldr.w	r1, [r3], #4
 8017c06:	f842 1f04 	str.w	r1, [r2, #4]!
 8017c0a:	429f      	cmp	r7, r3
 8017c0c:	d2f9      	bcs.n	8017c02 <__hexnan+0xaa>
 8017c0e:	1b3b      	subs	r3, r7, r4
 8017c10:	f023 0303 	bic.w	r3, r3, #3
 8017c14:	3304      	adds	r3, #4
 8017c16:	3401      	adds	r4, #1
 8017c18:	3e03      	subs	r6, #3
 8017c1a:	42b4      	cmp	r4, r6
 8017c1c:	bf88      	it	hi
 8017c1e:	2304      	movhi	r3, #4
 8017c20:	4443      	add	r3, r8
 8017c22:	2200      	movs	r2, #0
 8017c24:	f843 2b04 	str.w	r2, [r3], #4
 8017c28:	429f      	cmp	r7, r3
 8017c2a:	d2fb      	bcs.n	8017c24 <__hexnan+0xcc>
 8017c2c:	683b      	ldr	r3, [r7, #0]
 8017c2e:	b91b      	cbnz	r3, 8017c38 <__hexnan+0xe0>
 8017c30:	4547      	cmp	r7, r8
 8017c32:	d127      	bne.n	8017c84 <__hexnan+0x12c>
 8017c34:	2301      	movs	r3, #1
 8017c36:	603b      	str	r3, [r7, #0]
 8017c38:	2005      	movs	r0, #5
 8017c3a:	e026      	b.n	8017c8a <__hexnan+0x132>
 8017c3c:	3501      	adds	r5, #1
 8017c3e:	2d08      	cmp	r5, #8
 8017c40:	f10b 0b01 	add.w	fp, fp, #1
 8017c44:	dd06      	ble.n	8017c54 <__hexnan+0xfc>
 8017c46:	4544      	cmp	r4, r8
 8017c48:	d9c3      	bls.n	8017bd2 <__hexnan+0x7a>
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8017c50:	2501      	movs	r5, #1
 8017c52:	3c04      	subs	r4, #4
 8017c54:	6822      	ldr	r2, [r4, #0]
 8017c56:	f000 000f 	and.w	r0, r0, #15
 8017c5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8017c5e:	6022      	str	r2, [r4, #0]
 8017c60:	e7b7      	b.n	8017bd2 <__hexnan+0x7a>
 8017c62:	2508      	movs	r5, #8
 8017c64:	e7b5      	b.n	8017bd2 <__hexnan+0x7a>
 8017c66:	9b01      	ldr	r3, [sp, #4]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d0df      	beq.n	8017c2c <__hexnan+0xd4>
 8017c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8017c70:	f1c3 0320 	rsb	r3, r3, #32
 8017c74:	fa22 f303 	lsr.w	r3, r2, r3
 8017c78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017c7c:	401a      	ands	r2, r3
 8017c7e:	f846 2c04 	str.w	r2, [r6, #-4]
 8017c82:	e7d3      	b.n	8017c2c <__hexnan+0xd4>
 8017c84:	3f04      	subs	r7, #4
 8017c86:	e7d1      	b.n	8017c2c <__hexnan+0xd4>
 8017c88:	2004      	movs	r0, #4
 8017c8a:	b007      	add	sp, #28
 8017c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017c90 <_findenv_r>:
 8017c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c94:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8017d04 <_findenv_r+0x74>
 8017c98:	4607      	mov	r7, r0
 8017c9a:	4689      	mov	r9, r1
 8017c9c:	4616      	mov	r6, r2
 8017c9e:	f001 fbf1 	bl	8019484 <__env_lock>
 8017ca2:	f8da 4000 	ldr.w	r4, [sl]
 8017ca6:	b134      	cbz	r4, 8017cb6 <_findenv_r+0x26>
 8017ca8:	464b      	mov	r3, r9
 8017caa:	4698      	mov	r8, r3
 8017cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cb0:	b13a      	cbz	r2, 8017cc2 <_findenv_r+0x32>
 8017cb2:	2a3d      	cmp	r2, #61	; 0x3d
 8017cb4:	d1f9      	bne.n	8017caa <_findenv_r+0x1a>
 8017cb6:	4638      	mov	r0, r7
 8017cb8:	f001 fbea 	bl	8019490 <__env_unlock>
 8017cbc:	2000      	movs	r0, #0
 8017cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc2:	eba8 0809 	sub.w	r8, r8, r9
 8017cc6:	46a3      	mov	fp, r4
 8017cc8:	f854 0b04 	ldr.w	r0, [r4], #4
 8017ccc:	2800      	cmp	r0, #0
 8017cce:	d0f2      	beq.n	8017cb6 <_findenv_r+0x26>
 8017cd0:	4642      	mov	r2, r8
 8017cd2:	4649      	mov	r1, r9
 8017cd4:	f001 fafc 	bl	80192d0 <strncmp>
 8017cd8:	2800      	cmp	r0, #0
 8017cda:	d1f4      	bne.n	8017cc6 <_findenv_r+0x36>
 8017cdc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017ce0:	eb03 0508 	add.w	r5, r3, r8
 8017ce4:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017ce8:	2b3d      	cmp	r3, #61	; 0x3d
 8017cea:	d1ec      	bne.n	8017cc6 <_findenv_r+0x36>
 8017cec:	f8da 3000 	ldr.w	r3, [sl]
 8017cf0:	ebab 0303 	sub.w	r3, fp, r3
 8017cf4:	109b      	asrs	r3, r3, #2
 8017cf6:	4638      	mov	r0, r7
 8017cf8:	6033      	str	r3, [r6, #0]
 8017cfa:	f001 fbc9 	bl	8019490 <__env_unlock>
 8017cfe:	1c68      	adds	r0, r5, #1
 8017d00:	e7dd      	b.n	8017cbe <_findenv_r+0x2e>
 8017d02:	bf00      	nop
 8017d04:	200001dc 	.word	0x200001dc

08017d08 <_getenv_r>:
 8017d08:	b507      	push	{r0, r1, r2, lr}
 8017d0a:	aa01      	add	r2, sp, #4
 8017d0c:	f7ff ffc0 	bl	8017c90 <_findenv_r>
 8017d10:	b003      	add	sp, #12
 8017d12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08017d18 <__gettzinfo>:
 8017d18:	4800      	ldr	r0, [pc, #0]	; (8017d1c <__gettzinfo+0x4>)
 8017d1a:	4770      	bx	lr
 8017d1c:	20000390 	.word	0x20000390

08017d20 <_localeconv_r>:
 8017d20:	4800      	ldr	r0, [pc, #0]	; (8017d24 <_localeconv_r+0x4>)
 8017d22:	4770      	bx	lr
 8017d24:	200004dc 	.word	0x200004dc

08017d28 <__retarget_lock_init_recursive>:
 8017d28:	4770      	bx	lr

08017d2a <__retarget_lock_acquire>:
 8017d2a:	4770      	bx	lr

08017d2c <__retarget_lock_acquire_recursive>:
 8017d2c:	4770      	bx	lr

08017d2e <__retarget_lock_release>:
 8017d2e:	4770      	bx	lr

08017d30 <__retarget_lock_release_recursive>:
 8017d30:	4770      	bx	lr
	...

08017d34 <_lseek_r>:
 8017d34:	b538      	push	{r3, r4, r5, lr}
 8017d36:	4d07      	ldr	r5, [pc, #28]	; (8017d54 <_lseek_r+0x20>)
 8017d38:	4604      	mov	r4, r0
 8017d3a:	4608      	mov	r0, r1
 8017d3c:	4611      	mov	r1, r2
 8017d3e:	2200      	movs	r2, #0
 8017d40:	602a      	str	r2, [r5, #0]
 8017d42:	461a      	mov	r2, r3
 8017d44:	f7ec fe2a 	bl	800499c <_lseek>
 8017d48:	1c43      	adds	r3, r0, #1
 8017d4a:	d102      	bne.n	8017d52 <_lseek_r+0x1e>
 8017d4c:	682b      	ldr	r3, [r5, #0]
 8017d4e:	b103      	cbz	r3, 8017d52 <_lseek_r+0x1e>
 8017d50:	6023      	str	r3, [r4, #0]
 8017d52:	bd38      	pop	{r3, r4, r5, pc}
 8017d54:	20005e64 	.word	0x20005e64

08017d58 <__swhatbuf_r>:
 8017d58:	b570      	push	{r4, r5, r6, lr}
 8017d5a:	460e      	mov	r6, r1
 8017d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d60:	2900      	cmp	r1, #0
 8017d62:	b096      	sub	sp, #88	; 0x58
 8017d64:	4614      	mov	r4, r2
 8017d66:	461d      	mov	r5, r3
 8017d68:	da08      	bge.n	8017d7c <__swhatbuf_r+0x24>
 8017d6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017d6e:	2200      	movs	r2, #0
 8017d70:	602a      	str	r2, [r5, #0]
 8017d72:	061a      	lsls	r2, r3, #24
 8017d74:	d410      	bmi.n	8017d98 <__swhatbuf_r+0x40>
 8017d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d7a:	e00e      	b.n	8017d9a <__swhatbuf_r+0x42>
 8017d7c:	466a      	mov	r2, sp
 8017d7e:	f001 fb8d 	bl	801949c <_fstat_r>
 8017d82:	2800      	cmp	r0, #0
 8017d84:	dbf1      	blt.n	8017d6a <__swhatbuf_r+0x12>
 8017d86:	9a01      	ldr	r2, [sp, #4]
 8017d88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017d8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017d90:	425a      	negs	r2, r3
 8017d92:	415a      	adcs	r2, r3
 8017d94:	602a      	str	r2, [r5, #0]
 8017d96:	e7ee      	b.n	8017d76 <__swhatbuf_r+0x1e>
 8017d98:	2340      	movs	r3, #64	; 0x40
 8017d9a:	2000      	movs	r0, #0
 8017d9c:	6023      	str	r3, [r4, #0]
 8017d9e:	b016      	add	sp, #88	; 0x58
 8017da0:	bd70      	pop	{r4, r5, r6, pc}
	...

08017da4 <__smakebuf_r>:
 8017da4:	898b      	ldrh	r3, [r1, #12]
 8017da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017da8:	079d      	lsls	r5, r3, #30
 8017daa:	4606      	mov	r6, r0
 8017dac:	460c      	mov	r4, r1
 8017dae:	d507      	bpl.n	8017dc0 <__smakebuf_r+0x1c>
 8017db0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017db4:	6023      	str	r3, [r4, #0]
 8017db6:	6123      	str	r3, [r4, #16]
 8017db8:	2301      	movs	r3, #1
 8017dba:	6163      	str	r3, [r4, #20]
 8017dbc:	b002      	add	sp, #8
 8017dbe:	bd70      	pop	{r4, r5, r6, pc}
 8017dc0:	ab01      	add	r3, sp, #4
 8017dc2:	466a      	mov	r2, sp
 8017dc4:	f7ff ffc8 	bl	8017d58 <__swhatbuf_r>
 8017dc8:	9900      	ldr	r1, [sp, #0]
 8017dca:	4605      	mov	r5, r0
 8017dcc:	4630      	mov	r0, r6
 8017dce:	f7fc fa45 	bl	801425c <_malloc_r>
 8017dd2:	b948      	cbnz	r0, 8017de8 <__smakebuf_r+0x44>
 8017dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dd8:	059a      	lsls	r2, r3, #22
 8017dda:	d4ef      	bmi.n	8017dbc <__smakebuf_r+0x18>
 8017ddc:	f023 0303 	bic.w	r3, r3, #3
 8017de0:	f043 0302 	orr.w	r3, r3, #2
 8017de4:	81a3      	strh	r3, [r4, #12]
 8017de6:	e7e3      	b.n	8017db0 <__smakebuf_r+0xc>
 8017de8:	4b0d      	ldr	r3, [pc, #52]	; (8017e20 <__smakebuf_r+0x7c>)
 8017dea:	62b3      	str	r3, [r6, #40]	; 0x28
 8017dec:	89a3      	ldrh	r3, [r4, #12]
 8017dee:	6020      	str	r0, [r4, #0]
 8017df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017df4:	81a3      	strh	r3, [r4, #12]
 8017df6:	9b00      	ldr	r3, [sp, #0]
 8017df8:	6163      	str	r3, [r4, #20]
 8017dfa:	9b01      	ldr	r3, [sp, #4]
 8017dfc:	6120      	str	r0, [r4, #16]
 8017dfe:	b15b      	cbz	r3, 8017e18 <__smakebuf_r+0x74>
 8017e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e04:	4630      	mov	r0, r6
 8017e06:	f001 fb5b 	bl	80194c0 <_isatty_r>
 8017e0a:	b128      	cbz	r0, 8017e18 <__smakebuf_r+0x74>
 8017e0c:	89a3      	ldrh	r3, [r4, #12]
 8017e0e:	f023 0303 	bic.w	r3, r3, #3
 8017e12:	f043 0301 	orr.w	r3, r3, #1
 8017e16:	81a3      	strh	r3, [r4, #12]
 8017e18:	89a0      	ldrh	r0, [r4, #12]
 8017e1a:	4305      	orrs	r5, r0
 8017e1c:	81a5      	strh	r5, [r4, #12]
 8017e1e:	e7cd      	b.n	8017dbc <__smakebuf_r+0x18>
 8017e20:	08017411 	.word	0x08017411

08017e24 <__ascii_mbtowc>:
 8017e24:	b082      	sub	sp, #8
 8017e26:	b901      	cbnz	r1, 8017e2a <__ascii_mbtowc+0x6>
 8017e28:	a901      	add	r1, sp, #4
 8017e2a:	b142      	cbz	r2, 8017e3e <__ascii_mbtowc+0x1a>
 8017e2c:	b14b      	cbz	r3, 8017e42 <__ascii_mbtowc+0x1e>
 8017e2e:	7813      	ldrb	r3, [r2, #0]
 8017e30:	600b      	str	r3, [r1, #0]
 8017e32:	7812      	ldrb	r2, [r2, #0]
 8017e34:	1e10      	subs	r0, r2, #0
 8017e36:	bf18      	it	ne
 8017e38:	2001      	movne	r0, #1
 8017e3a:	b002      	add	sp, #8
 8017e3c:	4770      	bx	lr
 8017e3e:	4610      	mov	r0, r2
 8017e40:	e7fb      	b.n	8017e3a <__ascii_mbtowc+0x16>
 8017e42:	f06f 0001 	mvn.w	r0, #1
 8017e46:	e7f8      	b.n	8017e3a <__ascii_mbtowc+0x16>

08017e48 <memmove>:
 8017e48:	4288      	cmp	r0, r1
 8017e4a:	b510      	push	{r4, lr}
 8017e4c:	eb01 0402 	add.w	r4, r1, r2
 8017e50:	d902      	bls.n	8017e58 <memmove+0x10>
 8017e52:	4284      	cmp	r4, r0
 8017e54:	4623      	mov	r3, r4
 8017e56:	d807      	bhi.n	8017e68 <memmove+0x20>
 8017e58:	1e43      	subs	r3, r0, #1
 8017e5a:	42a1      	cmp	r1, r4
 8017e5c:	d008      	beq.n	8017e70 <memmove+0x28>
 8017e5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017e66:	e7f8      	b.n	8017e5a <memmove+0x12>
 8017e68:	4402      	add	r2, r0
 8017e6a:	4601      	mov	r1, r0
 8017e6c:	428a      	cmp	r2, r1
 8017e6e:	d100      	bne.n	8017e72 <memmove+0x2a>
 8017e70:	bd10      	pop	{r4, pc}
 8017e72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017e7a:	e7f7      	b.n	8017e6c <memmove+0x24>

08017e7c <__malloc_lock>:
 8017e7c:	4801      	ldr	r0, [pc, #4]	; (8017e84 <__malloc_lock+0x8>)
 8017e7e:	f7ff bf55 	b.w	8017d2c <__retarget_lock_acquire_recursive>
 8017e82:	bf00      	nop
 8017e84:	20005e5d 	.word	0x20005e5d

08017e88 <__malloc_unlock>:
 8017e88:	4801      	ldr	r0, [pc, #4]	; (8017e90 <__malloc_unlock+0x8>)
 8017e8a:	f7ff bf51 	b.w	8017d30 <__retarget_lock_release_recursive>
 8017e8e:	bf00      	nop
 8017e90:	20005e5d 	.word	0x20005e5d

08017e94 <_Balloc>:
 8017e94:	b570      	push	{r4, r5, r6, lr}
 8017e96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017e98:	4604      	mov	r4, r0
 8017e9a:	460d      	mov	r5, r1
 8017e9c:	b976      	cbnz	r6, 8017ebc <_Balloc+0x28>
 8017e9e:	2010      	movs	r0, #16
 8017ea0:	f7fb fed8 	bl	8013c54 <malloc>
 8017ea4:	4602      	mov	r2, r0
 8017ea6:	6260      	str	r0, [r4, #36]	; 0x24
 8017ea8:	b920      	cbnz	r0, 8017eb4 <_Balloc+0x20>
 8017eaa:	4b18      	ldr	r3, [pc, #96]	; (8017f0c <_Balloc+0x78>)
 8017eac:	4818      	ldr	r0, [pc, #96]	; (8017f10 <_Balloc+0x7c>)
 8017eae:	2166      	movs	r1, #102	; 0x66
 8017eb0:	f7fb fe6e 	bl	8013b90 <__assert_func>
 8017eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017eb8:	6006      	str	r6, [r0, #0]
 8017eba:	60c6      	str	r6, [r0, #12]
 8017ebc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017ebe:	68f3      	ldr	r3, [r6, #12]
 8017ec0:	b183      	cbz	r3, 8017ee4 <_Balloc+0x50>
 8017ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ec4:	68db      	ldr	r3, [r3, #12]
 8017ec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017eca:	b9b8      	cbnz	r0, 8017efc <_Balloc+0x68>
 8017ecc:	2101      	movs	r1, #1
 8017ece:	fa01 f605 	lsl.w	r6, r1, r5
 8017ed2:	1d72      	adds	r2, r6, #5
 8017ed4:	0092      	lsls	r2, r2, #2
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	f000 fc9d 	bl	8018816 <_calloc_r>
 8017edc:	b160      	cbz	r0, 8017ef8 <_Balloc+0x64>
 8017ede:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017ee2:	e00e      	b.n	8017f02 <_Balloc+0x6e>
 8017ee4:	2221      	movs	r2, #33	; 0x21
 8017ee6:	2104      	movs	r1, #4
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f000 fc94 	bl	8018816 <_calloc_r>
 8017eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ef0:	60f0      	str	r0, [r6, #12]
 8017ef2:	68db      	ldr	r3, [r3, #12]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d1e4      	bne.n	8017ec2 <_Balloc+0x2e>
 8017ef8:	2000      	movs	r0, #0
 8017efa:	bd70      	pop	{r4, r5, r6, pc}
 8017efc:	6802      	ldr	r2, [r0, #0]
 8017efe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017f02:	2300      	movs	r3, #0
 8017f04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017f08:	e7f7      	b.n	8017efa <_Balloc+0x66>
 8017f0a:	bf00      	nop
 8017f0c:	0805b8c8 	.word	0x0805b8c8
 8017f10:	0805be18 	.word	0x0805be18

08017f14 <_Bfree>:
 8017f14:	b570      	push	{r4, r5, r6, lr}
 8017f16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017f18:	4605      	mov	r5, r0
 8017f1a:	460c      	mov	r4, r1
 8017f1c:	b976      	cbnz	r6, 8017f3c <_Bfree+0x28>
 8017f1e:	2010      	movs	r0, #16
 8017f20:	f7fb fe98 	bl	8013c54 <malloc>
 8017f24:	4602      	mov	r2, r0
 8017f26:	6268      	str	r0, [r5, #36]	; 0x24
 8017f28:	b920      	cbnz	r0, 8017f34 <_Bfree+0x20>
 8017f2a:	4b09      	ldr	r3, [pc, #36]	; (8017f50 <_Bfree+0x3c>)
 8017f2c:	4809      	ldr	r0, [pc, #36]	; (8017f54 <_Bfree+0x40>)
 8017f2e:	218a      	movs	r1, #138	; 0x8a
 8017f30:	f7fb fe2e 	bl	8013b90 <__assert_func>
 8017f34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f38:	6006      	str	r6, [r0, #0]
 8017f3a:	60c6      	str	r6, [r0, #12]
 8017f3c:	b13c      	cbz	r4, 8017f4e <_Bfree+0x3a>
 8017f3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017f40:	6862      	ldr	r2, [r4, #4]
 8017f42:	68db      	ldr	r3, [r3, #12]
 8017f44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017f48:	6021      	str	r1, [r4, #0]
 8017f4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017f4e:	bd70      	pop	{r4, r5, r6, pc}
 8017f50:	0805b8c8 	.word	0x0805b8c8
 8017f54:	0805be18 	.word	0x0805be18

08017f58 <__multadd>:
 8017f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f5c:	690d      	ldr	r5, [r1, #16]
 8017f5e:	4607      	mov	r7, r0
 8017f60:	460c      	mov	r4, r1
 8017f62:	461e      	mov	r6, r3
 8017f64:	f101 0c14 	add.w	ip, r1, #20
 8017f68:	2000      	movs	r0, #0
 8017f6a:	f8dc 3000 	ldr.w	r3, [ip]
 8017f6e:	b299      	uxth	r1, r3
 8017f70:	fb02 6101 	mla	r1, r2, r1, r6
 8017f74:	0c1e      	lsrs	r6, r3, #16
 8017f76:	0c0b      	lsrs	r3, r1, #16
 8017f78:	fb02 3306 	mla	r3, r2, r6, r3
 8017f7c:	b289      	uxth	r1, r1
 8017f7e:	3001      	adds	r0, #1
 8017f80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017f84:	4285      	cmp	r5, r0
 8017f86:	f84c 1b04 	str.w	r1, [ip], #4
 8017f8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017f8e:	dcec      	bgt.n	8017f6a <__multadd+0x12>
 8017f90:	b30e      	cbz	r6, 8017fd6 <__multadd+0x7e>
 8017f92:	68a3      	ldr	r3, [r4, #8]
 8017f94:	42ab      	cmp	r3, r5
 8017f96:	dc19      	bgt.n	8017fcc <__multadd+0x74>
 8017f98:	6861      	ldr	r1, [r4, #4]
 8017f9a:	4638      	mov	r0, r7
 8017f9c:	3101      	adds	r1, #1
 8017f9e:	f7ff ff79 	bl	8017e94 <_Balloc>
 8017fa2:	4680      	mov	r8, r0
 8017fa4:	b928      	cbnz	r0, 8017fb2 <__multadd+0x5a>
 8017fa6:	4602      	mov	r2, r0
 8017fa8:	4b0c      	ldr	r3, [pc, #48]	; (8017fdc <__multadd+0x84>)
 8017faa:	480d      	ldr	r0, [pc, #52]	; (8017fe0 <__multadd+0x88>)
 8017fac:	21b5      	movs	r1, #181	; 0xb5
 8017fae:	f7fb fdef 	bl	8013b90 <__assert_func>
 8017fb2:	6922      	ldr	r2, [r4, #16]
 8017fb4:	3202      	adds	r2, #2
 8017fb6:	f104 010c 	add.w	r1, r4, #12
 8017fba:	0092      	lsls	r2, r2, #2
 8017fbc:	300c      	adds	r0, #12
 8017fbe:	f7fb fe59 	bl	8013c74 <memcpy>
 8017fc2:	4621      	mov	r1, r4
 8017fc4:	4638      	mov	r0, r7
 8017fc6:	f7ff ffa5 	bl	8017f14 <_Bfree>
 8017fca:	4644      	mov	r4, r8
 8017fcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017fd0:	3501      	adds	r5, #1
 8017fd2:	615e      	str	r6, [r3, #20]
 8017fd4:	6125      	str	r5, [r4, #16]
 8017fd6:	4620      	mov	r0, r4
 8017fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fdc:	0805bcca 	.word	0x0805bcca
 8017fe0:	0805be18 	.word	0x0805be18

08017fe4 <__s2b>:
 8017fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017fe8:	460c      	mov	r4, r1
 8017fea:	4615      	mov	r5, r2
 8017fec:	461f      	mov	r7, r3
 8017fee:	2209      	movs	r2, #9
 8017ff0:	3308      	adds	r3, #8
 8017ff2:	4606      	mov	r6, r0
 8017ff4:	fb93 f3f2 	sdiv	r3, r3, r2
 8017ff8:	2100      	movs	r1, #0
 8017ffa:	2201      	movs	r2, #1
 8017ffc:	429a      	cmp	r2, r3
 8017ffe:	db09      	blt.n	8018014 <__s2b+0x30>
 8018000:	4630      	mov	r0, r6
 8018002:	f7ff ff47 	bl	8017e94 <_Balloc>
 8018006:	b940      	cbnz	r0, 801801a <__s2b+0x36>
 8018008:	4602      	mov	r2, r0
 801800a:	4b19      	ldr	r3, [pc, #100]	; (8018070 <__s2b+0x8c>)
 801800c:	4819      	ldr	r0, [pc, #100]	; (8018074 <__s2b+0x90>)
 801800e:	21ce      	movs	r1, #206	; 0xce
 8018010:	f7fb fdbe 	bl	8013b90 <__assert_func>
 8018014:	0052      	lsls	r2, r2, #1
 8018016:	3101      	adds	r1, #1
 8018018:	e7f0      	b.n	8017ffc <__s2b+0x18>
 801801a:	9b08      	ldr	r3, [sp, #32]
 801801c:	6143      	str	r3, [r0, #20]
 801801e:	2d09      	cmp	r5, #9
 8018020:	f04f 0301 	mov.w	r3, #1
 8018024:	6103      	str	r3, [r0, #16]
 8018026:	dd16      	ble.n	8018056 <__s2b+0x72>
 8018028:	f104 0909 	add.w	r9, r4, #9
 801802c:	46c8      	mov	r8, r9
 801802e:	442c      	add	r4, r5
 8018030:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018034:	4601      	mov	r1, r0
 8018036:	3b30      	subs	r3, #48	; 0x30
 8018038:	220a      	movs	r2, #10
 801803a:	4630      	mov	r0, r6
 801803c:	f7ff ff8c 	bl	8017f58 <__multadd>
 8018040:	45a0      	cmp	r8, r4
 8018042:	d1f5      	bne.n	8018030 <__s2b+0x4c>
 8018044:	f1a5 0408 	sub.w	r4, r5, #8
 8018048:	444c      	add	r4, r9
 801804a:	1b2d      	subs	r5, r5, r4
 801804c:	1963      	adds	r3, r4, r5
 801804e:	42bb      	cmp	r3, r7
 8018050:	db04      	blt.n	801805c <__s2b+0x78>
 8018052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018056:	340a      	adds	r4, #10
 8018058:	2509      	movs	r5, #9
 801805a:	e7f6      	b.n	801804a <__s2b+0x66>
 801805c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018060:	4601      	mov	r1, r0
 8018062:	3b30      	subs	r3, #48	; 0x30
 8018064:	220a      	movs	r2, #10
 8018066:	4630      	mov	r0, r6
 8018068:	f7ff ff76 	bl	8017f58 <__multadd>
 801806c:	e7ee      	b.n	801804c <__s2b+0x68>
 801806e:	bf00      	nop
 8018070:	0805bcca 	.word	0x0805bcca
 8018074:	0805be18 	.word	0x0805be18

08018078 <__hi0bits>:
 8018078:	0c03      	lsrs	r3, r0, #16
 801807a:	041b      	lsls	r3, r3, #16
 801807c:	b9d3      	cbnz	r3, 80180b4 <__hi0bits+0x3c>
 801807e:	0400      	lsls	r0, r0, #16
 8018080:	2310      	movs	r3, #16
 8018082:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018086:	bf04      	itt	eq
 8018088:	0200      	lsleq	r0, r0, #8
 801808a:	3308      	addeq	r3, #8
 801808c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018090:	bf04      	itt	eq
 8018092:	0100      	lsleq	r0, r0, #4
 8018094:	3304      	addeq	r3, #4
 8018096:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801809a:	bf04      	itt	eq
 801809c:	0080      	lsleq	r0, r0, #2
 801809e:	3302      	addeq	r3, #2
 80180a0:	2800      	cmp	r0, #0
 80180a2:	db05      	blt.n	80180b0 <__hi0bits+0x38>
 80180a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80180a8:	f103 0301 	add.w	r3, r3, #1
 80180ac:	bf08      	it	eq
 80180ae:	2320      	moveq	r3, #32
 80180b0:	4618      	mov	r0, r3
 80180b2:	4770      	bx	lr
 80180b4:	2300      	movs	r3, #0
 80180b6:	e7e4      	b.n	8018082 <__hi0bits+0xa>

080180b8 <__lo0bits>:
 80180b8:	6803      	ldr	r3, [r0, #0]
 80180ba:	f013 0207 	ands.w	r2, r3, #7
 80180be:	4601      	mov	r1, r0
 80180c0:	d00b      	beq.n	80180da <__lo0bits+0x22>
 80180c2:	07da      	lsls	r2, r3, #31
 80180c4:	d423      	bmi.n	801810e <__lo0bits+0x56>
 80180c6:	0798      	lsls	r0, r3, #30
 80180c8:	bf49      	itett	mi
 80180ca:	085b      	lsrmi	r3, r3, #1
 80180cc:	089b      	lsrpl	r3, r3, #2
 80180ce:	2001      	movmi	r0, #1
 80180d0:	600b      	strmi	r3, [r1, #0]
 80180d2:	bf5c      	itt	pl
 80180d4:	600b      	strpl	r3, [r1, #0]
 80180d6:	2002      	movpl	r0, #2
 80180d8:	4770      	bx	lr
 80180da:	b298      	uxth	r0, r3
 80180dc:	b9a8      	cbnz	r0, 801810a <__lo0bits+0x52>
 80180de:	0c1b      	lsrs	r3, r3, #16
 80180e0:	2010      	movs	r0, #16
 80180e2:	b2da      	uxtb	r2, r3
 80180e4:	b90a      	cbnz	r2, 80180ea <__lo0bits+0x32>
 80180e6:	3008      	adds	r0, #8
 80180e8:	0a1b      	lsrs	r3, r3, #8
 80180ea:	071a      	lsls	r2, r3, #28
 80180ec:	bf04      	itt	eq
 80180ee:	091b      	lsreq	r3, r3, #4
 80180f0:	3004      	addeq	r0, #4
 80180f2:	079a      	lsls	r2, r3, #30
 80180f4:	bf04      	itt	eq
 80180f6:	089b      	lsreq	r3, r3, #2
 80180f8:	3002      	addeq	r0, #2
 80180fa:	07da      	lsls	r2, r3, #31
 80180fc:	d403      	bmi.n	8018106 <__lo0bits+0x4e>
 80180fe:	085b      	lsrs	r3, r3, #1
 8018100:	f100 0001 	add.w	r0, r0, #1
 8018104:	d005      	beq.n	8018112 <__lo0bits+0x5a>
 8018106:	600b      	str	r3, [r1, #0]
 8018108:	4770      	bx	lr
 801810a:	4610      	mov	r0, r2
 801810c:	e7e9      	b.n	80180e2 <__lo0bits+0x2a>
 801810e:	2000      	movs	r0, #0
 8018110:	4770      	bx	lr
 8018112:	2020      	movs	r0, #32
 8018114:	4770      	bx	lr
	...

08018118 <__i2b>:
 8018118:	b510      	push	{r4, lr}
 801811a:	460c      	mov	r4, r1
 801811c:	2101      	movs	r1, #1
 801811e:	f7ff feb9 	bl	8017e94 <_Balloc>
 8018122:	4602      	mov	r2, r0
 8018124:	b928      	cbnz	r0, 8018132 <__i2b+0x1a>
 8018126:	4b05      	ldr	r3, [pc, #20]	; (801813c <__i2b+0x24>)
 8018128:	4805      	ldr	r0, [pc, #20]	; (8018140 <__i2b+0x28>)
 801812a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801812e:	f7fb fd2f 	bl	8013b90 <__assert_func>
 8018132:	2301      	movs	r3, #1
 8018134:	6144      	str	r4, [r0, #20]
 8018136:	6103      	str	r3, [r0, #16]
 8018138:	bd10      	pop	{r4, pc}
 801813a:	bf00      	nop
 801813c:	0805bcca 	.word	0x0805bcca
 8018140:	0805be18 	.word	0x0805be18

08018144 <__multiply>:
 8018144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018148:	4691      	mov	r9, r2
 801814a:	690a      	ldr	r2, [r1, #16]
 801814c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018150:	429a      	cmp	r2, r3
 8018152:	bfb8      	it	lt
 8018154:	460b      	movlt	r3, r1
 8018156:	460c      	mov	r4, r1
 8018158:	bfbc      	itt	lt
 801815a:	464c      	movlt	r4, r9
 801815c:	4699      	movlt	r9, r3
 801815e:	6927      	ldr	r7, [r4, #16]
 8018160:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018164:	68a3      	ldr	r3, [r4, #8]
 8018166:	6861      	ldr	r1, [r4, #4]
 8018168:	eb07 060a 	add.w	r6, r7, sl
 801816c:	42b3      	cmp	r3, r6
 801816e:	b085      	sub	sp, #20
 8018170:	bfb8      	it	lt
 8018172:	3101      	addlt	r1, #1
 8018174:	f7ff fe8e 	bl	8017e94 <_Balloc>
 8018178:	b930      	cbnz	r0, 8018188 <__multiply+0x44>
 801817a:	4602      	mov	r2, r0
 801817c:	4b44      	ldr	r3, [pc, #272]	; (8018290 <__multiply+0x14c>)
 801817e:	4845      	ldr	r0, [pc, #276]	; (8018294 <__multiply+0x150>)
 8018180:	f240 115d 	movw	r1, #349	; 0x15d
 8018184:	f7fb fd04 	bl	8013b90 <__assert_func>
 8018188:	f100 0514 	add.w	r5, r0, #20
 801818c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018190:	462b      	mov	r3, r5
 8018192:	2200      	movs	r2, #0
 8018194:	4543      	cmp	r3, r8
 8018196:	d321      	bcc.n	80181dc <__multiply+0x98>
 8018198:	f104 0314 	add.w	r3, r4, #20
 801819c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80181a0:	f109 0314 	add.w	r3, r9, #20
 80181a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80181a8:	9202      	str	r2, [sp, #8]
 80181aa:	1b3a      	subs	r2, r7, r4
 80181ac:	3a15      	subs	r2, #21
 80181ae:	f022 0203 	bic.w	r2, r2, #3
 80181b2:	3204      	adds	r2, #4
 80181b4:	f104 0115 	add.w	r1, r4, #21
 80181b8:	428f      	cmp	r7, r1
 80181ba:	bf38      	it	cc
 80181bc:	2204      	movcc	r2, #4
 80181be:	9201      	str	r2, [sp, #4]
 80181c0:	9a02      	ldr	r2, [sp, #8]
 80181c2:	9303      	str	r3, [sp, #12]
 80181c4:	429a      	cmp	r2, r3
 80181c6:	d80c      	bhi.n	80181e2 <__multiply+0x9e>
 80181c8:	2e00      	cmp	r6, #0
 80181ca:	dd03      	ble.n	80181d4 <__multiply+0x90>
 80181cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d05a      	beq.n	801828a <__multiply+0x146>
 80181d4:	6106      	str	r6, [r0, #16]
 80181d6:	b005      	add	sp, #20
 80181d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181dc:	f843 2b04 	str.w	r2, [r3], #4
 80181e0:	e7d8      	b.n	8018194 <__multiply+0x50>
 80181e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80181e6:	f1ba 0f00 	cmp.w	sl, #0
 80181ea:	d024      	beq.n	8018236 <__multiply+0xf2>
 80181ec:	f104 0e14 	add.w	lr, r4, #20
 80181f0:	46a9      	mov	r9, r5
 80181f2:	f04f 0c00 	mov.w	ip, #0
 80181f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80181fa:	f8d9 1000 	ldr.w	r1, [r9]
 80181fe:	fa1f fb82 	uxth.w	fp, r2
 8018202:	b289      	uxth	r1, r1
 8018204:	fb0a 110b 	mla	r1, sl, fp, r1
 8018208:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801820c:	f8d9 2000 	ldr.w	r2, [r9]
 8018210:	4461      	add	r1, ip
 8018212:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018216:	fb0a c20b 	mla	r2, sl, fp, ip
 801821a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801821e:	b289      	uxth	r1, r1
 8018220:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018224:	4577      	cmp	r7, lr
 8018226:	f849 1b04 	str.w	r1, [r9], #4
 801822a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801822e:	d8e2      	bhi.n	80181f6 <__multiply+0xb2>
 8018230:	9a01      	ldr	r2, [sp, #4]
 8018232:	f845 c002 	str.w	ip, [r5, r2]
 8018236:	9a03      	ldr	r2, [sp, #12]
 8018238:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801823c:	3304      	adds	r3, #4
 801823e:	f1b9 0f00 	cmp.w	r9, #0
 8018242:	d020      	beq.n	8018286 <__multiply+0x142>
 8018244:	6829      	ldr	r1, [r5, #0]
 8018246:	f104 0c14 	add.w	ip, r4, #20
 801824a:	46ae      	mov	lr, r5
 801824c:	f04f 0a00 	mov.w	sl, #0
 8018250:	f8bc b000 	ldrh.w	fp, [ip]
 8018254:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018258:	fb09 220b 	mla	r2, r9, fp, r2
 801825c:	4492      	add	sl, r2
 801825e:	b289      	uxth	r1, r1
 8018260:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018264:	f84e 1b04 	str.w	r1, [lr], #4
 8018268:	f85c 2b04 	ldr.w	r2, [ip], #4
 801826c:	f8be 1000 	ldrh.w	r1, [lr]
 8018270:	0c12      	lsrs	r2, r2, #16
 8018272:	fb09 1102 	mla	r1, r9, r2, r1
 8018276:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801827a:	4567      	cmp	r7, ip
 801827c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018280:	d8e6      	bhi.n	8018250 <__multiply+0x10c>
 8018282:	9a01      	ldr	r2, [sp, #4]
 8018284:	50a9      	str	r1, [r5, r2]
 8018286:	3504      	adds	r5, #4
 8018288:	e79a      	b.n	80181c0 <__multiply+0x7c>
 801828a:	3e01      	subs	r6, #1
 801828c:	e79c      	b.n	80181c8 <__multiply+0x84>
 801828e:	bf00      	nop
 8018290:	0805bcca 	.word	0x0805bcca
 8018294:	0805be18 	.word	0x0805be18

08018298 <__pow5mult>:
 8018298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801829c:	4615      	mov	r5, r2
 801829e:	f012 0203 	ands.w	r2, r2, #3
 80182a2:	4606      	mov	r6, r0
 80182a4:	460f      	mov	r7, r1
 80182a6:	d007      	beq.n	80182b8 <__pow5mult+0x20>
 80182a8:	4c25      	ldr	r4, [pc, #148]	; (8018340 <__pow5mult+0xa8>)
 80182aa:	3a01      	subs	r2, #1
 80182ac:	2300      	movs	r3, #0
 80182ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80182b2:	f7ff fe51 	bl	8017f58 <__multadd>
 80182b6:	4607      	mov	r7, r0
 80182b8:	10ad      	asrs	r5, r5, #2
 80182ba:	d03d      	beq.n	8018338 <__pow5mult+0xa0>
 80182bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80182be:	b97c      	cbnz	r4, 80182e0 <__pow5mult+0x48>
 80182c0:	2010      	movs	r0, #16
 80182c2:	f7fb fcc7 	bl	8013c54 <malloc>
 80182c6:	4602      	mov	r2, r0
 80182c8:	6270      	str	r0, [r6, #36]	; 0x24
 80182ca:	b928      	cbnz	r0, 80182d8 <__pow5mult+0x40>
 80182cc:	4b1d      	ldr	r3, [pc, #116]	; (8018344 <__pow5mult+0xac>)
 80182ce:	481e      	ldr	r0, [pc, #120]	; (8018348 <__pow5mult+0xb0>)
 80182d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80182d4:	f7fb fc5c 	bl	8013b90 <__assert_func>
 80182d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80182dc:	6004      	str	r4, [r0, #0]
 80182de:	60c4      	str	r4, [r0, #12]
 80182e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80182e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80182e8:	b94c      	cbnz	r4, 80182fe <__pow5mult+0x66>
 80182ea:	f240 2171 	movw	r1, #625	; 0x271
 80182ee:	4630      	mov	r0, r6
 80182f0:	f7ff ff12 	bl	8018118 <__i2b>
 80182f4:	2300      	movs	r3, #0
 80182f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80182fa:	4604      	mov	r4, r0
 80182fc:	6003      	str	r3, [r0, #0]
 80182fe:	f04f 0900 	mov.w	r9, #0
 8018302:	07eb      	lsls	r3, r5, #31
 8018304:	d50a      	bpl.n	801831c <__pow5mult+0x84>
 8018306:	4639      	mov	r1, r7
 8018308:	4622      	mov	r2, r4
 801830a:	4630      	mov	r0, r6
 801830c:	f7ff ff1a 	bl	8018144 <__multiply>
 8018310:	4639      	mov	r1, r7
 8018312:	4680      	mov	r8, r0
 8018314:	4630      	mov	r0, r6
 8018316:	f7ff fdfd 	bl	8017f14 <_Bfree>
 801831a:	4647      	mov	r7, r8
 801831c:	106d      	asrs	r5, r5, #1
 801831e:	d00b      	beq.n	8018338 <__pow5mult+0xa0>
 8018320:	6820      	ldr	r0, [r4, #0]
 8018322:	b938      	cbnz	r0, 8018334 <__pow5mult+0x9c>
 8018324:	4622      	mov	r2, r4
 8018326:	4621      	mov	r1, r4
 8018328:	4630      	mov	r0, r6
 801832a:	f7ff ff0b 	bl	8018144 <__multiply>
 801832e:	6020      	str	r0, [r4, #0]
 8018330:	f8c0 9000 	str.w	r9, [r0]
 8018334:	4604      	mov	r4, r0
 8018336:	e7e4      	b.n	8018302 <__pow5mult+0x6a>
 8018338:	4638      	mov	r0, r7
 801833a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801833e:	bf00      	nop
 8018340:	0805bf68 	.word	0x0805bf68
 8018344:	0805b8c8 	.word	0x0805b8c8
 8018348:	0805be18 	.word	0x0805be18

0801834c <__lshift>:
 801834c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018350:	460c      	mov	r4, r1
 8018352:	6849      	ldr	r1, [r1, #4]
 8018354:	6923      	ldr	r3, [r4, #16]
 8018356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801835a:	68a3      	ldr	r3, [r4, #8]
 801835c:	4607      	mov	r7, r0
 801835e:	4691      	mov	r9, r2
 8018360:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018364:	f108 0601 	add.w	r6, r8, #1
 8018368:	42b3      	cmp	r3, r6
 801836a:	db0b      	blt.n	8018384 <__lshift+0x38>
 801836c:	4638      	mov	r0, r7
 801836e:	f7ff fd91 	bl	8017e94 <_Balloc>
 8018372:	4605      	mov	r5, r0
 8018374:	b948      	cbnz	r0, 801838a <__lshift+0x3e>
 8018376:	4602      	mov	r2, r0
 8018378:	4b2a      	ldr	r3, [pc, #168]	; (8018424 <__lshift+0xd8>)
 801837a:	482b      	ldr	r0, [pc, #172]	; (8018428 <__lshift+0xdc>)
 801837c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018380:	f7fb fc06 	bl	8013b90 <__assert_func>
 8018384:	3101      	adds	r1, #1
 8018386:	005b      	lsls	r3, r3, #1
 8018388:	e7ee      	b.n	8018368 <__lshift+0x1c>
 801838a:	2300      	movs	r3, #0
 801838c:	f100 0114 	add.w	r1, r0, #20
 8018390:	f100 0210 	add.w	r2, r0, #16
 8018394:	4618      	mov	r0, r3
 8018396:	4553      	cmp	r3, sl
 8018398:	db37      	blt.n	801840a <__lshift+0xbe>
 801839a:	6920      	ldr	r0, [r4, #16]
 801839c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80183a0:	f104 0314 	add.w	r3, r4, #20
 80183a4:	f019 091f 	ands.w	r9, r9, #31
 80183a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80183ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80183b0:	d02f      	beq.n	8018412 <__lshift+0xc6>
 80183b2:	f1c9 0e20 	rsb	lr, r9, #32
 80183b6:	468a      	mov	sl, r1
 80183b8:	f04f 0c00 	mov.w	ip, #0
 80183bc:	681a      	ldr	r2, [r3, #0]
 80183be:	fa02 f209 	lsl.w	r2, r2, r9
 80183c2:	ea42 020c 	orr.w	r2, r2, ip
 80183c6:	f84a 2b04 	str.w	r2, [sl], #4
 80183ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80183ce:	4298      	cmp	r0, r3
 80183d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80183d4:	d8f2      	bhi.n	80183bc <__lshift+0x70>
 80183d6:	1b03      	subs	r3, r0, r4
 80183d8:	3b15      	subs	r3, #21
 80183da:	f023 0303 	bic.w	r3, r3, #3
 80183de:	3304      	adds	r3, #4
 80183e0:	f104 0215 	add.w	r2, r4, #21
 80183e4:	4290      	cmp	r0, r2
 80183e6:	bf38      	it	cc
 80183e8:	2304      	movcc	r3, #4
 80183ea:	f841 c003 	str.w	ip, [r1, r3]
 80183ee:	f1bc 0f00 	cmp.w	ip, #0
 80183f2:	d001      	beq.n	80183f8 <__lshift+0xac>
 80183f4:	f108 0602 	add.w	r6, r8, #2
 80183f8:	3e01      	subs	r6, #1
 80183fa:	4638      	mov	r0, r7
 80183fc:	612e      	str	r6, [r5, #16]
 80183fe:	4621      	mov	r1, r4
 8018400:	f7ff fd88 	bl	8017f14 <_Bfree>
 8018404:	4628      	mov	r0, r5
 8018406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801840a:	f842 0f04 	str.w	r0, [r2, #4]!
 801840e:	3301      	adds	r3, #1
 8018410:	e7c1      	b.n	8018396 <__lshift+0x4a>
 8018412:	3904      	subs	r1, #4
 8018414:	f853 2b04 	ldr.w	r2, [r3], #4
 8018418:	f841 2f04 	str.w	r2, [r1, #4]!
 801841c:	4298      	cmp	r0, r3
 801841e:	d8f9      	bhi.n	8018414 <__lshift+0xc8>
 8018420:	e7ea      	b.n	80183f8 <__lshift+0xac>
 8018422:	bf00      	nop
 8018424:	0805bcca 	.word	0x0805bcca
 8018428:	0805be18 	.word	0x0805be18

0801842c <__mcmp>:
 801842c:	b530      	push	{r4, r5, lr}
 801842e:	6902      	ldr	r2, [r0, #16]
 8018430:	690c      	ldr	r4, [r1, #16]
 8018432:	1b12      	subs	r2, r2, r4
 8018434:	d10e      	bne.n	8018454 <__mcmp+0x28>
 8018436:	f100 0314 	add.w	r3, r0, #20
 801843a:	3114      	adds	r1, #20
 801843c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018440:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018444:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018448:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801844c:	42a5      	cmp	r5, r4
 801844e:	d003      	beq.n	8018458 <__mcmp+0x2c>
 8018450:	d305      	bcc.n	801845e <__mcmp+0x32>
 8018452:	2201      	movs	r2, #1
 8018454:	4610      	mov	r0, r2
 8018456:	bd30      	pop	{r4, r5, pc}
 8018458:	4283      	cmp	r3, r0
 801845a:	d3f3      	bcc.n	8018444 <__mcmp+0x18>
 801845c:	e7fa      	b.n	8018454 <__mcmp+0x28>
 801845e:	f04f 32ff 	mov.w	r2, #4294967295
 8018462:	e7f7      	b.n	8018454 <__mcmp+0x28>

08018464 <__mdiff>:
 8018464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018468:	460c      	mov	r4, r1
 801846a:	4606      	mov	r6, r0
 801846c:	4611      	mov	r1, r2
 801846e:	4620      	mov	r0, r4
 8018470:	4690      	mov	r8, r2
 8018472:	f7ff ffdb 	bl	801842c <__mcmp>
 8018476:	1e05      	subs	r5, r0, #0
 8018478:	d110      	bne.n	801849c <__mdiff+0x38>
 801847a:	4629      	mov	r1, r5
 801847c:	4630      	mov	r0, r6
 801847e:	f7ff fd09 	bl	8017e94 <_Balloc>
 8018482:	b930      	cbnz	r0, 8018492 <__mdiff+0x2e>
 8018484:	4b3a      	ldr	r3, [pc, #232]	; (8018570 <__mdiff+0x10c>)
 8018486:	4602      	mov	r2, r0
 8018488:	f240 2132 	movw	r1, #562	; 0x232
 801848c:	4839      	ldr	r0, [pc, #228]	; (8018574 <__mdiff+0x110>)
 801848e:	f7fb fb7f 	bl	8013b90 <__assert_func>
 8018492:	2301      	movs	r3, #1
 8018494:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801849c:	bfa4      	itt	ge
 801849e:	4643      	movge	r3, r8
 80184a0:	46a0      	movge	r8, r4
 80184a2:	4630      	mov	r0, r6
 80184a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80184a8:	bfa6      	itte	ge
 80184aa:	461c      	movge	r4, r3
 80184ac:	2500      	movge	r5, #0
 80184ae:	2501      	movlt	r5, #1
 80184b0:	f7ff fcf0 	bl	8017e94 <_Balloc>
 80184b4:	b920      	cbnz	r0, 80184c0 <__mdiff+0x5c>
 80184b6:	4b2e      	ldr	r3, [pc, #184]	; (8018570 <__mdiff+0x10c>)
 80184b8:	4602      	mov	r2, r0
 80184ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80184be:	e7e5      	b.n	801848c <__mdiff+0x28>
 80184c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80184c4:	6926      	ldr	r6, [r4, #16]
 80184c6:	60c5      	str	r5, [r0, #12]
 80184c8:	f104 0914 	add.w	r9, r4, #20
 80184cc:	f108 0514 	add.w	r5, r8, #20
 80184d0:	f100 0e14 	add.w	lr, r0, #20
 80184d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80184d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80184dc:	f108 0210 	add.w	r2, r8, #16
 80184e0:	46f2      	mov	sl, lr
 80184e2:	2100      	movs	r1, #0
 80184e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80184e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80184ec:	fa1f f883 	uxth.w	r8, r3
 80184f0:	fa11 f18b 	uxtah	r1, r1, fp
 80184f4:	0c1b      	lsrs	r3, r3, #16
 80184f6:	eba1 0808 	sub.w	r8, r1, r8
 80184fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80184fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018502:	fa1f f888 	uxth.w	r8, r8
 8018506:	1419      	asrs	r1, r3, #16
 8018508:	454e      	cmp	r6, r9
 801850a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801850e:	f84a 3b04 	str.w	r3, [sl], #4
 8018512:	d8e7      	bhi.n	80184e4 <__mdiff+0x80>
 8018514:	1b33      	subs	r3, r6, r4
 8018516:	3b15      	subs	r3, #21
 8018518:	f023 0303 	bic.w	r3, r3, #3
 801851c:	3304      	adds	r3, #4
 801851e:	3415      	adds	r4, #21
 8018520:	42a6      	cmp	r6, r4
 8018522:	bf38      	it	cc
 8018524:	2304      	movcc	r3, #4
 8018526:	441d      	add	r5, r3
 8018528:	4473      	add	r3, lr
 801852a:	469e      	mov	lr, r3
 801852c:	462e      	mov	r6, r5
 801852e:	4566      	cmp	r6, ip
 8018530:	d30e      	bcc.n	8018550 <__mdiff+0xec>
 8018532:	f10c 0203 	add.w	r2, ip, #3
 8018536:	1b52      	subs	r2, r2, r5
 8018538:	f022 0203 	bic.w	r2, r2, #3
 801853c:	3d03      	subs	r5, #3
 801853e:	45ac      	cmp	ip, r5
 8018540:	bf38      	it	cc
 8018542:	2200      	movcc	r2, #0
 8018544:	441a      	add	r2, r3
 8018546:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801854a:	b17b      	cbz	r3, 801856c <__mdiff+0x108>
 801854c:	6107      	str	r7, [r0, #16]
 801854e:	e7a3      	b.n	8018498 <__mdiff+0x34>
 8018550:	f856 8b04 	ldr.w	r8, [r6], #4
 8018554:	fa11 f288 	uxtah	r2, r1, r8
 8018558:	1414      	asrs	r4, r2, #16
 801855a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801855e:	b292      	uxth	r2, r2
 8018560:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018564:	f84e 2b04 	str.w	r2, [lr], #4
 8018568:	1421      	asrs	r1, r4, #16
 801856a:	e7e0      	b.n	801852e <__mdiff+0xca>
 801856c:	3f01      	subs	r7, #1
 801856e:	e7ea      	b.n	8018546 <__mdiff+0xe2>
 8018570:	0805bcca 	.word	0x0805bcca
 8018574:	0805be18 	.word	0x0805be18

08018578 <__ulp>:
 8018578:	b082      	sub	sp, #8
 801857a:	ed8d 0b00 	vstr	d0, [sp]
 801857e:	9b01      	ldr	r3, [sp, #4]
 8018580:	4912      	ldr	r1, [pc, #72]	; (80185cc <__ulp+0x54>)
 8018582:	4019      	ands	r1, r3
 8018584:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018588:	2900      	cmp	r1, #0
 801858a:	dd05      	ble.n	8018598 <__ulp+0x20>
 801858c:	2200      	movs	r2, #0
 801858e:	460b      	mov	r3, r1
 8018590:	ec43 2b10 	vmov	d0, r2, r3
 8018594:	b002      	add	sp, #8
 8018596:	4770      	bx	lr
 8018598:	4249      	negs	r1, r1
 801859a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801859e:	ea4f 5021 	mov.w	r0, r1, asr #20
 80185a2:	f04f 0200 	mov.w	r2, #0
 80185a6:	f04f 0300 	mov.w	r3, #0
 80185aa:	da04      	bge.n	80185b6 <__ulp+0x3e>
 80185ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80185b0:	fa41 f300 	asr.w	r3, r1, r0
 80185b4:	e7ec      	b.n	8018590 <__ulp+0x18>
 80185b6:	f1a0 0114 	sub.w	r1, r0, #20
 80185ba:	291e      	cmp	r1, #30
 80185bc:	bfda      	itte	le
 80185be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80185c2:	fa20 f101 	lsrle.w	r1, r0, r1
 80185c6:	2101      	movgt	r1, #1
 80185c8:	460a      	mov	r2, r1
 80185ca:	e7e1      	b.n	8018590 <__ulp+0x18>
 80185cc:	7ff00000 	.word	0x7ff00000

080185d0 <__b2d>:
 80185d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185d2:	6905      	ldr	r5, [r0, #16]
 80185d4:	f100 0714 	add.w	r7, r0, #20
 80185d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80185dc:	1f2e      	subs	r6, r5, #4
 80185de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80185e2:	4620      	mov	r0, r4
 80185e4:	f7ff fd48 	bl	8018078 <__hi0bits>
 80185e8:	f1c0 0320 	rsb	r3, r0, #32
 80185ec:	280a      	cmp	r0, #10
 80185ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801866c <__b2d+0x9c>
 80185f2:	600b      	str	r3, [r1, #0]
 80185f4:	dc14      	bgt.n	8018620 <__b2d+0x50>
 80185f6:	f1c0 0e0b 	rsb	lr, r0, #11
 80185fa:	fa24 f10e 	lsr.w	r1, r4, lr
 80185fe:	42b7      	cmp	r7, r6
 8018600:	ea41 030c 	orr.w	r3, r1, ip
 8018604:	bf34      	ite	cc
 8018606:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801860a:	2100      	movcs	r1, #0
 801860c:	3015      	adds	r0, #21
 801860e:	fa04 f000 	lsl.w	r0, r4, r0
 8018612:	fa21 f10e 	lsr.w	r1, r1, lr
 8018616:	ea40 0201 	orr.w	r2, r0, r1
 801861a:	ec43 2b10 	vmov	d0, r2, r3
 801861e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018620:	42b7      	cmp	r7, r6
 8018622:	bf3a      	itte	cc
 8018624:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018628:	f1a5 0608 	subcc.w	r6, r5, #8
 801862c:	2100      	movcs	r1, #0
 801862e:	380b      	subs	r0, #11
 8018630:	d017      	beq.n	8018662 <__b2d+0x92>
 8018632:	f1c0 0c20 	rsb	ip, r0, #32
 8018636:	fa04 f500 	lsl.w	r5, r4, r0
 801863a:	42be      	cmp	r6, r7
 801863c:	fa21 f40c 	lsr.w	r4, r1, ip
 8018640:	ea45 0504 	orr.w	r5, r5, r4
 8018644:	bf8c      	ite	hi
 8018646:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801864a:	2400      	movls	r4, #0
 801864c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018650:	fa01 f000 	lsl.w	r0, r1, r0
 8018654:	fa24 f40c 	lsr.w	r4, r4, ip
 8018658:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801865c:	ea40 0204 	orr.w	r2, r0, r4
 8018660:	e7db      	b.n	801861a <__b2d+0x4a>
 8018662:	ea44 030c 	orr.w	r3, r4, ip
 8018666:	460a      	mov	r2, r1
 8018668:	e7d7      	b.n	801861a <__b2d+0x4a>
 801866a:	bf00      	nop
 801866c:	3ff00000 	.word	0x3ff00000

08018670 <__d2b>:
 8018670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018674:	4689      	mov	r9, r1
 8018676:	2101      	movs	r1, #1
 8018678:	ec57 6b10 	vmov	r6, r7, d0
 801867c:	4690      	mov	r8, r2
 801867e:	f7ff fc09 	bl	8017e94 <_Balloc>
 8018682:	4604      	mov	r4, r0
 8018684:	b930      	cbnz	r0, 8018694 <__d2b+0x24>
 8018686:	4602      	mov	r2, r0
 8018688:	4b25      	ldr	r3, [pc, #148]	; (8018720 <__d2b+0xb0>)
 801868a:	4826      	ldr	r0, [pc, #152]	; (8018724 <__d2b+0xb4>)
 801868c:	f240 310a 	movw	r1, #778	; 0x30a
 8018690:	f7fb fa7e 	bl	8013b90 <__assert_func>
 8018694:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801869c:	bb35      	cbnz	r5, 80186ec <__d2b+0x7c>
 801869e:	2e00      	cmp	r6, #0
 80186a0:	9301      	str	r3, [sp, #4]
 80186a2:	d028      	beq.n	80186f6 <__d2b+0x86>
 80186a4:	4668      	mov	r0, sp
 80186a6:	9600      	str	r6, [sp, #0]
 80186a8:	f7ff fd06 	bl	80180b8 <__lo0bits>
 80186ac:	9900      	ldr	r1, [sp, #0]
 80186ae:	b300      	cbz	r0, 80186f2 <__d2b+0x82>
 80186b0:	9a01      	ldr	r2, [sp, #4]
 80186b2:	f1c0 0320 	rsb	r3, r0, #32
 80186b6:	fa02 f303 	lsl.w	r3, r2, r3
 80186ba:	430b      	orrs	r3, r1
 80186bc:	40c2      	lsrs	r2, r0
 80186be:	6163      	str	r3, [r4, #20]
 80186c0:	9201      	str	r2, [sp, #4]
 80186c2:	9b01      	ldr	r3, [sp, #4]
 80186c4:	61a3      	str	r3, [r4, #24]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	bf14      	ite	ne
 80186ca:	2202      	movne	r2, #2
 80186cc:	2201      	moveq	r2, #1
 80186ce:	6122      	str	r2, [r4, #16]
 80186d0:	b1d5      	cbz	r5, 8018708 <__d2b+0x98>
 80186d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80186d6:	4405      	add	r5, r0
 80186d8:	f8c9 5000 	str.w	r5, [r9]
 80186dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80186e0:	f8c8 0000 	str.w	r0, [r8]
 80186e4:	4620      	mov	r0, r4
 80186e6:	b003      	add	sp, #12
 80186e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80186f0:	e7d5      	b.n	801869e <__d2b+0x2e>
 80186f2:	6161      	str	r1, [r4, #20]
 80186f4:	e7e5      	b.n	80186c2 <__d2b+0x52>
 80186f6:	a801      	add	r0, sp, #4
 80186f8:	f7ff fcde 	bl	80180b8 <__lo0bits>
 80186fc:	9b01      	ldr	r3, [sp, #4]
 80186fe:	6163      	str	r3, [r4, #20]
 8018700:	2201      	movs	r2, #1
 8018702:	6122      	str	r2, [r4, #16]
 8018704:	3020      	adds	r0, #32
 8018706:	e7e3      	b.n	80186d0 <__d2b+0x60>
 8018708:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801870c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018710:	f8c9 0000 	str.w	r0, [r9]
 8018714:	6918      	ldr	r0, [r3, #16]
 8018716:	f7ff fcaf 	bl	8018078 <__hi0bits>
 801871a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801871e:	e7df      	b.n	80186e0 <__d2b+0x70>
 8018720:	0805bcca 	.word	0x0805bcca
 8018724:	0805be18 	.word	0x0805be18

08018728 <__ratio>:
 8018728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801872c:	4688      	mov	r8, r1
 801872e:	4669      	mov	r1, sp
 8018730:	4681      	mov	r9, r0
 8018732:	f7ff ff4d 	bl	80185d0 <__b2d>
 8018736:	a901      	add	r1, sp, #4
 8018738:	4640      	mov	r0, r8
 801873a:	ec55 4b10 	vmov	r4, r5, d0
 801873e:	f7ff ff47 	bl	80185d0 <__b2d>
 8018742:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018746:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801874a:	eba3 0c02 	sub.w	ip, r3, r2
 801874e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018752:	1a9b      	subs	r3, r3, r2
 8018754:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018758:	ec51 0b10 	vmov	r0, r1, d0
 801875c:	2b00      	cmp	r3, #0
 801875e:	bfd6      	itet	le
 8018760:	460a      	movle	r2, r1
 8018762:	462a      	movgt	r2, r5
 8018764:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018768:	468b      	mov	fp, r1
 801876a:	462f      	mov	r7, r5
 801876c:	bfd4      	ite	le
 801876e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018772:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018776:	4620      	mov	r0, r4
 8018778:	ee10 2a10 	vmov	r2, s0
 801877c:	465b      	mov	r3, fp
 801877e:	4639      	mov	r1, r7
 8018780:	f7e8 f884 	bl	800088c <__aeabi_ddiv>
 8018784:	ec41 0b10 	vmov	d0, r0, r1
 8018788:	b003      	add	sp, #12
 801878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801878e <__copybits>:
 801878e:	3901      	subs	r1, #1
 8018790:	b570      	push	{r4, r5, r6, lr}
 8018792:	1149      	asrs	r1, r1, #5
 8018794:	6914      	ldr	r4, [r2, #16]
 8018796:	3101      	adds	r1, #1
 8018798:	f102 0314 	add.w	r3, r2, #20
 801879c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80187a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80187a4:	1f05      	subs	r5, r0, #4
 80187a6:	42a3      	cmp	r3, r4
 80187a8:	d30c      	bcc.n	80187c4 <__copybits+0x36>
 80187aa:	1aa3      	subs	r3, r4, r2
 80187ac:	3b11      	subs	r3, #17
 80187ae:	f023 0303 	bic.w	r3, r3, #3
 80187b2:	3211      	adds	r2, #17
 80187b4:	42a2      	cmp	r2, r4
 80187b6:	bf88      	it	hi
 80187b8:	2300      	movhi	r3, #0
 80187ba:	4418      	add	r0, r3
 80187bc:	2300      	movs	r3, #0
 80187be:	4288      	cmp	r0, r1
 80187c0:	d305      	bcc.n	80187ce <__copybits+0x40>
 80187c2:	bd70      	pop	{r4, r5, r6, pc}
 80187c4:	f853 6b04 	ldr.w	r6, [r3], #4
 80187c8:	f845 6f04 	str.w	r6, [r5, #4]!
 80187cc:	e7eb      	b.n	80187a6 <__copybits+0x18>
 80187ce:	f840 3b04 	str.w	r3, [r0], #4
 80187d2:	e7f4      	b.n	80187be <__copybits+0x30>

080187d4 <__any_on>:
 80187d4:	f100 0214 	add.w	r2, r0, #20
 80187d8:	6900      	ldr	r0, [r0, #16]
 80187da:	114b      	asrs	r3, r1, #5
 80187dc:	4298      	cmp	r0, r3
 80187de:	b510      	push	{r4, lr}
 80187e0:	db11      	blt.n	8018806 <__any_on+0x32>
 80187e2:	dd0a      	ble.n	80187fa <__any_on+0x26>
 80187e4:	f011 011f 	ands.w	r1, r1, #31
 80187e8:	d007      	beq.n	80187fa <__any_on+0x26>
 80187ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80187ee:	fa24 f001 	lsr.w	r0, r4, r1
 80187f2:	fa00 f101 	lsl.w	r1, r0, r1
 80187f6:	428c      	cmp	r4, r1
 80187f8:	d10b      	bne.n	8018812 <__any_on+0x3e>
 80187fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80187fe:	4293      	cmp	r3, r2
 8018800:	d803      	bhi.n	801880a <__any_on+0x36>
 8018802:	2000      	movs	r0, #0
 8018804:	bd10      	pop	{r4, pc}
 8018806:	4603      	mov	r3, r0
 8018808:	e7f7      	b.n	80187fa <__any_on+0x26>
 801880a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801880e:	2900      	cmp	r1, #0
 8018810:	d0f5      	beq.n	80187fe <__any_on+0x2a>
 8018812:	2001      	movs	r0, #1
 8018814:	e7f6      	b.n	8018804 <__any_on+0x30>

08018816 <_calloc_r>:
 8018816:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018818:	fba1 2402 	umull	r2, r4, r1, r2
 801881c:	b94c      	cbnz	r4, 8018832 <_calloc_r+0x1c>
 801881e:	4611      	mov	r1, r2
 8018820:	9201      	str	r2, [sp, #4]
 8018822:	f7fb fd1b 	bl	801425c <_malloc_r>
 8018826:	9a01      	ldr	r2, [sp, #4]
 8018828:	4605      	mov	r5, r0
 801882a:	b930      	cbnz	r0, 801883a <_calloc_r+0x24>
 801882c:	4628      	mov	r0, r5
 801882e:	b003      	add	sp, #12
 8018830:	bd30      	pop	{r4, r5, pc}
 8018832:	220c      	movs	r2, #12
 8018834:	6002      	str	r2, [r0, #0]
 8018836:	2500      	movs	r5, #0
 8018838:	e7f8      	b.n	801882c <_calloc_r+0x16>
 801883a:	4621      	mov	r1, r4
 801883c:	f7fb fa28 	bl	8013c90 <memset>
 8018840:	e7f4      	b.n	801882c <_calloc_r+0x16>

08018842 <_realloc_r>:
 8018842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018846:	4680      	mov	r8, r0
 8018848:	4614      	mov	r4, r2
 801884a:	460e      	mov	r6, r1
 801884c:	b921      	cbnz	r1, 8018858 <_realloc_r+0x16>
 801884e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018852:	4611      	mov	r1, r2
 8018854:	f7fb bd02 	b.w	801425c <_malloc_r>
 8018858:	b92a      	cbnz	r2, 8018866 <_realloc_r+0x24>
 801885a:	f7fb fc93 	bl	8014184 <_free_r>
 801885e:	4625      	mov	r5, r4
 8018860:	4628      	mov	r0, r5
 8018862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018866:	f000 fe3b 	bl	80194e0 <_malloc_usable_size_r>
 801886a:	4284      	cmp	r4, r0
 801886c:	4607      	mov	r7, r0
 801886e:	d802      	bhi.n	8018876 <_realloc_r+0x34>
 8018870:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018874:	d812      	bhi.n	801889c <_realloc_r+0x5a>
 8018876:	4621      	mov	r1, r4
 8018878:	4640      	mov	r0, r8
 801887a:	f7fb fcef 	bl	801425c <_malloc_r>
 801887e:	4605      	mov	r5, r0
 8018880:	2800      	cmp	r0, #0
 8018882:	d0ed      	beq.n	8018860 <_realloc_r+0x1e>
 8018884:	42bc      	cmp	r4, r7
 8018886:	4622      	mov	r2, r4
 8018888:	4631      	mov	r1, r6
 801888a:	bf28      	it	cs
 801888c:	463a      	movcs	r2, r7
 801888e:	f7fb f9f1 	bl	8013c74 <memcpy>
 8018892:	4631      	mov	r1, r6
 8018894:	4640      	mov	r0, r8
 8018896:	f7fb fc75 	bl	8014184 <_free_r>
 801889a:	e7e1      	b.n	8018860 <_realloc_r+0x1e>
 801889c:	4635      	mov	r5, r6
 801889e:	e7df      	b.n	8018860 <_realloc_r+0x1e>

080188a0 <__ssputs_r>:
 80188a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188a4:	688e      	ldr	r6, [r1, #8]
 80188a6:	429e      	cmp	r6, r3
 80188a8:	4682      	mov	sl, r0
 80188aa:	460c      	mov	r4, r1
 80188ac:	4690      	mov	r8, r2
 80188ae:	461f      	mov	r7, r3
 80188b0:	d838      	bhi.n	8018924 <__ssputs_r+0x84>
 80188b2:	898a      	ldrh	r2, [r1, #12]
 80188b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80188b8:	d032      	beq.n	8018920 <__ssputs_r+0x80>
 80188ba:	6825      	ldr	r5, [r4, #0]
 80188bc:	6909      	ldr	r1, [r1, #16]
 80188be:	eba5 0901 	sub.w	r9, r5, r1
 80188c2:	6965      	ldr	r5, [r4, #20]
 80188c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80188c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80188cc:	3301      	adds	r3, #1
 80188ce:	444b      	add	r3, r9
 80188d0:	106d      	asrs	r5, r5, #1
 80188d2:	429d      	cmp	r5, r3
 80188d4:	bf38      	it	cc
 80188d6:	461d      	movcc	r5, r3
 80188d8:	0553      	lsls	r3, r2, #21
 80188da:	d531      	bpl.n	8018940 <__ssputs_r+0xa0>
 80188dc:	4629      	mov	r1, r5
 80188de:	f7fb fcbd 	bl	801425c <_malloc_r>
 80188e2:	4606      	mov	r6, r0
 80188e4:	b950      	cbnz	r0, 80188fc <__ssputs_r+0x5c>
 80188e6:	230c      	movs	r3, #12
 80188e8:	f8ca 3000 	str.w	r3, [sl]
 80188ec:	89a3      	ldrh	r3, [r4, #12]
 80188ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188f2:	81a3      	strh	r3, [r4, #12]
 80188f4:	f04f 30ff 	mov.w	r0, #4294967295
 80188f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188fc:	6921      	ldr	r1, [r4, #16]
 80188fe:	464a      	mov	r2, r9
 8018900:	f7fb f9b8 	bl	8013c74 <memcpy>
 8018904:	89a3      	ldrh	r3, [r4, #12]
 8018906:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801890a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801890e:	81a3      	strh	r3, [r4, #12]
 8018910:	6126      	str	r6, [r4, #16]
 8018912:	6165      	str	r5, [r4, #20]
 8018914:	444e      	add	r6, r9
 8018916:	eba5 0509 	sub.w	r5, r5, r9
 801891a:	6026      	str	r6, [r4, #0]
 801891c:	60a5      	str	r5, [r4, #8]
 801891e:	463e      	mov	r6, r7
 8018920:	42be      	cmp	r6, r7
 8018922:	d900      	bls.n	8018926 <__ssputs_r+0x86>
 8018924:	463e      	mov	r6, r7
 8018926:	6820      	ldr	r0, [r4, #0]
 8018928:	4632      	mov	r2, r6
 801892a:	4641      	mov	r1, r8
 801892c:	f7ff fa8c 	bl	8017e48 <memmove>
 8018930:	68a3      	ldr	r3, [r4, #8]
 8018932:	1b9b      	subs	r3, r3, r6
 8018934:	60a3      	str	r3, [r4, #8]
 8018936:	6823      	ldr	r3, [r4, #0]
 8018938:	4433      	add	r3, r6
 801893a:	6023      	str	r3, [r4, #0]
 801893c:	2000      	movs	r0, #0
 801893e:	e7db      	b.n	80188f8 <__ssputs_r+0x58>
 8018940:	462a      	mov	r2, r5
 8018942:	f7ff ff7e 	bl	8018842 <_realloc_r>
 8018946:	4606      	mov	r6, r0
 8018948:	2800      	cmp	r0, #0
 801894a:	d1e1      	bne.n	8018910 <__ssputs_r+0x70>
 801894c:	6921      	ldr	r1, [r4, #16]
 801894e:	4650      	mov	r0, sl
 8018950:	f7fb fc18 	bl	8014184 <_free_r>
 8018954:	e7c7      	b.n	80188e6 <__ssputs_r+0x46>
	...

08018958 <_svfiprintf_r>:
 8018958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801895c:	4698      	mov	r8, r3
 801895e:	898b      	ldrh	r3, [r1, #12]
 8018960:	061b      	lsls	r3, r3, #24
 8018962:	b09d      	sub	sp, #116	; 0x74
 8018964:	4607      	mov	r7, r0
 8018966:	460d      	mov	r5, r1
 8018968:	4614      	mov	r4, r2
 801896a:	d50e      	bpl.n	801898a <_svfiprintf_r+0x32>
 801896c:	690b      	ldr	r3, [r1, #16]
 801896e:	b963      	cbnz	r3, 801898a <_svfiprintf_r+0x32>
 8018970:	2140      	movs	r1, #64	; 0x40
 8018972:	f7fb fc73 	bl	801425c <_malloc_r>
 8018976:	6028      	str	r0, [r5, #0]
 8018978:	6128      	str	r0, [r5, #16]
 801897a:	b920      	cbnz	r0, 8018986 <_svfiprintf_r+0x2e>
 801897c:	230c      	movs	r3, #12
 801897e:	603b      	str	r3, [r7, #0]
 8018980:	f04f 30ff 	mov.w	r0, #4294967295
 8018984:	e0d1      	b.n	8018b2a <_svfiprintf_r+0x1d2>
 8018986:	2340      	movs	r3, #64	; 0x40
 8018988:	616b      	str	r3, [r5, #20]
 801898a:	2300      	movs	r3, #0
 801898c:	9309      	str	r3, [sp, #36]	; 0x24
 801898e:	2320      	movs	r3, #32
 8018990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018994:	f8cd 800c 	str.w	r8, [sp, #12]
 8018998:	2330      	movs	r3, #48	; 0x30
 801899a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018b44 <_svfiprintf_r+0x1ec>
 801899e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80189a2:	f04f 0901 	mov.w	r9, #1
 80189a6:	4623      	mov	r3, r4
 80189a8:	469a      	mov	sl, r3
 80189aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80189ae:	b10a      	cbz	r2, 80189b4 <_svfiprintf_r+0x5c>
 80189b0:	2a25      	cmp	r2, #37	; 0x25
 80189b2:	d1f9      	bne.n	80189a8 <_svfiprintf_r+0x50>
 80189b4:	ebba 0b04 	subs.w	fp, sl, r4
 80189b8:	d00b      	beq.n	80189d2 <_svfiprintf_r+0x7a>
 80189ba:	465b      	mov	r3, fp
 80189bc:	4622      	mov	r2, r4
 80189be:	4629      	mov	r1, r5
 80189c0:	4638      	mov	r0, r7
 80189c2:	f7ff ff6d 	bl	80188a0 <__ssputs_r>
 80189c6:	3001      	adds	r0, #1
 80189c8:	f000 80aa 	beq.w	8018b20 <_svfiprintf_r+0x1c8>
 80189cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80189ce:	445a      	add	r2, fp
 80189d0:	9209      	str	r2, [sp, #36]	; 0x24
 80189d2:	f89a 3000 	ldrb.w	r3, [sl]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	f000 80a2 	beq.w	8018b20 <_svfiprintf_r+0x1c8>
 80189dc:	2300      	movs	r3, #0
 80189de:	f04f 32ff 	mov.w	r2, #4294967295
 80189e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189e6:	f10a 0a01 	add.w	sl, sl, #1
 80189ea:	9304      	str	r3, [sp, #16]
 80189ec:	9307      	str	r3, [sp, #28]
 80189ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80189f2:	931a      	str	r3, [sp, #104]	; 0x68
 80189f4:	4654      	mov	r4, sl
 80189f6:	2205      	movs	r2, #5
 80189f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189fc:	4851      	ldr	r0, [pc, #324]	; (8018b44 <_svfiprintf_r+0x1ec>)
 80189fe:	f7e7 fc0f 	bl	8000220 <memchr>
 8018a02:	9a04      	ldr	r2, [sp, #16]
 8018a04:	b9d8      	cbnz	r0, 8018a3e <_svfiprintf_r+0xe6>
 8018a06:	06d0      	lsls	r0, r2, #27
 8018a08:	bf44      	itt	mi
 8018a0a:	2320      	movmi	r3, #32
 8018a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018a10:	0711      	lsls	r1, r2, #28
 8018a12:	bf44      	itt	mi
 8018a14:	232b      	movmi	r3, #43	; 0x2b
 8018a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8018a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8018a20:	d015      	beq.n	8018a4e <_svfiprintf_r+0xf6>
 8018a22:	9a07      	ldr	r2, [sp, #28]
 8018a24:	4654      	mov	r4, sl
 8018a26:	2000      	movs	r0, #0
 8018a28:	f04f 0c0a 	mov.w	ip, #10
 8018a2c:	4621      	mov	r1, r4
 8018a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a32:	3b30      	subs	r3, #48	; 0x30
 8018a34:	2b09      	cmp	r3, #9
 8018a36:	d94e      	bls.n	8018ad6 <_svfiprintf_r+0x17e>
 8018a38:	b1b0      	cbz	r0, 8018a68 <_svfiprintf_r+0x110>
 8018a3a:	9207      	str	r2, [sp, #28]
 8018a3c:	e014      	b.n	8018a68 <_svfiprintf_r+0x110>
 8018a3e:	eba0 0308 	sub.w	r3, r0, r8
 8018a42:	fa09 f303 	lsl.w	r3, r9, r3
 8018a46:	4313      	orrs	r3, r2
 8018a48:	9304      	str	r3, [sp, #16]
 8018a4a:	46a2      	mov	sl, r4
 8018a4c:	e7d2      	b.n	80189f4 <_svfiprintf_r+0x9c>
 8018a4e:	9b03      	ldr	r3, [sp, #12]
 8018a50:	1d19      	adds	r1, r3, #4
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	9103      	str	r1, [sp, #12]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	bfbb      	ittet	lt
 8018a5a:	425b      	neglt	r3, r3
 8018a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8018a60:	9307      	strge	r3, [sp, #28]
 8018a62:	9307      	strlt	r3, [sp, #28]
 8018a64:	bfb8      	it	lt
 8018a66:	9204      	strlt	r2, [sp, #16]
 8018a68:	7823      	ldrb	r3, [r4, #0]
 8018a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8018a6c:	d10c      	bne.n	8018a88 <_svfiprintf_r+0x130>
 8018a6e:	7863      	ldrb	r3, [r4, #1]
 8018a70:	2b2a      	cmp	r3, #42	; 0x2a
 8018a72:	d135      	bne.n	8018ae0 <_svfiprintf_r+0x188>
 8018a74:	9b03      	ldr	r3, [sp, #12]
 8018a76:	1d1a      	adds	r2, r3, #4
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	9203      	str	r2, [sp, #12]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	bfb8      	it	lt
 8018a80:	f04f 33ff 	movlt.w	r3, #4294967295
 8018a84:	3402      	adds	r4, #2
 8018a86:	9305      	str	r3, [sp, #20]
 8018a88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018b54 <_svfiprintf_r+0x1fc>
 8018a8c:	7821      	ldrb	r1, [r4, #0]
 8018a8e:	2203      	movs	r2, #3
 8018a90:	4650      	mov	r0, sl
 8018a92:	f7e7 fbc5 	bl	8000220 <memchr>
 8018a96:	b140      	cbz	r0, 8018aaa <_svfiprintf_r+0x152>
 8018a98:	2340      	movs	r3, #64	; 0x40
 8018a9a:	eba0 000a 	sub.w	r0, r0, sl
 8018a9e:	fa03 f000 	lsl.w	r0, r3, r0
 8018aa2:	9b04      	ldr	r3, [sp, #16]
 8018aa4:	4303      	orrs	r3, r0
 8018aa6:	3401      	adds	r4, #1
 8018aa8:	9304      	str	r3, [sp, #16]
 8018aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018aae:	4826      	ldr	r0, [pc, #152]	; (8018b48 <_svfiprintf_r+0x1f0>)
 8018ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018ab4:	2206      	movs	r2, #6
 8018ab6:	f7e7 fbb3 	bl	8000220 <memchr>
 8018aba:	2800      	cmp	r0, #0
 8018abc:	d038      	beq.n	8018b30 <_svfiprintf_r+0x1d8>
 8018abe:	4b23      	ldr	r3, [pc, #140]	; (8018b4c <_svfiprintf_r+0x1f4>)
 8018ac0:	bb1b      	cbnz	r3, 8018b0a <_svfiprintf_r+0x1b2>
 8018ac2:	9b03      	ldr	r3, [sp, #12]
 8018ac4:	3307      	adds	r3, #7
 8018ac6:	f023 0307 	bic.w	r3, r3, #7
 8018aca:	3308      	adds	r3, #8
 8018acc:	9303      	str	r3, [sp, #12]
 8018ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ad0:	4433      	add	r3, r6
 8018ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8018ad4:	e767      	b.n	80189a6 <_svfiprintf_r+0x4e>
 8018ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8018ada:	460c      	mov	r4, r1
 8018adc:	2001      	movs	r0, #1
 8018ade:	e7a5      	b.n	8018a2c <_svfiprintf_r+0xd4>
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	3401      	adds	r4, #1
 8018ae4:	9305      	str	r3, [sp, #20]
 8018ae6:	4619      	mov	r1, r3
 8018ae8:	f04f 0c0a 	mov.w	ip, #10
 8018aec:	4620      	mov	r0, r4
 8018aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018af2:	3a30      	subs	r2, #48	; 0x30
 8018af4:	2a09      	cmp	r2, #9
 8018af6:	d903      	bls.n	8018b00 <_svfiprintf_r+0x1a8>
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d0c5      	beq.n	8018a88 <_svfiprintf_r+0x130>
 8018afc:	9105      	str	r1, [sp, #20]
 8018afe:	e7c3      	b.n	8018a88 <_svfiprintf_r+0x130>
 8018b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8018b04:	4604      	mov	r4, r0
 8018b06:	2301      	movs	r3, #1
 8018b08:	e7f0      	b.n	8018aec <_svfiprintf_r+0x194>
 8018b0a:	ab03      	add	r3, sp, #12
 8018b0c:	9300      	str	r3, [sp, #0]
 8018b0e:	462a      	mov	r2, r5
 8018b10:	4b0f      	ldr	r3, [pc, #60]	; (8018b50 <_svfiprintf_r+0x1f8>)
 8018b12:	a904      	add	r1, sp, #16
 8018b14:	4638      	mov	r0, r7
 8018b16:	f7fb fe0f 	bl	8014738 <_printf_float>
 8018b1a:	1c42      	adds	r2, r0, #1
 8018b1c:	4606      	mov	r6, r0
 8018b1e:	d1d6      	bne.n	8018ace <_svfiprintf_r+0x176>
 8018b20:	89ab      	ldrh	r3, [r5, #12]
 8018b22:	065b      	lsls	r3, r3, #25
 8018b24:	f53f af2c 	bmi.w	8018980 <_svfiprintf_r+0x28>
 8018b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b2a:	b01d      	add	sp, #116	; 0x74
 8018b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b30:	ab03      	add	r3, sp, #12
 8018b32:	9300      	str	r3, [sp, #0]
 8018b34:	462a      	mov	r2, r5
 8018b36:	4b06      	ldr	r3, [pc, #24]	; (8018b50 <_svfiprintf_r+0x1f8>)
 8018b38:	a904      	add	r1, sp, #16
 8018b3a:	4638      	mov	r0, r7
 8018b3c:	f7fc f8a0 	bl	8014c80 <_printf_i>
 8018b40:	e7eb      	b.n	8018b1a <_svfiprintf_r+0x1c2>
 8018b42:	bf00      	nop
 8018b44:	0805ba34 	.word	0x0805ba34
 8018b48:	0805ba3e 	.word	0x0805ba3e
 8018b4c:	08014739 	.word	0x08014739
 8018b50:	080188a1 	.word	0x080188a1
 8018b54:	0805ba3a 	.word	0x0805ba3a

08018b58 <_sungetc_r>:
 8018b58:	b538      	push	{r3, r4, r5, lr}
 8018b5a:	1c4b      	adds	r3, r1, #1
 8018b5c:	4614      	mov	r4, r2
 8018b5e:	d103      	bne.n	8018b68 <_sungetc_r+0x10>
 8018b60:	f04f 35ff 	mov.w	r5, #4294967295
 8018b64:	4628      	mov	r0, r5
 8018b66:	bd38      	pop	{r3, r4, r5, pc}
 8018b68:	8993      	ldrh	r3, [r2, #12]
 8018b6a:	f023 0320 	bic.w	r3, r3, #32
 8018b6e:	8193      	strh	r3, [r2, #12]
 8018b70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b72:	6852      	ldr	r2, [r2, #4]
 8018b74:	b2cd      	uxtb	r5, r1
 8018b76:	b18b      	cbz	r3, 8018b9c <_sungetc_r+0x44>
 8018b78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018b7a:	4293      	cmp	r3, r2
 8018b7c:	dd08      	ble.n	8018b90 <_sungetc_r+0x38>
 8018b7e:	6823      	ldr	r3, [r4, #0]
 8018b80:	1e5a      	subs	r2, r3, #1
 8018b82:	6022      	str	r2, [r4, #0]
 8018b84:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018b88:	6863      	ldr	r3, [r4, #4]
 8018b8a:	3301      	adds	r3, #1
 8018b8c:	6063      	str	r3, [r4, #4]
 8018b8e:	e7e9      	b.n	8018b64 <_sungetc_r+0xc>
 8018b90:	4621      	mov	r1, r4
 8018b92:	f000 fc2f 	bl	80193f4 <__submore>
 8018b96:	2800      	cmp	r0, #0
 8018b98:	d0f1      	beq.n	8018b7e <_sungetc_r+0x26>
 8018b9a:	e7e1      	b.n	8018b60 <_sungetc_r+0x8>
 8018b9c:	6921      	ldr	r1, [r4, #16]
 8018b9e:	6823      	ldr	r3, [r4, #0]
 8018ba0:	b151      	cbz	r1, 8018bb8 <_sungetc_r+0x60>
 8018ba2:	4299      	cmp	r1, r3
 8018ba4:	d208      	bcs.n	8018bb8 <_sungetc_r+0x60>
 8018ba6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018baa:	42a9      	cmp	r1, r5
 8018bac:	d104      	bne.n	8018bb8 <_sungetc_r+0x60>
 8018bae:	3b01      	subs	r3, #1
 8018bb0:	3201      	adds	r2, #1
 8018bb2:	6023      	str	r3, [r4, #0]
 8018bb4:	6062      	str	r2, [r4, #4]
 8018bb6:	e7d5      	b.n	8018b64 <_sungetc_r+0xc>
 8018bb8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bc0:	6363      	str	r3, [r4, #52]	; 0x34
 8018bc2:	2303      	movs	r3, #3
 8018bc4:	63a3      	str	r3, [r4, #56]	; 0x38
 8018bc6:	4623      	mov	r3, r4
 8018bc8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018bcc:	6023      	str	r3, [r4, #0]
 8018bce:	2301      	movs	r3, #1
 8018bd0:	e7dc      	b.n	8018b8c <_sungetc_r+0x34>

08018bd2 <__ssrefill_r>:
 8018bd2:	b510      	push	{r4, lr}
 8018bd4:	460c      	mov	r4, r1
 8018bd6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018bd8:	b169      	cbz	r1, 8018bf6 <__ssrefill_r+0x24>
 8018bda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bde:	4299      	cmp	r1, r3
 8018be0:	d001      	beq.n	8018be6 <__ssrefill_r+0x14>
 8018be2:	f7fb facf 	bl	8014184 <_free_r>
 8018be6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018be8:	6063      	str	r3, [r4, #4]
 8018bea:	2000      	movs	r0, #0
 8018bec:	6360      	str	r0, [r4, #52]	; 0x34
 8018bee:	b113      	cbz	r3, 8018bf6 <__ssrefill_r+0x24>
 8018bf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018bf2:	6023      	str	r3, [r4, #0]
 8018bf4:	bd10      	pop	{r4, pc}
 8018bf6:	6923      	ldr	r3, [r4, #16]
 8018bf8:	6023      	str	r3, [r4, #0]
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	6063      	str	r3, [r4, #4]
 8018bfe:	89a3      	ldrh	r3, [r4, #12]
 8018c00:	f043 0320 	orr.w	r3, r3, #32
 8018c04:	81a3      	strh	r3, [r4, #12]
 8018c06:	f04f 30ff 	mov.w	r0, #4294967295
 8018c0a:	e7f3      	b.n	8018bf4 <__ssrefill_r+0x22>

08018c0c <__ssvfiscanf_r>:
 8018c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c10:	460c      	mov	r4, r1
 8018c12:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8018c16:	2100      	movs	r1, #0
 8018c18:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8018c1c:	49a6      	ldr	r1, [pc, #664]	; (8018eb8 <__ssvfiscanf_r+0x2ac>)
 8018c1e:	91a0      	str	r1, [sp, #640]	; 0x280
 8018c20:	f10d 0804 	add.w	r8, sp, #4
 8018c24:	49a5      	ldr	r1, [pc, #660]	; (8018ebc <__ssvfiscanf_r+0x2b0>)
 8018c26:	4fa6      	ldr	r7, [pc, #664]	; (8018ec0 <__ssvfiscanf_r+0x2b4>)
 8018c28:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8018ec4 <__ssvfiscanf_r+0x2b8>
 8018c2c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018c30:	4606      	mov	r6, r0
 8018c32:	91a1      	str	r1, [sp, #644]	; 0x284
 8018c34:	9300      	str	r3, [sp, #0]
 8018c36:	7813      	ldrb	r3, [r2, #0]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	f000 815a 	beq.w	8018ef2 <__ssvfiscanf_r+0x2e6>
 8018c3e:	5dd9      	ldrb	r1, [r3, r7]
 8018c40:	f011 0108 	ands.w	r1, r1, #8
 8018c44:	f102 0501 	add.w	r5, r2, #1
 8018c48:	d019      	beq.n	8018c7e <__ssvfiscanf_r+0x72>
 8018c4a:	6863      	ldr	r3, [r4, #4]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	dd0f      	ble.n	8018c70 <__ssvfiscanf_r+0x64>
 8018c50:	6823      	ldr	r3, [r4, #0]
 8018c52:	781a      	ldrb	r2, [r3, #0]
 8018c54:	5cba      	ldrb	r2, [r7, r2]
 8018c56:	0712      	lsls	r2, r2, #28
 8018c58:	d401      	bmi.n	8018c5e <__ssvfiscanf_r+0x52>
 8018c5a:	462a      	mov	r2, r5
 8018c5c:	e7eb      	b.n	8018c36 <__ssvfiscanf_r+0x2a>
 8018c5e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018c60:	3201      	adds	r2, #1
 8018c62:	9245      	str	r2, [sp, #276]	; 0x114
 8018c64:	6862      	ldr	r2, [r4, #4]
 8018c66:	3301      	adds	r3, #1
 8018c68:	3a01      	subs	r2, #1
 8018c6a:	6062      	str	r2, [r4, #4]
 8018c6c:	6023      	str	r3, [r4, #0]
 8018c6e:	e7ec      	b.n	8018c4a <__ssvfiscanf_r+0x3e>
 8018c70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018c72:	4621      	mov	r1, r4
 8018c74:	4630      	mov	r0, r6
 8018c76:	4798      	blx	r3
 8018c78:	2800      	cmp	r0, #0
 8018c7a:	d0e9      	beq.n	8018c50 <__ssvfiscanf_r+0x44>
 8018c7c:	e7ed      	b.n	8018c5a <__ssvfiscanf_r+0x4e>
 8018c7e:	2b25      	cmp	r3, #37	; 0x25
 8018c80:	d012      	beq.n	8018ca8 <__ssvfiscanf_r+0x9c>
 8018c82:	469a      	mov	sl, r3
 8018c84:	6863      	ldr	r3, [r4, #4]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	f340 8091 	ble.w	8018dae <__ssvfiscanf_r+0x1a2>
 8018c8c:	6822      	ldr	r2, [r4, #0]
 8018c8e:	7813      	ldrb	r3, [r2, #0]
 8018c90:	4553      	cmp	r3, sl
 8018c92:	f040 812e 	bne.w	8018ef2 <__ssvfiscanf_r+0x2e6>
 8018c96:	6863      	ldr	r3, [r4, #4]
 8018c98:	3b01      	subs	r3, #1
 8018c9a:	6063      	str	r3, [r4, #4]
 8018c9c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018c9e:	3201      	adds	r2, #1
 8018ca0:	3301      	adds	r3, #1
 8018ca2:	6022      	str	r2, [r4, #0]
 8018ca4:	9345      	str	r3, [sp, #276]	; 0x114
 8018ca6:	e7d8      	b.n	8018c5a <__ssvfiscanf_r+0x4e>
 8018ca8:	9141      	str	r1, [sp, #260]	; 0x104
 8018caa:	9143      	str	r1, [sp, #268]	; 0x10c
 8018cac:	7853      	ldrb	r3, [r2, #1]
 8018cae:	2b2a      	cmp	r3, #42	; 0x2a
 8018cb0:	bf02      	ittt	eq
 8018cb2:	2310      	moveq	r3, #16
 8018cb4:	1c95      	addeq	r5, r2, #2
 8018cb6:	9341      	streq	r3, [sp, #260]	; 0x104
 8018cb8:	220a      	movs	r2, #10
 8018cba:	46aa      	mov	sl, r5
 8018cbc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8018cc0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8018cc4:	2b09      	cmp	r3, #9
 8018cc6:	d91d      	bls.n	8018d04 <__ssvfiscanf_r+0xf8>
 8018cc8:	487e      	ldr	r0, [pc, #504]	; (8018ec4 <__ssvfiscanf_r+0x2b8>)
 8018cca:	2203      	movs	r2, #3
 8018ccc:	f7e7 faa8 	bl	8000220 <memchr>
 8018cd0:	b140      	cbz	r0, 8018ce4 <__ssvfiscanf_r+0xd8>
 8018cd2:	2301      	movs	r3, #1
 8018cd4:	eba0 0009 	sub.w	r0, r0, r9
 8018cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8018cdc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018cde:	4318      	orrs	r0, r3
 8018ce0:	9041      	str	r0, [sp, #260]	; 0x104
 8018ce2:	4655      	mov	r5, sl
 8018ce4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018ce8:	2b78      	cmp	r3, #120	; 0x78
 8018cea:	d806      	bhi.n	8018cfa <__ssvfiscanf_r+0xee>
 8018cec:	2b57      	cmp	r3, #87	; 0x57
 8018cee:	d810      	bhi.n	8018d12 <__ssvfiscanf_r+0x106>
 8018cf0:	2b25      	cmp	r3, #37	; 0x25
 8018cf2:	d0c6      	beq.n	8018c82 <__ssvfiscanf_r+0x76>
 8018cf4:	d856      	bhi.n	8018da4 <__ssvfiscanf_r+0x198>
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d064      	beq.n	8018dc4 <__ssvfiscanf_r+0x1b8>
 8018cfa:	2303      	movs	r3, #3
 8018cfc:	9347      	str	r3, [sp, #284]	; 0x11c
 8018cfe:	230a      	movs	r3, #10
 8018d00:	9342      	str	r3, [sp, #264]	; 0x108
 8018d02:	e071      	b.n	8018de8 <__ssvfiscanf_r+0x1dc>
 8018d04:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018d06:	fb02 1103 	mla	r1, r2, r3, r1
 8018d0a:	3930      	subs	r1, #48	; 0x30
 8018d0c:	9143      	str	r1, [sp, #268]	; 0x10c
 8018d0e:	4655      	mov	r5, sl
 8018d10:	e7d3      	b.n	8018cba <__ssvfiscanf_r+0xae>
 8018d12:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8018d16:	2a20      	cmp	r2, #32
 8018d18:	d8ef      	bhi.n	8018cfa <__ssvfiscanf_r+0xee>
 8018d1a:	a101      	add	r1, pc, #4	; (adr r1, 8018d20 <__ssvfiscanf_r+0x114>)
 8018d1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018d20:	08018dd3 	.word	0x08018dd3
 8018d24:	08018cfb 	.word	0x08018cfb
 8018d28:	08018cfb 	.word	0x08018cfb
 8018d2c:	08018e31 	.word	0x08018e31
 8018d30:	08018cfb 	.word	0x08018cfb
 8018d34:	08018cfb 	.word	0x08018cfb
 8018d38:	08018cfb 	.word	0x08018cfb
 8018d3c:	08018cfb 	.word	0x08018cfb
 8018d40:	08018cfb 	.word	0x08018cfb
 8018d44:	08018cfb 	.word	0x08018cfb
 8018d48:	08018cfb 	.word	0x08018cfb
 8018d4c:	08018e47 	.word	0x08018e47
 8018d50:	08018e1d 	.word	0x08018e1d
 8018d54:	08018dab 	.word	0x08018dab
 8018d58:	08018dab 	.word	0x08018dab
 8018d5c:	08018dab 	.word	0x08018dab
 8018d60:	08018cfb 	.word	0x08018cfb
 8018d64:	08018e21 	.word	0x08018e21
 8018d68:	08018cfb 	.word	0x08018cfb
 8018d6c:	08018cfb 	.word	0x08018cfb
 8018d70:	08018cfb 	.word	0x08018cfb
 8018d74:	08018cfb 	.word	0x08018cfb
 8018d78:	08018e57 	.word	0x08018e57
 8018d7c:	08018e29 	.word	0x08018e29
 8018d80:	08018dcb 	.word	0x08018dcb
 8018d84:	08018cfb 	.word	0x08018cfb
 8018d88:	08018cfb 	.word	0x08018cfb
 8018d8c:	08018e53 	.word	0x08018e53
 8018d90:	08018cfb 	.word	0x08018cfb
 8018d94:	08018e1d 	.word	0x08018e1d
 8018d98:	08018cfb 	.word	0x08018cfb
 8018d9c:	08018cfb 	.word	0x08018cfb
 8018da0:	08018dd3 	.word	0x08018dd3
 8018da4:	3b45      	subs	r3, #69	; 0x45
 8018da6:	2b02      	cmp	r3, #2
 8018da8:	d8a7      	bhi.n	8018cfa <__ssvfiscanf_r+0xee>
 8018daa:	2305      	movs	r3, #5
 8018dac:	e01b      	b.n	8018de6 <__ssvfiscanf_r+0x1da>
 8018dae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018db0:	4621      	mov	r1, r4
 8018db2:	4630      	mov	r0, r6
 8018db4:	4798      	blx	r3
 8018db6:	2800      	cmp	r0, #0
 8018db8:	f43f af68 	beq.w	8018c8c <__ssvfiscanf_r+0x80>
 8018dbc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018dbe:	2800      	cmp	r0, #0
 8018dc0:	f040 808d 	bne.w	8018ede <__ssvfiscanf_r+0x2d2>
 8018dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8018dc8:	e08f      	b.n	8018eea <__ssvfiscanf_r+0x2de>
 8018dca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018dcc:	f042 0220 	orr.w	r2, r2, #32
 8018dd0:	9241      	str	r2, [sp, #260]	; 0x104
 8018dd2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018dd8:	9241      	str	r2, [sp, #260]	; 0x104
 8018dda:	2210      	movs	r2, #16
 8018ddc:	2b6f      	cmp	r3, #111	; 0x6f
 8018dde:	9242      	str	r2, [sp, #264]	; 0x108
 8018de0:	bf34      	ite	cc
 8018de2:	2303      	movcc	r3, #3
 8018de4:	2304      	movcs	r3, #4
 8018de6:	9347      	str	r3, [sp, #284]	; 0x11c
 8018de8:	6863      	ldr	r3, [r4, #4]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	dd42      	ble.n	8018e74 <__ssvfiscanf_r+0x268>
 8018dee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018df0:	0659      	lsls	r1, r3, #25
 8018df2:	d404      	bmi.n	8018dfe <__ssvfiscanf_r+0x1f2>
 8018df4:	6823      	ldr	r3, [r4, #0]
 8018df6:	781a      	ldrb	r2, [r3, #0]
 8018df8:	5cba      	ldrb	r2, [r7, r2]
 8018dfa:	0712      	lsls	r2, r2, #28
 8018dfc:	d441      	bmi.n	8018e82 <__ssvfiscanf_r+0x276>
 8018dfe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018e00:	2b02      	cmp	r3, #2
 8018e02:	dc50      	bgt.n	8018ea6 <__ssvfiscanf_r+0x29a>
 8018e04:	466b      	mov	r3, sp
 8018e06:	4622      	mov	r2, r4
 8018e08:	a941      	add	r1, sp, #260	; 0x104
 8018e0a:	4630      	mov	r0, r6
 8018e0c:	f000 f876 	bl	8018efc <_scanf_chars>
 8018e10:	2801      	cmp	r0, #1
 8018e12:	d06e      	beq.n	8018ef2 <__ssvfiscanf_r+0x2e6>
 8018e14:	2802      	cmp	r0, #2
 8018e16:	f47f af20 	bne.w	8018c5a <__ssvfiscanf_r+0x4e>
 8018e1a:	e7cf      	b.n	8018dbc <__ssvfiscanf_r+0x1b0>
 8018e1c:	220a      	movs	r2, #10
 8018e1e:	e7dd      	b.n	8018ddc <__ssvfiscanf_r+0x1d0>
 8018e20:	2300      	movs	r3, #0
 8018e22:	9342      	str	r3, [sp, #264]	; 0x108
 8018e24:	2303      	movs	r3, #3
 8018e26:	e7de      	b.n	8018de6 <__ssvfiscanf_r+0x1da>
 8018e28:	2308      	movs	r3, #8
 8018e2a:	9342      	str	r3, [sp, #264]	; 0x108
 8018e2c:	2304      	movs	r3, #4
 8018e2e:	e7da      	b.n	8018de6 <__ssvfiscanf_r+0x1da>
 8018e30:	4629      	mov	r1, r5
 8018e32:	4640      	mov	r0, r8
 8018e34:	f000 f9d0 	bl	80191d8 <__sccl>
 8018e38:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e3e:	9341      	str	r3, [sp, #260]	; 0x104
 8018e40:	4605      	mov	r5, r0
 8018e42:	2301      	movs	r3, #1
 8018e44:	e7cf      	b.n	8018de6 <__ssvfiscanf_r+0x1da>
 8018e46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e4c:	9341      	str	r3, [sp, #260]	; 0x104
 8018e4e:	2300      	movs	r3, #0
 8018e50:	e7c9      	b.n	8018de6 <__ssvfiscanf_r+0x1da>
 8018e52:	2302      	movs	r3, #2
 8018e54:	e7c7      	b.n	8018de6 <__ssvfiscanf_r+0x1da>
 8018e56:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018e58:	06c3      	lsls	r3, r0, #27
 8018e5a:	f53f aefe 	bmi.w	8018c5a <__ssvfiscanf_r+0x4e>
 8018e5e:	9b00      	ldr	r3, [sp, #0]
 8018e60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018e62:	1d19      	adds	r1, r3, #4
 8018e64:	9100      	str	r1, [sp, #0]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	f010 0f01 	tst.w	r0, #1
 8018e6c:	bf14      	ite	ne
 8018e6e:	801a      	strhne	r2, [r3, #0]
 8018e70:	601a      	streq	r2, [r3, #0]
 8018e72:	e6f2      	b.n	8018c5a <__ssvfiscanf_r+0x4e>
 8018e74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018e76:	4621      	mov	r1, r4
 8018e78:	4630      	mov	r0, r6
 8018e7a:	4798      	blx	r3
 8018e7c:	2800      	cmp	r0, #0
 8018e7e:	d0b6      	beq.n	8018dee <__ssvfiscanf_r+0x1e2>
 8018e80:	e79c      	b.n	8018dbc <__ssvfiscanf_r+0x1b0>
 8018e82:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018e84:	3201      	adds	r2, #1
 8018e86:	9245      	str	r2, [sp, #276]	; 0x114
 8018e88:	6862      	ldr	r2, [r4, #4]
 8018e8a:	3a01      	subs	r2, #1
 8018e8c:	2a00      	cmp	r2, #0
 8018e8e:	6062      	str	r2, [r4, #4]
 8018e90:	dd02      	ble.n	8018e98 <__ssvfiscanf_r+0x28c>
 8018e92:	3301      	adds	r3, #1
 8018e94:	6023      	str	r3, [r4, #0]
 8018e96:	e7ad      	b.n	8018df4 <__ssvfiscanf_r+0x1e8>
 8018e98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018e9a:	4621      	mov	r1, r4
 8018e9c:	4630      	mov	r0, r6
 8018e9e:	4798      	blx	r3
 8018ea0:	2800      	cmp	r0, #0
 8018ea2:	d0a7      	beq.n	8018df4 <__ssvfiscanf_r+0x1e8>
 8018ea4:	e78a      	b.n	8018dbc <__ssvfiscanf_r+0x1b0>
 8018ea6:	2b04      	cmp	r3, #4
 8018ea8:	dc0e      	bgt.n	8018ec8 <__ssvfiscanf_r+0x2bc>
 8018eaa:	466b      	mov	r3, sp
 8018eac:	4622      	mov	r2, r4
 8018eae:	a941      	add	r1, sp, #260	; 0x104
 8018eb0:	4630      	mov	r0, r6
 8018eb2:	f000 f87d 	bl	8018fb0 <_scanf_i>
 8018eb6:	e7ab      	b.n	8018e10 <__ssvfiscanf_r+0x204>
 8018eb8:	08018b59 	.word	0x08018b59
 8018ebc:	08018bd3 	.word	0x08018bd3
 8018ec0:	0805bb62 	.word	0x0805bb62
 8018ec4:	0805ba3a 	.word	0x0805ba3a
 8018ec8:	4b0b      	ldr	r3, [pc, #44]	; (8018ef8 <__ssvfiscanf_r+0x2ec>)
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	f43f aec5 	beq.w	8018c5a <__ssvfiscanf_r+0x4e>
 8018ed0:	466b      	mov	r3, sp
 8018ed2:	4622      	mov	r2, r4
 8018ed4:	a941      	add	r1, sp, #260	; 0x104
 8018ed6:	4630      	mov	r0, r6
 8018ed8:	f3af 8000 	nop.w
 8018edc:	e798      	b.n	8018e10 <__ssvfiscanf_r+0x204>
 8018ede:	89a3      	ldrh	r3, [r4, #12]
 8018ee0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018ee4:	bf18      	it	ne
 8018ee6:	f04f 30ff 	movne.w	r0, #4294967295
 8018eea:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8018eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ef2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018ef4:	e7f9      	b.n	8018eea <__ssvfiscanf_r+0x2de>
 8018ef6:	bf00      	nop
 8018ef8:	00000000 	.word	0x00000000

08018efc <_scanf_chars>:
 8018efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f00:	4615      	mov	r5, r2
 8018f02:	688a      	ldr	r2, [r1, #8]
 8018f04:	4680      	mov	r8, r0
 8018f06:	460c      	mov	r4, r1
 8018f08:	b932      	cbnz	r2, 8018f18 <_scanf_chars+0x1c>
 8018f0a:	698a      	ldr	r2, [r1, #24]
 8018f0c:	2a00      	cmp	r2, #0
 8018f0e:	bf0c      	ite	eq
 8018f10:	2201      	moveq	r2, #1
 8018f12:	f04f 32ff 	movne.w	r2, #4294967295
 8018f16:	608a      	str	r2, [r1, #8]
 8018f18:	6822      	ldr	r2, [r4, #0]
 8018f1a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8018fac <_scanf_chars+0xb0>
 8018f1e:	06d1      	lsls	r1, r2, #27
 8018f20:	bf5f      	itttt	pl
 8018f22:	681a      	ldrpl	r2, [r3, #0]
 8018f24:	1d11      	addpl	r1, r2, #4
 8018f26:	6019      	strpl	r1, [r3, #0]
 8018f28:	6816      	ldrpl	r6, [r2, #0]
 8018f2a:	2700      	movs	r7, #0
 8018f2c:	69a0      	ldr	r0, [r4, #24]
 8018f2e:	b188      	cbz	r0, 8018f54 <_scanf_chars+0x58>
 8018f30:	2801      	cmp	r0, #1
 8018f32:	d107      	bne.n	8018f44 <_scanf_chars+0x48>
 8018f34:	682a      	ldr	r2, [r5, #0]
 8018f36:	7811      	ldrb	r1, [r2, #0]
 8018f38:	6962      	ldr	r2, [r4, #20]
 8018f3a:	5c52      	ldrb	r2, [r2, r1]
 8018f3c:	b952      	cbnz	r2, 8018f54 <_scanf_chars+0x58>
 8018f3e:	2f00      	cmp	r7, #0
 8018f40:	d031      	beq.n	8018fa6 <_scanf_chars+0xaa>
 8018f42:	e022      	b.n	8018f8a <_scanf_chars+0x8e>
 8018f44:	2802      	cmp	r0, #2
 8018f46:	d120      	bne.n	8018f8a <_scanf_chars+0x8e>
 8018f48:	682b      	ldr	r3, [r5, #0]
 8018f4a:	781b      	ldrb	r3, [r3, #0]
 8018f4c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8018f50:	071b      	lsls	r3, r3, #28
 8018f52:	d41a      	bmi.n	8018f8a <_scanf_chars+0x8e>
 8018f54:	6823      	ldr	r3, [r4, #0]
 8018f56:	06da      	lsls	r2, r3, #27
 8018f58:	bf5e      	ittt	pl
 8018f5a:	682b      	ldrpl	r3, [r5, #0]
 8018f5c:	781b      	ldrbpl	r3, [r3, #0]
 8018f5e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8018f62:	682a      	ldr	r2, [r5, #0]
 8018f64:	686b      	ldr	r3, [r5, #4]
 8018f66:	3201      	adds	r2, #1
 8018f68:	602a      	str	r2, [r5, #0]
 8018f6a:	68a2      	ldr	r2, [r4, #8]
 8018f6c:	3b01      	subs	r3, #1
 8018f6e:	3a01      	subs	r2, #1
 8018f70:	606b      	str	r3, [r5, #4]
 8018f72:	3701      	adds	r7, #1
 8018f74:	60a2      	str	r2, [r4, #8]
 8018f76:	b142      	cbz	r2, 8018f8a <_scanf_chars+0x8e>
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	dcd7      	bgt.n	8018f2c <_scanf_chars+0x30>
 8018f7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018f80:	4629      	mov	r1, r5
 8018f82:	4640      	mov	r0, r8
 8018f84:	4798      	blx	r3
 8018f86:	2800      	cmp	r0, #0
 8018f88:	d0d0      	beq.n	8018f2c <_scanf_chars+0x30>
 8018f8a:	6823      	ldr	r3, [r4, #0]
 8018f8c:	f013 0310 	ands.w	r3, r3, #16
 8018f90:	d105      	bne.n	8018f9e <_scanf_chars+0xa2>
 8018f92:	68e2      	ldr	r2, [r4, #12]
 8018f94:	3201      	adds	r2, #1
 8018f96:	60e2      	str	r2, [r4, #12]
 8018f98:	69a2      	ldr	r2, [r4, #24]
 8018f9a:	b102      	cbz	r2, 8018f9e <_scanf_chars+0xa2>
 8018f9c:	7033      	strb	r3, [r6, #0]
 8018f9e:	6923      	ldr	r3, [r4, #16]
 8018fa0:	443b      	add	r3, r7
 8018fa2:	6123      	str	r3, [r4, #16]
 8018fa4:	2000      	movs	r0, #0
 8018fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018faa:	bf00      	nop
 8018fac:	0805bb62 	.word	0x0805bb62

08018fb0 <_scanf_i>:
 8018fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb4:	4698      	mov	r8, r3
 8018fb6:	4b76      	ldr	r3, [pc, #472]	; (8019190 <_scanf_i+0x1e0>)
 8018fb8:	460c      	mov	r4, r1
 8018fba:	4682      	mov	sl, r0
 8018fbc:	4616      	mov	r6, r2
 8018fbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018fc2:	b087      	sub	sp, #28
 8018fc4:	ab03      	add	r3, sp, #12
 8018fc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018fca:	4b72      	ldr	r3, [pc, #456]	; (8019194 <_scanf_i+0x1e4>)
 8018fcc:	69a1      	ldr	r1, [r4, #24]
 8018fce:	4a72      	ldr	r2, [pc, #456]	; (8019198 <_scanf_i+0x1e8>)
 8018fd0:	2903      	cmp	r1, #3
 8018fd2:	bf18      	it	ne
 8018fd4:	461a      	movne	r2, r3
 8018fd6:	68a3      	ldr	r3, [r4, #8]
 8018fd8:	9201      	str	r2, [sp, #4]
 8018fda:	1e5a      	subs	r2, r3, #1
 8018fdc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018fe0:	bf88      	it	hi
 8018fe2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018fe6:	4627      	mov	r7, r4
 8018fe8:	bf82      	ittt	hi
 8018fea:	eb03 0905 	addhi.w	r9, r3, r5
 8018fee:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018ff2:	60a3      	strhi	r3, [r4, #8]
 8018ff4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018ff8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018ffc:	bf98      	it	ls
 8018ffe:	f04f 0900 	movls.w	r9, #0
 8019002:	6023      	str	r3, [r4, #0]
 8019004:	463d      	mov	r5, r7
 8019006:	f04f 0b00 	mov.w	fp, #0
 801900a:	6831      	ldr	r1, [r6, #0]
 801900c:	ab03      	add	r3, sp, #12
 801900e:	7809      	ldrb	r1, [r1, #0]
 8019010:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019014:	2202      	movs	r2, #2
 8019016:	f7e7 f903 	bl	8000220 <memchr>
 801901a:	b328      	cbz	r0, 8019068 <_scanf_i+0xb8>
 801901c:	f1bb 0f01 	cmp.w	fp, #1
 8019020:	d159      	bne.n	80190d6 <_scanf_i+0x126>
 8019022:	6862      	ldr	r2, [r4, #4]
 8019024:	b92a      	cbnz	r2, 8019032 <_scanf_i+0x82>
 8019026:	6822      	ldr	r2, [r4, #0]
 8019028:	2308      	movs	r3, #8
 801902a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801902e:	6063      	str	r3, [r4, #4]
 8019030:	6022      	str	r2, [r4, #0]
 8019032:	6822      	ldr	r2, [r4, #0]
 8019034:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019038:	6022      	str	r2, [r4, #0]
 801903a:	68a2      	ldr	r2, [r4, #8]
 801903c:	1e51      	subs	r1, r2, #1
 801903e:	60a1      	str	r1, [r4, #8]
 8019040:	b192      	cbz	r2, 8019068 <_scanf_i+0xb8>
 8019042:	6832      	ldr	r2, [r6, #0]
 8019044:	1c51      	adds	r1, r2, #1
 8019046:	6031      	str	r1, [r6, #0]
 8019048:	7812      	ldrb	r2, [r2, #0]
 801904a:	f805 2b01 	strb.w	r2, [r5], #1
 801904e:	6872      	ldr	r2, [r6, #4]
 8019050:	3a01      	subs	r2, #1
 8019052:	2a00      	cmp	r2, #0
 8019054:	6072      	str	r2, [r6, #4]
 8019056:	dc07      	bgt.n	8019068 <_scanf_i+0xb8>
 8019058:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801905c:	4631      	mov	r1, r6
 801905e:	4650      	mov	r0, sl
 8019060:	4790      	blx	r2
 8019062:	2800      	cmp	r0, #0
 8019064:	f040 8085 	bne.w	8019172 <_scanf_i+0x1c2>
 8019068:	f10b 0b01 	add.w	fp, fp, #1
 801906c:	f1bb 0f03 	cmp.w	fp, #3
 8019070:	d1cb      	bne.n	801900a <_scanf_i+0x5a>
 8019072:	6863      	ldr	r3, [r4, #4]
 8019074:	b90b      	cbnz	r3, 801907a <_scanf_i+0xca>
 8019076:	230a      	movs	r3, #10
 8019078:	6063      	str	r3, [r4, #4]
 801907a:	6863      	ldr	r3, [r4, #4]
 801907c:	4947      	ldr	r1, [pc, #284]	; (801919c <_scanf_i+0x1ec>)
 801907e:	6960      	ldr	r0, [r4, #20]
 8019080:	1ac9      	subs	r1, r1, r3
 8019082:	f000 f8a9 	bl	80191d8 <__sccl>
 8019086:	f04f 0b00 	mov.w	fp, #0
 801908a:	68a3      	ldr	r3, [r4, #8]
 801908c:	6822      	ldr	r2, [r4, #0]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d03d      	beq.n	801910e <_scanf_i+0x15e>
 8019092:	6831      	ldr	r1, [r6, #0]
 8019094:	6960      	ldr	r0, [r4, #20]
 8019096:	f891 c000 	ldrb.w	ip, [r1]
 801909a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801909e:	2800      	cmp	r0, #0
 80190a0:	d035      	beq.n	801910e <_scanf_i+0x15e>
 80190a2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80190a6:	d124      	bne.n	80190f2 <_scanf_i+0x142>
 80190a8:	0510      	lsls	r0, r2, #20
 80190aa:	d522      	bpl.n	80190f2 <_scanf_i+0x142>
 80190ac:	f10b 0b01 	add.w	fp, fp, #1
 80190b0:	f1b9 0f00 	cmp.w	r9, #0
 80190b4:	d003      	beq.n	80190be <_scanf_i+0x10e>
 80190b6:	3301      	adds	r3, #1
 80190b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80190bc:	60a3      	str	r3, [r4, #8]
 80190be:	6873      	ldr	r3, [r6, #4]
 80190c0:	3b01      	subs	r3, #1
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	6073      	str	r3, [r6, #4]
 80190c6:	dd1b      	ble.n	8019100 <_scanf_i+0x150>
 80190c8:	6833      	ldr	r3, [r6, #0]
 80190ca:	3301      	adds	r3, #1
 80190cc:	6033      	str	r3, [r6, #0]
 80190ce:	68a3      	ldr	r3, [r4, #8]
 80190d0:	3b01      	subs	r3, #1
 80190d2:	60a3      	str	r3, [r4, #8]
 80190d4:	e7d9      	b.n	801908a <_scanf_i+0xda>
 80190d6:	f1bb 0f02 	cmp.w	fp, #2
 80190da:	d1ae      	bne.n	801903a <_scanf_i+0x8a>
 80190dc:	6822      	ldr	r2, [r4, #0]
 80190de:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80190e2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80190e6:	d1bf      	bne.n	8019068 <_scanf_i+0xb8>
 80190e8:	2310      	movs	r3, #16
 80190ea:	6063      	str	r3, [r4, #4]
 80190ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80190f0:	e7a2      	b.n	8019038 <_scanf_i+0x88>
 80190f2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80190f6:	6022      	str	r2, [r4, #0]
 80190f8:	780b      	ldrb	r3, [r1, #0]
 80190fa:	f805 3b01 	strb.w	r3, [r5], #1
 80190fe:	e7de      	b.n	80190be <_scanf_i+0x10e>
 8019100:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019104:	4631      	mov	r1, r6
 8019106:	4650      	mov	r0, sl
 8019108:	4798      	blx	r3
 801910a:	2800      	cmp	r0, #0
 801910c:	d0df      	beq.n	80190ce <_scanf_i+0x11e>
 801910e:	6823      	ldr	r3, [r4, #0]
 8019110:	05db      	lsls	r3, r3, #23
 8019112:	d50d      	bpl.n	8019130 <_scanf_i+0x180>
 8019114:	42bd      	cmp	r5, r7
 8019116:	d909      	bls.n	801912c <_scanf_i+0x17c>
 8019118:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801911c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019120:	4632      	mov	r2, r6
 8019122:	4650      	mov	r0, sl
 8019124:	4798      	blx	r3
 8019126:	f105 39ff 	add.w	r9, r5, #4294967295
 801912a:	464d      	mov	r5, r9
 801912c:	42bd      	cmp	r5, r7
 801912e:	d02d      	beq.n	801918c <_scanf_i+0x1dc>
 8019130:	6822      	ldr	r2, [r4, #0]
 8019132:	f012 0210 	ands.w	r2, r2, #16
 8019136:	d113      	bne.n	8019160 <_scanf_i+0x1b0>
 8019138:	702a      	strb	r2, [r5, #0]
 801913a:	6863      	ldr	r3, [r4, #4]
 801913c:	9e01      	ldr	r6, [sp, #4]
 801913e:	4639      	mov	r1, r7
 8019140:	4650      	mov	r0, sl
 8019142:	47b0      	blx	r6
 8019144:	6821      	ldr	r1, [r4, #0]
 8019146:	f8d8 3000 	ldr.w	r3, [r8]
 801914a:	f011 0f20 	tst.w	r1, #32
 801914e:	d013      	beq.n	8019178 <_scanf_i+0x1c8>
 8019150:	1d1a      	adds	r2, r3, #4
 8019152:	f8c8 2000 	str.w	r2, [r8]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	6018      	str	r0, [r3, #0]
 801915a:	68e3      	ldr	r3, [r4, #12]
 801915c:	3301      	adds	r3, #1
 801915e:	60e3      	str	r3, [r4, #12]
 8019160:	1bed      	subs	r5, r5, r7
 8019162:	44ab      	add	fp, r5
 8019164:	6925      	ldr	r5, [r4, #16]
 8019166:	445d      	add	r5, fp
 8019168:	6125      	str	r5, [r4, #16]
 801916a:	2000      	movs	r0, #0
 801916c:	b007      	add	sp, #28
 801916e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019172:	f04f 0b00 	mov.w	fp, #0
 8019176:	e7ca      	b.n	801910e <_scanf_i+0x15e>
 8019178:	1d1a      	adds	r2, r3, #4
 801917a:	f8c8 2000 	str.w	r2, [r8]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	f011 0f01 	tst.w	r1, #1
 8019184:	bf14      	ite	ne
 8019186:	8018      	strhne	r0, [r3, #0]
 8019188:	6018      	streq	r0, [r3, #0]
 801918a:	e7e6      	b.n	801915a <_scanf_i+0x1aa>
 801918c:	2001      	movs	r0, #1
 801918e:	e7ed      	b.n	801916c <_scanf_i+0x1bc>
 8019190:	0801cdf8 	.word	0x0801cdf8
 8019194:	080193dd 	.word	0x080193dd
 8019198:	08015ec1 	.word	0x08015ec1
 801919c:	0805bf8d 	.word	0x0805bf8d

080191a0 <_read_r>:
 80191a0:	b538      	push	{r3, r4, r5, lr}
 80191a2:	4d07      	ldr	r5, [pc, #28]	; (80191c0 <_read_r+0x20>)
 80191a4:	4604      	mov	r4, r0
 80191a6:	4608      	mov	r0, r1
 80191a8:	4611      	mov	r1, r2
 80191aa:	2200      	movs	r2, #0
 80191ac:	602a      	str	r2, [r5, #0]
 80191ae:	461a      	mov	r2, r3
 80191b0:	f7eb fb94 	bl	80048dc <_read>
 80191b4:	1c43      	adds	r3, r0, #1
 80191b6:	d102      	bne.n	80191be <_read_r+0x1e>
 80191b8:	682b      	ldr	r3, [r5, #0]
 80191ba:	b103      	cbz	r3, 80191be <_read_r+0x1e>
 80191bc:	6023      	str	r3, [r4, #0]
 80191be:	bd38      	pop	{r3, r4, r5, pc}
 80191c0:	20005e64 	.word	0x20005e64
 80191c4:	00000000 	.word	0x00000000

080191c8 <nan>:
 80191c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80191d0 <nan+0x8>
 80191cc:	4770      	bx	lr
 80191ce:	bf00      	nop
 80191d0:	00000000 	.word	0x00000000
 80191d4:	7ff80000 	.word	0x7ff80000

080191d8 <__sccl>:
 80191d8:	b570      	push	{r4, r5, r6, lr}
 80191da:	780b      	ldrb	r3, [r1, #0]
 80191dc:	4604      	mov	r4, r0
 80191de:	2b5e      	cmp	r3, #94	; 0x5e
 80191e0:	bf0b      	itete	eq
 80191e2:	784b      	ldrbeq	r3, [r1, #1]
 80191e4:	1c48      	addne	r0, r1, #1
 80191e6:	1c88      	addeq	r0, r1, #2
 80191e8:	2200      	movne	r2, #0
 80191ea:	bf08      	it	eq
 80191ec:	2201      	moveq	r2, #1
 80191ee:	1e61      	subs	r1, r4, #1
 80191f0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80191f4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80191f8:	42a9      	cmp	r1, r5
 80191fa:	d1fb      	bne.n	80191f4 <__sccl+0x1c>
 80191fc:	b90b      	cbnz	r3, 8019202 <__sccl+0x2a>
 80191fe:	3801      	subs	r0, #1
 8019200:	bd70      	pop	{r4, r5, r6, pc}
 8019202:	f082 0201 	eor.w	r2, r2, #1
 8019206:	54e2      	strb	r2, [r4, r3]
 8019208:	4605      	mov	r5, r0
 801920a:	4628      	mov	r0, r5
 801920c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8019210:	292d      	cmp	r1, #45	; 0x2d
 8019212:	d006      	beq.n	8019222 <__sccl+0x4a>
 8019214:	295d      	cmp	r1, #93	; 0x5d
 8019216:	d0f3      	beq.n	8019200 <__sccl+0x28>
 8019218:	b909      	cbnz	r1, 801921e <__sccl+0x46>
 801921a:	4628      	mov	r0, r5
 801921c:	e7f0      	b.n	8019200 <__sccl+0x28>
 801921e:	460b      	mov	r3, r1
 8019220:	e7f1      	b.n	8019206 <__sccl+0x2e>
 8019222:	786e      	ldrb	r6, [r5, #1]
 8019224:	2e5d      	cmp	r6, #93	; 0x5d
 8019226:	d0fa      	beq.n	801921e <__sccl+0x46>
 8019228:	42b3      	cmp	r3, r6
 801922a:	dcf8      	bgt.n	801921e <__sccl+0x46>
 801922c:	3502      	adds	r5, #2
 801922e:	4619      	mov	r1, r3
 8019230:	3101      	adds	r1, #1
 8019232:	428e      	cmp	r6, r1
 8019234:	5462      	strb	r2, [r4, r1]
 8019236:	dcfb      	bgt.n	8019230 <__sccl+0x58>
 8019238:	1af1      	subs	r1, r6, r3
 801923a:	3901      	subs	r1, #1
 801923c:	1c58      	adds	r0, r3, #1
 801923e:	42b3      	cmp	r3, r6
 8019240:	bfa8      	it	ge
 8019242:	2100      	movge	r1, #0
 8019244:	1843      	adds	r3, r0, r1
 8019246:	e7e0      	b.n	801920a <__sccl+0x32>

08019248 <_raise_r>:
 8019248:	291f      	cmp	r1, #31
 801924a:	b538      	push	{r3, r4, r5, lr}
 801924c:	4604      	mov	r4, r0
 801924e:	460d      	mov	r5, r1
 8019250:	d904      	bls.n	801925c <_raise_r+0x14>
 8019252:	2316      	movs	r3, #22
 8019254:	6003      	str	r3, [r0, #0]
 8019256:	f04f 30ff 	mov.w	r0, #4294967295
 801925a:	bd38      	pop	{r3, r4, r5, pc}
 801925c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801925e:	b112      	cbz	r2, 8019266 <_raise_r+0x1e>
 8019260:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019264:	b94b      	cbnz	r3, 801927a <_raise_r+0x32>
 8019266:	4620      	mov	r0, r4
 8019268:	f000 f830 	bl	80192cc <_getpid_r>
 801926c:	462a      	mov	r2, r5
 801926e:	4601      	mov	r1, r0
 8019270:	4620      	mov	r0, r4
 8019272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019276:	f000 b817 	b.w	80192a8 <_kill_r>
 801927a:	2b01      	cmp	r3, #1
 801927c:	d00a      	beq.n	8019294 <_raise_r+0x4c>
 801927e:	1c59      	adds	r1, r3, #1
 8019280:	d103      	bne.n	801928a <_raise_r+0x42>
 8019282:	2316      	movs	r3, #22
 8019284:	6003      	str	r3, [r0, #0]
 8019286:	2001      	movs	r0, #1
 8019288:	e7e7      	b.n	801925a <_raise_r+0x12>
 801928a:	2400      	movs	r4, #0
 801928c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019290:	4628      	mov	r0, r5
 8019292:	4798      	blx	r3
 8019294:	2000      	movs	r0, #0
 8019296:	e7e0      	b.n	801925a <_raise_r+0x12>

08019298 <raise>:
 8019298:	4b02      	ldr	r3, [pc, #8]	; (80192a4 <raise+0xc>)
 801929a:	4601      	mov	r1, r0
 801929c:	6818      	ldr	r0, [r3, #0]
 801929e:	f7ff bfd3 	b.w	8019248 <_raise_r>
 80192a2:	bf00      	nop
 80192a4:	20000324 	.word	0x20000324

080192a8 <_kill_r>:
 80192a8:	b538      	push	{r3, r4, r5, lr}
 80192aa:	4d07      	ldr	r5, [pc, #28]	; (80192c8 <_kill_r+0x20>)
 80192ac:	2300      	movs	r3, #0
 80192ae:	4604      	mov	r4, r0
 80192b0:	4608      	mov	r0, r1
 80192b2:	4611      	mov	r1, r2
 80192b4:	602b      	str	r3, [r5, #0]
 80192b6:	f7eb faf7 	bl	80048a8 <_kill>
 80192ba:	1c43      	adds	r3, r0, #1
 80192bc:	d102      	bne.n	80192c4 <_kill_r+0x1c>
 80192be:	682b      	ldr	r3, [r5, #0]
 80192c0:	b103      	cbz	r3, 80192c4 <_kill_r+0x1c>
 80192c2:	6023      	str	r3, [r4, #0]
 80192c4:	bd38      	pop	{r3, r4, r5, pc}
 80192c6:	bf00      	nop
 80192c8:	20005e64 	.word	0x20005e64

080192cc <_getpid_r>:
 80192cc:	f7eb bae4 	b.w	8004898 <_getpid>

080192d0 <strncmp>:
 80192d0:	b510      	push	{r4, lr}
 80192d2:	b17a      	cbz	r2, 80192f4 <strncmp+0x24>
 80192d4:	4603      	mov	r3, r0
 80192d6:	3901      	subs	r1, #1
 80192d8:	1884      	adds	r4, r0, r2
 80192da:	f813 0b01 	ldrb.w	r0, [r3], #1
 80192de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80192e2:	4290      	cmp	r0, r2
 80192e4:	d101      	bne.n	80192ea <strncmp+0x1a>
 80192e6:	42a3      	cmp	r3, r4
 80192e8:	d101      	bne.n	80192ee <strncmp+0x1e>
 80192ea:	1a80      	subs	r0, r0, r2
 80192ec:	bd10      	pop	{r4, pc}
 80192ee:	2800      	cmp	r0, #0
 80192f0:	d1f3      	bne.n	80192da <strncmp+0xa>
 80192f2:	e7fa      	b.n	80192ea <strncmp+0x1a>
 80192f4:	4610      	mov	r0, r2
 80192f6:	e7f9      	b.n	80192ec <strncmp+0x1c>

080192f8 <_strtoul_l.constprop.0>:
 80192f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192fc:	4f36      	ldr	r7, [pc, #216]	; (80193d8 <_strtoul_l.constprop.0+0xe0>)
 80192fe:	4686      	mov	lr, r0
 8019300:	460d      	mov	r5, r1
 8019302:	4628      	mov	r0, r5
 8019304:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019308:	5de6      	ldrb	r6, [r4, r7]
 801930a:	f016 0608 	ands.w	r6, r6, #8
 801930e:	d1f8      	bne.n	8019302 <_strtoul_l.constprop.0+0xa>
 8019310:	2c2d      	cmp	r4, #45	; 0x2d
 8019312:	d12f      	bne.n	8019374 <_strtoul_l.constprop.0+0x7c>
 8019314:	782c      	ldrb	r4, [r5, #0]
 8019316:	2601      	movs	r6, #1
 8019318:	1c85      	adds	r5, r0, #2
 801931a:	2b00      	cmp	r3, #0
 801931c:	d057      	beq.n	80193ce <_strtoul_l.constprop.0+0xd6>
 801931e:	2b10      	cmp	r3, #16
 8019320:	d109      	bne.n	8019336 <_strtoul_l.constprop.0+0x3e>
 8019322:	2c30      	cmp	r4, #48	; 0x30
 8019324:	d107      	bne.n	8019336 <_strtoul_l.constprop.0+0x3e>
 8019326:	7828      	ldrb	r0, [r5, #0]
 8019328:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801932c:	2858      	cmp	r0, #88	; 0x58
 801932e:	d149      	bne.n	80193c4 <_strtoul_l.constprop.0+0xcc>
 8019330:	786c      	ldrb	r4, [r5, #1]
 8019332:	2310      	movs	r3, #16
 8019334:	3502      	adds	r5, #2
 8019336:	f04f 38ff 	mov.w	r8, #4294967295
 801933a:	2700      	movs	r7, #0
 801933c:	fbb8 f8f3 	udiv	r8, r8, r3
 8019340:	fb03 f908 	mul.w	r9, r3, r8
 8019344:	ea6f 0909 	mvn.w	r9, r9
 8019348:	4638      	mov	r0, r7
 801934a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801934e:	f1bc 0f09 	cmp.w	ip, #9
 8019352:	d814      	bhi.n	801937e <_strtoul_l.constprop.0+0x86>
 8019354:	4664      	mov	r4, ip
 8019356:	42a3      	cmp	r3, r4
 8019358:	dd22      	ble.n	80193a0 <_strtoul_l.constprop.0+0xa8>
 801935a:	2f00      	cmp	r7, #0
 801935c:	db1d      	blt.n	801939a <_strtoul_l.constprop.0+0xa2>
 801935e:	4580      	cmp	r8, r0
 8019360:	d31b      	bcc.n	801939a <_strtoul_l.constprop.0+0xa2>
 8019362:	d101      	bne.n	8019368 <_strtoul_l.constprop.0+0x70>
 8019364:	45a1      	cmp	r9, r4
 8019366:	db18      	blt.n	801939a <_strtoul_l.constprop.0+0xa2>
 8019368:	fb00 4003 	mla	r0, r0, r3, r4
 801936c:	2701      	movs	r7, #1
 801936e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019372:	e7ea      	b.n	801934a <_strtoul_l.constprop.0+0x52>
 8019374:	2c2b      	cmp	r4, #43	; 0x2b
 8019376:	bf04      	itt	eq
 8019378:	782c      	ldrbeq	r4, [r5, #0]
 801937a:	1c85      	addeq	r5, r0, #2
 801937c:	e7cd      	b.n	801931a <_strtoul_l.constprop.0+0x22>
 801937e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019382:	f1bc 0f19 	cmp.w	ip, #25
 8019386:	d801      	bhi.n	801938c <_strtoul_l.constprop.0+0x94>
 8019388:	3c37      	subs	r4, #55	; 0x37
 801938a:	e7e4      	b.n	8019356 <_strtoul_l.constprop.0+0x5e>
 801938c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8019390:	f1bc 0f19 	cmp.w	ip, #25
 8019394:	d804      	bhi.n	80193a0 <_strtoul_l.constprop.0+0xa8>
 8019396:	3c57      	subs	r4, #87	; 0x57
 8019398:	e7dd      	b.n	8019356 <_strtoul_l.constprop.0+0x5e>
 801939a:	f04f 37ff 	mov.w	r7, #4294967295
 801939e:	e7e6      	b.n	801936e <_strtoul_l.constprop.0+0x76>
 80193a0:	2f00      	cmp	r7, #0
 80193a2:	da07      	bge.n	80193b4 <_strtoul_l.constprop.0+0xbc>
 80193a4:	2322      	movs	r3, #34	; 0x22
 80193a6:	f8ce 3000 	str.w	r3, [lr]
 80193aa:	f04f 30ff 	mov.w	r0, #4294967295
 80193ae:	b932      	cbnz	r2, 80193be <_strtoul_l.constprop.0+0xc6>
 80193b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193b4:	b106      	cbz	r6, 80193b8 <_strtoul_l.constprop.0+0xc0>
 80193b6:	4240      	negs	r0, r0
 80193b8:	2a00      	cmp	r2, #0
 80193ba:	d0f9      	beq.n	80193b0 <_strtoul_l.constprop.0+0xb8>
 80193bc:	b107      	cbz	r7, 80193c0 <_strtoul_l.constprop.0+0xc8>
 80193be:	1e69      	subs	r1, r5, #1
 80193c0:	6011      	str	r1, [r2, #0]
 80193c2:	e7f5      	b.n	80193b0 <_strtoul_l.constprop.0+0xb8>
 80193c4:	2430      	movs	r4, #48	; 0x30
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d1b5      	bne.n	8019336 <_strtoul_l.constprop.0+0x3e>
 80193ca:	2308      	movs	r3, #8
 80193cc:	e7b3      	b.n	8019336 <_strtoul_l.constprop.0+0x3e>
 80193ce:	2c30      	cmp	r4, #48	; 0x30
 80193d0:	d0a9      	beq.n	8019326 <_strtoul_l.constprop.0+0x2e>
 80193d2:	230a      	movs	r3, #10
 80193d4:	e7af      	b.n	8019336 <_strtoul_l.constprop.0+0x3e>
 80193d6:	bf00      	nop
 80193d8:	0805bb62 	.word	0x0805bb62

080193dc <_strtoul_r>:
 80193dc:	f7ff bf8c 	b.w	80192f8 <_strtoul_l.constprop.0>

080193e0 <strtoul>:
 80193e0:	4613      	mov	r3, r2
 80193e2:	460a      	mov	r2, r1
 80193e4:	4601      	mov	r1, r0
 80193e6:	4802      	ldr	r0, [pc, #8]	; (80193f0 <strtoul+0x10>)
 80193e8:	6800      	ldr	r0, [r0, #0]
 80193ea:	f7ff bf85 	b.w	80192f8 <_strtoul_l.constprop.0>
 80193ee:	bf00      	nop
 80193f0:	20000324 	.word	0x20000324

080193f4 <__submore>:
 80193f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193f8:	460c      	mov	r4, r1
 80193fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80193fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019400:	4299      	cmp	r1, r3
 8019402:	d11d      	bne.n	8019440 <__submore+0x4c>
 8019404:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019408:	f7fa ff28 	bl	801425c <_malloc_r>
 801940c:	b918      	cbnz	r0, 8019416 <__submore+0x22>
 801940e:	f04f 30ff 	mov.w	r0, #4294967295
 8019412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801941a:	63a3      	str	r3, [r4, #56]	; 0x38
 801941c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019420:	6360      	str	r0, [r4, #52]	; 0x34
 8019422:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019426:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801942a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801942e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019432:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019436:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801943a:	6020      	str	r0, [r4, #0]
 801943c:	2000      	movs	r0, #0
 801943e:	e7e8      	b.n	8019412 <__submore+0x1e>
 8019440:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019442:	0077      	lsls	r7, r6, #1
 8019444:	463a      	mov	r2, r7
 8019446:	f7ff f9fc 	bl	8018842 <_realloc_r>
 801944a:	4605      	mov	r5, r0
 801944c:	2800      	cmp	r0, #0
 801944e:	d0de      	beq.n	801940e <__submore+0x1a>
 8019450:	eb00 0806 	add.w	r8, r0, r6
 8019454:	4601      	mov	r1, r0
 8019456:	4632      	mov	r2, r6
 8019458:	4640      	mov	r0, r8
 801945a:	f7fa fc0b 	bl	8013c74 <memcpy>
 801945e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019462:	f8c4 8000 	str.w	r8, [r4]
 8019466:	e7e9      	b.n	801943c <__submore+0x48>

08019468 <__ascii_wctomb>:
 8019468:	b149      	cbz	r1, 801947e <__ascii_wctomb+0x16>
 801946a:	2aff      	cmp	r2, #255	; 0xff
 801946c:	bf85      	ittet	hi
 801946e:	238a      	movhi	r3, #138	; 0x8a
 8019470:	6003      	strhi	r3, [r0, #0]
 8019472:	700a      	strbls	r2, [r1, #0]
 8019474:	f04f 30ff 	movhi.w	r0, #4294967295
 8019478:	bf98      	it	ls
 801947a:	2001      	movls	r0, #1
 801947c:	4770      	bx	lr
 801947e:	4608      	mov	r0, r1
 8019480:	4770      	bx	lr
	...

08019484 <__env_lock>:
 8019484:	4801      	ldr	r0, [pc, #4]	; (801948c <__env_lock+0x8>)
 8019486:	f7fe bc51 	b.w	8017d2c <__retarget_lock_acquire_recursive>
 801948a:	bf00      	nop
 801948c:	20005e5c 	.word	0x20005e5c

08019490 <__env_unlock>:
 8019490:	4801      	ldr	r0, [pc, #4]	; (8019498 <__env_unlock+0x8>)
 8019492:	f7fe bc4d 	b.w	8017d30 <__retarget_lock_release_recursive>
 8019496:	bf00      	nop
 8019498:	20005e5c 	.word	0x20005e5c

0801949c <_fstat_r>:
 801949c:	b538      	push	{r3, r4, r5, lr}
 801949e:	4d07      	ldr	r5, [pc, #28]	; (80194bc <_fstat_r+0x20>)
 80194a0:	2300      	movs	r3, #0
 80194a2:	4604      	mov	r4, r0
 80194a4:	4608      	mov	r0, r1
 80194a6:	4611      	mov	r1, r2
 80194a8:	602b      	str	r3, [r5, #0]
 80194aa:	f7eb fa5c 	bl	8004966 <_fstat>
 80194ae:	1c43      	adds	r3, r0, #1
 80194b0:	d102      	bne.n	80194b8 <_fstat_r+0x1c>
 80194b2:	682b      	ldr	r3, [r5, #0]
 80194b4:	b103      	cbz	r3, 80194b8 <_fstat_r+0x1c>
 80194b6:	6023      	str	r3, [r4, #0]
 80194b8:	bd38      	pop	{r3, r4, r5, pc}
 80194ba:	bf00      	nop
 80194bc:	20005e64 	.word	0x20005e64

080194c0 <_isatty_r>:
 80194c0:	b538      	push	{r3, r4, r5, lr}
 80194c2:	4d06      	ldr	r5, [pc, #24]	; (80194dc <_isatty_r+0x1c>)
 80194c4:	2300      	movs	r3, #0
 80194c6:	4604      	mov	r4, r0
 80194c8:	4608      	mov	r0, r1
 80194ca:	602b      	str	r3, [r5, #0]
 80194cc:	f7eb fa5b 	bl	8004986 <_isatty>
 80194d0:	1c43      	adds	r3, r0, #1
 80194d2:	d102      	bne.n	80194da <_isatty_r+0x1a>
 80194d4:	682b      	ldr	r3, [r5, #0]
 80194d6:	b103      	cbz	r3, 80194da <_isatty_r+0x1a>
 80194d8:	6023      	str	r3, [r4, #0]
 80194da:	bd38      	pop	{r3, r4, r5, pc}
 80194dc:	20005e64 	.word	0x20005e64

080194e0 <_malloc_usable_size_r>:
 80194e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80194e4:	1f18      	subs	r0, r3, #4
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	bfbc      	itt	lt
 80194ea:	580b      	ldrlt	r3, [r1, r0]
 80194ec:	18c0      	addlt	r0, r0, r3
 80194ee:	4770      	bx	lr

080194f0 <cos>:
 80194f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80194f2:	ec53 2b10 	vmov	r2, r3, d0
 80194f6:	4826      	ldr	r0, [pc, #152]	; (8019590 <cos+0xa0>)
 80194f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80194fc:	4281      	cmp	r1, r0
 80194fe:	dc06      	bgt.n	801950e <cos+0x1e>
 8019500:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8019588 <cos+0x98>
 8019504:	b005      	add	sp, #20
 8019506:	f85d eb04 	ldr.w	lr, [sp], #4
 801950a:	f001 bbf1 	b.w	801acf0 <__kernel_cos>
 801950e:	4821      	ldr	r0, [pc, #132]	; (8019594 <cos+0xa4>)
 8019510:	4281      	cmp	r1, r0
 8019512:	dd09      	ble.n	8019528 <cos+0x38>
 8019514:	ee10 0a10 	vmov	r0, s0
 8019518:	4619      	mov	r1, r3
 801951a:	f7e6 fed5 	bl	80002c8 <__aeabi_dsub>
 801951e:	ec41 0b10 	vmov	d0, r0, r1
 8019522:	b005      	add	sp, #20
 8019524:	f85d fb04 	ldr.w	pc, [sp], #4
 8019528:	4668      	mov	r0, sp
 801952a:	f001 f921 	bl	801a770 <__ieee754_rem_pio2>
 801952e:	f000 0003 	and.w	r0, r0, #3
 8019532:	2801      	cmp	r0, #1
 8019534:	d00b      	beq.n	801954e <cos+0x5e>
 8019536:	2802      	cmp	r0, #2
 8019538:	d016      	beq.n	8019568 <cos+0x78>
 801953a:	b9e0      	cbnz	r0, 8019576 <cos+0x86>
 801953c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019540:	ed9d 0b00 	vldr	d0, [sp]
 8019544:	f001 fbd4 	bl	801acf0 <__kernel_cos>
 8019548:	ec51 0b10 	vmov	r0, r1, d0
 801954c:	e7e7      	b.n	801951e <cos+0x2e>
 801954e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019552:	ed9d 0b00 	vldr	d0, [sp]
 8019556:	f001 ffe3 	bl	801b520 <__kernel_sin>
 801955a:	ec53 2b10 	vmov	r2, r3, d0
 801955e:	ee10 0a10 	vmov	r0, s0
 8019562:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019566:	e7da      	b.n	801951e <cos+0x2e>
 8019568:	ed9d 1b02 	vldr	d1, [sp, #8]
 801956c:	ed9d 0b00 	vldr	d0, [sp]
 8019570:	f001 fbbe 	bl	801acf0 <__kernel_cos>
 8019574:	e7f1      	b.n	801955a <cos+0x6a>
 8019576:	ed9d 1b02 	vldr	d1, [sp, #8]
 801957a:	ed9d 0b00 	vldr	d0, [sp]
 801957e:	2001      	movs	r0, #1
 8019580:	f001 ffce 	bl	801b520 <__kernel_sin>
 8019584:	e7e0      	b.n	8019548 <cos+0x58>
 8019586:	bf00      	nop
	...
 8019590:	3fe921fb 	.word	0x3fe921fb
 8019594:	7fefffff 	.word	0x7fefffff

08019598 <sin>:
 8019598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801959a:	ec53 2b10 	vmov	r2, r3, d0
 801959e:	4828      	ldr	r0, [pc, #160]	; (8019640 <sin+0xa8>)
 80195a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80195a4:	4281      	cmp	r1, r0
 80195a6:	dc07      	bgt.n	80195b8 <sin+0x20>
 80195a8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8019638 <sin+0xa0>
 80195ac:	2000      	movs	r0, #0
 80195ae:	b005      	add	sp, #20
 80195b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80195b4:	f001 bfb4 	b.w	801b520 <__kernel_sin>
 80195b8:	4822      	ldr	r0, [pc, #136]	; (8019644 <sin+0xac>)
 80195ba:	4281      	cmp	r1, r0
 80195bc:	dd09      	ble.n	80195d2 <sin+0x3a>
 80195be:	ee10 0a10 	vmov	r0, s0
 80195c2:	4619      	mov	r1, r3
 80195c4:	f7e6 fe80 	bl	80002c8 <__aeabi_dsub>
 80195c8:	ec41 0b10 	vmov	d0, r0, r1
 80195cc:	b005      	add	sp, #20
 80195ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80195d2:	4668      	mov	r0, sp
 80195d4:	f001 f8cc 	bl	801a770 <__ieee754_rem_pio2>
 80195d8:	f000 0003 	and.w	r0, r0, #3
 80195dc:	2801      	cmp	r0, #1
 80195de:	d00c      	beq.n	80195fa <sin+0x62>
 80195e0:	2802      	cmp	r0, #2
 80195e2:	d011      	beq.n	8019608 <sin+0x70>
 80195e4:	b9f0      	cbnz	r0, 8019624 <sin+0x8c>
 80195e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80195ea:	ed9d 0b00 	vldr	d0, [sp]
 80195ee:	2001      	movs	r0, #1
 80195f0:	f001 ff96 	bl	801b520 <__kernel_sin>
 80195f4:	ec51 0b10 	vmov	r0, r1, d0
 80195f8:	e7e6      	b.n	80195c8 <sin+0x30>
 80195fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80195fe:	ed9d 0b00 	vldr	d0, [sp]
 8019602:	f001 fb75 	bl	801acf0 <__kernel_cos>
 8019606:	e7f5      	b.n	80195f4 <sin+0x5c>
 8019608:	ed9d 1b02 	vldr	d1, [sp, #8]
 801960c:	ed9d 0b00 	vldr	d0, [sp]
 8019610:	2001      	movs	r0, #1
 8019612:	f001 ff85 	bl	801b520 <__kernel_sin>
 8019616:	ec53 2b10 	vmov	r2, r3, d0
 801961a:	ee10 0a10 	vmov	r0, s0
 801961e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019622:	e7d1      	b.n	80195c8 <sin+0x30>
 8019624:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019628:	ed9d 0b00 	vldr	d0, [sp]
 801962c:	f001 fb60 	bl	801acf0 <__kernel_cos>
 8019630:	e7f1      	b.n	8019616 <sin+0x7e>
 8019632:	bf00      	nop
 8019634:	f3af 8000 	nop.w
	...
 8019640:	3fe921fb 	.word	0x3fe921fb
 8019644:	7fefffff 	.word	0x7fefffff

08019648 <tan>:
 8019648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801964a:	ec53 2b10 	vmov	r2, r3, d0
 801964e:	4816      	ldr	r0, [pc, #88]	; (80196a8 <tan+0x60>)
 8019650:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019654:	4281      	cmp	r1, r0
 8019656:	dc07      	bgt.n	8019668 <tan+0x20>
 8019658:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80196a0 <tan+0x58>
 801965c:	2001      	movs	r0, #1
 801965e:	b005      	add	sp, #20
 8019660:	f85d eb04 	ldr.w	lr, [sp], #4
 8019664:	f002 b81c 	b.w	801b6a0 <__kernel_tan>
 8019668:	4810      	ldr	r0, [pc, #64]	; (80196ac <tan+0x64>)
 801966a:	4281      	cmp	r1, r0
 801966c:	dd09      	ble.n	8019682 <tan+0x3a>
 801966e:	ee10 0a10 	vmov	r0, s0
 8019672:	4619      	mov	r1, r3
 8019674:	f7e6 fe28 	bl	80002c8 <__aeabi_dsub>
 8019678:	ec41 0b10 	vmov	d0, r0, r1
 801967c:	b005      	add	sp, #20
 801967e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019682:	4668      	mov	r0, sp
 8019684:	f001 f874 	bl	801a770 <__ieee754_rem_pio2>
 8019688:	0040      	lsls	r0, r0, #1
 801968a:	f000 0002 	and.w	r0, r0, #2
 801968e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019692:	ed9d 0b00 	vldr	d0, [sp]
 8019696:	f1c0 0001 	rsb	r0, r0, #1
 801969a:	f002 f801 	bl	801b6a0 <__kernel_tan>
 801969e:	e7ed      	b.n	801967c <tan+0x34>
	...
 80196a8:	3fe921fb 	.word	0x3fe921fb
 80196ac:	7fefffff 	.word	0x7fefffff

080196b0 <acos>:
 80196b0:	b538      	push	{r3, r4, r5, lr}
 80196b2:	ed2d 8b02 	vpush	{d8}
 80196b6:	ec55 4b10 	vmov	r4, r5, d0
 80196ba:	f000 f8c9 	bl	8019850 <__ieee754_acos>
 80196be:	4622      	mov	r2, r4
 80196c0:	462b      	mov	r3, r5
 80196c2:	4620      	mov	r0, r4
 80196c4:	4629      	mov	r1, r5
 80196c6:	eeb0 8a40 	vmov.f32	s16, s0
 80196ca:	eef0 8a60 	vmov.f32	s17, s1
 80196ce:	f7e7 fa4d 	bl	8000b6c <__aeabi_dcmpun>
 80196d2:	b9a8      	cbnz	r0, 8019700 <acos+0x50>
 80196d4:	ec45 4b10 	vmov	d0, r4, r5
 80196d8:	f002 fa1c 	bl	801bb14 <fabs>
 80196dc:	4b0c      	ldr	r3, [pc, #48]	; (8019710 <acos+0x60>)
 80196de:	ec51 0b10 	vmov	r0, r1, d0
 80196e2:	2200      	movs	r2, #0
 80196e4:	f7e7 fa38 	bl	8000b58 <__aeabi_dcmpgt>
 80196e8:	b150      	cbz	r0, 8019700 <acos+0x50>
 80196ea:	f7fa fa77 	bl	8013bdc <__errno>
 80196ee:	ecbd 8b02 	vpop	{d8}
 80196f2:	2321      	movs	r3, #33	; 0x21
 80196f4:	6003      	str	r3, [r0, #0]
 80196f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80196fa:	4806      	ldr	r0, [pc, #24]	; (8019714 <acos+0x64>)
 80196fc:	f7ff bd64 	b.w	80191c8 <nan>
 8019700:	eeb0 0a48 	vmov.f32	s0, s16
 8019704:	eef0 0a68 	vmov.f32	s1, s17
 8019708:	ecbd 8b02 	vpop	{d8}
 801970c:	bd38      	pop	{r3, r4, r5, pc}
 801970e:	bf00      	nop
 8019710:	3ff00000 	.word	0x3ff00000
 8019714:	0805b95a 	.word	0x0805b95a

08019718 <pow>:
 8019718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801971a:	ed2d 8b02 	vpush	{d8}
 801971e:	eeb0 8a40 	vmov.f32	s16, s0
 8019722:	eef0 8a60 	vmov.f32	s17, s1
 8019726:	ec55 4b11 	vmov	r4, r5, d1
 801972a:	f000 faf1 	bl	8019d10 <__ieee754_pow>
 801972e:	4622      	mov	r2, r4
 8019730:	462b      	mov	r3, r5
 8019732:	4620      	mov	r0, r4
 8019734:	4629      	mov	r1, r5
 8019736:	ec57 6b10 	vmov	r6, r7, d0
 801973a:	f7e7 fa17 	bl	8000b6c <__aeabi_dcmpun>
 801973e:	2800      	cmp	r0, #0
 8019740:	d13b      	bne.n	80197ba <pow+0xa2>
 8019742:	ec51 0b18 	vmov	r0, r1, d8
 8019746:	2200      	movs	r2, #0
 8019748:	2300      	movs	r3, #0
 801974a:	f7e7 f9dd 	bl	8000b08 <__aeabi_dcmpeq>
 801974e:	b1b8      	cbz	r0, 8019780 <pow+0x68>
 8019750:	2200      	movs	r2, #0
 8019752:	2300      	movs	r3, #0
 8019754:	4620      	mov	r0, r4
 8019756:	4629      	mov	r1, r5
 8019758:	f7e7 f9d6 	bl	8000b08 <__aeabi_dcmpeq>
 801975c:	2800      	cmp	r0, #0
 801975e:	d146      	bne.n	80197ee <pow+0xd6>
 8019760:	ec45 4b10 	vmov	d0, r4, r5
 8019764:	f002 f9df 	bl	801bb26 <finite>
 8019768:	b338      	cbz	r0, 80197ba <pow+0xa2>
 801976a:	2200      	movs	r2, #0
 801976c:	2300      	movs	r3, #0
 801976e:	4620      	mov	r0, r4
 8019770:	4629      	mov	r1, r5
 8019772:	f7e7 f9d3 	bl	8000b1c <__aeabi_dcmplt>
 8019776:	b300      	cbz	r0, 80197ba <pow+0xa2>
 8019778:	f7fa fa30 	bl	8013bdc <__errno>
 801977c:	2322      	movs	r3, #34	; 0x22
 801977e:	e01b      	b.n	80197b8 <pow+0xa0>
 8019780:	ec47 6b10 	vmov	d0, r6, r7
 8019784:	f002 f9cf 	bl	801bb26 <finite>
 8019788:	b9e0      	cbnz	r0, 80197c4 <pow+0xac>
 801978a:	eeb0 0a48 	vmov.f32	s0, s16
 801978e:	eef0 0a68 	vmov.f32	s1, s17
 8019792:	f002 f9c8 	bl	801bb26 <finite>
 8019796:	b1a8      	cbz	r0, 80197c4 <pow+0xac>
 8019798:	ec45 4b10 	vmov	d0, r4, r5
 801979c:	f002 f9c3 	bl	801bb26 <finite>
 80197a0:	b180      	cbz	r0, 80197c4 <pow+0xac>
 80197a2:	4632      	mov	r2, r6
 80197a4:	463b      	mov	r3, r7
 80197a6:	4630      	mov	r0, r6
 80197a8:	4639      	mov	r1, r7
 80197aa:	f7e7 f9df 	bl	8000b6c <__aeabi_dcmpun>
 80197ae:	2800      	cmp	r0, #0
 80197b0:	d0e2      	beq.n	8019778 <pow+0x60>
 80197b2:	f7fa fa13 	bl	8013bdc <__errno>
 80197b6:	2321      	movs	r3, #33	; 0x21
 80197b8:	6003      	str	r3, [r0, #0]
 80197ba:	ecbd 8b02 	vpop	{d8}
 80197be:	ec47 6b10 	vmov	d0, r6, r7
 80197c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197c4:	2200      	movs	r2, #0
 80197c6:	2300      	movs	r3, #0
 80197c8:	4630      	mov	r0, r6
 80197ca:	4639      	mov	r1, r7
 80197cc:	f7e7 f99c 	bl	8000b08 <__aeabi_dcmpeq>
 80197d0:	2800      	cmp	r0, #0
 80197d2:	d0f2      	beq.n	80197ba <pow+0xa2>
 80197d4:	eeb0 0a48 	vmov.f32	s0, s16
 80197d8:	eef0 0a68 	vmov.f32	s1, s17
 80197dc:	f002 f9a3 	bl	801bb26 <finite>
 80197e0:	2800      	cmp	r0, #0
 80197e2:	d0ea      	beq.n	80197ba <pow+0xa2>
 80197e4:	ec45 4b10 	vmov	d0, r4, r5
 80197e8:	f002 f99d 	bl	801bb26 <finite>
 80197ec:	e7c3      	b.n	8019776 <pow+0x5e>
 80197ee:	4f01      	ldr	r7, [pc, #4]	; (80197f4 <pow+0xdc>)
 80197f0:	2600      	movs	r6, #0
 80197f2:	e7e2      	b.n	80197ba <pow+0xa2>
 80197f4:	3ff00000 	.word	0x3ff00000

080197f8 <sqrt>:
 80197f8:	b538      	push	{r3, r4, r5, lr}
 80197fa:	ed2d 8b02 	vpush	{d8}
 80197fe:	ec55 4b10 	vmov	r4, r5, d0
 8019802:	f001 f9c1 	bl	801ab88 <__ieee754_sqrt>
 8019806:	4622      	mov	r2, r4
 8019808:	462b      	mov	r3, r5
 801980a:	4620      	mov	r0, r4
 801980c:	4629      	mov	r1, r5
 801980e:	eeb0 8a40 	vmov.f32	s16, s0
 8019812:	eef0 8a60 	vmov.f32	s17, s1
 8019816:	f7e7 f9a9 	bl	8000b6c <__aeabi_dcmpun>
 801981a:	b990      	cbnz	r0, 8019842 <sqrt+0x4a>
 801981c:	2200      	movs	r2, #0
 801981e:	2300      	movs	r3, #0
 8019820:	4620      	mov	r0, r4
 8019822:	4629      	mov	r1, r5
 8019824:	f7e7 f97a 	bl	8000b1c <__aeabi_dcmplt>
 8019828:	b158      	cbz	r0, 8019842 <sqrt+0x4a>
 801982a:	f7fa f9d7 	bl	8013bdc <__errno>
 801982e:	2321      	movs	r3, #33	; 0x21
 8019830:	6003      	str	r3, [r0, #0]
 8019832:	2200      	movs	r2, #0
 8019834:	2300      	movs	r3, #0
 8019836:	4610      	mov	r0, r2
 8019838:	4619      	mov	r1, r3
 801983a:	f7e7 f827 	bl	800088c <__aeabi_ddiv>
 801983e:	ec41 0b18 	vmov	d8, r0, r1
 8019842:	eeb0 0a48 	vmov.f32	s0, s16
 8019846:	eef0 0a68 	vmov.f32	s1, s17
 801984a:	ecbd 8b02 	vpop	{d8}
 801984e:	bd38      	pop	{r3, r4, r5, pc}

08019850 <__ieee754_acos>:
 8019850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019854:	ec55 4b10 	vmov	r4, r5, d0
 8019858:	49b7      	ldr	r1, [pc, #732]	; (8019b38 <__ieee754_acos+0x2e8>)
 801985a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801985e:	428b      	cmp	r3, r1
 8019860:	dd1b      	ble.n	801989a <__ieee754_acos+0x4a>
 8019862:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8019866:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801986a:	4323      	orrs	r3, r4
 801986c:	d106      	bne.n	801987c <__ieee754_acos+0x2c>
 801986e:	2d00      	cmp	r5, #0
 8019870:	f300 8211 	bgt.w	8019c96 <__ieee754_acos+0x446>
 8019874:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8019ad0 <__ieee754_acos+0x280>
 8019878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801987c:	ee10 2a10 	vmov	r2, s0
 8019880:	462b      	mov	r3, r5
 8019882:	ee10 0a10 	vmov	r0, s0
 8019886:	4629      	mov	r1, r5
 8019888:	f7e6 fd1e 	bl	80002c8 <__aeabi_dsub>
 801988c:	4602      	mov	r2, r0
 801988e:	460b      	mov	r3, r1
 8019890:	f7e6 fffc 	bl	800088c <__aeabi_ddiv>
 8019894:	ec41 0b10 	vmov	d0, r0, r1
 8019898:	e7ee      	b.n	8019878 <__ieee754_acos+0x28>
 801989a:	49a8      	ldr	r1, [pc, #672]	; (8019b3c <__ieee754_acos+0x2ec>)
 801989c:	428b      	cmp	r3, r1
 801989e:	f300 8087 	bgt.w	80199b0 <__ieee754_acos+0x160>
 80198a2:	4aa7      	ldr	r2, [pc, #668]	; (8019b40 <__ieee754_acos+0x2f0>)
 80198a4:	4293      	cmp	r3, r2
 80198a6:	f340 81f9 	ble.w	8019c9c <__ieee754_acos+0x44c>
 80198aa:	ee10 2a10 	vmov	r2, s0
 80198ae:	ee10 0a10 	vmov	r0, s0
 80198b2:	462b      	mov	r3, r5
 80198b4:	4629      	mov	r1, r5
 80198b6:	f7e6 febf 	bl	8000638 <__aeabi_dmul>
 80198ba:	a387      	add	r3, pc, #540	; (adr r3, 8019ad8 <__ieee754_acos+0x288>)
 80198bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198c0:	4606      	mov	r6, r0
 80198c2:	460f      	mov	r7, r1
 80198c4:	f7e6 feb8 	bl	8000638 <__aeabi_dmul>
 80198c8:	a385      	add	r3, pc, #532	; (adr r3, 8019ae0 <__ieee754_acos+0x290>)
 80198ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198ce:	f7e6 fcfd 	bl	80002cc <__adddf3>
 80198d2:	4632      	mov	r2, r6
 80198d4:	463b      	mov	r3, r7
 80198d6:	f7e6 feaf 	bl	8000638 <__aeabi_dmul>
 80198da:	a383      	add	r3, pc, #524	; (adr r3, 8019ae8 <__ieee754_acos+0x298>)
 80198dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198e0:	f7e6 fcf2 	bl	80002c8 <__aeabi_dsub>
 80198e4:	4632      	mov	r2, r6
 80198e6:	463b      	mov	r3, r7
 80198e8:	f7e6 fea6 	bl	8000638 <__aeabi_dmul>
 80198ec:	a380      	add	r3, pc, #512	; (adr r3, 8019af0 <__ieee754_acos+0x2a0>)
 80198ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198f2:	f7e6 fceb 	bl	80002cc <__adddf3>
 80198f6:	4632      	mov	r2, r6
 80198f8:	463b      	mov	r3, r7
 80198fa:	f7e6 fe9d 	bl	8000638 <__aeabi_dmul>
 80198fe:	a37e      	add	r3, pc, #504	; (adr r3, 8019af8 <__ieee754_acos+0x2a8>)
 8019900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019904:	f7e6 fce0 	bl	80002c8 <__aeabi_dsub>
 8019908:	4632      	mov	r2, r6
 801990a:	463b      	mov	r3, r7
 801990c:	f7e6 fe94 	bl	8000638 <__aeabi_dmul>
 8019910:	a37b      	add	r3, pc, #492	; (adr r3, 8019b00 <__ieee754_acos+0x2b0>)
 8019912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019916:	f7e6 fcd9 	bl	80002cc <__adddf3>
 801991a:	4632      	mov	r2, r6
 801991c:	463b      	mov	r3, r7
 801991e:	f7e6 fe8b 	bl	8000638 <__aeabi_dmul>
 8019922:	a379      	add	r3, pc, #484	; (adr r3, 8019b08 <__ieee754_acos+0x2b8>)
 8019924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019928:	4680      	mov	r8, r0
 801992a:	4689      	mov	r9, r1
 801992c:	4630      	mov	r0, r6
 801992e:	4639      	mov	r1, r7
 8019930:	f7e6 fe82 	bl	8000638 <__aeabi_dmul>
 8019934:	a376      	add	r3, pc, #472	; (adr r3, 8019b10 <__ieee754_acos+0x2c0>)
 8019936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801993a:	f7e6 fcc5 	bl	80002c8 <__aeabi_dsub>
 801993e:	4632      	mov	r2, r6
 8019940:	463b      	mov	r3, r7
 8019942:	f7e6 fe79 	bl	8000638 <__aeabi_dmul>
 8019946:	a374      	add	r3, pc, #464	; (adr r3, 8019b18 <__ieee754_acos+0x2c8>)
 8019948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801994c:	f7e6 fcbe 	bl	80002cc <__adddf3>
 8019950:	4632      	mov	r2, r6
 8019952:	463b      	mov	r3, r7
 8019954:	f7e6 fe70 	bl	8000638 <__aeabi_dmul>
 8019958:	a371      	add	r3, pc, #452	; (adr r3, 8019b20 <__ieee754_acos+0x2d0>)
 801995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801995e:	f7e6 fcb3 	bl	80002c8 <__aeabi_dsub>
 8019962:	4632      	mov	r2, r6
 8019964:	463b      	mov	r3, r7
 8019966:	f7e6 fe67 	bl	8000638 <__aeabi_dmul>
 801996a:	4b76      	ldr	r3, [pc, #472]	; (8019b44 <__ieee754_acos+0x2f4>)
 801996c:	2200      	movs	r2, #0
 801996e:	f7e6 fcad 	bl	80002cc <__adddf3>
 8019972:	4602      	mov	r2, r0
 8019974:	460b      	mov	r3, r1
 8019976:	4640      	mov	r0, r8
 8019978:	4649      	mov	r1, r9
 801997a:	f7e6 ff87 	bl	800088c <__aeabi_ddiv>
 801997e:	4622      	mov	r2, r4
 8019980:	462b      	mov	r3, r5
 8019982:	f7e6 fe59 	bl	8000638 <__aeabi_dmul>
 8019986:	4602      	mov	r2, r0
 8019988:	460b      	mov	r3, r1
 801998a:	a167      	add	r1, pc, #412	; (adr r1, 8019b28 <__ieee754_acos+0x2d8>)
 801998c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019990:	f7e6 fc9a 	bl	80002c8 <__aeabi_dsub>
 8019994:	4602      	mov	r2, r0
 8019996:	460b      	mov	r3, r1
 8019998:	4620      	mov	r0, r4
 801999a:	4629      	mov	r1, r5
 801999c:	f7e6 fc94 	bl	80002c8 <__aeabi_dsub>
 80199a0:	4602      	mov	r2, r0
 80199a2:	460b      	mov	r3, r1
 80199a4:	a162      	add	r1, pc, #392	; (adr r1, 8019b30 <__ieee754_acos+0x2e0>)
 80199a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199aa:	f7e6 fc8d 	bl	80002c8 <__aeabi_dsub>
 80199ae:	e771      	b.n	8019894 <__ieee754_acos+0x44>
 80199b0:	2d00      	cmp	r5, #0
 80199b2:	f280 80cb 	bge.w	8019b4c <__ieee754_acos+0x2fc>
 80199b6:	ee10 0a10 	vmov	r0, s0
 80199ba:	4b62      	ldr	r3, [pc, #392]	; (8019b44 <__ieee754_acos+0x2f4>)
 80199bc:	2200      	movs	r2, #0
 80199be:	4629      	mov	r1, r5
 80199c0:	f7e6 fc84 	bl	80002cc <__adddf3>
 80199c4:	4b60      	ldr	r3, [pc, #384]	; (8019b48 <__ieee754_acos+0x2f8>)
 80199c6:	2200      	movs	r2, #0
 80199c8:	f7e6 fe36 	bl	8000638 <__aeabi_dmul>
 80199cc:	a342      	add	r3, pc, #264	; (adr r3, 8019ad8 <__ieee754_acos+0x288>)
 80199ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199d2:	4604      	mov	r4, r0
 80199d4:	460d      	mov	r5, r1
 80199d6:	f7e6 fe2f 	bl	8000638 <__aeabi_dmul>
 80199da:	a341      	add	r3, pc, #260	; (adr r3, 8019ae0 <__ieee754_acos+0x290>)
 80199dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199e0:	f7e6 fc74 	bl	80002cc <__adddf3>
 80199e4:	4622      	mov	r2, r4
 80199e6:	462b      	mov	r3, r5
 80199e8:	f7e6 fe26 	bl	8000638 <__aeabi_dmul>
 80199ec:	a33e      	add	r3, pc, #248	; (adr r3, 8019ae8 <__ieee754_acos+0x298>)
 80199ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f2:	f7e6 fc69 	bl	80002c8 <__aeabi_dsub>
 80199f6:	4622      	mov	r2, r4
 80199f8:	462b      	mov	r3, r5
 80199fa:	f7e6 fe1d 	bl	8000638 <__aeabi_dmul>
 80199fe:	a33c      	add	r3, pc, #240	; (adr r3, 8019af0 <__ieee754_acos+0x2a0>)
 8019a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a04:	f7e6 fc62 	bl	80002cc <__adddf3>
 8019a08:	4622      	mov	r2, r4
 8019a0a:	462b      	mov	r3, r5
 8019a0c:	f7e6 fe14 	bl	8000638 <__aeabi_dmul>
 8019a10:	a339      	add	r3, pc, #228	; (adr r3, 8019af8 <__ieee754_acos+0x2a8>)
 8019a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a16:	f7e6 fc57 	bl	80002c8 <__aeabi_dsub>
 8019a1a:	4622      	mov	r2, r4
 8019a1c:	462b      	mov	r3, r5
 8019a1e:	f7e6 fe0b 	bl	8000638 <__aeabi_dmul>
 8019a22:	a337      	add	r3, pc, #220	; (adr r3, 8019b00 <__ieee754_acos+0x2b0>)
 8019a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a28:	f7e6 fc50 	bl	80002cc <__adddf3>
 8019a2c:	4622      	mov	r2, r4
 8019a2e:	462b      	mov	r3, r5
 8019a30:	f7e6 fe02 	bl	8000638 <__aeabi_dmul>
 8019a34:	ec45 4b10 	vmov	d0, r4, r5
 8019a38:	4680      	mov	r8, r0
 8019a3a:	4689      	mov	r9, r1
 8019a3c:	f001 f8a4 	bl	801ab88 <__ieee754_sqrt>
 8019a40:	a331      	add	r3, pc, #196	; (adr r3, 8019b08 <__ieee754_acos+0x2b8>)
 8019a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a46:	4620      	mov	r0, r4
 8019a48:	4629      	mov	r1, r5
 8019a4a:	ec57 6b10 	vmov	r6, r7, d0
 8019a4e:	f7e6 fdf3 	bl	8000638 <__aeabi_dmul>
 8019a52:	a32f      	add	r3, pc, #188	; (adr r3, 8019b10 <__ieee754_acos+0x2c0>)
 8019a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a58:	f7e6 fc36 	bl	80002c8 <__aeabi_dsub>
 8019a5c:	4622      	mov	r2, r4
 8019a5e:	462b      	mov	r3, r5
 8019a60:	f7e6 fdea 	bl	8000638 <__aeabi_dmul>
 8019a64:	a32c      	add	r3, pc, #176	; (adr r3, 8019b18 <__ieee754_acos+0x2c8>)
 8019a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a6a:	f7e6 fc2f 	bl	80002cc <__adddf3>
 8019a6e:	4622      	mov	r2, r4
 8019a70:	462b      	mov	r3, r5
 8019a72:	f7e6 fde1 	bl	8000638 <__aeabi_dmul>
 8019a76:	a32a      	add	r3, pc, #168	; (adr r3, 8019b20 <__ieee754_acos+0x2d0>)
 8019a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a7c:	f7e6 fc24 	bl	80002c8 <__aeabi_dsub>
 8019a80:	4622      	mov	r2, r4
 8019a82:	462b      	mov	r3, r5
 8019a84:	f7e6 fdd8 	bl	8000638 <__aeabi_dmul>
 8019a88:	4b2e      	ldr	r3, [pc, #184]	; (8019b44 <__ieee754_acos+0x2f4>)
 8019a8a:	2200      	movs	r2, #0
 8019a8c:	f7e6 fc1e 	bl	80002cc <__adddf3>
 8019a90:	4602      	mov	r2, r0
 8019a92:	460b      	mov	r3, r1
 8019a94:	4640      	mov	r0, r8
 8019a96:	4649      	mov	r1, r9
 8019a98:	f7e6 fef8 	bl	800088c <__aeabi_ddiv>
 8019a9c:	4632      	mov	r2, r6
 8019a9e:	463b      	mov	r3, r7
 8019aa0:	f7e6 fdca 	bl	8000638 <__aeabi_dmul>
 8019aa4:	a320      	add	r3, pc, #128	; (adr r3, 8019b28 <__ieee754_acos+0x2d8>)
 8019aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aaa:	f7e6 fc0d 	bl	80002c8 <__aeabi_dsub>
 8019aae:	4632      	mov	r2, r6
 8019ab0:	463b      	mov	r3, r7
 8019ab2:	f7e6 fc0b 	bl	80002cc <__adddf3>
 8019ab6:	4602      	mov	r2, r0
 8019ab8:	460b      	mov	r3, r1
 8019aba:	f7e6 fc07 	bl	80002cc <__adddf3>
 8019abe:	4602      	mov	r2, r0
 8019ac0:	460b      	mov	r3, r1
 8019ac2:	a103      	add	r1, pc, #12	; (adr r1, 8019ad0 <__ieee754_acos+0x280>)
 8019ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ac8:	e76f      	b.n	80199aa <__ieee754_acos+0x15a>
 8019aca:	bf00      	nop
 8019acc:	f3af 8000 	nop.w
 8019ad0:	54442d18 	.word	0x54442d18
 8019ad4:	400921fb 	.word	0x400921fb
 8019ad8:	0dfdf709 	.word	0x0dfdf709
 8019adc:	3f023de1 	.word	0x3f023de1
 8019ae0:	7501b288 	.word	0x7501b288
 8019ae4:	3f49efe0 	.word	0x3f49efe0
 8019ae8:	b5688f3b 	.word	0xb5688f3b
 8019aec:	3fa48228 	.word	0x3fa48228
 8019af0:	0e884455 	.word	0x0e884455
 8019af4:	3fc9c155 	.word	0x3fc9c155
 8019af8:	03eb6f7d 	.word	0x03eb6f7d
 8019afc:	3fd4d612 	.word	0x3fd4d612
 8019b00:	55555555 	.word	0x55555555
 8019b04:	3fc55555 	.word	0x3fc55555
 8019b08:	b12e9282 	.word	0xb12e9282
 8019b0c:	3fb3b8c5 	.word	0x3fb3b8c5
 8019b10:	1b8d0159 	.word	0x1b8d0159
 8019b14:	3fe6066c 	.word	0x3fe6066c
 8019b18:	9c598ac8 	.word	0x9c598ac8
 8019b1c:	40002ae5 	.word	0x40002ae5
 8019b20:	1c8a2d4b 	.word	0x1c8a2d4b
 8019b24:	40033a27 	.word	0x40033a27
 8019b28:	33145c07 	.word	0x33145c07
 8019b2c:	3c91a626 	.word	0x3c91a626
 8019b30:	54442d18 	.word	0x54442d18
 8019b34:	3ff921fb 	.word	0x3ff921fb
 8019b38:	3fefffff 	.word	0x3fefffff
 8019b3c:	3fdfffff 	.word	0x3fdfffff
 8019b40:	3c600000 	.word	0x3c600000
 8019b44:	3ff00000 	.word	0x3ff00000
 8019b48:	3fe00000 	.word	0x3fe00000
 8019b4c:	ee10 2a10 	vmov	r2, s0
 8019b50:	462b      	mov	r3, r5
 8019b52:	496d      	ldr	r1, [pc, #436]	; (8019d08 <__ieee754_acos+0x4b8>)
 8019b54:	2000      	movs	r0, #0
 8019b56:	f7e6 fbb7 	bl	80002c8 <__aeabi_dsub>
 8019b5a:	4b6c      	ldr	r3, [pc, #432]	; (8019d0c <__ieee754_acos+0x4bc>)
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	f7e6 fd6b 	bl	8000638 <__aeabi_dmul>
 8019b62:	4604      	mov	r4, r0
 8019b64:	460d      	mov	r5, r1
 8019b66:	ec45 4b10 	vmov	d0, r4, r5
 8019b6a:	f001 f80d 	bl	801ab88 <__ieee754_sqrt>
 8019b6e:	a34e      	add	r3, pc, #312	; (adr r3, 8019ca8 <__ieee754_acos+0x458>)
 8019b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b74:	4620      	mov	r0, r4
 8019b76:	4629      	mov	r1, r5
 8019b78:	ec59 8b10 	vmov	r8, r9, d0
 8019b7c:	f7e6 fd5c 	bl	8000638 <__aeabi_dmul>
 8019b80:	a34b      	add	r3, pc, #300	; (adr r3, 8019cb0 <__ieee754_acos+0x460>)
 8019b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b86:	f7e6 fba1 	bl	80002cc <__adddf3>
 8019b8a:	4622      	mov	r2, r4
 8019b8c:	462b      	mov	r3, r5
 8019b8e:	f7e6 fd53 	bl	8000638 <__aeabi_dmul>
 8019b92:	a349      	add	r3, pc, #292	; (adr r3, 8019cb8 <__ieee754_acos+0x468>)
 8019b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b98:	f7e6 fb96 	bl	80002c8 <__aeabi_dsub>
 8019b9c:	4622      	mov	r2, r4
 8019b9e:	462b      	mov	r3, r5
 8019ba0:	f7e6 fd4a 	bl	8000638 <__aeabi_dmul>
 8019ba4:	a346      	add	r3, pc, #280	; (adr r3, 8019cc0 <__ieee754_acos+0x470>)
 8019ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019baa:	f7e6 fb8f 	bl	80002cc <__adddf3>
 8019bae:	4622      	mov	r2, r4
 8019bb0:	462b      	mov	r3, r5
 8019bb2:	f7e6 fd41 	bl	8000638 <__aeabi_dmul>
 8019bb6:	a344      	add	r3, pc, #272	; (adr r3, 8019cc8 <__ieee754_acos+0x478>)
 8019bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bbc:	f7e6 fb84 	bl	80002c8 <__aeabi_dsub>
 8019bc0:	4622      	mov	r2, r4
 8019bc2:	462b      	mov	r3, r5
 8019bc4:	f7e6 fd38 	bl	8000638 <__aeabi_dmul>
 8019bc8:	a341      	add	r3, pc, #260	; (adr r3, 8019cd0 <__ieee754_acos+0x480>)
 8019bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bce:	f7e6 fb7d 	bl	80002cc <__adddf3>
 8019bd2:	4622      	mov	r2, r4
 8019bd4:	462b      	mov	r3, r5
 8019bd6:	f7e6 fd2f 	bl	8000638 <__aeabi_dmul>
 8019bda:	a33f      	add	r3, pc, #252	; (adr r3, 8019cd8 <__ieee754_acos+0x488>)
 8019bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019be0:	4682      	mov	sl, r0
 8019be2:	468b      	mov	fp, r1
 8019be4:	4620      	mov	r0, r4
 8019be6:	4629      	mov	r1, r5
 8019be8:	f7e6 fd26 	bl	8000638 <__aeabi_dmul>
 8019bec:	a33c      	add	r3, pc, #240	; (adr r3, 8019ce0 <__ieee754_acos+0x490>)
 8019bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bf2:	f7e6 fb69 	bl	80002c8 <__aeabi_dsub>
 8019bf6:	4622      	mov	r2, r4
 8019bf8:	462b      	mov	r3, r5
 8019bfa:	f7e6 fd1d 	bl	8000638 <__aeabi_dmul>
 8019bfe:	a33a      	add	r3, pc, #232	; (adr r3, 8019ce8 <__ieee754_acos+0x498>)
 8019c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c04:	f7e6 fb62 	bl	80002cc <__adddf3>
 8019c08:	4622      	mov	r2, r4
 8019c0a:	462b      	mov	r3, r5
 8019c0c:	f7e6 fd14 	bl	8000638 <__aeabi_dmul>
 8019c10:	a337      	add	r3, pc, #220	; (adr r3, 8019cf0 <__ieee754_acos+0x4a0>)
 8019c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c16:	f7e6 fb57 	bl	80002c8 <__aeabi_dsub>
 8019c1a:	4622      	mov	r2, r4
 8019c1c:	462b      	mov	r3, r5
 8019c1e:	f7e6 fd0b 	bl	8000638 <__aeabi_dmul>
 8019c22:	4b39      	ldr	r3, [pc, #228]	; (8019d08 <__ieee754_acos+0x4b8>)
 8019c24:	2200      	movs	r2, #0
 8019c26:	f7e6 fb51 	bl	80002cc <__adddf3>
 8019c2a:	4602      	mov	r2, r0
 8019c2c:	460b      	mov	r3, r1
 8019c2e:	4650      	mov	r0, sl
 8019c30:	4659      	mov	r1, fp
 8019c32:	f7e6 fe2b 	bl	800088c <__aeabi_ddiv>
 8019c36:	4642      	mov	r2, r8
 8019c38:	464b      	mov	r3, r9
 8019c3a:	f7e6 fcfd 	bl	8000638 <__aeabi_dmul>
 8019c3e:	2600      	movs	r6, #0
 8019c40:	4682      	mov	sl, r0
 8019c42:	468b      	mov	fp, r1
 8019c44:	4632      	mov	r2, r6
 8019c46:	464b      	mov	r3, r9
 8019c48:	4630      	mov	r0, r6
 8019c4a:	4649      	mov	r1, r9
 8019c4c:	f7e6 fcf4 	bl	8000638 <__aeabi_dmul>
 8019c50:	4602      	mov	r2, r0
 8019c52:	460b      	mov	r3, r1
 8019c54:	4620      	mov	r0, r4
 8019c56:	4629      	mov	r1, r5
 8019c58:	f7e6 fb36 	bl	80002c8 <__aeabi_dsub>
 8019c5c:	4632      	mov	r2, r6
 8019c5e:	4604      	mov	r4, r0
 8019c60:	460d      	mov	r5, r1
 8019c62:	464b      	mov	r3, r9
 8019c64:	4640      	mov	r0, r8
 8019c66:	4649      	mov	r1, r9
 8019c68:	f7e6 fb30 	bl	80002cc <__adddf3>
 8019c6c:	4602      	mov	r2, r0
 8019c6e:	460b      	mov	r3, r1
 8019c70:	4620      	mov	r0, r4
 8019c72:	4629      	mov	r1, r5
 8019c74:	f7e6 fe0a 	bl	800088c <__aeabi_ddiv>
 8019c78:	4602      	mov	r2, r0
 8019c7a:	460b      	mov	r3, r1
 8019c7c:	4650      	mov	r0, sl
 8019c7e:	4659      	mov	r1, fp
 8019c80:	f7e6 fb24 	bl	80002cc <__adddf3>
 8019c84:	4632      	mov	r2, r6
 8019c86:	464b      	mov	r3, r9
 8019c88:	f7e6 fb20 	bl	80002cc <__adddf3>
 8019c8c:	4602      	mov	r2, r0
 8019c8e:	460b      	mov	r3, r1
 8019c90:	f7e6 fb1c 	bl	80002cc <__adddf3>
 8019c94:	e5fe      	b.n	8019894 <__ieee754_acos+0x44>
 8019c96:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8019cf8 <__ieee754_acos+0x4a8>
 8019c9a:	e5ed      	b.n	8019878 <__ieee754_acos+0x28>
 8019c9c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8019d00 <__ieee754_acos+0x4b0>
 8019ca0:	e5ea      	b.n	8019878 <__ieee754_acos+0x28>
 8019ca2:	bf00      	nop
 8019ca4:	f3af 8000 	nop.w
 8019ca8:	0dfdf709 	.word	0x0dfdf709
 8019cac:	3f023de1 	.word	0x3f023de1
 8019cb0:	7501b288 	.word	0x7501b288
 8019cb4:	3f49efe0 	.word	0x3f49efe0
 8019cb8:	b5688f3b 	.word	0xb5688f3b
 8019cbc:	3fa48228 	.word	0x3fa48228
 8019cc0:	0e884455 	.word	0x0e884455
 8019cc4:	3fc9c155 	.word	0x3fc9c155
 8019cc8:	03eb6f7d 	.word	0x03eb6f7d
 8019ccc:	3fd4d612 	.word	0x3fd4d612
 8019cd0:	55555555 	.word	0x55555555
 8019cd4:	3fc55555 	.word	0x3fc55555
 8019cd8:	b12e9282 	.word	0xb12e9282
 8019cdc:	3fb3b8c5 	.word	0x3fb3b8c5
 8019ce0:	1b8d0159 	.word	0x1b8d0159
 8019ce4:	3fe6066c 	.word	0x3fe6066c
 8019ce8:	9c598ac8 	.word	0x9c598ac8
 8019cec:	40002ae5 	.word	0x40002ae5
 8019cf0:	1c8a2d4b 	.word	0x1c8a2d4b
 8019cf4:	40033a27 	.word	0x40033a27
	...
 8019d00:	54442d18 	.word	0x54442d18
 8019d04:	3ff921fb 	.word	0x3ff921fb
 8019d08:	3ff00000 	.word	0x3ff00000
 8019d0c:	3fe00000 	.word	0x3fe00000

08019d10 <__ieee754_pow>:
 8019d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d14:	ed2d 8b06 	vpush	{d8-d10}
 8019d18:	b089      	sub	sp, #36	; 0x24
 8019d1a:	ed8d 1b00 	vstr	d1, [sp]
 8019d1e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8019d22:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8019d26:	ea58 0102 	orrs.w	r1, r8, r2
 8019d2a:	ec57 6b10 	vmov	r6, r7, d0
 8019d2e:	d115      	bne.n	8019d5c <__ieee754_pow+0x4c>
 8019d30:	19b3      	adds	r3, r6, r6
 8019d32:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8019d36:	4152      	adcs	r2, r2
 8019d38:	4299      	cmp	r1, r3
 8019d3a:	4b89      	ldr	r3, [pc, #548]	; (8019f60 <__ieee754_pow+0x250>)
 8019d3c:	4193      	sbcs	r3, r2
 8019d3e:	f080 84d2 	bcs.w	801a6e6 <__ieee754_pow+0x9d6>
 8019d42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d46:	4630      	mov	r0, r6
 8019d48:	4639      	mov	r1, r7
 8019d4a:	f7e6 fabf 	bl	80002cc <__adddf3>
 8019d4e:	ec41 0b10 	vmov	d0, r0, r1
 8019d52:	b009      	add	sp, #36	; 0x24
 8019d54:	ecbd 8b06 	vpop	{d8-d10}
 8019d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d5c:	4b81      	ldr	r3, [pc, #516]	; (8019f64 <__ieee754_pow+0x254>)
 8019d5e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8019d62:	429c      	cmp	r4, r3
 8019d64:	ee10 aa10 	vmov	sl, s0
 8019d68:	463d      	mov	r5, r7
 8019d6a:	dc06      	bgt.n	8019d7a <__ieee754_pow+0x6a>
 8019d6c:	d101      	bne.n	8019d72 <__ieee754_pow+0x62>
 8019d6e:	2e00      	cmp	r6, #0
 8019d70:	d1e7      	bne.n	8019d42 <__ieee754_pow+0x32>
 8019d72:	4598      	cmp	r8, r3
 8019d74:	dc01      	bgt.n	8019d7a <__ieee754_pow+0x6a>
 8019d76:	d10f      	bne.n	8019d98 <__ieee754_pow+0x88>
 8019d78:	b172      	cbz	r2, 8019d98 <__ieee754_pow+0x88>
 8019d7a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8019d7e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8019d82:	ea55 050a 	orrs.w	r5, r5, sl
 8019d86:	d1dc      	bne.n	8019d42 <__ieee754_pow+0x32>
 8019d88:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019d8c:	18db      	adds	r3, r3, r3
 8019d8e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8019d92:	4152      	adcs	r2, r2
 8019d94:	429d      	cmp	r5, r3
 8019d96:	e7d0      	b.n	8019d3a <__ieee754_pow+0x2a>
 8019d98:	2d00      	cmp	r5, #0
 8019d9a:	da3b      	bge.n	8019e14 <__ieee754_pow+0x104>
 8019d9c:	4b72      	ldr	r3, [pc, #456]	; (8019f68 <__ieee754_pow+0x258>)
 8019d9e:	4598      	cmp	r8, r3
 8019da0:	dc51      	bgt.n	8019e46 <__ieee754_pow+0x136>
 8019da2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019da6:	4598      	cmp	r8, r3
 8019da8:	f340 84ac 	ble.w	801a704 <__ieee754_pow+0x9f4>
 8019dac:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019db0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019db4:	2b14      	cmp	r3, #20
 8019db6:	dd0f      	ble.n	8019dd8 <__ieee754_pow+0xc8>
 8019db8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019dbc:	fa22 f103 	lsr.w	r1, r2, r3
 8019dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8019dc4:	4293      	cmp	r3, r2
 8019dc6:	f040 849d 	bne.w	801a704 <__ieee754_pow+0x9f4>
 8019dca:	f001 0101 	and.w	r1, r1, #1
 8019dce:	f1c1 0302 	rsb	r3, r1, #2
 8019dd2:	9304      	str	r3, [sp, #16]
 8019dd4:	b182      	cbz	r2, 8019df8 <__ieee754_pow+0xe8>
 8019dd6:	e05f      	b.n	8019e98 <__ieee754_pow+0x188>
 8019dd8:	2a00      	cmp	r2, #0
 8019dda:	d15b      	bne.n	8019e94 <__ieee754_pow+0x184>
 8019ddc:	f1c3 0314 	rsb	r3, r3, #20
 8019de0:	fa48 f103 	asr.w	r1, r8, r3
 8019de4:	fa01 f303 	lsl.w	r3, r1, r3
 8019de8:	4543      	cmp	r3, r8
 8019dea:	f040 8488 	bne.w	801a6fe <__ieee754_pow+0x9ee>
 8019dee:	f001 0101 	and.w	r1, r1, #1
 8019df2:	f1c1 0302 	rsb	r3, r1, #2
 8019df6:	9304      	str	r3, [sp, #16]
 8019df8:	4b5c      	ldr	r3, [pc, #368]	; (8019f6c <__ieee754_pow+0x25c>)
 8019dfa:	4598      	cmp	r8, r3
 8019dfc:	d132      	bne.n	8019e64 <__ieee754_pow+0x154>
 8019dfe:	f1b9 0f00 	cmp.w	r9, #0
 8019e02:	f280 8478 	bge.w	801a6f6 <__ieee754_pow+0x9e6>
 8019e06:	4959      	ldr	r1, [pc, #356]	; (8019f6c <__ieee754_pow+0x25c>)
 8019e08:	4632      	mov	r2, r6
 8019e0a:	463b      	mov	r3, r7
 8019e0c:	2000      	movs	r0, #0
 8019e0e:	f7e6 fd3d 	bl	800088c <__aeabi_ddiv>
 8019e12:	e79c      	b.n	8019d4e <__ieee754_pow+0x3e>
 8019e14:	2300      	movs	r3, #0
 8019e16:	9304      	str	r3, [sp, #16]
 8019e18:	2a00      	cmp	r2, #0
 8019e1a:	d13d      	bne.n	8019e98 <__ieee754_pow+0x188>
 8019e1c:	4b51      	ldr	r3, [pc, #324]	; (8019f64 <__ieee754_pow+0x254>)
 8019e1e:	4598      	cmp	r8, r3
 8019e20:	d1ea      	bne.n	8019df8 <__ieee754_pow+0xe8>
 8019e22:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019e26:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019e2a:	ea53 030a 	orrs.w	r3, r3, sl
 8019e2e:	f000 845a 	beq.w	801a6e6 <__ieee754_pow+0x9d6>
 8019e32:	4b4f      	ldr	r3, [pc, #316]	; (8019f70 <__ieee754_pow+0x260>)
 8019e34:	429c      	cmp	r4, r3
 8019e36:	dd08      	ble.n	8019e4a <__ieee754_pow+0x13a>
 8019e38:	f1b9 0f00 	cmp.w	r9, #0
 8019e3c:	f2c0 8457 	blt.w	801a6ee <__ieee754_pow+0x9de>
 8019e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019e44:	e783      	b.n	8019d4e <__ieee754_pow+0x3e>
 8019e46:	2302      	movs	r3, #2
 8019e48:	e7e5      	b.n	8019e16 <__ieee754_pow+0x106>
 8019e4a:	f1b9 0f00 	cmp.w	r9, #0
 8019e4e:	f04f 0000 	mov.w	r0, #0
 8019e52:	f04f 0100 	mov.w	r1, #0
 8019e56:	f6bf af7a 	bge.w	8019d4e <__ieee754_pow+0x3e>
 8019e5a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019e5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019e62:	e774      	b.n	8019d4e <__ieee754_pow+0x3e>
 8019e64:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019e68:	d106      	bne.n	8019e78 <__ieee754_pow+0x168>
 8019e6a:	4632      	mov	r2, r6
 8019e6c:	463b      	mov	r3, r7
 8019e6e:	4630      	mov	r0, r6
 8019e70:	4639      	mov	r1, r7
 8019e72:	f7e6 fbe1 	bl	8000638 <__aeabi_dmul>
 8019e76:	e76a      	b.n	8019d4e <__ieee754_pow+0x3e>
 8019e78:	4b3e      	ldr	r3, [pc, #248]	; (8019f74 <__ieee754_pow+0x264>)
 8019e7a:	4599      	cmp	r9, r3
 8019e7c:	d10c      	bne.n	8019e98 <__ieee754_pow+0x188>
 8019e7e:	2d00      	cmp	r5, #0
 8019e80:	db0a      	blt.n	8019e98 <__ieee754_pow+0x188>
 8019e82:	ec47 6b10 	vmov	d0, r6, r7
 8019e86:	b009      	add	sp, #36	; 0x24
 8019e88:	ecbd 8b06 	vpop	{d8-d10}
 8019e8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e90:	f000 be7a 	b.w	801ab88 <__ieee754_sqrt>
 8019e94:	2300      	movs	r3, #0
 8019e96:	9304      	str	r3, [sp, #16]
 8019e98:	ec47 6b10 	vmov	d0, r6, r7
 8019e9c:	f001 fe3a 	bl	801bb14 <fabs>
 8019ea0:	ec51 0b10 	vmov	r0, r1, d0
 8019ea4:	f1ba 0f00 	cmp.w	sl, #0
 8019ea8:	d129      	bne.n	8019efe <__ieee754_pow+0x1ee>
 8019eaa:	b124      	cbz	r4, 8019eb6 <__ieee754_pow+0x1a6>
 8019eac:	4b2f      	ldr	r3, [pc, #188]	; (8019f6c <__ieee754_pow+0x25c>)
 8019eae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8019eb2:	429a      	cmp	r2, r3
 8019eb4:	d123      	bne.n	8019efe <__ieee754_pow+0x1ee>
 8019eb6:	f1b9 0f00 	cmp.w	r9, #0
 8019eba:	da05      	bge.n	8019ec8 <__ieee754_pow+0x1b8>
 8019ebc:	4602      	mov	r2, r0
 8019ebe:	460b      	mov	r3, r1
 8019ec0:	2000      	movs	r0, #0
 8019ec2:	492a      	ldr	r1, [pc, #168]	; (8019f6c <__ieee754_pow+0x25c>)
 8019ec4:	f7e6 fce2 	bl	800088c <__aeabi_ddiv>
 8019ec8:	2d00      	cmp	r5, #0
 8019eca:	f6bf af40 	bge.w	8019d4e <__ieee754_pow+0x3e>
 8019ece:	9b04      	ldr	r3, [sp, #16]
 8019ed0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019ed4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019ed8:	4323      	orrs	r3, r4
 8019eda:	d108      	bne.n	8019eee <__ieee754_pow+0x1de>
 8019edc:	4602      	mov	r2, r0
 8019ede:	460b      	mov	r3, r1
 8019ee0:	4610      	mov	r0, r2
 8019ee2:	4619      	mov	r1, r3
 8019ee4:	f7e6 f9f0 	bl	80002c8 <__aeabi_dsub>
 8019ee8:	4602      	mov	r2, r0
 8019eea:	460b      	mov	r3, r1
 8019eec:	e78f      	b.n	8019e0e <__ieee754_pow+0xfe>
 8019eee:	9b04      	ldr	r3, [sp, #16]
 8019ef0:	2b01      	cmp	r3, #1
 8019ef2:	f47f af2c 	bne.w	8019d4e <__ieee754_pow+0x3e>
 8019ef6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019efa:	4619      	mov	r1, r3
 8019efc:	e727      	b.n	8019d4e <__ieee754_pow+0x3e>
 8019efe:	0feb      	lsrs	r3, r5, #31
 8019f00:	3b01      	subs	r3, #1
 8019f02:	9306      	str	r3, [sp, #24]
 8019f04:	9a06      	ldr	r2, [sp, #24]
 8019f06:	9b04      	ldr	r3, [sp, #16]
 8019f08:	4313      	orrs	r3, r2
 8019f0a:	d102      	bne.n	8019f12 <__ieee754_pow+0x202>
 8019f0c:	4632      	mov	r2, r6
 8019f0e:	463b      	mov	r3, r7
 8019f10:	e7e6      	b.n	8019ee0 <__ieee754_pow+0x1d0>
 8019f12:	4b19      	ldr	r3, [pc, #100]	; (8019f78 <__ieee754_pow+0x268>)
 8019f14:	4598      	cmp	r8, r3
 8019f16:	f340 80fb 	ble.w	801a110 <__ieee754_pow+0x400>
 8019f1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019f1e:	4598      	cmp	r8, r3
 8019f20:	4b13      	ldr	r3, [pc, #76]	; (8019f70 <__ieee754_pow+0x260>)
 8019f22:	dd0c      	ble.n	8019f3e <__ieee754_pow+0x22e>
 8019f24:	429c      	cmp	r4, r3
 8019f26:	dc0f      	bgt.n	8019f48 <__ieee754_pow+0x238>
 8019f28:	f1b9 0f00 	cmp.w	r9, #0
 8019f2c:	da0f      	bge.n	8019f4e <__ieee754_pow+0x23e>
 8019f2e:	2000      	movs	r0, #0
 8019f30:	b009      	add	sp, #36	; 0x24
 8019f32:	ecbd 8b06 	vpop	{d8-d10}
 8019f36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f3a:	f001 bde2 	b.w	801bb02 <__math_oflow>
 8019f3e:	429c      	cmp	r4, r3
 8019f40:	dbf2      	blt.n	8019f28 <__ieee754_pow+0x218>
 8019f42:	4b0a      	ldr	r3, [pc, #40]	; (8019f6c <__ieee754_pow+0x25c>)
 8019f44:	429c      	cmp	r4, r3
 8019f46:	dd19      	ble.n	8019f7c <__ieee754_pow+0x26c>
 8019f48:	f1b9 0f00 	cmp.w	r9, #0
 8019f4c:	dcef      	bgt.n	8019f2e <__ieee754_pow+0x21e>
 8019f4e:	2000      	movs	r0, #0
 8019f50:	b009      	add	sp, #36	; 0x24
 8019f52:	ecbd 8b06 	vpop	{d8-d10}
 8019f56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f5a:	f001 bdc9 	b.w	801baf0 <__math_uflow>
 8019f5e:	bf00      	nop
 8019f60:	fff00000 	.word	0xfff00000
 8019f64:	7ff00000 	.word	0x7ff00000
 8019f68:	433fffff 	.word	0x433fffff
 8019f6c:	3ff00000 	.word	0x3ff00000
 8019f70:	3fefffff 	.word	0x3fefffff
 8019f74:	3fe00000 	.word	0x3fe00000
 8019f78:	41e00000 	.word	0x41e00000
 8019f7c:	4b60      	ldr	r3, [pc, #384]	; (801a100 <__ieee754_pow+0x3f0>)
 8019f7e:	2200      	movs	r2, #0
 8019f80:	f7e6 f9a2 	bl	80002c8 <__aeabi_dsub>
 8019f84:	a354      	add	r3, pc, #336	; (adr r3, 801a0d8 <__ieee754_pow+0x3c8>)
 8019f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8a:	4604      	mov	r4, r0
 8019f8c:	460d      	mov	r5, r1
 8019f8e:	f7e6 fb53 	bl	8000638 <__aeabi_dmul>
 8019f92:	a353      	add	r3, pc, #332	; (adr r3, 801a0e0 <__ieee754_pow+0x3d0>)
 8019f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f98:	4606      	mov	r6, r0
 8019f9a:	460f      	mov	r7, r1
 8019f9c:	4620      	mov	r0, r4
 8019f9e:	4629      	mov	r1, r5
 8019fa0:	f7e6 fb4a 	bl	8000638 <__aeabi_dmul>
 8019fa4:	4b57      	ldr	r3, [pc, #348]	; (801a104 <__ieee754_pow+0x3f4>)
 8019fa6:	4682      	mov	sl, r0
 8019fa8:	468b      	mov	fp, r1
 8019faa:	2200      	movs	r2, #0
 8019fac:	4620      	mov	r0, r4
 8019fae:	4629      	mov	r1, r5
 8019fb0:	f7e6 fb42 	bl	8000638 <__aeabi_dmul>
 8019fb4:	4602      	mov	r2, r0
 8019fb6:	460b      	mov	r3, r1
 8019fb8:	a14b      	add	r1, pc, #300	; (adr r1, 801a0e8 <__ieee754_pow+0x3d8>)
 8019fba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fbe:	f7e6 f983 	bl	80002c8 <__aeabi_dsub>
 8019fc2:	4622      	mov	r2, r4
 8019fc4:	462b      	mov	r3, r5
 8019fc6:	f7e6 fb37 	bl	8000638 <__aeabi_dmul>
 8019fca:	4602      	mov	r2, r0
 8019fcc:	460b      	mov	r3, r1
 8019fce:	2000      	movs	r0, #0
 8019fd0:	494d      	ldr	r1, [pc, #308]	; (801a108 <__ieee754_pow+0x3f8>)
 8019fd2:	f7e6 f979 	bl	80002c8 <__aeabi_dsub>
 8019fd6:	4622      	mov	r2, r4
 8019fd8:	4680      	mov	r8, r0
 8019fda:	4689      	mov	r9, r1
 8019fdc:	462b      	mov	r3, r5
 8019fde:	4620      	mov	r0, r4
 8019fe0:	4629      	mov	r1, r5
 8019fe2:	f7e6 fb29 	bl	8000638 <__aeabi_dmul>
 8019fe6:	4602      	mov	r2, r0
 8019fe8:	460b      	mov	r3, r1
 8019fea:	4640      	mov	r0, r8
 8019fec:	4649      	mov	r1, r9
 8019fee:	f7e6 fb23 	bl	8000638 <__aeabi_dmul>
 8019ff2:	a33f      	add	r3, pc, #252	; (adr r3, 801a0f0 <__ieee754_pow+0x3e0>)
 8019ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ff8:	f7e6 fb1e 	bl	8000638 <__aeabi_dmul>
 8019ffc:	4602      	mov	r2, r0
 8019ffe:	460b      	mov	r3, r1
 801a000:	4650      	mov	r0, sl
 801a002:	4659      	mov	r1, fp
 801a004:	f7e6 f960 	bl	80002c8 <__aeabi_dsub>
 801a008:	4602      	mov	r2, r0
 801a00a:	460b      	mov	r3, r1
 801a00c:	4680      	mov	r8, r0
 801a00e:	4689      	mov	r9, r1
 801a010:	4630      	mov	r0, r6
 801a012:	4639      	mov	r1, r7
 801a014:	f7e6 f95a 	bl	80002cc <__adddf3>
 801a018:	2000      	movs	r0, #0
 801a01a:	4632      	mov	r2, r6
 801a01c:	463b      	mov	r3, r7
 801a01e:	4604      	mov	r4, r0
 801a020:	460d      	mov	r5, r1
 801a022:	f7e6 f951 	bl	80002c8 <__aeabi_dsub>
 801a026:	4602      	mov	r2, r0
 801a028:	460b      	mov	r3, r1
 801a02a:	4640      	mov	r0, r8
 801a02c:	4649      	mov	r1, r9
 801a02e:	f7e6 f94b 	bl	80002c8 <__aeabi_dsub>
 801a032:	9b04      	ldr	r3, [sp, #16]
 801a034:	9a06      	ldr	r2, [sp, #24]
 801a036:	3b01      	subs	r3, #1
 801a038:	4313      	orrs	r3, r2
 801a03a:	4682      	mov	sl, r0
 801a03c:	468b      	mov	fp, r1
 801a03e:	f040 81e7 	bne.w	801a410 <__ieee754_pow+0x700>
 801a042:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801a0f8 <__ieee754_pow+0x3e8>
 801a046:	eeb0 8a47 	vmov.f32	s16, s14
 801a04a:	eef0 8a67 	vmov.f32	s17, s15
 801a04e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a052:	2600      	movs	r6, #0
 801a054:	4632      	mov	r2, r6
 801a056:	463b      	mov	r3, r7
 801a058:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a05c:	f7e6 f934 	bl	80002c8 <__aeabi_dsub>
 801a060:	4622      	mov	r2, r4
 801a062:	462b      	mov	r3, r5
 801a064:	f7e6 fae8 	bl	8000638 <__aeabi_dmul>
 801a068:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a06c:	4680      	mov	r8, r0
 801a06e:	4689      	mov	r9, r1
 801a070:	4650      	mov	r0, sl
 801a072:	4659      	mov	r1, fp
 801a074:	f7e6 fae0 	bl	8000638 <__aeabi_dmul>
 801a078:	4602      	mov	r2, r0
 801a07a:	460b      	mov	r3, r1
 801a07c:	4640      	mov	r0, r8
 801a07e:	4649      	mov	r1, r9
 801a080:	f7e6 f924 	bl	80002cc <__adddf3>
 801a084:	4632      	mov	r2, r6
 801a086:	463b      	mov	r3, r7
 801a088:	4680      	mov	r8, r0
 801a08a:	4689      	mov	r9, r1
 801a08c:	4620      	mov	r0, r4
 801a08e:	4629      	mov	r1, r5
 801a090:	f7e6 fad2 	bl	8000638 <__aeabi_dmul>
 801a094:	460b      	mov	r3, r1
 801a096:	4604      	mov	r4, r0
 801a098:	460d      	mov	r5, r1
 801a09a:	4602      	mov	r2, r0
 801a09c:	4649      	mov	r1, r9
 801a09e:	4640      	mov	r0, r8
 801a0a0:	f7e6 f914 	bl	80002cc <__adddf3>
 801a0a4:	4b19      	ldr	r3, [pc, #100]	; (801a10c <__ieee754_pow+0x3fc>)
 801a0a6:	4299      	cmp	r1, r3
 801a0a8:	ec45 4b19 	vmov	d9, r4, r5
 801a0ac:	4606      	mov	r6, r0
 801a0ae:	460f      	mov	r7, r1
 801a0b0:	468b      	mov	fp, r1
 801a0b2:	f340 82f1 	ble.w	801a698 <__ieee754_pow+0x988>
 801a0b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801a0ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801a0be:	4303      	orrs	r3, r0
 801a0c0:	f000 81e4 	beq.w	801a48c <__ieee754_pow+0x77c>
 801a0c4:	ec51 0b18 	vmov	r0, r1, d8
 801a0c8:	2200      	movs	r2, #0
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	f7e6 fd26 	bl	8000b1c <__aeabi_dcmplt>
 801a0d0:	3800      	subs	r0, #0
 801a0d2:	bf18      	it	ne
 801a0d4:	2001      	movne	r0, #1
 801a0d6:	e72b      	b.n	8019f30 <__ieee754_pow+0x220>
 801a0d8:	60000000 	.word	0x60000000
 801a0dc:	3ff71547 	.word	0x3ff71547
 801a0e0:	f85ddf44 	.word	0xf85ddf44
 801a0e4:	3e54ae0b 	.word	0x3e54ae0b
 801a0e8:	55555555 	.word	0x55555555
 801a0ec:	3fd55555 	.word	0x3fd55555
 801a0f0:	652b82fe 	.word	0x652b82fe
 801a0f4:	3ff71547 	.word	0x3ff71547
 801a0f8:	00000000 	.word	0x00000000
 801a0fc:	bff00000 	.word	0xbff00000
 801a100:	3ff00000 	.word	0x3ff00000
 801a104:	3fd00000 	.word	0x3fd00000
 801a108:	3fe00000 	.word	0x3fe00000
 801a10c:	408fffff 	.word	0x408fffff
 801a110:	4bd5      	ldr	r3, [pc, #852]	; (801a468 <__ieee754_pow+0x758>)
 801a112:	402b      	ands	r3, r5
 801a114:	2200      	movs	r2, #0
 801a116:	b92b      	cbnz	r3, 801a124 <__ieee754_pow+0x414>
 801a118:	4bd4      	ldr	r3, [pc, #848]	; (801a46c <__ieee754_pow+0x75c>)
 801a11a:	f7e6 fa8d 	bl	8000638 <__aeabi_dmul>
 801a11e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801a122:	460c      	mov	r4, r1
 801a124:	1523      	asrs	r3, r4, #20
 801a126:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a12a:	4413      	add	r3, r2
 801a12c:	9305      	str	r3, [sp, #20]
 801a12e:	4bd0      	ldr	r3, [pc, #832]	; (801a470 <__ieee754_pow+0x760>)
 801a130:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a134:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801a138:	429c      	cmp	r4, r3
 801a13a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a13e:	dd08      	ble.n	801a152 <__ieee754_pow+0x442>
 801a140:	4bcc      	ldr	r3, [pc, #816]	; (801a474 <__ieee754_pow+0x764>)
 801a142:	429c      	cmp	r4, r3
 801a144:	f340 8162 	ble.w	801a40c <__ieee754_pow+0x6fc>
 801a148:	9b05      	ldr	r3, [sp, #20]
 801a14a:	3301      	adds	r3, #1
 801a14c:	9305      	str	r3, [sp, #20]
 801a14e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801a152:	2400      	movs	r4, #0
 801a154:	00e3      	lsls	r3, r4, #3
 801a156:	9307      	str	r3, [sp, #28]
 801a158:	4bc7      	ldr	r3, [pc, #796]	; (801a478 <__ieee754_pow+0x768>)
 801a15a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a15e:	ed93 7b00 	vldr	d7, [r3]
 801a162:	4629      	mov	r1, r5
 801a164:	ec53 2b17 	vmov	r2, r3, d7
 801a168:	eeb0 9a47 	vmov.f32	s18, s14
 801a16c:	eef0 9a67 	vmov.f32	s19, s15
 801a170:	4682      	mov	sl, r0
 801a172:	f7e6 f8a9 	bl	80002c8 <__aeabi_dsub>
 801a176:	4652      	mov	r2, sl
 801a178:	4606      	mov	r6, r0
 801a17a:	460f      	mov	r7, r1
 801a17c:	462b      	mov	r3, r5
 801a17e:	ec51 0b19 	vmov	r0, r1, d9
 801a182:	f7e6 f8a3 	bl	80002cc <__adddf3>
 801a186:	4602      	mov	r2, r0
 801a188:	460b      	mov	r3, r1
 801a18a:	2000      	movs	r0, #0
 801a18c:	49bb      	ldr	r1, [pc, #748]	; (801a47c <__ieee754_pow+0x76c>)
 801a18e:	f7e6 fb7d 	bl	800088c <__aeabi_ddiv>
 801a192:	ec41 0b1a 	vmov	d10, r0, r1
 801a196:	4602      	mov	r2, r0
 801a198:	460b      	mov	r3, r1
 801a19a:	4630      	mov	r0, r6
 801a19c:	4639      	mov	r1, r7
 801a19e:	f7e6 fa4b 	bl	8000638 <__aeabi_dmul>
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a1a8:	9302      	str	r3, [sp, #8]
 801a1aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801a1ae:	46ab      	mov	fp, r5
 801a1b0:	106d      	asrs	r5, r5, #1
 801a1b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801a1b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801a1ba:	ec41 0b18 	vmov	d8, r0, r1
 801a1be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801a1c2:	2200      	movs	r2, #0
 801a1c4:	4640      	mov	r0, r8
 801a1c6:	4649      	mov	r1, r9
 801a1c8:	4614      	mov	r4, r2
 801a1ca:	461d      	mov	r5, r3
 801a1cc:	f7e6 fa34 	bl	8000638 <__aeabi_dmul>
 801a1d0:	4602      	mov	r2, r0
 801a1d2:	460b      	mov	r3, r1
 801a1d4:	4630      	mov	r0, r6
 801a1d6:	4639      	mov	r1, r7
 801a1d8:	f7e6 f876 	bl	80002c8 <__aeabi_dsub>
 801a1dc:	ec53 2b19 	vmov	r2, r3, d9
 801a1e0:	4606      	mov	r6, r0
 801a1e2:	460f      	mov	r7, r1
 801a1e4:	4620      	mov	r0, r4
 801a1e6:	4629      	mov	r1, r5
 801a1e8:	f7e6 f86e 	bl	80002c8 <__aeabi_dsub>
 801a1ec:	4602      	mov	r2, r0
 801a1ee:	460b      	mov	r3, r1
 801a1f0:	4650      	mov	r0, sl
 801a1f2:	4659      	mov	r1, fp
 801a1f4:	f7e6 f868 	bl	80002c8 <__aeabi_dsub>
 801a1f8:	4642      	mov	r2, r8
 801a1fa:	464b      	mov	r3, r9
 801a1fc:	f7e6 fa1c 	bl	8000638 <__aeabi_dmul>
 801a200:	4602      	mov	r2, r0
 801a202:	460b      	mov	r3, r1
 801a204:	4630      	mov	r0, r6
 801a206:	4639      	mov	r1, r7
 801a208:	f7e6 f85e 	bl	80002c8 <__aeabi_dsub>
 801a20c:	ec53 2b1a 	vmov	r2, r3, d10
 801a210:	f7e6 fa12 	bl	8000638 <__aeabi_dmul>
 801a214:	ec53 2b18 	vmov	r2, r3, d8
 801a218:	ec41 0b19 	vmov	d9, r0, r1
 801a21c:	ec51 0b18 	vmov	r0, r1, d8
 801a220:	f7e6 fa0a 	bl	8000638 <__aeabi_dmul>
 801a224:	a37c      	add	r3, pc, #496	; (adr r3, 801a418 <__ieee754_pow+0x708>)
 801a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a22a:	4604      	mov	r4, r0
 801a22c:	460d      	mov	r5, r1
 801a22e:	f7e6 fa03 	bl	8000638 <__aeabi_dmul>
 801a232:	a37b      	add	r3, pc, #492	; (adr r3, 801a420 <__ieee754_pow+0x710>)
 801a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a238:	f7e6 f848 	bl	80002cc <__adddf3>
 801a23c:	4622      	mov	r2, r4
 801a23e:	462b      	mov	r3, r5
 801a240:	f7e6 f9fa 	bl	8000638 <__aeabi_dmul>
 801a244:	a378      	add	r3, pc, #480	; (adr r3, 801a428 <__ieee754_pow+0x718>)
 801a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a24a:	f7e6 f83f 	bl	80002cc <__adddf3>
 801a24e:	4622      	mov	r2, r4
 801a250:	462b      	mov	r3, r5
 801a252:	f7e6 f9f1 	bl	8000638 <__aeabi_dmul>
 801a256:	a376      	add	r3, pc, #472	; (adr r3, 801a430 <__ieee754_pow+0x720>)
 801a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a25c:	f7e6 f836 	bl	80002cc <__adddf3>
 801a260:	4622      	mov	r2, r4
 801a262:	462b      	mov	r3, r5
 801a264:	f7e6 f9e8 	bl	8000638 <__aeabi_dmul>
 801a268:	a373      	add	r3, pc, #460	; (adr r3, 801a438 <__ieee754_pow+0x728>)
 801a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a26e:	f7e6 f82d 	bl	80002cc <__adddf3>
 801a272:	4622      	mov	r2, r4
 801a274:	462b      	mov	r3, r5
 801a276:	f7e6 f9df 	bl	8000638 <__aeabi_dmul>
 801a27a:	a371      	add	r3, pc, #452	; (adr r3, 801a440 <__ieee754_pow+0x730>)
 801a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a280:	f7e6 f824 	bl	80002cc <__adddf3>
 801a284:	4622      	mov	r2, r4
 801a286:	4606      	mov	r6, r0
 801a288:	460f      	mov	r7, r1
 801a28a:	462b      	mov	r3, r5
 801a28c:	4620      	mov	r0, r4
 801a28e:	4629      	mov	r1, r5
 801a290:	f7e6 f9d2 	bl	8000638 <__aeabi_dmul>
 801a294:	4602      	mov	r2, r0
 801a296:	460b      	mov	r3, r1
 801a298:	4630      	mov	r0, r6
 801a29a:	4639      	mov	r1, r7
 801a29c:	f7e6 f9cc 	bl	8000638 <__aeabi_dmul>
 801a2a0:	4642      	mov	r2, r8
 801a2a2:	4604      	mov	r4, r0
 801a2a4:	460d      	mov	r5, r1
 801a2a6:	464b      	mov	r3, r9
 801a2a8:	ec51 0b18 	vmov	r0, r1, d8
 801a2ac:	f7e6 f80e 	bl	80002cc <__adddf3>
 801a2b0:	ec53 2b19 	vmov	r2, r3, d9
 801a2b4:	f7e6 f9c0 	bl	8000638 <__aeabi_dmul>
 801a2b8:	4622      	mov	r2, r4
 801a2ba:	462b      	mov	r3, r5
 801a2bc:	f7e6 f806 	bl	80002cc <__adddf3>
 801a2c0:	4642      	mov	r2, r8
 801a2c2:	4682      	mov	sl, r0
 801a2c4:	468b      	mov	fp, r1
 801a2c6:	464b      	mov	r3, r9
 801a2c8:	4640      	mov	r0, r8
 801a2ca:	4649      	mov	r1, r9
 801a2cc:	f7e6 f9b4 	bl	8000638 <__aeabi_dmul>
 801a2d0:	4b6b      	ldr	r3, [pc, #428]	; (801a480 <__ieee754_pow+0x770>)
 801a2d2:	2200      	movs	r2, #0
 801a2d4:	4606      	mov	r6, r0
 801a2d6:	460f      	mov	r7, r1
 801a2d8:	f7e5 fff8 	bl	80002cc <__adddf3>
 801a2dc:	4652      	mov	r2, sl
 801a2de:	465b      	mov	r3, fp
 801a2e0:	f7e5 fff4 	bl	80002cc <__adddf3>
 801a2e4:	2000      	movs	r0, #0
 801a2e6:	4604      	mov	r4, r0
 801a2e8:	460d      	mov	r5, r1
 801a2ea:	4602      	mov	r2, r0
 801a2ec:	460b      	mov	r3, r1
 801a2ee:	4640      	mov	r0, r8
 801a2f0:	4649      	mov	r1, r9
 801a2f2:	f7e6 f9a1 	bl	8000638 <__aeabi_dmul>
 801a2f6:	4b62      	ldr	r3, [pc, #392]	; (801a480 <__ieee754_pow+0x770>)
 801a2f8:	4680      	mov	r8, r0
 801a2fa:	4689      	mov	r9, r1
 801a2fc:	2200      	movs	r2, #0
 801a2fe:	4620      	mov	r0, r4
 801a300:	4629      	mov	r1, r5
 801a302:	f7e5 ffe1 	bl	80002c8 <__aeabi_dsub>
 801a306:	4632      	mov	r2, r6
 801a308:	463b      	mov	r3, r7
 801a30a:	f7e5 ffdd 	bl	80002c8 <__aeabi_dsub>
 801a30e:	4602      	mov	r2, r0
 801a310:	460b      	mov	r3, r1
 801a312:	4650      	mov	r0, sl
 801a314:	4659      	mov	r1, fp
 801a316:	f7e5 ffd7 	bl	80002c8 <__aeabi_dsub>
 801a31a:	ec53 2b18 	vmov	r2, r3, d8
 801a31e:	f7e6 f98b 	bl	8000638 <__aeabi_dmul>
 801a322:	4622      	mov	r2, r4
 801a324:	4606      	mov	r6, r0
 801a326:	460f      	mov	r7, r1
 801a328:	462b      	mov	r3, r5
 801a32a:	ec51 0b19 	vmov	r0, r1, d9
 801a32e:	f7e6 f983 	bl	8000638 <__aeabi_dmul>
 801a332:	4602      	mov	r2, r0
 801a334:	460b      	mov	r3, r1
 801a336:	4630      	mov	r0, r6
 801a338:	4639      	mov	r1, r7
 801a33a:	f7e5 ffc7 	bl	80002cc <__adddf3>
 801a33e:	4606      	mov	r6, r0
 801a340:	460f      	mov	r7, r1
 801a342:	4602      	mov	r2, r0
 801a344:	460b      	mov	r3, r1
 801a346:	4640      	mov	r0, r8
 801a348:	4649      	mov	r1, r9
 801a34a:	f7e5 ffbf 	bl	80002cc <__adddf3>
 801a34e:	a33e      	add	r3, pc, #248	; (adr r3, 801a448 <__ieee754_pow+0x738>)
 801a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a354:	2000      	movs	r0, #0
 801a356:	4604      	mov	r4, r0
 801a358:	460d      	mov	r5, r1
 801a35a:	f7e6 f96d 	bl	8000638 <__aeabi_dmul>
 801a35e:	4642      	mov	r2, r8
 801a360:	ec41 0b18 	vmov	d8, r0, r1
 801a364:	464b      	mov	r3, r9
 801a366:	4620      	mov	r0, r4
 801a368:	4629      	mov	r1, r5
 801a36a:	f7e5 ffad 	bl	80002c8 <__aeabi_dsub>
 801a36e:	4602      	mov	r2, r0
 801a370:	460b      	mov	r3, r1
 801a372:	4630      	mov	r0, r6
 801a374:	4639      	mov	r1, r7
 801a376:	f7e5 ffa7 	bl	80002c8 <__aeabi_dsub>
 801a37a:	a335      	add	r3, pc, #212	; (adr r3, 801a450 <__ieee754_pow+0x740>)
 801a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a380:	f7e6 f95a 	bl	8000638 <__aeabi_dmul>
 801a384:	a334      	add	r3, pc, #208	; (adr r3, 801a458 <__ieee754_pow+0x748>)
 801a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a38a:	4606      	mov	r6, r0
 801a38c:	460f      	mov	r7, r1
 801a38e:	4620      	mov	r0, r4
 801a390:	4629      	mov	r1, r5
 801a392:	f7e6 f951 	bl	8000638 <__aeabi_dmul>
 801a396:	4602      	mov	r2, r0
 801a398:	460b      	mov	r3, r1
 801a39a:	4630      	mov	r0, r6
 801a39c:	4639      	mov	r1, r7
 801a39e:	f7e5 ff95 	bl	80002cc <__adddf3>
 801a3a2:	9a07      	ldr	r2, [sp, #28]
 801a3a4:	4b37      	ldr	r3, [pc, #220]	; (801a484 <__ieee754_pow+0x774>)
 801a3a6:	4413      	add	r3, r2
 801a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ac:	f7e5 ff8e 	bl	80002cc <__adddf3>
 801a3b0:	4682      	mov	sl, r0
 801a3b2:	9805      	ldr	r0, [sp, #20]
 801a3b4:	468b      	mov	fp, r1
 801a3b6:	f7e6 f8d5 	bl	8000564 <__aeabi_i2d>
 801a3ba:	9a07      	ldr	r2, [sp, #28]
 801a3bc:	4b32      	ldr	r3, [pc, #200]	; (801a488 <__ieee754_pow+0x778>)
 801a3be:	4413      	add	r3, r2
 801a3c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a3c4:	4606      	mov	r6, r0
 801a3c6:	460f      	mov	r7, r1
 801a3c8:	4652      	mov	r2, sl
 801a3ca:	465b      	mov	r3, fp
 801a3cc:	ec51 0b18 	vmov	r0, r1, d8
 801a3d0:	f7e5 ff7c 	bl	80002cc <__adddf3>
 801a3d4:	4642      	mov	r2, r8
 801a3d6:	464b      	mov	r3, r9
 801a3d8:	f7e5 ff78 	bl	80002cc <__adddf3>
 801a3dc:	4632      	mov	r2, r6
 801a3de:	463b      	mov	r3, r7
 801a3e0:	f7e5 ff74 	bl	80002cc <__adddf3>
 801a3e4:	2000      	movs	r0, #0
 801a3e6:	4632      	mov	r2, r6
 801a3e8:	463b      	mov	r3, r7
 801a3ea:	4604      	mov	r4, r0
 801a3ec:	460d      	mov	r5, r1
 801a3ee:	f7e5 ff6b 	bl	80002c8 <__aeabi_dsub>
 801a3f2:	4642      	mov	r2, r8
 801a3f4:	464b      	mov	r3, r9
 801a3f6:	f7e5 ff67 	bl	80002c8 <__aeabi_dsub>
 801a3fa:	ec53 2b18 	vmov	r2, r3, d8
 801a3fe:	f7e5 ff63 	bl	80002c8 <__aeabi_dsub>
 801a402:	4602      	mov	r2, r0
 801a404:	460b      	mov	r3, r1
 801a406:	4650      	mov	r0, sl
 801a408:	4659      	mov	r1, fp
 801a40a:	e610      	b.n	801a02e <__ieee754_pow+0x31e>
 801a40c:	2401      	movs	r4, #1
 801a40e:	e6a1      	b.n	801a154 <__ieee754_pow+0x444>
 801a410:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801a460 <__ieee754_pow+0x750>
 801a414:	e617      	b.n	801a046 <__ieee754_pow+0x336>
 801a416:	bf00      	nop
 801a418:	4a454eef 	.word	0x4a454eef
 801a41c:	3fca7e28 	.word	0x3fca7e28
 801a420:	93c9db65 	.word	0x93c9db65
 801a424:	3fcd864a 	.word	0x3fcd864a
 801a428:	a91d4101 	.word	0xa91d4101
 801a42c:	3fd17460 	.word	0x3fd17460
 801a430:	518f264d 	.word	0x518f264d
 801a434:	3fd55555 	.word	0x3fd55555
 801a438:	db6fabff 	.word	0xdb6fabff
 801a43c:	3fdb6db6 	.word	0x3fdb6db6
 801a440:	33333303 	.word	0x33333303
 801a444:	3fe33333 	.word	0x3fe33333
 801a448:	e0000000 	.word	0xe0000000
 801a44c:	3feec709 	.word	0x3feec709
 801a450:	dc3a03fd 	.word	0xdc3a03fd
 801a454:	3feec709 	.word	0x3feec709
 801a458:	145b01f5 	.word	0x145b01f5
 801a45c:	be3e2fe0 	.word	0xbe3e2fe0
 801a460:	00000000 	.word	0x00000000
 801a464:	3ff00000 	.word	0x3ff00000
 801a468:	7ff00000 	.word	0x7ff00000
 801a46c:	43400000 	.word	0x43400000
 801a470:	0003988e 	.word	0x0003988e
 801a474:	000bb679 	.word	0x000bb679
 801a478:	0805bf90 	.word	0x0805bf90
 801a47c:	3ff00000 	.word	0x3ff00000
 801a480:	40080000 	.word	0x40080000
 801a484:	0805bfb0 	.word	0x0805bfb0
 801a488:	0805bfa0 	.word	0x0805bfa0
 801a48c:	a3b5      	add	r3, pc, #724	; (adr r3, 801a764 <__ieee754_pow+0xa54>)
 801a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a492:	4640      	mov	r0, r8
 801a494:	4649      	mov	r1, r9
 801a496:	f7e5 ff19 	bl	80002cc <__adddf3>
 801a49a:	4622      	mov	r2, r4
 801a49c:	ec41 0b1a 	vmov	d10, r0, r1
 801a4a0:	462b      	mov	r3, r5
 801a4a2:	4630      	mov	r0, r6
 801a4a4:	4639      	mov	r1, r7
 801a4a6:	f7e5 ff0f 	bl	80002c8 <__aeabi_dsub>
 801a4aa:	4602      	mov	r2, r0
 801a4ac:	460b      	mov	r3, r1
 801a4ae:	ec51 0b1a 	vmov	r0, r1, d10
 801a4b2:	f7e6 fb51 	bl	8000b58 <__aeabi_dcmpgt>
 801a4b6:	2800      	cmp	r0, #0
 801a4b8:	f47f ae04 	bne.w	801a0c4 <__ieee754_pow+0x3b4>
 801a4bc:	4aa4      	ldr	r2, [pc, #656]	; (801a750 <__ieee754_pow+0xa40>)
 801a4be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a4c2:	4293      	cmp	r3, r2
 801a4c4:	f340 8108 	ble.w	801a6d8 <__ieee754_pow+0x9c8>
 801a4c8:	151b      	asrs	r3, r3, #20
 801a4ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801a4ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a4d2:	fa4a f303 	asr.w	r3, sl, r3
 801a4d6:	445b      	add	r3, fp
 801a4d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801a4dc:	4e9d      	ldr	r6, [pc, #628]	; (801a754 <__ieee754_pow+0xa44>)
 801a4de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801a4e2:	4116      	asrs	r6, r2
 801a4e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801a4e8:	2000      	movs	r0, #0
 801a4ea:	ea23 0106 	bic.w	r1, r3, r6
 801a4ee:	f1c2 0214 	rsb	r2, r2, #20
 801a4f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801a4f6:	fa4a fa02 	asr.w	sl, sl, r2
 801a4fa:	f1bb 0f00 	cmp.w	fp, #0
 801a4fe:	4602      	mov	r2, r0
 801a500:	460b      	mov	r3, r1
 801a502:	4620      	mov	r0, r4
 801a504:	4629      	mov	r1, r5
 801a506:	bfb8      	it	lt
 801a508:	f1ca 0a00 	rsblt	sl, sl, #0
 801a50c:	f7e5 fedc 	bl	80002c8 <__aeabi_dsub>
 801a510:	ec41 0b19 	vmov	d9, r0, r1
 801a514:	4642      	mov	r2, r8
 801a516:	464b      	mov	r3, r9
 801a518:	ec51 0b19 	vmov	r0, r1, d9
 801a51c:	f7e5 fed6 	bl	80002cc <__adddf3>
 801a520:	a37b      	add	r3, pc, #492	; (adr r3, 801a710 <__ieee754_pow+0xa00>)
 801a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a526:	2000      	movs	r0, #0
 801a528:	4604      	mov	r4, r0
 801a52a:	460d      	mov	r5, r1
 801a52c:	f7e6 f884 	bl	8000638 <__aeabi_dmul>
 801a530:	ec53 2b19 	vmov	r2, r3, d9
 801a534:	4606      	mov	r6, r0
 801a536:	460f      	mov	r7, r1
 801a538:	4620      	mov	r0, r4
 801a53a:	4629      	mov	r1, r5
 801a53c:	f7e5 fec4 	bl	80002c8 <__aeabi_dsub>
 801a540:	4602      	mov	r2, r0
 801a542:	460b      	mov	r3, r1
 801a544:	4640      	mov	r0, r8
 801a546:	4649      	mov	r1, r9
 801a548:	f7e5 febe 	bl	80002c8 <__aeabi_dsub>
 801a54c:	a372      	add	r3, pc, #456	; (adr r3, 801a718 <__ieee754_pow+0xa08>)
 801a54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a552:	f7e6 f871 	bl	8000638 <__aeabi_dmul>
 801a556:	a372      	add	r3, pc, #456	; (adr r3, 801a720 <__ieee754_pow+0xa10>)
 801a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a55c:	4680      	mov	r8, r0
 801a55e:	4689      	mov	r9, r1
 801a560:	4620      	mov	r0, r4
 801a562:	4629      	mov	r1, r5
 801a564:	f7e6 f868 	bl	8000638 <__aeabi_dmul>
 801a568:	4602      	mov	r2, r0
 801a56a:	460b      	mov	r3, r1
 801a56c:	4640      	mov	r0, r8
 801a56e:	4649      	mov	r1, r9
 801a570:	f7e5 feac 	bl	80002cc <__adddf3>
 801a574:	4604      	mov	r4, r0
 801a576:	460d      	mov	r5, r1
 801a578:	4602      	mov	r2, r0
 801a57a:	460b      	mov	r3, r1
 801a57c:	4630      	mov	r0, r6
 801a57e:	4639      	mov	r1, r7
 801a580:	f7e5 fea4 	bl	80002cc <__adddf3>
 801a584:	4632      	mov	r2, r6
 801a586:	463b      	mov	r3, r7
 801a588:	4680      	mov	r8, r0
 801a58a:	4689      	mov	r9, r1
 801a58c:	f7e5 fe9c 	bl	80002c8 <__aeabi_dsub>
 801a590:	4602      	mov	r2, r0
 801a592:	460b      	mov	r3, r1
 801a594:	4620      	mov	r0, r4
 801a596:	4629      	mov	r1, r5
 801a598:	f7e5 fe96 	bl	80002c8 <__aeabi_dsub>
 801a59c:	4642      	mov	r2, r8
 801a59e:	4606      	mov	r6, r0
 801a5a0:	460f      	mov	r7, r1
 801a5a2:	464b      	mov	r3, r9
 801a5a4:	4640      	mov	r0, r8
 801a5a6:	4649      	mov	r1, r9
 801a5a8:	f7e6 f846 	bl	8000638 <__aeabi_dmul>
 801a5ac:	a35e      	add	r3, pc, #376	; (adr r3, 801a728 <__ieee754_pow+0xa18>)
 801a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b2:	4604      	mov	r4, r0
 801a5b4:	460d      	mov	r5, r1
 801a5b6:	f7e6 f83f 	bl	8000638 <__aeabi_dmul>
 801a5ba:	a35d      	add	r3, pc, #372	; (adr r3, 801a730 <__ieee754_pow+0xa20>)
 801a5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5c0:	f7e5 fe82 	bl	80002c8 <__aeabi_dsub>
 801a5c4:	4622      	mov	r2, r4
 801a5c6:	462b      	mov	r3, r5
 801a5c8:	f7e6 f836 	bl	8000638 <__aeabi_dmul>
 801a5cc:	a35a      	add	r3, pc, #360	; (adr r3, 801a738 <__ieee754_pow+0xa28>)
 801a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5d2:	f7e5 fe7b 	bl	80002cc <__adddf3>
 801a5d6:	4622      	mov	r2, r4
 801a5d8:	462b      	mov	r3, r5
 801a5da:	f7e6 f82d 	bl	8000638 <__aeabi_dmul>
 801a5de:	a358      	add	r3, pc, #352	; (adr r3, 801a740 <__ieee754_pow+0xa30>)
 801a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5e4:	f7e5 fe70 	bl	80002c8 <__aeabi_dsub>
 801a5e8:	4622      	mov	r2, r4
 801a5ea:	462b      	mov	r3, r5
 801a5ec:	f7e6 f824 	bl	8000638 <__aeabi_dmul>
 801a5f0:	a355      	add	r3, pc, #340	; (adr r3, 801a748 <__ieee754_pow+0xa38>)
 801a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5f6:	f7e5 fe69 	bl	80002cc <__adddf3>
 801a5fa:	4622      	mov	r2, r4
 801a5fc:	462b      	mov	r3, r5
 801a5fe:	f7e6 f81b 	bl	8000638 <__aeabi_dmul>
 801a602:	4602      	mov	r2, r0
 801a604:	460b      	mov	r3, r1
 801a606:	4640      	mov	r0, r8
 801a608:	4649      	mov	r1, r9
 801a60a:	f7e5 fe5d 	bl	80002c8 <__aeabi_dsub>
 801a60e:	4604      	mov	r4, r0
 801a610:	460d      	mov	r5, r1
 801a612:	4602      	mov	r2, r0
 801a614:	460b      	mov	r3, r1
 801a616:	4640      	mov	r0, r8
 801a618:	4649      	mov	r1, r9
 801a61a:	f7e6 f80d 	bl	8000638 <__aeabi_dmul>
 801a61e:	2200      	movs	r2, #0
 801a620:	ec41 0b19 	vmov	d9, r0, r1
 801a624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a628:	4620      	mov	r0, r4
 801a62a:	4629      	mov	r1, r5
 801a62c:	f7e5 fe4c 	bl	80002c8 <__aeabi_dsub>
 801a630:	4602      	mov	r2, r0
 801a632:	460b      	mov	r3, r1
 801a634:	ec51 0b19 	vmov	r0, r1, d9
 801a638:	f7e6 f928 	bl	800088c <__aeabi_ddiv>
 801a63c:	4632      	mov	r2, r6
 801a63e:	4604      	mov	r4, r0
 801a640:	460d      	mov	r5, r1
 801a642:	463b      	mov	r3, r7
 801a644:	4640      	mov	r0, r8
 801a646:	4649      	mov	r1, r9
 801a648:	f7e5 fff6 	bl	8000638 <__aeabi_dmul>
 801a64c:	4632      	mov	r2, r6
 801a64e:	463b      	mov	r3, r7
 801a650:	f7e5 fe3c 	bl	80002cc <__adddf3>
 801a654:	4602      	mov	r2, r0
 801a656:	460b      	mov	r3, r1
 801a658:	4620      	mov	r0, r4
 801a65a:	4629      	mov	r1, r5
 801a65c:	f7e5 fe34 	bl	80002c8 <__aeabi_dsub>
 801a660:	4642      	mov	r2, r8
 801a662:	464b      	mov	r3, r9
 801a664:	f7e5 fe30 	bl	80002c8 <__aeabi_dsub>
 801a668:	460b      	mov	r3, r1
 801a66a:	4602      	mov	r2, r0
 801a66c:	493a      	ldr	r1, [pc, #232]	; (801a758 <__ieee754_pow+0xa48>)
 801a66e:	2000      	movs	r0, #0
 801a670:	f7e5 fe2a 	bl	80002c8 <__aeabi_dsub>
 801a674:	ec41 0b10 	vmov	d0, r0, r1
 801a678:	ee10 3a90 	vmov	r3, s1
 801a67c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a684:	da2b      	bge.n	801a6de <__ieee754_pow+0x9ce>
 801a686:	4650      	mov	r0, sl
 801a688:	f001 fada 	bl	801bc40 <scalbn>
 801a68c:	ec51 0b10 	vmov	r0, r1, d0
 801a690:	ec53 2b18 	vmov	r2, r3, d8
 801a694:	f7ff bbed 	b.w	8019e72 <__ieee754_pow+0x162>
 801a698:	4b30      	ldr	r3, [pc, #192]	; (801a75c <__ieee754_pow+0xa4c>)
 801a69a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a69e:	429e      	cmp	r6, r3
 801a6a0:	f77f af0c 	ble.w	801a4bc <__ieee754_pow+0x7ac>
 801a6a4:	4b2e      	ldr	r3, [pc, #184]	; (801a760 <__ieee754_pow+0xa50>)
 801a6a6:	440b      	add	r3, r1
 801a6a8:	4303      	orrs	r3, r0
 801a6aa:	d009      	beq.n	801a6c0 <__ieee754_pow+0x9b0>
 801a6ac:	ec51 0b18 	vmov	r0, r1, d8
 801a6b0:	2200      	movs	r2, #0
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	f7e6 fa32 	bl	8000b1c <__aeabi_dcmplt>
 801a6b8:	3800      	subs	r0, #0
 801a6ba:	bf18      	it	ne
 801a6bc:	2001      	movne	r0, #1
 801a6be:	e447      	b.n	8019f50 <__ieee754_pow+0x240>
 801a6c0:	4622      	mov	r2, r4
 801a6c2:	462b      	mov	r3, r5
 801a6c4:	f7e5 fe00 	bl	80002c8 <__aeabi_dsub>
 801a6c8:	4642      	mov	r2, r8
 801a6ca:	464b      	mov	r3, r9
 801a6cc:	f7e6 fa3a 	bl	8000b44 <__aeabi_dcmpge>
 801a6d0:	2800      	cmp	r0, #0
 801a6d2:	f43f aef3 	beq.w	801a4bc <__ieee754_pow+0x7ac>
 801a6d6:	e7e9      	b.n	801a6ac <__ieee754_pow+0x99c>
 801a6d8:	f04f 0a00 	mov.w	sl, #0
 801a6dc:	e71a      	b.n	801a514 <__ieee754_pow+0x804>
 801a6de:	ec51 0b10 	vmov	r0, r1, d0
 801a6e2:	4619      	mov	r1, r3
 801a6e4:	e7d4      	b.n	801a690 <__ieee754_pow+0x980>
 801a6e6:	491c      	ldr	r1, [pc, #112]	; (801a758 <__ieee754_pow+0xa48>)
 801a6e8:	2000      	movs	r0, #0
 801a6ea:	f7ff bb30 	b.w	8019d4e <__ieee754_pow+0x3e>
 801a6ee:	2000      	movs	r0, #0
 801a6f0:	2100      	movs	r1, #0
 801a6f2:	f7ff bb2c 	b.w	8019d4e <__ieee754_pow+0x3e>
 801a6f6:	4630      	mov	r0, r6
 801a6f8:	4639      	mov	r1, r7
 801a6fa:	f7ff bb28 	b.w	8019d4e <__ieee754_pow+0x3e>
 801a6fe:	9204      	str	r2, [sp, #16]
 801a700:	f7ff bb7a 	b.w	8019df8 <__ieee754_pow+0xe8>
 801a704:	2300      	movs	r3, #0
 801a706:	f7ff bb64 	b.w	8019dd2 <__ieee754_pow+0xc2>
 801a70a:	bf00      	nop
 801a70c:	f3af 8000 	nop.w
 801a710:	00000000 	.word	0x00000000
 801a714:	3fe62e43 	.word	0x3fe62e43
 801a718:	fefa39ef 	.word	0xfefa39ef
 801a71c:	3fe62e42 	.word	0x3fe62e42
 801a720:	0ca86c39 	.word	0x0ca86c39
 801a724:	be205c61 	.word	0xbe205c61
 801a728:	72bea4d0 	.word	0x72bea4d0
 801a72c:	3e663769 	.word	0x3e663769
 801a730:	c5d26bf1 	.word	0xc5d26bf1
 801a734:	3ebbbd41 	.word	0x3ebbbd41
 801a738:	af25de2c 	.word	0xaf25de2c
 801a73c:	3f11566a 	.word	0x3f11566a
 801a740:	16bebd93 	.word	0x16bebd93
 801a744:	3f66c16c 	.word	0x3f66c16c
 801a748:	5555553e 	.word	0x5555553e
 801a74c:	3fc55555 	.word	0x3fc55555
 801a750:	3fe00000 	.word	0x3fe00000
 801a754:	000fffff 	.word	0x000fffff
 801a758:	3ff00000 	.word	0x3ff00000
 801a75c:	4090cbff 	.word	0x4090cbff
 801a760:	3f6f3400 	.word	0x3f6f3400
 801a764:	652b82fe 	.word	0x652b82fe
 801a768:	3c971547 	.word	0x3c971547
 801a76c:	00000000 	.word	0x00000000

0801a770 <__ieee754_rem_pio2>:
 801a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a774:	ed2d 8b02 	vpush	{d8}
 801a778:	ec55 4b10 	vmov	r4, r5, d0
 801a77c:	4bca      	ldr	r3, [pc, #808]	; (801aaa8 <__ieee754_rem_pio2+0x338>)
 801a77e:	b08b      	sub	sp, #44	; 0x2c
 801a780:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801a784:	4598      	cmp	r8, r3
 801a786:	4682      	mov	sl, r0
 801a788:	9502      	str	r5, [sp, #8]
 801a78a:	dc08      	bgt.n	801a79e <__ieee754_rem_pio2+0x2e>
 801a78c:	2200      	movs	r2, #0
 801a78e:	2300      	movs	r3, #0
 801a790:	ed80 0b00 	vstr	d0, [r0]
 801a794:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a798:	f04f 0b00 	mov.w	fp, #0
 801a79c:	e028      	b.n	801a7f0 <__ieee754_rem_pio2+0x80>
 801a79e:	4bc3      	ldr	r3, [pc, #780]	; (801aaac <__ieee754_rem_pio2+0x33c>)
 801a7a0:	4598      	cmp	r8, r3
 801a7a2:	dc78      	bgt.n	801a896 <__ieee754_rem_pio2+0x126>
 801a7a4:	9b02      	ldr	r3, [sp, #8]
 801a7a6:	4ec2      	ldr	r6, [pc, #776]	; (801aab0 <__ieee754_rem_pio2+0x340>)
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	ee10 0a10 	vmov	r0, s0
 801a7ae:	a3b0      	add	r3, pc, #704	; (adr r3, 801aa70 <__ieee754_rem_pio2+0x300>)
 801a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7b4:	4629      	mov	r1, r5
 801a7b6:	dd39      	ble.n	801a82c <__ieee754_rem_pio2+0xbc>
 801a7b8:	f7e5 fd86 	bl	80002c8 <__aeabi_dsub>
 801a7bc:	45b0      	cmp	r8, r6
 801a7be:	4604      	mov	r4, r0
 801a7c0:	460d      	mov	r5, r1
 801a7c2:	d01b      	beq.n	801a7fc <__ieee754_rem_pio2+0x8c>
 801a7c4:	a3ac      	add	r3, pc, #688	; (adr r3, 801aa78 <__ieee754_rem_pio2+0x308>)
 801a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ca:	f7e5 fd7d 	bl	80002c8 <__aeabi_dsub>
 801a7ce:	4602      	mov	r2, r0
 801a7d0:	460b      	mov	r3, r1
 801a7d2:	e9ca 2300 	strd	r2, r3, [sl]
 801a7d6:	4620      	mov	r0, r4
 801a7d8:	4629      	mov	r1, r5
 801a7da:	f7e5 fd75 	bl	80002c8 <__aeabi_dsub>
 801a7de:	a3a6      	add	r3, pc, #664	; (adr r3, 801aa78 <__ieee754_rem_pio2+0x308>)
 801a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7e4:	f7e5 fd70 	bl	80002c8 <__aeabi_dsub>
 801a7e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a7ec:	f04f 0b01 	mov.w	fp, #1
 801a7f0:	4658      	mov	r0, fp
 801a7f2:	b00b      	add	sp, #44	; 0x2c
 801a7f4:	ecbd 8b02 	vpop	{d8}
 801a7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7fc:	a3a0      	add	r3, pc, #640	; (adr r3, 801aa80 <__ieee754_rem_pio2+0x310>)
 801a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a802:	f7e5 fd61 	bl	80002c8 <__aeabi_dsub>
 801a806:	a3a0      	add	r3, pc, #640	; (adr r3, 801aa88 <__ieee754_rem_pio2+0x318>)
 801a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a80c:	4604      	mov	r4, r0
 801a80e:	460d      	mov	r5, r1
 801a810:	f7e5 fd5a 	bl	80002c8 <__aeabi_dsub>
 801a814:	4602      	mov	r2, r0
 801a816:	460b      	mov	r3, r1
 801a818:	e9ca 2300 	strd	r2, r3, [sl]
 801a81c:	4620      	mov	r0, r4
 801a81e:	4629      	mov	r1, r5
 801a820:	f7e5 fd52 	bl	80002c8 <__aeabi_dsub>
 801a824:	a398      	add	r3, pc, #608	; (adr r3, 801aa88 <__ieee754_rem_pio2+0x318>)
 801a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a82a:	e7db      	b.n	801a7e4 <__ieee754_rem_pio2+0x74>
 801a82c:	f7e5 fd4e 	bl	80002cc <__adddf3>
 801a830:	45b0      	cmp	r8, r6
 801a832:	4604      	mov	r4, r0
 801a834:	460d      	mov	r5, r1
 801a836:	d016      	beq.n	801a866 <__ieee754_rem_pio2+0xf6>
 801a838:	a38f      	add	r3, pc, #572	; (adr r3, 801aa78 <__ieee754_rem_pio2+0x308>)
 801a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a83e:	f7e5 fd45 	bl	80002cc <__adddf3>
 801a842:	4602      	mov	r2, r0
 801a844:	460b      	mov	r3, r1
 801a846:	e9ca 2300 	strd	r2, r3, [sl]
 801a84a:	4620      	mov	r0, r4
 801a84c:	4629      	mov	r1, r5
 801a84e:	f7e5 fd3b 	bl	80002c8 <__aeabi_dsub>
 801a852:	a389      	add	r3, pc, #548	; (adr r3, 801aa78 <__ieee754_rem_pio2+0x308>)
 801a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a858:	f7e5 fd38 	bl	80002cc <__adddf3>
 801a85c:	f04f 3bff 	mov.w	fp, #4294967295
 801a860:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a864:	e7c4      	b.n	801a7f0 <__ieee754_rem_pio2+0x80>
 801a866:	a386      	add	r3, pc, #536	; (adr r3, 801aa80 <__ieee754_rem_pio2+0x310>)
 801a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a86c:	f7e5 fd2e 	bl	80002cc <__adddf3>
 801a870:	a385      	add	r3, pc, #532	; (adr r3, 801aa88 <__ieee754_rem_pio2+0x318>)
 801a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a876:	4604      	mov	r4, r0
 801a878:	460d      	mov	r5, r1
 801a87a:	f7e5 fd27 	bl	80002cc <__adddf3>
 801a87e:	4602      	mov	r2, r0
 801a880:	460b      	mov	r3, r1
 801a882:	e9ca 2300 	strd	r2, r3, [sl]
 801a886:	4620      	mov	r0, r4
 801a888:	4629      	mov	r1, r5
 801a88a:	f7e5 fd1d 	bl	80002c8 <__aeabi_dsub>
 801a88e:	a37e      	add	r3, pc, #504	; (adr r3, 801aa88 <__ieee754_rem_pio2+0x318>)
 801a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a894:	e7e0      	b.n	801a858 <__ieee754_rem_pio2+0xe8>
 801a896:	4b87      	ldr	r3, [pc, #540]	; (801aab4 <__ieee754_rem_pio2+0x344>)
 801a898:	4598      	cmp	r8, r3
 801a89a:	f300 80d9 	bgt.w	801aa50 <__ieee754_rem_pio2+0x2e0>
 801a89e:	f001 f939 	bl	801bb14 <fabs>
 801a8a2:	ec55 4b10 	vmov	r4, r5, d0
 801a8a6:	ee10 0a10 	vmov	r0, s0
 801a8aa:	a379      	add	r3, pc, #484	; (adr r3, 801aa90 <__ieee754_rem_pio2+0x320>)
 801a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8b0:	4629      	mov	r1, r5
 801a8b2:	f7e5 fec1 	bl	8000638 <__aeabi_dmul>
 801a8b6:	4b80      	ldr	r3, [pc, #512]	; (801aab8 <__ieee754_rem_pio2+0x348>)
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	f7e5 fd07 	bl	80002cc <__adddf3>
 801a8be:	f7e6 f96b 	bl	8000b98 <__aeabi_d2iz>
 801a8c2:	4683      	mov	fp, r0
 801a8c4:	f7e5 fe4e 	bl	8000564 <__aeabi_i2d>
 801a8c8:	4602      	mov	r2, r0
 801a8ca:	460b      	mov	r3, r1
 801a8cc:	ec43 2b18 	vmov	d8, r2, r3
 801a8d0:	a367      	add	r3, pc, #412	; (adr r3, 801aa70 <__ieee754_rem_pio2+0x300>)
 801a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8d6:	f7e5 feaf 	bl	8000638 <__aeabi_dmul>
 801a8da:	4602      	mov	r2, r0
 801a8dc:	460b      	mov	r3, r1
 801a8de:	4620      	mov	r0, r4
 801a8e0:	4629      	mov	r1, r5
 801a8e2:	f7e5 fcf1 	bl	80002c8 <__aeabi_dsub>
 801a8e6:	a364      	add	r3, pc, #400	; (adr r3, 801aa78 <__ieee754_rem_pio2+0x308>)
 801a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8ec:	4606      	mov	r6, r0
 801a8ee:	460f      	mov	r7, r1
 801a8f0:	ec51 0b18 	vmov	r0, r1, d8
 801a8f4:	f7e5 fea0 	bl	8000638 <__aeabi_dmul>
 801a8f8:	f1bb 0f1f 	cmp.w	fp, #31
 801a8fc:	4604      	mov	r4, r0
 801a8fe:	460d      	mov	r5, r1
 801a900:	dc0d      	bgt.n	801a91e <__ieee754_rem_pio2+0x1ae>
 801a902:	4b6e      	ldr	r3, [pc, #440]	; (801aabc <__ieee754_rem_pio2+0x34c>)
 801a904:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a90c:	4543      	cmp	r3, r8
 801a90e:	d006      	beq.n	801a91e <__ieee754_rem_pio2+0x1ae>
 801a910:	4622      	mov	r2, r4
 801a912:	462b      	mov	r3, r5
 801a914:	4630      	mov	r0, r6
 801a916:	4639      	mov	r1, r7
 801a918:	f7e5 fcd6 	bl	80002c8 <__aeabi_dsub>
 801a91c:	e00f      	b.n	801a93e <__ieee754_rem_pio2+0x1ce>
 801a91e:	462b      	mov	r3, r5
 801a920:	4622      	mov	r2, r4
 801a922:	4630      	mov	r0, r6
 801a924:	4639      	mov	r1, r7
 801a926:	f7e5 fccf 	bl	80002c8 <__aeabi_dsub>
 801a92a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a92e:	9303      	str	r3, [sp, #12]
 801a930:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a934:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801a938:	f1b8 0f10 	cmp.w	r8, #16
 801a93c:	dc02      	bgt.n	801a944 <__ieee754_rem_pio2+0x1d4>
 801a93e:	e9ca 0100 	strd	r0, r1, [sl]
 801a942:	e039      	b.n	801a9b8 <__ieee754_rem_pio2+0x248>
 801a944:	a34e      	add	r3, pc, #312	; (adr r3, 801aa80 <__ieee754_rem_pio2+0x310>)
 801a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a94a:	ec51 0b18 	vmov	r0, r1, d8
 801a94e:	f7e5 fe73 	bl	8000638 <__aeabi_dmul>
 801a952:	4604      	mov	r4, r0
 801a954:	460d      	mov	r5, r1
 801a956:	4602      	mov	r2, r0
 801a958:	460b      	mov	r3, r1
 801a95a:	4630      	mov	r0, r6
 801a95c:	4639      	mov	r1, r7
 801a95e:	f7e5 fcb3 	bl	80002c8 <__aeabi_dsub>
 801a962:	4602      	mov	r2, r0
 801a964:	460b      	mov	r3, r1
 801a966:	4680      	mov	r8, r0
 801a968:	4689      	mov	r9, r1
 801a96a:	4630      	mov	r0, r6
 801a96c:	4639      	mov	r1, r7
 801a96e:	f7e5 fcab 	bl	80002c8 <__aeabi_dsub>
 801a972:	4622      	mov	r2, r4
 801a974:	462b      	mov	r3, r5
 801a976:	f7e5 fca7 	bl	80002c8 <__aeabi_dsub>
 801a97a:	a343      	add	r3, pc, #268	; (adr r3, 801aa88 <__ieee754_rem_pio2+0x318>)
 801a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a980:	4604      	mov	r4, r0
 801a982:	460d      	mov	r5, r1
 801a984:	ec51 0b18 	vmov	r0, r1, d8
 801a988:	f7e5 fe56 	bl	8000638 <__aeabi_dmul>
 801a98c:	4622      	mov	r2, r4
 801a98e:	462b      	mov	r3, r5
 801a990:	f7e5 fc9a 	bl	80002c8 <__aeabi_dsub>
 801a994:	4602      	mov	r2, r0
 801a996:	460b      	mov	r3, r1
 801a998:	4604      	mov	r4, r0
 801a99a:	460d      	mov	r5, r1
 801a99c:	4640      	mov	r0, r8
 801a99e:	4649      	mov	r1, r9
 801a9a0:	f7e5 fc92 	bl	80002c8 <__aeabi_dsub>
 801a9a4:	9a03      	ldr	r2, [sp, #12]
 801a9a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a9aa:	1ad3      	subs	r3, r2, r3
 801a9ac:	2b31      	cmp	r3, #49	; 0x31
 801a9ae:	dc24      	bgt.n	801a9fa <__ieee754_rem_pio2+0x28a>
 801a9b0:	e9ca 0100 	strd	r0, r1, [sl]
 801a9b4:	4646      	mov	r6, r8
 801a9b6:	464f      	mov	r7, r9
 801a9b8:	e9da 8900 	ldrd	r8, r9, [sl]
 801a9bc:	4630      	mov	r0, r6
 801a9be:	4642      	mov	r2, r8
 801a9c0:	464b      	mov	r3, r9
 801a9c2:	4639      	mov	r1, r7
 801a9c4:	f7e5 fc80 	bl	80002c8 <__aeabi_dsub>
 801a9c8:	462b      	mov	r3, r5
 801a9ca:	4622      	mov	r2, r4
 801a9cc:	f7e5 fc7c 	bl	80002c8 <__aeabi_dsub>
 801a9d0:	9b02      	ldr	r3, [sp, #8]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a9d8:	f6bf af0a 	bge.w	801a7f0 <__ieee754_rem_pio2+0x80>
 801a9dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a9e0:	f8ca 3004 	str.w	r3, [sl, #4]
 801a9e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a9e8:	f8ca 8000 	str.w	r8, [sl]
 801a9ec:	f8ca 0008 	str.w	r0, [sl, #8]
 801a9f0:	f8ca 300c 	str.w	r3, [sl, #12]
 801a9f4:	f1cb 0b00 	rsb	fp, fp, #0
 801a9f8:	e6fa      	b.n	801a7f0 <__ieee754_rem_pio2+0x80>
 801a9fa:	a327      	add	r3, pc, #156	; (adr r3, 801aa98 <__ieee754_rem_pio2+0x328>)
 801a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa00:	ec51 0b18 	vmov	r0, r1, d8
 801aa04:	f7e5 fe18 	bl	8000638 <__aeabi_dmul>
 801aa08:	4604      	mov	r4, r0
 801aa0a:	460d      	mov	r5, r1
 801aa0c:	4602      	mov	r2, r0
 801aa0e:	460b      	mov	r3, r1
 801aa10:	4640      	mov	r0, r8
 801aa12:	4649      	mov	r1, r9
 801aa14:	f7e5 fc58 	bl	80002c8 <__aeabi_dsub>
 801aa18:	4602      	mov	r2, r0
 801aa1a:	460b      	mov	r3, r1
 801aa1c:	4606      	mov	r6, r0
 801aa1e:	460f      	mov	r7, r1
 801aa20:	4640      	mov	r0, r8
 801aa22:	4649      	mov	r1, r9
 801aa24:	f7e5 fc50 	bl	80002c8 <__aeabi_dsub>
 801aa28:	4622      	mov	r2, r4
 801aa2a:	462b      	mov	r3, r5
 801aa2c:	f7e5 fc4c 	bl	80002c8 <__aeabi_dsub>
 801aa30:	a31b      	add	r3, pc, #108	; (adr r3, 801aaa0 <__ieee754_rem_pio2+0x330>)
 801aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa36:	4604      	mov	r4, r0
 801aa38:	460d      	mov	r5, r1
 801aa3a:	ec51 0b18 	vmov	r0, r1, d8
 801aa3e:	f7e5 fdfb 	bl	8000638 <__aeabi_dmul>
 801aa42:	4622      	mov	r2, r4
 801aa44:	462b      	mov	r3, r5
 801aa46:	f7e5 fc3f 	bl	80002c8 <__aeabi_dsub>
 801aa4a:	4604      	mov	r4, r0
 801aa4c:	460d      	mov	r5, r1
 801aa4e:	e75f      	b.n	801a910 <__ieee754_rem_pio2+0x1a0>
 801aa50:	4b1b      	ldr	r3, [pc, #108]	; (801aac0 <__ieee754_rem_pio2+0x350>)
 801aa52:	4598      	cmp	r8, r3
 801aa54:	dd36      	ble.n	801aac4 <__ieee754_rem_pio2+0x354>
 801aa56:	ee10 2a10 	vmov	r2, s0
 801aa5a:	462b      	mov	r3, r5
 801aa5c:	4620      	mov	r0, r4
 801aa5e:	4629      	mov	r1, r5
 801aa60:	f7e5 fc32 	bl	80002c8 <__aeabi_dsub>
 801aa64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801aa68:	e9ca 0100 	strd	r0, r1, [sl]
 801aa6c:	e694      	b.n	801a798 <__ieee754_rem_pio2+0x28>
 801aa6e:	bf00      	nop
 801aa70:	54400000 	.word	0x54400000
 801aa74:	3ff921fb 	.word	0x3ff921fb
 801aa78:	1a626331 	.word	0x1a626331
 801aa7c:	3dd0b461 	.word	0x3dd0b461
 801aa80:	1a600000 	.word	0x1a600000
 801aa84:	3dd0b461 	.word	0x3dd0b461
 801aa88:	2e037073 	.word	0x2e037073
 801aa8c:	3ba3198a 	.word	0x3ba3198a
 801aa90:	6dc9c883 	.word	0x6dc9c883
 801aa94:	3fe45f30 	.word	0x3fe45f30
 801aa98:	2e000000 	.word	0x2e000000
 801aa9c:	3ba3198a 	.word	0x3ba3198a
 801aaa0:	252049c1 	.word	0x252049c1
 801aaa4:	397b839a 	.word	0x397b839a
 801aaa8:	3fe921fb 	.word	0x3fe921fb
 801aaac:	4002d97b 	.word	0x4002d97b
 801aab0:	3ff921fb 	.word	0x3ff921fb
 801aab4:	413921fb 	.word	0x413921fb
 801aab8:	3fe00000 	.word	0x3fe00000
 801aabc:	0805bfc0 	.word	0x0805bfc0
 801aac0:	7fefffff 	.word	0x7fefffff
 801aac4:	ea4f 5428 	mov.w	r4, r8, asr #20
 801aac8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801aacc:	ee10 0a10 	vmov	r0, s0
 801aad0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801aad4:	ee10 6a10 	vmov	r6, s0
 801aad8:	460f      	mov	r7, r1
 801aada:	f7e6 f85d 	bl	8000b98 <__aeabi_d2iz>
 801aade:	f7e5 fd41 	bl	8000564 <__aeabi_i2d>
 801aae2:	4602      	mov	r2, r0
 801aae4:	460b      	mov	r3, r1
 801aae6:	4630      	mov	r0, r6
 801aae8:	4639      	mov	r1, r7
 801aaea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801aaee:	f7e5 fbeb 	bl	80002c8 <__aeabi_dsub>
 801aaf2:	4b23      	ldr	r3, [pc, #140]	; (801ab80 <__ieee754_rem_pio2+0x410>)
 801aaf4:	2200      	movs	r2, #0
 801aaf6:	f7e5 fd9f 	bl	8000638 <__aeabi_dmul>
 801aafa:	460f      	mov	r7, r1
 801aafc:	4606      	mov	r6, r0
 801aafe:	f7e6 f84b 	bl	8000b98 <__aeabi_d2iz>
 801ab02:	f7e5 fd2f 	bl	8000564 <__aeabi_i2d>
 801ab06:	4602      	mov	r2, r0
 801ab08:	460b      	mov	r3, r1
 801ab0a:	4630      	mov	r0, r6
 801ab0c:	4639      	mov	r1, r7
 801ab0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ab12:	f7e5 fbd9 	bl	80002c8 <__aeabi_dsub>
 801ab16:	4b1a      	ldr	r3, [pc, #104]	; (801ab80 <__ieee754_rem_pio2+0x410>)
 801ab18:	2200      	movs	r2, #0
 801ab1a:	f7e5 fd8d 	bl	8000638 <__aeabi_dmul>
 801ab1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ab22:	ad04      	add	r5, sp, #16
 801ab24:	f04f 0803 	mov.w	r8, #3
 801ab28:	46a9      	mov	r9, r5
 801ab2a:	2600      	movs	r6, #0
 801ab2c:	2700      	movs	r7, #0
 801ab2e:	4632      	mov	r2, r6
 801ab30:	463b      	mov	r3, r7
 801ab32:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801ab36:	46c3      	mov	fp, r8
 801ab38:	3d08      	subs	r5, #8
 801ab3a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ab3e:	f7e5 ffe3 	bl	8000b08 <__aeabi_dcmpeq>
 801ab42:	2800      	cmp	r0, #0
 801ab44:	d1f3      	bne.n	801ab2e <__ieee754_rem_pio2+0x3be>
 801ab46:	4b0f      	ldr	r3, [pc, #60]	; (801ab84 <__ieee754_rem_pio2+0x414>)
 801ab48:	9301      	str	r3, [sp, #4]
 801ab4a:	2302      	movs	r3, #2
 801ab4c:	9300      	str	r3, [sp, #0]
 801ab4e:	4622      	mov	r2, r4
 801ab50:	465b      	mov	r3, fp
 801ab52:	4651      	mov	r1, sl
 801ab54:	4648      	mov	r0, r9
 801ab56:	f000 f993 	bl	801ae80 <__kernel_rem_pio2>
 801ab5a:	9b02      	ldr	r3, [sp, #8]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	4683      	mov	fp, r0
 801ab60:	f6bf ae46 	bge.w	801a7f0 <__ieee754_rem_pio2+0x80>
 801ab64:	e9da 2100 	ldrd	r2, r1, [sl]
 801ab68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ab6c:	e9ca 2300 	strd	r2, r3, [sl]
 801ab70:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801ab74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ab78:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801ab7c:	e73a      	b.n	801a9f4 <__ieee754_rem_pio2+0x284>
 801ab7e:	bf00      	nop
 801ab80:	41700000 	.word	0x41700000
 801ab84:	0805c040 	.word	0x0805c040

0801ab88 <__ieee754_sqrt>:
 801ab88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab8c:	ec55 4b10 	vmov	r4, r5, d0
 801ab90:	4e55      	ldr	r6, [pc, #340]	; (801ace8 <__ieee754_sqrt+0x160>)
 801ab92:	43ae      	bics	r6, r5
 801ab94:	ee10 0a10 	vmov	r0, s0
 801ab98:	ee10 3a10 	vmov	r3, s0
 801ab9c:	462a      	mov	r2, r5
 801ab9e:	4629      	mov	r1, r5
 801aba0:	d110      	bne.n	801abc4 <__ieee754_sqrt+0x3c>
 801aba2:	ee10 2a10 	vmov	r2, s0
 801aba6:	462b      	mov	r3, r5
 801aba8:	f7e5 fd46 	bl	8000638 <__aeabi_dmul>
 801abac:	4602      	mov	r2, r0
 801abae:	460b      	mov	r3, r1
 801abb0:	4620      	mov	r0, r4
 801abb2:	4629      	mov	r1, r5
 801abb4:	f7e5 fb8a 	bl	80002cc <__adddf3>
 801abb8:	4604      	mov	r4, r0
 801abba:	460d      	mov	r5, r1
 801abbc:	ec45 4b10 	vmov	d0, r4, r5
 801abc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abc4:	2d00      	cmp	r5, #0
 801abc6:	dc10      	bgt.n	801abea <__ieee754_sqrt+0x62>
 801abc8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801abcc:	4330      	orrs	r0, r6
 801abce:	d0f5      	beq.n	801abbc <__ieee754_sqrt+0x34>
 801abd0:	b15d      	cbz	r5, 801abea <__ieee754_sqrt+0x62>
 801abd2:	ee10 2a10 	vmov	r2, s0
 801abd6:	462b      	mov	r3, r5
 801abd8:	ee10 0a10 	vmov	r0, s0
 801abdc:	f7e5 fb74 	bl	80002c8 <__aeabi_dsub>
 801abe0:	4602      	mov	r2, r0
 801abe2:	460b      	mov	r3, r1
 801abe4:	f7e5 fe52 	bl	800088c <__aeabi_ddiv>
 801abe8:	e7e6      	b.n	801abb8 <__ieee754_sqrt+0x30>
 801abea:	1512      	asrs	r2, r2, #20
 801abec:	d074      	beq.n	801acd8 <__ieee754_sqrt+0x150>
 801abee:	07d4      	lsls	r4, r2, #31
 801abf0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801abf4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801abf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801abfc:	bf5e      	ittt	pl
 801abfe:	0fda      	lsrpl	r2, r3, #31
 801ac00:	005b      	lslpl	r3, r3, #1
 801ac02:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801ac06:	2400      	movs	r4, #0
 801ac08:	0fda      	lsrs	r2, r3, #31
 801ac0a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801ac0e:	107f      	asrs	r7, r7, #1
 801ac10:	005b      	lsls	r3, r3, #1
 801ac12:	2516      	movs	r5, #22
 801ac14:	4620      	mov	r0, r4
 801ac16:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801ac1a:	1886      	adds	r6, r0, r2
 801ac1c:	428e      	cmp	r6, r1
 801ac1e:	bfde      	ittt	le
 801ac20:	1b89      	suble	r1, r1, r6
 801ac22:	18b0      	addle	r0, r6, r2
 801ac24:	18a4      	addle	r4, r4, r2
 801ac26:	0049      	lsls	r1, r1, #1
 801ac28:	3d01      	subs	r5, #1
 801ac2a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801ac2e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801ac32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ac36:	d1f0      	bne.n	801ac1a <__ieee754_sqrt+0x92>
 801ac38:	462a      	mov	r2, r5
 801ac3a:	f04f 0e20 	mov.w	lr, #32
 801ac3e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801ac42:	4281      	cmp	r1, r0
 801ac44:	eb06 0c05 	add.w	ip, r6, r5
 801ac48:	dc02      	bgt.n	801ac50 <__ieee754_sqrt+0xc8>
 801ac4a:	d113      	bne.n	801ac74 <__ieee754_sqrt+0xec>
 801ac4c:	459c      	cmp	ip, r3
 801ac4e:	d811      	bhi.n	801ac74 <__ieee754_sqrt+0xec>
 801ac50:	f1bc 0f00 	cmp.w	ip, #0
 801ac54:	eb0c 0506 	add.w	r5, ip, r6
 801ac58:	da43      	bge.n	801ace2 <__ieee754_sqrt+0x15a>
 801ac5a:	2d00      	cmp	r5, #0
 801ac5c:	db41      	blt.n	801ace2 <__ieee754_sqrt+0x15a>
 801ac5e:	f100 0801 	add.w	r8, r0, #1
 801ac62:	1a09      	subs	r1, r1, r0
 801ac64:	459c      	cmp	ip, r3
 801ac66:	bf88      	it	hi
 801ac68:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801ac6c:	eba3 030c 	sub.w	r3, r3, ip
 801ac70:	4432      	add	r2, r6
 801ac72:	4640      	mov	r0, r8
 801ac74:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801ac78:	f1be 0e01 	subs.w	lr, lr, #1
 801ac7c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801ac80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ac84:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ac88:	d1db      	bne.n	801ac42 <__ieee754_sqrt+0xba>
 801ac8a:	430b      	orrs	r3, r1
 801ac8c:	d006      	beq.n	801ac9c <__ieee754_sqrt+0x114>
 801ac8e:	1c50      	adds	r0, r2, #1
 801ac90:	bf13      	iteet	ne
 801ac92:	3201      	addne	r2, #1
 801ac94:	3401      	addeq	r4, #1
 801ac96:	4672      	moveq	r2, lr
 801ac98:	f022 0201 	bicne.w	r2, r2, #1
 801ac9c:	1063      	asrs	r3, r4, #1
 801ac9e:	0852      	lsrs	r2, r2, #1
 801aca0:	07e1      	lsls	r1, r4, #31
 801aca2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801aca6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801acaa:	bf48      	it	mi
 801acac:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801acb0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801acb4:	4614      	mov	r4, r2
 801acb6:	e781      	b.n	801abbc <__ieee754_sqrt+0x34>
 801acb8:	0ad9      	lsrs	r1, r3, #11
 801acba:	3815      	subs	r0, #21
 801acbc:	055b      	lsls	r3, r3, #21
 801acbe:	2900      	cmp	r1, #0
 801acc0:	d0fa      	beq.n	801acb8 <__ieee754_sqrt+0x130>
 801acc2:	02cd      	lsls	r5, r1, #11
 801acc4:	d50a      	bpl.n	801acdc <__ieee754_sqrt+0x154>
 801acc6:	f1c2 0420 	rsb	r4, r2, #32
 801acca:	fa23 f404 	lsr.w	r4, r3, r4
 801acce:	1e55      	subs	r5, r2, #1
 801acd0:	4093      	lsls	r3, r2
 801acd2:	4321      	orrs	r1, r4
 801acd4:	1b42      	subs	r2, r0, r5
 801acd6:	e78a      	b.n	801abee <__ieee754_sqrt+0x66>
 801acd8:	4610      	mov	r0, r2
 801acda:	e7f0      	b.n	801acbe <__ieee754_sqrt+0x136>
 801acdc:	0049      	lsls	r1, r1, #1
 801acde:	3201      	adds	r2, #1
 801ace0:	e7ef      	b.n	801acc2 <__ieee754_sqrt+0x13a>
 801ace2:	4680      	mov	r8, r0
 801ace4:	e7bd      	b.n	801ac62 <__ieee754_sqrt+0xda>
 801ace6:	bf00      	nop
 801ace8:	7ff00000 	.word	0x7ff00000
 801acec:	00000000 	.word	0x00000000

0801acf0 <__kernel_cos>:
 801acf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acf4:	ec57 6b10 	vmov	r6, r7, d0
 801acf8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801acfc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801ad00:	ed8d 1b00 	vstr	d1, [sp]
 801ad04:	da07      	bge.n	801ad16 <__kernel_cos+0x26>
 801ad06:	ee10 0a10 	vmov	r0, s0
 801ad0a:	4639      	mov	r1, r7
 801ad0c:	f7e5 ff44 	bl	8000b98 <__aeabi_d2iz>
 801ad10:	2800      	cmp	r0, #0
 801ad12:	f000 8088 	beq.w	801ae26 <__kernel_cos+0x136>
 801ad16:	4632      	mov	r2, r6
 801ad18:	463b      	mov	r3, r7
 801ad1a:	4630      	mov	r0, r6
 801ad1c:	4639      	mov	r1, r7
 801ad1e:	f7e5 fc8b 	bl	8000638 <__aeabi_dmul>
 801ad22:	4b51      	ldr	r3, [pc, #324]	; (801ae68 <__kernel_cos+0x178>)
 801ad24:	2200      	movs	r2, #0
 801ad26:	4604      	mov	r4, r0
 801ad28:	460d      	mov	r5, r1
 801ad2a:	f7e5 fc85 	bl	8000638 <__aeabi_dmul>
 801ad2e:	a340      	add	r3, pc, #256	; (adr r3, 801ae30 <__kernel_cos+0x140>)
 801ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad34:	4682      	mov	sl, r0
 801ad36:	468b      	mov	fp, r1
 801ad38:	4620      	mov	r0, r4
 801ad3a:	4629      	mov	r1, r5
 801ad3c:	f7e5 fc7c 	bl	8000638 <__aeabi_dmul>
 801ad40:	a33d      	add	r3, pc, #244	; (adr r3, 801ae38 <__kernel_cos+0x148>)
 801ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad46:	f7e5 fac1 	bl	80002cc <__adddf3>
 801ad4a:	4622      	mov	r2, r4
 801ad4c:	462b      	mov	r3, r5
 801ad4e:	f7e5 fc73 	bl	8000638 <__aeabi_dmul>
 801ad52:	a33b      	add	r3, pc, #236	; (adr r3, 801ae40 <__kernel_cos+0x150>)
 801ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad58:	f7e5 fab6 	bl	80002c8 <__aeabi_dsub>
 801ad5c:	4622      	mov	r2, r4
 801ad5e:	462b      	mov	r3, r5
 801ad60:	f7e5 fc6a 	bl	8000638 <__aeabi_dmul>
 801ad64:	a338      	add	r3, pc, #224	; (adr r3, 801ae48 <__kernel_cos+0x158>)
 801ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad6a:	f7e5 faaf 	bl	80002cc <__adddf3>
 801ad6e:	4622      	mov	r2, r4
 801ad70:	462b      	mov	r3, r5
 801ad72:	f7e5 fc61 	bl	8000638 <__aeabi_dmul>
 801ad76:	a336      	add	r3, pc, #216	; (adr r3, 801ae50 <__kernel_cos+0x160>)
 801ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad7c:	f7e5 faa4 	bl	80002c8 <__aeabi_dsub>
 801ad80:	4622      	mov	r2, r4
 801ad82:	462b      	mov	r3, r5
 801ad84:	f7e5 fc58 	bl	8000638 <__aeabi_dmul>
 801ad88:	a333      	add	r3, pc, #204	; (adr r3, 801ae58 <__kernel_cos+0x168>)
 801ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad8e:	f7e5 fa9d 	bl	80002cc <__adddf3>
 801ad92:	4622      	mov	r2, r4
 801ad94:	462b      	mov	r3, r5
 801ad96:	f7e5 fc4f 	bl	8000638 <__aeabi_dmul>
 801ad9a:	4622      	mov	r2, r4
 801ad9c:	462b      	mov	r3, r5
 801ad9e:	f7e5 fc4b 	bl	8000638 <__aeabi_dmul>
 801ada2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ada6:	4604      	mov	r4, r0
 801ada8:	460d      	mov	r5, r1
 801adaa:	4630      	mov	r0, r6
 801adac:	4639      	mov	r1, r7
 801adae:	f7e5 fc43 	bl	8000638 <__aeabi_dmul>
 801adb2:	460b      	mov	r3, r1
 801adb4:	4602      	mov	r2, r0
 801adb6:	4629      	mov	r1, r5
 801adb8:	4620      	mov	r0, r4
 801adba:	f7e5 fa85 	bl	80002c8 <__aeabi_dsub>
 801adbe:	4b2b      	ldr	r3, [pc, #172]	; (801ae6c <__kernel_cos+0x17c>)
 801adc0:	4598      	cmp	r8, r3
 801adc2:	4606      	mov	r6, r0
 801adc4:	460f      	mov	r7, r1
 801adc6:	dc10      	bgt.n	801adea <__kernel_cos+0xfa>
 801adc8:	4602      	mov	r2, r0
 801adca:	460b      	mov	r3, r1
 801adcc:	4650      	mov	r0, sl
 801adce:	4659      	mov	r1, fp
 801add0:	f7e5 fa7a 	bl	80002c8 <__aeabi_dsub>
 801add4:	460b      	mov	r3, r1
 801add6:	4926      	ldr	r1, [pc, #152]	; (801ae70 <__kernel_cos+0x180>)
 801add8:	4602      	mov	r2, r0
 801adda:	2000      	movs	r0, #0
 801addc:	f7e5 fa74 	bl	80002c8 <__aeabi_dsub>
 801ade0:	ec41 0b10 	vmov	d0, r0, r1
 801ade4:	b003      	add	sp, #12
 801ade6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adea:	4b22      	ldr	r3, [pc, #136]	; (801ae74 <__kernel_cos+0x184>)
 801adec:	4920      	ldr	r1, [pc, #128]	; (801ae70 <__kernel_cos+0x180>)
 801adee:	4598      	cmp	r8, r3
 801adf0:	bfcc      	ite	gt
 801adf2:	4d21      	ldrgt	r5, [pc, #132]	; (801ae78 <__kernel_cos+0x188>)
 801adf4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801adf8:	2400      	movs	r4, #0
 801adfa:	4622      	mov	r2, r4
 801adfc:	462b      	mov	r3, r5
 801adfe:	2000      	movs	r0, #0
 801ae00:	f7e5 fa62 	bl	80002c8 <__aeabi_dsub>
 801ae04:	4622      	mov	r2, r4
 801ae06:	4680      	mov	r8, r0
 801ae08:	4689      	mov	r9, r1
 801ae0a:	462b      	mov	r3, r5
 801ae0c:	4650      	mov	r0, sl
 801ae0e:	4659      	mov	r1, fp
 801ae10:	f7e5 fa5a 	bl	80002c8 <__aeabi_dsub>
 801ae14:	4632      	mov	r2, r6
 801ae16:	463b      	mov	r3, r7
 801ae18:	f7e5 fa56 	bl	80002c8 <__aeabi_dsub>
 801ae1c:	4602      	mov	r2, r0
 801ae1e:	460b      	mov	r3, r1
 801ae20:	4640      	mov	r0, r8
 801ae22:	4649      	mov	r1, r9
 801ae24:	e7da      	b.n	801addc <__kernel_cos+0xec>
 801ae26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801ae60 <__kernel_cos+0x170>
 801ae2a:	e7db      	b.n	801ade4 <__kernel_cos+0xf4>
 801ae2c:	f3af 8000 	nop.w
 801ae30:	be8838d4 	.word	0xbe8838d4
 801ae34:	bda8fae9 	.word	0xbda8fae9
 801ae38:	bdb4b1c4 	.word	0xbdb4b1c4
 801ae3c:	3e21ee9e 	.word	0x3e21ee9e
 801ae40:	809c52ad 	.word	0x809c52ad
 801ae44:	3e927e4f 	.word	0x3e927e4f
 801ae48:	19cb1590 	.word	0x19cb1590
 801ae4c:	3efa01a0 	.word	0x3efa01a0
 801ae50:	16c15177 	.word	0x16c15177
 801ae54:	3f56c16c 	.word	0x3f56c16c
 801ae58:	5555554c 	.word	0x5555554c
 801ae5c:	3fa55555 	.word	0x3fa55555
 801ae60:	00000000 	.word	0x00000000
 801ae64:	3ff00000 	.word	0x3ff00000
 801ae68:	3fe00000 	.word	0x3fe00000
 801ae6c:	3fd33332 	.word	0x3fd33332
 801ae70:	3ff00000 	.word	0x3ff00000
 801ae74:	3fe90000 	.word	0x3fe90000
 801ae78:	3fd20000 	.word	0x3fd20000
 801ae7c:	00000000 	.word	0x00000000

0801ae80 <__kernel_rem_pio2>:
 801ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae84:	ed2d 8b02 	vpush	{d8}
 801ae88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801ae8c:	f112 0f14 	cmn.w	r2, #20
 801ae90:	9308      	str	r3, [sp, #32]
 801ae92:	9101      	str	r1, [sp, #4]
 801ae94:	4bc4      	ldr	r3, [pc, #784]	; (801b1a8 <__kernel_rem_pio2+0x328>)
 801ae96:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801ae98:	900b      	str	r0, [sp, #44]	; 0x2c
 801ae9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ae9e:	9302      	str	r3, [sp, #8]
 801aea0:	9b08      	ldr	r3, [sp, #32]
 801aea2:	f103 33ff 	add.w	r3, r3, #4294967295
 801aea6:	bfa8      	it	ge
 801aea8:	1ed4      	subge	r4, r2, #3
 801aeaa:	9306      	str	r3, [sp, #24]
 801aeac:	bfb2      	itee	lt
 801aeae:	2400      	movlt	r4, #0
 801aeb0:	2318      	movge	r3, #24
 801aeb2:	fb94 f4f3 	sdivge	r4, r4, r3
 801aeb6:	f06f 0317 	mvn.w	r3, #23
 801aeba:	fb04 3303 	mla	r3, r4, r3, r3
 801aebe:	eb03 0a02 	add.w	sl, r3, r2
 801aec2:	9b02      	ldr	r3, [sp, #8]
 801aec4:	9a06      	ldr	r2, [sp, #24]
 801aec6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801b198 <__kernel_rem_pio2+0x318>
 801aeca:	eb03 0802 	add.w	r8, r3, r2
 801aece:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801aed0:	1aa7      	subs	r7, r4, r2
 801aed2:	ae22      	add	r6, sp, #136	; 0x88
 801aed4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801aed8:	2500      	movs	r5, #0
 801aeda:	4545      	cmp	r5, r8
 801aedc:	dd13      	ble.n	801af06 <__kernel_rem_pio2+0x86>
 801aede:	9b08      	ldr	r3, [sp, #32]
 801aee0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801b198 <__kernel_rem_pio2+0x318>
 801aee4:	aa22      	add	r2, sp, #136	; 0x88
 801aee6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801aeea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801aeee:	f04f 0800 	mov.w	r8, #0
 801aef2:	9b02      	ldr	r3, [sp, #8]
 801aef4:	4598      	cmp	r8, r3
 801aef6:	dc2f      	bgt.n	801af58 <__kernel_rem_pio2+0xd8>
 801aef8:	ed8d 8b04 	vstr	d8, [sp, #16]
 801aefc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801af00:	462f      	mov	r7, r5
 801af02:	2600      	movs	r6, #0
 801af04:	e01b      	b.n	801af3e <__kernel_rem_pio2+0xbe>
 801af06:	42ef      	cmn	r7, r5
 801af08:	d407      	bmi.n	801af1a <__kernel_rem_pio2+0x9a>
 801af0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801af0e:	f7e5 fb29 	bl	8000564 <__aeabi_i2d>
 801af12:	e8e6 0102 	strd	r0, r1, [r6], #8
 801af16:	3501      	adds	r5, #1
 801af18:	e7df      	b.n	801aeda <__kernel_rem_pio2+0x5a>
 801af1a:	ec51 0b18 	vmov	r0, r1, d8
 801af1e:	e7f8      	b.n	801af12 <__kernel_rem_pio2+0x92>
 801af20:	e9d7 2300 	ldrd	r2, r3, [r7]
 801af24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801af28:	f7e5 fb86 	bl	8000638 <__aeabi_dmul>
 801af2c:	4602      	mov	r2, r0
 801af2e:	460b      	mov	r3, r1
 801af30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801af34:	f7e5 f9ca 	bl	80002cc <__adddf3>
 801af38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801af3c:	3601      	adds	r6, #1
 801af3e:	9b06      	ldr	r3, [sp, #24]
 801af40:	429e      	cmp	r6, r3
 801af42:	f1a7 0708 	sub.w	r7, r7, #8
 801af46:	ddeb      	ble.n	801af20 <__kernel_rem_pio2+0xa0>
 801af48:	ed9d 7b04 	vldr	d7, [sp, #16]
 801af4c:	f108 0801 	add.w	r8, r8, #1
 801af50:	ecab 7b02 	vstmia	fp!, {d7}
 801af54:	3508      	adds	r5, #8
 801af56:	e7cc      	b.n	801aef2 <__kernel_rem_pio2+0x72>
 801af58:	9b02      	ldr	r3, [sp, #8]
 801af5a:	aa0e      	add	r2, sp, #56	; 0x38
 801af5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801af60:	930d      	str	r3, [sp, #52]	; 0x34
 801af62:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801af64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801af68:	9c02      	ldr	r4, [sp, #8]
 801af6a:	930c      	str	r3, [sp, #48]	; 0x30
 801af6c:	00e3      	lsls	r3, r4, #3
 801af6e:	930a      	str	r3, [sp, #40]	; 0x28
 801af70:	ab9a      	add	r3, sp, #616	; 0x268
 801af72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801af76:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801af7a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801af7e:	ab72      	add	r3, sp, #456	; 0x1c8
 801af80:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801af84:	46c3      	mov	fp, r8
 801af86:	46a1      	mov	r9, r4
 801af88:	f1b9 0f00 	cmp.w	r9, #0
 801af8c:	f1a5 0508 	sub.w	r5, r5, #8
 801af90:	dc77      	bgt.n	801b082 <__kernel_rem_pio2+0x202>
 801af92:	ec47 6b10 	vmov	d0, r6, r7
 801af96:	4650      	mov	r0, sl
 801af98:	f000 fe52 	bl	801bc40 <scalbn>
 801af9c:	ec57 6b10 	vmov	r6, r7, d0
 801afa0:	2200      	movs	r2, #0
 801afa2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801afa6:	ee10 0a10 	vmov	r0, s0
 801afaa:	4639      	mov	r1, r7
 801afac:	f7e5 fb44 	bl	8000638 <__aeabi_dmul>
 801afb0:	ec41 0b10 	vmov	d0, r0, r1
 801afb4:	f000 fdc4 	bl	801bb40 <floor>
 801afb8:	4b7c      	ldr	r3, [pc, #496]	; (801b1ac <__kernel_rem_pio2+0x32c>)
 801afba:	ec51 0b10 	vmov	r0, r1, d0
 801afbe:	2200      	movs	r2, #0
 801afc0:	f7e5 fb3a 	bl	8000638 <__aeabi_dmul>
 801afc4:	4602      	mov	r2, r0
 801afc6:	460b      	mov	r3, r1
 801afc8:	4630      	mov	r0, r6
 801afca:	4639      	mov	r1, r7
 801afcc:	f7e5 f97c 	bl	80002c8 <__aeabi_dsub>
 801afd0:	460f      	mov	r7, r1
 801afd2:	4606      	mov	r6, r0
 801afd4:	f7e5 fde0 	bl	8000b98 <__aeabi_d2iz>
 801afd8:	9004      	str	r0, [sp, #16]
 801afda:	f7e5 fac3 	bl	8000564 <__aeabi_i2d>
 801afde:	4602      	mov	r2, r0
 801afe0:	460b      	mov	r3, r1
 801afe2:	4630      	mov	r0, r6
 801afe4:	4639      	mov	r1, r7
 801afe6:	f7e5 f96f 	bl	80002c8 <__aeabi_dsub>
 801afea:	f1ba 0f00 	cmp.w	sl, #0
 801afee:	4606      	mov	r6, r0
 801aff0:	460f      	mov	r7, r1
 801aff2:	dd6d      	ble.n	801b0d0 <__kernel_rem_pio2+0x250>
 801aff4:	1e62      	subs	r2, r4, #1
 801aff6:	ab0e      	add	r3, sp, #56	; 0x38
 801aff8:	9d04      	ldr	r5, [sp, #16]
 801affa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801affe:	f1ca 0118 	rsb	r1, sl, #24
 801b002:	fa40 f301 	asr.w	r3, r0, r1
 801b006:	441d      	add	r5, r3
 801b008:	408b      	lsls	r3, r1
 801b00a:	1ac0      	subs	r0, r0, r3
 801b00c:	ab0e      	add	r3, sp, #56	; 0x38
 801b00e:	9504      	str	r5, [sp, #16]
 801b010:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801b014:	f1ca 0317 	rsb	r3, sl, #23
 801b018:	fa40 fb03 	asr.w	fp, r0, r3
 801b01c:	f1bb 0f00 	cmp.w	fp, #0
 801b020:	dd65      	ble.n	801b0ee <__kernel_rem_pio2+0x26e>
 801b022:	9b04      	ldr	r3, [sp, #16]
 801b024:	2200      	movs	r2, #0
 801b026:	3301      	adds	r3, #1
 801b028:	9304      	str	r3, [sp, #16]
 801b02a:	4615      	mov	r5, r2
 801b02c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b030:	4294      	cmp	r4, r2
 801b032:	f300 809c 	bgt.w	801b16e <__kernel_rem_pio2+0x2ee>
 801b036:	f1ba 0f00 	cmp.w	sl, #0
 801b03a:	dd07      	ble.n	801b04c <__kernel_rem_pio2+0x1cc>
 801b03c:	f1ba 0f01 	cmp.w	sl, #1
 801b040:	f000 80c0 	beq.w	801b1c4 <__kernel_rem_pio2+0x344>
 801b044:	f1ba 0f02 	cmp.w	sl, #2
 801b048:	f000 80c6 	beq.w	801b1d8 <__kernel_rem_pio2+0x358>
 801b04c:	f1bb 0f02 	cmp.w	fp, #2
 801b050:	d14d      	bne.n	801b0ee <__kernel_rem_pio2+0x26e>
 801b052:	4632      	mov	r2, r6
 801b054:	463b      	mov	r3, r7
 801b056:	4956      	ldr	r1, [pc, #344]	; (801b1b0 <__kernel_rem_pio2+0x330>)
 801b058:	2000      	movs	r0, #0
 801b05a:	f7e5 f935 	bl	80002c8 <__aeabi_dsub>
 801b05e:	4606      	mov	r6, r0
 801b060:	460f      	mov	r7, r1
 801b062:	2d00      	cmp	r5, #0
 801b064:	d043      	beq.n	801b0ee <__kernel_rem_pio2+0x26e>
 801b066:	4650      	mov	r0, sl
 801b068:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801b1a0 <__kernel_rem_pio2+0x320>
 801b06c:	f000 fde8 	bl	801bc40 <scalbn>
 801b070:	4630      	mov	r0, r6
 801b072:	4639      	mov	r1, r7
 801b074:	ec53 2b10 	vmov	r2, r3, d0
 801b078:	f7e5 f926 	bl	80002c8 <__aeabi_dsub>
 801b07c:	4606      	mov	r6, r0
 801b07e:	460f      	mov	r7, r1
 801b080:	e035      	b.n	801b0ee <__kernel_rem_pio2+0x26e>
 801b082:	4b4c      	ldr	r3, [pc, #304]	; (801b1b4 <__kernel_rem_pio2+0x334>)
 801b084:	2200      	movs	r2, #0
 801b086:	4630      	mov	r0, r6
 801b088:	4639      	mov	r1, r7
 801b08a:	f7e5 fad5 	bl	8000638 <__aeabi_dmul>
 801b08e:	f7e5 fd83 	bl	8000b98 <__aeabi_d2iz>
 801b092:	f7e5 fa67 	bl	8000564 <__aeabi_i2d>
 801b096:	4602      	mov	r2, r0
 801b098:	460b      	mov	r3, r1
 801b09a:	ec43 2b18 	vmov	d8, r2, r3
 801b09e:	4b46      	ldr	r3, [pc, #280]	; (801b1b8 <__kernel_rem_pio2+0x338>)
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	f7e5 fac9 	bl	8000638 <__aeabi_dmul>
 801b0a6:	4602      	mov	r2, r0
 801b0a8:	460b      	mov	r3, r1
 801b0aa:	4630      	mov	r0, r6
 801b0ac:	4639      	mov	r1, r7
 801b0ae:	f7e5 f90b 	bl	80002c8 <__aeabi_dsub>
 801b0b2:	f7e5 fd71 	bl	8000b98 <__aeabi_d2iz>
 801b0b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b0ba:	f84b 0b04 	str.w	r0, [fp], #4
 801b0be:	ec51 0b18 	vmov	r0, r1, d8
 801b0c2:	f7e5 f903 	bl	80002cc <__adddf3>
 801b0c6:	f109 39ff 	add.w	r9, r9, #4294967295
 801b0ca:	4606      	mov	r6, r0
 801b0cc:	460f      	mov	r7, r1
 801b0ce:	e75b      	b.n	801af88 <__kernel_rem_pio2+0x108>
 801b0d0:	d106      	bne.n	801b0e0 <__kernel_rem_pio2+0x260>
 801b0d2:	1e63      	subs	r3, r4, #1
 801b0d4:	aa0e      	add	r2, sp, #56	; 0x38
 801b0d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b0da:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801b0de:	e79d      	b.n	801b01c <__kernel_rem_pio2+0x19c>
 801b0e0:	4b36      	ldr	r3, [pc, #216]	; (801b1bc <__kernel_rem_pio2+0x33c>)
 801b0e2:	2200      	movs	r2, #0
 801b0e4:	f7e5 fd2e 	bl	8000b44 <__aeabi_dcmpge>
 801b0e8:	2800      	cmp	r0, #0
 801b0ea:	d13d      	bne.n	801b168 <__kernel_rem_pio2+0x2e8>
 801b0ec:	4683      	mov	fp, r0
 801b0ee:	2200      	movs	r2, #0
 801b0f0:	2300      	movs	r3, #0
 801b0f2:	4630      	mov	r0, r6
 801b0f4:	4639      	mov	r1, r7
 801b0f6:	f7e5 fd07 	bl	8000b08 <__aeabi_dcmpeq>
 801b0fa:	2800      	cmp	r0, #0
 801b0fc:	f000 80c0 	beq.w	801b280 <__kernel_rem_pio2+0x400>
 801b100:	1e65      	subs	r5, r4, #1
 801b102:	462b      	mov	r3, r5
 801b104:	2200      	movs	r2, #0
 801b106:	9902      	ldr	r1, [sp, #8]
 801b108:	428b      	cmp	r3, r1
 801b10a:	da6c      	bge.n	801b1e6 <__kernel_rem_pio2+0x366>
 801b10c:	2a00      	cmp	r2, #0
 801b10e:	f000 8089 	beq.w	801b224 <__kernel_rem_pio2+0x3a4>
 801b112:	ab0e      	add	r3, sp, #56	; 0x38
 801b114:	f1aa 0a18 	sub.w	sl, sl, #24
 801b118:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	f000 80ad 	beq.w	801b27c <__kernel_rem_pio2+0x3fc>
 801b122:	4650      	mov	r0, sl
 801b124:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801b1a0 <__kernel_rem_pio2+0x320>
 801b128:	f000 fd8a 	bl	801bc40 <scalbn>
 801b12c:	ab9a      	add	r3, sp, #616	; 0x268
 801b12e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b132:	ec57 6b10 	vmov	r6, r7, d0
 801b136:	00ec      	lsls	r4, r5, #3
 801b138:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801b13c:	46aa      	mov	sl, r5
 801b13e:	f1ba 0f00 	cmp.w	sl, #0
 801b142:	f280 80d6 	bge.w	801b2f2 <__kernel_rem_pio2+0x472>
 801b146:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801b198 <__kernel_rem_pio2+0x318>
 801b14a:	462e      	mov	r6, r5
 801b14c:	2e00      	cmp	r6, #0
 801b14e:	f2c0 8104 	blt.w	801b35a <__kernel_rem_pio2+0x4da>
 801b152:	ab72      	add	r3, sp, #456	; 0x1c8
 801b154:	ed8d 8b06 	vstr	d8, [sp, #24]
 801b158:	f8df a064 	ldr.w	sl, [pc, #100]	; 801b1c0 <__kernel_rem_pio2+0x340>
 801b15c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801b160:	f04f 0800 	mov.w	r8, #0
 801b164:	1baf      	subs	r7, r5, r6
 801b166:	e0ea      	b.n	801b33e <__kernel_rem_pio2+0x4be>
 801b168:	f04f 0b02 	mov.w	fp, #2
 801b16c:	e759      	b.n	801b022 <__kernel_rem_pio2+0x1a2>
 801b16e:	f8d8 3000 	ldr.w	r3, [r8]
 801b172:	b955      	cbnz	r5, 801b18a <__kernel_rem_pio2+0x30a>
 801b174:	b123      	cbz	r3, 801b180 <__kernel_rem_pio2+0x300>
 801b176:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b17a:	f8c8 3000 	str.w	r3, [r8]
 801b17e:	2301      	movs	r3, #1
 801b180:	3201      	adds	r2, #1
 801b182:	f108 0804 	add.w	r8, r8, #4
 801b186:	461d      	mov	r5, r3
 801b188:	e752      	b.n	801b030 <__kernel_rem_pio2+0x1b0>
 801b18a:	1acb      	subs	r3, r1, r3
 801b18c:	f8c8 3000 	str.w	r3, [r8]
 801b190:	462b      	mov	r3, r5
 801b192:	e7f5      	b.n	801b180 <__kernel_rem_pio2+0x300>
 801b194:	f3af 8000 	nop.w
	...
 801b1a4:	3ff00000 	.word	0x3ff00000
 801b1a8:	0805c188 	.word	0x0805c188
 801b1ac:	40200000 	.word	0x40200000
 801b1b0:	3ff00000 	.word	0x3ff00000
 801b1b4:	3e700000 	.word	0x3e700000
 801b1b8:	41700000 	.word	0x41700000
 801b1bc:	3fe00000 	.word	0x3fe00000
 801b1c0:	0805c148 	.word	0x0805c148
 801b1c4:	1e62      	subs	r2, r4, #1
 801b1c6:	ab0e      	add	r3, sp, #56	; 0x38
 801b1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b1cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b1d0:	a90e      	add	r1, sp, #56	; 0x38
 801b1d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b1d6:	e739      	b.n	801b04c <__kernel_rem_pio2+0x1cc>
 801b1d8:	1e62      	subs	r2, r4, #1
 801b1da:	ab0e      	add	r3, sp, #56	; 0x38
 801b1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b1e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b1e4:	e7f4      	b.n	801b1d0 <__kernel_rem_pio2+0x350>
 801b1e6:	a90e      	add	r1, sp, #56	; 0x38
 801b1e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b1ec:	3b01      	subs	r3, #1
 801b1ee:	430a      	orrs	r2, r1
 801b1f0:	e789      	b.n	801b106 <__kernel_rem_pio2+0x286>
 801b1f2:	3301      	adds	r3, #1
 801b1f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b1f8:	2900      	cmp	r1, #0
 801b1fa:	d0fa      	beq.n	801b1f2 <__kernel_rem_pio2+0x372>
 801b1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b1fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801b202:	446a      	add	r2, sp
 801b204:	3a98      	subs	r2, #152	; 0x98
 801b206:	920a      	str	r2, [sp, #40]	; 0x28
 801b208:	9a08      	ldr	r2, [sp, #32]
 801b20a:	18e3      	adds	r3, r4, r3
 801b20c:	18a5      	adds	r5, r4, r2
 801b20e:	aa22      	add	r2, sp, #136	; 0x88
 801b210:	f104 0801 	add.w	r8, r4, #1
 801b214:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801b218:	9304      	str	r3, [sp, #16]
 801b21a:	9b04      	ldr	r3, [sp, #16]
 801b21c:	4543      	cmp	r3, r8
 801b21e:	da04      	bge.n	801b22a <__kernel_rem_pio2+0x3aa>
 801b220:	461c      	mov	r4, r3
 801b222:	e6a3      	b.n	801af6c <__kernel_rem_pio2+0xec>
 801b224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b226:	2301      	movs	r3, #1
 801b228:	e7e4      	b.n	801b1f4 <__kernel_rem_pio2+0x374>
 801b22a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b22c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b230:	f7e5 f998 	bl	8000564 <__aeabi_i2d>
 801b234:	e8e5 0102 	strd	r0, r1, [r5], #8
 801b238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b23a:	46ab      	mov	fp, r5
 801b23c:	461c      	mov	r4, r3
 801b23e:	f04f 0900 	mov.w	r9, #0
 801b242:	2600      	movs	r6, #0
 801b244:	2700      	movs	r7, #0
 801b246:	9b06      	ldr	r3, [sp, #24]
 801b248:	4599      	cmp	r9, r3
 801b24a:	dd06      	ble.n	801b25a <__kernel_rem_pio2+0x3da>
 801b24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b24e:	e8e3 6702 	strd	r6, r7, [r3], #8
 801b252:	f108 0801 	add.w	r8, r8, #1
 801b256:	930a      	str	r3, [sp, #40]	; 0x28
 801b258:	e7df      	b.n	801b21a <__kernel_rem_pio2+0x39a>
 801b25a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b25e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b262:	f7e5 f9e9 	bl	8000638 <__aeabi_dmul>
 801b266:	4602      	mov	r2, r0
 801b268:	460b      	mov	r3, r1
 801b26a:	4630      	mov	r0, r6
 801b26c:	4639      	mov	r1, r7
 801b26e:	f7e5 f82d 	bl	80002cc <__adddf3>
 801b272:	f109 0901 	add.w	r9, r9, #1
 801b276:	4606      	mov	r6, r0
 801b278:	460f      	mov	r7, r1
 801b27a:	e7e4      	b.n	801b246 <__kernel_rem_pio2+0x3c6>
 801b27c:	3d01      	subs	r5, #1
 801b27e:	e748      	b.n	801b112 <__kernel_rem_pio2+0x292>
 801b280:	ec47 6b10 	vmov	d0, r6, r7
 801b284:	f1ca 0000 	rsb	r0, sl, #0
 801b288:	f000 fcda 	bl	801bc40 <scalbn>
 801b28c:	ec57 6b10 	vmov	r6, r7, d0
 801b290:	4ba0      	ldr	r3, [pc, #640]	; (801b514 <__kernel_rem_pio2+0x694>)
 801b292:	ee10 0a10 	vmov	r0, s0
 801b296:	2200      	movs	r2, #0
 801b298:	4639      	mov	r1, r7
 801b29a:	f7e5 fc53 	bl	8000b44 <__aeabi_dcmpge>
 801b29e:	b1f8      	cbz	r0, 801b2e0 <__kernel_rem_pio2+0x460>
 801b2a0:	4b9d      	ldr	r3, [pc, #628]	; (801b518 <__kernel_rem_pio2+0x698>)
 801b2a2:	2200      	movs	r2, #0
 801b2a4:	4630      	mov	r0, r6
 801b2a6:	4639      	mov	r1, r7
 801b2a8:	f7e5 f9c6 	bl	8000638 <__aeabi_dmul>
 801b2ac:	f7e5 fc74 	bl	8000b98 <__aeabi_d2iz>
 801b2b0:	4680      	mov	r8, r0
 801b2b2:	f7e5 f957 	bl	8000564 <__aeabi_i2d>
 801b2b6:	4b97      	ldr	r3, [pc, #604]	; (801b514 <__kernel_rem_pio2+0x694>)
 801b2b8:	2200      	movs	r2, #0
 801b2ba:	f7e5 f9bd 	bl	8000638 <__aeabi_dmul>
 801b2be:	460b      	mov	r3, r1
 801b2c0:	4602      	mov	r2, r0
 801b2c2:	4639      	mov	r1, r7
 801b2c4:	4630      	mov	r0, r6
 801b2c6:	f7e4 ffff 	bl	80002c8 <__aeabi_dsub>
 801b2ca:	f7e5 fc65 	bl	8000b98 <__aeabi_d2iz>
 801b2ce:	1c65      	adds	r5, r4, #1
 801b2d0:	ab0e      	add	r3, sp, #56	; 0x38
 801b2d2:	f10a 0a18 	add.w	sl, sl, #24
 801b2d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b2da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801b2de:	e720      	b.n	801b122 <__kernel_rem_pio2+0x2a2>
 801b2e0:	4630      	mov	r0, r6
 801b2e2:	4639      	mov	r1, r7
 801b2e4:	f7e5 fc58 	bl	8000b98 <__aeabi_d2iz>
 801b2e8:	ab0e      	add	r3, sp, #56	; 0x38
 801b2ea:	4625      	mov	r5, r4
 801b2ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b2f0:	e717      	b.n	801b122 <__kernel_rem_pio2+0x2a2>
 801b2f2:	ab0e      	add	r3, sp, #56	; 0x38
 801b2f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801b2f8:	f7e5 f934 	bl	8000564 <__aeabi_i2d>
 801b2fc:	4632      	mov	r2, r6
 801b2fe:	463b      	mov	r3, r7
 801b300:	f7e5 f99a 	bl	8000638 <__aeabi_dmul>
 801b304:	4b84      	ldr	r3, [pc, #528]	; (801b518 <__kernel_rem_pio2+0x698>)
 801b306:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801b30a:	2200      	movs	r2, #0
 801b30c:	4630      	mov	r0, r6
 801b30e:	4639      	mov	r1, r7
 801b310:	f7e5 f992 	bl	8000638 <__aeabi_dmul>
 801b314:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b318:	4606      	mov	r6, r0
 801b31a:	460f      	mov	r7, r1
 801b31c:	e70f      	b.n	801b13e <__kernel_rem_pio2+0x2be>
 801b31e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801b322:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801b326:	f7e5 f987 	bl	8000638 <__aeabi_dmul>
 801b32a:	4602      	mov	r2, r0
 801b32c:	460b      	mov	r3, r1
 801b32e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b332:	f7e4 ffcb 	bl	80002cc <__adddf3>
 801b336:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b33a:	f108 0801 	add.w	r8, r8, #1
 801b33e:	9b02      	ldr	r3, [sp, #8]
 801b340:	4598      	cmp	r8, r3
 801b342:	dc01      	bgt.n	801b348 <__kernel_rem_pio2+0x4c8>
 801b344:	45b8      	cmp	r8, r7
 801b346:	ddea      	ble.n	801b31e <__kernel_rem_pio2+0x49e>
 801b348:	ed9d 7b06 	vldr	d7, [sp, #24]
 801b34c:	ab4a      	add	r3, sp, #296	; 0x128
 801b34e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801b352:	ed87 7b00 	vstr	d7, [r7]
 801b356:	3e01      	subs	r6, #1
 801b358:	e6f8      	b.n	801b14c <__kernel_rem_pio2+0x2cc>
 801b35a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801b35c:	2b02      	cmp	r3, #2
 801b35e:	dc0b      	bgt.n	801b378 <__kernel_rem_pio2+0x4f8>
 801b360:	2b00      	cmp	r3, #0
 801b362:	dc35      	bgt.n	801b3d0 <__kernel_rem_pio2+0x550>
 801b364:	d059      	beq.n	801b41a <__kernel_rem_pio2+0x59a>
 801b366:	9b04      	ldr	r3, [sp, #16]
 801b368:	f003 0007 	and.w	r0, r3, #7
 801b36c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801b370:	ecbd 8b02 	vpop	{d8}
 801b374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b378:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801b37a:	2b03      	cmp	r3, #3
 801b37c:	d1f3      	bne.n	801b366 <__kernel_rem_pio2+0x4e6>
 801b37e:	ab4a      	add	r3, sp, #296	; 0x128
 801b380:	4423      	add	r3, r4
 801b382:	9306      	str	r3, [sp, #24]
 801b384:	461c      	mov	r4, r3
 801b386:	469a      	mov	sl, r3
 801b388:	9502      	str	r5, [sp, #8]
 801b38a:	9b02      	ldr	r3, [sp, #8]
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	f1aa 0a08 	sub.w	sl, sl, #8
 801b392:	dc6b      	bgt.n	801b46c <__kernel_rem_pio2+0x5ec>
 801b394:	46aa      	mov	sl, r5
 801b396:	f1ba 0f01 	cmp.w	sl, #1
 801b39a:	f1a4 0408 	sub.w	r4, r4, #8
 801b39e:	f300 8085 	bgt.w	801b4ac <__kernel_rem_pio2+0x62c>
 801b3a2:	9c06      	ldr	r4, [sp, #24]
 801b3a4:	2000      	movs	r0, #0
 801b3a6:	3408      	adds	r4, #8
 801b3a8:	2100      	movs	r1, #0
 801b3aa:	2d01      	cmp	r5, #1
 801b3ac:	f300 809d 	bgt.w	801b4ea <__kernel_rem_pio2+0x66a>
 801b3b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801b3b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801b3b8:	f1bb 0f00 	cmp.w	fp, #0
 801b3bc:	f040 809b 	bne.w	801b4f6 <__kernel_rem_pio2+0x676>
 801b3c0:	9b01      	ldr	r3, [sp, #4]
 801b3c2:	e9c3 5600 	strd	r5, r6, [r3]
 801b3c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801b3ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b3ce:	e7ca      	b.n	801b366 <__kernel_rem_pio2+0x4e6>
 801b3d0:	3408      	adds	r4, #8
 801b3d2:	ab4a      	add	r3, sp, #296	; 0x128
 801b3d4:	441c      	add	r4, r3
 801b3d6:	462e      	mov	r6, r5
 801b3d8:	2000      	movs	r0, #0
 801b3da:	2100      	movs	r1, #0
 801b3dc:	2e00      	cmp	r6, #0
 801b3de:	da36      	bge.n	801b44e <__kernel_rem_pio2+0x5ce>
 801b3e0:	f1bb 0f00 	cmp.w	fp, #0
 801b3e4:	d039      	beq.n	801b45a <__kernel_rem_pio2+0x5da>
 801b3e6:	4602      	mov	r2, r0
 801b3e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b3ec:	9c01      	ldr	r4, [sp, #4]
 801b3ee:	e9c4 2300 	strd	r2, r3, [r4]
 801b3f2:	4602      	mov	r2, r0
 801b3f4:	460b      	mov	r3, r1
 801b3f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801b3fa:	f7e4 ff65 	bl	80002c8 <__aeabi_dsub>
 801b3fe:	ae4c      	add	r6, sp, #304	; 0x130
 801b400:	2401      	movs	r4, #1
 801b402:	42a5      	cmp	r5, r4
 801b404:	da2c      	bge.n	801b460 <__kernel_rem_pio2+0x5e0>
 801b406:	f1bb 0f00 	cmp.w	fp, #0
 801b40a:	d002      	beq.n	801b412 <__kernel_rem_pio2+0x592>
 801b40c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b410:	4619      	mov	r1, r3
 801b412:	9b01      	ldr	r3, [sp, #4]
 801b414:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b418:	e7a5      	b.n	801b366 <__kernel_rem_pio2+0x4e6>
 801b41a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801b41e:	eb0d 0403 	add.w	r4, sp, r3
 801b422:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801b426:	2000      	movs	r0, #0
 801b428:	2100      	movs	r1, #0
 801b42a:	2d00      	cmp	r5, #0
 801b42c:	da09      	bge.n	801b442 <__kernel_rem_pio2+0x5c2>
 801b42e:	f1bb 0f00 	cmp.w	fp, #0
 801b432:	d002      	beq.n	801b43a <__kernel_rem_pio2+0x5ba>
 801b434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b438:	4619      	mov	r1, r3
 801b43a:	9b01      	ldr	r3, [sp, #4]
 801b43c:	e9c3 0100 	strd	r0, r1, [r3]
 801b440:	e791      	b.n	801b366 <__kernel_rem_pio2+0x4e6>
 801b442:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b446:	f7e4 ff41 	bl	80002cc <__adddf3>
 801b44a:	3d01      	subs	r5, #1
 801b44c:	e7ed      	b.n	801b42a <__kernel_rem_pio2+0x5aa>
 801b44e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b452:	f7e4 ff3b 	bl	80002cc <__adddf3>
 801b456:	3e01      	subs	r6, #1
 801b458:	e7c0      	b.n	801b3dc <__kernel_rem_pio2+0x55c>
 801b45a:	4602      	mov	r2, r0
 801b45c:	460b      	mov	r3, r1
 801b45e:	e7c5      	b.n	801b3ec <__kernel_rem_pio2+0x56c>
 801b460:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801b464:	f7e4 ff32 	bl	80002cc <__adddf3>
 801b468:	3401      	adds	r4, #1
 801b46a:	e7ca      	b.n	801b402 <__kernel_rem_pio2+0x582>
 801b46c:	e9da 8900 	ldrd	r8, r9, [sl]
 801b470:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801b474:	9b02      	ldr	r3, [sp, #8]
 801b476:	3b01      	subs	r3, #1
 801b478:	9302      	str	r3, [sp, #8]
 801b47a:	4632      	mov	r2, r6
 801b47c:	463b      	mov	r3, r7
 801b47e:	4640      	mov	r0, r8
 801b480:	4649      	mov	r1, r9
 801b482:	f7e4 ff23 	bl	80002cc <__adddf3>
 801b486:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b48a:	4602      	mov	r2, r0
 801b48c:	460b      	mov	r3, r1
 801b48e:	4640      	mov	r0, r8
 801b490:	4649      	mov	r1, r9
 801b492:	f7e4 ff19 	bl	80002c8 <__aeabi_dsub>
 801b496:	4632      	mov	r2, r6
 801b498:	463b      	mov	r3, r7
 801b49a:	f7e4 ff17 	bl	80002cc <__adddf3>
 801b49e:	ed9d 7b08 	vldr	d7, [sp, #32]
 801b4a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b4a6:	ed8a 7b00 	vstr	d7, [sl]
 801b4aa:	e76e      	b.n	801b38a <__kernel_rem_pio2+0x50a>
 801b4ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 801b4b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801b4b4:	4640      	mov	r0, r8
 801b4b6:	4632      	mov	r2, r6
 801b4b8:	463b      	mov	r3, r7
 801b4ba:	4649      	mov	r1, r9
 801b4bc:	f7e4 ff06 	bl	80002cc <__adddf3>
 801b4c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b4c4:	4602      	mov	r2, r0
 801b4c6:	460b      	mov	r3, r1
 801b4c8:	4640      	mov	r0, r8
 801b4ca:	4649      	mov	r1, r9
 801b4cc:	f7e4 fefc 	bl	80002c8 <__aeabi_dsub>
 801b4d0:	4632      	mov	r2, r6
 801b4d2:	463b      	mov	r3, r7
 801b4d4:	f7e4 fefa 	bl	80002cc <__adddf3>
 801b4d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b4dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801b4e0:	ed84 7b00 	vstr	d7, [r4]
 801b4e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b4e8:	e755      	b.n	801b396 <__kernel_rem_pio2+0x516>
 801b4ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b4ee:	f7e4 feed 	bl	80002cc <__adddf3>
 801b4f2:	3d01      	subs	r5, #1
 801b4f4:	e759      	b.n	801b3aa <__kernel_rem_pio2+0x52a>
 801b4f6:	9b01      	ldr	r3, [sp, #4]
 801b4f8:	9a01      	ldr	r2, [sp, #4]
 801b4fa:	601d      	str	r5, [r3, #0]
 801b4fc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801b500:	605c      	str	r4, [r3, #4]
 801b502:	609f      	str	r7, [r3, #8]
 801b504:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801b508:	60d3      	str	r3, [r2, #12]
 801b50a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b50e:	6110      	str	r0, [r2, #16]
 801b510:	6153      	str	r3, [r2, #20]
 801b512:	e728      	b.n	801b366 <__kernel_rem_pio2+0x4e6>
 801b514:	41700000 	.word	0x41700000
 801b518:	3e700000 	.word	0x3e700000
 801b51c:	00000000 	.word	0x00000000

0801b520 <__kernel_sin>:
 801b520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b524:	ed2d 8b04 	vpush	{d8-d9}
 801b528:	eeb0 8a41 	vmov.f32	s16, s2
 801b52c:	eef0 8a61 	vmov.f32	s17, s3
 801b530:	ec55 4b10 	vmov	r4, r5, d0
 801b534:	b083      	sub	sp, #12
 801b536:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b53a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b53e:	9001      	str	r0, [sp, #4]
 801b540:	da06      	bge.n	801b550 <__kernel_sin+0x30>
 801b542:	ee10 0a10 	vmov	r0, s0
 801b546:	4629      	mov	r1, r5
 801b548:	f7e5 fb26 	bl	8000b98 <__aeabi_d2iz>
 801b54c:	2800      	cmp	r0, #0
 801b54e:	d051      	beq.n	801b5f4 <__kernel_sin+0xd4>
 801b550:	4622      	mov	r2, r4
 801b552:	462b      	mov	r3, r5
 801b554:	4620      	mov	r0, r4
 801b556:	4629      	mov	r1, r5
 801b558:	f7e5 f86e 	bl	8000638 <__aeabi_dmul>
 801b55c:	4682      	mov	sl, r0
 801b55e:	468b      	mov	fp, r1
 801b560:	4602      	mov	r2, r0
 801b562:	460b      	mov	r3, r1
 801b564:	4620      	mov	r0, r4
 801b566:	4629      	mov	r1, r5
 801b568:	f7e5 f866 	bl	8000638 <__aeabi_dmul>
 801b56c:	a341      	add	r3, pc, #260	; (adr r3, 801b674 <__kernel_sin+0x154>)
 801b56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b572:	4680      	mov	r8, r0
 801b574:	4689      	mov	r9, r1
 801b576:	4650      	mov	r0, sl
 801b578:	4659      	mov	r1, fp
 801b57a:	f7e5 f85d 	bl	8000638 <__aeabi_dmul>
 801b57e:	a33f      	add	r3, pc, #252	; (adr r3, 801b67c <__kernel_sin+0x15c>)
 801b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b584:	f7e4 fea0 	bl	80002c8 <__aeabi_dsub>
 801b588:	4652      	mov	r2, sl
 801b58a:	465b      	mov	r3, fp
 801b58c:	f7e5 f854 	bl	8000638 <__aeabi_dmul>
 801b590:	a33c      	add	r3, pc, #240	; (adr r3, 801b684 <__kernel_sin+0x164>)
 801b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b596:	f7e4 fe99 	bl	80002cc <__adddf3>
 801b59a:	4652      	mov	r2, sl
 801b59c:	465b      	mov	r3, fp
 801b59e:	f7e5 f84b 	bl	8000638 <__aeabi_dmul>
 801b5a2:	a33a      	add	r3, pc, #232	; (adr r3, 801b68c <__kernel_sin+0x16c>)
 801b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5a8:	f7e4 fe8e 	bl	80002c8 <__aeabi_dsub>
 801b5ac:	4652      	mov	r2, sl
 801b5ae:	465b      	mov	r3, fp
 801b5b0:	f7e5 f842 	bl	8000638 <__aeabi_dmul>
 801b5b4:	a337      	add	r3, pc, #220	; (adr r3, 801b694 <__kernel_sin+0x174>)
 801b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ba:	f7e4 fe87 	bl	80002cc <__adddf3>
 801b5be:	9b01      	ldr	r3, [sp, #4]
 801b5c0:	4606      	mov	r6, r0
 801b5c2:	460f      	mov	r7, r1
 801b5c4:	b9eb      	cbnz	r3, 801b602 <__kernel_sin+0xe2>
 801b5c6:	4602      	mov	r2, r0
 801b5c8:	460b      	mov	r3, r1
 801b5ca:	4650      	mov	r0, sl
 801b5cc:	4659      	mov	r1, fp
 801b5ce:	f7e5 f833 	bl	8000638 <__aeabi_dmul>
 801b5d2:	a325      	add	r3, pc, #148	; (adr r3, 801b668 <__kernel_sin+0x148>)
 801b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5d8:	f7e4 fe76 	bl	80002c8 <__aeabi_dsub>
 801b5dc:	4642      	mov	r2, r8
 801b5de:	464b      	mov	r3, r9
 801b5e0:	f7e5 f82a 	bl	8000638 <__aeabi_dmul>
 801b5e4:	4602      	mov	r2, r0
 801b5e6:	460b      	mov	r3, r1
 801b5e8:	4620      	mov	r0, r4
 801b5ea:	4629      	mov	r1, r5
 801b5ec:	f7e4 fe6e 	bl	80002cc <__adddf3>
 801b5f0:	4604      	mov	r4, r0
 801b5f2:	460d      	mov	r5, r1
 801b5f4:	ec45 4b10 	vmov	d0, r4, r5
 801b5f8:	b003      	add	sp, #12
 801b5fa:	ecbd 8b04 	vpop	{d8-d9}
 801b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b602:	4b1b      	ldr	r3, [pc, #108]	; (801b670 <__kernel_sin+0x150>)
 801b604:	ec51 0b18 	vmov	r0, r1, d8
 801b608:	2200      	movs	r2, #0
 801b60a:	f7e5 f815 	bl	8000638 <__aeabi_dmul>
 801b60e:	4632      	mov	r2, r6
 801b610:	ec41 0b19 	vmov	d9, r0, r1
 801b614:	463b      	mov	r3, r7
 801b616:	4640      	mov	r0, r8
 801b618:	4649      	mov	r1, r9
 801b61a:	f7e5 f80d 	bl	8000638 <__aeabi_dmul>
 801b61e:	4602      	mov	r2, r0
 801b620:	460b      	mov	r3, r1
 801b622:	ec51 0b19 	vmov	r0, r1, d9
 801b626:	f7e4 fe4f 	bl	80002c8 <__aeabi_dsub>
 801b62a:	4652      	mov	r2, sl
 801b62c:	465b      	mov	r3, fp
 801b62e:	f7e5 f803 	bl	8000638 <__aeabi_dmul>
 801b632:	ec53 2b18 	vmov	r2, r3, d8
 801b636:	f7e4 fe47 	bl	80002c8 <__aeabi_dsub>
 801b63a:	a30b      	add	r3, pc, #44	; (adr r3, 801b668 <__kernel_sin+0x148>)
 801b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b640:	4606      	mov	r6, r0
 801b642:	460f      	mov	r7, r1
 801b644:	4640      	mov	r0, r8
 801b646:	4649      	mov	r1, r9
 801b648:	f7e4 fff6 	bl	8000638 <__aeabi_dmul>
 801b64c:	4602      	mov	r2, r0
 801b64e:	460b      	mov	r3, r1
 801b650:	4630      	mov	r0, r6
 801b652:	4639      	mov	r1, r7
 801b654:	f7e4 fe3a 	bl	80002cc <__adddf3>
 801b658:	4602      	mov	r2, r0
 801b65a:	460b      	mov	r3, r1
 801b65c:	4620      	mov	r0, r4
 801b65e:	4629      	mov	r1, r5
 801b660:	f7e4 fe32 	bl	80002c8 <__aeabi_dsub>
 801b664:	e7c4      	b.n	801b5f0 <__kernel_sin+0xd0>
 801b666:	bf00      	nop
 801b668:	55555549 	.word	0x55555549
 801b66c:	3fc55555 	.word	0x3fc55555
 801b670:	3fe00000 	.word	0x3fe00000
 801b674:	5acfd57c 	.word	0x5acfd57c
 801b678:	3de5d93a 	.word	0x3de5d93a
 801b67c:	8a2b9ceb 	.word	0x8a2b9ceb
 801b680:	3e5ae5e6 	.word	0x3e5ae5e6
 801b684:	57b1fe7d 	.word	0x57b1fe7d
 801b688:	3ec71de3 	.word	0x3ec71de3
 801b68c:	19c161d5 	.word	0x19c161d5
 801b690:	3f2a01a0 	.word	0x3f2a01a0
 801b694:	1110f8a6 	.word	0x1110f8a6
 801b698:	3f811111 	.word	0x3f811111
 801b69c:	00000000 	.word	0x00000000

0801b6a0 <__kernel_tan>:
 801b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6a4:	ed2d 8b06 	vpush	{d8-d10}
 801b6a8:	ec5b ab10 	vmov	sl, fp, d0
 801b6ac:	4be0      	ldr	r3, [pc, #896]	; (801ba30 <__kernel_tan+0x390>)
 801b6ae:	b083      	sub	sp, #12
 801b6b0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801b6b4:	429f      	cmp	r7, r3
 801b6b6:	ec59 8b11 	vmov	r8, r9, d1
 801b6ba:	4606      	mov	r6, r0
 801b6bc:	f8cd b000 	str.w	fp, [sp]
 801b6c0:	dc61      	bgt.n	801b786 <__kernel_tan+0xe6>
 801b6c2:	ee10 0a10 	vmov	r0, s0
 801b6c6:	4659      	mov	r1, fp
 801b6c8:	f7e5 fa66 	bl	8000b98 <__aeabi_d2iz>
 801b6cc:	4605      	mov	r5, r0
 801b6ce:	2800      	cmp	r0, #0
 801b6d0:	f040 8083 	bne.w	801b7da <__kernel_tan+0x13a>
 801b6d4:	1c73      	adds	r3, r6, #1
 801b6d6:	4652      	mov	r2, sl
 801b6d8:	4313      	orrs	r3, r2
 801b6da:	433b      	orrs	r3, r7
 801b6dc:	d112      	bne.n	801b704 <__kernel_tan+0x64>
 801b6de:	ec4b ab10 	vmov	d0, sl, fp
 801b6e2:	f000 fa17 	bl	801bb14 <fabs>
 801b6e6:	49d3      	ldr	r1, [pc, #844]	; (801ba34 <__kernel_tan+0x394>)
 801b6e8:	ec53 2b10 	vmov	r2, r3, d0
 801b6ec:	2000      	movs	r0, #0
 801b6ee:	f7e5 f8cd 	bl	800088c <__aeabi_ddiv>
 801b6f2:	4682      	mov	sl, r0
 801b6f4:	468b      	mov	fp, r1
 801b6f6:	ec4b ab10 	vmov	d0, sl, fp
 801b6fa:	b003      	add	sp, #12
 801b6fc:	ecbd 8b06 	vpop	{d8-d10}
 801b700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b704:	2e01      	cmp	r6, #1
 801b706:	d0f6      	beq.n	801b6f6 <__kernel_tan+0x56>
 801b708:	4642      	mov	r2, r8
 801b70a:	464b      	mov	r3, r9
 801b70c:	4650      	mov	r0, sl
 801b70e:	4659      	mov	r1, fp
 801b710:	f7e4 fddc 	bl	80002cc <__adddf3>
 801b714:	4602      	mov	r2, r0
 801b716:	460b      	mov	r3, r1
 801b718:	460f      	mov	r7, r1
 801b71a:	2000      	movs	r0, #0
 801b71c:	49c6      	ldr	r1, [pc, #792]	; (801ba38 <__kernel_tan+0x398>)
 801b71e:	f7e5 f8b5 	bl	800088c <__aeabi_ddiv>
 801b722:	e9cd 0100 	strd	r0, r1, [sp]
 801b726:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b72a:	462e      	mov	r6, r5
 801b72c:	4652      	mov	r2, sl
 801b72e:	462c      	mov	r4, r5
 801b730:	4630      	mov	r0, r6
 801b732:	461d      	mov	r5, r3
 801b734:	4639      	mov	r1, r7
 801b736:	465b      	mov	r3, fp
 801b738:	f7e4 fdc6 	bl	80002c8 <__aeabi_dsub>
 801b73c:	4602      	mov	r2, r0
 801b73e:	460b      	mov	r3, r1
 801b740:	4640      	mov	r0, r8
 801b742:	4649      	mov	r1, r9
 801b744:	f7e4 fdc0 	bl	80002c8 <__aeabi_dsub>
 801b748:	4632      	mov	r2, r6
 801b74a:	462b      	mov	r3, r5
 801b74c:	f7e4 ff74 	bl	8000638 <__aeabi_dmul>
 801b750:	4632      	mov	r2, r6
 801b752:	4680      	mov	r8, r0
 801b754:	4689      	mov	r9, r1
 801b756:	462b      	mov	r3, r5
 801b758:	4630      	mov	r0, r6
 801b75a:	4639      	mov	r1, r7
 801b75c:	f7e4 ff6c 	bl	8000638 <__aeabi_dmul>
 801b760:	4bb4      	ldr	r3, [pc, #720]	; (801ba34 <__kernel_tan+0x394>)
 801b762:	2200      	movs	r2, #0
 801b764:	f7e4 fdb2 	bl	80002cc <__adddf3>
 801b768:	4602      	mov	r2, r0
 801b76a:	460b      	mov	r3, r1
 801b76c:	4640      	mov	r0, r8
 801b76e:	4649      	mov	r1, r9
 801b770:	f7e4 fdac 	bl	80002cc <__adddf3>
 801b774:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b778:	f7e4 ff5e 	bl	8000638 <__aeabi_dmul>
 801b77c:	4622      	mov	r2, r4
 801b77e:	462b      	mov	r3, r5
 801b780:	f7e4 fda4 	bl	80002cc <__adddf3>
 801b784:	e7b5      	b.n	801b6f2 <__kernel_tan+0x52>
 801b786:	4bad      	ldr	r3, [pc, #692]	; (801ba3c <__kernel_tan+0x39c>)
 801b788:	429f      	cmp	r7, r3
 801b78a:	dd26      	ble.n	801b7da <__kernel_tan+0x13a>
 801b78c:	9b00      	ldr	r3, [sp, #0]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	da09      	bge.n	801b7a6 <__kernel_tan+0x106>
 801b792:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b796:	469b      	mov	fp, r3
 801b798:	ee10 aa10 	vmov	sl, s0
 801b79c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b7a0:	ee11 8a10 	vmov	r8, s2
 801b7a4:	4699      	mov	r9, r3
 801b7a6:	4652      	mov	r2, sl
 801b7a8:	465b      	mov	r3, fp
 801b7aa:	a183      	add	r1, pc, #524	; (adr r1, 801b9b8 <__kernel_tan+0x318>)
 801b7ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b7b0:	f7e4 fd8a 	bl	80002c8 <__aeabi_dsub>
 801b7b4:	4642      	mov	r2, r8
 801b7b6:	464b      	mov	r3, r9
 801b7b8:	4604      	mov	r4, r0
 801b7ba:	460d      	mov	r5, r1
 801b7bc:	a180      	add	r1, pc, #512	; (adr r1, 801b9c0 <__kernel_tan+0x320>)
 801b7be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b7c2:	f7e4 fd81 	bl	80002c8 <__aeabi_dsub>
 801b7c6:	4622      	mov	r2, r4
 801b7c8:	462b      	mov	r3, r5
 801b7ca:	f7e4 fd7f 	bl	80002cc <__adddf3>
 801b7ce:	f04f 0800 	mov.w	r8, #0
 801b7d2:	4682      	mov	sl, r0
 801b7d4:	468b      	mov	fp, r1
 801b7d6:	f04f 0900 	mov.w	r9, #0
 801b7da:	4652      	mov	r2, sl
 801b7dc:	465b      	mov	r3, fp
 801b7de:	4650      	mov	r0, sl
 801b7e0:	4659      	mov	r1, fp
 801b7e2:	f7e4 ff29 	bl	8000638 <__aeabi_dmul>
 801b7e6:	4602      	mov	r2, r0
 801b7e8:	460b      	mov	r3, r1
 801b7ea:	ec43 2b18 	vmov	d8, r2, r3
 801b7ee:	f7e4 ff23 	bl	8000638 <__aeabi_dmul>
 801b7f2:	ec53 2b18 	vmov	r2, r3, d8
 801b7f6:	4604      	mov	r4, r0
 801b7f8:	460d      	mov	r5, r1
 801b7fa:	4650      	mov	r0, sl
 801b7fc:	4659      	mov	r1, fp
 801b7fe:	f7e4 ff1b 	bl	8000638 <__aeabi_dmul>
 801b802:	a371      	add	r3, pc, #452	; (adr r3, 801b9c8 <__kernel_tan+0x328>)
 801b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b808:	ec41 0b19 	vmov	d9, r0, r1
 801b80c:	4620      	mov	r0, r4
 801b80e:	4629      	mov	r1, r5
 801b810:	f7e4 ff12 	bl	8000638 <__aeabi_dmul>
 801b814:	a36e      	add	r3, pc, #440	; (adr r3, 801b9d0 <__kernel_tan+0x330>)
 801b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b81a:	f7e4 fd57 	bl	80002cc <__adddf3>
 801b81e:	4622      	mov	r2, r4
 801b820:	462b      	mov	r3, r5
 801b822:	f7e4 ff09 	bl	8000638 <__aeabi_dmul>
 801b826:	a36c      	add	r3, pc, #432	; (adr r3, 801b9d8 <__kernel_tan+0x338>)
 801b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b82c:	f7e4 fd4e 	bl	80002cc <__adddf3>
 801b830:	4622      	mov	r2, r4
 801b832:	462b      	mov	r3, r5
 801b834:	f7e4 ff00 	bl	8000638 <__aeabi_dmul>
 801b838:	a369      	add	r3, pc, #420	; (adr r3, 801b9e0 <__kernel_tan+0x340>)
 801b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b83e:	f7e4 fd45 	bl	80002cc <__adddf3>
 801b842:	4622      	mov	r2, r4
 801b844:	462b      	mov	r3, r5
 801b846:	f7e4 fef7 	bl	8000638 <__aeabi_dmul>
 801b84a:	a367      	add	r3, pc, #412	; (adr r3, 801b9e8 <__kernel_tan+0x348>)
 801b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b850:	f7e4 fd3c 	bl	80002cc <__adddf3>
 801b854:	4622      	mov	r2, r4
 801b856:	462b      	mov	r3, r5
 801b858:	f7e4 feee 	bl	8000638 <__aeabi_dmul>
 801b85c:	a364      	add	r3, pc, #400	; (adr r3, 801b9f0 <__kernel_tan+0x350>)
 801b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b862:	f7e4 fd33 	bl	80002cc <__adddf3>
 801b866:	ec53 2b18 	vmov	r2, r3, d8
 801b86a:	f7e4 fee5 	bl	8000638 <__aeabi_dmul>
 801b86e:	a362      	add	r3, pc, #392	; (adr r3, 801b9f8 <__kernel_tan+0x358>)
 801b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b874:	ec41 0b1a 	vmov	d10, r0, r1
 801b878:	4620      	mov	r0, r4
 801b87a:	4629      	mov	r1, r5
 801b87c:	f7e4 fedc 	bl	8000638 <__aeabi_dmul>
 801b880:	a35f      	add	r3, pc, #380	; (adr r3, 801ba00 <__kernel_tan+0x360>)
 801b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b886:	f7e4 fd21 	bl	80002cc <__adddf3>
 801b88a:	4622      	mov	r2, r4
 801b88c:	462b      	mov	r3, r5
 801b88e:	f7e4 fed3 	bl	8000638 <__aeabi_dmul>
 801b892:	a35d      	add	r3, pc, #372	; (adr r3, 801ba08 <__kernel_tan+0x368>)
 801b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b898:	f7e4 fd18 	bl	80002cc <__adddf3>
 801b89c:	4622      	mov	r2, r4
 801b89e:	462b      	mov	r3, r5
 801b8a0:	f7e4 feca 	bl	8000638 <__aeabi_dmul>
 801b8a4:	a35a      	add	r3, pc, #360	; (adr r3, 801ba10 <__kernel_tan+0x370>)
 801b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8aa:	f7e4 fd0f 	bl	80002cc <__adddf3>
 801b8ae:	4622      	mov	r2, r4
 801b8b0:	462b      	mov	r3, r5
 801b8b2:	f7e4 fec1 	bl	8000638 <__aeabi_dmul>
 801b8b6:	a358      	add	r3, pc, #352	; (adr r3, 801ba18 <__kernel_tan+0x378>)
 801b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8bc:	f7e4 fd06 	bl	80002cc <__adddf3>
 801b8c0:	4622      	mov	r2, r4
 801b8c2:	462b      	mov	r3, r5
 801b8c4:	f7e4 feb8 	bl	8000638 <__aeabi_dmul>
 801b8c8:	a355      	add	r3, pc, #340	; (adr r3, 801ba20 <__kernel_tan+0x380>)
 801b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ce:	f7e4 fcfd 	bl	80002cc <__adddf3>
 801b8d2:	4602      	mov	r2, r0
 801b8d4:	460b      	mov	r3, r1
 801b8d6:	ec51 0b1a 	vmov	r0, r1, d10
 801b8da:	f7e4 fcf7 	bl	80002cc <__adddf3>
 801b8de:	ec53 2b19 	vmov	r2, r3, d9
 801b8e2:	f7e4 fea9 	bl	8000638 <__aeabi_dmul>
 801b8e6:	4642      	mov	r2, r8
 801b8e8:	464b      	mov	r3, r9
 801b8ea:	f7e4 fcef 	bl	80002cc <__adddf3>
 801b8ee:	ec53 2b18 	vmov	r2, r3, d8
 801b8f2:	f7e4 fea1 	bl	8000638 <__aeabi_dmul>
 801b8f6:	4642      	mov	r2, r8
 801b8f8:	464b      	mov	r3, r9
 801b8fa:	f7e4 fce7 	bl	80002cc <__adddf3>
 801b8fe:	a34a      	add	r3, pc, #296	; (adr r3, 801ba28 <__kernel_tan+0x388>)
 801b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b904:	4604      	mov	r4, r0
 801b906:	460d      	mov	r5, r1
 801b908:	ec51 0b19 	vmov	r0, r1, d9
 801b90c:	f7e4 fe94 	bl	8000638 <__aeabi_dmul>
 801b910:	4622      	mov	r2, r4
 801b912:	462b      	mov	r3, r5
 801b914:	f7e4 fcda 	bl	80002cc <__adddf3>
 801b918:	460b      	mov	r3, r1
 801b91a:	ec41 0b18 	vmov	d8, r0, r1
 801b91e:	4602      	mov	r2, r0
 801b920:	4659      	mov	r1, fp
 801b922:	4650      	mov	r0, sl
 801b924:	f7e4 fcd2 	bl	80002cc <__adddf3>
 801b928:	4b44      	ldr	r3, [pc, #272]	; (801ba3c <__kernel_tan+0x39c>)
 801b92a:	429f      	cmp	r7, r3
 801b92c:	4604      	mov	r4, r0
 801b92e:	460d      	mov	r5, r1
 801b930:	f340 8086 	ble.w	801ba40 <__kernel_tan+0x3a0>
 801b934:	4630      	mov	r0, r6
 801b936:	f7e4 fe15 	bl	8000564 <__aeabi_i2d>
 801b93a:	4622      	mov	r2, r4
 801b93c:	4680      	mov	r8, r0
 801b93e:	4689      	mov	r9, r1
 801b940:	462b      	mov	r3, r5
 801b942:	4620      	mov	r0, r4
 801b944:	4629      	mov	r1, r5
 801b946:	f7e4 fe77 	bl	8000638 <__aeabi_dmul>
 801b94a:	4642      	mov	r2, r8
 801b94c:	4606      	mov	r6, r0
 801b94e:	460f      	mov	r7, r1
 801b950:	464b      	mov	r3, r9
 801b952:	4620      	mov	r0, r4
 801b954:	4629      	mov	r1, r5
 801b956:	f7e4 fcb9 	bl	80002cc <__adddf3>
 801b95a:	4602      	mov	r2, r0
 801b95c:	460b      	mov	r3, r1
 801b95e:	4630      	mov	r0, r6
 801b960:	4639      	mov	r1, r7
 801b962:	f7e4 ff93 	bl	800088c <__aeabi_ddiv>
 801b966:	ec53 2b18 	vmov	r2, r3, d8
 801b96a:	f7e4 fcad 	bl	80002c8 <__aeabi_dsub>
 801b96e:	4602      	mov	r2, r0
 801b970:	460b      	mov	r3, r1
 801b972:	4650      	mov	r0, sl
 801b974:	4659      	mov	r1, fp
 801b976:	f7e4 fca7 	bl	80002c8 <__aeabi_dsub>
 801b97a:	4602      	mov	r2, r0
 801b97c:	460b      	mov	r3, r1
 801b97e:	f7e4 fca5 	bl	80002cc <__adddf3>
 801b982:	4602      	mov	r2, r0
 801b984:	460b      	mov	r3, r1
 801b986:	4640      	mov	r0, r8
 801b988:	4649      	mov	r1, r9
 801b98a:	f7e4 fc9d 	bl	80002c8 <__aeabi_dsub>
 801b98e:	9b00      	ldr	r3, [sp, #0]
 801b990:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801b994:	f00a 0a02 	and.w	sl, sl, #2
 801b998:	4604      	mov	r4, r0
 801b99a:	f1ca 0001 	rsb	r0, sl, #1
 801b99e:	460d      	mov	r5, r1
 801b9a0:	f7e4 fde0 	bl	8000564 <__aeabi_i2d>
 801b9a4:	4602      	mov	r2, r0
 801b9a6:	460b      	mov	r3, r1
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	4629      	mov	r1, r5
 801b9ac:	f7e4 fe44 	bl	8000638 <__aeabi_dmul>
 801b9b0:	e69f      	b.n	801b6f2 <__kernel_tan+0x52>
 801b9b2:	bf00      	nop
 801b9b4:	f3af 8000 	nop.w
 801b9b8:	54442d18 	.word	0x54442d18
 801b9bc:	3fe921fb 	.word	0x3fe921fb
 801b9c0:	33145c07 	.word	0x33145c07
 801b9c4:	3c81a626 	.word	0x3c81a626
 801b9c8:	74bf7ad4 	.word	0x74bf7ad4
 801b9cc:	3efb2a70 	.word	0x3efb2a70
 801b9d0:	32f0a7e9 	.word	0x32f0a7e9
 801b9d4:	3f12b80f 	.word	0x3f12b80f
 801b9d8:	1a8d1068 	.word	0x1a8d1068
 801b9dc:	3f3026f7 	.word	0x3f3026f7
 801b9e0:	fee08315 	.word	0xfee08315
 801b9e4:	3f57dbc8 	.word	0x3f57dbc8
 801b9e8:	e96e8493 	.word	0xe96e8493
 801b9ec:	3f8226e3 	.word	0x3f8226e3
 801b9f0:	1bb341fe 	.word	0x1bb341fe
 801b9f4:	3faba1ba 	.word	0x3faba1ba
 801b9f8:	db605373 	.word	0xdb605373
 801b9fc:	bef375cb 	.word	0xbef375cb
 801ba00:	a03792a6 	.word	0xa03792a6
 801ba04:	3f147e88 	.word	0x3f147e88
 801ba08:	f2f26501 	.word	0xf2f26501
 801ba0c:	3f4344d8 	.word	0x3f4344d8
 801ba10:	c9560328 	.word	0xc9560328
 801ba14:	3f6d6d22 	.word	0x3f6d6d22
 801ba18:	8406d637 	.word	0x8406d637
 801ba1c:	3f9664f4 	.word	0x3f9664f4
 801ba20:	1110fe7a 	.word	0x1110fe7a
 801ba24:	3fc11111 	.word	0x3fc11111
 801ba28:	55555563 	.word	0x55555563
 801ba2c:	3fd55555 	.word	0x3fd55555
 801ba30:	3e2fffff 	.word	0x3e2fffff
 801ba34:	3ff00000 	.word	0x3ff00000
 801ba38:	bff00000 	.word	0xbff00000
 801ba3c:	3fe59427 	.word	0x3fe59427
 801ba40:	2e01      	cmp	r6, #1
 801ba42:	d02f      	beq.n	801baa4 <__kernel_tan+0x404>
 801ba44:	460f      	mov	r7, r1
 801ba46:	4602      	mov	r2, r0
 801ba48:	460b      	mov	r3, r1
 801ba4a:	4689      	mov	r9, r1
 801ba4c:	2000      	movs	r0, #0
 801ba4e:	4917      	ldr	r1, [pc, #92]	; (801baac <__kernel_tan+0x40c>)
 801ba50:	f7e4 ff1c 	bl	800088c <__aeabi_ddiv>
 801ba54:	2600      	movs	r6, #0
 801ba56:	e9cd 0100 	strd	r0, r1, [sp]
 801ba5a:	4652      	mov	r2, sl
 801ba5c:	465b      	mov	r3, fp
 801ba5e:	4630      	mov	r0, r6
 801ba60:	4639      	mov	r1, r7
 801ba62:	f7e4 fc31 	bl	80002c8 <__aeabi_dsub>
 801ba66:	e9dd 4500 	ldrd	r4, r5, [sp]
 801ba6a:	4602      	mov	r2, r0
 801ba6c:	460b      	mov	r3, r1
 801ba6e:	ec51 0b18 	vmov	r0, r1, d8
 801ba72:	f7e4 fc29 	bl	80002c8 <__aeabi_dsub>
 801ba76:	4632      	mov	r2, r6
 801ba78:	462b      	mov	r3, r5
 801ba7a:	f7e4 fddd 	bl	8000638 <__aeabi_dmul>
 801ba7e:	46b0      	mov	r8, r6
 801ba80:	460f      	mov	r7, r1
 801ba82:	4642      	mov	r2, r8
 801ba84:	462b      	mov	r3, r5
 801ba86:	4634      	mov	r4, r6
 801ba88:	4649      	mov	r1, r9
 801ba8a:	4606      	mov	r6, r0
 801ba8c:	4640      	mov	r0, r8
 801ba8e:	f7e4 fdd3 	bl	8000638 <__aeabi_dmul>
 801ba92:	4b07      	ldr	r3, [pc, #28]	; (801bab0 <__kernel_tan+0x410>)
 801ba94:	2200      	movs	r2, #0
 801ba96:	f7e4 fc19 	bl	80002cc <__adddf3>
 801ba9a:	4602      	mov	r2, r0
 801ba9c:	460b      	mov	r3, r1
 801ba9e:	4630      	mov	r0, r6
 801baa0:	4639      	mov	r1, r7
 801baa2:	e665      	b.n	801b770 <__kernel_tan+0xd0>
 801baa4:	4682      	mov	sl, r0
 801baa6:	468b      	mov	fp, r1
 801baa8:	e625      	b.n	801b6f6 <__kernel_tan+0x56>
 801baaa:	bf00      	nop
 801baac:	bff00000 	.word	0xbff00000
 801bab0:	3ff00000 	.word	0x3ff00000

0801bab4 <with_errno>:
 801bab4:	b570      	push	{r4, r5, r6, lr}
 801bab6:	4604      	mov	r4, r0
 801bab8:	460d      	mov	r5, r1
 801baba:	4616      	mov	r6, r2
 801babc:	f7f8 f88e 	bl	8013bdc <__errno>
 801bac0:	4629      	mov	r1, r5
 801bac2:	6006      	str	r6, [r0, #0]
 801bac4:	4620      	mov	r0, r4
 801bac6:	bd70      	pop	{r4, r5, r6, pc}

0801bac8 <xflow>:
 801bac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801baca:	4614      	mov	r4, r2
 801bacc:	461d      	mov	r5, r3
 801bace:	b108      	cbz	r0, 801bad4 <xflow+0xc>
 801bad0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801bad4:	e9cd 2300 	strd	r2, r3, [sp]
 801bad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801badc:	4620      	mov	r0, r4
 801bade:	4629      	mov	r1, r5
 801bae0:	f7e4 fdaa 	bl	8000638 <__aeabi_dmul>
 801bae4:	2222      	movs	r2, #34	; 0x22
 801bae6:	b003      	add	sp, #12
 801bae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801baec:	f7ff bfe2 	b.w	801bab4 <with_errno>

0801baf0 <__math_uflow>:
 801baf0:	b508      	push	{r3, lr}
 801baf2:	2200      	movs	r2, #0
 801baf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801baf8:	f7ff ffe6 	bl	801bac8 <xflow>
 801bafc:	ec41 0b10 	vmov	d0, r0, r1
 801bb00:	bd08      	pop	{r3, pc}

0801bb02 <__math_oflow>:
 801bb02:	b508      	push	{r3, lr}
 801bb04:	2200      	movs	r2, #0
 801bb06:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801bb0a:	f7ff ffdd 	bl	801bac8 <xflow>
 801bb0e:	ec41 0b10 	vmov	d0, r0, r1
 801bb12:	bd08      	pop	{r3, pc}

0801bb14 <fabs>:
 801bb14:	ec51 0b10 	vmov	r0, r1, d0
 801bb18:	ee10 2a10 	vmov	r2, s0
 801bb1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bb20:	ec43 2b10 	vmov	d0, r2, r3
 801bb24:	4770      	bx	lr

0801bb26 <finite>:
 801bb26:	b082      	sub	sp, #8
 801bb28:	ed8d 0b00 	vstr	d0, [sp]
 801bb2c:	9801      	ldr	r0, [sp, #4]
 801bb2e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801bb32:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801bb36:	0fc0      	lsrs	r0, r0, #31
 801bb38:	b002      	add	sp, #8
 801bb3a:	4770      	bx	lr
 801bb3c:	0000      	movs	r0, r0
	...

0801bb40 <floor>:
 801bb40:	ec51 0b10 	vmov	r0, r1, d0
 801bb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801bb4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801bb50:	2e13      	cmp	r6, #19
 801bb52:	ee10 5a10 	vmov	r5, s0
 801bb56:	ee10 8a10 	vmov	r8, s0
 801bb5a:	460c      	mov	r4, r1
 801bb5c:	dc32      	bgt.n	801bbc4 <floor+0x84>
 801bb5e:	2e00      	cmp	r6, #0
 801bb60:	da14      	bge.n	801bb8c <floor+0x4c>
 801bb62:	a333      	add	r3, pc, #204	; (adr r3, 801bc30 <floor+0xf0>)
 801bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb68:	f7e4 fbb0 	bl	80002cc <__adddf3>
 801bb6c:	2200      	movs	r2, #0
 801bb6e:	2300      	movs	r3, #0
 801bb70:	f7e4 fff2 	bl	8000b58 <__aeabi_dcmpgt>
 801bb74:	b138      	cbz	r0, 801bb86 <floor+0x46>
 801bb76:	2c00      	cmp	r4, #0
 801bb78:	da57      	bge.n	801bc2a <floor+0xea>
 801bb7a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801bb7e:	431d      	orrs	r5, r3
 801bb80:	d001      	beq.n	801bb86 <floor+0x46>
 801bb82:	4c2d      	ldr	r4, [pc, #180]	; (801bc38 <floor+0xf8>)
 801bb84:	2500      	movs	r5, #0
 801bb86:	4621      	mov	r1, r4
 801bb88:	4628      	mov	r0, r5
 801bb8a:	e025      	b.n	801bbd8 <floor+0x98>
 801bb8c:	4f2b      	ldr	r7, [pc, #172]	; (801bc3c <floor+0xfc>)
 801bb8e:	4137      	asrs	r7, r6
 801bb90:	ea01 0307 	and.w	r3, r1, r7
 801bb94:	4303      	orrs	r3, r0
 801bb96:	d01f      	beq.n	801bbd8 <floor+0x98>
 801bb98:	a325      	add	r3, pc, #148	; (adr r3, 801bc30 <floor+0xf0>)
 801bb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb9e:	f7e4 fb95 	bl	80002cc <__adddf3>
 801bba2:	2200      	movs	r2, #0
 801bba4:	2300      	movs	r3, #0
 801bba6:	f7e4 ffd7 	bl	8000b58 <__aeabi_dcmpgt>
 801bbaa:	2800      	cmp	r0, #0
 801bbac:	d0eb      	beq.n	801bb86 <floor+0x46>
 801bbae:	2c00      	cmp	r4, #0
 801bbb0:	bfbe      	ittt	lt
 801bbb2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801bbb6:	fa43 f606 	asrlt.w	r6, r3, r6
 801bbba:	19a4      	addlt	r4, r4, r6
 801bbbc:	ea24 0407 	bic.w	r4, r4, r7
 801bbc0:	2500      	movs	r5, #0
 801bbc2:	e7e0      	b.n	801bb86 <floor+0x46>
 801bbc4:	2e33      	cmp	r6, #51	; 0x33
 801bbc6:	dd0b      	ble.n	801bbe0 <floor+0xa0>
 801bbc8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801bbcc:	d104      	bne.n	801bbd8 <floor+0x98>
 801bbce:	ee10 2a10 	vmov	r2, s0
 801bbd2:	460b      	mov	r3, r1
 801bbd4:	f7e4 fb7a 	bl	80002cc <__adddf3>
 801bbd8:	ec41 0b10 	vmov	d0, r0, r1
 801bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbe0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801bbe4:	f04f 33ff 	mov.w	r3, #4294967295
 801bbe8:	fa23 f707 	lsr.w	r7, r3, r7
 801bbec:	4207      	tst	r7, r0
 801bbee:	d0f3      	beq.n	801bbd8 <floor+0x98>
 801bbf0:	a30f      	add	r3, pc, #60	; (adr r3, 801bc30 <floor+0xf0>)
 801bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbf6:	f7e4 fb69 	bl	80002cc <__adddf3>
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	2300      	movs	r3, #0
 801bbfe:	f7e4 ffab 	bl	8000b58 <__aeabi_dcmpgt>
 801bc02:	2800      	cmp	r0, #0
 801bc04:	d0bf      	beq.n	801bb86 <floor+0x46>
 801bc06:	2c00      	cmp	r4, #0
 801bc08:	da02      	bge.n	801bc10 <floor+0xd0>
 801bc0a:	2e14      	cmp	r6, #20
 801bc0c:	d103      	bne.n	801bc16 <floor+0xd6>
 801bc0e:	3401      	adds	r4, #1
 801bc10:	ea25 0507 	bic.w	r5, r5, r7
 801bc14:	e7b7      	b.n	801bb86 <floor+0x46>
 801bc16:	2301      	movs	r3, #1
 801bc18:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801bc1c:	fa03 f606 	lsl.w	r6, r3, r6
 801bc20:	4435      	add	r5, r6
 801bc22:	4545      	cmp	r5, r8
 801bc24:	bf38      	it	cc
 801bc26:	18e4      	addcc	r4, r4, r3
 801bc28:	e7f2      	b.n	801bc10 <floor+0xd0>
 801bc2a:	2500      	movs	r5, #0
 801bc2c:	462c      	mov	r4, r5
 801bc2e:	e7aa      	b.n	801bb86 <floor+0x46>
 801bc30:	8800759c 	.word	0x8800759c
 801bc34:	7e37e43c 	.word	0x7e37e43c
 801bc38:	bff00000 	.word	0xbff00000
 801bc3c:	000fffff 	.word	0x000fffff

0801bc40 <scalbn>:
 801bc40:	b570      	push	{r4, r5, r6, lr}
 801bc42:	ec55 4b10 	vmov	r4, r5, d0
 801bc46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801bc4a:	4606      	mov	r6, r0
 801bc4c:	462b      	mov	r3, r5
 801bc4e:	b99a      	cbnz	r2, 801bc78 <scalbn+0x38>
 801bc50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bc54:	4323      	orrs	r3, r4
 801bc56:	d036      	beq.n	801bcc6 <scalbn+0x86>
 801bc58:	4b39      	ldr	r3, [pc, #228]	; (801bd40 <scalbn+0x100>)
 801bc5a:	4629      	mov	r1, r5
 801bc5c:	ee10 0a10 	vmov	r0, s0
 801bc60:	2200      	movs	r2, #0
 801bc62:	f7e4 fce9 	bl	8000638 <__aeabi_dmul>
 801bc66:	4b37      	ldr	r3, [pc, #220]	; (801bd44 <scalbn+0x104>)
 801bc68:	429e      	cmp	r6, r3
 801bc6a:	4604      	mov	r4, r0
 801bc6c:	460d      	mov	r5, r1
 801bc6e:	da10      	bge.n	801bc92 <scalbn+0x52>
 801bc70:	a32b      	add	r3, pc, #172	; (adr r3, 801bd20 <scalbn+0xe0>)
 801bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc76:	e03a      	b.n	801bcee <scalbn+0xae>
 801bc78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801bc7c:	428a      	cmp	r2, r1
 801bc7e:	d10c      	bne.n	801bc9a <scalbn+0x5a>
 801bc80:	ee10 2a10 	vmov	r2, s0
 801bc84:	4620      	mov	r0, r4
 801bc86:	4629      	mov	r1, r5
 801bc88:	f7e4 fb20 	bl	80002cc <__adddf3>
 801bc8c:	4604      	mov	r4, r0
 801bc8e:	460d      	mov	r5, r1
 801bc90:	e019      	b.n	801bcc6 <scalbn+0x86>
 801bc92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801bc96:	460b      	mov	r3, r1
 801bc98:	3a36      	subs	r2, #54	; 0x36
 801bc9a:	4432      	add	r2, r6
 801bc9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801bca0:	428a      	cmp	r2, r1
 801bca2:	dd08      	ble.n	801bcb6 <scalbn+0x76>
 801bca4:	2d00      	cmp	r5, #0
 801bca6:	a120      	add	r1, pc, #128	; (adr r1, 801bd28 <scalbn+0xe8>)
 801bca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bcac:	da1c      	bge.n	801bce8 <scalbn+0xa8>
 801bcae:	a120      	add	r1, pc, #128	; (adr r1, 801bd30 <scalbn+0xf0>)
 801bcb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bcb4:	e018      	b.n	801bce8 <scalbn+0xa8>
 801bcb6:	2a00      	cmp	r2, #0
 801bcb8:	dd08      	ble.n	801bccc <scalbn+0x8c>
 801bcba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bcbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bcc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801bcc6:	ec45 4b10 	vmov	d0, r4, r5
 801bcca:	bd70      	pop	{r4, r5, r6, pc}
 801bccc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801bcd0:	da19      	bge.n	801bd06 <scalbn+0xc6>
 801bcd2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801bcd6:	429e      	cmp	r6, r3
 801bcd8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801bcdc:	dd0a      	ble.n	801bcf4 <scalbn+0xb4>
 801bcde:	a112      	add	r1, pc, #72	; (adr r1, 801bd28 <scalbn+0xe8>)
 801bce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d1e2      	bne.n	801bcae <scalbn+0x6e>
 801bce8:	a30f      	add	r3, pc, #60	; (adr r3, 801bd28 <scalbn+0xe8>)
 801bcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcee:	f7e4 fca3 	bl	8000638 <__aeabi_dmul>
 801bcf2:	e7cb      	b.n	801bc8c <scalbn+0x4c>
 801bcf4:	a10a      	add	r1, pc, #40	; (adr r1, 801bd20 <scalbn+0xe0>)
 801bcf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d0b8      	beq.n	801bc70 <scalbn+0x30>
 801bcfe:	a10e      	add	r1, pc, #56	; (adr r1, 801bd38 <scalbn+0xf8>)
 801bd00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd04:	e7b4      	b.n	801bc70 <scalbn+0x30>
 801bd06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bd0a:	3236      	adds	r2, #54	; 0x36
 801bd0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bd10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801bd14:	4620      	mov	r0, r4
 801bd16:	4b0c      	ldr	r3, [pc, #48]	; (801bd48 <scalbn+0x108>)
 801bd18:	2200      	movs	r2, #0
 801bd1a:	e7e8      	b.n	801bcee <scalbn+0xae>
 801bd1c:	f3af 8000 	nop.w
 801bd20:	c2f8f359 	.word	0xc2f8f359
 801bd24:	01a56e1f 	.word	0x01a56e1f
 801bd28:	8800759c 	.word	0x8800759c
 801bd2c:	7e37e43c 	.word	0x7e37e43c
 801bd30:	8800759c 	.word	0x8800759c
 801bd34:	fe37e43c 	.word	0xfe37e43c
 801bd38:	c2f8f359 	.word	0xc2f8f359
 801bd3c:	81a56e1f 	.word	0x81a56e1f
 801bd40:	43500000 	.word	0x43500000
 801bd44:	ffff3cb0 	.word	0xffff3cb0
 801bd48:	3c900000 	.word	0x3c900000

0801bd4c <_init>:
 801bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd4e:	bf00      	nop
 801bd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd52:	bc08      	pop	{r3}
 801bd54:	469e      	mov	lr, r3
 801bd56:	4770      	bx	lr

0801bd58 <_fini>:
 801bd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd5a:	bf00      	nop
 801bd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd5e:	bc08      	pop	{r3}
 801bd60:	469e      	mov	lr, r3
 801bd62:	4770      	bx	lr
