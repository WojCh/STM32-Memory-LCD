
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00028250  08014c48  08014c48  00024c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803ce98  0803ce98  000504f8  2**0
                  CONTENTS
  4 .ARM          00000008  0803ce98  0803ce98  0004ce98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803cea0  0803cea0  000504f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803cea0  0803cea0  0004cea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803cea4  0803cea4  0004cea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f8  20000000  0803cea8  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000504f8  2**0
                  CONTENTS
 10 .bss          00003734  200004f8  200004f8  000504f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20003c2c  20003c2c  000504f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000504f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a3c  00000000  00000000  00050528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b51  00000000  00000000  00071f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  00077ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001750  00000000  00000000  00079460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ad54  00000000  00000000  0007abb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027217  00000000  00000000  000a5904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6f86  00000000  00000000  000ccb1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b3aa1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008708  00000000  00000000  001b3af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001bc1fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001bc2c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200004f8 	.word	0x200004f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014c2c 	.word	0x08014c2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200004fc 	.word	0x200004fc
 80001ec:	08014c2c 	.word	0x08014c2c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c90:	f000 b974 	b.w	8000f7c <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9d08      	ldr	r5, [sp, #32]
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	468e      	mov	lr, r1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d14d      	bne.n	8000d56 <__udivmoddi4+0xaa>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	d969      	bls.n	8000d94 <__udivmoddi4+0xe8>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b152      	cbz	r2, 8000cdc <__udivmoddi4+0x30>
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	f1c2 0120 	rsb	r1, r2, #32
 8000cce:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cda:	4094      	lsls	r4, r2
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	0c21      	lsrs	r1, r4, #16
 8000ce2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce6:	fa1f f78c 	uxth.w	r7, ip
 8000cea:	fb08 e316 	mls	r3, r8, r6, lr
 8000cee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cf2:	fb06 f107 	mul.w	r1, r6, r7
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d02:	f080 811f 	bcs.w	8000f44 <__udivmoddi4+0x298>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 811c 	bls.w	8000f44 <__udivmoddi4+0x298>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d18:	fb08 3310 	mls	r3, r8, r0, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb00 f707 	mul.w	r7, r0, r7
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	d90a      	bls.n	8000d3e <__udivmoddi4+0x92>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d30:	f080 810a 	bcs.w	8000f48 <__udivmoddi4+0x29c>
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	f240 8107 	bls.w	8000f48 <__udivmoddi4+0x29c>
 8000d3a:	4464      	add	r4, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	1be4      	subs	r4, r4, r7
 8000d44:	2600      	movs	r6, #0
 8000d46:	b11d      	cbz	r5, 8000d50 <__udivmoddi4+0xa4>
 8000d48:	40d4      	lsrs	r4, r2
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0xc2>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80ef 	beq.w	8000f3e <__udivmoddi4+0x292>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x160>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xd4>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80f9 	bhi.w	8000f72 <__udivmoddi4+0x2c6>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0303 	sbc.w	r3, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	469e      	mov	lr, r3
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e0      	beq.n	8000d50 <__udivmoddi4+0xa4>
 8000d8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d92:	e7dd      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000d94:	b902      	cbnz	r2, 8000d98 <__udivmoddi4+0xec>
 8000d96:	deff      	udf	#255	; 0xff
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	f040 8092 	bne.w	8000ec6 <__udivmoddi4+0x21a>
 8000da2:	eba1 010c 	sub.w	r1, r1, ip
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f fe8c 	uxth.w	lr, ip
 8000dae:	2601      	movs	r6, #1
 8000db0:	0c20      	lsrs	r0, r4, #16
 8000db2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbe:	fb0e f003 	mul.w	r0, lr, r3
 8000dc2:	4288      	cmp	r0, r1
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x12c>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x12a>
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	f200 80cb 	bhi.w	8000f6c <__udivmoddi4+0x2c0>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	1a09      	subs	r1, r1, r0
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de0:	fb07 1110 	mls	r1, r7, r0, r1
 8000de4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x156>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x154>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f200 80bb 	bhi.w	8000f76 <__udivmoddi4+0x2ca>
 8000e00:	4608      	mov	r0, r1
 8000e02:	eba4 040e 	sub.w	r4, r4, lr
 8000e06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0a:	e79c      	b.n	8000d46 <__udivmoddi4+0x9a>
 8000e0c:	f1c6 0720 	rsb	r7, r6, #32
 8000e10:	40b3      	lsls	r3, r6
 8000e12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	40f9      	lsrs	r1, r7
 8000e26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e32:	0c20      	lsrs	r0, r4, #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fb09 1118 	mls	r1, r9, r8, r1
 8000e3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e40:	fb08 f00e 	mul.w	r0, r8, lr
 8000e44:	4288      	cmp	r0, r1
 8000e46:	fa02 f206 	lsl.w	r2, r2, r6
 8000e4a:	d90b      	bls.n	8000e64 <__udivmoddi4+0x1b8>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e54:	f080 8088 	bcs.w	8000f68 <__udivmoddi4+0x2bc>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f240 8085 	bls.w	8000f68 <__udivmoddi4+0x2bc>
 8000e5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	458e      	cmp	lr, r1
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x1e2>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e84:	d26c      	bcs.n	8000f60 <__udivmoddi4+0x2b4>
 8000e86:	458e      	cmp	lr, r1
 8000e88:	d96a      	bls.n	8000f60 <__udivmoddi4+0x2b4>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4461      	add	r1, ip
 8000e8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e92:	fba0 9402 	umull	r9, r4, r0, r2
 8000e96:	eba1 010e 	sub.w	r1, r1, lr
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	46c8      	mov	r8, r9
 8000e9e:	46a6      	mov	lr, r4
 8000ea0:	d356      	bcc.n	8000f50 <__udivmoddi4+0x2a4>
 8000ea2:	d053      	beq.n	8000f4c <__udivmoddi4+0x2a0>
 8000ea4:	b15d      	cbz	r5, 8000ebe <__udivmoddi4+0x212>
 8000ea6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000eae:	fa01 f707 	lsl.w	r7, r1, r7
 8000eb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb6:	40f1      	lsrs	r1, r6
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	e9c5 7100 	strd	r7, r1, [r5]
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	f1c2 0320 	rsb	r3, r2, #32
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee8:	0c0b      	lsrs	r3, r1, #16
 8000eea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eee:	fb00 f60e 	mul.w	r6, r0, lr
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x260>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f02:	d22f      	bcs.n	8000f64 <__udivmoddi4+0x2b8>
 8000f04:	429e      	cmp	r6, r3
 8000f06:	d92d      	bls.n	8000f64 <__udivmoddi4+0x2b8>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	1b9b      	subs	r3, r3, r6
 8000f0e:	b289      	uxth	r1, r1
 8000f10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f14:	fb07 3316 	mls	r3, r7, r6, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x28a>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f2c:	d216      	bcs.n	8000f5c <__udivmoddi4+0x2b0>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d914      	bls.n	8000f5c <__udivmoddi4+0x2b0>
 8000f32:	3e02      	subs	r6, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f3c:	e738      	b.n	8000db0 <__udivmoddi4+0x104>
 8000f3e:	462e      	mov	r6, r5
 8000f40:	4628      	mov	r0, r5
 8000f42:	e705      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000f44:	4606      	mov	r6, r0
 8000f46:	e6e3      	b.n	8000d10 <__udivmoddi4+0x64>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6f8      	b.n	8000d3e <__udivmoddi4+0x92>
 8000f4c:	454b      	cmp	r3, r9
 8000f4e:	d2a9      	bcs.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f50:	ebb9 0802 	subs.w	r8, r9, r2
 8000f54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f58:	3801      	subs	r0, #1
 8000f5a:	e7a3      	b.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f5c:	4646      	mov	r6, r8
 8000f5e:	e7ea      	b.n	8000f36 <__udivmoddi4+0x28a>
 8000f60:	4620      	mov	r0, r4
 8000f62:	e794      	b.n	8000e8e <__udivmoddi4+0x1e2>
 8000f64:	4640      	mov	r0, r8
 8000f66:	e7d1      	b.n	8000f0c <__udivmoddi4+0x260>
 8000f68:	46d0      	mov	r8, sl
 8000f6a:	e77b      	b.n	8000e64 <__udivmoddi4+0x1b8>
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	e732      	b.n	8000dd8 <__udivmoddi4+0x12c>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e709      	b.n	8000d8a <__udivmoddi4+0xde>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	e742      	b.n	8000e02 <__udivmoddi4+0x156>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8000f8e:	2332      	movs	r3, #50	; 0x32
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	22d0      	movs	r2, #208	; 0xd0
 8000f9e:	21ef      	movs	r1, #239	; 0xef
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <read_chip_id+0x3c>)
 8000fa2:	f007 fec3 	bl	8008d2c <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	2b55      	cmp	r3, #85	; 0x55
 8000faa:	d001      	beq.n	8000fb0 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000648 	.word	0x20000648

08000fc0 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8000fcc:	2300      	movs	r3, #0
 8000fce:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d81a      	bhi.n	800100c <set_oss+0x4c>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <set_oss+0x1c>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	08000ff5 	.word	0x08000ff5
 8000fe4:	08000ffd 	.word	0x08000ffd
 8000fe8:	08001005 	.word	0x08001005
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	705a      	strb	r2, [r3, #1]
			break;
 8000ff2:	e00f      	b.n	8001014 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	705a      	strb	r2, [r3, #1]
			break;
 8000ffa:	e00b      	b.n	8001014 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	220e      	movs	r2, #14
 8001000:	705a      	strb	r2, [r3, #1]
			break;
 8001002:	e007      	b.n	8001014 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	221a      	movs	r2, #26
 8001008:	705a      	strb	r2, [r3, #1]
			break;
 800100a:	e003      	b.n	8001014 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2208      	movs	r2, #8
 8001010:	705a      	strb	r2, [r3, #1]
			break;
 8001012:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	78fa      	ldrb	r2, [r7, #3]
 8001018:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	70fb      	strb	r3, [r7, #3]
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001024:	2332      	movs	r3, #50	; 0x32
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2302      	movs	r3, #2
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	22f4      	movs	r2, #244	; 0xf4
 8001036:	21ee      	movs	r1, #238	; 0xee
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <set_oss+0x88>)
 800103a:	f007 fd7d 	bl	8008b38 <HAL_I2C_Mem_Write>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000648 	.word	0x20000648

0800104c <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af04      	add	r7, sp, #16
 8001052:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800107a:	2332      	movs	r3, #50	; 0x32
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2316      	movs	r3, #22
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	22aa      	movs	r2, #170	; 0xaa
 800108c:	21ef      	movs	r1, #239	; 0xef
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <read_calib_data+0xe0>)
 8001090:	f007 fe4c 	bl	8008d2c <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800109a:	e03c      	b.n	8001116 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800109c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	3328      	adds	r3, #40	; 0x28
 80010a4:	443b      	add	r3, r7
 80010a6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b219      	sxth	r1, r3
 80010ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010b2:	3328      	adds	r3, #40	; 0x28
 80010b4:	443b      	add	r3, r7
 80010b6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	4403      	add	r3, r0
 80010c6:	430a      	orrs	r2, r1
 80010c8:	b212      	sxth	r2, r2
 80010ca:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80010cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	440b      	add	r3, r1
 80010ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 8001106:	2302      	movs	r3, #2
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800110c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001110:	3301      	adds	r3, #1
 8001112:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001116:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800111a:	2b0b      	cmp	r3, #11
 800111c:	d9be      	bls.n	800109c <read_calib_data+0x50>
		}
	}

	return ret_val;
 800111e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001122:	4618      	mov	r0, r3
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000648 	.word	0x20000648

08001130 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2204      	movs	r2, #4
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00c fa24 	bl	800d58c <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001144:	687c      	ldr	r4, [r7, #4]
 8001146:	f7ff ff1b 	bl	8000f80 <read_chip_id>
 800114a:	4603      	mov	r3, r0
 800114c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	687c      	ldr	r4, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff79 	bl	800104c <read_calib_data>
 800115a:	4603      	mov	r3, r0
 800115c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3340      	adds	r3, #64	; 0x40
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff2a 	bl	8000fc0 <set_oss>
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800117a:	232e      	movs	r3, #46	; 0x2e
 800117c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800117e:	2332      	movs	r3, #50	; 0x32
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	22f4      	movs	r2, #244	; 0xf4
 800118e:	21ee      	movs	r1, #238	; 0xee
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <get_ut+0x50>)
 8001192:	f007 fcd1 	bl	8008b38 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001196:	2005      	movs	r0, #5
 8001198:	f006 fc36 	bl	8007a08 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2302      	movs	r3, #2
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	22f6      	movs	r2, #246	; 0xf6
 80011ac:	21ef      	movs	r1, #239	; 0xef
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <get_ut+0x50>)
 80011b0:	f007 fdbc 	bl	8008d2c <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80011b4:	793b      	ldrb	r3, [r7, #4]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	797a      	ldrb	r2, [r7, #5]
 80011ba:	4313      	orrs	r3, r2
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000648 	.word	0x20000648

080011c8 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 2a90 	vmov	r2, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	895b      	ldrh	r3, [r3, #10]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	8912      	ldrh	r2, [r2, #8]
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	13db      	asrs	r3, r3, #15
 80011fc:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001204:	02da      	lsls	r2, r3, #11
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800120c:	4619      	mov	r1, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	440b      	add	r3, r1
 8001212:	fb92 f3f3 	sdiv	r3, r2, r3
 8001216:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	441a      	add	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	3308      	adds	r3, #8
 8001228:	111b      	asrs	r3, r3, #4
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001280 <get_temp+0xb8>
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800123e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001242:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001284 <get_temp+0xbc>
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	d908      	bls.n	8001262 <get_temp+0x9a>
 8001250:	edd7 7a03 	vldr	s15, [r7, #12]
 8001254:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001288 <get_temp+0xc0>
 8001258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	db03      	blt.n	800126a <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	ee07 3a90 	vmov	s15, r3
}
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	3dcccccd 	.word	0x3dcccccd
 8001284:	c2200000 	.word	0xc2200000
 8001288:	42aa0000 	.word	0x42aa0000

0800128c <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <get_up+0x7c>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	813b      	strh	r3, [r7, #8]
 800129a:	2300      	movs	r3, #0
 800129c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 80012a2:	2334      	movs	r3, #52	; 0x34
 80012a4:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80012a6:	2332      	movs	r3, #50	; 0x32
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	22f4      	movs	r2, #244	; 0xf4
 80012b8:	21ee      	movs	r1, #238	; 0xee
 80012ba:	4814      	ldr	r0, [pc, #80]	; (800130c <get_up+0x80>)
 80012bc:	f007 fc3c 	bl	8008b38 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f006 fba0 	bl	8007a08 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80012c8:	2332      	movs	r3, #50	; 0x32
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2303      	movs	r3, #3
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	22f6      	movs	r2, #246	; 0xf6
 80012da:	21ef      	movs	r1, #239	; 0xef
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <get_up+0x80>)
 80012de:	f007 fd25 	bl	8008d2c <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80012e2:	7a3b      	ldrb	r3, [r7, #8]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4413      	add	r3, r2
 80012ec:	7aba      	ldrb	r2, [r7, #10]
 80012ee:	441a      	add	r2, r3
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	f1c3 0308 	rsb	r3, r3, #8
 80012f6:	fa42 f303 	asr.w	r3, r2, r3
 80012fa:	60fb      	str	r3, [r7, #12]
	return up;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	08014c48 	.word	0x08014c48
 800130c:	20000648 	.word	0x20000648

08001310 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001310:	b084      	sub	sp, #16
 8001312:	b480      	push	{r7}
 8001314:	b089      	sub	sp, #36	; 0x24
 8001316:	af00      	add	r7, sp, #0
 8001318:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800131c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800132e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001330:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001334:	461a      	mov	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fb03 f303 	mul.w	r3, r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	da01      	bge.n	8001344 <get_pressure+0x34>
 8001340:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001344:	131b      	asrs	r3, r3, #12
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	da01      	bge.n	8001352 <get_pressure+0x42>
 800134e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001352:	12db      	asrs	r3, r3, #11
 8001354:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001356:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800135a:	461a      	mov	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	da01      	bge.n	800136a <get_pressure+0x5a>
 8001366:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800136a:	12db      	asrs	r3, r3, #11
 800136c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001376:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800137a:	009a      	lsls	r2, r3, #2
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4413      	add	r3, r2
 8001380:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001384:	4093      	lsls	r3, r2
 8001386:	3302      	adds	r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	da00      	bge.n	800138e <get_pressure+0x7e>
 800138c:	3303      	adds	r3, #3
 800138e:	109b      	asrs	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001392:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001396:	461a      	mov	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da02      	bge.n	80013a8 <get_pressure+0x98>
 80013a2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80013a6:	331f      	adds	r3, #31
 80013a8:	135b      	asrs	r3, r3, #13
 80013aa:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80013ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80013b0:	461a      	mov	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fb03 f303 	mul.w	r3, r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da01      	bge.n	80013c0 <get_pressure+0xb0>
 80013bc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013c0:	131b      	asrs	r3, r3, #12
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da02      	bge.n	80013d0 <get_pressure+0xc0>
 80013ca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80013ce:	33ff      	adds	r3, #255	; 0xff
 80013d0:	141b      	asrs	r3, r3, #16
 80013d2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	3302      	adds	r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da00      	bge.n	80013e2 <get_pressure+0xd2>
 80013e0:	3303      	adds	r3, #3
 80013e2:	109b      	asrs	r3, r3, #2
 80013e4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80013e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	0bdb      	lsrs	r3, r3, #15
 80013f6:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80013f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001404:	4611      	mov	r1, r2
 8001406:	f24c 3250 	movw	r2, #50000	; 0xc350
 800140a:	410a      	asrs	r2, r1
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db06      	blt.n	8001426 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	005a      	lsls	r2, r3, #1
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	e005      	b.n	8001432 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b00      	cmp	r3, #0
 8001436:	da00      	bge.n	800143a <get_pressure+0x12a>
 8001438:	33ff      	adds	r3, #255	; 0xff
 800143a:	121b      	asrs	r3, r3, #8
 800143c:	461a      	mov	r2, r3
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2b00      	cmp	r3, #0
 8001442:	da00      	bge.n	8001446 <get_pressure+0x136>
 8001444:	33ff      	adds	r3, #255	; 0xff
 8001446:	121b      	asrs	r3, r3, #8
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f640 32de 	movw	r2, #3038	; 0xbde
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	da02      	bge.n	8001462 <get_pressure+0x152>
 800145c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001460:	33ff      	adds	r3, #255	; 0xff
 8001462:	141b      	asrs	r3, r3, #16
 8001464:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <get_pressure+0x198>)
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	da02      	bge.n	8001478 <get_pressure+0x168>
 8001472:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001476:	33ff      	adds	r3, #255	; 0xff
 8001478:	141b      	asrs	r3, r3, #16
 800147a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001486:	2b00      	cmp	r3, #0
 8001488:	da00      	bge.n	800148c <get_pressure+0x17c>
 800148a:	330f      	adds	r3, #15
 800148c:	111b      	asrs	r3, r3, #4
 800148e:	461a      	mov	r2, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]

	return p;
 8001496:	69fb      	ldr	r3, [r7, #28]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	b004      	add	sp, #16
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	ffffe343 	.word	0xffffe343
 80014ac:	00000000 	.word	0x00000000

080014b0 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <get_altitude+0xb8>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014d4:	ee16 0a90 	vmov	r0, s13
 80014d8:	f7ff f850 	bl	800057c <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001558 <get_altitude+0xa8>
 80014e4:	ec43 2b10 	vmov	d0, r2, r3
 80014e8:	f011 f82e 	bl	8012548 <pow>
 80014ec:	ec53 2b10 	vmov	r2, r3, d0
 80014f0:	f04f 0000 	mov.w	r0, #0
 80014f4:	491d      	ldr	r1, [pc, #116]	; (800156c <get_altitude+0xbc>)
 80014f6:	f7fe fee1 	bl	80002bc <__aeabi_dsub>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a317      	add	r3, pc, #92	; (adr r3, 8001560 <get_altitude+0xb0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f890 	bl	800062c <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb62 	bl	8000bdc <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 800151c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001520:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001570 <get_altitude+0xc0>
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d908      	bls.n	8001540 <get_altitude+0x90>
 800152e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001532:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001574 <get_altitude+0xc4>
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	db03      	blt.n	8001548 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2205      	movs	r2, #5
 8001544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	ee07 3a90 	vmov	s15, r3
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	ccd9456c 	.word	0xccd9456c
 800155c:	3fc85b95 	.word	0x3fc85b95
 8001560:	00000000 	.word	0x00000000
 8001564:	40e5a540 	.word	0x40e5a540
 8001568:	20000000 	.word	0x20000000
 800156c:	3ff00000 	.word	0x3ff00000
 8001570:	c3fa0000 	.word	0xc3fa0000
 8001574:	460ca000 	.word	0x460ca000

08001578 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_i2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <get_slp+0x80>)
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80015fc <get_slp+0x84>
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	ee17 0a90 	vmov	r0, s15
 80015ae:	f7fe ffe5 	bl	800057c <__aeabi_f2d>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80015f0 <get_slp+0x78>
 80015ba:	ec43 2b10 	vmov	d0, r2, r3
 80015be:	f010 ffc3 	bl	8012548 <pow>
 80015c2:	ec53 2b10 	vmov	r2, r3, d0
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7ff f959 	bl	8000880 <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fb01 	bl	8000bdc <__aeabi_d2f>
 80015da:	4603      	mov	r3, r0
 80015dc:	60fb      	str	r3, [r7, #12]

	return slp;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	ee07 3a90 	vmov	s15, r3
}
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdb0      	pop	{r4, r5, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	b851eb85 	.word	0xb851eb85
 80015f4:	4015051e 	.word	0x4015051e
 80015f8:	20000004 	.word	0x20000004
 80015fc:	472d2a00 	.word	0x472d2a00

08001600 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b095      	sub	sp, #84	; 0x54
 8001604:	af0e      	add	r7, sp, #56	; 0x38
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 800160a:	f7ff fdb3 	bl	8001174 <get_ut>
 800160e:	ee07 0a90 	vmov	s15, r0
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f7ff fdd3 	bl	80011c8 <get_temp>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001630:	f7ff fe2c 	bl	800128c <get_up>
 8001634:	4602      	mov	r2, r0
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 800163a:	683e      	ldr	r6, [r7, #0]
 800163c:	466d      	mov	r5, sp
 800163e:	f106 0410 	add.w	r4, r6, #16
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001656:	f7ff fe5b 	bl	8001310 <get_pressure>
 800165a:	4602      	mov	r2, r0
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f7ff ff89 	bl	8001578 <get_slp>
 8001666:	eef0 7a40 	vmov.f32	s15, s0
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f7ff ff1d 	bl	80014b0 <get_altitude>
 8001676:	eef0 7a40 	vmov.f32	s15, s0
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	617b      	str	r3, [r7, #20]
	return result;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	461c      	mov	r4, r3
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016b0 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80016bc:	e083      	b.n	80017c6 <initButtons+0x116>
		btns[i]->pin = pins[i];
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	440b      	add	r3, r1
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4944      	ldr	r1, [pc, #272]	; (80017dc <initButtons+0x12c>)
 80016cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80016d0:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	440b      	add	r3, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4940      	ldr	r1, [pc, #256]	; (80017e0 <initButtons+0x130>)
 80016e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016e4:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	7993      	ldrb	r3, [r2, #6]
 80016f2:	f36f 0300 	bfc	r3, #0, #1
 80016f6:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	7993      	ldrb	r3, [r2, #6]
 8001704:	f36f 0341 	bfc	r3, #1, #1
 8001708:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	3301      	adds	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	f67f af78 	bls.w	80016be <initButtons+0xe>
	}
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000020 	.word	0x20000020
 80017e0:	20000008 	.word	0x20000008

080017e4 <resetButtonHandlers>:

void resetButtonHandlers(void){
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 80017ee:	e020      	b.n	8001832 <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <resetButtonHandlers+0x64>)
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <resetButtonHandlers+0x64>)
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <resetButtonHandlers+0x64>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <resetButtonHandlers+0x64>)
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <resetButtonHandlers+0x64>)
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
		i++;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d9db      	bls.n	80017f0 <resetButtonHandlers+0xc>
	}
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000002c 	.word	0x2000002c

0800184c <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	889b      	ldrh	r3, [r3, #4]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f006 ffb6 	bl	80087d0 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf0c      	ite	eq
 800186a:	2301      	moveq	r3, #1
 800186c:	2300      	movne	r3, #0
 800186e:	b2db      	uxtb	r3, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <scanButton>:

void scanButton(Button* btn){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	799b      	ldrb	r3, [r3, #6]
 8001884:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	b2d9      	uxtb	r1, r3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	7993      	ldrb	r3, [r2, #6]
 8001898:	f361 0300 	bfi	r3, r1, #0, #1
 800189c:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffd4 	bl	800184c <readButton>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	7993      	ldrb	r3, [r2, #6]
 80018b4:	f361 0341 	bfi	r3, r1, #1, #1
 80018b8:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 80018ba:	7bba      	ldrb	r2, [r7, #14]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d150      	bne.n	8001964 <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d146      	bne.n	8001956 <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7a9b      	ldrb	r3, [r3, #10]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2000      	movs	r0, #0
 80018e2:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7a9b      	ldrb	r3, [r3, #10]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <scanButton+0x15c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d32d      	bcc.n	800194e <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b5b      	ldrb	r3, [r3, #13]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d110      	bne.n	800191c <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2000      	movs	r0, #0
 8001908:	4798      	blx	r3
					}
					btn->longSingleOn++;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7a5b      	ldrb	r3, [r3, #9]
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7a9b      	ldrb	r3, [r3, #10]
 8001920:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <scanButton+0x15c>)
 8001922:	8852      	ldrh	r2, [r2, #2]
 8001924:	fb93 f1f2 	sdiv	r1, r3, r2
 8001928:	fb01 f202 	mul.w	r2, r1, r2
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2000      	movs	r0, #0
 8001940:	4798      	blx	r3
					}
					btn->longContinuous++;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7adb      	ldrb	r3, [r3, #11]
 8001946:	3301      	adds	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8001954:	e03a      	b.n	80019cc <scanButton+0x154>
			btn->shortSingleHandled = 0;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	735a      	strb	r2, [r3, #13]
}
 8001962:	e033      	b.n	80019cc <scanButton+0x154>
		if(currStatus == 1){
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d11b      	bne.n	80019a2 <scanButton+0x12a>
			btn->shortContinuous = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7b1b      	ldrb	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d126      	bne.n	80019cc <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2000      	movs	r0, #0
 800198c:	4798      	blx	r3
				btn->shortSingleOn++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	79db      	ldrb	r3, [r3, #7]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	731a      	strb	r2, [r3, #12]
}
 80019a0:	e014      	b.n	80019cc <scanButton+0x154>
			if(btn->releaseHandled == 0){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b9b      	ldrb	r3, [r3, #14]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d110      	bne.n	80019cc <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	2000      	movs	r0, #0
 80019b8:	4798      	blx	r3
				btn->shortSingleOff++;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7a1b      	ldrb	r3, [r3, #8]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	739a      	strb	r2, [r3, #14]
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000044 	.word	0x20000044

080019d8 <scanButtons>:

void scanButtons(Button* btns[6]){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019e4:	e00a      	b.n	80019fc <scanButtons+0x24>
		scanButton(btns[i]);
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff41 	bl	8001878 <scanButton>
		i++;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3301      	adds	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d9f1      	bls.n	80019e6 <scanButtons+0xe>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_DMA_Init+0x3c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <MX_DMA_Init+0x3c>)
 8001a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_DMA_Init+0x3c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2039      	movs	r0, #57	; 0x39
 8001a34:	f006 f8e7 	bl	8007c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a38:	2039      	movs	r0, #57	; 0x39
 8001a3a:	f006 f900 	bl	8007c3e <HAL_NVIC_EnableIRQ>

}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	; 0x30
 8001a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	4b60      	ldr	r3, [pc, #384]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a5f      	ldr	r2, [pc, #380]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b52      	ldr	r3, [pc, #328]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a51      	ldr	r2, [pc, #324]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a4a      	ldr	r2, [pc, #296]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b44      	ldr	r3, [pc, #272]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a43      	ldr	r2, [pc, #268]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a3c      	ldr	r2, [pc, #240]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a35      	ldr	r2, [pc, #212]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2140      	movs	r1, #64	; 0x40
 8001b2a:	4830      	ldr	r0, [pc, #192]	; (8001bec <MX_GPIO_Init+0x1a0>)
 8001b2c:	f006 fe68 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b36:	482e      	ldr	r0, [pc, #184]	; (8001bf0 <MX_GPIO_Init+0x1a4>)
 8001b38:	f006 fe62 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2140      	movs	r1, #64	; 0x40
 8001b40:	482c      	ldr	r0, [pc, #176]	; (8001bf4 <MX_GPIO_Init+0x1a8>)
 8001b42:	f006 fe5d 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001b46:	2340      	movs	r3, #64	; 0x40
 8001b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4823      	ldr	r0, [pc, #140]	; (8001bec <MX_GPIO_Init+0x1a0>)
 8001b5e:	f006 fc8b 	bl	8008478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b62:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	481d      	ldr	r0, [pc, #116]	; (8001bf0 <MX_GPIO_Init+0x1a4>)
 8001b7c:	f006 fc7c 	bl	8008478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8001b80:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b84:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b86:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4818      	ldr	r0, [pc, #96]	; (8001bf8 <MX_GPIO_Init+0x1ac>)
 8001b98:	f006 fc6e 	bl	8008478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b9c:	2340      	movs	r3, #64	; 0x40
 8001b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4810      	ldr	r0, [pc, #64]	; (8001bf4 <MX_GPIO_Init+0x1a8>)
 8001bb4:	f006 fc60 	bl	8008478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480a      	ldr	r0, [pc, #40]	; (8001bf4 <MX_GPIO_Init+0x1a8>)
 8001bcc:	f006 fc54 	bl	8008478 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2028      	movs	r0, #40	; 0x28
 8001bd6:	f006 f816 	bl	8007c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bda:	2028      	movs	r0, #40	; 0x28
 8001bdc:	f006 f82f 	bl	8007c3e <HAL_NVIC_EnableIRQ>

}
 8001be0:	bf00      	nop
 8001be2:	3730      	adds	r7, #48	; 0x30
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	40021800 	.word	0x40021800
 8001bf8:	40021000 	.word	0x40021000

08001bfc <getDataFromUart>:
//};

//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};
char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4803      	ldr	r0, [pc, #12]	; (8001c1c <getDataFromUart+0x20>)
 8001c10:	f00a fb49 	bl	800c2a6 <HAL_UART_Receive_DMA>

}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	2000399c 	.word	0x2000399c

08001c20 <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c30:	6018      	str	r0, [r3, #0]
 8001c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c36:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001c3a:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8001c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c40:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c48:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	3304      	adds	r3, #4
 8001c56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f00d fb97 	bl	800f390 <strncpy>
	gpsModule.getData = &getDataFromUart;
 8001c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c66:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c6a:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <initGps+0x90>)
 8001c6c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	gpsModule.isReady = 1;
 8001c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c74:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
	return(gpsModule);
 8001c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f00b fc69 	bl	800d570 <memcpy>
}
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	08001bfd 	.word	0x08001bfd

08001cb4 <hexCharToInt>:
	}


}

int hexCharToInt(char* value){
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	int msb = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8001cc6:	bf8c      	ite	hi
 8001cc8:	2301      	movhi	r3, #1
 8001cca:	2300      	movls	r3, #0
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b39      	cmp	r3, #57	; 0x39
 8001cd4:	bf94      	ite	ls
 8001cd6:	2301      	movls	r3, #1
 8001cd8:	2300      	movhi	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4013      	ands	r3, r2
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <hexCharToInt+0x3a>
		msb = *value - 48;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3b30      	subs	r3, #48	; 0x30
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e003      	b.n	8001cf6 <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	3b37      	subs	r3, #55	; 0x37
 8001cf4:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b2f      	cmp	r3, #47	; 0x2f
 8001d02:	bf8c      	ite	hi
 8001d04:	2301      	movhi	r3, #1
 8001d06:	2300      	movls	r3, #0
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b39      	cmp	r3, #57	; 0x39
 8001d12:	bf94      	ite	ls
 8001d14:	2301      	movls	r3, #1
 8001d16:	2300      	movhi	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3301      	adds	r3, #1
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	3b30      	subs	r3, #48	; 0x30
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	e004      	b.n	8001d38 <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3301      	adds	r3, #1
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	3b37      	subs	r3, #55	; 0x37
 8001d36:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
	return(result)
 8001d42:	68fb      	ldr	r3, [r7, #12]
;}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <strtoke>:
#include <string.h>

/* behaves like strtok() except that it returns empty tokens also
 */
char* strtoke(char *str, const char *delim)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <strtoke+0x1a>
 8001d64:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <strtoke+0x60>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <strtoke+0x60>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <strtoke+0x26>
 8001d72:	2300      	movs	r3, #0
 8001d74:	e017      	b.n	8001da6 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <strtoke+0x60>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <strtoke+0x60>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f00d fb17 	bl	800f3b6 <strpbrk>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <strtoke+0x60>)
 8001d8c:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <strtoke+0x60>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <strtoke+0x54>
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <strtoke+0x60>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	4904      	ldr	r1, [pc, #16]	; (8001db0 <strtoke+0x60>)
 8001d9e:	600a      	str	r2, [r1, #0]
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8001da4:	68fb      	ldr	r3, [r7, #12]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000640 	.word	0x20000640

08001db4 <validateChecksum>:

uint8_t validateChecksum(char* nmeaSentence){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	uint8_t chksum = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 8001dc4:	e009      	b.n	8001dda <validateChecksum+0x26>
		chksum ^= nmeaSentence[i];
 8001dc6:	7bbb      	ldrb	r3, [r7, #14]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	4053      	eors	r3, r2
 8001dd2:	73fb      	strb	r3, [r7, #15]
		i++;
 8001dd4:	7bbb      	ldrb	r3, [r7, #14]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 8001dda:	7bbb      	ldrb	r3, [r7, #14]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b2a      	cmp	r3, #42	; 0x2a
 8001de4:	bf14      	ite	ne
 8001de6:	2301      	movne	r3, #1
 8001de8:	2300      	moveq	r3, #0
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	7bbb      	ldrb	r3, [r7, #14]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	440b      	add	r3, r1
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4013      	ands	r3, r2
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1df      	bne.n	8001dc6 <validateChecksum+0x12>
	}
	return hexCharToInt(&nmeaSentence[i+1])==chksum;
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff50 	bl	8001cb4 <hexCharToInt>
 8001e14:	4602      	mov	r2, r0
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <getMessage>:


void getAllMessages(char* buffer){

}
uint8_t getMessage(char* destination, char* source, nmeaSentence_t type){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	4613      	mov	r3, r2
 8001e38:	71fb      	strb	r3, [r7, #7]
	char* start = strstr(source, gpsCmd[type]);
 8001e3a:	79fa      	ldrb	r2, [r7, #7]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <getMessage+0x68>)
 8001e46:	4413      	add	r3, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	68b8      	ldr	r0, [r7, #8]
 8001e4c:	f00d facd 	bl	800f3ea <strstr>
 8001e50:	6178      	str	r0, [r7, #20]
	if(start == NULL) return(0);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <getMessage+0x30>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e016      	b.n	8001e8a <getMessage+0x5e>
	if(strtok(start,"\n\r") == NULL) return(0);
 8001e5c:	490e      	ldr	r1, [pc, #56]	; (8001e98 <getMessage+0x6c>)
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f00d fada 	bl	800f418 <strtok>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <getMessage+0x42>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e00d      	b.n	8001e8a <getMessage+0x5e>
	if(validateChecksum(start)){
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ffa0 	bl	8001db4 <validateChecksum>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <getMessage+0x5c>
		return strcpy(destination,start);
 8001e7a:	6979      	ldr	r1, [r7, #20]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f00c fd44 	bl	800e90a <strcpy>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e000      	b.n	8001e8a <getMessage+0x5e>
	} else {
		return NULL;
 8001e88:	2300      	movs	r3, #0
	}
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	0801557c 	.word	0x0801557c
 8001e98:	08014c4c 	.word	0x08014c4c

08001e9c <tokenizeSentence>:
	char sentence[NMEA_MAX_SENTENCE_LENGTH];
	char* wordPtrs[20];
	uint8_t wordNum;
};
//function not tested
struct nmeaSentence tokenizeSentence(char* sentence){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0ae      	sub	sp, #184	; 0xb8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	struct nmeaSentence result;
	strcpy(result.sentence, sentence);
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	6839      	ldr	r1, [r7, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00c fd2c 	bl	800e90a <strcpy>
	result.wordNum = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
	char* prevPointer = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	for(char* parsePointer = strtoke(result.sentence, ","); parsePointer != NULL; parsePointer = strtoke(NULL, ",")){
 8001ebe:	f107 0308 	add.w	r3, r7, #8
 8001ec2:	4918      	ldr	r1, [pc, #96]	; (8001f24 <tokenizeSentence+0x88>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff43 	bl	8001d50 <strtoke>
 8001eca:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8001ece:	e019      	b.n	8001f04 <tokenizeSentence+0x68>
		result.wordPtrs[result.wordNum] = parsePointer;
 8001ed0:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001ed4:	3314      	adds	r3, #20
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	33b8      	adds	r3, #184	; 0xb8
 8001eda:	443b      	add	r3, r7
 8001edc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ee0:	f843 2cac 	str.w	r2, [r3, #-172]
		result.wordNum++;
 8001ee4:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001ee8:	3301      	adds	r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
		prevPointer = parsePointer;
 8001ef0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	for(char* parsePointer = strtoke(result.sentence, ","); parsePointer != NULL; parsePointer = strtoke(NULL, ",")){
 8001ef8:	490a      	ldr	r1, [pc, #40]	; (8001f24 <tokenizeSentence+0x88>)
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff ff28 	bl	8001d50 <strtoke>
 8001f00:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8001f04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e1      	bne.n	8001ed0 <tokenizeSentence+0x34>
	}
	return result;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	22a8      	movs	r2, #168	; 0xa8
 8001f16:	4619      	mov	r1, r3
 8001f18:	f00b fb2a 	bl	800d570 <memcpy>
}
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	37b8      	adds	r7, #184	; 0xb8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	08014c50 	.word	0x08014c50

08001f28 <getLocation>:



location_t getLocation(struct gpsDevice* dev){
 8001f28:	b5b0      	push	{r4, r5, r7, lr}
 8001f2a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8001f34:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8001f38:	6018      	str	r0, [r3, #0]
 8001f3a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8001f3e:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8001f42:	6019      	str	r1, [r3, #0]
//	copy buffer - prevent from mutating (when DMA updated)
	char tmpBuf[GPS_BUFFER_SIZE];
	strncpy(&tmpBuf, dev->buffer, GPS_BUFFER_SIZE);
 8001f44:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8001f48:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	1d19      	adds	r1, r3, #4
 8001f50:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8001f54:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00d fa19 	bl	800f390 <strncpy>

	location_t position;
	char sentence[NMEA_MAX_SENTENCE_LENGTH+1];
	// receive and validate message
	if(getMessage(&sentence, &tmpBuf, NMEA_GNGGA) == NULL){
 8001f5e:	f507 711b 	add.w	r1, r7, #620	; 0x26c
 8001f62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f66:	2200      	movs	r2, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5f 	bl	8001e2c <getMessage>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d120      	bne.n	8001fb6 <getLocation+0x8e>
		strcpy(&position.debug, "invalid sentence");
 8001f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f78:	4abb      	ldr	r2, [pc, #748]	; (8002268 <getLocation+0x340>)
 8001f7a:	461c      	mov	r4, r3
 8001f7c:	4615      	mov	r5, r2
 8001f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f82:	682b      	ldr	r3, [r5, #0]
 8001f84:	7023      	strb	r3, [r4, #0]
		position.isValid = 0;
 8001f86:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8001f8a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
		return position;
 8001f94:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8001f98:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8001fa2:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f00b fade 	bl	800d570 <memcpy>
 8001fb4:	e14e      	b.n	8002254 <getLocation+0x32c>
	}
	struct nmeaSentence snt = tokenizeSentence(sentence);
 8001fb6:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8001fba:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8001fbe:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff69 	bl	8001e9c <tokenizeSentence>
	//write to struct whole sentence
	strcpy(&position.debug, sentence);
 8001fca:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00c fc98 	bl	800e90a <strcpy>
	// tokenize
	// GNGGA
	char* parsePointer = strtoke(sentence, ",");
 8001fda:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fde:	49a3      	ldr	r1, [pc, #652]	; (800226c <getLocation+0x344>)
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff feb5 	bl	8001d50 <strtoke>
 8001fe6:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[0][0], parsePointer);
 8001fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fee:	3356      	adds	r3, #86	; 0x56
 8001ff0:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f00c fc88 	bl	800e90a <strcpy>
	// UTC Time
	parsePointer = strtoke(NULL, ",");
 8001ffa:	499c      	ldr	r1, [pc, #624]	; (800226c <getLocation+0x344>)
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7ff fea7 	bl	8001d50 <strtoke>
 8002002:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[1][0], parsePointer);
 8002006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800200a:	3365      	adds	r3, #101	; 0x65
 800200c:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8002010:	4618      	mov	r0, r3
 8002012:	f00c fc7a 	bl	800e90a <strcpy>
	uint32_t utcTime=atoi(parsePointer);
 8002016:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
 800201a:	f00b fa5f 	bl	800d4dc <atoi>
 800201e:	4603      	mov	r3, r0
 8002020:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	position.utc_hour = (utcTime/10000)%100;
 8002024:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002028:	4a91      	ldr	r2, [pc, #580]	; (8002270 <getLocation+0x348>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0b5a      	lsrs	r2, r3, #13
 8002030:	4b90      	ldr	r3, [pc, #576]	; (8002274 <getLocation+0x34c>)
 8002032:	fba3 1302 	umull	r1, r3, r3, r2
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2164      	movs	r1, #100	; 0x64
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	b2da      	uxtb	r2, r3
 8002042:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002046:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800204a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	position.utc_min = (utcTime/100)%100;
 800204e:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002052:	4a88      	ldr	r2, [pc, #544]	; (8002274 <getLocation+0x34c>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	095a      	lsrs	r2, r3, #5
 800205a:	4b86      	ldr	r3, [pc, #536]	; (8002274 <getLocation+0x34c>)
 800205c:	fba3 1302 	umull	r1, r3, r3, r2
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	2164      	movs	r1, #100	; 0x64
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	b2da      	uxtb	r2, r3
 800206c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002070:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002074:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	position.utc_sec = utcTime%100;
 8002078:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800207c:	4b7d      	ldr	r3, [pc, #500]	; (8002274 <getLocation+0x34c>)
 800207e:	fba3 1302 	umull	r1, r3, r3, r2
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2164      	movs	r1, #100	; 0x64
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	b2da      	uxtb	r2, r3
 800208e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002092:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002096:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	// DDMM.MMM Latitude
	parsePointer = strtoke(NULL, ",");
 800209a:	4974      	ldr	r1, [pc, #464]	; (800226c <getLocation+0x344>)
 800209c:	2000      	movs	r0, #0
 800209e:	f7ff fe57 	bl	8001d50 <strtoke>
 80020a2:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[2][0], parsePointer);
 80020a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020aa:	3374      	adds	r3, #116	; 0x74
 80020ac:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 80020b0:	4618      	mov	r0, r3
 80020b2:	f00c fc2a 	bl	800e90a <strcpy>

	position.n_s = *parsePointer;
 80020b6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80020ba:	781a      	ldrb	r2, [r3, #0]
 80020bc:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80020c0:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80020c4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	// Latitude N/S
	parsePointer = strtoke(NULL, ",");
 80020c8:	4968      	ldr	r1, [pc, #416]	; (800226c <getLocation+0x344>)
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7ff fe40 	bl	8001d50 <strtoke>
 80020d0:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[3][0], parsePointer);
 80020d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020d8:	3383      	adds	r3, #131	; 0x83
 80020da:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 80020de:	4618      	mov	r0, r3
 80020e0:	f00c fc13 	bl	800e90a <strcpy>
	// DDDMM.MMM Longitude
	parsePointer = strtoke(NULL, ",");
 80020e4:	4961      	ldr	r1, [pc, #388]	; (800226c <getLocation+0x344>)
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7ff fe32 	bl	8001d50 <strtoke>
 80020ec:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[4][0], parsePointer);
 80020f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020f4:	3392      	adds	r3, #146	; 0x92
 80020f6:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 80020fa:	4618      	mov	r0, r3
 80020fc:	f00c fc05 	bl	800e90a <strcpy>
	// Longitude W/E
	parsePointer = strtoke(NULL, ",");
 8002100:	495a      	ldr	r1, [pc, #360]	; (800226c <getLocation+0x344>)
 8002102:	2000      	movs	r0, #0
 8002104:	f7ff fe24 	bl	8001d50 <strtoke>
 8002108:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[5][0], parsePointer);
 800210c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002110:	33a1      	adds	r3, #161	; 0xa1
 8002112:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8002116:	4618      	mov	r0, r3
 8002118:	f00c fbf7 	bl	800e90a <strcpy>
	position.w_e = *parsePointer;
 800211c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002126:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800212a:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	// Fix type - 0-nofix, 1-GPS, 2-DGPS
	parsePointer = strtoke(NULL, ",");
 800212e:	494f      	ldr	r1, [pc, #316]	; (800226c <getLocation+0x344>)
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff fe0d 	bl	8001d50 <strtoke>
 8002136:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[6][0], parsePointer);
 800213a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800213e:	33b0      	adds	r3, #176	; 0xb0
 8002140:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8002144:	4618      	mov	r0, r3
 8002146:	f00c fbe0 	bl	800e90a <strcpy>
	if(*parsePointer=='0'){
 800214a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b30      	cmp	r3, #48	; 0x30
 8002152:	d107      	bne.n	8002164 <getLocation+0x23c>
		position.hasFix = 0;
 8002154:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002158:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800215c:	2200      	movs	r2, #0
 800215e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8002162:	e006      	b.n	8002172 <getLocation+0x24a>
	} else {
		position.hasFix = 1;
 8002164:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002168:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800216c:	2201      	movs	r2, #1
 800216e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	// Number of used satellites
	parsePointer = strtoke(NULL, ",");
 8002172:	493e      	ldr	r1, [pc, #248]	; (800226c <getLocation+0x344>)
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff fdeb 	bl	8001d50 <strtoke>
 800217a:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[7][0], parsePointer);
 800217e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002182:	33bf      	adds	r3, #191	; 0xbf
 8002184:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8002188:	4618      	mov	r0, r3
 800218a:	f00c fbbe 	bl	800e90a <strcpy>
	position.satNum = atoi(parsePointer);
 800218e:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
 8002192:	f00b f9a3 	bl	800d4dc <atoi>
 8002196:	4603      	mov	r3, r0
 8002198:	b2da      	uxtb	r2, r3
 800219a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800219e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80021a2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	// HDOP
	parsePointer = strtoke(NULL, ",");
 80021a6:	4931      	ldr	r1, [pc, #196]	; (800226c <getLocation+0x344>)
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7ff fdd1 	bl	8001d50 <strtoke>
 80021ae:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[8][0], parsePointer);
 80021b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021b6:	33ce      	adds	r3, #206	; 0xce
 80021b8:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 80021bc:	4618      	mov	r0, r3
 80021be:	f00c fba4 	bl	800e90a <strcpy>
	// Altitude above mean sea level
	parsePointer = strtoke(NULL, ",");
 80021c2:	492a      	ldr	r1, [pc, #168]	; (800226c <getLocation+0x344>)
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff fdc3 	bl	8001d50 <strtoke>
 80021ca:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[9][0], parsePointer);
 80021ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021d2:	33dd      	adds	r3, #221	; 0xdd
 80021d4:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 80021d8:	4618      	mov	r0, r3
 80021da:	f00c fb96 	bl	800e90a <strcpy>
	// Altitude units
	parsePointer = strtoke(NULL, ",");
 80021de:	4923      	ldr	r1, [pc, #140]	; (800226c <getLocation+0x344>)
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7ff fdb5 	bl	8001d50 <strtoke>
 80021e6:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[10][0], parsePointer);
 80021ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021ee:	33ec      	adds	r3, #236	; 0xec
 80021f0:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 80021f4:	4618      	mov	r0, r3
 80021f6:	f00c fb88 	bl	800e90a <strcpy>
	// Height of mean sea level above WGS-84 earth ellipsoid
	parsePointer = strtoke(NULL, ",");
 80021fa:	491c      	ldr	r1, [pc, #112]	; (800226c <getLocation+0x344>)
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff fda7 	bl	8001d50 <strtoke>
 8002202:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[11][0], parsePointer);
 8002206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800220a:	33fb      	adds	r3, #251	; 0xfb
 800220c:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8002210:	4618      	mov	r0, r3
 8002212:	f00c fb7a 	bl	800e90a <strcpy>
	// Units of the above geoid seperation (M for meters)
	parsePointer = strtoke(NULL, ",");
 8002216:	4915      	ldr	r1, [pc, #84]	; (800226c <getLocation+0x344>)
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff fd99 	bl	8001d50 <strtoke>
 800221e:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
	strcpy(&position.words[12][0], parsePointer);
 8002222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002226:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800222a:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 800222e:	4618      	mov	r0, r3
 8002230:	f00c fb6b 	bl	800e90a <strcpy>
//	strtoke()
//   get position information

//convert to format

	return position;
 8002234:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002238:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002242:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f44f 73b0 	mov.w	r3, #352	; 0x160
 800224e:	461a      	mov	r2, r3
 8002250:	f00b f98e 	bl	800d570 <memcpy>
}
 8002254:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002258:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	f507 678d 	add.w	r7, r7, #1128	; 0x468
 8002262:	46bd      	mov	sp, r7
 8002264:	bdb0      	pop	{r4, r5, r7, pc}
 8002266:	bf00      	nop
 8002268:	08014c54 	.word	0x08014c54
 800226c:	08014c50 	.word	0x08014c50
 8002270:	d1b71759 	.word	0xd1b71759
 8002274:	51eb851f 	.word	0x51eb851f

08002278 <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
	if(position>0){
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <prevPos+0x2c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <prevPos+0x1a>
		position--;
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <prevPos+0x2c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	3b01      	subs	r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <prevPos+0x2c>)
 800228e:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8002290:	e002      	b.n	8002298 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <prevPos+0x2c>)
 8002294:	2205      	movs	r2, #5
 8002296:	701a      	strb	r2, [r3, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000644 	.word	0x20000644

080022a8 <nextPos>:

void nextPos(void){
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <nextPos+0x2c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d806      	bhi.n	80022c2 <nextPos+0x1a>
		position++;
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <nextPos+0x2c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <nextPos+0x2c>)
 80022be:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 80022c0:	e002      	b.n	80022c8 <nextPos+0x20>
		position=0;
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <nextPos+0x2c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000644 	.word	0x20000644

080022d8 <nextScreen>:

void nextScreen(void){
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	nextPos();
 80022dc:	f7ff ffe4 	bl	80022a8 <nextPos>
	applySelectedScreen();
 80022e0:	f000 f82c 	bl	800233c <applySelectedScreen>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <prevScreen>:
void prevScreen(void){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	prevPos();
 80022ec:	f7ff ffc4 	bl	8002278 <prevPos>
	applySelectedScreen();
 80022f0:	f000 f824 	bl	800233c <applySelectedScreen>
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <resetPos>:
void resetPos(void){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	position=0;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <resetPos+0x14>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8002302:	f000 f81b 	bl	800233c <applySelectedScreen>
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000644 	.word	0x20000644

08002310 <guiApplyView>:

void guiApplyView(struct Module *module){
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <guiApplyView+0x24>)
 800231e:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <guiApplyView+0x28>)
 8002326:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002328:	f000 f830 	bl	800238c <selectScreen>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2000013c 	.word	0x2000013c
 8002338:	20000138 	.word	0x20000138

0800233c <applySelectedScreen>:

void applySelectedScreen(void){
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <applySelectedScreen+0x40>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <applySelectedScreen+0x44>)
 8002348:	460b      	mov	r3, r1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	3320      	adds	r3, #32
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <applySelectedScreen+0x48>)
 8002358:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <applySelectedScreen+0x40>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	4619      	mov	r1, r3
 8002360:	4a07      	ldr	r2, [pc, #28]	; (8002380 <applySelectedScreen+0x44>)
 8002362:	460b      	mov	r3, r1
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	3324      	adds	r3, #36	; 0x24
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a05      	ldr	r2, [pc, #20]	; (8002388 <applySelectedScreen+0x4c>)
 8002372:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002374:	f000 f80a 	bl	800238c <selectScreen>
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000644 	.word	0x20000644
 8002380:	20000048 	.word	0x20000048
 8002384:	2000013c 	.word	0x2000013c
 8002388:	20000138 	.word	0x20000138

0800238c <selectScreen>:

void selectScreen(void){
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8002390:	f7ff fa28 	bl	80017e4 <resetButtonHandlers>
	isModuleSet = 0;
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <selectScreen+0x1c>)
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <selectScreen+0x20>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <selectScreen+0x24>)
 80023a0:	6013      	str	r3, [r2, #0]
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000645 	.word	0x20000645
 80023ac:	20000138 	.word	0x20000138
 80023b0:	20000140 	.word	0x20000140

080023b4 <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <showGui+0x30>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <showGui+0x18>
		moduleSetupPtr();
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <showGui+0x34>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4798      	blx	r3
		isModuleSet = 1;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <showGui+0x30>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <showGui+0x38>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <showGui+0x26>
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <showGui+0x38>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4798      	blx	r3
	lcdRefresh();
 80023da:	f000 ff41 	bl	8003260 <lcdRefresh>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000645 	.word	0x20000645
 80023e8:	2000013c 	.word	0x2000013c
 80023ec:	20000140 	.word	0x20000140

080023f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <MX_I2C1_Init+0x74>)
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <MX_I2C1_Init+0x78>)
 80023f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <MX_I2C1_Init+0x74>)
 80023fc:	4a1b      	ldr	r2, [pc, #108]	; (800246c <MX_I2C1_Init+0x7c>)
 80023fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <MX_I2C1_Init+0x74>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <MX_I2C1_Init+0x74>)
 8002408:	2200      	movs	r2, #0
 800240a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <MX_I2C1_Init+0x74>)
 800240e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002412:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <MX_I2C1_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <MX_I2C1_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <MX_I2C1_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <MX_I2C1_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800242c:	480d      	ldr	r0, [pc, #52]	; (8002464 <MX_I2C1_Init+0x74>)
 800242e:	f006 fa3f 	bl	80088b0 <HAL_I2C_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002438:	f001 f960 	bl	80036fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800243c:	2100      	movs	r1, #0
 800243e:	4809      	ldr	r0, [pc, #36]	; (8002464 <MX_I2C1_Init+0x74>)
 8002440:	f007 f9f5 	bl	800982e <HAL_I2CEx_ConfigAnalogFilter>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800244a:	f001 f957 	bl	80036fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800244e:	2100      	movs	r1, #0
 8002450:	4804      	ldr	r0, [pc, #16]	; (8002464 <MX_I2C1_Init+0x74>)
 8002452:	f007 fa28 	bl	80098a6 <HAL_I2CEx_ConfigDigitalFilter>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800245c:	f001 f94e 	bl	80036fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000648 	.word	0x20000648
 8002468:	40005400 	.word	0x40005400
 800246c:	000186a0 	.word	0x000186a0

08002470 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_I2C_MspInit+0x84>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d12c      	bne.n	80024ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_I2C_MspInit+0x88>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <HAL_I2C_MspInit+0x88>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_I2C_MspInit+0x88>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b4:	2312      	movs	r3, #18
 80024b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024c0:	2304      	movs	r3, #4
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	480c      	ldr	r0, [pc, #48]	; (80024fc <HAL_I2C_MspInit+0x8c>)
 80024cc:	f005 ffd4 	bl	8008478 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_I2C_MspInit+0x88>)
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_I2C_MspInit+0x88>)
 80024da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024de:	6413      	str	r3, [r2, #64]	; 0x40
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_I2C_MspInit+0x88>)
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80024ec:	bf00      	nop
 80024ee:	3728      	adds	r7, #40	; 0x28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40005400 	.word	0x40005400
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020400 	.word	0x40020400

08002500 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 800250a:	2307      	movs	r3, #7
 800250c:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 800251a:	e010      	b.n	800253e <reverse_uint8+0x3e>
		result = result << 1;
 800251c:	7bbb      	ldrb	r3, [r7, #14]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8002530:	7bba      	ldrb	r2, [r7, #14]
 8002532:	7b7b      	ldrb	r3, [r7, #13]
 8002534:	4313      	orrs	r3, r2
 8002536:	73bb      	strb	r3, [r7, #14]
		times--;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3b01      	subs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1eb      	bne.n	800251c <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002544:	7bbb      	ldrb	r3, [r7, #14]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
	updateSetting(0);
 800255a:	2000      	movs	r0, #0
 800255c:	f000 f824 	bl	80025a8 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002560:	2300      	movs	r3, #0
 8002562:	71fb      	strb	r3, [r7, #7]
 8002564:	e014      	b.n	8002590 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002566:	2300      	movs	r3, #0
 8002568:	80bb      	strh	r3, [r7, #4]
 800256a:	e00b      	b.n	8002584 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	2232      	movs	r2, #50	; 0x32
 8002570:	fb03 f202 	mul.w	r2, r3, r2
 8002574:	88bb      	ldrh	r3, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <lcdClearBuffer+0x50>)
 800257a:	21ff      	movs	r1, #255	; 0xff
 800257c:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 800257e:	88bb      	ldrh	r3, [r7, #4]
 8002580:	3301      	adds	r3, #1
 8002582:	80bb      	strh	r3, [r7, #4]
 8002584:	88bb      	ldrh	r3, [r7, #4]
 8002586:	2b31      	cmp	r3, #49	; 0x31
 8002588:	d9f0      	bls.n	800256c <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	3301      	adds	r3, #1
 800258e:	71fb      	strb	r3, [r7, #7]
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	2bef      	cmp	r3, #239	; 0xef
 8002594:	d9e7      	bls.n	8002566 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002596:	2001      	movs	r0, #1
 8002598:	f000 f806 	bl	80025a8 <updateSetting>
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200006a0 	.word	0x200006a0

080025a8 <updateSetting>:

void updateSetting(uint8_t state){
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <updateSetting+0x1c>)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	7013      	strb	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000144 	.word	0x20000144

080025c8 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	4603      	mov	r3, r0
 80025d2:	80fb      	strh	r3, [r7, #6]
 80025d4:	460b      	mov	r3, r1
 80025d6:	717b      	strb	r3, [r7, #5]
 80025d8:	4613      	mov	r3, r2
 80025da:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	795b      	ldrb	r3, [r3, #5]
 80025e0:	793a      	ldrb	r2, [r7, #4]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d304      	bcc.n	80025f0 <lcdPutChar+0x28>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	799b      	ldrb	r3, [r3, #6]
 80025ea:	793a      	ldrb	r2, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d902      	bls.n	80025f6 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	79db      	ldrb	r3, [r3, #7]
 80025f4:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	08db      	lsrs	r3, r3, #3
 8002604:	b29b      	uxth	r3, r3
 8002606:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	885b      	ldrh	r3, [r3, #2]
 800260c:	461a      	mov	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	fb92 f3f3 	sdiv	r3, r2, r3
 8002616:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002618:	2300      	movs	r3, #0
 800261a:	75fb      	strb	r3, [r7, #23]
 800261c:	e09b      	b.n	8002756 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 800261e:	797a      	ldrb	r2, [r7, #5]
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	4413      	add	r3, r2
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	4413      	add	r3, r2
 800262c:	461a      	mov	r2, r3
 800262e:	0091      	lsls	r1, r2, #2
 8002630:	461a      	mov	r2, r3
 8002632:	460b      	mov	r3, r1
 8002634:	4413      	add	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	7cfb      	ldrb	r3, [r7, #19]
 800263c:	b29b      	uxth	r3, r3
 800263e:	4413      	add	r3, r2
 8002640:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002642:	793b      	ldrb	r3, [r7, #4]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	7952      	ldrb	r2, [r2, #5]
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	8852      	ldrh	r2, [r2, #2]
 800264e:	fb03 f202 	mul.w	r2, r3, r2
 8002652:	7dfb      	ldrb	r3, [r7, #23]
 8002654:	7cb9      	ldrb	r1, [r7, #18]
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	3308      	adds	r3, #8
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	7d3b      	ldrb	r3, [r7, #20]
 800266c:	fa42 f303 	asr.w	r3, r2, r3
 8002670:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002672:	8a3b      	ldrh	r3, [r7, #16]
 8002674:	4a3e      	ldr	r2, [pc, #248]	; (8002770 <lcdPutChar+0x1a8>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	b25a      	sxtb	r2, r3
 800267a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800267e:	43db      	mvns	r3, r3
 8002680:	b25b      	sxtb	r3, r3
 8002682:	4013      	ands	r3, r2
 8002684:	b25a      	sxtb	r2, r3
 8002686:	8a3b      	ldrh	r3, [r7, #16]
 8002688:	b2d1      	uxtb	r1, r2
 800268a:	4a39      	ldr	r2, [pc, #228]	; (8002770 <lcdPutChar+0x1a8>)
 800268c:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	3308      	adds	r3, #8
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b25a      	sxtb	r2, r3
 800269a:	7d3b      	ldrb	r3, [r7, #20]
 800269c:	f1c3 0308 	rsb	r3, r3, #8
 80026a0:	21ff      	movs	r1, #255	; 0xff
 80026a2:	fa41 f303 	asr.w	r3, r1, r3
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	4013      	ands	r3, r2
 80026aa:	b25b      	sxtb	r3, r3
 80026ac:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80026ae:	2301      	movs	r3, #1
 80026b0:	757b      	strb	r3, [r7, #21]
 80026b2:	e029      	b.n	8002708 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 80026b4:	7d7a      	ldrb	r2, [r7, #21]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4413      	add	r3, r2
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	7a1b      	ldrb	r3, [r3, #8]
 80026c0:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80026c2:	8a3a      	ldrh	r2, [r7, #16]
 80026c4:	7d7b      	ldrb	r3, [r7, #21]
 80026c6:	4413      	add	r3, r2
 80026c8:	4a29      	ldr	r2, [pc, #164]	; (8002770 <lcdPutChar+0x1a8>)
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	b25a      	sxtb	r2, r3
 80026ce:	7db9      	ldrb	r1, [r7, #22]
 80026d0:	7d3b      	ldrb	r3, [r7, #20]
 80026d2:	f1c3 0308 	rsb	r3, r3, #8
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	b259      	sxtb	r1, r3
 80026dc:	7af8      	ldrb	r0, [r7, #11]
 80026de:	7d3b      	ldrb	r3, [r7, #20]
 80026e0:	fa40 f303 	asr.w	r3, r0, r3
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	430b      	orrs	r3, r1
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	b25b      	sxtb	r3, r3
 80026ee:	4013      	ands	r3, r2
 80026f0:	b259      	sxtb	r1, r3
 80026f2:	8a3a      	ldrh	r2, [r7, #16]
 80026f4:	7d7b      	ldrb	r3, [r7, #21]
 80026f6:	4413      	add	r3, r2
 80026f8:	b2c9      	uxtb	r1, r1
 80026fa:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <lcdPutChar+0x1a8>)
 80026fc:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002702:	7d7b      	ldrb	r3, [r7, #21]
 8002704:	3301      	adds	r3, #1
 8002706:	757b      	strb	r3, [r7, #21]
 8002708:	7d7a      	ldrb	r2, [r7, #21]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	3307      	adds	r3, #7
 8002710:	10db      	asrs	r3, r3, #3
 8002712:	429a      	cmp	r2, r3
 8002714:	dbce      	blt.n	80026b4 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002716:	8a3a      	ldrh	r2, [r7, #16]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	3307      	adds	r3, #7
 800271e:	10db      	asrs	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <lcdPutChar+0x1a8>)
 8002724:	5cd3      	ldrb	r3, [r2, r3]
 8002726:	b25a      	sxtb	r2, r3
 8002728:	7db9      	ldrb	r1, [r7, #22]
 800272a:	7d3b      	ldrb	r3, [r7, #20]
 800272c:	f1c3 0308 	rsb	r3, r3, #8
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	b25b      	sxtb	r3, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	b25b      	sxtb	r3, r3
 800273a:	4013      	ands	r3, r2
 800273c:	b259      	sxtb	r1, r3
 800273e:	8a3a      	ldrh	r2, [r7, #16]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	3307      	adds	r3, #7
 8002746:	10db      	asrs	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	b2c9      	uxtb	r1, r1
 800274c:	4a08      	ldr	r2, [pc, #32]	; (8002770 <lcdPutChar+0x1a8>)
 800274e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002750:	7dfb      	ldrb	r3, [r7, #23]
 8002752:	3301      	adds	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	785b      	ldrb	r3, [r3, #1]
 800275a:	7dfa      	ldrb	r2, [r7, #23]
 800275c:	429a      	cmp	r2, r3
 800275e:	f4ff af5e 	bcc.w	800261e <lcdPutChar+0x56>
	}
}
 8002762:	bf00      	nop
 8002764:	bf00      	nop
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	200006a0 	.word	0x200006a0

08002774 <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60ba      	str	r2, [r7, #8]
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	4603      	mov	r3, r0
 8002780:	81fb      	strh	r3, [r7, #14]
 8002782:	460b      	mov	r3, r1
 8002784:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]
 800278a:	e015      	b.n	80027b8 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b29a      	uxth	r2, r3
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	b29b      	uxth	r3, r3
 8002796:	fb12 f303 	smulbb	r3, r2, r3
 800279a:	b29a      	uxth	r2, r3
 800279c:	89fb      	ldrh	r3, [r7, #14]
 800279e:	4413      	add	r3, r2
 80027a0:	b298      	uxth	r0, r3
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	4413      	add	r3, r2
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	7b79      	ldrb	r1, [r7, #13]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f7ff ff0b 	bl	80025c8 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	3301      	adds	r3, #1
 80027b6:	75fb      	strb	r3, [r7, #23]
 80027b8:	7dfc      	ldrb	r4, [r7, #23]
 80027ba:	68b8      	ldr	r0, [r7, #8]
 80027bc:	f7fd fd18 	bl	80001f0 <strlen>
 80027c0:	4603      	mov	r3, r0
 80027c2:	429c      	cmp	r4, r3
 80027c4:	d3e2      	bcc.n	800278c <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 80027c6:	bf00      	nop
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}

080027d0 <lcdVLine>:
void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 80027d0:	b490      	push	{r4, r7}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4604      	mov	r4, r0
 80027d8:	4608      	mov	r0, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	4623      	mov	r3, r4
 80027e0:	80fb      	strh	r3, [r7, #6]
 80027e2:	4603      	mov	r3, r0
 80027e4:	80bb      	strh	r3, [r7, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	70fb      	strb	r3, [r7, #3]
 80027ea:	4613      	mov	r3, r2
 80027ec:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	08db      	lsrs	r3, r3, #3
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	733b      	strb	r3, [r7, #12]
	for(uint8_t y = y1; y <= y2; y++){
 8002800:	88bb      	ldrh	r3, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	e04e      	b.n	80028a4 <lcdVLine+0xd4>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2232      	movs	r2, #50	; 0x32
 800280a:	fb03 f202 	mul.w	r2, r3, r2
 800280e:	7b7b      	ldrb	r3, [r7, #13]
 8002810:	4413      	add	r3, r2
 8002812:	4a29      	ldr	r2, [pc, #164]	; (80028b8 <lcdVLine+0xe8>)
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 8002818:	78bb      	ldrb	r3, [r7, #2]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d01e      	beq.n	800285c <lcdVLine+0x8c>
 800281e:	2b02      	cmp	r3, #2
 8002820:	dc27      	bgt.n	8002872 <lcdVLine+0xa2>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <lcdVLine+0x5c>
 8002826:	2b01      	cmp	r3, #1
 8002828:	d00b      	beq.n	8002842 <lcdVLine+0x72>
 800282a:	e022      	b.n	8002872 <lcdVLine+0xa2>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 800282c:	7b3b      	ldrb	r3, [r7, #12]
 800282e:	2280      	movs	r2, #128	; 0x80
 8002830:	fa42 f303 	asr.w	r3, r2, r3
 8002834:	b25a      	sxtb	r2, r3
 8002836:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800283a:	4313      	orrs	r3, r2
 800283c:	b25b      	sxtb	r3, r3
 800283e:	73bb      	strb	r3, [r7, #14]
				break;
 8002840:	e024      	b.n	800288c <lcdVLine+0xbc>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8002842:	7b3b      	ldrb	r3, [r7, #12]
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	fa42 f303 	asr.w	r3, r2, r3
 800284a:	b25b      	sxtb	r3, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	b25a      	sxtb	r2, r3
 8002850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002854:	4013      	ands	r3, r2
 8002856:	b25b      	sxtb	r3, r3
 8002858:	73bb      	strb	r3, [r7, #14]
				break;
 800285a:	e017      	b.n	800288c <lcdVLine+0xbc>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 800285c:	7b3b      	ldrb	r3, [r7, #12]
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	fa42 f303 	asr.w	r3, r2, r3
 8002864:	b25a      	sxtb	r2, r3
 8002866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800286a:	4053      	eors	r3, r2
 800286c:	b25b      	sxtb	r3, r3
 800286e:	73bb      	strb	r3, [r7, #14]
				break;
 8002870:	e00c      	b.n	800288c <lcdVLine+0xbc>
			default:
				content &= ~(0b10000000 >> offset);
 8002872:	7b3b      	ldrb	r3, [r7, #12]
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	fa42 f303 	asr.w	r3, r2, r3
 800287a:	b25b      	sxtb	r3, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	b25a      	sxtb	r2, r3
 8002880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002884:	4013      	ands	r3, r2
 8002886:	b25b      	sxtb	r3, r3
 8002888:	73bb      	strb	r3, [r7, #14]
				break;
 800288a:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2232      	movs	r2, #50	; 0x32
 8002890:	fb03 f202 	mul.w	r2, r3, r2
 8002894:	7b7b      	ldrb	r3, [r7, #13]
 8002896:	4413      	add	r3, r2
 8002898:	4907      	ldr	r1, [pc, #28]	; (80028b8 <lcdVLine+0xe8>)
 800289a:	7bba      	ldrb	r2, [r7, #14]
 800289c:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	3301      	adds	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d9ac      	bls.n	8002806 <lcdVLine+0x36>
	}
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc90      	pop	{r4, r7}
 80028b6:	4770      	bx	lr
 80028b8:	200006a0 	.word	0x200006a0

080028bc <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80028bc:	b490      	push	{r4, r7}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4604      	mov	r4, r0
 80028c4:	4608      	mov	r0, r1
 80028c6:	4611      	mov	r1, r2
 80028c8:	461a      	mov	r2, r3
 80028ca:	4623      	mov	r3, r4
 80028cc:	80fb      	strh	r3, [r7, #6]
 80028ce:	4603      	mov	r3, r0
 80028d0:	80bb      	strh	r3, [r7, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	70fb      	strb	r3, [r7, #3]
 80028d6:	4613      	mov	r3, r2
 80028d8:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 80028da:	23ff      	movs	r3, #255	; 0xff
 80028dc:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 80028de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028e2:	2b14      	cmp	r3, #20
 80028e4:	f200 8208 	bhi.w	8002cf8 <lcdHLine2+0x43c>
 80028e8:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <lcdHLine2+0x34>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002945 	.word	0x08002945
 80028f4:	0800294b 	.word	0x0800294b
 80028f8:	08002951 	.word	0x08002951
 80028fc:	08002957 	.word	0x08002957
 8002900:	0800296f 	.word	0x0800296f
 8002904:	08002987 	.word	0x08002987
 8002908:	0800299f 	.word	0x0800299f
 800290c:	080029e9 	.word	0x080029e9
 8002910:	08002a2d 	.word	0x08002a2d
 8002914:	08002a71 	.word	0x08002a71
 8002918:	08002aaf 	.word	0x08002aaf
 800291c:	08002ad5 	.word	0x08002ad5
 8002920:	08002aff 	.word	0x08002aff
 8002924:	08002b35 	.word	0x08002b35
 8002928:	08002b4d 	.word	0x08002b4d
 800292c:	08002b73 	.word	0x08002b73
 8002930:	08002ba9 	.word	0x08002ba9
 8002934:	08002bdf 	.word	0x08002bdf
 8002938:	08002c21 	.word	0x08002c21
 800293c:	08002c7b 	.word	0x08002c7b
 8002940:	08002cb7 	.word	0x08002cb7
		case 0:	// clear
			pattern = 0x00;
 8002944:	2300      	movs	r3, #0
 8002946:	75fb      	strb	r3, [r7, #23]
			break;
 8002948:	e1ea      	b.n	8002d20 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 800294a:	23ff      	movs	r3, #255	; 0xff
 800294c:	75fb      	strb	r3, [r7, #23]
			break;
 800294e:	e1e7      	b.n	8002d20 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8002950:	2355      	movs	r3, #85	; 0x55
 8002952:	75fb      	strb	r3, [r7, #23]
			break;
 8002954:	e1e4      	b.n	8002d20 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <lcdHLine2+0xac>
 8002962:	2300      	movs	r3, #0
 8002964:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 8002966:	e1db      	b.n	8002d20 <lcdHLine2+0x464>
			else pattern = 0xFF;
 8002968:	23ff      	movs	r3, #255	; 0xff
 800296a:	75fb      	strb	r3, [r7, #23]
			break;
 800296c:	e1d8      	b.n	8002d20 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <lcdHLine2+0xc4>
 800297a:	23aa      	movs	r3, #170	; 0xaa
 800297c:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 800297e:	e1cf      	b.n	8002d20 <lcdHLine2+0x464>
			else pattern = 0x55;
 8002980:	2355      	movs	r3, #85	; 0x55
 8002982:	75fb      	strb	r3, [r7, #23]
			break;
 8002984:	e1cc      	b.n	8002d20 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <lcdHLine2+0xdc>
 8002992:	2388      	movs	r3, #136	; 0x88
 8002994:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 8002996:	e1c3      	b.n	8002d20 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 8002998:	2322      	movs	r3, #34	; 0x22
 800299a:	75fb      	strb	r3, [r7, #23]
			break;
 800299c:	e1c0      	b.n	8002d20 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <lcdHLine2+0xf4>
 80029aa:	2388      	movs	r3, #136	; 0x88
 80029ac:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80029ae:	e1a6      	b.n	8002cfe <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d102      	bne.n	80029c2 <lcdHLine2+0x106>
 80029bc:	2344      	movs	r3, #68	; 0x44
 80029be:	75fb      	strb	r3, [r7, #23]
			break;
 80029c0:	e19d      	b.n	8002cfe <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d102      	bne.n	80029d4 <lcdHLine2+0x118>
 80029ce:	2322      	movs	r3, #34	; 0x22
 80029d0:	75fb      	strb	r3, [r7, #23]
			break;
 80029d2:	e194      	b.n	8002cfe <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b03      	cmp	r3, #3
 80029de:	f040 818e 	bne.w	8002cfe <lcdHLine2+0x442>
 80029e2:	2311      	movs	r3, #17
 80029e4:	75fb      	strb	r3, [r7, #23]
			break;
 80029e6:	e18a      	b.n	8002cfe <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <lcdHLine2+0x144>
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d102      	bne.n	8002a06 <lcdHLine2+0x14a>
 8002a00:	23aa      	movs	r3, #170	; 0xaa
 8002a02:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8002a04:	e17d      	b.n	8002d02 <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d102      	bne.n	8002a18 <lcdHLine2+0x15c>
 8002a12:	2322      	movs	r3, #34	; 0x22
 8002a14:	75fb      	strb	r3, [r7, #23]
			break;
 8002a16:	e174      	b.n	8002d02 <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	f040 816e 	bne.w	8002d02 <lcdHLine2+0x446>
 8002a26:	2388      	movs	r3, #136	; 0x88
 8002a28:	75fb      	strb	r3, [r7, #23]
			break;
 8002a2a:	e16a      	b.n	8002d02 <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d005      	beq.n	8002a44 <lcdHLine2+0x188>
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d102      	bne.n	8002a4a <lcdHLine2+0x18e>
 8002a44:	2355      	movs	r3, #85	; 0x55
 8002a46:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 8002a48:	e15d      	b.n	8002d06 <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <lcdHLine2+0x1a0>
 8002a56:	2388      	movs	r3, #136	; 0x88
 8002a58:	75fb      	strb	r3, [r7, #23]
			break;
 8002a5a:	e154      	b.n	8002d06 <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	f040 814e 	bne.w	8002d06 <lcdHLine2+0x44a>
 8002a6a:	2322      	movs	r3, #34	; 0x22
 8002a6c:	75fb      	strb	r3, [r7, #23]
			break;
 8002a6e:	e14a      	b.n	8002d06 <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <lcdHLine2+0x1cc>
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d102      	bne.n	8002a8e <lcdHLine2+0x1d2>
 8002a88:	23cc      	movs	r3, #204	; 0xcc
 8002a8a:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 8002a8c:	e13d      	b.n	8002d0a <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d006      	beq.n	8002aa8 <lcdHLine2+0x1ec>
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	f040 8131 	bne.w	8002d0a <lcdHLine2+0x44e>
 8002aa8:	2333      	movs	r3, #51	; 0x33
 8002aaa:	75fb      	strb	r3, [r7, #23]
			break;
 8002aac:	e12d      	b.n	8002d0a <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <lcdHLine2+0x204>
 8002aba:	2355      	movs	r3, #85	; 0x55
 8002abc:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 8002abe:	e126      	b.n	8002d0e <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8120 	beq.w	8002d0e <lcdHLine2+0x452>
 8002ace:	23ff      	movs	r3, #255	; 0xff
 8002ad0:	75fb      	strb	r3, [r7, #23]
			break;
 8002ad2:	e11c      	b.n	8002d0e <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <lcdHLine2+0x22a>
 8002ae0:	23cc      	movs	r3, #204	; 0xcc
 8002ae2:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002ae4:	e11c      	b.n	8002d20 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d102      	bne.n	8002af8 <lcdHLine2+0x23c>
 8002af2:	2344      	movs	r3, #68	; 0x44
 8002af4:	75fb      	strb	r3, [r7, #23]
			break;
 8002af6:	e113      	b.n	8002d20 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002af8:	2300      	movs	r3, #0
 8002afa:	75fb      	strb	r3, [r7, #23]
			break;
 8002afc:	e110      	b.n	8002d20 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <lcdHLine2+0x254>
 8002b0a:	23ee      	movs	r3, #238	; 0xee
 8002b0c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 8002b0e:	e107      	b.n	8002d20 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d005      	beq.n	8002b28 <lcdHLine2+0x26c>
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d102      	bne.n	8002b2e <lcdHLine2+0x272>
 8002b28:	2322      	movs	r3, #34	; 0x22
 8002b2a:	75fb      	strb	r3, [r7, #23]
			break;
 8002b2c:	e0f8      	b.n	8002d20 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]
			break;
 8002b32:	e0f5      	b.n	8002d20 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <lcdHLine2+0x28a>
 8002b40:	23ff      	movs	r3, #255	; 0xff
 8002b42:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8002b44:	e0ec      	b.n	8002d20 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 8002b46:	2388      	movs	r3, #136	; 0x88
 8002b48:	75fb      	strb	r3, [r7, #23]
			break;
 8002b4a:	e0e9      	b.n	8002d20 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <lcdHLine2+0x2a2>
 8002b58:	23aa      	movs	r3, #170	; 0xaa
 8002b5a:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8002b5c:	e0d9      	b.n	8002d12 <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80d3 	beq.w	8002d12 <lcdHLine2+0x456>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	75fb      	strb	r3, [r7, #23]
			break;
 8002b70:	e0cf      	b.n	8002d12 <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <lcdHLine2+0x2ce>
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d102      	bne.n	8002b90 <lcdHLine2+0x2d4>
 8002b8a:	23aa      	movs	r3, #170	; 0xaa
 8002b8c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002b8e:	e0c7      	b.n	8002d20 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d102      	bne.n	8002ba2 <lcdHLine2+0x2e6>
 8002b9c:	2344      	movs	r3, #68	; 0x44
 8002b9e:	75fb      	strb	r3, [r7, #23]
			break;
 8002ba0:	e0be      	b.n	8002d20 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]
			break;
 8002ba6:	e0bb      	b.n	8002d20 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <lcdHLine2+0x304>
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d102      	bne.n	8002bc6 <lcdHLine2+0x30a>
 8002bc0:	23ee      	movs	r3, #238	; 0xee
 8002bc2:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 8002bc4:	e0ac      	b.n	8002d20 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <lcdHLine2+0x31c>
 8002bd2:	23aa      	movs	r3, #170	; 0xaa
 8002bd4:	75fb      	strb	r3, [r7, #23]
			break;
 8002bd6:	e0a3      	b.n	8002d20 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	75fb      	strb	r3, [r7, #23]
			break;
 8002bdc:	e0a0      	b.n	8002d20 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <lcdHLine2+0x33a>
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d102      	bne.n	8002bfc <lcdHLine2+0x340>
 8002bf6:	2344      	movs	r3, #68	; 0x44
 8002bf8:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8002bfa:	e08c      	b.n	8002d16 <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d102      	bne.n	8002c0e <lcdHLine2+0x352>
 8002c08:	23aa      	movs	r3, #170	; 0xaa
 8002c0a:	75fb      	strb	r3, [r7, #23]
			break;
 8002c0c:	e083      	b.n	8002d16 <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d17d      	bne.n	8002d16 <lcdHLine2+0x45a>
 8002c1a:	2311      	movs	r3, #17
 8002c1c:	75fb      	strb	r3, [r7, #23]
			break;
 8002c1e:	e07a      	b.n	8002d16 <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	4baf      	ldr	r3, [pc, #700]	; (8002ee0 <lcdHLine2+0x624>)
 8002c24:	fba3 1302 	umull	r1, r3, r3, r2
 8002c28:	0859      	lsrs	r1, r3, #1
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	440b      	add	r3, r1
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <lcdHLine2+0x382>
 8002c38:	2355      	movs	r3, #85	; 0x55
 8002c3a:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8002c3c:	e06d      	b.n	8002d1a <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	4ba7      	ldr	r3, [pc, #668]	; (8002ee0 <lcdHLine2+0x624>)
 8002c42:	fba3 1302 	umull	r1, r3, r3, r2
 8002c46:	0859      	lsrs	r1, r3, #1
 8002c48:	460b      	mov	r3, r1
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	440b      	add	r3, r1
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d102      	bne.n	8002c5c <lcdHLine2+0x3a0>
 8002c56:	23aa      	movs	r3, #170	; 0xaa
 8002c58:	75fb      	strb	r3, [r7, #23]
			break;
 8002c5a:	e05e      	b.n	8002d1a <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	4ba0      	ldr	r3, [pc, #640]	; (8002ee0 <lcdHLine2+0x624>)
 8002c60:	fba3 1302 	umull	r1, r3, r3, r2
 8002c64:	0859      	lsrs	r1, r3, #1
 8002c66:	460b      	mov	r3, r1
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	440b      	add	r3, r1
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d152      	bne.n	8002d1a <lcdHLine2+0x45e>
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]
			break;
 8002c78:	e04f      	b.n	8002d1a <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <lcdHLine2+0x3d0>
 8002c86:	2322      	movs	r3, #34	; 0x22
 8002c88:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 8002c8a:	e049      	b.n	8002d20 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <lcdHLine2+0x3e2>
 8002c98:	2355      	movs	r3, #85	; 0x55
 8002c9a:	75fb      	strb	r3, [r7, #23]
			break;
 8002c9c:	e040      	b.n	8002d20 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d102      	bne.n	8002cb0 <lcdHLine2+0x3f4>
 8002caa:	2388      	movs	r3, #136	; 0x88
 8002cac:	75fb      	strb	r3, [r7, #23]
			break;
 8002cae:	e037      	b.n	8002d20 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	75fb      	strb	r3, [r7, #23]
			break;
 8002cb4:	e034      	b.n	8002d20 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d005      	beq.n	8002cce <lcdHLine2+0x412>
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d102      	bne.n	8002cd4 <lcdHLine2+0x418>
 8002cce:	2388      	movs	r3, #136	; 0x88
 8002cd0:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 8002cd2:	e024      	b.n	8002d1e <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <lcdHLine2+0x42a>
 8002ce0:	2377      	movs	r3, #119	; 0x77
 8002ce2:	75fb      	strb	r3, [r7, #23]
			break;
 8002ce4:	e01b      	b.n	8002d1e <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d115      	bne.n	8002d1e <lcdHLine2+0x462>
 8002cf2:	23aa      	movs	r3, #170	; 0xaa
 8002cf4:	75fb      	strb	r3, [r7, #23]
			break;
 8002cf6:	e012      	b.n	8002d1e <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	75fb      	strb	r3, [r7, #23]
			break;
 8002cfc:	e010      	b.n	8002d20 <lcdHLine2+0x464>
			break;
 8002cfe:	bf00      	nop
 8002d00:	e00e      	b.n	8002d20 <lcdHLine2+0x464>
			break;
 8002d02:	bf00      	nop
 8002d04:	e00c      	b.n	8002d20 <lcdHLine2+0x464>
			break;
 8002d06:	bf00      	nop
 8002d08:	e00a      	b.n	8002d20 <lcdHLine2+0x464>
			break;
 8002d0a:	bf00      	nop
 8002d0c:	e008      	b.n	8002d20 <lcdHLine2+0x464>
			break;
 8002d0e:	bf00      	nop
 8002d10:	e006      	b.n	8002d20 <lcdHLine2+0x464>
			break;
 8002d12:	bf00      	nop
 8002d14:	e004      	b.n	8002d20 <lcdHLine2+0x464>
			break;
 8002d16:	bf00      	nop
 8002d18:	e002      	b.n	8002d20 <lcdHLine2+0x464>
			break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <lcdHLine2+0x464>
			break;
 8002d1e:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	08db      	lsrs	r3, r3, #3
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 8002d32:	88bb      	ldrh	r3, [r7, #4]
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 8002d3a:	88bb      	ldrh	r3, [r7, #4]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	2232      	movs	r2, #50	; 0x32
 8002d48:	fb03 f202 	mul.w	r2, r3, r2
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a64      	ldr	r2, [pc, #400]	; (8002ee4 <lcdHLine2+0x628>)
 8002d52:	5cd3      	ldrb	r3, [r2, r3]
 8002d54:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	2232      	movs	r2, #50	; 0x32
 8002d5a:	fb03 f202 	mul.w	r2, r3, r2
 8002d5e:	7b7b      	ldrb	r3, [r7, #13]
 8002d60:	4413      	add	r3, r2
 8002d62:	4a60      	ldr	r2, [pc, #384]	; (8002ee4 <lcdHLine2+0x628>)
 8002d64:	5cd3      	ldrb	r3, [r2, r3]
 8002d66:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 8002d68:	23ff      	movs	r3, #255	; 0xff
 8002d6a:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	f1c3 0208 	rsb	r2, r3, #8
 8002d72:	88b9      	ldrh	r1, [r7, #4]
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	1acb      	subs	r3, r1, r3
 8002d78:	3301      	adds	r3, #1
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	dd11      	ble.n	8002da2 <lcdHLine2+0x4e6>
 8002d7e:	88ba      	ldrh	r2, [r7, #4]
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	22ff      	movs	r2, #255	; 0xff
 8002d88:	fa42 f303 	asr.w	r3, r2, r3
 8002d8c:	43da      	mvns	r2, r3
 8002d8e:	7bbb      	ldrb	r3, [r7, #14]
 8002d90:	fa42 f303 	asr.w	r3, r2, r3
 8002d94:	b25a      	sxtb	r2, r3
 8002d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b25b      	sxtb	r3, r3
 8002d9e:	753b      	strb	r3, [r7, #20]
 8002da0:	e001      	b.n	8002da6 <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	753b      	strb	r3, [r7, #20]
		switch(mode){
 8002da6:	78bb      	ldrb	r3, [r7, #2]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	f200 8130 	bhi.w	800300e <lcdHLine2+0x752>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <lcdHLine2+0x4f8>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002e49 	.word	0x08002e49
 8002dbc:	08002ee9 	.word	0x08002ee9
 8002dc0:	08002f6d 	.word	0x08002f6d
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 8002dc4:	7bbb      	ldrb	r3, [r7, #14]
 8002dc6:	22ff      	movs	r2, #255	; 0xff
 8002dc8:	fa42 f303 	asr.w	r3, r2, r3
 8002dcc:	b25a      	sxtb	r2, r3
 8002dce:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	b25a      	sxtb	r2, r3
 8002dd6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 8002de0:	7b3b      	ldrb	r3, [r7, #12]
 8002de2:	f1c3 0307 	rsb	r3, r3, #7
 8002de6:	22ff      	movs	r2, #255	; 0xff
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	b25a      	sxtb	r2, r3
 8002dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002df2:	4013      	ands	r3, r2
 8002df4:	b25a      	sxtb	r2, r3
 8002df6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	b25b      	sxtb	r3, r3
 8002dfe:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002e00:	2301      	movs	r3, #1
 8002e02:	74fb      	strb	r3, [r7, #19]
 8002e04:	e019      	b.n	8002e3a <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	2232      	movs	r2, #50	; 0x32
 8002e0a:	fb03 f202 	mul.w	r2, r3, r2
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	441a      	add	r2, r3
 8002e12:	7cfb      	ldrb	r3, [r7, #19]
 8002e14:	4413      	add	r3, r2
 8002e16:	4a33      	ldr	r2, [pc, #204]	; (8002ee4 <lcdHLine2+0x628>)
 8002e18:	5cd1      	ldrb	r1, [r2, r3]
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	2232      	movs	r2, #50	; 0x32
 8002e1e:	fb03 f202 	mul.w	r2, r3, r2
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	441a      	add	r2, r3
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	4413      	add	r3, r2
 8002e2a:	7dfa      	ldrb	r2, [r7, #23]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	b2d1      	uxtb	r1, r2
 8002e30:	4a2c      	ldr	r2, [pc, #176]	; (8002ee4 <lcdHLine2+0x628>)
 8002e32:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	3301      	adds	r3, #1
 8002e38:	74fb      	strb	r3, [r7, #19]
 8002e3a:	7cfa      	ldrb	r2, [r7, #19]
 8002e3c:	7b79      	ldrb	r1, [r7, #13]
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	1acb      	subs	r3, r1, r3
 8002e42:	429a      	cmp	r2, r3
 8002e44:	dbdf      	blt.n	8002e06 <lcdHLine2+0x54a>
			}
			break;
 8002e46:	e0e2      	b.n	800300e <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8002e48:	7bbb      	ldrb	r3, [r7, #14]
 8002e4a:	22ff      	movs	r2, #255	; 0xff
 8002e4c:	fa42 f303 	asr.w	r3, r2, r3
 8002e50:	b25a      	sxtb	r2, r3
 8002e52:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002e56:	4013      	ands	r3, r2
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	b25a      	sxtb	r2, r3
 8002e5e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002e62:	4013      	ands	r3, r2
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 8002e68:	7b3b      	ldrb	r3, [r7, #12]
 8002e6a:	f1c3 0307 	rsb	r3, r3, #7
 8002e6e:	22ff      	movs	r2, #255	; 0xff
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	b25a      	sxtb	r2, r3
 8002e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	b25a      	sxtb	r2, r3
 8002e82:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002e86:	4013      	ands	r3, r2
 8002e88:	b25b      	sxtb	r3, r3
 8002e8a:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	74bb      	strb	r3, [r7, #18]
 8002e90:	e01e      	b.n	8002ed0 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	2232      	movs	r2, #50	; 0x32
 8002e96:	fb03 f202 	mul.w	r2, r3, r2
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	441a      	add	r2, r3
 8002e9e:	7cbb      	ldrb	r3, [r7, #18]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4a10      	ldr	r2, [pc, #64]	; (8002ee4 <lcdHLine2+0x628>)
 8002ea4:	5cd3      	ldrb	r3, [r2, r3]
 8002ea6:	b25a      	sxtb	r2, r3
 8002ea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	b259      	sxtb	r1, r3
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	2232      	movs	r2, #50	; 0x32
 8002eb8:	fb03 f202 	mul.w	r2, r3, r2
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	441a      	add	r2, r3
 8002ec0:	7cbb      	ldrb	r3, [r7, #18]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	b2c9      	uxtb	r1, r1
 8002ec6:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <lcdHLine2+0x628>)
 8002ec8:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002eca:	7cbb      	ldrb	r3, [r7, #18]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	74bb      	strb	r3, [r7, #18]
 8002ed0:	7cba      	ldrb	r2, [r7, #18]
 8002ed2:	7b79      	ldrb	r1, [r7, #13]
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	1acb      	subs	r3, r1, r3
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	dbda      	blt.n	8002e92 <lcdHLine2+0x5d6>
			}
			break;
 8002edc:	e097      	b.n	800300e <lcdHLine2+0x752>
 8002ede:	bf00      	nop
 8002ee0:	aaaaaaab 	.word	0xaaaaaaab
 8002ee4:	200006a0 	.word	0x200006a0
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 8002ee8:	7bbb      	ldrb	r3, [r7, #14]
 8002eea:	22ff      	movs	r2, #255	; 0xff
 8002eec:	fa42 f303 	asr.w	r3, r2, r3
 8002ef0:	b25a      	sxtb	r2, r3
 8002ef2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	b25a      	sxtb	r2, r3
 8002efa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002efe:	4053      	eors	r3, r2
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8002f04:	7b3b      	ldrb	r3, [r7, #12]
 8002f06:	f1c3 0307 	rsb	r3, r3, #7
 8002f0a:	22ff      	movs	r2, #255	; 0xff
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	b25a      	sxtb	r2, r3
 8002f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f16:	4013      	ands	r3, r2
 8002f18:	b25a      	sxtb	r2, r3
 8002f1a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002f1e:	4053      	eors	r3, r2
 8002f20:	b25b      	sxtb	r3, r3
 8002f22:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002f24:	2301      	movs	r3, #1
 8002f26:	747b      	strb	r3, [r7, #17]
 8002f28:	e019      	b.n	8002f5e <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	2232      	movs	r2, #50	; 0x32
 8002f2e:	fb03 f202 	mul.w	r2, r3, r2
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	441a      	add	r2, r3
 8002f36:	7c7b      	ldrb	r3, [r7, #17]
 8002f38:	4413      	add	r3, r2
 8002f3a:	4a42      	ldr	r2, [pc, #264]	; (8003044 <lcdHLine2+0x788>)
 8002f3c:	5cd1      	ldrb	r1, [r2, r3]
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	2232      	movs	r2, #50	; 0x32
 8002f42:	fb03 f202 	mul.w	r2, r3, r2
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	441a      	add	r2, r3
 8002f4a:	7c7b      	ldrb	r3, [r7, #17]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	7dfa      	ldrb	r2, [r7, #23]
 8002f50:	404a      	eors	r2, r1
 8002f52:	b2d1      	uxtb	r1, r2
 8002f54:	4a3b      	ldr	r2, [pc, #236]	; (8003044 <lcdHLine2+0x788>)
 8002f56:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002f58:	7c7b      	ldrb	r3, [r7, #17]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	747b      	strb	r3, [r7, #17]
 8002f5e:	7c7a      	ldrb	r2, [r7, #17]
 8002f60:	7b79      	ldrb	r1, [r7, #13]
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	1acb      	subs	r3, r1, r3
 8002f66:	429a      	cmp	r2, r3
 8002f68:	dbdf      	blt.n	8002f2a <lcdHLine2+0x66e>
			}
			break;
 8002f6a:	e050      	b.n	800300e <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	22ff      	movs	r2, #255	; 0xff
 8002f70:	fa42 f303 	asr.w	r3, r2, r3
 8002f74:	b25a      	sxtb	r2, r3
 8002f76:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	b259      	sxtb	r1, r3
 8002f86:	7bbb      	ldrb	r3, [r7, #14]
 8002f88:	f1c3 0308 	rsb	r3, r3, #8
 8002f8c:	20ff      	movs	r0, #255	; 0xff
 8002f8e:	fa00 f303 	lsl.w	r3, r0, r3
 8002f92:	b25b      	sxtb	r3, r3
 8002f94:	400b      	ands	r3, r1
 8002f96:	b25b      	sxtb	r3, r3
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 8002fa2:	7b3b      	ldrb	r3, [r7, #12]
 8002fa4:	f1c3 0307 	rsb	r3, r3, #7
 8002fa8:	22ff      	movs	r2, #255	; 0xff
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	b25a      	sxtb	r2, r3
 8002fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	b25a      	sxtb	r2, r3
 8002fb8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	b259      	sxtb	r1, r3
 8002fc0:	7b3b      	ldrb	r3, [r7, #12]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	20ff      	movs	r0, #255	; 0xff
 8002fc6:	fa40 f303 	asr.w	r3, r0, r3
 8002fca:	b25b      	sxtb	r3, r3
 8002fcc:	400b      	ands	r3, r1
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002fda:	2301      	movs	r3, #1
 8002fdc:	743b      	strb	r3, [r7, #16]
 8002fde:	e00f      	b.n	8003000 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	2232      	movs	r2, #50	; 0x32
 8002fe4:	fb03 f202 	mul.w	r2, r3, r2
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	441a      	add	r2, r3
 8002fec:	7c3b      	ldrb	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	7dfa      	ldrb	r2, [r7, #23]
 8002ff2:	43d2      	mvns	r2, r2
 8002ff4:	b2d1      	uxtb	r1, r2
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <lcdHLine2+0x788>)
 8002ff8:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002ffa:	7c3b      	ldrb	r3, [r7, #16]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	743b      	strb	r3, [r7, #16]
 8003000:	7c3a      	ldrb	r2, [r7, #16]
 8003002:	7b79      	ldrb	r1, [r7, #13]
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	1acb      	subs	r3, r1, r3
 8003008:	429a      	cmp	r2, r3
 800300a:	dbe9      	blt.n	8002fe0 <lcdHLine2+0x724>
			}
			break;
 800300c:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	2232      	movs	r2, #50	; 0x32
 8003012:	fb03 f202 	mul.w	r2, r3, r2
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	4413      	add	r3, r2
 800301a:	490a      	ldr	r1, [pc, #40]	; (8003044 <lcdHLine2+0x788>)
 800301c:	7dba      	ldrb	r2, [r7, #22]
 800301e:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003020:	7b7a      	ldrb	r2, [r7, #13]
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	429a      	cmp	r2, r3
 8003026:	d908      	bls.n	800303a <lcdHLine2+0x77e>
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	2232      	movs	r2, #50	; 0x32
 800302c:	fb03 f202 	mul.w	r2, r3, r2
 8003030:	7b7b      	ldrb	r3, [r7, #13]
 8003032:	4413      	add	r3, r2
 8003034:	4903      	ldr	r1, [pc, #12]	; (8003044 <lcdHLine2+0x788>)
 8003036:	7d7a      	ldrb	r2, [r7, #21]
 8003038:	54ca      	strb	r2, [r1, r3]
}
 800303a:	bf00      	nop
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bc90      	pop	{r4, r7}
 8003042:	4770      	bx	lr
 8003044:	200006a0 	.word	0x200006a0

08003048 <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8003048:	b490      	push	{r4, r7}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	4604      	mov	r4, r0
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4623      	mov	r3, r4
 8003058:	80fb      	strh	r3, [r7, #6]
 800305a:	4603      	mov	r3, r0
 800305c:	80bb      	strh	r3, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
 8003062:	4613      	mov	r3, r2
 8003064:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	08db      	lsrs	r3, r3, #3
 800306a:	b29b      	uxth	r3, r3
 800306c:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8003078:	88bb      	ldrh	r3, [r7, #4]
 800307a:	08db      	lsrs	r3, r3, #3
 800307c:	b29b      	uxth	r3, r3
 800307e:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 8003080:	88bb      	ldrh	r3, [r7, #4]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	2232      	movs	r2, #50	; 0x32
 800308e:	fb03 f202 	mul.w	r2, r3, r2
 8003092:	7c7b      	ldrb	r3, [r7, #17]
 8003094:	4413      	add	r3, r2
 8003096:	4a71      	ldr	r2, [pc, #452]	; (800325c <lcdHLine+0x214>)
 8003098:	5cd3      	ldrb	r3, [r2, r3]
 800309a:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	2232      	movs	r2, #50	; 0x32
 80030a0:	fb03 f202 	mul.w	r2, r3, r2
 80030a4:	7c7b      	ldrb	r3, [r7, #17]
 80030a6:	441a      	add	r2, r3
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	4413      	add	r3, r2
 80030ac:	4a6b      	ldr	r2, [pc, #428]	; (800325c <lcdHLine+0x214>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 80030b2:	23ff      	movs	r3, #255	; 0xff
 80030b4:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 80030b6:	7c3b      	ldrb	r3, [r7, #16]
 80030b8:	f1c3 0208 	rsb	r2, r3, #8
 80030bc:	88b9      	ldrh	r1, [r7, #4]
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	1acb      	subs	r3, r1, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	429a      	cmp	r2, r3
 80030c6:	dd09      	ble.n	80030dc <lcdHLine+0x94>
 80030c8:	88ba      	ldrh	r2, [r7, #4]
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	22ff      	movs	r2, #255	; 0xff
 80030d2:	fa42 f303 	asr.w	r3, r2, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	757b      	strb	r3, [r7, #21]
	switch(mode){
 80030dc:	78bb      	ldrb	r3, [r7, #2]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d067      	beq.n	80031b2 <lcdHLine+0x16a>
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	f300 809e 	bgt.w	8003224 <lcdHLine+0x1dc>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <lcdHLine+0xaa>
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d02e      	beq.n	800314e <lcdHLine+0x106>
 80030f0:	e098      	b.n	8003224 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 80030f2:	7d7a      	ldrb	r2, [r7, #21]
 80030f4:	7c3b      	ldrb	r3, [r7, #16]
 80030f6:	fa42 f303 	asr.w	r3, r2, r3
 80030fa:	b25a      	sxtb	r2, r3
 80030fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003100:	4313      	orrs	r3, r2
 8003102:	b25b      	sxtb	r3, r3
 8003104:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8003106:	7bbb      	ldrb	r3, [r7, #14]
 8003108:	f1c3 0307 	rsb	r3, r3, #7
 800310c:	22ff      	movs	r2, #255	; 0xff
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	b25a      	sxtb	r2, r3
 8003114:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003118:	4313      	orrs	r3, r2
 800311a:	b25b      	sxtb	r3, r3
 800311c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800311e:	2301      	movs	r3, #1
 8003120:	753b      	strb	r3, [r7, #20]
 8003122:	e00d      	b.n	8003140 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	2232      	movs	r2, #50	; 0x32
 8003128:	fb03 f202 	mul.w	r2, r3, r2
 800312c:	7c7b      	ldrb	r3, [r7, #17]
 800312e:	441a      	add	r2, r3
 8003130:	7d3b      	ldrb	r3, [r7, #20]
 8003132:	4413      	add	r3, r2
 8003134:	4a49      	ldr	r2, [pc, #292]	; (800325c <lcdHLine+0x214>)
 8003136:	21ff      	movs	r1, #255	; 0xff
 8003138:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800313a:	7d3b      	ldrb	r3, [r7, #20]
 800313c:	3301      	adds	r3, #1
 800313e:	753b      	strb	r3, [r7, #20]
 8003140:	7d3a      	ldrb	r2, [r7, #20]
 8003142:	7bf9      	ldrb	r1, [r7, #15]
 8003144:	7c7b      	ldrb	r3, [r7, #17]
 8003146:	1acb      	subs	r3, r1, r3
 8003148:	429a      	cmp	r2, r3
 800314a:	dbeb      	blt.n	8003124 <lcdHLine+0xdc>
		}
		break;
 800314c:	e06a      	b.n	8003224 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 800314e:	7d7a      	ldrb	r2, [r7, #21]
 8003150:	7c3b      	ldrb	r3, [r7, #16]
 8003152:	fa42 f303 	asr.w	r3, r2, r3
 8003156:	b25b      	sxtb	r3, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	b25a      	sxtb	r2, r3
 800315c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003160:	4013      	ands	r3, r2
 8003162:	b25b      	sxtb	r3, r3
 8003164:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 8003166:	7bbb      	ldrb	r3, [r7, #14]
 8003168:	f1c3 0307 	rsb	r3, r3, #7
 800316c:	22ff      	movs	r2, #255	; 0xff
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	b25b      	sxtb	r3, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	b25a      	sxtb	r2, r3
 8003178:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800317c:	4013      	ands	r3, r2
 800317e:	b25b      	sxtb	r3, r3
 8003180:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003182:	2301      	movs	r3, #1
 8003184:	74fb      	strb	r3, [r7, #19]
 8003186:	e00d      	b.n	80031a4 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	2232      	movs	r2, #50	; 0x32
 800318c:	fb03 f202 	mul.w	r2, r3, r2
 8003190:	7c7b      	ldrb	r3, [r7, #17]
 8003192:	441a      	add	r2, r3
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	4413      	add	r3, r2
 8003198:	4a30      	ldr	r2, [pc, #192]	; (800325c <lcdHLine+0x214>)
 800319a:	2100      	movs	r1, #0
 800319c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800319e:	7cfb      	ldrb	r3, [r7, #19]
 80031a0:	3301      	adds	r3, #1
 80031a2:	74fb      	strb	r3, [r7, #19]
 80031a4:	7cfa      	ldrb	r2, [r7, #19]
 80031a6:	7bf9      	ldrb	r1, [r7, #15]
 80031a8:	7c7b      	ldrb	r3, [r7, #17]
 80031aa:	1acb      	subs	r3, r1, r3
 80031ac:	429a      	cmp	r2, r3
 80031ae:	dbeb      	blt.n	8003188 <lcdHLine+0x140>
		}
		break;
 80031b0:	e038      	b.n	8003224 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 80031b2:	7d7a      	ldrb	r2, [r7, #21]
 80031b4:	7c3b      	ldrb	r3, [r7, #16]
 80031b6:	fa42 f303 	asr.w	r3, r2, r3
 80031ba:	b25a      	sxtb	r2, r3
 80031bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031c0:	4053      	eors	r3, r2
 80031c2:	b25b      	sxtb	r3, r3
 80031c4:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 80031c6:	7bbb      	ldrb	r3, [r7, #14]
 80031c8:	f1c3 0307 	rsb	r3, r3, #7
 80031cc:	22ff      	movs	r2, #255	; 0xff
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	b25a      	sxtb	r2, r3
 80031d4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031d8:	4053      	eors	r3, r2
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80031de:	2301      	movs	r3, #1
 80031e0:	74bb      	strb	r3, [r7, #18]
 80031e2:	e018      	b.n	8003216 <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	2232      	movs	r2, #50	; 0x32
 80031e8:	fb03 f202 	mul.w	r2, r3, r2
 80031ec:	7c7b      	ldrb	r3, [r7, #17]
 80031ee:	441a      	add	r2, r3
 80031f0:	7cbb      	ldrb	r3, [r7, #18]
 80031f2:	4413      	add	r3, r2
 80031f4:	4a19      	ldr	r2, [pc, #100]	; (800325c <lcdHLine+0x214>)
 80031f6:	5cd2      	ldrb	r2, [r2, r3]
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	2132      	movs	r1, #50	; 0x32
 80031fc:	fb03 f101 	mul.w	r1, r3, r1
 8003200:	7c7b      	ldrb	r3, [r7, #17]
 8003202:	4419      	add	r1, r3
 8003204:	7cbb      	ldrb	r3, [r7, #18]
 8003206:	440b      	add	r3, r1
 8003208:	43d2      	mvns	r2, r2
 800320a:	b2d1      	uxtb	r1, r2
 800320c:	4a13      	ldr	r2, [pc, #76]	; (800325c <lcdHLine+0x214>)
 800320e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003210:	7cbb      	ldrb	r3, [r7, #18]
 8003212:	3301      	adds	r3, #1
 8003214:	74bb      	strb	r3, [r7, #18]
 8003216:	7cba      	ldrb	r2, [r7, #18]
 8003218:	7bf9      	ldrb	r1, [r7, #15]
 800321a:	7c7b      	ldrb	r3, [r7, #17]
 800321c:	1acb      	subs	r3, r1, r3
 800321e:	429a      	cmp	r2, r3
 8003220:	dbe0      	blt.n	80031e4 <lcdHLine+0x19c>
		}
		break;
 8003222:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	2232      	movs	r2, #50	; 0x32
 8003228:	fb03 f202 	mul.w	r2, r3, r2
 800322c:	7c7b      	ldrb	r3, [r7, #17]
 800322e:	4413      	add	r3, r2
 8003230:	490a      	ldr	r1, [pc, #40]	; (800325c <lcdHLine+0x214>)
 8003232:	7dfa      	ldrb	r2, [r7, #23]
 8003234:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	7c7b      	ldrb	r3, [r7, #17]
 800323a:	429a      	cmp	r2, r3
 800323c:	d908      	bls.n	8003250 <lcdHLine+0x208>
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	2232      	movs	r2, #50	; 0x32
 8003242:	fb03 f202 	mul.w	r2, r3, r2
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	4413      	add	r3, r2
 800324a:	4904      	ldr	r1, [pc, #16]	; (800325c <lcdHLine+0x214>)
 800324c:	7dba      	ldrb	r2, [r7, #22]
 800324e:	54ca      	strb	r2, [r1, r3]
}
 8003250:	bf00      	nop
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bc90      	pop	{r4, r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	200006a0 	.word	0x200006a0

08003260 <lcdRefresh>:

void lcdRefresh(void){
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <lcdRefresh+0x7c>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d032      	beq.n	80032d4 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 800326e:	2201      	movs	r2, #1
 8003270:	2140      	movs	r1, #64	; 0x40
 8003272:	481b      	ldr	r0, [pc, #108]	; (80032e0 <lcdRefresh+0x80>)
 8003274:	f005 fac4 	bl	8008800 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003278:	2301      	movs	r3, #1
 800327a:	71fb      	strb	r3, [r7, #7]
 800327c:	e01c      	b.n	80032b8 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff f93d 	bl	8002500 <reverse_uint8>
 8003286:	4603      	mov	r3, r0
 8003288:	461a      	mov	r2, r3
 800328a:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <lcdRefresh+0x84>)
 800328c:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 800328e:	2396      	movs	r3, #150	; 0x96
 8003290:	2202      	movs	r2, #2
 8003292:	4914      	ldr	r1, [pc, #80]	; (80032e4 <lcdRefresh+0x84>)
 8003294:	4814      	ldr	r0, [pc, #80]	; (80032e8 <lcdRefresh+0x88>)
 8003296:	f007 fd24 	bl	800ace2 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	3b01      	subs	r3, #1
 800329e:	2232      	movs	r2, #50	; 0x32
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	4a11      	ldr	r2, [pc, #68]	; (80032ec <lcdRefresh+0x8c>)
 80032a6:	1899      	adds	r1, r3, r2
 80032a8:	2396      	movs	r3, #150	; 0x96
 80032aa:	2232      	movs	r2, #50	; 0x32
 80032ac:	480e      	ldr	r0, [pc, #56]	; (80032e8 <lcdRefresh+0x88>)
 80032ae:	f007 fd18 	bl	800ace2 <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	3301      	adds	r3, #1
 80032b6:	71fb      	strb	r3, [r7, #7]
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	2bf1      	cmp	r3, #241	; 0xf1
 80032bc:	d9df      	bls.n	800327e <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 80032be:	2396      	movs	r3, #150	; 0x96
 80032c0:	2202      	movs	r2, #2
 80032c2:	490b      	ldr	r1, [pc, #44]	; (80032f0 <lcdRefresh+0x90>)
 80032c4:	4808      	ldr	r0, [pc, #32]	; (80032e8 <lcdRefresh+0x88>)
 80032c6:	f007 fd0c 	bl	800ace2 <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 80032ca:	2200      	movs	r2, #0
 80032cc:	2140      	movs	r1, #64	; 0x40
 80032ce:	4804      	ldr	r0, [pc, #16]	; (80032e0 <lcdRefresh+0x80>)
 80032d0:	f005 fa96 	bl	8008800 <HAL_GPIO_WritePin>
	}
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000144 	.word	0x20000144
 80032e0:	40020000 	.word	0x40020000
 80032e4:	20000148 	.word	0x20000148
 80032e8:	200037dc 	.word	0x200037dc
 80032ec:	200006a0 	.word	0x200006a0
 80032f0:	2000069c 	.word	0x2000069c

080032f4 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4604      	mov	r4, r0
 80032fc:	4608      	mov	r0, r1
 80032fe:	4611      	mov	r1, r2
 8003300:	461a      	mov	r2, r3
 8003302:	4623      	mov	r3, r4
 8003304:	80fb      	strh	r3, [r7, #6]
 8003306:	4603      	mov	r3, r0
 8003308:	80bb      	strh	r3, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	70fb      	strb	r3, [r7, #3]
 800330e:	4613      	mov	r3, r2
 8003310:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	73fb      	strb	r3, [r7, #15]
 8003316:	e009      	b.n	800332c <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8003318:	f897 3020 	ldrb.w	r3, [r7, #32]
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	88b9      	ldrh	r1, [r7, #4]
 8003320:	88f8      	ldrh	r0, [r7, #6]
 8003322:	f7ff fe91 	bl	8003048 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	3301      	adds	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	78bb      	ldrb	r3, [r7, #2]
 8003330:	429a      	cmp	r2, r3
 8003332:	d9f1      	bls.n	8003318 <lcdRect+0x24>
	}
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}

0800333e <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 800333e:	b590      	push	{r4, r7, lr}
 8003340:	b087      	sub	sp, #28
 8003342:	af02      	add	r7, sp, #8
 8003344:	4604      	mov	r4, r0
 8003346:	4608      	mov	r0, r1
 8003348:	4611      	mov	r1, r2
 800334a:	461a      	mov	r2, r3
 800334c:	4623      	mov	r3, r4
 800334e:	80fb      	strh	r3, [r7, #6]
 8003350:	4603      	mov	r3, r0
 8003352:	80bb      	strh	r3, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
 8003358:	4613      	mov	r3, r2
 800335a:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	88bb      	ldrh	r3, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d046      	beq.n	80033f2 <lcdRect2+0xb4>
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	78bb      	ldrb	r3, [r7, #2]
 8003368:	429a      	cmp	r2, r3
 800336a:	d042      	beq.n	80033f2 <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e00d      	b.n	800338e <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8003372:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003376:	7bfa      	ldrb	r2, [r7, #15]
 8003378:	88b9      	ldrh	r1, [r7, #4]
 800337a:	88f8      	ldrh	r0, [r7, #6]
 800337c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	4623      	mov	r3, r4
 8003384:	f7ff fa9a 	bl	80028bc <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	3301      	adds	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	78bb      	ldrb	r3, [r7, #2]
 8003392:	429a      	cmp	r2, r3
 8003394:	d9ed      	bls.n	8003372 <lcdRect2+0x34>
		}
		if(outline){
 8003396:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800339a:	2b00      	cmp	r3, #0
 800339c:	d029      	beq.n	80033f2 <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 800339e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	88b9      	ldrh	r1, [r7, #4]
 80033a6:	88f8      	ldrh	r0, [r7, #6]
 80033a8:	2401      	movs	r4, #1
 80033aa:	9400      	str	r4, [sp, #0]
 80033ac:	f7ff fa86 	bl	80028bc <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 80033b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033b4:	78ba      	ldrb	r2, [r7, #2]
 80033b6:	88b9      	ldrh	r1, [r7, #4]
 80033b8:	88f8      	ldrh	r0, [r7, #6]
 80033ba:	2401      	movs	r4, #1
 80033bc:	9400      	str	r4, [sp, #0]
 80033be:	f7ff fa7d 	bl	80028bc <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3301      	adds	r3, #1
 80033c8:	b299      	uxth	r1, r3
 80033ca:	78bb      	ldrb	r3, [r7, #2]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033d4:	88f8      	ldrh	r0, [r7, #6]
 80033d6:	f7ff f9fb 	bl	80027d0 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	b299      	uxth	r1, r3
 80033e2:	78bb      	ldrb	r3, [r7, #2]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033ec:	88b8      	ldrh	r0, [r7, #4]
 80033ee:	f7ff f9ef 	bl	80027d0 <lcdVLine>
		}
	}
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd90      	pop	{r4, r7, pc}
	...

080033fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003404:	f004 fa8e 	bl	8007924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003408:	f000 f88a 	bl	8003520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800340c:	f7fe fb1e 	bl	8001a4c <MX_GPIO_Init>
  MX_DMA_Init();
 8003410:	f7fe fafc 	bl	8001a0c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003414:	f000 fd64 	bl	8003ee0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003418:	f000 f9d8 	bl	80037cc <MX_SPI1_Init>
  MX_TIM1_Init();
 800341c:	f000 fb8e 	bl	8003b3c <MX_TIM1_Init>
  MX_TIM10_Init();
 8003420:	f000 fc2e 	bl	8003c80 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 8003424:	f000 fd86 	bl	8003f34 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8003428:	f7fe ffe2 	bl	80023f0 <MX_I2C1_Init>
  MX_TIM11_Init();
 800342c:	f000 fc4c 	bl	8003cc8 <MX_TIM11_Init>
  MX_RTC_Init();
 8003430:	f000 f972 	bl	8003718 <MX_RTC_Init>
  MX_TIM13_Init();
 8003434:	f000 fc6c 	bl	8003d10 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8003438:	482b      	ldr	r0, [pc, #172]	; (80034e8 <main+0xec>)
 800343a:	f007 fe59 	bl	800b0f0 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800343e:	482a      	ldr	r0, [pc, #168]	; (80034e8 <main+0xec>)
 8003440:	f007 fea6 	bl	800b190 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003444:	2100      	movs	r1, #0
 8003446:	4828      	ldr	r0, [pc, #160]	; (80034e8 <main+0xec>)
 8003448:	f007 ff6c 	bl	800b324 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 800344c:	4827      	ldr	r0, [pc, #156]	; (80034ec <main+0xf0>)
 800344e:	f007 fe9f 	bl	800b190 <HAL_TIM_Base_Start_IT>

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 8003452:	4827      	ldr	r0, [pc, #156]	; (80034f0 <main+0xf4>)
 8003454:	f007 fe9c 	bl	800b190 <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 8003458:	4826      	ldr	r0, [pc, #152]	; (80034f4 <main+0xf8>)
 800345a:	f7fe f929 	bl	80016b0 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 800345e:	4826      	ldr	r0, [pc, #152]	; (80034f8 <main+0xfc>)
 8003460:	f007 fe96 	bl	800b190 <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 8003464:	4c25      	ldr	r4, [pc, #148]	; (80034fc <main+0x100>)
 8003466:	463b      	mov	r3, r7
 8003468:	4925      	ldr	r1, [pc, #148]	; (8003500 <main+0x104>)
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fbd8 	bl	8001c20 <initGps>
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003478:	4620      	mov	r0, r4
 800347a:	4619      	mov	r1, r3
 800347c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003480:	461a      	mov	r2, r3
 8003482:	f00a f875 	bl	800d570 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8003486:	481f      	ldr	r0, [pc, #124]	; (8003504 <main+0x108>)
 8003488:	f7fd fe52 	bl	8001130 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 800348c:	f240 118f 	movw	r1, #399	; 0x18f
 8003490:	481d      	ldr	r0, [pc, #116]	; (8003508 <main+0x10c>)
 8003492:	f004 f900 	bl	8007696 <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 8003496:	f240 128f 	movw	r2, #399	; 0x18f
 800349a:	2102      	movs	r1, #2
 800349c:	481b      	ldr	r0, [pc, #108]	; (800350c <main+0x110>)
 800349e:	f004 f83d 	bl	800751c <cbuf_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 80034a2:	f7ff f857 	bl	8002554 <lcdClearBuffer>
  lcdRefresh();
 80034a6:	f7ff fedb 	bl	8003260 <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 80034aa:	4c19      	ldr	r4, [pc, #100]	; (8003510 <main+0x114>)
 80034ac:	463b      	mov	r3, r7
 80034ae:	4915      	ldr	r1, [pc, #84]	; (8003504 <main+0x108>)
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe f8a5 	bl	8001600 <getBmpData>
 80034b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ba:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80034be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80034c4:	2200      	movs	r2, #0
 80034c6:	4913      	ldr	r1, [pc, #76]	; (8003514 <main+0x118>)
 80034c8:	4813      	ldr	r0, [pc, #76]	; (8003518 <main+0x11c>)
 80034ca:	f007 f993 	bl	800a7f4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80034ce:	2200      	movs	r2, #0
 80034d0:	4912      	ldr	r1, [pc, #72]	; (800351c <main+0x120>)
 80034d2:	4811      	ldr	r0, [pc, #68]	; (8003518 <main+0x11c>)
 80034d4:	f007 fa70 	bl	800a9b8 <HAL_RTC_GetDate>
	  lcdClearBuffer();
 80034d8:	f7ff f83c 	bl	8002554 <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 80034dc:	f7fe ff6a 	bl	80023b4 <showGui>

	  lcdRefresh();
 80034e0:	f7ff febe 	bl	8003260 <lcdRefresh>
		bmpData = getBmpData(&bmp180module);
 80034e4:	e7e1      	b.n	80034aa <main+0xae>
 80034e6:	bf00      	nop
 80034e8:	20003838 	.word	0x20003838
 80034ec:	20003880 	.word	0x20003880
 80034f0:	200038c8 	.word	0x200038c8
 80034f4:	2000002c 	.word	0x2000002c
 80034f8:	20003910 	.word	0x20003910
 80034fc:	200035bc 	.word	0x200035bc
 8003500:	2000399c 	.word	0x2000399c
 8003504:	20000514 	.word	0x20000514
 8003508:	200035ac 	.word	0x200035ac
 800350c:	20003598 	.word	0x20003598
 8003510:	20000558 	.word	0x20000558
 8003514:	20003580 	.word	0x20003580
 8003518:	200037bc 	.word	0x200037bc
 800351c:	20003594 	.word	0x20003594

08003520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b094      	sub	sp, #80	; 0x50
 8003524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003526:	f107 0320 	add.w	r3, r7, #32
 800352a:	2230      	movs	r2, #48	; 0x30
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f00a f82c 	bl	800d58c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <SystemClock_Config+0xd0>)
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	4a28      	ldr	r2, [pc, #160]	; (80035f0 <SystemClock_Config+0xd0>)
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	6413      	str	r3, [r2, #64]	; 0x40
 8003554:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <SystemClock_Config+0xd0>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003560:	2300      	movs	r3, #0
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	4b23      	ldr	r3, [pc, #140]	; (80035f4 <SystemClock_Config+0xd4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <SystemClock_Config+0xd4>)
 800356a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <SystemClock_Config+0xd4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800357c:	2305      	movs	r3, #5
 800357e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003580:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003586:	2301      	movs	r3, #1
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800358a:	2302      	movs	r3, #2
 800358c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800358e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003594:	2304      	movs	r3, #4
 8003596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003598:	23a8      	movs	r3, #168	; 0xa8
 800359a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800359c:	2302      	movs	r3, #2
 800359e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80035a0:	2307      	movs	r3, #7
 80035a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a4:	f107 0320 	add.w	r3, r7, #32
 80035a8:	4618      	mov	r0, r3
 80035aa:	f006 f9bb 	bl	8009924 <HAL_RCC_OscConfig>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80035b4:	f000 f8a2 	bl	80036fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035b8:	230f      	movs	r3, #15
 80035ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035bc:	2302      	movs	r3, #2
 80035be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035d0:	f107 030c 	add.w	r3, r7, #12
 80035d4:	2105      	movs	r1, #5
 80035d6:	4618      	mov	r0, r3
 80035d8:	f006 fc1c 	bl	8009e14 <HAL_RCC_ClockConfig>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80035e2:	f000 f88b 	bl	80036fc <Error_Handler>
  }
}
 80035e6:	bf00      	nop
 80035e8:	3750      	adds	r7, #80	; 0x50
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40007000 	.word	0x40007000

080035f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM10){
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a27      	ldr	r2, [pc, #156]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <HAL_TIM_PeriodElapsedCallback+0x24>
		if(stwS.state){
 800360a:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800360c:	78db      	ldrb	r3, [r3, #3]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_TIM_PeriodElapsedCallback+0x24>
			stwTick();
 8003618:	f000 fa3c 	bl	8003a94 <stwTick>
		}
	}
	// APB2 168MHz -> after PSCL 20Hz
	if(htim->Instance == TIM11){
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d102      	bne.n	800362c <HAL_TIM_PeriodElapsedCallback+0x34>
		scanButtons(btnsPtrs);
 8003626:	4822      	ldr	r0, [pc, #136]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003628:	f7fe f9d6 	bl	80019d8 <scanButtons>
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d131      	bne.n	800369a <HAL_TIM_PeriodElapsedCallback+0xa2>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 8003636:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003638:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <HAL_TIM_PeriodElapsedCallback+0x52>
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003642:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8003646:	481c      	ldr	r0, [pc, #112]	; (80036b8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003648:	4798      	blx	r3


		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800364a:	2101      	movs	r1, #1
 800364c:	481b      	ldr	r0, [pc, #108]	; (80036bc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800364e:	f005 f8f0 	bl	8008832 <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003654:	7b1b      	ldrb	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00d      	beq.n	8003676 <HAL_TIM_PeriodElapsedCallback+0x7e>
 800365a:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800365c:	edd3 7a00 	vldr	s15, [r3]
 8003660:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800366c:	ee17 1a90 	vmov	r1, s15
 8003670:	4813      	ldr	r0, [pc, #76]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003672:	f004 f846 	bl	8007702 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	08db      	lsrs	r3, r3, #3
 8003682:	b29b      	uxth	r3, r3
 8003684:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003688:	7c1b      	ldrb	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_TIM_PeriodElapsedCallback+0xa2>
 800368e:	f107 030e 	add.w	r3, r7, #14
 8003692:	4619      	mov	r1, r3
 8003694:	480d      	ldr	r0, [pc, #52]	; (80036cc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003696:	f003 ff7e 	bl	8007596 <cbuf_ovw>

	}
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40014400 	.word	0x40014400
 80036a8:	20003834 	.word	0x20003834
 80036ac:	40014800 	.word	0x40014800
 80036b0:	2000002c 	.word	0x2000002c
 80036b4:	40001c00 	.word	0x40001c00
 80036b8:	200035bc 	.word	0x200035bc
 80036bc:	40020400 	.word	0x40020400
 80036c0:	200035ac 	.word	0x200035ac
 80036c4:	20000558 	.word	0x20000558
 80036c8:	cccccccd 	.word	0xcccccccd
 80036cc:	20003598 	.word	0x20003598

080036d0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <HAL_UART_RxCpltCallback+0x24>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d103      	bne.n	80036ea <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80036e2:	2180      	movs	r1, #128	; 0x80
 80036e4:	4804      	ldr	r0, [pc, #16]	; (80036f8 <HAL_UART_RxCpltCallback+0x28>)
 80036e6:	f005 f8a4 	bl	8008832 <HAL_GPIO_TogglePin>

	}
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40011400 	.word	0x40011400
 80036f8:	40020400 	.word	0x40020400

080036fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003700:	b672      	cpsid	i
}
 8003702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003704:	2201      	movs	r2, #1
 8003706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800370a:	4802      	ldr	r0, [pc, #8]	; (8003714 <Error_Handler+0x18>)
 800370c:	f005 f878 	bl	8008800 <HAL_GPIO_WritePin>
  while (1)
 8003710:	e7fe      	b.n	8003710 <Error_Handler+0x14>
 8003712:	bf00      	nop
 8003714:	40020400 	.word	0x40020400

08003718 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800372c:	2300      	movs	r3, #0
 800372e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <MX_RTC_Init+0x58>)
 8003732:	4a10      	ldr	r2, [pc, #64]	; (8003774 <MX_RTC_Init+0x5c>)
 8003734:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <MX_RTC_Init+0x58>)
 8003738:	2200      	movs	r2, #0
 800373a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <MX_RTC_Init+0x58>)
 800373e:	227f      	movs	r2, #127	; 0x7f
 8003740:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <MX_RTC_Init+0x58>)
 8003744:	22ff      	movs	r2, #255	; 0xff
 8003746:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <MX_RTC_Init+0x58>)
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <MX_RTC_Init+0x58>)
 8003750:	2200      	movs	r2, #0
 8003752:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <MX_RTC_Init+0x58>)
 8003756:	2200      	movs	r2, #0
 8003758:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800375a:	4805      	ldr	r0, [pc, #20]	; (8003770 <MX_RTC_Init+0x58>)
 800375c:	f006 ff3a 	bl	800a5d4 <HAL_RTC_Init>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003766:	f7ff ffc9 	bl	80036fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	200037bc 	.word	0x200037bc
 8003774:	40002800 	.word	0x40002800

08003778 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08e      	sub	sp, #56	; 0x38
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003780:	f107 0308 	add.w	r3, r7, #8
 8003784:	2230      	movs	r2, #48	; 0x30
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f009 feff 	bl	800d58c <memset>
  if(rtcHandle->Instance==RTC)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <HAL_RTC_MspInit+0x4c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d111      	bne.n	80037bc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003798:	2320      	movs	r3, #32
 800379a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800379c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037a0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	4618      	mov	r0, r3
 80037a8:	f006 fd54 	bl	800a254 <HAL_RCCEx_PeriphCLKConfig>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80037b2:	f7ff ffa3 	bl	80036fc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037b6:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <HAL_RTC_MspInit+0x50>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80037bc:	bf00      	nop
 80037be:	3738      	adds	r7, #56	; 0x38
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40002800 	.word	0x40002800
 80037c8:	42470e3c 	.word	0x42470e3c

080037cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80037d0:	4b17      	ldr	r3, [pc, #92]	; (8003830 <MX_SPI1_Init+0x64>)
 80037d2:	4a18      	ldr	r2, [pc, #96]	; (8003834 <MX_SPI1_Init+0x68>)
 80037d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037d6:	4b16      	ldr	r3, [pc, #88]	; (8003830 <MX_SPI1_Init+0x64>)
 80037d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037de:	4b14      	ldr	r3, [pc, #80]	; (8003830 <MX_SPI1_Init+0x64>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <MX_SPI1_Init+0x64>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <MX_SPI1_Init+0x64>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <MX_SPI1_Init+0x64>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <MX_SPI1_Init+0x64>)
 80037f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <MX_SPI1_Init+0x64>)
 8003800:	2220      	movs	r2, #32
 8003802:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <MX_SPI1_Init+0x64>)
 8003806:	2200      	movs	r2, #0
 8003808:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <MX_SPI1_Init+0x64>)
 800380c:	2200      	movs	r2, #0
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <MX_SPI1_Init+0x64>)
 8003812:	2200      	movs	r2, #0
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <MX_SPI1_Init+0x64>)
 8003818:	220a      	movs	r2, #10
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800381c:	4804      	ldr	r0, [pc, #16]	; (8003830 <MX_SPI1_Init+0x64>)
 800381e:	f007 f9d7 	bl	800abd0 <HAL_SPI_Init>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003828:	f7ff ff68 	bl	80036fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}
 8003830:	200037dc 	.word	0x200037dc
 8003834:	40013000 	.word	0x40013000

08003838 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a19      	ldr	r2, [pc, #100]	; (80038bc <HAL_SPI_MspInit+0x84>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d12b      	bne.n	80038b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <HAL_SPI_MspInit+0x88>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <HAL_SPI_MspInit+0x88>)
 8003864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003868:	6453      	str	r3, [r2, #68]	; 0x44
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <HAL_SPI_MspInit+0x88>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <HAL_SPI_MspInit+0x88>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	4a10      	ldr	r2, [pc, #64]	; (80038c0 <HAL_SPI_MspInit+0x88>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <HAL_SPI_MspInit+0x88>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003892:	23a0      	movs	r3, #160	; 0xa0
 8003894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003896:	2302      	movs	r3, #2
 8003898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389e:	2303      	movs	r3, #3
 80038a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038a2:	2305      	movs	r3, #5
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a6:	f107 0314 	add.w	r3, r7, #20
 80038aa:	4619      	mov	r1, r3
 80038ac:	4805      	ldr	r0, [pc, #20]	; (80038c4 <HAL_SPI_MspInit+0x8c>)
 80038ae:	f004 fde3 	bl	8008478 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80038b2:	bf00      	nop
 80038b4:	3728      	adds	r7, #40	; 0x28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40013000 	.word	0x40013000
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40020000 	.word	0x40020000

080038c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <HAL_MspInit+0x4c>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	4a0f      	ldr	r2, [pc, #60]	; (8003914 <HAL_MspInit+0x4c>)
 80038d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038dc:	6453      	str	r3, [r2, #68]	; 0x44
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <HAL_MspInit+0x4c>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_MspInit+0x4c>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a08      	ldr	r2, [pc, #32]	; (8003914 <HAL_MspInit+0x4c>)
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_MspInit+0x4c>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800

08003918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800391c:	e7fe      	b.n	800391c <NMI_Handler+0x4>

0800391e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 8003922:	f7ff feeb 	bl	80036fc <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003926:	e7fe      	b.n	8003926 <HardFault_Handler+0x8>

08003928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800392c:	e7fe      	b.n	800392c <MemManage_Handler+0x4>

0800392e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003932:	e7fe      	b.n	8003932 <BusFault_Handler+0x4>

08003934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003938:	e7fe      	b.n	8003938 <UsageFault_Handler+0x4>

0800393a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003956:	b480      	push	{r7}
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003968:	f004 f82e 	bl	80079c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800396c:	bf00      	nop
 800396e:	bd80      	pop	{r7, pc}

08003970 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003974:	4803      	ldr	r0, [pc, #12]	; (8003984 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003976:	f007 fd9d 	bl	800b4b4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800397a:	4803      	ldr	r0, [pc, #12]	; (8003988 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800397c:	f007 fd9a 	bl	800b4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20003838 	.word	0x20003838
 8003988:	20003880 	.word	0x20003880

0800398c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003990:	4803      	ldr	r0, [pc, #12]	; (80039a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003992:	f007 fd8f 	bl	800b4b4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003996:	4803      	ldr	r0, [pc, #12]	; (80039a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003998:	f007 fd8c 	bl	800b4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20003838 	.word	0x20003838
 80039a4:	200038c8 	.word	0x200038c8

080039a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 80039ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80039b0:	f004 ff5a 	bl	8008868 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 80039b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039b8:	f004 ff56 	bl	8008868 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80039bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039c0:	f004 ff52 	bl	8008868 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 80039c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039c8:	f004 ff4e 	bl	8008868 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80039cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039d0:	f004 ff4a 	bl	8008868 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80039d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80039d8:	f004 ff46 	bl	8008868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}

080039e0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80039e6:	f007 fd65 	bl	800b4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20003910 	.word	0x20003910

080039f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <DMA2_Stream1_IRQHandler+0x10>)
 80039fa:	f004 fad3 	bl	8007fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200039e0 	.word	0x200039e0

08003a08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <USART6_IRQHandler+0x10>)
 8003a0e:	f008 fc7b 	bl	800c308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2000399c 	.word	0x2000399c

08003a1c <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 8003a20:	2228      	movs	r2, #40	; 0x28
 8003a22:	2100      	movs	r1, #0
 8003a24:	4804      	ldr	r0, [pc, #16]	; (8003a38 <clearTable+0x1c>)
 8003a26:	f009 fdb1 	bl	800d58c <memset>
	stwT.position = 0;
 8003a2a:	4b03      	ldr	r3, [pc, #12]	; (8003a38 <clearTable+0x1c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	2000014c 	.word	0x2000014c

08003a3c <addItem>:
void addItem(stw_struct stwS){
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <addItem+0x38>)
 8003a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a50:	461a      	mov	r2, r3
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <addItem+0x38>)
 8003a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <addItem+0x38>)
 8003a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a5e:	3301      	adds	r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <addItem+0x38>)
 8003a64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	2000014c 	.word	0x2000014c

08003a78 <stwStart>:

void stwStart(void){
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_ENABLED;
 8003a7c:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <stwStart+0x18>)
 8003a7e:	78d3      	ldrb	r3, [r2, #3]
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	70d3      	strb	r3, [r2, #3]
}
 8003a86:	bf00      	nop
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	20003834 	.word	0x20003834

08003a94 <stwTick>:
void stwTick(void){
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
	stwS.cnt++;
 8003a98:	4b08      	ldr	r3, [pc, #32]	; (8003abc <stwTick+0x28>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003aa6:	4905      	ldr	r1, [pc, #20]	; (8003abc <stwTick+0x28>)
 8003aa8:	680b      	ldr	r3, [r1, #0]
 8003aaa:	f362 0317 	bfi	r3, r2, #0, #24
 8003aae:	600b      	str	r3, [r1, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20003834 	.word	0x20003834

08003ac0 <stwStop>:
void stwStop(void){
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 8003ac4:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <stwStop+0x18>)
 8003ac6:	78d3      	ldrb	r3, [r2, #3]
 8003ac8:	f36f 0300 	bfc	r3, #0, #1
 8003acc:	70d3      	strb	r3, [r2, #3]
}
 8003ace:	bf00      	nop
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	20003834 	.word	0x20003834

08003adc <stwClear>:
void stwClear(void){
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
	stwS.cnt = 0;
 8003ae0:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <stwClear+0x18>)
 8003ae2:	6813      	ldr	r3, [r2, #0]
 8003ae4:	f36f 0317 	bfc	r3, #0, #24
 8003ae8:	6013      	str	r3, [r2, #0]
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	20003834 	.word	0x20003834

08003af8 <stwSave>:
void stwSave(void){
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <stwSave+0x18>)
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <stwSave+0x1c>)
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4798      	blx	r3
}
 8003b0c:	bf00      	nop
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	2000014c 	.word	0x2000014c
 8003b14:	20003834 	.word	0x20003834

08003b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <SystemInit+0x20>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	4a05      	ldr	r2, [pc, #20]	; (8003b38 <SystemInit+0x20>)
 8003b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b096      	sub	sp, #88	; 0x58
 8003b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	611a      	str	r2, [r3, #16]
 8003b6a:	615a      	str	r2, [r3, #20]
 8003b6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b6e:	1d3b      	adds	r3, r7, #4
 8003b70:	2220      	movs	r2, #32
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f009 fd09 	bl	800d58c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b7a:	4b3f      	ldr	r3, [pc, #252]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003b7c:	4a3f      	ldr	r2, [pc, #252]	; (8003c7c <MX_TIM1_Init+0x140>)
 8003b7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8003b80:	4b3d      	ldr	r3, [pc, #244]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003b82:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003b86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b88:	4b3b      	ldr	r3, [pc, #236]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8003b8e:	4b3a      	ldr	r3, [pc, #232]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003b90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b96:	4b38      	ldr	r3, [pc, #224]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b9c:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ba2:	4b35      	ldr	r3, [pc, #212]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003ba4:	2280      	movs	r2, #128	; 0x80
 8003ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ba8:	4833      	ldr	r0, [pc, #204]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003baa:	f007 faa1 	bl	800b0f0 <HAL_TIM_Base_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003bb4:	f7ff fda2 	bl	80036fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bbc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	482c      	ldr	r0, [pc, #176]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003bc6:	f007 fe3f 	bl	800b848 <HAL_TIM_ConfigClockSource>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003bd0:	f7ff fd94 	bl	80036fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003bd4:	4828      	ldr	r0, [pc, #160]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003bd6:	f007 fb4b 	bl	800b270 <HAL_TIM_PWM_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003be0:	f7ff fd8c 	bl	80036fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003be4:	2300      	movs	r3, #0
 8003be6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4821      	ldr	r0, [pc, #132]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003bf4:	f008 fa28 	bl	800c048 <HAL_TIMEx_MasterConfigSynchronization>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003bfe:	f7ff fd7d 	bl	80036fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c02:	2360      	movs	r3, #96	; 0x60
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8003c06:	2302      	movs	r3, #2
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c16:	2300      	movs	r3, #0
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c22:	2200      	movs	r2, #0
 8003c24:	4619      	mov	r1, r3
 8003c26:	4814      	ldr	r0, [pc, #80]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003c28:	f007 fd4c 	bl	800b6c4 <HAL_TIM_PWM_ConfigChannel>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8003c32:	f7ff fd63 	bl	80036fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c50:	2300      	movs	r3, #0
 8003c52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c54:	1d3b      	adds	r3, r7, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	4807      	ldr	r0, [pc, #28]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003c5a:	f008 fa71 	bl	800c140 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003c64:	f7ff fd4a 	bl	80036fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c68:	4803      	ldr	r0, [pc, #12]	; (8003c78 <MX_TIM1_Init+0x13c>)
 8003c6a:	f000 f8ff 	bl	8003e6c <HAL_TIM_MspPostInit>

}
 8003c6e:	bf00      	nop
 8003c70:	3758      	adds	r7, #88	; 0x58
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20003838 	.word	0x20003838
 8003c7c:	40010000 	.word	0x40010000

08003c80 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <MX_TIM10_Init+0x40>)
 8003c86:	4a0f      	ldr	r2, [pc, #60]	; (8003cc4 <MX_TIM10_Init+0x44>)
 8003c88:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <MX_TIM10_Init+0x40>)
 8003c8c:	f244 129f 	movw	r2, #16799	; 0x419f
 8003c90:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c92:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <MX_TIM10_Init+0x40>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <MX_TIM10_Init+0x40>)
 8003c9a:	2263      	movs	r2, #99	; 0x63
 8003c9c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c9e:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <MX_TIM10_Init+0x40>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <MX_TIM10_Init+0x40>)
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003caa:	4805      	ldr	r0, [pc, #20]	; (8003cc0 <MX_TIM10_Init+0x40>)
 8003cac:	f007 fa20 	bl	800b0f0 <HAL_TIM_Base_Init>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003cb6:	f7ff fd21 	bl	80036fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20003880 	.word	0x20003880
 8003cc4:	40014400 	.word	0x40014400

08003cc8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <MX_TIM11_Init+0x40>)
 8003cce:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <MX_TIM11_Init+0x44>)
 8003cd0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <MX_TIM11_Init+0x40>)
 8003cd4:	f244 129f 	movw	r2, #16799	; 0x419f
 8003cd8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <MX_TIM11_Init+0x40>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 499;
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <MX_TIM11_Init+0x40>)
 8003ce2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003ce6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ce8:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <MX_TIM11_Init+0x40>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <MX_TIM11_Init+0x40>)
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003cf4:	4804      	ldr	r0, [pc, #16]	; (8003d08 <MX_TIM11_Init+0x40>)
 8003cf6:	f007 f9fb 	bl	800b0f0 <HAL_TIM_Base_Init>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8003d00:	f7ff fcfc 	bl	80036fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003d04:	bf00      	nop
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	200038c8 	.word	0x200038c8
 8003d0c:	40014800 	.word	0x40014800

08003d10 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <MX_TIM13_Init+0x40>)
 8003d16:	4a0f      	ldr	r2, [pc, #60]	; (8003d54 <MX_TIM13_Init+0x44>)
 8003d18:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <MX_TIM13_Init+0x40>)
 8003d1c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003d20:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <MX_TIM13_Init+0x40>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <MX_TIM13_Init+0x40>)
 8003d2a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003d2e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <MX_TIM13_Init+0x40>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <MX_TIM13_Init+0x40>)
 8003d38:	2280      	movs	r2, #128	; 0x80
 8003d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003d3c:	4804      	ldr	r0, [pc, #16]	; (8003d50 <MX_TIM13_Init+0x40>)
 8003d3e:	f007 f9d7 	bl	800b0f0 <HAL_TIM_Base_Init>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003d48:	f7ff fcd8 	bl	80036fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20003910 	.word	0x20003910
 8003d54:	40001c00 	.word	0x40001c00

08003d58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3c      	ldr	r2, [pc, #240]	; (8003e58 <HAL_TIM_Base_MspInit+0x100>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d11e      	bne.n	8003da8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	4a3a      	ldr	r2, [pc, #232]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6453      	str	r3, [r2, #68]	; 0x44
 8003d7a:	4b38      	ldr	r3, [pc, #224]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	2019      	movs	r0, #25
 8003d8c:	f003 ff3b 	bl	8007c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003d90:	2019      	movs	r0, #25
 8003d92:	f003 ff54 	bl	8007c3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2100      	movs	r1, #0
 8003d9a:	201a      	movs	r0, #26
 8003d9c:	f003 ff33 	bl	8007c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003da0:	201a      	movs	r0, #26
 8003da2:	f003 ff4c 	bl	8007c3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003da6:	e052      	b.n	8003e4e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM10)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2c      	ldr	r2, [pc, #176]	; (8003e60 <HAL_TIM_Base_MspInit+0x108>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d116      	bne.n	8003de0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	2019      	movs	r0, #25
 8003dd4:	f003 ff17 	bl	8007c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003dd8:	2019      	movs	r0, #25
 8003dda:	f003 ff30 	bl	8007c3e <HAL_NVIC_EnableIRQ>
}
 8003dde:	e036      	b.n	8003e4e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM11)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <HAL_TIM_Base_MspInit+0x10c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d116      	bne.n	8003e18 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	4a1a      	ldr	r2, [pc, #104]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfa:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2100      	movs	r1, #0
 8003e0a:	201a      	movs	r0, #26
 8003e0c:	f003 fefb 	bl	8007c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003e10:	201a      	movs	r0, #26
 8003e12:	f003 ff14 	bl	8007c3e <HAL_NVIC_EnableIRQ>
}
 8003e16:	e01a      	b.n	8003e4e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM13)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <HAL_TIM_Base_MspInit+0x110>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d115      	bne.n	8003e4e <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a0c      	ldr	r2, [pc, #48]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <HAL_TIM_Base_MspInit+0x104>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2100      	movs	r1, #0
 8003e42:	202c      	movs	r0, #44	; 0x2c
 8003e44:	f003 fedf 	bl	8007c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003e48:	202c      	movs	r0, #44	; 0x2c
 8003e4a:	f003 fef8 	bl	8007c3e <HAL_NVIC_EnableIRQ>
}
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40014400 	.word	0x40014400
 8003e64:	40014800 	.word	0x40014800
 8003e68:	40001c00 	.word	0x40001c00

08003e6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a12      	ldr	r2, [pc, #72]	; (8003ed4 <HAL_TIM_MspPostInit+0x68>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d11e      	bne.n	8003ecc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_TIM_MspPostInit+0x6c>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <HAL_TIM_MspPostInit+0x6c>)
 8003e98:	f043 0310 	orr.w	r3, r3, #16
 8003e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <HAL_TIM_MspPostInit+0x6c>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ec0:	f107 030c 	add.w	r3, r7, #12
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4805      	ldr	r0, [pc, #20]	; (8003edc <HAL_TIM_MspPostInit+0x70>)
 8003ec8:	f004 fad6 	bl	8008478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003ecc:	bf00      	nop
 8003ece:	3720      	adds	r7, #32
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40021000 	.word	0x40021000

08003ee0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <MX_USART3_UART_Init+0x50>)
 8003ee8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ef0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003f04:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003f06:	220c      	movs	r2, #12
 8003f08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f16:	4805      	ldr	r0, [pc, #20]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003f18:	f008 f978 	bl	800c20c <HAL_UART_Init>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003f22:	f7ff fbeb 	bl	80036fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20003958 	.word	0x20003958
 8003f30:	40004800 	.word	0x40004800

08003f34 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <MX_USART6_UART_Init+0x4c>)
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <MX_USART6_UART_Init+0x50>)
 8003f3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <MX_USART6_UART_Init+0x4c>)
 8003f40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003f44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <MX_USART6_UART_Init+0x4c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <MX_USART6_UART_Init+0x4c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <MX_USART6_UART_Init+0x4c>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <MX_USART6_UART_Init+0x4c>)
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <MX_USART6_UART_Init+0x4c>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <MX_USART6_UART_Init+0x4c>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <MX_USART6_UART_Init+0x4c>)
 8003f6c:	f008 f94e 	bl	800c20c <HAL_UART_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003f76:	f7ff fbc1 	bl	80036fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	2000399c 	.word	0x2000399c
 8003f84:	40011400 	.word	0x40011400

08003f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08c      	sub	sp, #48	; 0x30
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	f107 031c 	add.w	r3, r7, #28
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a4d      	ldr	r2, [pc, #308]	; (80040dc <HAL_UART_MspInit+0x154>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d12d      	bne.n	8004006 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <HAL_UART_MspInit+0x158>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a4b      	ldr	r2, [pc, #300]	; (80040e0 <HAL_UART_MspInit+0x158>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b49      	ldr	r3, [pc, #292]	; (80040e0 <HAL_UART_MspInit+0x158>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	4b45      	ldr	r3, [pc, #276]	; (80040e0 <HAL_UART_MspInit+0x158>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	4a44      	ldr	r2, [pc, #272]	; (80040e0 <HAL_UART_MspInit+0x158>)
 8003fd0:	f043 0308 	orr.w	r3, r3, #8
 8003fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd6:	4b42      	ldr	r3, [pc, #264]	; (80040e0 <HAL_UART_MspInit+0x158>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003fe2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ff4:	2307      	movs	r3, #7
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ff8:	f107 031c 	add.w	r3, r7, #28
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4839      	ldr	r0, [pc, #228]	; (80040e4 <HAL_UART_MspInit+0x15c>)
 8004000:	f004 fa3a 	bl	8008478 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004004:	e066      	b.n	80040d4 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART6)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a37      	ldr	r2, [pc, #220]	; (80040e8 <HAL_UART_MspInit+0x160>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d161      	bne.n	80040d4 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <HAL_UART_MspInit+0x158>)
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	4a31      	ldr	r2, [pc, #196]	; (80040e0 <HAL_UART_MspInit+0x158>)
 800401a:	f043 0320 	orr.w	r3, r3, #32
 800401e:	6453      	str	r3, [r2, #68]	; 0x44
 8004020:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <HAL_UART_MspInit+0x158>)
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_UART_MspInit+0x158>)
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <HAL_UART_MspInit+0x158>)
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	6313      	str	r3, [r2, #48]	; 0x30
 800403c:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <HAL_UART_MspInit+0x158>)
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004048:	23c0      	movs	r3, #192	; 0xc0
 800404a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404c:	2302      	movs	r3, #2
 800404e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004050:	2300      	movs	r3, #0
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004054:	2303      	movs	r3, #3
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004058:	2308      	movs	r3, #8
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800405c:	f107 031c 	add.w	r3, r7, #28
 8004060:	4619      	mov	r1, r3
 8004062:	4822      	ldr	r0, [pc, #136]	; (80040ec <HAL_UART_MspInit+0x164>)
 8004064:	f004 fa08 	bl	8008478 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <HAL_UART_MspInit+0x168>)
 800406a:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <HAL_UART_MspInit+0x16c>)
 800406c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_UART_MspInit+0x168>)
 8004070:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004074:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004076:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <HAL_UART_MspInit+0x168>)
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800407c:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <HAL_UART_MspInit+0x168>)
 800407e:	2200      	movs	r2, #0
 8004080:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004082:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <HAL_UART_MspInit+0x168>)
 8004084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004088:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800408a:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_UART_MspInit+0x168>)
 800408c:	2200      	movs	r2, #0
 800408e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <HAL_UART_MspInit+0x168>)
 8004092:	2200      	movs	r2, #0
 8004094:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <HAL_UART_MspInit+0x168>)
 8004098:	2200      	movs	r2, #0
 800409a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <HAL_UART_MspInit+0x168>)
 800409e:	2200      	movs	r2, #0
 80040a0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <HAL_UART_MspInit+0x168>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80040a8:	4811      	ldr	r0, [pc, #68]	; (80040f0 <HAL_UART_MspInit+0x168>)
 80040aa:	f003 fde3 	bl	8007c74 <HAL_DMA_Init>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80040b4:	f7ff fb22 	bl	80036fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0d      	ldr	r2, [pc, #52]	; (80040f0 <HAL_UART_MspInit+0x168>)
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <HAL_UART_MspInit+0x168>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80040c4:	2200      	movs	r2, #0
 80040c6:	2100      	movs	r1, #0
 80040c8:	2047      	movs	r0, #71	; 0x47
 80040ca:	f003 fd9c 	bl	8007c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80040ce:	2047      	movs	r0, #71	; 0x47
 80040d0:	f003 fdb5 	bl	8007c3e <HAL_NVIC_EnableIRQ>
}
 80040d4:	bf00      	nop
 80040d6:	3730      	adds	r7, #48	; 0x30
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40004800 	.word	0x40004800
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40020c00 	.word	0x40020c00
 80040e8:	40011400 	.word	0x40011400
 80040ec:	40020800 	.word	0x40020800
 80040f0:	200039e0 	.word	0x200039e0
 80040f4:	40026428 	.word	0x40026428

080040f8 <setDefaultClbcks>:


// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <setDefaultClbcks+0x34>)
 80040fe:	4a0c      	ldr	r2, [pc, #48]	; (8004130 <setDefaultClbcks+0x38>)
 8004100:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004102:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <setDefaultClbcks+0x3c>)
 8004104:	4a0c      	ldr	r2, [pc, #48]	; (8004138 <setDefaultClbcks+0x40>)
 8004106:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <setDefaultClbcks+0x44>)
 800410a:	4a0d      	ldr	r2, [pc, #52]	; (8004140 <setDefaultClbcks+0x48>)
 800410c:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <setDefaultClbcks+0x4c>)
 8004110:	4a0d      	ldr	r2, [pc, #52]	; (8004148 <setDefaultClbcks+0x50>)
 8004112:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 8004114:	4b0d      	ldr	r3, [pc, #52]	; (800414c <setDefaultClbcks+0x54>)
 8004116:	4a0e      	ldr	r2, [pc, #56]	; (8004150 <setDefaultClbcks+0x58>)
 8004118:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <setDefaultClbcks+0x5c>)
 800411c:	2200      	movs	r2, #0
 800411e:	611a      	str	r2, [r3, #16]
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000568 	.word	0x20000568
 8004130:	080022d9 	.word	0x080022d9
 8004134:	200005b0 	.word	0x200005b0
 8004138:	080022e9 	.word	0x080022e9
 800413c:	2000058c 	.word	0x2000058c
 8004140:	08004639 	.word	0x08004639
 8004144:	2000061c 	.word	0x2000061c
 8004148:	0800467d 	.word	0x0800467d
 800414c:	200005d4 	.word	0x200005d4
 8004150:	080046c9 	.word	0x080046c9
 8004154:	200005f8 	.word	0x200005f8

08004158 <baroSetup>:

// function executed once on module load
void baroSetup(void){
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800415c:	f7ff ffcc 	bl	80040f8 <setDefaultClbcks>
}
 8004160:	bf00      	nop
 8004162:	bd80      	pop	{r7, pc}

08004164 <baroMain>:
uint16_t maxX = 347;
uint8_t maxHeight = 225;
uint8_t minHeight = 110;

// main function
void baroMain(void){
 8004164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004168:	b0b2      	sub	sp, #200	; 0xc8
 800416a:	af04      	add	r7, sp, #16
	uint16_t minBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 800416c:	2100      	movs	r1, #0
 800416e:	488b      	ldr	r0, [pc, #556]	; (800439c <baroMain+0x238>)
 8004170:	f003 fa6f 	bl	8007652 <cbuf_readn>
 8004174:	4603      	mov	r3, r0
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	uint16_t maxBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 800417c:	2100      	movs	r1, #0
 800417e:	4887      	ldr	r0, [pc, #540]	; (800439c <baroMain+0x238>)
 8004180:	f003 fa67 	bl	8007652 <cbuf_readn>
 8004184:	4603      	mov	r3, r0
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	uint16_t minTemp = read_nth_ring_buffer(&tempRing, 0);
 800418c:	2100      	movs	r1, #0
 800418e:	4884      	ldr	r0, [pc, #528]	; (80043a0 <baroMain+0x23c>)
 8004190:	f003 fb05 	bl	800779e <read_nth_ring_buffer>
 8004194:	4603      	mov	r3, r0
 8004196:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	uint16_t maxTemp = read_nth_ring_buffer(&tempRing, 0);
 800419a:	2100      	movs	r1, #0
 800419c:	4880      	ldr	r0, [pc, #512]	; (80043a0 <baroMain+0x23c>)
 800419e:	f003 fafe 	bl	800779e <read_nth_ring_buffer>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	char str1[50] = {0};
 80041a8:	2300      	movs	r3, #0
 80041aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041b0:	222e      	movs	r2, #46	; 0x2e
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f009 f9e9 	bl	800d58c <memset>
	char str3[50] = {0};
 80041ba:	2300      	movs	r3, #0
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80041be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041c2:	222e      	movs	r2, #46	; 0x2e
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f009 f9e0 	bl	800d58c <memset>
	char str4[50] = {0};
 80041cc:	2300      	movs	r3, #0
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	222e      	movs	r2, #46	; 0x2e
 80041d6:	2100      	movs	r1, #0
 80041d8:	4618      	mov	r0, r3
 80041da:	f009 f9d7 	bl	800d58c <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 80041de:	4b71      	ldr	r3, [pc, #452]	; (80043a4 <baroMain+0x240>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc f9ca 	bl	800057c <__aeabi_f2d>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80041f0:	496d      	ldr	r1, [pc, #436]	; (80043a8 <baroMain+0x244>)
 80041f2:	f00a faf9 	bl	800e7e8 <siprintf>
	lcdPutStr(10, 14, str1, font_12_zekton);
 80041f6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80041fa:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <baroMain+0x248>)
 80041fc:	210e      	movs	r1, #14
 80041fe:	200a      	movs	r0, #10
 8004200:	f7fe fab8 	bl	8002774 <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 8004204:	4b67      	ldr	r3, [pc, #412]	; (80043a4 <baroMain+0x240>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004210:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80043b0 <baroMain+0x24c>
 8004214:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004218:	ee16 0a90 	vmov	r0, s13
 800421c:	f7fc f9ae 	bl	800057c <__aeabi_f2d>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8004228:	4962      	ldr	r1, [pc, #392]	; (80043b4 <baroMain+0x250>)
 800422a:	f00a fadd 	bl	800e7e8 <siprintf>
	lcdPutStr(10, 30, str1, font_12_zekton);
 800422e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004232:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <baroMain+0x248>)
 8004234:	211e      	movs	r1, #30
 8004236:	200a      	movs	r0, #10
 8004238:	f7fe fa9c 	bl	8002774 <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 800423c:	4b5e      	ldr	r3, [pc, #376]	; (80043b8 <baroMain+0x254>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d123      	bne.n	800428c <baroMain+0x128>
		sprintf(&str4, "Fixed altitude mode");
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	495d      	ldr	r1, [pc, #372]	; (80043bc <baroMain+0x258>)
 8004248:	4618      	mov	r0, r3
 800424a:	f00a facd 	bl	800e7e8 <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 800424e:	4b55      	ldr	r3, [pc, #340]	; (80043a4 <baroMain+0x240>)
 8004250:	edd3 7a03 	vldr	s15, [r3, #12]
 8004254:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80043b0 <baroMain+0x24c>
 8004258:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800425c:	ee16 0a90 	vmov	r0, s13
 8004260:	f7fc f98c 	bl	800057c <__aeabi_f2d>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800426c:	4954      	ldr	r1, [pc, #336]	; (80043c0 <baroMain+0x25c>)
 800426e:	f00a fabb 	bl	800e7e8 <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 8004272:	4b54      	ldr	r3, [pc, #336]	; (80043c4 <baroMain+0x260>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc f980 	bl	800057c <__aeabi_f2d>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004284:	4950      	ldr	r1, [pc, #320]	; (80043c8 <baroMain+0x264>)
 8004286:	f00a faaf 	bl	800e7e8 <siprintf>
 800428a:	e022      	b.n	80042d2 <baroMain+0x16e>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	494f      	ldr	r1, [pc, #316]	; (80043cc <baroMain+0x268>)
 8004290:	4618      	mov	r0, r3
 8004292:	f00a faa9 	bl	800e7e8 <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 8004296:	4b43      	ldr	r3, [pc, #268]	; (80043a4 <baroMain+0x240>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc f96e 	bl	800057c <__aeabi_f2d>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80042a8:	4949      	ldr	r1, [pc, #292]	; (80043d0 <baroMain+0x26c>)
 80042aa:	f00a fa9d 	bl	800e7e8 <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 80042ae:	4b49      	ldr	r3, [pc, #292]	; (80043d4 <baroMain+0x270>)
 80042b0:	edd3 7a00 	vldr	s15, [r3]
 80042b4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80043b0 <baroMain+0x24c>
 80042b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80042bc:	ee16 0a90 	vmov	r0, s13
 80042c0:	f7fc f95c 	bl	800057c <__aeabi_f2d>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80042cc:	4942      	ldr	r1, [pc, #264]	; (80043d8 <baroMain+0x274>)
 80042ce:	f00a fa8b 	bl	800e7e8 <siprintf>
	}
	lcdPutStr(10, 50, str4, font_12_zekton);
 80042d2:	1d3a      	adds	r2, r7, #4
 80042d4:	4b35      	ldr	r3, [pc, #212]	; (80043ac <baroMain+0x248>)
 80042d6:	2132      	movs	r1, #50	; 0x32
 80042d8:	200a      	movs	r0, #10
 80042da:	f7fe fa4b 	bl	8002774 <lcdPutStr>
	lcdPutStr(10, 66, str1, font_12_zekton);
 80042de:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80042e2:	4b32      	ldr	r3, [pc, #200]	; (80043ac <baroMain+0x248>)
 80042e4:	2142      	movs	r1, #66	; 0x42
 80042e6:	200a      	movs	r0, #10
 80042e8:	f7fe fa44 	bl	8002774 <lcdPutStr>
	lcdPutStr(10, 82, str3, font_12_zekton);
 80042ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042f0:	4b2e      	ldr	r3, [pc, #184]	; (80043ac <baroMain+0x248>)
 80042f2:	2152      	movs	r1, #82	; 0x52
 80042f4:	200a      	movs	r0, #10
 80042f6:	f7fe fa3d 	bl	8002774 <lcdPutStr>

	for(uint16_t i=0; i<tempRing.num_entries; i++){
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8004300:	e041      	b.n	8004386 <baroMain+0x222>
		uint16_t* currB= (uint16_t*)(cbuf_readn(&baroRing, i));
 8004302:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004306:	4619      	mov	r1, r3
 8004308:	4824      	ldr	r0, [pc, #144]	; (800439c <baroMain+0x238>)
 800430a:	f003 f9a2 	bl	8007652 <cbuf_readn>
 800430e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		uint16_t currT= read_nth_ring_buffer(&tempRing, i);
 8004312:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004316:	4619      	mov	r1, r3
 8004318:	4821      	ldr	r0, [pc, #132]	; (80043a0 <baroMain+0x23c>)
 800431a:	f003 fa40 	bl	800779e <read_nth_ring_buffer>
 800431e:	4603      	mov	r3, r0
 8004320:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		if(*currB>=maxBaro) maxBaro = *currB;
 8004324:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800432e:	429a      	cmp	r2, r3
 8004330:	d804      	bhi.n	800433c <baroMain+0x1d8>
 8004332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		if(*currB<=minBaro) minBaro = *currB;
 800433c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8004346:	429a      	cmp	r2, r3
 8004348:	d304      	bcc.n	8004354 <baroMain+0x1f0>
 800434a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		if(currT>=maxTemp) maxTemp = currT;
 8004354:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004358:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800435c:	429a      	cmp	r2, r3
 800435e:	d303      	bcc.n	8004368 <baroMain+0x204>
 8004360:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004364:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		if(currT<=minTemp) minTemp = currT;
 8004368:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800436c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004370:	429a      	cmp	r2, r3
 8004372:	d803      	bhi.n	800437c <baroMain+0x218>
 8004374:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004378:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	for(uint16_t i=0; i<tempRing.num_entries; i++){
 800437c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004380:	3301      	adds	r3, #1
 8004382:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <baroMain+0x23c>)
 8004388:	891b      	ldrh	r3, [r3, #8]
 800438a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800438e:	429a      	cmp	r2, r3
 8004390:	d3b7      	bcc.n	8004302 <baroMain+0x19e>
	}
	for(uint16_t j=minX; j<maxX; j++){
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <baroMain+0x278>)
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800439a:	e0ba      	b.n	8004512 <baroMain+0x3ae>
 800439c:	20003598 	.word	0x20003598
 80043a0:	200035ac 	.word	0x200035ac
 80043a4:	20000558 	.word	0x20000558
 80043a8:	08014d20 	.word	0x08014d20
 80043ac:	08015a48 	.word	0x08015a48
 80043b0:	42c80000 	.word	0x42c80000
 80043b4:	08014d38 	.word	0x08014d38
 80043b8:	20003a40 	.word	0x20003a40
 80043bc:	08014d54 	.word	0x08014d54
 80043c0:	08014d68 	.word	0x08014d68
 80043c4:	20000004 	.word	0x20000004
 80043c8:	08014d8c 	.word	0x08014d8c
 80043cc:	08014dac 	.word	0x08014dac
 80043d0:	08014dc0 	.word	0x08014dc0
 80043d4:	20000000 	.word	0x20000000
 80043d8:	08014de0 	.word	0x08014de0
 80043dc:	20000184 	.word	0x20000184
		uint16_t i = (j-minX)*baroRing.elemNum/(maxX-minX);
 80043e0:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80043e4:	4a8c      	ldr	r2, [pc, #560]	; (8004618 <baroMain+0x4b4>)
 80043e6:	8812      	ldrh	r2, [r2, #0]
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	4a8c      	ldr	r2, [pc, #560]	; (800461c <baroMain+0x4b8>)
 80043ec:	8912      	ldrh	r2, [r2, #8]
 80043ee:	fb03 f202 	mul.w	r2, r3, r2
 80043f2:	4b8b      	ldr	r3, [pc, #556]	; (8004620 <baroMain+0x4bc>)
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	4619      	mov	r1, r3
 80043f8:	4b87      	ldr	r3, [pc, #540]	; (8004618 <baroMain+0x4b4>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	1acb      	subs	r3, r1, r3
 80043fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8004402:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		// graph data
		uint16_t* vvaall= (uint16_t*)(cbuf_readn(&baroRing, i));
 8004406:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800440a:	4619      	mov	r1, r3
 800440c:	4883      	ldr	r0, [pc, #524]	; (800461c <baroMain+0x4b8>)
 800440e:	f003 f920 	bl	8007652 <cbuf_readn>
 8004412:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
 8004416:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 800441a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800441e:	1c5c      	adds	r4, r3, #1
 8004420:	4b80      	ldr	r3, [pc, #512]	; (8004624 <baroMain+0x4c0>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	461d      	mov	r5, r3
 8004426:	4b7f      	ldr	r3, [pc, #508]	; (8004624 <baroMain+0x4c0>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	4b7e      	ldr	r3, [pc, #504]	; (8004628 <baroMain+0x4c4>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004436:	8812      	ldrh	r2, [r2, #0]
 8004438:	4611      	mov	r1, r2
 800443a:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800443e:	1a8a      	subs	r2, r1, r2
 8004440:	fb03 f202 	mul.w	r2, r3, r2
 8004444:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8004448:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800444c:	1acb      	subs	r3, r1, r3
 800444e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004452:	1aea      	subs	r2, r5, r3
 8004454:	4b73      	ldr	r3, [pc, #460]	; (8004624 <baroMain+0x4c0>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	4619      	mov	r1, r3
 800445a:	2300      	movs	r3, #0
 800445c:	9302      	str	r3, [sp, #8]
 800445e:	2302      	movs	r3, #2
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	2301      	movs	r3, #1
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	460b      	mov	r3, r1
 8004468:	4621      	mov	r1, r4
 800446a:	f7fe ff68 	bl	800333e <lcdRect2>
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 800446e:	f8b7 50ac 	ldrh.w	r5, [r7, #172]	; 0xac
 8004472:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004476:	1c5e      	adds	r6, r3, #1
 8004478:	4b6a      	ldr	r3, [pc, #424]	; (8004624 <baroMain+0x4c0>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	4698      	mov	r8, r3
 800447e:	4b69      	ldr	r3, [pc, #420]	; (8004624 <baroMain+0x4c0>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	4b68      	ldr	r3, [pc, #416]	; (8004628 <baroMain+0x4c4>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	1ad4      	subs	r4, r2, r3
 800448a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800448e:	4619      	mov	r1, r3
 8004490:	4866      	ldr	r0, [pc, #408]	; (800462c <baroMain+0x4c8>)
 8004492:	f003 f984 	bl	800779e <read_nth_ring_buffer>
 8004496:	4602      	mov	r2, r0
 8004498:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	fb03 f204 	mul.w	r2, r3, r4
 80044a2:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 80044a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80044aa:	1acb      	subs	r3, r1, r3
 80044ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80044b0:	eba8 0203 	sub.w	r2, r8, r3
 80044b4:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <baroMain+0x4c0>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	4619      	mov	r1, r3
 80044ba:	2300      	movs	r3, #0
 80044bc:	9302      	str	r3, [sp, #8]
 80044be:	230e      	movs	r3, #14
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	2301      	movs	r3, #1
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	460b      	mov	r3, r1
 80044c8:	4631      	mov	r1, r6
 80044ca:	4628      	mov	r0, r5
 80044cc:	f7fe ff37 	bl	800333e <lcdRect2>
//		lcdRect2(400/baroRing.maxSize*i, 400/baroRing.maxSize*i+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
//		lcdRect2(400/tempRing.size*i, 400/tempRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		// horizontal lines
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 80044d0:	4b51      	ldr	r3, [pc, #324]	; (8004618 <baroMain+0x4b4>)
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	4b52      	ldr	r3, [pc, #328]	; (8004620 <baroMain+0x4bc>)
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	4619      	mov	r1, r3
 80044dc:	4b52      	ldr	r3, [pc, #328]	; (8004628 <baroMain+0x4c4>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	2302      	movs	r3, #2
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	2301      	movs	r3, #1
 80044e8:	f7fe f9e8 	bl	80028bc <lcdHLine2>
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 80044ec:	4b4a      	ldr	r3, [pc, #296]	; (8004618 <baroMain+0x4b4>)
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <baroMain+0x4bc>)
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	4619      	mov	r1, r3
 80044f8:	4b4a      	ldr	r3, [pc, #296]	; (8004624 <baroMain+0x4c0>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	2302      	movs	r3, #2
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	2301      	movs	r3, #1
 8004504:	f7fe f9da 	bl	80028bc <lcdHLine2>
	for(uint16_t j=minX; j<maxX; j++){
 8004508:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800450c:	3301      	adds	r3, #1
 800450e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8004512:	4b43      	ldr	r3, [pc, #268]	; (8004620 <baroMain+0x4bc>)
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800451a:	429a      	cmp	r2, r3
 800451c:	f4ff af60 	bcc.w	80043e0 <baroMain+0x27c>
//		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
	}
	sprintf(&str4, "%0.1f", ((float)maxTemp)/10);
 8004520:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004530:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004534:	ee16 0a90 	vmov	r0, s13
 8004538:	f7fc f820 	bl	800057c <__aeabi_f2d>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	1d38      	adds	r0, r7, #4
 8004542:	493b      	ldr	r1, [pc, #236]	; (8004630 <baroMain+0x4cc>)
 8004544:	f00a f950 	bl	800e7e8 <siprintf>
	lcdPutStr(0, minHeight-6, str4, smallestFont);
 8004548:	4b37      	ldr	r3, [pc, #220]	; (8004628 <baroMain+0x4c4>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	3b06      	subs	r3, #6
 800454e:	b2d9      	uxtb	r1, r3
 8004550:	1d3a      	adds	r2, r7, #4
 8004552:	4b38      	ldr	r3, [pc, #224]	; (8004634 <baroMain+0x4d0>)
 8004554:	2000      	movs	r0, #0
 8004556:	f7fe f90d 	bl	8002774 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minTemp)/10);
 800455a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004566:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800456a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800456e:	ee16 0a90 	vmov	r0, s13
 8004572:	f7fc f803 	bl	800057c <__aeabi_f2d>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	1d38      	adds	r0, r7, #4
 800457c:	492c      	ldr	r1, [pc, #176]	; (8004630 <baroMain+0x4cc>)
 800457e:	f00a f933 	bl	800e7e8 <siprintf>
	lcdPutStr(0, maxHeight-6, str4, smallestFont);
 8004582:	4b28      	ldr	r3, [pc, #160]	; (8004624 <baroMain+0x4c0>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	3b06      	subs	r3, #6
 8004588:	b2d9      	uxtb	r1, r3
 800458a:	1d3a      	adds	r2, r7, #4
 800458c:	4b29      	ldr	r3, [pc, #164]	; (8004634 <baroMain+0x4d0>)
 800458e:	2000      	movs	r0, #0
 8004590:	f7fe f8f0 	bl	8002774 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)maxBaro)/10);
 8004594:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80045a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045a8:	ee16 0a90 	vmov	r0, s13
 80045ac:	f7fb ffe6 	bl	800057c <__aeabi_f2d>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	1d38      	adds	r0, r7, #4
 80045b6:	491e      	ldr	r1, [pc, #120]	; (8004630 <baroMain+0x4cc>)
 80045b8:	f00a f916 	bl	800e7e8 <siprintf>
	lcdPutStr(350, minHeight-6, str4, smallestFont);
 80045bc:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <baroMain+0x4c4>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	3b06      	subs	r3, #6
 80045c2:	b2d9      	uxtb	r1, r3
 80045c4:	1d3a      	adds	r2, r7, #4
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <baroMain+0x4d0>)
 80045c8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80045cc:	f7fe f8d2 	bl	8002774 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minBaro)/10);
 80045d0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80045e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045e4:	ee16 0a90 	vmov	r0, s13
 80045e8:	f7fb ffc8 	bl	800057c <__aeabi_f2d>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	1d38      	adds	r0, r7, #4
 80045f2:	490f      	ldr	r1, [pc, #60]	; (8004630 <baroMain+0x4cc>)
 80045f4:	f00a f8f8 	bl	800e7e8 <siprintf>
	lcdPutStr(350, maxHeight-6, str4, smallestFont);
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <baroMain+0x4c0>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	3b06      	subs	r3, #6
 80045fe:	b2d9      	uxtb	r1, r3
 8004600:	1d3a      	adds	r2, r7, #4
 8004602:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <baroMain+0x4d0>)
 8004604:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8004608:	f7fe f8b4 	bl	8002774 <lcdPutStr>
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 800460c:	bf00      	nop
 800460e:	37b8      	adds	r7, #184	; 0xb8
 8004610:	46bd      	mov	sp, r7
 8004612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004616:	bf00      	nop
 8004618:	20000184 	.word	0x20000184
 800461c:	20003598 	.word	0x20003598
 8004620:	20000186 	.word	0x20000186
 8004624:	20000188 	.word	0x20000188
 8004628:	20000189 	.word	0x20000189
 800462c:	200035ac 	.word	0x200035ac
 8004630:	08014e00 	.word	0x08014e00
 8004634:	080155cc 	.word	0x080155cc

08004638 <changeBaroMode>:

void changeBaroMode(void){
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <changeBaroMode+0x34>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d107      	bne.n	8004654 <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <changeBaroMode+0x38>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <changeBaroMode+0x3c>)
 800464a:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 800464c:	4b07      	ldr	r3, [pc, #28]	; (800466c <changeBaroMode+0x34>)
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 8004652:	e006      	b.n	8004662 <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <changeBaroMode+0x38>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4a07      	ldr	r2, [pc, #28]	; (8004678 <changeBaroMode+0x40>)
 800465a:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 800465c:	4b03      	ldr	r3, [pc, #12]	; (800466c <changeBaroMode+0x34>)
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
}
 8004662:	bf00      	nop
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	20003a40 	.word	0x20003a40
 8004670:	20000558 	.word	0x20000558
 8004674:	20000000 	.word	0x20000000
 8004678:	20000004 	.word	0x20000004

0800467c <addBaro>:
void addBaro(void){
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004680:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <addBaro+0x40>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <addBaro+0x22>
			fixedAltitude += 1;
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <addBaro+0x44>)
 800468a:	edd3 7a00 	vldr	s15, [r3]
 800468e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004692:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <addBaro+0x44>)
 8004698:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 800469c:	e009      	b.n	80046b2 <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <addBaro+0x48>)
 80046a0:	edd3 7a00 	vldr	s15, [r3]
 80046a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80046a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <addBaro+0x48>)
 80046ae:	edc3 7a00 	vstr	s15, [r3]
}
 80046b2:	bf00      	nop
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	20003a40 	.word	0x20003a40
 80046c0:	20000004 	.word	0x20000004
 80046c4:	20000000 	.word	0x20000000

080046c8 <remBaro>:
void remBaro(void){
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <remBaro+0x40>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10a      	bne.n	80046ea <remBaro+0x22>
			fixedAltitude -= 1;
 80046d4:	4b0d      	ldr	r3, [pc, #52]	; (800470c <remBaro+0x44>)
 80046d6:	edd3 7a00 	vldr	s15, [r3]
 80046da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <remBaro+0x44>)
 80046e4:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 80046e8:	e009      	b.n	80046fe <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <remBaro+0x48>)
 80046ec:	edd3 7a00 	vldr	s15, [r3]
 80046f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80046f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <remBaro+0x48>)
 80046fa:	edc3 7a00 	vstr	s15, [r3]
}
 80046fe:	bf00      	nop
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	20003a40 	.word	0x20003a40
 800470c:	20000004 	.word	0x20000004
 8004710:	20000000 	.word	0x20000000

08004714 <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 800471c:	4a04      	ldr	r2, [pc, #16]	; (8004730 <setupCntxMenu+0x1c>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6013      	str	r3, [r2, #0]
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	20003a44 	.word	0x20003a44

08004734 <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
	hideCntxMenu();
 8004738:	f000 f87e 	bl	8004838 <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <cntxSelect+0x1c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	4b04      	ldr	r3, [pc, #16]	; (8004754 <cntxSelect+0x20>)
 8004744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	4798      	blx	r3
}
 800474c:	bf00      	nop
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20003a42 	.word	0x20003a42
 8004754:	200001e0 	.word	0x200001e0

08004758 <nextItem>:

void nextItem(void){
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <nextItem+0x34>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <nextItem+0x38>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	3b01      	subs	r3, #1
 8004768:	429a      	cmp	r2, r3
 800476a:	da06      	bge.n	800477a <nextItem+0x22>
		cntxPosition++;
 800476c:	4b07      	ldr	r3, [pc, #28]	; (800478c <nextItem+0x34>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	b2da      	uxtb	r2, r3
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <nextItem+0x34>)
 8004776:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 8004778:	e002      	b.n	8004780 <nextItem+0x28>
		cntxPosition = 0;
 800477a:	4b04      	ldr	r3, [pc, #16]	; (800478c <nextItem+0x34>)
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20003a42 	.word	0x20003a42
 8004790:	2000018a 	.word	0x2000018a

08004794 <prevItem>:
void prevItem(void){
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <prevItem+0x30>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d006      	beq.n	80047ae <prevItem+0x1a>
		cntxPosition--;
 80047a0:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <prevItem+0x30>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <prevItem+0x30>)
 80047aa:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 80047ac:	e005      	b.n	80047ba <prevItem+0x26>
		cntxPosition = actionsNum-1;
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <prevItem+0x34>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <prevItem+0x30>)
 80047b8:	701a      	strb	r2, [r3, #0]
}
 80047ba:	bf00      	nop
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	20003a42 	.word	0x20003a42
 80047c8:	2000018a 	.word	0x2000018a

080047cc <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <setDefaultClbcks+0x34>)
 80047d2:	4a0c      	ldr	r2, [pc, #48]	; (8004804 <setDefaultClbcks+0x38>)
 80047d4:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <setDefaultClbcks+0x3c>)
 80047d8:	4a0c      	ldr	r2, [pc, #48]	; (800480c <setDefaultClbcks+0x40>)
 80047da:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <setDefaultClbcks+0x3c>)
 80047de:	4a0b      	ldr	r2, [pc, #44]	; (800480c <setDefaultClbcks+0x40>)
 80047e0:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <setDefaultClbcks+0x44>)
 80047e4:	4a0b      	ldr	r2, [pc, #44]	; (8004814 <setDefaultClbcks+0x48>)
 80047e6:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <setDefaultClbcks+0x4c>)
 80047ea:	4a0c      	ldr	r2, [pc, #48]	; (800481c <setDefaultClbcks+0x50>)
 80047ec:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <setDefaultClbcks+0x4c>)
 80047f0:	4a0a      	ldr	r2, [pc, #40]	; (800481c <setDefaultClbcks+0x50>)
 80047f2:	61da      	str	r2, [r3, #28]
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	2000061c 	.word	0x2000061c
 8004804:	08004839 	.word	0x08004839
 8004808:	200005b0 	.word	0x200005b0
 800480c:	08004795 	.word	0x08004795
 8004810:	2000058c 	.word	0x2000058c
 8004814:	08004735 	.word	0x08004735
 8004818:	20000568 	.word	0x20000568
 800481c:	08004759 	.word	0x08004759

08004820 <showCntxMenu>:

void showCntxMenu(void){
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 8004824:	f7ff ffd2 	bl	80047cc <setDefaultClbcks>
	isCntxOpen = 1;
 8004828:	4b02      	ldr	r3, [pc, #8]	; (8004834 <showCntxMenu+0x14>)
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20003a41 	.word	0x20003a41

08004838 <hideCntxMenu>:
void hideCntxMenu(void){
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 800483c:	f7fc ffd2 	bl	80017e4 <resetButtonHandlers>
	(*prevClbcks)();
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <hideCntxMenu+0x18>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4798      	blx	r3
	isCntxOpen = 0;
 8004846:	4b03      	ldr	r3, [pc, #12]	; (8004854 <hideCntxMenu+0x1c>)
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
}
 800484c:	bf00      	nop
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20003a44 	.word	0x20003a44
 8004854:	20003a41 	.word	0x20003a41

08004858 <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 800485e:	4b35      	ldr	r3, [pc, #212]	; (8004934 <enableCntxMenu+0xdc>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d062      	beq.n	800492c <enableCntxMenu+0xd4>
//		clear rect
		lcdRect(0, 200, 5, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 0);
 8004866:	230e      	movs	r3, #14
 8004868:	461a      	mov	r2, r3
 800486a:	4b33      	ldr	r3, [pc, #204]	; (8004938 <enableCntxMenu+0xe0>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	330a      	adds	r3, #10
 8004874:	2200      	movs	r2, #0
 8004876:	9200      	str	r2, [sp, #0]
 8004878:	2205      	movs	r2, #5
 800487a:	21c8      	movs	r1, #200	; 0xc8
 800487c:	2000      	movs	r0, #0
 800487e:	f7fe fd39 	bl	80032f4 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 8004882:	2301      	movs	r3, #1
 8004884:	2206      	movs	r2, #6
 8004886:	21c8      	movs	r1, #200	; 0xc8
 8004888:	2000      	movs	r0, #0
 800488a:	f7fe fbdd 	bl	8003048 <lcdHLine>
		lcdHLine(0, 200, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 1);
 800488e:	230e      	movs	r3, #14
 8004890:	461a      	mov	r2, r3
 8004892:	4b29      	ldr	r3, [pc, #164]	; (8004938 <enableCntxMenu+0xe0>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	f103 020a 	add.w	r2, r3, #10
 800489e:	2301      	movs	r3, #1
 80048a0:	21c8      	movs	r1, #200	; 0xc8
 80048a2:	2000      	movs	r0, #0
 80048a4:	f7fe fbd0 	bl	8003048 <lcdHLine>
//		create list
		char item[30] = {0};
 80048a8:	2300      	movs	r3, #0
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	605a      	str	r2, [r3, #4]
 80048b4:	609a      	str	r2, [r3, #8]
 80048b6:	60da      	str	r2, [r3, #12]
 80048b8:	611a      	str	r2, [r3, #16]
 80048ba:	615a      	str	r2, [r3, #20]
 80048bc:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 80048be:	2300      	movs	r3, #0
 80048c0:	77fb      	strb	r3, [r7, #31]
 80048c2:	e018      	b.n	80048f6 <enableCntxMenu+0x9e>
			sprintf(&item, ContextActions[i]->name);
 80048c4:	7ffb      	ldrb	r3, [r7, #31]
 80048c6:	4a1d      	ldr	r2, [pc, #116]	; (800493c <enableCntxMenu+0xe4>)
 80048c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048cc:	461a      	mov	r2, r3
 80048ce:	463b      	mov	r3, r7
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f009 ff88 	bl	800e7e8 <siprintf>
			lcdPutStr(5, 10+(*font_12_zekton.font_Height)*i, item, font_12_zekton);
 80048d8:	220e      	movs	r2, #14
 80048da:	7ffb      	ldrb	r3, [r7, #31]
 80048dc:	fb13 f302 	smulbb	r3, r3, r2
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	330a      	adds	r3, #10
 80048e4:	b2d9      	uxtb	r1, r3
 80048e6:	463a      	mov	r2, r7
 80048e8:	4b15      	ldr	r3, [pc, #84]	; (8004940 <enableCntxMenu+0xe8>)
 80048ea:	2005      	movs	r0, #5
 80048ec:	f7fd ff42 	bl	8002774 <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 80048f0:	7ffb      	ldrb	r3, [r7, #31]
 80048f2:	3301      	adds	r3, #1
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <enableCntxMenu+0xe0>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	7ffa      	ldrb	r2, [r7, #31]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d3e1      	bcc.n	80048c4 <enableCntxMenu+0x6c>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*font_12_zekton.font_Height)*cntxPosition, 8+(*font_12_zekton.font_Height)*(cntxPosition+1), 2);
 8004900:	230e      	movs	r3, #14
 8004902:	461a      	mov	r2, r3
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <enableCntxMenu+0xec>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	f103 0208 	add.w	r2, r3, #8
 8004910:	230e      	movs	r3, #14
 8004912:	4619      	mov	r1, r3
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <enableCntxMenu+0xec>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	3308      	adds	r3, #8
 8004920:	2102      	movs	r1, #2
 8004922:	9100      	str	r1, [sp, #0]
 8004924:	21c8      	movs	r1, #200	; 0xc8
 8004926:	2000      	movs	r0, #0
 8004928:	f7fe fce4 	bl	80032f4 <lcdRect>

	}
}
 800492c:	bf00      	nop
 800492e:	3720      	adds	r7, #32
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20003a41 	.word	0x20003a41
 8004938:	2000018a 	.word	0x2000018a
 800493c:	200001e0 	.word	0x200001e0
 8004940:	080164d0 	.word	0x080164d0
 8004944:	20003a42 	.word	0x20003a42

08004948 <nextPg>:
extern gpsDevice_t gpsDev;
extern char dmaBuffer[];

location_t location;

void nextPg(void){
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
	pageNum++;
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <nextPg+0x1c>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	b2da      	uxtb	r2, r3
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <nextPg+0x1c>)
 8004956:	701a      	strb	r2, [r3, #0]
}
 8004958:	bf00      	nop
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20003a48 	.word	0x20003a48

08004968 <prevPg>:
void prevPg(void){
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
	pageNum--;
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <prevPg+0x1c>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	3b01      	subs	r3, #1
 8004972:	b2da      	uxtb	r2, r3
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <prevPg+0x1c>)
 8004976:	701a      	strb	r2, [r3, #0]
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20003a48 	.word	0x20003a48

08004988 <syncTime>:
void syncTime(void){
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
	RtcTime.Hours = location.utc_hour;
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <syncTime+0x48>)
 800498e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <syncTime+0x4c>)
 8004994:	701a      	strb	r2, [r3, #0]
		RtcTime.Minutes = location.utc_min;
 8004996:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <syncTime+0x48>)
 8004998:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 800499c:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <syncTime+0x4c>)
 800499e:	705a      	strb	r2, [r3, #1]
		RtcTime.Seconds = location.utc_sec;
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <syncTime+0x48>)
 80049a2:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <syncTime+0x4c>)
 80049a8:	709a      	strb	r2, [r3, #2]
		RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <syncTime+0x4c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	60da      	str	r2, [r3, #12]
		RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <syncTime+0x4c>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 80049b6:	2200      	movs	r2, #0
 80049b8:	4906      	ldr	r1, [pc, #24]	; (80049d4 <syncTime+0x4c>)
 80049ba:	4807      	ldr	r0, [pc, #28]	; (80049d8 <syncTime+0x50>)
 80049bc:	f005 fe80 	bl	800a6c0 <HAL_RTC_SetTime>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <syncTime+0x42>
		{
		Error_Handler();
 80049c6:	f7fe fe99 	bl	80036fc <Error_Handler>
		}
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20003a50 	.word	0x20003a50
 80049d4:	20003580 	.word	0x20003580
 80049d8:	200037bc 	.word	0x200037bc

080049dc <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 80049e0:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <setDefaultClbcks+0x2c>)
 80049e2:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <setDefaultClbcks+0x30>)
 80049e4:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <setDefaultClbcks+0x34>)
 80049e8:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <setDefaultClbcks+0x38>)
 80049ea:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPg;
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <setDefaultClbcks+0x3c>)
 80049ee:	4a0b      	ldr	r2, [pc, #44]	; (8004a1c <setDefaultClbcks+0x40>)
 80049f0:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPg;
 80049f2:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <setDefaultClbcks+0x44>)
 80049f4:	4a0b      	ldr	r2, [pc, #44]	; (8004a24 <setDefaultClbcks+0x48>)
 80049f6:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &syncTime;
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <setDefaultClbcks+0x4c>)
 80049fa:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <setDefaultClbcks+0x50>)
 80049fc:	611a      	str	r2, [r3, #16]
}
 80049fe:	bf00      	nop
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	20000568 	.word	0x20000568
 8004a0c:	080022d9 	.word	0x080022d9
 8004a10:	200005b0 	.word	0x200005b0
 8004a14:	080022e9 	.word	0x080022e9
 8004a18:	200005d4 	.word	0x200005d4
 8004a1c:	08004949 	.word	0x08004949
 8004a20:	2000061c 	.word	0x2000061c
 8004a24:	08004969 	.word	0x08004969
 8004a28:	200005f8 	.word	0x200005f8
 8004a2c:	08004989 	.word	0x08004989

08004a30 <gpsSetup>:

void gpsSetup(void){
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004a34:	f7ff ffd2 	bl	80049dc <setDefaultClbcks>

}
 8004a38:	bf00      	nop
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <gpsMain>:

void gpsMain(void){
 8004a3c:	b590      	push	{r4, r7, lr}
 8004a3e:	f5ad 5da7 	sub.w	sp, sp, #5344	; 0x14e0
 8004a42:	b083      	sub	sp, #12
 8004a44:	af02      	add	r7, sp, #8
	char tempStr[51] = {0};
 8004a46:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004a4a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	3304      	adds	r3, #4
 8004a54:	222f      	movs	r2, #47	; 0x2f
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f008 fd97 	bl	800d58c <memset>

	switch(pageNum){
 8004a5e:	4bc3      	ldr	r3, [pc, #780]	; (8004d6c <gpsMain+0x330>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <gpsMain+0x30>
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d07c      	beq.n	8004b64 <gpsMain+0x128>
 8004a6a:	e178      	b.n	8004d5e <gpsMain+0x322>
	case 0: {
		location = getLocation(&gpsDev);
 8004a6c:	4cc0      	ldr	r4, [pc, #768]	; (8004d70 <gpsMain+0x334>)
 8004a6e:	463b      	mov	r3, r7
 8004a70:	49c0      	ldr	r1, [pc, #768]	; (8004d74 <gpsMain+0x338>)
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fd fa58 	bl	8001f28 <getLocation>
 8004a78:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004a7c:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004a80:	4620      	mov	r0, r4
 8004a82:	4619      	mov	r1, r3
 8004a84:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8004a88:	461a      	mov	r2, r3
 8004a8a:	f008 fd71 	bl	800d570 <memcpy>
		if(location.hasFix){
 8004a8e:	4bb8      	ldr	r3, [pc, #736]	; (8004d70 <gpsMain+0x334>)
 8004a90:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d036      	beq.n	8004b06 <gpsMain+0xca>
			sprintf(&tempStr, "GPS fix (%d satellites)", location.satNum);
 8004a98:	4bb5      	ldr	r3, [pc, #724]	; (8004d70 <gpsMain+0x334>)
 8004a9a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004aa4:	3b1c      	subs	r3, #28
 8004aa6:	49b4      	ldr	r1, [pc, #720]	; (8004d78 <gpsMain+0x33c>)
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f009 fe9d 	bl	800e7e8 <siprintf>
			sprintf(&tempStr, "Latitude: %2.3f%c", location.latitude, location.n_s);
 8004aae:	4bb0      	ldr	r3, [pc, #704]	; (8004d70 <gpsMain+0x334>)
 8004ab0:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 8004ab4:	49ae      	ldr	r1, [pc, #696]	; (8004d70 <gpsMain+0x334>)
 8004ab6:	f891 1158 	ldrb.w	r1, [r1, #344]	; 0x158
 8004aba:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8004abe:	381c      	subs	r0, #28
 8004ac0:	9100      	str	r1, [sp, #0]
 8004ac2:	49ae      	ldr	r1, [pc, #696]	; (8004d7c <gpsMain+0x340>)
 8004ac4:	f009 fe90 	bl	800e7e8 <siprintf>
			sprintf(&tempStr, "Longitude: %3.3f%c", location.latitude, location.w_e);
 8004ac8:	4ba9      	ldr	r3, [pc, #676]	; (8004d70 <gpsMain+0x334>)
 8004aca:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 8004ace:	49a8      	ldr	r1, [pc, #672]	; (8004d70 <gpsMain+0x334>)
 8004ad0:	f891 1159 	ldrb.w	r1, [r1, #345]	; 0x159
 8004ad4:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8004ad8:	381c      	subs	r0, #28
 8004ada:	9100      	str	r1, [sp, #0]
 8004adc:	49a8      	ldr	r1, [pc, #672]	; (8004d80 <gpsMain+0x344>)
 8004ade:	f009 fe83 	bl	800e7e8 <siprintf>
			sprintf(&tempStr, "Elevation: %f", location.elevation);
 8004ae2:	4ba3      	ldr	r3, [pc, #652]	; (8004d70 <gpsMain+0x334>)
 8004ae4:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8004ae8:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8004aec:	381c      	subs	r0, #28
 8004aee:	49a5      	ldr	r1, [pc, #660]	; (8004d84 <gpsMain+0x348>)
 8004af0:	f009 fe7a 	bl	800e7e8 <siprintf>
			lcdPutStr(0, 40, tempStr, ocrFont);
 8004af4:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004af8:	3a1c      	subs	r2, #28
 8004afa:	4ba3      	ldr	r3, [pc, #652]	; (8004d88 <gpsMain+0x34c>)
 8004afc:	2128      	movs	r1, #40	; 0x28
 8004afe:	2000      	movs	r0, #0
 8004b00:	f7fd fe38 	bl	8002774 <lcdPutStr>
 8004b04:	e00a      	b.n	8004b1c <gpsMain+0xe0>
		} else {
			sprintf(&tempStr, "No fix - %d satellites", location.satNum);
 8004b06:	4b9a      	ldr	r3, [pc, #616]	; (8004d70 <gpsMain+0x334>)
 8004b08:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004b12:	3b1c      	subs	r3, #28
 8004b14:	499d      	ldr	r1, [pc, #628]	; (8004d8c <gpsMain+0x350>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	f009 fe66 	bl	800e7e8 <siprintf>
		}
			lcdPutStr(0, 0, tempStr, ocrFont);
 8004b1c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004b20:	3a1c      	subs	r2, #28
 8004b22:	4b99      	ldr	r3, [pc, #612]	; (8004d88 <gpsMain+0x34c>)
 8004b24:	2100      	movs	r1, #0
 8004b26:	2000      	movs	r0, #0
 8004b28:	f7fd fe24 	bl	8002774 <lcdPutStr>
			sprintf(&tempStr, "UTC time: %d:%d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 8004b2c:	4b90      	ldr	r3, [pc, #576]	; (8004d70 <gpsMain+0x334>)
 8004b2e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8004b32:	461a      	mov	r2, r3
 8004b34:	4b8e      	ldr	r3, [pc, #568]	; (8004d70 <gpsMain+0x334>)
 8004b36:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4b8c      	ldr	r3, [pc, #560]	; (8004d70 <gpsMain+0x334>)
 8004b3e:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004b42:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8004b46:	381c      	subs	r0, #28
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4990      	ldr	r1, [pc, #576]	; (8004d90 <gpsMain+0x354>)
 8004b4e:	f009 fe4b 	bl	800e7e8 <siprintf>
			lcdPutStr(0, 40, tempStr, ocrFont);
 8004b52:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004b56:	3a1c      	subs	r2, #28
 8004b58:	4b8b      	ldr	r3, [pc, #556]	; (8004d88 <gpsMain+0x34c>)
 8004b5a:	2128      	movs	r1, #40	; 0x28
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f7fd fe09 	bl	8002774 <lcdPutStr>
		break;
 8004b62:	e153      	b.n	8004e0c <gpsMain+0x3d0>
	}
	case 1: {
		lcdPutStr(0, 0, tempStr, font_13_calibri);
 8004b64:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004b68:	3a1c      	subs	r2, #28
 8004b6a:	4b8a      	ldr	r3, [pc, #552]	; (8004d94 <gpsMain+0x358>)
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f7fd fe00 	bl	8002774 <lcdPutStr>
	//	double lat = 17.8;
	//	sprintf(&tempStr, "lat: %f", getLocation(&gpsDev).latitude);
	//	sprintf(&tempStr, "lat: %f", lat);
	//	lcdPutStr(0, 220, tempStr, font_13_calibri);
		lcdPutStr(0, 25, getLocation(&gpsDev).debug, smallestFont);
 8004b74:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004b78:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8004b7c:	497d      	ldr	r1, [pc, #500]	; (8004d74 <gpsMain+0x338>)
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fd f9d2 	bl	8001f28 <getLocation>
 8004b84:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004b88:	3a08      	subs	r2, #8
 8004b8a:	4b83      	ldr	r3, [pc, #524]	; (8004d98 <gpsMain+0x35c>)
 8004b8c:	2119      	movs	r1, #25
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f7fd fdf0 	bl	8002774 <lcdPutStr>
		lcdPutStr(0, 40, getLocation(&gpsDev).words[0], smallestFont);
 8004b94:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004b98:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b9c:	4975      	ldr	r1, [pc, #468]	; (8004d74 <gpsMain+0x338>)
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fd f9c2 	bl	8001f28 <getLocation>
 8004ba4:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8004ba8:	3b08      	subs	r3, #8
 8004baa:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8004bae:	4b7a      	ldr	r3, [pc, #488]	; (8004d98 <gpsMain+0x35c>)
 8004bb0:	2128      	movs	r1, #40	; 0x28
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f7fd fdde 	bl	8002774 <lcdPutStr>
		lcdPutStr(0, 55, getLocation(&gpsDev).words[1], smallestFont);
 8004bb8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004bbc:	3b88      	subs	r3, #136	; 0x88
 8004bbe:	496d      	ldr	r1, [pc, #436]	; (8004d74 <gpsMain+0x338>)
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fd f9b1 	bl	8001f28 <getLocation>
 8004bc6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8004bca:	3b08      	subs	r3, #8
 8004bcc:	f103 0265 	add.w	r2, r3, #101	; 0x65
 8004bd0:	4b71      	ldr	r3, [pc, #452]	; (8004d98 <gpsMain+0x35c>)
 8004bd2:	2137      	movs	r1, #55	; 0x37
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	f7fd fdcd 	bl	8002774 <lcdPutStr>
		lcdPutStr(0, 70, getLocation(&gpsDev).words[2], smallestFont);
 8004bda:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004bde:	f6a3 7328 	subw	r3, r3, #3880	; 0xf28
 8004be2:	4964      	ldr	r1, [pc, #400]	; (8004d74 <gpsMain+0x338>)
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fd f99f 	bl	8001f28 <getLocation>
 8004bea:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8004bee:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8004bf2:	4b69      	ldr	r3, [pc, #420]	; (8004d98 <gpsMain+0x35c>)
 8004bf4:	2146      	movs	r1, #70	; 0x46
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f7fd fdbc 	bl	8002774 <lcdPutStr>
		lcdPutStr(0, 85, getLocation(&gpsDev).words[3], smallestFont);
 8004bfc:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004c00:	f6a3 53c8 	subw	r3, r3, #3528	; 0xdc8
 8004c04:	495b      	ldr	r1, [pc, #364]	; (8004d74 <gpsMain+0x338>)
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fd f98e 	bl	8001f28 <getLocation>
 8004c0c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8004c10:	f103 0283 	add.w	r2, r3, #131	; 0x83
 8004c14:	4b60      	ldr	r3, [pc, #384]	; (8004d98 <gpsMain+0x35c>)
 8004c16:	2155      	movs	r1, #85	; 0x55
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f7fd fdab 	bl	8002774 <lcdPutStr>
		lcdPutStr(0, 100, getLocation(&gpsDev).words[4], smallestFont);
 8004c1e:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004c22:	f6a3 4368 	subw	r3, r3, #3176	; 0xc68
 8004c26:	4953      	ldr	r1, [pc, #332]	; (8004d74 <gpsMain+0x338>)
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fd f97d 	bl	8001f28 <getLocation>
 8004c2e:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8004c32:	f103 0292 	add.w	r2, r3, #146	; 0x92
 8004c36:	4b58      	ldr	r3, [pc, #352]	; (8004d98 <gpsMain+0x35c>)
 8004c38:	2164      	movs	r1, #100	; 0x64
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f7fd fd9a 	bl	8002774 <lcdPutStr>
		lcdPutStr(100, 25, getLocation(&gpsDev).words[5], smallestFont);
 8004c40:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004c44:	f6a3 3308 	subw	r3, r3, #2824	; 0xb08
 8004c48:	494a      	ldr	r1, [pc, #296]	; (8004d74 <gpsMain+0x338>)
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fd f96c 	bl	8001f28 <getLocation>
 8004c50:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8004c54:	f103 02a1 	add.w	r2, r3, #161	; 0xa1
 8004c58:	4b4f      	ldr	r3, [pc, #316]	; (8004d98 <gpsMain+0x35c>)
 8004c5a:	2119      	movs	r1, #25
 8004c5c:	2064      	movs	r0, #100	; 0x64
 8004c5e:	f7fd fd89 	bl	8002774 <lcdPutStr>
		lcdPutStr(100, 40, getLocation(&gpsDev).words[6], smallestFont);
 8004c62:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004c66:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 8004c6a:	4942      	ldr	r1, [pc, #264]	; (8004d74 <gpsMain+0x338>)
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fd f95b 	bl	8001f28 <getLocation>
 8004c72:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8004c76:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <gpsMain+0x35c>)
 8004c7c:	2128      	movs	r1, #40	; 0x28
 8004c7e:	2064      	movs	r0, #100	; 0x64
 8004c80:	f7fd fd78 	bl	8002774 <lcdPutStr>
		lcdPutStr(100, 55, getLocation(&gpsDev).words[7], smallestFont);
 8004c84:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004c88:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 8004c8c:	4939      	ldr	r1, [pc, #228]	; (8004d74 <gpsMain+0x338>)
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd f94a 	bl	8001f28 <getLocation>
 8004c94:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 8004c98:	f103 02bf 	add.w	r2, r3, #191	; 0xbf
 8004c9c:	4b3e      	ldr	r3, [pc, #248]	; (8004d98 <gpsMain+0x35c>)
 8004c9e:	2137      	movs	r1, #55	; 0x37
 8004ca0:	2064      	movs	r0, #100	; 0x64
 8004ca2:	f7fd fd67 	bl	8002774 <lcdPutStr>
		lcdPutStr(100, 70, getLocation(&gpsDev).words[8], smallestFont);
 8004ca6:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004caa:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8004cae:	4931      	ldr	r1, [pc, #196]	; (8004d74 <gpsMain+0x338>)
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fd f939 	bl	8001f28 <getLocation>
 8004cb6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004cba:	f103 02ce 	add.w	r2, r3, #206	; 0xce
 8004cbe:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <gpsMain+0x35c>)
 8004cc0:	2146      	movs	r1, #70	; 0x46
 8004cc2:	2064      	movs	r0, #100	; 0x64
 8004cc4:	f7fd fd56 	bl	8002774 <lcdPutStr>
		lcdPutStr(100, 85, getLocation(&gpsDev).words[9], smallestFont);
 8004cc8:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004ccc:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8004cd0:	4928      	ldr	r1, [pc, #160]	; (8004d74 <gpsMain+0x338>)
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd f928 	bl	8001f28 <getLocation>
 8004cd8:	f607 7358 	addw	r3, r7, #3928	; 0xf58
 8004cdc:	f103 02dd 	add.w	r2, r3, #221	; 0xdd
 8004ce0:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <gpsMain+0x35c>)
 8004ce2:	2155      	movs	r1, #85	; 0x55
 8004ce4:	2064      	movs	r0, #100	; 0x64
 8004ce6:	f7fd fd45 	bl	8002774 <lcdPutStr>
		lcdPutStr(100, 100, getLocation(&gpsDev).words[10], smallestFont);
 8004cea:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004cee:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8004cf2:	4920      	ldr	r1, [pc, #128]	; (8004d74 <gpsMain+0x338>)
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fd f917 	bl	8001f28 <getLocation>
 8004cfa:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8004cfe:	f103 0318 	add.w	r3, r3, #24
 8004d02:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8004d06:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <gpsMain+0x35c>)
 8004d08:	2164      	movs	r1, #100	; 0x64
 8004d0a:	2064      	movs	r0, #100	; 0x64
 8004d0c:	f7fd fd32 	bl	8002774 <lcdPutStr>
		lcdPutStr(200, 25, getLocation(&gpsDev).words[11], smallestFont);
 8004d10:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004d14:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8004d18:	4916      	ldr	r1, [pc, #88]	; (8004d74 <gpsMain+0x338>)
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fd f904 	bl	8001f28 <getLocation>
 8004d20:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8004d24:	f103 0318 	add.w	r3, r3, #24
 8004d28:	f103 02fb 	add.w	r2, r3, #251	; 0xfb
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <gpsMain+0x35c>)
 8004d2e:	2119      	movs	r1, #25
 8004d30:	20c8      	movs	r0, #200	; 0xc8
 8004d32:	f7fd fd1f 	bl	8002774 <lcdPutStr>
		lcdPutStr(200, 40, getLocation(&gpsDev).words[12], smallestFont);
 8004d36:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8004d3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d3e:	490d      	ldr	r1, [pc, #52]	; (8004d74 <gpsMain+0x338>)
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fd f8f1 	bl	8001f28 <getLocation>
 8004d46:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8004d4a:	f103 0318 	add.w	r3, r3, #24
 8004d4e:	f503 7285 	add.w	r2, r3, #266	; 0x10a
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <gpsMain+0x35c>)
 8004d54:	2128      	movs	r1, #40	; 0x28
 8004d56:	20c8      	movs	r0, #200	; 0xc8
 8004d58:	f7fd fd0c 	bl	8002774 <lcdPutStr>
		break;
 8004d5c:	e056      	b.n	8004e0c <gpsMain+0x3d0>
	}
	default:{
		// show gpsDev buffer in many lines
		for(uint8_t i=0; i<6; i++){
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 8004d64:	f102 021f 	add.w	r2, r2, #31
 8004d68:	7013      	strb	r3, [r2, #0]
 8004d6a:	e047      	b.n	8004dfc <gpsMain+0x3c0>
 8004d6c:	20003a48 	.word	0x20003a48
 8004d70:	20003a50 	.word	0x20003a50
 8004d74:	200035bc 	.word	0x200035bc
 8004d78:	08014ec0 	.word	0x08014ec0
 8004d7c:	08014ed8 	.word	0x08014ed8
 8004d80:	08014eec 	.word	0x08014eec
 8004d84:	08014f00 	.word	0x08014f00
 8004d88:	08018430 	.word	0x08018430
 8004d8c:	08014f10 	.word	0x08014f10
 8004d90:	08014f28 	.word	0x08014f28
 8004d94:	080173d4 	.word	0x080173d4
 8004d98:	08016f58 	.word	0x08016f58
			strncpy(&tempStr, &gpsDev.buffer[50*i], 50);
 8004d9c:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8004da0:	f103 031f 	add.w	r3, r3, #31
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2232      	movs	r2, #50	; 0x32
 8004da8:	fb02 f303 	mul.w	r3, r2, r3
 8004dac:	4a1a      	ldr	r2, [pc, #104]	; (8004e18 <gpsMain+0x3dc>)
 8004dae:	4413      	add	r3, r2
 8004db0:	1d19      	adds	r1, r3, #4
 8004db2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004db6:	3b1c      	subs	r3, #28
 8004db8:	2232      	movs	r2, #50	; 0x32
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f00a fae8 	bl	800f390 <strncpy>
			lcdPutStr(0,120+14*i, tempStr, smallestFont);
 8004dc0:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8004dc4:	f103 031f 	add.w	r3, r3, #31
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	00d2      	lsls	r2, r2, #3
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	3378      	adds	r3, #120	; 0x78
 8004dd6:	b2d9      	uxtb	r1, r3
 8004dd8:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004ddc:	3a1c      	subs	r2, #28
 8004dde:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <gpsMain+0x3e0>)
 8004de0:	2000      	movs	r0, #0
 8004de2:	f7fd fcc7 	bl	8002774 <lcdPutStr>
		for(uint8_t i=0; i<6; i++){
 8004de6:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8004dea:	f103 031f 	add.w	r3, r3, #31
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 8004df6:	f102 021f 	add.w	r2, r2, #31
 8004dfa:	7013      	strb	r3, [r2, #0]
 8004dfc:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8004e00:	f103 031f 	add.w	r3, r3, #31
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b05      	cmp	r3, #5
 8004e08:	d9c8      	bls.n	8004d9c <gpsMain+0x360>
		}
		break;
 8004e0a:	bf00      	nop





}
 8004e0c:	bf00      	nop
 8004e0e:	f507 57a7 	add.w	r7, r7, #5344	; 0x14e0
 8004e12:	3704      	adds	r7, #4
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd90      	pop	{r4, r7, pc}
 8004e18:	200035bc 	.word	0x200035bc
 8004e1c:	08016f58 	.word	0x08016f58

08004e20 <setDefaultClbcks>:
	testTime.tm_mday--;
	mktime(&testTime);

}

static void setDefaultClbcks(void){
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <setDefaultClbcks+0x1c>)
 8004e26:	4a06      	ldr	r2, [pc, #24]	; (8004e40 <setDefaultClbcks+0x20>)
 8004e28:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004e2a:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <setDefaultClbcks+0x24>)
 8004e2c:	4a06      	ldr	r2, [pc, #24]	; (8004e48 <setDefaultClbcks+0x28>)
 8004e2e:	611a      	str	r2, [r3, #16]
//	btn_B1.onContinuousShortPressHandler = &addDay;
//	btn_B3.onContinuousShortPressHandler = &remDay;
}
 8004e30:	bf00      	nop
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000568 	.word	0x20000568
 8004e40:	080022d9 	.word	0x080022d9
 8004e44:	200005b0 	.word	0x200005b0
 8004e48:	080022e9 	.word	0x080022e9

08004e4c <localSetup>:
void localSetup(void){
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004e50:	f7ff ffe6 	bl	8004e20 <setDefaultClbcks>
	testTime.tm_hour = RtcTime.Hours;
 8004e54:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <localSetup+0x50>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <localSetup+0x54>)
 8004e5c:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8004e5e:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <localSetup+0x50>)
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	461a      	mov	r2, r3
 8004e64:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <localSetup+0x54>)
 8004e66:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <localSetup+0x50>)
 8004e6a:	789b      	ldrb	r3, [r3, #2]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <localSetup+0x54>)
 8004e70:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <localSetup+0x58>)
 8004e74:	789b      	ldrb	r3, [r3, #2]
 8004e76:	461a      	mov	r2, r3
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <localSetup+0x54>)
 8004e7a:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <localSetup+0x58>)
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	4a07      	ldr	r2, [pc, #28]	; (8004ea0 <localSetup+0x54>)
 8004e84:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <localSetup+0x58>)
 8004e88:	78db      	ldrb	r3, [r3, #3]
 8004e8a:	3364      	adds	r3, #100	; 0x64
 8004e8c:	4a04      	ldr	r2, [pc, #16]	; (8004ea0 <localSetup+0x54>)
 8004e8e:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 8004e90:	4803      	ldr	r0, [pc, #12]	; (8004ea0 <localSetup+0x54>)
 8004e92:	f008 fc5b 	bl	800d74c <mktime>
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20003580 	.word	0x20003580
 8004ea0:	20003bb0 	.word	0x20003bb0
 8004ea4:	20003594 	.word	0x20003594

08004ea8 <localMain>:


void localMain(void){
 8004ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eac:	b0c2      	sub	sp, #264	; 0x108
 8004eae:	af00      	add	r7, sp, #0
	testTime.tm_hour = RtcTime.Hours;
 8004eb0:	4bdd      	ldr	r3, [pc, #884]	; (8005228 <localMain+0x380>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4bdd      	ldr	r3, [pc, #884]	; (800522c <localMain+0x384>)
 8004eb8:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8004eba:	4bdb      	ldr	r3, [pc, #876]	; (8005228 <localMain+0x380>)
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4bda      	ldr	r3, [pc, #872]	; (800522c <localMain+0x384>)
 8004ec2:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8004ec4:	4bd8      	ldr	r3, [pc, #864]	; (8005228 <localMain+0x380>)
 8004ec6:	789b      	ldrb	r3, [r3, #2]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4bd8      	ldr	r3, [pc, #864]	; (800522c <localMain+0x384>)
 8004ecc:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 8004ece:	4bd8      	ldr	r3, [pc, #864]	; (8005230 <localMain+0x388>)
 8004ed0:	789b      	ldrb	r3, [r3, #2]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4bd5      	ldr	r3, [pc, #852]	; (800522c <localMain+0x384>)
 8004ed6:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8004ed8:	4bd5      	ldr	r3, [pc, #852]	; (8005230 <localMain+0x388>)
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	4ad3      	ldr	r2, [pc, #844]	; (800522c <localMain+0x384>)
 8004ee0:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 8004ee2:	4bd3      	ldr	r3, [pc, #844]	; (8005230 <localMain+0x388>)
 8004ee4:	78db      	ldrb	r3, [r3, #3]
 8004ee6:	3364      	adds	r3, #100	; 0x64
 8004ee8:	4ad0      	ldr	r2, [pc, #832]	; (800522c <localMain+0x384>)
 8004eea:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 8004eec:	48cf      	ldr	r0, [pc, #828]	; (800522c <localMain+0x384>)
 8004eee:	f008 fc2d 	bl	800d74c <mktime>

	char textBuffer[50] = {0};
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004efa:	222e      	movs	r2, #46	; 0x2e
 8004efc:	2100      	movs	r1, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f008 fb44 	bl	800d58c <memset>
	char textBuffer2[50] = {0};
 8004f04:	2300      	movs	r3, #0
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f0c:	222e      	movs	r2, #46	; 0x2e
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f008 fb3b 	bl	800d58c <memset>
	uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 8004f16:	4bc5      	ldr	r3, [pc, #788]	; (800522c <localMain+0x384>)
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	1d9a      	adds	r2, r3, #6
 8004f1c:	4bc5      	ldr	r3, [pc, #788]	; (8005234 <localMain+0x38c>)
 8004f1e:	fb83 1302 	smull	r1, r3, r3, r2
 8004f22:	4413      	add	r3, r2
 8004f24:	1099      	asrs	r1, r3, #2
 8004f26:	17d3      	asrs	r3, r2, #31
 8004f28:	1ac9      	subs	r1, r1, r3
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	1a5b      	subs	r3, r3, r1
 8004f30:	1ad1      	subs	r1, r2, r3
 8004f32:	b2cb      	uxtb	r3, r1
 8004f34:	3301      	adds	r3, #1
 8004f36:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 8004f3a:	4bbc      	ldr	r3, [pc, #752]	; (800522c <localMain+0x384>)
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f103 0208 	add.w	r2, r3, #8
 8004f42:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	4aba      	ldr	r2, [pc, #744]	; (8005234 <localMain+0x38c>)
 8004f4a:	fb82 1203 	smull	r1, r2, r2, r3
 8004f4e:	441a      	add	r2, r3
 8004f50:	1092      	asrs	r2, r2, #2
 8004f52:	17db      	asrs	r3, r3, #31
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
	sprintf(&textBuffer, "week %d day %d", weekOfTheYear, testTime.tm_yday+1);
 8004f5a:	f897 20fe 	ldrb.w	r2, [r7, #254]	; 0xfe
 8004f5e:	4bb3      	ldr	r3, [pc, #716]	; (800522c <localMain+0x384>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	3301      	adds	r3, #1
 8004f64:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004f68:	49b3      	ldr	r1, [pc, #716]	; (8005238 <localMain+0x390>)
 8004f6a:	f009 fc3d 	bl	800e7e8 <siprintf>
	lcdPutStr(10, 10, textBuffer, font_12_zekton);
 8004f6e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004f72:	4bb2      	ldr	r3, [pc, #712]	; (800523c <localMain+0x394>)
 8004f74:	210a      	movs	r1, #10
 8004f76:	200a      	movs	r0, #10
 8004f78:	f7fd fbfc 	bl	8002774 <lcdPutStr>

	sprintf(&textBuffer, asctime(&testTime));
 8004f7c:	48ab      	ldr	r0, [pc, #684]	; (800522c <localMain+0x384>)
 8004f7e:	f008 fa47 	bl	800d410 <asctime>
 8004f82:	4602      	mov	r2, r0
 8004f84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f009 fc2c 	bl	800e7e8 <siprintf>
	lcdPutStr(170, 10, textBuffer, smallestFont);
 8004f90:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004f94:	4baa      	ldr	r3, [pc, #680]	; (8005240 <localMain+0x398>)
 8004f96:	210a      	movs	r1, #10
 8004f98:	20aa      	movs	r0, #170	; 0xaa
 8004f9a:	f7fd fbeb 	bl	8002774 <lcdPutStr>
	strftime(&textBuffer, 40, "%Z day:%j week:%U", &testTime);
 8004f9e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004fa2:	4ba2      	ldr	r3, [pc, #648]	; (800522c <localMain+0x384>)
 8004fa4:	4aa7      	ldr	r2, [pc, #668]	; (8005244 <localMain+0x39c>)
 8004fa6:	2128      	movs	r1, #40	; 0x28
 8004fa8:	f00a f9f0 	bl	800f38c <strftime>
	lcdPutStr(170, 22, textBuffer, smallestFont);
 8004fac:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004fb0:	4ba3      	ldr	r3, [pc, #652]	; (8005240 <localMain+0x398>)
 8004fb2:	2116      	movs	r1, #22
 8004fb4:	20aa      	movs	r0, #170	; 0xaa
 8004fb6:	f7fd fbdd 	bl	8002774 <lcdPutStr>

	uint8_t hhour = testTime.tm_hour;
 8004fba:	4b9c      	ldr	r3, [pc, #624]	; (800522c <localMain+0x384>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	uint8_t mmin = testTime.tm_min;
 8004fc2:	4b9a      	ldr	r3, [pc, #616]	; (800522c <localMain+0x384>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t ssec = testTime.tm_sec;
 8004fca:	4b98      	ldr	r3, [pc, #608]	; (800522c <localMain+0x384>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	int timezone = 2;		// [h] east+ west-
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int dayOfTheYear = testTime.tm_yday+1;
 8004fd8:	4b94      	ldr	r3, [pc, #592]	; (800522c <localMain+0x384>)
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	// fractional year = gamma [rad]
	float fyear = (2*M_PI/365)*(dayOfTheYear-1+(hhour-timezone-12)/24);
 8004fe2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fe6:	1e5a      	subs	r2, r3, #1
 8004fe8:	f897 10fd 	ldrb.w	r1, [r7, #253]	; 0xfd
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	1acb      	subs	r3, r1, r3
 8004ff2:	3b0c      	subs	r3, #12
 8004ff4:	4994      	ldr	r1, [pc, #592]	; (8005248 <localMain+0x3a0>)
 8004ff6:	fb81 0103 	smull	r0, r1, r1, r3
 8004ffa:	1089      	asrs	r1, r1, #2
 8004ffc:	17db      	asrs	r3, r3, #31
 8004ffe:	1acb      	subs	r3, r1, r3
 8005000:	4413      	add	r3, r2
 8005002:	4618      	mov	r0, r3
 8005004:	f7fb faa8 	bl	8000558 <__aeabi_i2d>
 8005008:	a371      	add	r3, pc, #452	; (adr r3, 80051d0 <localMain+0x328>)
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f7fb fb0d 	bl	800062c <__aeabi_dmul>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4610      	mov	r0, r2
 8005018:	4619      	mov	r1, r3
 800501a:	f7fb fddf 	bl	8000bdc <__aeabi_d2f>
 800501e:	4603      	mov	r3, r0
 8005020:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// equation of time [min]
	float eqtime = 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 8005024:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8005028:	f7fb faa8 	bl	800057c <__aeabi_f2d>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	ec43 2b10 	vmov	d0, r2, r3
 8005034:	f00d f974 	bl	8012320 <cos>
 8005038:	ec51 0b10 	vmov	r0, r1, d0
 800503c:	a366      	add	r3, pc, #408	; (adr r3, 80051d8 <localMain+0x330>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb faf3 	bl	800062c <__aeabi_dmul>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	a364      	add	r3, pc, #400	; (adr r3, 80051e0 <localMain+0x338>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f7fb f934 	bl	80002c0 <__adddf3>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4690      	mov	r8, r2
 800505e:	4699      	mov	r9, r3
 8005060:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8005064:	f7fb fa8a 	bl	800057c <__aeabi_f2d>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	ec43 2b10 	vmov	d0, r2, r3
 8005070:	f00d f9aa 	bl	80123c8 <sin>
 8005074:	ec51 0b10 	vmov	r0, r1, d0
 8005078:	a35b      	add	r3, pc, #364	; (adr r3, 80051e8 <localMain+0x340>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb fad5 	bl	800062c <__aeabi_dmul>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4640      	mov	r0, r8
 8005088:	4649      	mov	r1, r9
 800508a:	f7fb f917 	bl	80002bc <__aeabi_dsub>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4690      	mov	r8, r2
 8005094:	4699      	mov	r9, r3
 8005096:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800509a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800509e:	ee17 0a90 	vmov	r0, s15
 80050a2:	f7fb fa6b 	bl	800057c <__aeabi_f2d>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	ec43 2b10 	vmov	d0, r2, r3
 80050ae:	f00d f937 	bl	8012320 <cos>
 80050b2:	ec51 0b10 	vmov	r0, r1, d0
 80050b6:	a34e      	add	r3, pc, #312	; (adr r3, 80051f0 <localMain+0x348>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb fab6 	bl	800062c <__aeabi_dmul>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4640      	mov	r0, r8
 80050c6:	4649      	mov	r1, r9
 80050c8:	f7fb f8f8 	bl	80002bc <__aeabi_dsub>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4690      	mov	r8, r2
 80050d2:	4699      	mov	r9, r3
 80050d4:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80050d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050dc:	ee17 0a90 	vmov	r0, s15
 80050e0:	f7fb fa4c 	bl	800057c <__aeabi_f2d>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	ec43 2b10 	vmov	d0, r2, r3
 80050ec:	f00d f96c 	bl	80123c8 <sin>
 80050f0:	ec51 0b10 	vmov	r0, r1, d0
 80050f4:	a340      	add	r3, pc, #256	; (adr r3, 80051f8 <localMain+0x350>)
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f7fb fa97 	bl	800062c <__aeabi_dmul>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4640      	mov	r0, r8
 8005104:	4649      	mov	r1, r9
 8005106:	f7fb f8d9 	bl	80002bc <__aeabi_dsub>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4610      	mov	r0, r2
 8005110:	4619      	mov	r1, r3
 8005112:	a33b      	add	r3, pc, #236	; (adr r3, 8005200 <localMain+0x358>)
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f7fb fa88 	bl	800062c <__aeabi_dmul>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4610      	mov	r0, r2
 8005122:	4619      	mov	r1, r3
 8005124:	f7fb fd5a 	bl	8000bdc <__aeabi_d2f>
 8005128:	4603      	mov	r3, r0
 800512a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	// solar declination angle [rad]
	float decl = 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 800512e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8005132:	f7fb fa23 	bl	800057c <__aeabi_f2d>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	ec43 2b10 	vmov	d0, r2, r3
 800513e:	f00d f8ef 	bl	8012320 <cos>
 8005142:	ec51 0b10 	vmov	r0, r1, d0
 8005146:	a330      	add	r3, pc, #192	; (adr r3, 8005208 <localMain+0x360>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7fb fa6e 	bl	800062c <__aeabi_dmul>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	a12e      	add	r1, pc, #184	; (adr r1, 8005210 <localMain+0x368>)
 8005156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800515a:	f7fb f8af 	bl	80002bc <__aeabi_dsub>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4690      	mov	r8, r2
 8005164:	4699      	mov	r9, r3
 8005166:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800516a:	f7fb fa07 	bl	800057c <__aeabi_f2d>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	ec43 2b10 	vmov	d0, r2, r3
 8005176:	f00d f927 	bl	80123c8 <sin>
 800517a:	ec51 0b10 	vmov	r0, r1, d0
 800517e:	a326      	add	r3, pc, #152	; (adr r3, 8005218 <localMain+0x370>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	f7fb fa52 	bl	800062c <__aeabi_dmul>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4640      	mov	r0, r8
 800518e:	4649      	mov	r1, r9
 8005190:	f7fb f896 	bl	80002c0 <__adddf3>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4690      	mov	r8, r2
 800519a:	4699      	mov	r9, r3
 800519c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80051a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051a4:	ee17 0a90 	vmov	r0, s15
 80051a8:	f7fb f9e8 	bl	800057c <__aeabi_f2d>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	ec43 2b10 	vmov	d0, r2, r3
 80051b4:	f00d f8b4 	bl	8012320 <cos>
 80051b8:	ec51 0b10 	vmov	r0, r1, d0
 80051bc:	a318      	add	r3, pc, #96	; (adr r3, 8005220 <localMain+0x378>)
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f7fb fa33 	bl	800062c <__aeabi_dmul>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	e03f      	b.n	800524c <localMain+0x3a4>
 80051cc:	f3af 8000 	nop.w
 80051d0:	d4b3ac9a 	.word	0xd4b3ac9a
 80051d4:	3f91a099 	.word	0x3f91a099
 80051d8:	ba2be059 	.word	0xba2be059
 80051dc:	3f5e9af5 	.word	0x3f5e9af5
 80051e0:	30553261 	.word	0x30553261
 80051e4:	3f13a92a 	.word	0x3f13a92a
 80051e8:	83e8576d 	.word	0x83e8576d
 80051ec:	3fa06c65 	.word	0x3fa06c65
 80051f0:	183f91e6 	.word	0x183f91e6
 80051f4:	3f8dee78 	.word	0x3f8dee78
 80051f8:	fe260b2d 	.word	0xfe260b2d
 80051fc:	3fa4ea28 	.word	0x3fa4ea28
 8005200:	8f5c28f6 	.word	0x8f5c28f6
 8005204:	406ca5c2 	.word	0x406ca5c2
 8005208:	8051c9f7 	.word	0x8051c9f7
 800520c:	3fd99828 	.word	0x3fd99828
 8005210:	7c0f4517 	.word	0x7c0f4517
 8005214:	3f7c560c 	.word	0x3f7c560c
 8005218:	dd50a88f 	.word	0xdd50a88f
 800521c:	3fb1fc5c 	.word	0x3fb1fc5c
 8005220:	cfc829d0 	.word	0xcfc829d0
 8005224:	3f7bae46 	.word	0x3f7bae46
 8005228:	20003580 	.word	0x20003580
 800522c:	20003bb0 	.word	0x20003bb0
 8005230:	20003594 	.word	0x20003594
 8005234:	92492493 	.word	0x92492493
 8005238:	08014ff8 	.word	0x08014ff8
 800523c:	08019e74 	.word	0x08019e74
 8005240:	080199f8 	.word	0x080199f8
 8005244:	08015008 	.word	0x08015008
 8005248:	2aaaaaab 	.word	0x2aaaaaab
 800524c:	4640      	mov	r0, r8
 800524e:	4649      	mov	r1, r9
 8005250:	f7fb f834 	bl	80002bc <__aeabi_dsub>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4690      	mov	r8, r2
 800525a:	4699      	mov	r9, r3
 800525c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8005260:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005264:	ee17 0a90 	vmov	r0, s15
 8005268:	f7fb f988 	bl	800057c <__aeabi_f2d>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	ec43 2b10 	vmov	d0, r2, r3
 8005274:	f00d f8a8 	bl	80123c8 <sin>
 8005278:	ec51 0b10 	vmov	r0, r1, d0
 800527c:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f7fb f9d2 	bl	800062c <__aeabi_dmul>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4640      	mov	r0, r8
 800528e:	4649      	mov	r1, r9
 8005290:	f7fb f816 	bl	80002c0 <__adddf3>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4690      	mov	r8, r2
 800529a:	4699      	mov	r9, r3
 800529c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80052a0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80052a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052a8:	ee17 0a90 	vmov	r0, s15
 80052ac:	f7fb f966 	bl	800057c <__aeabi_f2d>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	ec43 2b10 	vmov	d0, r2, r3
 80052b8:	f00d f832 	bl	8012320 <cos>
 80052bc:	ec51 0b10 	vmov	r0, r1, d0
 80052c0:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f7fb f9b0 	bl	800062c <__aeabi_dmul>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4640      	mov	r0, r8
 80052d2:	4649      	mov	r1, r9
 80052d4:	f7fa fff2 	bl	80002bc <__aeabi_dsub>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4690      	mov	r8, r2
 80052de:	4699      	mov	r9, r3
 80052e0:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80052e4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80052e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ec:	ee17 0a90 	vmov	r0, s15
 80052f0:	f7fb f944 	bl	800057c <__aeabi_f2d>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	ec43 2b10 	vmov	d0, r2, r3
 80052fc:	f00d f864 	bl	80123c8 <sin>
 8005300:	ec51 0b10 	vmov	r0, r1, d0
 8005304:	f20f 4300 	addw	r3, pc, #1024	; 0x400
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f7fb f98e 	bl	800062c <__aeabi_dmul>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4640      	mov	r0, r8
 8005316:	4649      	mov	r1, r9
 8005318:	f7fa ffd2 	bl	80002c0 <__adddf3>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4610      	mov	r0, r2
 8005322:	4619      	mov	r1, r3
 8005324:	f7fb fc5a 	bl	8000bdc <__aeabi_d2f>
 8005328:	4603      	mov	r3, r0
 800532a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4


	double longitude = 17; 	// [deg]
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	4be9      	ldr	r3, [pc, #932]	; (80056d8 <localMain+0x830>)
 8005334:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	double latitude = 51;	// [deg]
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	4be7      	ldr	r3, [pc, #924]	; (80056dc <localMain+0x834>)
 800533e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	float time_off = eqtime+4*longitude-60*timezone; // time offset [min]
 8005342:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005346:	f7fb f919 	bl	800057c <__aeabi_f2d>
 800534a:	4680      	mov	r8, r0
 800534c:	4689      	mov	r9, r1
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	4be3      	ldr	r3, [pc, #908]	; (80056e0 <localMain+0x838>)
 8005354:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005358:	f7fb f968 	bl	800062c <__aeabi_dmul>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4640      	mov	r0, r8
 8005362:	4649      	mov	r1, r9
 8005364:	f7fa ffac 	bl	80002c0 <__adddf3>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4690      	mov	r8, r2
 800536e:	4699      	mov	r9, r3
 8005370:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005374:	4613      	mov	r3, r2
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4618      	mov	r0, r3
 800537e:	f7fb f8eb 	bl	8000558 <__aeabi_i2d>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4640      	mov	r0, r8
 8005388:	4649      	mov	r1, r9
 800538a:	f7fa ff97 	bl	80002bc <__aeabi_dsub>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	f7fb fc21 	bl	8000bdc <__aeabi_d2f>
 800539a:	4603      	mov	r3, r0
 800539c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float tst = hhour*60+mmin+(float)ssec/60+time_off; // true solar time [min]
 80053a0:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	461a      	mov	r2, r3
 80053ae:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80053b2:	4413      	add	r3, r2
 80053b4:	ee07 3a90 	vmov	s15, r3
 80053b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053bc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c8:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 80056e4 <localMain+0x83c>
 80053cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80053d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d4:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80053d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053dc:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 80053e0:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80053e4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80053e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053ec:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80056e8 <localMain+0x840>
 80053f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053f4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 80053f8:	a3b5      	add	r3, pc, #724	; (adr r3, 80056d0 <localMain+0x828>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005402:	f7fb f913 	bl	800062c <__aeabi_dmul>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4610      	mov	r0, r2
 800540c:	4619      	mov	r1, r3
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	4bb6      	ldr	r3, [pc, #728]	; (80056ec <localMain+0x844>)
 8005414:	f7fb fa34 	bl	8000880 <__aeabi_ddiv>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	ec43 2b17 	vmov	d7, r2, r3
 8005420:	eeb0 0a47 	vmov.f32	s0, s14
 8005424:	eef0 0a67 	vmov.f32	s1, s15
 8005428:	f00c ffce 	bl	80123c8 <sin>
 800542c:	ec59 8b10 	vmov	r8, r9, d0
 8005430:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8005434:	f7fb f8a2 	bl	800057c <__aeabi_f2d>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	ec43 2b10 	vmov	d0, r2, r3
 8005440:	f00c ffc2 	bl	80123c8 <sin>
 8005444:	ec53 2b10 	vmov	r2, r3, d0
 8005448:	4640      	mov	r0, r8
 800544a:	4649      	mov	r1, r9
 800544c:	f7fb f8ee 	bl	800062c <__aeabi_dmul>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4690      	mov	r8, r2
 8005456:	4699      	mov	r9, r3
 8005458:	a39d      	add	r3, pc, #628	; (adr r3, 80056d0 <localMain+0x828>)
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005462:	f7fb f8e3 	bl	800062c <__aeabi_dmul>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4610      	mov	r0, r2
 800546c:	4619      	mov	r1, r3
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	4b9e      	ldr	r3, [pc, #632]	; (80056ec <localMain+0x844>)
 8005474:	f7fb fa04 	bl	8000880 <__aeabi_ddiv>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	ec43 2b17 	vmov	d7, r2, r3
 8005480:	eeb0 0a47 	vmov.f32	s0, s14
 8005484:	eef0 0a67 	vmov.f32	s1, s15
 8005488:	f00c ff4a 	bl	8012320 <cos>
 800548c:	ec5b ab10 	vmov	sl, fp, d0
 8005490:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8005494:	f7fb f872 	bl	800057c <__aeabi_f2d>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	ec43 2b10 	vmov	d0, r2, r3
 80054a0:	f00c ff3e 	bl	8012320 <cos>
 80054a4:	ec53 2b10 	vmov	r2, r3, d0
 80054a8:	4650      	mov	r0, sl
 80054aa:	4659      	mov	r1, fp
 80054ac:	f7fb f8be 	bl	800062c <__aeabi_dmul>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4692      	mov	sl, r2
 80054b6:	469b      	mov	fp, r3
 80054b8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80054bc:	f7fb f85e 	bl	800057c <__aeabi_f2d>
 80054c0:	a383      	add	r3, pc, #524	; (adr r3, 80056d0 <localMain+0x828>)
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f7fb f8b1 	bl	800062c <__aeabi_dmul>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	4b85      	ldr	r3, [pc, #532]	; (80056ec <localMain+0x844>)
 80054d8:	f7fb f9d2 	bl	8000880 <__aeabi_ddiv>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	ec43 2b17 	vmov	d7, r2, r3
 80054e4:	eeb0 0a47 	vmov.f32	s0, s14
 80054e8:	eef0 0a67 	vmov.f32	s1, s15
 80054ec:	f00c ff18 	bl	8012320 <cos>
 80054f0:	ec53 2b10 	vmov	r2, r3, d0
 80054f4:	4650      	mov	r0, sl
 80054f6:	4659      	mov	r1, fp
 80054f8:	f7fb f898 	bl	800062c <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4640      	mov	r0, r8
 8005502:	4649      	mov	r1, r9
 8005504:	f7fa fedc 	bl	80002c0 <__adddf3>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4610      	mov	r0, r2
 800550e:	4619      	mov	r1, r3
 8005510:	f7fb fb64 	bl	8000bdc <__aeabi_d2f>
 8005514:	4603      	mov	r3, r0
 8005516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float phi = acos(cosphi);
 800551a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800551e:	f7fb f82d 	bl	800057c <__aeabi_f2d>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	ec43 2b10 	vmov	d0, r2, r3
 800552a:	f00c ffd9 	bl	80124e0 <acos>
 800552e:	ec53 2b10 	vmov	r2, r3, d0
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	f7fb fb51 	bl	8000bdc <__aeabi_d2f>
 800553a:	4603      	mov	r3, r0
 800553c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float sinphi = sqrt(1-cosphi*cosphi);
 8005540:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005544:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800554c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005550:	ee17 0a90 	vmov	r0, s15
 8005554:	f7fb f812 	bl	800057c <__aeabi_f2d>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	ec43 2b10 	vmov	d0, r2, r3
 8005560:	f00d f862 	bl	8012628 <sqrt>
 8005564:	ec53 2b10 	vmov	r2, r3, d0
 8005568:	4610      	mov	r0, r2
 800556a:	4619      	mov	r1, r3
 800556c:	f7fb fb36 	bl	8000bdc <__aeabi_d2f>
 8005570:	4603      	mov	r3, r0
 8005572:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 8005576:	a356      	add	r3, pc, #344	; (adr r3, 80056d0 <localMain+0x828>)
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005580:	f7fb f854 	bl	800062c <__aeabi_dmul>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4610      	mov	r0, r2
 800558a:	4619      	mov	r1, r3
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	4b56      	ldr	r3, [pc, #344]	; (80056ec <localMain+0x844>)
 8005592:	f7fb f975 	bl	8000880 <__aeabi_ddiv>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	ec43 2b17 	vmov	d7, r2, r3
 800559e:	eeb0 0a47 	vmov.f32	s0, s14
 80055a2:	eef0 0a67 	vmov.f32	s1, s15
 80055a6:	f00c ff0f 	bl	80123c8 <sin>
 80055aa:	ec59 8b10 	vmov	r8, r9, d0
 80055ae:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80055b2:	f7fa ffe3 	bl	800057c <__aeabi_f2d>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4640      	mov	r0, r8
 80055bc:	4649      	mov	r1, r9
 80055be:	f7fb f835 	bl	800062c <__aeabi_dmul>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4690      	mov	r8, r2
 80055c8:	4699      	mov	r9, r3
 80055ca:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80055ce:	f7fa ffd5 	bl	800057c <__aeabi_f2d>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	ec43 2b10 	vmov	d0, r2, r3
 80055da:	f00c fef5 	bl	80123c8 <sin>
 80055de:	ec53 2b10 	vmov	r2, r3, d0
 80055e2:	4640      	mov	r0, r8
 80055e4:	4649      	mov	r1, r9
 80055e6:	f7fa fe69 	bl	80002bc <__aeabi_dsub>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4614      	mov	r4, r2
 80055f0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80055f4:	a336      	add	r3, pc, #216	; (adr r3, 80056d0 <localMain+0x828>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80055fe:	f7fb f815 	bl	800062c <__aeabi_dmul>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	4b37      	ldr	r3, [pc, #220]	; (80056ec <localMain+0x844>)
 8005610:	f7fb f936 	bl	8000880 <__aeabi_ddiv>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	ec43 2b17 	vmov	d7, r2, r3
 800561c:	eeb0 0a47 	vmov.f32	s0, s14
 8005620:	eef0 0a67 	vmov.f32	s1, s15
 8005624:	f00c fe7c 	bl	8012320 <cos>
 8005628:	ec59 8b10 	vmov	r8, r9, d0
 800562c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005630:	f7fa ffa4 	bl	800057c <__aeabi_f2d>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4640      	mov	r0, r8
 800563a:	4649      	mov	r1, r9
 800563c:	f7fa fff6 	bl	800062c <__aeabi_dmul>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4620      	mov	r0, r4
 8005646:	4629      	mov	r1, r5
 8005648:	f7fb f91a 	bl	8000880 <__aeabi_ddiv>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	ec43 2b17 	vmov	d7, r2, r3
 8005654:	eeb0 0a47 	vmov.f32	s0, s14
 8005658:	eef0 0a67 	vmov.f32	s1, s15
 800565c:	f00c ff40 	bl	80124e0 <acos>
 8005660:	ec53 2b10 	vmov	r2, r3, d0
 8005664:	4610      	mov	r0, r2
 8005666:	4619      	mov	r1, r3
 8005668:	f7fb fab8 	bl	8000bdc <__aeabi_d2f>
 800566c:	4603      	mov	r3, r0
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef1 7a67 	vneg.f32	s15, s15
 8005676:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

	// setting for sunrise/sunset zenith angle [rad]
	double twilightType[] = {0.833, 6, 12, 18}; // twilight, civil, nautical, astronomical
 800567a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800567e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005682:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <localMain+0x848>)
 8005684:	461c      	mov	r4, r3
 8005686:	4615      	mov	r5, r2
 8005688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800568a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800568c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double zenith = (90+twilightType[0])*M_PI/180;
 8005694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <localMain+0x84c>)
 80056a6:	f7fa fe0b 	bl	80002c0 <__adddf3>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4610      	mov	r0, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	a307      	add	r3, pc, #28	; (adr r3, 80056d0 <localMain+0x828>)
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f7fa ffb8 	bl	800062c <__aeabi_dmul>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4610      	mov	r0, r2
 80056c2:	4619      	mov	r1, r3
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	4b08      	ldr	r3, [pc, #32]	; (80056ec <localMain+0x844>)
 80056ca:	f7fb f8d9 	bl	8000880 <__aeabi_ddiv>
 80056ce:	e01f      	b.n	8005710 <localMain+0x868>
 80056d0:	54442d18 	.word	0x54442d18
 80056d4:	400921fb 	.word	0x400921fb
 80056d8:	40310000 	.word	0x40310000
 80056dc:	40498000 	.word	0x40498000
 80056e0:	40100000 	.word	0x40100000
 80056e4:	42700000 	.word	0x42700000
 80056e8:	43340000 	.word	0x43340000
 80056ec:	40668000 	.word	0x40668000
 80056f0:	080150e0 	.word	0x080150e0
 80056f4:	40568000 	.word	0x40568000
 80056f8:	ab324852 	.word	0xab324852
 80056fc:	3f4db877 	.word	0x3f4db877
 8005700:	d9839475 	.word	0xd9839475
 8005704:	3f661804 	.word	0x3f661804
 8005708:	e646f156 	.word	0xe646f156
 800570c:	3f583f91 	.word	0x3f583f91
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8005718:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 800571c:	f00c fe00 	bl	8012320 <cos>
 8005720:	ec55 4b10 	vmov	r4, r5, d0
 8005724:	a3f0      	add	r3, pc, #960	; (adr r3, 8005ae8 <localMain+0xc40>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800572e:	f7fa ff7d 	bl	800062c <__aeabi_dmul>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	4bec      	ldr	r3, [pc, #944]	; (8005af0 <localMain+0xc48>)
 8005740:	f7fb f89e 	bl	8000880 <__aeabi_ddiv>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	ec43 2b17 	vmov	d7, r2, r3
 800574c:	eeb0 0a47 	vmov.f32	s0, s14
 8005750:	eef0 0a67 	vmov.f32	s1, s15
 8005754:	f00c fde4 	bl	8012320 <cos>
 8005758:	ec59 8b10 	vmov	r8, r9, d0
 800575c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8005760:	f7fa ff0c 	bl	800057c <__aeabi_f2d>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	ec43 2b10 	vmov	d0, r2, r3
 800576c:	f00c fdd8 	bl	8012320 <cos>
 8005770:	ec53 2b10 	vmov	r2, r3, d0
 8005774:	4640      	mov	r0, r8
 8005776:	4649      	mov	r1, r9
 8005778:	f7fa ff58 	bl	800062c <__aeabi_dmul>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4620      	mov	r0, r4
 8005782:	4629      	mov	r1, r5
 8005784:	f7fb f87c 	bl	8000880 <__aeabi_ddiv>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4614      	mov	r4, r2
 800578e:	461d      	mov	r5, r3
 8005790:	a3d5      	add	r3, pc, #852	; (adr r3, 8005ae8 <localMain+0xc40>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800579a:	f7fa ff47 	bl	800062c <__aeabi_dmul>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	4610      	mov	r0, r2
 80057a4:	4619      	mov	r1, r3
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	4bd1      	ldr	r3, [pc, #836]	; (8005af0 <localMain+0xc48>)
 80057ac:	f7fb f868 	bl	8000880 <__aeabi_ddiv>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	ec43 2b17 	vmov	d7, r2, r3
 80057b8:	eeb0 0a47 	vmov.f32	s0, s14
 80057bc:	eef0 0a67 	vmov.f32	s1, s15
 80057c0:	f00c fe5a 	bl	8012478 <tan>
 80057c4:	ec59 8b10 	vmov	r8, r9, d0
 80057c8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80057cc:	f7fa fed6 	bl	800057c <__aeabi_f2d>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	ec43 2b10 	vmov	d0, r2, r3
 80057d8:	f00c fe4e 	bl	8012478 <tan>
 80057dc:	ec53 2b10 	vmov	r2, r3, d0
 80057e0:	4640      	mov	r0, r8
 80057e2:	4649      	mov	r1, r9
 80057e4:	f7fa ff22 	bl	800062c <__aeabi_dmul>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fa fd64 	bl	80002bc <__aeabi_dsub>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	ec43 2b17 	vmov	d7, r2, r3
 80057fc:	eeb0 0a47 	vmov.f32	s0, s14
 8005800:	eef0 0a67 	vmov.f32	s1, s15
 8005804:	f00c fe6c 	bl	80124e0 <acos>
 8005808:	ec53 2b10 	vmov	r2, r3, d0
 800580c:	4610      	mov	r0, r2
 800580e:	4619      	mov	r1, r3
 8005810:	f7fb f9e4 	bl	8000bdc <__aeabi_d2f>
 8005814:	4603      	mov	r3, r0
 8005816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//sunrise/sunset/noon times [min]
	int sunrise = 720-4*(longitude+cha*180/M_PI)-eqtime+60*timezone;
 800581a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800581e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8005af4 <localMain+0xc4c>
 8005822:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005826:	ee17 0a90 	vmov	r0, s15
 800582a:	f7fa fea7 	bl	800057c <__aeabi_f2d>
 800582e:	a3ae      	add	r3, pc, #696	; (adr r3, 8005ae8 <localMain+0xc40>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f7fb f824 	bl	8000880 <__aeabi_ddiv>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4610      	mov	r0, r2
 800583e:	4619      	mov	r1, r3
 8005840:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8005844:	f7fa fd3c 	bl	80002c0 <__adddf3>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4610      	mov	r0, r2
 800584e:	4619      	mov	r1, r3
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	4ba8      	ldr	r3, [pc, #672]	; (8005af8 <localMain+0xc50>)
 8005856:	f7fa fee9 	bl	800062c <__aeabi_dmul>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	f04f 0000 	mov.w	r0, #0
 8005862:	49a6      	ldr	r1, [pc, #664]	; (8005afc <localMain+0xc54>)
 8005864:	f7fa fd2a 	bl	80002bc <__aeabi_dsub>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4614      	mov	r4, r2
 800586e:	461d      	mov	r5, r3
 8005870:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005874:	f7fa fe82 	bl	800057c <__aeabi_f2d>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4620      	mov	r0, r4
 800587e:	4629      	mov	r1, r5
 8005880:	f7fa fd1c 	bl	80002bc <__aeabi_dsub>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4614      	mov	r4, r2
 800588a:	461d      	mov	r5, r3
 800588c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005890:	4613      	mov	r3, r2
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4618      	mov	r0, r3
 800589a:	f7fa fe5d 	bl	8000558 <__aeabi_i2d>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4620      	mov	r0, r4
 80058a4:	4629      	mov	r1, r5
 80058a6:	f7fa fd0b 	bl	80002c0 <__adddf3>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4610      	mov	r0, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	f7fb f96b 	bl	8000b8c <__aeabi_d2iz>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int sunset = 720-4*(longitude-cha*180/M_PI)-eqtime+60*timezone;
 80058bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80058c0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005af4 <localMain+0xc4c>
 80058c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058c8:	ee17 0a90 	vmov	r0, s15
 80058cc:	f7fa fe56 	bl	800057c <__aeabi_f2d>
 80058d0:	a385      	add	r3, pc, #532	; (adr r3, 8005ae8 <localMain+0xc40>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa ffd3 	bl	8000880 <__aeabi_ddiv>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80058e2:	f7fa fceb 	bl	80002bc <__aeabi_dsub>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	4b81      	ldr	r3, [pc, #516]	; (8005af8 <localMain+0xc50>)
 80058f4:	f7fa fe9a 	bl	800062c <__aeabi_dmul>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	f04f 0000 	mov.w	r0, #0
 8005900:	497e      	ldr	r1, [pc, #504]	; (8005afc <localMain+0xc54>)
 8005902:	f7fa fcdb 	bl	80002bc <__aeabi_dsub>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4614      	mov	r4, r2
 800590c:	461d      	mov	r5, r3
 800590e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005912:	f7fa fe33 	bl	800057c <__aeabi_f2d>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4620      	mov	r0, r4
 800591c:	4629      	mov	r1, r5
 800591e:	f7fa fccd 	bl	80002bc <__aeabi_dsub>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4614      	mov	r4, r2
 8005928:	461d      	mov	r5, r3
 800592a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800592e:	4613      	mov	r3, r2
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4618      	mov	r0, r3
 8005938:	f7fa fe0e 	bl	8000558 <__aeabi_i2d>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4620      	mov	r0, r4
 8005942:	4629      	mov	r1, r5
 8005944:	f7fa fcbc 	bl	80002c0 <__adddf3>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4610      	mov	r0, r2
 800594e:	4619      	mov	r1, r3
 8005950:	f7fb f91c 	bl	8000b8c <__aeabi_d2iz>
 8005954:	4603      	mov	r3, r0
 8005956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	int noon = 720-4*longitude-eqtime+60*timezone;
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	4b66      	ldr	r3, [pc, #408]	; (8005af8 <localMain+0xc50>)
 8005960:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005964:	f7fa fe62 	bl	800062c <__aeabi_dmul>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	f04f 0000 	mov.w	r0, #0
 8005970:	4962      	ldr	r1, [pc, #392]	; (8005afc <localMain+0xc54>)
 8005972:	f7fa fca3 	bl	80002bc <__aeabi_dsub>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4614      	mov	r4, r2
 800597c:	461d      	mov	r5, r3
 800597e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005982:	f7fa fdfb 	bl	800057c <__aeabi_f2d>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4620      	mov	r0, r4
 800598c:	4629      	mov	r1, r5
 800598e:	f7fa fc95 	bl	80002bc <__aeabi_dsub>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4614      	mov	r4, r2
 8005998:	461d      	mov	r5, r3
 800599a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800599e:	4613      	mov	r3, r2
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fa fdd6 	bl	8000558 <__aeabi_i2d>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4620      	mov	r0, r4
 80059b2:	4629      	mov	r1, r5
 80059b4:	f7fa fc84 	bl	80002c0 <__adddf3>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4610      	mov	r0, r2
 80059be:	4619      	mov	r1, r3
 80059c0:	f7fb f8e4 	bl	8000b8c <__aeabi_d2iz>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
//	sprintf(&textBuffer, "sa:%f cha:%f", sa, cha);
//	lcdPutStr(0, 210, textBuffer, smallestFont);

	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	sprintf(&textBuffer, "Sunrise: %02d:%02d", sunrise/60, sunrise%60);
 80059ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059ce:	4a4c      	ldr	r2, [pc, #304]	; (8005b00 <localMain+0xc58>)
 80059d0:	fb82 1203 	smull	r1, r2, r2, r3
 80059d4:	441a      	add	r2, r3
 80059d6:	1152      	asrs	r2, r2, #5
 80059d8:	17db      	asrs	r3, r3, #31
 80059da:	1ad4      	subs	r4, r2, r3
 80059dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80059e0:	4b47      	ldr	r3, [pc, #284]	; (8005b00 <localMain+0xc58>)
 80059e2:	fb83 1302 	smull	r1, r3, r3, r2
 80059e6:	4413      	add	r3, r2
 80059e8:	1159      	asrs	r1, r3, #5
 80059ea:	17d3      	asrs	r3, r2, #31
 80059ec:	1ac9      	subs	r1, r1, r3
 80059ee:	460b      	mov	r3, r1
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	1a5b      	subs	r3, r3, r1
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	1ad1      	subs	r1, r2, r3
 80059f8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80059fc:	460b      	mov	r3, r1
 80059fe:	4622      	mov	r2, r4
 8005a00:	4940      	ldr	r1, [pc, #256]	; (8005b04 <localMain+0xc5c>)
 8005a02:	f008 fef1 	bl	800e7e8 <siprintf>
	lcdPutStr(10, 28, textBuffer, font_12_zekton_bold);
 8005a06:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005a0a:	4b3f      	ldr	r3, [pc, #252]	; (8005b08 <localMain+0xc60>)
 8005a0c:	211c      	movs	r1, #28
 8005a0e:	200a      	movs	r0, #10
 8005a10:	f7fc feb0 	bl	8002774 <lcdPutStr>
	sprintf(&textBuffer, "Noon: %02d:%02d", noon/60, noon%60);
 8005a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a18:	4a39      	ldr	r2, [pc, #228]	; (8005b00 <localMain+0xc58>)
 8005a1a:	fb82 1203 	smull	r1, r2, r2, r3
 8005a1e:	441a      	add	r2, r3
 8005a20:	1152      	asrs	r2, r2, #5
 8005a22:	17db      	asrs	r3, r3, #31
 8005a24:	1ad4      	subs	r4, r2, r3
 8005a26:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005a2a:	4b35      	ldr	r3, [pc, #212]	; (8005b00 <localMain+0xc58>)
 8005a2c:	fb83 1302 	smull	r1, r3, r3, r2
 8005a30:	4413      	add	r3, r2
 8005a32:	1159      	asrs	r1, r3, #5
 8005a34:	17d3      	asrs	r3, r2, #31
 8005a36:	1ac9      	subs	r1, r1, r3
 8005a38:	460b      	mov	r3, r1
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	1a5b      	subs	r3, r3, r1
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	1ad1      	subs	r1, r2, r3
 8005a42:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005a46:	460b      	mov	r3, r1
 8005a48:	4622      	mov	r2, r4
 8005a4a:	4930      	ldr	r1, [pc, #192]	; (8005b0c <localMain+0xc64>)
 8005a4c:	f008 fecc 	bl	800e7e8 <siprintf>
	lcdPutStr(10, 44, textBuffer, font_12_zekton_bold);
 8005a50:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005a54:	4b2c      	ldr	r3, [pc, #176]	; (8005b08 <localMain+0xc60>)
 8005a56:	212c      	movs	r1, #44	; 0x2c
 8005a58:	200a      	movs	r0, #10
 8005a5a:	f7fc fe8b 	bl	8002774 <lcdPutStr>
	sprintf(&textBuffer, "Sunset: %02d:%02d", sunset/60, sunset%60);
 8005a5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a62:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <localMain+0xc58>)
 8005a64:	fb82 1203 	smull	r1, r2, r2, r3
 8005a68:	441a      	add	r2, r3
 8005a6a:	1152      	asrs	r2, r2, #5
 8005a6c:	17db      	asrs	r3, r3, #31
 8005a6e:	1ad4      	subs	r4, r2, r3
 8005a70:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005a74:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <localMain+0xc58>)
 8005a76:	fb83 1302 	smull	r1, r3, r3, r2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	1159      	asrs	r1, r3, #5
 8005a7e:	17d3      	asrs	r3, r2, #31
 8005a80:	1ac9      	subs	r1, r1, r3
 8005a82:	460b      	mov	r3, r1
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	1a5b      	subs	r3, r3, r1
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	1ad1      	subs	r1, r2, r3
 8005a8c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005a90:	460b      	mov	r3, r1
 8005a92:	4622      	mov	r2, r4
 8005a94:	491e      	ldr	r1, [pc, #120]	; (8005b10 <localMain+0xc68>)
 8005a96:	f008 fea7 	bl	800e7e8 <siprintf>
	lcdPutStr(10, 60, textBuffer, font_12_zekton_bold);
 8005a9a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <localMain+0xc60>)
 8005aa0:	213c      	movs	r1, #60	; 0x3c
 8005aa2:	200a      	movs	r0, #10
 8005aa4:	f7fc fe66 	bl	8002774 <lcdPutStr>

	sprintf(&textBuffer, "solar elevation angle: %02.3f deg", 90-phi*180/M_PI);
 8005aa8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005aac:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005af4 <localMain+0xc4c>
 8005ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ab4:	ee17 0a90 	vmov	r0, s15
 8005ab8:	f7fa fd60 	bl	800057c <__aeabi_f2d>
 8005abc:	a30a      	add	r3, pc, #40	; (adr r3, 8005ae8 <localMain+0xc40>)
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f7fa fedd 	bl	8000880 <__aeabi_ddiv>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	f04f 0000 	mov.w	r0, #0
 8005ace:	4911      	ldr	r1, [pc, #68]	; (8005b14 <localMain+0xc6c>)
 8005ad0:	f7fa fbf4 	bl	80002bc <__aeabi_dsub>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005adc:	490e      	ldr	r1, [pc, #56]	; (8005b18 <localMain+0xc70>)
 8005ade:	f008 fe83 	bl	800e7e8 <siprintf>
 8005ae2:	e01b      	b.n	8005b1c <localMain+0xc74>
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	54442d18 	.word	0x54442d18
 8005aec:	400921fb 	.word	0x400921fb
 8005af0:	40668000 	.word	0x40668000
 8005af4:	43340000 	.word	0x43340000
 8005af8:	40100000 	.word	0x40100000
 8005afc:	40868000 	.word	0x40868000
 8005b00:	88888889 	.word	0x88888889
 8005b04:	0801501c 	.word	0x0801501c
 8005b08:	0801a8fc 	.word	0x0801a8fc
 8005b0c:	08015030 	.word	0x08015030
 8005b10:	08015040 	.word	0x08015040
 8005b14:	40568000 	.word	0x40568000
 8005b18:	08015054 	.word	0x08015054
	lcdPutStr(10, 80, textBuffer, font_12_zekton_bold);
 8005b1c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005b20:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <localMain+0xcc8>)
 8005b22:	2150      	movs	r1, #80	; 0x50
 8005b24:	200a      	movs	r0, #10
 8005b26:	f7fc fe25 	bl	8002774 <lcdPutStr>

	double saDeg;
	if(cha<0) saDeg = -sa*180/M_PI;
 8005b2a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b36:	d51f      	bpl.n	8005b78 <localMain+0xcd0>
 8005b38:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005b3c:	eef1 7a67 	vneg.f32	s15, s15
 8005b40:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005b74 <localMain+0xccc>
 8005b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b48:	ee17 0a90 	vmov	r0, s15
 8005b4c:	f7fa fd16 	bl	800057c <__aeabi_f2d>
 8005b50:	a305      	add	r3, pc, #20	; (adr r3, 8005b68 <localMain+0xcc0>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fe93 	bl	8000880 <__aeabi_ddiv>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 8005b62:	e025      	b.n	8005bb0 <localMain+0xd08>
 8005b64:	f3af 8000 	nop.w
 8005b68:	54442d18 	.word	0x54442d18
 8005b6c:	400921fb 	.word	0x400921fb
 8005b70:	0801a8fc 	.word	0x0801a8fc
 8005b74:	43340000 	.word	0x43340000
	else saDeg = 360+sa*180/M_PI;
 8005b78:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005b7c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005b74 <localMain+0xccc>
 8005b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b84:	ee17 0a90 	vmov	r0, s15
 8005b88:	f7fa fcf8 	bl	800057c <__aeabi_f2d>
 8005b8c:	a3db      	add	r3, pc, #876	; (adr r3, 8005efc <localMain+0x1054>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f7fa fe75 	bl	8000880 <__aeabi_ddiv>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	4bcb      	ldr	r3, [pc, #812]	; (8005ed0 <localMain+0x1028>)
 8005ba4:	f7fa fb8c 	bl	80002c0 <__adddf3>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", saDeg);
 8005bb0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005bb4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8005bb8:	49c6      	ldr	r1, [pc, #792]	; (8005ed4 <localMain+0x102c>)
 8005bba:	f008 fe15 	bl	800e7e8 <siprintf>
//	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", fmod(360+sa*180/M_PI, 360));
	lcdPutStr(10, 96, textBuffer, font_12_zekton_bold);
 8005bbe:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005bc2:	4bc5      	ldr	r3, [pc, #788]	; (8005ed8 <localMain+0x1030>)
 8005bc4:	2160      	movs	r1, #96	; 0x60
 8005bc6:	200a      	movs	r0, #10
 8005bc8:	f7fc fdd4 	bl	8002774 <lcdPutStr>

	double perc = (hhour*60+mmin+(double)ssec/60-sunrise)*100/(sunset-sunrise);
 8005bcc:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005bde:	4413      	add	r3, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fa fcb9 	bl	8000558 <__aeabi_i2d>
 8005be6:	4604      	mov	r4, r0
 8005be8:	460d      	mov	r5, r1
 8005bea:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fa fca2 	bl	8000538 <__aeabi_ui2d>
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	4bb8      	ldr	r3, [pc, #736]	; (8005edc <localMain+0x1034>)
 8005bfa:	f7fa fe41 	bl	8000880 <__aeabi_ddiv>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4620      	mov	r0, r4
 8005c04:	4629      	mov	r1, r5
 8005c06:	f7fa fb5b 	bl	80002c0 <__adddf3>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4614      	mov	r4, r2
 8005c10:	461d      	mov	r5, r3
 8005c12:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8005c16:	f7fa fc9f 	bl	8000558 <__aeabi_i2d>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4620      	mov	r0, r4
 8005c20:	4629      	mov	r1, r5
 8005c22:	f7fa fb4b 	bl	80002bc <__aeabi_dsub>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	4bab      	ldr	r3, [pc, #684]	; (8005ee0 <localMain+0x1038>)
 8005c34:	f7fa fcfa 	bl	800062c <__aeabi_dmul>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	461d      	mov	r5, r3
 8005c40:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005c44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fa fc84 	bl	8000558 <__aeabi_i2d>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	f7fa fe12 	bl	8000880 <__aeabi_ddiv>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	sprintf(&textBuffer, "percentage daylight: %2.3f%%", perc);
 8005c64:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005c68:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005c6c:	499d      	ldr	r1, [pc, #628]	; (8005ee4 <localMain+0x103c>)
 8005c6e:	f008 fdbb 	bl	800e7e8 <siprintf>
	lcdPutStr(10, 116, textBuffer, font_12_zekton_bold);
 8005c72:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005c76:	4b98      	ldr	r3, [pc, #608]	; (8005ed8 <localMain+0x1030>)
 8005c78:	2174      	movs	r1, #116	; 0x74
 8005c7a:	200a      	movs	r0, #10
 8005c7c:	f7fc fd7a 	bl	8002774 <lcdPutStr>
	sprintf(&textBuffer, "day length: %02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 8005c80:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005c84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	4a97      	ldr	r2, [pc, #604]	; (8005ee8 <localMain+0x1040>)
 8005c8c:	fb82 1203 	smull	r1, r2, r2, r3
 8005c90:	441a      	add	r2, r3
 8005c92:	1152      	asrs	r2, r2, #5
 8005c94:	17db      	asrs	r3, r3, #31
 8005c96:	1ad4      	subs	r4, r2, r3
 8005c98:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005c9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ca0:	1ad2      	subs	r2, r2, r3
 8005ca2:	4b91      	ldr	r3, [pc, #580]	; (8005ee8 <localMain+0x1040>)
 8005ca4:	fb83 1302 	smull	r1, r3, r3, r2
 8005ca8:	4413      	add	r3, r2
 8005caa:	1159      	asrs	r1, r3, #5
 8005cac:	17d3      	asrs	r3, r2, #31
 8005cae:	1ac9      	subs	r1, r1, r3
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	1a5b      	subs	r3, r3, r1
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	1ad1      	subs	r1, r2, r3
 8005cba:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4622      	mov	r2, r4
 8005cc2:	498a      	ldr	r1, [pc, #552]	; (8005eec <localMain+0x1044>)
 8005cc4:	f008 fd90 	bl	800e7e8 <siprintf>
	lcdPutStr(10, 132, textBuffer, font_12_zekton_bold);
 8005cc8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005ccc:	4b82      	ldr	r3, [pc, #520]	; (8005ed8 <localMain+0x1030>)
 8005cce:	2184      	movs	r1, #132	; 0x84
 8005cd0:	200a      	movs	r0, #10
 8005cd2:	f7fc fd4f 	bl	8002774 <lcdPutStr>

	uint16_t scaleXrise = 10+380*sunrise/(24*60-0);
 8005cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cda:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	4a83      	ldr	r2, [pc, #524]	; (8005ef0 <localMain+0x1048>)
 8005ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8005ce8:	441a      	add	r2, r3
 8005cea:	1292      	asrs	r2, r2, #10
 8005cec:	17db      	asrs	r3, r3, #31
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	330a      	adds	r3, #10
 8005cf4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t scaleXset = 10+380*sunset/(24*60-0);
 8005cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cfc:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005d00:	fb02 f303 	mul.w	r3, r2, r3
 8005d04:	4a7a      	ldr	r2, [pc, #488]	; (8005ef0 <localMain+0x1048>)
 8005d06:	fb82 1203 	smull	r1, r2, r2, r3
 8005d0a:	441a      	add	r2, r3
 8005d0c:	1292      	asrs	r2, r2, #10
 8005d0e:	17db      	asrs	r3, r3, #31
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	330a      	adds	r3, #10
 8005d16:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t scaleXnoon = 10+380*noon/(24*60-0);
 8005d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d1e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	4a72      	ldr	r2, [pc, #456]	; (8005ef0 <localMain+0x1048>)
 8005d28:	fb82 1203 	smull	r1, r2, r2, r3
 8005d2c:	441a      	add	r2, r3
 8005d2e:	1292      	asrs	r2, r2, #10
 8005d30:	17db      	asrs	r3, r3, #31
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	330a      	adds	r3, #10
 8005d38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t scaleXnow = 10+380*(hhour*60+mmin)/(24*60-0);
 8005d3c:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005d40:	4613      	mov	r3, r2
 8005d42:	011b      	lsls	r3, r3, #4
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005d4e:	4413      	add	r3, r2
 8005d50:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005d54:	fb02 f303 	mul.w	r3, r2, r3
 8005d58:	4a65      	ldr	r2, [pc, #404]	; (8005ef0 <localMain+0x1048>)
 8005d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8005d5e:	441a      	add	r2, r3
 8005d60:	1292      	asrs	r2, r2, #10
 8005d62:	17db      	asrs	r3, r3, #31
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	330a      	adds	r3, #10
 8005d6a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	lcdHLine(10,399-10,165,1);
 8005d6e:	2301      	movs	r3, #1
 8005d70:	22a5      	movs	r2, #165	; 0xa5
 8005d72:	f240 1185 	movw	r1, #389	; 0x185
 8005d76:	200a      	movs	r0, #10
 8005d78:	f7fd f966 	bl	8003048 <lcdHLine>
	lcdVLine(10, 163, 167, 1);
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	22a7      	movs	r2, #167	; 0xa7
 8005d80:	21a3      	movs	r1, #163	; 0xa3
 8005d82:	200a      	movs	r0, #10
 8005d84:	f7fc fd24 	bl	80027d0 <lcdVLine>
	lcdVLine(399-10, 163, 167, 1);
 8005d88:	2301      	movs	r3, #1
 8005d8a:	22a7      	movs	r2, #167	; 0xa7
 8005d8c:	21a3      	movs	r1, #163	; 0xa3
 8005d8e:	f240 1085 	movw	r0, #389	; 0x185
 8005d92:	f7fc fd1d 	bl	80027d0 <lcdVLine>
	lcdVLine(scaleXrise, 160, 170, 2);
 8005d96:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	22aa      	movs	r2, #170	; 0xaa
 8005d9e:	21a0      	movs	r1, #160	; 0xa0
 8005da0:	f7fc fd16 	bl	80027d0 <lcdVLine>
	lcdVLine(scaleXset, 160, 170, 2);
 8005da4:	f8b7 008c 	ldrh.w	r0, [r7, #140]	; 0x8c
 8005da8:	2302      	movs	r3, #2
 8005daa:	22aa      	movs	r2, #170	; 0xaa
 8005dac:	21a0      	movs	r1, #160	; 0xa0
 8005dae:	f7fc fd0f 	bl	80027d0 <lcdVLine>
	lcdVLine(scaleXnoon, 160, 170, 2);
 8005db2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005db6:	2302      	movs	r3, #2
 8005db8:	22aa      	movs	r2, #170	; 0xaa
 8005dba:	21a0      	movs	r1, #160	; 0xa0
 8005dbc:	f7fc fd08 	bl	80027d0 <lcdVLine>
	lcdVLine(scaleXnow, 155, 175, 2);
 8005dc0:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	22af      	movs	r2, #175	; 0xaf
 8005dc8:	219b      	movs	r1, #155	; 0x9b
 8005dca:	f7fc fd01 	bl	80027d0 <lcdVLine>

	sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 8005dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dd2:	4a45      	ldr	r2, [pc, #276]	; (8005ee8 <localMain+0x1040>)
 8005dd4:	fb82 1203 	smull	r1, r2, r2, r3
 8005dd8:	441a      	add	r2, r3
 8005dda:	1152      	asrs	r2, r2, #5
 8005ddc:	17db      	asrs	r3, r3, #31
 8005dde:	1ad4      	subs	r4, r2, r3
 8005de0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005de4:	4b40      	ldr	r3, [pc, #256]	; (8005ee8 <localMain+0x1040>)
 8005de6:	fb83 1302 	smull	r1, r3, r3, r2
 8005dea:	4413      	add	r3, r2
 8005dec:	1159      	asrs	r1, r3, #5
 8005dee:	17d3      	asrs	r3, r2, #31
 8005df0:	1ac9      	subs	r1, r1, r3
 8005df2:	460b      	mov	r3, r1
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	1a5b      	subs	r3, r3, r1
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	1ad1      	subs	r1, r2, r3
 8005dfc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005e00:	460b      	mov	r3, r1
 8005e02:	4622      	mov	r2, r4
 8005e04:	493b      	ldr	r1, [pc, #236]	; (8005ef4 <localMain+0x104c>)
 8005e06:	f008 fcef 	bl	800e7e8 <siprintf>
	lcdPutStr(scaleXrise-19, 170, textBuffer, smallestFont);
 8005e0a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005e0e:	3b13      	subs	r3, #19
 8005e10:	b298      	uxth	r0, r3
 8005e12:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005e16:	4b38      	ldr	r3, [pc, #224]	; (8005ef8 <localMain+0x1050>)
 8005e18:	21aa      	movs	r1, #170	; 0xaa
 8005e1a:	f7fc fcab 	bl	8002774 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 8005e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e22:	4a31      	ldr	r2, [pc, #196]	; (8005ee8 <localMain+0x1040>)
 8005e24:	fb82 1203 	smull	r1, r2, r2, r3
 8005e28:	441a      	add	r2, r3
 8005e2a:	1152      	asrs	r2, r2, #5
 8005e2c:	17db      	asrs	r3, r3, #31
 8005e2e:	1ad4      	subs	r4, r2, r3
 8005e30:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005e34:	4b2c      	ldr	r3, [pc, #176]	; (8005ee8 <localMain+0x1040>)
 8005e36:	fb83 1302 	smull	r1, r3, r3, r2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	1159      	asrs	r1, r3, #5
 8005e3e:	17d3      	asrs	r3, r2, #31
 8005e40:	1ac9      	subs	r1, r1, r3
 8005e42:	460b      	mov	r3, r1
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	1a5b      	subs	r3, r3, r1
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	1ad1      	subs	r1, r2, r3
 8005e4c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005e50:	460b      	mov	r3, r1
 8005e52:	4622      	mov	r2, r4
 8005e54:	4927      	ldr	r1, [pc, #156]	; (8005ef4 <localMain+0x104c>)
 8005e56:	f008 fcc7 	bl	800e7e8 <siprintf>
	lcdPutStr(scaleXset-19, 170, textBuffer, smallestFont);
 8005e5a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e5e:	3b13      	subs	r3, #19
 8005e60:	b298      	uxth	r0, r3
 8005e62:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005e66:	4b24      	ldr	r3, [pc, #144]	; (8005ef8 <localMain+0x1050>)
 8005e68:	21aa      	movs	r1, #170	; 0xaa
 8005e6a:	f7fc fc83 	bl	8002774 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 8005e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e72:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <localMain+0x1040>)
 8005e74:	fb82 1203 	smull	r1, r2, r2, r3
 8005e78:	441a      	add	r2, r3
 8005e7a:	1152      	asrs	r2, r2, #5
 8005e7c:	17db      	asrs	r3, r3, #31
 8005e7e:	1ad4      	subs	r4, r2, r3
 8005e80:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005e84:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <localMain+0x1040>)
 8005e86:	fb83 1302 	smull	r1, r3, r3, r2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	1159      	asrs	r1, r3, #5
 8005e8e:	17d3      	asrs	r3, r2, #31
 8005e90:	1ac9      	subs	r1, r1, r3
 8005e92:	460b      	mov	r3, r1
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	1a5b      	subs	r3, r3, r1
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	1ad1      	subs	r1, r2, r3
 8005e9c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4913      	ldr	r1, [pc, #76]	; (8005ef4 <localMain+0x104c>)
 8005ea6:	f008 fc9f 	bl	800e7e8 <siprintf>
	lcdPutStr(scaleXnoon-19, 170, textBuffer, smallestFont);
 8005eaa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005eae:	3b13      	subs	r3, #19
 8005eb0:	b298      	uxth	r0, r3
 8005eb2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005eb6:	4b10      	ldr	r3, [pc, #64]	; (8005ef8 <localMain+0x1050>)
 8005eb8:	21aa      	movs	r1, #170	; 0xaa
 8005eba:	f7fc fc5b 	bl	8002774 <lcdPutStr>
}
 8005ebe:	bf00      	nop
 8005ec0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eca:	bf00      	nop
 8005ecc:	f3af 8000 	nop.w
 8005ed0:	40768000 	.word	0x40768000
 8005ed4:	08015078 	.word	0x08015078
 8005ed8:	0801a8fc 	.word	0x0801a8fc
 8005edc:	404e0000 	.word	0x404e0000
 8005ee0:	40590000 	.word	0x40590000
 8005ee4:	08015098 	.word	0x08015098
 8005ee8:	88888889 	.word	0x88888889
 8005eec:	080150b8 	.word	0x080150b8
 8005ef0:	b60b60b7 	.word	0xb60b60b7
 8005ef4:	080150d4 	.word	0x080150d4
 8005ef8:	080199f8 	.word	0x080199f8
 8005efc:	54442d18 	.word	0x54442d18
 8005f00:	400921fb 	.word	0x400921fb

08005f04 <prevPage>:
//#include "fonts/zekton24.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <prevPage+0x30>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d006      	beq.n	8005f1e <prevPage+0x1a>
		currentPage--;
 8005f10:	4b08      	ldr	r3, [pc, #32]	; (8005f34 <prevPage+0x30>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <prevPage+0x30>)
 8005f1a:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 8005f1c:	e005      	b.n	8005f2a <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 8005f1e:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <prevPage+0x34>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <prevPage+0x30>)
 8005f28:	701a      	strb	r2, [r3, #0]
}
 8005f2a:	bf00      	nop
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	20003bd4 	.word	0x20003bd4
 8005f38:	2000018b 	.word	0x2000018b

08005f3c <nextPage>:
void nextPage(void){
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 8005f40:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <nextPage+0x34>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <nextPage+0x38>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	da06      	bge.n	8005f5e <nextPage+0x22>
		currentPage++;
 8005f50:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <nextPage+0x34>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	3301      	adds	r3, #1
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <nextPage+0x34>)
 8005f5a:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 8005f5c:	e002      	b.n	8005f64 <nextPage+0x28>
		currentPage=0;
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <nextPage+0x34>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	20003bd4 	.word	0x20003bd4
 8005f74:	2000018b 	.word	0x2000018b

08005f78 <showPage1>:

void showPage1(void){
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b092      	sub	sp, #72	; 0x48
 8005f7c:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 8005f7e:	2300      	movs	r3, #0
 8005f80:	623b      	str	r3, [r7, #32]
 8005f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	605a      	str	r2, [r3, #4]
 8005f8c:	609a      	str	r2, [r3, #8]
 8005f8e:	60da      	str	r2, [r3, #12]
 8005f90:	611a      	str	r2, [r3, #16]
 8005f92:	615a      	str	r2, [r3, #20]
 8005f94:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 8005f96:	2300      	movs	r3, #0
 8005f98:	603b      	str	r3, [r7, #0]
 8005f9a:	1d3b      	adds	r3, r7, #4
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	609a      	str	r2, [r3, #8]
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	611a      	str	r2, [r3, #16]
 8005fa8:	615a      	str	r2, [r3, #20]
 8005faa:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8005fac:	4b17      	ldr	r3, [pc, #92]	; (800600c <showPage1+0x94>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4b16      	ldr	r3, [pc, #88]	; (800600c <showPage1+0x94>)
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4b14      	ldr	r3, [pc, #80]	; (800600c <showPage1+0x94>)
 8005fba:	789b      	ldrb	r3, [r3, #2]
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4913      	ldr	r1, [pc, #76]	; (8006010 <showPage1+0x98>)
 8005fc4:	f008 fc10 	bl	800e7e8 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 8005fc8:	463a      	mov	r2, r7
 8005fca:	4b12      	ldr	r3, [pc, #72]	; (8006014 <showPage1+0x9c>)
 8005fcc:	210b      	movs	r1, #11
 8005fce:	200e      	movs	r0, #14
 8005fd0:	f7fc fbd0 	bl	8002774 <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	2227      	movs	r2, #39	; 0x27
 8005fd8:	2106      	movs	r1, #6
 8005fda:	2001      	movs	r0, #1
 8005fdc:	f7fc fbf8 	bl	80027d0 <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	2228      	movs	r2, #40	; 0x28
 8005fe4:	2105      	movs	r1, #5
 8005fe6:	2002      	movs	r0, #2
 8005fe8:	f7fc fbf2 	bl	80027d0 <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 8005fec:	2301      	movs	r3, #1
 8005fee:	2228      	movs	r2, #40	; 0x28
 8005ff0:	2105      	movs	r1, #5
 8005ff2:	2003      	movs	r0, #3
 8005ff4:	f7fc fbec 	bl	80027d0 <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	2227      	movs	r2, #39	; 0x27
 8005ffc:	2106      	movs	r1, #6
 8005ffe:	2004      	movs	r0, #4
 8006000:	f7fc fbe6 	bl	80027d0 <lcdVLine>
}
 8006004:	bf00      	nop
 8006006:	3740      	adds	r7, #64	; 0x40
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20003580 	.word	0x20003580
 8006010:	080151b8 	.word	0x080151b8
 8006014:	0801fe7c 	.word	0x0801fe7c

08006018 <showPage2>:
void showPage2(void){
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800601e:	2300      	movs	r3, #0
 8006020:	603b      	str	r3, [r7, #0]
 8006022:	1d3b      	adds	r3, r7, #4
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	609a      	str	r2, [r3, #8]
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	611a      	str	r2, [r3, #16]
 8006030:	615a      	str	r2, [r3, #20]
 8006032:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 8006034:	463b      	mov	r3, r7
 8006036:	4913      	ldr	r1, [pc, #76]	; (8006084 <showPage2+0x6c>)
 8006038:	4618      	mov	r0, r3
 800603a:	f008 fbd5 	bl	800e7e8 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 800603e:	463a      	mov	r2, r7
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <showPage2+0x70>)
 8006042:	2132      	movs	r1, #50	; 0x32
 8006044:	200e      	movs	r0, #14
 8006046:	f7fc fb95 	bl	8002774 <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800604a:	2301      	movs	r3, #1
 800604c:	224e      	movs	r2, #78	; 0x4e
 800604e:	212d      	movs	r1, #45	; 0x2d
 8006050:	2001      	movs	r0, #1
 8006052:	f7fc fbbd 	bl	80027d0 <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8006056:	2301      	movs	r3, #1
 8006058:	224f      	movs	r2, #79	; 0x4f
 800605a:	212c      	movs	r1, #44	; 0x2c
 800605c:	2002      	movs	r0, #2
 800605e:	f7fc fbb7 	bl	80027d0 <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8006062:	2301      	movs	r3, #1
 8006064:	224f      	movs	r2, #79	; 0x4f
 8006066:	212c      	movs	r1, #44	; 0x2c
 8006068:	2003      	movs	r0, #3
 800606a:	f7fc fbb1 	bl	80027d0 <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800606e:	2301      	movs	r3, #1
 8006070:	224e      	movs	r2, #78	; 0x4e
 8006072:	212d      	movs	r1, #45	; 0x2d
 8006074:	2004      	movs	r0, #4
 8006076:	f7fc fbab 	bl	80027d0 <lcdVLine>
}
 800607a:	bf00      	nop
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	080151c8 	.word	0x080151c8
 8006088:	0801fe7c 	.word	0x0801fe7c

0800608c <showPage3>:
void showPage3(void){
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8006092:	2300      	movs	r3, #0
 8006094:	603b      	str	r3, [r7, #0]
 8006096:	1d3b      	adds	r3, r7, #4
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	605a      	str	r2, [r3, #4]
 800609e:	609a      	str	r2, [r3, #8]
 80060a0:	60da      	str	r2, [r3, #12]
 80060a2:	611a      	str	r2, [r3, #16]
 80060a4:	615a      	str	r2, [r3, #20]
 80060a6:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 80060a8:	463b      	mov	r3, r7
 80060aa:	4913      	ldr	r1, [pc, #76]	; (80060f8 <showPage3+0x6c>)
 80060ac:	4618      	mov	r0, r3
 80060ae:	f008 fb9b 	bl	800e7e8 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 80060b2:	463a      	mov	r2, r7
 80060b4:	4b11      	ldr	r3, [pc, #68]	; (80060fc <showPage3+0x70>)
 80060b6:	2100      	movs	r1, #0
 80060b8:	2000      	movs	r0, #0
 80060ba:	f7fc fb5b 	bl	8002774 <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80060be:	2301      	movs	r3, #1
 80060c0:	2275      	movs	r2, #117	; 0x75
 80060c2:	2154      	movs	r1, #84	; 0x54
 80060c4:	2001      	movs	r0, #1
 80060c6:	f7fc fb83 	bl	80027d0 <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 80060ca:	2301      	movs	r3, #1
 80060cc:	2276      	movs	r2, #118	; 0x76
 80060ce:	2153      	movs	r1, #83	; 0x53
 80060d0:	2002      	movs	r0, #2
 80060d2:	f7fc fb7d 	bl	80027d0 <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 80060d6:	2301      	movs	r3, #1
 80060d8:	2276      	movs	r2, #118	; 0x76
 80060da:	2153      	movs	r1, #83	; 0x53
 80060dc:	2003      	movs	r0, #3
 80060de:	f7fc fb77 	bl	80027d0 <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80060e2:	2301      	movs	r3, #1
 80060e4:	2275      	movs	r2, #117	; 0x75
 80060e6:	2154      	movs	r1, #84	; 0x54
 80060e8:	2004      	movs	r0, #4
 80060ea:	f7fc fb71 	bl	80027d0 <lcdVLine>
}
 80060ee:	bf00      	nop
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	080151cc 	.word	0x080151cc
 80060fc:	0801fe7c 	.word	0x0801fe7c

08006100 <showPage4>:
void showPage4(void){
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8006106:	2300      	movs	r3, #0
 8006108:	603b      	str	r3, [r7, #0]
 800610a:	1d3b      	adds	r3, r7, #4
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	605a      	str	r2, [r3, #4]
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	611a      	str	r2, [r3, #16]
 8006118:	615a      	str	r2, [r3, #20]
 800611a:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 800611c:	463b      	mov	r3, r7
 800611e:	4913      	ldr	r1, [pc, #76]	; (800616c <showPage4+0x6c>)
 8006120:	4618      	mov	r0, r3
 8006122:	f008 fb61 	bl	800e7e8 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8006126:	463a      	mov	r2, r7
 8006128:	4b11      	ldr	r3, [pc, #68]	; (8006170 <showPage4+0x70>)
 800612a:	2100      	movs	r1, #0
 800612c:	2000      	movs	r0, #0
 800612e:	f7fc fb21 	bl	8002774 <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8006132:	2301      	movs	r3, #1
 8006134:	229c      	movs	r2, #156	; 0x9c
 8006136:	217b      	movs	r1, #123	; 0x7b
 8006138:	2001      	movs	r0, #1
 800613a:	f7fc fb49 	bl	80027d0 <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 800613e:	2301      	movs	r3, #1
 8006140:	229d      	movs	r2, #157	; 0x9d
 8006142:	217a      	movs	r1, #122	; 0x7a
 8006144:	2002      	movs	r0, #2
 8006146:	f7fc fb43 	bl	80027d0 <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 800614a:	2301      	movs	r3, #1
 800614c:	229d      	movs	r2, #157	; 0x9d
 800614e:	217a      	movs	r1, #122	; 0x7a
 8006150:	2003      	movs	r0, #3
 8006152:	f7fc fb3d 	bl	80027d0 <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8006156:	2301      	movs	r3, #1
 8006158:	229c      	movs	r2, #156	; 0x9c
 800615a:	217b      	movs	r1, #123	; 0x7b
 800615c:	2004      	movs	r0, #4
 800615e:	f7fc fb37 	bl	80027d0 <lcdVLine>
}
 8006162:	bf00      	nop
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	080151d8 	.word	0x080151d8
 8006170:	0801fe7c 	.word	0x0801fe7c

08006174 <showPage5>:
void showPage5(void){
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800617a:	2300      	movs	r3, #0
 800617c:	603b      	str	r3, [r7, #0]
 800617e:	1d3b      	adds	r3, r7, #4
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	609a      	str	r2, [r3, #8]
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	611a      	str	r2, [r3, #16]
 800618c:	615a      	str	r2, [r3, #20]
 800618e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 8006190:	463b      	mov	r3, r7
 8006192:	4925      	ldr	r1, [pc, #148]	; (8006228 <showPage5+0xb4>)
 8006194:	4618      	mov	r0, r3
 8006196:	f008 fb27 	bl	800e7e8 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 800619a:	463a      	mov	r2, r7
 800619c:	4b23      	ldr	r3, [pc, #140]	; (800622c <showPage5+0xb8>)
 800619e:	2100      	movs	r1, #0
 80061a0:	200a      	movs	r0, #10
 80061a2:	f7fc fae7 	bl	8002774 <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 80061a6:	463a      	mov	r2, r7
 80061a8:	4b21      	ldr	r3, [pc, #132]	; (8006230 <showPage5+0xbc>)
 80061aa:	210f      	movs	r1, #15
 80061ac:	200a      	movs	r0, #10
 80061ae:	f7fc fae1 	bl	8002774 <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 80061b2:	463a      	mov	r2, r7
 80061b4:	4b1f      	ldr	r3, [pc, #124]	; (8006234 <showPage5+0xc0>)
 80061b6:	2132      	movs	r1, #50	; 0x32
 80061b8:	200a      	movs	r0, #10
 80061ba:	f7fc fadb 	bl	8002774 <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 80061be:	463a      	mov	r2, r7
 80061c0:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <showPage5+0xc4>)
 80061c2:	213c      	movs	r1, #60	; 0x3c
 80061c4:	200a      	movs	r0, #10
 80061c6:	f7fc fad5 	bl	8002774 <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 80061ca:	463a      	mov	r2, r7
 80061cc:	4b1b      	ldr	r3, [pc, #108]	; (800623c <showPage5+0xc8>)
 80061ce:	215a      	movs	r1, #90	; 0x5a
 80061d0:	200a      	movs	r0, #10
 80061d2:	f7fc facf 	bl	8002774 <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 80061d6:	463a      	mov	r2, r7
 80061d8:	4b19      	ldr	r3, [pc, #100]	; (8006240 <showPage5+0xcc>)
 80061da:	2178      	movs	r1, #120	; 0x78
 80061dc:	200a      	movs	r0, #10
 80061de:	f7fc fac9 	bl	8002774 <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 80061e2:	463a      	mov	r2, r7
 80061e4:	4b17      	ldr	r3, [pc, #92]	; (8006244 <showPage5+0xd0>)
 80061e6:	2196      	movs	r1, #150	; 0x96
 80061e8:	200a      	movs	r0, #10
 80061ea:	f7fc fac3 	bl	8002774 <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 80061ee:	2301      	movs	r3, #1
 80061f0:	22c3      	movs	r2, #195	; 0xc3
 80061f2:	21a2      	movs	r1, #162	; 0xa2
 80061f4:	2001      	movs	r0, #1
 80061f6:	f7fc faeb 	bl	80027d0 <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 80061fa:	2301      	movs	r3, #1
 80061fc:	22c4      	movs	r2, #196	; 0xc4
 80061fe:	21a1      	movs	r1, #161	; 0xa1
 8006200:	2002      	movs	r0, #2
 8006202:	f7fc fae5 	bl	80027d0 <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8006206:	2301      	movs	r3, #1
 8006208:	22c4      	movs	r2, #196	; 0xc4
 800620a:	21a1      	movs	r1, #161	; 0xa1
 800620c:	2003      	movs	r0, #3
 800620e:	f7fc fadf 	bl	80027d0 <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8006212:	2301      	movs	r3, #1
 8006214:	22c3      	movs	r2, #195	; 0xc3
 8006216:	21a2      	movs	r1, #162	; 0xa2
 8006218:	2004      	movs	r0, #4
 800621a:	f7fc fad9 	bl	80027d0 <lcdVLine>
}
 800621e:	bf00      	nop
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	080151e4 	.word	0x080151e4
 800622c:	0801dd6c 	.word	0x0801dd6c
 8006230:	0801e8b4 	.word	0x0801e8b4
 8006234:	0801b384 	.word	0x0801b384
 8006238:	0801b800 	.word	0x0801b800
 800623c:	0801c85c 	.word	0x0801c85c
 8006240:	0801d2e4 	.word	0x0801d2e4
 8006244:	0801fe7c 	.word	0x0801fe7c

08006248 <showPage6>:
void showPage6(void){
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 800624e:	2301      	movs	r3, #1
 8006250:	22ea      	movs	r2, #234	; 0xea
 8006252:	21c9      	movs	r1, #201	; 0xc9
 8006254:	2001      	movs	r0, #1
 8006256:	f7fc fabb 	bl	80027d0 <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 800625a:	2301      	movs	r3, #1
 800625c:	22eb      	movs	r2, #235	; 0xeb
 800625e:	21c8      	movs	r1, #200	; 0xc8
 8006260:	2002      	movs	r0, #2
 8006262:	f7fc fab5 	bl	80027d0 <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8006266:	2301      	movs	r3, #1
 8006268:	22eb      	movs	r2, #235	; 0xeb
 800626a:	21c8      	movs	r1, #200	; 0xc8
 800626c:	2003      	movs	r0, #3
 800626e:	f7fc faaf 	bl	80027d0 <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8006272:	2301      	movs	r3, #1
 8006274:	22ea      	movs	r2, #234	; 0xea
 8006276:	21c9      	movs	r1, #201	; 0xc9
 8006278:	2004      	movs	r0, #4
 800627a:	f7fc faa9 	bl	80027d0 <lcdVLine>
		lcdRect(0,399,25,80,1);
 800627e:	2301      	movs	r3, #1
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2350      	movs	r3, #80	; 0x50
 8006284:	2219      	movs	r2, #25
 8006286:	f240 118f 	movw	r1, #399	; 0x18f
 800628a:	2000      	movs	r0, #0
 800628c:	f7fd f832 	bl	80032f4 <lcdRect>
		lcdRect(0,399,120,180,1);
 8006290:	2301      	movs	r3, #1
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	23b4      	movs	r3, #180	; 0xb4
 8006296:	2278      	movs	r2, #120	; 0x78
 8006298:	f240 118f 	movw	r1, #399	; 0x18f
 800629c:	2000      	movs	r0, #0
 800629e:	f7fd f829 	bl	80032f4 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 80062a2:	2301      	movs	r3, #1
 80062a4:	9302      	str	r3, [sp, #8]
 80062a6:	2300      	movs	r3, #0
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	2303      	movs	r3, #3
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	2332      	movs	r3, #50	; 0x32
 80062b0:	220a      	movs	r2, #10
 80062b2:	2132      	movs	r1, #50	; 0x32
 80062b4:	200a      	movs	r0, #10
 80062b6:	f7fd f842 	bl	800333e <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 80062ba:	2301      	movs	r3, #1
 80062bc:	9302      	str	r3, [sp, #8]
 80062be:	2301      	movs	r3, #1
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	2303      	movs	r3, #3
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	2332      	movs	r3, #50	; 0x32
 80062c8:	220a      	movs	r2, #10
 80062ca:	2164      	movs	r1, #100	; 0x64
 80062cc:	203c      	movs	r0, #60	; 0x3c
 80062ce:	f7fd f836 	bl	800333e <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 80062d2:	2301      	movs	r3, #1
 80062d4:	9302      	str	r3, [sp, #8]
 80062d6:	2302      	movs	r3, #2
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	2303      	movs	r3, #3
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	2332      	movs	r3, #50	; 0x32
 80062e0:	220a      	movs	r2, #10
 80062e2:	2196      	movs	r1, #150	; 0x96
 80062e4:	206e      	movs	r0, #110	; 0x6e
 80062e6:	f7fd f82a 	bl	800333e <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 80062ea:	2301      	movs	r3, #1
 80062ec:	9302      	str	r3, [sp, #8]
 80062ee:	2303      	movs	r3, #3
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	2303      	movs	r3, #3
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	2332      	movs	r3, #50	; 0x32
 80062f8:	220a      	movs	r2, #10
 80062fa:	21c8      	movs	r1, #200	; 0xc8
 80062fc:	20a0      	movs	r0, #160	; 0xa0
 80062fe:	f7fd f81e 	bl	800333e <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 8006302:	2301      	movs	r3, #1
 8006304:	9302      	str	r3, [sp, #8]
 8006306:	2304      	movs	r3, #4
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	2303      	movs	r3, #3
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	2332      	movs	r3, #50	; 0x32
 8006310:	220a      	movs	r2, #10
 8006312:	21fa      	movs	r1, #250	; 0xfa
 8006314:	20d2      	movs	r0, #210	; 0xd2
 8006316:	f7fd f812 	bl	800333e <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 800631a:	2301      	movs	r3, #1
 800631c:	9302      	str	r3, [sp, #8]
 800631e:	2305      	movs	r3, #5
 8006320:	9301      	str	r3, [sp, #4]
 8006322:	2303      	movs	r3, #3
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	2332      	movs	r3, #50	; 0x32
 8006328:	220a      	movs	r2, #10
 800632a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800632e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8006332:	f7fd f804 	bl	800333e <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 8006336:	2301      	movs	r3, #1
 8006338:	9302      	str	r3, [sp, #8]
 800633a:	2306      	movs	r3, #6
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	2303      	movs	r3, #3
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	2332      	movs	r3, #50	; 0x32
 8006344:	220a      	movs	r2, #10
 8006346:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800634a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800634e:	f7fc fff6 	bl	800333e <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 8006352:	2301      	movs	r3, #1
 8006354:	9302      	str	r3, [sp, #8]
 8006356:	2307      	movs	r3, #7
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	2303      	movs	r3, #3
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	2364      	movs	r3, #100	; 0x64
 8006360:	223c      	movs	r2, #60	; 0x3c
 8006362:	2132      	movs	r1, #50	; 0x32
 8006364:	200a      	movs	r0, #10
 8006366:	f7fc ffea 	bl	800333e <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 800636a:	2301      	movs	r3, #1
 800636c:	9302      	str	r3, [sp, #8]
 800636e:	2308      	movs	r3, #8
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	2303      	movs	r3, #3
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	2364      	movs	r3, #100	; 0x64
 8006378:	223c      	movs	r2, #60	; 0x3c
 800637a:	2164      	movs	r1, #100	; 0x64
 800637c:	203c      	movs	r0, #60	; 0x3c
 800637e:	f7fc ffde 	bl	800333e <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 8006382:	2301      	movs	r3, #1
 8006384:	9302      	str	r3, [sp, #8]
 8006386:	2309      	movs	r3, #9
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	2303      	movs	r3, #3
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	2364      	movs	r3, #100	; 0x64
 8006390:	223c      	movs	r2, #60	; 0x3c
 8006392:	2196      	movs	r1, #150	; 0x96
 8006394:	206e      	movs	r0, #110	; 0x6e
 8006396:	f7fc ffd2 	bl	800333e <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 800639a:	2301      	movs	r3, #1
 800639c:	9302      	str	r3, [sp, #8]
 800639e:	230a      	movs	r3, #10
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	2303      	movs	r3, #3
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	2364      	movs	r3, #100	; 0x64
 80063a8:	223c      	movs	r2, #60	; 0x3c
 80063aa:	21c8      	movs	r1, #200	; 0xc8
 80063ac:	20a0      	movs	r0, #160	; 0xa0
 80063ae:	f7fc ffc6 	bl	800333e <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 80063b2:	2301      	movs	r3, #1
 80063b4:	9302      	str	r3, [sp, #8]
 80063b6:	230b      	movs	r3, #11
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	2303      	movs	r3, #3
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	2364      	movs	r3, #100	; 0x64
 80063c0:	223c      	movs	r2, #60	; 0x3c
 80063c2:	21fa      	movs	r1, #250	; 0xfa
 80063c4:	20d2      	movs	r0, #210	; 0xd2
 80063c6:	f7fc ffba 	bl	800333e <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 80063ca:	2301      	movs	r3, #1
 80063cc:	9302      	str	r3, [sp, #8]
 80063ce:	230c      	movs	r3, #12
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	2303      	movs	r3, #3
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	2364      	movs	r3, #100	; 0x64
 80063d8:	223c      	movs	r2, #60	; 0x3c
 80063da:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80063de:	f44f 7082 	mov.w	r0, #260	; 0x104
 80063e2:	f7fc ffac 	bl	800333e <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 80063e6:	2301      	movs	r3, #1
 80063e8:	9302      	str	r3, [sp, #8]
 80063ea:	230d      	movs	r3, #13
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	2303      	movs	r3, #3
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	2364      	movs	r3, #100	; 0x64
 80063f4:	223c      	movs	r2, #60	; 0x3c
 80063f6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80063fa:	f44f 709b 	mov.w	r0, #310	; 0x136
 80063fe:	f7fc ff9e 	bl	800333e <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 8006402:	2301      	movs	r3, #1
 8006404:	9302      	str	r3, [sp, #8]
 8006406:	230e      	movs	r3, #14
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	2303      	movs	r3, #3
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	2396      	movs	r3, #150	; 0x96
 8006410:	226e      	movs	r2, #110	; 0x6e
 8006412:	2132      	movs	r1, #50	; 0x32
 8006414:	200a      	movs	r0, #10
 8006416:	f7fc ff92 	bl	800333e <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 800641a:	2301      	movs	r3, #1
 800641c:	9302      	str	r3, [sp, #8]
 800641e:	230f      	movs	r3, #15
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	2303      	movs	r3, #3
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	2396      	movs	r3, #150	; 0x96
 8006428:	226e      	movs	r2, #110	; 0x6e
 800642a:	2164      	movs	r1, #100	; 0x64
 800642c:	203c      	movs	r0, #60	; 0x3c
 800642e:	f7fc ff86 	bl	800333e <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 8006432:	2301      	movs	r3, #1
 8006434:	9302      	str	r3, [sp, #8]
 8006436:	2310      	movs	r3, #16
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	2303      	movs	r3, #3
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2396      	movs	r3, #150	; 0x96
 8006440:	226e      	movs	r2, #110	; 0x6e
 8006442:	2196      	movs	r1, #150	; 0x96
 8006444:	206e      	movs	r0, #110	; 0x6e
 8006446:	f7fc ff7a 	bl	800333e <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 800644a:	2301      	movs	r3, #1
 800644c:	9302      	str	r3, [sp, #8]
 800644e:	2311      	movs	r3, #17
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	2303      	movs	r3, #3
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	2396      	movs	r3, #150	; 0x96
 8006458:	226e      	movs	r2, #110	; 0x6e
 800645a:	21c8      	movs	r1, #200	; 0xc8
 800645c:	20a0      	movs	r0, #160	; 0xa0
 800645e:	f7fc ff6e 	bl	800333e <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 8006462:	2301      	movs	r3, #1
 8006464:	9302      	str	r3, [sp, #8]
 8006466:	2312      	movs	r3, #18
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	2303      	movs	r3, #3
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	2396      	movs	r3, #150	; 0x96
 8006470:	226e      	movs	r2, #110	; 0x6e
 8006472:	21fa      	movs	r1, #250	; 0xfa
 8006474:	20d2      	movs	r0, #210	; 0xd2
 8006476:	f7fc ff62 	bl	800333e <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 800647a:	2301      	movs	r3, #1
 800647c:	9302      	str	r3, [sp, #8]
 800647e:	2313      	movs	r3, #19
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	2303      	movs	r3, #3
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	2396      	movs	r3, #150	; 0x96
 8006488:	226e      	movs	r2, #110	; 0x6e
 800648a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800648e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8006492:	f7fc ff54 	bl	800333e <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 8006496:	2301      	movs	r3, #1
 8006498:	9302      	str	r3, [sp, #8]
 800649a:	2314      	movs	r3, #20
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	2303      	movs	r3, #3
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	2396      	movs	r3, #150	; 0x96
 80064a4:	226e      	movs	r2, #110	; 0x6e
 80064a6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80064aa:	f44f 709b 	mov.w	r0, #310	; 0x136
 80064ae:	f7fc ff46 	bl	800333e <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 80064b2:	2304      	movs	r3, #4
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	2301      	movs	r3, #1
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	23c8      	movs	r3, #200	; 0xc8
 80064bc:	22a0      	movs	r2, #160	; 0xa0
 80064be:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80064c2:	200a      	movs	r0, #10
 80064c4:	f7fc ff3b 	bl	800333e <lcdRect2>
}
 80064c8:	bf00      	nop
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <showPage>:

void showPage(uint8_t pageNum){
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4603      	mov	r3, r0
 80064d8:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	2b05      	cmp	r3, #5
 80064de:	d821      	bhi.n	8006524 <showPage+0x54>
 80064e0:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <showPage+0x18>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	08006501 	.word	0x08006501
 80064ec:	08006507 	.word	0x08006507
 80064f0:	0800650d 	.word	0x0800650d
 80064f4:	08006513 	.word	0x08006513
 80064f8:	08006519 	.word	0x08006519
 80064fc:	0800651f 	.word	0x0800651f
	case 0:
		showPage1();
 8006500:	f7ff fd3a 	bl	8005f78 <showPage1>
		break;
 8006504:	e00e      	b.n	8006524 <showPage+0x54>
	case 1:
		showPage2();
 8006506:	f7ff fd87 	bl	8006018 <showPage2>
		break;
 800650a:	e00b      	b.n	8006524 <showPage+0x54>
	case 2:
		showPage3();
 800650c:	f7ff fdbe 	bl	800608c <showPage3>
		break;
 8006510:	e008      	b.n	8006524 <showPage+0x54>
	case 3:
		showPage4();
 8006512:	f7ff fdf5 	bl	8006100 <showPage4>
		break;
 8006516:	e005      	b.n	8006524 <showPage+0x54>
	case 4:
		showPage5();
 8006518:	f7ff fe2c 	bl	8006174 <showPage5>
		break;
 800651c:	e002      	b.n	8006524 <showPage+0x54>
	case 5:
		showPage6();
 800651e:	f7ff fe93 	bl	8006248 <showPage6>
		break;
 8006522:	bf00      	nop
	}
}
 8006524:	bf00      	nop
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <setDefaultClbcks>:

static void setDefaultClbcks(void){
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8006530:	4b08      	ldr	r3, [pc, #32]	; (8006554 <setDefaultClbcks+0x28>)
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <setDefaultClbcks+0x2c>)
 8006534:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <setDefaultClbcks+0x30>)
 8006538:	4a09      	ldr	r2, [pc, #36]	; (8006560 <setDefaultClbcks+0x34>)
 800653a:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 800653c:	4b09      	ldr	r3, [pc, #36]	; (8006564 <setDefaultClbcks+0x38>)
 800653e:	4a0a      	ldr	r2, [pc, #40]	; (8006568 <setDefaultClbcks+0x3c>)
 8006540:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8006542:	4b0a      	ldr	r3, [pc, #40]	; (800656c <setDefaultClbcks+0x40>)
 8006544:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <setDefaultClbcks+0x44>)
 8006546:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 8006548:	bf00      	nop
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000568 	.word	0x20000568
 8006558:	080022d9 	.word	0x080022d9
 800655c:	200005b0 	.word	0x200005b0
 8006560:	080022e9 	.word	0x080022e9
 8006564:	2000061c 	.word	0x2000061c
 8006568:	08005f05 	.word	0x08005f05
 800656c:	200005d4 	.word	0x200005d4
 8006570:	08005f3d 	.word	0x08005f3d

08006574 <settingsSetup>:


void settingsSetup(void){
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006578:	f7ff ffd8 	bl	800652c <setDefaultClbcks>
}
 800657c:	bf00      	nop
 800657e:	bd80      	pop	{r7, pc}

08006580 <settingsMain>:

void settingsMain(void){
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8006586:	2300      	movs	r3, #0
 8006588:	603b      	str	r3, [r7, #0]
 800658a:	1d3b      	adds	r3, r7, #4
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	609a      	str	r2, [r3, #8]
 8006594:	60da      	str	r2, [r3, #12]
 8006596:	611a      	str	r2, [r3, #16]
 8006598:	615a      	str	r2, [r3, #20]
 800659a:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 800659c:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <settingsMain+0x30>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff ff95 	bl	80064d0 <showPage>

}
 80065a6:	bf00      	nop
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20003bd4 	.word	0x20003bd4

080065b4 <startStopwatch>:

#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

void startStopwatch(){
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
	stwStart();
 80065b8:	f7fd fa5e 	bl	8003a78 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 80065bc:	4b03      	ldr	r3, [pc, #12]	; (80065cc <startStopwatch+0x18>)
 80065be:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <startStopwatch+0x1c>)
 80065c0:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 80065c2:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <startStopwatch+0x20>)
 80065c4:	4a04      	ldr	r2, [pc, #16]	; (80065d8 <startStopwatch+0x24>)
 80065c6:	611a      	str	r2, [r3, #16]
}
 80065c8:	bf00      	nop
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	2000058c 	.word	0x2000058c
 80065d0:	080065dd 	.word	0x080065dd
 80065d4:	200005f8 	.word	0x200005f8
 80065d8:	0800661d 	.word	0x0800661d

080065dc <stopStopwatch>:
void stopStopwatch(){
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
	stwStop();
 80065e0:	f7fd fa6e 	bl	8003ac0 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 80065e4:	4b03      	ldr	r3, [pc, #12]	; (80065f4 <stopStopwatch+0x18>)
 80065e6:	4a04      	ldr	r2, [pc, #16]	; (80065f8 <stopStopwatch+0x1c>)
 80065e8:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 80065ea:	4b04      	ldr	r3, [pc, #16]	; (80065fc <stopStopwatch+0x20>)
 80065ec:	4a04      	ldr	r2, [pc, #16]	; (8006600 <stopStopwatch+0x24>)
 80065ee:	611a      	str	r2, [r3, #16]
}
 80065f0:	bf00      	nop
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	2000058c 	.word	0x2000058c
 80065f8:	080065b5 	.word	0x080065b5
 80065fc:	200005f8 	.word	0x200005f8
 8006600:	08006605 	.word	0x08006605

08006604 <resetStopwatch>:
void resetStopwatch(){
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
	stwClear();
 8006608:	f7fd fa68 	bl	8003adc <stwClear>
	stwT.clear();
 800660c:	4b02      	ldr	r3, [pc, #8]	; (8006618 <resetStopwatch+0x14>)
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	4798      	blx	r3
}
 8006612:	bf00      	nop
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	2000014c 	.word	0x2000014c

0800661c <saveStopwatch>:
void saveStopwatch(){
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
	stwSave();
 8006620:	f7fd fa6a 	bl	8003af8 <stwSave>
}
 8006624:	bf00      	nop
 8006626:	bd80      	pop	{r7, pc}

08006628 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
//	btn_B3.onSingleLongPressHandler = &returnToMenu;
	btn_B3.onSinglePressHandler = &resetPos;
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <setDefaultClbcks+0x48>)
 800662e:	4a11      	ldr	r2, [pc, #68]	; (8006674 <setDefaultClbcks+0x4c>)
 8006630:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <setDefaultClbcks+0x50>)
 8006634:	4a11      	ldr	r2, [pc, #68]	; (800667c <setDefaultClbcks+0x54>)
 8006636:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006638:	4b11      	ldr	r3, [pc, #68]	; (8006680 <setDefaultClbcks+0x58>)
 800663a:	4a12      	ldr	r2, [pc, #72]	; (8006684 <setDefaultClbcks+0x5c>)
 800663c:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 800663e:	4b12      	ldr	r3, [pc, #72]	; (8006688 <setDefaultClbcks+0x60>)
 8006640:	78db      	ldrb	r3, [r3, #3]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d006      	beq.n	800665a <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 800664c:	4b0f      	ldr	r3, [pc, #60]	; (800668c <setDefaultClbcks+0x64>)
 800664e:	4a10      	ldr	r2, [pc, #64]	; (8006690 <setDefaultClbcks+0x68>)
 8006650:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8006652:	4b10      	ldr	r3, [pc, #64]	; (8006694 <setDefaultClbcks+0x6c>)
 8006654:	4a10      	ldr	r2, [pc, #64]	; (8006698 <setDefaultClbcks+0x70>)
 8006656:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8006658:	e005      	b.n	8006666 <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 800665a:	4b0c      	ldr	r3, [pc, #48]	; (800668c <setDefaultClbcks+0x64>)
 800665c:	4a0f      	ldr	r2, [pc, #60]	; (800669c <setDefaultClbcks+0x74>)
 800665e:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8006660:	4b0c      	ldr	r3, [pc, #48]	; (8006694 <setDefaultClbcks+0x6c>)
 8006662:	4a0f      	ldr	r2, [pc, #60]	; (80066a0 <setDefaultClbcks+0x78>)
 8006664:	611a      	str	r2, [r3, #16]
}
 8006666:	bf00      	nop
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	2000061c 	.word	0x2000061c
 8006674:	080022f9 	.word	0x080022f9
 8006678:	20000568 	.word	0x20000568
 800667c:	080022d9 	.word	0x080022d9
 8006680:	200005b0 	.word	0x200005b0
 8006684:	080022e9 	.word	0x080022e9
 8006688:	20003834 	.word	0x20003834
 800668c:	2000058c 	.word	0x2000058c
 8006690:	080065dd 	.word	0x080065dd
 8006694:	200005f8 	.word	0x200005f8
 8006698:	0800661d 	.word	0x0800661d
 800669c:	080065b5 	.word	0x080065b5
 80066a0:	08006605 	.word	0x08006605

080066a4 <convertTicks>:

struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	099b      	lsrs	r3, r3, #6
 80066b0:	4a22      	ldr	r2, [pc, #136]	; (800673c <convertTicks+0x98>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	0993      	lsrs	r3, r2, #6
 80066c0:	491e      	ldr	r1, [pc, #120]	; (800673c <convertTicks+0x98>)
 80066c2:	fba1 1303 	umull	r1, r3, r1, r3
 80066c6:	089b      	lsrs	r3, r3, #2
 80066c8:	491d      	ldr	r1, [pc, #116]	; (8006740 <convertTicks+0x9c>)
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <convertTicks+0xa0>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	4b19      	ldr	r3, [pc, #100]	; (8006744 <convertTicks+0xa0>)
 80066e0:	fba3 1302 	umull	r1, r3, r3, r2
 80066e4:	09db      	lsrs	r3, r3, #7
 80066e6:	f241 7170 	movw	r1, #6000	; 0x1770
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	4a15      	ldr	r2, [pc, #84]	; (8006748 <convertTicks+0xa4>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	72bb      	strb	r3, [r7, #10]
		ticks%100
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	4b12      	ldr	r3, [pc, #72]	; (8006748 <convertTicks+0xa4>)
 8006700:	fba3 1302 	umull	r1, r3, r3, r2
 8006704:	095b      	lsrs	r3, r3, #5
 8006706:	2164      	movs	r1, #100	; 0x64
 8006708:	fb01 f303 	mul.w	r3, r1, r3
 800670c:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 800670e:	b2db      	uxtb	r3, r3
 8006710:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	2300      	movs	r3, #0
 8006718:	7b3a      	ldrb	r2, [r7, #12]
 800671a:	f362 0307 	bfi	r3, r2, #0, #8
 800671e:	7b7a      	ldrb	r2, [r7, #13]
 8006720:	f362 230f 	bfi	r3, r2, #8, #8
 8006724:	7bba      	ldrb	r2, [r7, #14]
 8006726:	f362 4317 	bfi	r3, r2, #16, #8
 800672a:	7bfa      	ldrb	r2, [r7, #15]
 800672c:	f362 631f 	bfi	r3, r2, #24, #8
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	002e9a77 	.word	0x002e9a77
 8006740:	00057e40 	.word	0x00057e40
 8006744:	057619f1 	.word	0x057619f1
 8006748:	51eb851f 	.word	0x51eb851f

0800674c <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af02      	add	r7, sp, #8
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 8006756:	793b      	ldrb	r3, [r7, #4]
 8006758:	4619      	mov	r1, r3
 800675a:	797b      	ldrb	r3, [r7, #5]
 800675c:	4618      	mov	r0, r3
 800675e:	79bb      	ldrb	r3, [r7, #6]
 8006760:	79fa      	ldrb	r2, [r7, #7]
 8006762:	9201      	str	r2, [sp, #4]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	4603      	mov	r3, r0
 8006768:	460a      	mov	r2, r1
 800676a:	4904      	ldr	r1, [pc, #16]	; (800677c <stwString+0x30>)
 800676c:	6838      	ldr	r0, [r7, #0]
 800676e:	f008 f83b 	bl	800e7e8 <siprintf>
	return str;
 8006772:	683b      	ldr	r3, [r7, #0]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	080152ac 	.word	0x080152ac

08006780 <updateStopwatch>:
void updateStopwatch(void){
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
	stw_val.hours = stwS.cnt/(100*60*60);
 8006784:	4b2a      	ldr	r3, [pc, #168]	; (8006830 <updateStopwatch+0xb0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800678c:	4a29      	ldr	r2, [pc, #164]	; (8006834 <updateStopwatch+0xb4>)
 800678e:	fb82 1203 	smull	r1, r2, r2, r3
 8006792:	1452      	asrs	r2, r2, #17
 8006794:	17db      	asrs	r3, r3, #31
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	b2da      	uxtb	r2, r3
 800679a:	4b27      	ldr	r3, [pc, #156]	; (8006838 <updateStopwatch+0xb8>)
 800679c:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
 800679e:	4b24      	ldr	r3, [pc, #144]	; (8006830 <updateStopwatch+0xb0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80067a6:	461a      	mov	r2, r3
 80067a8:	4b22      	ldr	r3, [pc, #136]	; (8006834 <updateStopwatch+0xb4>)
 80067aa:	fb83 1302 	smull	r1, r3, r3, r2
 80067ae:	1459      	asrs	r1, r3, #17
 80067b0:	17d3      	asrs	r3, r2, #31
 80067b2:	1acb      	subs	r3, r1, r3
 80067b4:	4921      	ldr	r1, [pc, #132]	; (800683c <updateStopwatch+0xbc>)
 80067b6:	fb01 f303 	mul.w	r3, r1, r3
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	4a20      	ldr	r2, [pc, #128]	; (8006840 <updateStopwatch+0xc0>)
 80067be:	fb82 1203 	smull	r1, r2, r2, r3
 80067c2:	11d2      	asrs	r2, r2, #7
 80067c4:	17db      	asrs	r3, r3, #31
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <updateStopwatch+0xb8>)
 80067cc:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%(60*100)/(100);
 80067ce:	4b18      	ldr	r3, [pc, #96]	; (8006830 <updateStopwatch+0xb0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80067d6:	461a      	mov	r2, r3
 80067d8:	4b19      	ldr	r3, [pc, #100]	; (8006840 <updateStopwatch+0xc0>)
 80067da:	fb83 1302 	smull	r1, r3, r3, r2
 80067de:	11d9      	asrs	r1, r3, #7
 80067e0:	17d3      	asrs	r3, r2, #31
 80067e2:	1acb      	subs	r3, r1, r3
 80067e4:	f241 7170 	movw	r1, #6000	; 0x1770
 80067e8:	fb01 f303 	mul.w	r3, r1, r3
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	4a15      	ldr	r2, [pc, #84]	; (8006844 <updateStopwatch+0xc4>)
 80067f0:	fb82 1203 	smull	r1, r2, r2, r3
 80067f4:	1152      	asrs	r2, r2, #5
 80067f6:	17db      	asrs	r3, r3, #31
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <updateStopwatch+0xb8>)
 80067fe:	709a      	strb	r2, [r3, #2]
	stw_val.csec = stwS.cnt%100;
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <updateStopwatch+0xb0>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006808:	461a      	mov	r2, r3
 800680a:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <updateStopwatch+0xc4>)
 800680c:	fb83 1302 	smull	r1, r3, r3, r2
 8006810:	1159      	asrs	r1, r3, #5
 8006812:	17d3      	asrs	r3, r2, #31
 8006814:	1acb      	subs	r3, r1, r3
 8006816:	2164      	movs	r1, #100	; 0x64
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	b2da      	uxtb	r2, r3
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <updateStopwatch+0xb8>)
 8006822:	70da      	strb	r2, [r3, #3]
}
 8006824:	bf00      	nop
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20003834 	.word	0x20003834
 8006834:	5d34edef 	.word	0x5d34edef
 8006838:	20003bd8 	.word	0x20003bd8
 800683c:	00057e40 	.word	0x00057e40
 8006840:	057619f1 	.word	0x057619f1
 8006844:	51eb851f 	.word	0x51eb851f

08006848 <stwSetup>:

void stwSetup(void){
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800684c:	f7ff feec 	bl	8006628 <setDefaultClbcks>
}
 8006850:	bf00      	nop
 8006852:	bd80      	pop	{r7, pc}

08006854 <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b091      	sub	sp, #68	; 0x44
 8006858:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 800685a:	2300      	movs	r3, #0
 800685c:	623b      	str	r3, [r7, #32]
 800685e:	2300      	movs	r3, #0
 8006860:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8006862:	4b7c      	ldr	r3, [pc, #496]	; (8006a54 <stwMain+0x200>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	4b7a      	ldr	r3, [pc, #488]	; (8006a54 <stwMain+0x200>)
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	f107 0020 	add.w	r0, r7, #32
 8006870:	4979      	ldr	r1, [pc, #484]	; (8006a58 <stwMain+0x204>)
 8006872:	f007 ffb9 	bl	800e7e8 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8006876:	2314      	movs	r3, #20
 8006878:	b29c      	uxth	r4, r3
 800687a:	f107 0320 	add.w	r3, r7, #32
 800687e:	4618      	mov	r0, r3
 8006880:	f7f9 fcb6 	bl	80001f0 <strlen>
 8006884:	4603      	mov	r3, r0
 8006886:	b29b      	uxth	r3, r3
 8006888:	fb14 f303 	smulbb	r3, r4, r3
 800688c:	b29b      	uxth	r3, r3
 800688e:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8006892:	b298      	uxth	r0, r3
 8006894:	f107 0220 	add.w	r2, r7, #32
 8006898:	4b70      	ldr	r3, [pc, #448]	; (8006a5c <stwMain+0x208>)
 800689a:	210a      	movs	r1, #10
 800689c:	f7fb ff6a 	bl	8002774 <lcdPutStr>

	updateStopwatch();
 80068a0:	f7ff ff6e 	bl	8006780 <updateStopwatch>
	char tempStr2[30] = {0};
 80068a4:	2300      	movs	r3, #0
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	1d3b      	adds	r3, r7, #4
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	605a      	str	r2, [r3, #4]
 80068b0:	609a      	str	r2, [r3, #8]
 80068b2:	60da      	str	r2, [r3, #12]
 80068b4:	611a      	str	r2, [r3, #16]
 80068b6:	615a      	str	r2, [r3, #20]
 80068b8:	831a      	strh	r2, [r3, #24]
	if(stw_val.hours != 0){
 80068ba:	4b69      	ldr	r3, [pc, #420]	; (8006a60 <stwMain+0x20c>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <stwMain+0x7e>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 80068c2:	4b67      	ldr	r3, [pc, #412]	; (8006a60 <stwMain+0x20c>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	463b      	mov	r3, r7
 80068ca:	4966      	ldr	r1, [pc, #408]	; (8006a64 <stwMain+0x210>)
 80068cc:	4618      	mov	r0, r3
 80068ce:	f007 ff8b 	bl	800e7e8 <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 80068d2:	463a      	mov	r2, r7
 80068d4:	4b61      	ldr	r3, [pc, #388]	; (8006a5c <stwMain+0x208>)
 80068d6:	215f      	movs	r1, #95	; 0x5f
 80068d8:	2014      	movs	r0, #20
 80068da:	f7fb ff4b 	bl	8002774 <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 80068de:	4b60      	ldr	r3, [pc, #384]	; (8006a60 <stwMain+0x20c>)
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	461a      	mov	r2, r3
 80068e4:	4b5e      	ldr	r3, [pc, #376]	; (8006a60 <stwMain+0x20c>)
 80068e6:	789b      	ldrb	r3, [r3, #2]
 80068e8:	4619      	mov	r1, r3
 80068ea:	4b5d      	ldr	r3, [pc, #372]	; (8006a60 <stwMain+0x20c>)
 80068ec:	78db      	ldrb	r3, [r3, #3]
 80068ee:	4638      	mov	r0, r7
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	460b      	mov	r3, r1
 80068f4:	495c      	ldr	r1, [pc, #368]	; (8006a68 <stwMain+0x214>)
 80068f6:	f007 ff77 	bl	800e7e8 <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 80068fa:	2322      	movs	r3, #34	; 0x22
 80068fc:	b29c      	uxth	r4, r3
 80068fe:	463b      	mov	r3, r7
 8006900:	4618      	mov	r0, r3
 8006902:	f7f9 fc75 	bl	80001f0 <strlen>
 8006906:	4603      	mov	r3, r0
 8006908:	b29b      	uxth	r3, r3
 800690a:	fb14 f303 	smulbb	r3, r4, r3
 800690e:	b29b      	uxth	r3, r3
 8006910:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8006914:	b298      	uxth	r0, r3
 8006916:	463a      	mov	r2, r7
 8006918:	4b54      	ldr	r3, [pc, #336]	; (8006a6c <stwMain+0x218>)
 800691a:	214c      	movs	r1, #76	; 0x4c
 800691c:	f7fb ff2a 	bl	8002774 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8006920:	2300      	movs	r3, #0
 8006922:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006926:	e08b      	b.n	8006a40 <stwMain+0x1ec>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 8006928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800692c:	4a50      	ldr	r2, [pc, #320]	; (8006a70 <stwMain+0x21c>)
 800692e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d07f      	beq.n	8006a36 <stwMain+0x1e2>
			sprintf(&tempStr2, "Lap %d:", i+1);
 8006936:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	463b      	mov	r3, r7
 800693e:	494d      	ldr	r1, [pc, #308]	; (8006a74 <stwMain+0x220>)
 8006940:	4618      	mov	r0, r3
 8006942:	f007 ff51 	bl	800e7e8 <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, font_12_zekton);
 8006946:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	b2db      	uxtb	r3, r3
 800694e:	3b7e      	subs	r3, #126	; 0x7e
 8006950:	b2d9      	uxtb	r1, r3
 8006952:	463a      	mov	r2, r7
 8006954:	4b48      	ldr	r3, [pc, #288]	; (8006a78 <stwMain+0x224>)
 8006956:	2000      	movs	r0, #0
 8006958:	f7fb ff0c 	bl	8002774 <lcdPutStr>
			if(i>0){
 800695c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006960:	2b00      	cmp	r3, #0
 8006962:	d022      	beq.n	80069aa <stwMain+0x156>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), font_12_zekton);
 8006964:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	b2db      	uxtb	r3, r3
 800696c:	3b7e      	subs	r3, #126	; 0x7e
 800696e:	b2dc      	uxtb	r4, r3
 8006970:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006974:	4a3e      	ldr	r2, [pc, #248]	; (8006a70 <stwMain+0x21c>)
 8006976:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800697a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800697e:	3b01      	subs	r3, #1
 8006980:	493b      	ldr	r1, [pc, #236]	; (8006a70 <stwMain+0x21c>)
 8006982:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fe8b 	bl	80066a4 <convertTicks>
 800698e:	4603      	mov	r3, r0
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
 8006992:	463b      	mov	r3, r7
 8006994:	4619      	mov	r1, r3
 8006996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006998:	f7ff fed8 	bl	800674c <stwString>
 800699c:	4602      	mov	r2, r0
 800699e:	4b36      	ldr	r3, [pc, #216]	; (8006a78 <stwMain+0x224>)
 80069a0:	4621      	mov	r1, r4
 80069a2:	2037      	movs	r0, #55	; 0x37
 80069a4:	f7fb fee6 	bl	8002774 <lcdPutStr>
 80069a8:	e01a      	b.n	80069e0 <stwMain+0x18c>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 80069aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	3b7e      	subs	r3, #126	; 0x7e
 80069b4:	b2dc      	uxtb	r4, r3
 80069b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069ba:	4a2d      	ldr	r2, [pc, #180]	; (8006a70 <stwMain+0x21c>)
 80069bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7ff fe6f 	bl	80066a4 <convertTicks>
 80069c6:	4603      	mov	r3, r0
 80069c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ca:	463b      	mov	r3, r7
 80069cc:	4619      	mov	r1, r3
 80069ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069d0:	f7ff febc 	bl	800674c <stwString>
 80069d4:	4602      	mov	r2, r0
 80069d6:	4b28      	ldr	r3, [pc, #160]	; (8006a78 <stwMain+0x224>)
 80069d8:	4621      	mov	r1, r4
 80069da:	2037      	movs	r0, #55	; 0x37
 80069dc:	f7fb feca 	bl	8002774 <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 80069e0:	463b      	mov	r3, r7
 80069e2:	4926      	ldr	r1, [pc, #152]	; (8006a7c <stwMain+0x228>)
 80069e4:	4618      	mov	r0, r3
 80069e6:	f007 feff 	bl	800e7e8 <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, font_12_zekton);
 80069ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	3b7e      	subs	r3, #126	; 0x7e
 80069f4:	b2d9      	uxtb	r1, r3
 80069f6:	463a      	mov	r2, r7
 80069f8:	4b1f      	ldr	r3, [pc, #124]	; (8006a78 <stwMain+0x224>)
 80069fa:	20a5      	movs	r0, #165	; 0xa5
 80069fc:	f7fb feba 	bl	8002774 <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8006a00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	3b7e      	subs	r3, #126	; 0x7e
 8006a0a:	b2dc      	uxtb	r4, r3
 8006a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a10:	4a17      	ldr	r2, [pc, #92]	; (8006a70 <stwMain+0x21c>)
 8006a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff fe44 	bl	80066a4 <convertTicks>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a20:	463b      	mov	r3, r7
 8006a22:	4619      	mov	r1, r3
 8006a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a26:	f7ff fe91 	bl	800674c <stwString>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	4b12      	ldr	r3, [pc, #72]	; (8006a78 <stwMain+0x224>)
 8006a2e:	4621      	mov	r1, r4
 8006a30:	20e1      	movs	r0, #225	; 0xe1
 8006a32:	f7fb fe9f 	bl	8002774 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8006a36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006a40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a44:	2b06      	cmp	r3, #6
 8006a46:	f67f af6f 	bls.w	8006928 <stwMain+0xd4>

//	sprintf(&tempStr2, "%d", stwS.cnt);
//	lcdPutStr(0, 130, tempStr2, zecton45font);
//	sprintf(&tempStr2, "%d", stwS.state);
//	lcdPutStr(0, 184, tempStr2, zecton45font);
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	373c      	adds	r7, #60	; 0x3c
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd90      	pop	{r4, r7, pc}
 8006a54:	20003580 	.word	0x20003580
 8006a58:	080152c0 	.word	0x080152c0
 8006a5c:	0802276c 	.word	0x0802276c
 8006a60:	20003bd8 	.word	0x20003bd8
 8006a64:	080152cc 	.word	0x080152cc
 8006a68:	080152d4 	.word	0x080152d4
 8006a6c:	080245d4 	.word	0x080245d4
 8006a70:	2000014c 	.word	0x2000014c
 8006a74:	080152e4 	.word	0x080152e4
 8006a78:	08021ce4 	.word	0x08021ce4
 8006a7c:	080152ec 	.word	0x080152ec

08006a80 <setDefaultClbcks>:
//#include "fonts/zekton24.h"
//#include "fonts/zekton84.h"
//#include <fonts/zekton45.h>
#include "fonts/fonts.h"

static void setDefaultClbcks(void){
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <setDefaultClbcks+0x20>)
 8006a86:	4a07      	ldr	r2, [pc, #28]	; (8006aa4 <setDefaultClbcks+0x24>)
 8006a88:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8006a8a:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <setDefaultClbcks+0x28>)
 8006a8c:	4a07      	ldr	r2, [pc, #28]	; (8006aac <setDefaultClbcks+0x2c>)
 8006a8e:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006a90:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <setDefaultClbcks+0x30>)
 8006a92:	4a08      	ldr	r2, [pc, #32]	; (8006ab4 <setDefaultClbcks+0x34>)
 8006a94:	611a      	str	r2, [r3, #16]
}
 8006a96:	bf00      	nop
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	200005f8 	.word	0x200005f8
 8006aa4:	08004821 	.word	0x08004821
 8006aa8:	20000568 	.word	0x20000568
 8006aac:	080022d9 	.word	0x080022d9
 8006ab0:	200005b0 	.word	0x200005b0
 8006ab4:	080022e9 	.word	0x080022e9

08006ab8 <setTimeAction>:

static void setTimeAction(void){
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 8006abc:	4802      	ldr	r0, [pc, #8]	; (8006ac8 <setTimeAction+0x10>)
 8006abe:	f7fb fc27 	bl	8002310 <guiApplyView>
}
 8006ac2:	bf00      	nop
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000290 	.word	0x20000290

08006acc <setDateAction>:
static void setDateAction(void){
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 8006ad0:	4802      	ldr	r0, [pc, #8]	; (8006adc <setDateAction+0x10>)
 8006ad2:	f7fb fc1d 	bl	8002310 <guiApplyView>
}
 8006ad6:	bf00      	nop
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	2000025c 	.word	0x2000025c

08006ae0 <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006ae4:	f7ff ffcc 	bl	8006a80 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 8006ae8:	4802      	ldr	r0, [pc, #8]	; (8006af4 <faceSetup+0x14>)
 8006aea:	f7fd fe13 	bl	8004714 <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8006aee:	bf00      	nop
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	08006a81 	.word	0x08006a81

08006af8 <faceMain>:

void faceMain(void){
 8006af8:	b590      	push	{r4, r7, lr}
 8006afa:	b0b1      	sub	sp, #196	; 0xc4
 8006afc:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 8006afe:	2300      	movs	r3, #0
 8006b00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	609a      	str	r2, [r3, #8]
 8006b10:	60da      	str	r2, [r3, #12]
 8006b12:	611a      	str	r2, [r3, #16]
 8006b14:	615a      	str	r2, [r3, #20]
 8006b16:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8006b18:	4b83      	ldr	r3, [pc, #524]	; (8006d28 <faceMain+0x230>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7f9 fd2d 	bl	800057c <__aeabi_f2d>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8006b2a:	4980      	ldr	r1, [pc, #512]	; (8006d2c <faceMain+0x234>)
 8006b2c:	f007 fe5c 	bl	800e7e8 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8006b30:	2314      	movs	r3, #20
 8006b32:	b29c      	uxth	r4, r3
 8006b34:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7f9 fb59 	bl	80001f0 <strlen>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f1c3 030d 	rsb	r3, r3, #13
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	fb14 f303 	smulbb	r3, r4, r3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3323      	adds	r3, #35	; 0x23
 8006b4e:	b298      	uxth	r0, r3
 8006b50:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8006b54:	4b76      	ldr	r3, [pc, #472]	; (8006d30 <faceMain+0x238>)
 8006b56:	210e      	movs	r1, #14
 8006b58:	f7fb fe0c 	bl	8002774 <lcdPutStr>
	char baroStr[30] = {0};
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b62:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	605a      	str	r2, [r3, #4]
 8006b6c:	609a      	str	r2, [r3, #8]
 8006b6e:	60da      	str	r2, [r3, #12]
 8006b70:	611a      	str	r2, [r3, #16]
 8006b72:	615a      	str	r2, [r3, #20]
 8006b74:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 8006b76:	4b6c      	ldr	r3, [pc, #432]	; (8006d28 <faceMain+0x230>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8006d34 <faceMain+0x23c>
 8006b86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b8a:	ee16 0a90 	vmov	r0, s13
 8006b8e:	f7f9 fcf5 	bl	800057c <__aeabi_f2d>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8006b9a:	4967      	ldr	r1, [pc, #412]	; (8006d38 <faceMain+0x240>)
 8006b9c:	f007 fe24 	bl	800e7e8 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 8006ba0:	2314      	movs	r3, #20
 8006ba2:	b29c      	uxth	r4, r3
 8006ba4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7f9 fb21 	bl	80001f0 <strlen>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f1c3 030d 	rsb	r3, r3, #13
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	fb14 f303 	smulbb	r3, r4, r3
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3323      	adds	r3, #35	; 0x23
 8006bbe:	b298      	uxth	r0, r3
 8006bc0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006bc4:	4b5a      	ldr	r3, [pc, #360]	; (8006d30 <faceMain+0x238>)
 8006bc6:	212a      	movs	r1, #42	; 0x2a
 8006bc8:	f7fb fdd4 	bl	8002774 <lcdPutStr>

	char fracStr[30] = {0};
 8006bcc:	2300      	movs	r3, #0
 8006bce:	663b      	str	r3, [r7, #96]	; 0x60
 8006bd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	605a      	str	r2, [r3, #4]
 8006bda:	609a      	str	r2, [r3, #8]
 8006bdc:	60da      	str	r2, [r3, #12]
 8006bde:	611a      	str	r2, [r3, #16]
 8006be0:	615a      	str	r2, [r3, #20]
 8006be2:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 8006be4:	2300      	movs	r3, #0
 8006be6:	643b      	str	r3, [r7, #64]	; 0x40
 8006be8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	605a      	str	r2, [r3, #4]
 8006bf2:	609a      	str	r2, [r3, #8]
 8006bf4:	60da      	str	r2, [r3, #12]
 8006bf6:	611a      	str	r2, [r3, #16]
 8006bf8:	615a      	str	r2, [r3, #20]
 8006bfa:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	623b      	str	r3, [r7, #32]
 8006c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	605a      	str	r2, [r3, #4]
 8006c0a:	609a      	str	r2, [r3, #8]
 8006c0c:	60da      	str	r2, [r3, #12]
 8006c0e:	611a      	str	r2, [r3, #16]
 8006c10:	615a      	str	r2, [r3, #20]
 8006c12:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 8006c14:	4b49      	ldr	r3, [pc, #292]	; (8006d3c <faceMain+0x244>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c1e:	4948      	ldr	r1, [pc, #288]	; (8006d40 <faceMain+0x248>)
 8006c20:	4618      	mov	r0, r3
 8006c22:	f007 fde1 	bl	800e7e8 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 8006c26:	4b45      	ldr	r3, [pc, #276]	; (8006d3c <faceMain+0x244>)
 8006c28:	785b      	ldrb	r3, [r3, #1]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f107 0320 	add.w	r3, r7, #32
 8006c30:	4943      	ldr	r1, [pc, #268]	; (8006d40 <faceMain+0x248>)
 8006c32:	4618      	mov	r0, r3
 8006c34:	f007 fdd8 	bl	800e7e8 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8006c38:	4b40      	ldr	r3, [pc, #256]	; (8006d3c <faceMain+0x244>)
 8006c3a:	789b      	ldrb	r3, [r3, #2]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006c42:	493f      	ldr	r1, [pc, #252]	; (8006d40 <faceMain+0x248>)
 8006c44:	4618      	mov	r0, r3
 8006c46:	f007 fdcf 	bl	800e7e8 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 8006c4a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006c4e:	4b3d      	ldr	r3, [pc, #244]	; (8006d44 <faceMain+0x24c>)
 8006c50:	214c      	movs	r1, #76	; 0x4c
 8006c52:	2014      	movs	r0, #20
 8006c54:	f7fb fd8e 	bl	8002774 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 8006c58:	f107 0220 	add.w	r2, r7, #32
 8006c5c:	4b39      	ldr	r3, [pc, #228]	; (8006d44 <faceMain+0x24c>)
 8006c5e:	214c      	movs	r1, #76	; 0x4c
 8006c60:	20aa      	movs	r0, #170	; 0xaa
 8006c62:	f7fb fd87 	bl	8002774 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 8006c66:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006c6a:	4b37      	ldr	r3, [pc, #220]	; (8006d48 <faceMain+0x250>)
 8006c6c:	214c      	movs	r1, #76	; 0x4c
 8006c6e:	f240 103b 	movw	r0, #315	; 0x13b
 8006c72:	f7fb fd7f 	bl	8002774 <lcdPutStr>

	char buffString[30] = {0};
 8006c76:	2300      	movs	r3, #0
 8006c78:	603b      	str	r3, [r7, #0]
 8006c7a:	1d3b      	adds	r3, r7, #4
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	605a      	str	r2, [r3, #4]
 8006c82:	609a      	str	r2, [r3, #8]
 8006c84:	60da      	str	r2, [r3, #12]
 8006c86:	611a      	str	r2, [r3, #16]
 8006c88:	615a      	str	r2, [r3, #20]
 8006c8a:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	492f      	ldr	r1, [pc, #188]	; (8006d4c <faceMain+0x254>)
 8006c90:	4618      	mov	r0, r3
 8006c92:	f007 fda9 	bl	800e7e8 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 8006c96:	4b2e      	ldr	r3, [pc, #184]	; (8006d50 <faceMain+0x258>)
 8006c98:	785b      	ldrb	r3, [r3, #1]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4b2d      	ldr	r3, [pc, #180]	; (8006d54 <faceMain+0x25c>)
 8006c9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ca2:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <faceMain+0x258>)
 8006ca4:	78db      	ldrb	r3, [r3, #3]
 8006ca6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006caa:	4638      	mov	r0, r7
 8006cac:	492a      	ldr	r1, [pc, #168]	; (8006d58 <faceMain+0x260>)
 8006cae:	f007 fd9b 	bl	800e7e8 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8006cb2:	2314      	movs	r3, #20
 8006cb4:	b29c      	uxth	r4, r3
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7f9 fa99 	bl	80001f0 <strlen>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f1c3 030d 	rsb	r3, r3, #13
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	fb14 f303 	smulbb	r3, r4, r3
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3323      	adds	r3, #35	; 0x23
 8006cce:	b298      	uxth	r0, r3
 8006cd0:	463a      	mov	r2, r7
 8006cd2:	4b17      	ldr	r3, [pc, #92]	; (8006d30 <faceMain+0x238>)
 8006cd4:	21ae      	movs	r1, #174	; 0xae
 8006cd6:	f7fb fd4d 	bl	8002774 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 8006cda:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <faceMain+0x258>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	4b1e      	ldr	r3, [pc, #120]	; (8006d5c <faceMain+0x264>)
 8006ce2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ce6:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <faceMain+0x258>)
 8006ce8:	789b      	ldrb	r3, [r3, #2]
 8006cea:	4638      	mov	r0, r7
 8006cec:	491a      	ldr	r1, [pc, #104]	; (8006d58 <faceMain+0x260>)
 8006cee:	f007 fd7b 	bl	800e7e8 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8006cf2:	2314      	movs	r3, #20
 8006cf4:	b29c      	uxth	r4, r3
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7f9 fa79 	bl	80001f0 <strlen>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f1c3 030d 	rsb	r3, r3, #13
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	fb14 f303 	smulbb	r3, r4, r3
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3323      	adds	r3, #35	; 0x23
 8006d0e:	b298      	uxth	r0, r3
 8006d10:	463a      	mov	r2, r7
 8006d12:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <faceMain+0x238>)
 8006d14:	21ca      	movs	r1, #202	; 0xca
 8006d16:	f7fb fd2d 	bl	8002774 <lcdPutStr>

	enableCntxMenu();
 8006d1a:	f7fd fd9d 	bl	8004858 <enableCntxMenu>
}
 8006d1e:	bf00      	nop
 8006d20:	37c4      	adds	r7, #196	; 0xc4
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd90      	pop	{r4, r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000558 	.word	0x20000558
 8006d2c:	080153ac 	.word	0x080153ac
 8006d30:	08029c1c 	.word	0x08029c1c
 8006d34:	42c80000 	.word	0x42c80000
 8006d38:	080153b4 	.word	0x080153b4
 8006d3c:	20003580 	.word	0x20003580
 8006d40:	080153c0 	.word	0x080153c0
 8006d44:	080310cc 	.word	0x080310cc
 8006d48:	0802ba84 	.word	0x0802ba84
 8006d4c:	080153c8 	.word	0x080153c8
 8006d50:	20003594 	.word	0x20003594
 8006d54:	200001ac 	.word	0x200001ac
 8006d58:	080153d8 	.word	0x080153d8
 8006d5c:	2000018c 	.word	0x2000018c

08006d60 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 8006d64:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <setDefaultClbcks+0x34>)
 8006d66:	4a0c      	ldr	r2, [pc, #48]	; (8006d98 <setDefaultClbcks+0x38>)
 8006d68:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <setDefaultClbcks+0x3c>)
 8006d6c:	4a0c      	ldr	r2, [pc, #48]	; (8006da0 <setDefaultClbcks+0x40>)
 8006d6e:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8006d70:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <setDefaultClbcks+0x44>)
 8006d72:	4a0d      	ldr	r2, [pc, #52]	; (8006da8 <setDefaultClbcks+0x48>)
 8006d74:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8006d76:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <setDefaultClbcks+0x4c>)
 8006d78:	4a0d      	ldr	r2, [pc, #52]	; (8006db0 <setDefaultClbcks+0x50>)
 8006d7a:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8006d7c:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <setDefaultClbcks+0x54>)
 8006d7e:	4a0e      	ldr	r2, [pc, #56]	; (8006db8 <setDefaultClbcks+0x58>)
 8006d80:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8006d82:	4b0e      	ldr	r3, [pc, #56]	; (8006dbc <setDefaultClbcks+0x5c>)
 8006d84:	4a0e      	ldr	r2, [pc, #56]	; (8006dc0 <setDefaultClbcks+0x60>)
 8006d86:	611a      	str	r2, [r3, #16]
}
 8006d88:	bf00      	nop
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	2000061c 	.word	0x2000061c
 8006d98:	080070d1 	.word	0x080070d1
 8006d9c:	200005f8 	.word	0x200005f8
 8006da0:	08006f91 	.word	0x08006f91
 8006da4:	200005d4 	.word	0x200005d4
 8006da8:	080070dd 	.word	0x080070dd
 8006dac:	20000568 	.word	0x20000568
 8006db0:	08007049 	.word	0x08007049
 8006db4:	2000058c 	.word	0x2000058c
 8006db8:	08006f61 	.word	0x08006f61
 8006dbc:	200005b0 	.word	0x200005b0
 8006dc0:	08006fc1 	.word	0x08006fc1

08006dc4 <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006dc8:	f7ff ffca 	bl	8006d60 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <dateInputSetup+0x24>)
 8006dce:	789a      	ldrb	r2, [r3, #2]
 8006dd0:	4b06      	ldr	r3, [pc, #24]	; (8006dec <dateInputSetup+0x28>)
 8006dd2:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 8006dd4:	4b04      	ldr	r3, [pc, #16]	; (8006de8 <dateInputSetup+0x24>)
 8006dd6:	785a      	ldrb	r2, [r3, #1]
 8006dd8:	4b04      	ldr	r3, [pc, #16]	; (8006dec <dateInputSetup+0x28>)
 8006dda:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 8006ddc:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <dateInputSetup+0x24>)
 8006dde:	78da      	ldrb	r2, [r3, #3]
 8006de0:	4b02      	ldr	r3, [pc, #8]	; (8006dec <dateInputSetup+0x28>)
 8006de2:	709a      	strb	r2, [r3, #2]
}
 8006de4:	bf00      	nop
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20003594 	.word	0x20003594
 8006dec:	20003be0 	.word	0x20003be0

08006df0 <dateInputMain>:

void dateInputMain(void){
 8006df0:	b590      	push	{r4, r7, lr}
 8006df2:	b089      	sub	sp, #36	; 0x24
 8006df4:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 8006df6:	2300      	movs	r3, #0
 8006df8:	603b      	str	r3, [r7, #0]
 8006dfa:	1d3b      	adds	r3, r7, #4
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	609a      	str	r2, [r3, #8]
 8006e04:	60da      	str	r2, [r3, #12]
 8006e06:	611a      	str	r2, [r3, #16]
 8006e08:	615a      	str	r2, [r3, #20]
 8006e0a:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8006e0c:	463b      	mov	r3, r7
 8006e0e:	494a      	ldr	r1, [pc, #296]	; (8006f38 <dateInputMain+0x148>)
 8006e10:	4618      	mov	r0, r3
 8006e12:	f007 fce9 	bl	800e7e8 <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 8006e16:	4b49      	ldr	r3, [pc, #292]	; (8006f3c <dateInputMain+0x14c>)
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	4b48      	ldr	r3, [pc, #288]	; (8006f40 <dateInputMain+0x150>)
 8006e1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e22:	4b46      	ldr	r3, [pc, #280]	; (8006f3c <dateInputMain+0x14c>)
 8006e24:	789b      	ldrb	r3, [r3, #2]
 8006e26:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	4945      	ldr	r1, [pc, #276]	; (8006f44 <dateInputMain+0x154>)
 8006e2e:	f007 fcdb 	bl	800e7e8 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8006e32:	2314      	movs	r3, #20
 8006e34:	b29c      	uxth	r4, r3
 8006e36:	463b      	mov	r3, r7
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7f9 f9d9 	bl	80001f0 <strlen>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f1c3 030d 	rsb	r3, r3, #13
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	fb14 f303 	smulbb	r3, r4, r3
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3323      	adds	r3, #35	; 0x23
 8006e4e:	b298      	uxth	r0, r3
 8006e50:	463a      	mov	r2, r7
 8006e52:	4b3d      	ldr	r3, [pc, #244]	; (8006f48 <dateInputMain+0x158>)
 8006e54:	21ae      	movs	r1, #174	; 0xae
 8006e56:	f7fb fc8d 	bl	8002774 <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 8006e5a:	4b38      	ldr	r3, [pc, #224]	; (8006f3c <dateInputMain+0x14c>)
 8006e5c:	7818      	ldrb	r0, [r3, #0]
 8006e5e:	4b37      	ldr	r3, [pc, #220]	; (8006f3c <dateInputMain+0x14c>)
 8006e60:	7859      	ldrb	r1, [r3, #1]
 8006e62:	4b36      	ldr	r3, [pc, #216]	; (8006f3c <dateInputMain+0x14c>)
 8006e64:	789b      	ldrb	r3, [r3, #2]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f000 fcb6 	bl	80077e0 <zellerCongruence>
 8006e74:	4603      	mov	r3, r0
 8006e76:	461a      	mov	r2, r3
 8006e78:	4b34      	ldr	r3, [pc, #208]	; (8006f4c <dateInputMain+0x15c>)
 8006e7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e7e:	4b2f      	ldr	r3, [pc, #188]	; (8006f3c <dateInputMain+0x14c>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	4638      	mov	r0, r7
 8006e84:	492f      	ldr	r1, [pc, #188]	; (8006f44 <dateInputMain+0x154>)
 8006e86:	f007 fcaf 	bl	800e7e8 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8006e8a:	2314      	movs	r3, #20
 8006e8c:	b29c      	uxth	r4, r3
 8006e8e:	463b      	mov	r3, r7
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7f9 f9ad 	bl	80001f0 <strlen>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f1c3 030d 	rsb	r3, r3, #13
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	fb14 f303 	smulbb	r3, r4, r3
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3323      	adds	r3, #35	; 0x23
 8006ea6:	b298      	uxth	r0, r3
 8006ea8:	463a      	mov	r2, r7
 8006eaa:	4b27      	ldr	r3, [pc, #156]	; (8006f48 <dateInputMain+0x158>)
 8006eac:	21ca      	movs	r1, #202	; 0xca
 8006eae:	f7fb fc61 	bl	8002774 <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 8006eb2:	4b27      	ldr	r3, [pc, #156]	; (8006f50 <dateInputMain+0x160>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	4b26      	ldr	r3, [pc, #152]	; (8006f54 <dateInputMain+0x164>)
 8006eba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	4b23      	ldr	r3, [pc, #140]	; (8006f50 <dateInputMain+0x160>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4b23      	ldr	r3, [pc, #140]	; (8006f54 <dateInputMain+0x164>)
 8006ec8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4b20      	ldr	r3, [pc, #128]	; (8006f50 <dateInputMain+0x160>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4b20      	ldr	r3, [pc, #128]	; (8006f58 <dateInputMain+0x168>)
 8006ed6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006eda:	18d1      	adds	r1, r2, r3
 8006edc:	4b1c      	ldr	r3, [pc, #112]	; (8006f50 <dateInputMain+0x160>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <dateInputMain+0x16c>)
 8006ee4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	2301      	movs	r3, #1
 8006eec:	f7fc f8ac 	bl	8003048 <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 8006ef0:	4b17      	ldr	r3, [pc, #92]	; (8006f50 <dateInputMain+0x160>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4b17      	ldr	r3, [pc, #92]	; (8006f54 <dateInputMain+0x164>)
 8006ef8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006efc:	4618      	mov	r0, r3
 8006efe:	4b14      	ldr	r3, [pc, #80]	; (8006f50 <dateInputMain+0x160>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <dateInputMain+0x164>)
 8006f06:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <dateInputMain+0x160>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	4619      	mov	r1, r3
 8006f12:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <dateInputMain+0x168>)
 8006f14:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006f18:	18d1      	adds	r1, r2, r3
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <dateInputMain+0x160>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <dateInputMain+0x16c>)
 8006f22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f7fc f88d 	bl	8003048 <lcdHLine>
}
 8006f2e:	bf00      	nop
 8006f30:	3724      	adds	r7, #36	; 0x24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd90      	pop	{r4, r7, pc}
 8006f36:	bf00      	nop
 8006f38:	08015498 	.word	0x08015498
 8006f3c:	20003be0 	.word	0x20003be0
 8006f40:	20000210 	.word	0x20000210
 8006f44:	080154a8 	.word	0x080154a8
 8006f48:	08033054 	.word	0x08033054
 8006f4c:	200001f0 	.word	0x200001f0
 8006f50:	20003bdc 	.word	0x20003bdc
 8006f54:	20000244 	.word	0x20000244
 8006f58:	20000254 	.word	0x20000254
 8006f5c:	2000024c 	.word	0x2000024c

08006f60 <cursorNext>:

static void cursorNext(void){
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 8006f64:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <cursorNext+0x2c>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d806      	bhi.n	8006f7a <cursorNext+0x1a>
 8006f6c:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <cursorNext+0x2c>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	3301      	adds	r3, #1
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <cursorNext+0x2c>)
 8006f76:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8006f78:	e002      	b.n	8006f80 <cursorNext+0x20>
	else curPosition = 0;
 8006f7a:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <cursorNext+0x2c>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
}
 8006f80:	bf00      	nop
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	20003bdc 	.word	0x20003bdc

08006f90 <cursorPrev>:
static void cursorPrev(void){
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8006f94:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <cursorPrev+0x2c>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d006      	beq.n	8006faa <cursorPrev+0x1a>
 8006f9c:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <cursorPrev+0x2c>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <cursorPrev+0x2c>)
 8006fa6:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 8006fa8:	e002      	b.n	8006fb0 <cursorPrev+0x20>
	else curPosition = 2;
 8006faa:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <cursorPrev+0x2c>)
 8006fac:	2202      	movs	r2, #2
 8006fae:	701a      	strb	r2, [r3, #0]
}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20003bdc 	.word	0x20003bdc

08006fc0 <increment>:
static void increment(void){
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
	switch(curPosition){
 8006fc4:	4b1e      	ldr	r3, [pc, #120]	; (8007040 <increment+0x80>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d024      	beq.n	8007016 <increment+0x56>
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	dc31      	bgt.n	8007034 <increment+0x74>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <increment+0x1a>
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d00f      	beq.n	8006ff8 <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 8006fd8:	e02c      	b.n	8007034 <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 8006fda:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <increment+0x84>)
 8006fdc:	785b      	ldrb	r3, [r3, #1]
 8006fde:	2b0b      	cmp	r3, #11
 8006fe0:	d806      	bhi.n	8006ff0 <increment+0x30>
 8006fe2:	4b18      	ldr	r3, [pc, #96]	; (8007044 <increment+0x84>)
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	4b16      	ldr	r3, [pc, #88]	; (8007044 <increment+0x84>)
 8006fec:	705a      	strb	r2, [r3, #1]
			break;
 8006fee:	e021      	b.n	8007034 <increment+0x74>
			else valDatePos[1] = 1;
 8006ff0:	4b14      	ldr	r3, [pc, #80]	; (8007044 <increment+0x84>)
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	705a      	strb	r2, [r3, #1]
			break;
 8006ff6:	e01d      	b.n	8007034 <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 8006ff8:	4b12      	ldr	r3, [pc, #72]	; (8007044 <increment+0x84>)
 8006ffa:	789b      	ldrb	r3, [r3, #2]
 8006ffc:	2b63      	cmp	r3, #99	; 0x63
 8006ffe:	d806      	bhi.n	800700e <increment+0x4e>
 8007000:	4b10      	ldr	r3, [pc, #64]	; (8007044 <increment+0x84>)
 8007002:	789b      	ldrb	r3, [r3, #2]
 8007004:	3301      	adds	r3, #1
 8007006:	b2da      	uxtb	r2, r3
 8007008:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <increment+0x84>)
 800700a:	709a      	strb	r2, [r3, #2]
			break;
 800700c:	e012      	b.n	8007034 <increment+0x74>
			else valDatePos[2] = 0;
 800700e:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <increment+0x84>)
 8007010:	2200      	movs	r2, #0
 8007012:	709a      	strb	r2, [r3, #2]
			break;
 8007014:	e00e      	b.n	8007034 <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <increment+0x84>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b1e      	cmp	r3, #30
 800701c:	d806      	bhi.n	800702c <increment+0x6c>
 800701e:	4b09      	ldr	r3, [pc, #36]	; (8007044 <increment+0x84>)
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	3301      	adds	r3, #1
 8007024:	b2da      	uxtb	r2, r3
 8007026:	4b07      	ldr	r3, [pc, #28]	; (8007044 <increment+0x84>)
 8007028:	701a      	strb	r2, [r3, #0]
			break;
 800702a:	e002      	b.n	8007032 <increment+0x72>
			else valDatePos[0] = 1;
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <increment+0x84>)
 800702e:	2201      	movs	r2, #1
 8007030:	701a      	strb	r2, [r3, #0]
			break;
 8007032:	bf00      	nop
}
 8007034:	bf00      	nop
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20003bdc 	.word	0x20003bdc
 8007044:	20003be0 	.word	0x20003be0

08007048 <decrement>:
static void decrement(void){
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
	switch(curPosition){
 800704c:	4b1e      	ldr	r3, [pc, #120]	; (80070c8 <decrement+0x80>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d024      	beq.n	800709e <decrement+0x56>
 8007054:	2b02      	cmp	r3, #2
 8007056:	dc31      	bgt.n	80070bc <decrement+0x74>
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <decrement+0x1a>
 800705c:	2b01      	cmp	r3, #1
 800705e:	d00f      	beq.n	8007080 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 8007060:	e02c      	b.n	80070bc <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 8007062:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <decrement+0x84>)
 8007064:	785b      	ldrb	r3, [r3, #1]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d006      	beq.n	8007078 <decrement+0x30>
 800706a:	4b18      	ldr	r3, [pc, #96]	; (80070cc <decrement+0x84>)
 800706c:	785b      	ldrb	r3, [r3, #1]
 800706e:	3b01      	subs	r3, #1
 8007070:	b2da      	uxtb	r2, r3
 8007072:	4b16      	ldr	r3, [pc, #88]	; (80070cc <decrement+0x84>)
 8007074:	705a      	strb	r2, [r3, #1]
				break;
 8007076:	e021      	b.n	80070bc <decrement+0x74>
				else valDatePos[1] = 12;
 8007078:	4b14      	ldr	r3, [pc, #80]	; (80070cc <decrement+0x84>)
 800707a:	220c      	movs	r2, #12
 800707c:	705a      	strb	r2, [r3, #1]
				break;
 800707e:	e01d      	b.n	80070bc <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 8007080:	4b12      	ldr	r3, [pc, #72]	; (80070cc <decrement+0x84>)
 8007082:	789b      	ldrb	r3, [r3, #2]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d006      	beq.n	8007096 <decrement+0x4e>
 8007088:	4b10      	ldr	r3, [pc, #64]	; (80070cc <decrement+0x84>)
 800708a:	789b      	ldrb	r3, [r3, #2]
 800708c:	3b01      	subs	r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <decrement+0x84>)
 8007092:	709a      	strb	r2, [r3, #2]
				break;
 8007094:	e012      	b.n	80070bc <decrement+0x74>
				else valDatePos[2] = 100;
 8007096:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <decrement+0x84>)
 8007098:	2264      	movs	r2, #100	; 0x64
 800709a:	709a      	strb	r2, [r3, #2]
				break;
 800709c:	e00e      	b.n	80070bc <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 800709e:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <decrement+0x84>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d906      	bls.n	80070b4 <decrement+0x6c>
 80070a6:	4b09      	ldr	r3, [pc, #36]	; (80070cc <decrement+0x84>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	4b07      	ldr	r3, [pc, #28]	; (80070cc <decrement+0x84>)
 80070b0:	701a      	strb	r2, [r3, #0]
				break;
 80070b2:	e002      	b.n	80070ba <decrement+0x72>
				else valDatePos[0] = 31;
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <decrement+0x84>)
 80070b6:	221f      	movs	r2, #31
 80070b8:	701a      	strb	r2, [r3, #0]
				break;
 80070ba:	bf00      	nop
}
 80070bc:	bf00      	nop
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	20003bdc 	.word	0x20003bdc
 80070cc:	20003be0 	.word	0x20003be0

080070d0 <exit>:
static void exit(void){
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
	applySelectedScreen();
 80070d4:	f7fb f932 	bl	800233c <applySelectedScreen>
}
 80070d8:	bf00      	nop
 80070da:	bd80      	pop	{r7, pc}

080070dc <accept>:
static void accept(void){
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 80070e0:	4b15      	ldr	r3, [pc, #84]	; (8007138 <accept+0x5c>)
 80070e2:	785a      	ldrb	r2, [r3, #1]
 80070e4:	4b15      	ldr	r3, [pc, #84]	; (800713c <accept+0x60>)
 80070e6:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 80070e8:	4b13      	ldr	r3, [pc, #76]	; (8007138 <accept+0x5c>)
 80070ea:	781a      	ldrb	r2, [r3, #0]
 80070ec:	4b13      	ldr	r3, [pc, #76]	; (800713c <accept+0x60>)
 80070ee:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 80070f0:	4b11      	ldr	r3, [pc, #68]	; (8007138 <accept+0x5c>)
 80070f2:	789a      	ldrb	r2, [r3, #2]
 80070f4:	4b11      	ldr	r3, [pc, #68]	; (800713c <accept+0x60>)
 80070f6:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 80070f8:	4b0f      	ldr	r3, [pc, #60]	; (8007138 <accept+0x5c>)
 80070fa:	7818      	ldrb	r0, [r3, #0]
 80070fc:	4b0e      	ldr	r3, [pc, #56]	; (8007138 <accept+0x5c>)
 80070fe:	7859      	ldrb	r1, [r3, #1]
 8007100:	4b0d      	ldr	r3, [pc, #52]	; (8007138 <accept+0x5c>)
 8007102:	789b      	ldrb	r3, [r3, #2]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800710a:	b29b      	uxth	r3, r3
 800710c:	461a      	mov	r2, r3
 800710e:	f000 fb67 	bl	80077e0 <zellerCongruence>
 8007112:	4603      	mov	r3, r0
 8007114:	461a      	mov	r2, r3
 8007116:	4b09      	ldr	r3, [pc, #36]	; (800713c <accept+0x60>)
 8007118:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 800711a:	2200      	movs	r2, #0
 800711c:	4907      	ldr	r1, [pc, #28]	; (800713c <accept+0x60>)
 800711e:	4808      	ldr	r0, [pc, #32]	; (8007140 <accept+0x64>)
 8007120:	f003 fbc6 	bl	800a8b0 <HAL_RTC_SetDate>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <accept+0x52>
	{
	Error_Handler();
 800712a:	f7fc fae7 	bl	80036fc <Error_Handler>
	}
	exit();
 800712e:	f7ff ffcf 	bl	80070d0 <exit>
}
 8007132:	bf00      	nop
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20003be0 	.word	0x20003be0
 800713c:	20003594 	.word	0x20003594
 8007140:	200037bc 	.word	0x200037bc

08007144 <setDefaultClbcks>:
//#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 8007148:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <setDefaultClbcks+0x34>)
 800714a:	4a0c      	ldr	r2, [pc, #48]	; (800717c <setDefaultClbcks+0x38>)
 800714c:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 800714e:	4b0c      	ldr	r3, [pc, #48]	; (8007180 <setDefaultClbcks+0x3c>)
 8007150:	4a0c      	ldr	r2, [pc, #48]	; (8007184 <setDefaultClbcks+0x40>)
 8007152:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <setDefaultClbcks+0x44>)
 8007156:	4a0d      	ldr	r2, [pc, #52]	; (800718c <setDefaultClbcks+0x48>)
 8007158:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 800715a:	4b0d      	ldr	r3, [pc, #52]	; (8007190 <setDefaultClbcks+0x4c>)
 800715c:	4a0d      	ldr	r2, [pc, #52]	; (8007194 <setDefaultClbcks+0x50>)
 800715e:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8007160:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <setDefaultClbcks+0x54>)
 8007162:	4a0e      	ldr	r2, [pc, #56]	; (800719c <setDefaultClbcks+0x58>)
 8007164:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8007166:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <setDefaultClbcks+0x5c>)
 8007168:	4a0e      	ldr	r2, [pc, #56]	; (80071a4 <setDefaultClbcks+0x60>)
 800716a:	611a      	str	r2, [r3, #16]
}
 800716c:	bf00      	nop
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	2000061c 	.word	0x2000061c
 800717c:	080074c9 	.word	0x080074c9
 8007180:	200005f8 	.word	0x200005f8
 8007184:	0800730d 	.word	0x0800730d
 8007188:	200005d4 	.word	0x200005d4
 800718c:	080074d5 	.word	0x080074d5
 8007190:	20000568 	.word	0x20000568
 8007194:	080073f9 	.word	0x080073f9
 8007198:	2000058c 	.word	0x2000058c
 800719c:	080072dd 	.word	0x080072dd
 80071a0:	200005b0 	.word	0x200005b0
 80071a4:	0800733d 	.word	0x0800733d

080071a8 <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80071ac:	f7ff ffca 	bl	8007144 <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 80071b0:	4b06      	ldr	r3, [pc, #24]	; (80071cc <timeInputSetup+0x24>)
 80071b2:	781a      	ldrb	r2, [r3, #0]
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <timeInputSetup+0x28>)
 80071b6:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 80071b8:	4b04      	ldr	r3, [pc, #16]	; (80071cc <timeInputSetup+0x24>)
 80071ba:	785a      	ldrb	r2, [r3, #1]
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <timeInputSetup+0x28>)
 80071be:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 80071c0:	4b02      	ldr	r3, [pc, #8]	; (80071cc <timeInputSetup+0x24>)
 80071c2:	789a      	ldrb	r2, [r3, #2]
 80071c4:	4b02      	ldr	r3, [pc, #8]	; (80071d0 <timeInputSetup+0x28>)
 80071c6:	709a      	strb	r2, [r3, #2]
}
 80071c8:	bf00      	nop
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20003580 	.word	0x20003580
 80071d0:	20003be4 	.word	0x20003be4

080071d4 <timeInputMain>:

void timeInputMain(void){
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 80071da:	2300      	movs	r3, #0
 80071dc:	603b      	str	r3, [r7, #0]
 80071de:	1d3b      	adds	r3, r7, #4
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	609a      	str	r2, [r3, #8]
 80071e8:	60da      	str	r2, [r3, #12]
 80071ea:	611a      	str	r2, [r3, #16]
 80071ec:	615a      	str	r2, [r3, #20]
 80071ee:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 80071f0:	4b33      	ldr	r3, [pc, #204]	; (80072c0 <timeInputMain+0xec>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	461a      	mov	r2, r3
 80071f6:	463b      	mov	r3, r7
 80071f8:	4932      	ldr	r1, [pc, #200]	; (80072c4 <timeInputMain+0xf0>)
 80071fa:	4618      	mov	r0, r3
 80071fc:	f007 faf4 	bl	800e7e8 <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 8007200:	463a      	mov	r2, r7
 8007202:	4b31      	ldr	r3, [pc, #196]	; (80072c8 <timeInputMain+0xf4>)
 8007204:	214c      	movs	r1, #76	; 0x4c
 8007206:	2014      	movs	r0, #20
 8007208:	f7fb fab4 	bl	8002774 <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 800720c:	4b2c      	ldr	r3, [pc, #176]	; (80072c0 <timeInputMain+0xec>)
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	461a      	mov	r2, r3
 8007212:	463b      	mov	r3, r7
 8007214:	492b      	ldr	r1, [pc, #172]	; (80072c4 <timeInputMain+0xf0>)
 8007216:	4618      	mov	r0, r3
 8007218:	f007 fae6 	bl	800e7e8 <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 800721c:	463a      	mov	r2, r7
 800721e:	4b2a      	ldr	r3, [pc, #168]	; (80072c8 <timeInputMain+0xf4>)
 8007220:	214c      	movs	r1, #76	; 0x4c
 8007222:	20aa      	movs	r0, #170	; 0xaa
 8007224:	f7fb faa6 	bl	8002774 <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 8007228:	4b28      	ldr	r3, [pc, #160]	; (80072cc <timeInputMain+0xf8>)
 800722a:	789b      	ldrb	r3, [r3, #2]
 800722c:	461a      	mov	r2, r3
 800722e:	463b      	mov	r3, r7
 8007230:	4924      	ldr	r1, [pc, #144]	; (80072c4 <timeInputMain+0xf0>)
 8007232:	4618      	mov	r0, r3
 8007234:	f007 fad8 	bl	800e7e8 <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 8007238:	463a      	mov	r2, r7
 800723a:	4b25      	ldr	r3, [pc, #148]	; (80072d0 <timeInputMain+0xfc>)
 800723c:	214c      	movs	r1, #76	; 0x4c
 800723e:	f240 103b 	movw	r0, #315	; 0x13b
 8007242:	f7fb fa97 	bl	8002774 <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 8007246:	4b23      	ldr	r3, [pc, #140]	; (80072d4 <timeInputMain+0x100>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	4b22      	ldr	r3, [pc, #136]	; (80072d8 <timeInputMain+0x104>)
 800724e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007252:	4618      	mov	r0, r3
 8007254:	4b1f      	ldr	r3, [pc, #124]	; (80072d4 <timeInputMain+0x100>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	4b1f      	ldr	r3, [pc, #124]	; (80072d8 <timeInputMain+0x104>)
 800725c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007260:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007264:	2301      	movs	r3, #1
 8007266:	22af      	movs	r2, #175	; 0xaf
 8007268:	f7fb feee 	bl	8003048 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 800726c:	4b19      	ldr	r3, [pc, #100]	; (80072d4 <timeInputMain+0x100>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	461a      	mov	r2, r3
 8007272:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <timeInputMain+0x104>)
 8007274:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007278:	4618      	mov	r0, r3
 800727a:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <timeInputMain+0x100>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	4b15      	ldr	r3, [pc, #84]	; (80072d8 <timeInputMain+0x104>)
 8007282:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007286:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800728a:	2301      	movs	r3, #1
 800728c:	22b0      	movs	r2, #176	; 0xb0
 800728e:	f7fb fedb 	bl	8003048 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 8007292:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <timeInputMain+0x100>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <timeInputMain+0x104>)
 800729a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800729e:	4618      	mov	r0, r3
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <timeInputMain+0x100>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <timeInputMain+0x104>)
 80072a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80072ac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80072b0:	2301      	movs	r3, #1
 80072b2:	22b1      	movs	r2, #177	; 0xb1
 80072b4:	f7fb fec8 	bl	8003048 <lcdHLine>
}
 80072b8:	bf00      	nop
 80072ba:	3720      	adds	r7, #32
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20003be4 	.word	0x20003be4
 80072c4:	08015568 	.word	0x08015568
 80072c8:	0803a504 	.word	0x0803a504
 80072cc:	20003580 	.word	0x20003580
 80072d0:	08034ebc 	.word	0x08034ebc
 80072d4:	20003be3 	.word	0x20003be3
 80072d8:	20000284 	.word	0x20000284

080072dc <cursorNext>:

static void cursorNext(void){
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 80072e0:	4b09      	ldr	r3, [pc, #36]	; (8007308 <cursorNext+0x2c>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d806      	bhi.n	80072f6 <cursorNext+0x1a>
 80072e8:	4b07      	ldr	r3, [pc, #28]	; (8007308 <cursorNext+0x2c>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	3301      	adds	r3, #1
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <cursorNext+0x2c>)
 80072f2:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 80072f4:	e002      	b.n	80072fc <cursorNext+0x20>
	else curPosition = 0;
 80072f6:	4b04      	ldr	r3, [pc, #16]	; (8007308 <cursorNext+0x2c>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	701a      	strb	r2, [r3, #0]
}
 80072fc:	bf00      	nop
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20003be3 	.word	0x20003be3

0800730c <cursorPrev>:
static void cursorPrev(void){
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8007310:	4b09      	ldr	r3, [pc, #36]	; (8007338 <cursorPrev+0x2c>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d006      	beq.n	8007326 <cursorPrev+0x1a>
 8007318:	4b07      	ldr	r3, [pc, #28]	; (8007338 <cursorPrev+0x2c>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	3b01      	subs	r3, #1
 800731e:	b2da      	uxtb	r2, r3
 8007320:	4b05      	ldr	r3, [pc, #20]	; (8007338 <cursorPrev+0x2c>)
 8007322:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 8007324:	e002      	b.n	800732c <cursorPrev+0x20>
	else curPosition = 4;
 8007326:	4b04      	ldr	r3, [pc, #16]	; (8007338 <cursorPrev+0x2c>)
 8007328:	2204      	movs	r2, #4
 800732a:	701a      	strb	r2, [r3, #0]
}
 800732c:	bf00      	nop
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20003be3 	.word	0x20003be3

0800733c <increment>:
static void increment(void){
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
	switch(curPosition){
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <increment+0xb4>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b04      	cmp	r3, #4
 8007346:	d84d      	bhi.n	80073e4 <increment+0xa8>
 8007348:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <increment+0x14>)
 800734a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734e:	bf00      	nop
 8007350:	08007365 	.word	0x08007365
 8007354:	08007383 	.word	0x08007383
 8007358:	080073a1 	.word	0x080073a1
 800735c:	080073bf 	.word	0x080073bf
 8007360:	080073dd 	.word	0x080073dd
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 8007364:	4b23      	ldr	r3, [pc, #140]	; (80073f4 <increment+0xb8>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b0c      	cmp	r3, #12
 800736a:	d806      	bhi.n	800737a <increment+0x3e>
 800736c:	4b21      	ldr	r3, [pc, #132]	; (80073f4 <increment+0xb8>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	330a      	adds	r3, #10
 8007372:	b2da      	uxtb	r2, r3
 8007374:	4b1f      	ldr	r3, [pc, #124]	; (80073f4 <increment+0xb8>)
 8007376:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 8007378:	e034      	b.n	80073e4 <increment+0xa8>
			else valTimePos[0] = 20;
 800737a:	4b1e      	ldr	r3, [pc, #120]	; (80073f4 <increment+0xb8>)
 800737c:	2214      	movs	r2, #20
 800737e:	701a      	strb	r2, [r3, #0]
			break;
 8007380:	e030      	b.n	80073e4 <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 8007382:	4b1c      	ldr	r3, [pc, #112]	; (80073f4 <increment+0xb8>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b17      	cmp	r3, #23
 8007388:	d806      	bhi.n	8007398 <increment+0x5c>
 800738a:	4b1a      	ldr	r3, [pc, #104]	; (80073f4 <increment+0xb8>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	3301      	adds	r3, #1
 8007390:	b2da      	uxtb	r2, r3
 8007392:	4b18      	ldr	r3, [pc, #96]	; (80073f4 <increment+0xb8>)
 8007394:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 8007396:	e025      	b.n	80073e4 <increment+0xa8>
			else valTimePos[0] = 0;
 8007398:	4b16      	ldr	r3, [pc, #88]	; (80073f4 <increment+0xb8>)
 800739a:	2200      	movs	r2, #0
 800739c:	701a      	strb	r2, [r3, #0]
			break;
 800739e:	e021      	b.n	80073e4 <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 80073a0:	4b14      	ldr	r3, [pc, #80]	; (80073f4 <increment+0xb8>)
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b30      	cmp	r3, #48	; 0x30
 80073a6:	d806      	bhi.n	80073b6 <increment+0x7a>
 80073a8:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <increment+0xb8>)
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	330a      	adds	r3, #10
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	4b10      	ldr	r3, [pc, #64]	; (80073f4 <increment+0xb8>)
 80073b2:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 80073b4:	e016      	b.n	80073e4 <increment+0xa8>
			else valTimePos[1] = 0;
 80073b6:	4b0f      	ldr	r3, [pc, #60]	; (80073f4 <increment+0xb8>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	705a      	strb	r2, [r3, #1]
			break;
 80073bc:	e012      	b.n	80073e4 <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 80073be:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <increment+0xb8>)
 80073c0:	785b      	ldrb	r3, [r3, #1]
 80073c2:	2b3a      	cmp	r3, #58	; 0x3a
 80073c4:	d806      	bhi.n	80073d4 <increment+0x98>
 80073c6:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <increment+0xb8>)
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	3301      	adds	r3, #1
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <increment+0xb8>)
 80073d0:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 80073d2:	e007      	b.n	80073e4 <increment+0xa8>
			else valTimePos[1] = 0;
 80073d4:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <increment+0xb8>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	705a      	strb	r2, [r3, #1]
			break;
 80073da:	e003      	b.n	80073e4 <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <increment+0xb8>)
 80073de:	2200      	movs	r2, #0
 80073e0:	709a      	strb	r2, [r3, #2]
			break;
 80073e2:	bf00      	nop
	}
}
 80073e4:	bf00      	nop
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	20003be3 	.word	0x20003be3
 80073f4:	20003be4 	.word	0x20003be4

080073f8 <decrement>:
static void decrement(void){
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
	switch(curPosition){
 80073fc:	4b2e      	ldr	r3, [pc, #184]	; (80074b8 <decrement+0xc0>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b04      	cmp	r3, #4
 8007402:	d857      	bhi.n	80074b4 <decrement+0xbc>
 8007404:	a201      	add	r2, pc, #4	; (adr r2, 800740c <decrement+0x14>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	08007421 	.word	0x08007421
 8007410:	0800743f 	.word	0x0800743f
 8007414:	0800745d 	.word	0x0800745d
 8007418:	0800747b 	.word	0x0800747b
 800741c:	08007499 	.word	0x08007499
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 8007420:	4b26      	ldr	r3, [pc, #152]	; (80074bc <decrement+0xc4>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b09      	cmp	r3, #9
 8007426:	d906      	bls.n	8007436 <decrement+0x3e>
 8007428:	4b24      	ldr	r3, [pc, #144]	; (80074bc <decrement+0xc4>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	3b0a      	subs	r3, #10
 800742e:	b2da      	uxtb	r2, r3
 8007430:	4b22      	ldr	r3, [pc, #136]	; (80074bc <decrement+0xc4>)
 8007432:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 8007434:	e03e      	b.n	80074b4 <decrement+0xbc>
				else valTimePos[0] = 0;
 8007436:	4b21      	ldr	r3, [pc, #132]	; (80074bc <decrement+0xc4>)
 8007438:	2200      	movs	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
				break;
 800743c:	e03a      	b.n	80074b4 <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 800743e:	4b1f      	ldr	r3, [pc, #124]	; (80074bc <decrement+0xc4>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d006      	beq.n	8007454 <decrement+0x5c>
 8007446:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <decrement+0xc4>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	3b01      	subs	r3, #1
 800744c:	b2da      	uxtb	r2, r3
 800744e:	4b1b      	ldr	r3, [pc, #108]	; (80074bc <decrement+0xc4>)
 8007450:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 8007452:	e02f      	b.n	80074b4 <decrement+0xbc>
				else valTimePos[0] = 23;
 8007454:	4b19      	ldr	r3, [pc, #100]	; (80074bc <decrement+0xc4>)
 8007456:	2217      	movs	r2, #23
 8007458:	701a      	strb	r2, [r3, #0]
				break;
 800745a:	e02b      	b.n	80074b4 <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 800745c:	4b17      	ldr	r3, [pc, #92]	; (80074bc <decrement+0xc4>)
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	2b09      	cmp	r3, #9
 8007462:	d906      	bls.n	8007472 <decrement+0x7a>
 8007464:	4b15      	ldr	r3, [pc, #84]	; (80074bc <decrement+0xc4>)
 8007466:	785b      	ldrb	r3, [r3, #1]
 8007468:	3b0a      	subs	r3, #10
 800746a:	b2da      	uxtb	r2, r3
 800746c:	4b13      	ldr	r3, [pc, #76]	; (80074bc <decrement+0xc4>)
 800746e:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 8007470:	e020      	b.n	80074b4 <decrement+0xbc>
				else valTimePos[1] = 0;
 8007472:	4b12      	ldr	r3, [pc, #72]	; (80074bc <decrement+0xc4>)
 8007474:	2200      	movs	r2, #0
 8007476:	705a      	strb	r2, [r3, #1]
				break;
 8007478:	e01c      	b.n	80074b4 <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 800747a:	4b10      	ldr	r3, [pc, #64]	; (80074bc <decrement+0xc4>)
 800747c:	785b      	ldrb	r3, [r3, #1]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d006      	beq.n	8007490 <decrement+0x98>
 8007482:	4b0e      	ldr	r3, [pc, #56]	; (80074bc <decrement+0xc4>)
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	3b01      	subs	r3, #1
 8007488:	b2da      	uxtb	r2, r3
 800748a:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <decrement+0xc4>)
 800748c:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 800748e:	e011      	b.n	80074b4 <decrement+0xbc>
				else valTimePos[1] = 59;
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <decrement+0xc4>)
 8007492:	223b      	movs	r2, #59	; 0x3b
 8007494:	705a      	strb	r2, [r3, #1]
				break;
 8007496:	e00d      	b.n	80074b4 <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 8007498:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <decrement+0xc8>)
 800749a:	2200      	movs	r2, #0
 800749c:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 800749e:	2200      	movs	r2, #0
 80074a0:	4907      	ldr	r1, [pc, #28]	; (80074c0 <decrement+0xc8>)
 80074a2:	4808      	ldr	r0, [pc, #32]	; (80074c4 <decrement+0xcc>)
 80074a4:	f003 f90c 	bl	800a6c0 <HAL_RTC_SetTime>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <decrement+0xba>
					{
						Error_Handler();
 80074ae:	f7fc f925 	bl	80036fc <Error_Handler>
					}
				break;
 80074b2:	bf00      	nop
		}
}
 80074b4:	bf00      	nop
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	20003be3 	.word	0x20003be3
 80074bc:	20003be4 	.word	0x20003be4
 80074c0:	20003580 	.word	0x20003580
 80074c4:	200037bc 	.word	0x200037bc

080074c8 <exit>:
static void exit(void){
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
	applySelectedScreen();
 80074cc:	f7fa ff36 	bl	800233c <applySelectedScreen>
}
 80074d0:	bf00      	nop
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <accept>:
static void accept(void){
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 80074d8:	4b0d      	ldr	r3, [pc, #52]	; (8007510 <accept+0x3c>)
 80074da:	781a      	ldrb	r2, [r3, #0]
 80074dc:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <accept+0x40>)
 80074de:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <accept+0x3c>)
 80074e2:	785a      	ldrb	r2, [r3, #1]
 80074e4:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <accept+0x40>)
 80074e6:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80074e8:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <accept+0x40>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <accept+0x40>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 80074f4:	2200      	movs	r2, #0
 80074f6:	4907      	ldr	r1, [pc, #28]	; (8007514 <accept+0x40>)
 80074f8:	4807      	ldr	r0, [pc, #28]	; (8007518 <accept+0x44>)
 80074fa:	f003 f8e1 	bl	800a6c0 <HAL_RTC_SetTime>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <accept+0x34>
	{
	Error_Handler();
 8007504:	f7fc f8fa 	bl	80036fc <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exit();
 8007508:	f7ff ffde 	bl	80074c8 <exit>
}
 800750c:	bf00      	nop
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20003be4 	.word	0x20003be4
 8007514:	20003580 	.word	0x20003580
 8007518:	200037bc 	.word	0x200037bc

0800751c <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	895b      	ldrh	r3, [r3, #10]
 800753a:	461a      	mov	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	fb02 f303 	mul.w	r3, r2, r3
 8007542:	4618      	mov	r0, r3
 8007544:	f006 f804 	bl	800d550 <malloc>
 8007548:	4603      	mov	r3, r0
 800754a:	461a      	mov	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	741a      	strb	r2, [r3, #16]
}
 8007568:	bf00      	nop
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	891a      	ldrh	r2, [r3, #8]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	895b      	ldrh	r3, [r3, #10]
 8007580:	429a      	cmp	r2, r3
 8007582:	bf0c      	ite	eq
 8007584:	2301      	moveq	r3, #1
 8007586:	2300      	movne	r3, #0
 8007588:	b2db      	uxtb	r3, r3
}
 800758a:	4618      	mov	r0, r3
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff ffe5 	bl	8007570 <cbuf_isFull>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d02a      	beq.n	8007602 <cbuf_ovw+0x6c>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	88db      	ldrh	r3, [r3, #6]
 80075b4:	4619      	mov	r1, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	fb01 f303 	mul.w	r3, r1, r3
 80075be:	18d0      	adds	r0, r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	f005 ffd2 	bl	800d570 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	88db      	ldrh	r3, [r3, #6]
 80075d0:	3301      	adds	r3, #1
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	8952      	ldrh	r2, [r2, #10]
 80075d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80075da:	fb01 f202 	mul.w	r2, r1, r2
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	889b      	ldrh	r3, [r3, #4]
 80075ea:	3301      	adds	r3, #1
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	8952      	ldrh	r2, [r2, #10]
 80075f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80075f4:	fb01 f202 	mul.w	r2, r1, r2
 80075f8:	1a9b      	subs	r3, r3, r2
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	809a      	strh	r2, [r3, #4]
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
		b->elemNum++;
		b->tail = (b->tail + 1) % b->maxSize;
		return 1;
	}
}
 8007600:	e023      	b.n	800764a <cbuf_ovw+0xb4>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	88db      	ldrh	r3, [r3, #6]
 800760a:	4619      	mov	r1, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	fb01 f303 	mul.w	r3, r1, r3
 8007614:	18d0      	adds	r0, r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	461a      	mov	r2, r3
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	f005 ffa7 	bl	800d570 <memcpy>
		b->elemNum++;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	891b      	ldrh	r3, [r3, #8]
 8007626:	3301      	adds	r3, #1
 8007628:	b29a      	uxth	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	88db      	ldrh	r3, [r3, #6]
 8007632:	3301      	adds	r3, #1
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	8952      	ldrh	r2, [r2, #10]
 8007638:	fb93 f1f2 	sdiv	r1, r3, r2
 800763c:	fb01 f202 	mul.w	r2, r1, r2
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	80da      	strh	r2, [r3, #6]
		return 1;
 8007648:	2301      	movs	r3, #1
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <cbuf_readn>:
// non-destructive read
void* cbuf_read(cbuf_t* b);
// non-destructive read of nth element
void* cbuf_readn(cbuf_t* b, uint16_t pos){
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	807b      	strh	r3, [r7, #2]
	pos += b->head;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	889a      	ldrh	r2, [r3, #4]
 8007662:	887b      	ldrh	r3, [r7, #2]
 8007664:	4413      	add	r3, r2
 8007666:	807b      	strh	r3, [r7, #2]
	pos = pos % b->maxSize;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	895a      	ldrh	r2, [r3, #10]
 800766c:	887b      	ldrh	r3, [r7, #2]
 800766e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007672:	fb01 f202 	mul.w	r2, r1, r2
 8007676:	1a9b      	subs	r3, r3, r2
 8007678:	807b      	strh	r3, [r7, #2]
	return(b->elements+pos*b->elemSize);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	887b      	ldrh	r3, [r7, #2]
 8007680:	6879      	ldr	r1, [r7, #4]
 8007682:	68c9      	ldr	r1, [r1, #12]
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
}
 800768a:	4618      	mov	r0, r3
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	887a      	ldrh	r2, [r7, #2]
 80076a6:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	895b      	ldrh	r3, [r3, #10]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f005 ff4e 	bl	800d550 <malloc>
 80076b4:	4603      	mov	r3, r0
 80076b6:	461a      	mov	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	731a      	strb	r2, [r3, #12]
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	891a      	ldrh	r2, [r3, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	895b      	ldrh	r3, [r3, #10]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	bf0c      	ite	eq
 80076f0:	2301      	moveq	r3, #1
 80076f2:	2300      	movne	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff ffe5 	bl	80076dc <ring_buffer_full>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d022      	beq.n	800775e <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	88db      	ldrh	r3, [r3, #6]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	88db      	ldrh	r3, [r3, #6]
 800772c:	3301      	adds	r3, #1
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	8952      	ldrh	r2, [r2, #10]
 8007732:	fb93 f1f2 	sdiv	r1, r3, r2
 8007736:	fb01 f202 	mul.w	r2, r1, r2
 800773a:	1a9b      	subs	r3, r3, r2
 800773c:	b29a      	uxth	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	889b      	ldrh	r3, [r3, #4]
 8007746:	3301      	adds	r3, #1
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	8952      	ldrh	r2, [r2, #10]
 800774c:	fb93 f1f2 	sdiv	r1, r3, r2
 8007750:	fb01 f202 	mul.w	r2, r1, r2
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	b29a      	uxth	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 800775c:	e01b      	b.n	8007796 <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	88db      	ldrh	r3, [r3, #6]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	891b      	ldrh	r3, [r3, #8]
 8007772:	3301      	adds	r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	88db      	ldrh	r3, [r3, #6]
 800777e:	3301      	adds	r3, #1
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	8952      	ldrh	r2, [r2, #10]
 8007784:	fb93 f1f2 	sdiv	r1, r3, r2
 8007788:	fb01 f202 	mul.w	r2, r1, r2
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	b29a      	uxth	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	80da      	strh	r2, [r3, #6]
		return 1;
 8007794:	2301      	movs	r3, #1
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	807b      	strh	r3, [r7, #2]
	position += b->head;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	889a      	ldrh	r2, [r3, #4]
 80077ae:	887b      	ldrh	r3, [r7, #2]
 80077b0:	4413      	add	r3, r2
 80077b2:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	895a      	ldrh	r2, [r3, #10]
 80077b8:	887b      	ldrh	r3, [r7, #2]
 80077ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80077be:	fb01 f202 	mul.w	r2, r1, r2
 80077c2:	1a9b      	subs	r3, r3, r2
 80077c4:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	887b      	ldrh	r3, [r7, #2]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	681b      	ldr	r3, [r3, #0]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <zellerCongruence>:
 *      Author: wojch
 */

#include "timeUtils.h"

uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	71fb      	strb	r3, [r7, #7]
 80077ea:	460b      	mov	r3, r1
 80077ec:	71bb      	strb	r3, [r7, #6]
 80077ee:	4613      	mov	r3, r2
 80077f0:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 80077f2:	79bb      	ldrb	r3, [r7, #6]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d104      	bne.n	8007802 <zellerCongruence+0x22>
	        month = 13;
 80077f8:	230d      	movs	r3, #13
 80077fa:	71bb      	strb	r3, [r7, #6]
	        year--;
 80077fc:	88bb      	ldrh	r3, [r7, #4]
 80077fe:	3b01      	subs	r3, #1
 8007800:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 8007802:	79bb      	ldrb	r3, [r7, #6]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d104      	bne.n	8007812 <zellerCongruence+0x32>
	        month = 14;
 8007808:	230e      	movs	r3, #14
 800780a:	71bb      	strb	r3, [r7, #6]
	        year--;
 800780c:	88bb      	ldrh	r3, [r7, #4]
 800780e:	3b01      	subs	r3, #1
 8007810:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 8007816:	79bb      	ldrb	r3, [r7, #6]
 8007818:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 800781a:	88bb      	ldrh	r3, [r7, #4]
 800781c:	4a29      	ldr	r2, [pc, #164]	; (80078c4 <zellerCongruence+0xe4>)
 800781e:	fba2 1203 	umull	r1, r2, r2, r3
 8007822:	0952      	lsrs	r2, r2, #5
 8007824:	2164      	movs	r1, #100	; 0x64
 8007826:	fb01 f202 	mul.w	r2, r1, r2
 800782a:	1a9b      	subs	r3, r3, r2
 800782c:	b29b      	uxth	r3, r3
 800782e:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 8007830:	88bb      	ldrh	r3, [r7, #4]
 8007832:	4a24      	ldr	r2, [pc, #144]	; (80078c4 <zellerCongruence+0xe4>)
 8007834:	fba2 2303 	umull	r2, r3, r2, r3
 8007838:	095b      	lsrs	r3, r3, #5
 800783a:	b29b      	uxth	r3, r3
 800783c:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800783e:	7bf9      	ldrb	r1, [r7, #15]
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	4613      	mov	r3, r2
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	4a1e      	ldr	r2, [pc, #120]	; (80078c8 <zellerCongruence+0xe8>)
 8007850:	fb82 0203 	smull	r0, r2, r2, r3
 8007854:	1052      	asrs	r2, r2, #1
 8007856:	17db      	asrs	r3, r3, #31
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	18ca      	adds	r2, r1, r3
 800785c:	7b7b      	ldrb	r3, [r7, #13]
 800785e:	4413      	add	r3, r2
 8007860:	7b7a      	ldrb	r2, [r7, #13]
 8007862:	0892      	lsrs	r2, r2, #2
 8007864:	b2d2      	uxtb	r2, r2
 8007866:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 8007868:	7b3a      	ldrb	r2, [r7, #12]
 800786a:	0892      	lsrs	r2, r2, #2
 800786c:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800786e:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 8007870:	7b3a      	ldrb	r2, [r7, #12]
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8007878:	440b      	add	r3, r1
 800787a:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	4b13      	ldr	r3, [pc, #76]	; (80078cc <zellerCongruence+0xec>)
 8007880:	fb83 1302 	smull	r1, r3, r3, r2
 8007884:	4413      	add	r3, r2
 8007886:	1099      	asrs	r1, r3, #2
 8007888:	17d3      	asrs	r3, r2, #31
 800788a:	1ac9      	subs	r1, r1, r3
 800788c:	460b      	mov	r3, r1
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	1a5b      	subs	r3, r3, r1
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	1d5a      	adds	r2, r3, #5
 800789a:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <zellerCongruence+0xec>)
 800789c:	fb83 1302 	smull	r1, r3, r3, r2
 80078a0:	4413      	add	r3, r2
 80078a2:	1099      	asrs	r1, r3, #2
 80078a4:	17d3      	asrs	r3, r2, #31
 80078a6:	1ac9      	subs	r1, r1, r3
 80078a8:	460b      	mov	r3, r1
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	1a5b      	subs	r3, r3, r1
 80078ae:	1ad1      	subs	r1, r2, r3
 80078b0:	b2cb      	uxtb	r3, r1
 80078b2:	3301      	adds	r3, #1
 80078b4:	b2db      	uxtb	r3, r3
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	51eb851f 	.word	0x51eb851f
 80078c8:	66666667 	.word	0x66666667
 80078cc:	92492493 	.word	0x92492493

080078d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80078d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007908 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80078d4:	480d      	ldr	r0, [pc, #52]	; (800790c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80078d6:	490e      	ldr	r1, [pc, #56]	; (8007910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80078d8:	4a0e      	ldr	r2, [pc, #56]	; (8007914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80078da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80078dc:	e002      	b.n	80078e4 <LoopCopyDataInit>

080078de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80078de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078e2:	3304      	adds	r3, #4

080078e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80078e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80078e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80078e8:	d3f9      	bcc.n	80078de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80078ea:	4a0b      	ldr	r2, [pc, #44]	; (8007918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80078ec:	4c0b      	ldr	r4, [pc, #44]	; (800791c <LoopFillZerobss+0x26>)
  movs r3, #0
 80078ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80078f0:	e001      	b.n	80078f6 <LoopFillZerobss>

080078f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80078f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80078f4:	3204      	adds	r2, #4

080078f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80078f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80078f8:	d3fb      	bcc.n	80078f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80078fa:	f7fc f90d 	bl	8003b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80078fe:	f005 fe03 	bl	800d508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007902:	f7fb fd7b 	bl	80033fc <main>
  bx  lr    
 8007906:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007908:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800790c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007910:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 8007914:	0803cea8 	.word	0x0803cea8
  ldr r2, =_sbss
 8007918:	200004f8 	.word	0x200004f8
  ldr r4, =_ebss
 800791c:	20003c2c 	.word	0x20003c2c

08007920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007920:	e7fe      	b.n	8007920 <ADC_IRQHandler>
	...

08007924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007928:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <HAL_Init+0x40>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a0d      	ldr	r2, [pc, #52]	; (8007964 <HAL_Init+0x40>)
 800792e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <HAL_Init+0x40>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a0a      	ldr	r2, [pc, #40]	; (8007964 <HAL_Init+0x40>)
 800793a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800793e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007940:	4b08      	ldr	r3, [pc, #32]	; (8007964 <HAL_Init+0x40>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a07      	ldr	r2, [pc, #28]	; (8007964 <HAL_Init+0x40>)
 8007946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800794c:	2003      	movs	r0, #3
 800794e:	f000 f94f 	bl	8007bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007952:	2000      	movs	r0, #0
 8007954:	f000 f808 	bl	8007968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007958:	f7fb ffb6 	bl	80038c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40023c00 	.word	0x40023c00

08007968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007970:	4b12      	ldr	r3, [pc, #72]	; (80079bc <HAL_InitTick+0x54>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	4b12      	ldr	r3, [pc, #72]	; (80079c0 <HAL_InitTick+0x58>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	4619      	mov	r1, r3
 800797a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800797e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007982:	fbb2 f3f3 	udiv	r3, r2, r3
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f967 	bl	8007c5a <HAL_SYSTICK_Config>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e00e      	b.n	80079b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b0f      	cmp	r3, #15
 800799a:	d80a      	bhi.n	80079b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800799c:	2200      	movs	r2, #0
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
 80079a4:	f000 f92f 	bl	8007c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80079a8:	4a06      	ldr	r2, [pc, #24]	; (80079c4 <HAL_InitTick+0x5c>)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	e000      	b.n	80079b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	20000180 	.word	0x20000180
 80079c0:	200002bc 	.word	0x200002bc
 80079c4:	200002b8 	.word	0x200002b8

080079c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80079cc:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <HAL_IncTick+0x20>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	4b06      	ldr	r3, [pc, #24]	; (80079ec <HAL_IncTick+0x24>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4413      	add	r3, r2
 80079d8:	4a04      	ldr	r2, [pc, #16]	; (80079ec <HAL_IncTick+0x24>)
 80079da:	6013      	str	r3, [r2, #0]
}
 80079dc:	bf00      	nop
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	200002bc 	.word	0x200002bc
 80079ec:	20003be8 	.word	0x20003be8

080079f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
  return uwTick;
 80079f4:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <HAL_GetTick+0x14>)
 80079f6:	681b      	ldr	r3, [r3, #0]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20003be8 	.word	0x20003be8

08007a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a10:	f7ff ffee 	bl	80079f0 <HAL_GetTick>
 8007a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a20:	d005      	beq.n	8007a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <HAL_Delay+0x44>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007a2e:	bf00      	nop
 8007a30:	f7ff ffde 	bl	80079f0 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d8f7      	bhi.n	8007a30 <HAL_Delay+0x28>
  {
  }
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	200002bc 	.word	0x200002bc

08007a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a60:	4b0c      	ldr	r3, [pc, #48]	; (8007a94 <__NVIC_SetPriorityGrouping+0x44>)
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a82:	4a04      	ldr	r2, [pc, #16]	; (8007a94 <__NVIC_SetPriorityGrouping+0x44>)
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	60d3      	str	r3, [r2, #12]
}
 8007a88:	bf00      	nop
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	e000ed00 	.word	0xe000ed00

08007a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a9c:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	0a1b      	lsrs	r3, r3, #8
 8007aa2:	f003 0307 	and.w	r3, r3, #7
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	e000ed00 	.word	0xe000ed00

08007ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	db0b      	blt.n	8007ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
 8007ac8:	f003 021f 	and.w	r2, r3, #31
 8007acc:	4907      	ldr	r1, [pc, #28]	; (8007aec <__NVIC_EnableIRQ+0x38>)
 8007ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8007ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	e000e100 	.word	0xe000e100

08007af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	db0a      	blt.n	8007b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	490c      	ldr	r1, [pc, #48]	; (8007b3c <__NVIC_SetPriority+0x4c>)
 8007b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0e:	0112      	lsls	r2, r2, #4
 8007b10:	b2d2      	uxtb	r2, r2
 8007b12:	440b      	add	r3, r1
 8007b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b18:	e00a      	b.n	8007b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	4908      	ldr	r1, [pc, #32]	; (8007b40 <__NVIC_SetPriority+0x50>)
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	3b04      	subs	r3, #4
 8007b28:	0112      	lsls	r2, r2, #4
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	440b      	add	r3, r1
 8007b2e:	761a      	strb	r2, [r3, #24]
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	e000e100 	.word	0xe000e100
 8007b40:	e000ed00 	.word	0xe000ed00

08007b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b089      	sub	sp, #36	; 0x24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	f1c3 0307 	rsb	r3, r3, #7
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	bf28      	it	cs
 8007b62:	2304      	movcs	r3, #4
 8007b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	2b06      	cmp	r3, #6
 8007b6c:	d902      	bls.n	8007b74 <NVIC_EncodePriority+0x30>
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	3b03      	subs	r3, #3
 8007b72:	e000      	b.n	8007b76 <NVIC_EncodePriority+0x32>
 8007b74:	2300      	movs	r3, #0
 8007b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b82:	43da      	mvns	r2, r3
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	401a      	ands	r2, r3
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	fa01 f303 	lsl.w	r3, r1, r3
 8007b96:	43d9      	mvns	r1, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b9c:	4313      	orrs	r3, r2
         );
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3724      	adds	r7, #36	; 0x24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
	...

08007bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bbc:	d301      	bcc.n	8007bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e00f      	b.n	8007be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bc2:	4a0a      	ldr	r2, [pc, #40]	; (8007bec <SysTick_Config+0x40>)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bca:	210f      	movs	r1, #15
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	f7ff ff8e 	bl	8007af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <SysTick_Config+0x40>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007bda:	4b04      	ldr	r3, [pc, #16]	; (8007bec <SysTick_Config+0x40>)
 8007bdc:	2207      	movs	r2, #7
 8007bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	e000e010 	.word	0xe000e010

08007bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff ff29 	bl	8007a50 <__NVIC_SetPriorityGrouping>
}
 8007bfe:	bf00      	nop
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b086      	sub	sp, #24
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	607a      	str	r2, [r7, #4]
 8007c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c18:	f7ff ff3e 	bl	8007a98 <__NVIC_GetPriorityGrouping>
 8007c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	68b9      	ldr	r1, [r7, #8]
 8007c22:	6978      	ldr	r0, [r7, #20]
 8007c24:	f7ff ff8e 	bl	8007b44 <NVIC_EncodePriority>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff ff5d 	bl	8007af0 <__NVIC_SetPriority>
}
 8007c36:	bf00      	nop
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	4603      	mov	r3, r0
 8007c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff ff31 	bl	8007ab4 <__NVIC_EnableIRQ>
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff ffa2 	bl	8007bac <SysTick_Config>
 8007c68:	4603      	mov	r3, r0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007c80:	f7ff feb6 	bl	80079f0 <HAL_GetTick>
 8007c84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e099      	b.n	8007dc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0201 	bic.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cb0:	e00f      	b.n	8007cd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007cb2:	f7ff fe9d 	bl	80079f0 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b05      	cmp	r3, #5
 8007cbe:	d908      	bls.n	8007cd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2203      	movs	r2, #3
 8007cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e078      	b.n	8007dc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e8      	bne.n	8007cb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4b38      	ldr	r3, [pc, #224]	; (8007dcc <HAL_DMA_Init+0x158>)
 8007cec:	4013      	ands	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d107      	bne.n	8007d3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d34:	4313      	orrs	r3, r2
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f023 0307 	bic.w	r3, r3, #7
 8007d52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d117      	bne.n	8007d96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00e      	beq.n	8007d96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fb01 	bl	8008380 <DMA_CheckFifoParam>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d008      	beq.n	8007d96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2240      	movs	r2, #64	; 0x40
 8007d88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007d92:	2301      	movs	r3, #1
 8007d94:	e016      	b.n	8007dc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fab8 	bl	8008314 <DMA_CalcBaseAndBitshift>
 8007da4:	4603      	mov	r3, r0
 8007da6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dac:	223f      	movs	r2, #63	; 0x3f
 8007dae:	409a      	lsls	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	f010803f 	.word	0xf010803f

08007dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d101      	bne.n	8007df6 <HAL_DMA_Start_IT+0x26>
 8007df2:	2302      	movs	r3, #2
 8007df4:	e040      	b.n	8007e78 <HAL_DMA_Start_IT+0xa8>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d12f      	bne.n	8007e6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	68b9      	ldr	r1, [r7, #8]
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 fa4a 	bl	80082b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e28:	223f      	movs	r2, #63	; 0x3f
 8007e2a:	409a      	lsls	r2, r3
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0216 	orr.w	r2, r2, #22
 8007e3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d007      	beq.n	8007e58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0208 	orr.w	r2, r2, #8
 8007e56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0201 	orr.w	r2, r2, #1
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	e005      	b.n	8007e76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007e72:	2302      	movs	r3, #2
 8007e74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007e8e:	f7ff fdaf 	bl	80079f0 <HAL_GetTick>
 8007e92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d008      	beq.n	8007eb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2280      	movs	r2, #128	; 0x80
 8007ea4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e052      	b.n	8007f58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0216 	bic.w	r2, r2, #22
 8007ec0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ed0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d103      	bne.n	8007ee2 <HAL_DMA_Abort+0x62>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d007      	beq.n	8007ef2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0208 	bic.w	r2, r2, #8
 8007ef0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0201 	bic.w	r2, r2, #1
 8007f00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f02:	e013      	b.n	8007f2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f04:	f7ff fd74 	bl	80079f0 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b05      	cmp	r3, #5
 8007f10:	d90c      	bls.n	8007f2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2220      	movs	r2, #32
 8007f16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2203      	movs	r2, #3
 8007f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e015      	b.n	8007f58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e4      	bne.n	8007f04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f3e:	223f      	movs	r2, #63	; 0x3f
 8007f40:	409a      	lsls	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d004      	beq.n	8007f7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2280      	movs	r2, #128	; 0x80
 8007f78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e00c      	b.n	8007f98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2205      	movs	r2, #5
 8007f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 0201 	bic.w	r2, r2, #1
 8007f94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007fb0:	4b8e      	ldr	r3, [pc, #568]	; (80081ec <HAL_DMA_IRQHandler+0x248>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a8e      	ldr	r2, [pc, #568]	; (80081f0 <HAL_DMA_IRQHandler+0x24c>)
 8007fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fba:	0a9b      	lsrs	r3, r3, #10
 8007fbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fce:	2208      	movs	r2, #8
 8007fd0:	409a      	lsls	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d01a      	beq.n	8008010 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d013      	beq.n	8008010 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0204 	bic.w	r2, r2, #4
 8007ff6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ffc:	2208      	movs	r2, #8
 8007ffe:	409a      	lsls	r2, r3
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008008:	f043 0201 	orr.w	r2, r3, #1
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008014:	2201      	movs	r2, #1
 8008016:	409a      	lsls	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4013      	ands	r3, r2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d012      	beq.n	8008046 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008032:	2201      	movs	r2, #1
 8008034:	409a      	lsls	r2, r3
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803e:	f043 0202 	orr.w	r2, r3, #2
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804a:	2204      	movs	r2, #4
 800804c:	409a      	lsls	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4013      	ands	r3, r2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d012      	beq.n	800807c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008068:	2204      	movs	r2, #4
 800806a:	409a      	lsls	r2, r3
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008074:	f043 0204 	orr.w	r2, r3, #4
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008080:	2210      	movs	r2, #16
 8008082:	409a      	lsls	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4013      	ands	r3, r2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d043      	beq.n	8008114 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0308 	and.w	r3, r3, #8
 8008096:	2b00      	cmp	r3, #0
 8008098:	d03c      	beq.n	8008114 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809e:	2210      	movs	r2, #16
 80080a0:	409a      	lsls	r2, r3
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d018      	beq.n	80080e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d108      	bne.n	80080d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d024      	beq.n	8008114 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	4798      	blx	r3
 80080d2:	e01f      	b.n	8008114 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01b      	beq.n	8008114 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	4798      	blx	r3
 80080e4:	e016      	b.n	8008114 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d107      	bne.n	8008104 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0208 	bic.w	r2, r2, #8
 8008102:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008118:	2220      	movs	r2, #32
 800811a:	409a      	lsls	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4013      	ands	r3, r2
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 808f 	beq.w	8008244 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 8087 	beq.w	8008244 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813a:	2220      	movs	r2, #32
 800813c:	409a      	lsls	r2, r3
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b05      	cmp	r3, #5
 800814c:	d136      	bne.n	80081bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 0216 	bic.w	r2, r2, #22
 800815c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	695a      	ldr	r2, [r3, #20]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800816c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	2b00      	cmp	r3, #0
 8008174:	d103      	bne.n	800817e <HAL_DMA_IRQHandler+0x1da>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800817a:	2b00      	cmp	r3, #0
 800817c:	d007      	beq.n	800818e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0208 	bic.w	r2, r2, #8
 800818c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008192:	223f      	movs	r2, #63	; 0x3f
 8008194:	409a      	lsls	r2, r3
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d07e      	beq.n	80082b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
        }
        return;
 80081ba:	e079      	b.n	80082b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d01d      	beq.n	8008206 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10d      	bne.n	80081f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d031      	beq.n	8008244 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
 80081e8:	e02c      	b.n	8008244 <HAL_DMA_IRQHandler+0x2a0>
 80081ea:	bf00      	nop
 80081ec:	20000180 	.word	0x20000180
 80081f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d023      	beq.n	8008244 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	4798      	blx	r3
 8008204:	e01e      	b.n	8008244 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10f      	bne.n	8008234 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0210 	bic.w	r2, r2, #16
 8008222:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008248:	2b00      	cmp	r3, #0
 800824a:	d032      	beq.n	80082b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d022      	beq.n	800829e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2205      	movs	r2, #5
 800825c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0201 	bic.w	r2, r2, #1
 800826e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	3301      	adds	r3, #1
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	429a      	cmp	r2, r3
 800827a:	d307      	bcc.n	800828c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f2      	bne.n	8008270 <HAL_DMA_IRQHandler+0x2cc>
 800828a:	e000      	b.n	800828e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800828c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
 80082ae:	e000      	b.n	80082b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80082b0:	bf00      	nop
    }
  }
}
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	2b40      	cmp	r3, #64	; 0x40
 80082e4:	d108      	bne.n	80082f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80082f6:	e007      	b.n	8008308 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	60da      	str	r2, [r3, #12]
}
 8008308:	bf00      	nop
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	b2db      	uxtb	r3, r3
 8008322:	3b10      	subs	r3, #16
 8008324:	4a14      	ldr	r2, [pc, #80]	; (8008378 <DMA_CalcBaseAndBitshift+0x64>)
 8008326:	fba2 2303 	umull	r2, r3, r2, r3
 800832a:	091b      	lsrs	r3, r3, #4
 800832c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800832e:	4a13      	ldr	r2, [pc, #76]	; (800837c <DMA_CalcBaseAndBitshift+0x68>)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	4413      	add	r3, r2
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b03      	cmp	r3, #3
 8008340:	d909      	bls.n	8008356 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800834a:	f023 0303 	bic.w	r3, r3, #3
 800834e:	1d1a      	adds	r2, r3, #4
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	659a      	str	r2, [r3, #88]	; 0x58
 8008354:	e007      	b.n	8008366 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	aaaaaaab 	.word	0xaaaaaaab
 800837c:	0803c3fc 	.word	0x0803c3fc

08008380 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008390:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d11f      	bne.n	80083da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b03      	cmp	r3, #3
 800839e:	d856      	bhi.n	800844e <DMA_CheckFifoParam+0xce>
 80083a0:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <DMA_CheckFifoParam+0x28>)
 80083a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a6:	bf00      	nop
 80083a8:	080083b9 	.word	0x080083b9
 80083ac:	080083cb 	.word	0x080083cb
 80083b0:	080083b9 	.word	0x080083b9
 80083b4:	0800844f 	.word	0x0800844f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d046      	beq.n	8008452 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083c8:	e043      	b.n	8008452 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083d2:	d140      	bne.n	8008456 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083d8:	e03d      	b.n	8008456 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083e2:	d121      	bne.n	8008428 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d837      	bhi.n	800845a <DMA_CheckFifoParam+0xda>
 80083ea:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <DMA_CheckFifoParam+0x70>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	08008401 	.word	0x08008401
 80083f4:	08008407 	.word	0x08008407
 80083f8:	08008401 	.word	0x08008401
 80083fc:	08008419 	.word	0x08008419
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	73fb      	strb	r3, [r7, #15]
      break;
 8008404:	e030      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d025      	beq.n	800845e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008416:	e022      	b.n	800845e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008420:	d11f      	bne.n	8008462 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008426:	e01c      	b.n	8008462 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b02      	cmp	r3, #2
 800842c:	d903      	bls.n	8008436 <DMA_CheckFifoParam+0xb6>
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b03      	cmp	r3, #3
 8008432:	d003      	beq.n	800843c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008434:	e018      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	73fb      	strb	r3, [r7, #15]
      break;
 800843a:	e015      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00e      	beq.n	8008466 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
      break;
 800844c:	e00b      	b.n	8008466 <DMA_CheckFifoParam+0xe6>
      break;
 800844e:	bf00      	nop
 8008450:	e00a      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
      break;
 8008452:	bf00      	nop
 8008454:	e008      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
      break;
 8008456:	bf00      	nop
 8008458:	e006      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
      break;
 800845a:	bf00      	nop
 800845c:	e004      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
      break;
 800845e:	bf00      	nop
 8008460:	e002      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
      break;   
 8008462:	bf00      	nop
 8008464:	e000      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
      break;
 8008466:	bf00      	nop
    }
  } 
  
  return status; 
 8008468:	7bfb      	ldrb	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop

08008478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008478:	b480      	push	{r7}
 800847a:	b089      	sub	sp, #36	; 0x24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008482:	2300      	movs	r3, #0
 8008484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008486:	2300      	movs	r3, #0
 8008488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800848a:	2300      	movs	r3, #0
 800848c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800848e:	2300      	movs	r3, #0
 8008490:	61fb      	str	r3, [r7, #28]
 8008492:	e177      	b.n	8008784 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008494:	2201      	movs	r2, #1
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	fa02 f303 	lsl.w	r3, r2, r3
 800849c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	4013      	ands	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	f040 8166 	bne.w	800877e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f003 0303 	and.w	r3, r3, #3
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d005      	beq.n	80084ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d130      	bne.n	800852c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	2203      	movs	r2, #3
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	43db      	mvns	r3, r3
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	4013      	ands	r3, r2
 80084e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	fa02 f303 	lsl.w	r3, r2, r3
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008500:	2201      	movs	r2, #1
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	fa02 f303 	lsl.w	r3, r2, r3
 8008508:	43db      	mvns	r3, r3
 800850a:	69ba      	ldr	r2, [r7, #24]
 800850c:	4013      	ands	r3, r2
 800850e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	091b      	lsrs	r3, r3, #4
 8008516:	f003 0201 	and.w	r2, r3, #1
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	fa02 f303 	lsl.w	r3, r2, r3
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	4313      	orrs	r3, r2
 8008524:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	2b03      	cmp	r3, #3
 8008536:	d017      	beq.n	8008568 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	2203      	movs	r2, #3
 8008544:	fa02 f303 	lsl.w	r3, r2, r3
 8008548:	43db      	mvns	r3, r3
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	4013      	ands	r3, r2
 800854e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	fa02 f303 	lsl.w	r3, r2, r3
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	4313      	orrs	r3, r2
 8008560:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f003 0303 	and.w	r3, r3, #3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d123      	bne.n	80085bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	08da      	lsrs	r2, r3, #3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3208      	adds	r2, #8
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	f003 0307 	and.w	r3, r3, #7
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	220f      	movs	r2, #15
 800858c:	fa02 f303 	lsl.w	r3, r2, r3
 8008590:	43db      	mvns	r3, r3
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	4013      	ands	r3, r2
 8008596:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	691a      	ldr	r2, [r3, #16]
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	08da      	lsrs	r2, r3, #3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3208      	adds	r2, #8
 80085b6:	69b9      	ldr	r1, [r7, #24]
 80085b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	2203      	movs	r2, #3
 80085c8:	fa02 f303 	lsl.w	r3, r2, r3
 80085cc:	43db      	mvns	r3, r3
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	4013      	ands	r3, r2
 80085d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f003 0203 	and.w	r2, r3, #3
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 80c0 	beq.w	800877e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085fe:	2300      	movs	r3, #0
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	4b66      	ldr	r3, [pc, #408]	; (800879c <HAL_GPIO_Init+0x324>)
 8008604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008606:	4a65      	ldr	r2, [pc, #404]	; (800879c <HAL_GPIO_Init+0x324>)
 8008608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800860c:	6453      	str	r3, [r2, #68]	; 0x44
 800860e:	4b63      	ldr	r3, [pc, #396]	; (800879c <HAL_GPIO_Init+0x324>)
 8008610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800861a:	4a61      	ldr	r2, [pc, #388]	; (80087a0 <HAL_GPIO_Init+0x328>)
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	089b      	lsrs	r3, r3, #2
 8008620:	3302      	adds	r3, #2
 8008622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	220f      	movs	r2, #15
 8008632:	fa02 f303 	lsl.w	r3, r2, r3
 8008636:	43db      	mvns	r3, r3
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	4013      	ands	r3, r2
 800863c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a58      	ldr	r2, [pc, #352]	; (80087a4 <HAL_GPIO_Init+0x32c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d037      	beq.n	80086b6 <HAL_GPIO_Init+0x23e>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a57      	ldr	r2, [pc, #348]	; (80087a8 <HAL_GPIO_Init+0x330>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d031      	beq.n	80086b2 <HAL_GPIO_Init+0x23a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a56      	ldr	r2, [pc, #344]	; (80087ac <HAL_GPIO_Init+0x334>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d02b      	beq.n	80086ae <HAL_GPIO_Init+0x236>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a55      	ldr	r2, [pc, #340]	; (80087b0 <HAL_GPIO_Init+0x338>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d025      	beq.n	80086aa <HAL_GPIO_Init+0x232>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a54      	ldr	r2, [pc, #336]	; (80087b4 <HAL_GPIO_Init+0x33c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d01f      	beq.n	80086a6 <HAL_GPIO_Init+0x22e>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a53      	ldr	r2, [pc, #332]	; (80087b8 <HAL_GPIO_Init+0x340>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d019      	beq.n	80086a2 <HAL_GPIO_Init+0x22a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a52      	ldr	r2, [pc, #328]	; (80087bc <HAL_GPIO_Init+0x344>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d013      	beq.n	800869e <HAL_GPIO_Init+0x226>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a51      	ldr	r2, [pc, #324]	; (80087c0 <HAL_GPIO_Init+0x348>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00d      	beq.n	800869a <HAL_GPIO_Init+0x222>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a50      	ldr	r2, [pc, #320]	; (80087c4 <HAL_GPIO_Init+0x34c>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d007      	beq.n	8008696 <HAL_GPIO_Init+0x21e>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a4f      	ldr	r2, [pc, #316]	; (80087c8 <HAL_GPIO_Init+0x350>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d101      	bne.n	8008692 <HAL_GPIO_Init+0x21a>
 800868e:	2309      	movs	r3, #9
 8008690:	e012      	b.n	80086b8 <HAL_GPIO_Init+0x240>
 8008692:	230a      	movs	r3, #10
 8008694:	e010      	b.n	80086b8 <HAL_GPIO_Init+0x240>
 8008696:	2308      	movs	r3, #8
 8008698:	e00e      	b.n	80086b8 <HAL_GPIO_Init+0x240>
 800869a:	2307      	movs	r3, #7
 800869c:	e00c      	b.n	80086b8 <HAL_GPIO_Init+0x240>
 800869e:	2306      	movs	r3, #6
 80086a0:	e00a      	b.n	80086b8 <HAL_GPIO_Init+0x240>
 80086a2:	2305      	movs	r3, #5
 80086a4:	e008      	b.n	80086b8 <HAL_GPIO_Init+0x240>
 80086a6:	2304      	movs	r3, #4
 80086a8:	e006      	b.n	80086b8 <HAL_GPIO_Init+0x240>
 80086aa:	2303      	movs	r3, #3
 80086ac:	e004      	b.n	80086b8 <HAL_GPIO_Init+0x240>
 80086ae:	2302      	movs	r3, #2
 80086b0:	e002      	b.n	80086b8 <HAL_GPIO_Init+0x240>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e000      	b.n	80086b8 <HAL_GPIO_Init+0x240>
 80086b6:	2300      	movs	r3, #0
 80086b8:	69fa      	ldr	r2, [r7, #28]
 80086ba:	f002 0203 	and.w	r2, r2, #3
 80086be:	0092      	lsls	r2, r2, #2
 80086c0:	4093      	lsls	r3, r2
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086c8:	4935      	ldr	r1, [pc, #212]	; (80087a0 <HAL_GPIO_Init+0x328>)
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	089b      	lsrs	r3, r3, #2
 80086ce:	3302      	adds	r3, #2
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80086d6:	4b3d      	ldr	r3, [pc, #244]	; (80087cc <HAL_GPIO_Init+0x354>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	43db      	mvns	r3, r3
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	4013      	ands	r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80086fa:	4a34      	ldr	r2, [pc, #208]	; (80087cc <HAL_GPIO_Init+0x354>)
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008700:	4b32      	ldr	r3, [pc, #200]	; (80087cc <HAL_GPIO_Init+0x354>)
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	43db      	mvns	r3, r3
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	4013      	ands	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008724:	4a29      	ldr	r2, [pc, #164]	; (80087cc <HAL_GPIO_Init+0x354>)
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800872a:	4b28      	ldr	r3, [pc, #160]	; (80087cc <HAL_GPIO_Init+0x354>)
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	43db      	mvns	r3, r3
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	4013      	ands	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800874e:	4a1f      	ldr	r2, [pc, #124]	; (80087cc <HAL_GPIO_Init+0x354>)
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008754:	4b1d      	ldr	r3, [pc, #116]	; (80087cc <HAL_GPIO_Init+0x354>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	43db      	mvns	r3, r3
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	4013      	ands	r3, r2
 8008762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008778:	4a14      	ldr	r2, [pc, #80]	; (80087cc <HAL_GPIO_Init+0x354>)
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	3301      	adds	r3, #1
 8008782:	61fb      	str	r3, [r7, #28]
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2b0f      	cmp	r3, #15
 8008788:	f67f ae84 	bls.w	8008494 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	3724      	adds	r7, #36	; 0x24
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	40023800 	.word	0x40023800
 80087a0:	40013800 	.word	0x40013800
 80087a4:	40020000 	.word	0x40020000
 80087a8:	40020400 	.word	0x40020400
 80087ac:	40020800 	.word	0x40020800
 80087b0:	40020c00 	.word	0x40020c00
 80087b4:	40021000 	.word	0x40021000
 80087b8:	40021400 	.word	0x40021400
 80087bc:	40021800 	.word	0x40021800
 80087c0:	40021c00 	.word	0x40021c00
 80087c4:	40022000 	.word	0x40022000
 80087c8:	40022400 	.word	0x40022400
 80087cc:	40013c00 	.word	0x40013c00

080087d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	887b      	ldrh	r3, [r7, #2]
 80087e2:	4013      	ands	r3, r2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
 80087ec:	e001      	b.n	80087f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	807b      	strh	r3, [r7, #2]
 800880c:	4613      	mov	r3, r2
 800880e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008810:	787b      	ldrb	r3, [r7, #1]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008816:	887a      	ldrh	r2, [r7, #2]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800881c:	e003      	b.n	8008826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800881e:	887b      	ldrh	r3, [r7, #2]
 8008820:	041a      	lsls	r2, r3, #16
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	619a      	str	r2, [r3, #24]
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008844:	887a      	ldrh	r2, [r7, #2]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4013      	ands	r3, r2
 800884a:	041a      	lsls	r2, r3, #16
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	43d9      	mvns	r1, r3
 8008850:	887b      	ldrh	r3, [r7, #2]
 8008852:	400b      	ands	r3, r1
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	619a      	str	r2, [r3, #24]
}
 800885a:	bf00      	nop
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
	...

08008868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008872:	4b08      	ldr	r3, [pc, #32]	; (8008894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008874:	695a      	ldr	r2, [r3, #20]
 8008876:	88fb      	ldrh	r3, [r7, #6]
 8008878:	4013      	ands	r3, r2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800887e:	4a05      	ldr	r2, [pc, #20]	; (8008894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008880:	88fb      	ldrh	r3, [r7, #6]
 8008882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 f806 	bl	8008898 <HAL_GPIO_EXTI_Callback>
  }
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	40013c00 	.word	0x40013c00

08008898 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80088a2:	bf00      	nop
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
	...

080088b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e12b      	b.n	8008b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7f9 fdca 	bl	8002470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2224      	movs	r2, #36	; 0x24
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0201 	bic.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008914:	f001 fc76 	bl	800a204 <HAL_RCC_GetPCLK1Freq>
 8008918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	4a81      	ldr	r2, [pc, #516]	; (8008b24 <HAL_I2C_Init+0x274>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d807      	bhi.n	8008934 <HAL_I2C_Init+0x84>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4a80      	ldr	r2, [pc, #512]	; (8008b28 <HAL_I2C_Init+0x278>)
 8008928:	4293      	cmp	r3, r2
 800892a:	bf94      	ite	ls
 800892c:	2301      	movls	r3, #1
 800892e:	2300      	movhi	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	e006      	b.n	8008942 <HAL_I2C_Init+0x92>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4a7d      	ldr	r2, [pc, #500]	; (8008b2c <HAL_I2C_Init+0x27c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	bf94      	ite	ls
 800893c:	2301      	movls	r3, #1
 800893e:	2300      	movhi	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e0e7      	b.n	8008b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	4a78      	ldr	r2, [pc, #480]	; (8008b30 <HAL_I2C_Init+0x280>)
 800894e:	fba2 2303 	umull	r2, r3, r2, r3
 8008952:	0c9b      	lsrs	r3, r3, #18
 8008954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	430a      	orrs	r2, r1
 8008968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6a1b      	ldr	r3, [r3, #32]
 8008970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	4a6a      	ldr	r2, [pc, #424]	; (8008b24 <HAL_I2C_Init+0x274>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d802      	bhi.n	8008984 <HAL_I2C_Init+0xd4>
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	3301      	adds	r3, #1
 8008982:	e009      	b.n	8008998 <HAL_I2C_Init+0xe8>
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800898a:	fb02 f303 	mul.w	r3, r2, r3
 800898e:	4a69      	ldr	r2, [pc, #420]	; (8008b34 <HAL_I2C_Init+0x284>)
 8008990:	fba2 2303 	umull	r2, r3, r2, r3
 8008994:	099b      	lsrs	r3, r3, #6
 8008996:	3301      	adds	r3, #1
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6812      	ldr	r2, [r2, #0]
 800899c:	430b      	orrs	r3, r1
 800899e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80089aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	495c      	ldr	r1, [pc, #368]	; (8008b24 <HAL_I2C_Init+0x274>)
 80089b4:	428b      	cmp	r3, r1
 80089b6:	d819      	bhi.n	80089ec <HAL_I2C_Init+0x13c>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	1e59      	subs	r1, r3, #1
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80089c6:	1c59      	adds	r1, r3, #1
 80089c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80089cc:	400b      	ands	r3, r1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00a      	beq.n	80089e8 <HAL_I2C_Init+0x138>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1e59      	subs	r1, r3, #1
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80089e0:	3301      	adds	r3, #1
 80089e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089e6:	e051      	b.n	8008a8c <HAL_I2C_Init+0x1dc>
 80089e8:	2304      	movs	r3, #4
 80089ea:	e04f      	b.n	8008a8c <HAL_I2C_Init+0x1dc>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d111      	bne.n	8008a18 <HAL_I2C_Init+0x168>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	1e58      	subs	r0, r3, #1
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6859      	ldr	r1, [r3, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	440b      	add	r3, r1
 8008a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a06:	3301      	adds	r3, #1
 8008a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	bf0c      	ite	eq
 8008a10:	2301      	moveq	r3, #1
 8008a12:	2300      	movne	r3, #0
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	e012      	b.n	8008a3e <HAL_I2C_Init+0x18e>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	1e58      	subs	r0, r3, #1
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6859      	ldr	r1, [r3, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	440b      	add	r3, r1
 8008a26:	0099      	lsls	r1, r3, #2
 8008a28:	440b      	add	r3, r1
 8008a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a2e:	3301      	adds	r3, #1
 8008a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bf0c      	ite	eq
 8008a38:	2301      	moveq	r3, #1
 8008a3a:	2300      	movne	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <HAL_I2C_Init+0x196>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e022      	b.n	8008a8c <HAL_I2C_Init+0x1dc>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10e      	bne.n	8008a6c <HAL_I2C_Init+0x1bc>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	1e58      	subs	r0, r3, #1
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6859      	ldr	r1, [r3, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	440b      	add	r3, r1
 8008a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a60:	3301      	adds	r3, #1
 8008a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a6a:	e00f      	b.n	8008a8c <HAL_I2C_Init+0x1dc>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	1e58      	subs	r0, r3, #1
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6859      	ldr	r1, [r3, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	440b      	add	r3, r1
 8008a7a:	0099      	lsls	r1, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a82:	3301      	adds	r3, #1
 8008a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	6809      	ldr	r1, [r1, #0]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	69da      	ldr	r2, [r3, #28]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	6911      	ldr	r1, [r2, #16]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	68d2      	ldr	r2, [r2, #12]
 8008ac6:	4311      	orrs	r1, r2
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6812      	ldr	r2, [r2, #0]
 8008acc:	430b      	orrs	r3, r1
 8008ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695a      	ldr	r2, [r3, #20]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0201 	orr.w	r2, r2, #1
 8008afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	000186a0 	.word	0x000186a0
 8008b28:	001e847f 	.word	0x001e847f
 8008b2c:	003d08ff 	.word	0x003d08ff
 8008b30:	431bde83 	.word	0x431bde83
 8008b34:	10624dd3 	.word	0x10624dd3

08008b38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af02      	add	r7, sp, #8
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	4608      	mov	r0, r1
 8008b42:	4611      	mov	r1, r2
 8008b44:	461a      	mov	r2, r3
 8008b46:	4603      	mov	r3, r0
 8008b48:	817b      	strh	r3, [r7, #10]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	813b      	strh	r3, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b52:	f7fe ff4d 	bl	80079f0 <HAL_GetTick>
 8008b56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	f040 80d9 	bne.w	8008d18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	2319      	movs	r3, #25
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	496d      	ldr	r1, [pc, #436]	; (8008d24 <HAL_I2C_Mem_Write+0x1ec>)
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f000 fc7f 	bl	8009474 <I2C_WaitOnFlagUntilTimeout>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e0cc      	b.n	8008d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <HAL_I2C_Mem_Write+0x56>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e0c5      	b.n	8008d1a <HAL_I2C_Mem_Write+0x1e2>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d007      	beq.n	8008bb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0201 	orr.w	r2, r2, #1
 8008bb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2221      	movs	r2, #33	; 0x21
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2240      	movs	r2, #64	; 0x40
 8008bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a4d      	ldr	r2, [pc, #308]	; (8008d28 <HAL_I2C_Mem_Write+0x1f0>)
 8008bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008bf6:	88f8      	ldrh	r0, [r7, #6]
 8008bf8:	893a      	ldrh	r2, [r7, #8]
 8008bfa:	8979      	ldrh	r1, [r7, #10]
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	4603      	mov	r3, r0
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 fab6 	bl	8009178 <I2C_RequestMemoryWrite>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d052      	beq.n	8008cb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e081      	b.n	8008d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 fd00 	bl	8009620 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00d      	beq.n	8008c42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d107      	bne.n	8008c3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e06b      	b.n	8008d1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	781a      	ldrb	r2, [r3, #0]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	d11b      	bne.n	8008cb8 <HAL_I2C_Mem_Write+0x180>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d017      	beq.n	8008cb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	781a      	ldrb	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1aa      	bne.n	8008c16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 fcec 	bl	80096a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00d      	beq.n	8008cec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d107      	bne.n	8008ce8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ce6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e016      	b.n	8008d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2220      	movs	r2, #32
 8008d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	e000      	b.n	8008d1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008d18:	2302      	movs	r3, #2
  }
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	00100002 	.word	0x00100002
 8008d28:	ffff0000 	.word	0xffff0000

08008d2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08c      	sub	sp, #48	; 0x30
 8008d30:	af02      	add	r7, sp, #8
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	4608      	mov	r0, r1
 8008d36:	4611      	mov	r1, r2
 8008d38:	461a      	mov	r2, r3
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	817b      	strh	r3, [r7, #10]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	813b      	strh	r3, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d46:	f7fe fe53 	bl	80079f0 <HAL_GetTick>
 8008d4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	f040 8208 	bne.w	800916a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	2319      	movs	r3, #25
 8008d60:	2201      	movs	r2, #1
 8008d62:	497b      	ldr	r1, [pc, #492]	; (8008f50 <HAL_I2C_Mem_Read+0x224>)
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fb85 	bl	8009474 <I2C_WaitOnFlagUntilTimeout>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008d70:	2302      	movs	r3, #2
 8008d72:	e1fb      	b.n	800916c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d101      	bne.n	8008d82 <HAL_I2C_Mem_Read+0x56>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	e1f4      	b.n	800916c <HAL_I2C_Mem_Read+0x440>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d007      	beq.n	8008da8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f042 0201 	orr.w	r2, r2, #1
 8008da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2222      	movs	r2, #34	; 0x22
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2240      	movs	r2, #64	; 0x40
 8008dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4a5b      	ldr	r2, [pc, #364]	; (8008f54 <HAL_I2C_Mem_Read+0x228>)
 8008de8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008dea:	88f8      	ldrh	r0, [r7, #6]
 8008dec:	893a      	ldrh	r2, [r7, #8]
 8008dee:	8979      	ldrh	r1, [r7, #10]
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	4603      	mov	r3, r0
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 fa52 	bl	80092a4 <I2C_RequestMemoryRead>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e1b0      	b.n	800916c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d113      	bne.n	8008e3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e12:	2300      	movs	r3, #0
 8008e14:	623b      	str	r3, [r7, #32]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	623b      	str	r3, [r7, #32]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	623b      	str	r3, [r7, #32]
 8008e26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e184      	b.n	8009144 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d11b      	bne.n	8008e7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e52:	2300      	movs	r3, #0
 8008e54:	61fb      	str	r3, [r7, #28]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	61fb      	str	r3, [r7, #28]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	e164      	b.n	8009144 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d11b      	bne.n	8008eba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	61bb      	str	r3, [r7, #24]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	61bb      	str	r3, [r7, #24]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	61bb      	str	r3, [r7, #24]
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	e144      	b.n	8009144 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eba:	2300      	movs	r3, #0
 8008ebc:	617b      	str	r3, [r7, #20]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	617b      	str	r3, [r7, #20]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008ed0:	e138      	b.n	8009144 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	f200 80f1 	bhi.w	80090be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d123      	bne.n	8008f2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f000 fc1b 	bl	8009724 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e139      	b.n	800916c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	691a      	ldr	r2, [r3, #16]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	b2d2      	uxtb	r2, r2
 8008f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f14:	3b01      	subs	r3, #1
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	3b01      	subs	r3, #1
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f2a:	e10b      	b.n	8009144 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d14e      	bne.n	8008fd2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4906      	ldr	r1, [pc, #24]	; (8008f58 <HAL_I2C_Mem_Read+0x22c>)
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 fa98 	bl	8009474 <I2C_WaitOnFlagUntilTimeout>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d008      	beq.n	8008f5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e10e      	b.n	800916c <HAL_I2C_Mem_Read+0x440>
 8008f4e:	bf00      	nop
 8008f50:	00100002 	.word	0x00100002
 8008f54:	ffff0000 	.word	0xffff0000
 8008f58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	691a      	ldr	r2, [r3, #16]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	b2d2      	uxtb	r2, r2
 8008f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	3b01      	subs	r3, #1
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	691a      	ldr	r2, [r3, #16]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	b2d2      	uxtb	r2, r2
 8008faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fd0:	e0b8      	b.n	8009144 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd8:	2200      	movs	r2, #0
 8008fda:	4966      	ldr	r1, [pc, #408]	; (8009174 <HAL_I2C_Mem_Read+0x448>)
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 fa49 	bl	8009474 <I2C_WaitOnFlagUntilTimeout>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e0bf      	b.n	800916c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	691a      	ldr	r2, [r3, #16]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	b2d2      	uxtb	r2, r2
 8009008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009018:	3b01      	subs	r3, #1
 800901a:	b29a      	uxth	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009024:	b29b      	uxth	r3, r3
 8009026:	3b01      	subs	r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009034:	2200      	movs	r2, #0
 8009036:	494f      	ldr	r1, [pc, #316]	; (8009174 <HAL_I2C_Mem_Read+0x448>)
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 fa1b 	bl	8009474 <I2C_WaitOnFlagUntilTimeout>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e091      	b.n	800916c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	691a      	ldr	r2, [r3, #16]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	b2d2      	uxtb	r2, r2
 8009064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009080:	b29b      	uxth	r3, r3
 8009082:	3b01      	subs	r3, #1
 8009084:	b29a      	uxth	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	691a      	ldr	r2, [r3, #16]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	b2d2      	uxtb	r2, r2
 8009096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a6:	3b01      	subs	r3, #1
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	3b01      	subs	r3, #1
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090bc:	e042      	b.n	8009144 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f000 fb2e 	bl	8009724 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e04c      	b.n	800916c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	691a      	ldr	r2, [r3, #16]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	b2d2      	uxtb	r2, r2
 80090de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ee:	3b01      	subs	r3, #1
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	3b01      	subs	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	f003 0304 	and.w	r3, r3, #4
 800910e:	2b04      	cmp	r3, #4
 8009110:	d118      	bne.n	8009144 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	b2d2      	uxtb	r2, r2
 800911e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800912e:	3b01      	subs	r3, #1
 8009130:	b29a      	uxth	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800913a:	b29b      	uxth	r3, r3
 800913c:	3b01      	subs	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009148:	2b00      	cmp	r3, #0
 800914a:	f47f aec2 	bne.w	8008ed2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2220      	movs	r2, #32
 8009152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	e000      	b.n	800916c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800916a:	2302      	movs	r3, #2
  }
}
 800916c:	4618      	mov	r0, r3
 800916e:	3728      	adds	r7, #40	; 0x28
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	00010004 	.word	0x00010004

08009178 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af02      	add	r7, sp, #8
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	4608      	mov	r0, r1
 8009182:	4611      	mov	r1, r2
 8009184:	461a      	mov	r2, r3
 8009186:	4603      	mov	r3, r0
 8009188:	817b      	strh	r3, [r7, #10]
 800918a:	460b      	mov	r3, r1
 800918c:	813b      	strh	r3, [r7, #8]
 800918e:	4613      	mov	r3, r2
 8009190:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f000 f960 	bl	8009474 <I2C_WaitOnFlagUntilTimeout>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00d      	beq.n	80091d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c8:	d103      	bne.n	80091d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e05f      	b.n	8009296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091d6:	897b      	ldrh	r3, [r7, #10]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	461a      	mov	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80091e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	6a3a      	ldr	r2, [r7, #32]
 80091ea:	492d      	ldr	r1, [pc, #180]	; (80092a0 <I2C_RequestMemoryWrite+0x128>)
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f998 	bl	8009522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e04c      	b.n	8009296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	617b      	str	r3, [r7, #20]
 8009210:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009214:	6a39      	ldr	r1, [r7, #32]
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 fa02 	bl	8009620 <I2C_WaitOnTXEFlagUntilTimeout>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00d      	beq.n	800923e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	2b04      	cmp	r3, #4
 8009228:	d107      	bne.n	800923a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009238:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e02b      	b.n	8009296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800923e:	88fb      	ldrh	r3, [r7, #6]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d105      	bne.n	8009250 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009244:	893b      	ldrh	r3, [r7, #8]
 8009246:	b2da      	uxtb	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	611a      	str	r2, [r3, #16]
 800924e:	e021      	b.n	8009294 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009250:	893b      	ldrh	r3, [r7, #8]
 8009252:	0a1b      	lsrs	r3, r3, #8
 8009254:	b29b      	uxth	r3, r3
 8009256:	b2da      	uxtb	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800925e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009260:	6a39      	ldr	r1, [r7, #32]
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 f9dc 	bl	8009620 <I2C_WaitOnTXEFlagUntilTimeout>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00d      	beq.n	800928a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009272:	2b04      	cmp	r3, #4
 8009274:	d107      	bne.n	8009286 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009284:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e005      	b.n	8009296 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800928a:	893b      	ldrh	r3, [r7, #8]
 800928c:	b2da      	uxtb	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	00010002 	.word	0x00010002

080092a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b088      	sub	sp, #32
 80092a8:	af02      	add	r7, sp, #8
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	4608      	mov	r0, r1
 80092ae:	4611      	mov	r1, r2
 80092b0:	461a      	mov	r2, r3
 80092b2:	4603      	mov	r3, r0
 80092b4:	817b      	strh	r3, [r7, #10]
 80092b6:	460b      	mov	r3, r1
 80092b8:	813b      	strh	r3, [r7, #8]
 80092ba:	4613      	mov	r3, r2
 80092bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80092cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 f8c2 	bl	8009474 <I2C_WaitOnFlagUntilTimeout>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00d      	beq.n	8009312 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009304:	d103      	bne.n	800930e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800930c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e0aa      	b.n	8009468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009312:	897b      	ldrh	r3, [r7, #10]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	461a      	mov	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009320:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	6a3a      	ldr	r2, [r7, #32]
 8009326:	4952      	ldr	r1, [pc, #328]	; (8009470 <I2C_RequestMemoryRead+0x1cc>)
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f8fa 	bl	8009522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e097      	b.n	8009468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009338:	2300      	movs	r3, #0
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800934e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009350:	6a39      	ldr	r1, [r7, #32]
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 f964 	bl	8009620 <I2C_WaitOnTXEFlagUntilTimeout>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00d      	beq.n	800937a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009362:	2b04      	cmp	r3, #4
 8009364:	d107      	bne.n	8009376 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009374:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	e076      	b.n	8009468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800937a:	88fb      	ldrh	r3, [r7, #6]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d105      	bne.n	800938c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009380:	893b      	ldrh	r3, [r7, #8]
 8009382:	b2da      	uxtb	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	611a      	str	r2, [r3, #16]
 800938a:	e021      	b.n	80093d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800938c:	893b      	ldrh	r3, [r7, #8]
 800938e:	0a1b      	lsrs	r3, r3, #8
 8009390:	b29b      	uxth	r3, r3
 8009392:	b2da      	uxtb	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800939a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800939c:	6a39      	ldr	r1, [r7, #32]
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 f93e 	bl	8009620 <I2C_WaitOnTXEFlagUntilTimeout>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00d      	beq.n	80093c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d107      	bne.n	80093c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e050      	b.n	8009468 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093c6:	893b      	ldrh	r3, [r7, #8]
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d2:	6a39      	ldr	r1, [r7, #32]
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 f923 	bl	8009620 <I2C_WaitOnTXEFlagUntilTimeout>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00d      	beq.n	80093fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d107      	bne.n	80093f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e035      	b.n	8009468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800940a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	2200      	movs	r2, #0
 8009414:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 f82b 	bl	8009474 <I2C_WaitOnFlagUntilTimeout>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00d      	beq.n	8009440 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009432:	d103      	bne.n	800943c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800943a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e013      	b.n	8009468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009440:	897b      	ldrh	r3, [r7, #10]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	f043 0301 	orr.w	r3, r3, #1
 8009448:	b2da      	uxtb	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	6a3a      	ldr	r2, [r7, #32]
 8009454:	4906      	ldr	r1, [pc, #24]	; (8009470 <I2C_RequestMemoryRead+0x1cc>)
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 f863 	bl	8009522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e000      	b.n	8009468 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3718      	adds	r7, #24
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	00010002 	.word	0x00010002

08009474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	4613      	mov	r3, r2
 8009482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009484:	e025      	b.n	80094d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948c:	d021      	beq.n	80094d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800948e:	f7fe faaf 	bl	80079f0 <HAL_GetTick>
 8009492:	4602      	mov	r2, r0
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d302      	bcc.n	80094a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d116      	bne.n	80094d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	f043 0220 	orr.w	r2, r3, #32
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e023      	b.n	800951a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	0c1b      	lsrs	r3, r3, #16
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d10d      	bne.n	80094f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	43da      	mvns	r2, r3
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	4013      	ands	r3, r2
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	bf0c      	ite	eq
 80094ee:	2301      	moveq	r3, #1
 80094f0:	2300      	movne	r3, #0
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	461a      	mov	r2, r3
 80094f6:	e00c      	b.n	8009512 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	43da      	mvns	r2, r3
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	4013      	ands	r3, r2
 8009504:	b29b      	uxth	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	bf0c      	ite	eq
 800950a:	2301      	moveq	r3, #1
 800950c:	2300      	movne	r3, #0
 800950e:	b2db      	uxtb	r3, r3
 8009510:	461a      	mov	r2, r3
 8009512:	79fb      	ldrb	r3, [r7, #7]
 8009514:	429a      	cmp	r2, r3
 8009516:	d0b6      	beq.n	8009486 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	60f8      	str	r0, [r7, #12]
 800952a:	60b9      	str	r1, [r7, #8]
 800952c:	607a      	str	r2, [r7, #4]
 800952e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009530:	e051      	b.n	80095d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800953c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009540:	d123      	bne.n	800958a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009550:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800955a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2220      	movs	r2, #32
 8009566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	f043 0204 	orr.w	r2, r3, #4
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e046      	b.n	8009618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009590:	d021      	beq.n	80095d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009592:	f7fe fa2d 	bl	80079f0 <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d302      	bcc.n	80095a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d116      	bne.n	80095d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2220      	movs	r2, #32
 80095b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	f043 0220 	orr.w	r2, r3, #32
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e020      	b.n	8009618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	0c1b      	lsrs	r3, r3, #16
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d10c      	bne.n	80095fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	43da      	mvns	r2, r3
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	4013      	ands	r3, r2
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bf14      	ite	ne
 80095f2:	2301      	movne	r3, #1
 80095f4:	2300      	moveq	r3, #0
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	e00b      	b.n	8009612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	43da      	mvns	r2, r3
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	4013      	ands	r3, r2
 8009606:	b29b      	uxth	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	bf14      	ite	ne
 800960c:	2301      	movne	r3, #1
 800960e:	2300      	moveq	r3, #0
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d18d      	bne.n	8009532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800962c:	e02d      	b.n	800968a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 f8ce 	bl	80097d0 <I2C_IsAcknowledgeFailed>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e02d      	b.n	800969a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009644:	d021      	beq.n	800968a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009646:	f7fe f9d3 	bl	80079f0 <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	429a      	cmp	r2, r3
 8009654:	d302      	bcc.n	800965c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d116      	bne.n	800968a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2220      	movs	r2, #32
 8009666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	f043 0220 	orr.w	r2, r3, #32
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e007      	b.n	800969a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009694:	2b80      	cmp	r3, #128	; 0x80
 8009696:	d1ca      	bne.n	800962e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	60b9      	str	r1, [r7, #8]
 80096ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096ae:	e02d      	b.n	800970c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 f88d 	bl	80097d0 <I2C_IsAcknowledgeFailed>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e02d      	b.n	800971c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c6:	d021      	beq.n	800970c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096c8:	f7fe f992 	bl	80079f0 <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d302      	bcc.n	80096de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d116      	bne.n	800970c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2220      	movs	r2, #32
 80096e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f8:	f043 0220 	orr.w	r2, r3, #32
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e007      	b.n	800971c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	f003 0304 	and.w	r3, r3, #4
 8009716:	2b04      	cmp	r3, #4
 8009718:	d1ca      	bne.n	80096b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009730:	e042      	b.n	80097b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	f003 0310 	and.w	r3, r3, #16
 800973c:	2b10      	cmp	r3, #16
 800973e:	d119      	bne.n	8009774 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f06f 0210 	mvn.w	r2, #16
 8009748:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2220      	movs	r2, #32
 8009754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e029      	b.n	80097c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009774:	f7fe f93c 	bl	80079f0 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	429a      	cmp	r2, r3
 8009782:	d302      	bcc.n	800978a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d116      	bne.n	80097b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2220      	movs	r2, #32
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a4:	f043 0220 	orr.w	r2, r3, #32
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e007      	b.n	80097c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c2:	2b40      	cmp	r3, #64	; 0x40
 80097c4:	d1b5      	bne.n	8009732 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e6:	d11b      	bne.n	8009820 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80097f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980c:	f043 0204 	orr.w	r2, r3, #4
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e000      	b.n	8009822 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800982e:	b480      	push	{r7}
 8009830:	b083      	sub	sp, #12
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b20      	cmp	r3, #32
 8009842:	d129      	bne.n	8009898 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2224      	movs	r2, #36	; 0x24
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f022 0201 	bic.w	r2, r2, #1
 800985a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f022 0210 	bic.w	r2, r2, #16
 800986a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	430a      	orrs	r2, r1
 800987a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f042 0201 	orr.w	r2, r2, #1
 800988a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2220      	movs	r2, #32
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	e000      	b.n	800989a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009898:	2302      	movs	r3, #2
  }
}
 800989a:	4618      	mov	r0, r3
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b085      	sub	sp, #20
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b20      	cmp	r3, #32
 80098be:	d12a      	bne.n	8009916 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2224      	movs	r2, #36	; 0x24
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f022 0201 	bic.w	r2, r2, #1
 80098d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80098e0:	89fb      	ldrh	r3, [r7, #14]
 80098e2:	f023 030f 	bic.w	r3, r3, #15
 80098e6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	89fb      	ldrh	r3, [r7, #14]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	89fa      	ldrh	r2, [r7, #14]
 80098f8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0201 	orr.w	r2, r2, #1
 8009908:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2220      	movs	r2, #32
 800990e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	e000      	b.n	8009918 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009916:	2302      	movs	r3, #2
  }
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e267      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d075      	beq.n	8009a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009942:	4b88      	ldr	r3, [pc, #544]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	f003 030c 	and.w	r3, r3, #12
 800994a:	2b04      	cmp	r3, #4
 800994c:	d00c      	beq.n	8009968 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800994e:	4b85      	ldr	r3, [pc, #532]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009956:	2b08      	cmp	r3, #8
 8009958:	d112      	bne.n	8009980 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800995a:	4b82      	ldr	r3, [pc, #520]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009966:	d10b      	bne.n	8009980 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009968:	4b7e      	ldr	r3, [pc, #504]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d05b      	beq.n	8009a2c <HAL_RCC_OscConfig+0x108>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d157      	bne.n	8009a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e242      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009988:	d106      	bne.n	8009998 <HAL_RCC_OscConfig+0x74>
 800998a:	4b76      	ldr	r3, [pc, #472]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a75      	ldr	r2, [pc, #468]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	e01d      	b.n	80099d4 <HAL_RCC_OscConfig+0xb0>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099a0:	d10c      	bne.n	80099bc <HAL_RCC_OscConfig+0x98>
 80099a2:	4b70      	ldr	r3, [pc, #448]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a6f      	ldr	r2, [pc, #444]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 80099a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	4b6d      	ldr	r3, [pc, #436]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a6c      	ldr	r2, [pc, #432]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 80099b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	e00b      	b.n	80099d4 <HAL_RCC_OscConfig+0xb0>
 80099bc:	4b69      	ldr	r3, [pc, #420]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a68      	ldr	r2, [pc, #416]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 80099c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	4b66      	ldr	r3, [pc, #408]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a65      	ldr	r2, [pc, #404]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 80099ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d013      	beq.n	8009a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099dc:	f7fe f808 	bl	80079f0 <HAL_GetTick>
 80099e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099e2:	e008      	b.n	80099f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099e4:	f7fe f804 	bl	80079f0 <HAL_GetTick>
 80099e8:	4602      	mov	r2, r0
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	2b64      	cmp	r3, #100	; 0x64
 80099f0:	d901      	bls.n	80099f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80099f2:	2303      	movs	r3, #3
 80099f4:	e207      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099f6:	4b5b      	ldr	r3, [pc, #364]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0f0      	beq.n	80099e4 <HAL_RCC_OscConfig+0xc0>
 8009a02:	e014      	b.n	8009a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a04:	f7fd fff4 	bl	80079f0 <HAL_GetTick>
 8009a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a0a:	e008      	b.n	8009a1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a0c:	f7fd fff0 	bl	80079f0 <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	2b64      	cmp	r3, #100	; 0x64
 8009a18:	d901      	bls.n	8009a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e1f3      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a1e:	4b51      	ldr	r3, [pc, #324]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1f0      	bne.n	8009a0c <HAL_RCC_OscConfig+0xe8>
 8009a2a:	e000      	b.n	8009a2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d063      	beq.n	8009b02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a3a:	4b4a      	ldr	r3, [pc, #296]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f003 030c 	and.w	r3, r3, #12
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00b      	beq.n	8009a5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a46:	4b47      	ldr	r3, [pc, #284]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a4e:	2b08      	cmp	r3, #8
 8009a50:	d11c      	bne.n	8009a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a52:	4b44      	ldr	r3, [pc, #272]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d116      	bne.n	8009a8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a5e:	4b41      	ldr	r3, [pc, #260]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0302 	and.w	r3, r3, #2
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d005      	beq.n	8009a76 <HAL_RCC_OscConfig+0x152>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d001      	beq.n	8009a76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e1c7      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a76:	4b3b      	ldr	r3, [pc, #236]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	4937      	ldr	r1, [pc, #220]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a8a:	e03a      	b.n	8009b02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d020      	beq.n	8009ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a94:	4b34      	ldr	r3, [pc, #208]	; (8009b68 <HAL_RCC_OscConfig+0x244>)
 8009a96:	2201      	movs	r2, #1
 8009a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a9a:	f7fd ffa9 	bl	80079f0 <HAL_GetTick>
 8009a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009aa0:	e008      	b.n	8009ab4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009aa2:	f7fd ffa5 	bl	80079f0 <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d901      	bls.n	8009ab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e1a8      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ab4:	4b2b      	ldr	r3, [pc, #172]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0302 	and.w	r3, r3, #2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0f0      	beq.n	8009aa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ac0:	4b28      	ldr	r3, [pc, #160]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	00db      	lsls	r3, r3, #3
 8009ace:	4925      	ldr	r1, [pc, #148]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	600b      	str	r3, [r1, #0]
 8009ad4:	e015      	b.n	8009b02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ad6:	4b24      	ldr	r3, [pc, #144]	; (8009b68 <HAL_RCC_OscConfig+0x244>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009adc:	f7fd ff88 	bl	80079f0 <HAL_GetTick>
 8009ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ae2:	e008      	b.n	8009af6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ae4:	f7fd ff84 	bl	80079f0 <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d901      	bls.n	8009af6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e187      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009af6:	4b1b      	ldr	r3, [pc, #108]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1f0      	bne.n	8009ae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0308 	and.w	r3, r3, #8
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d036      	beq.n	8009b7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d016      	beq.n	8009b44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b16:	4b15      	ldr	r3, [pc, #84]	; (8009b6c <HAL_RCC_OscConfig+0x248>)
 8009b18:	2201      	movs	r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b1c:	f7fd ff68 	bl	80079f0 <HAL_GetTick>
 8009b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b22:	e008      	b.n	8009b36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b24:	f7fd ff64 	bl	80079f0 <HAL_GetTick>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d901      	bls.n	8009b36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e167      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b36:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <HAL_RCC_OscConfig+0x240>)
 8009b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b3a:	f003 0302 	and.w	r3, r3, #2
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0f0      	beq.n	8009b24 <HAL_RCC_OscConfig+0x200>
 8009b42:	e01b      	b.n	8009b7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b44:	4b09      	ldr	r3, [pc, #36]	; (8009b6c <HAL_RCC_OscConfig+0x248>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b4a:	f7fd ff51 	bl	80079f0 <HAL_GetTick>
 8009b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b50:	e00e      	b.n	8009b70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b52:	f7fd ff4d 	bl	80079f0 <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d907      	bls.n	8009b70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009b60:	2303      	movs	r3, #3
 8009b62:	e150      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
 8009b64:	40023800 	.word	0x40023800
 8009b68:	42470000 	.word	0x42470000
 8009b6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b70:	4b88      	ldr	r3, [pc, #544]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b74:	f003 0302 	and.w	r3, r3, #2
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1ea      	bne.n	8009b52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 8097 	beq.w	8009cb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b8e:	4b81      	ldr	r3, [pc, #516]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10f      	bne.n	8009bba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60bb      	str	r3, [r7, #8]
 8009b9e:	4b7d      	ldr	r3, [pc, #500]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba2:	4a7c      	ldr	r2, [pc, #496]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8009baa:	4b7a      	ldr	r3, [pc, #488]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bb2:	60bb      	str	r3, [r7, #8]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bba:	4b77      	ldr	r3, [pc, #476]	; (8009d98 <HAL_RCC_OscConfig+0x474>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d118      	bne.n	8009bf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009bc6:	4b74      	ldr	r3, [pc, #464]	; (8009d98 <HAL_RCC_OscConfig+0x474>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a73      	ldr	r2, [pc, #460]	; (8009d98 <HAL_RCC_OscConfig+0x474>)
 8009bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bd2:	f7fd ff0d 	bl	80079f0 <HAL_GetTick>
 8009bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bd8:	e008      	b.n	8009bec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bda:	f7fd ff09 	bl	80079f0 <HAL_GetTick>
 8009bde:	4602      	mov	r2, r0
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d901      	bls.n	8009bec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e10c      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bec:	4b6a      	ldr	r3, [pc, #424]	; (8009d98 <HAL_RCC_OscConfig+0x474>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d0f0      	beq.n	8009bda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d106      	bne.n	8009c0e <HAL_RCC_OscConfig+0x2ea>
 8009c00:	4b64      	ldr	r3, [pc, #400]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c04:	4a63      	ldr	r2, [pc, #396]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c06:	f043 0301 	orr.w	r3, r3, #1
 8009c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c0c:	e01c      	b.n	8009c48 <HAL_RCC_OscConfig+0x324>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	2b05      	cmp	r3, #5
 8009c14:	d10c      	bne.n	8009c30 <HAL_RCC_OscConfig+0x30c>
 8009c16:	4b5f      	ldr	r3, [pc, #380]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1a:	4a5e      	ldr	r2, [pc, #376]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c1c:	f043 0304 	orr.w	r3, r3, #4
 8009c20:	6713      	str	r3, [r2, #112]	; 0x70
 8009c22:	4b5c      	ldr	r3, [pc, #368]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c26:	4a5b      	ldr	r2, [pc, #364]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c28:	f043 0301 	orr.w	r3, r3, #1
 8009c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c2e:	e00b      	b.n	8009c48 <HAL_RCC_OscConfig+0x324>
 8009c30:	4b58      	ldr	r3, [pc, #352]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c34:	4a57      	ldr	r2, [pc, #348]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c36:	f023 0301 	bic.w	r3, r3, #1
 8009c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c3c:	4b55      	ldr	r3, [pc, #340]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c40:	4a54      	ldr	r2, [pc, #336]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c42:	f023 0304 	bic.w	r3, r3, #4
 8009c46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d015      	beq.n	8009c7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c50:	f7fd fece 	bl	80079f0 <HAL_GetTick>
 8009c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c56:	e00a      	b.n	8009c6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c58:	f7fd feca 	bl	80079f0 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d901      	bls.n	8009c6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e0cb      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c6e:	4b49      	ldr	r3, [pc, #292]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d0ee      	beq.n	8009c58 <HAL_RCC_OscConfig+0x334>
 8009c7a:	e014      	b.n	8009ca6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c7c:	f7fd feb8 	bl	80079f0 <HAL_GetTick>
 8009c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c82:	e00a      	b.n	8009c9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c84:	f7fd feb4 	bl	80079f0 <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d901      	bls.n	8009c9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e0b5      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c9a:	4b3e      	ldr	r3, [pc, #248]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9e:	f003 0302 	and.w	r3, r3, #2
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1ee      	bne.n	8009c84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d105      	bne.n	8009cb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cac:	4b39      	ldr	r3, [pc, #228]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb0:	4a38      	ldr	r2, [pc, #224]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	699b      	ldr	r3, [r3, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 80a1 	beq.w	8009e04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009cc2:	4b34      	ldr	r3, [pc, #208]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f003 030c 	and.w	r3, r3, #12
 8009cca:	2b08      	cmp	r3, #8
 8009ccc:	d05c      	beq.n	8009d88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d141      	bne.n	8009d5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cd6:	4b31      	ldr	r3, [pc, #196]	; (8009d9c <HAL_RCC_OscConfig+0x478>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cdc:	f7fd fe88 	bl	80079f0 <HAL_GetTick>
 8009ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ce2:	e008      	b.n	8009cf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ce4:	f7fd fe84 	bl	80079f0 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e087      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cf6:	4b27      	ldr	r3, [pc, #156]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1f0      	bne.n	8009ce4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	69da      	ldr	r2, [r3, #28]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d10:	019b      	lsls	r3, r3, #6
 8009d12:	431a      	orrs	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d18:	085b      	lsrs	r3, r3, #1
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	041b      	lsls	r3, r3, #16
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d24:	061b      	lsls	r3, r3, #24
 8009d26:	491b      	ldr	r1, [pc, #108]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d2c:	4b1b      	ldr	r3, [pc, #108]	; (8009d9c <HAL_RCC_OscConfig+0x478>)
 8009d2e:	2201      	movs	r2, #1
 8009d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d32:	f7fd fe5d 	bl	80079f0 <HAL_GetTick>
 8009d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d38:	e008      	b.n	8009d4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d3a:	f7fd fe59 	bl	80079f0 <HAL_GetTick>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d901      	bls.n	8009d4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e05c      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d4c:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0f0      	beq.n	8009d3a <HAL_RCC_OscConfig+0x416>
 8009d58:	e054      	b.n	8009e04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d5a:	4b10      	ldr	r3, [pc, #64]	; (8009d9c <HAL_RCC_OscConfig+0x478>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d60:	f7fd fe46 	bl	80079f0 <HAL_GetTick>
 8009d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d66:	e008      	b.n	8009d7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d68:	f7fd fe42 	bl	80079f0 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d901      	bls.n	8009d7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e045      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d7a:	4b06      	ldr	r3, [pc, #24]	; (8009d94 <HAL_RCC_OscConfig+0x470>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1f0      	bne.n	8009d68 <HAL_RCC_OscConfig+0x444>
 8009d86:	e03d      	b.n	8009e04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d107      	bne.n	8009da0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e038      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
 8009d94:	40023800 	.word	0x40023800
 8009d98:	40007000 	.word	0x40007000
 8009d9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009da0:	4b1b      	ldr	r3, [pc, #108]	; (8009e10 <HAL_RCC_OscConfig+0x4ec>)
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d028      	beq.n	8009e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d121      	bne.n	8009e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d11a      	bne.n	8009e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009dd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d111      	bne.n	8009e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	3b01      	subs	r3, #1
 8009dea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d107      	bne.n	8009e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d001      	beq.n	8009e04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e000      	b.n	8009e06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3718      	adds	r7, #24
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	40023800 	.word	0x40023800

08009e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e0cc      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e28:	4b68      	ldr	r3, [pc, #416]	; (8009fcc <HAL_RCC_ClockConfig+0x1b8>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 030f 	and.w	r3, r3, #15
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d90c      	bls.n	8009e50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e36:	4b65      	ldr	r3, [pc, #404]	; (8009fcc <HAL_RCC_ClockConfig+0x1b8>)
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	b2d2      	uxtb	r2, r2
 8009e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e3e:	4b63      	ldr	r3, [pc, #396]	; (8009fcc <HAL_RCC_ClockConfig+0x1b8>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 030f 	and.w	r3, r3, #15
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d001      	beq.n	8009e50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e0b8      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 0302 	and.w	r3, r3, #2
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d020      	beq.n	8009e9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d005      	beq.n	8009e74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e68:	4b59      	ldr	r3, [pc, #356]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	4a58      	ldr	r2, [pc, #352]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009e72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0308 	and.w	r3, r3, #8
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d005      	beq.n	8009e8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e80:	4b53      	ldr	r3, [pc, #332]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	4a52      	ldr	r2, [pc, #328]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009e8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e8c:	4b50      	ldr	r3, [pc, #320]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	494d      	ldr	r1, [pc, #308]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d044      	beq.n	8009f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d107      	bne.n	8009ec2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009eb2:	4b47      	ldr	r3, [pc, #284]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d119      	bne.n	8009ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e07f      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d003      	beq.n	8009ed2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ece:	2b03      	cmp	r3, #3
 8009ed0:	d107      	bne.n	8009ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ed2:	4b3f      	ldr	r3, [pc, #252]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d109      	bne.n	8009ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e06f      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ee2:	4b3b      	ldr	r3, [pc, #236]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0302 	and.w	r3, r3, #2
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e067      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ef2:	4b37      	ldr	r3, [pc, #220]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f023 0203 	bic.w	r2, r3, #3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	4934      	ldr	r1, [pc, #208]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f00:	4313      	orrs	r3, r2
 8009f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009f04:	f7fd fd74 	bl	80079f0 <HAL_GetTick>
 8009f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f0a:	e00a      	b.n	8009f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f0c:	f7fd fd70 	bl	80079f0 <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d901      	bls.n	8009f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	e04f      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f22:	4b2b      	ldr	r3, [pc, #172]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f003 020c 	and.w	r2, r3, #12
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d1eb      	bne.n	8009f0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f34:	4b25      	ldr	r3, [pc, #148]	; (8009fcc <HAL_RCC_ClockConfig+0x1b8>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 030f 	and.w	r3, r3, #15
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d20c      	bcs.n	8009f5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f42:	4b22      	ldr	r3, [pc, #136]	; (8009fcc <HAL_RCC_ClockConfig+0x1b8>)
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	b2d2      	uxtb	r2, r2
 8009f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f4a:	4b20      	ldr	r3, [pc, #128]	; (8009fcc <HAL_RCC_ClockConfig+0x1b8>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 030f 	and.w	r3, r3, #15
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d001      	beq.n	8009f5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e032      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d008      	beq.n	8009f7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f68:	4b19      	ldr	r3, [pc, #100]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	4916      	ldr	r1, [pc, #88]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 0308 	and.w	r3, r3, #8
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d009      	beq.n	8009f9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f86:	4b12      	ldr	r3, [pc, #72]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	00db      	lsls	r3, r3, #3
 8009f94:	490e      	ldr	r1, [pc, #56]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009f9a:	f000 f821 	bl	8009fe0 <HAL_RCC_GetSysClockFreq>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	4b0b      	ldr	r3, [pc, #44]	; (8009fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	091b      	lsrs	r3, r3, #4
 8009fa6:	f003 030f 	and.w	r3, r3, #15
 8009faa:	490a      	ldr	r1, [pc, #40]	; (8009fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8009fac:	5ccb      	ldrb	r3, [r1, r3]
 8009fae:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb2:	4a09      	ldr	r2, [pc, #36]	; (8009fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8009fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009fb6:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <HAL_RCC_ClockConfig+0x1c8>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fd fcd4 	bl	8007968 <HAL_InitTick>

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	40023c00 	.word	0x40023c00
 8009fd0:	40023800 	.word	0x40023800
 8009fd4:	080155b4 	.word	0x080155b4
 8009fd8:	20000180 	.word	0x20000180
 8009fdc:	200002b8 	.word	0x200002b8

08009fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fe4:	b094      	sub	sp, #80	; 0x50
 8009fe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	647b      	str	r3, [r7, #68]	; 0x44
 8009fec:	2300      	movs	r3, #0
 8009fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ff8:	4b79      	ldr	r3, [pc, #484]	; (800a1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f003 030c 	and.w	r3, r3, #12
 800a000:	2b08      	cmp	r3, #8
 800a002:	d00d      	beq.n	800a020 <HAL_RCC_GetSysClockFreq+0x40>
 800a004:	2b08      	cmp	r3, #8
 800a006:	f200 80e1 	bhi.w	800a1cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <HAL_RCC_GetSysClockFreq+0x34>
 800a00e:	2b04      	cmp	r3, #4
 800a010:	d003      	beq.n	800a01a <HAL_RCC_GetSysClockFreq+0x3a>
 800a012:	e0db      	b.n	800a1cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a014:	4b73      	ldr	r3, [pc, #460]	; (800a1e4 <HAL_RCC_GetSysClockFreq+0x204>)
 800a016:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a018:	e0db      	b.n	800a1d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a01a:	4b73      	ldr	r3, [pc, #460]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800a01c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a01e:	e0d8      	b.n	800a1d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a020:	4b6f      	ldr	r3, [pc, #444]	; (800a1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a028:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a02a:	4b6d      	ldr	r3, [pc, #436]	; (800a1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d063      	beq.n	800a0fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a036:	4b6a      	ldr	r3, [pc, #424]	; (800a1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	099b      	lsrs	r3, r3, #6
 800a03c:	2200      	movs	r2, #0
 800a03e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a040:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a048:	633b      	str	r3, [r7, #48]	; 0x30
 800a04a:	2300      	movs	r3, #0
 800a04c:	637b      	str	r3, [r7, #52]	; 0x34
 800a04e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a052:	4622      	mov	r2, r4
 800a054:	462b      	mov	r3, r5
 800a056:	f04f 0000 	mov.w	r0, #0
 800a05a:	f04f 0100 	mov.w	r1, #0
 800a05e:	0159      	lsls	r1, r3, #5
 800a060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a064:	0150      	lsls	r0, r2, #5
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4621      	mov	r1, r4
 800a06c:	1a51      	subs	r1, r2, r1
 800a06e:	6139      	str	r1, [r7, #16]
 800a070:	4629      	mov	r1, r5
 800a072:	eb63 0301 	sbc.w	r3, r3, r1
 800a076:	617b      	str	r3, [r7, #20]
 800a078:	f04f 0200 	mov.w	r2, #0
 800a07c:	f04f 0300 	mov.w	r3, #0
 800a080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a084:	4659      	mov	r1, fp
 800a086:	018b      	lsls	r3, r1, #6
 800a088:	4651      	mov	r1, sl
 800a08a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a08e:	4651      	mov	r1, sl
 800a090:	018a      	lsls	r2, r1, #6
 800a092:	4651      	mov	r1, sl
 800a094:	ebb2 0801 	subs.w	r8, r2, r1
 800a098:	4659      	mov	r1, fp
 800a09a:	eb63 0901 	sbc.w	r9, r3, r1
 800a09e:	f04f 0200 	mov.w	r2, #0
 800a0a2:	f04f 0300 	mov.w	r3, #0
 800a0a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a0aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a0ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a0b2:	4690      	mov	r8, r2
 800a0b4:	4699      	mov	r9, r3
 800a0b6:	4623      	mov	r3, r4
 800a0b8:	eb18 0303 	adds.w	r3, r8, r3
 800a0bc:	60bb      	str	r3, [r7, #8]
 800a0be:	462b      	mov	r3, r5
 800a0c0:	eb49 0303 	adc.w	r3, r9, r3
 800a0c4:	60fb      	str	r3, [r7, #12]
 800a0c6:	f04f 0200 	mov.w	r2, #0
 800a0ca:	f04f 0300 	mov.w	r3, #0
 800a0ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	024b      	lsls	r3, r1, #9
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a0dc:	4621      	mov	r1, r4
 800a0de:	024a      	lsls	r2, r1, #9
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0f0:	f7f6 fdc4 	bl	8000c7c <__aeabi_uldivmod>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0fc:	e058      	b.n	800a1b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0fe:	4b38      	ldr	r3, [pc, #224]	; (800a1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	099b      	lsrs	r3, r3, #6
 800a104:	2200      	movs	r2, #0
 800a106:	4618      	mov	r0, r3
 800a108:	4611      	mov	r1, r2
 800a10a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a10e:	623b      	str	r3, [r7, #32]
 800a110:	2300      	movs	r3, #0
 800a112:	627b      	str	r3, [r7, #36]	; 0x24
 800a114:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a118:	4642      	mov	r2, r8
 800a11a:	464b      	mov	r3, r9
 800a11c:	f04f 0000 	mov.w	r0, #0
 800a120:	f04f 0100 	mov.w	r1, #0
 800a124:	0159      	lsls	r1, r3, #5
 800a126:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a12a:	0150      	lsls	r0, r2, #5
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	4641      	mov	r1, r8
 800a132:	ebb2 0a01 	subs.w	sl, r2, r1
 800a136:	4649      	mov	r1, r9
 800a138:	eb63 0b01 	sbc.w	fp, r3, r1
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	f04f 0300 	mov.w	r3, #0
 800a144:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a148:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a14c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a150:	ebb2 040a 	subs.w	r4, r2, sl
 800a154:	eb63 050b 	sbc.w	r5, r3, fp
 800a158:	f04f 0200 	mov.w	r2, #0
 800a15c:	f04f 0300 	mov.w	r3, #0
 800a160:	00eb      	lsls	r3, r5, #3
 800a162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a166:	00e2      	lsls	r2, r4, #3
 800a168:	4614      	mov	r4, r2
 800a16a:	461d      	mov	r5, r3
 800a16c:	4643      	mov	r3, r8
 800a16e:	18e3      	adds	r3, r4, r3
 800a170:	603b      	str	r3, [r7, #0]
 800a172:	464b      	mov	r3, r9
 800a174:	eb45 0303 	adc.w	r3, r5, r3
 800a178:	607b      	str	r3, [r7, #4]
 800a17a:	f04f 0200 	mov.w	r2, #0
 800a17e:	f04f 0300 	mov.w	r3, #0
 800a182:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a186:	4629      	mov	r1, r5
 800a188:	028b      	lsls	r3, r1, #10
 800a18a:	4621      	mov	r1, r4
 800a18c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a190:	4621      	mov	r1, r4
 800a192:	028a      	lsls	r2, r1, #10
 800a194:	4610      	mov	r0, r2
 800a196:	4619      	mov	r1, r3
 800a198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a19a:	2200      	movs	r2, #0
 800a19c:	61bb      	str	r3, [r7, #24]
 800a19e:	61fa      	str	r2, [r7, #28]
 800a1a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1a4:	f7f6 fd6a 	bl	8000c7c <__aeabi_uldivmod>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	0c1b      	lsrs	r3, r3, #16
 800a1b6:	f003 0303 	and.w	r3, r3, #3
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a1c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a1ca:	e002      	b.n	800a1d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <HAL_RCC_GetSysClockFreq+0x204>)
 800a1ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a1d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3750      	adds	r7, #80	; 0x50
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1de:	bf00      	nop
 800a1e0:	40023800 	.word	0x40023800
 800a1e4:	00f42400 	.word	0x00f42400
 800a1e8:	007a1200 	.word	0x007a1200

0800a1ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1f0:	4b03      	ldr	r3, [pc, #12]	; (800a200 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	20000180 	.word	0x20000180

0800a204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a208:	f7ff fff0 	bl	800a1ec <HAL_RCC_GetHCLKFreq>
 800a20c:	4602      	mov	r2, r0
 800a20e:	4b05      	ldr	r3, [pc, #20]	; (800a224 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	0a9b      	lsrs	r3, r3, #10
 800a214:	f003 0307 	and.w	r3, r3, #7
 800a218:	4903      	ldr	r1, [pc, #12]	; (800a228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a21a:	5ccb      	ldrb	r3, [r1, r3]
 800a21c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a220:	4618      	mov	r0, r3
 800a222:	bd80      	pop	{r7, pc}
 800a224:	40023800 	.word	0x40023800
 800a228:	080155c4 	.word	0x080155c4

0800a22c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a230:	f7ff ffdc 	bl	800a1ec <HAL_RCC_GetHCLKFreq>
 800a234:	4602      	mov	r2, r0
 800a236:	4b05      	ldr	r3, [pc, #20]	; (800a24c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	0b5b      	lsrs	r3, r3, #13
 800a23c:	f003 0307 	and.w	r3, r3, #7
 800a240:	4903      	ldr	r1, [pc, #12]	; (800a250 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a242:	5ccb      	ldrb	r3, [r1, r3]
 800a244:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a248:	4618      	mov	r0, r3
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	40023800 	.word	0x40023800
 800a250:	080155c4 	.word	0x080155c4

0800a254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a260:	2300      	movs	r3, #0
 800a262:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0301 	and.w	r3, r3, #1
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10b      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d105      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a284:	2b00      	cmp	r3, #0
 800a286:	d075      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a288:	4b91      	ldr	r3, [pc, #580]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a28e:	f7fd fbaf 	bl	80079f0 <HAL_GetTick>
 800a292:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a294:	e008      	b.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a296:	f7fd fbab 	bl	80079f0 <HAL_GetTick>
 800a29a:	4602      	mov	r2, r0
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d901      	bls.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e189      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a2a8:	4b8a      	ldr	r3, [pc, #552]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1f0      	bne.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d009      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	019a      	lsls	r2, r3, #6
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	071b      	lsls	r3, r3, #28
 800a2cc:	4981      	ldr	r1, [pc, #516]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 0302 	and.w	r3, r3, #2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d01f      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a2e0:	4b7c      	ldr	r3, [pc, #496]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2e6:	0f1b      	lsrs	r3, r3, #28
 800a2e8:	f003 0307 	and.w	r3, r3, #7
 800a2ec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	019a      	lsls	r2, r3, #6
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	061b      	lsls	r3, r3, #24
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	071b      	lsls	r3, r3, #28
 800a300:	4974      	ldr	r1, [pc, #464]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a302:	4313      	orrs	r3, r2
 800a304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a308:	4b72      	ldr	r3, [pc, #456]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a30a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a30e:	f023 021f 	bic.w	r2, r3, #31
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	3b01      	subs	r3, #1
 800a318:	496e      	ldr	r1, [pc, #440]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a31a:	4313      	orrs	r3, r2
 800a31c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00d      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	019a      	lsls	r2, r3, #6
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	061b      	lsls	r3, r3, #24
 800a338:	431a      	orrs	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	071b      	lsls	r3, r3, #28
 800a340:	4964      	ldr	r1, [pc, #400]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a342:	4313      	orrs	r3, r2
 800a344:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a348:	4b61      	ldr	r3, [pc, #388]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a34a:	2201      	movs	r2, #1
 800a34c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a34e:	f7fd fb4f 	bl	80079f0 <HAL_GetTick>
 800a352:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a354:	e008      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a356:	f7fd fb4b 	bl	80079f0 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	2b02      	cmp	r3, #2
 800a362:	d901      	bls.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e129      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a368:	4b5a      	ldr	r3, [pc, #360]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d0f0      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d105      	bne.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d079      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a38c:	4b52      	ldr	r3, [pc, #328]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a38e:	2200      	movs	r2, #0
 800a390:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a392:	f7fd fb2d 	bl	80079f0 <HAL_GetTick>
 800a396:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a398:	e008      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a39a:	f7fd fb29 	bl	80079f0 <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d901      	bls.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e107      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a3ac:	4b49      	ldr	r3, [pc, #292]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3b8:	d0ef      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0304 	and.w	r3, r3, #4
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d020      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a3c6:	4b43      	ldr	r3, [pc, #268]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3cc:	0f1b      	lsrs	r3, r3, #28
 800a3ce:	f003 0307 	and.w	r3, r3, #7
 800a3d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	019a      	lsls	r2, r3, #6
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	061b      	lsls	r3, r3, #24
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	071b      	lsls	r3, r3, #28
 800a3e6:	493b      	ldr	r1, [pc, #236]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a3ee:	4b39      	ldr	r3, [pc, #228]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	021b      	lsls	r3, r3, #8
 800a400:	4934      	ldr	r1, [pc, #208]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a402:	4313      	orrs	r3, r2
 800a404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 0308 	and.w	r3, r3, #8
 800a410:	2b00      	cmp	r3, #0
 800a412:	d01e      	beq.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a414:	4b2f      	ldr	r3, [pc, #188]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41a:	0e1b      	lsrs	r3, r3, #24
 800a41c:	f003 030f 	and.w	r3, r3, #15
 800a420:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	019a      	lsls	r2, r3, #6
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	061b      	lsls	r3, r3, #24
 800a42c:	431a      	orrs	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	071b      	lsls	r3, r3, #28
 800a434:	4927      	ldr	r1, [pc, #156]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a436:	4313      	orrs	r3, r2
 800a438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a43c:	4b25      	ldr	r3, [pc, #148]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a43e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a442:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44a:	4922      	ldr	r1, [pc, #136]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a44c:	4313      	orrs	r3, r2
 800a44e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a452:	4b21      	ldr	r3, [pc, #132]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a454:	2201      	movs	r2, #1
 800a456:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a458:	f7fd faca 	bl	80079f0 <HAL_GetTick>
 800a45c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a45e:	e008      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a460:	f7fd fac6 	bl	80079f0 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d901      	bls.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e0a4      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a472:	4b18      	ldr	r3, [pc, #96]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a47a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a47e:	d1ef      	bne.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0320 	and.w	r3, r3, #32
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 808b 	beq.w	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a48e:	2300      	movs	r3, #0
 800a490:	60fb      	str	r3, [r7, #12]
 800a492:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a496:	4a0f      	ldr	r2, [pc, #60]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a49c:	6413      	str	r3, [r2, #64]	; 0x40
 800a49e:	4b0d      	ldr	r3, [pc, #52]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4a6:	60fb      	str	r3, [r7, #12]
 800a4a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a4aa:	4b0c      	ldr	r3, [pc, #48]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a0b      	ldr	r2, [pc, #44]	; (800a4dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a4b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a4b6:	f7fd fa9b 	bl	80079f0 <HAL_GetTick>
 800a4ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a4bc:	e010      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a4be:	f7fd fa97 	bl	80079f0 <HAL_GetTick>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d909      	bls.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	e075      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a4d0:	42470068 	.word	0x42470068
 800a4d4:	40023800 	.word	0x40023800
 800a4d8:	42470070 	.word	0x42470070
 800a4dc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a4e0:	4b38      	ldr	r3, [pc, #224]	; (800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0e8      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a4ec:	4b36      	ldr	r3, [pc, #216]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d02f      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	429a      	cmp	r2, r3
 800a508:	d028      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a50a:	4b2f      	ldr	r3, [pc, #188]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a512:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a514:	4b2d      	ldr	r3, [pc, #180]	; (800a5cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a516:	2201      	movs	r2, #1
 800a518:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a51a:	4b2c      	ldr	r3, [pc, #176]	; (800a5cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a520:	4a29      	ldr	r2, [pc, #164]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a526:	4b28      	ldr	r3, [pc, #160]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d114      	bne.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a532:	f7fd fa5d 	bl	80079f0 <HAL_GetTick>
 800a536:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a538:	e00a      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a53a:	f7fd fa59 	bl	80079f0 <HAL_GetTick>
 800a53e:	4602      	mov	r2, r0
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	f241 3288 	movw	r2, #5000	; 0x1388
 800a548:	4293      	cmp	r3, r2
 800a54a:	d901      	bls.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e035      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a550:	4b1d      	ldr	r3, [pc, #116]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a554:	f003 0302 	and.w	r3, r3, #2
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d0ee      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a568:	d10d      	bne.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a56a:	4b17      	ldr	r3, [pc, #92]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a576:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a57a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a57e:	4912      	ldr	r1, [pc, #72]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a580:	4313      	orrs	r3, r2
 800a582:	608b      	str	r3, [r1, #8]
 800a584:	e005      	b.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800a586:	4b10      	ldr	r3, [pc, #64]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	4a0f      	ldr	r2, [pc, #60]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a58c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a590:	6093      	str	r3, [r2, #8]
 800a592:	4b0d      	ldr	r3, [pc, #52]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a594:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a59e:	490a      	ldr	r1, [pc, #40]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d004      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a5b6:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800a5b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	40007000 	.word	0x40007000
 800a5c8:	40023800 	.word	0x40023800
 800a5cc:	42470e40 	.word	0x42470e40
 800a5d0:	424711e0 	.word	0x424711e0

0800a5d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d101      	bne.n	800a5ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e066      	b.n	800a6b8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	7f5b      	ldrb	r3, [r3, #29]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d105      	bne.n	800a600 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7f9 f8bc 	bl	8003778 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2202      	movs	r2, #2
 800a604:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	22ca      	movs	r2, #202	; 0xca
 800a60c:	625a      	str	r2, [r3, #36]	; 0x24
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2253      	movs	r2, #83	; 0x53
 800a614:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 fa45 	bl	800aaa6 <RTC_EnterInitMode>
 800a61c:	4603      	mov	r3, r0
 800a61e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a620:	7bfb      	ldrb	r3, [r7, #15]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d12c      	bne.n	800a680 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	6812      	ldr	r2, [r2, #0]
 800a630:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a638:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6899      	ldr	r1, [r3, #8]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	431a      	orrs	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	431a      	orrs	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	68d2      	ldr	r2, [r2, #12]
 800a660:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6919      	ldr	r1, [r3, #16]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	041a      	lsls	r2, r3, #16
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fa4c 	bl	800ab14 <RTC_ExitInitMode>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a680:	7bfb      	ldrb	r3, [r7, #15]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d113      	bne.n	800a6ae <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a694:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	699a      	ldr	r2, [r3, #24]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	22ff      	movs	r2, #255	; 0xff
 800a6b4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	7f1b      	ldrb	r3, [r3, #28]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d101      	bne.n	800a6dc <HAL_RTC_SetTime+0x1c>
 800a6d8:	2302      	movs	r3, #2
 800a6da:	e087      	b.n	800a7ec <HAL_RTC_SetTime+0x12c>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d126      	bne.n	800a73c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d102      	bne.n	800a702 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2200      	movs	r2, #0
 800a700:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	4618      	mov	r0, r3
 800a708:	f000 fa29 	bl	800ab5e <RTC_ByteToBcd2>
 800a70c:	4603      	mov	r3, r0
 800a70e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	785b      	ldrb	r3, [r3, #1]
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fa22 	bl	800ab5e <RTC_ByteToBcd2>
 800a71a:	4603      	mov	r3, r0
 800a71c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a71e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	789b      	ldrb	r3, [r3, #2]
 800a724:	4618      	mov	r0, r3
 800a726:	f000 fa1a 	bl	800ab5e <RTC_ByteToBcd2>
 800a72a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a72c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	78db      	ldrb	r3, [r3, #3]
 800a734:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a736:	4313      	orrs	r3, r2
 800a738:	617b      	str	r3, [r7, #20]
 800a73a:	e018      	b.n	800a76e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a746:	2b00      	cmp	r3, #0
 800a748:	d102      	bne.n	800a750 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2200      	movs	r2, #0
 800a74e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	785b      	ldrb	r3, [r3, #1]
 800a75a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a75c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a762:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	78db      	ldrb	r3, [r3, #3]
 800a768:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a76a:	4313      	orrs	r3, r2
 800a76c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	22ca      	movs	r2, #202	; 0xca
 800a774:	625a      	str	r2, [r3, #36]	; 0x24
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2253      	movs	r2, #83	; 0x53
 800a77c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 f991 	bl	800aaa6 <RTC_EnterInitMode>
 800a784:	4603      	mov	r3, r0
 800a786:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a788:	7cfb      	ldrb	r3, [r7, #19]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d120      	bne.n	800a7d0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a798:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a79c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	689a      	ldr	r2, [r3, #8]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a7ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6899      	ldr	r1, [r3, #8]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	431a      	orrs	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 f9a4 	bl	800ab14 <RTC_ExitInitMode>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a7d0:	7cfb      	ldrb	r3, [r7, #19]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d102      	bne.n	800a7dc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	22ff      	movs	r2, #255	; 0xff
 800a7e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	771a      	strb	r2, [r3, #28]

  return status;
 800a7ea:	7cfb      	ldrb	r3, [r7, #19]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	371c      	adds	r7, #28
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd90      	pop	{r4, r7, pc}

0800a7f4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a800:	2300      	movs	r3, #0
 800a802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a826:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a82a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	0c1b      	lsrs	r3, r3, #16
 800a830:	b2db      	uxtb	r3, r3
 800a832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a836:	b2da      	uxtb	r2, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	0a1b      	lsrs	r3, r3, #8
 800a840:	b2db      	uxtb	r3, r3
 800a842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a846:	b2da      	uxtb	r2, r3
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a854:	b2da      	uxtb	r2, r3
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	0d9b      	lsrs	r3, r3, #22
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	b2da      	uxtb	r2, r3
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d11a      	bne.n	800a8a6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	4618      	mov	r0, r3
 800a876:	f000 f98f 	bl	800ab98 <RTC_Bcd2ToByte>
 800a87a:	4603      	mov	r3, r0
 800a87c:	461a      	mov	r2, r3
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	785b      	ldrb	r3, [r3, #1]
 800a886:	4618      	mov	r0, r3
 800a888:	f000 f986 	bl	800ab98 <RTC_Bcd2ToByte>
 800a88c:	4603      	mov	r3, r0
 800a88e:	461a      	mov	r2, r3
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	789b      	ldrb	r3, [r3, #2]
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 f97d 	bl	800ab98 <RTC_Bcd2ToByte>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a8b0:	b590      	push	{r4, r7, lr}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	7f1b      	ldrb	r3, [r3, #28]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d101      	bne.n	800a8cc <HAL_RTC_SetDate+0x1c>
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	e071      	b.n	800a9b0 <HAL_RTC_SetDate+0x100>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2202      	movs	r2, #2
 800a8d6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10e      	bne.n	800a8fc <HAL_RTC_SetDate+0x4c>
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	785b      	ldrb	r3, [r3, #1]
 800a8e2:	f003 0310 	and.w	r3, r3, #16
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d008      	beq.n	800a8fc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	785b      	ldrb	r3, [r3, #1]
 800a8ee:	f023 0310 	bic.w	r3, r3, #16
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	330a      	adds	r3, #10
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d11c      	bne.n	800a93c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	78db      	ldrb	r3, [r3, #3]
 800a906:	4618      	mov	r0, r3
 800a908:	f000 f929 	bl	800ab5e <RTC_ByteToBcd2>
 800a90c:	4603      	mov	r3, r0
 800a90e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	785b      	ldrb	r3, [r3, #1]
 800a914:	4618      	mov	r0, r3
 800a916:	f000 f922 	bl	800ab5e <RTC_ByteToBcd2>
 800a91a:	4603      	mov	r3, r0
 800a91c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a91e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	789b      	ldrb	r3, [r3, #2]
 800a924:	4618      	mov	r0, r3
 800a926:	f000 f91a 	bl	800ab5e <RTC_ByteToBcd2>
 800a92a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a92c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a936:	4313      	orrs	r3, r2
 800a938:	617b      	str	r3, [r7, #20]
 800a93a:	e00e      	b.n	800a95a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	78db      	ldrb	r3, [r3, #3]
 800a940:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	785b      	ldrb	r3, [r3, #1]
 800a946:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a948:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a94e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a956:	4313      	orrs	r3, r2
 800a958:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	22ca      	movs	r2, #202	; 0xca
 800a960:	625a      	str	r2, [r3, #36]	; 0x24
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2253      	movs	r2, #83	; 0x53
 800a968:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f000 f89b 	bl	800aaa6 <RTC_EnterInitMode>
 800a970:	4603      	mov	r3, r0
 800a972:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a974:	7cfb      	ldrb	r3, [r7, #19]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10c      	bne.n	800a994 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a984:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a988:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f000 f8c2 	bl	800ab14 <RTC_ExitInitMode>
 800a990:	4603      	mov	r3, r0
 800a992:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a994:	7cfb      	ldrb	r3, [r7, #19]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d102      	bne.n	800a9a0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2201      	movs	r2, #1
 800a99e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	22ff      	movs	r2, #255	; 0xff
 800a9a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	771a      	strb	r2, [r3, #28]

  return status;
 800a9ae:	7cfb      	ldrb	r3, [r7, #19]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	371c      	adds	r7, #28
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd90      	pop	{r4, r7, pc}

0800a9b8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a9d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a9d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	0c1b      	lsrs	r3, r3, #16
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	0a1b      	lsrs	r3, r3, #8
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	f003 031f 	and.w	r3, r3, #31
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	0b5b      	lsrs	r3, r3, #13
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	f003 0307 	and.w	r3, r3, #7
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d11a      	bne.n	800aa4c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	78db      	ldrb	r3, [r3, #3]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 f8bc 	bl	800ab98 <RTC_Bcd2ToByte>
 800aa20:	4603      	mov	r3, r0
 800aa22:	461a      	mov	r2, r3
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	785b      	ldrb	r3, [r3, #1]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 f8b3 	bl	800ab98 <RTC_Bcd2ToByte>
 800aa32:	4603      	mov	r3, r0
 800aa34:	461a      	mov	r2, r3
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	789b      	ldrb	r3, [r3, #2]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 f8aa 	bl	800ab98 <RTC_Bcd2ToByte>
 800aa44:	4603      	mov	r3, r0
 800aa46:	461a      	mov	r2, r3
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3718      	adds	r7, #24
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b084      	sub	sp, #16
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68da      	ldr	r2, [r3, #12]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800aa70:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa72:	f7fc ffbd 	bl	80079f0 <HAL_GetTick>
 800aa76:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aa78:	e009      	b.n	800aa8e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aa7a:	f7fc ffb9 	bl	80079f0 <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa88:	d901      	bls.n	800aa8e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e007      	b.n	800aa9e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	f003 0320 	and.w	r3, r3, #32
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d0ee      	beq.n	800aa7a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d122      	bne.n	800ab0a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68da      	ldr	r2, [r3, #12]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aad2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aad4:	f7fc ff8c 	bl	80079f0 <HAL_GetTick>
 800aad8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800aada:	e00c      	b.n	800aaf6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aadc:	f7fc ff88 	bl	80079f0 <HAL_GetTick>
 800aae0:	4602      	mov	r2, r0
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aaea:	d904      	bls.n	800aaf6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2204      	movs	r2, #4
 800aaf0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d102      	bne.n	800ab0a <RTC_EnterInitMode+0x64>
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d1e8      	bne.n	800aadc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68da      	ldr	r2, [r3, #12]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab2e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10a      	bne.n	800ab54 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7ff ff89 	bl	800aa56 <HAL_RTC_WaitForSynchro>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d004      	beq.n	800ab54 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2204      	movs	r2, #4
 800ab4e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b085      	sub	sp, #20
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	4603      	mov	r3, r0
 800ab66:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800ab6c:	e005      	b.n	800ab7a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800ab6e:	7bfb      	ldrb	r3, [r7, #15]
 800ab70:	3301      	adds	r3, #1
 800ab72:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	3b0a      	subs	r3, #10
 800ab78:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800ab7a:	79fb      	ldrb	r3, [r7, #7]
 800ab7c:	2b09      	cmp	r3, #9
 800ab7e:	d8f6      	bhi.n	800ab6e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	011b      	lsls	r3, r3, #4
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	b2db      	uxtb	r3, r3
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	4603      	mov	r3, r0
 800aba0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800aba2:	2300      	movs	r3, #0
 800aba4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800aba6:	79fb      	ldrb	r3, [r7, #7]
 800aba8:	091b      	lsrs	r3, r3, #4
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	461a      	mov	r2, r3
 800abae:	0092      	lsls	r2, r2, #2
 800abb0:	4413      	add	r3, r2
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	f003 030f 	and.w	r3, r3, #15
 800abbc:	b2da      	uxtb	r2, r3
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
 800abc0:	4413      	add	r3, r2
 800abc2:	b2db      	uxtb	r3, r3
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e07b      	b.n	800acda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d108      	bne.n	800abfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abf2:	d009      	beq.n	800ac08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	61da      	str	r2, [r3, #28]
 800abfa:	e005      	b.n	800ac08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7f8 fe08 	bl	8003838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ac50:	431a      	orrs	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac5a:	431a      	orrs	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	f003 0302 	and.w	r3, r3, #2
 800ac64:	431a      	orrs	r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac78:	431a      	orrs	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac82:	431a      	orrs	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac8c:	ea42 0103 	orr.w	r1, r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	0c1b      	lsrs	r3, r3, #16
 800aca6:	f003 0104 	and.w	r1, r3, #4
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acae:	f003 0210 	and.w	r2, r3, #16
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	430a      	orrs	r2, r1
 800acb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	69da      	ldr	r2, [r3, #28]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800acc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b088      	sub	sp, #32
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	603b      	str	r3, [r7, #0]
 800acee:	4613      	mov	r3, r2
 800acf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d101      	bne.n	800ad04 <HAL_SPI_Transmit+0x22>
 800ad00:	2302      	movs	r3, #2
 800ad02:	e126      	b.n	800af52 <HAL_SPI_Transmit+0x270>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad0c:	f7fc fe70 	bl	80079f0 <HAL_GetTick>
 800ad10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ad12:	88fb      	ldrh	r3, [r7, #6]
 800ad14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d002      	beq.n	800ad28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ad22:	2302      	movs	r3, #2
 800ad24:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad26:	e10b      	b.n	800af40 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d002      	beq.n	800ad34 <HAL_SPI_Transmit+0x52>
 800ad2e:	88fb      	ldrh	r3, [r7, #6]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d102      	bne.n	800ad3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad38:	e102      	b.n	800af40 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2203      	movs	r2, #3
 800ad3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	88fa      	ldrh	r2, [r7, #6]
 800ad52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	88fa      	ldrh	r2, [r7, #6]
 800ad58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad80:	d10f      	bne.n	800ada2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ada0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adac:	2b40      	cmp	r3, #64	; 0x40
 800adae:	d007      	beq.n	800adc0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adc8:	d14b      	bne.n	800ae62 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <HAL_SPI_Transmit+0xf6>
 800add2:	8afb      	ldrh	r3, [r7, #22]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d13e      	bne.n	800ae56 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800addc:	881a      	ldrh	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade8:	1c9a      	adds	r2, r3, #2
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	3b01      	subs	r3, #1
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800adfc:	e02b      	b.n	800ae56 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f003 0302 	and.w	r3, r3, #2
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d112      	bne.n	800ae32 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae10:	881a      	ldrh	r2, [r3, #0]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1c:	1c9a      	adds	r2, r3, #2
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	86da      	strh	r2, [r3, #54]	; 0x36
 800ae30:	e011      	b.n	800ae56 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae32:	f7fc fddd 	bl	80079f0 <HAL_GetTick>
 800ae36:	4602      	mov	r2, r0
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d803      	bhi.n	800ae4a <HAL_SPI_Transmit+0x168>
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae48:	d102      	bne.n	800ae50 <HAL_SPI_Transmit+0x16e>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d102      	bne.n	800ae56 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ae54:	e074      	b.n	800af40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1ce      	bne.n	800adfe <HAL_SPI_Transmit+0x11c>
 800ae60:	e04c      	b.n	800aefc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <HAL_SPI_Transmit+0x18e>
 800ae6a:	8afb      	ldrh	r3, [r7, #22]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d140      	bne.n	800aef2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	330c      	adds	r3, #12
 800ae7a:	7812      	ldrb	r2, [r2, #0]
 800ae7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ae96:	e02c      	b.n	800aef2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f003 0302 	and.w	r3, r3, #2
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d113      	bne.n	800aece <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	330c      	adds	r3, #12
 800aeb0:	7812      	ldrb	r2, [r2, #0]
 800aeb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	3b01      	subs	r3, #1
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	86da      	strh	r2, [r3, #54]	; 0x36
 800aecc:	e011      	b.n	800aef2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aece:	f7fc fd8f 	bl	80079f0 <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d803      	bhi.n	800aee6 <HAL_SPI_Transmit+0x204>
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee4:	d102      	bne.n	800aeec <HAL_SPI_Transmit+0x20a>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d102      	bne.n	800aef2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aef0:	e026      	b.n	800af40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1cd      	bne.n	800ae98 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aefc:	69ba      	ldr	r2, [r7, #24]
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 f8b3 	bl	800b06c <SPI_EndRxTxTransaction>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2220      	movs	r2, #32
 800af10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10a      	bne.n	800af30 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af1a:	2300      	movs	r3, #0
 800af1c:	613b      	str	r3, [r7, #16]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	613b      	str	r3, [r7, #16]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	613b      	str	r3, [r7, #16]
 800af2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	77fb      	strb	r3, [r7, #31]
 800af3c:	e000      	b.n	800af40 <HAL_SPI_Transmit+0x25e>
  }

error:
 800af3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af50:	7ffb      	ldrb	r3, [r7, #31]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3720      	adds	r7, #32
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
	...

0800af5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b088      	sub	sp, #32
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	4613      	mov	r3, r2
 800af6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af6c:	f7fc fd40 	bl	80079f0 <HAL_GetTick>
 800af70:	4602      	mov	r2, r0
 800af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af74:	1a9b      	subs	r3, r3, r2
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	4413      	add	r3, r2
 800af7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800af7c:	f7fc fd38 	bl	80079f0 <HAL_GetTick>
 800af80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800af82:	4b39      	ldr	r3, [pc, #228]	; (800b068 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	015b      	lsls	r3, r3, #5
 800af88:	0d1b      	lsrs	r3, r3, #20
 800af8a:	69fa      	ldr	r2, [r7, #28]
 800af8c:	fb02 f303 	mul.w	r3, r2, r3
 800af90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af92:	e054      	b.n	800b03e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9a:	d050      	beq.n	800b03e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af9c:	f7fc fd28 	bl	80079f0 <HAL_GetTick>
 800afa0:	4602      	mov	r2, r0
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	69fa      	ldr	r2, [r7, #28]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d902      	bls.n	800afb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d13d      	bne.n	800b02e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	685a      	ldr	r2, [r3, #4]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800afc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afca:	d111      	bne.n	800aff0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afd4:	d004      	beq.n	800afe0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afde:	d107      	bne.n	800aff0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aff8:	d10f      	bne.n	800b01a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b008:	601a      	str	r2, [r3, #0]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b018:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2201      	movs	r2, #1
 800b01e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b02a:	2303      	movs	r3, #3
 800b02c:	e017      	b.n	800b05e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b034:	2300      	movs	r3, #0
 800b036:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	3b01      	subs	r3, #1
 800b03c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	689a      	ldr	r2, [r3, #8]
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	4013      	ands	r3, r2
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	bf0c      	ite	eq
 800b04e:	2301      	moveq	r3, #1
 800b050:	2300      	movne	r3, #0
 800b052:	b2db      	uxtb	r3, r3
 800b054:	461a      	mov	r2, r3
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d19b      	bne.n	800af94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20000180 	.word	0x20000180

0800b06c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af02      	add	r7, sp, #8
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b078:	4b1b      	ldr	r3, [pc, #108]	; (800b0e8 <SPI_EndRxTxTransaction+0x7c>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a1b      	ldr	r2, [pc, #108]	; (800b0ec <SPI_EndRxTxTransaction+0x80>)
 800b07e:	fba2 2303 	umull	r2, r3, r2, r3
 800b082:	0d5b      	lsrs	r3, r3, #21
 800b084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b088:	fb02 f303 	mul.w	r3, r2, r3
 800b08c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b096:	d112      	bne.n	800b0be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2180      	movs	r1, #128	; 0x80
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f7ff ff5a 	bl	800af5c <SPI_WaitFlagStateUntilTimeout>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d016      	beq.n	800b0dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0b2:	f043 0220 	orr.w	r2, r3, #32
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	e00f      	b.n	800b0de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00a      	beq.n	800b0da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d4:	2b80      	cmp	r3, #128	; 0x80
 800b0d6:	d0f2      	beq.n	800b0be <SPI_EndRxTxTransaction+0x52>
 800b0d8:	e000      	b.n	800b0dc <SPI_EndRxTxTransaction+0x70>
        break;
 800b0da:	bf00      	nop
  }

  return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20000180 	.word	0x20000180
 800b0ec:	165e9f81 	.word	0x165e9f81

0800b0f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e041      	b.n	800b186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d106      	bne.n	800b11c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7f8 fe1e 	bl	8003d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2202      	movs	r2, #2
 800b120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3304      	adds	r3, #4
 800b12c:	4619      	mov	r1, r3
 800b12e:	4610      	mov	r0, r2
 800b130:	f000 fc7a 	bl	800ba28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d001      	beq.n	800b1a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e04e      	b.n	800b246 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68da      	ldr	r2, [r3, #12]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f042 0201 	orr.w	r2, r2, #1
 800b1be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a23      	ldr	r2, [pc, #140]	; (800b254 <HAL_TIM_Base_Start_IT+0xc4>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d022      	beq.n	800b210 <HAL_TIM_Base_Start_IT+0x80>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1d2:	d01d      	beq.n	800b210 <HAL_TIM_Base_Start_IT+0x80>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a1f      	ldr	r2, [pc, #124]	; (800b258 <HAL_TIM_Base_Start_IT+0xc8>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d018      	beq.n	800b210 <HAL_TIM_Base_Start_IT+0x80>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a1e      	ldr	r2, [pc, #120]	; (800b25c <HAL_TIM_Base_Start_IT+0xcc>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d013      	beq.n	800b210 <HAL_TIM_Base_Start_IT+0x80>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a1c      	ldr	r2, [pc, #112]	; (800b260 <HAL_TIM_Base_Start_IT+0xd0>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d00e      	beq.n	800b210 <HAL_TIM_Base_Start_IT+0x80>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a1b      	ldr	r2, [pc, #108]	; (800b264 <HAL_TIM_Base_Start_IT+0xd4>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d009      	beq.n	800b210 <HAL_TIM_Base_Start_IT+0x80>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a19      	ldr	r2, [pc, #100]	; (800b268 <HAL_TIM_Base_Start_IT+0xd8>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d004      	beq.n	800b210 <HAL_TIM_Base_Start_IT+0x80>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a18      	ldr	r2, [pc, #96]	; (800b26c <HAL_TIM_Base_Start_IT+0xdc>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d111      	bne.n	800b234 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f003 0307 	and.w	r3, r3, #7
 800b21a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2b06      	cmp	r3, #6
 800b220:	d010      	beq.n	800b244 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f042 0201 	orr.w	r2, r2, #1
 800b230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b232:	e007      	b.n	800b244 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f042 0201 	orr.w	r2, r2, #1
 800b242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3714      	adds	r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	40010000 	.word	0x40010000
 800b258:	40000400 	.word	0x40000400
 800b25c:	40000800 	.word	0x40000800
 800b260:	40000c00 	.word	0x40000c00
 800b264:	40010400 	.word	0x40010400
 800b268:	40014000 	.word	0x40014000
 800b26c:	40001800 	.word	0x40001800

0800b270 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d101      	bne.n	800b282 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e041      	b.n	800b306 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f839 	bl	800b30e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2202      	movs	r2, #2
 800b2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	f000 fbba 	bl	800ba28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b30e:	b480      	push	{r7}
 800b310:	b083      	sub	sp, #12
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b316:	bf00      	nop
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
	...

0800b324 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d109      	bne.n	800b348 <HAL_TIM_PWM_Start+0x24>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	bf14      	ite	ne
 800b340:	2301      	movne	r3, #1
 800b342:	2300      	moveq	r3, #0
 800b344:	b2db      	uxtb	r3, r3
 800b346:	e022      	b.n	800b38e <HAL_TIM_PWM_Start+0x6a>
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	2b04      	cmp	r3, #4
 800b34c:	d109      	bne.n	800b362 <HAL_TIM_PWM_Start+0x3e>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b01      	cmp	r3, #1
 800b358:	bf14      	ite	ne
 800b35a:	2301      	movne	r3, #1
 800b35c:	2300      	moveq	r3, #0
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	e015      	b.n	800b38e <HAL_TIM_PWM_Start+0x6a>
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	2b08      	cmp	r3, #8
 800b366:	d109      	bne.n	800b37c <HAL_TIM_PWM_Start+0x58>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b01      	cmp	r3, #1
 800b372:	bf14      	ite	ne
 800b374:	2301      	movne	r3, #1
 800b376:	2300      	moveq	r3, #0
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	e008      	b.n	800b38e <HAL_TIM_PWM_Start+0x6a>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b382:	b2db      	uxtb	r3, r3
 800b384:	2b01      	cmp	r3, #1
 800b386:	bf14      	ite	ne
 800b388:	2301      	movne	r3, #1
 800b38a:	2300      	moveq	r3, #0
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e07c      	b.n	800b490 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d104      	bne.n	800b3a6 <HAL_TIM_PWM_Start+0x82>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2202      	movs	r2, #2
 800b3a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3a4:	e013      	b.n	800b3ce <HAL_TIM_PWM_Start+0xaa>
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d104      	bne.n	800b3b6 <HAL_TIM_PWM_Start+0x92>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3b4:	e00b      	b.n	800b3ce <HAL_TIM_PWM_Start+0xaa>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b08      	cmp	r3, #8
 800b3ba:	d104      	bne.n	800b3c6 <HAL_TIM_PWM_Start+0xa2>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2202      	movs	r2, #2
 800b3c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3c4:	e003      	b.n	800b3ce <HAL_TIM_PWM_Start+0xaa>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 fe10 	bl	800bffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a2d      	ldr	r2, [pc, #180]	; (800b498 <HAL_TIM_PWM_Start+0x174>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d004      	beq.n	800b3f0 <HAL_TIM_PWM_Start+0xcc>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a2c      	ldr	r2, [pc, #176]	; (800b49c <HAL_TIM_PWM_Start+0x178>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d101      	bne.n	800b3f4 <HAL_TIM_PWM_Start+0xd0>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e000      	b.n	800b3f6 <HAL_TIM_PWM_Start+0xd2>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d007      	beq.n	800b40a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b408:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a22      	ldr	r2, [pc, #136]	; (800b498 <HAL_TIM_PWM_Start+0x174>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d022      	beq.n	800b45a <HAL_TIM_PWM_Start+0x136>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b41c:	d01d      	beq.n	800b45a <HAL_TIM_PWM_Start+0x136>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a1f      	ldr	r2, [pc, #124]	; (800b4a0 <HAL_TIM_PWM_Start+0x17c>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d018      	beq.n	800b45a <HAL_TIM_PWM_Start+0x136>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a1d      	ldr	r2, [pc, #116]	; (800b4a4 <HAL_TIM_PWM_Start+0x180>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d013      	beq.n	800b45a <HAL_TIM_PWM_Start+0x136>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a1c      	ldr	r2, [pc, #112]	; (800b4a8 <HAL_TIM_PWM_Start+0x184>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00e      	beq.n	800b45a <HAL_TIM_PWM_Start+0x136>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a16      	ldr	r2, [pc, #88]	; (800b49c <HAL_TIM_PWM_Start+0x178>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d009      	beq.n	800b45a <HAL_TIM_PWM_Start+0x136>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a18      	ldr	r2, [pc, #96]	; (800b4ac <HAL_TIM_PWM_Start+0x188>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d004      	beq.n	800b45a <HAL_TIM_PWM_Start+0x136>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a16      	ldr	r2, [pc, #88]	; (800b4b0 <HAL_TIM_PWM_Start+0x18c>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d111      	bne.n	800b47e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	f003 0307 	and.w	r3, r3, #7
 800b464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b06      	cmp	r3, #6
 800b46a:	d010      	beq.n	800b48e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f042 0201 	orr.w	r2, r2, #1
 800b47a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b47c:	e007      	b.n	800b48e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f042 0201 	orr.w	r2, r2, #1
 800b48c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	40010000 	.word	0x40010000
 800b49c:	40010400 	.word	0x40010400
 800b4a0:	40000400 	.word	0x40000400
 800b4a4:	40000800 	.word	0x40000800
 800b4a8:	40000c00 	.word	0x40000c00
 800b4ac:	40014000 	.word	0x40014000
 800b4b0:	40001800 	.word	0x40001800

0800b4b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	f003 0302 	and.w	r3, r3, #2
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d122      	bne.n	800b510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	f003 0302 	and.w	r3, r3, #2
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d11b      	bne.n	800b510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f06f 0202 	mvn.w	r2, #2
 800b4e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d003      	beq.n	800b4fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fa77 	bl	800b9ea <HAL_TIM_IC_CaptureCallback>
 800b4fc:	e005      	b.n	800b50a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fa69 	bl	800b9d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fa7a 	bl	800b9fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	f003 0304 	and.w	r3, r3, #4
 800b51a:	2b04      	cmp	r3, #4
 800b51c:	d122      	bne.n	800b564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	f003 0304 	and.w	r3, r3, #4
 800b528:	2b04      	cmp	r3, #4
 800b52a:	d11b      	bne.n	800b564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f06f 0204 	mvn.w	r2, #4
 800b534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2202      	movs	r2, #2
 800b53a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fa4d 	bl	800b9ea <HAL_TIM_IC_CaptureCallback>
 800b550:	e005      	b.n	800b55e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 fa3f 	bl	800b9d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 fa50 	bl	800b9fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	f003 0308 	and.w	r3, r3, #8
 800b56e:	2b08      	cmp	r3, #8
 800b570:	d122      	bne.n	800b5b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	f003 0308 	and.w	r3, r3, #8
 800b57c:	2b08      	cmp	r3, #8
 800b57e:	d11b      	bne.n	800b5b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f06f 0208 	mvn.w	r2, #8
 800b588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2204      	movs	r2, #4
 800b58e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	f003 0303 	and.w	r3, r3, #3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fa23 	bl	800b9ea <HAL_TIM_IC_CaptureCallback>
 800b5a4:	e005      	b.n	800b5b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fa15 	bl	800b9d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 fa26 	bl	800b9fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	f003 0310 	and.w	r3, r3, #16
 800b5c2:	2b10      	cmp	r3, #16
 800b5c4:	d122      	bne.n	800b60c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	f003 0310 	and.w	r3, r3, #16
 800b5d0:	2b10      	cmp	r3, #16
 800b5d2:	d11b      	bne.n	800b60c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f06f 0210 	mvn.w	r2, #16
 800b5dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	69db      	ldr	r3, [r3, #28]
 800b5ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f9f9 	bl	800b9ea <HAL_TIM_IC_CaptureCallback>
 800b5f8:	e005      	b.n	800b606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f9eb 	bl	800b9d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f9fc 	bl	800b9fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	2b01      	cmp	r3, #1
 800b618:	d10e      	bne.n	800b638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	2b01      	cmp	r3, #1
 800b626:	d107      	bne.n	800b638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f06f 0201 	mvn.w	r2, #1
 800b630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7f7 ffe0 	bl	80035f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b642:	2b80      	cmp	r3, #128	; 0x80
 800b644:	d10e      	bne.n	800b664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b650:	2b80      	cmp	r3, #128	; 0x80
 800b652:	d107      	bne.n	800b664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b65c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fdca 	bl	800c1f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b66e:	2b40      	cmp	r3, #64	; 0x40
 800b670:	d10e      	bne.n	800b690 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67c:	2b40      	cmp	r3, #64	; 0x40
 800b67e:	d107      	bne.n	800b690 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f9c1 	bl	800ba12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	f003 0320 	and.w	r3, r3, #32
 800b69a:	2b20      	cmp	r3, #32
 800b69c:	d10e      	bne.n	800b6bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	f003 0320 	and.w	r3, r3, #32
 800b6a8:	2b20      	cmp	r3, #32
 800b6aa:	d107      	bne.n	800b6bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f06f 0220 	mvn.w	r2, #32
 800b6b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fd94 	bl	800c1e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6bc:	bf00      	nop
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d101      	bne.n	800b6e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b6de:	2302      	movs	r3, #2
 800b6e0:	e0ae      	b.n	800b840 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b0c      	cmp	r3, #12
 800b6ee:	f200 809f 	bhi.w	800b830 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b6f2:	a201      	add	r2, pc, #4	; (adr r2, 800b6f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f8:	0800b72d 	.word	0x0800b72d
 800b6fc:	0800b831 	.word	0x0800b831
 800b700:	0800b831 	.word	0x0800b831
 800b704:	0800b831 	.word	0x0800b831
 800b708:	0800b76d 	.word	0x0800b76d
 800b70c:	0800b831 	.word	0x0800b831
 800b710:	0800b831 	.word	0x0800b831
 800b714:	0800b831 	.word	0x0800b831
 800b718:	0800b7af 	.word	0x0800b7af
 800b71c:	0800b831 	.word	0x0800b831
 800b720:	0800b831 	.word	0x0800b831
 800b724:	0800b831 	.word	0x0800b831
 800b728:	0800b7ef 	.word	0x0800b7ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68b9      	ldr	r1, [r7, #8]
 800b732:	4618      	mov	r0, r3
 800b734:	f000 fa18 	bl	800bb68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	699a      	ldr	r2, [r3, #24]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f042 0208 	orr.w	r2, r2, #8
 800b746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	699a      	ldr	r2, [r3, #24]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f022 0204 	bic.w	r2, r2, #4
 800b756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6999      	ldr	r1, [r3, #24]
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	691a      	ldr	r2, [r3, #16]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	430a      	orrs	r2, r1
 800b768:	619a      	str	r2, [r3, #24]
      break;
 800b76a:	e064      	b.n	800b836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68b9      	ldr	r1, [r7, #8]
 800b772:	4618      	mov	r0, r3
 800b774:	f000 fa68 	bl	800bc48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	699a      	ldr	r2, [r3, #24]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	699a      	ldr	r2, [r3, #24]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6999      	ldr	r1, [r3, #24]
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	021a      	lsls	r2, r3, #8
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	430a      	orrs	r2, r1
 800b7aa:	619a      	str	r2, [r3, #24]
      break;
 800b7ac:	e043      	b.n	800b836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	68b9      	ldr	r1, [r7, #8]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f000 fabd 	bl	800bd34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	69da      	ldr	r2, [r3, #28]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f042 0208 	orr.w	r2, r2, #8
 800b7c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	69da      	ldr	r2, [r3, #28]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f022 0204 	bic.w	r2, r2, #4
 800b7d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	69d9      	ldr	r1, [r3, #28]
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	691a      	ldr	r2, [r3, #16]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	430a      	orrs	r2, r1
 800b7ea:	61da      	str	r2, [r3, #28]
      break;
 800b7ec:	e023      	b.n	800b836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 fb11 	bl	800be1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	69da      	ldr	r2, [r3, #28]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	69da      	ldr	r2, [r3, #28]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	69d9      	ldr	r1, [r3, #28]
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	021a      	lsls	r2, r3, #8
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	430a      	orrs	r2, r1
 800b82c:	61da      	str	r2, [r3, #28]
      break;
 800b82e:	e002      	b.n	800b836 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	75fb      	strb	r3, [r7, #23]
      break;
 800b834:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d101      	bne.n	800b864 <HAL_TIM_ConfigClockSource+0x1c>
 800b860:	2302      	movs	r3, #2
 800b862:	e0b4      	b.n	800b9ce <HAL_TIM_ConfigClockSource+0x186>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2202      	movs	r2, #2
 800b870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b88a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b89c:	d03e      	beq.n	800b91c <HAL_TIM_ConfigClockSource+0xd4>
 800b89e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8a2:	f200 8087 	bhi.w	800b9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b8a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8aa:	f000 8086 	beq.w	800b9ba <HAL_TIM_ConfigClockSource+0x172>
 800b8ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b2:	d87f      	bhi.n	800b9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b8b4:	2b70      	cmp	r3, #112	; 0x70
 800b8b6:	d01a      	beq.n	800b8ee <HAL_TIM_ConfigClockSource+0xa6>
 800b8b8:	2b70      	cmp	r3, #112	; 0x70
 800b8ba:	d87b      	bhi.n	800b9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b8bc:	2b60      	cmp	r3, #96	; 0x60
 800b8be:	d050      	beq.n	800b962 <HAL_TIM_ConfigClockSource+0x11a>
 800b8c0:	2b60      	cmp	r3, #96	; 0x60
 800b8c2:	d877      	bhi.n	800b9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b8c4:	2b50      	cmp	r3, #80	; 0x50
 800b8c6:	d03c      	beq.n	800b942 <HAL_TIM_ConfigClockSource+0xfa>
 800b8c8:	2b50      	cmp	r3, #80	; 0x50
 800b8ca:	d873      	bhi.n	800b9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b8cc:	2b40      	cmp	r3, #64	; 0x40
 800b8ce:	d058      	beq.n	800b982 <HAL_TIM_ConfigClockSource+0x13a>
 800b8d0:	2b40      	cmp	r3, #64	; 0x40
 800b8d2:	d86f      	bhi.n	800b9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b8d4:	2b30      	cmp	r3, #48	; 0x30
 800b8d6:	d064      	beq.n	800b9a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b8d8:	2b30      	cmp	r3, #48	; 0x30
 800b8da:	d86b      	bhi.n	800b9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b8dc:	2b20      	cmp	r3, #32
 800b8de:	d060      	beq.n	800b9a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b8e0:	2b20      	cmp	r3, #32
 800b8e2:	d867      	bhi.n	800b9b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d05c      	beq.n	800b9a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b8e8:	2b10      	cmp	r3, #16
 800b8ea:	d05a      	beq.n	800b9a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b8ec:	e062      	b.n	800b9b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6818      	ldr	r0, [r3, #0]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	6899      	ldr	r1, [r3, #8]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	f000 fb5d 	bl	800bfbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	609a      	str	r2, [r3, #8]
      break;
 800b91a:	e04f      	b.n	800b9bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6818      	ldr	r0, [r3, #0]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	6899      	ldr	r1, [r3, #8]
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	685a      	ldr	r2, [r3, #4]
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	f000 fb46 	bl	800bfbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	689a      	ldr	r2, [r3, #8]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b93e:	609a      	str	r2, [r3, #8]
      break;
 800b940:	e03c      	b.n	800b9bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6818      	ldr	r0, [r3, #0]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	6859      	ldr	r1, [r3, #4]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	461a      	mov	r2, r3
 800b950:	f000 faba 	bl	800bec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2150      	movs	r1, #80	; 0x50
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 fb13 	bl	800bf86 <TIM_ITRx_SetConfig>
      break;
 800b960:	e02c      	b.n	800b9bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6818      	ldr	r0, [r3, #0]
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	6859      	ldr	r1, [r3, #4]
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	461a      	mov	r2, r3
 800b970:	f000 fad9 	bl	800bf26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2160      	movs	r1, #96	; 0x60
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 fb03 	bl	800bf86 <TIM_ITRx_SetConfig>
      break;
 800b980:	e01c      	b.n	800b9bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6818      	ldr	r0, [r3, #0]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	6859      	ldr	r1, [r3, #4]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	461a      	mov	r2, r3
 800b990:	f000 fa9a 	bl	800bec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2140      	movs	r1, #64	; 0x40
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 faf3 	bl	800bf86 <TIM_ITRx_SetConfig>
      break;
 800b9a0:	e00c      	b.n	800b9bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	f000 faea 	bl	800bf86 <TIM_ITRx_SetConfig>
      break;
 800b9b2:	e003      	b.n	800b9bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b8:	e000      	b.n	800b9bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b9ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	b083      	sub	sp, #12
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b9de:	bf00      	nop
 800b9e0:	370c      	adds	r7, #12
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b083      	sub	sp, #12
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b9f2:	bf00      	nop
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b083      	sub	sp, #12
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba06:	bf00      	nop
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b083      	sub	sp, #12
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba1a:	bf00      	nop
 800ba1c:	370c      	adds	r7, #12
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
	...

0800ba28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a40      	ldr	r2, [pc, #256]	; (800bb3c <TIM_Base_SetConfig+0x114>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d013      	beq.n	800ba68 <TIM_Base_SetConfig+0x40>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba46:	d00f      	beq.n	800ba68 <TIM_Base_SetConfig+0x40>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a3d      	ldr	r2, [pc, #244]	; (800bb40 <TIM_Base_SetConfig+0x118>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d00b      	beq.n	800ba68 <TIM_Base_SetConfig+0x40>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a3c      	ldr	r2, [pc, #240]	; (800bb44 <TIM_Base_SetConfig+0x11c>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d007      	beq.n	800ba68 <TIM_Base_SetConfig+0x40>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a3b      	ldr	r2, [pc, #236]	; (800bb48 <TIM_Base_SetConfig+0x120>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d003      	beq.n	800ba68 <TIM_Base_SetConfig+0x40>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a3a      	ldr	r2, [pc, #232]	; (800bb4c <TIM_Base_SetConfig+0x124>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d108      	bne.n	800ba7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a2f      	ldr	r2, [pc, #188]	; (800bb3c <TIM_Base_SetConfig+0x114>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d02b      	beq.n	800bada <TIM_Base_SetConfig+0xb2>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba88:	d027      	beq.n	800bada <TIM_Base_SetConfig+0xb2>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4a2c      	ldr	r2, [pc, #176]	; (800bb40 <TIM_Base_SetConfig+0x118>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d023      	beq.n	800bada <TIM_Base_SetConfig+0xb2>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a2b      	ldr	r2, [pc, #172]	; (800bb44 <TIM_Base_SetConfig+0x11c>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d01f      	beq.n	800bada <TIM_Base_SetConfig+0xb2>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a2a      	ldr	r2, [pc, #168]	; (800bb48 <TIM_Base_SetConfig+0x120>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d01b      	beq.n	800bada <TIM_Base_SetConfig+0xb2>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a29      	ldr	r2, [pc, #164]	; (800bb4c <TIM_Base_SetConfig+0x124>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d017      	beq.n	800bada <TIM_Base_SetConfig+0xb2>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4a28      	ldr	r2, [pc, #160]	; (800bb50 <TIM_Base_SetConfig+0x128>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d013      	beq.n	800bada <TIM_Base_SetConfig+0xb2>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a27      	ldr	r2, [pc, #156]	; (800bb54 <TIM_Base_SetConfig+0x12c>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d00f      	beq.n	800bada <TIM_Base_SetConfig+0xb2>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a26      	ldr	r2, [pc, #152]	; (800bb58 <TIM_Base_SetConfig+0x130>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d00b      	beq.n	800bada <TIM_Base_SetConfig+0xb2>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a25      	ldr	r2, [pc, #148]	; (800bb5c <TIM_Base_SetConfig+0x134>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d007      	beq.n	800bada <TIM_Base_SetConfig+0xb2>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a24      	ldr	r2, [pc, #144]	; (800bb60 <TIM_Base_SetConfig+0x138>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d003      	beq.n	800bada <TIM_Base_SetConfig+0xb2>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a23      	ldr	r2, [pc, #140]	; (800bb64 <TIM_Base_SetConfig+0x13c>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d108      	bne.n	800baec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	4313      	orrs	r3, r2
 800baea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	689a      	ldr	r2, [r3, #8]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a0a      	ldr	r2, [pc, #40]	; (800bb3c <TIM_Base_SetConfig+0x114>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d003      	beq.n	800bb20 <TIM_Base_SetConfig+0xf8>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a0c      	ldr	r2, [pc, #48]	; (800bb4c <TIM_Base_SetConfig+0x124>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d103      	bne.n	800bb28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	691a      	ldr	r2, [r3, #16]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	615a      	str	r2, [r3, #20]
}
 800bb2e:	bf00      	nop
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	40010000 	.word	0x40010000
 800bb40:	40000400 	.word	0x40000400
 800bb44:	40000800 	.word	0x40000800
 800bb48:	40000c00 	.word	0x40000c00
 800bb4c:	40010400 	.word	0x40010400
 800bb50:	40014000 	.word	0x40014000
 800bb54:	40014400 	.word	0x40014400
 800bb58:	40014800 	.word	0x40014800
 800bb5c:	40001800 	.word	0x40001800
 800bb60:	40001c00 	.word	0x40001c00
 800bb64:	40002000 	.word	0x40002000

0800bb68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	f023 0201 	bic.w	r2, r3, #1
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f023 0303 	bic.w	r3, r3, #3
 800bb9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f023 0302 	bic.w	r3, r3, #2
 800bbb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a20      	ldr	r2, [pc, #128]	; (800bc40 <TIM_OC1_SetConfig+0xd8>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d003      	beq.n	800bbcc <TIM_OC1_SetConfig+0x64>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a1f      	ldr	r2, [pc, #124]	; (800bc44 <TIM_OC1_SetConfig+0xdc>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d10c      	bne.n	800bbe6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f023 0308 	bic.w	r3, r3, #8
 800bbd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f023 0304 	bic.w	r3, r3, #4
 800bbe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a15      	ldr	r2, [pc, #84]	; (800bc40 <TIM_OC1_SetConfig+0xd8>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d003      	beq.n	800bbf6 <TIM_OC1_SetConfig+0x8e>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4a14      	ldr	r2, [pc, #80]	; (800bc44 <TIM_OC1_SetConfig+0xdc>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d111      	bne.n	800bc1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	693a      	ldr	r2, [r7, #16]
 800bc1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	685a      	ldr	r2, [r3, #4]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	697a      	ldr	r2, [r7, #20]
 800bc32:	621a      	str	r2, [r3, #32]
}
 800bc34:	bf00      	nop
 800bc36:	371c      	adds	r7, #28
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	40010000 	.word	0x40010000
 800bc44:	40010400 	.word	0x40010400

0800bc48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b087      	sub	sp, #28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	f023 0210 	bic.w	r2, r3, #16
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6a1b      	ldr	r3, [r3, #32]
 800bc62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	021b      	lsls	r3, r3, #8
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	f023 0320 	bic.w	r3, r3, #32
 800bc92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	011b      	lsls	r3, r3, #4
 800bc9a:	697a      	ldr	r2, [r7, #20]
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a22      	ldr	r2, [pc, #136]	; (800bd2c <TIM_OC2_SetConfig+0xe4>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d003      	beq.n	800bcb0 <TIM_OC2_SetConfig+0x68>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a21      	ldr	r2, [pc, #132]	; (800bd30 <TIM_OC2_SetConfig+0xe8>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d10d      	bne.n	800bccc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	011b      	lsls	r3, r3, #4
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a17      	ldr	r2, [pc, #92]	; (800bd2c <TIM_OC2_SetConfig+0xe4>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d003      	beq.n	800bcdc <TIM_OC2_SetConfig+0x94>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a16      	ldr	r2, [pc, #88]	; (800bd30 <TIM_OC2_SetConfig+0xe8>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d113      	bne.n	800bd04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bcea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	695b      	ldr	r3, [r3, #20]
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	685a      	ldr	r2, [r3, #4]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	621a      	str	r2, [r3, #32]
}
 800bd1e:	bf00      	nop
 800bd20:	371c      	adds	r7, #28
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	40010000 	.word	0x40010000
 800bd30:	40010400 	.word	0x40010400

0800bd34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a1b      	ldr	r3, [r3, #32]
 800bd42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	69db      	ldr	r3, [r3, #28]
 800bd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f023 0303 	bic.w	r3, r3, #3
 800bd6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	021b      	lsls	r3, r3, #8
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4a21      	ldr	r2, [pc, #132]	; (800be14 <TIM_OC3_SetConfig+0xe0>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d003      	beq.n	800bd9a <TIM_OC3_SetConfig+0x66>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a20      	ldr	r2, [pc, #128]	; (800be18 <TIM_OC3_SetConfig+0xe4>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d10d      	bne.n	800bdb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bda0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	021b      	lsls	r3, r3, #8
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bdb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a16      	ldr	r2, [pc, #88]	; (800be14 <TIM_OC3_SetConfig+0xe0>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d003      	beq.n	800bdc6 <TIM_OC3_SetConfig+0x92>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a15      	ldr	r2, [pc, #84]	; (800be18 <TIM_OC3_SetConfig+0xe4>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d113      	bne.n	800bdee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bdd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	011b      	lsls	r3, r3, #4
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	011b      	lsls	r3, r3, #4
 800bde8:	693a      	ldr	r2, [r7, #16]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	685a      	ldr	r2, [r3, #4]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	621a      	str	r2, [r3, #32]
}
 800be08:	bf00      	nop
 800be0a:	371c      	adds	r7, #28
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr
 800be14:	40010000 	.word	0x40010000
 800be18:	40010400 	.word	0x40010400

0800be1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	69db      	ldr	r3, [r3, #28]
 800be42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	021b      	lsls	r3, r3, #8
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	4313      	orrs	r3, r2
 800be5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	031b      	lsls	r3, r3, #12
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	4313      	orrs	r3, r2
 800be72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a12      	ldr	r2, [pc, #72]	; (800bec0 <TIM_OC4_SetConfig+0xa4>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d003      	beq.n	800be84 <TIM_OC4_SetConfig+0x68>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a11      	ldr	r2, [pc, #68]	; (800bec4 <TIM_OC4_SetConfig+0xa8>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d109      	bne.n	800be98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	019b      	lsls	r3, r3, #6
 800be92:	697a      	ldr	r2, [r7, #20]
 800be94:	4313      	orrs	r3, r2
 800be96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	697a      	ldr	r2, [r7, #20]
 800be9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	685a      	ldr	r2, [r3, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	621a      	str	r2, [r3, #32]
}
 800beb2:	bf00      	nop
 800beb4:	371c      	adds	r7, #28
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	40010000 	.word	0x40010000
 800bec4:	40010400 	.word	0x40010400

0800bec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bec8:	b480      	push	{r7}
 800beca:	b087      	sub	sp, #28
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6a1b      	ldr	r3, [r3, #32]
 800bed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	f023 0201 	bic.w	r2, r3, #1
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	011b      	lsls	r3, r3, #4
 800bef8:	693a      	ldr	r2, [r7, #16]
 800befa:	4313      	orrs	r3, r2
 800befc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	f023 030a 	bic.w	r3, r3, #10
 800bf04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	621a      	str	r2, [r3, #32]
}
 800bf1a:	bf00      	nop
 800bf1c:	371c      	adds	r7, #28
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b087      	sub	sp, #28
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	f023 0210 	bic.w	r2, r3, #16
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6a1b      	ldr	r3, [r3, #32]
 800bf48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bf50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	031b      	lsls	r3, r3, #12
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bf62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	011b      	lsls	r3, r3, #4
 800bf68:	693a      	ldr	r2, [r7, #16]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	697a      	ldr	r2, [r7, #20]
 800bf72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	693a      	ldr	r2, [r7, #16]
 800bf78:	621a      	str	r2, [r3, #32]
}
 800bf7a:	bf00      	nop
 800bf7c:	371c      	adds	r7, #28
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf86:	b480      	push	{r7}
 800bf88:	b085      	sub	sp, #20
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	f043 0307 	orr.w	r3, r3, #7
 800bfa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	609a      	str	r2, [r3, #8]
}
 800bfb0:	bf00      	nop
 800bfb2:	3714      	adds	r7, #20
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b087      	sub	sp, #28
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bfd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	021a      	lsls	r2, r3, #8
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	431a      	orrs	r2, r3
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	697a      	ldr	r2, [r7, #20]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	609a      	str	r2, [r3, #8]
}
 800bff0:	bf00      	nop
 800bff2:	371c      	adds	r7, #28
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b087      	sub	sp, #28
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	f003 031f 	and.w	r3, r3, #31
 800c00e:	2201      	movs	r2, #1
 800c010:	fa02 f303 	lsl.w	r3, r2, r3
 800c014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6a1a      	ldr	r2, [r3, #32]
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	43db      	mvns	r3, r3
 800c01e:	401a      	ands	r2, r3
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6a1a      	ldr	r2, [r3, #32]
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	f003 031f 	and.w	r3, r3, #31
 800c02e:	6879      	ldr	r1, [r7, #4]
 800c030:	fa01 f303 	lsl.w	r3, r1, r3
 800c034:	431a      	orrs	r2, r3
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	621a      	str	r2, [r3, #32]
}
 800c03a:	bf00      	nop
 800c03c:	371c      	adds	r7, #28
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
	...

0800c048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d101      	bne.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c05c:	2302      	movs	r3, #2
 800c05e:	e05a      	b.n	800c116 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2202      	movs	r2, #2
 800c06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68fa      	ldr	r2, [r7, #12]
 800c08e:	4313      	orrs	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a21      	ldr	r2, [pc, #132]	; (800c124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d022      	beq.n	800c0ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0ac:	d01d      	beq.n	800c0ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a1d      	ldr	r2, [pc, #116]	; (800c128 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d018      	beq.n	800c0ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a1b      	ldr	r2, [pc, #108]	; (800c12c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d013      	beq.n	800c0ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a1a      	ldr	r2, [pc, #104]	; (800c130 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d00e      	beq.n	800c0ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a18      	ldr	r2, [pc, #96]	; (800c134 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d009      	beq.n	800c0ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a17      	ldr	r2, [pc, #92]	; (800c138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d004      	beq.n	800c0ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a15      	ldr	r2, [pc, #84]	; (800c13c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d10c      	bne.n	800c104 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	40010000 	.word	0x40010000
 800c128:	40000400 	.word	0x40000400
 800c12c:	40000800 	.word	0x40000800
 800c130:	40000c00 	.word	0x40000c00
 800c134:	40010400 	.word	0x40010400
 800c138:	40014000 	.word	0x40014000
 800c13c:	40001800 	.word	0x40001800

0800c140 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c14a:	2300      	movs	r3, #0
 800c14c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c154:	2b01      	cmp	r3, #1
 800c156:	d101      	bne.n	800c15c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c158:	2302      	movs	r3, #2
 800c15a:	e03d      	b.n	800c1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	4313      	orrs	r3, r2
 800c170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4313      	orrs	r3, r2
 800c19a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	691b      	ldr	r3, [r3, #16]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	69db      	ldr	r3, [r3, #28]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3714      	adds	r7, #20
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1ec:	bf00      	nop
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e03f      	b.n	800c29e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c224:	b2db      	uxtb	r3, r3
 800c226:	2b00      	cmp	r3, #0
 800c228:	d106      	bne.n	800c238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7f7 fea8 	bl	8003f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2224      	movs	r2, #36	; 0x24
 800c23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68da      	ldr	r2, [r3, #12]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c24e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 fe69 	bl	800cf28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	691a      	ldr	r2, [r3, #16]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	695a      	ldr	r2, [r3, #20]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68da      	ldr	r2, [r3, #12]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2220      	movs	r2, #32
 800c290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2220      	movs	r2, #32
 800c298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b084      	sub	sp, #16
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	60f8      	str	r0, [r7, #12]
 800c2ae:	60b9      	str	r1, [r7, #8]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2b20      	cmp	r3, #32
 800c2be:	d11d      	bne.n	800c2fc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d002      	beq.n	800c2cc <HAL_UART_Receive_DMA+0x26>
 800c2c6:	88fb      	ldrh	r3, [r7, #6]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d101      	bne.n	800c2d0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e016      	b.n	800c2fe <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d101      	bne.n	800c2de <HAL_UART_Receive_DMA+0x38>
 800c2da:	2302      	movs	r3, #2
 800c2dc:	e00f      	b.n	800c2fe <HAL_UART_Receive_DMA+0x58>
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c2ec:	88fb      	ldrh	r3, [r7, #6]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	68b9      	ldr	r1, [r7, #8]
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f000 fbb8 	bl	800ca68 <UART_Start_Receive_DMA>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	e000      	b.n	800c2fe <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c2fc:	2302      	movs	r3, #2
  }
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
	...

0800c308 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b0ba      	sub	sp, #232	; 0xe8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c32e:	2300      	movs	r3, #0
 800c330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c334:	2300      	movs	r3, #0
 800c336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c33e:	f003 030f 	and.w	r3, r3, #15
 800c342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10f      	bne.n	800c36e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c352:	f003 0320 	and.w	r3, r3, #32
 800c356:	2b00      	cmp	r3, #0
 800c358:	d009      	beq.n	800c36e <HAL_UART_IRQHandler+0x66>
 800c35a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c35e:	f003 0320 	and.w	r3, r3, #32
 800c362:	2b00      	cmp	r3, #0
 800c364:	d003      	beq.n	800c36e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 fd23 	bl	800cdb2 <UART_Receive_IT>
      return;
 800c36c:	e256      	b.n	800c81c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c36e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c372:	2b00      	cmp	r3, #0
 800c374:	f000 80de 	beq.w	800c534 <HAL_UART_IRQHandler+0x22c>
 800c378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	2b00      	cmp	r3, #0
 800c382:	d106      	bne.n	800c392 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c388:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 80d1 	beq.w	800c534 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00b      	beq.n	800c3b6 <HAL_UART_IRQHandler+0xae>
 800c39e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d005      	beq.n	800c3b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ae:	f043 0201 	orr.w	r2, r3, #1
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ba:	f003 0304 	and.w	r3, r3, #4
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00b      	beq.n	800c3da <HAL_UART_IRQHandler+0xd2>
 800c3c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d005      	beq.n	800c3da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d2:	f043 0202 	orr.w	r2, r3, #2
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3de:	f003 0302 	and.w	r3, r3, #2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00b      	beq.n	800c3fe <HAL_UART_IRQHandler+0xf6>
 800c3e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d005      	beq.n	800c3fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f6:	f043 0204 	orr.w	r2, r3, #4
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c3fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c402:	f003 0308 	and.w	r3, r3, #8
 800c406:	2b00      	cmp	r3, #0
 800c408:	d011      	beq.n	800c42e <HAL_UART_IRQHandler+0x126>
 800c40a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c40e:	f003 0320 	and.w	r3, r3, #32
 800c412:	2b00      	cmp	r3, #0
 800c414:	d105      	bne.n	800c422 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d005      	beq.n	800c42e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c426:	f043 0208 	orr.w	r2, r3, #8
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 81ed 	beq.w	800c812 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c43c:	f003 0320 	and.w	r3, r3, #32
 800c440:	2b00      	cmp	r3, #0
 800c442:	d008      	beq.n	800c456 <HAL_UART_IRQHandler+0x14e>
 800c444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c448:	f003 0320 	and.w	r3, r3, #32
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d002      	beq.n	800c456 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fcae 	bl	800cdb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	695b      	ldr	r3, [r3, #20]
 800c45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c460:	2b40      	cmp	r3, #64	; 0x40
 800c462:	bf0c      	ite	eq
 800c464:	2301      	moveq	r3, #1
 800c466:	2300      	movne	r3, #0
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c472:	f003 0308 	and.w	r3, r3, #8
 800c476:	2b00      	cmp	r3, #0
 800c478:	d103      	bne.n	800c482 <HAL_UART_IRQHandler+0x17a>
 800c47a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d04f      	beq.n	800c522 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fbb6 	bl	800cbf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	695b      	ldr	r3, [r3, #20]
 800c48e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c492:	2b40      	cmp	r3, #64	; 0x40
 800c494:	d141      	bne.n	800c51a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	3314      	adds	r3, #20
 800c49c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4a4:	e853 3f00 	ldrex	r3, [r3]
 800c4a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c4ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	3314      	adds	r3, #20
 800c4be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c4c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c4c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c4ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c4d2:	e841 2300 	strex	r3, r2, [r1]
 800c4d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c4da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1d9      	bne.n	800c496 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d013      	beq.n	800c512 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ee:	4a7d      	ldr	r2, [pc, #500]	; (800c6e4 <HAL_UART_IRQHandler+0x3dc>)
 800c4f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fb fd32 	bl	8007f60 <HAL_DMA_Abort_IT>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d016      	beq.n	800c530 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c50c:	4610      	mov	r0, r2
 800c50e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c510:	e00e      	b.n	800c530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f99a 	bl	800c84c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c518:	e00a      	b.n	800c530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 f996 	bl	800c84c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c520:	e006      	b.n	800c530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f992 	bl	800c84c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c52e:	e170      	b.n	800c812 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c530:	bf00      	nop
    return;
 800c532:	e16e      	b.n	800c812 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c538:	2b01      	cmp	r3, #1
 800c53a:	f040 814a 	bne.w	800c7d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c542:	f003 0310 	and.w	r3, r3, #16
 800c546:	2b00      	cmp	r3, #0
 800c548:	f000 8143 	beq.w	800c7d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c550:	f003 0310 	and.w	r3, r3, #16
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 813c 	beq.w	800c7d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c55a:	2300      	movs	r3, #0
 800c55c:	60bb      	str	r3, [r7, #8]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	60bb      	str	r3, [r7, #8]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	60bb      	str	r3, [r7, #8]
 800c56e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	695b      	ldr	r3, [r3, #20]
 800c576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c57a:	2b40      	cmp	r3, #64	; 0x40
 800c57c:	f040 80b4 	bne.w	800c6e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c58c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 8140 	beq.w	800c816 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c59a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	f080 8139 	bcs.w	800c816 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c5aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b0:	69db      	ldr	r3, [r3, #28]
 800c5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b6:	f000 8088 	beq.w	800c6ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	330c      	adds	r3, #12
 800c5c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c5c8:	e853 3f00 	ldrex	r3, [r3]
 800c5cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c5d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	330c      	adds	r3, #12
 800c5e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c5e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c5ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c5f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c5f6:	e841 2300 	strex	r3, r2, [r1]
 800c5fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c5fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1d9      	bne.n	800c5ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	3314      	adds	r3, #20
 800c60c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c610:	e853 3f00 	ldrex	r3, [r3]
 800c614:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c618:	f023 0301 	bic.w	r3, r3, #1
 800c61c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	3314      	adds	r3, #20
 800c626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c62a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c62e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c630:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c632:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c636:	e841 2300 	strex	r3, r2, [r1]
 800c63a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c63c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1e1      	bne.n	800c606 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3314      	adds	r3, #20
 800c648:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	3314      	adds	r3, #20
 800c662:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c666:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c668:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c66c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c66e:	e841 2300 	strex	r3, r2, [r1]
 800c672:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1e3      	bne.n	800c642 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2220      	movs	r2, #32
 800c67e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	330c      	adds	r3, #12
 800c68e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c692:	e853 3f00 	ldrex	r3, [r3]
 800c696:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c69a:	f023 0310 	bic.w	r3, r3, #16
 800c69e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	330c      	adds	r3, #12
 800c6a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c6ac:	65ba      	str	r2, [r7, #88]	; 0x58
 800c6ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c6b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6b4:	e841 2300 	strex	r3, r2, [r1]
 800c6b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1e3      	bne.n	800c688 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7fb fbdb 	bl	8007e80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f8c0 	bl	800c860 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c6e0:	e099      	b.n	800c816 <HAL_UART_IRQHandler+0x50e>
 800c6e2:	bf00      	nop
 800c6e4:	0800ccbb 	.word	0x0800ccbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f000 808b 	beq.w	800c81a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f000 8086 	beq.w	800c81a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	330c      	adds	r3, #12
 800c714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c718:	e853 3f00 	ldrex	r3, [r3]
 800c71c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c720:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	330c      	adds	r3, #12
 800c72e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c732:	647a      	str	r2, [r7, #68]	; 0x44
 800c734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c736:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c73a:	e841 2300 	strex	r3, r2, [r1]
 800c73e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1e3      	bne.n	800c70e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3314      	adds	r3, #20
 800c74c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c750:	e853 3f00 	ldrex	r3, [r3]
 800c754:	623b      	str	r3, [r7, #32]
   return(result);
 800c756:	6a3b      	ldr	r3, [r7, #32]
 800c758:	f023 0301 	bic.w	r3, r3, #1
 800c75c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	3314      	adds	r3, #20
 800c766:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c76a:	633a      	str	r2, [r7, #48]	; 0x30
 800c76c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c772:	e841 2300 	strex	r3, r2, [r1]
 800c776:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1e3      	bne.n	800c746 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2220      	movs	r2, #32
 800c782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	330c      	adds	r3, #12
 800c792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	e853 3f00 	ldrex	r3, [r3]
 800c79a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f023 0310 	bic.w	r3, r3, #16
 800c7a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	330c      	adds	r3, #12
 800c7ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c7b0:	61fa      	str	r2, [r7, #28]
 800c7b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b4:	69b9      	ldr	r1, [r7, #24]
 800c7b6:	69fa      	ldr	r2, [r7, #28]
 800c7b8:	e841 2300 	strex	r3, r2, [r1]
 800c7bc:	617b      	str	r3, [r7, #20]
   return(result);
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1e3      	bne.n	800c78c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 f848 	bl	800c860 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c7d0:	e023      	b.n	800c81a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d009      	beq.n	800c7f2 <HAL_UART_IRQHandler+0x4ea>
 800c7de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d003      	beq.n	800c7f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fa79 	bl	800cce2 <UART_Transmit_IT>
    return;
 800c7f0:	e014      	b.n	800c81c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00e      	beq.n	800c81c <HAL_UART_IRQHandler+0x514>
 800c7fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c806:	2b00      	cmp	r3, #0
 800c808:	d008      	beq.n	800c81c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fab9 	bl	800cd82 <UART_EndTransmit_IT>
    return;
 800c810:	e004      	b.n	800c81c <HAL_UART_IRQHandler+0x514>
    return;
 800c812:	bf00      	nop
 800c814:	e002      	b.n	800c81c <HAL_UART_IRQHandler+0x514>
      return;
 800c816:	bf00      	nop
 800c818:	e000      	b.n	800c81c <HAL_UART_IRQHandler+0x514>
      return;
 800c81a:	bf00      	nop
  }
}
 800c81c:	37e8      	adds	r7, #232	; 0xe8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop

0800c824 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c82c:	bf00      	nop
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	460b      	mov	r3, r1
 800c86a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b09c      	sub	sp, #112	; 0x70
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c884:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c890:	2b00      	cmp	r3, #0
 800c892:	d172      	bne.n	800c97a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c896:	2200      	movs	r2, #0
 800c898:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c89a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	330c      	adds	r3, #12
 800c8a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8a4:	e853 3f00 	ldrex	r3, [r3]
 800c8a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	330c      	adds	r3, #12
 800c8b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c8ba:	65ba      	str	r2, [r7, #88]	; 0x58
 800c8bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8c2:	e841 2300 	strex	r3, r2, [r1]
 800c8c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1e5      	bne.n	800c89a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	3314      	adds	r3, #20
 800c8d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	e853 3f00 	ldrex	r3, [r3]
 800c8dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e0:	f023 0301 	bic.w	r3, r3, #1
 800c8e4:	667b      	str	r3, [r7, #100]	; 0x64
 800c8e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	3314      	adds	r3, #20
 800c8ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c8ee:	647a      	str	r2, [r7, #68]	; 0x44
 800c8f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c8f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8f6:	e841 2300 	strex	r3, r2, [r1]
 800c8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1e5      	bne.n	800c8ce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	3314      	adds	r3, #20
 800c908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90c:	e853 3f00 	ldrex	r3, [r3]
 800c910:	623b      	str	r3, [r7, #32]
   return(result);
 800c912:	6a3b      	ldr	r3, [r7, #32]
 800c914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c918:	663b      	str	r3, [r7, #96]	; 0x60
 800c91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	3314      	adds	r3, #20
 800c920:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c922:	633a      	str	r2, [r7, #48]	; 0x30
 800c924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c92a:	e841 2300 	strex	r3, r2, [r1]
 800c92e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1e5      	bne.n	800c902 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c938:	2220      	movs	r2, #32
 800c93a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c93e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c942:	2b01      	cmp	r3, #1
 800c944:	d119      	bne.n	800c97a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	330c      	adds	r3, #12
 800c94c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	e853 3f00 	ldrex	r3, [r3]
 800c954:	60fb      	str	r3, [r7, #12]
   return(result);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f023 0310 	bic.w	r3, r3, #16
 800c95c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c95e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	330c      	adds	r3, #12
 800c964:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c966:	61fa      	str	r2, [r7, #28]
 800c968:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c96a:	69b9      	ldr	r1, [r7, #24]
 800c96c:	69fa      	ldr	r2, [r7, #28]
 800c96e:	e841 2300 	strex	r3, r2, [r1]
 800c972:	617b      	str	r3, [r7, #20]
   return(result);
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1e5      	bne.n	800c946 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c97a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d106      	bne.n	800c990 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c986:	4619      	mov	r1, r3
 800c988:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c98a:	f7ff ff69 	bl	800c860 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c98e:	e002      	b.n	800c996 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c990:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c992:	f7f6 fe9d 	bl	80036d0 <HAL_UART_RxCpltCallback>
}
 800c996:	bf00      	nop
 800c998:	3770      	adds	r7, #112	; 0x70
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d108      	bne.n	800c9c6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c9b8:	085b      	lsrs	r3, r3, #1
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	4619      	mov	r1, r3
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f7ff ff4e 	bl	800c860 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c9c4:	e002      	b.n	800c9cc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f7ff ff36 	bl	800c838 <HAL_UART_RxHalfCpltCallback>
}
 800c9cc:	bf00      	nop
 800c9ce:	3710      	adds	r7, #16
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	695b      	ldr	r3, [r3, #20]
 800c9ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9f0:	2b80      	cmp	r3, #128	; 0x80
 800c9f2:	bf0c      	ite	eq
 800c9f4:	2301      	moveq	r3, #1
 800c9f6:	2300      	movne	r3, #0
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	2b21      	cmp	r3, #33	; 0x21
 800ca06:	d108      	bne.n	800ca1a <UART_DMAError+0x46>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d005      	beq.n	800ca1a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2200      	movs	r2, #0
 800ca12:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ca14:	68b8      	ldr	r0, [r7, #8]
 800ca16:	f000 f8c5 	bl	800cba4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	695b      	ldr	r3, [r3, #20]
 800ca20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca24:	2b40      	cmp	r3, #64	; 0x40
 800ca26:	bf0c      	ite	eq
 800ca28:	2301      	moveq	r3, #1
 800ca2a:	2300      	movne	r3, #0
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2b22      	cmp	r3, #34	; 0x22
 800ca3a:	d108      	bne.n	800ca4e <UART_DMAError+0x7a>
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d005      	beq.n	800ca4e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	2200      	movs	r2, #0
 800ca46:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ca48:	68b8      	ldr	r0, [r7, #8]
 800ca4a:	f000 f8d3 	bl	800cbf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca52:	f043 0210 	orr.w	r2, r3, #16
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca5a:	68b8      	ldr	r0, [r7, #8]
 800ca5c:	f7ff fef6 	bl	800c84c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca60:	bf00      	nop
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b098      	sub	sp, #96	; 0x60
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	4613      	mov	r3, r2
 800ca74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ca76:	68ba      	ldr	r2, [r7, #8]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	88fa      	ldrh	r2, [r7, #6]
 800ca80:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2222      	movs	r2, #34	; 0x22
 800ca8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca94:	4a40      	ldr	r2, [pc, #256]	; (800cb98 <UART_Start_Receive_DMA+0x130>)
 800ca96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9c:	4a3f      	ldr	r2, [pc, #252]	; (800cb9c <UART_Start_Receive_DMA+0x134>)
 800ca9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa4:	4a3e      	ldr	r2, [pc, #248]	; (800cba0 <UART_Start_Receive_DMA+0x138>)
 800caa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caac:	2200      	movs	r2, #0
 800caae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cab0:	f107 0308 	add.w	r3, r7, #8
 800cab4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	3304      	adds	r3, #4
 800cac0:	4619      	mov	r1, r3
 800cac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	88fb      	ldrh	r3, [r7, #6]
 800cac8:	f7fb f982 	bl	8007dd0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cacc:	2300      	movs	r3, #0
 800cace:	613b      	str	r3, [r7, #16]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	613b      	str	r3, [r7, #16]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	613b      	str	r3, [r7, #16]
 800cae0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d019      	beq.n	800cb26 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	330c      	adds	r3, #12
 800caf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cafc:	e853 3f00 	ldrex	r3, [r3]
 800cb00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb08:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	330c      	adds	r3, #12
 800cb10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb12:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cb14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cb18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb1a:	e841 2300 	strex	r3, r2, [r1]
 800cb1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cb20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1e5      	bne.n	800caf2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3314      	adds	r3, #20
 800cb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb30:	e853 3f00 	ldrex	r3, [r3]
 800cb34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb38:	f043 0301 	orr.w	r3, r3, #1
 800cb3c:	657b      	str	r3, [r7, #84]	; 0x54
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3314      	adds	r3, #20
 800cb44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb46:	63ba      	str	r2, [r7, #56]	; 0x38
 800cb48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb4e:	e841 2300 	strex	r3, r2, [r1]
 800cb52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1e5      	bne.n	800cb26 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3314      	adds	r3, #20
 800cb60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	e853 3f00 	ldrex	r3, [r3]
 800cb68:	617b      	str	r3, [r7, #20]
   return(result);
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb70:	653b      	str	r3, [r7, #80]	; 0x50
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	3314      	adds	r3, #20
 800cb78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb7a:	627a      	str	r2, [r7, #36]	; 0x24
 800cb7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb7e:	6a39      	ldr	r1, [r7, #32]
 800cb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb82:	e841 2300 	strex	r3, r2, [r1]
 800cb86:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1e5      	bne.n	800cb5a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3760      	adds	r7, #96	; 0x60
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	0800c879 	.word	0x0800c879
 800cb9c:	0800c99f 	.word	0x0800c99f
 800cba0:	0800c9d5 	.word	0x0800c9d5

0800cba4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b089      	sub	sp, #36	; 0x24
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	330c      	adds	r3, #12
 800cbb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	e853 3f00 	ldrex	r3, [r3]
 800cbba:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cbc2:	61fb      	str	r3, [r7, #28]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	330c      	adds	r3, #12
 800cbca:	69fa      	ldr	r2, [r7, #28]
 800cbcc:	61ba      	str	r2, [r7, #24]
 800cbce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd0:	6979      	ldr	r1, [r7, #20]
 800cbd2:	69ba      	ldr	r2, [r7, #24]
 800cbd4:	e841 2300 	strex	r3, r2, [r1]
 800cbd8:	613b      	str	r3, [r7, #16]
   return(result);
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1e5      	bne.n	800cbac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2220      	movs	r2, #32
 800cbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800cbe8:	bf00      	nop
 800cbea:	3724      	adds	r7, #36	; 0x24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b095      	sub	sp, #84	; 0x54
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	330c      	adds	r3, #12
 800cc02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc06:	e853 3f00 	ldrex	r3, [r3]
 800cc0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	330c      	adds	r3, #12
 800cc1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc1c:	643a      	str	r2, [r7, #64]	; 0x40
 800cc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc24:	e841 2300 	strex	r3, r2, [r1]
 800cc28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1e5      	bne.n	800cbfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	3314      	adds	r3, #20
 800cc36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc38:	6a3b      	ldr	r3, [r7, #32]
 800cc3a:	e853 3f00 	ldrex	r3, [r3]
 800cc3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	f023 0301 	bic.w	r3, r3, #1
 800cc46:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	3314      	adds	r3, #20
 800cc4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc50:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc58:	e841 2300 	strex	r3, r2, [r1]
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e5      	bne.n	800cc30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d119      	bne.n	800cca0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	330c      	adds	r3, #12
 800cc72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	e853 3f00 	ldrex	r3, [r3]
 800cc7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	f023 0310 	bic.w	r3, r3, #16
 800cc82:	647b      	str	r3, [r7, #68]	; 0x44
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	330c      	adds	r3, #12
 800cc8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc8c:	61ba      	str	r2, [r7, #24]
 800cc8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc90:	6979      	ldr	r1, [r7, #20]
 800cc92:	69ba      	ldr	r2, [r7, #24]
 800cc94:	e841 2300 	strex	r3, r2, [r1]
 800cc98:	613b      	str	r3, [r7, #16]
   return(result);
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1e5      	bne.n	800cc6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2220      	movs	r2, #32
 800cca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ccae:	bf00      	nop
 800ccb0:	3754      	adds	r7, #84	; 0x54
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr

0800ccba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b084      	sub	sp, #16
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f7ff fdb9 	bl	800c84c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccda:	bf00      	nop
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cce2:	b480      	push	{r7}
 800cce4:	b085      	sub	sp, #20
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b21      	cmp	r3, #33	; 0x21
 800ccf4:	d13e      	bne.n	800cd74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccfe:	d114      	bne.n	800cd2a <UART_Transmit_IT+0x48>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d110      	bne.n	800cd2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a1b      	ldr	r3, [r3, #32]
 800cd0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	881b      	ldrh	r3, [r3, #0]
 800cd12:	461a      	mov	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a1b      	ldr	r3, [r3, #32]
 800cd22:	1c9a      	adds	r2, r3, #2
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	621a      	str	r2, [r3, #32]
 800cd28:	e008      	b.n	800cd3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6a1b      	ldr	r3, [r3, #32]
 800cd2e:	1c59      	adds	r1, r3, #1
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	6211      	str	r1, [r2, #32]
 800cd34:	781a      	ldrb	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	3b01      	subs	r3, #1
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10f      	bne.n	800cd70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68da      	ldr	r2, [r3, #12]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68da      	ldr	r2, [r3, #12]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	e000      	b.n	800cd76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cd74:	2302      	movs	r3, #2
  }
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3714      	adds	r7, #20
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr

0800cd82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b082      	sub	sp, #8
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	68da      	ldr	r2, [r3, #12]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2220      	movs	r2, #32
 800cd9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7ff fd3e 	bl	800c824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b08c      	sub	sp, #48	; 0x30
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b22      	cmp	r3, #34	; 0x22
 800cdc4:	f040 80ab 	bne.w	800cf1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdd0:	d117      	bne.n	800ce02 <UART_Receive_IT+0x50>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d113      	bne.n	800ce02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cdda:	2300      	movs	r3, #0
 800cddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdfa:	1c9a      	adds	r2, r3, #2
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	629a      	str	r2, [r3, #40]	; 0x28
 800ce00:	e026      	b.n	800ce50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce14:	d007      	beq.n	800ce26 <UART_Receive_IT+0x74>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10a      	bne.n	800ce34 <UART_Receive_IT+0x82>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d106      	bne.n	800ce34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	e008      	b.n	800ce46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce40:	b2da      	uxtb	r2, r3
 800ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce4a:	1c5a      	adds	r2, r3, #1
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	3b01      	subs	r3, #1
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d15a      	bne.n	800cf1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	68da      	ldr	r2, [r3, #12]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f022 0220 	bic.w	r2, r2, #32
 800ce72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	68da      	ldr	r2, [r3, #12]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ce82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	695a      	ldr	r2, [r3, #20]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f022 0201 	bic.w	r2, r2, #1
 800ce92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2220      	movs	r2, #32
 800ce98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d135      	bne.n	800cf10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	330c      	adds	r3, #12
 800ceb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	e853 3f00 	ldrex	r3, [r3]
 800ceb8:	613b      	str	r3, [r7, #16]
   return(result);
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	f023 0310 	bic.w	r3, r3, #16
 800cec0:	627b      	str	r3, [r7, #36]	; 0x24
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	330c      	adds	r3, #12
 800cec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceca:	623a      	str	r2, [r7, #32]
 800cecc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cece:	69f9      	ldr	r1, [r7, #28]
 800ced0:	6a3a      	ldr	r2, [r7, #32]
 800ced2:	e841 2300 	strex	r3, r2, [r1]
 800ced6:	61bb      	str	r3, [r7, #24]
   return(result);
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1e5      	bne.n	800ceaa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f003 0310 	and.w	r3, r3, #16
 800cee8:	2b10      	cmp	r3, #16
 800ceea:	d10a      	bne.n	800cf02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ceec:	2300      	movs	r3, #0
 800ceee:	60fb      	str	r3, [r7, #12]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	60fb      	str	r3, [r7, #12]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf06:	4619      	mov	r1, r3
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7ff fca9 	bl	800c860 <HAL_UARTEx_RxEventCallback>
 800cf0e:	e002      	b.n	800cf16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7f6 fbdd 	bl	80036d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cf16:	2300      	movs	r3, #0
 800cf18:	e002      	b.n	800cf20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	e000      	b.n	800cf20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cf1e:	2302      	movs	r3, #2
  }
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3730      	adds	r7, #48	; 0x30
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf2c:	b0c0      	sub	sp, #256	; 0x100
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cf40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf44:	68d9      	ldr	r1, [r3, #12]
 800cf46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	ea40 0301 	orr.w	r3, r0, r1
 800cf50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cf52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf56:	689a      	ldr	r2, [r3, #8]
 800cf58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	431a      	orrs	r2, r3
 800cf60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	431a      	orrs	r2, r3
 800cf68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf6c:	69db      	ldr	r3, [r3, #28]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cf74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cf80:	f021 010c 	bic.w	r1, r1, #12
 800cf84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cf8e:	430b      	orrs	r3, r1
 800cf90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	695b      	ldr	r3, [r3, #20]
 800cf9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cf9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfa2:	6999      	ldr	r1, [r3, #24]
 800cfa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	ea40 0301 	orr.w	r3, r0, r1
 800cfae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cfb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	4b8f      	ldr	r3, [pc, #572]	; (800d1f4 <UART_SetConfig+0x2cc>)
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d005      	beq.n	800cfc8 <UART_SetConfig+0xa0>
 800cfbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	4b8d      	ldr	r3, [pc, #564]	; (800d1f8 <UART_SetConfig+0x2d0>)
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d104      	bne.n	800cfd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cfc8:	f7fd f930 	bl	800a22c <HAL_RCC_GetPCLK2Freq>
 800cfcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cfd0:	e003      	b.n	800cfda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cfd2:	f7fd f917 	bl	800a204 <HAL_RCC_GetPCLK1Freq>
 800cfd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfde:	69db      	ldr	r3, [r3, #28]
 800cfe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfe4:	f040 810c 	bne.w	800d200 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cfe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfec:	2200      	movs	r2, #0
 800cfee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cff2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cff6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cffa:	4622      	mov	r2, r4
 800cffc:	462b      	mov	r3, r5
 800cffe:	1891      	adds	r1, r2, r2
 800d000:	65b9      	str	r1, [r7, #88]	; 0x58
 800d002:	415b      	adcs	r3, r3
 800d004:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d006:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d00a:	4621      	mov	r1, r4
 800d00c:	eb12 0801 	adds.w	r8, r2, r1
 800d010:	4629      	mov	r1, r5
 800d012:	eb43 0901 	adc.w	r9, r3, r1
 800d016:	f04f 0200 	mov.w	r2, #0
 800d01a:	f04f 0300 	mov.w	r3, #0
 800d01e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d02a:	4690      	mov	r8, r2
 800d02c:	4699      	mov	r9, r3
 800d02e:	4623      	mov	r3, r4
 800d030:	eb18 0303 	adds.w	r3, r8, r3
 800d034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d038:	462b      	mov	r3, r5
 800d03a:	eb49 0303 	adc.w	r3, r9, r3
 800d03e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d04e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d052:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d056:	460b      	mov	r3, r1
 800d058:	18db      	adds	r3, r3, r3
 800d05a:	653b      	str	r3, [r7, #80]	; 0x50
 800d05c:	4613      	mov	r3, r2
 800d05e:	eb42 0303 	adc.w	r3, r2, r3
 800d062:	657b      	str	r3, [r7, #84]	; 0x54
 800d064:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d068:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d06c:	f7f3 fe06 	bl	8000c7c <__aeabi_uldivmod>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	4b61      	ldr	r3, [pc, #388]	; (800d1fc <UART_SetConfig+0x2d4>)
 800d076:	fba3 2302 	umull	r2, r3, r3, r2
 800d07a:	095b      	lsrs	r3, r3, #5
 800d07c:	011c      	lsls	r4, r3, #4
 800d07e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d082:	2200      	movs	r2, #0
 800d084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d088:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d08c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d090:	4642      	mov	r2, r8
 800d092:	464b      	mov	r3, r9
 800d094:	1891      	adds	r1, r2, r2
 800d096:	64b9      	str	r1, [r7, #72]	; 0x48
 800d098:	415b      	adcs	r3, r3
 800d09a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d09c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d0a0:	4641      	mov	r1, r8
 800d0a2:	eb12 0a01 	adds.w	sl, r2, r1
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	eb43 0b01 	adc.w	fp, r3, r1
 800d0ac:	f04f 0200 	mov.w	r2, #0
 800d0b0:	f04f 0300 	mov.w	r3, #0
 800d0b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d0b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d0bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0c0:	4692      	mov	sl, r2
 800d0c2:	469b      	mov	fp, r3
 800d0c4:	4643      	mov	r3, r8
 800d0c6:	eb1a 0303 	adds.w	r3, sl, r3
 800d0ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d0ce:	464b      	mov	r3, r9
 800d0d0:	eb4b 0303 	adc.w	r3, fp, r3
 800d0d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d0e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d0e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	18db      	adds	r3, r3, r3
 800d0f0:	643b      	str	r3, [r7, #64]	; 0x40
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	eb42 0303 	adc.w	r3, r2, r3
 800d0f8:	647b      	str	r3, [r7, #68]	; 0x44
 800d0fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d0fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d102:	f7f3 fdbb 	bl	8000c7c <__aeabi_uldivmod>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	4611      	mov	r1, r2
 800d10c:	4b3b      	ldr	r3, [pc, #236]	; (800d1fc <UART_SetConfig+0x2d4>)
 800d10e:	fba3 2301 	umull	r2, r3, r3, r1
 800d112:	095b      	lsrs	r3, r3, #5
 800d114:	2264      	movs	r2, #100	; 0x64
 800d116:	fb02 f303 	mul.w	r3, r2, r3
 800d11a:	1acb      	subs	r3, r1, r3
 800d11c:	00db      	lsls	r3, r3, #3
 800d11e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d122:	4b36      	ldr	r3, [pc, #216]	; (800d1fc <UART_SetConfig+0x2d4>)
 800d124:	fba3 2302 	umull	r2, r3, r3, r2
 800d128:	095b      	lsrs	r3, r3, #5
 800d12a:	005b      	lsls	r3, r3, #1
 800d12c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d130:	441c      	add	r4, r3
 800d132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d136:	2200      	movs	r2, #0
 800d138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d13c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d140:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d144:	4642      	mov	r2, r8
 800d146:	464b      	mov	r3, r9
 800d148:	1891      	adds	r1, r2, r2
 800d14a:	63b9      	str	r1, [r7, #56]	; 0x38
 800d14c:	415b      	adcs	r3, r3
 800d14e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d154:	4641      	mov	r1, r8
 800d156:	1851      	adds	r1, r2, r1
 800d158:	6339      	str	r1, [r7, #48]	; 0x30
 800d15a:	4649      	mov	r1, r9
 800d15c:	414b      	adcs	r3, r1
 800d15e:	637b      	str	r3, [r7, #52]	; 0x34
 800d160:	f04f 0200 	mov.w	r2, #0
 800d164:	f04f 0300 	mov.w	r3, #0
 800d168:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d16c:	4659      	mov	r1, fp
 800d16e:	00cb      	lsls	r3, r1, #3
 800d170:	4651      	mov	r1, sl
 800d172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d176:	4651      	mov	r1, sl
 800d178:	00ca      	lsls	r2, r1, #3
 800d17a:	4610      	mov	r0, r2
 800d17c:	4619      	mov	r1, r3
 800d17e:	4603      	mov	r3, r0
 800d180:	4642      	mov	r2, r8
 800d182:	189b      	adds	r3, r3, r2
 800d184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d188:	464b      	mov	r3, r9
 800d18a:	460a      	mov	r2, r1
 800d18c:	eb42 0303 	adc.w	r3, r2, r3
 800d190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d1a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d1a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	18db      	adds	r3, r3, r3
 800d1ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	eb42 0303 	adc.w	r3, r2, r3
 800d1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d1ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d1be:	f7f3 fd5d 	bl	8000c7c <__aeabi_uldivmod>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	4b0d      	ldr	r3, [pc, #52]	; (800d1fc <UART_SetConfig+0x2d4>)
 800d1c8:	fba3 1302 	umull	r1, r3, r3, r2
 800d1cc:	095b      	lsrs	r3, r3, #5
 800d1ce:	2164      	movs	r1, #100	; 0x64
 800d1d0:	fb01 f303 	mul.w	r3, r1, r3
 800d1d4:	1ad3      	subs	r3, r2, r3
 800d1d6:	00db      	lsls	r3, r3, #3
 800d1d8:	3332      	adds	r3, #50	; 0x32
 800d1da:	4a08      	ldr	r2, [pc, #32]	; (800d1fc <UART_SetConfig+0x2d4>)
 800d1dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d1e0:	095b      	lsrs	r3, r3, #5
 800d1e2:	f003 0207 	and.w	r2, r3, #7
 800d1e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4422      	add	r2, r4
 800d1ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d1f0:	e105      	b.n	800d3fe <UART_SetConfig+0x4d6>
 800d1f2:	bf00      	nop
 800d1f4:	40011000 	.word	0x40011000
 800d1f8:	40011400 	.word	0x40011400
 800d1fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d204:	2200      	movs	r2, #0
 800d206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d20a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d20e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d212:	4642      	mov	r2, r8
 800d214:	464b      	mov	r3, r9
 800d216:	1891      	adds	r1, r2, r2
 800d218:	6239      	str	r1, [r7, #32]
 800d21a:	415b      	adcs	r3, r3
 800d21c:	627b      	str	r3, [r7, #36]	; 0x24
 800d21e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d222:	4641      	mov	r1, r8
 800d224:	1854      	adds	r4, r2, r1
 800d226:	4649      	mov	r1, r9
 800d228:	eb43 0501 	adc.w	r5, r3, r1
 800d22c:	f04f 0200 	mov.w	r2, #0
 800d230:	f04f 0300 	mov.w	r3, #0
 800d234:	00eb      	lsls	r3, r5, #3
 800d236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d23a:	00e2      	lsls	r2, r4, #3
 800d23c:	4614      	mov	r4, r2
 800d23e:	461d      	mov	r5, r3
 800d240:	4643      	mov	r3, r8
 800d242:	18e3      	adds	r3, r4, r3
 800d244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d248:	464b      	mov	r3, r9
 800d24a:	eb45 0303 	adc.w	r3, r5, r3
 800d24e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d25e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d262:	f04f 0200 	mov.w	r2, #0
 800d266:	f04f 0300 	mov.w	r3, #0
 800d26a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d26e:	4629      	mov	r1, r5
 800d270:	008b      	lsls	r3, r1, #2
 800d272:	4621      	mov	r1, r4
 800d274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d278:	4621      	mov	r1, r4
 800d27a:	008a      	lsls	r2, r1, #2
 800d27c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d280:	f7f3 fcfc 	bl	8000c7c <__aeabi_uldivmod>
 800d284:	4602      	mov	r2, r0
 800d286:	460b      	mov	r3, r1
 800d288:	4b60      	ldr	r3, [pc, #384]	; (800d40c <UART_SetConfig+0x4e4>)
 800d28a:	fba3 2302 	umull	r2, r3, r3, r2
 800d28e:	095b      	lsrs	r3, r3, #5
 800d290:	011c      	lsls	r4, r3, #4
 800d292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d296:	2200      	movs	r2, #0
 800d298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d29c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d2a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d2a4:	4642      	mov	r2, r8
 800d2a6:	464b      	mov	r3, r9
 800d2a8:	1891      	adds	r1, r2, r2
 800d2aa:	61b9      	str	r1, [r7, #24]
 800d2ac:	415b      	adcs	r3, r3
 800d2ae:	61fb      	str	r3, [r7, #28]
 800d2b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d2b4:	4641      	mov	r1, r8
 800d2b6:	1851      	adds	r1, r2, r1
 800d2b8:	6139      	str	r1, [r7, #16]
 800d2ba:	4649      	mov	r1, r9
 800d2bc:	414b      	adcs	r3, r1
 800d2be:	617b      	str	r3, [r7, #20]
 800d2c0:	f04f 0200 	mov.w	r2, #0
 800d2c4:	f04f 0300 	mov.w	r3, #0
 800d2c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d2cc:	4659      	mov	r1, fp
 800d2ce:	00cb      	lsls	r3, r1, #3
 800d2d0:	4651      	mov	r1, sl
 800d2d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2d6:	4651      	mov	r1, sl
 800d2d8:	00ca      	lsls	r2, r1, #3
 800d2da:	4610      	mov	r0, r2
 800d2dc:	4619      	mov	r1, r3
 800d2de:	4603      	mov	r3, r0
 800d2e0:	4642      	mov	r2, r8
 800d2e2:	189b      	adds	r3, r3, r2
 800d2e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d2e8:	464b      	mov	r3, r9
 800d2ea:	460a      	mov	r2, r1
 800d2ec:	eb42 0303 	adc.w	r3, r2, r3
 800d2f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d2f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	67bb      	str	r3, [r7, #120]	; 0x78
 800d2fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d300:	f04f 0200 	mov.w	r2, #0
 800d304:	f04f 0300 	mov.w	r3, #0
 800d308:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d30c:	4649      	mov	r1, r9
 800d30e:	008b      	lsls	r3, r1, #2
 800d310:	4641      	mov	r1, r8
 800d312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d316:	4641      	mov	r1, r8
 800d318:	008a      	lsls	r2, r1, #2
 800d31a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d31e:	f7f3 fcad 	bl	8000c7c <__aeabi_uldivmod>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	4b39      	ldr	r3, [pc, #228]	; (800d40c <UART_SetConfig+0x4e4>)
 800d328:	fba3 1302 	umull	r1, r3, r3, r2
 800d32c:	095b      	lsrs	r3, r3, #5
 800d32e:	2164      	movs	r1, #100	; 0x64
 800d330:	fb01 f303 	mul.w	r3, r1, r3
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	011b      	lsls	r3, r3, #4
 800d338:	3332      	adds	r3, #50	; 0x32
 800d33a:	4a34      	ldr	r2, [pc, #208]	; (800d40c <UART_SetConfig+0x4e4>)
 800d33c:	fba2 2303 	umull	r2, r3, r2, r3
 800d340:	095b      	lsrs	r3, r3, #5
 800d342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d346:	441c      	add	r4, r3
 800d348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d34c:	2200      	movs	r2, #0
 800d34e:	673b      	str	r3, [r7, #112]	; 0x70
 800d350:	677a      	str	r2, [r7, #116]	; 0x74
 800d352:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d356:	4642      	mov	r2, r8
 800d358:	464b      	mov	r3, r9
 800d35a:	1891      	adds	r1, r2, r2
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	415b      	adcs	r3, r3
 800d360:	60fb      	str	r3, [r7, #12]
 800d362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d366:	4641      	mov	r1, r8
 800d368:	1851      	adds	r1, r2, r1
 800d36a:	6039      	str	r1, [r7, #0]
 800d36c:	4649      	mov	r1, r9
 800d36e:	414b      	adcs	r3, r1
 800d370:	607b      	str	r3, [r7, #4]
 800d372:	f04f 0200 	mov.w	r2, #0
 800d376:	f04f 0300 	mov.w	r3, #0
 800d37a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d37e:	4659      	mov	r1, fp
 800d380:	00cb      	lsls	r3, r1, #3
 800d382:	4651      	mov	r1, sl
 800d384:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d388:	4651      	mov	r1, sl
 800d38a:	00ca      	lsls	r2, r1, #3
 800d38c:	4610      	mov	r0, r2
 800d38e:	4619      	mov	r1, r3
 800d390:	4603      	mov	r3, r0
 800d392:	4642      	mov	r2, r8
 800d394:	189b      	adds	r3, r3, r2
 800d396:	66bb      	str	r3, [r7, #104]	; 0x68
 800d398:	464b      	mov	r3, r9
 800d39a:	460a      	mov	r2, r1
 800d39c:	eb42 0303 	adc.w	r3, r2, r3
 800d3a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	663b      	str	r3, [r7, #96]	; 0x60
 800d3ac:	667a      	str	r2, [r7, #100]	; 0x64
 800d3ae:	f04f 0200 	mov.w	r2, #0
 800d3b2:	f04f 0300 	mov.w	r3, #0
 800d3b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d3ba:	4649      	mov	r1, r9
 800d3bc:	008b      	lsls	r3, r1, #2
 800d3be:	4641      	mov	r1, r8
 800d3c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d3c4:	4641      	mov	r1, r8
 800d3c6:	008a      	lsls	r2, r1, #2
 800d3c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d3cc:	f7f3 fc56 	bl	8000c7c <__aeabi_uldivmod>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	4b0d      	ldr	r3, [pc, #52]	; (800d40c <UART_SetConfig+0x4e4>)
 800d3d6:	fba3 1302 	umull	r1, r3, r3, r2
 800d3da:	095b      	lsrs	r3, r3, #5
 800d3dc:	2164      	movs	r1, #100	; 0x64
 800d3de:	fb01 f303 	mul.w	r3, r1, r3
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	011b      	lsls	r3, r3, #4
 800d3e6:	3332      	adds	r3, #50	; 0x32
 800d3e8:	4a08      	ldr	r2, [pc, #32]	; (800d40c <UART_SetConfig+0x4e4>)
 800d3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ee:	095b      	lsrs	r3, r3, #5
 800d3f0:	f003 020f 	and.w	r2, r3, #15
 800d3f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4422      	add	r2, r4
 800d3fc:	609a      	str	r2, [r3, #8]
}
 800d3fe:	bf00      	nop
 800d400:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d404:	46bd      	mov	sp, r7
 800d406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d40a:	bf00      	nop
 800d40c:	51eb851f 	.word	0x51eb851f

0800d410 <asctime>:
 800d410:	4b0d      	ldr	r3, [pc, #52]	; (800d448 <asctime+0x38>)
 800d412:	b570      	push	{r4, r5, r6, lr}
 800d414:	681d      	ldr	r5, [r3, #0]
 800d416:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800d418:	4604      	mov	r4, r0
 800d41a:	b976      	cbnz	r6, 800d43a <asctime+0x2a>
 800d41c:	201a      	movs	r0, #26
 800d41e:	f000 f897 	bl	800d550 <malloc>
 800d422:	4602      	mov	r2, r0
 800d424:	6428      	str	r0, [r5, #64]	; 0x40
 800d426:	b920      	cbnz	r0, 800d432 <asctime+0x22>
 800d428:	4b08      	ldr	r3, [pc, #32]	; (800d44c <asctime+0x3c>)
 800d42a:	4809      	ldr	r0, [pc, #36]	; (800d450 <asctime+0x40>)
 800d42c:	2137      	movs	r1, #55	; 0x37
 800d42e:	f000 f837 	bl	800d4a0 <__assert_func>
 800d432:	221a      	movs	r2, #26
 800d434:	4631      	mov	r1, r6
 800d436:	f000 f8a9 	bl	800d58c <memset>
 800d43a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800d43c:	4620      	mov	r0, r4
 800d43e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d442:	f000 b807 	b.w	800d454 <asctime_r>
 800d446:	bf00      	nop
 800d448:	200002c0 	.word	0x200002c0
 800d44c:	0803c404 	.word	0x0803c404
 800d450:	0803c41b 	.word	0x0803c41b

0800d454 <asctime_r>:
 800d454:	b510      	push	{r4, lr}
 800d456:	460c      	mov	r4, r1
 800d458:	6941      	ldr	r1, [r0, #20]
 800d45a:	6903      	ldr	r3, [r0, #16]
 800d45c:	6982      	ldr	r2, [r0, #24]
 800d45e:	b086      	sub	sp, #24
 800d460:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800d464:	9104      	str	r1, [sp, #16]
 800d466:	6801      	ldr	r1, [r0, #0]
 800d468:	9103      	str	r1, [sp, #12]
 800d46a:	6841      	ldr	r1, [r0, #4]
 800d46c:	9102      	str	r1, [sp, #8]
 800d46e:	6881      	ldr	r1, [r0, #8]
 800d470:	9101      	str	r1, [sp, #4]
 800d472:	68c1      	ldr	r1, [r0, #12]
 800d474:	9100      	str	r1, [sp, #0]
 800d476:	4907      	ldr	r1, [pc, #28]	; (800d494 <asctime_r+0x40>)
 800d478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d47c:	440b      	add	r3, r1
 800d47e:	4906      	ldr	r1, [pc, #24]	; (800d498 <asctime_r+0x44>)
 800d480:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d484:	440a      	add	r2, r1
 800d486:	4620      	mov	r0, r4
 800d488:	4904      	ldr	r1, [pc, #16]	; (800d49c <asctime_r+0x48>)
 800d48a:	f001 f9ad 	bl	800e7e8 <siprintf>
 800d48e:	4620      	mov	r0, r4
 800d490:	b006      	add	sp, #24
 800d492:	bd10      	pop	{r4, pc}
 800d494:	0803c4ac 	.word	0x0803c4ac
 800d498:	0803c497 	.word	0x0803c497
 800d49c:	0803c477 	.word	0x0803c477

0800d4a0 <__assert_func>:
 800d4a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4a2:	4614      	mov	r4, r2
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	4b09      	ldr	r3, [pc, #36]	; (800d4cc <__assert_func+0x2c>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	68d8      	ldr	r0, [r3, #12]
 800d4ae:	b14c      	cbz	r4, 800d4c4 <__assert_func+0x24>
 800d4b0:	4b07      	ldr	r3, [pc, #28]	; (800d4d0 <__assert_func+0x30>)
 800d4b2:	9100      	str	r1, [sp, #0]
 800d4b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4b8:	4906      	ldr	r1, [pc, #24]	; (800d4d4 <__assert_func+0x34>)
 800d4ba:	462b      	mov	r3, r5
 800d4bc:	f000 f812 	bl	800d4e4 <fiprintf>
 800d4c0:	f002 fc20 	bl	800fd04 <abort>
 800d4c4:	4b04      	ldr	r3, [pc, #16]	; (800d4d8 <__assert_func+0x38>)
 800d4c6:	461c      	mov	r4, r3
 800d4c8:	e7f3      	b.n	800d4b2 <__assert_func+0x12>
 800d4ca:	bf00      	nop
 800d4cc:	200002c0 	.word	0x200002c0
 800d4d0:	0803c4d0 	.word	0x0803c4d0
 800d4d4:	0803c4dd 	.word	0x0803c4dd
 800d4d8:	0803c496 	.word	0x0803c496

0800d4dc <atoi>:
 800d4dc:	220a      	movs	r2, #10
 800d4de:	2100      	movs	r1, #0
 800d4e0:	f002 b87a 	b.w	800f5d8 <strtol>

0800d4e4 <fiprintf>:
 800d4e4:	b40e      	push	{r1, r2, r3}
 800d4e6:	b503      	push	{r0, r1, lr}
 800d4e8:	4601      	mov	r1, r0
 800d4ea:	ab03      	add	r3, sp, #12
 800d4ec:	4805      	ldr	r0, [pc, #20]	; (800d504 <fiprintf+0x20>)
 800d4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4f2:	6800      	ldr	r0, [r0, #0]
 800d4f4:	9301      	str	r3, [sp, #4]
 800d4f6:	f000 fbcd 	bl	800dc94 <_vfiprintf_r>
 800d4fa:	b002      	add	sp, #8
 800d4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d500:	b003      	add	sp, #12
 800d502:	4770      	bx	lr
 800d504:	200002c0 	.word	0x200002c0

0800d508 <__libc_init_array>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	4d0d      	ldr	r5, [pc, #52]	; (800d540 <__libc_init_array+0x38>)
 800d50c:	4c0d      	ldr	r4, [pc, #52]	; (800d544 <__libc_init_array+0x3c>)
 800d50e:	1b64      	subs	r4, r4, r5
 800d510:	10a4      	asrs	r4, r4, #2
 800d512:	2600      	movs	r6, #0
 800d514:	42a6      	cmp	r6, r4
 800d516:	d109      	bne.n	800d52c <__libc_init_array+0x24>
 800d518:	4d0b      	ldr	r5, [pc, #44]	; (800d548 <__libc_init_array+0x40>)
 800d51a:	4c0c      	ldr	r4, [pc, #48]	; (800d54c <__libc_init_array+0x44>)
 800d51c:	f007 fb86 	bl	8014c2c <_init>
 800d520:	1b64      	subs	r4, r4, r5
 800d522:	10a4      	asrs	r4, r4, #2
 800d524:	2600      	movs	r6, #0
 800d526:	42a6      	cmp	r6, r4
 800d528:	d105      	bne.n	800d536 <__libc_init_array+0x2e>
 800d52a:	bd70      	pop	{r4, r5, r6, pc}
 800d52c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d530:	4798      	blx	r3
 800d532:	3601      	adds	r6, #1
 800d534:	e7ee      	b.n	800d514 <__libc_init_array+0xc>
 800d536:	f855 3b04 	ldr.w	r3, [r5], #4
 800d53a:	4798      	blx	r3
 800d53c:	3601      	adds	r6, #1
 800d53e:	e7f2      	b.n	800d526 <__libc_init_array+0x1e>
 800d540:	0803cea0 	.word	0x0803cea0
 800d544:	0803cea0 	.word	0x0803cea0
 800d548:	0803cea0 	.word	0x0803cea0
 800d54c:	0803cea4 	.word	0x0803cea4

0800d550 <malloc>:
 800d550:	4b02      	ldr	r3, [pc, #8]	; (800d55c <malloc+0xc>)
 800d552:	4601      	mov	r1, r0
 800d554:	6818      	ldr	r0, [r3, #0]
 800d556:	f000 baff 	b.w	800db58 <_malloc_r>
 800d55a:	bf00      	nop
 800d55c:	200002c0 	.word	0x200002c0

0800d560 <free>:
 800d560:	4b02      	ldr	r3, [pc, #8]	; (800d56c <free+0xc>)
 800d562:	4601      	mov	r1, r0
 800d564:	6818      	ldr	r0, [r3, #0]
 800d566:	f000 ba8b 	b.w	800da80 <_free_r>
 800d56a:	bf00      	nop
 800d56c:	200002c0 	.word	0x200002c0

0800d570 <memcpy>:
 800d570:	440a      	add	r2, r1
 800d572:	4291      	cmp	r1, r2
 800d574:	f100 33ff 	add.w	r3, r0, #4294967295
 800d578:	d100      	bne.n	800d57c <memcpy+0xc>
 800d57a:	4770      	bx	lr
 800d57c:	b510      	push	{r4, lr}
 800d57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d582:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d586:	4291      	cmp	r1, r2
 800d588:	d1f9      	bne.n	800d57e <memcpy+0xe>
 800d58a:	bd10      	pop	{r4, pc}

0800d58c <memset>:
 800d58c:	4402      	add	r2, r0
 800d58e:	4603      	mov	r3, r0
 800d590:	4293      	cmp	r3, r2
 800d592:	d100      	bne.n	800d596 <memset+0xa>
 800d594:	4770      	bx	lr
 800d596:	f803 1b01 	strb.w	r1, [r3], #1
 800d59a:	e7f9      	b.n	800d590 <memset+0x4>

0800d59c <validate_structure>:
 800d59c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d59e:	6801      	ldr	r1, [r0, #0]
 800d5a0:	293b      	cmp	r1, #59	; 0x3b
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	d911      	bls.n	800d5ca <validate_structure+0x2e>
 800d5a6:	223c      	movs	r2, #60	; 0x3c
 800d5a8:	4668      	mov	r0, sp
 800d5aa:	f002 fbc7 	bl	800fd3c <div>
 800d5ae:	9a01      	ldr	r2, [sp, #4]
 800d5b0:	6863      	ldr	r3, [r4, #4]
 800d5b2:	9900      	ldr	r1, [sp, #0]
 800d5b4:	2a00      	cmp	r2, #0
 800d5b6:	440b      	add	r3, r1
 800d5b8:	6063      	str	r3, [r4, #4]
 800d5ba:	bfbb      	ittet	lt
 800d5bc:	323c      	addlt	r2, #60	; 0x3c
 800d5be:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d5c2:	6022      	strge	r2, [r4, #0]
 800d5c4:	6022      	strlt	r2, [r4, #0]
 800d5c6:	bfb8      	it	lt
 800d5c8:	6063      	strlt	r3, [r4, #4]
 800d5ca:	6861      	ldr	r1, [r4, #4]
 800d5cc:	293b      	cmp	r1, #59	; 0x3b
 800d5ce:	d911      	bls.n	800d5f4 <validate_structure+0x58>
 800d5d0:	223c      	movs	r2, #60	; 0x3c
 800d5d2:	4668      	mov	r0, sp
 800d5d4:	f002 fbb2 	bl	800fd3c <div>
 800d5d8:	9a01      	ldr	r2, [sp, #4]
 800d5da:	68a3      	ldr	r3, [r4, #8]
 800d5dc:	9900      	ldr	r1, [sp, #0]
 800d5de:	2a00      	cmp	r2, #0
 800d5e0:	440b      	add	r3, r1
 800d5e2:	60a3      	str	r3, [r4, #8]
 800d5e4:	bfbb      	ittet	lt
 800d5e6:	323c      	addlt	r2, #60	; 0x3c
 800d5e8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d5ec:	6062      	strge	r2, [r4, #4]
 800d5ee:	6062      	strlt	r2, [r4, #4]
 800d5f0:	bfb8      	it	lt
 800d5f2:	60a3      	strlt	r3, [r4, #8]
 800d5f4:	68a1      	ldr	r1, [r4, #8]
 800d5f6:	2917      	cmp	r1, #23
 800d5f8:	d911      	bls.n	800d61e <validate_structure+0x82>
 800d5fa:	2218      	movs	r2, #24
 800d5fc:	4668      	mov	r0, sp
 800d5fe:	f002 fb9d 	bl	800fd3c <div>
 800d602:	9a01      	ldr	r2, [sp, #4]
 800d604:	68e3      	ldr	r3, [r4, #12]
 800d606:	9900      	ldr	r1, [sp, #0]
 800d608:	2a00      	cmp	r2, #0
 800d60a:	440b      	add	r3, r1
 800d60c:	60e3      	str	r3, [r4, #12]
 800d60e:	bfbb      	ittet	lt
 800d610:	3218      	addlt	r2, #24
 800d612:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d616:	60a2      	strge	r2, [r4, #8]
 800d618:	60a2      	strlt	r2, [r4, #8]
 800d61a:	bfb8      	it	lt
 800d61c:	60e3      	strlt	r3, [r4, #12]
 800d61e:	6921      	ldr	r1, [r4, #16]
 800d620:	290b      	cmp	r1, #11
 800d622:	d911      	bls.n	800d648 <validate_structure+0xac>
 800d624:	220c      	movs	r2, #12
 800d626:	4668      	mov	r0, sp
 800d628:	f002 fb88 	bl	800fd3c <div>
 800d62c:	9a01      	ldr	r2, [sp, #4]
 800d62e:	6963      	ldr	r3, [r4, #20]
 800d630:	9900      	ldr	r1, [sp, #0]
 800d632:	2a00      	cmp	r2, #0
 800d634:	440b      	add	r3, r1
 800d636:	6163      	str	r3, [r4, #20]
 800d638:	bfbb      	ittet	lt
 800d63a:	320c      	addlt	r2, #12
 800d63c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d640:	6122      	strge	r2, [r4, #16]
 800d642:	6122      	strlt	r2, [r4, #16]
 800d644:	bfb8      	it	lt
 800d646:	6163      	strlt	r3, [r4, #20]
 800d648:	6963      	ldr	r3, [r4, #20]
 800d64a:	0798      	lsls	r0, r3, #30
 800d64c:	d120      	bne.n	800d690 <validate_structure+0xf4>
 800d64e:	2164      	movs	r1, #100	; 0x64
 800d650:	fb93 f2f1 	sdiv	r2, r3, r1
 800d654:	fb01 3212 	mls	r2, r1, r2, r3
 800d658:	b9e2      	cbnz	r2, 800d694 <validate_structure+0xf8>
 800d65a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800d65e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d662:	fb93 f1f2 	sdiv	r1, r3, r2
 800d666:	fb02 3311 	mls	r3, r2, r1, r3
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	bf14      	ite	ne
 800d66e:	231c      	movne	r3, #28
 800d670:	231d      	moveq	r3, #29
 800d672:	68e2      	ldr	r2, [r4, #12]
 800d674:	2a00      	cmp	r2, #0
 800d676:	dc0f      	bgt.n	800d698 <validate_structure+0xfc>
 800d678:	4f33      	ldr	r7, [pc, #204]	; (800d748 <validate_structure+0x1ac>)
 800d67a:	260b      	movs	r6, #11
 800d67c:	2064      	movs	r0, #100	; 0x64
 800d67e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800d682:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800d686:	f1bc 0f00 	cmp.w	ip, #0
 800d68a:	dd31      	ble.n	800d6f0 <validate_structure+0x154>
 800d68c:	b003      	add	sp, #12
 800d68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d690:	231c      	movs	r3, #28
 800d692:	e7ee      	b.n	800d672 <validate_structure+0xd6>
 800d694:	231d      	movs	r3, #29
 800d696:	e7ec      	b.n	800d672 <validate_structure+0xd6>
 800d698:	4e2b      	ldr	r6, [pc, #172]	; (800d748 <validate_structure+0x1ac>)
 800d69a:	2700      	movs	r7, #0
 800d69c:	2064      	movs	r0, #100	; 0x64
 800d69e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800d6a2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800d6a6:	2a01      	cmp	r2, #1
 800d6a8:	bf14      	ite	ne
 800d6aa:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800d6ae:	469c      	moveq	ip, r3
 800d6b0:	4561      	cmp	r1, ip
 800d6b2:	ddeb      	ble.n	800d68c <validate_structure+0xf0>
 800d6b4:	3201      	adds	r2, #1
 800d6b6:	eba1 010c 	sub.w	r1, r1, ip
 800d6ba:	2a0c      	cmp	r2, #12
 800d6bc:	60e1      	str	r1, [r4, #12]
 800d6be:	6122      	str	r2, [r4, #16]
 800d6c0:	d1ef      	bne.n	800d6a2 <validate_structure+0x106>
 800d6c2:	6963      	ldr	r3, [r4, #20]
 800d6c4:	1c5a      	adds	r2, r3, #1
 800d6c6:	0791      	lsls	r1, r2, #30
 800d6c8:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800d6cc:	d137      	bne.n	800d73e <validate_structure+0x1a2>
 800d6ce:	fb92 f1f0 	sdiv	r1, r2, r0
 800d6d2:	fb00 2211 	mls	r2, r0, r1, r2
 800d6d6:	2a00      	cmp	r2, #0
 800d6d8:	d133      	bne.n	800d742 <validate_structure+0x1a6>
 800d6da:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800d6de:	fb93 f2f5 	sdiv	r2, r3, r5
 800d6e2:	fb05 3312 	mls	r3, r5, r2, r3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	bf14      	ite	ne
 800d6ea:	231c      	movne	r3, #28
 800d6ec:	231d      	moveq	r3, #29
 800d6ee:	e7d8      	b.n	800d6a2 <validate_structure+0x106>
 800d6f0:	6921      	ldr	r1, [r4, #16]
 800d6f2:	3901      	subs	r1, #1
 800d6f4:	6121      	str	r1, [r4, #16]
 800d6f6:	3101      	adds	r1, #1
 800d6f8:	d114      	bne.n	800d724 <validate_structure+0x188>
 800d6fa:	6963      	ldr	r3, [r4, #20]
 800d6fc:	1e5a      	subs	r2, r3, #1
 800d6fe:	0791      	lsls	r1, r2, #30
 800d700:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800d704:	d117      	bne.n	800d736 <validate_structure+0x19a>
 800d706:	fb92 f1f0 	sdiv	r1, r2, r0
 800d70a:	fb00 2211 	mls	r2, r0, r1, r2
 800d70e:	b9a2      	cbnz	r2, 800d73a <validate_structure+0x19e>
 800d710:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800d714:	fb93 f2f5 	sdiv	r2, r3, r5
 800d718:	fb05 3312 	mls	r3, r5, r2, r3
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	bf14      	ite	ne
 800d720:	231c      	movne	r3, #28
 800d722:	231d      	moveq	r3, #29
 800d724:	6922      	ldr	r2, [r4, #16]
 800d726:	2a01      	cmp	r2, #1
 800d728:	bf14      	ite	ne
 800d72a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800d72e:	461a      	moveq	r2, r3
 800d730:	4462      	add	r2, ip
 800d732:	60e2      	str	r2, [r4, #12]
 800d734:	e7a5      	b.n	800d682 <validate_structure+0xe6>
 800d736:	231c      	movs	r3, #28
 800d738:	e7f4      	b.n	800d724 <validate_structure+0x188>
 800d73a:	231d      	movs	r3, #29
 800d73c:	e7f2      	b.n	800d724 <validate_structure+0x188>
 800d73e:	231c      	movs	r3, #28
 800d740:	e7af      	b.n	800d6a2 <validate_structure+0x106>
 800d742:	231d      	movs	r3, #29
 800d744:	e7ad      	b.n	800d6a2 <validate_structure+0x106>
 800d746:	bf00      	nop
 800d748:	0803c510 	.word	0x0803c510

0800d74c <mktime>:
 800d74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d750:	b085      	sub	sp, #20
 800d752:	4607      	mov	r7, r0
 800d754:	f003 fb84 	bl	8010e60 <__gettzinfo>
 800d758:	4681      	mov	r9, r0
 800d75a:	4638      	mov	r0, r7
 800d75c:	f7ff ff1e 	bl	800d59c <validate_structure>
 800d760:	e9d7 4000 	ldrd	r4, r0, [r7]
 800d764:	233c      	movs	r3, #60	; 0x3c
 800d766:	fb03 4400 	mla	r4, r3, r0, r4
 800d76a:	68b8      	ldr	r0, [r7, #8]
 800d76c:	4abc      	ldr	r2, [pc, #752]	; (800da60 <mktime+0x314>)
 800d76e:	697e      	ldr	r6, [r7, #20]
 800d770:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d774:	fb03 4400 	mla	r4, r3, r0, r4
 800d778:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800d77c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d780:	3d01      	subs	r5, #1
 800d782:	2b01      	cmp	r3, #1
 800d784:	4415      	add	r5, r2
 800d786:	dd11      	ble.n	800d7ac <mktime+0x60>
 800d788:	07b1      	lsls	r1, r6, #30
 800d78a:	d10f      	bne.n	800d7ac <mktime+0x60>
 800d78c:	2264      	movs	r2, #100	; 0x64
 800d78e:	fb96 f3f2 	sdiv	r3, r6, r2
 800d792:	fb02 6313 	mls	r3, r2, r3, r6
 800d796:	b943      	cbnz	r3, 800d7aa <mktime+0x5e>
 800d798:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800d79c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d7a0:	fb93 f1f2 	sdiv	r1, r3, r2
 800d7a4:	fb02 3311 	mls	r3, r2, r1, r3
 800d7a8:	b903      	cbnz	r3, 800d7ac <mktime+0x60>
 800d7aa:	3501      	adds	r5, #1
 800d7ac:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800d7b0:	3310      	adds	r3, #16
 800d7b2:	f644 6220 	movw	r2, #20000	; 0x4e20
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	61fd      	str	r5, [r7, #28]
 800d7ba:	f200 815d 	bhi.w	800da78 <mktime+0x32c>
 800d7be:	2e46      	cmp	r6, #70	; 0x46
 800d7c0:	dd71      	ble.n	800d8a6 <mktime+0x15a>
 800d7c2:	2346      	movs	r3, #70	; 0x46
 800d7c4:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d7c8:	2164      	movs	r1, #100	; 0x64
 800d7ca:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d7ce:	079a      	lsls	r2, r3, #30
 800d7d0:	d163      	bne.n	800d89a <mktime+0x14e>
 800d7d2:	fb93 f2f1 	sdiv	r2, r3, r1
 800d7d6:	fb01 3212 	mls	r2, r1, r2, r3
 800d7da:	2a00      	cmp	r2, #0
 800d7dc:	d160      	bne.n	800d8a0 <mktime+0x154>
 800d7de:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800d7e2:	fb92 fef0 	sdiv	lr, r2, r0
 800d7e6:	fb00 221e 	mls	r2, r0, lr, r2
 800d7ea:	2a00      	cmp	r2, #0
 800d7ec:	bf14      	ite	ne
 800d7ee:	4662      	movne	r2, ip
 800d7f0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	429e      	cmp	r6, r3
 800d7f8:	4415      	add	r5, r2
 800d7fa:	d1e8      	bne.n	800d7ce <mktime+0x82>
 800d7fc:	4b99      	ldr	r3, [pc, #612]	; (800da64 <mktime+0x318>)
 800d7fe:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800d802:	fbc5 4803 	smlal	r4, r8, r5, r3
 800d806:	f002 f819 	bl	800f83c <__tz_lock>
 800d80a:	f002 f823 	bl	800f854 <_tzset_unlocked>
 800d80e:	4b96      	ldr	r3, [pc, #600]	; (800da68 <mktime+0x31c>)
 800d810:	f8d3 b000 	ldr.w	fp, [r3]
 800d814:	f1bb 0f00 	cmp.w	fp, #0
 800d818:	d039      	beq.n	800d88e <mktime+0x142>
 800d81a:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800d81e:	6978      	ldr	r0, [r7, #20]
 800d820:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d824:	f1bb 0f01 	cmp.w	fp, #1
 800d828:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800d82c:	46da      	mov	sl, fp
 800d82e:	bfa8      	it	ge
 800d830:	f04f 0a01 	movge.w	sl, #1
 800d834:	4283      	cmp	r3, r0
 800d836:	d178      	bne.n	800d92a <mktime+0x1de>
 800d838:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800d83c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800d840:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800d844:	1a5b      	subs	r3, r3, r1
 800d846:	9302      	str	r3, [sp, #8]
 800d848:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800d84c:	9303      	str	r3, [sp, #12]
 800d84e:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800d852:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800d856:	9301      	str	r3, [sp, #4]
 800d858:	ebb3 0c02 	subs.w	ip, r3, r2
 800d85c:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800d860:	4564      	cmp	r4, ip
 800d862:	eb78 0300 	sbcs.w	r3, r8, r0
 800d866:	da66      	bge.n	800d936 <mktime+0x1ea>
 800d868:	f8d9 3000 	ldr.w	r3, [r9]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d06f      	beq.n	800d950 <mktime+0x204>
 800d870:	9b02      	ldr	r3, [sp, #8]
 800d872:	429c      	cmp	r4, r3
 800d874:	9b03      	ldr	r3, [sp, #12]
 800d876:	eb78 0303 	sbcs.w	r3, r8, r3
 800d87a:	db03      	blt.n	800d884 <mktime+0x138>
 800d87c:	4564      	cmp	r4, ip
 800d87e:	eb78 0300 	sbcs.w	r3, r8, r0
 800d882:	db6b      	blt.n	800d95c <mktime+0x210>
 800d884:	f1bb 0f00 	cmp.w	fp, #0
 800d888:	f04f 0b00 	mov.w	fp, #0
 800d88c:	da6b      	bge.n	800d966 <mktime+0x21a>
 800d88e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800d892:	190c      	adds	r4, r1, r4
 800d894:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800d898:	e0a9      	b.n	800d9ee <mktime+0x2a2>
 800d89a:	f240 126d 	movw	r2, #365	; 0x16d
 800d89e:	e7a9      	b.n	800d7f4 <mktime+0xa8>
 800d8a0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800d8a4:	e7a6      	b.n	800d7f4 <mktime+0xa8>
 800d8a6:	d0a9      	beq.n	800d7fc <mktime+0xb0>
 800d8a8:	2345      	movs	r3, #69	; 0x45
 800d8aa:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d8ae:	2164      	movs	r1, #100	; 0x64
 800d8b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d8b4:	e012      	b.n	800d8dc <mktime+0x190>
 800d8b6:	bb62      	cbnz	r2, 800d912 <mktime+0x1c6>
 800d8b8:	fb93 f2f1 	sdiv	r2, r3, r1
 800d8bc:	fb01 3212 	mls	r2, r1, r2, r3
 800d8c0:	bb52      	cbnz	r2, 800d918 <mktime+0x1cc>
 800d8c2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800d8c6:	fb92 fef0 	sdiv	lr, r2, r0
 800d8ca:	fb00 221e 	mls	r2, r0, lr, r2
 800d8ce:	2a00      	cmp	r2, #0
 800d8d0:	bf14      	ite	ne
 800d8d2:	4662      	movne	r2, ip
 800d8d4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800d8d8:	1aad      	subs	r5, r5, r2
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	429e      	cmp	r6, r3
 800d8de:	f003 0203 	and.w	r2, r3, #3
 800d8e2:	dbe8      	blt.n	800d8b6 <mktime+0x16a>
 800d8e4:	b9da      	cbnz	r2, 800d91e <mktime+0x1d2>
 800d8e6:	2264      	movs	r2, #100	; 0x64
 800d8e8:	fb96 f3f2 	sdiv	r3, r6, r2
 800d8ec:	fb02 6313 	mls	r3, r2, r3, r6
 800d8f0:	b9c3      	cbnz	r3, 800d924 <mktime+0x1d8>
 800d8f2:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800d8f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d8fa:	fb93 f1f2 	sdiv	r1, r3, r2
 800d8fe:	fb02 3311 	mls	r3, r2, r1, r3
 800d902:	2b00      	cmp	r3, #0
 800d904:	f240 136d 	movw	r3, #365	; 0x16d
 800d908:	bf08      	it	eq
 800d90a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800d90e:	1aed      	subs	r5, r5, r3
 800d910:	e774      	b.n	800d7fc <mktime+0xb0>
 800d912:	f240 126d 	movw	r2, #365	; 0x16d
 800d916:	e7df      	b.n	800d8d8 <mktime+0x18c>
 800d918:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800d91c:	e7dc      	b.n	800d8d8 <mktime+0x18c>
 800d91e:	f240 136d 	movw	r3, #365	; 0x16d
 800d922:	e7f4      	b.n	800d90e <mktime+0x1c2>
 800d924:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800d928:	e7f1      	b.n	800d90e <mktime+0x1c2>
 800d92a:	f001 fedd 	bl	800f6e8 <__tzcalc_limits>
 800d92e:	2800      	cmp	r0, #0
 800d930:	d182      	bne.n	800d838 <mktime+0xec>
 800d932:	46d3      	mov	fp, sl
 800d934:	e050      	b.n	800d9d8 <mktime+0x28c>
 800d936:	9b01      	ldr	r3, [sp, #4]
 800d938:	1a5b      	subs	r3, r3, r1
 800d93a:	9301      	str	r3, [sp, #4]
 800d93c:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800d940:	eb6e 0e03 	sbc.w	lr, lr, r3
 800d944:	9b01      	ldr	r3, [sp, #4]
 800d946:	429c      	cmp	r4, r3
 800d948:	eb78 030e 	sbcs.w	r3, r8, lr
 800d94c:	dbf1      	blt.n	800d932 <mktime+0x1e6>
 800d94e:	e78b      	b.n	800d868 <mktime+0x11c>
 800d950:	9b02      	ldr	r3, [sp, #8]
 800d952:	429c      	cmp	r4, r3
 800d954:	9b03      	ldr	r3, [sp, #12]
 800d956:	eb78 0303 	sbcs.w	r3, r8, r3
 800d95a:	db8f      	blt.n	800d87c <mktime+0x130>
 800d95c:	f1bb 0f00 	cmp.w	fp, #0
 800d960:	db3e      	blt.n	800d9e0 <mktime+0x294>
 800d962:	f04f 0b01 	mov.w	fp, #1
 800d966:	ea8a 0a0b 	eor.w	sl, sl, fp
 800d96a:	f1ba 0f01 	cmp.w	sl, #1
 800d96e:	d133      	bne.n	800d9d8 <mktime+0x28c>
 800d970:	f1bb 0f00 	cmp.w	fp, #0
 800d974:	d04e      	beq.n	800da14 <mktime+0x2c8>
 800d976:	1a52      	subs	r2, r2, r1
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800d97e:	4413      	add	r3, r2
 800d980:	1914      	adds	r4, r2, r4
 800d982:	603b      	str	r3, [r7, #0]
 800d984:	4638      	mov	r0, r7
 800d986:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800d98a:	f7ff fe07 	bl	800d59c <validate_structure>
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	ebb2 020a 	subs.w	r2, r2, sl
 800d994:	d020      	beq.n	800d9d8 <mktime+0x28c>
 800d996:	2a01      	cmp	r2, #1
 800d998:	dc3e      	bgt.n	800da18 <mktime+0x2cc>
 800d99a:	1c90      	adds	r0, r2, #2
 800d99c:	bfd8      	it	le
 800d99e:	2201      	movle	r2, #1
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	18d3      	adds	r3, r2, r3
 800d9a4:	4415      	add	r5, r2
 800d9a6:	d540      	bpl.n	800da2a <mktime+0x2de>
 800d9a8:	1e73      	subs	r3, r6, #1
 800d9aa:	0799      	lsls	r1, r3, #30
 800d9ac:	d137      	bne.n	800da1e <mktime+0x2d2>
 800d9ae:	2264      	movs	r2, #100	; 0x64
 800d9b0:	fb93 f1f2 	sdiv	r1, r3, r2
 800d9b4:	fb02 3311 	mls	r3, r2, r1, r3
 800d9b8:	bba3      	cbnz	r3, 800da24 <mktime+0x2d8>
 800d9ba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800d9be:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800d9c2:	fb96 f2f3 	sdiv	r2, r6, r3
 800d9c6:	fb03 6612 	mls	r6, r3, r2, r6
 800d9ca:	2e00      	cmp	r6, #0
 800d9cc:	f240 136d 	movw	r3, #365	; 0x16d
 800d9d0:	bf18      	it	ne
 800d9d2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800d9d6:	61fb      	str	r3, [r7, #28]
 800d9d8:	f1bb 0f01 	cmp.w	fp, #1
 800d9dc:	f47f af57 	bne.w	800d88e <mktime+0x142>
 800d9e0:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800d9e4:	190c      	adds	r4, r1, r4
 800d9e6:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800d9ea:	f04f 0b01 	mov.w	fp, #1
 800d9ee:	f001 ff2b 	bl	800f848 <__tz_unlock>
 800d9f2:	3504      	adds	r5, #4
 800d9f4:	2307      	movs	r3, #7
 800d9f6:	fb95 f3f3 	sdiv	r3, r5, r3
 800d9fa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d9fe:	1aed      	subs	r5, r5, r3
 800da00:	bf48      	it	mi
 800da02:	3507      	addmi	r5, #7
 800da04:	f8c7 b020 	str.w	fp, [r7, #32]
 800da08:	61bd      	str	r5, [r7, #24]
 800da0a:	4620      	mov	r0, r4
 800da0c:	4641      	mov	r1, r8
 800da0e:	b005      	add	sp, #20
 800da10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da14:	1a8a      	subs	r2, r1, r2
 800da16:	e7af      	b.n	800d978 <mktime+0x22c>
 800da18:	f04f 32ff 	mov.w	r2, #4294967295
 800da1c:	e7c0      	b.n	800d9a0 <mktime+0x254>
 800da1e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800da22:	e7d8      	b.n	800d9d6 <mktime+0x28a>
 800da24:	f240 136d 	movw	r3, #365	; 0x16d
 800da28:	e7d5      	b.n	800d9d6 <mktime+0x28a>
 800da2a:	07b2      	lsls	r2, r6, #30
 800da2c:	d11e      	bne.n	800da6c <mktime+0x320>
 800da2e:	2164      	movs	r1, #100	; 0x64
 800da30:	fb96 f2f1 	sdiv	r2, r6, r1
 800da34:	fb01 6212 	mls	r2, r1, r2, r6
 800da38:	b9da      	cbnz	r2, 800da72 <mktime+0x326>
 800da3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800da3e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800da42:	fb96 f1f2 	sdiv	r1, r6, r2
 800da46:	fb02 6611 	mls	r6, r2, r1, r6
 800da4a:	2e00      	cmp	r6, #0
 800da4c:	f240 126d 	movw	r2, #365	; 0x16d
 800da50:	bf08      	it	eq
 800da52:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800da56:	4293      	cmp	r3, r2
 800da58:	bfa8      	it	ge
 800da5a:	1a9b      	subge	r3, r3, r2
 800da5c:	e7bb      	b.n	800d9d6 <mktime+0x28a>
 800da5e:	bf00      	nop
 800da60:	0803c540 	.word	0x0803c540
 800da64:	00015180 	.word	0x00015180
 800da68:	20003c10 	.word	0x20003c10
 800da6c:	f240 126d 	movw	r2, #365	; 0x16d
 800da70:	e7f1      	b.n	800da56 <mktime+0x30a>
 800da72:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800da76:	e7ee      	b.n	800da56 <mktime+0x30a>
 800da78:	f04f 34ff 	mov.w	r4, #4294967295
 800da7c:	46a0      	mov	r8, r4
 800da7e:	e7c4      	b.n	800da0a <mktime+0x2be>

0800da80 <_free_r>:
 800da80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da82:	2900      	cmp	r1, #0
 800da84:	d044      	beq.n	800db10 <_free_r+0x90>
 800da86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da8a:	9001      	str	r0, [sp, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f1a1 0404 	sub.w	r4, r1, #4
 800da92:	bfb8      	it	lt
 800da94:	18e4      	addlt	r4, r4, r3
 800da96:	f003 fa87 	bl	8010fa8 <__malloc_lock>
 800da9a:	4a1e      	ldr	r2, [pc, #120]	; (800db14 <_free_r+0x94>)
 800da9c:	9801      	ldr	r0, [sp, #4]
 800da9e:	6813      	ldr	r3, [r2, #0]
 800daa0:	b933      	cbnz	r3, 800dab0 <_free_r+0x30>
 800daa2:	6063      	str	r3, [r4, #4]
 800daa4:	6014      	str	r4, [r2, #0]
 800daa6:	b003      	add	sp, #12
 800daa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800daac:	f003 ba82 	b.w	8010fb4 <__malloc_unlock>
 800dab0:	42a3      	cmp	r3, r4
 800dab2:	d908      	bls.n	800dac6 <_free_r+0x46>
 800dab4:	6825      	ldr	r5, [r4, #0]
 800dab6:	1961      	adds	r1, r4, r5
 800dab8:	428b      	cmp	r3, r1
 800daba:	bf01      	itttt	eq
 800dabc:	6819      	ldreq	r1, [r3, #0]
 800dabe:	685b      	ldreq	r3, [r3, #4]
 800dac0:	1949      	addeq	r1, r1, r5
 800dac2:	6021      	streq	r1, [r4, #0]
 800dac4:	e7ed      	b.n	800daa2 <_free_r+0x22>
 800dac6:	461a      	mov	r2, r3
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	b10b      	cbz	r3, 800dad0 <_free_r+0x50>
 800dacc:	42a3      	cmp	r3, r4
 800dace:	d9fa      	bls.n	800dac6 <_free_r+0x46>
 800dad0:	6811      	ldr	r1, [r2, #0]
 800dad2:	1855      	adds	r5, r2, r1
 800dad4:	42a5      	cmp	r5, r4
 800dad6:	d10b      	bne.n	800daf0 <_free_r+0x70>
 800dad8:	6824      	ldr	r4, [r4, #0]
 800dada:	4421      	add	r1, r4
 800dadc:	1854      	adds	r4, r2, r1
 800dade:	42a3      	cmp	r3, r4
 800dae0:	6011      	str	r1, [r2, #0]
 800dae2:	d1e0      	bne.n	800daa6 <_free_r+0x26>
 800dae4:	681c      	ldr	r4, [r3, #0]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	6053      	str	r3, [r2, #4]
 800daea:	4421      	add	r1, r4
 800daec:	6011      	str	r1, [r2, #0]
 800daee:	e7da      	b.n	800daa6 <_free_r+0x26>
 800daf0:	d902      	bls.n	800daf8 <_free_r+0x78>
 800daf2:	230c      	movs	r3, #12
 800daf4:	6003      	str	r3, [r0, #0]
 800daf6:	e7d6      	b.n	800daa6 <_free_r+0x26>
 800daf8:	6825      	ldr	r5, [r4, #0]
 800dafa:	1961      	adds	r1, r4, r5
 800dafc:	428b      	cmp	r3, r1
 800dafe:	bf04      	itt	eq
 800db00:	6819      	ldreq	r1, [r3, #0]
 800db02:	685b      	ldreq	r3, [r3, #4]
 800db04:	6063      	str	r3, [r4, #4]
 800db06:	bf04      	itt	eq
 800db08:	1949      	addeq	r1, r1, r5
 800db0a:	6021      	streq	r1, [r4, #0]
 800db0c:	6054      	str	r4, [r2, #4]
 800db0e:	e7ca      	b.n	800daa6 <_free_r+0x26>
 800db10:	b003      	add	sp, #12
 800db12:	bd30      	pop	{r4, r5, pc}
 800db14:	20003bec 	.word	0x20003bec

0800db18 <sbrk_aligned>:
 800db18:	b570      	push	{r4, r5, r6, lr}
 800db1a:	4e0e      	ldr	r6, [pc, #56]	; (800db54 <sbrk_aligned+0x3c>)
 800db1c:	460c      	mov	r4, r1
 800db1e:	6831      	ldr	r1, [r6, #0]
 800db20:	4605      	mov	r5, r0
 800db22:	b911      	cbnz	r1, 800db2a <sbrk_aligned+0x12>
 800db24:	f000 fe50 	bl	800e7c8 <_sbrk_r>
 800db28:	6030      	str	r0, [r6, #0]
 800db2a:	4621      	mov	r1, r4
 800db2c:	4628      	mov	r0, r5
 800db2e:	f000 fe4b 	bl	800e7c8 <_sbrk_r>
 800db32:	1c43      	adds	r3, r0, #1
 800db34:	d00a      	beq.n	800db4c <sbrk_aligned+0x34>
 800db36:	1cc4      	adds	r4, r0, #3
 800db38:	f024 0403 	bic.w	r4, r4, #3
 800db3c:	42a0      	cmp	r0, r4
 800db3e:	d007      	beq.n	800db50 <sbrk_aligned+0x38>
 800db40:	1a21      	subs	r1, r4, r0
 800db42:	4628      	mov	r0, r5
 800db44:	f000 fe40 	bl	800e7c8 <_sbrk_r>
 800db48:	3001      	adds	r0, #1
 800db4a:	d101      	bne.n	800db50 <sbrk_aligned+0x38>
 800db4c:	f04f 34ff 	mov.w	r4, #4294967295
 800db50:	4620      	mov	r0, r4
 800db52:	bd70      	pop	{r4, r5, r6, pc}
 800db54:	20003bf0 	.word	0x20003bf0

0800db58 <_malloc_r>:
 800db58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db5c:	1ccd      	adds	r5, r1, #3
 800db5e:	f025 0503 	bic.w	r5, r5, #3
 800db62:	3508      	adds	r5, #8
 800db64:	2d0c      	cmp	r5, #12
 800db66:	bf38      	it	cc
 800db68:	250c      	movcc	r5, #12
 800db6a:	2d00      	cmp	r5, #0
 800db6c:	4607      	mov	r7, r0
 800db6e:	db01      	blt.n	800db74 <_malloc_r+0x1c>
 800db70:	42a9      	cmp	r1, r5
 800db72:	d905      	bls.n	800db80 <_malloc_r+0x28>
 800db74:	230c      	movs	r3, #12
 800db76:	603b      	str	r3, [r7, #0]
 800db78:	2600      	movs	r6, #0
 800db7a:	4630      	mov	r0, r6
 800db7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db80:	4e2e      	ldr	r6, [pc, #184]	; (800dc3c <_malloc_r+0xe4>)
 800db82:	f003 fa11 	bl	8010fa8 <__malloc_lock>
 800db86:	6833      	ldr	r3, [r6, #0]
 800db88:	461c      	mov	r4, r3
 800db8a:	bb34      	cbnz	r4, 800dbda <_malloc_r+0x82>
 800db8c:	4629      	mov	r1, r5
 800db8e:	4638      	mov	r0, r7
 800db90:	f7ff ffc2 	bl	800db18 <sbrk_aligned>
 800db94:	1c43      	adds	r3, r0, #1
 800db96:	4604      	mov	r4, r0
 800db98:	d14d      	bne.n	800dc36 <_malloc_r+0xde>
 800db9a:	6834      	ldr	r4, [r6, #0]
 800db9c:	4626      	mov	r6, r4
 800db9e:	2e00      	cmp	r6, #0
 800dba0:	d140      	bne.n	800dc24 <_malloc_r+0xcc>
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	4631      	mov	r1, r6
 800dba6:	4638      	mov	r0, r7
 800dba8:	eb04 0803 	add.w	r8, r4, r3
 800dbac:	f000 fe0c 	bl	800e7c8 <_sbrk_r>
 800dbb0:	4580      	cmp	r8, r0
 800dbb2:	d13a      	bne.n	800dc2a <_malloc_r+0xd2>
 800dbb4:	6821      	ldr	r1, [r4, #0]
 800dbb6:	3503      	adds	r5, #3
 800dbb8:	1a6d      	subs	r5, r5, r1
 800dbba:	f025 0503 	bic.w	r5, r5, #3
 800dbbe:	3508      	adds	r5, #8
 800dbc0:	2d0c      	cmp	r5, #12
 800dbc2:	bf38      	it	cc
 800dbc4:	250c      	movcc	r5, #12
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	4638      	mov	r0, r7
 800dbca:	f7ff ffa5 	bl	800db18 <sbrk_aligned>
 800dbce:	3001      	adds	r0, #1
 800dbd0:	d02b      	beq.n	800dc2a <_malloc_r+0xd2>
 800dbd2:	6823      	ldr	r3, [r4, #0]
 800dbd4:	442b      	add	r3, r5
 800dbd6:	6023      	str	r3, [r4, #0]
 800dbd8:	e00e      	b.n	800dbf8 <_malloc_r+0xa0>
 800dbda:	6822      	ldr	r2, [r4, #0]
 800dbdc:	1b52      	subs	r2, r2, r5
 800dbde:	d41e      	bmi.n	800dc1e <_malloc_r+0xc6>
 800dbe0:	2a0b      	cmp	r2, #11
 800dbe2:	d916      	bls.n	800dc12 <_malloc_r+0xba>
 800dbe4:	1961      	adds	r1, r4, r5
 800dbe6:	42a3      	cmp	r3, r4
 800dbe8:	6025      	str	r5, [r4, #0]
 800dbea:	bf18      	it	ne
 800dbec:	6059      	strne	r1, [r3, #4]
 800dbee:	6863      	ldr	r3, [r4, #4]
 800dbf0:	bf08      	it	eq
 800dbf2:	6031      	streq	r1, [r6, #0]
 800dbf4:	5162      	str	r2, [r4, r5]
 800dbf6:	604b      	str	r3, [r1, #4]
 800dbf8:	4638      	mov	r0, r7
 800dbfa:	f104 060b 	add.w	r6, r4, #11
 800dbfe:	f003 f9d9 	bl	8010fb4 <__malloc_unlock>
 800dc02:	f026 0607 	bic.w	r6, r6, #7
 800dc06:	1d23      	adds	r3, r4, #4
 800dc08:	1af2      	subs	r2, r6, r3
 800dc0a:	d0b6      	beq.n	800db7a <_malloc_r+0x22>
 800dc0c:	1b9b      	subs	r3, r3, r6
 800dc0e:	50a3      	str	r3, [r4, r2]
 800dc10:	e7b3      	b.n	800db7a <_malloc_r+0x22>
 800dc12:	6862      	ldr	r2, [r4, #4]
 800dc14:	42a3      	cmp	r3, r4
 800dc16:	bf0c      	ite	eq
 800dc18:	6032      	streq	r2, [r6, #0]
 800dc1a:	605a      	strne	r2, [r3, #4]
 800dc1c:	e7ec      	b.n	800dbf8 <_malloc_r+0xa0>
 800dc1e:	4623      	mov	r3, r4
 800dc20:	6864      	ldr	r4, [r4, #4]
 800dc22:	e7b2      	b.n	800db8a <_malloc_r+0x32>
 800dc24:	4634      	mov	r4, r6
 800dc26:	6876      	ldr	r6, [r6, #4]
 800dc28:	e7b9      	b.n	800db9e <_malloc_r+0x46>
 800dc2a:	230c      	movs	r3, #12
 800dc2c:	603b      	str	r3, [r7, #0]
 800dc2e:	4638      	mov	r0, r7
 800dc30:	f003 f9c0 	bl	8010fb4 <__malloc_unlock>
 800dc34:	e7a1      	b.n	800db7a <_malloc_r+0x22>
 800dc36:	6025      	str	r5, [r4, #0]
 800dc38:	e7de      	b.n	800dbf8 <_malloc_r+0xa0>
 800dc3a:	bf00      	nop
 800dc3c:	20003bec 	.word	0x20003bec

0800dc40 <__sfputc_r>:
 800dc40:	6893      	ldr	r3, [r2, #8]
 800dc42:	3b01      	subs	r3, #1
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	b410      	push	{r4}
 800dc48:	6093      	str	r3, [r2, #8]
 800dc4a:	da08      	bge.n	800dc5e <__sfputc_r+0x1e>
 800dc4c:	6994      	ldr	r4, [r2, #24]
 800dc4e:	42a3      	cmp	r3, r4
 800dc50:	db01      	blt.n	800dc56 <__sfputc_r+0x16>
 800dc52:	290a      	cmp	r1, #10
 800dc54:	d103      	bne.n	800dc5e <__sfputc_r+0x1e>
 800dc56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc5a:	f001 bf81 	b.w	800fb60 <__swbuf_r>
 800dc5e:	6813      	ldr	r3, [r2, #0]
 800dc60:	1c58      	adds	r0, r3, #1
 800dc62:	6010      	str	r0, [r2, #0]
 800dc64:	7019      	strb	r1, [r3, #0]
 800dc66:	4608      	mov	r0, r1
 800dc68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc6c:	4770      	bx	lr

0800dc6e <__sfputs_r>:
 800dc6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc70:	4606      	mov	r6, r0
 800dc72:	460f      	mov	r7, r1
 800dc74:	4614      	mov	r4, r2
 800dc76:	18d5      	adds	r5, r2, r3
 800dc78:	42ac      	cmp	r4, r5
 800dc7a:	d101      	bne.n	800dc80 <__sfputs_r+0x12>
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	e007      	b.n	800dc90 <__sfputs_r+0x22>
 800dc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc84:	463a      	mov	r2, r7
 800dc86:	4630      	mov	r0, r6
 800dc88:	f7ff ffda 	bl	800dc40 <__sfputc_r>
 800dc8c:	1c43      	adds	r3, r0, #1
 800dc8e:	d1f3      	bne.n	800dc78 <__sfputs_r+0xa>
 800dc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc94 <_vfiprintf_r>:
 800dc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc98:	460d      	mov	r5, r1
 800dc9a:	b09d      	sub	sp, #116	; 0x74
 800dc9c:	4614      	mov	r4, r2
 800dc9e:	4698      	mov	r8, r3
 800dca0:	4606      	mov	r6, r0
 800dca2:	b118      	cbz	r0, 800dcac <_vfiprintf_r+0x18>
 800dca4:	6983      	ldr	r3, [r0, #24]
 800dca6:	b90b      	cbnz	r3, 800dcac <_vfiprintf_r+0x18>
 800dca8:	f002 fff8 	bl	8010c9c <__sinit>
 800dcac:	4b89      	ldr	r3, [pc, #548]	; (800ded4 <_vfiprintf_r+0x240>)
 800dcae:	429d      	cmp	r5, r3
 800dcb0:	d11b      	bne.n	800dcea <_vfiprintf_r+0x56>
 800dcb2:	6875      	ldr	r5, [r6, #4]
 800dcb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcb6:	07d9      	lsls	r1, r3, #31
 800dcb8:	d405      	bmi.n	800dcc6 <_vfiprintf_r+0x32>
 800dcba:	89ab      	ldrh	r3, [r5, #12]
 800dcbc:	059a      	lsls	r2, r3, #22
 800dcbe:	d402      	bmi.n	800dcc6 <_vfiprintf_r+0x32>
 800dcc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcc2:	f003 f8db 	bl	8010e7c <__retarget_lock_acquire_recursive>
 800dcc6:	89ab      	ldrh	r3, [r5, #12]
 800dcc8:	071b      	lsls	r3, r3, #28
 800dcca:	d501      	bpl.n	800dcd0 <_vfiprintf_r+0x3c>
 800dccc:	692b      	ldr	r3, [r5, #16]
 800dcce:	b9eb      	cbnz	r3, 800dd0c <_vfiprintf_r+0x78>
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f001 ffa8 	bl	800fc28 <__swsetup_r>
 800dcd8:	b1c0      	cbz	r0, 800dd0c <_vfiprintf_r+0x78>
 800dcda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcdc:	07dc      	lsls	r4, r3, #31
 800dcde:	d50e      	bpl.n	800dcfe <_vfiprintf_r+0x6a>
 800dce0:	f04f 30ff 	mov.w	r0, #4294967295
 800dce4:	b01d      	add	sp, #116	; 0x74
 800dce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcea:	4b7b      	ldr	r3, [pc, #492]	; (800ded8 <_vfiprintf_r+0x244>)
 800dcec:	429d      	cmp	r5, r3
 800dcee:	d101      	bne.n	800dcf4 <_vfiprintf_r+0x60>
 800dcf0:	68b5      	ldr	r5, [r6, #8]
 800dcf2:	e7df      	b.n	800dcb4 <_vfiprintf_r+0x20>
 800dcf4:	4b79      	ldr	r3, [pc, #484]	; (800dedc <_vfiprintf_r+0x248>)
 800dcf6:	429d      	cmp	r5, r3
 800dcf8:	bf08      	it	eq
 800dcfa:	68f5      	ldreq	r5, [r6, #12]
 800dcfc:	e7da      	b.n	800dcb4 <_vfiprintf_r+0x20>
 800dcfe:	89ab      	ldrh	r3, [r5, #12]
 800dd00:	0598      	lsls	r0, r3, #22
 800dd02:	d4ed      	bmi.n	800dce0 <_vfiprintf_r+0x4c>
 800dd04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd06:	f003 f8bb 	bl	8010e80 <__retarget_lock_release_recursive>
 800dd0a:	e7e9      	b.n	800dce0 <_vfiprintf_r+0x4c>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd10:	2320      	movs	r3, #32
 800dd12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd16:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd1a:	2330      	movs	r3, #48	; 0x30
 800dd1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dee0 <_vfiprintf_r+0x24c>
 800dd20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd24:	f04f 0901 	mov.w	r9, #1
 800dd28:	4623      	mov	r3, r4
 800dd2a:	469a      	mov	sl, r3
 800dd2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd30:	b10a      	cbz	r2, 800dd36 <_vfiprintf_r+0xa2>
 800dd32:	2a25      	cmp	r2, #37	; 0x25
 800dd34:	d1f9      	bne.n	800dd2a <_vfiprintf_r+0x96>
 800dd36:	ebba 0b04 	subs.w	fp, sl, r4
 800dd3a:	d00b      	beq.n	800dd54 <_vfiprintf_r+0xc0>
 800dd3c:	465b      	mov	r3, fp
 800dd3e:	4622      	mov	r2, r4
 800dd40:	4629      	mov	r1, r5
 800dd42:	4630      	mov	r0, r6
 800dd44:	f7ff ff93 	bl	800dc6e <__sfputs_r>
 800dd48:	3001      	adds	r0, #1
 800dd4a:	f000 80aa 	beq.w	800dea2 <_vfiprintf_r+0x20e>
 800dd4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd50:	445a      	add	r2, fp
 800dd52:	9209      	str	r2, [sp, #36]	; 0x24
 800dd54:	f89a 3000 	ldrb.w	r3, [sl]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f000 80a2 	beq.w	800dea2 <_vfiprintf_r+0x20e>
 800dd5e:	2300      	movs	r3, #0
 800dd60:	f04f 32ff 	mov.w	r2, #4294967295
 800dd64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd68:	f10a 0a01 	add.w	sl, sl, #1
 800dd6c:	9304      	str	r3, [sp, #16]
 800dd6e:	9307      	str	r3, [sp, #28]
 800dd70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd74:	931a      	str	r3, [sp, #104]	; 0x68
 800dd76:	4654      	mov	r4, sl
 800dd78:	2205      	movs	r2, #5
 800dd7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd7e:	4858      	ldr	r0, [pc, #352]	; (800dee0 <_vfiprintf_r+0x24c>)
 800dd80:	f7f2 fa3e 	bl	8000200 <memchr>
 800dd84:	9a04      	ldr	r2, [sp, #16]
 800dd86:	b9d8      	cbnz	r0, 800ddc0 <_vfiprintf_r+0x12c>
 800dd88:	06d1      	lsls	r1, r2, #27
 800dd8a:	bf44      	itt	mi
 800dd8c:	2320      	movmi	r3, #32
 800dd8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd92:	0713      	lsls	r3, r2, #28
 800dd94:	bf44      	itt	mi
 800dd96:	232b      	movmi	r3, #43	; 0x2b
 800dd98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd9c:	f89a 3000 	ldrb.w	r3, [sl]
 800dda0:	2b2a      	cmp	r3, #42	; 0x2a
 800dda2:	d015      	beq.n	800ddd0 <_vfiprintf_r+0x13c>
 800dda4:	9a07      	ldr	r2, [sp, #28]
 800dda6:	4654      	mov	r4, sl
 800dda8:	2000      	movs	r0, #0
 800ddaa:	f04f 0c0a 	mov.w	ip, #10
 800ddae:	4621      	mov	r1, r4
 800ddb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddb4:	3b30      	subs	r3, #48	; 0x30
 800ddb6:	2b09      	cmp	r3, #9
 800ddb8:	d94e      	bls.n	800de58 <_vfiprintf_r+0x1c4>
 800ddba:	b1b0      	cbz	r0, 800ddea <_vfiprintf_r+0x156>
 800ddbc:	9207      	str	r2, [sp, #28]
 800ddbe:	e014      	b.n	800ddea <_vfiprintf_r+0x156>
 800ddc0:	eba0 0308 	sub.w	r3, r0, r8
 800ddc4:	fa09 f303 	lsl.w	r3, r9, r3
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	9304      	str	r3, [sp, #16]
 800ddcc:	46a2      	mov	sl, r4
 800ddce:	e7d2      	b.n	800dd76 <_vfiprintf_r+0xe2>
 800ddd0:	9b03      	ldr	r3, [sp, #12]
 800ddd2:	1d19      	adds	r1, r3, #4
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	9103      	str	r1, [sp, #12]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	bfbb      	ittet	lt
 800dddc:	425b      	neglt	r3, r3
 800ddde:	f042 0202 	orrlt.w	r2, r2, #2
 800dde2:	9307      	strge	r3, [sp, #28]
 800dde4:	9307      	strlt	r3, [sp, #28]
 800dde6:	bfb8      	it	lt
 800dde8:	9204      	strlt	r2, [sp, #16]
 800ddea:	7823      	ldrb	r3, [r4, #0]
 800ddec:	2b2e      	cmp	r3, #46	; 0x2e
 800ddee:	d10c      	bne.n	800de0a <_vfiprintf_r+0x176>
 800ddf0:	7863      	ldrb	r3, [r4, #1]
 800ddf2:	2b2a      	cmp	r3, #42	; 0x2a
 800ddf4:	d135      	bne.n	800de62 <_vfiprintf_r+0x1ce>
 800ddf6:	9b03      	ldr	r3, [sp, #12]
 800ddf8:	1d1a      	adds	r2, r3, #4
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	9203      	str	r2, [sp, #12]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	bfb8      	it	lt
 800de02:	f04f 33ff 	movlt.w	r3, #4294967295
 800de06:	3402      	adds	r4, #2
 800de08:	9305      	str	r3, [sp, #20]
 800de0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800def0 <_vfiprintf_r+0x25c>
 800de0e:	7821      	ldrb	r1, [r4, #0]
 800de10:	2203      	movs	r2, #3
 800de12:	4650      	mov	r0, sl
 800de14:	f7f2 f9f4 	bl	8000200 <memchr>
 800de18:	b140      	cbz	r0, 800de2c <_vfiprintf_r+0x198>
 800de1a:	2340      	movs	r3, #64	; 0x40
 800de1c:	eba0 000a 	sub.w	r0, r0, sl
 800de20:	fa03 f000 	lsl.w	r0, r3, r0
 800de24:	9b04      	ldr	r3, [sp, #16]
 800de26:	4303      	orrs	r3, r0
 800de28:	3401      	adds	r4, #1
 800de2a:	9304      	str	r3, [sp, #16]
 800de2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de30:	482c      	ldr	r0, [pc, #176]	; (800dee4 <_vfiprintf_r+0x250>)
 800de32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de36:	2206      	movs	r2, #6
 800de38:	f7f2 f9e2 	bl	8000200 <memchr>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d03f      	beq.n	800dec0 <_vfiprintf_r+0x22c>
 800de40:	4b29      	ldr	r3, [pc, #164]	; (800dee8 <_vfiprintf_r+0x254>)
 800de42:	bb1b      	cbnz	r3, 800de8c <_vfiprintf_r+0x1f8>
 800de44:	9b03      	ldr	r3, [sp, #12]
 800de46:	3307      	adds	r3, #7
 800de48:	f023 0307 	bic.w	r3, r3, #7
 800de4c:	3308      	adds	r3, #8
 800de4e:	9303      	str	r3, [sp, #12]
 800de50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de52:	443b      	add	r3, r7
 800de54:	9309      	str	r3, [sp, #36]	; 0x24
 800de56:	e767      	b.n	800dd28 <_vfiprintf_r+0x94>
 800de58:	fb0c 3202 	mla	r2, ip, r2, r3
 800de5c:	460c      	mov	r4, r1
 800de5e:	2001      	movs	r0, #1
 800de60:	e7a5      	b.n	800ddae <_vfiprintf_r+0x11a>
 800de62:	2300      	movs	r3, #0
 800de64:	3401      	adds	r4, #1
 800de66:	9305      	str	r3, [sp, #20]
 800de68:	4619      	mov	r1, r3
 800de6a:	f04f 0c0a 	mov.w	ip, #10
 800de6e:	4620      	mov	r0, r4
 800de70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de74:	3a30      	subs	r2, #48	; 0x30
 800de76:	2a09      	cmp	r2, #9
 800de78:	d903      	bls.n	800de82 <_vfiprintf_r+0x1ee>
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d0c5      	beq.n	800de0a <_vfiprintf_r+0x176>
 800de7e:	9105      	str	r1, [sp, #20]
 800de80:	e7c3      	b.n	800de0a <_vfiprintf_r+0x176>
 800de82:	fb0c 2101 	mla	r1, ip, r1, r2
 800de86:	4604      	mov	r4, r0
 800de88:	2301      	movs	r3, #1
 800de8a:	e7f0      	b.n	800de6e <_vfiprintf_r+0x1da>
 800de8c:	ab03      	add	r3, sp, #12
 800de8e:	9300      	str	r3, [sp, #0]
 800de90:	462a      	mov	r2, r5
 800de92:	4b16      	ldr	r3, [pc, #88]	; (800deec <_vfiprintf_r+0x258>)
 800de94:	a904      	add	r1, sp, #16
 800de96:	4630      	mov	r0, r6
 800de98:	f000 f8cc 	bl	800e034 <_printf_float>
 800de9c:	4607      	mov	r7, r0
 800de9e:	1c78      	adds	r0, r7, #1
 800dea0:	d1d6      	bne.n	800de50 <_vfiprintf_r+0x1bc>
 800dea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dea4:	07d9      	lsls	r1, r3, #31
 800dea6:	d405      	bmi.n	800deb4 <_vfiprintf_r+0x220>
 800dea8:	89ab      	ldrh	r3, [r5, #12]
 800deaa:	059a      	lsls	r2, r3, #22
 800deac:	d402      	bmi.n	800deb4 <_vfiprintf_r+0x220>
 800deae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800deb0:	f002 ffe6 	bl	8010e80 <__retarget_lock_release_recursive>
 800deb4:	89ab      	ldrh	r3, [r5, #12]
 800deb6:	065b      	lsls	r3, r3, #25
 800deb8:	f53f af12 	bmi.w	800dce0 <_vfiprintf_r+0x4c>
 800debc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800debe:	e711      	b.n	800dce4 <_vfiprintf_r+0x50>
 800dec0:	ab03      	add	r3, sp, #12
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	462a      	mov	r2, r5
 800dec6:	4b09      	ldr	r3, [pc, #36]	; (800deec <_vfiprintf_r+0x258>)
 800dec8:	a904      	add	r1, sp, #16
 800deca:	4630      	mov	r0, r6
 800decc:	f000 fb56 	bl	800e57c <_printf_i>
 800ded0:	e7e4      	b.n	800de9c <_vfiprintf_r+0x208>
 800ded2:	bf00      	nop
 800ded4:	0803ca68 	.word	0x0803ca68
 800ded8:	0803ca88 	.word	0x0803ca88
 800dedc:	0803ca48 	.word	0x0803ca48
 800dee0:	0803c570 	.word	0x0803c570
 800dee4:	0803c57a 	.word	0x0803c57a
 800dee8:	0800e035 	.word	0x0800e035
 800deec:	0800dc6f 	.word	0x0800dc6f
 800def0:	0803c576 	.word	0x0803c576

0800def4 <__cvt>:
 800def4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800def8:	ec55 4b10 	vmov	r4, r5, d0
 800defc:	2d00      	cmp	r5, #0
 800defe:	460e      	mov	r6, r1
 800df00:	4619      	mov	r1, r3
 800df02:	462b      	mov	r3, r5
 800df04:	bfbb      	ittet	lt
 800df06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800df0a:	461d      	movlt	r5, r3
 800df0c:	2300      	movge	r3, #0
 800df0e:	232d      	movlt	r3, #45	; 0x2d
 800df10:	700b      	strb	r3, [r1, #0]
 800df12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800df18:	4691      	mov	r9, r2
 800df1a:	f023 0820 	bic.w	r8, r3, #32
 800df1e:	bfbc      	itt	lt
 800df20:	4622      	movlt	r2, r4
 800df22:	4614      	movlt	r4, r2
 800df24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df28:	d005      	beq.n	800df36 <__cvt+0x42>
 800df2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800df2e:	d100      	bne.n	800df32 <__cvt+0x3e>
 800df30:	3601      	adds	r6, #1
 800df32:	2102      	movs	r1, #2
 800df34:	e000      	b.n	800df38 <__cvt+0x44>
 800df36:	2103      	movs	r1, #3
 800df38:	ab03      	add	r3, sp, #12
 800df3a:	9301      	str	r3, [sp, #4]
 800df3c:	ab02      	add	r3, sp, #8
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	ec45 4b10 	vmov	d0, r4, r5
 800df44:	4653      	mov	r3, sl
 800df46:	4632      	mov	r2, r6
 800df48:	f001 ff9a 	bl	800fe80 <_dtoa_r>
 800df4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800df50:	4607      	mov	r7, r0
 800df52:	d102      	bne.n	800df5a <__cvt+0x66>
 800df54:	f019 0f01 	tst.w	r9, #1
 800df58:	d022      	beq.n	800dfa0 <__cvt+0xac>
 800df5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df5e:	eb07 0906 	add.w	r9, r7, r6
 800df62:	d110      	bne.n	800df86 <__cvt+0x92>
 800df64:	783b      	ldrb	r3, [r7, #0]
 800df66:	2b30      	cmp	r3, #48	; 0x30
 800df68:	d10a      	bne.n	800df80 <__cvt+0x8c>
 800df6a:	2200      	movs	r2, #0
 800df6c:	2300      	movs	r3, #0
 800df6e:	4620      	mov	r0, r4
 800df70:	4629      	mov	r1, r5
 800df72:	f7f2 fdc3 	bl	8000afc <__aeabi_dcmpeq>
 800df76:	b918      	cbnz	r0, 800df80 <__cvt+0x8c>
 800df78:	f1c6 0601 	rsb	r6, r6, #1
 800df7c:	f8ca 6000 	str.w	r6, [sl]
 800df80:	f8da 3000 	ldr.w	r3, [sl]
 800df84:	4499      	add	r9, r3
 800df86:	2200      	movs	r2, #0
 800df88:	2300      	movs	r3, #0
 800df8a:	4620      	mov	r0, r4
 800df8c:	4629      	mov	r1, r5
 800df8e:	f7f2 fdb5 	bl	8000afc <__aeabi_dcmpeq>
 800df92:	b108      	cbz	r0, 800df98 <__cvt+0xa4>
 800df94:	f8cd 900c 	str.w	r9, [sp, #12]
 800df98:	2230      	movs	r2, #48	; 0x30
 800df9a:	9b03      	ldr	r3, [sp, #12]
 800df9c:	454b      	cmp	r3, r9
 800df9e:	d307      	bcc.n	800dfb0 <__cvt+0xbc>
 800dfa0:	9b03      	ldr	r3, [sp, #12]
 800dfa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfa4:	1bdb      	subs	r3, r3, r7
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	6013      	str	r3, [r2, #0]
 800dfaa:	b004      	add	sp, #16
 800dfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfb0:	1c59      	adds	r1, r3, #1
 800dfb2:	9103      	str	r1, [sp, #12]
 800dfb4:	701a      	strb	r2, [r3, #0]
 800dfb6:	e7f0      	b.n	800df9a <__cvt+0xa6>

0800dfb8 <__exponent>:
 800dfb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2900      	cmp	r1, #0
 800dfbe:	bfb8      	it	lt
 800dfc0:	4249      	neglt	r1, r1
 800dfc2:	f803 2b02 	strb.w	r2, [r3], #2
 800dfc6:	bfb4      	ite	lt
 800dfc8:	222d      	movlt	r2, #45	; 0x2d
 800dfca:	222b      	movge	r2, #43	; 0x2b
 800dfcc:	2909      	cmp	r1, #9
 800dfce:	7042      	strb	r2, [r0, #1]
 800dfd0:	dd2a      	ble.n	800e028 <__exponent+0x70>
 800dfd2:	f10d 0407 	add.w	r4, sp, #7
 800dfd6:	46a4      	mov	ip, r4
 800dfd8:	270a      	movs	r7, #10
 800dfda:	46a6      	mov	lr, r4
 800dfdc:	460a      	mov	r2, r1
 800dfde:	fb91 f6f7 	sdiv	r6, r1, r7
 800dfe2:	fb07 1516 	mls	r5, r7, r6, r1
 800dfe6:	3530      	adds	r5, #48	; 0x30
 800dfe8:	2a63      	cmp	r2, #99	; 0x63
 800dfea:	f104 34ff 	add.w	r4, r4, #4294967295
 800dfee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dff2:	4631      	mov	r1, r6
 800dff4:	dcf1      	bgt.n	800dfda <__exponent+0x22>
 800dff6:	3130      	adds	r1, #48	; 0x30
 800dff8:	f1ae 0502 	sub.w	r5, lr, #2
 800dffc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e000:	1c44      	adds	r4, r0, #1
 800e002:	4629      	mov	r1, r5
 800e004:	4561      	cmp	r1, ip
 800e006:	d30a      	bcc.n	800e01e <__exponent+0x66>
 800e008:	f10d 0209 	add.w	r2, sp, #9
 800e00c:	eba2 020e 	sub.w	r2, r2, lr
 800e010:	4565      	cmp	r5, ip
 800e012:	bf88      	it	hi
 800e014:	2200      	movhi	r2, #0
 800e016:	4413      	add	r3, r2
 800e018:	1a18      	subs	r0, r3, r0
 800e01a:	b003      	add	sp, #12
 800e01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e01e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e022:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e026:	e7ed      	b.n	800e004 <__exponent+0x4c>
 800e028:	2330      	movs	r3, #48	; 0x30
 800e02a:	3130      	adds	r1, #48	; 0x30
 800e02c:	7083      	strb	r3, [r0, #2]
 800e02e:	70c1      	strb	r1, [r0, #3]
 800e030:	1d03      	adds	r3, r0, #4
 800e032:	e7f1      	b.n	800e018 <__exponent+0x60>

0800e034 <_printf_float>:
 800e034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e038:	ed2d 8b02 	vpush	{d8}
 800e03c:	b08d      	sub	sp, #52	; 0x34
 800e03e:	460c      	mov	r4, r1
 800e040:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e044:	4616      	mov	r6, r2
 800e046:	461f      	mov	r7, r3
 800e048:	4605      	mov	r5, r0
 800e04a:	f002 ff11 	bl	8010e70 <_localeconv_r>
 800e04e:	f8d0 a000 	ldr.w	sl, [r0]
 800e052:	4650      	mov	r0, sl
 800e054:	f7f2 f8cc 	bl	80001f0 <strlen>
 800e058:	2300      	movs	r3, #0
 800e05a:	930a      	str	r3, [sp, #40]	; 0x28
 800e05c:	6823      	ldr	r3, [r4, #0]
 800e05e:	9305      	str	r3, [sp, #20]
 800e060:	f8d8 3000 	ldr.w	r3, [r8]
 800e064:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e068:	3307      	adds	r3, #7
 800e06a:	f023 0307 	bic.w	r3, r3, #7
 800e06e:	f103 0208 	add.w	r2, r3, #8
 800e072:	f8c8 2000 	str.w	r2, [r8]
 800e076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e07e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e082:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e086:	9307      	str	r3, [sp, #28]
 800e088:	f8cd 8018 	str.w	r8, [sp, #24]
 800e08c:	ee08 0a10 	vmov	s16, r0
 800e090:	4b9f      	ldr	r3, [pc, #636]	; (800e310 <_printf_float+0x2dc>)
 800e092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e096:	f04f 32ff 	mov.w	r2, #4294967295
 800e09a:	f7f2 fd61 	bl	8000b60 <__aeabi_dcmpun>
 800e09e:	bb88      	cbnz	r0, 800e104 <_printf_float+0xd0>
 800e0a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0a4:	4b9a      	ldr	r3, [pc, #616]	; (800e310 <_printf_float+0x2dc>)
 800e0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0aa:	f7f2 fd3b 	bl	8000b24 <__aeabi_dcmple>
 800e0ae:	bb48      	cbnz	r0, 800e104 <_printf_float+0xd0>
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	4640      	mov	r0, r8
 800e0b6:	4649      	mov	r1, r9
 800e0b8:	f7f2 fd2a 	bl	8000b10 <__aeabi_dcmplt>
 800e0bc:	b110      	cbz	r0, 800e0c4 <_printf_float+0x90>
 800e0be:	232d      	movs	r3, #45	; 0x2d
 800e0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0c4:	4b93      	ldr	r3, [pc, #588]	; (800e314 <_printf_float+0x2e0>)
 800e0c6:	4894      	ldr	r0, [pc, #592]	; (800e318 <_printf_float+0x2e4>)
 800e0c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e0cc:	bf94      	ite	ls
 800e0ce:	4698      	movls	r8, r3
 800e0d0:	4680      	movhi	r8, r0
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	6123      	str	r3, [r4, #16]
 800e0d6:	9b05      	ldr	r3, [sp, #20]
 800e0d8:	f023 0204 	bic.w	r2, r3, #4
 800e0dc:	6022      	str	r2, [r4, #0]
 800e0de:	f04f 0900 	mov.w	r9, #0
 800e0e2:	9700      	str	r7, [sp, #0]
 800e0e4:	4633      	mov	r3, r6
 800e0e6:	aa0b      	add	r2, sp, #44	; 0x2c
 800e0e8:	4621      	mov	r1, r4
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f000 f9d8 	bl	800e4a0 <_printf_common>
 800e0f0:	3001      	adds	r0, #1
 800e0f2:	f040 8090 	bne.w	800e216 <_printf_float+0x1e2>
 800e0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0fa:	b00d      	add	sp, #52	; 0x34
 800e0fc:	ecbd 8b02 	vpop	{d8}
 800e100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e104:	4642      	mov	r2, r8
 800e106:	464b      	mov	r3, r9
 800e108:	4640      	mov	r0, r8
 800e10a:	4649      	mov	r1, r9
 800e10c:	f7f2 fd28 	bl	8000b60 <__aeabi_dcmpun>
 800e110:	b140      	cbz	r0, 800e124 <_printf_float+0xf0>
 800e112:	464b      	mov	r3, r9
 800e114:	2b00      	cmp	r3, #0
 800e116:	bfbc      	itt	lt
 800e118:	232d      	movlt	r3, #45	; 0x2d
 800e11a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e11e:	487f      	ldr	r0, [pc, #508]	; (800e31c <_printf_float+0x2e8>)
 800e120:	4b7f      	ldr	r3, [pc, #508]	; (800e320 <_printf_float+0x2ec>)
 800e122:	e7d1      	b.n	800e0c8 <_printf_float+0x94>
 800e124:	6863      	ldr	r3, [r4, #4]
 800e126:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e12a:	9206      	str	r2, [sp, #24]
 800e12c:	1c5a      	adds	r2, r3, #1
 800e12e:	d13f      	bne.n	800e1b0 <_printf_float+0x17c>
 800e130:	2306      	movs	r3, #6
 800e132:	6063      	str	r3, [r4, #4]
 800e134:	9b05      	ldr	r3, [sp, #20]
 800e136:	6861      	ldr	r1, [r4, #4]
 800e138:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e13c:	2300      	movs	r3, #0
 800e13e:	9303      	str	r3, [sp, #12]
 800e140:	ab0a      	add	r3, sp, #40	; 0x28
 800e142:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e146:	ab09      	add	r3, sp, #36	; 0x24
 800e148:	ec49 8b10 	vmov	d0, r8, r9
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	6022      	str	r2, [r4, #0]
 800e150:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e154:	4628      	mov	r0, r5
 800e156:	f7ff fecd 	bl	800def4 <__cvt>
 800e15a:	9b06      	ldr	r3, [sp, #24]
 800e15c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e15e:	2b47      	cmp	r3, #71	; 0x47
 800e160:	4680      	mov	r8, r0
 800e162:	d108      	bne.n	800e176 <_printf_float+0x142>
 800e164:	1cc8      	adds	r0, r1, #3
 800e166:	db02      	blt.n	800e16e <_printf_float+0x13a>
 800e168:	6863      	ldr	r3, [r4, #4]
 800e16a:	4299      	cmp	r1, r3
 800e16c:	dd41      	ble.n	800e1f2 <_printf_float+0x1be>
 800e16e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e172:	fa5f fb8b 	uxtb.w	fp, fp
 800e176:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e17a:	d820      	bhi.n	800e1be <_printf_float+0x18a>
 800e17c:	3901      	subs	r1, #1
 800e17e:	465a      	mov	r2, fp
 800e180:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e184:	9109      	str	r1, [sp, #36]	; 0x24
 800e186:	f7ff ff17 	bl	800dfb8 <__exponent>
 800e18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e18c:	1813      	adds	r3, r2, r0
 800e18e:	2a01      	cmp	r2, #1
 800e190:	4681      	mov	r9, r0
 800e192:	6123      	str	r3, [r4, #16]
 800e194:	dc02      	bgt.n	800e19c <_printf_float+0x168>
 800e196:	6822      	ldr	r2, [r4, #0]
 800e198:	07d2      	lsls	r2, r2, #31
 800e19a:	d501      	bpl.n	800e1a0 <_printf_float+0x16c>
 800e19c:	3301      	adds	r3, #1
 800e19e:	6123      	str	r3, [r4, #16]
 800e1a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d09c      	beq.n	800e0e2 <_printf_float+0xae>
 800e1a8:	232d      	movs	r3, #45	; 0x2d
 800e1aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1ae:	e798      	b.n	800e0e2 <_printf_float+0xae>
 800e1b0:	9a06      	ldr	r2, [sp, #24]
 800e1b2:	2a47      	cmp	r2, #71	; 0x47
 800e1b4:	d1be      	bne.n	800e134 <_printf_float+0x100>
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1bc      	bne.n	800e134 <_printf_float+0x100>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e7b9      	b.n	800e132 <_printf_float+0xfe>
 800e1be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e1c2:	d118      	bne.n	800e1f6 <_printf_float+0x1c2>
 800e1c4:	2900      	cmp	r1, #0
 800e1c6:	6863      	ldr	r3, [r4, #4]
 800e1c8:	dd0b      	ble.n	800e1e2 <_printf_float+0x1ae>
 800e1ca:	6121      	str	r1, [r4, #16]
 800e1cc:	b913      	cbnz	r3, 800e1d4 <_printf_float+0x1a0>
 800e1ce:	6822      	ldr	r2, [r4, #0]
 800e1d0:	07d0      	lsls	r0, r2, #31
 800e1d2:	d502      	bpl.n	800e1da <_printf_float+0x1a6>
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	440b      	add	r3, r1
 800e1d8:	6123      	str	r3, [r4, #16]
 800e1da:	65a1      	str	r1, [r4, #88]	; 0x58
 800e1dc:	f04f 0900 	mov.w	r9, #0
 800e1e0:	e7de      	b.n	800e1a0 <_printf_float+0x16c>
 800e1e2:	b913      	cbnz	r3, 800e1ea <_printf_float+0x1b6>
 800e1e4:	6822      	ldr	r2, [r4, #0]
 800e1e6:	07d2      	lsls	r2, r2, #31
 800e1e8:	d501      	bpl.n	800e1ee <_printf_float+0x1ba>
 800e1ea:	3302      	adds	r3, #2
 800e1ec:	e7f4      	b.n	800e1d8 <_printf_float+0x1a4>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e7f2      	b.n	800e1d8 <_printf_float+0x1a4>
 800e1f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1f8:	4299      	cmp	r1, r3
 800e1fa:	db05      	blt.n	800e208 <_printf_float+0x1d4>
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	6121      	str	r1, [r4, #16]
 800e200:	07d8      	lsls	r0, r3, #31
 800e202:	d5ea      	bpl.n	800e1da <_printf_float+0x1a6>
 800e204:	1c4b      	adds	r3, r1, #1
 800e206:	e7e7      	b.n	800e1d8 <_printf_float+0x1a4>
 800e208:	2900      	cmp	r1, #0
 800e20a:	bfd4      	ite	le
 800e20c:	f1c1 0202 	rsble	r2, r1, #2
 800e210:	2201      	movgt	r2, #1
 800e212:	4413      	add	r3, r2
 800e214:	e7e0      	b.n	800e1d8 <_printf_float+0x1a4>
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	055a      	lsls	r2, r3, #21
 800e21a:	d407      	bmi.n	800e22c <_printf_float+0x1f8>
 800e21c:	6923      	ldr	r3, [r4, #16]
 800e21e:	4642      	mov	r2, r8
 800e220:	4631      	mov	r1, r6
 800e222:	4628      	mov	r0, r5
 800e224:	47b8      	blx	r7
 800e226:	3001      	adds	r0, #1
 800e228:	d12c      	bne.n	800e284 <_printf_float+0x250>
 800e22a:	e764      	b.n	800e0f6 <_printf_float+0xc2>
 800e22c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e230:	f240 80e0 	bls.w	800e3f4 <_printf_float+0x3c0>
 800e234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e238:	2200      	movs	r2, #0
 800e23a:	2300      	movs	r3, #0
 800e23c:	f7f2 fc5e 	bl	8000afc <__aeabi_dcmpeq>
 800e240:	2800      	cmp	r0, #0
 800e242:	d034      	beq.n	800e2ae <_printf_float+0x27a>
 800e244:	4a37      	ldr	r2, [pc, #220]	; (800e324 <_printf_float+0x2f0>)
 800e246:	2301      	movs	r3, #1
 800e248:	4631      	mov	r1, r6
 800e24a:	4628      	mov	r0, r5
 800e24c:	47b8      	blx	r7
 800e24e:	3001      	adds	r0, #1
 800e250:	f43f af51 	beq.w	800e0f6 <_printf_float+0xc2>
 800e254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e258:	429a      	cmp	r2, r3
 800e25a:	db02      	blt.n	800e262 <_printf_float+0x22e>
 800e25c:	6823      	ldr	r3, [r4, #0]
 800e25e:	07d8      	lsls	r0, r3, #31
 800e260:	d510      	bpl.n	800e284 <_printf_float+0x250>
 800e262:	ee18 3a10 	vmov	r3, s16
 800e266:	4652      	mov	r2, sl
 800e268:	4631      	mov	r1, r6
 800e26a:	4628      	mov	r0, r5
 800e26c:	47b8      	blx	r7
 800e26e:	3001      	adds	r0, #1
 800e270:	f43f af41 	beq.w	800e0f6 <_printf_float+0xc2>
 800e274:	f04f 0800 	mov.w	r8, #0
 800e278:	f104 091a 	add.w	r9, r4, #26
 800e27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e27e:	3b01      	subs	r3, #1
 800e280:	4543      	cmp	r3, r8
 800e282:	dc09      	bgt.n	800e298 <_printf_float+0x264>
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	079b      	lsls	r3, r3, #30
 800e288:	f100 8105 	bmi.w	800e496 <_printf_float+0x462>
 800e28c:	68e0      	ldr	r0, [r4, #12]
 800e28e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e290:	4298      	cmp	r0, r3
 800e292:	bfb8      	it	lt
 800e294:	4618      	movlt	r0, r3
 800e296:	e730      	b.n	800e0fa <_printf_float+0xc6>
 800e298:	2301      	movs	r3, #1
 800e29a:	464a      	mov	r2, r9
 800e29c:	4631      	mov	r1, r6
 800e29e:	4628      	mov	r0, r5
 800e2a0:	47b8      	blx	r7
 800e2a2:	3001      	adds	r0, #1
 800e2a4:	f43f af27 	beq.w	800e0f6 <_printf_float+0xc2>
 800e2a8:	f108 0801 	add.w	r8, r8, #1
 800e2ac:	e7e6      	b.n	800e27c <_printf_float+0x248>
 800e2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	dc39      	bgt.n	800e328 <_printf_float+0x2f4>
 800e2b4:	4a1b      	ldr	r2, [pc, #108]	; (800e324 <_printf_float+0x2f0>)
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	4631      	mov	r1, r6
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	47b8      	blx	r7
 800e2be:	3001      	adds	r0, #1
 800e2c0:	f43f af19 	beq.w	800e0f6 <_printf_float+0xc2>
 800e2c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	d102      	bne.n	800e2d2 <_printf_float+0x29e>
 800e2cc:	6823      	ldr	r3, [r4, #0]
 800e2ce:	07d9      	lsls	r1, r3, #31
 800e2d0:	d5d8      	bpl.n	800e284 <_printf_float+0x250>
 800e2d2:	ee18 3a10 	vmov	r3, s16
 800e2d6:	4652      	mov	r2, sl
 800e2d8:	4631      	mov	r1, r6
 800e2da:	4628      	mov	r0, r5
 800e2dc:	47b8      	blx	r7
 800e2de:	3001      	adds	r0, #1
 800e2e0:	f43f af09 	beq.w	800e0f6 <_printf_float+0xc2>
 800e2e4:	f04f 0900 	mov.w	r9, #0
 800e2e8:	f104 0a1a 	add.w	sl, r4, #26
 800e2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2ee:	425b      	negs	r3, r3
 800e2f0:	454b      	cmp	r3, r9
 800e2f2:	dc01      	bgt.n	800e2f8 <_printf_float+0x2c4>
 800e2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2f6:	e792      	b.n	800e21e <_printf_float+0x1ea>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	4652      	mov	r2, sl
 800e2fc:	4631      	mov	r1, r6
 800e2fe:	4628      	mov	r0, r5
 800e300:	47b8      	blx	r7
 800e302:	3001      	adds	r0, #1
 800e304:	f43f aef7 	beq.w	800e0f6 <_printf_float+0xc2>
 800e308:	f109 0901 	add.w	r9, r9, #1
 800e30c:	e7ee      	b.n	800e2ec <_printf_float+0x2b8>
 800e30e:	bf00      	nop
 800e310:	7fefffff 	.word	0x7fefffff
 800e314:	0803c581 	.word	0x0803c581
 800e318:	0803c585 	.word	0x0803c585
 800e31c:	0803c58d 	.word	0x0803c58d
 800e320:	0803c589 	.word	0x0803c589
 800e324:	0803cc68 	.word	0x0803cc68
 800e328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e32a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e32c:	429a      	cmp	r2, r3
 800e32e:	bfa8      	it	ge
 800e330:	461a      	movge	r2, r3
 800e332:	2a00      	cmp	r2, #0
 800e334:	4691      	mov	r9, r2
 800e336:	dc37      	bgt.n	800e3a8 <_printf_float+0x374>
 800e338:	f04f 0b00 	mov.w	fp, #0
 800e33c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e340:	f104 021a 	add.w	r2, r4, #26
 800e344:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e346:	9305      	str	r3, [sp, #20]
 800e348:	eba3 0309 	sub.w	r3, r3, r9
 800e34c:	455b      	cmp	r3, fp
 800e34e:	dc33      	bgt.n	800e3b8 <_printf_float+0x384>
 800e350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e354:	429a      	cmp	r2, r3
 800e356:	db3b      	blt.n	800e3d0 <_printf_float+0x39c>
 800e358:	6823      	ldr	r3, [r4, #0]
 800e35a:	07da      	lsls	r2, r3, #31
 800e35c:	d438      	bmi.n	800e3d0 <_printf_float+0x39c>
 800e35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e360:	9a05      	ldr	r2, [sp, #20]
 800e362:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e364:	1a9a      	subs	r2, r3, r2
 800e366:	eba3 0901 	sub.w	r9, r3, r1
 800e36a:	4591      	cmp	r9, r2
 800e36c:	bfa8      	it	ge
 800e36e:	4691      	movge	r9, r2
 800e370:	f1b9 0f00 	cmp.w	r9, #0
 800e374:	dc35      	bgt.n	800e3e2 <_printf_float+0x3ae>
 800e376:	f04f 0800 	mov.w	r8, #0
 800e37a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e37e:	f104 0a1a 	add.w	sl, r4, #26
 800e382:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e386:	1a9b      	subs	r3, r3, r2
 800e388:	eba3 0309 	sub.w	r3, r3, r9
 800e38c:	4543      	cmp	r3, r8
 800e38e:	f77f af79 	ble.w	800e284 <_printf_float+0x250>
 800e392:	2301      	movs	r3, #1
 800e394:	4652      	mov	r2, sl
 800e396:	4631      	mov	r1, r6
 800e398:	4628      	mov	r0, r5
 800e39a:	47b8      	blx	r7
 800e39c:	3001      	adds	r0, #1
 800e39e:	f43f aeaa 	beq.w	800e0f6 <_printf_float+0xc2>
 800e3a2:	f108 0801 	add.w	r8, r8, #1
 800e3a6:	e7ec      	b.n	800e382 <_printf_float+0x34e>
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	4631      	mov	r1, r6
 800e3ac:	4642      	mov	r2, r8
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	47b8      	blx	r7
 800e3b2:	3001      	adds	r0, #1
 800e3b4:	d1c0      	bne.n	800e338 <_printf_float+0x304>
 800e3b6:	e69e      	b.n	800e0f6 <_printf_float+0xc2>
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	4631      	mov	r1, r6
 800e3bc:	4628      	mov	r0, r5
 800e3be:	9205      	str	r2, [sp, #20]
 800e3c0:	47b8      	blx	r7
 800e3c2:	3001      	adds	r0, #1
 800e3c4:	f43f ae97 	beq.w	800e0f6 <_printf_float+0xc2>
 800e3c8:	9a05      	ldr	r2, [sp, #20]
 800e3ca:	f10b 0b01 	add.w	fp, fp, #1
 800e3ce:	e7b9      	b.n	800e344 <_printf_float+0x310>
 800e3d0:	ee18 3a10 	vmov	r3, s16
 800e3d4:	4652      	mov	r2, sl
 800e3d6:	4631      	mov	r1, r6
 800e3d8:	4628      	mov	r0, r5
 800e3da:	47b8      	blx	r7
 800e3dc:	3001      	adds	r0, #1
 800e3de:	d1be      	bne.n	800e35e <_printf_float+0x32a>
 800e3e0:	e689      	b.n	800e0f6 <_printf_float+0xc2>
 800e3e2:	9a05      	ldr	r2, [sp, #20]
 800e3e4:	464b      	mov	r3, r9
 800e3e6:	4442      	add	r2, r8
 800e3e8:	4631      	mov	r1, r6
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	47b8      	blx	r7
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	d1c1      	bne.n	800e376 <_printf_float+0x342>
 800e3f2:	e680      	b.n	800e0f6 <_printf_float+0xc2>
 800e3f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3f6:	2a01      	cmp	r2, #1
 800e3f8:	dc01      	bgt.n	800e3fe <_printf_float+0x3ca>
 800e3fa:	07db      	lsls	r3, r3, #31
 800e3fc:	d538      	bpl.n	800e470 <_printf_float+0x43c>
 800e3fe:	2301      	movs	r3, #1
 800e400:	4642      	mov	r2, r8
 800e402:	4631      	mov	r1, r6
 800e404:	4628      	mov	r0, r5
 800e406:	47b8      	blx	r7
 800e408:	3001      	adds	r0, #1
 800e40a:	f43f ae74 	beq.w	800e0f6 <_printf_float+0xc2>
 800e40e:	ee18 3a10 	vmov	r3, s16
 800e412:	4652      	mov	r2, sl
 800e414:	4631      	mov	r1, r6
 800e416:	4628      	mov	r0, r5
 800e418:	47b8      	blx	r7
 800e41a:	3001      	adds	r0, #1
 800e41c:	f43f ae6b 	beq.w	800e0f6 <_printf_float+0xc2>
 800e420:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e424:	2200      	movs	r2, #0
 800e426:	2300      	movs	r3, #0
 800e428:	f7f2 fb68 	bl	8000afc <__aeabi_dcmpeq>
 800e42c:	b9d8      	cbnz	r0, 800e466 <_printf_float+0x432>
 800e42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e430:	f108 0201 	add.w	r2, r8, #1
 800e434:	3b01      	subs	r3, #1
 800e436:	4631      	mov	r1, r6
 800e438:	4628      	mov	r0, r5
 800e43a:	47b8      	blx	r7
 800e43c:	3001      	adds	r0, #1
 800e43e:	d10e      	bne.n	800e45e <_printf_float+0x42a>
 800e440:	e659      	b.n	800e0f6 <_printf_float+0xc2>
 800e442:	2301      	movs	r3, #1
 800e444:	4652      	mov	r2, sl
 800e446:	4631      	mov	r1, r6
 800e448:	4628      	mov	r0, r5
 800e44a:	47b8      	blx	r7
 800e44c:	3001      	adds	r0, #1
 800e44e:	f43f ae52 	beq.w	800e0f6 <_printf_float+0xc2>
 800e452:	f108 0801 	add.w	r8, r8, #1
 800e456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e458:	3b01      	subs	r3, #1
 800e45a:	4543      	cmp	r3, r8
 800e45c:	dcf1      	bgt.n	800e442 <_printf_float+0x40e>
 800e45e:	464b      	mov	r3, r9
 800e460:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e464:	e6dc      	b.n	800e220 <_printf_float+0x1ec>
 800e466:	f04f 0800 	mov.w	r8, #0
 800e46a:	f104 0a1a 	add.w	sl, r4, #26
 800e46e:	e7f2      	b.n	800e456 <_printf_float+0x422>
 800e470:	2301      	movs	r3, #1
 800e472:	4642      	mov	r2, r8
 800e474:	e7df      	b.n	800e436 <_printf_float+0x402>
 800e476:	2301      	movs	r3, #1
 800e478:	464a      	mov	r2, r9
 800e47a:	4631      	mov	r1, r6
 800e47c:	4628      	mov	r0, r5
 800e47e:	47b8      	blx	r7
 800e480:	3001      	adds	r0, #1
 800e482:	f43f ae38 	beq.w	800e0f6 <_printf_float+0xc2>
 800e486:	f108 0801 	add.w	r8, r8, #1
 800e48a:	68e3      	ldr	r3, [r4, #12]
 800e48c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e48e:	1a5b      	subs	r3, r3, r1
 800e490:	4543      	cmp	r3, r8
 800e492:	dcf0      	bgt.n	800e476 <_printf_float+0x442>
 800e494:	e6fa      	b.n	800e28c <_printf_float+0x258>
 800e496:	f04f 0800 	mov.w	r8, #0
 800e49a:	f104 0919 	add.w	r9, r4, #25
 800e49e:	e7f4      	b.n	800e48a <_printf_float+0x456>

0800e4a0 <_printf_common>:
 800e4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4a4:	4616      	mov	r6, r2
 800e4a6:	4699      	mov	r9, r3
 800e4a8:	688a      	ldr	r2, [r1, #8]
 800e4aa:	690b      	ldr	r3, [r1, #16]
 800e4ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	bfb8      	it	lt
 800e4b4:	4613      	movlt	r3, r2
 800e4b6:	6033      	str	r3, [r6, #0]
 800e4b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4bc:	4607      	mov	r7, r0
 800e4be:	460c      	mov	r4, r1
 800e4c0:	b10a      	cbz	r2, 800e4c6 <_printf_common+0x26>
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	6033      	str	r3, [r6, #0]
 800e4c6:	6823      	ldr	r3, [r4, #0]
 800e4c8:	0699      	lsls	r1, r3, #26
 800e4ca:	bf42      	ittt	mi
 800e4cc:	6833      	ldrmi	r3, [r6, #0]
 800e4ce:	3302      	addmi	r3, #2
 800e4d0:	6033      	strmi	r3, [r6, #0]
 800e4d2:	6825      	ldr	r5, [r4, #0]
 800e4d4:	f015 0506 	ands.w	r5, r5, #6
 800e4d8:	d106      	bne.n	800e4e8 <_printf_common+0x48>
 800e4da:	f104 0a19 	add.w	sl, r4, #25
 800e4de:	68e3      	ldr	r3, [r4, #12]
 800e4e0:	6832      	ldr	r2, [r6, #0]
 800e4e2:	1a9b      	subs	r3, r3, r2
 800e4e4:	42ab      	cmp	r3, r5
 800e4e6:	dc26      	bgt.n	800e536 <_printf_common+0x96>
 800e4e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e4ec:	1e13      	subs	r3, r2, #0
 800e4ee:	6822      	ldr	r2, [r4, #0]
 800e4f0:	bf18      	it	ne
 800e4f2:	2301      	movne	r3, #1
 800e4f4:	0692      	lsls	r2, r2, #26
 800e4f6:	d42b      	bmi.n	800e550 <_printf_common+0xb0>
 800e4f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4fc:	4649      	mov	r1, r9
 800e4fe:	4638      	mov	r0, r7
 800e500:	47c0      	blx	r8
 800e502:	3001      	adds	r0, #1
 800e504:	d01e      	beq.n	800e544 <_printf_common+0xa4>
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	68e5      	ldr	r5, [r4, #12]
 800e50a:	6832      	ldr	r2, [r6, #0]
 800e50c:	f003 0306 	and.w	r3, r3, #6
 800e510:	2b04      	cmp	r3, #4
 800e512:	bf08      	it	eq
 800e514:	1aad      	subeq	r5, r5, r2
 800e516:	68a3      	ldr	r3, [r4, #8]
 800e518:	6922      	ldr	r2, [r4, #16]
 800e51a:	bf0c      	ite	eq
 800e51c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e520:	2500      	movne	r5, #0
 800e522:	4293      	cmp	r3, r2
 800e524:	bfc4      	itt	gt
 800e526:	1a9b      	subgt	r3, r3, r2
 800e528:	18ed      	addgt	r5, r5, r3
 800e52a:	2600      	movs	r6, #0
 800e52c:	341a      	adds	r4, #26
 800e52e:	42b5      	cmp	r5, r6
 800e530:	d11a      	bne.n	800e568 <_printf_common+0xc8>
 800e532:	2000      	movs	r0, #0
 800e534:	e008      	b.n	800e548 <_printf_common+0xa8>
 800e536:	2301      	movs	r3, #1
 800e538:	4652      	mov	r2, sl
 800e53a:	4649      	mov	r1, r9
 800e53c:	4638      	mov	r0, r7
 800e53e:	47c0      	blx	r8
 800e540:	3001      	adds	r0, #1
 800e542:	d103      	bne.n	800e54c <_printf_common+0xac>
 800e544:	f04f 30ff 	mov.w	r0, #4294967295
 800e548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e54c:	3501      	adds	r5, #1
 800e54e:	e7c6      	b.n	800e4de <_printf_common+0x3e>
 800e550:	18e1      	adds	r1, r4, r3
 800e552:	1c5a      	adds	r2, r3, #1
 800e554:	2030      	movs	r0, #48	; 0x30
 800e556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e55a:	4422      	add	r2, r4
 800e55c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e564:	3302      	adds	r3, #2
 800e566:	e7c7      	b.n	800e4f8 <_printf_common+0x58>
 800e568:	2301      	movs	r3, #1
 800e56a:	4622      	mov	r2, r4
 800e56c:	4649      	mov	r1, r9
 800e56e:	4638      	mov	r0, r7
 800e570:	47c0      	blx	r8
 800e572:	3001      	adds	r0, #1
 800e574:	d0e6      	beq.n	800e544 <_printf_common+0xa4>
 800e576:	3601      	adds	r6, #1
 800e578:	e7d9      	b.n	800e52e <_printf_common+0x8e>
	...

0800e57c <_printf_i>:
 800e57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e580:	7e0f      	ldrb	r7, [r1, #24]
 800e582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e584:	2f78      	cmp	r7, #120	; 0x78
 800e586:	4691      	mov	r9, r2
 800e588:	4680      	mov	r8, r0
 800e58a:	460c      	mov	r4, r1
 800e58c:	469a      	mov	sl, r3
 800e58e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e592:	d807      	bhi.n	800e5a4 <_printf_i+0x28>
 800e594:	2f62      	cmp	r7, #98	; 0x62
 800e596:	d80a      	bhi.n	800e5ae <_printf_i+0x32>
 800e598:	2f00      	cmp	r7, #0
 800e59a:	f000 80d8 	beq.w	800e74e <_printf_i+0x1d2>
 800e59e:	2f58      	cmp	r7, #88	; 0x58
 800e5a0:	f000 80a3 	beq.w	800e6ea <_printf_i+0x16e>
 800e5a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5ac:	e03a      	b.n	800e624 <_printf_i+0xa8>
 800e5ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5b2:	2b15      	cmp	r3, #21
 800e5b4:	d8f6      	bhi.n	800e5a4 <_printf_i+0x28>
 800e5b6:	a101      	add	r1, pc, #4	; (adr r1, 800e5bc <_printf_i+0x40>)
 800e5b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5bc:	0800e615 	.word	0x0800e615
 800e5c0:	0800e629 	.word	0x0800e629
 800e5c4:	0800e5a5 	.word	0x0800e5a5
 800e5c8:	0800e5a5 	.word	0x0800e5a5
 800e5cc:	0800e5a5 	.word	0x0800e5a5
 800e5d0:	0800e5a5 	.word	0x0800e5a5
 800e5d4:	0800e629 	.word	0x0800e629
 800e5d8:	0800e5a5 	.word	0x0800e5a5
 800e5dc:	0800e5a5 	.word	0x0800e5a5
 800e5e0:	0800e5a5 	.word	0x0800e5a5
 800e5e4:	0800e5a5 	.word	0x0800e5a5
 800e5e8:	0800e735 	.word	0x0800e735
 800e5ec:	0800e659 	.word	0x0800e659
 800e5f0:	0800e717 	.word	0x0800e717
 800e5f4:	0800e5a5 	.word	0x0800e5a5
 800e5f8:	0800e5a5 	.word	0x0800e5a5
 800e5fc:	0800e757 	.word	0x0800e757
 800e600:	0800e5a5 	.word	0x0800e5a5
 800e604:	0800e659 	.word	0x0800e659
 800e608:	0800e5a5 	.word	0x0800e5a5
 800e60c:	0800e5a5 	.word	0x0800e5a5
 800e610:	0800e71f 	.word	0x0800e71f
 800e614:	682b      	ldr	r3, [r5, #0]
 800e616:	1d1a      	adds	r2, r3, #4
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	602a      	str	r2, [r5, #0]
 800e61c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e624:	2301      	movs	r3, #1
 800e626:	e0a3      	b.n	800e770 <_printf_i+0x1f4>
 800e628:	6820      	ldr	r0, [r4, #0]
 800e62a:	6829      	ldr	r1, [r5, #0]
 800e62c:	0606      	lsls	r6, r0, #24
 800e62e:	f101 0304 	add.w	r3, r1, #4
 800e632:	d50a      	bpl.n	800e64a <_printf_i+0xce>
 800e634:	680e      	ldr	r6, [r1, #0]
 800e636:	602b      	str	r3, [r5, #0]
 800e638:	2e00      	cmp	r6, #0
 800e63a:	da03      	bge.n	800e644 <_printf_i+0xc8>
 800e63c:	232d      	movs	r3, #45	; 0x2d
 800e63e:	4276      	negs	r6, r6
 800e640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e644:	485e      	ldr	r0, [pc, #376]	; (800e7c0 <_printf_i+0x244>)
 800e646:	230a      	movs	r3, #10
 800e648:	e019      	b.n	800e67e <_printf_i+0x102>
 800e64a:	680e      	ldr	r6, [r1, #0]
 800e64c:	602b      	str	r3, [r5, #0]
 800e64e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e652:	bf18      	it	ne
 800e654:	b236      	sxthne	r6, r6
 800e656:	e7ef      	b.n	800e638 <_printf_i+0xbc>
 800e658:	682b      	ldr	r3, [r5, #0]
 800e65a:	6820      	ldr	r0, [r4, #0]
 800e65c:	1d19      	adds	r1, r3, #4
 800e65e:	6029      	str	r1, [r5, #0]
 800e660:	0601      	lsls	r1, r0, #24
 800e662:	d501      	bpl.n	800e668 <_printf_i+0xec>
 800e664:	681e      	ldr	r6, [r3, #0]
 800e666:	e002      	b.n	800e66e <_printf_i+0xf2>
 800e668:	0646      	lsls	r6, r0, #25
 800e66a:	d5fb      	bpl.n	800e664 <_printf_i+0xe8>
 800e66c:	881e      	ldrh	r6, [r3, #0]
 800e66e:	4854      	ldr	r0, [pc, #336]	; (800e7c0 <_printf_i+0x244>)
 800e670:	2f6f      	cmp	r7, #111	; 0x6f
 800e672:	bf0c      	ite	eq
 800e674:	2308      	moveq	r3, #8
 800e676:	230a      	movne	r3, #10
 800e678:	2100      	movs	r1, #0
 800e67a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e67e:	6865      	ldr	r5, [r4, #4]
 800e680:	60a5      	str	r5, [r4, #8]
 800e682:	2d00      	cmp	r5, #0
 800e684:	bfa2      	ittt	ge
 800e686:	6821      	ldrge	r1, [r4, #0]
 800e688:	f021 0104 	bicge.w	r1, r1, #4
 800e68c:	6021      	strge	r1, [r4, #0]
 800e68e:	b90e      	cbnz	r6, 800e694 <_printf_i+0x118>
 800e690:	2d00      	cmp	r5, #0
 800e692:	d04d      	beq.n	800e730 <_printf_i+0x1b4>
 800e694:	4615      	mov	r5, r2
 800e696:	fbb6 f1f3 	udiv	r1, r6, r3
 800e69a:	fb03 6711 	mls	r7, r3, r1, r6
 800e69e:	5dc7      	ldrb	r7, [r0, r7]
 800e6a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6a4:	4637      	mov	r7, r6
 800e6a6:	42bb      	cmp	r3, r7
 800e6a8:	460e      	mov	r6, r1
 800e6aa:	d9f4      	bls.n	800e696 <_printf_i+0x11a>
 800e6ac:	2b08      	cmp	r3, #8
 800e6ae:	d10b      	bne.n	800e6c8 <_printf_i+0x14c>
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	07de      	lsls	r6, r3, #31
 800e6b4:	d508      	bpl.n	800e6c8 <_printf_i+0x14c>
 800e6b6:	6923      	ldr	r3, [r4, #16]
 800e6b8:	6861      	ldr	r1, [r4, #4]
 800e6ba:	4299      	cmp	r1, r3
 800e6bc:	bfde      	ittt	le
 800e6be:	2330      	movle	r3, #48	; 0x30
 800e6c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6c8:	1b52      	subs	r2, r2, r5
 800e6ca:	6122      	str	r2, [r4, #16]
 800e6cc:	f8cd a000 	str.w	sl, [sp]
 800e6d0:	464b      	mov	r3, r9
 800e6d2:	aa03      	add	r2, sp, #12
 800e6d4:	4621      	mov	r1, r4
 800e6d6:	4640      	mov	r0, r8
 800e6d8:	f7ff fee2 	bl	800e4a0 <_printf_common>
 800e6dc:	3001      	adds	r0, #1
 800e6de:	d14c      	bne.n	800e77a <_printf_i+0x1fe>
 800e6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e4:	b004      	add	sp, #16
 800e6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ea:	4835      	ldr	r0, [pc, #212]	; (800e7c0 <_printf_i+0x244>)
 800e6ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e6f0:	6829      	ldr	r1, [r5, #0]
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6f8:	6029      	str	r1, [r5, #0]
 800e6fa:	061d      	lsls	r5, r3, #24
 800e6fc:	d514      	bpl.n	800e728 <_printf_i+0x1ac>
 800e6fe:	07df      	lsls	r7, r3, #31
 800e700:	bf44      	itt	mi
 800e702:	f043 0320 	orrmi.w	r3, r3, #32
 800e706:	6023      	strmi	r3, [r4, #0]
 800e708:	b91e      	cbnz	r6, 800e712 <_printf_i+0x196>
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	f023 0320 	bic.w	r3, r3, #32
 800e710:	6023      	str	r3, [r4, #0]
 800e712:	2310      	movs	r3, #16
 800e714:	e7b0      	b.n	800e678 <_printf_i+0xfc>
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	f043 0320 	orr.w	r3, r3, #32
 800e71c:	6023      	str	r3, [r4, #0]
 800e71e:	2378      	movs	r3, #120	; 0x78
 800e720:	4828      	ldr	r0, [pc, #160]	; (800e7c4 <_printf_i+0x248>)
 800e722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e726:	e7e3      	b.n	800e6f0 <_printf_i+0x174>
 800e728:	0659      	lsls	r1, r3, #25
 800e72a:	bf48      	it	mi
 800e72c:	b2b6      	uxthmi	r6, r6
 800e72e:	e7e6      	b.n	800e6fe <_printf_i+0x182>
 800e730:	4615      	mov	r5, r2
 800e732:	e7bb      	b.n	800e6ac <_printf_i+0x130>
 800e734:	682b      	ldr	r3, [r5, #0]
 800e736:	6826      	ldr	r6, [r4, #0]
 800e738:	6961      	ldr	r1, [r4, #20]
 800e73a:	1d18      	adds	r0, r3, #4
 800e73c:	6028      	str	r0, [r5, #0]
 800e73e:	0635      	lsls	r5, r6, #24
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	d501      	bpl.n	800e748 <_printf_i+0x1cc>
 800e744:	6019      	str	r1, [r3, #0]
 800e746:	e002      	b.n	800e74e <_printf_i+0x1d2>
 800e748:	0670      	lsls	r0, r6, #25
 800e74a:	d5fb      	bpl.n	800e744 <_printf_i+0x1c8>
 800e74c:	8019      	strh	r1, [r3, #0]
 800e74e:	2300      	movs	r3, #0
 800e750:	6123      	str	r3, [r4, #16]
 800e752:	4615      	mov	r5, r2
 800e754:	e7ba      	b.n	800e6cc <_printf_i+0x150>
 800e756:	682b      	ldr	r3, [r5, #0]
 800e758:	1d1a      	adds	r2, r3, #4
 800e75a:	602a      	str	r2, [r5, #0]
 800e75c:	681d      	ldr	r5, [r3, #0]
 800e75e:	6862      	ldr	r2, [r4, #4]
 800e760:	2100      	movs	r1, #0
 800e762:	4628      	mov	r0, r5
 800e764:	f7f1 fd4c 	bl	8000200 <memchr>
 800e768:	b108      	cbz	r0, 800e76e <_printf_i+0x1f2>
 800e76a:	1b40      	subs	r0, r0, r5
 800e76c:	6060      	str	r0, [r4, #4]
 800e76e:	6863      	ldr	r3, [r4, #4]
 800e770:	6123      	str	r3, [r4, #16]
 800e772:	2300      	movs	r3, #0
 800e774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e778:	e7a8      	b.n	800e6cc <_printf_i+0x150>
 800e77a:	6923      	ldr	r3, [r4, #16]
 800e77c:	462a      	mov	r2, r5
 800e77e:	4649      	mov	r1, r9
 800e780:	4640      	mov	r0, r8
 800e782:	47d0      	blx	sl
 800e784:	3001      	adds	r0, #1
 800e786:	d0ab      	beq.n	800e6e0 <_printf_i+0x164>
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	079b      	lsls	r3, r3, #30
 800e78c:	d413      	bmi.n	800e7b6 <_printf_i+0x23a>
 800e78e:	68e0      	ldr	r0, [r4, #12]
 800e790:	9b03      	ldr	r3, [sp, #12]
 800e792:	4298      	cmp	r0, r3
 800e794:	bfb8      	it	lt
 800e796:	4618      	movlt	r0, r3
 800e798:	e7a4      	b.n	800e6e4 <_printf_i+0x168>
 800e79a:	2301      	movs	r3, #1
 800e79c:	4632      	mov	r2, r6
 800e79e:	4649      	mov	r1, r9
 800e7a0:	4640      	mov	r0, r8
 800e7a2:	47d0      	blx	sl
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	d09b      	beq.n	800e6e0 <_printf_i+0x164>
 800e7a8:	3501      	adds	r5, #1
 800e7aa:	68e3      	ldr	r3, [r4, #12]
 800e7ac:	9903      	ldr	r1, [sp, #12]
 800e7ae:	1a5b      	subs	r3, r3, r1
 800e7b0:	42ab      	cmp	r3, r5
 800e7b2:	dcf2      	bgt.n	800e79a <_printf_i+0x21e>
 800e7b4:	e7eb      	b.n	800e78e <_printf_i+0x212>
 800e7b6:	2500      	movs	r5, #0
 800e7b8:	f104 0619 	add.w	r6, r4, #25
 800e7bc:	e7f5      	b.n	800e7aa <_printf_i+0x22e>
 800e7be:	bf00      	nop
 800e7c0:	0803c591 	.word	0x0803c591
 800e7c4:	0803c5a2 	.word	0x0803c5a2

0800e7c8 <_sbrk_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4d06      	ldr	r5, [pc, #24]	; (800e7e4 <_sbrk_r+0x1c>)
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	4608      	mov	r0, r1
 800e7d2:	602b      	str	r3, [r5, #0]
 800e7d4:	f006 fa12 	bl	8014bfc <_sbrk>
 800e7d8:	1c43      	adds	r3, r0, #1
 800e7da:	d102      	bne.n	800e7e2 <_sbrk_r+0x1a>
 800e7dc:	682b      	ldr	r3, [r5, #0]
 800e7de:	b103      	cbz	r3, 800e7e2 <_sbrk_r+0x1a>
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	bd38      	pop	{r3, r4, r5, pc}
 800e7e4:	20003c20 	.word	0x20003c20

0800e7e8 <siprintf>:
 800e7e8:	b40e      	push	{r1, r2, r3}
 800e7ea:	b500      	push	{lr}
 800e7ec:	b09c      	sub	sp, #112	; 0x70
 800e7ee:	ab1d      	add	r3, sp, #116	; 0x74
 800e7f0:	9002      	str	r0, [sp, #8]
 800e7f2:	9006      	str	r0, [sp, #24]
 800e7f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e7f8:	4809      	ldr	r0, [pc, #36]	; (800e820 <siprintf+0x38>)
 800e7fa:	9107      	str	r1, [sp, #28]
 800e7fc:	9104      	str	r1, [sp, #16]
 800e7fe:	4909      	ldr	r1, [pc, #36]	; (800e824 <siprintf+0x3c>)
 800e800:	f853 2b04 	ldr.w	r2, [r3], #4
 800e804:	9105      	str	r1, [sp, #20]
 800e806:	6800      	ldr	r0, [r0, #0]
 800e808:	9301      	str	r3, [sp, #4]
 800e80a:	a902      	add	r1, sp, #8
 800e80c:	f002 fffc 	bl	8011808 <_svfiprintf_r>
 800e810:	9b02      	ldr	r3, [sp, #8]
 800e812:	2200      	movs	r2, #0
 800e814:	701a      	strb	r2, [r3, #0]
 800e816:	b01c      	add	sp, #112	; 0x70
 800e818:	f85d eb04 	ldr.w	lr, [sp], #4
 800e81c:	b003      	add	sp, #12
 800e81e:	4770      	bx	lr
 800e820:	200002c0 	.word	0x200002c0
 800e824:	ffff0208 	.word	0xffff0208

0800e828 <siscanf>:
 800e828:	b40e      	push	{r1, r2, r3}
 800e82a:	b510      	push	{r4, lr}
 800e82c:	b09f      	sub	sp, #124	; 0x7c
 800e82e:	ac21      	add	r4, sp, #132	; 0x84
 800e830:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e834:	f854 2b04 	ldr.w	r2, [r4], #4
 800e838:	9201      	str	r2, [sp, #4]
 800e83a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e83e:	9004      	str	r0, [sp, #16]
 800e840:	9008      	str	r0, [sp, #32]
 800e842:	f7f1 fcd5 	bl	80001f0 <strlen>
 800e846:	4b0c      	ldr	r3, [pc, #48]	; (800e878 <siscanf+0x50>)
 800e848:	9005      	str	r0, [sp, #20]
 800e84a:	9009      	str	r0, [sp, #36]	; 0x24
 800e84c:	930d      	str	r3, [sp, #52]	; 0x34
 800e84e:	480b      	ldr	r0, [pc, #44]	; (800e87c <siscanf+0x54>)
 800e850:	9a01      	ldr	r2, [sp, #4]
 800e852:	6800      	ldr	r0, [r0, #0]
 800e854:	9403      	str	r4, [sp, #12]
 800e856:	2300      	movs	r3, #0
 800e858:	9311      	str	r3, [sp, #68]	; 0x44
 800e85a:	9316      	str	r3, [sp, #88]	; 0x58
 800e85c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e860:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e864:	a904      	add	r1, sp, #16
 800e866:	4623      	mov	r3, r4
 800e868:	f003 f928 	bl	8011abc <__ssvfiscanf_r>
 800e86c:	b01f      	add	sp, #124	; 0x7c
 800e86e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e872:	b003      	add	sp, #12
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	0800e8a3 	.word	0x0800e8a3
 800e87c:	200002c0 	.word	0x200002c0

0800e880 <__sread>:
 800e880:	b510      	push	{r4, lr}
 800e882:	460c      	mov	r4, r1
 800e884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e888:	f003 fbe2 	bl	8012050 <_read_r>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	bfab      	itete	ge
 800e890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e892:	89a3      	ldrhlt	r3, [r4, #12]
 800e894:	181b      	addge	r3, r3, r0
 800e896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e89a:	bfac      	ite	ge
 800e89c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e89e:	81a3      	strhlt	r3, [r4, #12]
 800e8a0:	bd10      	pop	{r4, pc}

0800e8a2 <__seofread>:
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	4770      	bx	lr

0800e8a6 <__swrite>:
 800e8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8aa:	461f      	mov	r7, r3
 800e8ac:	898b      	ldrh	r3, [r1, #12]
 800e8ae:	05db      	lsls	r3, r3, #23
 800e8b0:	4605      	mov	r5, r0
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	4616      	mov	r6, r2
 800e8b6:	d505      	bpl.n	800e8c4 <__swrite+0x1e>
 800e8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8bc:	2302      	movs	r3, #2
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f002 fae0 	bl	8010e84 <_lseek_r>
 800e8c4:	89a3      	ldrh	r3, [r4, #12]
 800e8c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8ce:	81a3      	strh	r3, [r4, #12]
 800e8d0:	4632      	mov	r2, r6
 800e8d2:	463b      	mov	r3, r7
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8da:	f001 b993 	b.w	800fc04 <_write_r>

0800e8de <__sseek>:
 800e8de:	b510      	push	{r4, lr}
 800e8e0:	460c      	mov	r4, r1
 800e8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8e6:	f002 facd 	bl	8010e84 <_lseek_r>
 800e8ea:	1c43      	adds	r3, r0, #1
 800e8ec:	89a3      	ldrh	r3, [r4, #12]
 800e8ee:	bf15      	itete	ne
 800e8f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e8f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e8f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e8fa:	81a3      	strheq	r3, [r4, #12]
 800e8fc:	bf18      	it	ne
 800e8fe:	81a3      	strhne	r3, [r4, #12]
 800e900:	bd10      	pop	{r4, pc}

0800e902 <__sclose>:
 800e902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e906:	f001 ba09 	b.w	800fd1c <_close_r>

0800e90a <strcpy>:
 800e90a:	4603      	mov	r3, r0
 800e90c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e910:	f803 2b01 	strb.w	r2, [r3], #1
 800e914:	2a00      	cmp	r2, #0
 800e916:	d1f9      	bne.n	800e90c <strcpy+0x2>
 800e918:	4770      	bx	lr
	...

0800e91c <iso_year_adjust>:
 800e91c:	6942      	ldr	r2, [r0, #20]
 800e91e:	2a00      	cmp	r2, #0
 800e920:	f240 736c 	movw	r3, #1900	; 0x76c
 800e924:	bfa8      	it	ge
 800e926:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800e92a:	4413      	add	r3, r2
 800e92c:	0792      	lsls	r2, r2, #30
 800e92e:	d105      	bne.n	800e93c <iso_year_adjust+0x20>
 800e930:	2164      	movs	r1, #100	; 0x64
 800e932:	fb93 f2f1 	sdiv	r2, r3, r1
 800e936:	fb01 3212 	mls	r2, r1, r2, r3
 800e93a:	b9da      	cbnz	r2, 800e974 <iso_year_adjust+0x58>
 800e93c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e940:	fb93 f1f2 	sdiv	r1, r3, r2
 800e944:	fb02 3311 	mls	r3, r2, r1, r3
 800e948:	fab3 f383 	clz	r3, r3
 800e94c:	095b      	lsrs	r3, r3, #5
 800e94e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800e952:	0040      	lsls	r0, r0, #1
 800e954:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800e958:	4418      	add	r0, r3
 800e95a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800e95e:	4298      	cmp	r0, r3
 800e960:	d03a      	beq.n	800e9d8 <iso_year_adjust+0xbc>
 800e962:	dc21      	bgt.n	800e9a8 <iso_year_adjust+0x8c>
 800e964:	2801      	cmp	r0, #1
 800e966:	dc1a      	bgt.n	800e99e <iso_year_adjust+0x82>
 800e968:	2800      	cmp	r0, #0
 800e96a:	bfb4      	ite	lt
 800e96c:	2000      	movlt	r0, #0
 800e96e:	f04f 30ff 	movge.w	r0, #4294967295
 800e972:	4770      	bx	lr
 800e974:	2301      	movs	r3, #1
 800e976:	e7ea      	b.n	800e94e <iso_year_adjust+0x32>
 800e978:	2817      	cmp	r0, #23
 800e97a:	d813      	bhi.n	800e9a4 <iso_year_adjust+0x88>
 800e97c:	e8df f000 	tbb	[pc, r0]
 800e980:	0c0c0c0c 	.word	0x0c0c0c0c
 800e984:	0c0c1212 	.word	0x0c0c1212
 800e988:	12121212 	.word	0x12121212
 800e98c:	12121212 	.word	0x12121212
 800e990:	0c0c1212 	.word	0x0c0c1212
 800e994:	0c0c1212 	.word	0x0c0c1212
 800e998:	f04f 30ff 	mov.w	r0, #4294967295
 800e99c:	4770      	bx	lr
 800e99e:	380a      	subs	r0, #10
 800e9a0:	2817      	cmp	r0, #23
 800e9a2:	d9e9      	bls.n	800e978 <iso_year_adjust+0x5c>
 800e9a4:	2000      	movs	r0, #0
 800e9a6:	4770      	bx	lr
 800e9a8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800e9ac:	4298      	cmp	r0, r3
 800e9ae:	dc06      	bgt.n	800e9be <iso_year_adjust+0xa2>
 800e9b0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800e9b4:	4298      	cmp	r0, r3
 800e9b6:	bfd4      	ite	le
 800e9b8:	2000      	movle	r0, #0
 800e9ba:	2001      	movgt	r0, #1
 800e9bc:	4770      	bx	lr
 800e9be:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800e9c2:	3802      	subs	r0, #2
 800e9c4:	2815      	cmp	r0, #21
 800e9c6:	d8ed      	bhi.n	800e9a4 <iso_year_adjust+0x88>
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	4083      	lsls	r3, r0
 800e9cc:	4803      	ldr	r0, [pc, #12]	; (800e9dc <iso_year_adjust+0xc0>)
 800e9ce:	4018      	ands	r0, r3
 800e9d0:	3800      	subs	r0, #0
 800e9d2:	bf18      	it	ne
 800e9d4:	2001      	movne	r0, #1
 800e9d6:	4770      	bx	lr
 800e9d8:	2001      	movs	r0, #1
 800e9da:	4770      	bx	lr
 800e9dc:	002a001f 	.word	0x002a001f

0800e9e0 <__strftime.isra.0>:
 800e9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e4:	b08f      	sub	sp, #60	; 0x3c
 800e9e6:	461e      	mov	r6, r3
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	4607      	mov	r7, r0
 800e9ec:	460d      	mov	r5, r1
 800e9ee:	9302      	str	r3, [sp, #8]
 800e9f0:	461c      	mov	r4, r3
 800e9f2:	7813      	ldrb	r3, [r2, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	f000 84ba 	beq.w	800f36e <__strftime.isra.0+0x98e>
 800e9fa:	2b25      	cmp	r3, #37	; 0x25
 800e9fc:	d11f      	bne.n	800ea3e <__strftime.isra.0+0x5e>
 800e9fe:	f892 b001 	ldrb.w	fp, [r2, #1]
 800ea02:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800ea06:	d024      	beq.n	800ea52 <__strftime.isra.0+0x72>
 800ea08:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800ea0c:	d021      	beq.n	800ea52 <__strftime.isra.0+0x72>
 800ea0e:	f102 0801 	add.w	r8, r2, #1
 800ea12:	f04f 0b00 	mov.w	fp, #0
 800ea16:	f898 2000 	ldrb.w	r2, [r8]
 800ea1a:	3a31      	subs	r2, #49	; 0x31
 800ea1c:	2a08      	cmp	r2, #8
 800ea1e:	d81b      	bhi.n	800ea58 <__strftime.isra.0+0x78>
 800ea20:	4640      	mov	r0, r8
 800ea22:	220a      	movs	r2, #10
 800ea24:	a906      	add	r1, sp, #24
 800ea26:	f000 fe55 	bl	800f6d4 <strtoul>
 800ea2a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ea2e:	4681      	mov	r9, r0
 800ea30:	f898 2000 	ldrb.w	r2, [r8]
 800ea34:	2a45      	cmp	r2, #69	; 0x45
 800ea36:	d112      	bne.n	800ea5e <__strftime.isra.0+0x7e>
 800ea38:	f108 0801 	add.w	r8, r8, #1
 800ea3c:	e011      	b.n	800ea62 <__strftime.isra.0+0x82>
 800ea3e:	1e69      	subs	r1, r5, #1
 800ea40:	42a1      	cmp	r1, r4
 800ea42:	d802      	bhi.n	800ea4a <__strftime.isra.0+0x6a>
 800ea44:	2400      	movs	r4, #0
 800ea46:	f000 bc95 	b.w	800f374 <__strftime.isra.0+0x994>
 800ea4a:	553b      	strb	r3, [r7, r4]
 800ea4c:	3201      	adds	r2, #1
 800ea4e:	3401      	adds	r4, #1
 800ea50:	e7cf      	b.n	800e9f2 <__strftime.isra.0+0x12>
 800ea52:	f102 0802 	add.w	r8, r2, #2
 800ea56:	e7de      	b.n	800ea16 <__strftime.isra.0+0x36>
 800ea58:	f04f 0900 	mov.w	r9, #0
 800ea5c:	e7e8      	b.n	800ea30 <__strftime.isra.0+0x50>
 800ea5e:	2a4f      	cmp	r2, #79	; 0x4f
 800ea60:	d0ea      	beq.n	800ea38 <__strftime.isra.0+0x58>
 800ea62:	f898 0000 	ldrb.w	r0, [r8]
 800ea66:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800ea6a:	2a55      	cmp	r2, #85	; 0x55
 800ea6c:	d8ea      	bhi.n	800ea44 <__strftime.isra.0+0x64>
 800ea6e:	a301      	add	r3, pc, #4	; (adr r3, 800ea74 <__strftime.isra.0+0x94>)
 800ea70:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800ea74:	0800f363 	.word	0x0800f363
 800ea78:	0800ea45 	.word	0x0800ea45
 800ea7c:	0800ea45 	.word	0x0800ea45
 800ea80:	0800ea45 	.word	0x0800ea45
 800ea84:	0800ea45 	.word	0x0800ea45
 800ea88:	0800ea45 	.word	0x0800ea45
 800ea8c:	0800ea45 	.word	0x0800ea45
 800ea90:	0800ea45 	.word	0x0800ea45
 800ea94:	0800ea45 	.word	0x0800ea45
 800ea98:	0800ea45 	.word	0x0800ea45
 800ea9c:	0800ea45 	.word	0x0800ea45
 800eaa0:	0800ea45 	.word	0x0800ea45
 800eaa4:	0800ea45 	.word	0x0800ea45
 800eaa8:	0800ea45 	.word	0x0800ea45
 800eaac:	0800ea45 	.word	0x0800ea45
 800eab0:	0800ea45 	.word	0x0800ea45
 800eab4:	0800ea45 	.word	0x0800ea45
 800eab8:	0800ea45 	.word	0x0800ea45
 800eabc:	0800ea45 	.word	0x0800ea45
 800eac0:	0800ea45 	.word	0x0800ea45
 800eac4:	0800ea45 	.word	0x0800ea45
 800eac8:	0800ea45 	.word	0x0800ea45
 800eacc:	0800ea45 	.word	0x0800ea45
 800ead0:	0800ea45 	.word	0x0800ea45
 800ead4:	0800ea45 	.word	0x0800ea45
 800ead8:	0800ea45 	.word	0x0800ea45
 800eadc:	0800ea45 	.word	0x0800ea45
 800eae0:	0800ea45 	.word	0x0800ea45
 800eae4:	0800ec09 	.word	0x0800ec09
 800eae8:	0800ec61 	.word	0x0800ec61
 800eaec:	0800eccf 	.word	0x0800eccf
 800eaf0:	0800ed6d 	.word	0x0800ed6d
 800eaf4:	0800ea45 	.word	0x0800ea45
 800eaf8:	0800edb9 	.word	0x0800edb9
 800eafc:	0800eea5 	.word	0x0800eea5
 800eb00:	0800ef7f 	.word	0x0800ef7f
 800eb04:	0800ef8d 	.word	0x0800ef8d
 800eb08:	0800ea45 	.word	0x0800ea45
 800eb0c:	0800ea45 	.word	0x0800ea45
 800eb10:	0800ea45 	.word	0x0800ea45
 800eb14:	0800efbd 	.word	0x0800efbd
 800eb18:	0800ea45 	.word	0x0800ea45
 800eb1c:	0800ea45 	.word	0x0800ea45
 800eb20:	0800efd1 	.word	0x0800efd1
 800eb24:	0800ea45 	.word	0x0800ea45
 800eb28:	0800f023 	.word	0x0800f023
 800eb2c:	0800f137 	.word	0x0800f137
 800eb30:	0800f147 	.word	0x0800f147
 800eb34:	0800f16f 	.word	0x0800f16f
 800eb38:	0800f1a9 	.word	0x0800f1a9
 800eb3c:	0800f21d 	.word	0x0800f21d
 800eb40:	0800ecc7 	.word	0x0800ecc7
 800eb44:	0800f249 	.word	0x0800f249
 800eb48:	0800f311 	.word	0x0800f311
 800eb4c:	0800ea45 	.word	0x0800ea45
 800eb50:	0800ea45 	.word	0x0800ea45
 800eb54:	0800ea45 	.word	0x0800ea45
 800eb58:	0800ea45 	.word	0x0800ea45
 800eb5c:	0800ea45 	.word	0x0800ea45
 800eb60:	0800ea45 	.word	0x0800ea45
 800eb64:	0800ebcd 	.word	0x0800ebcd
 800eb68:	0800ec37 	.word	0x0800ec37
 800eb6c:	0800ec8d 	.word	0x0800ec8d
 800eb70:	0800ed49 	.word	0x0800ed49
 800eb74:	0800ed49 	.word	0x0800ed49
 800eb78:	0800ea45 	.word	0x0800ea45
 800eb7c:	0800ee0b 	.word	0x0800ee0b
 800eb80:	0800ec37 	.word	0x0800ec37
 800eb84:	0800ea45 	.word	0x0800ea45
 800eb88:	0800efaf 	.word	0x0800efaf
 800eb8c:	0800ef7f 	.word	0x0800ef7f
 800eb90:	0800ef8d 	.word	0x0800ef8d
 800eb94:	0800efb7 	.word	0x0800efb7
 800eb98:	0800efc1 	.word	0x0800efc1
 800eb9c:	0800ea45 	.word	0x0800ea45
 800eba0:	0800efd1 	.word	0x0800efd1
 800eba4:	0800ea45 	.word	0x0800ea45
 800eba8:	0800ecb7 	.word	0x0800ecb7
 800ebac:	0800f035 	.word	0x0800f035
 800ebb0:	0800f13b 	.word	0x0800f13b
 800ebb4:	0800f155 	.word	0x0800f155
 800ebb8:	0800ea45 	.word	0x0800ea45
 800ebbc:	0800f20f 	.word	0x0800f20f
 800ebc0:	0800ecbf 	.word	0x0800ecbf
 800ebc4:	0800f22d 	.word	0x0800f22d
 800ebc8:	0800f29b 	.word	0x0800f29b
 800ebcc:	69b3      	ldr	r3, [r6, #24]
 800ebce:	4aa9      	ldr	r2, [pc, #676]	; (800ee74 <__strftime.isra.0+0x494>)
 800ebd0:	3318      	adds	r3, #24
 800ebd2:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800ebd6:	4648      	mov	r0, r9
 800ebd8:	f7f1 fb0a 	bl	80001f0 <strlen>
 800ebdc:	f109 39ff 	add.w	r9, r9, #4294967295
 800ebe0:	4420      	add	r0, r4
 800ebe2:	1e6b      	subs	r3, r5, #1
 800ebe4:	42a0      	cmp	r0, r4
 800ebe6:	d107      	bne.n	800ebf8 <__strftime.isra.0+0x218>
 800ebe8:	f898 3000 	ldrb.w	r3, [r8]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f000 83be 	beq.w	800f36e <__strftime.isra.0+0x98e>
 800ebf2:	f108 0201 	add.w	r2, r8, #1
 800ebf6:	e6fc      	b.n	800e9f2 <__strftime.isra.0+0x12>
 800ebf8:	42a3      	cmp	r3, r4
 800ebfa:	f67f af23 	bls.w	800ea44 <__strftime.isra.0+0x64>
 800ebfe:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ec02:	553a      	strb	r2, [r7, r4]
 800ec04:	3401      	adds	r4, #1
 800ec06:	e7ed      	b.n	800ebe4 <__strftime.isra.0+0x204>
 800ec08:	69b2      	ldr	r2, [r6, #24]
 800ec0a:	4b9a      	ldr	r3, [pc, #616]	; (800ee74 <__strftime.isra.0+0x494>)
 800ec0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ec10:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800ec14:	4648      	mov	r0, r9
 800ec16:	f7f1 faeb 	bl	80001f0 <strlen>
 800ec1a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ec1e:	4420      	add	r0, r4
 800ec20:	1e6b      	subs	r3, r5, #1
 800ec22:	42a0      	cmp	r0, r4
 800ec24:	d0e0      	beq.n	800ebe8 <__strftime.isra.0+0x208>
 800ec26:	42a3      	cmp	r3, r4
 800ec28:	f67f af0c 	bls.w	800ea44 <__strftime.isra.0+0x64>
 800ec2c:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ec30:	553a      	strb	r2, [r7, r4]
 800ec32:	3401      	adds	r4, #1
 800ec34:	e7f5      	b.n	800ec22 <__strftime.isra.0+0x242>
 800ec36:	4b8f      	ldr	r3, [pc, #572]	; (800ee74 <__strftime.isra.0+0x494>)
 800ec38:	6932      	ldr	r2, [r6, #16]
 800ec3a:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800ec3e:	4648      	mov	r0, r9
 800ec40:	f7f1 fad6 	bl	80001f0 <strlen>
 800ec44:	f109 39ff 	add.w	r9, r9, #4294967295
 800ec48:	4420      	add	r0, r4
 800ec4a:	1e6b      	subs	r3, r5, #1
 800ec4c:	42a0      	cmp	r0, r4
 800ec4e:	d0cb      	beq.n	800ebe8 <__strftime.isra.0+0x208>
 800ec50:	42a3      	cmp	r3, r4
 800ec52:	f67f aef7 	bls.w	800ea44 <__strftime.isra.0+0x64>
 800ec56:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ec5a:	553a      	strb	r2, [r7, r4]
 800ec5c:	3401      	adds	r4, #1
 800ec5e:	e7f5      	b.n	800ec4c <__strftime.isra.0+0x26c>
 800ec60:	6933      	ldr	r3, [r6, #16]
 800ec62:	4a84      	ldr	r2, [pc, #528]	; (800ee74 <__strftime.isra.0+0x494>)
 800ec64:	330c      	adds	r3, #12
 800ec66:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800ec6a:	4648      	mov	r0, r9
 800ec6c:	f7f1 fac0 	bl	80001f0 <strlen>
 800ec70:	f109 39ff 	add.w	r9, r9, #4294967295
 800ec74:	4420      	add	r0, r4
 800ec76:	1e6b      	subs	r3, r5, #1
 800ec78:	42a0      	cmp	r0, r4
 800ec7a:	d0b5      	beq.n	800ebe8 <__strftime.isra.0+0x208>
 800ec7c:	42a3      	cmp	r3, r4
 800ec7e:	f67f aee1 	bls.w	800ea44 <__strftime.isra.0+0x64>
 800ec82:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ec86:	553a      	strb	r2, [r7, r4]
 800ec88:	3401      	adds	r4, #1
 800ec8a:	e7f5      	b.n	800ec78 <__strftime.isra.0+0x298>
 800ec8c:	4b79      	ldr	r3, [pc, #484]	; (800ee74 <__strftime.isra.0+0x494>)
 800ec8e:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800ec92:	4648      	mov	r0, r9
 800ec94:	f7f1 faac 	bl	80001f0 <strlen>
 800ec98:	f899 3000 	ldrb.w	r3, [r9]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d0a3      	beq.n	800ebe8 <__strftime.isra.0+0x208>
 800eca0:	4633      	mov	r3, r6
 800eca2:	464a      	mov	r2, r9
 800eca4:	1b29      	subs	r1, r5, r4
 800eca6:	1938      	adds	r0, r7, r4
 800eca8:	f7ff fe9a 	bl	800e9e0 <__strftime.isra.0>
 800ecac:	2800      	cmp	r0, #0
 800ecae:	f77f aec9 	ble.w	800ea44 <__strftime.isra.0+0x64>
 800ecb2:	4404      	add	r4, r0
 800ecb4:	e798      	b.n	800ebe8 <__strftime.isra.0+0x208>
 800ecb6:	4b6f      	ldr	r3, [pc, #444]	; (800ee74 <__strftime.isra.0+0x494>)
 800ecb8:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800ecbc:	e7e9      	b.n	800ec92 <__strftime.isra.0+0x2b2>
 800ecbe:	4b6d      	ldr	r3, [pc, #436]	; (800ee74 <__strftime.isra.0+0x494>)
 800ecc0:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800ecc4:	e7e5      	b.n	800ec92 <__strftime.isra.0+0x2b2>
 800ecc6:	4b6b      	ldr	r3, [pc, #428]	; (800ee74 <__strftime.isra.0+0x494>)
 800ecc8:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800eccc:	e7e1      	b.n	800ec92 <__strftime.isra.0+0x2b2>
 800ecce:	496a      	ldr	r1, [pc, #424]	; (800ee78 <__strftime.isra.0+0x498>)
 800ecd0:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800ecd4:	458a      	cmp	sl, r1
 800ecd6:	bfac      	ite	ge
 800ecd8:	2100      	movge	r1, #0
 800ecda:	2101      	movlt	r1, #1
 800ecdc:	f1ba 0f00 	cmp.w	sl, #0
 800ece0:	db11      	blt.n	800ed06 <__strftime.isra.0+0x326>
 800ece2:	2064      	movs	r0, #100	; 0x64
 800ece4:	fb9a f0f0 	sdiv	r0, sl, r0
 800ece8:	3013      	adds	r0, #19
 800ecea:	f1bb 0f00 	cmp.w	fp, #0
 800ecee:	d014      	beq.n	800ed1a <__strftime.isra.0+0x33a>
 800ecf0:	2863      	cmp	r0, #99	; 0x63
 800ecf2:	dd27      	ble.n	800ed44 <__strftime.isra.0+0x364>
 800ecf4:	4b61      	ldr	r3, [pc, #388]	; (800ee7c <__strftime.isra.0+0x49c>)
 800ecf6:	4a62      	ldr	r2, [pc, #392]	; (800ee80 <__strftime.isra.0+0x4a0>)
 800ecf8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800ecfc:	bf18      	it	ne
 800ecfe:	461a      	movne	r2, r3
 800ed00:	f8df c198 	ldr.w	ip, [pc, #408]	; 800ee9c <__strftime.isra.0+0x4bc>
 800ed04:	e00c      	b.n	800ed20 <__strftime.isra.0+0x340>
 800ed06:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800ed0a:	9103      	str	r1, [sp, #12]
 800ed0c:	f001 f801 	bl	800fd12 <abs>
 800ed10:	2264      	movs	r2, #100	; 0x64
 800ed12:	9903      	ldr	r1, [sp, #12]
 800ed14:	fb90 f0f2 	sdiv	r0, r0, r2
 800ed18:	e7e7      	b.n	800ecea <__strftime.isra.0+0x30a>
 800ed1a:	4a58      	ldr	r2, [pc, #352]	; (800ee7c <__strftime.isra.0+0x49c>)
 800ed1c:	f8df c180 	ldr.w	ip, [pc, #384]	; 800eea0 <__strftime.isra.0+0x4c0>
 800ed20:	4b58      	ldr	r3, [pc, #352]	; (800ee84 <__strftime.isra.0+0x4a4>)
 800ed22:	9001      	str	r0, [sp, #4]
 800ed24:	f1b9 0f02 	cmp.w	r9, #2
 800ed28:	bf2c      	ite	cs
 800ed2a:	ebc1 0109 	rsbcs	r1, r1, r9
 800ed2e:	f1c1 0102 	rsbcc	r1, r1, #2
 800ed32:	9100      	str	r1, [sp, #0]
 800ed34:	4950      	ldr	r1, [pc, #320]	; (800ee78 <__strftime.isra.0+0x498>)
 800ed36:	458a      	cmp	sl, r1
 800ed38:	bfa8      	it	ge
 800ed3a:	4613      	movge	r3, r2
 800ed3c:	4662      	mov	r2, ip
 800ed3e:	1b29      	subs	r1, r5, r4
 800ed40:	1938      	adds	r0, r7, r4
 800ed42:	e028      	b.n	800ed96 <__strftime.isra.0+0x3b6>
 800ed44:	4a4d      	ldr	r2, [pc, #308]	; (800ee7c <__strftime.isra.0+0x49c>)
 800ed46:	e7db      	b.n	800ed00 <__strftime.isra.0+0x320>
 800ed48:	494f      	ldr	r1, [pc, #316]	; (800ee88 <__strftime.isra.0+0x4a8>)
 800ed4a:	4a50      	ldr	r2, [pc, #320]	; (800ee8c <__strftime.isra.0+0x4ac>)
 800ed4c:	68f3      	ldr	r3, [r6, #12]
 800ed4e:	2864      	cmp	r0, #100	; 0x64
 800ed50:	bf08      	it	eq
 800ed52:	460a      	moveq	r2, r1
 800ed54:	1b29      	subs	r1, r5, r4
 800ed56:	1938      	adds	r0, r7, r4
 800ed58:	f003 fa08 	bl	801216c <sniprintf>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	f6ff ae71 	blt.w	800ea44 <__strftime.isra.0+0x64>
 800ed62:	4404      	add	r4, r0
 800ed64:	42a5      	cmp	r5, r4
 800ed66:	f63f af3f 	bhi.w	800ebe8 <__strftime.isra.0+0x208>
 800ed6a:	e66b      	b.n	800ea44 <__strftime.isra.0+0x64>
 800ed6c:	6970      	ldr	r0, [r6, #20]
 800ed6e:	6933      	ldr	r3, [r6, #16]
 800ed70:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800ed74:	2800      	cmp	r0, #0
 800ed76:	eb07 0904 	add.w	r9, r7, r4
 800ed7a:	eba5 0104 	sub.w	r1, r5, r4
 800ed7e:	f103 0301 	add.w	r3, r3, #1
 800ed82:	db0b      	blt.n	800ed9c <__strftime.isra.0+0x3bc>
 800ed84:	2264      	movs	r2, #100	; 0x64
 800ed86:	fb90 fcf2 	sdiv	ip, r0, r2
 800ed8a:	fb02 001c 	mls	r0, r2, ip, r0
 800ed8e:	4a40      	ldr	r2, [pc, #256]	; (800ee90 <__strftime.isra.0+0x4b0>)
 800ed90:	e9cd a000 	strd	sl, r0, [sp]
 800ed94:	4648      	mov	r0, r9
 800ed96:	f003 f9e9 	bl	801216c <sniprintf>
 800ed9a:	e7df      	b.n	800ed5c <__strftime.isra.0+0x37c>
 800ed9c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800eda0:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800eda4:	f000 ffb5 	bl	800fd12 <abs>
 800eda8:	2264      	movs	r2, #100	; 0x64
 800edaa:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 800edae:	fb90 fcf2 	sdiv	ip, r0, r2
 800edb2:	fb0c 0012 	mls	r0, ip, r2, r0
 800edb6:	e7ea      	b.n	800ed8e <__strftime.isra.0+0x3ae>
 800edb8:	2225      	movs	r2, #37	; 0x25
 800edba:	f88d 2018 	strb.w	r2, [sp, #24]
 800edbe:	f1bb 0f00 	cmp.w	fp, #0
 800edc2:	d011      	beq.n	800ede8 <__strftime.isra.0+0x408>
 800edc4:	f1b9 0f06 	cmp.w	r9, #6
 800edc8:	bf38      	it	cc
 800edca:	f04f 0906 	movcc.w	r9, #6
 800edce:	f1b9 0306 	subs.w	r3, r9, #6
 800edd2:	f88d b019 	strb.w	fp, [sp, #25]
 800edd6:	d10c      	bne.n	800edf2 <__strftime.isra.0+0x412>
 800edd8:	f10d 001a 	add.w	r0, sp, #26
 800eddc:	492d      	ldr	r1, [pc, #180]	; (800ee94 <__strftime.isra.0+0x4b4>)
 800edde:	f7ff fd94 	bl	800e90a <strcpy>
 800ede2:	4633      	mov	r3, r6
 800ede4:	aa06      	add	r2, sp, #24
 800ede6:	e75d      	b.n	800eca4 <__strftime.isra.0+0x2c4>
 800ede8:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800edec:	f04f 090a 	mov.w	r9, #10
 800edf0:	e7ed      	b.n	800edce <__strftime.isra.0+0x3ee>
 800edf2:	4a29      	ldr	r2, [pc, #164]	; (800ee98 <__strftime.isra.0+0x4b8>)
 800edf4:	211e      	movs	r1, #30
 800edf6:	f10d 001a 	add.w	r0, sp, #26
 800edfa:	f003 f9b7 	bl	801216c <sniprintf>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	ddea      	ble.n	800edd8 <__strftime.isra.0+0x3f8>
 800ee02:	f10d 031a 	add.w	r3, sp, #26
 800ee06:	4418      	add	r0, r3
 800ee08:	e7e8      	b.n	800eddc <__strftime.isra.0+0x3fc>
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	f7ff fd86 	bl	800e91c <iso_year_adjust>
 800ee10:	4681      	mov	r9, r0
 800ee12:	6970      	ldr	r0, [r6, #20]
 800ee14:	2800      	cmp	r0, #0
 800ee16:	db11      	blt.n	800ee3c <__strftime.isra.0+0x45c>
 800ee18:	2364      	movs	r3, #100	; 0x64
 800ee1a:	fb90 f2f3 	sdiv	r2, r0, r3
 800ee1e:	fb03 0012 	mls	r0, r3, r2, r0
 800ee22:	2264      	movs	r2, #100	; 0x64
 800ee24:	4481      	add	r9, r0
 800ee26:	fb99 f3f2 	sdiv	r3, r9, r2
 800ee2a:	fb02 9913 	mls	r9, r2, r3, r9
 800ee2e:	4491      	add	r9, r2
 800ee30:	fbb9 f3f2 	udiv	r3, r9, r2
 800ee34:	fb02 9313 	mls	r3, r2, r3, r9
 800ee38:	4a13      	ldr	r2, [pc, #76]	; (800ee88 <__strftime.isra.0+0x4a8>)
 800ee3a:	e78b      	b.n	800ed54 <__strftime.isra.0+0x374>
 800ee3c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800ee40:	f000 ff67 	bl	800fd12 <abs>
 800ee44:	2364      	movs	r3, #100	; 0x64
 800ee46:	f1b9 0f00 	cmp.w	r9, #0
 800ee4a:	fb90 f2f3 	sdiv	r2, r0, r3
 800ee4e:	fb02 0013 	mls	r0, r2, r3, r0
 800ee52:	da07      	bge.n	800ee64 <__strftime.isra.0+0x484>
 800ee54:	6972      	ldr	r2, [r6, #20]
 800ee56:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	bfb8      	it	lt
 800ee5e:	f04f 0901 	movlt.w	r9, #1
 800ee62:	e7de      	b.n	800ee22 <__strftime.isra.0+0x442>
 800ee64:	d0dd      	beq.n	800ee22 <__strftime.isra.0+0x442>
 800ee66:	6972      	ldr	r2, [r6, #20]
 800ee68:	4b03      	ldr	r3, [pc, #12]	; (800ee78 <__strftime.isra.0+0x498>)
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	bfb8      	it	lt
 800ee6e:	f04f 39ff 	movlt.w	r9, #4294967295
 800ee72:	e7d6      	b.n	800ee22 <__strftime.isra.0+0x442>
 800ee74:	0803c794 	.word	0x0803c794
 800ee78:	fffff894 	.word	0xfffff894
 800ee7c:	0803c496 	.word	0x0803c496
 800ee80:	0803c5c2 	.word	0x0803c5c2
 800ee84:	0803cc65 	.word	0x0803cc65
 800ee88:	0803c5d2 	.word	0x0803c5d2
 800ee8c:	0803c5c4 	.word	0x0803c5c4
 800ee90:	0803c5c8 	.word	0x0803c5c8
 800ee94:	0803c5db 	.word	0x0803c5db
 800ee98:	0803c5d7 	.word	0x0803c5d7
 800ee9c:	0803c5ba 	.word	0x0803c5ba
 800eea0:	0803c5b3 	.word	0x0803c5b3
 800eea4:	6971      	ldr	r1, [r6, #20]
 800eea6:	4ab6      	ldr	r2, [pc, #728]	; (800f180 <__strftime.isra.0+0x7a0>)
 800eea8:	4291      	cmp	r1, r2
 800eeaa:	bfac      	ite	ge
 800eeac:	2300      	movge	r3, #0
 800eeae:	2301      	movlt	r3, #1
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800eeb6:	f7ff fd31 	bl	800e91c <iso_year_adjust>
 800eeba:	9904      	ldr	r1, [sp, #16]
 800eebc:	2900      	cmp	r1, #0
 800eebe:	4682      	mov	sl, r0
 800eec0:	db2c      	blt.n	800ef1c <__strftime.isra.0+0x53c>
 800eec2:	2264      	movs	r2, #100	; 0x64
 800eec4:	fb91 f2f2 	sdiv	r2, r1, r2
 800eec8:	3213      	adds	r2, #19
 800eeca:	6970      	ldr	r0, [r6, #20]
 800eecc:	2800      	cmp	r0, #0
 800eece:	db30      	blt.n	800ef32 <__strftime.isra.0+0x552>
 800eed0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800eed4:	fb90 fefc 	sdiv	lr, r0, ip
 800eed8:	fb0c 001e 	mls	r0, ip, lr, r0
 800eedc:	f1ba 0f00 	cmp.w	sl, #0
 800eee0:	da36      	bge.n	800ef50 <__strftime.isra.0+0x570>
 800eee2:	6971      	ldr	r1, [r6, #20]
 800eee4:	4ba7      	ldr	r3, [pc, #668]	; (800f184 <__strftime.isra.0+0x7a4>)
 800eee6:	4299      	cmp	r1, r3
 800eee8:	db3d      	blt.n	800ef66 <__strftime.isra.0+0x586>
 800eeea:	4482      	add	sl, r0
 800eeec:	f1ba 3fff 	cmp.w	sl, #4294967295
 800eef0:	d13e      	bne.n	800ef70 <__strftime.isra.0+0x590>
 800eef2:	3a01      	subs	r2, #1
 800eef4:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800eef8:	9b03      	ldr	r3, [sp, #12]
 800eefa:	2064      	movs	r0, #100	; 0x64
 800eefc:	fb00 aa02 	mla	sl, r0, r2, sl
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	f000 81ad 	beq.w	800f260 <__strftime.isra.0+0x880>
 800ef06:	222d      	movs	r2, #45	; 0x2d
 800ef08:	f88d 2018 	strb.w	r2, [sp, #24]
 800ef0c:	f1b9 0f00 	cmp.w	r9, #0
 800ef10:	d001      	beq.n	800ef16 <__strftime.isra.0+0x536>
 800ef12:	f109 39ff 	add.w	r9, r9, #4294967295
 800ef16:	f10d 0219 	add.w	r2, sp, #25
 800ef1a:	e1ac      	b.n	800f276 <__strftime.isra.0+0x896>
 800ef1c:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800ef20:	9104      	str	r1, [sp, #16]
 800ef22:	f000 fef6 	bl	800fd12 <abs>
 800ef26:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800ef2a:	9904      	ldr	r1, [sp, #16]
 800ef2c:	fb90 f2fc 	sdiv	r2, r0, ip
 800ef30:	e7cb      	b.n	800eeca <__strftime.isra.0+0x4ea>
 800ef32:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800ef36:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800ef3a:	f000 feea 	bl	800fd12 <abs>
 800ef3e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800ef42:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800ef46:	fb90 fefc 	sdiv	lr, r0, ip
 800ef4a:	fb0e 001c 	mls	r0, lr, ip, r0
 800ef4e:	e7c5      	b.n	800eedc <__strftime.isra.0+0x4fc>
 800ef50:	d0cb      	beq.n	800eeea <__strftime.isra.0+0x50a>
 800ef52:	4b8b      	ldr	r3, [pc, #556]	; (800f180 <__strftime.isra.0+0x7a0>)
 800ef54:	4299      	cmp	r1, r3
 800ef56:	bfb4      	ite	lt
 800ef58:	2301      	movlt	r3, #1
 800ef5a:	2300      	movge	r3, #0
 800ef5c:	9303      	str	r3, [sp, #12]
 800ef5e:	bfb8      	it	lt
 800ef60:	f04f 3aff 	movlt.w	sl, #4294967295
 800ef64:	e7c1      	b.n	800eeea <__strftime.isra.0+0x50a>
 800ef66:	f04f 0a01 	mov.w	sl, #1
 800ef6a:	f8cd a00c 	str.w	sl, [sp, #12]
 800ef6e:	e7bc      	b.n	800eeea <__strftime.isra.0+0x50a>
 800ef70:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800ef74:	bf04      	itt	eq
 800ef76:	3201      	addeq	r2, #1
 800ef78:	f04f 0a00 	moveq.w	sl, #0
 800ef7c:	e7bc      	b.n	800eef8 <__strftime.isra.0+0x518>
 800ef7e:	4982      	ldr	r1, [pc, #520]	; (800f188 <__strftime.isra.0+0x7a8>)
 800ef80:	4a82      	ldr	r2, [pc, #520]	; (800f18c <__strftime.isra.0+0x7ac>)
 800ef82:	68b3      	ldr	r3, [r6, #8]
 800ef84:	286b      	cmp	r0, #107	; 0x6b
 800ef86:	bf08      	it	eq
 800ef88:	460a      	moveq	r2, r1
 800ef8a:	e6e3      	b.n	800ed54 <__strftime.isra.0+0x374>
 800ef8c:	68b3      	ldr	r3, [r6, #8]
 800ef8e:	b163      	cbz	r3, 800efaa <__strftime.isra.0+0x5ca>
 800ef90:	2b0c      	cmp	r3, #12
 800ef92:	d004      	beq.n	800ef9e <__strftime.isra.0+0x5be>
 800ef94:	210c      	movs	r1, #12
 800ef96:	fb93 f2f1 	sdiv	r2, r3, r1
 800ef9a:	fb01 3312 	mls	r3, r1, r2, r3
 800ef9e:	497b      	ldr	r1, [pc, #492]	; (800f18c <__strftime.isra.0+0x7ac>)
 800efa0:	4a79      	ldr	r2, [pc, #484]	; (800f188 <__strftime.isra.0+0x7a8>)
 800efa2:	2849      	cmp	r0, #73	; 0x49
 800efa4:	bf08      	it	eq
 800efa6:	460a      	moveq	r2, r1
 800efa8:	e6d4      	b.n	800ed54 <__strftime.isra.0+0x374>
 800efaa:	230c      	movs	r3, #12
 800efac:	e7f7      	b.n	800ef9e <__strftime.isra.0+0x5be>
 800efae:	69f3      	ldr	r3, [r6, #28]
 800efb0:	4a77      	ldr	r2, [pc, #476]	; (800f190 <__strftime.isra.0+0x7b0>)
 800efb2:	3301      	adds	r3, #1
 800efb4:	e6ce      	b.n	800ed54 <__strftime.isra.0+0x374>
 800efb6:	6933      	ldr	r3, [r6, #16]
 800efb8:	3301      	adds	r3, #1
 800efba:	e73d      	b.n	800ee38 <__strftime.isra.0+0x458>
 800efbc:	6873      	ldr	r3, [r6, #4]
 800efbe:	e73b      	b.n	800ee38 <__strftime.isra.0+0x458>
 800efc0:	1e6b      	subs	r3, r5, #1
 800efc2:	429c      	cmp	r4, r3
 800efc4:	f4bf ad3e 	bcs.w	800ea44 <__strftime.isra.0+0x64>
 800efc8:	230a      	movs	r3, #10
 800efca:	553b      	strb	r3, [r7, r4]
 800efcc:	3401      	adds	r4, #1
 800efce:	e60b      	b.n	800ebe8 <__strftime.isra.0+0x208>
 800efd0:	68b3      	ldr	r3, [r6, #8]
 800efd2:	2b0b      	cmp	r3, #11
 800efd4:	4b6f      	ldr	r3, [pc, #444]	; (800f194 <__strftime.isra.0+0x7b4>)
 800efd6:	bfd4      	ite	le
 800efd8:	2200      	movle	r2, #0
 800efda:	2201      	movgt	r2, #1
 800efdc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800efe0:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800efe4:	4648      	mov	r0, r9
 800efe6:	f7f1 f903 	bl	80001f0 <strlen>
 800efea:	f109 32ff 	add.w	r2, r9, #4294967295
 800efee:	4420      	add	r0, r4
 800eff0:	f105 3cff 	add.w	ip, r5, #4294967295
 800eff4:	42a0      	cmp	r0, r4
 800eff6:	f43f adf7 	beq.w	800ebe8 <__strftime.isra.0+0x208>
 800effa:	45a4      	cmp	ip, r4
 800effc:	f67f ad22 	bls.w	800ea44 <__strftime.isra.0+0x64>
 800f000:	f898 1000 	ldrb.w	r1, [r8]
 800f004:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800f008:	2950      	cmp	r1, #80	; 0x50
 800f00a:	d107      	bne.n	800f01c <__strftime.isra.0+0x63c>
 800f00c:	4962      	ldr	r1, [pc, #392]	; (800f198 <__strftime.isra.0+0x7b8>)
 800f00e:	5cc9      	ldrb	r1, [r1, r3]
 800f010:	f001 0103 	and.w	r1, r1, #3
 800f014:	2901      	cmp	r1, #1
 800f016:	bf08      	it	eq
 800f018:	3320      	addeq	r3, #32
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	553b      	strb	r3, [r7, r4]
 800f01e:	3401      	adds	r4, #1
 800f020:	e7e8      	b.n	800eff4 <__strftime.isra.0+0x614>
 800f022:	6873      	ldr	r3, [r6, #4]
 800f024:	9300      	str	r3, [sp, #0]
 800f026:	4a5d      	ldr	r2, [pc, #372]	; (800f19c <__strftime.isra.0+0x7bc>)
 800f028:	68b3      	ldr	r3, [r6, #8]
 800f02a:	1b29      	subs	r1, r5, r4
 800f02c:	1938      	adds	r0, r7, r4
 800f02e:	f003 f89d 	bl	801216c <sniprintf>
 800f032:	e693      	b.n	800ed5c <__strftime.isra.0+0x37c>
 800f034:	6a33      	ldr	r3, [r6, #32]
 800f036:	2b00      	cmp	r3, #0
 800f038:	db7a      	blt.n	800f130 <__strftime.isra.0+0x750>
 800f03a:	f000 fbff 	bl	800f83c <__tz_lock>
 800f03e:	9b02      	ldr	r3, [sp, #8]
 800f040:	b90b      	cbnz	r3, 800f046 <__strftime.isra.0+0x666>
 800f042:	f000 fc07 	bl	800f854 <_tzset_unlocked>
 800f046:	f001 ff0b 	bl	8010e60 <__gettzinfo>
 800f04a:	6a33      	ldr	r3, [r6, #32]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	bfd4      	ite	le
 800f050:	2200      	movle	r2, #0
 800f052:	2201      	movgt	r2, #1
 800f054:	2328      	movs	r3, #40	; 0x28
 800f056:	fb02 3303 	mla	r3, r2, r3, r3
 800f05a:	58c3      	ldr	r3, [r0, r3]
 800f05c:	f1c3 0900 	rsb	r9, r3, #0
 800f060:	f000 fbf2 	bl	800f848 <__tz_unlock>
 800f064:	2301      	movs	r3, #1
 800f066:	9302      	str	r3, [sp, #8]
 800f068:	6972      	ldr	r2, [r6, #20]
 800f06a:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800f06e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800f072:	f16c 0c00 	sbc.w	ip, ip, #0
 800f076:	f1bc 0f00 	cmp.w	ip, #0
 800f07a:	eba5 0104 	sub.w	r1, r5, r4
 800f07e:	eb07 0004 	add.w	r0, r7, r4
 800f082:	da02      	bge.n	800f08a <__strftime.isra.0+0x6aa>
 800f084:	3303      	adds	r3, #3
 800f086:	f14c 0c00 	adc.w	ip, ip, #0
 800f08a:	089b      	lsrs	r3, r3, #2
 800f08c:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800f090:	f102 3aff 	add.w	sl, r2, #4294967295
 800f094:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800f098:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800f09c:	fb9a fefe 	sdiv	lr, sl, lr
 800f0a0:	ebb3 030e 	subs.w	r3, r3, lr
 800f0a4:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800f0a8:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800f0ac:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800f0b0:	fb9a fefe 	sdiv	lr, sl, lr
 800f0b4:	eb13 030e 	adds.w	r3, r3, lr
 800f0b8:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800f0bc:	3a46      	subs	r2, #70	; 0x46
 800f0be:	f240 1c6d 	movw	ip, #365	; 0x16d
 800f0c2:	fb0c f202 	mul.w	r2, ip, r2
 800f0c6:	189b      	adds	r3, r3, r2
 800f0c8:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800f0cc:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800f0d0:	f04f 0c18 	mov.w	ip, #24
 800f0d4:	eb13 030e 	adds.w	r3, r3, lr
 800f0d8:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800f0dc:	fba3 3e0c 	umull	r3, lr, r3, ip
 800f0e0:	fb0c e202 	mla	r2, ip, r2, lr
 800f0e4:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800f0e8:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800f0ec:	eb13 030e 	adds.w	r3, r3, lr
 800f0f0:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800f0f4:	fba3 320c 	umull	r3, r2, r3, ip
 800f0f8:	fb0c 220e 	mla	r2, ip, lr, r2
 800f0fc:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800f100:	eb13 030e 	adds.w	r3, r3, lr
 800f104:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800f108:	fba3 3e0c 	umull	r3, lr, r3, ip
 800f10c:	fb0c e202 	mla	r2, ip, r2, lr
 800f110:	f8d6 e000 	ldr.w	lr, [r6]
 800f114:	eb13 030e 	adds.w	r3, r3, lr
 800f118:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800f11c:	ebb3 0309 	subs.w	r3, r3, r9
 800f120:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800f124:	e9cd 3200 	strd	r3, r2, [sp]
 800f128:	4a1d      	ldr	r2, [pc, #116]	; (800f1a0 <__strftime.isra.0+0x7c0>)
 800f12a:	f003 f81f 	bl	801216c <sniprintf>
 800f12e:	e615      	b.n	800ed5c <__strftime.isra.0+0x37c>
 800f130:	f04f 0900 	mov.w	r9, #0
 800f134:	e798      	b.n	800f068 <__strftime.isra.0+0x688>
 800f136:	6833      	ldr	r3, [r6, #0]
 800f138:	e67e      	b.n	800ee38 <__strftime.isra.0+0x458>
 800f13a:	1e6b      	subs	r3, r5, #1
 800f13c:	429c      	cmp	r4, r3
 800f13e:	f4bf ac81 	bcs.w	800ea44 <__strftime.isra.0+0x64>
 800f142:	2309      	movs	r3, #9
 800f144:	e741      	b.n	800efca <__strftime.isra.0+0x5ea>
 800f146:	6833      	ldr	r3, [r6, #0]
 800f148:	9301      	str	r3, [sp, #4]
 800f14a:	6873      	ldr	r3, [r6, #4]
 800f14c:	9300      	str	r3, [sp, #0]
 800f14e:	4a15      	ldr	r2, [pc, #84]	; (800f1a4 <__strftime.isra.0+0x7c4>)
 800f150:	68b3      	ldr	r3, [r6, #8]
 800f152:	e5f4      	b.n	800ed3e <__strftime.isra.0+0x35e>
 800f154:	1e6b      	subs	r3, r5, #1
 800f156:	429c      	cmp	r4, r3
 800f158:	f4bf ac74 	bcs.w	800ea44 <__strftime.isra.0+0x64>
 800f15c:	69b3      	ldr	r3, [r6, #24]
 800f15e:	1c62      	adds	r2, r4, #1
 800f160:	b91b      	cbnz	r3, 800f16a <__strftime.isra.0+0x78a>
 800f162:	2337      	movs	r3, #55	; 0x37
 800f164:	553b      	strb	r3, [r7, r4]
 800f166:	4614      	mov	r4, r2
 800f168:	e53e      	b.n	800ebe8 <__strftime.isra.0+0x208>
 800f16a:	3330      	adds	r3, #48	; 0x30
 800f16c:	e7fa      	b.n	800f164 <__strftime.isra.0+0x784>
 800f16e:	69f3      	ldr	r3, [r6, #28]
 800f170:	69b2      	ldr	r2, [r6, #24]
 800f172:	3307      	adds	r3, #7
 800f174:	1a9b      	subs	r3, r3, r2
 800f176:	2207      	movs	r2, #7
 800f178:	fb93 f3f2 	sdiv	r3, r3, r2
 800f17c:	e65c      	b.n	800ee38 <__strftime.isra.0+0x458>
 800f17e:	bf00      	nop
 800f180:	fffff894 	.word	0xfffff894
 800f184:	fffff895 	.word	0xfffff895
 800f188:	0803c5c4 	.word	0x0803c5c4
 800f18c:	0803c5d2 	.word	0x0803c5d2
 800f190:	0803c5e7 	.word	0x0803c5e7
 800f194:	0803c794 	.word	0x0803c794
 800f198:	0803c8cd 	.word	0x0803c8cd
 800f19c:	0803c5f6 	.word	0x0803c5f6
 800f1a0:	0803c5ec 	.word	0x0803c5ec
 800f1a4:	0803c5f1 	.word	0x0803c5f1
 800f1a8:	4630      	mov	r0, r6
 800f1aa:	f7ff fbb7 	bl	800e91c <iso_year_adjust>
 800f1ae:	69b2      	ldr	r2, [r6, #24]
 800f1b0:	b132      	cbz	r2, 800f1c0 <__strftime.isra.0+0x7e0>
 800f1b2:	3a01      	subs	r2, #1
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	dc28      	bgt.n	800f20a <__strftime.isra.0+0x82a>
 800f1b8:	69f3      	ldr	r3, [r6, #28]
 800f1ba:	d103      	bne.n	800f1c4 <__strftime.isra.0+0x7e4>
 800f1bc:	330a      	adds	r3, #10
 800f1be:	e7d9      	b.n	800f174 <__strftime.isra.0+0x794>
 800f1c0:	2206      	movs	r2, #6
 800f1c2:	e7f7      	b.n	800f1b4 <__strftime.isra.0+0x7d4>
 800f1c4:	6971      	ldr	r1, [r6, #20]
 800f1c6:	2900      	cmp	r1, #0
 800f1c8:	eba2 0203 	sub.w	r2, r2, r3
 800f1cc:	f240 736b 	movw	r3, #1899	; 0x76b
 800f1d0:	bfa8      	it	ge
 800f1d2:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800f1d6:	440b      	add	r3, r1
 800f1d8:	0799      	lsls	r1, r3, #30
 800f1da:	d105      	bne.n	800f1e8 <__strftime.isra.0+0x808>
 800f1dc:	2064      	movs	r0, #100	; 0x64
 800f1de:	fb93 f1f0 	sdiv	r1, r3, r0
 800f1e2:	fb00 3111 	mls	r1, r0, r1, r3
 800f1e6:	b971      	cbnz	r1, 800f206 <__strftime.isra.0+0x826>
 800f1e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800f1ec:	fb93 f0f1 	sdiv	r0, r3, r1
 800f1f0:	fb01 3310 	mls	r3, r1, r0, r3
 800f1f4:	fab3 f383 	clz	r3, r3
 800f1f8:	095b      	lsrs	r3, r3, #5
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	2b05      	cmp	r3, #5
 800f1fe:	bfb4      	ite	lt
 800f200:	2335      	movlt	r3, #53	; 0x35
 800f202:	2334      	movge	r3, #52	; 0x34
 800f204:	e618      	b.n	800ee38 <__strftime.isra.0+0x458>
 800f206:	2301      	movs	r3, #1
 800f208:	e7f7      	b.n	800f1fa <__strftime.isra.0+0x81a>
 800f20a:	2301      	movs	r3, #1
 800f20c:	e614      	b.n	800ee38 <__strftime.isra.0+0x458>
 800f20e:	1e6b      	subs	r3, r5, #1
 800f210:	429c      	cmp	r4, r3
 800f212:	f4bf ac17 	bcs.w	800ea44 <__strftime.isra.0+0x64>
 800f216:	69b3      	ldr	r3, [r6, #24]
 800f218:	3330      	adds	r3, #48	; 0x30
 800f21a:	e6d6      	b.n	800efca <__strftime.isra.0+0x5ea>
 800f21c:	69b2      	ldr	r2, [r6, #24]
 800f21e:	b11a      	cbz	r2, 800f228 <__strftime.isra.0+0x848>
 800f220:	3a01      	subs	r2, #1
 800f222:	69f3      	ldr	r3, [r6, #28]
 800f224:	3307      	adds	r3, #7
 800f226:	e7a5      	b.n	800f174 <__strftime.isra.0+0x794>
 800f228:	2206      	movs	r2, #6
 800f22a:	e7fa      	b.n	800f222 <__strftime.isra.0+0x842>
 800f22c:	6970      	ldr	r0, [r6, #20]
 800f22e:	2800      	cmp	r0, #0
 800f230:	db05      	blt.n	800f23e <__strftime.isra.0+0x85e>
 800f232:	2364      	movs	r3, #100	; 0x64
 800f234:	fb90 f2f3 	sdiv	r2, r0, r3
 800f238:	fb02 0313 	mls	r3, r2, r3, r0
 800f23c:	e5fc      	b.n	800ee38 <__strftime.isra.0+0x458>
 800f23e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800f242:	f000 fd66 	bl	800fd12 <abs>
 800f246:	e7f4      	b.n	800f232 <__strftime.isra.0+0x852>
 800f248:	6972      	ldr	r2, [r6, #20]
 800f24a:	494c      	ldr	r1, [pc, #304]	; (800f37c <__strftime.isra.0+0x99c>)
 800f24c:	428a      	cmp	r2, r1
 800f24e:	da05      	bge.n	800f25c <__strftime.isra.0+0x87c>
 800f250:	202d      	movs	r0, #45	; 0x2d
 800f252:	f88d 0018 	strb.w	r0, [sp, #24]
 800f256:	eba1 0a02 	sub.w	sl, r1, r2
 800f25a:	e657      	b.n	800ef0c <__strftime.isra.0+0x52c>
 800f25c:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800f260:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800f264:	d106      	bne.n	800f274 <__strftime.isra.0+0x894>
 800f266:	f242 720f 	movw	r2, #9999	; 0x270f
 800f26a:	4592      	cmp	sl, r2
 800f26c:	d902      	bls.n	800f274 <__strftime.isra.0+0x894>
 800f26e:	f88d b018 	strb.w	fp, [sp, #24]
 800f272:	e64b      	b.n	800ef0c <__strftime.isra.0+0x52c>
 800f274:	aa06      	add	r2, sp, #24
 800f276:	2125      	movs	r1, #37	; 0x25
 800f278:	7011      	strb	r1, [r2, #0]
 800f27a:	f1bb 0f00 	cmp.w	fp, #0
 800f27e:	d108      	bne.n	800f292 <__strftime.isra.0+0x8b2>
 800f280:	1c50      	adds	r0, r2, #1
 800f282:	493f      	ldr	r1, [pc, #252]	; (800f380 <__strftime.isra.0+0x9a0>)
 800f284:	f7ff fb41 	bl	800e90a <strcpy>
 800f288:	f8cd a000 	str.w	sl, [sp]
 800f28c:	464b      	mov	r3, r9
 800f28e:	aa06      	add	r2, sp, #24
 800f290:	e6cb      	b.n	800f02a <__strftime.isra.0+0x64a>
 800f292:	2330      	movs	r3, #48	; 0x30
 800f294:	1c90      	adds	r0, r2, #2
 800f296:	7053      	strb	r3, [r2, #1]
 800f298:	e7f3      	b.n	800f282 <__strftime.isra.0+0x8a2>
 800f29a:	6a33      	ldr	r3, [r6, #32]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	f6ff aca3 	blt.w	800ebe8 <__strftime.isra.0+0x208>
 800f2a2:	f000 facb 	bl	800f83c <__tz_lock>
 800f2a6:	9b02      	ldr	r3, [sp, #8]
 800f2a8:	b90b      	cbnz	r3, 800f2ae <__strftime.isra.0+0x8ce>
 800f2aa:	f000 fad3 	bl	800f854 <_tzset_unlocked>
 800f2ae:	f001 fdd7 	bl	8010e60 <__gettzinfo>
 800f2b2:	6a33      	ldr	r3, [r6, #32]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	bfd4      	ite	le
 800f2b8:	2200      	movle	r2, #0
 800f2ba:	2201      	movgt	r2, #1
 800f2bc:	2328      	movs	r3, #40	; 0x28
 800f2be:	fb02 3303 	mla	r3, r2, r3, r3
 800f2c2:	eb07 0a04 	add.w	sl, r7, r4
 800f2c6:	58c3      	ldr	r3, [r0, r3]
 800f2c8:	f1c3 0900 	rsb	r9, r3, #0
 800f2cc:	f000 fabc 	bl	800f848 <__tz_unlock>
 800f2d0:	233c      	movs	r3, #60	; 0x3c
 800f2d2:	fb99 f0f3 	sdiv	r0, r9, r3
 800f2d6:	f001 fdc7 	bl	8010e68 <labs>
 800f2da:	233c      	movs	r3, #60	; 0x3c
 800f2dc:	eba5 0b04 	sub.w	fp, r5, r4
 800f2e0:	fb90 f2f3 	sdiv	r2, r0, r3
 800f2e4:	fb02 0013 	mls	r0, r2, r3, r0
 800f2e8:	9000      	str	r0, [sp, #0]
 800f2ea:	4a26      	ldr	r2, [pc, #152]	; (800f384 <__strftime.isra.0+0x9a4>)
 800f2ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f2f0:	4659      	mov	r1, fp
 800f2f2:	4650      	mov	r0, sl
 800f2f4:	fb99 f3f3 	sdiv	r3, r9, r3
 800f2f8:	f002 ff38 	bl	801216c <sniprintf>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	f6ff aba1 	blt.w	800ea44 <__strftime.isra.0+0x64>
 800f302:	4404      	add	r4, r0
 800f304:	42a5      	cmp	r5, r4
 800f306:	f67f ab9d 	bls.w	800ea44 <__strftime.isra.0+0x64>
 800f30a:	2301      	movs	r3, #1
 800f30c:	9302      	str	r3, [sp, #8]
 800f30e:	e46b      	b.n	800ebe8 <__strftime.isra.0+0x208>
 800f310:	6a33      	ldr	r3, [r6, #32]
 800f312:	2b00      	cmp	r3, #0
 800f314:	f6ff ac68 	blt.w	800ebe8 <__strftime.isra.0+0x208>
 800f318:	f000 fa90 	bl	800f83c <__tz_lock>
 800f31c:	9b02      	ldr	r3, [sp, #8]
 800f31e:	b90b      	cbnz	r3, 800f324 <__strftime.isra.0+0x944>
 800f320:	f000 fa98 	bl	800f854 <_tzset_unlocked>
 800f324:	6a33      	ldr	r3, [r6, #32]
 800f326:	4a18      	ldr	r2, [pc, #96]	; (800f388 <__strftime.isra.0+0x9a8>)
 800f328:	2b00      	cmp	r3, #0
 800f32a:	bfd4      	ite	le
 800f32c:	2300      	movle	r3, #0
 800f32e:	2301      	movgt	r3, #1
 800f330:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800f334:	4648      	mov	r0, r9
 800f336:	f7f0 ff5b 	bl	80001f0 <strlen>
 800f33a:	f109 39ff 	add.w	r9, r9, #4294967295
 800f33e:	4420      	add	r0, r4
 800f340:	1e6b      	subs	r3, r5, #1
 800f342:	42a0      	cmp	r0, r4
 800f344:	d102      	bne.n	800f34c <__strftime.isra.0+0x96c>
 800f346:	f000 fa7f 	bl	800f848 <__tz_unlock>
 800f34a:	e7de      	b.n	800f30a <__strftime.isra.0+0x92a>
 800f34c:	42a3      	cmp	r3, r4
 800f34e:	d904      	bls.n	800f35a <__strftime.isra.0+0x97a>
 800f350:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800f354:	553a      	strb	r2, [r7, r4]
 800f356:	3401      	adds	r4, #1
 800f358:	e7f3      	b.n	800f342 <__strftime.isra.0+0x962>
 800f35a:	f000 fa75 	bl	800f848 <__tz_unlock>
 800f35e:	f7ff bb71 	b.w	800ea44 <__strftime.isra.0+0x64>
 800f362:	1e6b      	subs	r3, r5, #1
 800f364:	429c      	cmp	r4, r3
 800f366:	f4bf ab6d 	bcs.w	800ea44 <__strftime.isra.0+0x64>
 800f36a:	2325      	movs	r3, #37	; 0x25
 800f36c:	e62d      	b.n	800efca <__strftime.isra.0+0x5ea>
 800f36e:	b10d      	cbz	r5, 800f374 <__strftime.isra.0+0x994>
 800f370:	2300      	movs	r3, #0
 800f372:	553b      	strb	r3, [r7, r4]
 800f374:	4620      	mov	r0, r4
 800f376:	b00f      	add	sp, #60	; 0x3c
 800f378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37c:	fffff894 	.word	0xfffff894
 800f380:	0803c5e3 	.word	0x0803c5e3
 800f384:	0803c600 	.word	0x0803c600
 800f388:	20000324 	.word	0x20000324

0800f38c <strftime>:
 800f38c:	f7ff bb28 	b.w	800e9e0 <__strftime.isra.0>

0800f390 <strncpy>:
 800f390:	b510      	push	{r4, lr}
 800f392:	3901      	subs	r1, #1
 800f394:	4603      	mov	r3, r0
 800f396:	b132      	cbz	r2, 800f3a6 <strncpy+0x16>
 800f398:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f39c:	f803 4b01 	strb.w	r4, [r3], #1
 800f3a0:	3a01      	subs	r2, #1
 800f3a2:	2c00      	cmp	r4, #0
 800f3a4:	d1f7      	bne.n	800f396 <strncpy+0x6>
 800f3a6:	441a      	add	r2, r3
 800f3a8:	2100      	movs	r1, #0
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d100      	bne.n	800f3b0 <strncpy+0x20>
 800f3ae:	bd10      	pop	{r4, pc}
 800f3b0:	f803 1b01 	strb.w	r1, [r3], #1
 800f3b4:	e7f9      	b.n	800f3aa <strncpy+0x1a>

0800f3b6 <strpbrk>:
 800f3b6:	b570      	push	{r4, r5, r6, lr}
 800f3b8:	7803      	ldrb	r3, [r0, #0]
 800f3ba:	b1a3      	cbz	r3, 800f3e6 <strpbrk+0x30>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	460c      	mov	r4, r1
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f813 5b01 	ldrb.w	r5, [r3], #1
 800f3c6:	b14d      	cbz	r5, 800f3dc <strpbrk+0x26>
 800f3c8:	460a      	mov	r2, r1
 800f3ca:	e001      	b.n	800f3d0 <strpbrk+0x1a>
 800f3cc:	42ae      	cmp	r6, r5
 800f3ce:	d009      	beq.n	800f3e4 <strpbrk+0x2e>
 800f3d0:	4614      	mov	r4, r2
 800f3d2:	f812 6b01 	ldrb.w	r6, [r2], #1
 800f3d6:	2e00      	cmp	r6, #0
 800f3d8:	d1f8      	bne.n	800f3cc <strpbrk+0x16>
 800f3da:	e7f1      	b.n	800f3c0 <strpbrk+0xa>
 800f3dc:	7823      	ldrb	r3, [r4, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	bf08      	it	eq
 800f3e2:	2000      	moveq	r0, #0
 800f3e4:	bd70      	pop	{r4, r5, r6, pc}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	e7fc      	b.n	800f3e4 <strpbrk+0x2e>

0800f3ea <strstr>:
 800f3ea:	780a      	ldrb	r2, [r1, #0]
 800f3ec:	b570      	push	{r4, r5, r6, lr}
 800f3ee:	b96a      	cbnz	r2, 800f40c <strstr+0x22>
 800f3f0:	bd70      	pop	{r4, r5, r6, pc}
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d109      	bne.n	800f40a <strstr+0x20>
 800f3f6:	460c      	mov	r4, r1
 800f3f8:	4605      	mov	r5, r0
 800f3fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d0f6      	beq.n	800f3f0 <strstr+0x6>
 800f402:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f406:	429e      	cmp	r6, r3
 800f408:	d0f7      	beq.n	800f3fa <strstr+0x10>
 800f40a:	3001      	adds	r0, #1
 800f40c:	7803      	ldrb	r3, [r0, #0]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d1ef      	bne.n	800f3f2 <strstr+0x8>
 800f412:	4618      	mov	r0, r3
 800f414:	e7ec      	b.n	800f3f0 <strstr+0x6>
	...

0800f418 <strtok>:
 800f418:	4b16      	ldr	r3, [pc, #88]	; (800f474 <strtok+0x5c>)
 800f41a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f41c:	681e      	ldr	r6, [r3, #0]
 800f41e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800f420:	4605      	mov	r5, r0
 800f422:	b9fc      	cbnz	r4, 800f464 <strtok+0x4c>
 800f424:	2050      	movs	r0, #80	; 0x50
 800f426:	9101      	str	r1, [sp, #4]
 800f428:	f7fe f892 	bl	800d550 <malloc>
 800f42c:	9901      	ldr	r1, [sp, #4]
 800f42e:	65b0      	str	r0, [r6, #88]	; 0x58
 800f430:	4602      	mov	r2, r0
 800f432:	b920      	cbnz	r0, 800f43e <strtok+0x26>
 800f434:	4b10      	ldr	r3, [pc, #64]	; (800f478 <strtok+0x60>)
 800f436:	4811      	ldr	r0, [pc, #68]	; (800f47c <strtok+0x64>)
 800f438:	2157      	movs	r1, #87	; 0x57
 800f43a:	f7fe f831 	bl	800d4a0 <__assert_func>
 800f43e:	e9c0 4400 	strd	r4, r4, [r0]
 800f442:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f446:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f44a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f44e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f452:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f456:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f45a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f45e:	6184      	str	r4, [r0, #24]
 800f460:	7704      	strb	r4, [r0, #28]
 800f462:	6244      	str	r4, [r0, #36]	; 0x24
 800f464:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800f466:	2301      	movs	r3, #1
 800f468:	4628      	mov	r0, r5
 800f46a:	b002      	add	sp, #8
 800f46c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f470:	f000 b806 	b.w	800f480 <__strtok_r>
 800f474:	200002c0 	.word	0x200002c0
 800f478:	0803c404 	.word	0x0803c404
 800f47c:	0803c60c 	.word	0x0803c60c

0800f480 <__strtok_r>:
 800f480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f482:	b908      	cbnz	r0, 800f488 <__strtok_r+0x8>
 800f484:	6810      	ldr	r0, [r2, #0]
 800f486:	b188      	cbz	r0, 800f4ac <__strtok_r+0x2c>
 800f488:	4604      	mov	r4, r0
 800f48a:	4620      	mov	r0, r4
 800f48c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f490:	460f      	mov	r7, r1
 800f492:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f496:	b91e      	cbnz	r6, 800f4a0 <__strtok_r+0x20>
 800f498:	b965      	cbnz	r5, 800f4b4 <__strtok_r+0x34>
 800f49a:	6015      	str	r5, [r2, #0]
 800f49c:	4628      	mov	r0, r5
 800f49e:	e005      	b.n	800f4ac <__strtok_r+0x2c>
 800f4a0:	42b5      	cmp	r5, r6
 800f4a2:	d1f6      	bne.n	800f492 <__strtok_r+0x12>
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d1f0      	bne.n	800f48a <__strtok_r+0xa>
 800f4a8:	6014      	str	r4, [r2, #0]
 800f4aa:	7003      	strb	r3, [r0, #0]
 800f4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4ae:	461c      	mov	r4, r3
 800f4b0:	e00c      	b.n	800f4cc <__strtok_r+0x4c>
 800f4b2:	b915      	cbnz	r5, 800f4ba <__strtok_r+0x3a>
 800f4b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4b8:	460e      	mov	r6, r1
 800f4ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f4be:	42ab      	cmp	r3, r5
 800f4c0:	d1f7      	bne.n	800f4b2 <__strtok_r+0x32>
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d0f3      	beq.n	800f4ae <__strtok_r+0x2e>
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f4cc:	6014      	str	r4, [r2, #0]
 800f4ce:	e7ed      	b.n	800f4ac <__strtok_r+0x2c>

0800f4d0 <_strtol_l.constprop.0>:
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4d6:	d001      	beq.n	800f4dc <_strtol_l.constprop.0+0xc>
 800f4d8:	2b24      	cmp	r3, #36	; 0x24
 800f4da:	d906      	bls.n	800f4ea <_strtol_l.constprop.0+0x1a>
 800f4dc:	f001 fabe 	bl	8010a5c <__errno>
 800f4e0:	2316      	movs	r3, #22
 800f4e2:	6003      	str	r3, [r0, #0]
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f5d0 <_strtol_l.constprop.0+0x100>
 800f4ee:	460d      	mov	r5, r1
 800f4f0:	462e      	mov	r6, r5
 800f4f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f4f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f4fa:	f017 0708 	ands.w	r7, r7, #8
 800f4fe:	d1f7      	bne.n	800f4f0 <_strtol_l.constprop.0+0x20>
 800f500:	2c2d      	cmp	r4, #45	; 0x2d
 800f502:	d132      	bne.n	800f56a <_strtol_l.constprop.0+0x9a>
 800f504:	782c      	ldrb	r4, [r5, #0]
 800f506:	2701      	movs	r7, #1
 800f508:	1cb5      	adds	r5, r6, #2
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d05b      	beq.n	800f5c6 <_strtol_l.constprop.0+0xf6>
 800f50e:	2b10      	cmp	r3, #16
 800f510:	d109      	bne.n	800f526 <_strtol_l.constprop.0+0x56>
 800f512:	2c30      	cmp	r4, #48	; 0x30
 800f514:	d107      	bne.n	800f526 <_strtol_l.constprop.0+0x56>
 800f516:	782c      	ldrb	r4, [r5, #0]
 800f518:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f51c:	2c58      	cmp	r4, #88	; 0x58
 800f51e:	d14d      	bne.n	800f5bc <_strtol_l.constprop.0+0xec>
 800f520:	786c      	ldrb	r4, [r5, #1]
 800f522:	2310      	movs	r3, #16
 800f524:	3502      	adds	r5, #2
 800f526:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f52a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f52e:	f04f 0c00 	mov.w	ip, #0
 800f532:	fbb8 f9f3 	udiv	r9, r8, r3
 800f536:	4666      	mov	r6, ip
 800f538:	fb03 8a19 	mls	sl, r3, r9, r8
 800f53c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f540:	f1be 0f09 	cmp.w	lr, #9
 800f544:	d816      	bhi.n	800f574 <_strtol_l.constprop.0+0xa4>
 800f546:	4674      	mov	r4, lr
 800f548:	42a3      	cmp	r3, r4
 800f54a:	dd24      	ble.n	800f596 <_strtol_l.constprop.0+0xc6>
 800f54c:	f1bc 0f00 	cmp.w	ip, #0
 800f550:	db1e      	blt.n	800f590 <_strtol_l.constprop.0+0xc0>
 800f552:	45b1      	cmp	r9, r6
 800f554:	d31c      	bcc.n	800f590 <_strtol_l.constprop.0+0xc0>
 800f556:	d101      	bne.n	800f55c <_strtol_l.constprop.0+0x8c>
 800f558:	45a2      	cmp	sl, r4
 800f55a:	db19      	blt.n	800f590 <_strtol_l.constprop.0+0xc0>
 800f55c:	fb06 4603 	mla	r6, r6, r3, r4
 800f560:	f04f 0c01 	mov.w	ip, #1
 800f564:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f568:	e7e8      	b.n	800f53c <_strtol_l.constprop.0+0x6c>
 800f56a:	2c2b      	cmp	r4, #43	; 0x2b
 800f56c:	bf04      	itt	eq
 800f56e:	782c      	ldrbeq	r4, [r5, #0]
 800f570:	1cb5      	addeq	r5, r6, #2
 800f572:	e7ca      	b.n	800f50a <_strtol_l.constprop.0+0x3a>
 800f574:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f578:	f1be 0f19 	cmp.w	lr, #25
 800f57c:	d801      	bhi.n	800f582 <_strtol_l.constprop.0+0xb2>
 800f57e:	3c37      	subs	r4, #55	; 0x37
 800f580:	e7e2      	b.n	800f548 <_strtol_l.constprop.0+0x78>
 800f582:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f586:	f1be 0f19 	cmp.w	lr, #25
 800f58a:	d804      	bhi.n	800f596 <_strtol_l.constprop.0+0xc6>
 800f58c:	3c57      	subs	r4, #87	; 0x57
 800f58e:	e7db      	b.n	800f548 <_strtol_l.constprop.0+0x78>
 800f590:	f04f 3cff 	mov.w	ip, #4294967295
 800f594:	e7e6      	b.n	800f564 <_strtol_l.constprop.0+0x94>
 800f596:	f1bc 0f00 	cmp.w	ip, #0
 800f59a:	da05      	bge.n	800f5a8 <_strtol_l.constprop.0+0xd8>
 800f59c:	2322      	movs	r3, #34	; 0x22
 800f59e:	6003      	str	r3, [r0, #0]
 800f5a0:	4646      	mov	r6, r8
 800f5a2:	b942      	cbnz	r2, 800f5b6 <_strtol_l.constprop.0+0xe6>
 800f5a4:	4630      	mov	r0, r6
 800f5a6:	e79e      	b.n	800f4e6 <_strtol_l.constprop.0+0x16>
 800f5a8:	b107      	cbz	r7, 800f5ac <_strtol_l.constprop.0+0xdc>
 800f5aa:	4276      	negs	r6, r6
 800f5ac:	2a00      	cmp	r2, #0
 800f5ae:	d0f9      	beq.n	800f5a4 <_strtol_l.constprop.0+0xd4>
 800f5b0:	f1bc 0f00 	cmp.w	ip, #0
 800f5b4:	d000      	beq.n	800f5b8 <_strtol_l.constprop.0+0xe8>
 800f5b6:	1e69      	subs	r1, r5, #1
 800f5b8:	6011      	str	r1, [r2, #0]
 800f5ba:	e7f3      	b.n	800f5a4 <_strtol_l.constprop.0+0xd4>
 800f5bc:	2430      	movs	r4, #48	; 0x30
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1b1      	bne.n	800f526 <_strtol_l.constprop.0+0x56>
 800f5c2:	2308      	movs	r3, #8
 800f5c4:	e7af      	b.n	800f526 <_strtol_l.constprop.0+0x56>
 800f5c6:	2c30      	cmp	r4, #48	; 0x30
 800f5c8:	d0a5      	beq.n	800f516 <_strtol_l.constprop.0+0x46>
 800f5ca:	230a      	movs	r3, #10
 800f5cc:	e7ab      	b.n	800f526 <_strtol_l.constprop.0+0x56>
 800f5ce:	bf00      	nop
 800f5d0:	0803c8cd 	.word	0x0803c8cd

0800f5d4 <_strtol_r>:
 800f5d4:	f7ff bf7c 	b.w	800f4d0 <_strtol_l.constprop.0>

0800f5d8 <strtol>:
 800f5d8:	4613      	mov	r3, r2
 800f5da:	460a      	mov	r2, r1
 800f5dc:	4601      	mov	r1, r0
 800f5de:	4802      	ldr	r0, [pc, #8]	; (800f5e8 <strtol+0x10>)
 800f5e0:	6800      	ldr	r0, [r0, #0]
 800f5e2:	f7ff bf75 	b.w	800f4d0 <_strtol_l.constprop.0>
 800f5e6:	bf00      	nop
 800f5e8:	200002c0 	.word	0x200002c0

0800f5ec <_strtoul_l.constprop.0>:
 800f5ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5f0:	4f36      	ldr	r7, [pc, #216]	; (800f6cc <_strtoul_l.constprop.0+0xe0>)
 800f5f2:	4686      	mov	lr, r0
 800f5f4:	460d      	mov	r5, r1
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f5fc:	5de6      	ldrb	r6, [r4, r7]
 800f5fe:	f016 0608 	ands.w	r6, r6, #8
 800f602:	d1f8      	bne.n	800f5f6 <_strtoul_l.constprop.0+0xa>
 800f604:	2c2d      	cmp	r4, #45	; 0x2d
 800f606:	d12f      	bne.n	800f668 <_strtoul_l.constprop.0+0x7c>
 800f608:	782c      	ldrb	r4, [r5, #0]
 800f60a:	2601      	movs	r6, #1
 800f60c:	1c85      	adds	r5, r0, #2
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d057      	beq.n	800f6c2 <_strtoul_l.constprop.0+0xd6>
 800f612:	2b10      	cmp	r3, #16
 800f614:	d109      	bne.n	800f62a <_strtoul_l.constprop.0+0x3e>
 800f616:	2c30      	cmp	r4, #48	; 0x30
 800f618:	d107      	bne.n	800f62a <_strtoul_l.constprop.0+0x3e>
 800f61a:	7828      	ldrb	r0, [r5, #0]
 800f61c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f620:	2858      	cmp	r0, #88	; 0x58
 800f622:	d149      	bne.n	800f6b8 <_strtoul_l.constprop.0+0xcc>
 800f624:	786c      	ldrb	r4, [r5, #1]
 800f626:	2310      	movs	r3, #16
 800f628:	3502      	adds	r5, #2
 800f62a:	f04f 38ff 	mov.w	r8, #4294967295
 800f62e:	2700      	movs	r7, #0
 800f630:	fbb8 f8f3 	udiv	r8, r8, r3
 800f634:	fb03 f908 	mul.w	r9, r3, r8
 800f638:	ea6f 0909 	mvn.w	r9, r9
 800f63c:	4638      	mov	r0, r7
 800f63e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f642:	f1bc 0f09 	cmp.w	ip, #9
 800f646:	d814      	bhi.n	800f672 <_strtoul_l.constprop.0+0x86>
 800f648:	4664      	mov	r4, ip
 800f64a:	42a3      	cmp	r3, r4
 800f64c:	dd22      	ble.n	800f694 <_strtoul_l.constprop.0+0xa8>
 800f64e:	2f00      	cmp	r7, #0
 800f650:	db1d      	blt.n	800f68e <_strtoul_l.constprop.0+0xa2>
 800f652:	4580      	cmp	r8, r0
 800f654:	d31b      	bcc.n	800f68e <_strtoul_l.constprop.0+0xa2>
 800f656:	d101      	bne.n	800f65c <_strtoul_l.constprop.0+0x70>
 800f658:	45a1      	cmp	r9, r4
 800f65a:	db18      	blt.n	800f68e <_strtoul_l.constprop.0+0xa2>
 800f65c:	fb00 4003 	mla	r0, r0, r3, r4
 800f660:	2701      	movs	r7, #1
 800f662:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f666:	e7ea      	b.n	800f63e <_strtoul_l.constprop.0+0x52>
 800f668:	2c2b      	cmp	r4, #43	; 0x2b
 800f66a:	bf04      	itt	eq
 800f66c:	782c      	ldrbeq	r4, [r5, #0]
 800f66e:	1c85      	addeq	r5, r0, #2
 800f670:	e7cd      	b.n	800f60e <_strtoul_l.constprop.0+0x22>
 800f672:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f676:	f1bc 0f19 	cmp.w	ip, #25
 800f67a:	d801      	bhi.n	800f680 <_strtoul_l.constprop.0+0x94>
 800f67c:	3c37      	subs	r4, #55	; 0x37
 800f67e:	e7e4      	b.n	800f64a <_strtoul_l.constprop.0+0x5e>
 800f680:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f684:	f1bc 0f19 	cmp.w	ip, #25
 800f688:	d804      	bhi.n	800f694 <_strtoul_l.constprop.0+0xa8>
 800f68a:	3c57      	subs	r4, #87	; 0x57
 800f68c:	e7dd      	b.n	800f64a <_strtoul_l.constprop.0+0x5e>
 800f68e:	f04f 37ff 	mov.w	r7, #4294967295
 800f692:	e7e6      	b.n	800f662 <_strtoul_l.constprop.0+0x76>
 800f694:	2f00      	cmp	r7, #0
 800f696:	da07      	bge.n	800f6a8 <_strtoul_l.constprop.0+0xbc>
 800f698:	2322      	movs	r3, #34	; 0x22
 800f69a:	f8ce 3000 	str.w	r3, [lr]
 800f69e:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a2:	b932      	cbnz	r2, 800f6b2 <_strtoul_l.constprop.0+0xc6>
 800f6a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6a8:	b106      	cbz	r6, 800f6ac <_strtoul_l.constprop.0+0xc0>
 800f6aa:	4240      	negs	r0, r0
 800f6ac:	2a00      	cmp	r2, #0
 800f6ae:	d0f9      	beq.n	800f6a4 <_strtoul_l.constprop.0+0xb8>
 800f6b0:	b107      	cbz	r7, 800f6b4 <_strtoul_l.constprop.0+0xc8>
 800f6b2:	1e69      	subs	r1, r5, #1
 800f6b4:	6011      	str	r1, [r2, #0]
 800f6b6:	e7f5      	b.n	800f6a4 <_strtoul_l.constprop.0+0xb8>
 800f6b8:	2430      	movs	r4, #48	; 0x30
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1b5      	bne.n	800f62a <_strtoul_l.constprop.0+0x3e>
 800f6be:	2308      	movs	r3, #8
 800f6c0:	e7b3      	b.n	800f62a <_strtoul_l.constprop.0+0x3e>
 800f6c2:	2c30      	cmp	r4, #48	; 0x30
 800f6c4:	d0a9      	beq.n	800f61a <_strtoul_l.constprop.0+0x2e>
 800f6c6:	230a      	movs	r3, #10
 800f6c8:	e7af      	b.n	800f62a <_strtoul_l.constprop.0+0x3e>
 800f6ca:	bf00      	nop
 800f6cc:	0803c8cd 	.word	0x0803c8cd

0800f6d0 <_strtoul_r>:
 800f6d0:	f7ff bf8c 	b.w	800f5ec <_strtoul_l.constprop.0>

0800f6d4 <strtoul>:
 800f6d4:	4613      	mov	r3, r2
 800f6d6:	460a      	mov	r2, r1
 800f6d8:	4601      	mov	r1, r0
 800f6da:	4802      	ldr	r0, [pc, #8]	; (800f6e4 <strtoul+0x10>)
 800f6dc:	6800      	ldr	r0, [r0, #0]
 800f6de:	f7ff bf85 	b.w	800f5ec <_strtoul_l.constprop.0>
 800f6e2:	bf00      	nop
 800f6e4:	200002c0 	.word	0x200002c0

0800f6e8 <__tzcalc_limits>:
 800f6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	f001 fbb7 	bl	8010e60 <__gettzinfo>
 800f6f2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800f6f6:	429d      	cmp	r5, r3
 800f6f8:	f340 8099 	ble.w	800f82e <__tzcalc_limits+0x146>
 800f6fc:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800f700:	18ac      	adds	r4, r5, r2
 800f702:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800f706:	f240 126d 	movw	r2, #365	; 0x16d
 800f70a:	10a4      	asrs	r4, r4, #2
 800f70c:	fb02 4403 	mla	r4, r2, r3, r4
 800f710:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800f714:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800f718:	fb93 f3f2 	sdiv	r3, r3, r2
 800f71c:	441c      	add	r4, r3
 800f71e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f722:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800f726:	fb95 fcf3 	sdiv	ip, r5, r3
 800f72a:	fb03 5c1c 	mls	ip, r3, ip, r5
 800f72e:	186a      	adds	r2, r5, r1
 800f730:	fabc f68c 	clz	r6, ip
 800f734:	fbb2 f2f3 	udiv	r2, r2, r3
 800f738:	f005 0303 	and.w	r3, r5, #3
 800f73c:	4414      	add	r4, r2
 800f73e:	2264      	movs	r2, #100	; 0x64
 800f740:	6045      	str	r5, [r0, #4]
 800f742:	fb95 f7f2 	sdiv	r7, r5, r2
 800f746:	0976      	lsrs	r6, r6, #5
 800f748:	fb02 5717 	mls	r7, r2, r7, r5
 800f74c:	4601      	mov	r1, r0
 800f74e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800f752:	9300      	str	r3, [sp, #0]
 800f754:	f04f 0a07 	mov.w	sl, #7
 800f758:	7a0d      	ldrb	r5, [r1, #8]
 800f75a:	694b      	ldr	r3, [r1, #20]
 800f75c:	2d4a      	cmp	r5, #74	; 0x4a
 800f75e:	d12d      	bne.n	800f7bc <__tzcalc_limits+0xd4>
 800f760:	9a00      	ldr	r2, [sp, #0]
 800f762:	eb04 0e03 	add.w	lr, r4, r3
 800f766:	b902      	cbnz	r2, 800f76a <__tzcalc_limits+0x82>
 800f768:	b917      	cbnz	r7, 800f770 <__tzcalc_limits+0x88>
 800f76a:	f1bc 0f00 	cmp.w	ip, #0
 800f76e:	d123      	bne.n	800f7b8 <__tzcalc_limits+0xd0>
 800f770:	2b3b      	cmp	r3, #59	; 0x3b
 800f772:	bfd4      	ite	le
 800f774:	2300      	movle	r3, #0
 800f776:	2301      	movgt	r3, #1
 800f778:	4473      	add	r3, lr
 800f77a:	3b01      	subs	r3, #1
 800f77c:	698d      	ldr	r5, [r1, #24]
 800f77e:	4a2d      	ldr	r2, [pc, #180]	; (800f834 <__tzcalc_limits+0x14c>)
 800f780:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800f784:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800f788:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800f78a:	18ed      	adds	r5, r5, r3
 800f78c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800f790:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800f794:	3128      	adds	r1, #40	; 0x28
 800f796:	458b      	cmp	fp, r1
 800f798:	d1de      	bne.n	800f758 <__tzcalc_limits+0x70>
 800f79a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800f79e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800f7a2:	428c      	cmp	r4, r1
 800f7a4:	eb72 0303 	sbcs.w	r3, r2, r3
 800f7a8:	bfb4      	ite	lt
 800f7aa:	2301      	movlt	r3, #1
 800f7ac:	2300      	movge	r3, #0
 800f7ae:	6003      	str	r3, [r0, #0]
 800f7b0:	2001      	movs	r0, #1
 800f7b2:	b003      	add	sp, #12
 800f7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	e7dd      	b.n	800f778 <__tzcalc_limits+0x90>
 800f7bc:	2d44      	cmp	r5, #68	; 0x44
 800f7be:	d101      	bne.n	800f7c4 <__tzcalc_limits+0xdc>
 800f7c0:	4423      	add	r3, r4
 800f7c2:	e7db      	b.n	800f77c <__tzcalc_limits+0x94>
 800f7c4:	9a00      	ldr	r2, [sp, #0]
 800f7c6:	bb62      	cbnz	r2, 800f822 <__tzcalc_limits+0x13a>
 800f7c8:	2f00      	cmp	r7, #0
 800f7ca:	bf0c      	ite	eq
 800f7cc:	4635      	moveq	r5, r6
 800f7ce:	2501      	movne	r5, #1
 800f7d0:	68ca      	ldr	r2, [r1, #12]
 800f7d2:	9201      	str	r2, [sp, #4]
 800f7d4:	4a18      	ldr	r2, [pc, #96]	; (800f838 <__tzcalc_limits+0x150>)
 800f7d6:	f04f 0930 	mov.w	r9, #48	; 0x30
 800f7da:	fb09 2505 	mla	r5, r9, r5, r2
 800f7de:	46a6      	mov	lr, r4
 800f7e0:	f04f 0800 	mov.w	r8, #0
 800f7e4:	3d04      	subs	r5, #4
 800f7e6:	9a01      	ldr	r2, [sp, #4]
 800f7e8:	f108 0801 	add.w	r8, r8, #1
 800f7ec:	4542      	cmp	r2, r8
 800f7ee:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800f7f2:	dc18      	bgt.n	800f826 <__tzcalc_limits+0x13e>
 800f7f4:	f10e 0504 	add.w	r5, lr, #4
 800f7f8:	fb95 f8fa 	sdiv	r8, r5, sl
 800f7fc:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800f800:	eba5 0808 	sub.w	r8, r5, r8
 800f804:	ebb3 0808 	subs.w	r8, r3, r8
 800f808:	690b      	ldr	r3, [r1, #16]
 800f80a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f80e:	bf48      	it	mi
 800f810:	f108 0807 	addmi.w	r8, r8, #7
 800f814:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f818:	4443      	add	r3, r8
 800f81a:	454b      	cmp	r3, r9
 800f81c:	da05      	bge.n	800f82a <__tzcalc_limits+0x142>
 800f81e:	4473      	add	r3, lr
 800f820:	e7ac      	b.n	800f77c <__tzcalc_limits+0x94>
 800f822:	4635      	mov	r5, r6
 800f824:	e7d4      	b.n	800f7d0 <__tzcalc_limits+0xe8>
 800f826:	44ce      	add	lr, r9
 800f828:	e7dd      	b.n	800f7e6 <__tzcalc_limits+0xfe>
 800f82a:	3b07      	subs	r3, #7
 800f82c:	e7f5      	b.n	800f81a <__tzcalc_limits+0x132>
 800f82e:	2000      	movs	r0, #0
 800f830:	e7bf      	b.n	800f7b2 <__tzcalc_limits+0xca>
 800f832:	bf00      	nop
 800f834:	00015180 	.word	0x00015180
 800f838:	0803caa8 	.word	0x0803caa8

0800f83c <__tz_lock>:
 800f83c:	4801      	ldr	r0, [pc, #4]	; (800f844 <__tz_lock+0x8>)
 800f83e:	f001 bb1c 	b.w	8010e7a <__retarget_lock_acquire>
 800f842:	bf00      	nop
 800f844:	20003c1c 	.word	0x20003c1c

0800f848 <__tz_unlock>:
 800f848:	4801      	ldr	r0, [pc, #4]	; (800f850 <__tz_unlock+0x8>)
 800f84a:	f001 bb18 	b.w	8010e7e <__retarget_lock_release>
 800f84e:	bf00      	nop
 800f850:	20003c1c 	.word	0x20003c1c

0800f854 <_tzset_unlocked>:
 800f854:	4b01      	ldr	r3, [pc, #4]	; (800f85c <_tzset_unlocked+0x8>)
 800f856:	6818      	ldr	r0, [r3, #0]
 800f858:	f000 b802 	b.w	800f860 <_tzset_unlocked_r>
 800f85c:	200002c0 	.word	0x200002c0

0800f860 <_tzset_unlocked_r>:
 800f860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f864:	b08d      	sub	sp, #52	; 0x34
 800f866:	4607      	mov	r7, r0
 800f868:	f001 fafa 	bl	8010e60 <__gettzinfo>
 800f86c:	49b0      	ldr	r1, [pc, #704]	; (800fb30 <_tzset_unlocked_r+0x2d0>)
 800f86e:	4eb1      	ldr	r6, [pc, #708]	; (800fb34 <_tzset_unlocked_r+0x2d4>)
 800f870:	4605      	mov	r5, r0
 800f872:	4638      	mov	r0, r7
 800f874:	f001 faec 	bl	8010e50 <_getenv_r>
 800f878:	4604      	mov	r4, r0
 800f87a:	b970      	cbnz	r0, 800f89a <_tzset_unlocked_r+0x3a>
 800f87c:	4bae      	ldr	r3, [pc, #696]	; (800fb38 <_tzset_unlocked_r+0x2d8>)
 800f87e:	4aaf      	ldr	r2, [pc, #700]	; (800fb3c <_tzset_unlocked_r+0x2dc>)
 800f880:	6018      	str	r0, [r3, #0]
 800f882:	4baf      	ldr	r3, [pc, #700]	; (800fb40 <_tzset_unlocked_r+0x2e0>)
 800f884:	6018      	str	r0, [r3, #0]
 800f886:	4baf      	ldr	r3, [pc, #700]	; (800fb44 <_tzset_unlocked_r+0x2e4>)
 800f888:	6830      	ldr	r0, [r6, #0]
 800f88a:	e9c3 2200 	strd	r2, r2, [r3]
 800f88e:	f7fd fe67 	bl	800d560 <free>
 800f892:	6034      	str	r4, [r6, #0]
 800f894:	b00d      	add	sp, #52	; 0x34
 800f896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f89a:	6831      	ldr	r1, [r6, #0]
 800f89c:	2900      	cmp	r1, #0
 800f89e:	d162      	bne.n	800f966 <_tzset_unlocked_r+0x106>
 800f8a0:	6830      	ldr	r0, [r6, #0]
 800f8a2:	f7fd fe5d 	bl	800d560 <free>
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f7f0 fca2 	bl	80001f0 <strlen>
 800f8ac:	1c41      	adds	r1, r0, #1
 800f8ae:	4638      	mov	r0, r7
 800f8b0:	f7fe f952 	bl	800db58 <_malloc_r>
 800f8b4:	6030      	str	r0, [r6, #0]
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d15a      	bne.n	800f970 <_tzset_unlocked_r+0x110>
 800f8ba:	7823      	ldrb	r3, [r4, #0]
 800f8bc:	4aa2      	ldr	r2, [pc, #648]	; (800fb48 <_tzset_unlocked_r+0x2e8>)
 800f8be:	49a3      	ldr	r1, [pc, #652]	; (800fb4c <_tzset_unlocked_r+0x2ec>)
 800f8c0:	2b3a      	cmp	r3, #58	; 0x3a
 800f8c2:	bf08      	it	eq
 800f8c4:	3401      	addeq	r4, #1
 800f8c6:	ae0a      	add	r6, sp, #40	; 0x28
 800f8c8:	4633      	mov	r3, r6
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	f7fe ffac 	bl	800e828 <siscanf>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	dddf      	ble.n	800f894 <_tzset_unlocked_r+0x34>
 800f8d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8d6:	18e7      	adds	r7, r4, r3
 800f8d8:	5ce3      	ldrb	r3, [r4, r3]
 800f8da:	2b2d      	cmp	r3, #45	; 0x2d
 800f8dc:	d14c      	bne.n	800f978 <_tzset_unlocked_r+0x118>
 800f8de:	3701      	adds	r7, #1
 800f8e0:	f04f 38ff 	mov.w	r8, #4294967295
 800f8e4:	f10d 0a20 	add.w	sl, sp, #32
 800f8e8:	f10d 0b1e 	add.w	fp, sp, #30
 800f8ec:	2400      	movs	r4, #0
 800f8ee:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800f8f2:	4997      	ldr	r1, [pc, #604]	; (800fb50 <_tzset_unlocked_r+0x2f0>)
 800f8f4:	9603      	str	r6, [sp, #12]
 800f8f6:	f8cd b000 	str.w	fp, [sp]
 800f8fa:	4633      	mov	r3, r6
 800f8fc:	aa07      	add	r2, sp, #28
 800f8fe:	4638      	mov	r0, r7
 800f900:	f8ad 401e 	strh.w	r4, [sp, #30]
 800f904:	f8ad 4020 	strh.w	r4, [sp, #32]
 800f908:	f7fe ff8e 	bl	800e828 <siscanf>
 800f90c:	42a0      	cmp	r0, r4
 800f90e:	ddc1      	ble.n	800f894 <_tzset_unlocked_r+0x34>
 800f910:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800f914:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f918:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800fb5c <_tzset_unlocked_r+0x2fc>
 800f91c:	213c      	movs	r1, #60	; 0x3c
 800f91e:	fb01 3302 	mla	r3, r1, r2, r3
 800f922:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800f926:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800f92a:	fb01 3302 	mla	r3, r1, r2, r3
 800f92e:	fb08 f303 	mul.w	r3, r8, r3
 800f932:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800fb44 <_tzset_unlocked_r+0x2e4>
 800f936:	62ab      	str	r3, [r5, #40]	; 0x28
 800f938:	4b83      	ldr	r3, [pc, #524]	; (800fb48 <_tzset_unlocked_r+0x2e8>)
 800f93a:	f8c8 3000 	str.w	r3, [r8]
 800f93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f940:	4982      	ldr	r1, [pc, #520]	; (800fb4c <_tzset_unlocked_r+0x2ec>)
 800f942:	441f      	add	r7, r3
 800f944:	464a      	mov	r2, r9
 800f946:	4633      	mov	r3, r6
 800f948:	4638      	mov	r0, r7
 800f94a:	f7fe ff6d 	bl	800e828 <siscanf>
 800f94e:	42a0      	cmp	r0, r4
 800f950:	dc18      	bgt.n	800f984 <_tzset_unlocked_r+0x124>
 800f952:	f8d8 3000 	ldr.w	r3, [r8]
 800f956:	f8c8 3004 	str.w	r3, [r8, #4]
 800f95a:	4b77      	ldr	r3, [pc, #476]	; (800fb38 <_tzset_unlocked_r+0x2d8>)
 800f95c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800f95e:	601a      	str	r2, [r3, #0]
 800f960:	4b77      	ldr	r3, [pc, #476]	; (800fb40 <_tzset_unlocked_r+0x2e0>)
 800f962:	601c      	str	r4, [r3, #0]
 800f964:	e796      	b.n	800f894 <_tzset_unlocked_r+0x34>
 800f966:	f7f0 fc9b 	bl	80002a0 <strcmp>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	d198      	bne.n	800f8a0 <_tzset_unlocked_r+0x40>
 800f96e:	e791      	b.n	800f894 <_tzset_unlocked_r+0x34>
 800f970:	4621      	mov	r1, r4
 800f972:	f7fe ffca 	bl	800e90a <strcpy>
 800f976:	e7a0      	b.n	800f8ba <_tzset_unlocked_r+0x5a>
 800f978:	2b2b      	cmp	r3, #43	; 0x2b
 800f97a:	bf08      	it	eq
 800f97c:	3701      	addeq	r7, #1
 800f97e:	f04f 0801 	mov.w	r8, #1
 800f982:	e7af      	b.n	800f8e4 <_tzset_unlocked_r+0x84>
 800f984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f986:	f8c8 9004 	str.w	r9, [r8, #4]
 800f98a:	18fc      	adds	r4, r7, r3
 800f98c:	5cfb      	ldrb	r3, [r7, r3]
 800f98e:	2b2d      	cmp	r3, #45	; 0x2d
 800f990:	f040 808b 	bne.w	800faaa <_tzset_unlocked_r+0x24a>
 800f994:	3401      	adds	r4, #1
 800f996:	f04f 37ff 	mov.w	r7, #4294967295
 800f99a:	2300      	movs	r3, #0
 800f99c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f9a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f9a4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f9a8:	930a      	str	r3, [sp, #40]	; 0x28
 800f9aa:	e9cd a602 	strd	sl, r6, [sp, #8]
 800f9ae:	e9cd b600 	strd	fp, r6, [sp]
 800f9b2:	4967      	ldr	r1, [pc, #412]	; (800fb50 <_tzset_unlocked_r+0x2f0>)
 800f9b4:	4633      	mov	r3, r6
 800f9b6:	aa07      	add	r2, sp, #28
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f7fe ff35 	bl	800e828 <siscanf>
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	dc78      	bgt.n	800fab4 <_tzset_unlocked_r+0x254>
 800f9c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f9c4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800f9c8:	652b      	str	r3, [r5, #80]	; 0x50
 800f9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9cc:	462f      	mov	r7, r5
 800f9ce:	441c      	add	r4, r3
 800f9d0:	f04f 0900 	mov.w	r9, #0
 800f9d4:	7823      	ldrb	r3, [r4, #0]
 800f9d6:	2b2c      	cmp	r3, #44	; 0x2c
 800f9d8:	bf08      	it	eq
 800f9da:	3401      	addeq	r4, #1
 800f9dc:	f894 8000 	ldrb.w	r8, [r4]
 800f9e0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800f9e4:	d178      	bne.n	800fad8 <_tzset_unlocked_r+0x278>
 800f9e6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800f9ea:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800f9ee:	ab09      	add	r3, sp, #36	; 0x24
 800f9f0:	9300      	str	r3, [sp, #0]
 800f9f2:	4958      	ldr	r1, [pc, #352]	; (800fb54 <_tzset_unlocked_r+0x2f4>)
 800f9f4:	9603      	str	r6, [sp, #12]
 800f9f6:	4633      	mov	r3, r6
 800f9f8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	f7fe ff13 	bl	800e828 <siscanf>
 800fa02:	2803      	cmp	r0, #3
 800fa04:	f47f af46 	bne.w	800f894 <_tzset_unlocked_r+0x34>
 800fa08:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800fa0c:	1e4b      	subs	r3, r1, #1
 800fa0e:	2b0b      	cmp	r3, #11
 800fa10:	f63f af40 	bhi.w	800f894 <_tzset_unlocked_r+0x34>
 800fa14:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800fa18:	1e53      	subs	r3, r2, #1
 800fa1a:	2b04      	cmp	r3, #4
 800fa1c:	f63f af3a 	bhi.w	800f894 <_tzset_unlocked_r+0x34>
 800fa20:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800fa24:	2b06      	cmp	r3, #6
 800fa26:	f63f af35 	bhi.w	800f894 <_tzset_unlocked_r+0x34>
 800fa2a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800fa2e:	f887 8008 	strb.w	r8, [r7, #8]
 800fa32:	617b      	str	r3, [r7, #20]
 800fa34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa36:	eb04 0803 	add.w	r8, r4, r3
 800fa3a:	2302      	movs	r3, #2
 800fa3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fa40:	2300      	movs	r3, #0
 800fa42:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fa46:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fa4a:	930a      	str	r3, [sp, #40]	; 0x28
 800fa4c:	f898 3000 	ldrb.w	r3, [r8]
 800fa50:	2b2f      	cmp	r3, #47	; 0x2f
 800fa52:	d109      	bne.n	800fa68 <_tzset_unlocked_r+0x208>
 800fa54:	e9cd a602 	strd	sl, r6, [sp, #8]
 800fa58:	e9cd b600 	strd	fp, r6, [sp]
 800fa5c:	493e      	ldr	r1, [pc, #248]	; (800fb58 <_tzset_unlocked_r+0x2f8>)
 800fa5e:	4633      	mov	r3, r6
 800fa60:	aa07      	add	r2, sp, #28
 800fa62:	4640      	mov	r0, r8
 800fa64:	f7fe fee0 	bl	800e828 <siscanf>
 800fa68:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800fa6c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800fa70:	213c      	movs	r1, #60	; 0x3c
 800fa72:	fb01 3302 	mla	r3, r1, r2, r3
 800fa76:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800fa7a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800fa7e:	fb01 3302 	mla	r3, r1, r2, r3
 800fa82:	61bb      	str	r3, [r7, #24]
 800fa84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fa86:	3728      	adds	r7, #40	; 0x28
 800fa88:	4444      	add	r4, r8
 800fa8a:	f1b9 0f00 	cmp.w	r9, #0
 800fa8e:	d020      	beq.n	800fad2 <_tzset_unlocked_r+0x272>
 800fa90:	6868      	ldr	r0, [r5, #4]
 800fa92:	f7ff fe29 	bl	800f6e8 <__tzcalc_limits>
 800fa96:	4b28      	ldr	r3, [pc, #160]	; (800fb38 <_tzset_unlocked_r+0x2d8>)
 800fa98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800fa9a:	601a      	str	r2, [r3, #0]
 800fa9c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800fa9e:	1a9b      	subs	r3, r3, r2
 800faa0:	4a27      	ldr	r2, [pc, #156]	; (800fb40 <_tzset_unlocked_r+0x2e0>)
 800faa2:	bf18      	it	ne
 800faa4:	2301      	movne	r3, #1
 800faa6:	6013      	str	r3, [r2, #0]
 800faa8:	e6f4      	b.n	800f894 <_tzset_unlocked_r+0x34>
 800faaa:	2b2b      	cmp	r3, #43	; 0x2b
 800faac:	bf08      	it	eq
 800faae:	3401      	addeq	r4, #1
 800fab0:	2701      	movs	r7, #1
 800fab2:	e772      	b.n	800f99a <_tzset_unlocked_r+0x13a>
 800fab4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800fab8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800fabc:	213c      	movs	r1, #60	; 0x3c
 800fabe:	fb01 3302 	mla	r3, r1, r2, r3
 800fac2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800fac6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800faca:	fb01 3302 	mla	r3, r1, r2, r3
 800face:	437b      	muls	r3, r7
 800fad0:	e77a      	b.n	800f9c8 <_tzset_unlocked_r+0x168>
 800fad2:	f04f 0901 	mov.w	r9, #1
 800fad6:	e77d      	b.n	800f9d4 <_tzset_unlocked_r+0x174>
 800fad8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800fadc:	bf06      	itte	eq
 800fade:	3401      	addeq	r4, #1
 800fae0:	4643      	moveq	r3, r8
 800fae2:	2344      	movne	r3, #68	; 0x44
 800fae4:	220a      	movs	r2, #10
 800fae6:	a90b      	add	r1, sp, #44	; 0x2c
 800fae8:	4620      	mov	r0, r4
 800faea:	9305      	str	r3, [sp, #20]
 800faec:	f7ff fdf2 	bl	800f6d4 <strtoul>
 800faf0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800faf4:	9b05      	ldr	r3, [sp, #20]
 800faf6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800fafa:	45a0      	cmp	r8, r4
 800fafc:	d114      	bne.n	800fb28 <_tzset_unlocked_r+0x2c8>
 800fafe:	234d      	movs	r3, #77	; 0x4d
 800fb00:	f1b9 0f00 	cmp.w	r9, #0
 800fb04:	d107      	bne.n	800fb16 <_tzset_unlocked_r+0x2b6>
 800fb06:	722b      	strb	r3, [r5, #8]
 800fb08:	2103      	movs	r1, #3
 800fb0a:	2302      	movs	r3, #2
 800fb0c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800fb10:	f8c5 9014 	str.w	r9, [r5, #20]
 800fb14:	e791      	b.n	800fa3a <_tzset_unlocked_r+0x1da>
 800fb16:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800fb1a:	220b      	movs	r2, #11
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800fb22:	2300      	movs	r3, #0
 800fb24:	63eb      	str	r3, [r5, #60]	; 0x3c
 800fb26:	e788      	b.n	800fa3a <_tzset_unlocked_r+0x1da>
 800fb28:	b280      	uxth	r0, r0
 800fb2a:	723b      	strb	r3, [r7, #8]
 800fb2c:	6178      	str	r0, [r7, #20]
 800fb2e:	e784      	b.n	800fa3a <_tzset_unlocked_r+0x1da>
 800fb30:	0803c890 	.word	0x0803c890
 800fb34:	20003c0c 	.word	0x20003c0c
 800fb38:	20003c14 	.word	0x20003c14
 800fb3c:	0803c893 	.word	0x0803c893
 800fb40:	20003c10 	.word	0x20003c10
 800fb44:	20000324 	.word	0x20000324
 800fb48:	20003bff 	.word	0x20003bff
 800fb4c:	0803c897 	.word	0x0803c897
 800fb50:	0803c8ba 	.word	0x0803c8ba
 800fb54:	0803c8a6 	.word	0x0803c8a6
 800fb58:	0803c8b9 	.word	0x0803c8b9
 800fb5c:	20003bf4 	.word	0x20003bf4

0800fb60 <__swbuf_r>:
 800fb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb62:	460e      	mov	r6, r1
 800fb64:	4614      	mov	r4, r2
 800fb66:	4605      	mov	r5, r0
 800fb68:	b118      	cbz	r0, 800fb72 <__swbuf_r+0x12>
 800fb6a:	6983      	ldr	r3, [r0, #24]
 800fb6c:	b90b      	cbnz	r3, 800fb72 <__swbuf_r+0x12>
 800fb6e:	f001 f895 	bl	8010c9c <__sinit>
 800fb72:	4b21      	ldr	r3, [pc, #132]	; (800fbf8 <__swbuf_r+0x98>)
 800fb74:	429c      	cmp	r4, r3
 800fb76:	d12b      	bne.n	800fbd0 <__swbuf_r+0x70>
 800fb78:	686c      	ldr	r4, [r5, #4]
 800fb7a:	69a3      	ldr	r3, [r4, #24]
 800fb7c:	60a3      	str	r3, [r4, #8]
 800fb7e:	89a3      	ldrh	r3, [r4, #12]
 800fb80:	071a      	lsls	r2, r3, #28
 800fb82:	d52f      	bpl.n	800fbe4 <__swbuf_r+0x84>
 800fb84:	6923      	ldr	r3, [r4, #16]
 800fb86:	b36b      	cbz	r3, 800fbe4 <__swbuf_r+0x84>
 800fb88:	6923      	ldr	r3, [r4, #16]
 800fb8a:	6820      	ldr	r0, [r4, #0]
 800fb8c:	1ac0      	subs	r0, r0, r3
 800fb8e:	6963      	ldr	r3, [r4, #20]
 800fb90:	b2f6      	uxtb	r6, r6
 800fb92:	4283      	cmp	r3, r0
 800fb94:	4637      	mov	r7, r6
 800fb96:	dc04      	bgt.n	800fba2 <__swbuf_r+0x42>
 800fb98:	4621      	mov	r1, r4
 800fb9a:	4628      	mov	r0, r5
 800fb9c:	f000 ffea 	bl	8010b74 <_fflush_r>
 800fba0:	bb30      	cbnz	r0, 800fbf0 <__swbuf_r+0x90>
 800fba2:	68a3      	ldr	r3, [r4, #8]
 800fba4:	3b01      	subs	r3, #1
 800fba6:	60a3      	str	r3, [r4, #8]
 800fba8:	6823      	ldr	r3, [r4, #0]
 800fbaa:	1c5a      	adds	r2, r3, #1
 800fbac:	6022      	str	r2, [r4, #0]
 800fbae:	701e      	strb	r6, [r3, #0]
 800fbb0:	6963      	ldr	r3, [r4, #20]
 800fbb2:	3001      	adds	r0, #1
 800fbb4:	4283      	cmp	r3, r0
 800fbb6:	d004      	beq.n	800fbc2 <__swbuf_r+0x62>
 800fbb8:	89a3      	ldrh	r3, [r4, #12]
 800fbba:	07db      	lsls	r3, r3, #31
 800fbbc:	d506      	bpl.n	800fbcc <__swbuf_r+0x6c>
 800fbbe:	2e0a      	cmp	r6, #10
 800fbc0:	d104      	bne.n	800fbcc <__swbuf_r+0x6c>
 800fbc2:	4621      	mov	r1, r4
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	f000 ffd5 	bl	8010b74 <_fflush_r>
 800fbca:	b988      	cbnz	r0, 800fbf0 <__swbuf_r+0x90>
 800fbcc:	4638      	mov	r0, r7
 800fbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbd0:	4b0a      	ldr	r3, [pc, #40]	; (800fbfc <__swbuf_r+0x9c>)
 800fbd2:	429c      	cmp	r4, r3
 800fbd4:	d101      	bne.n	800fbda <__swbuf_r+0x7a>
 800fbd6:	68ac      	ldr	r4, [r5, #8]
 800fbd8:	e7cf      	b.n	800fb7a <__swbuf_r+0x1a>
 800fbda:	4b09      	ldr	r3, [pc, #36]	; (800fc00 <__swbuf_r+0xa0>)
 800fbdc:	429c      	cmp	r4, r3
 800fbde:	bf08      	it	eq
 800fbe0:	68ec      	ldreq	r4, [r5, #12]
 800fbe2:	e7ca      	b.n	800fb7a <__swbuf_r+0x1a>
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f000 f81e 	bl	800fc28 <__swsetup_r>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d0cb      	beq.n	800fb88 <__swbuf_r+0x28>
 800fbf0:	f04f 37ff 	mov.w	r7, #4294967295
 800fbf4:	e7ea      	b.n	800fbcc <__swbuf_r+0x6c>
 800fbf6:	bf00      	nop
 800fbf8:	0803ca68 	.word	0x0803ca68
 800fbfc:	0803ca88 	.word	0x0803ca88
 800fc00:	0803ca48 	.word	0x0803ca48

0800fc04 <_write_r>:
 800fc04:	b538      	push	{r3, r4, r5, lr}
 800fc06:	4d07      	ldr	r5, [pc, #28]	; (800fc24 <_write_r+0x20>)
 800fc08:	4604      	mov	r4, r0
 800fc0a:	4608      	mov	r0, r1
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	2200      	movs	r2, #0
 800fc10:	602a      	str	r2, [r5, #0]
 800fc12:	461a      	mov	r2, r3
 800fc14:	f005 f800 	bl	8014c18 <_write>
 800fc18:	1c43      	adds	r3, r0, #1
 800fc1a:	d102      	bne.n	800fc22 <_write_r+0x1e>
 800fc1c:	682b      	ldr	r3, [r5, #0]
 800fc1e:	b103      	cbz	r3, 800fc22 <_write_r+0x1e>
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	bd38      	pop	{r3, r4, r5, pc}
 800fc24:	20003c20 	.word	0x20003c20

0800fc28 <__swsetup_r>:
 800fc28:	4b32      	ldr	r3, [pc, #200]	; (800fcf4 <__swsetup_r+0xcc>)
 800fc2a:	b570      	push	{r4, r5, r6, lr}
 800fc2c:	681d      	ldr	r5, [r3, #0]
 800fc2e:	4606      	mov	r6, r0
 800fc30:	460c      	mov	r4, r1
 800fc32:	b125      	cbz	r5, 800fc3e <__swsetup_r+0x16>
 800fc34:	69ab      	ldr	r3, [r5, #24]
 800fc36:	b913      	cbnz	r3, 800fc3e <__swsetup_r+0x16>
 800fc38:	4628      	mov	r0, r5
 800fc3a:	f001 f82f 	bl	8010c9c <__sinit>
 800fc3e:	4b2e      	ldr	r3, [pc, #184]	; (800fcf8 <__swsetup_r+0xd0>)
 800fc40:	429c      	cmp	r4, r3
 800fc42:	d10f      	bne.n	800fc64 <__swsetup_r+0x3c>
 800fc44:	686c      	ldr	r4, [r5, #4]
 800fc46:	89a3      	ldrh	r3, [r4, #12]
 800fc48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc4c:	0719      	lsls	r1, r3, #28
 800fc4e:	d42c      	bmi.n	800fcaa <__swsetup_r+0x82>
 800fc50:	06dd      	lsls	r5, r3, #27
 800fc52:	d411      	bmi.n	800fc78 <__swsetup_r+0x50>
 800fc54:	2309      	movs	r3, #9
 800fc56:	6033      	str	r3, [r6, #0]
 800fc58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fc5c:	81a3      	strh	r3, [r4, #12]
 800fc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc62:	e03e      	b.n	800fce2 <__swsetup_r+0xba>
 800fc64:	4b25      	ldr	r3, [pc, #148]	; (800fcfc <__swsetup_r+0xd4>)
 800fc66:	429c      	cmp	r4, r3
 800fc68:	d101      	bne.n	800fc6e <__swsetup_r+0x46>
 800fc6a:	68ac      	ldr	r4, [r5, #8]
 800fc6c:	e7eb      	b.n	800fc46 <__swsetup_r+0x1e>
 800fc6e:	4b24      	ldr	r3, [pc, #144]	; (800fd00 <__swsetup_r+0xd8>)
 800fc70:	429c      	cmp	r4, r3
 800fc72:	bf08      	it	eq
 800fc74:	68ec      	ldreq	r4, [r5, #12]
 800fc76:	e7e6      	b.n	800fc46 <__swsetup_r+0x1e>
 800fc78:	0758      	lsls	r0, r3, #29
 800fc7a:	d512      	bpl.n	800fca2 <__swsetup_r+0x7a>
 800fc7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc7e:	b141      	cbz	r1, 800fc92 <__swsetup_r+0x6a>
 800fc80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc84:	4299      	cmp	r1, r3
 800fc86:	d002      	beq.n	800fc8e <__swsetup_r+0x66>
 800fc88:	4630      	mov	r0, r6
 800fc8a:	f7fd fef9 	bl	800da80 <_free_r>
 800fc8e:	2300      	movs	r3, #0
 800fc90:	6363      	str	r3, [r4, #52]	; 0x34
 800fc92:	89a3      	ldrh	r3, [r4, #12]
 800fc94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fc98:	81a3      	strh	r3, [r4, #12]
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	6063      	str	r3, [r4, #4]
 800fc9e:	6923      	ldr	r3, [r4, #16]
 800fca0:	6023      	str	r3, [r4, #0]
 800fca2:	89a3      	ldrh	r3, [r4, #12]
 800fca4:	f043 0308 	orr.w	r3, r3, #8
 800fca8:	81a3      	strh	r3, [r4, #12]
 800fcaa:	6923      	ldr	r3, [r4, #16]
 800fcac:	b94b      	cbnz	r3, 800fcc2 <__swsetup_r+0x9a>
 800fcae:	89a3      	ldrh	r3, [r4, #12]
 800fcb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fcb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcb8:	d003      	beq.n	800fcc2 <__swsetup_r+0x9a>
 800fcba:	4621      	mov	r1, r4
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	f001 f919 	bl	8010ef4 <__smakebuf_r>
 800fcc2:	89a0      	ldrh	r0, [r4, #12]
 800fcc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fcc8:	f010 0301 	ands.w	r3, r0, #1
 800fccc:	d00a      	beq.n	800fce4 <__swsetup_r+0xbc>
 800fcce:	2300      	movs	r3, #0
 800fcd0:	60a3      	str	r3, [r4, #8]
 800fcd2:	6963      	ldr	r3, [r4, #20]
 800fcd4:	425b      	negs	r3, r3
 800fcd6:	61a3      	str	r3, [r4, #24]
 800fcd8:	6923      	ldr	r3, [r4, #16]
 800fcda:	b943      	cbnz	r3, 800fcee <__swsetup_r+0xc6>
 800fcdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fce0:	d1ba      	bne.n	800fc58 <__swsetup_r+0x30>
 800fce2:	bd70      	pop	{r4, r5, r6, pc}
 800fce4:	0781      	lsls	r1, r0, #30
 800fce6:	bf58      	it	pl
 800fce8:	6963      	ldrpl	r3, [r4, #20]
 800fcea:	60a3      	str	r3, [r4, #8]
 800fcec:	e7f4      	b.n	800fcd8 <__swsetup_r+0xb0>
 800fcee:	2000      	movs	r0, #0
 800fcf0:	e7f7      	b.n	800fce2 <__swsetup_r+0xba>
 800fcf2:	bf00      	nop
 800fcf4:	200002c0 	.word	0x200002c0
 800fcf8:	0803ca68 	.word	0x0803ca68
 800fcfc:	0803ca88 	.word	0x0803ca88
 800fd00:	0803ca48 	.word	0x0803ca48

0800fd04 <abort>:
 800fd04:	b508      	push	{r3, lr}
 800fd06:	2006      	movs	r0, #6
 800fd08:	f002 fa14 	bl	8012134 <raise>
 800fd0c:	2001      	movs	r0, #1
 800fd0e:	f004 ff8b 	bl	8014c28 <_exit>

0800fd12 <abs>:
 800fd12:	2800      	cmp	r0, #0
 800fd14:	bfb8      	it	lt
 800fd16:	4240      	neglt	r0, r0
 800fd18:	4770      	bx	lr
	...

0800fd1c <_close_r>:
 800fd1c:	b538      	push	{r3, r4, r5, lr}
 800fd1e:	4d06      	ldr	r5, [pc, #24]	; (800fd38 <_close_r+0x1c>)
 800fd20:	2300      	movs	r3, #0
 800fd22:	4604      	mov	r4, r0
 800fd24:	4608      	mov	r0, r1
 800fd26:	602b      	str	r3, [r5, #0]
 800fd28:	f004 ff30 	bl	8014b8c <_close>
 800fd2c:	1c43      	adds	r3, r0, #1
 800fd2e:	d102      	bne.n	800fd36 <_close_r+0x1a>
 800fd30:	682b      	ldr	r3, [r5, #0]
 800fd32:	b103      	cbz	r3, 800fd36 <_close_r+0x1a>
 800fd34:	6023      	str	r3, [r4, #0]
 800fd36:	bd38      	pop	{r3, r4, r5, pc}
 800fd38:	20003c20 	.word	0x20003c20

0800fd3c <div>:
 800fd3c:	2900      	cmp	r1, #0
 800fd3e:	b510      	push	{r4, lr}
 800fd40:	fb91 f4f2 	sdiv	r4, r1, r2
 800fd44:	fb02 1314 	mls	r3, r2, r4, r1
 800fd48:	db06      	blt.n	800fd58 <div+0x1c>
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	da01      	bge.n	800fd52 <div+0x16>
 800fd4e:	3401      	adds	r4, #1
 800fd50:	1a9b      	subs	r3, r3, r2
 800fd52:	e9c0 4300 	strd	r4, r3, [r0]
 800fd56:	bd10      	pop	{r4, pc}
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	bfc4      	itt	gt
 800fd5c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800fd60:	189b      	addgt	r3, r3, r2
 800fd62:	e7f6      	b.n	800fd52 <div+0x16>

0800fd64 <quorem>:
 800fd64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd68:	6903      	ldr	r3, [r0, #16]
 800fd6a:	690c      	ldr	r4, [r1, #16]
 800fd6c:	42a3      	cmp	r3, r4
 800fd6e:	4607      	mov	r7, r0
 800fd70:	f2c0 8081 	blt.w	800fe76 <quorem+0x112>
 800fd74:	3c01      	subs	r4, #1
 800fd76:	f101 0814 	add.w	r8, r1, #20
 800fd7a:	f100 0514 	add.w	r5, r0, #20
 800fd7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd82:	9301      	str	r3, [sp, #4]
 800fd84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd98:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd9c:	d331      	bcc.n	800fe02 <quorem+0x9e>
 800fd9e:	f04f 0e00 	mov.w	lr, #0
 800fda2:	4640      	mov	r0, r8
 800fda4:	46ac      	mov	ip, r5
 800fda6:	46f2      	mov	sl, lr
 800fda8:	f850 2b04 	ldr.w	r2, [r0], #4
 800fdac:	b293      	uxth	r3, r2
 800fdae:	fb06 e303 	mla	r3, r6, r3, lr
 800fdb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	ebaa 0303 	sub.w	r3, sl, r3
 800fdbc:	f8dc a000 	ldr.w	sl, [ip]
 800fdc0:	0c12      	lsrs	r2, r2, #16
 800fdc2:	fa13 f38a 	uxtah	r3, r3, sl
 800fdc6:	fb06 e202 	mla	r2, r6, r2, lr
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	9b00      	ldr	r3, [sp, #0]
 800fdce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fdd2:	b292      	uxth	r2, r2
 800fdd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fdd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fddc:	f8bd 3000 	ldrh.w	r3, [sp]
 800fde0:	4581      	cmp	r9, r0
 800fde2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fde6:	f84c 3b04 	str.w	r3, [ip], #4
 800fdea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fdee:	d2db      	bcs.n	800fda8 <quorem+0x44>
 800fdf0:	f855 300b 	ldr.w	r3, [r5, fp]
 800fdf4:	b92b      	cbnz	r3, 800fe02 <quorem+0x9e>
 800fdf6:	9b01      	ldr	r3, [sp, #4]
 800fdf8:	3b04      	subs	r3, #4
 800fdfa:	429d      	cmp	r5, r3
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	d32e      	bcc.n	800fe5e <quorem+0xfa>
 800fe00:	613c      	str	r4, [r7, #16]
 800fe02:	4638      	mov	r0, r7
 800fe04:	f001 fb5e 	bl	80114c4 <__mcmp>
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	db24      	blt.n	800fe56 <quorem+0xf2>
 800fe0c:	3601      	adds	r6, #1
 800fe0e:	4628      	mov	r0, r5
 800fe10:	f04f 0c00 	mov.w	ip, #0
 800fe14:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe18:	f8d0 e000 	ldr.w	lr, [r0]
 800fe1c:	b293      	uxth	r3, r2
 800fe1e:	ebac 0303 	sub.w	r3, ip, r3
 800fe22:	0c12      	lsrs	r2, r2, #16
 800fe24:	fa13 f38e 	uxtah	r3, r3, lr
 800fe28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fe2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe36:	45c1      	cmp	r9, r8
 800fe38:	f840 3b04 	str.w	r3, [r0], #4
 800fe3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fe40:	d2e8      	bcs.n	800fe14 <quorem+0xb0>
 800fe42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe4a:	b922      	cbnz	r2, 800fe56 <quorem+0xf2>
 800fe4c:	3b04      	subs	r3, #4
 800fe4e:	429d      	cmp	r5, r3
 800fe50:	461a      	mov	r2, r3
 800fe52:	d30a      	bcc.n	800fe6a <quorem+0x106>
 800fe54:	613c      	str	r4, [r7, #16]
 800fe56:	4630      	mov	r0, r6
 800fe58:	b003      	add	sp, #12
 800fe5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe5e:	6812      	ldr	r2, [r2, #0]
 800fe60:	3b04      	subs	r3, #4
 800fe62:	2a00      	cmp	r2, #0
 800fe64:	d1cc      	bne.n	800fe00 <quorem+0x9c>
 800fe66:	3c01      	subs	r4, #1
 800fe68:	e7c7      	b.n	800fdfa <quorem+0x96>
 800fe6a:	6812      	ldr	r2, [r2, #0]
 800fe6c:	3b04      	subs	r3, #4
 800fe6e:	2a00      	cmp	r2, #0
 800fe70:	d1f0      	bne.n	800fe54 <quorem+0xf0>
 800fe72:	3c01      	subs	r4, #1
 800fe74:	e7eb      	b.n	800fe4e <quorem+0xea>
 800fe76:	2000      	movs	r0, #0
 800fe78:	e7ee      	b.n	800fe58 <quorem+0xf4>
 800fe7a:	0000      	movs	r0, r0
 800fe7c:	0000      	movs	r0, r0
	...

0800fe80 <_dtoa_r>:
 800fe80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe84:	ed2d 8b04 	vpush	{d8-d9}
 800fe88:	ec57 6b10 	vmov	r6, r7, d0
 800fe8c:	b093      	sub	sp, #76	; 0x4c
 800fe8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe94:	9106      	str	r1, [sp, #24]
 800fe96:	ee10 aa10 	vmov	sl, s0
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe9e:	930c      	str	r3, [sp, #48]	; 0x30
 800fea0:	46bb      	mov	fp, r7
 800fea2:	b975      	cbnz	r5, 800fec2 <_dtoa_r+0x42>
 800fea4:	2010      	movs	r0, #16
 800fea6:	f7fd fb53 	bl	800d550 <malloc>
 800feaa:	4602      	mov	r2, r0
 800feac:	6260      	str	r0, [r4, #36]	; 0x24
 800feae:	b920      	cbnz	r0, 800feba <_dtoa_r+0x3a>
 800feb0:	4ba7      	ldr	r3, [pc, #668]	; (8010150 <_dtoa_r+0x2d0>)
 800feb2:	21ea      	movs	r1, #234	; 0xea
 800feb4:	48a7      	ldr	r0, [pc, #668]	; (8010154 <_dtoa_r+0x2d4>)
 800feb6:	f7fd faf3 	bl	800d4a0 <__assert_func>
 800feba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800febe:	6005      	str	r5, [r0, #0]
 800fec0:	60c5      	str	r5, [r0, #12]
 800fec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fec4:	6819      	ldr	r1, [r3, #0]
 800fec6:	b151      	cbz	r1, 800fede <_dtoa_r+0x5e>
 800fec8:	685a      	ldr	r2, [r3, #4]
 800feca:	604a      	str	r2, [r1, #4]
 800fecc:	2301      	movs	r3, #1
 800fece:	4093      	lsls	r3, r2
 800fed0:	608b      	str	r3, [r1, #8]
 800fed2:	4620      	mov	r0, r4
 800fed4:	f001 f8b4 	bl	8011040 <_Bfree>
 800fed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800feda:	2200      	movs	r2, #0
 800fedc:	601a      	str	r2, [r3, #0]
 800fede:	1e3b      	subs	r3, r7, #0
 800fee0:	bfaa      	itet	ge
 800fee2:	2300      	movge	r3, #0
 800fee4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fee8:	f8c8 3000 	strge.w	r3, [r8]
 800feec:	4b9a      	ldr	r3, [pc, #616]	; (8010158 <_dtoa_r+0x2d8>)
 800feee:	bfbc      	itt	lt
 800fef0:	2201      	movlt	r2, #1
 800fef2:	f8c8 2000 	strlt.w	r2, [r8]
 800fef6:	ea33 030b 	bics.w	r3, r3, fp
 800fefa:	d11b      	bne.n	800ff34 <_dtoa_r+0xb4>
 800fefc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fefe:	f242 730f 	movw	r3, #9999	; 0x270f
 800ff02:	6013      	str	r3, [r2, #0]
 800ff04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff08:	4333      	orrs	r3, r6
 800ff0a:	f000 8592 	beq.w	8010a32 <_dtoa_r+0xbb2>
 800ff0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff10:	b963      	cbnz	r3, 800ff2c <_dtoa_r+0xac>
 800ff12:	4b92      	ldr	r3, [pc, #584]	; (801015c <_dtoa_r+0x2dc>)
 800ff14:	e022      	b.n	800ff5c <_dtoa_r+0xdc>
 800ff16:	4b92      	ldr	r3, [pc, #584]	; (8010160 <_dtoa_r+0x2e0>)
 800ff18:	9301      	str	r3, [sp, #4]
 800ff1a:	3308      	adds	r3, #8
 800ff1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff1e:	6013      	str	r3, [r2, #0]
 800ff20:	9801      	ldr	r0, [sp, #4]
 800ff22:	b013      	add	sp, #76	; 0x4c
 800ff24:	ecbd 8b04 	vpop	{d8-d9}
 800ff28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff2c:	4b8b      	ldr	r3, [pc, #556]	; (801015c <_dtoa_r+0x2dc>)
 800ff2e:	9301      	str	r3, [sp, #4]
 800ff30:	3303      	adds	r3, #3
 800ff32:	e7f3      	b.n	800ff1c <_dtoa_r+0x9c>
 800ff34:	2200      	movs	r2, #0
 800ff36:	2300      	movs	r3, #0
 800ff38:	4650      	mov	r0, sl
 800ff3a:	4659      	mov	r1, fp
 800ff3c:	f7f0 fdde 	bl	8000afc <__aeabi_dcmpeq>
 800ff40:	ec4b ab19 	vmov	d9, sl, fp
 800ff44:	4680      	mov	r8, r0
 800ff46:	b158      	cbz	r0, 800ff60 <_dtoa_r+0xe0>
 800ff48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	6013      	str	r3, [r2, #0]
 800ff4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f000 856b 	beq.w	8010a2c <_dtoa_r+0xbac>
 800ff56:	4883      	ldr	r0, [pc, #524]	; (8010164 <_dtoa_r+0x2e4>)
 800ff58:	6018      	str	r0, [r3, #0]
 800ff5a:	1e43      	subs	r3, r0, #1
 800ff5c:	9301      	str	r3, [sp, #4]
 800ff5e:	e7df      	b.n	800ff20 <_dtoa_r+0xa0>
 800ff60:	ec4b ab10 	vmov	d0, sl, fp
 800ff64:	aa10      	add	r2, sp, #64	; 0x40
 800ff66:	a911      	add	r1, sp, #68	; 0x44
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f001 fb51 	bl	8011610 <__d2b>
 800ff6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ff72:	ee08 0a10 	vmov	s16, r0
 800ff76:	2d00      	cmp	r5, #0
 800ff78:	f000 8084 	beq.w	8010084 <_dtoa_r+0x204>
 800ff7c:	ee19 3a90 	vmov	r3, s19
 800ff80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ff88:	4656      	mov	r6, sl
 800ff8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ff8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ff96:	4b74      	ldr	r3, [pc, #464]	; (8010168 <_dtoa_r+0x2e8>)
 800ff98:	2200      	movs	r2, #0
 800ff9a:	4630      	mov	r0, r6
 800ff9c:	4639      	mov	r1, r7
 800ff9e:	f7f0 f98d 	bl	80002bc <__aeabi_dsub>
 800ffa2:	a365      	add	r3, pc, #404	; (adr r3, 8010138 <_dtoa_r+0x2b8>)
 800ffa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa8:	f7f0 fb40 	bl	800062c <__aeabi_dmul>
 800ffac:	a364      	add	r3, pc, #400	; (adr r3, 8010140 <_dtoa_r+0x2c0>)
 800ffae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb2:	f7f0 f985 	bl	80002c0 <__adddf3>
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	4628      	mov	r0, r5
 800ffba:	460f      	mov	r7, r1
 800ffbc:	f7f0 facc 	bl	8000558 <__aeabi_i2d>
 800ffc0:	a361      	add	r3, pc, #388	; (adr r3, 8010148 <_dtoa_r+0x2c8>)
 800ffc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc6:	f7f0 fb31 	bl	800062c <__aeabi_dmul>
 800ffca:	4602      	mov	r2, r0
 800ffcc:	460b      	mov	r3, r1
 800ffce:	4630      	mov	r0, r6
 800ffd0:	4639      	mov	r1, r7
 800ffd2:	f7f0 f975 	bl	80002c0 <__adddf3>
 800ffd6:	4606      	mov	r6, r0
 800ffd8:	460f      	mov	r7, r1
 800ffda:	f7f0 fdd7 	bl	8000b8c <__aeabi_d2iz>
 800ffde:	2200      	movs	r2, #0
 800ffe0:	9000      	str	r0, [sp, #0]
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	4630      	mov	r0, r6
 800ffe6:	4639      	mov	r1, r7
 800ffe8:	f7f0 fd92 	bl	8000b10 <__aeabi_dcmplt>
 800ffec:	b150      	cbz	r0, 8010004 <_dtoa_r+0x184>
 800ffee:	9800      	ldr	r0, [sp, #0]
 800fff0:	f7f0 fab2 	bl	8000558 <__aeabi_i2d>
 800fff4:	4632      	mov	r2, r6
 800fff6:	463b      	mov	r3, r7
 800fff8:	f7f0 fd80 	bl	8000afc <__aeabi_dcmpeq>
 800fffc:	b910      	cbnz	r0, 8010004 <_dtoa_r+0x184>
 800fffe:	9b00      	ldr	r3, [sp, #0]
 8010000:	3b01      	subs	r3, #1
 8010002:	9300      	str	r3, [sp, #0]
 8010004:	9b00      	ldr	r3, [sp, #0]
 8010006:	2b16      	cmp	r3, #22
 8010008:	d85a      	bhi.n	80100c0 <_dtoa_r+0x240>
 801000a:	9a00      	ldr	r2, [sp, #0]
 801000c:	4b57      	ldr	r3, [pc, #348]	; (801016c <_dtoa_r+0x2ec>)
 801000e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010016:	ec51 0b19 	vmov	r0, r1, d9
 801001a:	f7f0 fd79 	bl	8000b10 <__aeabi_dcmplt>
 801001e:	2800      	cmp	r0, #0
 8010020:	d050      	beq.n	80100c4 <_dtoa_r+0x244>
 8010022:	9b00      	ldr	r3, [sp, #0]
 8010024:	3b01      	subs	r3, #1
 8010026:	9300      	str	r3, [sp, #0]
 8010028:	2300      	movs	r3, #0
 801002a:	930b      	str	r3, [sp, #44]	; 0x2c
 801002c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801002e:	1b5d      	subs	r5, r3, r5
 8010030:	1e6b      	subs	r3, r5, #1
 8010032:	9305      	str	r3, [sp, #20]
 8010034:	bf45      	ittet	mi
 8010036:	f1c5 0301 	rsbmi	r3, r5, #1
 801003a:	9304      	strmi	r3, [sp, #16]
 801003c:	2300      	movpl	r3, #0
 801003e:	2300      	movmi	r3, #0
 8010040:	bf4c      	ite	mi
 8010042:	9305      	strmi	r3, [sp, #20]
 8010044:	9304      	strpl	r3, [sp, #16]
 8010046:	9b00      	ldr	r3, [sp, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	db3d      	blt.n	80100c8 <_dtoa_r+0x248>
 801004c:	9b05      	ldr	r3, [sp, #20]
 801004e:	9a00      	ldr	r2, [sp, #0]
 8010050:	920a      	str	r2, [sp, #40]	; 0x28
 8010052:	4413      	add	r3, r2
 8010054:	9305      	str	r3, [sp, #20]
 8010056:	2300      	movs	r3, #0
 8010058:	9307      	str	r3, [sp, #28]
 801005a:	9b06      	ldr	r3, [sp, #24]
 801005c:	2b09      	cmp	r3, #9
 801005e:	f200 8089 	bhi.w	8010174 <_dtoa_r+0x2f4>
 8010062:	2b05      	cmp	r3, #5
 8010064:	bfc4      	itt	gt
 8010066:	3b04      	subgt	r3, #4
 8010068:	9306      	strgt	r3, [sp, #24]
 801006a:	9b06      	ldr	r3, [sp, #24]
 801006c:	f1a3 0302 	sub.w	r3, r3, #2
 8010070:	bfcc      	ite	gt
 8010072:	2500      	movgt	r5, #0
 8010074:	2501      	movle	r5, #1
 8010076:	2b03      	cmp	r3, #3
 8010078:	f200 8087 	bhi.w	801018a <_dtoa_r+0x30a>
 801007c:	e8df f003 	tbb	[pc, r3]
 8010080:	59383a2d 	.word	0x59383a2d
 8010084:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010088:	441d      	add	r5, r3
 801008a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801008e:	2b20      	cmp	r3, #32
 8010090:	bfc1      	itttt	gt
 8010092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010096:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801009a:	fa0b f303 	lslgt.w	r3, fp, r3
 801009e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80100a2:	bfda      	itte	le
 80100a4:	f1c3 0320 	rsble	r3, r3, #32
 80100a8:	fa06 f003 	lslle.w	r0, r6, r3
 80100ac:	4318      	orrgt	r0, r3
 80100ae:	f7f0 fa43 	bl	8000538 <__aeabi_ui2d>
 80100b2:	2301      	movs	r3, #1
 80100b4:	4606      	mov	r6, r0
 80100b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80100ba:	3d01      	subs	r5, #1
 80100bc:	930e      	str	r3, [sp, #56]	; 0x38
 80100be:	e76a      	b.n	800ff96 <_dtoa_r+0x116>
 80100c0:	2301      	movs	r3, #1
 80100c2:	e7b2      	b.n	801002a <_dtoa_r+0x1aa>
 80100c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80100c6:	e7b1      	b.n	801002c <_dtoa_r+0x1ac>
 80100c8:	9b04      	ldr	r3, [sp, #16]
 80100ca:	9a00      	ldr	r2, [sp, #0]
 80100cc:	1a9b      	subs	r3, r3, r2
 80100ce:	9304      	str	r3, [sp, #16]
 80100d0:	4253      	negs	r3, r2
 80100d2:	9307      	str	r3, [sp, #28]
 80100d4:	2300      	movs	r3, #0
 80100d6:	930a      	str	r3, [sp, #40]	; 0x28
 80100d8:	e7bf      	b.n	801005a <_dtoa_r+0x1da>
 80100da:	2300      	movs	r3, #0
 80100dc:	9308      	str	r3, [sp, #32]
 80100de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	dc55      	bgt.n	8010190 <_dtoa_r+0x310>
 80100e4:	2301      	movs	r3, #1
 80100e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80100ea:	461a      	mov	r2, r3
 80100ec:	9209      	str	r2, [sp, #36]	; 0x24
 80100ee:	e00c      	b.n	801010a <_dtoa_r+0x28a>
 80100f0:	2301      	movs	r3, #1
 80100f2:	e7f3      	b.n	80100dc <_dtoa_r+0x25c>
 80100f4:	2300      	movs	r3, #0
 80100f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100f8:	9308      	str	r3, [sp, #32]
 80100fa:	9b00      	ldr	r3, [sp, #0]
 80100fc:	4413      	add	r3, r2
 80100fe:	9302      	str	r3, [sp, #8]
 8010100:	3301      	adds	r3, #1
 8010102:	2b01      	cmp	r3, #1
 8010104:	9303      	str	r3, [sp, #12]
 8010106:	bfb8      	it	lt
 8010108:	2301      	movlt	r3, #1
 801010a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801010c:	2200      	movs	r2, #0
 801010e:	6042      	str	r2, [r0, #4]
 8010110:	2204      	movs	r2, #4
 8010112:	f102 0614 	add.w	r6, r2, #20
 8010116:	429e      	cmp	r6, r3
 8010118:	6841      	ldr	r1, [r0, #4]
 801011a:	d93d      	bls.n	8010198 <_dtoa_r+0x318>
 801011c:	4620      	mov	r0, r4
 801011e:	f000 ff4f 	bl	8010fc0 <_Balloc>
 8010122:	9001      	str	r0, [sp, #4]
 8010124:	2800      	cmp	r0, #0
 8010126:	d13b      	bne.n	80101a0 <_dtoa_r+0x320>
 8010128:	4b11      	ldr	r3, [pc, #68]	; (8010170 <_dtoa_r+0x2f0>)
 801012a:	4602      	mov	r2, r0
 801012c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010130:	e6c0      	b.n	800feb4 <_dtoa_r+0x34>
 8010132:	2301      	movs	r3, #1
 8010134:	e7df      	b.n	80100f6 <_dtoa_r+0x276>
 8010136:	bf00      	nop
 8010138:	636f4361 	.word	0x636f4361
 801013c:	3fd287a7 	.word	0x3fd287a7
 8010140:	8b60c8b3 	.word	0x8b60c8b3
 8010144:	3fc68a28 	.word	0x3fc68a28
 8010148:	509f79fb 	.word	0x509f79fb
 801014c:	3fd34413 	.word	0x3fd34413
 8010150:	0803c404 	.word	0x0803c404
 8010154:	0803c9da 	.word	0x0803c9da
 8010158:	7ff00000 	.word	0x7ff00000
 801015c:	0803c9d6 	.word	0x0803c9d6
 8010160:	0803c9cd 	.word	0x0803c9cd
 8010164:	0803cc69 	.word	0x0803cc69
 8010168:	3ff80000 	.word	0x3ff80000
 801016c:	0803cb90 	.word	0x0803cb90
 8010170:	0803ca35 	.word	0x0803ca35
 8010174:	2501      	movs	r5, #1
 8010176:	2300      	movs	r3, #0
 8010178:	9306      	str	r3, [sp, #24]
 801017a:	9508      	str	r5, [sp, #32]
 801017c:	f04f 33ff 	mov.w	r3, #4294967295
 8010180:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010184:	2200      	movs	r2, #0
 8010186:	2312      	movs	r3, #18
 8010188:	e7b0      	b.n	80100ec <_dtoa_r+0x26c>
 801018a:	2301      	movs	r3, #1
 801018c:	9308      	str	r3, [sp, #32]
 801018e:	e7f5      	b.n	801017c <_dtoa_r+0x2fc>
 8010190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010192:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010196:	e7b8      	b.n	801010a <_dtoa_r+0x28a>
 8010198:	3101      	adds	r1, #1
 801019a:	6041      	str	r1, [r0, #4]
 801019c:	0052      	lsls	r2, r2, #1
 801019e:	e7b8      	b.n	8010112 <_dtoa_r+0x292>
 80101a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101a2:	9a01      	ldr	r2, [sp, #4]
 80101a4:	601a      	str	r2, [r3, #0]
 80101a6:	9b03      	ldr	r3, [sp, #12]
 80101a8:	2b0e      	cmp	r3, #14
 80101aa:	f200 809d 	bhi.w	80102e8 <_dtoa_r+0x468>
 80101ae:	2d00      	cmp	r5, #0
 80101b0:	f000 809a 	beq.w	80102e8 <_dtoa_r+0x468>
 80101b4:	9b00      	ldr	r3, [sp, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	dd32      	ble.n	8010220 <_dtoa_r+0x3a0>
 80101ba:	4ab7      	ldr	r2, [pc, #732]	; (8010498 <_dtoa_r+0x618>)
 80101bc:	f003 030f 	and.w	r3, r3, #15
 80101c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80101c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101c8:	9b00      	ldr	r3, [sp, #0]
 80101ca:	05d8      	lsls	r0, r3, #23
 80101cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80101d0:	d516      	bpl.n	8010200 <_dtoa_r+0x380>
 80101d2:	4bb2      	ldr	r3, [pc, #712]	; (801049c <_dtoa_r+0x61c>)
 80101d4:	ec51 0b19 	vmov	r0, r1, d9
 80101d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101dc:	f7f0 fb50 	bl	8000880 <__aeabi_ddiv>
 80101e0:	f007 070f 	and.w	r7, r7, #15
 80101e4:	4682      	mov	sl, r0
 80101e6:	468b      	mov	fp, r1
 80101e8:	2503      	movs	r5, #3
 80101ea:	4eac      	ldr	r6, [pc, #688]	; (801049c <_dtoa_r+0x61c>)
 80101ec:	b957      	cbnz	r7, 8010204 <_dtoa_r+0x384>
 80101ee:	4642      	mov	r2, r8
 80101f0:	464b      	mov	r3, r9
 80101f2:	4650      	mov	r0, sl
 80101f4:	4659      	mov	r1, fp
 80101f6:	f7f0 fb43 	bl	8000880 <__aeabi_ddiv>
 80101fa:	4682      	mov	sl, r0
 80101fc:	468b      	mov	fp, r1
 80101fe:	e028      	b.n	8010252 <_dtoa_r+0x3d2>
 8010200:	2502      	movs	r5, #2
 8010202:	e7f2      	b.n	80101ea <_dtoa_r+0x36a>
 8010204:	07f9      	lsls	r1, r7, #31
 8010206:	d508      	bpl.n	801021a <_dtoa_r+0x39a>
 8010208:	4640      	mov	r0, r8
 801020a:	4649      	mov	r1, r9
 801020c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010210:	f7f0 fa0c 	bl	800062c <__aeabi_dmul>
 8010214:	3501      	adds	r5, #1
 8010216:	4680      	mov	r8, r0
 8010218:	4689      	mov	r9, r1
 801021a:	107f      	asrs	r7, r7, #1
 801021c:	3608      	adds	r6, #8
 801021e:	e7e5      	b.n	80101ec <_dtoa_r+0x36c>
 8010220:	f000 809b 	beq.w	801035a <_dtoa_r+0x4da>
 8010224:	9b00      	ldr	r3, [sp, #0]
 8010226:	4f9d      	ldr	r7, [pc, #628]	; (801049c <_dtoa_r+0x61c>)
 8010228:	425e      	negs	r6, r3
 801022a:	4b9b      	ldr	r3, [pc, #620]	; (8010498 <_dtoa_r+0x618>)
 801022c:	f006 020f 	and.w	r2, r6, #15
 8010230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010238:	ec51 0b19 	vmov	r0, r1, d9
 801023c:	f7f0 f9f6 	bl	800062c <__aeabi_dmul>
 8010240:	1136      	asrs	r6, r6, #4
 8010242:	4682      	mov	sl, r0
 8010244:	468b      	mov	fp, r1
 8010246:	2300      	movs	r3, #0
 8010248:	2502      	movs	r5, #2
 801024a:	2e00      	cmp	r6, #0
 801024c:	d17a      	bne.n	8010344 <_dtoa_r+0x4c4>
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1d3      	bne.n	80101fa <_dtoa_r+0x37a>
 8010252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010254:	2b00      	cmp	r3, #0
 8010256:	f000 8082 	beq.w	801035e <_dtoa_r+0x4de>
 801025a:	4b91      	ldr	r3, [pc, #580]	; (80104a0 <_dtoa_r+0x620>)
 801025c:	2200      	movs	r2, #0
 801025e:	4650      	mov	r0, sl
 8010260:	4659      	mov	r1, fp
 8010262:	f7f0 fc55 	bl	8000b10 <__aeabi_dcmplt>
 8010266:	2800      	cmp	r0, #0
 8010268:	d079      	beq.n	801035e <_dtoa_r+0x4de>
 801026a:	9b03      	ldr	r3, [sp, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d076      	beq.n	801035e <_dtoa_r+0x4de>
 8010270:	9b02      	ldr	r3, [sp, #8]
 8010272:	2b00      	cmp	r3, #0
 8010274:	dd36      	ble.n	80102e4 <_dtoa_r+0x464>
 8010276:	9b00      	ldr	r3, [sp, #0]
 8010278:	4650      	mov	r0, sl
 801027a:	4659      	mov	r1, fp
 801027c:	1e5f      	subs	r7, r3, #1
 801027e:	2200      	movs	r2, #0
 8010280:	4b88      	ldr	r3, [pc, #544]	; (80104a4 <_dtoa_r+0x624>)
 8010282:	f7f0 f9d3 	bl	800062c <__aeabi_dmul>
 8010286:	9e02      	ldr	r6, [sp, #8]
 8010288:	4682      	mov	sl, r0
 801028a:	468b      	mov	fp, r1
 801028c:	3501      	adds	r5, #1
 801028e:	4628      	mov	r0, r5
 8010290:	f7f0 f962 	bl	8000558 <__aeabi_i2d>
 8010294:	4652      	mov	r2, sl
 8010296:	465b      	mov	r3, fp
 8010298:	f7f0 f9c8 	bl	800062c <__aeabi_dmul>
 801029c:	4b82      	ldr	r3, [pc, #520]	; (80104a8 <_dtoa_r+0x628>)
 801029e:	2200      	movs	r2, #0
 80102a0:	f7f0 f80e 	bl	80002c0 <__adddf3>
 80102a4:	46d0      	mov	r8, sl
 80102a6:	46d9      	mov	r9, fp
 80102a8:	4682      	mov	sl, r0
 80102aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80102ae:	2e00      	cmp	r6, #0
 80102b0:	d158      	bne.n	8010364 <_dtoa_r+0x4e4>
 80102b2:	4b7e      	ldr	r3, [pc, #504]	; (80104ac <_dtoa_r+0x62c>)
 80102b4:	2200      	movs	r2, #0
 80102b6:	4640      	mov	r0, r8
 80102b8:	4649      	mov	r1, r9
 80102ba:	f7ef ffff 	bl	80002bc <__aeabi_dsub>
 80102be:	4652      	mov	r2, sl
 80102c0:	465b      	mov	r3, fp
 80102c2:	4680      	mov	r8, r0
 80102c4:	4689      	mov	r9, r1
 80102c6:	f7f0 fc41 	bl	8000b4c <__aeabi_dcmpgt>
 80102ca:	2800      	cmp	r0, #0
 80102cc:	f040 8295 	bne.w	80107fa <_dtoa_r+0x97a>
 80102d0:	4652      	mov	r2, sl
 80102d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80102d6:	4640      	mov	r0, r8
 80102d8:	4649      	mov	r1, r9
 80102da:	f7f0 fc19 	bl	8000b10 <__aeabi_dcmplt>
 80102de:	2800      	cmp	r0, #0
 80102e0:	f040 8289 	bne.w	80107f6 <_dtoa_r+0x976>
 80102e4:	ec5b ab19 	vmov	sl, fp, d9
 80102e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	f2c0 8148 	blt.w	8010580 <_dtoa_r+0x700>
 80102f0:	9a00      	ldr	r2, [sp, #0]
 80102f2:	2a0e      	cmp	r2, #14
 80102f4:	f300 8144 	bgt.w	8010580 <_dtoa_r+0x700>
 80102f8:	4b67      	ldr	r3, [pc, #412]	; (8010498 <_dtoa_r+0x618>)
 80102fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010304:	2b00      	cmp	r3, #0
 8010306:	f280 80d5 	bge.w	80104b4 <_dtoa_r+0x634>
 801030a:	9b03      	ldr	r3, [sp, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	f300 80d1 	bgt.w	80104b4 <_dtoa_r+0x634>
 8010312:	f040 826f 	bne.w	80107f4 <_dtoa_r+0x974>
 8010316:	4b65      	ldr	r3, [pc, #404]	; (80104ac <_dtoa_r+0x62c>)
 8010318:	2200      	movs	r2, #0
 801031a:	4640      	mov	r0, r8
 801031c:	4649      	mov	r1, r9
 801031e:	f7f0 f985 	bl	800062c <__aeabi_dmul>
 8010322:	4652      	mov	r2, sl
 8010324:	465b      	mov	r3, fp
 8010326:	f7f0 fc07 	bl	8000b38 <__aeabi_dcmpge>
 801032a:	9e03      	ldr	r6, [sp, #12]
 801032c:	4637      	mov	r7, r6
 801032e:	2800      	cmp	r0, #0
 8010330:	f040 8245 	bne.w	80107be <_dtoa_r+0x93e>
 8010334:	9d01      	ldr	r5, [sp, #4]
 8010336:	2331      	movs	r3, #49	; 0x31
 8010338:	f805 3b01 	strb.w	r3, [r5], #1
 801033c:	9b00      	ldr	r3, [sp, #0]
 801033e:	3301      	adds	r3, #1
 8010340:	9300      	str	r3, [sp, #0]
 8010342:	e240      	b.n	80107c6 <_dtoa_r+0x946>
 8010344:	07f2      	lsls	r2, r6, #31
 8010346:	d505      	bpl.n	8010354 <_dtoa_r+0x4d4>
 8010348:	e9d7 2300 	ldrd	r2, r3, [r7]
 801034c:	f7f0 f96e 	bl	800062c <__aeabi_dmul>
 8010350:	3501      	adds	r5, #1
 8010352:	2301      	movs	r3, #1
 8010354:	1076      	asrs	r6, r6, #1
 8010356:	3708      	adds	r7, #8
 8010358:	e777      	b.n	801024a <_dtoa_r+0x3ca>
 801035a:	2502      	movs	r5, #2
 801035c:	e779      	b.n	8010252 <_dtoa_r+0x3d2>
 801035e:	9f00      	ldr	r7, [sp, #0]
 8010360:	9e03      	ldr	r6, [sp, #12]
 8010362:	e794      	b.n	801028e <_dtoa_r+0x40e>
 8010364:	9901      	ldr	r1, [sp, #4]
 8010366:	4b4c      	ldr	r3, [pc, #304]	; (8010498 <_dtoa_r+0x618>)
 8010368:	4431      	add	r1, r6
 801036a:	910d      	str	r1, [sp, #52]	; 0x34
 801036c:	9908      	ldr	r1, [sp, #32]
 801036e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010372:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010376:	2900      	cmp	r1, #0
 8010378:	d043      	beq.n	8010402 <_dtoa_r+0x582>
 801037a:	494d      	ldr	r1, [pc, #308]	; (80104b0 <_dtoa_r+0x630>)
 801037c:	2000      	movs	r0, #0
 801037e:	f7f0 fa7f 	bl	8000880 <__aeabi_ddiv>
 8010382:	4652      	mov	r2, sl
 8010384:	465b      	mov	r3, fp
 8010386:	f7ef ff99 	bl	80002bc <__aeabi_dsub>
 801038a:	9d01      	ldr	r5, [sp, #4]
 801038c:	4682      	mov	sl, r0
 801038e:	468b      	mov	fp, r1
 8010390:	4649      	mov	r1, r9
 8010392:	4640      	mov	r0, r8
 8010394:	f7f0 fbfa 	bl	8000b8c <__aeabi_d2iz>
 8010398:	4606      	mov	r6, r0
 801039a:	f7f0 f8dd 	bl	8000558 <__aeabi_i2d>
 801039e:	4602      	mov	r2, r0
 80103a0:	460b      	mov	r3, r1
 80103a2:	4640      	mov	r0, r8
 80103a4:	4649      	mov	r1, r9
 80103a6:	f7ef ff89 	bl	80002bc <__aeabi_dsub>
 80103aa:	3630      	adds	r6, #48	; 0x30
 80103ac:	f805 6b01 	strb.w	r6, [r5], #1
 80103b0:	4652      	mov	r2, sl
 80103b2:	465b      	mov	r3, fp
 80103b4:	4680      	mov	r8, r0
 80103b6:	4689      	mov	r9, r1
 80103b8:	f7f0 fbaa 	bl	8000b10 <__aeabi_dcmplt>
 80103bc:	2800      	cmp	r0, #0
 80103be:	d163      	bne.n	8010488 <_dtoa_r+0x608>
 80103c0:	4642      	mov	r2, r8
 80103c2:	464b      	mov	r3, r9
 80103c4:	4936      	ldr	r1, [pc, #216]	; (80104a0 <_dtoa_r+0x620>)
 80103c6:	2000      	movs	r0, #0
 80103c8:	f7ef ff78 	bl	80002bc <__aeabi_dsub>
 80103cc:	4652      	mov	r2, sl
 80103ce:	465b      	mov	r3, fp
 80103d0:	f7f0 fb9e 	bl	8000b10 <__aeabi_dcmplt>
 80103d4:	2800      	cmp	r0, #0
 80103d6:	f040 80b5 	bne.w	8010544 <_dtoa_r+0x6c4>
 80103da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103dc:	429d      	cmp	r5, r3
 80103de:	d081      	beq.n	80102e4 <_dtoa_r+0x464>
 80103e0:	4b30      	ldr	r3, [pc, #192]	; (80104a4 <_dtoa_r+0x624>)
 80103e2:	2200      	movs	r2, #0
 80103e4:	4650      	mov	r0, sl
 80103e6:	4659      	mov	r1, fp
 80103e8:	f7f0 f920 	bl	800062c <__aeabi_dmul>
 80103ec:	4b2d      	ldr	r3, [pc, #180]	; (80104a4 <_dtoa_r+0x624>)
 80103ee:	4682      	mov	sl, r0
 80103f0:	468b      	mov	fp, r1
 80103f2:	4640      	mov	r0, r8
 80103f4:	4649      	mov	r1, r9
 80103f6:	2200      	movs	r2, #0
 80103f8:	f7f0 f918 	bl	800062c <__aeabi_dmul>
 80103fc:	4680      	mov	r8, r0
 80103fe:	4689      	mov	r9, r1
 8010400:	e7c6      	b.n	8010390 <_dtoa_r+0x510>
 8010402:	4650      	mov	r0, sl
 8010404:	4659      	mov	r1, fp
 8010406:	f7f0 f911 	bl	800062c <__aeabi_dmul>
 801040a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801040c:	9d01      	ldr	r5, [sp, #4]
 801040e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010410:	4682      	mov	sl, r0
 8010412:	468b      	mov	fp, r1
 8010414:	4649      	mov	r1, r9
 8010416:	4640      	mov	r0, r8
 8010418:	f7f0 fbb8 	bl	8000b8c <__aeabi_d2iz>
 801041c:	4606      	mov	r6, r0
 801041e:	f7f0 f89b 	bl	8000558 <__aeabi_i2d>
 8010422:	3630      	adds	r6, #48	; 0x30
 8010424:	4602      	mov	r2, r0
 8010426:	460b      	mov	r3, r1
 8010428:	4640      	mov	r0, r8
 801042a:	4649      	mov	r1, r9
 801042c:	f7ef ff46 	bl	80002bc <__aeabi_dsub>
 8010430:	f805 6b01 	strb.w	r6, [r5], #1
 8010434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010436:	429d      	cmp	r5, r3
 8010438:	4680      	mov	r8, r0
 801043a:	4689      	mov	r9, r1
 801043c:	f04f 0200 	mov.w	r2, #0
 8010440:	d124      	bne.n	801048c <_dtoa_r+0x60c>
 8010442:	4b1b      	ldr	r3, [pc, #108]	; (80104b0 <_dtoa_r+0x630>)
 8010444:	4650      	mov	r0, sl
 8010446:	4659      	mov	r1, fp
 8010448:	f7ef ff3a 	bl	80002c0 <__adddf3>
 801044c:	4602      	mov	r2, r0
 801044e:	460b      	mov	r3, r1
 8010450:	4640      	mov	r0, r8
 8010452:	4649      	mov	r1, r9
 8010454:	f7f0 fb7a 	bl	8000b4c <__aeabi_dcmpgt>
 8010458:	2800      	cmp	r0, #0
 801045a:	d173      	bne.n	8010544 <_dtoa_r+0x6c4>
 801045c:	4652      	mov	r2, sl
 801045e:	465b      	mov	r3, fp
 8010460:	4913      	ldr	r1, [pc, #76]	; (80104b0 <_dtoa_r+0x630>)
 8010462:	2000      	movs	r0, #0
 8010464:	f7ef ff2a 	bl	80002bc <__aeabi_dsub>
 8010468:	4602      	mov	r2, r0
 801046a:	460b      	mov	r3, r1
 801046c:	4640      	mov	r0, r8
 801046e:	4649      	mov	r1, r9
 8010470:	f7f0 fb4e 	bl	8000b10 <__aeabi_dcmplt>
 8010474:	2800      	cmp	r0, #0
 8010476:	f43f af35 	beq.w	80102e4 <_dtoa_r+0x464>
 801047a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801047c:	1e6b      	subs	r3, r5, #1
 801047e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010480:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010484:	2b30      	cmp	r3, #48	; 0x30
 8010486:	d0f8      	beq.n	801047a <_dtoa_r+0x5fa>
 8010488:	9700      	str	r7, [sp, #0]
 801048a:	e049      	b.n	8010520 <_dtoa_r+0x6a0>
 801048c:	4b05      	ldr	r3, [pc, #20]	; (80104a4 <_dtoa_r+0x624>)
 801048e:	f7f0 f8cd 	bl	800062c <__aeabi_dmul>
 8010492:	4680      	mov	r8, r0
 8010494:	4689      	mov	r9, r1
 8010496:	e7bd      	b.n	8010414 <_dtoa_r+0x594>
 8010498:	0803cb90 	.word	0x0803cb90
 801049c:	0803cb68 	.word	0x0803cb68
 80104a0:	3ff00000 	.word	0x3ff00000
 80104a4:	40240000 	.word	0x40240000
 80104a8:	401c0000 	.word	0x401c0000
 80104ac:	40140000 	.word	0x40140000
 80104b0:	3fe00000 	.word	0x3fe00000
 80104b4:	9d01      	ldr	r5, [sp, #4]
 80104b6:	4656      	mov	r6, sl
 80104b8:	465f      	mov	r7, fp
 80104ba:	4642      	mov	r2, r8
 80104bc:	464b      	mov	r3, r9
 80104be:	4630      	mov	r0, r6
 80104c0:	4639      	mov	r1, r7
 80104c2:	f7f0 f9dd 	bl	8000880 <__aeabi_ddiv>
 80104c6:	f7f0 fb61 	bl	8000b8c <__aeabi_d2iz>
 80104ca:	4682      	mov	sl, r0
 80104cc:	f7f0 f844 	bl	8000558 <__aeabi_i2d>
 80104d0:	4642      	mov	r2, r8
 80104d2:	464b      	mov	r3, r9
 80104d4:	f7f0 f8aa 	bl	800062c <__aeabi_dmul>
 80104d8:	4602      	mov	r2, r0
 80104da:	460b      	mov	r3, r1
 80104dc:	4630      	mov	r0, r6
 80104de:	4639      	mov	r1, r7
 80104e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80104e4:	f7ef feea 	bl	80002bc <__aeabi_dsub>
 80104e8:	f805 6b01 	strb.w	r6, [r5], #1
 80104ec:	9e01      	ldr	r6, [sp, #4]
 80104ee:	9f03      	ldr	r7, [sp, #12]
 80104f0:	1bae      	subs	r6, r5, r6
 80104f2:	42b7      	cmp	r7, r6
 80104f4:	4602      	mov	r2, r0
 80104f6:	460b      	mov	r3, r1
 80104f8:	d135      	bne.n	8010566 <_dtoa_r+0x6e6>
 80104fa:	f7ef fee1 	bl	80002c0 <__adddf3>
 80104fe:	4642      	mov	r2, r8
 8010500:	464b      	mov	r3, r9
 8010502:	4606      	mov	r6, r0
 8010504:	460f      	mov	r7, r1
 8010506:	f7f0 fb21 	bl	8000b4c <__aeabi_dcmpgt>
 801050a:	b9d0      	cbnz	r0, 8010542 <_dtoa_r+0x6c2>
 801050c:	4642      	mov	r2, r8
 801050e:	464b      	mov	r3, r9
 8010510:	4630      	mov	r0, r6
 8010512:	4639      	mov	r1, r7
 8010514:	f7f0 faf2 	bl	8000afc <__aeabi_dcmpeq>
 8010518:	b110      	cbz	r0, 8010520 <_dtoa_r+0x6a0>
 801051a:	f01a 0f01 	tst.w	sl, #1
 801051e:	d110      	bne.n	8010542 <_dtoa_r+0x6c2>
 8010520:	4620      	mov	r0, r4
 8010522:	ee18 1a10 	vmov	r1, s16
 8010526:	f000 fd8b 	bl	8011040 <_Bfree>
 801052a:	2300      	movs	r3, #0
 801052c:	9800      	ldr	r0, [sp, #0]
 801052e:	702b      	strb	r3, [r5, #0]
 8010530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010532:	3001      	adds	r0, #1
 8010534:	6018      	str	r0, [r3, #0]
 8010536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010538:	2b00      	cmp	r3, #0
 801053a:	f43f acf1 	beq.w	800ff20 <_dtoa_r+0xa0>
 801053e:	601d      	str	r5, [r3, #0]
 8010540:	e4ee      	b.n	800ff20 <_dtoa_r+0xa0>
 8010542:	9f00      	ldr	r7, [sp, #0]
 8010544:	462b      	mov	r3, r5
 8010546:	461d      	mov	r5, r3
 8010548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801054c:	2a39      	cmp	r2, #57	; 0x39
 801054e:	d106      	bne.n	801055e <_dtoa_r+0x6de>
 8010550:	9a01      	ldr	r2, [sp, #4]
 8010552:	429a      	cmp	r2, r3
 8010554:	d1f7      	bne.n	8010546 <_dtoa_r+0x6c6>
 8010556:	9901      	ldr	r1, [sp, #4]
 8010558:	2230      	movs	r2, #48	; 0x30
 801055a:	3701      	adds	r7, #1
 801055c:	700a      	strb	r2, [r1, #0]
 801055e:	781a      	ldrb	r2, [r3, #0]
 8010560:	3201      	adds	r2, #1
 8010562:	701a      	strb	r2, [r3, #0]
 8010564:	e790      	b.n	8010488 <_dtoa_r+0x608>
 8010566:	4ba6      	ldr	r3, [pc, #664]	; (8010800 <_dtoa_r+0x980>)
 8010568:	2200      	movs	r2, #0
 801056a:	f7f0 f85f 	bl	800062c <__aeabi_dmul>
 801056e:	2200      	movs	r2, #0
 8010570:	2300      	movs	r3, #0
 8010572:	4606      	mov	r6, r0
 8010574:	460f      	mov	r7, r1
 8010576:	f7f0 fac1 	bl	8000afc <__aeabi_dcmpeq>
 801057a:	2800      	cmp	r0, #0
 801057c:	d09d      	beq.n	80104ba <_dtoa_r+0x63a>
 801057e:	e7cf      	b.n	8010520 <_dtoa_r+0x6a0>
 8010580:	9a08      	ldr	r2, [sp, #32]
 8010582:	2a00      	cmp	r2, #0
 8010584:	f000 80d7 	beq.w	8010736 <_dtoa_r+0x8b6>
 8010588:	9a06      	ldr	r2, [sp, #24]
 801058a:	2a01      	cmp	r2, #1
 801058c:	f300 80ba 	bgt.w	8010704 <_dtoa_r+0x884>
 8010590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010592:	2a00      	cmp	r2, #0
 8010594:	f000 80b2 	beq.w	80106fc <_dtoa_r+0x87c>
 8010598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801059c:	9e07      	ldr	r6, [sp, #28]
 801059e:	9d04      	ldr	r5, [sp, #16]
 80105a0:	9a04      	ldr	r2, [sp, #16]
 80105a2:	441a      	add	r2, r3
 80105a4:	9204      	str	r2, [sp, #16]
 80105a6:	9a05      	ldr	r2, [sp, #20]
 80105a8:	2101      	movs	r1, #1
 80105aa:	441a      	add	r2, r3
 80105ac:	4620      	mov	r0, r4
 80105ae:	9205      	str	r2, [sp, #20]
 80105b0:	f000 fdfe 	bl	80111b0 <__i2b>
 80105b4:	4607      	mov	r7, r0
 80105b6:	2d00      	cmp	r5, #0
 80105b8:	dd0c      	ble.n	80105d4 <_dtoa_r+0x754>
 80105ba:	9b05      	ldr	r3, [sp, #20]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	dd09      	ble.n	80105d4 <_dtoa_r+0x754>
 80105c0:	42ab      	cmp	r3, r5
 80105c2:	9a04      	ldr	r2, [sp, #16]
 80105c4:	bfa8      	it	ge
 80105c6:	462b      	movge	r3, r5
 80105c8:	1ad2      	subs	r2, r2, r3
 80105ca:	9204      	str	r2, [sp, #16]
 80105cc:	9a05      	ldr	r2, [sp, #20]
 80105ce:	1aed      	subs	r5, r5, r3
 80105d0:	1ad3      	subs	r3, r2, r3
 80105d2:	9305      	str	r3, [sp, #20]
 80105d4:	9b07      	ldr	r3, [sp, #28]
 80105d6:	b31b      	cbz	r3, 8010620 <_dtoa_r+0x7a0>
 80105d8:	9b08      	ldr	r3, [sp, #32]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f000 80af 	beq.w	801073e <_dtoa_r+0x8be>
 80105e0:	2e00      	cmp	r6, #0
 80105e2:	dd13      	ble.n	801060c <_dtoa_r+0x78c>
 80105e4:	4639      	mov	r1, r7
 80105e6:	4632      	mov	r2, r6
 80105e8:	4620      	mov	r0, r4
 80105ea:	f000 fea1 	bl	8011330 <__pow5mult>
 80105ee:	ee18 2a10 	vmov	r2, s16
 80105f2:	4601      	mov	r1, r0
 80105f4:	4607      	mov	r7, r0
 80105f6:	4620      	mov	r0, r4
 80105f8:	f000 fdf0 	bl	80111dc <__multiply>
 80105fc:	ee18 1a10 	vmov	r1, s16
 8010600:	4680      	mov	r8, r0
 8010602:	4620      	mov	r0, r4
 8010604:	f000 fd1c 	bl	8011040 <_Bfree>
 8010608:	ee08 8a10 	vmov	s16, r8
 801060c:	9b07      	ldr	r3, [sp, #28]
 801060e:	1b9a      	subs	r2, r3, r6
 8010610:	d006      	beq.n	8010620 <_dtoa_r+0x7a0>
 8010612:	ee18 1a10 	vmov	r1, s16
 8010616:	4620      	mov	r0, r4
 8010618:	f000 fe8a 	bl	8011330 <__pow5mult>
 801061c:	ee08 0a10 	vmov	s16, r0
 8010620:	2101      	movs	r1, #1
 8010622:	4620      	mov	r0, r4
 8010624:	f000 fdc4 	bl	80111b0 <__i2b>
 8010628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801062a:	2b00      	cmp	r3, #0
 801062c:	4606      	mov	r6, r0
 801062e:	f340 8088 	ble.w	8010742 <_dtoa_r+0x8c2>
 8010632:	461a      	mov	r2, r3
 8010634:	4601      	mov	r1, r0
 8010636:	4620      	mov	r0, r4
 8010638:	f000 fe7a 	bl	8011330 <__pow5mult>
 801063c:	9b06      	ldr	r3, [sp, #24]
 801063e:	2b01      	cmp	r3, #1
 8010640:	4606      	mov	r6, r0
 8010642:	f340 8081 	ble.w	8010748 <_dtoa_r+0x8c8>
 8010646:	f04f 0800 	mov.w	r8, #0
 801064a:	6933      	ldr	r3, [r6, #16]
 801064c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010650:	6918      	ldr	r0, [r3, #16]
 8010652:	f000 fd5d 	bl	8011110 <__hi0bits>
 8010656:	f1c0 0020 	rsb	r0, r0, #32
 801065a:	9b05      	ldr	r3, [sp, #20]
 801065c:	4418      	add	r0, r3
 801065e:	f010 001f 	ands.w	r0, r0, #31
 8010662:	f000 8092 	beq.w	801078a <_dtoa_r+0x90a>
 8010666:	f1c0 0320 	rsb	r3, r0, #32
 801066a:	2b04      	cmp	r3, #4
 801066c:	f340 808a 	ble.w	8010784 <_dtoa_r+0x904>
 8010670:	f1c0 001c 	rsb	r0, r0, #28
 8010674:	9b04      	ldr	r3, [sp, #16]
 8010676:	4403      	add	r3, r0
 8010678:	9304      	str	r3, [sp, #16]
 801067a:	9b05      	ldr	r3, [sp, #20]
 801067c:	4403      	add	r3, r0
 801067e:	4405      	add	r5, r0
 8010680:	9305      	str	r3, [sp, #20]
 8010682:	9b04      	ldr	r3, [sp, #16]
 8010684:	2b00      	cmp	r3, #0
 8010686:	dd07      	ble.n	8010698 <_dtoa_r+0x818>
 8010688:	ee18 1a10 	vmov	r1, s16
 801068c:	461a      	mov	r2, r3
 801068e:	4620      	mov	r0, r4
 8010690:	f000 fea8 	bl	80113e4 <__lshift>
 8010694:	ee08 0a10 	vmov	s16, r0
 8010698:	9b05      	ldr	r3, [sp, #20]
 801069a:	2b00      	cmp	r3, #0
 801069c:	dd05      	ble.n	80106aa <_dtoa_r+0x82a>
 801069e:	4631      	mov	r1, r6
 80106a0:	461a      	mov	r2, r3
 80106a2:	4620      	mov	r0, r4
 80106a4:	f000 fe9e 	bl	80113e4 <__lshift>
 80106a8:	4606      	mov	r6, r0
 80106aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d06e      	beq.n	801078e <_dtoa_r+0x90e>
 80106b0:	ee18 0a10 	vmov	r0, s16
 80106b4:	4631      	mov	r1, r6
 80106b6:	f000 ff05 	bl	80114c4 <__mcmp>
 80106ba:	2800      	cmp	r0, #0
 80106bc:	da67      	bge.n	801078e <_dtoa_r+0x90e>
 80106be:	9b00      	ldr	r3, [sp, #0]
 80106c0:	3b01      	subs	r3, #1
 80106c2:	ee18 1a10 	vmov	r1, s16
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	220a      	movs	r2, #10
 80106ca:	2300      	movs	r3, #0
 80106cc:	4620      	mov	r0, r4
 80106ce:	f000 fcd9 	bl	8011084 <__multadd>
 80106d2:	9b08      	ldr	r3, [sp, #32]
 80106d4:	ee08 0a10 	vmov	s16, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	f000 81b1 	beq.w	8010a40 <_dtoa_r+0xbc0>
 80106de:	2300      	movs	r3, #0
 80106e0:	4639      	mov	r1, r7
 80106e2:	220a      	movs	r2, #10
 80106e4:	4620      	mov	r0, r4
 80106e6:	f000 fccd 	bl	8011084 <__multadd>
 80106ea:	9b02      	ldr	r3, [sp, #8]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	4607      	mov	r7, r0
 80106f0:	f300 808e 	bgt.w	8010810 <_dtoa_r+0x990>
 80106f4:	9b06      	ldr	r3, [sp, #24]
 80106f6:	2b02      	cmp	r3, #2
 80106f8:	dc51      	bgt.n	801079e <_dtoa_r+0x91e>
 80106fa:	e089      	b.n	8010810 <_dtoa_r+0x990>
 80106fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80106fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010702:	e74b      	b.n	801059c <_dtoa_r+0x71c>
 8010704:	9b03      	ldr	r3, [sp, #12]
 8010706:	1e5e      	subs	r6, r3, #1
 8010708:	9b07      	ldr	r3, [sp, #28]
 801070a:	42b3      	cmp	r3, r6
 801070c:	bfbf      	itttt	lt
 801070e:	9b07      	ldrlt	r3, [sp, #28]
 8010710:	9607      	strlt	r6, [sp, #28]
 8010712:	1af2      	sublt	r2, r6, r3
 8010714:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010716:	bfb6      	itet	lt
 8010718:	189b      	addlt	r3, r3, r2
 801071a:	1b9e      	subge	r6, r3, r6
 801071c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801071e:	9b03      	ldr	r3, [sp, #12]
 8010720:	bfb8      	it	lt
 8010722:	2600      	movlt	r6, #0
 8010724:	2b00      	cmp	r3, #0
 8010726:	bfb7      	itett	lt
 8010728:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801072c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010730:	1a9d      	sublt	r5, r3, r2
 8010732:	2300      	movlt	r3, #0
 8010734:	e734      	b.n	80105a0 <_dtoa_r+0x720>
 8010736:	9e07      	ldr	r6, [sp, #28]
 8010738:	9d04      	ldr	r5, [sp, #16]
 801073a:	9f08      	ldr	r7, [sp, #32]
 801073c:	e73b      	b.n	80105b6 <_dtoa_r+0x736>
 801073e:	9a07      	ldr	r2, [sp, #28]
 8010740:	e767      	b.n	8010612 <_dtoa_r+0x792>
 8010742:	9b06      	ldr	r3, [sp, #24]
 8010744:	2b01      	cmp	r3, #1
 8010746:	dc18      	bgt.n	801077a <_dtoa_r+0x8fa>
 8010748:	f1ba 0f00 	cmp.w	sl, #0
 801074c:	d115      	bne.n	801077a <_dtoa_r+0x8fa>
 801074e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010752:	b993      	cbnz	r3, 801077a <_dtoa_r+0x8fa>
 8010754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010758:	0d1b      	lsrs	r3, r3, #20
 801075a:	051b      	lsls	r3, r3, #20
 801075c:	b183      	cbz	r3, 8010780 <_dtoa_r+0x900>
 801075e:	9b04      	ldr	r3, [sp, #16]
 8010760:	3301      	adds	r3, #1
 8010762:	9304      	str	r3, [sp, #16]
 8010764:	9b05      	ldr	r3, [sp, #20]
 8010766:	3301      	adds	r3, #1
 8010768:	9305      	str	r3, [sp, #20]
 801076a:	f04f 0801 	mov.w	r8, #1
 801076e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010770:	2b00      	cmp	r3, #0
 8010772:	f47f af6a 	bne.w	801064a <_dtoa_r+0x7ca>
 8010776:	2001      	movs	r0, #1
 8010778:	e76f      	b.n	801065a <_dtoa_r+0x7da>
 801077a:	f04f 0800 	mov.w	r8, #0
 801077e:	e7f6      	b.n	801076e <_dtoa_r+0x8ee>
 8010780:	4698      	mov	r8, r3
 8010782:	e7f4      	b.n	801076e <_dtoa_r+0x8ee>
 8010784:	f43f af7d 	beq.w	8010682 <_dtoa_r+0x802>
 8010788:	4618      	mov	r0, r3
 801078a:	301c      	adds	r0, #28
 801078c:	e772      	b.n	8010674 <_dtoa_r+0x7f4>
 801078e:	9b03      	ldr	r3, [sp, #12]
 8010790:	2b00      	cmp	r3, #0
 8010792:	dc37      	bgt.n	8010804 <_dtoa_r+0x984>
 8010794:	9b06      	ldr	r3, [sp, #24]
 8010796:	2b02      	cmp	r3, #2
 8010798:	dd34      	ble.n	8010804 <_dtoa_r+0x984>
 801079a:	9b03      	ldr	r3, [sp, #12]
 801079c:	9302      	str	r3, [sp, #8]
 801079e:	9b02      	ldr	r3, [sp, #8]
 80107a0:	b96b      	cbnz	r3, 80107be <_dtoa_r+0x93e>
 80107a2:	4631      	mov	r1, r6
 80107a4:	2205      	movs	r2, #5
 80107a6:	4620      	mov	r0, r4
 80107a8:	f000 fc6c 	bl	8011084 <__multadd>
 80107ac:	4601      	mov	r1, r0
 80107ae:	4606      	mov	r6, r0
 80107b0:	ee18 0a10 	vmov	r0, s16
 80107b4:	f000 fe86 	bl	80114c4 <__mcmp>
 80107b8:	2800      	cmp	r0, #0
 80107ba:	f73f adbb 	bgt.w	8010334 <_dtoa_r+0x4b4>
 80107be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107c0:	9d01      	ldr	r5, [sp, #4]
 80107c2:	43db      	mvns	r3, r3
 80107c4:	9300      	str	r3, [sp, #0]
 80107c6:	f04f 0800 	mov.w	r8, #0
 80107ca:	4631      	mov	r1, r6
 80107cc:	4620      	mov	r0, r4
 80107ce:	f000 fc37 	bl	8011040 <_Bfree>
 80107d2:	2f00      	cmp	r7, #0
 80107d4:	f43f aea4 	beq.w	8010520 <_dtoa_r+0x6a0>
 80107d8:	f1b8 0f00 	cmp.w	r8, #0
 80107dc:	d005      	beq.n	80107ea <_dtoa_r+0x96a>
 80107de:	45b8      	cmp	r8, r7
 80107e0:	d003      	beq.n	80107ea <_dtoa_r+0x96a>
 80107e2:	4641      	mov	r1, r8
 80107e4:	4620      	mov	r0, r4
 80107e6:	f000 fc2b 	bl	8011040 <_Bfree>
 80107ea:	4639      	mov	r1, r7
 80107ec:	4620      	mov	r0, r4
 80107ee:	f000 fc27 	bl	8011040 <_Bfree>
 80107f2:	e695      	b.n	8010520 <_dtoa_r+0x6a0>
 80107f4:	2600      	movs	r6, #0
 80107f6:	4637      	mov	r7, r6
 80107f8:	e7e1      	b.n	80107be <_dtoa_r+0x93e>
 80107fa:	9700      	str	r7, [sp, #0]
 80107fc:	4637      	mov	r7, r6
 80107fe:	e599      	b.n	8010334 <_dtoa_r+0x4b4>
 8010800:	40240000 	.word	0x40240000
 8010804:	9b08      	ldr	r3, [sp, #32]
 8010806:	2b00      	cmp	r3, #0
 8010808:	f000 80ca 	beq.w	80109a0 <_dtoa_r+0xb20>
 801080c:	9b03      	ldr	r3, [sp, #12]
 801080e:	9302      	str	r3, [sp, #8]
 8010810:	2d00      	cmp	r5, #0
 8010812:	dd05      	ble.n	8010820 <_dtoa_r+0x9a0>
 8010814:	4639      	mov	r1, r7
 8010816:	462a      	mov	r2, r5
 8010818:	4620      	mov	r0, r4
 801081a:	f000 fde3 	bl	80113e4 <__lshift>
 801081e:	4607      	mov	r7, r0
 8010820:	f1b8 0f00 	cmp.w	r8, #0
 8010824:	d05b      	beq.n	80108de <_dtoa_r+0xa5e>
 8010826:	6879      	ldr	r1, [r7, #4]
 8010828:	4620      	mov	r0, r4
 801082a:	f000 fbc9 	bl	8010fc0 <_Balloc>
 801082e:	4605      	mov	r5, r0
 8010830:	b928      	cbnz	r0, 801083e <_dtoa_r+0x9be>
 8010832:	4b87      	ldr	r3, [pc, #540]	; (8010a50 <_dtoa_r+0xbd0>)
 8010834:	4602      	mov	r2, r0
 8010836:	f240 21ea 	movw	r1, #746	; 0x2ea
 801083a:	f7ff bb3b 	b.w	800feb4 <_dtoa_r+0x34>
 801083e:	693a      	ldr	r2, [r7, #16]
 8010840:	3202      	adds	r2, #2
 8010842:	0092      	lsls	r2, r2, #2
 8010844:	f107 010c 	add.w	r1, r7, #12
 8010848:	300c      	adds	r0, #12
 801084a:	f7fc fe91 	bl	800d570 <memcpy>
 801084e:	2201      	movs	r2, #1
 8010850:	4629      	mov	r1, r5
 8010852:	4620      	mov	r0, r4
 8010854:	f000 fdc6 	bl	80113e4 <__lshift>
 8010858:	9b01      	ldr	r3, [sp, #4]
 801085a:	f103 0901 	add.w	r9, r3, #1
 801085e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010862:	4413      	add	r3, r2
 8010864:	9305      	str	r3, [sp, #20]
 8010866:	f00a 0301 	and.w	r3, sl, #1
 801086a:	46b8      	mov	r8, r7
 801086c:	9304      	str	r3, [sp, #16]
 801086e:	4607      	mov	r7, r0
 8010870:	4631      	mov	r1, r6
 8010872:	ee18 0a10 	vmov	r0, s16
 8010876:	f7ff fa75 	bl	800fd64 <quorem>
 801087a:	4641      	mov	r1, r8
 801087c:	9002      	str	r0, [sp, #8]
 801087e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010882:	ee18 0a10 	vmov	r0, s16
 8010886:	f000 fe1d 	bl	80114c4 <__mcmp>
 801088a:	463a      	mov	r2, r7
 801088c:	9003      	str	r0, [sp, #12]
 801088e:	4631      	mov	r1, r6
 8010890:	4620      	mov	r0, r4
 8010892:	f000 fe33 	bl	80114fc <__mdiff>
 8010896:	68c2      	ldr	r2, [r0, #12]
 8010898:	f109 3bff 	add.w	fp, r9, #4294967295
 801089c:	4605      	mov	r5, r0
 801089e:	bb02      	cbnz	r2, 80108e2 <_dtoa_r+0xa62>
 80108a0:	4601      	mov	r1, r0
 80108a2:	ee18 0a10 	vmov	r0, s16
 80108a6:	f000 fe0d 	bl	80114c4 <__mcmp>
 80108aa:	4602      	mov	r2, r0
 80108ac:	4629      	mov	r1, r5
 80108ae:	4620      	mov	r0, r4
 80108b0:	9207      	str	r2, [sp, #28]
 80108b2:	f000 fbc5 	bl	8011040 <_Bfree>
 80108b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80108ba:	ea43 0102 	orr.w	r1, r3, r2
 80108be:	9b04      	ldr	r3, [sp, #16]
 80108c0:	430b      	orrs	r3, r1
 80108c2:	464d      	mov	r5, r9
 80108c4:	d10f      	bne.n	80108e6 <_dtoa_r+0xa66>
 80108c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108ca:	d02a      	beq.n	8010922 <_dtoa_r+0xaa2>
 80108cc:	9b03      	ldr	r3, [sp, #12]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	dd02      	ble.n	80108d8 <_dtoa_r+0xa58>
 80108d2:	9b02      	ldr	r3, [sp, #8]
 80108d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80108d8:	f88b a000 	strb.w	sl, [fp]
 80108dc:	e775      	b.n	80107ca <_dtoa_r+0x94a>
 80108de:	4638      	mov	r0, r7
 80108e0:	e7ba      	b.n	8010858 <_dtoa_r+0x9d8>
 80108e2:	2201      	movs	r2, #1
 80108e4:	e7e2      	b.n	80108ac <_dtoa_r+0xa2c>
 80108e6:	9b03      	ldr	r3, [sp, #12]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	db04      	blt.n	80108f6 <_dtoa_r+0xa76>
 80108ec:	9906      	ldr	r1, [sp, #24]
 80108ee:	430b      	orrs	r3, r1
 80108f0:	9904      	ldr	r1, [sp, #16]
 80108f2:	430b      	orrs	r3, r1
 80108f4:	d122      	bne.n	801093c <_dtoa_r+0xabc>
 80108f6:	2a00      	cmp	r2, #0
 80108f8:	ddee      	ble.n	80108d8 <_dtoa_r+0xa58>
 80108fa:	ee18 1a10 	vmov	r1, s16
 80108fe:	2201      	movs	r2, #1
 8010900:	4620      	mov	r0, r4
 8010902:	f000 fd6f 	bl	80113e4 <__lshift>
 8010906:	4631      	mov	r1, r6
 8010908:	ee08 0a10 	vmov	s16, r0
 801090c:	f000 fdda 	bl	80114c4 <__mcmp>
 8010910:	2800      	cmp	r0, #0
 8010912:	dc03      	bgt.n	801091c <_dtoa_r+0xa9c>
 8010914:	d1e0      	bne.n	80108d8 <_dtoa_r+0xa58>
 8010916:	f01a 0f01 	tst.w	sl, #1
 801091a:	d0dd      	beq.n	80108d8 <_dtoa_r+0xa58>
 801091c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010920:	d1d7      	bne.n	80108d2 <_dtoa_r+0xa52>
 8010922:	2339      	movs	r3, #57	; 0x39
 8010924:	f88b 3000 	strb.w	r3, [fp]
 8010928:	462b      	mov	r3, r5
 801092a:	461d      	mov	r5, r3
 801092c:	3b01      	subs	r3, #1
 801092e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010932:	2a39      	cmp	r2, #57	; 0x39
 8010934:	d071      	beq.n	8010a1a <_dtoa_r+0xb9a>
 8010936:	3201      	adds	r2, #1
 8010938:	701a      	strb	r2, [r3, #0]
 801093a:	e746      	b.n	80107ca <_dtoa_r+0x94a>
 801093c:	2a00      	cmp	r2, #0
 801093e:	dd07      	ble.n	8010950 <_dtoa_r+0xad0>
 8010940:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010944:	d0ed      	beq.n	8010922 <_dtoa_r+0xaa2>
 8010946:	f10a 0301 	add.w	r3, sl, #1
 801094a:	f88b 3000 	strb.w	r3, [fp]
 801094e:	e73c      	b.n	80107ca <_dtoa_r+0x94a>
 8010950:	9b05      	ldr	r3, [sp, #20]
 8010952:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010956:	4599      	cmp	r9, r3
 8010958:	d047      	beq.n	80109ea <_dtoa_r+0xb6a>
 801095a:	ee18 1a10 	vmov	r1, s16
 801095e:	2300      	movs	r3, #0
 8010960:	220a      	movs	r2, #10
 8010962:	4620      	mov	r0, r4
 8010964:	f000 fb8e 	bl	8011084 <__multadd>
 8010968:	45b8      	cmp	r8, r7
 801096a:	ee08 0a10 	vmov	s16, r0
 801096e:	f04f 0300 	mov.w	r3, #0
 8010972:	f04f 020a 	mov.w	r2, #10
 8010976:	4641      	mov	r1, r8
 8010978:	4620      	mov	r0, r4
 801097a:	d106      	bne.n	801098a <_dtoa_r+0xb0a>
 801097c:	f000 fb82 	bl	8011084 <__multadd>
 8010980:	4680      	mov	r8, r0
 8010982:	4607      	mov	r7, r0
 8010984:	f109 0901 	add.w	r9, r9, #1
 8010988:	e772      	b.n	8010870 <_dtoa_r+0x9f0>
 801098a:	f000 fb7b 	bl	8011084 <__multadd>
 801098e:	4639      	mov	r1, r7
 8010990:	4680      	mov	r8, r0
 8010992:	2300      	movs	r3, #0
 8010994:	220a      	movs	r2, #10
 8010996:	4620      	mov	r0, r4
 8010998:	f000 fb74 	bl	8011084 <__multadd>
 801099c:	4607      	mov	r7, r0
 801099e:	e7f1      	b.n	8010984 <_dtoa_r+0xb04>
 80109a0:	9b03      	ldr	r3, [sp, #12]
 80109a2:	9302      	str	r3, [sp, #8]
 80109a4:	9d01      	ldr	r5, [sp, #4]
 80109a6:	ee18 0a10 	vmov	r0, s16
 80109aa:	4631      	mov	r1, r6
 80109ac:	f7ff f9da 	bl	800fd64 <quorem>
 80109b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80109b4:	9b01      	ldr	r3, [sp, #4]
 80109b6:	f805 ab01 	strb.w	sl, [r5], #1
 80109ba:	1aea      	subs	r2, r5, r3
 80109bc:	9b02      	ldr	r3, [sp, #8]
 80109be:	4293      	cmp	r3, r2
 80109c0:	dd09      	ble.n	80109d6 <_dtoa_r+0xb56>
 80109c2:	ee18 1a10 	vmov	r1, s16
 80109c6:	2300      	movs	r3, #0
 80109c8:	220a      	movs	r2, #10
 80109ca:	4620      	mov	r0, r4
 80109cc:	f000 fb5a 	bl	8011084 <__multadd>
 80109d0:	ee08 0a10 	vmov	s16, r0
 80109d4:	e7e7      	b.n	80109a6 <_dtoa_r+0xb26>
 80109d6:	9b02      	ldr	r3, [sp, #8]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	bfc8      	it	gt
 80109dc:	461d      	movgt	r5, r3
 80109de:	9b01      	ldr	r3, [sp, #4]
 80109e0:	bfd8      	it	le
 80109e2:	2501      	movle	r5, #1
 80109e4:	441d      	add	r5, r3
 80109e6:	f04f 0800 	mov.w	r8, #0
 80109ea:	ee18 1a10 	vmov	r1, s16
 80109ee:	2201      	movs	r2, #1
 80109f0:	4620      	mov	r0, r4
 80109f2:	f000 fcf7 	bl	80113e4 <__lshift>
 80109f6:	4631      	mov	r1, r6
 80109f8:	ee08 0a10 	vmov	s16, r0
 80109fc:	f000 fd62 	bl	80114c4 <__mcmp>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	dc91      	bgt.n	8010928 <_dtoa_r+0xaa8>
 8010a04:	d102      	bne.n	8010a0c <_dtoa_r+0xb8c>
 8010a06:	f01a 0f01 	tst.w	sl, #1
 8010a0a:	d18d      	bne.n	8010928 <_dtoa_r+0xaa8>
 8010a0c:	462b      	mov	r3, r5
 8010a0e:	461d      	mov	r5, r3
 8010a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a14:	2a30      	cmp	r2, #48	; 0x30
 8010a16:	d0fa      	beq.n	8010a0e <_dtoa_r+0xb8e>
 8010a18:	e6d7      	b.n	80107ca <_dtoa_r+0x94a>
 8010a1a:	9a01      	ldr	r2, [sp, #4]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d184      	bne.n	801092a <_dtoa_r+0xaaa>
 8010a20:	9b00      	ldr	r3, [sp, #0]
 8010a22:	3301      	adds	r3, #1
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	2331      	movs	r3, #49	; 0x31
 8010a28:	7013      	strb	r3, [r2, #0]
 8010a2a:	e6ce      	b.n	80107ca <_dtoa_r+0x94a>
 8010a2c:	4b09      	ldr	r3, [pc, #36]	; (8010a54 <_dtoa_r+0xbd4>)
 8010a2e:	f7ff ba95 	b.w	800ff5c <_dtoa_r+0xdc>
 8010a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f47f aa6e 	bne.w	800ff16 <_dtoa_r+0x96>
 8010a3a:	4b07      	ldr	r3, [pc, #28]	; (8010a58 <_dtoa_r+0xbd8>)
 8010a3c:	f7ff ba8e 	b.w	800ff5c <_dtoa_r+0xdc>
 8010a40:	9b02      	ldr	r3, [sp, #8]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	dcae      	bgt.n	80109a4 <_dtoa_r+0xb24>
 8010a46:	9b06      	ldr	r3, [sp, #24]
 8010a48:	2b02      	cmp	r3, #2
 8010a4a:	f73f aea8 	bgt.w	801079e <_dtoa_r+0x91e>
 8010a4e:	e7a9      	b.n	80109a4 <_dtoa_r+0xb24>
 8010a50:	0803ca35 	.word	0x0803ca35
 8010a54:	0803cc68 	.word	0x0803cc68
 8010a58:	0803c9cd 	.word	0x0803c9cd

08010a5c <__errno>:
 8010a5c:	4b01      	ldr	r3, [pc, #4]	; (8010a64 <__errno+0x8>)
 8010a5e:	6818      	ldr	r0, [r3, #0]
 8010a60:	4770      	bx	lr
 8010a62:	bf00      	nop
 8010a64:	200002c0 	.word	0x200002c0

08010a68 <__sflush_r>:
 8010a68:	898a      	ldrh	r2, [r1, #12]
 8010a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a6e:	4605      	mov	r5, r0
 8010a70:	0710      	lsls	r0, r2, #28
 8010a72:	460c      	mov	r4, r1
 8010a74:	d458      	bmi.n	8010b28 <__sflush_r+0xc0>
 8010a76:	684b      	ldr	r3, [r1, #4]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	dc05      	bgt.n	8010a88 <__sflush_r+0x20>
 8010a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	dc02      	bgt.n	8010a88 <__sflush_r+0x20>
 8010a82:	2000      	movs	r0, #0
 8010a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a8a:	2e00      	cmp	r6, #0
 8010a8c:	d0f9      	beq.n	8010a82 <__sflush_r+0x1a>
 8010a8e:	2300      	movs	r3, #0
 8010a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010a94:	682f      	ldr	r7, [r5, #0]
 8010a96:	602b      	str	r3, [r5, #0]
 8010a98:	d032      	beq.n	8010b00 <__sflush_r+0x98>
 8010a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a9c:	89a3      	ldrh	r3, [r4, #12]
 8010a9e:	075a      	lsls	r2, r3, #29
 8010aa0:	d505      	bpl.n	8010aae <__sflush_r+0x46>
 8010aa2:	6863      	ldr	r3, [r4, #4]
 8010aa4:	1ac0      	subs	r0, r0, r3
 8010aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010aa8:	b10b      	cbz	r3, 8010aae <__sflush_r+0x46>
 8010aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010aac:	1ac0      	subs	r0, r0, r3
 8010aae:	2300      	movs	r3, #0
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ab4:	6a21      	ldr	r1, [r4, #32]
 8010ab6:	4628      	mov	r0, r5
 8010ab8:	47b0      	blx	r6
 8010aba:	1c43      	adds	r3, r0, #1
 8010abc:	89a3      	ldrh	r3, [r4, #12]
 8010abe:	d106      	bne.n	8010ace <__sflush_r+0x66>
 8010ac0:	6829      	ldr	r1, [r5, #0]
 8010ac2:	291d      	cmp	r1, #29
 8010ac4:	d82c      	bhi.n	8010b20 <__sflush_r+0xb8>
 8010ac6:	4a2a      	ldr	r2, [pc, #168]	; (8010b70 <__sflush_r+0x108>)
 8010ac8:	40ca      	lsrs	r2, r1
 8010aca:	07d6      	lsls	r6, r2, #31
 8010acc:	d528      	bpl.n	8010b20 <__sflush_r+0xb8>
 8010ace:	2200      	movs	r2, #0
 8010ad0:	6062      	str	r2, [r4, #4]
 8010ad2:	04d9      	lsls	r1, r3, #19
 8010ad4:	6922      	ldr	r2, [r4, #16]
 8010ad6:	6022      	str	r2, [r4, #0]
 8010ad8:	d504      	bpl.n	8010ae4 <__sflush_r+0x7c>
 8010ada:	1c42      	adds	r2, r0, #1
 8010adc:	d101      	bne.n	8010ae2 <__sflush_r+0x7a>
 8010ade:	682b      	ldr	r3, [r5, #0]
 8010ae0:	b903      	cbnz	r3, 8010ae4 <__sflush_r+0x7c>
 8010ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8010ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ae6:	602f      	str	r7, [r5, #0]
 8010ae8:	2900      	cmp	r1, #0
 8010aea:	d0ca      	beq.n	8010a82 <__sflush_r+0x1a>
 8010aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010af0:	4299      	cmp	r1, r3
 8010af2:	d002      	beq.n	8010afa <__sflush_r+0x92>
 8010af4:	4628      	mov	r0, r5
 8010af6:	f7fc ffc3 	bl	800da80 <_free_r>
 8010afa:	2000      	movs	r0, #0
 8010afc:	6360      	str	r0, [r4, #52]	; 0x34
 8010afe:	e7c1      	b.n	8010a84 <__sflush_r+0x1c>
 8010b00:	6a21      	ldr	r1, [r4, #32]
 8010b02:	2301      	movs	r3, #1
 8010b04:	4628      	mov	r0, r5
 8010b06:	47b0      	blx	r6
 8010b08:	1c41      	adds	r1, r0, #1
 8010b0a:	d1c7      	bne.n	8010a9c <__sflush_r+0x34>
 8010b0c:	682b      	ldr	r3, [r5, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d0c4      	beq.n	8010a9c <__sflush_r+0x34>
 8010b12:	2b1d      	cmp	r3, #29
 8010b14:	d001      	beq.n	8010b1a <__sflush_r+0xb2>
 8010b16:	2b16      	cmp	r3, #22
 8010b18:	d101      	bne.n	8010b1e <__sflush_r+0xb6>
 8010b1a:	602f      	str	r7, [r5, #0]
 8010b1c:	e7b1      	b.n	8010a82 <__sflush_r+0x1a>
 8010b1e:	89a3      	ldrh	r3, [r4, #12]
 8010b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b24:	81a3      	strh	r3, [r4, #12]
 8010b26:	e7ad      	b.n	8010a84 <__sflush_r+0x1c>
 8010b28:	690f      	ldr	r7, [r1, #16]
 8010b2a:	2f00      	cmp	r7, #0
 8010b2c:	d0a9      	beq.n	8010a82 <__sflush_r+0x1a>
 8010b2e:	0793      	lsls	r3, r2, #30
 8010b30:	680e      	ldr	r6, [r1, #0]
 8010b32:	bf08      	it	eq
 8010b34:	694b      	ldreq	r3, [r1, #20]
 8010b36:	600f      	str	r7, [r1, #0]
 8010b38:	bf18      	it	ne
 8010b3a:	2300      	movne	r3, #0
 8010b3c:	eba6 0807 	sub.w	r8, r6, r7
 8010b40:	608b      	str	r3, [r1, #8]
 8010b42:	f1b8 0f00 	cmp.w	r8, #0
 8010b46:	dd9c      	ble.n	8010a82 <__sflush_r+0x1a>
 8010b48:	6a21      	ldr	r1, [r4, #32]
 8010b4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b4c:	4643      	mov	r3, r8
 8010b4e:	463a      	mov	r2, r7
 8010b50:	4628      	mov	r0, r5
 8010b52:	47b0      	blx	r6
 8010b54:	2800      	cmp	r0, #0
 8010b56:	dc06      	bgt.n	8010b66 <__sflush_r+0xfe>
 8010b58:	89a3      	ldrh	r3, [r4, #12]
 8010b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b5e:	81a3      	strh	r3, [r4, #12]
 8010b60:	f04f 30ff 	mov.w	r0, #4294967295
 8010b64:	e78e      	b.n	8010a84 <__sflush_r+0x1c>
 8010b66:	4407      	add	r7, r0
 8010b68:	eba8 0800 	sub.w	r8, r8, r0
 8010b6c:	e7e9      	b.n	8010b42 <__sflush_r+0xda>
 8010b6e:	bf00      	nop
 8010b70:	20400001 	.word	0x20400001

08010b74 <_fflush_r>:
 8010b74:	b538      	push	{r3, r4, r5, lr}
 8010b76:	690b      	ldr	r3, [r1, #16]
 8010b78:	4605      	mov	r5, r0
 8010b7a:	460c      	mov	r4, r1
 8010b7c:	b913      	cbnz	r3, 8010b84 <_fflush_r+0x10>
 8010b7e:	2500      	movs	r5, #0
 8010b80:	4628      	mov	r0, r5
 8010b82:	bd38      	pop	{r3, r4, r5, pc}
 8010b84:	b118      	cbz	r0, 8010b8e <_fflush_r+0x1a>
 8010b86:	6983      	ldr	r3, [r0, #24]
 8010b88:	b90b      	cbnz	r3, 8010b8e <_fflush_r+0x1a>
 8010b8a:	f000 f887 	bl	8010c9c <__sinit>
 8010b8e:	4b14      	ldr	r3, [pc, #80]	; (8010be0 <_fflush_r+0x6c>)
 8010b90:	429c      	cmp	r4, r3
 8010b92:	d11b      	bne.n	8010bcc <_fflush_r+0x58>
 8010b94:	686c      	ldr	r4, [r5, #4]
 8010b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d0ef      	beq.n	8010b7e <_fflush_r+0xa>
 8010b9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ba0:	07d0      	lsls	r0, r2, #31
 8010ba2:	d404      	bmi.n	8010bae <_fflush_r+0x3a>
 8010ba4:	0599      	lsls	r1, r3, #22
 8010ba6:	d402      	bmi.n	8010bae <_fflush_r+0x3a>
 8010ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010baa:	f000 f967 	bl	8010e7c <__retarget_lock_acquire_recursive>
 8010bae:	4628      	mov	r0, r5
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	f7ff ff59 	bl	8010a68 <__sflush_r>
 8010bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bb8:	07da      	lsls	r2, r3, #31
 8010bba:	4605      	mov	r5, r0
 8010bbc:	d4e0      	bmi.n	8010b80 <_fflush_r+0xc>
 8010bbe:	89a3      	ldrh	r3, [r4, #12]
 8010bc0:	059b      	lsls	r3, r3, #22
 8010bc2:	d4dd      	bmi.n	8010b80 <_fflush_r+0xc>
 8010bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bc6:	f000 f95b 	bl	8010e80 <__retarget_lock_release_recursive>
 8010bca:	e7d9      	b.n	8010b80 <_fflush_r+0xc>
 8010bcc:	4b05      	ldr	r3, [pc, #20]	; (8010be4 <_fflush_r+0x70>)
 8010bce:	429c      	cmp	r4, r3
 8010bd0:	d101      	bne.n	8010bd6 <_fflush_r+0x62>
 8010bd2:	68ac      	ldr	r4, [r5, #8]
 8010bd4:	e7df      	b.n	8010b96 <_fflush_r+0x22>
 8010bd6:	4b04      	ldr	r3, [pc, #16]	; (8010be8 <_fflush_r+0x74>)
 8010bd8:	429c      	cmp	r4, r3
 8010bda:	bf08      	it	eq
 8010bdc:	68ec      	ldreq	r4, [r5, #12]
 8010bde:	e7da      	b.n	8010b96 <_fflush_r+0x22>
 8010be0:	0803ca68 	.word	0x0803ca68
 8010be4:	0803ca88 	.word	0x0803ca88
 8010be8:	0803ca48 	.word	0x0803ca48

08010bec <std>:
 8010bec:	2300      	movs	r3, #0
 8010bee:	b510      	push	{r4, lr}
 8010bf0:	4604      	mov	r4, r0
 8010bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8010bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bfa:	6083      	str	r3, [r0, #8]
 8010bfc:	8181      	strh	r1, [r0, #12]
 8010bfe:	6643      	str	r3, [r0, #100]	; 0x64
 8010c00:	81c2      	strh	r2, [r0, #14]
 8010c02:	6183      	str	r3, [r0, #24]
 8010c04:	4619      	mov	r1, r3
 8010c06:	2208      	movs	r2, #8
 8010c08:	305c      	adds	r0, #92	; 0x5c
 8010c0a:	f7fc fcbf 	bl	800d58c <memset>
 8010c0e:	4b05      	ldr	r3, [pc, #20]	; (8010c24 <std+0x38>)
 8010c10:	6263      	str	r3, [r4, #36]	; 0x24
 8010c12:	4b05      	ldr	r3, [pc, #20]	; (8010c28 <std+0x3c>)
 8010c14:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c16:	4b05      	ldr	r3, [pc, #20]	; (8010c2c <std+0x40>)
 8010c18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c1a:	4b05      	ldr	r3, [pc, #20]	; (8010c30 <std+0x44>)
 8010c1c:	6224      	str	r4, [r4, #32]
 8010c1e:	6323      	str	r3, [r4, #48]	; 0x30
 8010c20:	bd10      	pop	{r4, pc}
 8010c22:	bf00      	nop
 8010c24:	0800e881 	.word	0x0800e881
 8010c28:	0800e8a7 	.word	0x0800e8a7
 8010c2c:	0800e8df 	.word	0x0800e8df
 8010c30:	0800e903 	.word	0x0800e903

08010c34 <_cleanup_r>:
 8010c34:	4901      	ldr	r1, [pc, #4]	; (8010c3c <_cleanup_r+0x8>)
 8010c36:	f000 b8af 	b.w	8010d98 <_fwalk_reent>
 8010c3a:	bf00      	nop
 8010c3c:	08010b75 	.word	0x08010b75

08010c40 <__sfmoreglue>:
 8010c40:	b570      	push	{r4, r5, r6, lr}
 8010c42:	2268      	movs	r2, #104	; 0x68
 8010c44:	1e4d      	subs	r5, r1, #1
 8010c46:	4355      	muls	r5, r2
 8010c48:	460e      	mov	r6, r1
 8010c4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010c4e:	f7fc ff83 	bl	800db58 <_malloc_r>
 8010c52:	4604      	mov	r4, r0
 8010c54:	b140      	cbz	r0, 8010c68 <__sfmoreglue+0x28>
 8010c56:	2100      	movs	r1, #0
 8010c58:	e9c0 1600 	strd	r1, r6, [r0]
 8010c5c:	300c      	adds	r0, #12
 8010c5e:	60a0      	str	r0, [r4, #8]
 8010c60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010c64:	f7fc fc92 	bl	800d58c <memset>
 8010c68:	4620      	mov	r0, r4
 8010c6a:	bd70      	pop	{r4, r5, r6, pc}

08010c6c <__sfp_lock_acquire>:
 8010c6c:	4801      	ldr	r0, [pc, #4]	; (8010c74 <__sfp_lock_acquire+0x8>)
 8010c6e:	f000 b905 	b.w	8010e7c <__retarget_lock_acquire_recursive>
 8010c72:	bf00      	nop
 8010c74:	20003c1a 	.word	0x20003c1a

08010c78 <__sfp_lock_release>:
 8010c78:	4801      	ldr	r0, [pc, #4]	; (8010c80 <__sfp_lock_release+0x8>)
 8010c7a:	f000 b901 	b.w	8010e80 <__retarget_lock_release_recursive>
 8010c7e:	bf00      	nop
 8010c80:	20003c1a 	.word	0x20003c1a

08010c84 <__sinit_lock_acquire>:
 8010c84:	4801      	ldr	r0, [pc, #4]	; (8010c8c <__sinit_lock_acquire+0x8>)
 8010c86:	f000 b8f9 	b.w	8010e7c <__retarget_lock_acquire_recursive>
 8010c8a:	bf00      	nop
 8010c8c:	20003c1b 	.word	0x20003c1b

08010c90 <__sinit_lock_release>:
 8010c90:	4801      	ldr	r0, [pc, #4]	; (8010c98 <__sinit_lock_release+0x8>)
 8010c92:	f000 b8f5 	b.w	8010e80 <__retarget_lock_release_recursive>
 8010c96:	bf00      	nop
 8010c98:	20003c1b 	.word	0x20003c1b

08010c9c <__sinit>:
 8010c9c:	b510      	push	{r4, lr}
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	f7ff fff0 	bl	8010c84 <__sinit_lock_acquire>
 8010ca4:	69a3      	ldr	r3, [r4, #24]
 8010ca6:	b11b      	cbz	r3, 8010cb0 <__sinit+0x14>
 8010ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cac:	f7ff bff0 	b.w	8010c90 <__sinit_lock_release>
 8010cb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010cb4:	6523      	str	r3, [r4, #80]	; 0x50
 8010cb6:	4b13      	ldr	r3, [pc, #76]	; (8010d04 <__sinit+0x68>)
 8010cb8:	4a13      	ldr	r2, [pc, #76]	; (8010d08 <__sinit+0x6c>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8010cbe:	42a3      	cmp	r3, r4
 8010cc0:	bf04      	itt	eq
 8010cc2:	2301      	moveq	r3, #1
 8010cc4:	61a3      	streq	r3, [r4, #24]
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	f000 f820 	bl	8010d0c <__sfp>
 8010ccc:	6060      	str	r0, [r4, #4]
 8010cce:	4620      	mov	r0, r4
 8010cd0:	f000 f81c 	bl	8010d0c <__sfp>
 8010cd4:	60a0      	str	r0, [r4, #8]
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f000 f818 	bl	8010d0c <__sfp>
 8010cdc:	2200      	movs	r2, #0
 8010cde:	60e0      	str	r0, [r4, #12]
 8010ce0:	2104      	movs	r1, #4
 8010ce2:	6860      	ldr	r0, [r4, #4]
 8010ce4:	f7ff ff82 	bl	8010bec <std>
 8010ce8:	68a0      	ldr	r0, [r4, #8]
 8010cea:	2201      	movs	r2, #1
 8010cec:	2109      	movs	r1, #9
 8010cee:	f7ff ff7d 	bl	8010bec <std>
 8010cf2:	68e0      	ldr	r0, [r4, #12]
 8010cf4:	2202      	movs	r2, #2
 8010cf6:	2112      	movs	r1, #18
 8010cf8:	f7ff ff78 	bl	8010bec <std>
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	61a3      	str	r3, [r4, #24]
 8010d00:	e7d2      	b.n	8010ca8 <__sinit+0xc>
 8010d02:	bf00      	nop
 8010d04:	0803c50c 	.word	0x0803c50c
 8010d08:	08010c35 	.word	0x08010c35

08010d0c <__sfp>:
 8010d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d0e:	4607      	mov	r7, r0
 8010d10:	f7ff ffac 	bl	8010c6c <__sfp_lock_acquire>
 8010d14:	4b1e      	ldr	r3, [pc, #120]	; (8010d90 <__sfp+0x84>)
 8010d16:	681e      	ldr	r6, [r3, #0]
 8010d18:	69b3      	ldr	r3, [r6, #24]
 8010d1a:	b913      	cbnz	r3, 8010d22 <__sfp+0x16>
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	f7ff ffbd 	bl	8010c9c <__sinit>
 8010d22:	3648      	adds	r6, #72	; 0x48
 8010d24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010d28:	3b01      	subs	r3, #1
 8010d2a:	d503      	bpl.n	8010d34 <__sfp+0x28>
 8010d2c:	6833      	ldr	r3, [r6, #0]
 8010d2e:	b30b      	cbz	r3, 8010d74 <__sfp+0x68>
 8010d30:	6836      	ldr	r6, [r6, #0]
 8010d32:	e7f7      	b.n	8010d24 <__sfp+0x18>
 8010d34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010d38:	b9d5      	cbnz	r5, 8010d70 <__sfp+0x64>
 8010d3a:	4b16      	ldr	r3, [pc, #88]	; (8010d94 <__sfp+0x88>)
 8010d3c:	60e3      	str	r3, [r4, #12]
 8010d3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010d42:	6665      	str	r5, [r4, #100]	; 0x64
 8010d44:	f000 f898 	bl	8010e78 <__retarget_lock_init_recursive>
 8010d48:	f7ff ff96 	bl	8010c78 <__sfp_lock_release>
 8010d4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010d50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010d54:	6025      	str	r5, [r4, #0]
 8010d56:	61a5      	str	r5, [r4, #24]
 8010d58:	2208      	movs	r2, #8
 8010d5a:	4629      	mov	r1, r5
 8010d5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010d60:	f7fc fc14 	bl	800d58c <memset>
 8010d64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010d68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d70:	3468      	adds	r4, #104	; 0x68
 8010d72:	e7d9      	b.n	8010d28 <__sfp+0x1c>
 8010d74:	2104      	movs	r1, #4
 8010d76:	4638      	mov	r0, r7
 8010d78:	f7ff ff62 	bl	8010c40 <__sfmoreglue>
 8010d7c:	4604      	mov	r4, r0
 8010d7e:	6030      	str	r0, [r6, #0]
 8010d80:	2800      	cmp	r0, #0
 8010d82:	d1d5      	bne.n	8010d30 <__sfp+0x24>
 8010d84:	f7ff ff78 	bl	8010c78 <__sfp_lock_release>
 8010d88:	230c      	movs	r3, #12
 8010d8a:	603b      	str	r3, [r7, #0]
 8010d8c:	e7ee      	b.n	8010d6c <__sfp+0x60>
 8010d8e:	bf00      	nop
 8010d90:	0803c50c 	.word	0x0803c50c
 8010d94:	ffff0001 	.word	0xffff0001

08010d98 <_fwalk_reent>:
 8010d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d9c:	4606      	mov	r6, r0
 8010d9e:	4688      	mov	r8, r1
 8010da0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010da4:	2700      	movs	r7, #0
 8010da6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010daa:	f1b9 0901 	subs.w	r9, r9, #1
 8010dae:	d505      	bpl.n	8010dbc <_fwalk_reent+0x24>
 8010db0:	6824      	ldr	r4, [r4, #0]
 8010db2:	2c00      	cmp	r4, #0
 8010db4:	d1f7      	bne.n	8010da6 <_fwalk_reent+0xe>
 8010db6:	4638      	mov	r0, r7
 8010db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dbc:	89ab      	ldrh	r3, [r5, #12]
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d907      	bls.n	8010dd2 <_fwalk_reent+0x3a>
 8010dc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	d003      	beq.n	8010dd2 <_fwalk_reent+0x3a>
 8010dca:	4629      	mov	r1, r5
 8010dcc:	4630      	mov	r0, r6
 8010dce:	47c0      	blx	r8
 8010dd0:	4307      	orrs	r7, r0
 8010dd2:	3568      	adds	r5, #104	; 0x68
 8010dd4:	e7e9      	b.n	8010daa <_fwalk_reent+0x12>
	...

08010dd8 <_findenv_r>:
 8010dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ddc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8010e4c <_findenv_r+0x74>
 8010de0:	4607      	mov	r7, r0
 8010de2:	4689      	mov	r9, r1
 8010de4:	4616      	mov	r6, r2
 8010de6:	f001 fa43 	bl	8012270 <__env_lock>
 8010dea:	f8da 4000 	ldr.w	r4, [sl]
 8010dee:	b134      	cbz	r4, 8010dfe <_findenv_r+0x26>
 8010df0:	464b      	mov	r3, r9
 8010df2:	4698      	mov	r8, r3
 8010df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010df8:	b13a      	cbz	r2, 8010e0a <_findenv_r+0x32>
 8010dfa:	2a3d      	cmp	r2, #61	; 0x3d
 8010dfc:	d1f9      	bne.n	8010df2 <_findenv_r+0x1a>
 8010dfe:	4638      	mov	r0, r7
 8010e00:	f001 fa3c 	bl	801227c <__env_unlock>
 8010e04:	2000      	movs	r0, #0
 8010e06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0a:	eba8 0809 	sub.w	r8, r8, r9
 8010e0e:	46a3      	mov	fp, r4
 8010e10:	f854 0b04 	ldr.w	r0, [r4], #4
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d0f2      	beq.n	8010dfe <_findenv_r+0x26>
 8010e18:	4642      	mov	r2, r8
 8010e1a:	4649      	mov	r1, r9
 8010e1c:	f001 f9da 	bl	80121d4 <strncmp>
 8010e20:	2800      	cmp	r0, #0
 8010e22:	d1f4      	bne.n	8010e0e <_findenv_r+0x36>
 8010e24:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010e28:	eb03 0508 	add.w	r5, r3, r8
 8010e2c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010e30:	2b3d      	cmp	r3, #61	; 0x3d
 8010e32:	d1ec      	bne.n	8010e0e <_findenv_r+0x36>
 8010e34:	f8da 3000 	ldr.w	r3, [sl]
 8010e38:	ebab 0303 	sub.w	r3, fp, r3
 8010e3c:	109b      	asrs	r3, r3, #2
 8010e3e:	4638      	mov	r0, r7
 8010e40:	6033      	str	r3, [r6, #0]
 8010e42:	f001 fa1b 	bl	801227c <__env_unlock>
 8010e46:	1c68      	adds	r0, r5, #1
 8010e48:	e7dd      	b.n	8010e06 <_findenv_r+0x2e>
 8010e4a:	bf00      	nop
 8010e4c:	20000388 	.word	0x20000388

08010e50 <_getenv_r>:
 8010e50:	b507      	push	{r0, r1, r2, lr}
 8010e52:	aa01      	add	r2, sp, #4
 8010e54:	f7ff ffc0 	bl	8010dd8 <_findenv_r>
 8010e58:	b003      	add	sp, #12
 8010e5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010e60 <__gettzinfo>:
 8010e60:	4800      	ldr	r0, [pc, #0]	; (8010e64 <__gettzinfo+0x4>)
 8010e62:	4770      	bx	lr
 8010e64:	20000330 	.word	0x20000330

08010e68 <labs>:
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	bfb8      	it	lt
 8010e6c:	4240      	neglt	r0, r0
 8010e6e:	4770      	bx	lr

08010e70 <_localeconv_r>:
 8010e70:	4800      	ldr	r0, [pc, #0]	; (8010e74 <_localeconv_r+0x4>)
 8010e72:	4770      	bx	lr
 8010e74:	2000047c 	.word	0x2000047c

08010e78 <__retarget_lock_init_recursive>:
 8010e78:	4770      	bx	lr

08010e7a <__retarget_lock_acquire>:
 8010e7a:	4770      	bx	lr

08010e7c <__retarget_lock_acquire_recursive>:
 8010e7c:	4770      	bx	lr

08010e7e <__retarget_lock_release>:
 8010e7e:	4770      	bx	lr

08010e80 <__retarget_lock_release_recursive>:
 8010e80:	4770      	bx	lr
	...

08010e84 <_lseek_r>:
 8010e84:	b538      	push	{r3, r4, r5, lr}
 8010e86:	4d07      	ldr	r5, [pc, #28]	; (8010ea4 <_lseek_r+0x20>)
 8010e88:	4604      	mov	r4, r0
 8010e8a:	4608      	mov	r0, r1
 8010e8c:	4611      	mov	r1, r2
 8010e8e:	2200      	movs	r2, #0
 8010e90:	602a      	str	r2, [r5, #0]
 8010e92:	461a      	mov	r2, r3
 8010e94:	f003 fea2 	bl	8014bdc <_lseek>
 8010e98:	1c43      	adds	r3, r0, #1
 8010e9a:	d102      	bne.n	8010ea2 <_lseek_r+0x1e>
 8010e9c:	682b      	ldr	r3, [r5, #0]
 8010e9e:	b103      	cbz	r3, 8010ea2 <_lseek_r+0x1e>
 8010ea0:	6023      	str	r3, [r4, #0]
 8010ea2:	bd38      	pop	{r3, r4, r5, pc}
 8010ea4:	20003c20 	.word	0x20003c20

08010ea8 <__swhatbuf_r>:
 8010ea8:	b570      	push	{r4, r5, r6, lr}
 8010eaa:	460e      	mov	r6, r1
 8010eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eb0:	2900      	cmp	r1, #0
 8010eb2:	b096      	sub	sp, #88	; 0x58
 8010eb4:	4614      	mov	r4, r2
 8010eb6:	461d      	mov	r5, r3
 8010eb8:	da08      	bge.n	8010ecc <__swhatbuf_r+0x24>
 8010eba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	602a      	str	r2, [r5, #0]
 8010ec2:	061a      	lsls	r2, r3, #24
 8010ec4:	d410      	bmi.n	8010ee8 <__swhatbuf_r+0x40>
 8010ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010eca:	e00e      	b.n	8010eea <__swhatbuf_r+0x42>
 8010ecc:	466a      	mov	r2, sp
 8010ece:	f001 f9db 	bl	8012288 <_fstat_r>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	dbf1      	blt.n	8010eba <__swhatbuf_r+0x12>
 8010ed6:	9a01      	ldr	r2, [sp, #4]
 8010ed8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010edc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ee0:	425a      	negs	r2, r3
 8010ee2:	415a      	adcs	r2, r3
 8010ee4:	602a      	str	r2, [r5, #0]
 8010ee6:	e7ee      	b.n	8010ec6 <__swhatbuf_r+0x1e>
 8010ee8:	2340      	movs	r3, #64	; 0x40
 8010eea:	2000      	movs	r0, #0
 8010eec:	6023      	str	r3, [r4, #0]
 8010eee:	b016      	add	sp, #88	; 0x58
 8010ef0:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ef4 <__smakebuf_r>:
 8010ef4:	898b      	ldrh	r3, [r1, #12]
 8010ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ef8:	079d      	lsls	r5, r3, #30
 8010efa:	4606      	mov	r6, r0
 8010efc:	460c      	mov	r4, r1
 8010efe:	d507      	bpl.n	8010f10 <__smakebuf_r+0x1c>
 8010f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010f04:	6023      	str	r3, [r4, #0]
 8010f06:	6123      	str	r3, [r4, #16]
 8010f08:	2301      	movs	r3, #1
 8010f0a:	6163      	str	r3, [r4, #20]
 8010f0c:	b002      	add	sp, #8
 8010f0e:	bd70      	pop	{r4, r5, r6, pc}
 8010f10:	ab01      	add	r3, sp, #4
 8010f12:	466a      	mov	r2, sp
 8010f14:	f7ff ffc8 	bl	8010ea8 <__swhatbuf_r>
 8010f18:	9900      	ldr	r1, [sp, #0]
 8010f1a:	4605      	mov	r5, r0
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	f7fc fe1b 	bl	800db58 <_malloc_r>
 8010f22:	b948      	cbnz	r0, 8010f38 <__smakebuf_r+0x44>
 8010f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f28:	059a      	lsls	r2, r3, #22
 8010f2a:	d4ef      	bmi.n	8010f0c <__smakebuf_r+0x18>
 8010f2c:	f023 0303 	bic.w	r3, r3, #3
 8010f30:	f043 0302 	orr.w	r3, r3, #2
 8010f34:	81a3      	strh	r3, [r4, #12]
 8010f36:	e7e3      	b.n	8010f00 <__smakebuf_r+0xc>
 8010f38:	4b0d      	ldr	r3, [pc, #52]	; (8010f70 <__smakebuf_r+0x7c>)
 8010f3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010f3c:	89a3      	ldrh	r3, [r4, #12]
 8010f3e:	6020      	str	r0, [r4, #0]
 8010f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f44:	81a3      	strh	r3, [r4, #12]
 8010f46:	9b00      	ldr	r3, [sp, #0]
 8010f48:	6163      	str	r3, [r4, #20]
 8010f4a:	9b01      	ldr	r3, [sp, #4]
 8010f4c:	6120      	str	r0, [r4, #16]
 8010f4e:	b15b      	cbz	r3, 8010f68 <__smakebuf_r+0x74>
 8010f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f54:	4630      	mov	r0, r6
 8010f56:	f001 f9a9 	bl	80122ac <_isatty_r>
 8010f5a:	b128      	cbz	r0, 8010f68 <__smakebuf_r+0x74>
 8010f5c:	89a3      	ldrh	r3, [r4, #12]
 8010f5e:	f023 0303 	bic.w	r3, r3, #3
 8010f62:	f043 0301 	orr.w	r3, r3, #1
 8010f66:	81a3      	strh	r3, [r4, #12]
 8010f68:	89a0      	ldrh	r0, [r4, #12]
 8010f6a:	4305      	orrs	r5, r0
 8010f6c:	81a5      	strh	r5, [r4, #12]
 8010f6e:	e7cd      	b.n	8010f0c <__smakebuf_r+0x18>
 8010f70:	08010c35 	.word	0x08010c35

08010f74 <memmove>:
 8010f74:	4288      	cmp	r0, r1
 8010f76:	b510      	push	{r4, lr}
 8010f78:	eb01 0402 	add.w	r4, r1, r2
 8010f7c:	d902      	bls.n	8010f84 <memmove+0x10>
 8010f7e:	4284      	cmp	r4, r0
 8010f80:	4623      	mov	r3, r4
 8010f82:	d807      	bhi.n	8010f94 <memmove+0x20>
 8010f84:	1e43      	subs	r3, r0, #1
 8010f86:	42a1      	cmp	r1, r4
 8010f88:	d008      	beq.n	8010f9c <memmove+0x28>
 8010f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f92:	e7f8      	b.n	8010f86 <memmove+0x12>
 8010f94:	4402      	add	r2, r0
 8010f96:	4601      	mov	r1, r0
 8010f98:	428a      	cmp	r2, r1
 8010f9a:	d100      	bne.n	8010f9e <memmove+0x2a>
 8010f9c:	bd10      	pop	{r4, pc}
 8010f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010fa6:	e7f7      	b.n	8010f98 <memmove+0x24>

08010fa8 <__malloc_lock>:
 8010fa8:	4801      	ldr	r0, [pc, #4]	; (8010fb0 <__malloc_lock+0x8>)
 8010faa:	f7ff bf67 	b.w	8010e7c <__retarget_lock_acquire_recursive>
 8010fae:	bf00      	nop
 8010fb0:	20003c19 	.word	0x20003c19

08010fb4 <__malloc_unlock>:
 8010fb4:	4801      	ldr	r0, [pc, #4]	; (8010fbc <__malloc_unlock+0x8>)
 8010fb6:	f7ff bf63 	b.w	8010e80 <__retarget_lock_release_recursive>
 8010fba:	bf00      	nop
 8010fbc:	20003c19 	.word	0x20003c19

08010fc0 <_Balloc>:
 8010fc0:	b570      	push	{r4, r5, r6, lr}
 8010fc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010fc4:	4604      	mov	r4, r0
 8010fc6:	460d      	mov	r5, r1
 8010fc8:	b976      	cbnz	r6, 8010fe8 <_Balloc+0x28>
 8010fca:	2010      	movs	r0, #16
 8010fcc:	f7fc fac0 	bl	800d550 <malloc>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	6260      	str	r0, [r4, #36]	; 0x24
 8010fd4:	b920      	cbnz	r0, 8010fe0 <_Balloc+0x20>
 8010fd6:	4b18      	ldr	r3, [pc, #96]	; (8011038 <_Balloc+0x78>)
 8010fd8:	4818      	ldr	r0, [pc, #96]	; (801103c <_Balloc+0x7c>)
 8010fda:	2166      	movs	r1, #102	; 0x66
 8010fdc:	f7fc fa60 	bl	800d4a0 <__assert_func>
 8010fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fe4:	6006      	str	r6, [r0, #0]
 8010fe6:	60c6      	str	r6, [r0, #12]
 8010fe8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010fea:	68f3      	ldr	r3, [r6, #12]
 8010fec:	b183      	cbz	r3, 8011010 <_Balloc+0x50>
 8010fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010ff6:	b9b8      	cbnz	r0, 8011028 <_Balloc+0x68>
 8010ff8:	2101      	movs	r1, #1
 8010ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8010ffe:	1d72      	adds	r2, r6, #5
 8011000:	0092      	lsls	r2, r2, #2
 8011002:	4620      	mov	r0, r4
 8011004:	f000 fb60 	bl	80116c8 <_calloc_r>
 8011008:	b160      	cbz	r0, 8011024 <_Balloc+0x64>
 801100a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801100e:	e00e      	b.n	801102e <_Balloc+0x6e>
 8011010:	2221      	movs	r2, #33	; 0x21
 8011012:	2104      	movs	r1, #4
 8011014:	4620      	mov	r0, r4
 8011016:	f000 fb57 	bl	80116c8 <_calloc_r>
 801101a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801101c:	60f0      	str	r0, [r6, #12]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d1e4      	bne.n	8010fee <_Balloc+0x2e>
 8011024:	2000      	movs	r0, #0
 8011026:	bd70      	pop	{r4, r5, r6, pc}
 8011028:	6802      	ldr	r2, [r0, #0]
 801102a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801102e:	2300      	movs	r3, #0
 8011030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011034:	e7f7      	b.n	8011026 <_Balloc+0x66>
 8011036:	bf00      	nop
 8011038:	0803c404 	.word	0x0803c404
 801103c:	0803cb08 	.word	0x0803cb08

08011040 <_Bfree>:
 8011040:	b570      	push	{r4, r5, r6, lr}
 8011042:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011044:	4605      	mov	r5, r0
 8011046:	460c      	mov	r4, r1
 8011048:	b976      	cbnz	r6, 8011068 <_Bfree+0x28>
 801104a:	2010      	movs	r0, #16
 801104c:	f7fc fa80 	bl	800d550 <malloc>
 8011050:	4602      	mov	r2, r0
 8011052:	6268      	str	r0, [r5, #36]	; 0x24
 8011054:	b920      	cbnz	r0, 8011060 <_Bfree+0x20>
 8011056:	4b09      	ldr	r3, [pc, #36]	; (801107c <_Bfree+0x3c>)
 8011058:	4809      	ldr	r0, [pc, #36]	; (8011080 <_Bfree+0x40>)
 801105a:	218a      	movs	r1, #138	; 0x8a
 801105c:	f7fc fa20 	bl	800d4a0 <__assert_func>
 8011060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011064:	6006      	str	r6, [r0, #0]
 8011066:	60c6      	str	r6, [r0, #12]
 8011068:	b13c      	cbz	r4, 801107a <_Bfree+0x3a>
 801106a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801106c:	6862      	ldr	r2, [r4, #4]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011074:	6021      	str	r1, [r4, #0]
 8011076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801107a:	bd70      	pop	{r4, r5, r6, pc}
 801107c:	0803c404 	.word	0x0803c404
 8011080:	0803cb08 	.word	0x0803cb08

08011084 <__multadd>:
 8011084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011088:	690d      	ldr	r5, [r1, #16]
 801108a:	4607      	mov	r7, r0
 801108c:	460c      	mov	r4, r1
 801108e:	461e      	mov	r6, r3
 8011090:	f101 0c14 	add.w	ip, r1, #20
 8011094:	2000      	movs	r0, #0
 8011096:	f8dc 3000 	ldr.w	r3, [ip]
 801109a:	b299      	uxth	r1, r3
 801109c:	fb02 6101 	mla	r1, r2, r1, r6
 80110a0:	0c1e      	lsrs	r6, r3, #16
 80110a2:	0c0b      	lsrs	r3, r1, #16
 80110a4:	fb02 3306 	mla	r3, r2, r6, r3
 80110a8:	b289      	uxth	r1, r1
 80110aa:	3001      	adds	r0, #1
 80110ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80110b0:	4285      	cmp	r5, r0
 80110b2:	f84c 1b04 	str.w	r1, [ip], #4
 80110b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80110ba:	dcec      	bgt.n	8011096 <__multadd+0x12>
 80110bc:	b30e      	cbz	r6, 8011102 <__multadd+0x7e>
 80110be:	68a3      	ldr	r3, [r4, #8]
 80110c0:	42ab      	cmp	r3, r5
 80110c2:	dc19      	bgt.n	80110f8 <__multadd+0x74>
 80110c4:	6861      	ldr	r1, [r4, #4]
 80110c6:	4638      	mov	r0, r7
 80110c8:	3101      	adds	r1, #1
 80110ca:	f7ff ff79 	bl	8010fc0 <_Balloc>
 80110ce:	4680      	mov	r8, r0
 80110d0:	b928      	cbnz	r0, 80110de <__multadd+0x5a>
 80110d2:	4602      	mov	r2, r0
 80110d4:	4b0c      	ldr	r3, [pc, #48]	; (8011108 <__multadd+0x84>)
 80110d6:	480d      	ldr	r0, [pc, #52]	; (801110c <__multadd+0x88>)
 80110d8:	21b5      	movs	r1, #181	; 0xb5
 80110da:	f7fc f9e1 	bl	800d4a0 <__assert_func>
 80110de:	6922      	ldr	r2, [r4, #16]
 80110e0:	3202      	adds	r2, #2
 80110e2:	f104 010c 	add.w	r1, r4, #12
 80110e6:	0092      	lsls	r2, r2, #2
 80110e8:	300c      	adds	r0, #12
 80110ea:	f7fc fa41 	bl	800d570 <memcpy>
 80110ee:	4621      	mov	r1, r4
 80110f0:	4638      	mov	r0, r7
 80110f2:	f7ff ffa5 	bl	8011040 <_Bfree>
 80110f6:	4644      	mov	r4, r8
 80110f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80110fc:	3501      	adds	r5, #1
 80110fe:	615e      	str	r6, [r3, #20]
 8011100:	6125      	str	r5, [r4, #16]
 8011102:	4620      	mov	r0, r4
 8011104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011108:	0803ca35 	.word	0x0803ca35
 801110c:	0803cb08 	.word	0x0803cb08

08011110 <__hi0bits>:
 8011110:	0c03      	lsrs	r3, r0, #16
 8011112:	041b      	lsls	r3, r3, #16
 8011114:	b9d3      	cbnz	r3, 801114c <__hi0bits+0x3c>
 8011116:	0400      	lsls	r0, r0, #16
 8011118:	2310      	movs	r3, #16
 801111a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801111e:	bf04      	itt	eq
 8011120:	0200      	lsleq	r0, r0, #8
 8011122:	3308      	addeq	r3, #8
 8011124:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011128:	bf04      	itt	eq
 801112a:	0100      	lsleq	r0, r0, #4
 801112c:	3304      	addeq	r3, #4
 801112e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011132:	bf04      	itt	eq
 8011134:	0080      	lsleq	r0, r0, #2
 8011136:	3302      	addeq	r3, #2
 8011138:	2800      	cmp	r0, #0
 801113a:	db05      	blt.n	8011148 <__hi0bits+0x38>
 801113c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011140:	f103 0301 	add.w	r3, r3, #1
 8011144:	bf08      	it	eq
 8011146:	2320      	moveq	r3, #32
 8011148:	4618      	mov	r0, r3
 801114a:	4770      	bx	lr
 801114c:	2300      	movs	r3, #0
 801114e:	e7e4      	b.n	801111a <__hi0bits+0xa>

08011150 <__lo0bits>:
 8011150:	6803      	ldr	r3, [r0, #0]
 8011152:	f013 0207 	ands.w	r2, r3, #7
 8011156:	4601      	mov	r1, r0
 8011158:	d00b      	beq.n	8011172 <__lo0bits+0x22>
 801115a:	07da      	lsls	r2, r3, #31
 801115c:	d423      	bmi.n	80111a6 <__lo0bits+0x56>
 801115e:	0798      	lsls	r0, r3, #30
 8011160:	bf49      	itett	mi
 8011162:	085b      	lsrmi	r3, r3, #1
 8011164:	089b      	lsrpl	r3, r3, #2
 8011166:	2001      	movmi	r0, #1
 8011168:	600b      	strmi	r3, [r1, #0]
 801116a:	bf5c      	itt	pl
 801116c:	600b      	strpl	r3, [r1, #0]
 801116e:	2002      	movpl	r0, #2
 8011170:	4770      	bx	lr
 8011172:	b298      	uxth	r0, r3
 8011174:	b9a8      	cbnz	r0, 80111a2 <__lo0bits+0x52>
 8011176:	0c1b      	lsrs	r3, r3, #16
 8011178:	2010      	movs	r0, #16
 801117a:	b2da      	uxtb	r2, r3
 801117c:	b90a      	cbnz	r2, 8011182 <__lo0bits+0x32>
 801117e:	3008      	adds	r0, #8
 8011180:	0a1b      	lsrs	r3, r3, #8
 8011182:	071a      	lsls	r2, r3, #28
 8011184:	bf04      	itt	eq
 8011186:	091b      	lsreq	r3, r3, #4
 8011188:	3004      	addeq	r0, #4
 801118a:	079a      	lsls	r2, r3, #30
 801118c:	bf04      	itt	eq
 801118e:	089b      	lsreq	r3, r3, #2
 8011190:	3002      	addeq	r0, #2
 8011192:	07da      	lsls	r2, r3, #31
 8011194:	d403      	bmi.n	801119e <__lo0bits+0x4e>
 8011196:	085b      	lsrs	r3, r3, #1
 8011198:	f100 0001 	add.w	r0, r0, #1
 801119c:	d005      	beq.n	80111aa <__lo0bits+0x5a>
 801119e:	600b      	str	r3, [r1, #0]
 80111a0:	4770      	bx	lr
 80111a2:	4610      	mov	r0, r2
 80111a4:	e7e9      	b.n	801117a <__lo0bits+0x2a>
 80111a6:	2000      	movs	r0, #0
 80111a8:	4770      	bx	lr
 80111aa:	2020      	movs	r0, #32
 80111ac:	4770      	bx	lr
	...

080111b0 <__i2b>:
 80111b0:	b510      	push	{r4, lr}
 80111b2:	460c      	mov	r4, r1
 80111b4:	2101      	movs	r1, #1
 80111b6:	f7ff ff03 	bl	8010fc0 <_Balloc>
 80111ba:	4602      	mov	r2, r0
 80111bc:	b928      	cbnz	r0, 80111ca <__i2b+0x1a>
 80111be:	4b05      	ldr	r3, [pc, #20]	; (80111d4 <__i2b+0x24>)
 80111c0:	4805      	ldr	r0, [pc, #20]	; (80111d8 <__i2b+0x28>)
 80111c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80111c6:	f7fc f96b 	bl	800d4a0 <__assert_func>
 80111ca:	2301      	movs	r3, #1
 80111cc:	6144      	str	r4, [r0, #20]
 80111ce:	6103      	str	r3, [r0, #16]
 80111d0:	bd10      	pop	{r4, pc}
 80111d2:	bf00      	nop
 80111d4:	0803ca35 	.word	0x0803ca35
 80111d8:	0803cb08 	.word	0x0803cb08

080111dc <__multiply>:
 80111dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e0:	4691      	mov	r9, r2
 80111e2:	690a      	ldr	r2, [r1, #16]
 80111e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80111e8:	429a      	cmp	r2, r3
 80111ea:	bfb8      	it	lt
 80111ec:	460b      	movlt	r3, r1
 80111ee:	460c      	mov	r4, r1
 80111f0:	bfbc      	itt	lt
 80111f2:	464c      	movlt	r4, r9
 80111f4:	4699      	movlt	r9, r3
 80111f6:	6927      	ldr	r7, [r4, #16]
 80111f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80111fc:	68a3      	ldr	r3, [r4, #8]
 80111fe:	6861      	ldr	r1, [r4, #4]
 8011200:	eb07 060a 	add.w	r6, r7, sl
 8011204:	42b3      	cmp	r3, r6
 8011206:	b085      	sub	sp, #20
 8011208:	bfb8      	it	lt
 801120a:	3101      	addlt	r1, #1
 801120c:	f7ff fed8 	bl	8010fc0 <_Balloc>
 8011210:	b930      	cbnz	r0, 8011220 <__multiply+0x44>
 8011212:	4602      	mov	r2, r0
 8011214:	4b44      	ldr	r3, [pc, #272]	; (8011328 <__multiply+0x14c>)
 8011216:	4845      	ldr	r0, [pc, #276]	; (801132c <__multiply+0x150>)
 8011218:	f240 115d 	movw	r1, #349	; 0x15d
 801121c:	f7fc f940 	bl	800d4a0 <__assert_func>
 8011220:	f100 0514 	add.w	r5, r0, #20
 8011224:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011228:	462b      	mov	r3, r5
 801122a:	2200      	movs	r2, #0
 801122c:	4543      	cmp	r3, r8
 801122e:	d321      	bcc.n	8011274 <__multiply+0x98>
 8011230:	f104 0314 	add.w	r3, r4, #20
 8011234:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011238:	f109 0314 	add.w	r3, r9, #20
 801123c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011240:	9202      	str	r2, [sp, #8]
 8011242:	1b3a      	subs	r2, r7, r4
 8011244:	3a15      	subs	r2, #21
 8011246:	f022 0203 	bic.w	r2, r2, #3
 801124a:	3204      	adds	r2, #4
 801124c:	f104 0115 	add.w	r1, r4, #21
 8011250:	428f      	cmp	r7, r1
 8011252:	bf38      	it	cc
 8011254:	2204      	movcc	r2, #4
 8011256:	9201      	str	r2, [sp, #4]
 8011258:	9a02      	ldr	r2, [sp, #8]
 801125a:	9303      	str	r3, [sp, #12]
 801125c:	429a      	cmp	r2, r3
 801125e:	d80c      	bhi.n	801127a <__multiply+0x9e>
 8011260:	2e00      	cmp	r6, #0
 8011262:	dd03      	ble.n	801126c <__multiply+0x90>
 8011264:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011268:	2b00      	cmp	r3, #0
 801126a:	d05a      	beq.n	8011322 <__multiply+0x146>
 801126c:	6106      	str	r6, [r0, #16]
 801126e:	b005      	add	sp, #20
 8011270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011274:	f843 2b04 	str.w	r2, [r3], #4
 8011278:	e7d8      	b.n	801122c <__multiply+0x50>
 801127a:	f8b3 a000 	ldrh.w	sl, [r3]
 801127e:	f1ba 0f00 	cmp.w	sl, #0
 8011282:	d024      	beq.n	80112ce <__multiply+0xf2>
 8011284:	f104 0e14 	add.w	lr, r4, #20
 8011288:	46a9      	mov	r9, r5
 801128a:	f04f 0c00 	mov.w	ip, #0
 801128e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011292:	f8d9 1000 	ldr.w	r1, [r9]
 8011296:	fa1f fb82 	uxth.w	fp, r2
 801129a:	b289      	uxth	r1, r1
 801129c:	fb0a 110b 	mla	r1, sl, fp, r1
 80112a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80112a4:	f8d9 2000 	ldr.w	r2, [r9]
 80112a8:	4461      	add	r1, ip
 80112aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80112ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80112b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80112b6:	b289      	uxth	r1, r1
 80112b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80112bc:	4577      	cmp	r7, lr
 80112be:	f849 1b04 	str.w	r1, [r9], #4
 80112c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80112c6:	d8e2      	bhi.n	801128e <__multiply+0xb2>
 80112c8:	9a01      	ldr	r2, [sp, #4]
 80112ca:	f845 c002 	str.w	ip, [r5, r2]
 80112ce:	9a03      	ldr	r2, [sp, #12]
 80112d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80112d4:	3304      	adds	r3, #4
 80112d6:	f1b9 0f00 	cmp.w	r9, #0
 80112da:	d020      	beq.n	801131e <__multiply+0x142>
 80112dc:	6829      	ldr	r1, [r5, #0]
 80112de:	f104 0c14 	add.w	ip, r4, #20
 80112e2:	46ae      	mov	lr, r5
 80112e4:	f04f 0a00 	mov.w	sl, #0
 80112e8:	f8bc b000 	ldrh.w	fp, [ip]
 80112ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80112f0:	fb09 220b 	mla	r2, r9, fp, r2
 80112f4:	4492      	add	sl, r2
 80112f6:	b289      	uxth	r1, r1
 80112f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80112fc:	f84e 1b04 	str.w	r1, [lr], #4
 8011300:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011304:	f8be 1000 	ldrh.w	r1, [lr]
 8011308:	0c12      	lsrs	r2, r2, #16
 801130a:	fb09 1102 	mla	r1, r9, r2, r1
 801130e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011312:	4567      	cmp	r7, ip
 8011314:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011318:	d8e6      	bhi.n	80112e8 <__multiply+0x10c>
 801131a:	9a01      	ldr	r2, [sp, #4]
 801131c:	50a9      	str	r1, [r5, r2]
 801131e:	3504      	adds	r5, #4
 8011320:	e79a      	b.n	8011258 <__multiply+0x7c>
 8011322:	3e01      	subs	r6, #1
 8011324:	e79c      	b.n	8011260 <__multiply+0x84>
 8011326:	bf00      	nop
 8011328:	0803ca35 	.word	0x0803ca35
 801132c:	0803cb08 	.word	0x0803cb08

08011330 <__pow5mult>:
 8011330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011334:	4615      	mov	r5, r2
 8011336:	f012 0203 	ands.w	r2, r2, #3
 801133a:	4606      	mov	r6, r0
 801133c:	460f      	mov	r7, r1
 801133e:	d007      	beq.n	8011350 <__pow5mult+0x20>
 8011340:	4c25      	ldr	r4, [pc, #148]	; (80113d8 <__pow5mult+0xa8>)
 8011342:	3a01      	subs	r2, #1
 8011344:	2300      	movs	r3, #0
 8011346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801134a:	f7ff fe9b 	bl	8011084 <__multadd>
 801134e:	4607      	mov	r7, r0
 8011350:	10ad      	asrs	r5, r5, #2
 8011352:	d03d      	beq.n	80113d0 <__pow5mult+0xa0>
 8011354:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011356:	b97c      	cbnz	r4, 8011378 <__pow5mult+0x48>
 8011358:	2010      	movs	r0, #16
 801135a:	f7fc f8f9 	bl	800d550 <malloc>
 801135e:	4602      	mov	r2, r0
 8011360:	6270      	str	r0, [r6, #36]	; 0x24
 8011362:	b928      	cbnz	r0, 8011370 <__pow5mult+0x40>
 8011364:	4b1d      	ldr	r3, [pc, #116]	; (80113dc <__pow5mult+0xac>)
 8011366:	481e      	ldr	r0, [pc, #120]	; (80113e0 <__pow5mult+0xb0>)
 8011368:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801136c:	f7fc f898 	bl	800d4a0 <__assert_func>
 8011370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011374:	6004      	str	r4, [r0, #0]
 8011376:	60c4      	str	r4, [r0, #12]
 8011378:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801137c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011380:	b94c      	cbnz	r4, 8011396 <__pow5mult+0x66>
 8011382:	f240 2171 	movw	r1, #625	; 0x271
 8011386:	4630      	mov	r0, r6
 8011388:	f7ff ff12 	bl	80111b0 <__i2b>
 801138c:	2300      	movs	r3, #0
 801138e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011392:	4604      	mov	r4, r0
 8011394:	6003      	str	r3, [r0, #0]
 8011396:	f04f 0900 	mov.w	r9, #0
 801139a:	07eb      	lsls	r3, r5, #31
 801139c:	d50a      	bpl.n	80113b4 <__pow5mult+0x84>
 801139e:	4639      	mov	r1, r7
 80113a0:	4622      	mov	r2, r4
 80113a2:	4630      	mov	r0, r6
 80113a4:	f7ff ff1a 	bl	80111dc <__multiply>
 80113a8:	4639      	mov	r1, r7
 80113aa:	4680      	mov	r8, r0
 80113ac:	4630      	mov	r0, r6
 80113ae:	f7ff fe47 	bl	8011040 <_Bfree>
 80113b2:	4647      	mov	r7, r8
 80113b4:	106d      	asrs	r5, r5, #1
 80113b6:	d00b      	beq.n	80113d0 <__pow5mult+0xa0>
 80113b8:	6820      	ldr	r0, [r4, #0]
 80113ba:	b938      	cbnz	r0, 80113cc <__pow5mult+0x9c>
 80113bc:	4622      	mov	r2, r4
 80113be:	4621      	mov	r1, r4
 80113c0:	4630      	mov	r0, r6
 80113c2:	f7ff ff0b 	bl	80111dc <__multiply>
 80113c6:	6020      	str	r0, [r4, #0]
 80113c8:	f8c0 9000 	str.w	r9, [r0]
 80113cc:	4604      	mov	r4, r0
 80113ce:	e7e4      	b.n	801139a <__pow5mult+0x6a>
 80113d0:	4638      	mov	r0, r7
 80113d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113d6:	bf00      	nop
 80113d8:	0803cc58 	.word	0x0803cc58
 80113dc:	0803c404 	.word	0x0803c404
 80113e0:	0803cb08 	.word	0x0803cb08

080113e4 <__lshift>:
 80113e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113e8:	460c      	mov	r4, r1
 80113ea:	6849      	ldr	r1, [r1, #4]
 80113ec:	6923      	ldr	r3, [r4, #16]
 80113ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80113f2:	68a3      	ldr	r3, [r4, #8]
 80113f4:	4607      	mov	r7, r0
 80113f6:	4691      	mov	r9, r2
 80113f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80113fc:	f108 0601 	add.w	r6, r8, #1
 8011400:	42b3      	cmp	r3, r6
 8011402:	db0b      	blt.n	801141c <__lshift+0x38>
 8011404:	4638      	mov	r0, r7
 8011406:	f7ff fddb 	bl	8010fc0 <_Balloc>
 801140a:	4605      	mov	r5, r0
 801140c:	b948      	cbnz	r0, 8011422 <__lshift+0x3e>
 801140e:	4602      	mov	r2, r0
 8011410:	4b2a      	ldr	r3, [pc, #168]	; (80114bc <__lshift+0xd8>)
 8011412:	482b      	ldr	r0, [pc, #172]	; (80114c0 <__lshift+0xdc>)
 8011414:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011418:	f7fc f842 	bl	800d4a0 <__assert_func>
 801141c:	3101      	adds	r1, #1
 801141e:	005b      	lsls	r3, r3, #1
 8011420:	e7ee      	b.n	8011400 <__lshift+0x1c>
 8011422:	2300      	movs	r3, #0
 8011424:	f100 0114 	add.w	r1, r0, #20
 8011428:	f100 0210 	add.w	r2, r0, #16
 801142c:	4618      	mov	r0, r3
 801142e:	4553      	cmp	r3, sl
 8011430:	db37      	blt.n	80114a2 <__lshift+0xbe>
 8011432:	6920      	ldr	r0, [r4, #16]
 8011434:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011438:	f104 0314 	add.w	r3, r4, #20
 801143c:	f019 091f 	ands.w	r9, r9, #31
 8011440:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011444:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011448:	d02f      	beq.n	80114aa <__lshift+0xc6>
 801144a:	f1c9 0e20 	rsb	lr, r9, #32
 801144e:	468a      	mov	sl, r1
 8011450:	f04f 0c00 	mov.w	ip, #0
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	fa02 f209 	lsl.w	r2, r2, r9
 801145a:	ea42 020c 	orr.w	r2, r2, ip
 801145e:	f84a 2b04 	str.w	r2, [sl], #4
 8011462:	f853 2b04 	ldr.w	r2, [r3], #4
 8011466:	4298      	cmp	r0, r3
 8011468:	fa22 fc0e 	lsr.w	ip, r2, lr
 801146c:	d8f2      	bhi.n	8011454 <__lshift+0x70>
 801146e:	1b03      	subs	r3, r0, r4
 8011470:	3b15      	subs	r3, #21
 8011472:	f023 0303 	bic.w	r3, r3, #3
 8011476:	3304      	adds	r3, #4
 8011478:	f104 0215 	add.w	r2, r4, #21
 801147c:	4290      	cmp	r0, r2
 801147e:	bf38      	it	cc
 8011480:	2304      	movcc	r3, #4
 8011482:	f841 c003 	str.w	ip, [r1, r3]
 8011486:	f1bc 0f00 	cmp.w	ip, #0
 801148a:	d001      	beq.n	8011490 <__lshift+0xac>
 801148c:	f108 0602 	add.w	r6, r8, #2
 8011490:	3e01      	subs	r6, #1
 8011492:	4638      	mov	r0, r7
 8011494:	612e      	str	r6, [r5, #16]
 8011496:	4621      	mov	r1, r4
 8011498:	f7ff fdd2 	bl	8011040 <_Bfree>
 801149c:	4628      	mov	r0, r5
 801149e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80114a6:	3301      	adds	r3, #1
 80114a8:	e7c1      	b.n	801142e <__lshift+0x4a>
 80114aa:	3904      	subs	r1, #4
 80114ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80114b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80114b4:	4298      	cmp	r0, r3
 80114b6:	d8f9      	bhi.n	80114ac <__lshift+0xc8>
 80114b8:	e7ea      	b.n	8011490 <__lshift+0xac>
 80114ba:	bf00      	nop
 80114bc:	0803ca35 	.word	0x0803ca35
 80114c0:	0803cb08 	.word	0x0803cb08

080114c4 <__mcmp>:
 80114c4:	b530      	push	{r4, r5, lr}
 80114c6:	6902      	ldr	r2, [r0, #16]
 80114c8:	690c      	ldr	r4, [r1, #16]
 80114ca:	1b12      	subs	r2, r2, r4
 80114cc:	d10e      	bne.n	80114ec <__mcmp+0x28>
 80114ce:	f100 0314 	add.w	r3, r0, #20
 80114d2:	3114      	adds	r1, #20
 80114d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80114d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80114dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80114e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80114e4:	42a5      	cmp	r5, r4
 80114e6:	d003      	beq.n	80114f0 <__mcmp+0x2c>
 80114e8:	d305      	bcc.n	80114f6 <__mcmp+0x32>
 80114ea:	2201      	movs	r2, #1
 80114ec:	4610      	mov	r0, r2
 80114ee:	bd30      	pop	{r4, r5, pc}
 80114f0:	4283      	cmp	r3, r0
 80114f2:	d3f3      	bcc.n	80114dc <__mcmp+0x18>
 80114f4:	e7fa      	b.n	80114ec <__mcmp+0x28>
 80114f6:	f04f 32ff 	mov.w	r2, #4294967295
 80114fa:	e7f7      	b.n	80114ec <__mcmp+0x28>

080114fc <__mdiff>:
 80114fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011500:	460c      	mov	r4, r1
 8011502:	4606      	mov	r6, r0
 8011504:	4611      	mov	r1, r2
 8011506:	4620      	mov	r0, r4
 8011508:	4690      	mov	r8, r2
 801150a:	f7ff ffdb 	bl	80114c4 <__mcmp>
 801150e:	1e05      	subs	r5, r0, #0
 8011510:	d110      	bne.n	8011534 <__mdiff+0x38>
 8011512:	4629      	mov	r1, r5
 8011514:	4630      	mov	r0, r6
 8011516:	f7ff fd53 	bl	8010fc0 <_Balloc>
 801151a:	b930      	cbnz	r0, 801152a <__mdiff+0x2e>
 801151c:	4b3a      	ldr	r3, [pc, #232]	; (8011608 <__mdiff+0x10c>)
 801151e:	4602      	mov	r2, r0
 8011520:	f240 2132 	movw	r1, #562	; 0x232
 8011524:	4839      	ldr	r0, [pc, #228]	; (801160c <__mdiff+0x110>)
 8011526:	f7fb ffbb 	bl	800d4a0 <__assert_func>
 801152a:	2301      	movs	r3, #1
 801152c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011534:	bfa4      	itt	ge
 8011536:	4643      	movge	r3, r8
 8011538:	46a0      	movge	r8, r4
 801153a:	4630      	mov	r0, r6
 801153c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011540:	bfa6      	itte	ge
 8011542:	461c      	movge	r4, r3
 8011544:	2500      	movge	r5, #0
 8011546:	2501      	movlt	r5, #1
 8011548:	f7ff fd3a 	bl	8010fc0 <_Balloc>
 801154c:	b920      	cbnz	r0, 8011558 <__mdiff+0x5c>
 801154e:	4b2e      	ldr	r3, [pc, #184]	; (8011608 <__mdiff+0x10c>)
 8011550:	4602      	mov	r2, r0
 8011552:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011556:	e7e5      	b.n	8011524 <__mdiff+0x28>
 8011558:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801155c:	6926      	ldr	r6, [r4, #16]
 801155e:	60c5      	str	r5, [r0, #12]
 8011560:	f104 0914 	add.w	r9, r4, #20
 8011564:	f108 0514 	add.w	r5, r8, #20
 8011568:	f100 0e14 	add.w	lr, r0, #20
 801156c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011570:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011574:	f108 0210 	add.w	r2, r8, #16
 8011578:	46f2      	mov	sl, lr
 801157a:	2100      	movs	r1, #0
 801157c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011580:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011584:	fa1f f883 	uxth.w	r8, r3
 8011588:	fa11 f18b 	uxtah	r1, r1, fp
 801158c:	0c1b      	lsrs	r3, r3, #16
 801158e:	eba1 0808 	sub.w	r8, r1, r8
 8011592:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011596:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801159a:	fa1f f888 	uxth.w	r8, r8
 801159e:	1419      	asrs	r1, r3, #16
 80115a0:	454e      	cmp	r6, r9
 80115a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80115a6:	f84a 3b04 	str.w	r3, [sl], #4
 80115aa:	d8e7      	bhi.n	801157c <__mdiff+0x80>
 80115ac:	1b33      	subs	r3, r6, r4
 80115ae:	3b15      	subs	r3, #21
 80115b0:	f023 0303 	bic.w	r3, r3, #3
 80115b4:	3304      	adds	r3, #4
 80115b6:	3415      	adds	r4, #21
 80115b8:	42a6      	cmp	r6, r4
 80115ba:	bf38      	it	cc
 80115bc:	2304      	movcc	r3, #4
 80115be:	441d      	add	r5, r3
 80115c0:	4473      	add	r3, lr
 80115c2:	469e      	mov	lr, r3
 80115c4:	462e      	mov	r6, r5
 80115c6:	4566      	cmp	r6, ip
 80115c8:	d30e      	bcc.n	80115e8 <__mdiff+0xec>
 80115ca:	f10c 0203 	add.w	r2, ip, #3
 80115ce:	1b52      	subs	r2, r2, r5
 80115d0:	f022 0203 	bic.w	r2, r2, #3
 80115d4:	3d03      	subs	r5, #3
 80115d6:	45ac      	cmp	ip, r5
 80115d8:	bf38      	it	cc
 80115da:	2200      	movcc	r2, #0
 80115dc:	441a      	add	r2, r3
 80115de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80115e2:	b17b      	cbz	r3, 8011604 <__mdiff+0x108>
 80115e4:	6107      	str	r7, [r0, #16]
 80115e6:	e7a3      	b.n	8011530 <__mdiff+0x34>
 80115e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80115ec:	fa11 f288 	uxtah	r2, r1, r8
 80115f0:	1414      	asrs	r4, r2, #16
 80115f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80115f6:	b292      	uxth	r2, r2
 80115f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80115fc:	f84e 2b04 	str.w	r2, [lr], #4
 8011600:	1421      	asrs	r1, r4, #16
 8011602:	e7e0      	b.n	80115c6 <__mdiff+0xca>
 8011604:	3f01      	subs	r7, #1
 8011606:	e7ea      	b.n	80115de <__mdiff+0xe2>
 8011608:	0803ca35 	.word	0x0803ca35
 801160c:	0803cb08 	.word	0x0803cb08

08011610 <__d2b>:
 8011610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011614:	4689      	mov	r9, r1
 8011616:	2101      	movs	r1, #1
 8011618:	ec57 6b10 	vmov	r6, r7, d0
 801161c:	4690      	mov	r8, r2
 801161e:	f7ff fccf 	bl	8010fc0 <_Balloc>
 8011622:	4604      	mov	r4, r0
 8011624:	b930      	cbnz	r0, 8011634 <__d2b+0x24>
 8011626:	4602      	mov	r2, r0
 8011628:	4b25      	ldr	r3, [pc, #148]	; (80116c0 <__d2b+0xb0>)
 801162a:	4826      	ldr	r0, [pc, #152]	; (80116c4 <__d2b+0xb4>)
 801162c:	f240 310a 	movw	r1, #778	; 0x30a
 8011630:	f7fb ff36 	bl	800d4a0 <__assert_func>
 8011634:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801163c:	bb35      	cbnz	r5, 801168c <__d2b+0x7c>
 801163e:	2e00      	cmp	r6, #0
 8011640:	9301      	str	r3, [sp, #4]
 8011642:	d028      	beq.n	8011696 <__d2b+0x86>
 8011644:	4668      	mov	r0, sp
 8011646:	9600      	str	r6, [sp, #0]
 8011648:	f7ff fd82 	bl	8011150 <__lo0bits>
 801164c:	9900      	ldr	r1, [sp, #0]
 801164e:	b300      	cbz	r0, 8011692 <__d2b+0x82>
 8011650:	9a01      	ldr	r2, [sp, #4]
 8011652:	f1c0 0320 	rsb	r3, r0, #32
 8011656:	fa02 f303 	lsl.w	r3, r2, r3
 801165a:	430b      	orrs	r3, r1
 801165c:	40c2      	lsrs	r2, r0
 801165e:	6163      	str	r3, [r4, #20]
 8011660:	9201      	str	r2, [sp, #4]
 8011662:	9b01      	ldr	r3, [sp, #4]
 8011664:	61a3      	str	r3, [r4, #24]
 8011666:	2b00      	cmp	r3, #0
 8011668:	bf14      	ite	ne
 801166a:	2202      	movne	r2, #2
 801166c:	2201      	moveq	r2, #1
 801166e:	6122      	str	r2, [r4, #16]
 8011670:	b1d5      	cbz	r5, 80116a8 <__d2b+0x98>
 8011672:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011676:	4405      	add	r5, r0
 8011678:	f8c9 5000 	str.w	r5, [r9]
 801167c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011680:	f8c8 0000 	str.w	r0, [r8]
 8011684:	4620      	mov	r0, r4
 8011686:	b003      	add	sp, #12
 8011688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801168c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011690:	e7d5      	b.n	801163e <__d2b+0x2e>
 8011692:	6161      	str	r1, [r4, #20]
 8011694:	e7e5      	b.n	8011662 <__d2b+0x52>
 8011696:	a801      	add	r0, sp, #4
 8011698:	f7ff fd5a 	bl	8011150 <__lo0bits>
 801169c:	9b01      	ldr	r3, [sp, #4]
 801169e:	6163      	str	r3, [r4, #20]
 80116a0:	2201      	movs	r2, #1
 80116a2:	6122      	str	r2, [r4, #16]
 80116a4:	3020      	adds	r0, #32
 80116a6:	e7e3      	b.n	8011670 <__d2b+0x60>
 80116a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80116ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80116b0:	f8c9 0000 	str.w	r0, [r9]
 80116b4:	6918      	ldr	r0, [r3, #16]
 80116b6:	f7ff fd2b 	bl	8011110 <__hi0bits>
 80116ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80116be:	e7df      	b.n	8011680 <__d2b+0x70>
 80116c0:	0803ca35 	.word	0x0803ca35
 80116c4:	0803cb08 	.word	0x0803cb08

080116c8 <_calloc_r>:
 80116c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80116ca:	fba1 2402 	umull	r2, r4, r1, r2
 80116ce:	b94c      	cbnz	r4, 80116e4 <_calloc_r+0x1c>
 80116d0:	4611      	mov	r1, r2
 80116d2:	9201      	str	r2, [sp, #4]
 80116d4:	f7fc fa40 	bl	800db58 <_malloc_r>
 80116d8:	9a01      	ldr	r2, [sp, #4]
 80116da:	4605      	mov	r5, r0
 80116dc:	b930      	cbnz	r0, 80116ec <_calloc_r+0x24>
 80116de:	4628      	mov	r0, r5
 80116e0:	b003      	add	sp, #12
 80116e2:	bd30      	pop	{r4, r5, pc}
 80116e4:	220c      	movs	r2, #12
 80116e6:	6002      	str	r2, [r0, #0]
 80116e8:	2500      	movs	r5, #0
 80116ea:	e7f8      	b.n	80116de <_calloc_r+0x16>
 80116ec:	4621      	mov	r1, r4
 80116ee:	f7fb ff4d 	bl	800d58c <memset>
 80116f2:	e7f4      	b.n	80116de <_calloc_r+0x16>

080116f4 <_realloc_r>:
 80116f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116f8:	4680      	mov	r8, r0
 80116fa:	4614      	mov	r4, r2
 80116fc:	460e      	mov	r6, r1
 80116fe:	b921      	cbnz	r1, 801170a <_realloc_r+0x16>
 8011700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011704:	4611      	mov	r1, r2
 8011706:	f7fc ba27 	b.w	800db58 <_malloc_r>
 801170a:	b92a      	cbnz	r2, 8011718 <_realloc_r+0x24>
 801170c:	f7fc f9b8 	bl	800da80 <_free_r>
 8011710:	4625      	mov	r5, r4
 8011712:	4628      	mov	r0, r5
 8011714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011718:	f000 fdea 	bl	80122f0 <_malloc_usable_size_r>
 801171c:	4284      	cmp	r4, r0
 801171e:	4607      	mov	r7, r0
 8011720:	d802      	bhi.n	8011728 <_realloc_r+0x34>
 8011722:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011726:	d812      	bhi.n	801174e <_realloc_r+0x5a>
 8011728:	4621      	mov	r1, r4
 801172a:	4640      	mov	r0, r8
 801172c:	f7fc fa14 	bl	800db58 <_malloc_r>
 8011730:	4605      	mov	r5, r0
 8011732:	2800      	cmp	r0, #0
 8011734:	d0ed      	beq.n	8011712 <_realloc_r+0x1e>
 8011736:	42bc      	cmp	r4, r7
 8011738:	4622      	mov	r2, r4
 801173a:	4631      	mov	r1, r6
 801173c:	bf28      	it	cs
 801173e:	463a      	movcs	r2, r7
 8011740:	f7fb ff16 	bl	800d570 <memcpy>
 8011744:	4631      	mov	r1, r6
 8011746:	4640      	mov	r0, r8
 8011748:	f7fc f99a 	bl	800da80 <_free_r>
 801174c:	e7e1      	b.n	8011712 <_realloc_r+0x1e>
 801174e:	4635      	mov	r5, r6
 8011750:	e7df      	b.n	8011712 <_realloc_r+0x1e>

08011752 <__ssputs_r>:
 8011752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011756:	688e      	ldr	r6, [r1, #8]
 8011758:	429e      	cmp	r6, r3
 801175a:	4682      	mov	sl, r0
 801175c:	460c      	mov	r4, r1
 801175e:	4690      	mov	r8, r2
 8011760:	461f      	mov	r7, r3
 8011762:	d838      	bhi.n	80117d6 <__ssputs_r+0x84>
 8011764:	898a      	ldrh	r2, [r1, #12]
 8011766:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801176a:	d032      	beq.n	80117d2 <__ssputs_r+0x80>
 801176c:	6825      	ldr	r5, [r4, #0]
 801176e:	6909      	ldr	r1, [r1, #16]
 8011770:	eba5 0901 	sub.w	r9, r5, r1
 8011774:	6965      	ldr	r5, [r4, #20]
 8011776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801177a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801177e:	3301      	adds	r3, #1
 8011780:	444b      	add	r3, r9
 8011782:	106d      	asrs	r5, r5, #1
 8011784:	429d      	cmp	r5, r3
 8011786:	bf38      	it	cc
 8011788:	461d      	movcc	r5, r3
 801178a:	0553      	lsls	r3, r2, #21
 801178c:	d531      	bpl.n	80117f2 <__ssputs_r+0xa0>
 801178e:	4629      	mov	r1, r5
 8011790:	f7fc f9e2 	bl	800db58 <_malloc_r>
 8011794:	4606      	mov	r6, r0
 8011796:	b950      	cbnz	r0, 80117ae <__ssputs_r+0x5c>
 8011798:	230c      	movs	r3, #12
 801179a:	f8ca 3000 	str.w	r3, [sl]
 801179e:	89a3      	ldrh	r3, [r4, #12]
 80117a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117a4:	81a3      	strh	r3, [r4, #12]
 80117a6:	f04f 30ff 	mov.w	r0, #4294967295
 80117aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ae:	6921      	ldr	r1, [r4, #16]
 80117b0:	464a      	mov	r2, r9
 80117b2:	f7fb fedd 	bl	800d570 <memcpy>
 80117b6:	89a3      	ldrh	r3, [r4, #12]
 80117b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80117bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117c0:	81a3      	strh	r3, [r4, #12]
 80117c2:	6126      	str	r6, [r4, #16]
 80117c4:	6165      	str	r5, [r4, #20]
 80117c6:	444e      	add	r6, r9
 80117c8:	eba5 0509 	sub.w	r5, r5, r9
 80117cc:	6026      	str	r6, [r4, #0]
 80117ce:	60a5      	str	r5, [r4, #8]
 80117d0:	463e      	mov	r6, r7
 80117d2:	42be      	cmp	r6, r7
 80117d4:	d900      	bls.n	80117d8 <__ssputs_r+0x86>
 80117d6:	463e      	mov	r6, r7
 80117d8:	6820      	ldr	r0, [r4, #0]
 80117da:	4632      	mov	r2, r6
 80117dc:	4641      	mov	r1, r8
 80117de:	f7ff fbc9 	bl	8010f74 <memmove>
 80117e2:	68a3      	ldr	r3, [r4, #8]
 80117e4:	1b9b      	subs	r3, r3, r6
 80117e6:	60a3      	str	r3, [r4, #8]
 80117e8:	6823      	ldr	r3, [r4, #0]
 80117ea:	4433      	add	r3, r6
 80117ec:	6023      	str	r3, [r4, #0]
 80117ee:	2000      	movs	r0, #0
 80117f0:	e7db      	b.n	80117aa <__ssputs_r+0x58>
 80117f2:	462a      	mov	r2, r5
 80117f4:	f7ff ff7e 	bl	80116f4 <_realloc_r>
 80117f8:	4606      	mov	r6, r0
 80117fa:	2800      	cmp	r0, #0
 80117fc:	d1e1      	bne.n	80117c2 <__ssputs_r+0x70>
 80117fe:	6921      	ldr	r1, [r4, #16]
 8011800:	4650      	mov	r0, sl
 8011802:	f7fc f93d 	bl	800da80 <_free_r>
 8011806:	e7c7      	b.n	8011798 <__ssputs_r+0x46>

08011808 <_svfiprintf_r>:
 8011808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801180c:	4698      	mov	r8, r3
 801180e:	898b      	ldrh	r3, [r1, #12]
 8011810:	061b      	lsls	r3, r3, #24
 8011812:	b09d      	sub	sp, #116	; 0x74
 8011814:	4607      	mov	r7, r0
 8011816:	460d      	mov	r5, r1
 8011818:	4614      	mov	r4, r2
 801181a:	d50e      	bpl.n	801183a <_svfiprintf_r+0x32>
 801181c:	690b      	ldr	r3, [r1, #16]
 801181e:	b963      	cbnz	r3, 801183a <_svfiprintf_r+0x32>
 8011820:	2140      	movs	r1, #64	; 0x40
 8011822:	f7fc f999 	bl	800db58 <_malloc_r>
 8011826:	6028      	str	r0, [r5, #0]
 8011828:	6128      	str	r0, [r5, #16]
 801182a:	b920      	cbnz	r0, 8011836 <_svfiprintf_r+0x2e>
 801182c:	230c      	movs	r3, #12
 801182e:	603b      	str	r3, [r7, #0]
 8011830:	f04f 30ff 	mov.w	r0, #4294967295
 8011834:	e0d1      	b.n	80119da <_svfiprintf_r+0x1d2>
 8011836:	2340      	movs	r3, #64	; 0x40
 8011838:	616b      	str	r3, [r5, #20]
 801183a:	2300      	movs	r3, #0
 801183c:	9309      	str	r3, [sp, #36]	; 0x24
 801183e:	2320      	movs	r3, #32
 8011840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011844:	f8cd 800c 	str.w	r8, [sp, #12]
 8011848:	2330      	movs	r3, #48	; 0x30
 801184a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80119f4 <_svfiprintf_r+0x1ec>
 801184e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011852:	f04f 0901 	mov.w	r9, #1
 8011856:	4623      	mov	r3, r4
 8011858:	469a      	mov	sl, r3
 801185a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801185e:	b10a      	cbz	r2, 8011864 <_svfiprintf_r+0x5c>
 8011860:	2a25      	cmp	r2, #37	; 0x25
 8011862:	d1f9      	bne.n	8011858 <_svfiprintf_r+0x50>
 8011864:	ebba 0b04 	subs.w	fp, sl, r4
 8011868:	d00b      	beq.n	8011882 <_svfiprintf_r+0x7a>
 801186a:	465b      	mov	r3, fp
 801186c:	4622      	mov	r2, r4
 801186e:	4629      	mov	r1, r5
 8011870:	4638      	mov	r0, r7
 8011872:	f7ff ff6e 	bl	8011752 <__ssputs_r>
 8011876:	3001      	adds	r0, #1
 8011878:	f000 80aa 	beq.w	80119d0 <_svfiprintf_r+0x1c8>
 801187c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801187e:	445a      	add	r2, fp
 8011880:	9209      	str	r2, [sp, #36]	; 0x24
 8011882:	f89a 3000 	ldrb.w	r3, [sl]
 8011886:	2b00      	cmp	r3, #0
 8011888:	f000 80a2 	beq.w	80119d0 <_svfiprintf_r+0x1c8>
 801188c:	2300      	movs	r3, #0
 801188e:	f04f 32ff 	mov.w	r2, #4294967295
 8011892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011896:	f10a 0a01 	add.w	sl, sl, #1
 801189a:	9304      	str	r3, [sp, #16]
 801189c:	9307      	str	r3, [sp, #28]
 801189e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80118a2:	931a      	str	r3, [sp, #104]	; 0x68
 80118a4:	4654      	mov	r4, sl
 80118a6:	2205      	movs	r2, #5
 80118a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118ac:	4851      	ldr	r0, [pc, #324]	; (80119f4 <_svfiprintf_r+0x1ec>)
 80118ae:	f7ee fca7 	bl	8000200 <memchr>
 80118b2:	9a04      	ldr	r2, [sp, #16]
 80118b4:	b9d8      	cbnz	r0, 80118ee <_svfiprintf_r+0xe6>
 80118b6:	06d0      	lsls	r0, r2, #27
 80118b8:	bf44      	itt	mi
 80118ba:	2320      	movmi	r3, #32
 80118bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118c0:	0711      	lsls	r1, r2, #28
 80118c2:	bf44      	itt	mi
 80118c4:	232b      	movmi	r3, #43	; 0x2b
 80118c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118ca:	f89a 3000 	ldrb.w	r3, [sl]
 80118ce:	2b2a      	cmp	r3, #42	; 0x2a
 80118d0:	d015      	beq.n	80118fe <_svfiprintf_r+0xf6>
 80118d2:	9a07      	ldr	r2, [sp, #28]
 80118d4:	4654      	mov	r4, sl
 80118d6:	2000      	movs	r0, #0
 80118d8:	f04f 0c0a 	mov.w	ip, #10
 80118dc:	4621      	mov	r1, r4
 80118de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118e2:	3b30      	subs	r3, #48	; 0x30
 80118e4:	2b09      	cmp	r3, #9
 80118e6:	d94e      	bls.n	8011986 <_svfiprintf_r+0x17e>
 80118e8:	b1b0      	cbz	r0, 8011918 <_svfiprintf_r+0x110>
 80118ea:	9207      	str	r2, [sp, #28]
 80118ec:	e014      	b.n	8011918 <_svfiprintf_r+0x110>
 80118ee:	eba0 0308 	sub.w	r3, r0, r8
 80118f2:	fa09 f303 	lsl.w	r3, r9, r3
 80118f6:	4313      	orrs	r3, r2
 80118f8:	9304      	str	r3, [sp, #16]
 80118fa:	46a2      	mov	sl, r4
 80118fc:	e7d2      	b.n	80118a4 <_svfiprintf_r+0x9c>
 80118fe:	9b03      	ldr	r3, [sp, #12]
 8011900:	1d19      	adds	r1, r3, #4
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	9103      	str	r1, [sp, #12]
 8011906:	2b00      	cmp	r3, #0
 8011908:	bfbb      	ittet	lt
 801190a:	425b      	neglt	r3, r3
 801190c:	f042 0202 	orrlt.w	r2, r2, #2
 8011910:	9307      	strge	r3, [sp, #28]
 8011912:	9307      	strlt	r3, [sp, #28]
 8011914:	bfb8      	it	lt
 8011916:	9204      	strlt	r2, [sp, #16]
 8011918:	7823      	ldrb	r3, [r4, #0]
 801191a:	2b2e      	cmp	r3, #46	; 0x2e
 801191c:	d10c      	bne.n	8011938 <_svfiprintf_r+0x130>
 801191e:	7863      	ldrb	r3, [r4, #1]
 8011920:	2b2a      	cmp	r3, #42	; 0x2a
 8011922:	d135      	bne.n	8011990 <_svfiprintf_r+0x188>
 8011924:	9b03      	ldr	r3, [sp, #12]
 8011926:	1d1a      	adds	r2, r3, #4
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	9203      	str	r2, [sp, #12]
 801192c:	2b00      	cmp	r3, #0
 801192e:	bfb8      	it	lt
 8011930:	f04f 33ff 	movlt.w	r3, #4294967295
 8011934:	3402      	adds	r4, #2
 8011936:	9305      	str	r3, [sp, #20]
 8011938:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011a04 <_svfiprintf_r+0x1fc>
 801193c:	7821      	ldrb	r1, [r4, #0]
 801193e:	2203      	movs	r2, #3
 8011940:	4650      	mov	r0, sl
 8011942:	f7ee fc5d 	bl	8000200 <memchr>
 8011946:	b140      	cbz	r0, 801195a <_svfiprintf_r+0x152>
 8011948:	2340      	movs	r3, #64	; 0x40
 801194a:	eba0 000a 	sub.w	r0, r0, sl
 801194e:	fa03 f000 	lsl.w	r0, r3, r0
 8011952:	9b04      	ldr	r3, [sp, #16]
 8011954:	4303      	orrs	r3, r0
 8011956:	3401      	adds	r4, #1
 8011958:	9304      	str	r3, [sp, #16]
 801195a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801195e:	4826      	ldr	r0, [pc, #152]	; (80119f8 <_svfiprintf_r+0x1f0>)
 8011960:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011964:	2206      	movs	r2, #6
 8011966:	f7ee fc4b 	bl	8000200 <memchr>
 801196a:	2800      	cmp	r0, #0
 801196c:	d038      	beq.n	80119e0 <_svfiprintf_r+0x1d8>
 801196e:	4b23      	ldr	r3, [pc, #140]	; (80119fc <_svfiprintf_r+0x1f4>)
 8011970:	bb1b      	cbnz	r3, 80119ba <_svfiprintf_r+0x1b2>
 8011972:	9b03      	ldr	r3, [sp, #12]
 8011974:	3307      	adds	r3, #7
 8011976:	f023 0307 	bic.w	r3, r3, #7
 801197a:	3308      	adds	r3, #8
 801197c:	9303      	str	r3, [sp, #12]
 801197e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011980:	4433      	add	r3, r6
 8011982:	9309      	str	r3, [sp, #36]	; 0x24
 8011984:	e767      	b.n	8011856 <_svfiprintf_r+0x4e>
 8011986:	fb0c 3202 	mla	r2, ip, r2, r3
 801198a:	460c      	mov	r4, r1
 801198c:	2001      	movs	r0, #1
 801198e:	e7a5      	b.n	80118dc <_svfiprintf_r+0xd4>
 8011990:	2300      	movs	r3, #0
 8011992:	3401      	adds	r4, #1
 8011994:	9305      	str	r3, [sp, #20]
 8011996:	4619      	mov	r1, r3
 8011998:	f04f 0c0a 	mov.w	ip, #10
 801199c:	4620      	mov	r0, r4
 801199e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119a2:	3a30      	subs	r2, #48	; 0x30
 80119a4:	2a09      	cmp	r2, #9
 80119a6:	d903      	bls.n	80119b0 <_svfiprintf_r+0x1a8>
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d0c5      	beq.n	8011938 <_svfiprintf_r+0x130>
 80119ac:	9105      	str	r1, [sp, #20]
 80119ae:	e7c3      	b.n	8011938 <_svfiprintf_r+0x130>
 80119b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80119b4:	4604      	mov	r4, r0
 80119b6:	2301      	movs	r3, #1
 80119b8:	e7f0      	b.n	801199c <_svfiprintf_r+0x194>
 80119ba:	ab03      	add	r3, sp, #12
 80119bc:	9300      	str	r3, [sp, #0]
 80119be:	462a      	mov	r2, r5
 80119c0:	4b0f      	ldr	r3, [pc, #60]	; (8011a00 <_svfiprintf_r+0x1f8>)
 80119c2:	a904      	add	r1, sp, #16
 80119c4:	4638      	mov	r0, r7
 80119c6:	f7fc fb35 	bl	800e034 <_printf_float>
 80119ca:	1c42      	adds	r2, r0, #1
 80119cc:	4606      	mov	r6, r0
 80119ce:	d1d6      	bne.n	801197e <_svfiprintf_r+0x176>
 80119d0:	89ab      	ldrh	r3, [r5, #12]
 80119d2:	065b      	lsls	r3, r3, #25
 80119d4:	f53f af2c 	bmi.w	8011830 <_svfiprintf_r+0x28>
 80119d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119da:	b01d      	add	sp, #116	; 0x74
 80119dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e0:	ab03      	add	r3, sp, #12
 80119e2:	9300      	str	r3, [sp, #0]
 80119e4:	462a      	mov	r2, r5
 80119e6:	4b06      	ldr	r3, [pc, #24]	; (8011a00 <_svfiprintf_r+0x1f8>)
 80119e8:	a904      	add	r1, sp, #16
 80119ea:	4638      	mov	r0, r7
 80119ec:	f7fc fdc6 	bl	800e57c <_printf_i>
 80119f0:	e7eb      	b.n	80119ca <_svfiprintf_r+0x1c2>
 80119f2:	bf00      	nop
 80119f4:	0803c570 	.word	0x0803c570
 80119f8:	0803c57a 	.word	0x0803c57a
 80119fc:	0800e035 	.word	0x0800e035
 8011a00:	08011753 	.word	0x08011753
 8011a04:	0803c576 	.word	0x0803c576

08011a08 <_sungetc_r>:
 8011a08:	b538      	push	{r3, r4, r5, lr}
 8011a0a:	1c4b      	adds	r3, r1, #1
 8011a0c:	4614      	mov	r4, r2
 8011a0e:	d103      	bne.n	8011a18 <_sungetc_r+0x10>
 8011a10:	f04f 35ff 	mov.w	r5, #4294967295
 8011a14:	4628      	mov	r0, r5
 8011a16:	bd38      	pop	{r3, r4, r5, pc}
 8011a18:	8993      	ldrh	r3, [r2, #12]
 8011a1a:	f023 0320 	bic.w	r3, r3, #32
 8011a1e:	8193      	strh	r3, [r2, #12]
 8011a20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a22:	6852      	ldr	r2, [r2, #4]
 8011a24:	b2cd      	uxtb	r5, r1
 8011a26:	b18b      	cbz	r3, 8011a4c <_sungetc_r+0x44>
 8011a28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	dd08      	ble.n	8011a40 <_sungetc_r+0x38>
 8011a2e:	6823      	ldr	r3, [r4, #0]
 8011a30:	1e5a      	subs	r2, r3, #1
 8011a32:	6022      	str	r2, [r4, #0]
 8011a34:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011a38:	6863      	ldr	r3, [r4, #4]
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	6063      	str	r3, [r4, #4]
 8011a3e:	e7e9      	b.n	8011a14 <_sungetc_r+0xc>
 8011a40:	4621      	mov	r1, r4
 8011a42:	f000 fbdb 	bl	80121fc <__submore>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	d0f1      	beq.n	8011a2e <_sungetc_r+0x26>
 8011a4a:	e7e1      	b.n	8011a10 <_sungetc_r+0x8>
 8011a4c:	6921      	ldr	r1, [r4, #16]
 8011a4e:	6823      	ldr	r3, [r4, #0]
 8011a50:	b151      	cbz	r1, 8011a68 <_sungetc_r+0x60>
 8011a52:	4299      	cmp	r1, r3
 8011a54:	d208      	bcs.n	8011a68 <_sungetc_r+0x60>
 8011a56:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011a5a:	42a9      	cmp	r1, r5
 8011a5c:	d104      	bne.n	8011a68 <_sungetc_r+0x60>
 8011a5e:	3b01      	subs	r3, #1
 8011a60:	3201      	adds	r2, #1
 8011a62:	6023      	str	r3, [r4, #0]
 8011a64:	6062      	str	r2, [r4, #4]
 8011a66:	e7d5      	b.n	8011a14 <_sungetc_r+0xc>
 8011a68:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a70:	6363      	str	r3, [r4, #52]	; 0x34
 8011a72:	2303      	movs	r3, #3
 8011a74:	63a3      	str	r3, [r4, #56]	; 0x38
 8011a76:	4623      	mov	r3, r4
 8011a78:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011a7c:	6023      	str	r3, [r4, #0]
 8011a7e:	2301      	movs	r3, #1
 8011a80:	e7dc      	b.n	8011a3c <_sungetc_r+0x34>

08011a82 <__ssrefill_r>:
 8011a82:	b510      	push	{r4, lr}
 8011a84:	460c      	mov	r4, r1
 8011a86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011a88:	b169      	cbz	r1, 8011aa6 <__ssrefill_r+0x24>
 8011a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a8e:	4299      	cmp	r1, r3
 8011a90:	d001      	beq.n	8011a96 <__ssrefill_r+0x14>
 8011a92:	f7fb fff5 	bl	800da80 <_free_r>
 8011a96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a98:	6063      	str	r3, [r4, #4]
 8011a9a:	2000      	movs	r0, #0
 8011a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8011a9e:	b113      	cbz	r3, 8011aa6 <__ssrefill_r+0x24>
 8011aa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011aa2:	6023      	str	r3, [r4, #0]
 8011aa4:	bd10      	pop	{r4, pc}
 8011aa6:	6923      	ldr	r3, [r4, #16]
 8011aa8:	6023      	str	r3, [r4, #0]
 8011aaa:	2300      	movs	r3, #0
 8011aac:	6063      	str	r3, [r4, #4]
 8011aae:	89a3      	ldrh	r3, [r4, #12]
 8011ab0:	f043 0320 	orr.w	r3, r3, #32
 8011ab4:	81a3      	strh	r3, [r4, #12]
 8011ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8011aba:	e7f3      	b.n	8011aa4 <__ssrefill_r+0x22>

08011abc <__ssvfiscanf_r>:
 8011abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac0:	460c      	mov	r4, r1
 8011ac2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011ac6:	2100      	movs	r1, #0
 8011ac8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011acc:	49a6      	ldr	r1, [pc, #664]	; (8011d68 <__ssvfiscanf_r+0x2ac>)
 8011ace:	91a0      	str	r1, [sp, #640]	; 0x280
 8011ad0:	f10d 0804 	add.w	r8, sp, #4
 8011ad4:	49a5      	ldr	r1, [pc, #660]	; (8011d6c <__ssvfiscanf_r+0x2b0>)
 8011ad6:	4fa6      	ldr	r7, [pc, #664]	; (8011d70 <__ssvfiscanf_r+0x2b4>)
 8011ad8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011d74 <__ssvfiscanf_r+0x2b8>
 8011adc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011ae0:	4606      	mov	r6, r0
 8011ae2:	91a1      	str	r1, [sp, #644]	; 0x284
 8011ae4:	9300      	str	r3, [sp, #0]
 8011ae6:	7813      	ldrb	r3, [r2, #0]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	f000 815a 	beq.w	8011da2 <__ssvfiscanf_r+0x2e6>
 8011aee:	5dd9      	ldrb	r1, [r3, r7]
 8011af0:	f011 0108 	ands.w	r1, r1, #8
 8011af4:	f102 0501 	add.w	r5, r2, #1
 8011af8:	d019      	beq.n	8011b2e <__ssvfiscanf_r+0x72>
 8011afa:	6863      	ldr	r3, [r4, #4]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	dd0f      	ble.n	8011b20 <__ssvfiscanf_r+0x64>
 8011b00:	6823      	ldr	r3, [r4, #0]
 8011b02:	781a      	ldrb	r2, [r3, #0]
 8011b04:	5cba      	ldrb	r2, [r7, r2]
 8011b06:	0712      	lsls	r2, r2, #28
 8011b08:	d401      	bmi.n	8011b0e <__ssvfiscanf_r+0x52>
 8011b0a:	462a      	mov	r2, r5
 8011b0c:	e7eb      	b.n	8011ae6 <__ssvfiscanf_r+0x2a>
 8011b0e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011b10:	3201      	adds	r2, #1
 8011b12:	9245      	str	r2, [sp, #276]	; 0x114
 8011b14:	6862      	ldr	r2, [r4, #4]
 8011b16:	3301      	adds	r3, #1
 8011b18:	3a01      	subs	r2, #1
 8011b1a:	6062      	str	r2, [r4, #4]
 8011b1c:	6023      	str	r3, [r4, #0]
 8011b1e:	e7ec      	b.n	8011afa <__ssvfiscanf_r+0x3e>
 8011b20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011b22:	4621      	mov	r1, r4
 8011b24:	4630      	mov	r0, r6
 8011b26:	4798      	blx	r3
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	d0e9      	beq.n	8011b00 <__ssvfiscanf_r+0x44>
 8011b2c:	e7ed      	b.n	8011b0a <__ssvfiscanf_r+0x4e>
 8011b2e:	2b25      	cmp	r3, #37	; 0x25
 8011b30:	d012      	beq.n	8011b58 <__ssvfiscanf_r+0x9c>
 8011b32:	469a      	mov	sl, r3
 8011b34:	6863      	ldr	r3, [r4, #4]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	f340 8091 	ble.w	8011c5e <__ssvfiscanf_r+0x1a2>
 8011b3c:	6822      	ldr	r2, [r4, #0]
 8011b3e:	7813      	ldrb	r3, [r2, #0]
 8011b40:	4553      	cmp	r3, sl
 8011b42:	f040 812e 	bne.w	8011da2 <__ssvfiscanf_r+0x2e6>
 8011b46:	6863      	ldr	r3, [r4, #4]
 8011b48:	3b01      	subs	r3, #1
 8011b4a:	6063      	str	r3, [r4, #4]
 8011b4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011b4e:	3201      	adds	r2, #1
 8011b50:	3301      	adds	r3, #1
 8011b52:	6022      	str	r2, [r4, #0]
 8011b54:	9345      	str	r3, [sp, #276]	; 0x114
 8011b56:	e7d8      	b.n	8011b0a <__ssvfiscanf_r+0x4e>
 8011b58:	9141      	str	r1, [sp, #260]	; 0x104
 8011b5a:	9143      	str	r1, [sp, #268]	; 0x10c
 8011b5c:	7853      	ldrb	r3, [r2, #1]
 8011b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8011b60:	bf02      	ittt	eq
 8011b62:	2310      	moveq	r3, #16
 8011b64:	1c95      	addeq	r5, r2, #2
 8011b66:	9341      	streq	r3, [sp, #260]	; 0x104
 8011b68:	220a      	movs	r2, #10
 8011b6a:	46aa      	mov	sl, r5
 8011b6c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011b70:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011b74:	2b09      	cmp	r3, #9
 8011b76:	d91d      	bls.n	8011bb4 <__ssvfiscanf_r+0xf8>
 8011b78:	487e      	ldr	r0, [pc, #504]	; (8011d74 <__ssvfiscanf_r+0x2b8>)
 8011b7a:	2203      	movs	r2, #3
 8011b7c:	f7ee fb40 	bl	8000200 <memchr>
 8011b80:	b140      	cbz	r0, 8011b94 <__ssvfiscanf_r+0xd8>
 8011b82:	2301      	movs	r3, #1
 8011b84:	eba0 0009 	sub.w	r0, r0, r9
 8011b88:	fa03 f000 	lsl.w	r0, r3, r0
 8011b8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011b8e:	4318      	orrs	r0, r3
 8011b90:	9041      	str	r0, [sp, #260]	; 0x104
 8011b92:	4655      	mov	r5, sl
 8011b94:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011b98:	2b78      	cmp	r3, #120	; 0x78
 8011b9a:	d806      	bhi.n	8011baa <__ssvfiscanf_r+0xee>
 8011b9c:	2b57      	cmp	r3, #87	; 0x57
 8011b9e:	d810      	bhi.n	8011bc2 <__ssvfiscanf_r+0x106>
 8011ba0:	2b25      	cmp	r3, #37	; 0x25
 8011ba2:	d0c6      	beq.n	8011b32 <__ssvfiscanf_r+0x76>
 8011ba4:	d856      	bhi.n	8011c54 <__ssvfiscanf_r+0x198>
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d064      	beq.n	8011c74 <__ssvfiscanf_r+0x1b8>
 8011baa:	2303      	movs	r3, #3
 8011bac:	9347      	str	r3, [sp, #284]	; 0x11c
 8011bae:	230a      	movs	r3, #10
 8011bb0:	9342      	str	r3, [sp, #264]	; 0x108
 8011bb2:	e071      	b.n	8011c98 <__ssvfiscanf_r+0x1dc>
 8011bb4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011bb6:	fb02 1103 	mla	r1, r2, r3, r1
 8011bba:	3930      	subs	r1, #48	; 0x30
 8011bbc:	9143      	str	r1, [sp, #268]	; 0x10c
 8011bbe:	4655      	mov	r5, sl
 8011bc0:	e7d3      	b.n	8011b6a <__ssvfiscanf_r+0xae>
 8011bc2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011bc6:	2a20      	cmp	r2, #32
 8011bc8:	d8ef      	bhi.n	8011baa <__ssvfiscanf_r+0xee>
 8011bca:	a101      	add	r1, pc, #4	; (adr r1, 8011bd0 <__ssvfiscanf_r+0x114>)
 8011bcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011bd0:	08011c83 	.word	0x08011c83
 8011bd4:	08011bab 	.word	0x08011bab
 8011bd8:	08011bab 	.word	0x08011bab
 8011bdc:	08011ce1 	.word	0x08011ce1
 8011be0:	08011bab 	.word	0x08011bab
 8011be4:	08011bab 	.word	0x08011bab
 8011be8:	08011bab 	.word	0x08011bab
 8011bec:	08011bab 	.word	0x08011bab
 8011bf0:	08011bab 	.word	0x08011bab
 8011bf4:	08011bab 	.word	0x08011bab
 8011bf8:	08011bab 	.word	0x08011bab
 8011bfc:	08011cf7 	.word	0x08011cf7
 8011c00:	08011ccd 	.word	0x08011ccd
 8011c04:	08011c5b 	.word	0x08011c5b
 8011c08:	08011c5b 	.word	0x08011c5b
 8011c0c:	08011c5b 	.word	0x08011c5b
 8011c10:	08011bab 	.word	0x08011bab
 8011c14:	08011cd1 	.word	0x08011cd1
 8011c18:	08011bab 	.word	0x08011bab
 8011c1c:	08011bab 	.word	0x08011bab
 8011c20:	08011bab 	.word	0x08011bab
 8011c24:	08011bab 	.word	0x08011bab
 8011c28:	08011d07 	.word	0x08011d07
 8011c2c:	08011cd9 	.word	0x08011cd9
 8011c30:	08011c7b 	.word	0x08011c7b
 8011c34:	08011bab 	.word	0x08011bab
 8011c38:	08011bab 	.word	0x08011bab
 8011c3c:	08011d03 	.word	0x08011d03
 8011c40:	08011bab 	.word	0x08011bab
 8011c44:	08011ccd 	.word	0x08011ccd
 8011c48:	08011bab 	.word	0x08011bab
 8011c4c:	08011bab 	.word	0x08011bab
 8011c50:	08011c83 	.word	0x08011c83
 8011c54:	3b45      	subs	r3, #69	; 0x45
 8011c56:	2b02      	cmp	r3, #2
 8011c58:	d8a7      	bhi.n	8011baa <__ssvfiscanf_r+0xee>
 8011c5a:	2305      	movs	r3, #5
 8011c5c:	e01b      	b.n	8011c96 <__ssvfiscanf_r+0x1da>
 8011c5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011c60:	4621      	mov	r1, r4
 8011c62:	4630      	mov	r0, r6
 8011c64:	4798      	blx	r3
 8011c66:	2800      	cmp	r0, #0
 8011c68:	f43f af68 	beq.w	8011b3c <__ssvfiscanf_r+0x80>
 8011c6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	f040 808d 	bne.w	8011d8e <__ssvfiscanf_r+0x2d2>
 8011c74:	f04f 30ff 	mov.w	r0, #4294967295
 8011c78:	e08f      	b.n	8011d9a <__ssvfiscanf_r+0x2de>
 8011c7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011c7c:	f042 0220 	orr.w	r2, r2, #32
 8011c80:	9241      	str	r2, [sp, #260]	; 0x104
 8011c82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011c88:	9241      	str	r2, [sp, #260]	; 0x104
 8011c8a:	2210      	movs	r2, #16
 8011c8c:	2b6f      	cmp	r3, #111	; 0x6f
 8011c8e:	9242      	str	r2, [sp, #264]	; 0x108
 8011c90:	bf34      	ite	cc
 8011c92:	2303      	movcc	r3, #3
 8011c94:	2304      	movcs	r3, #4
 8011c96:	9347      	str	r3, [sp, #284]	; 0x11c
 8011c98:	6863      	ldr	r3, [r4, #4]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	dd42      	ble.n	8011d24 <__ssvfiscanf_r+0x268>
 8011c9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011ca0:	0659      	lsls	r1, r3, #25
 8011ca2:	d404      	bmi.n	8011cae <__ssvfiscanf_r+0x1f2>
 8011ca4:	6823      	ldr	r3, [r4, #0]
 8011ca6:	781a      	ldrb	r2, [r3, #0]
 8011ca8:	5cba      	ldrb	r2, [r7, r2]
 8011caa:	0712      	lsls	r2, r2, #28
 8011cac:	d441      	bmi.n	8011d32 <__ssvfiscanf_r+0x276>
 8011cae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011cb0:	2b02      	cmp	r3, #2
 8011cb2:	dc50      	bgt.n	8011d56 <__ssvfiscanf_r+0x29a>
 8011cb4:	466b      	mov	r3, sp
 8011cb6:	4622      	mov	r2, r4
 8011cb8:	a941      	add	r1, sp, #260	; 0x104
 8011cba:	4630      	mov	r0, r6
 8011cbc:	f000 f876 	bl	8011dac <_scanf_chars>
 8011cc0:	2801      	cmp	r0, #1
 8011cc2:	d06e      	beq.n	8011da2 <__ssvfiscanf_r+0x2e6>
 8011cc4:	2802      	cmp	r0, #2
 8011cc6:	f47f af20 	bne.w	8011b0a <__ssvfiscanf_r+0x4e>
 8011cca:	e7cf      	b.n	8011c6c <__ssvfiscanf_r+0x1b0>
 8011ccc:	220a      	movs	r2, #10
 8011cce:	e7dd      	b.n	8011c8c <__ssvfiscanf_r+0x1d0>
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	9342      	str	r3, [sp, #264]	; 0x108
 8011cd4:	2303      	movs	r3, #3
 8011cd6:	e7de      	b.n	8011c96 <__ssvfiscanf_r+0x1da>
 8011cd8:	2308      	movs	r3, #8
 8011cda:	9342      	str	r3, [sp, #264]	; 0x108
 8011cdc:	2304      	movs	r3, #4
 8011cde:	e7da      	b.n	8011c96 <__ssvfiscanf_r+0x1da>
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	4640      	mov	r0, r8
 8011ce4:	f000 f9c6 	bl	8012074 <__sccl>
 8011ce8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cee:	9341      	str	r3, [sp, #260]	; 0x104
 8011cf0:	4605      	mov	r5, r0
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	e7cf      	b.n	8011c96 <__ssvfiscanf_r+0x1da>
 8011cf6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cfc:	9341      	str	r3, [sp, #260]	; 0x104
 8011cfe:	2300      	movs	r3, #0
 8011d00:	e7c9      	b.n	8011c96 <__ssvfiscanf_r+0x1da>
 8011d02:	2302      	movs	r3, #2
 8011d04:	e7c7      	b.n	8011c96 <__ssvfiscanf_r+0x1da>
 8011d06:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011d08:	06c3      	lsls	r3, r0, #27
 8011d0a:	f53f aefe 	bmi.w	8011b0a <__ssvfiscanf_r+0x4e>
 8011d0e:	9b00      	ldr	r3, [sp, #0]
 8011d10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011d12:	1d19      	adds	r1, r3, #4
 8011d14:	9100      	str	r1, [sp, #0]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f010 0f01 	tst.w	r0, #1
 8011d1c:	bf14      	ite	ne
 8011d1e:	801a      	strhne	r2, [r3, #0]
 8011d20:	601a      	streq	r2, [r3, #0]
 8011d22:	e6f2      	b.n	8011b0a <__ssvfiscanf_r+0x4e>
 8011d24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011d26:	4621      	mov	r1, r4
 8011d28:	4630      	mov	r0, r6
 8011d2a:	4798      	blx	r3
 8011d2c:	2800      	cmp	r0, #0
 8011d2e:	d0b6      	beq.n	8011c9e <__ssvfiscanf_r+0x1e2>
 8011d30:	e79c      	b.n	8011c6c <__ssvfiscanf_r+0x1b0>
 8011d32:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011d34:	3201      	adds	r2, #1
 8011d36:	9245      	str	r2, [sp, #276]	; 0x114
 8011d38:	6862      	ldr	r2, [r4, #4]
 8011d3a:	3a01      	subs	r2, #1
 8011d3c:	2a00      	cmp	r2, #0
 8011d3e:	6062      	str	r2, [r4, #4]
 8011d40:	dd02      	ble.n	8011d48 <__ssvfiscanf_r+0x28c>
 8011d42:	3301      	adds	r3, #1
 8011d44:	6023      	str	r3, [r4, #0]
 8011d46:	e7ad      	b.n	8011ca4 <__ssvfiscanf_r+0x1e8>
 8011d48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011d4a:	4621      	mov	r1, r4
 8011d4c:	4630      	mov	r0, r6
 8011d4e:	4798      	blx	r3
 8011d50:	2800      	cmp	r0, #0
 8011d52:	d0a7      	beq.n	8011ca4 <__ssvfiscanf_r+0x1e8>
 8011d54:	e78a      	b.n	8011c6c <__ssvfiscanf_r+0x1b0>
 8011d56:	2b04      	cmp	r3, #4
 8011d58:	dc0e      	bgt.n	8011d78 <__ssvfiscanf_r+0x2bc>
 8011d5a:	466b      	mov	r3, sp
 8011d5c:	4622      	mov	r2, r4
 8011d5e:	a941      	add	r1, sp, #260	; 0x104
 8011d60:	4630      	mov	r0, r6
 8011d62:	f000 f87d 	bl	8011e60 <_scanf_i>
 8011d66:	e7ab      	b.n	8011cc0 <__ssvfiscanf_r+0x204>
 8011d68:	08011a09 	.word	0x08011a09
 8011d6c:	08011a83 	.word	0x08011a83
 8011d70:	0803c8cd 	.word	0x0803c8cd
 8011d74:	0803c576 	.word	0x0803c576
 8011d78:	4b0b      	ldr	r3, [pc, #44]	; (8011da8 <__ssvfiscanf_r+0x2ec>)
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	f43f aec5 	beq.w	8011b0a <__ssvfiscanf_r+0x4e>
 8011d80:	466b      	mov	r3, sp
 8011d82:	4622      	mov	r2, r4
 8011d84:	a941      	add	r1, sp, #260	; 0x104
 8011d86:	4630      	mov	r0, r6
 8011d88:	f3af 8000 	nop.w
 8011d8c:	e798      	b.n	8011cc0 <__ssvfiscanf_r+0x204>
 8011d8e:	89a3      	ldrh	r3, [r4, #12]
 8011d90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011d94:	bf18      	it	ne
 8011d96:	f04f 30ff 	movne.w	r0, #4294967295
 8011d9a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011da2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011da4:	e7f9      	b.n	8011d9a <__ssvfiscanf_r+0x2de>
 8011da6:	bf00      	nop
 8011da8:	00000000 	.word	0x00000000

08011dac <_scanf_chars>:
 8011dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011db0:	4615      	mov	r5, r2
 8011db2:	688a      	ldr	r2, [r1, #8]
 8011db4:	4680      	mov	r8, r0
 8011db6:	460c      	mov	r4, r1
 8011db8:	b932      	cbnz	r2, 8011dc8 <_scanf_chars+0x1c>
 8011dba:	698a      	ldr	r2, [r1, #24]
 8011dbc:	2a00      	cmp	r2, #0
 8011dbe:	bf0c      	ite	eq
 8011dc0:	2201      	moveq	r2, #1
 8011dc2:	f04f 32ff 	movne.w	r2, #4294967295
 8011dc6:	608a      	str	r2, [r1, #8]
 8011dc8:	6822      	ldr	r2, [r4, #0]
 8011dca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011e5c <_scanf_chars+0xb0>
 8011dce:	06d1      	lsls	r1, r2, #27
 8011dd0:	bf5f      	itttt	pl
 8011dd2:	681a      	ldrpl	r2, [r3, #0]
 8011dd4:	1d11      	addpl	r1, r2, #4
 8011dd6:	6019      	strpl	r1, [r3, #0]
 8011dd8:	6816      	ldrpl	r6, [r2, #0]
 8011dda:	2700      	movs	r7, #0
 8011ddc:	69a0      	ldr	r0, [r4, #24]
 8011dde:	b188      	cbz	r0, 8011e04 <_scanf_chars+0x58>
 8011de0:	2801      	cmp	r0, #1
 8011de2:	d107      	bne.n	8011df4 <_scanf_chars+0x48>
 8011de4:	682a      	ldr	r2, [r5, #0]
 8011de6:	7811      	ldrb	r1, [r2, #0]
 8011de8:	6962      	ldr	r2, [r4, #20]
 8011dea:	5c52      	ldrb	r2, [r2, r1]
 8011dec:	b952      	cbnz	r2, 8011e04 <_scanf_chars+0x58>
 8011dee:	2f00      	cmp	r7, #0
 8011df0:	d031      	beq.n	8011e56 <_scanf_chars+0xaa>
 8011df2:	e022      	b.n	8011e3a <_scanf_chars+0x8e>
 8011df4:	2802      	cmp	r0, #2
 8011df6:	d120      	bne.n	8011e3a <_scanf_chars+0x8e>
 8011df8:	682b      	ldr	r3, [r5, #0]
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8011e00:	071b      	lsls	r3, r3, #28
 8011e02:	d41a      	bmi.n	8011e3a <_scanf_chars+0x8e>
 8011e04:	6823      	ldr	r3, [r4, #0]
 8011e06:	06da      	lsls	r2, r3, #27
 8011e08:	bf5e      	ittt	pl
 8011e0a:	682b      	ldrpl	r3, [r5, #0]
 8011e0c:	781b      	ldrbpl	r3, [r3, #0]
 8011e0e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011e12:	682a      	ldr	r2, [r5, #0]
 8011e14:	686b      	ldr	r3, [r5, #4]
 8011e16:	3201      	adds	r2, #1
 8011e18:	602a      	str	r2, [r5, #0]
 8011e1a:	68a2      	ldr	r2, [r4, #8]
 8011e1c:	3b01      	subs	r3, #1
 8011e1e:	3a01      	subs	r2, #1
 8011e20:	606b      	str	r3, [r5, #4]
 8011e22:	3701      	adds	r7, #1
 8011e24:	60a2      	str	r2, [r4, #8]
 8011e26:	b142      	cbz	r2, 8011e3a <_scanf_chars+0x8e>
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	dcd7      	bgt.n	8011ddc <_scanf_chars+0x30>
 8011e2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011e30:	4629      	mov	r1, r5
 8011e32:	4640      	mov	r0, r8
 8011e34:	4798      	blx	r3
 8011e36:	2800      	cmp	r0, #0
 8011e38:	d0d0      	beq.n	8011ddc <_scanf_chars+0x30>
 8011e3a:	6823      	ldr	r3, [r4, #0]
 8011e3c:	f013 0310 	ands.w	r3, r3, #16
 8011e40:	d105      	bne.n	8011e4e <_scanf_chars+0xa2>
 8011e42:	68e2      	ldr	r2, [r4, #12]
 8011e44:	3201      	adds	r2, #1
 8011e46:	60e2      	str	r2, [r4, #12]
 8011e48:	69a2      	ldr	r2, [r4, #24]
 8011e4a:	b102      	cbz	r2, 8011e4e <_scanf_chars+0xa2>
 8011e4c:	7033      	strb	r3, [r6, #0]
 8011e4e:	6923      	ldr	r3, [r4, #16]
 8011e50:	443b      	add	r3, r7
 8011e52:	6123      	str	r3, [r4, #16]
 8011e54:	2000      	movs	r0, #0
 8011e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e5a:	bf00      	nop
 8011e5c:	0803c8cd 	.word	0x0803c8cd

08011e60 <_scanf_i>:
 8011e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	4698      	mov	r8, r3
 8011e66:	4b76      	ldr	r3, [pc, #472]	; (8012040 <_scanf_i+0x1e0>)
 8011e68:	460c      	mov	r4, r1
 8011e6a:	4682      	mov	sl, r0
 8011e6c:	4616      	mov	r6, r2
 8011e6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011e72:	b087      	sub	sp, #28
 8011e74:	ab03      	add	r3, sp, #12
 8011e76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011e7a:	4b72      	ldr	r3, [pc, #456]	; (8012044 <_scanf_i+0x1e4>)
 8011e7c:	69a1      	ldr	r1, [r4, #24]
 8011e7e:	4a72      	ldr	r2, [pc, #456]	; (8012048 <_scanf_i+0x1e8>)
 8011e80:	2903      	cmp	r1, #3
 8011e82:	bf18      	it	ne
 8011e84:	461a      	movne	r2, r3
 8011e86:	68a3      	ldr	r3, [r4, #8]
 8011e88:	9201      	str	r2, [sp, #4]
 8011e8a:	1e5a      	subs	r2, r3, #1
 8011e8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011e90:	bf88      	it	hi
 8011e92:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011e96:	4627      	mov	r7, r4
 8011e98:	bf82      	ittt	hi
 8011e9a:	eb03 0905 	addhi.w	r9, r3, r5
 8011e9e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011ea2:	60a3      	strhi	r3, [r4, #8]
 8011ea4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011ea8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011eac:	bf98      	it	ls
 8011eae:	f04f 0900 	movls.w	r9, #0
 8011eb2:	6023      	str	r3, [r4, #0]
 8011eb4:	463d      	mov	r5, r7
 8011eb6:	f04f 0b00 	mov.w	fp, #0
 8011eba:	6831      	ldr	r1, [r6, #0]
 8011ebc:	ab03      	add	r3, sp, #12
 8011ebe:	7809      	ldrb	r1, [r1, #0]
 8011ec0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011ec4:	2202      	movs	r2, #2
 8011ec6:	f7ee f99b 	bl	8000200 <memchr>
 8011eca:	b328      	cbz	r0, 8011f18 <_scanf_i+0xb8>
 8011ecc:	f1bb 0f01 	cmp.w	fp, #1
 8011ed0:	d159      	bne.n	8011f86 <_scanf_i+0x126>
 8011ed2:	6862      	ldr	r2, [r4, #4]
 8011ed4:	b92a      	cbnz	r2, 8011ee2 <_scanf_i+0x82>
 8011ed6:	6822      	ldr	r2, [r4, #0]
 8011ed8:	2308      	movs	r3, #8
 8011eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011ede:	6063      	str	r3, [r4, #4]
 8011ee0:	6022      	str	r2, [r4, #0]
 8011ee2:	6822      	ldr	r2, [r4, #0]
 8011ee4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011ee8:	6022      	str	r2, [r4, #0]
 8011eea:	68a2      	ldr	r2, [r4, #8]
 8011eec:	1e51      	subs	r1, r2, #1
 8011eee:	60a1      	str	r1, [r4, #8]
 8011ef0:	b192      	cbz	r2, 8011f18 <_scanf_i+0xb8>
 8011ef2:	6832      	ldr	r2, [r6, #0]
 8011ef4:	1c51      	adds	r1, r2, #1
 8011ef6:	6031      	str	r1, [r6, #0]
 8011ef8:	7812      	ldrb	r2, [r2, #0]
 8011efa:	f805 2b01 	strb.w	r2, [r5], #1
 8011efe:	6872      	ldr	r2, [r6, #4]
 8011f00:	3a01      	subs	r2, #1
 8011f02:	2a00      	cmp	r2, #0
 8011f04:	6072      	str	r2, [r6, #4]
 8011f06:	dc07      	bgt.n	8011f18 <_scanf_i+0xb8>
 8011f08:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011f0c:	4631      	mov	r1, r6
 8011f0e:	4650      	mov	r0, sl
 8011f10:	4790      	blx	r2
 8011f12:	2800      	cmp	r0, #0
 8011f14:	f040 8085 	bne.w	8012022 <_scanf_i+0x1c2>
 8011f18:	f10b 0b01 	add.w	fp, fp, #1
 8011f1c:	f1bb 0f03 	cmp.w	fp, #3
 8011f20:	d1cb      	bne.n	8011eba <_scanf_i+0x5a>
 8011f22:	6863      	ldr	r3, [r4, #4]
 8011f24:	b90b      	cbnz	r3, 8011f2a <_scanf_i+0xca>
 8011f26:	230a      	movs	r3, #10
 8011f28:	6063      	str	r3, [r4, #4]
 8011f2a:	6863      	ldr	r3, [r4, #4]
 8011f2c:	4947      	ldr	r1, [pc, #284]	; (801204c <_scanf_i+0x1ec>)
 8011f2e:	6960      	ldr	r0, [r4, #20]
 8011f30:	1ac9      	subs	r1, r1, r3
 8011f32:	f000 f89f 	bl	8012074 <__sccl>
 8011f36:	f04f 0b00 	mov.w	fp, #0
 8011f3a:	68a3      	ldr	r3, [r4, #8]
 8011f3c:	6822      	ldr	r2, [r4, #0]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d03d      	beq.n	8011fbe <_scanf_i+0x15e>
 8011f42:	6831      	ldr	r1, [r6, #0]
 8011f44:	6960      	ldr	r0, [r4, #20]
 8011f46:	f891 c000 	ldrb.w	ip, [r1]
 8011f4a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	d035      	beq.n	8011fbe <_scanf_i+0x15e>
 8011f52:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011f56:	d124      	bne.n	8011fa2 <_scanf_i+0x142>
 8011f58:	0510      	lsls	r0, r2, #20
 8011f5a:	d522      	bpl.n	8011fa2 <_scanf_i+0x142>
 8011f5c:	f10b 0b01 	add.w	fp, fp, #1
 8011f60:	f1b9 0f00 	cmp.w	r9, #0
 8011f64:	d003      	beq.n	8011f6e <_scanf_i+0x10e>
 8011f66:	3301      	adds	r3, #1
 8011f68:	f109 39ff 	add.w	r9, r9, #4294967295
 8011f6c:	60a3      	str	r3, [r4, #8]
 8011f6e:	6873      	ldr	r3, [r6, #4]
 8011f70:	3b01      	subs	r3, #1
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	6073      	str	r3, [r6, #4]
 8011f76:	dd1b      	ble.n	8011fb0 <_scanf_i+0x150>
 8011f78:	6833      	ldr	r3, [r6, #0]
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	6033      	str	r3, [r6, #0]
 8011f7e:	68a3      	ldr	r3, [r4, #8]
 8011f80:	3b01      	subs	r3, #1
 8011f82:	60a3      	str	r3, [r4, #8]
 8011f84:	e7d9      	b.n	8011f3a <_scanf_i+0xda>
 8011f86:	f1bb 0f02 	cmp.w	fp, #2
 8011f8a:	d1ae      	bne.n	8011eea <_scanf_i+0x8a>
 8011f8c:	6822      	ldr	r2, [r4, #0]
 8011f8e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8011f92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011f96:	d1bf      	bne.n	8011f18 <_scanf_i+0xb8>
 8011f98:	2310      	movs	r3, #16
 8011f9a:	6063      	str	r3, [r4, #4]
 8011f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011fa0:	e7a2      	b.n	8011ee8 <_scanf_i+0x88>
 8011fa2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8011fa6:	6022      	str	r2, [r4, #0]
 8011fa8:	780b      	ldrb	r3, [r1, #0]
 8011faa:	f805 3b01 	strb.w	r3, [r5], #1
 8011fae:	e7de      	b.n	8011f6e <_scanf_i+0x10e>
 8011fb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011fb4:	4631      	mov	r1, r6
 8011fb6:	4650      	mov	r0, sl
 8011fb8:	4798      	blx	r3
 8011fba:	2800      	cmp	r0, #0
 8011fbc:	d0df      	beq.n	8011f7e <_scanf_i+0x11e>
 8011fbe:	6823      	ldr	r3, [r4, #0]
 8011fc0:	05db      	lsls	r3, r3, #23
 8011fc2:	d50d      	bpl.n	8011fe0 <_scanf_i+0x180>
 8011fc4:	42bd      	cmp	r5, r7
 8011fc6:	d909      	bls.n	8011fdc <_scanf_i+0x17c>
 8011fc8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011fcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011fd0:	4632      	mov	r2, r6
 8011fd2:	4650      	mov	r0, sl
 8011fd4:	4798      	blx	r3
 8011fd6:	f105 39ff 	add.w	r9, r5, #4294967295
 8011fda:	464d      	mov	r5, r9
 8011fdc:	42bd      	cmp	r5, r7
 8011fde:	d02d      	beq.n	801203c <_scanf_i+0x1dc>
 8011fe0:	6822      	ldr	r2, [r4, #0]
 8011fe2:	f012 0210 	ands.w	r2, r2, #16
 8011fe6:	d113      	bne.n	8012010 <_scanf_i+0x1b0>
 8011fe8:	702a      	strb	r2, [r5, #0]
 8011fea:	6863      	ldr	r3, [r4, #4]
 8011fec:	9e01      	ldr	r6, [sp, #4]
 8011fee:	4639      	mov	r1, r7
 8011ff0:	4650      	mov	r0, sl
 8011ff2:	47b0      	blx	r6
 8011ff4:	6821      	ldr	r1, [r4, #0]
 8011ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8011ffa:	f011 0f20 	tst.w	r1, #32
 8011ffe:	d013      	beq.n	8012028 <_scanf_i+0x1c8>
 8012000:	1d1a      	adds	r2, r3, #4
 8012002:	f8c8 2000 	str.w	r2, [r8]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	6018      	str	r0, [r3, #0]
 801200a:	68e3      	ldr	r3, [r4, #12]
 801200c:	3301      	adds	r3, #1
 801200e:	60e3      	str	r3, [r4, #12]
 8012010:	1bed      	subs	r5, r5, r7
 8012012:	44ab      	add	fp, r5
 8012014:	6925      	ldr	r5, [r4, #16]
 8012016:	445d      	add	r5, fp
 8012018:	6125      	str	r5, [r4, #16]
 801201a:	2000      	movs	r0, #0
 801201c:	b007      	add	sp, #28
 801201e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012022:	f04f 0b00 	mov.w	fp, #0
 8012026:	e7ca      	b.n	8011fbe <_scanf_i+0x15e>
 8012028:	1d1a      	adds	r2, r3, #4
 801202a:	f8c8 2000 	str.w	r2, [r8]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f011 0f01 	tst.w	r1, #1
 8012034:	bf14      	ite	ne
 8012036:	8018      	strhne	r0, [r3, #0]
 8012038:	6018      	streq	r0, [r3, #0]
 801203a:	e7e6      	b.n	801200a <_scanf_i+0x1aa>
 801203c:	2001      	movs	r0, #1
 801203e:	e7ed      	b.n	801201c <_scanf_i+0x1bc>
 8012040:	08015570 	.word	0x08015570
 8012044:	0800f6d1 	.word	0x0800f6d1
 8012048:	0800f5d5 	.word	0x0800f5d5
 801204c:	0803cc7d 	.word	0x0803cc7d

08012050 <_read_r>:
 8012050:	b538      	push	{r3, r4, r5, lr}
 8012052:	4d07      	ldr	r5, [pc, #28]	; (8012070 <_read_r+0x20>)
 8012054:	4604      	mov	r4, r0
 8012056:	4608      	mov	r0, r1
 8012058:	4611      	mov	r1, r2
 801205a:	2200      	movs	r2, #0
 801205c:	602a      	str	r2, [r5, #0]
 801205e:	461a      	mov	r2, r3
 8012060:	f002 fdc4 	bl	8014bec <_read>
 8012064:	1c43      	adds	r3, r0, #1
 8012066:	d102      	bne.n	801206e <_read_r+0x1e>
 8012068:	682b      	ldr	r3, [r5, #0]
 801206a:	b103      	cbz	r3, 801206e <_read_r+0x1e>
 801206c:	6023      	str	r3, [r4, #0]
 801206e:	bd38      	pop	{r3, r4, r5, pc}
 8012070:	20003c20 	.word	0x20003c20

08012074 <__sccl>:
 8012074:	b570      	push	{r4, r5, r6, lr}
 8012076:	780b      	ldrb	r3, [r1, #0]
 8012078:	4604      	mov	r4, r0
 801207a:	2b5e      	cmp	r3, #94	; 0x5e
 801207c:	bf0b      	itete	eq
 801207e:	784b      	ldrbeq	r3, [r1, #1]
 8012080:	1c48      	addne	r0, r1, #1
 8012082:	1c88      	addeq	r0, r1, #2
 8012084:	2200      	movne	r2, #0
 8012086:	bf08      	it	eq
 8012088:	2201      	moveq	r2, #1
 801208a:	1e61      	subs	r1, r4, #1
 801208c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012090:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012094:	42a9      	cmp	r1, r5
 8012096:	d1fb      	bne.n	8012090 <__sccl+0x1c>
 8012098:	b90b      	cbnz	r3, 801209e <__sccl+0x2a>
 801209a:	3801      	subs	r0, #1
 801209c:	bd70      	pop	{r4, r5, r6, pc}
 801209e:	f082 0201 	eor.w	r2, r2, #1
 80120a2:	54e2      	strb	r2, [r4, r3]
 80120a4:	4605      	mov	r5, r0
 80120a6:	4628      	mov	r0, r5
 80120a8:	f810 1b01 	ldrb.w	r1, [r0], #1
 80120ac:	292d      	cmp	r1, #45	; 0x2d
 80120ae:	d006      	beq.n	80120be <__sccl+0x4a>
 80120b0:	295d      	cmp	r1, #93	; 0x5d
 80120b2:	d0f3      	beq.n	801209c <__sccl+0x28>
 80120b4:	b909      	cbnz	r1, 80120ba <__sccl+0x46>
 80120b6:	4628      	mov	r0, r5
 80120b8:	e7f0      	b.n	801209c <__sccl+0x28>
 80120ba:	460b      	mov	r3, r1
 80120bc:	e7f1      	b.n	80120a2 <__sccl+0x2e>
 80120be:	786e      	ldrb	r6, [r5, #1]
 80120c0:	2e5d      	cmp	r6, #93	; 0x5d
 80120c2:	d0fa      	beq.n	80120ba <__sccl+0x46>
 80120c4:	42b3      	cmp	r3, r6
 80120c6:	dcf8      	bgt.n	80120ba <__sccl+0x46>
 80120c8:	3502      	adds	r5, #2
 80120ca:	4619      	mov	r1, r3
 80120cc:	3101      	adds	r1, #1
 80120ce:	428e      	cmp	r6, r1
 80120d0:	5462      	strb	r2, [r4, r1]
 80120d2:	dcfb      	bgt.n	80120cc <__sccl+0x58>
 80120d4:	1af1      	subs	r1, r6, r3
 80120d6:	3901      	subs	r1, #1
 80120d8:	1c58      	adds	r0, r3, #1
 80120da:	42b3      	cmp	r3, r6
 80120dc:	bfa8      	it	ge
 80120de:	2100      	movge	r1, #0
 80120e0:	1843      	adds	r3, r0, r1
 80120e2:	e7e0      	b.n	80120a6 <__sccl+0x32>

080120e4 <_raise_r>:
 80120e4:	291f      	cmp	r1, #31
 80120e6:	b538      	push	{r3, r4, r5, lr}
 80120e8:	4604      	mov	r4, r0
 80120ea:	460d      	mov	r5, r1
 80120ec:	d904      	bls.n	80120f8 <_raise_r+0x14>
 80120ee:	2316      	movs	r3, #22
 80120f0:	6003      	str	r3, [r0, #0]
 80120f2:	f04f 30ff 	mov.w	r0, #4294967295
 80120f6:	bd38      	pop	{r3, r4, r5, pc}
 80120f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80120fa:	b112      	cbz	r2, 8012102 <_raise_r+0x1e>
 80120fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012100:	b94b      	cbnz	r3, 8012116 <_raise_r+0x32>
 8012102:	4620      	mov	r0, r4
 8012104:	f000 f830 	bl	8012168 <_getpid_r>
 8012108:	462a      	mov	r2, r5
 801210a:	4601      	mov	r1, r0
 801210c:	4620      	mov	r0, r4
 801210e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012112:	f000 b817 	b.w	8012144 <_kill_r>
 8012116:	2b01      	cmp	r3, #1
 8012118:	d00a      	beq.n	8012130 <_raise_r+0x4c>
 801211a:	1c59      	adds	r1, r3, #1
 801211c:	d103      	bne.n	8012126 <_raise_r+0x42>
 801211e:	2316      	movs	r3, #22
 8012120:	6003      	str	r3, [r0, #0]
 8012122:	2001      	movs	r0, #1
 8012124:	e7e7      	b.n	80120f6 <_raise_r+0x12>
 8012126:	2400      	movs	r4, #0
 8012128:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801212c:	4628      	mov	r0, r5
 801212e:	4798      	blx	r3
 8012130:	2000      	movs	r0, #0
 8012132:	e7e0      	b.n	80120f6 <_raise_r+0x12>

08012134 <raise>:
 8012134:	4b02      	ldr	r3, [pc, #8]	; (8012140 <raise+0xc>)
 8012136:	4601      	mov	r1, r0
 8012138:	6818      	ldr	r0, [r3, #0]
 801213a:	f7ff bfd3 	b.w	80120e4 <_raise_r>
 801213e:	bf00      	nop
 8012140:	200002c0 	.word	0x200002c0

08012144 <_kill_r>:
 8012144:	b538      	push	{r3, r4, r5, lr}
 8012146:	4d07      	ldr	r5, [pc, #28]	; (8012164 <_kill_r+0x20>)
 8012148:	2300      	movs	r3, #0
 801214a:	4604      	mov	r4, r0
 801214c:	4608      	mov	r0, r1
 801214e:	4611      	mov	r1, r2
 8012150:	602b      	str	r3, [r5, #0]
 8012152:	f002 fd3b 	bl	8014bcc <_kill>
 8012156:	1c43      	adds	r3, r0, #1
 8012158:	d102      	bne.n	8012160 <_kill_r+0x1c>
 801215a:	682b      	ldr	r3, [r5, #0]
 801215c:	b103      	cbz	r3, 8012160 <_kill_r+0x1c>
 801215e:	6023      	str	r3, [r4, #0]
 8012160:	bd38      	pop	{r3, r4, r5, pc}
 8012162:	bf00      	nop
 8012164:	20003c20 	.word	0x20003c20

08012168 <_getpid_r>:
 8012168:	f002 bd20 	b.w	8014bac <_getpid>

0801216c <sniprintf>:
 801216c:	b40c      	push	{r2, r3}
 801216e:	b530      	push	{r4, r5, lr}
 8012170:	4b17      	ldr	r3, [pc, #92]	; (80121d0 <sniprintf+0x64>)
 8012172:	1e0c      	subs	r4, r1, #0
 8012174:	681d      	ldr	r5, [r3, #0]
 8012176:	b09d      	sub	sp, #116	; 0x74
 8012178:	da08      	bge.n	801218c <sniprintf+0x20>
 801217a:	238b      	movs	r3, #139	; 0x8b
 801217c:	602b      	str	r3, [r5, #0]
 801217e:	f04f 30ff 	mov.w	r0, #4294967295
 8012182:	b01d      	add	sp, #116	; 0x74
 8012184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012188:	b002      	add	sp, #8
 801218a:	4770      	bx	lr
 801218c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012190:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012194:	bf14      	ite	ne
 8012196:	f104 33ff 	addne.w	r3, r4, #4294967295
 801219a:	4623      	moveq	r3, r4
 801219c:	9304      	str	r3, [sp, #16]
 801219e:	9307      	str	r3, [sp, #28]
 80121a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80121a4:	9002      	str	r0, [sp, #8]
 80121a6:	9006      	str	r0, [sp, #24]
 80121a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80121ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80121ae:	ab21      	add	r3, sp, #132	; 0x84
 80121b0:	a902      	add	r1, sp, #8
 80121b2:	4628      	mov	r0, r5
 80121b4:	9301      	str	r3, [sp, #4]
 80121b6:	f7ff fb27 	bl	8011808 <_svfiprintf_r>
 80121ba:	1c43      	adds	r3, r0, #1
 80121bc:	bfbc      	itt	lt
 80121be:	238b      	movlt	r3, #139	; 0x8b
 80121c0:	602b      	strlt	r3, [r5, #0]
 80121c2:	2c00      	cmp	r4, #0
 80121c4:	d0dd      	beq.n	8012182 <sniprintf+0x16>
 80121c6:	9b02      	ldr	r3, [sp, #8]
 80121c8:	2200      	movs	r2, #0
 80121ca:	701a      	strb	r2, [r3, #0]
 80121cc:	e7d9      	b.n	8012182 <sniprintf+0x16>
 80121ce:	bf00      	nop
 80121d0:	200002c0 	.word	0x200002c0

080121d4 <strncmp>:
 80121d4:	b510      	push	{r4, lr}
 80121d6:	b17a      	cbz	r2, 80121f8 <strncmp+0x24>
 80121d8:	4603      	mov	r3, r0
 80121da:	3901      	subs	r1, #1
 80121dc:	1884      	adds	r4, r0, r2
 80121de:	f813 0b01 	ldrb.w	r0, [r3], #1
 80121e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80121e6:	4290      	cmp	r0, r2
 80121e8:	d101      	bne.n	80121ee <strncmp+0x1a>
 80121ea:	42a3      	cmp	r3, r4
 80121ec:	d101      	bne.n	80121f2 <strncmp+0x1e>
 80121ee:	1a80      	subs	r0, r0, r2
 80121f0:	bd10      	pop	{r4, pc}
 80121f2:	2800      	cmp	r0, #0
 80121f4:	d1f3      	bne.n	80121de <strncmp+0xa>
 80121f6:	e7fa      	b.n	80121ee <strncmp+0x1a>
 80121f8:	4610      	mov	r0, r2
 80121fa:	e7f9      	b.n	80121f0 <strncmp+0x1c>

080121fc <__submore>:
 80121fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012200:	460c      	mov	r4, r1
 8012202:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012208:	4299      	cmp	r1, r3
 801220a:	d11d      	bne.n	8012248 <__submore+0x4c>
 801220c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012210:	f7fb fca2 	bl	800db58 <_malloc_r>
 8012214:	b918      	cbnz	r0, 801221e <__submore+0x22>
 8012216:	f04f 30ff 	mov.w	r0, #4294967295
 801221a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801221e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012222:	63a3      	str	r3, [r4, #56]	; 0x38
 8012224:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012228:	6360      	str	r0, [r4, #52]	; 0x34
 801222a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801222e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012232:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8012236:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801223a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801223e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8012242:	6020      	str	r0, [r4, #0]
 8012244:	2000      	movs	r0, #0
 8012246:	e7e8      	b.n	801221a <__submore+0x1e>
 8012248:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801224a:	0077      	lsls	r7, r6, #1
 801224c:	463a      	mov	r2, r7
 801224e:	f7ff fa51 	bl	80116f4 <_realloc_r>
 8012252:	4605      	mov	r5, r0
 8012254:	2800      	cmp	r0, #0
 8012256:	d0de      	beq.n	8012216 <__submore+0x1a>
 8012258:	eb00 0806 	add.w	r8, r0, r6
 801225c:	4601      	mov	r1, r0
 801225e:	4632      	mov	r2, r6
 8012260:	4640      	mov	r0, r8
 8012262:	f7fb f985 	bl	800d570 <memcpy>
 8012266:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801226a:	f8c4 8000 	str.w	r8, [r4]
 801226e:	e7e9      	b.n	8012244 <__submore+0x48>

08012270 <__env_lock>:
 8012270:	4801      	ldr	r0, [pc, #4]	; (8012278 <__env_lock+0x8>)
 8012272:	f7fe be03 	b.w	8010e7c <__retarget_lock_acquire_recursive>
 8012276:	bf00      	nop
 8012278:	20003c18 	.word	0x20003c18

0801227c <__env_unlock>:
 801227c:	4801      	ldr	r0, [pc, #4]	; (8012284 <__env_unlock+0x8>)
 801227e:	f7fe bdff 	b.w	8010e80 <__retarget_lock_release_recursive>
 8012282:	bf00      	nop
 8012284:	20003c18 	.word	0x20003c18

08012288 <_fstat_r>:
 8012288:	b538      	push	{r3, r4, r5, lr}
 801228a:	4d07      	ldr	r5, [pc, #28]	; (80122a8 <_fstat_r+0x20>)
 801228c:	2300      	movs	r3, #0
 801228e:	4604      	mov	r4, r0
 8012290:	4608      	mov	r0, r1
 8012292:	4611      	mov	r1, r2
 8012294:	602b      	str	r3, [r5, #0]
 8012296:	f002 fc81 	bl	8014b9c <_fstat>
 801229a:	1c43      	adds	r3, r0, #1
 801229c:	d102      	bne.n	80122a4 <_fstat_r+0x1c>
 801229e:	682b      	ldr	r3, [r5, #0]
 80122a0:	b103      	cbz	r3, 80122a4 <_fstat_r+0x1c>
 80122a2:	6023      	str	r3, [r4, #0]
 80122a4:	bd38      	pop	{r3, r4, r5, pc}
 80122a6:	bf00      	nop
 80122a8:	20003c20 	.word	0x20003c20

080122ac <_isatty_r>:
 80122ac:	b538      	push	{r3, r4, r5, lr}
 80122ae:	4d06      	ldr	r5, [pc, #24]	; (80122c8 <_isatty_r+0x1c>)
 80122b0:	2300      	movs	r3, #0
 80122b2:	4604      	mov	r4, r0
 80122b4:	4608      	mov	r0, r1
 80122b6:	602b      	str	r3, [r5, #0]
 80122b8:	f002 fc80 	bl	8014bbc <_isatty>
 80122bc:	1c43      	adds	r3, r0, #1
 80122be:	d102      	bne.n	80122c6 <_isatty_r+0x1a>
 80122c0:	682b      	ldr	r3, [r5, #0]
 80122c2:	b103      	cbz	r3, 80122c6 <_isatty_r+0x1a>
 80122c4:	6023      	str	r3, [r4, #0]
 80122c6:	bd38      	pop	{r3, r4, r5, pc}
 80122c8:	20003c20 	.word	0x20003c20

080122cc <__ascii_mbtowc>:
 80122cc:	b082      	sub	sp, #8
 80122ce:	b901      	cbnz	r1, 80122d2 <__ascii_mbtowc+0x6>
 80122d0:	a901      	add	r1, sp, #4
 80122d2:	b142      	cbz	r2, 80122e6 <__ascii_mbtowc+0x1a>
 80122d4:	b14b      	cbz	r3, 80122ea <__ascii_mbtowc+0x1e>
 80122d6:	7813      	ldrb	r3, [r2, #0]
 80122d8:	600b      	str	r3, [r1, #0]
 80122da:	7812      	ldrb	r2, [r2, #0]
 80122dc:	1e10      	subs	r0, r2, #0
 80122de:	bf18      	it	ne
 80122e0:	2001      	movne	r0, #1
 80122e2:	b002      	add	sp, #8
 80122e4:	4770      	bx	lr
 80122e6:	4610      	mov	r0, r2
 80122e8:	e7fb      	b.n	80122e2 <__ascii_mbtowc+0x16>
 80122ea:	f06f 0001 	mvn.w	r0, #1
 80122ee:	e7f8      	b.n	80122e2 <__ascii_mbtowc+0x16>

080122f0 <_malloc_usable_size_r>:
 80122f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122f4:	1f18      	subs	r0, r3, #4
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	bfbc      	itt	lt
 80122fa:	580b      	ldrlt	r3, [r1, r0]
 80122fc:	18c0      	addlt	r0, r0, r3
 80122fe:	4770      	bx	lr

08012300 <__ascii_wctomb>:
 8012300:	b149      	cbz	r1, 8012316 <__ascii_wctomb+0x16>
 8012302:	2aff      	cmp	r2, #255	; 0xff
 8012304:	bf85      	ittet	hi
 8012306:	238a      	movhi	r3, #138	; 0x8a
 8012308:	6003      	strhi	r3, [r0, #0]
 801230a:	700a      	strbls	r2, [r1, #0]
 801230c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012310:	bf98      	it	ls
 8012312:	2001      	movls	r0, #1
 8012314:	4770      	bx	lr
 8012316:	4608      	mov	r0, r1
 8012318:	4770      	bx	lr
 801231a:	0000      	movs	r0, r0
 801231c:	0000      	movs	r0, r0
	...

08012320 <cos>:
 8012320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012322:	ec53 2b10 	vmov	r2, r3, d0
 8012326:	4826      	ldr	r0, [pc, #152]	; (80123c0 <cos+0xa0>)
 8012328:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801232c:	4281      	cmp	r1, r0
 801232e:	dc06      	bgt.n	801233e <cos+0x1e>
 8012330:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80123b8 <cos+0x98>
 8012334:	b005      	add	sp, #20
 8012336:	f85d eb04 	ldr.w	lr, [sp], #4
 801233a:	f001 bbf1 	b.w	8013b20 <__kernel_cos>
 801233e:	4821      	ldr	r0, [pc, #132]	; (80123c4 <cos+0xa4>)
 8012340:	4281      	cmp	r1, r0
 8012342:	dd09      	ble.n	8012358 <cos+0x38>
 8012344:	ee10 0a10 	vmov	r0, s0
 8012348:	4619      	mov	r1, r3
 801234a:	f7ed ffb7 	bl	80002bc <__aeabi_dsub>
 801234e:	ec41 0b10 	vmov	d0, r0, r1
 8012352:	b005      	add	sp, #20
 8012354:	f85d fb04 	ldr.w	pc, [sp], #4
 8012358:	4668      	mov	r0, sp
 801235a:	f001 f921 	bl	80135a0 <__ieee754_rem_pio2>
 801235e:	f000 0003 	and.w	r0, r0, #3
 8012362:	2801      	cmp	r0, #1
 8012364:	d00b      	beq.n	801237e <cos+0x5e>
 8012366:	2802      	cmp	r0, #2
 8012368:	d016      	beq.n	8012398 <cos+0x78>
 801236a:	b9e0      	cbnz	r0, 80123a6 <cos+0x86>
 801236c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012370:	ed9d 0b00 	vldr	d0, [sp]
 8012374:	f001 fbd4 	bl	8013b20 <__kernel_cos>
 8012378:	ec51 0b10 	vmov	r0, r1, d0
 801237c:	e7e7      	b.n	801234e <cos+0x2e>
 801237e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012382:	ed9d 0b00 	vldr	d0, [sp]
 8012386:	f001 ffe3 	bl	8014350 <__kernel_sin>
 801238a:	ec53 2b10 	vmov	r2, r3, d0
 801238e:	ee10 0a10 	vmov	r0, s0
 8012392:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012396:	e7da      	b.n	801234e <cos+0x2e>
 8012398:	ed9d 1b02 	vldr	d1, [sp, #8]
 801239c:	ed9d 0b00 	vldr	d0, [sp]
 80123a0:	f001 fbbe 	bl	8013b20 <__kernel_cos>
 80123a4:	e7f1      	b.n	801238a <cos+0x6a>
 80123a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123aa:	ed9d 0b00 	vldr	d0, [sp]
 80123ae:	2001      	movs	r0, #1
 80123b0:	f001 ffce 	bl	8014350 <__kernel_sin>
 80123b4:	e7e0      	b.n	8012378 <cos+0x58>
 80123b6:	bf00      	nop
	...
 80123c0:	3fe921fb 	.word	0x3fe921fb
 80123c4:	7fefffff 	.word	0x7fefffff

080123c8 <sin>:
 80123c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123ca:	ec53 2b10 	vmov	r2, r3, d0
 80123ce:	4828      	ldr	r0, [pc, #160]	; (8012470 <sin+0xa8>)
 80123d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80123d4:	4281      	cmp	r1, r0
 80123d6:	dc07      	bgt.n	80123e8 <sin+0x20>
 80123d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8012468 <sin+0xa0>
 80123dc:	2000      	movs	r0, #0
 80123de:	b005      	add	sp, #20
 80123e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80123e4:	f001 bfb4 	b.w	8014350 <__kernel_sin>
 80123e8:	4822      	ldr	r0, [pc, #136]	; (8012474 <sin+0xac>)
 80123ea:	4281      	cmp	r1, r0
 80123ec:	dd09      	ble.n	8012402 <sin+0x3a>
 80123ee:	ee10 0a10 	vmov	r0, s0
 80123f2:	4619      	mov	r1, r3
 80123f4:	f7ed ff62 	bl	80002bc <__aeabi_dsub>
 80123f8:	ec41 0b10 	vmov	d0, r0, r1
 80123fc:	b005      	add	sp, #20
 80123fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8012402:	4668      	mov	r0, sp
 8012404:	f001 f8cc 	bl	80135a0 <__ieee754_rem_pio2>
 8012408:	f000 0003 	and.w	r0, r0, #3
 801240c:	2801      	cmp	r0, #1
 801240e:	d00c      	beq.n	801242a <sin+0x62>
 8012410:	2802      	cmp	r0, #2
 8012412:	d011      	beq.n	8012438 <sin+0x70>
 8012414:	b9f0      	cbnz	r0, 8012454 <sin+0x8c>
 8012416:	ed9d 1b02 	vldr	d1, [sp, #8]
 801241a:	ed9d 0b00 	vldr	d0, [sp]
 801241e:	2001      	movs	r0, #1
 8012420:	f001 ff96 	bl	8014350 <__kernel_sin>
 8012424:	ec51 0b10 	vmov	r0, r1, d0
 8012428:	e7e6      	b.n	80123f8 <sin+0x30>
 801242a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801242e:	ed9d 0b00 	vldr	d0, [sp]
 8012432:	f001 fb75 	bl	8013b20 <__kernel_cos>
 8012436:	e7f5      	b.n	8012424 <sin+0x5c>
 8012438:	ed9d 1b02 	vldr	d1, [sp, #8]
 801243c:	ed9d 0b00 	vldr	d0, [sp]
 8012440:	2001      	movs	r0, #1
 8012442:	f001 ff85 	bl	8014350 <__kernel_sin>
 8012446:	ec53 2b10 	vmov	r2, r3, d0
 801244a:	ee10 0a10 	vmov	r0, s0
 801244e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012452:	e7d1      	b.n	80123f8 <sin+0x30>
 8012454:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012458:	ed9d 0b00 	vldr	d0, [sp]
 801245c:	f001 fb60 	bl	8013b20 <__kernel_cos>
 8012460:	e7f1      	b.n	8012446 <sin+0x7e>
 8012462:	bf00      	nop
 8012464:	f3af 8000 	nop.w
	...
 8012470:	3fe921fb 	.word	0x3fe921fb
 8012474:	7fefffff 	.word	0x7fefffff

08012478 <tan>:
 8012478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801247a:	ec53 2b10 	vmov	r2, r3, d0
 801247e:	4816      	ldr	r0, [pc, #88]	; (80124d8 <tan+0x60>)
 8012480:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012484:	4281      	cmp	r1, r0
 8012486:	dc07      	bgt.n	8012498 <tan+0x20>
 8012488:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80124d0 <tan+0x58>
 801248c:	2001      	movs	r0, #1
 801248e:	b005      	add	sp, #20
 8012490:	f85d eb04 	ldr.w	lr, [sp], #4
 8012494:	f002 b81c 	b.w	80144d0 <__kernel_tan>
 8012498:	4810      	ldr	r0, [pc, #64]	; (80124dc <tan+0x64>)
 801249a:	4281      	cmp	r1, r0
 801249c:	dd09      	ble.n	80124b2 <tan+0x3a>
 801249e:	ee10 0a10 	vmov	r0, s0
 80124a2:	4619      	mov	r1, r3
 80124a4:	f7ed ff0a 	bl	80002bc <__aeabi_dsub>
 80124a8:	ec41 0b10 	vmov	d0, r0, r1
 80124ac:	b005      	add	sp, #20
 80124ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80124b2:	4668      	mov	r0, sp
 80124b4:	f001 f874 	bl	80135a0 <__ieee754_rem_pio2>
 80124b8:	0040      	lsls	r0, r0, #1
 80124ba:	f000 0002 	and.w	r0, r0, #2
 80124be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80124c2:	ed9d 0b00 	vldr	d0, [sp]
 80124c6:	f1c0 0001 	rsb	r0, r0, #1
 80124ca:	f002 f801 	bl	80144d0 <__kernel_tan>
 80124ce:	e7ed      	b.n	80124ac <tan+0x34>
	...
 80124d8:	3fe921fb 	.word	0x3fe921fb
 80124dc:	7fefffff 	.word	0x7fefffff

080124e0 <acos>:
 80124e0:	b538      	push	{r3, r4, r5, lr}
 80124e2:	ed2d 8b02 	vpush	{d8}
 80124e6:	ec55 4b10 	vmov	r4, r5, d0
 80124ea:	f000 f8c9 	bl	8012680 <__ieee754_acos>
 80124ee:	4622      	mov	r2, r4
 80124f0:	462b      	mov	r3, r5
 80124f2:	4620      	mov	r0, r4
 80124f4:	4629      	mov	r1, r5
 80124f6:	eeb0 8a40 	vmov.f32	s16, s0
 80124fa:	eef0 8a60 	vmov.f32	s17, s1
 80124fe:	f7ee fb2f 	bl	8000b60 <__aeabi_dcmpun>
 8012502:	b9a8      	cbnz	r0, 8012530 <acos+0x50>
 8012504:	ec45 4b10 	vmov	d0, r4, r5
 8012508:	f002 fa1c 	bl	8014944 <fabs>
 801250c:	4b0c      	ldr	r3, [pc, #48]	; (8012540 <acos+0x60>)
 801250e:	ec51 0b10 	vmov	r0, r1, d0
 8012512:	2200      	movs	r2, #0
 8012514:	f7ee fb1a 	bl	8000b4c <__aeabi_dcmpgt>
 8012518:	b150      	cbz	r0, 8012530 <acos+0x50>
 801251a:	f7fe fa9f 	bl	8010a5c <__errno>
 801251e:	ecbd 8b02 	vpop	{d8}
 8012522:	2321      	movs	r3, #33	; 0x21
 8012524:	6003      	str	r3, [r0, #0]
 8012526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801252a:	4806      	ldr	r0, [pc, #24]	; (8012544 <acos+0x64>)
 801252c:	f002 baa0 	b.w	8014a70 <nan>
 8012530:	eeb0 0a48 	vmov.f32	s0, s16
 8012534:	eef0 0a68 	vmov.f32	s1, s17
 8012538:	ecbd 8b02 	vpop	{d8}
 801253c:	bd38      	pop	{r3, r4, r5, pc}
 801253e:	bf00      	nop
 8012540:	3ff00000 	.word	0x3ff00000
 8012544:	0803c496 	.word	0x0803c496

08012548 <pow>:
 8012548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801254a:	ed2d 8b02 	vpush	{d8}
 801254e:	eeb0 8a40 	vmov.f32	s16, s0
 8012552:	eef0 8a60 	vmov.f32	s17, s1
 8012556:	ec55 4b11 	vmov	r4, r5, d1
 801255a:	f000 faf1 	bl	8012b40 <__ieee754_pow>
 801255e:	4622      	mov	r2, r4
 8012560:	462b      	mov	r3, r5
 8012562:	4620      	mov	r0, r4
 8012564:	4629      	mov	r1, r5
 8012566:	ec57 6b10 	vmov	r6, r7, d0
 801256a:	f7ee faf9 	bl	8000b60 <__aeabi_dcmpun>
 801256e:	2800      	cmp	r0, #0
 8012570:	d13b      	bne.n	80125ea <pow+0xa2>
 8012572:	ec51 0b18 	vmov	r0, r1, d8
 8012576:	2200      	movs	r2, #0
 8012578:	2300      	movs	r3, #0
 801257a:	f7ee fabf 	bl	8000afc <__aeabi_dcmpeq>
 801257e:	b1b8      	cbz	r0, 80125b0 <pow+0x68>
 8012580:	2200      	movs	r2, #0
 8012582:	2300      	movs	r3, #0
 8012584:	4620      	mov	r0, r4
 8012586:	4629      	mov	r1, r5
 8012588:	f7ee fab8 	bl	8000afc <__aeabi_dcmpeq>
 801258c:	2800      	cmp	r0, #0
 801258e:	d146      	bne.n	801261e <pow+0xd6>
 8012590:	ec45 4b10 	vmov	d0, r4, r5
 8012594:	f002 f9df 	bl	8014956 <finite>
 8012598:	b338      	cbz	r0, 80125ea <pow+0xa2>
 801259a:	2200      	movs	r2, #0
 801259c:	2300      	movs	r3, #0
 801259e:	4620      	mov	r0, r4
 80125a0:	4629      	mov	r1, r5
 80125a2:	f7ee fab5 	bl	8000b10 <__aeabi_dcmplt>
 80125a6:	b300      	cbz	r0, 80125ea <pow+0xa2>
 80125a8:	f7fe fa58 	bl	8010a5c <__errno>
 80125ac:	2322      	movs	r3, #34	; 0x22
 80125ae:	e01b      	b.n	80125e8 <pow+0xa0>
 80125b0:	ec47 6b10 	vmov	d0, r6, r7
 80125b4:	f002 f9cf 	bl	8014956 <finite>
 80125b8:	b9e0      	cbnz	r0, 80125f4 <pow+0xac>
 80125ba:	eeb0 0a48 	vmov.f32	s0, s16
 80125be:	eef0 0a68 	vmov.f32	s1, s17
 80125c2:	f002 f9c8 	bl	8014956 <finite>
 80125c6:	b1a8      	cbz	r0, 80125f4 <pow+0xac>
 80125c8:	ec45 4b10 	vmov	d0, r4, r5
 80125cc:	f002 f9c3 	bl	8014956 <finite>
 80125d0:	b180      	cbz	r0, 80125f4 <pow+0xac>
 80125d2:	4632      	mov	r2, r6
 80125d4:	463b      	mov	r3, r7
 80125d6:	4630      	mov	r0, r6
 80125d8:	4639      	mov	r1, r7
 80125da:	f7ee fac1 	bl	8000b60 <__aeabi_dcmpun>
 80125de:	2800      	cmp	r0, #0
 80125e0:	d0e2      	beq.n	80125a8 <pow+0x60>
 80125e2:	f7fe fa3b 	bl	8010a5c <__errno>
 80125e6:	2321      	movs	r3, #33	; 0x21
 80125e8:	6003      	str	r3, [r0, #0]
 80125ea:	ecbd 8b02 	vpop	{d8}
 80125ee:	ec47 6b10 	vmov	d0, r6, r7
 80125f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125f4:	2200      	movs	r2, #0
 80125f6:	2300      	movs	r3, #0
 80125f8:	4630      	mov	r0, r6
 80125fa:	4639      	mov	r1, r7
 80125fc:	f7ee fa7e 	bl	8000afc <__aeabi_dcmpeq>
 8012600:	2800      	cmp	r0, #0
 8012602:	d0f2      	beq.n	80125ea <pow+0xa2>
 8012604:	eeb0 0a48 	vmov.f32	s0, s16
 8012608:	eef0 0a68 	vmov.f32	s1, s17
 801260c:	f002 f9a3 	bl	8014956 <finite>
 8012610:	2800      	cmp	r0, #0
 8012612:	d0ea      	beq.n	80125ea <pow+0xa2>
 8012614:	ec45 4b10 	vmov	d0, r4, r5
 8012618:	f002 f99d 	bl	8014956 <finite>
 801261c:	e7c3      	b.n	80125a6 <pow+0x5e>
 801261e:	4f01      	ldr	r7, [pc, #4]	; (8012624 <pow+0xdc>)
 8012620:	2600      	movs	r6, #0
 8012622:	e7e2      	b.n	80125ea <pow+0xa2>
 8012624:	3ff00000 	.word	0x3ff00000

08012628 <sqrt>:
 8012628:	b538      	push	{r3, r4, r5, lr}
 801262a:	ed2d 8b02 	vpush	{d8}
 801262e:	ec55 4b10 	vmov	r4, r5, d0
 8012632:	f001 f9c1 	bl	80139b8 <__ieee754_sqrt>
 8012636:	4622      	mov	r2, r4
 8012638:	462b      	mov	r3, r5
 801263a:	4620      	mov	r0, r4
 801263c:	4629      	mov	r1, r5
 801263e:	eeb0 8a40 	vmov.f32	s16, s0
 8012642:	eef0 8a60 	vmov.f32	s17, s1
 8012646:	f7ee fa8b 	bl	8000b60 <__aeabi_dcmpun>
 801264a:	b990      	cbnz	r0, 8012672 <sqrt+0x4a>
 801264c:	2200      	movs	r2, #0
 801264e:	2300      	movs	r3, #0
 8012650:	4620      	mov	r0, r4
 8012652:	4629      	mov	r1, r5
 8012654:	f7ee fa5c 	bl	8000b10 <__aeabi_dcmplt>
 8012658:	b158      	cbz	r0, 8012672 <sqrt+0x4a>
 801265a:	f7fe f9ff 	bl	8010a5c <__errno>
 801265e:	2321      	movs	r3, #33	; 0x21
 8012660:	6003      	str	r3, [r0, #0]
 8012662:	2200      	movs	r2, #0
 8012664:	2300      	movs	r3, #0
 8012666:	4610      	mov	r0, r2
 8012668:	4619      	mov	r1, r3
 801266a:	f7ee f909 	bl	8000880 <__aeabi_ddiv>
 801266e:	ec41 0b18 	vmov	d8, r0, r1
 8012672:	eeb0 0a48 	vmov.f32	s0, s16
 8012676:	eef0 0a68 	vmov.f32	s1, s17
 801267a:	ecbd 8b02 	vpop	{d8}
 801267e:	bd38      	pop	{r3, r4, r5, pc}

08012680 <__ieee754_acos>:
 8012680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012684:	ec55 4b10 	vmov	r4, r5, d0
 8012688:	49b7      	ldr	r1, [pc, #732]	; (8012968 <__ieee754_acos+0x2e8>)
 801268a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801268e:	428b      	cmp	r3, r1
 8012690:	dd1b      	ble.n	80126ca <__ieee754_acos+0x4a>
 8012692:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8012696:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801269a:	4323      	orrs	r3, r4
 801269c:	d106      	bne.n	80126ac <__ieee754_acos+0x2c>
 801269e:	2d00      	cmp	r5, #0
 80126a0:	f300 8211 	bgt.w	8012ac6 <__ieee754_acos+0x446>
 80126a4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8012900 <__ieee754_acos+0x280>
 80126a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ac:	ee10 2a10 	vmov	r2, s0
 80126b0:	462b      	mov	r3, r5
 80126b2:	ee10 0a10 	vmov	r0, s0
 80126b6:	4629      	mov	r1, r5
 80126b8:	f7ed fe00 	bl	80002bc <__aeabi_dsub>
 80126bc:	4602      	mov	r2, r0
 80126be:	460b      	mov	r3, r1
 80126c0:	f7ee f8de 	bl	8000880 <__aeabi_ddiv>
 80126c4:	ec41 0b10 	vmov	d0, r0, r1
 80126c8:	e7ee      	b.n	80126a8 <__ieee754_acos+0x28>
 80126ca:	49a8      	ldr	r1, [pc, #672]	; (801296c <__ieee754_acos+0x2ec>)
 80126cc:	428b      	cmp	r3, r1
 80126ce:	f300 8087 	bgt.w	80127e0 <__ieee754_acos+0x160>
 80126d2:	4aa7      	ldr	r2, [pc, #668]	; (8012970 <__ieee754_acos+0x2f0>)
 80126d4:	4293      	cmp	r3, r2
 80126d6:	f340 81f9 	ble.w	8012acc <__ieee754_acos+0x44c>
 80126da:	ee10 2a10 	vmov	r2, s0
 80126de:	ee10 0a10 	vmov	r0, s0
 80126e2:	462b      	mov	r3, r5
 80126e4:	4629      	mov	r1, r5
 80126e6:	f7ed ffa1 	bl	800062c <__aeabi_dmul>
 80126ea:	a387      	add	r3, pc, #540	; (adr r3, 8012908 <__ieee754_acos+0x288>)
 80126ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f0:	4606      	mov	r6, r0
 80126f2:	460f      	mov	r7, r1
 80126f4:	f7ed ff9a 	bl	800062c <__aeabi_dmul>
 80126f8:	a385      	add	r3, pc, #532	; (adr r3, 8012910 <__ieee754_acos+0x290>)
 80126fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fe:	f7ed fddf 	bl	80002c0 <__adddf3>
 8012702:	4632      	mov	r2, r6
 8012704:	463b      	mov	r3, r7
 8012706:	f7ed ff91 	bl	800062c <__aeabi_dmul>
 801270a:	a383      	add	r3, pc, #524	; (adr r3, 8012918 <__ieee754_acos+0x298>)
 801270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012710:	f7ed fdd4 	bl	80002bc <__aeabi_dsub>
 8012714:	4632      	mov	r2, r6
 8012716:	463b      	mov	r3, r7
 8012718:	f7ed ff88 	bl	800062c <__aeabi_dmul>
 801271c:	a380      	add	r3, pc, #512	; (adr r3, 8012920 <__ieee754_acos+0x2a0>)
 801271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012722:	f7ed fdcd 	bl	80002c0 <__adddf3>
 8012726:	4632      	mov	r2, r6
 8012728:	463b      	mov	r3, r7
 801272a:	f7ed ff7f 	bl	800062c <__aeabi_dmul>
 801272e:	a37e      	add	r3, pc, #504	; (adr r3, 8012928 <__ieee754_acos+0x2a8>)
 8012730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012734:	f7ed fdc2 	bl	80002bc <__aeabi_dsub>
 8012738:	4632      	mov	r2, r6
 801273a:	463b      	mov	r3, r7
 801273c:	f7ed ff76 	bl	800062c <__aeabi_dmul>
 8012740:	a37b      	add	r3, pc, #492	; (adr r3, 8012930 <__ieee754_acos+0x2b0>)
 8012742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012746:	f7ed fdbb 	bl	80002c0 <__adddf3>
 801274a:	4632      	mov	r2, r6
 801274c:	463b      	mov	r3, r7
 801274e:	f7ed ff6d 	bl	800062c <__aeabi_dmul>
 8012752:	a379      	add	r3, pc, #484	; (adr r3, 8012938 <__ieee754_acos+0x2b8>)
 8012754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012758:	4680      	mov	r8, r0
 801275a:	4689      	mov	r9, r1
 801275c:	4630      	mov	r0, r6
 801275e:	4639      	mov	r1, r7
 8012760:	f7ed ff64 	bl	800062c <__aeabi_dmul>
 8012764:	a376      	add	r3, pc, #472	; (adr r3, 8012940 <__ieee754_acos+0x2c0>)
 8012766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276a:	f7ed fda7 	bl	80002bc <__aeabi_dsub>
 801276e:	4632      	mov	r2, r6
 8012770:	463b      	mov	r3, r7
 8012772:	f7ed ff5b 	bl	800062c <__aeabi_dmul>
 8012776:	a374      	add	r3, pc, #464	; (adr r3, 8012948 <__ieee754_acos+0x2c8>)
 8012778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801277c:	f7ed fda0 	bl	80002c0 <__adddf3>
 8012780:	4632      	mov	r2, r6
 8012782:	463b      	mov	r3, r7
 8012784:	f7ed ff52 	bl	800062c <__aeabi_dmul>
 8012788:	a371      	add	r3, pc, #452	; (adr r3, 8012950 <__ieee754_acos+0x2d0>)
 801278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278e:	f7ed fd95 	bl	80002bc <__aeabi_dsub>
 8012792:	4632      	mov	r2, r6
 8012794:	463b      	mov	r3, r7
 8012796:	f7ed ff49 	bl	800062c <__aeabi_dmul>
 801279a:	4b76      	ldr	r3, [pc, #472]	; (8012974 <__ieee754_acos+0x2f4>)
 801279c:	2200      	movs	r2, #0
 801279e:	f7ed fd8f 	bl	80002c0 <__adddf3>
 80127a2:	4602      	mov	r2, r0
 80127a4:	460b      	mov	r3, r1
 80127a6:	4640      	mov	r0, r8
 80127a8:	4649      	mov	r1, r9
 80127aa:	f7ee f869 	bl	8000880 <__aeabi_ddiv>
 80127ae:	4622      	mov	r2, r4
 80127b0:	462b      	mov	r3, r5
 80127b2:	f7ed ff3b 	bl	800062c <__aeabi_dmul>
 80127b6:	4602      	mov	r2, r0
 80127b8:	460b      	mov	r3, r1
 80127ba:	a167      	add	r1, pc, #412	; (adr r1, 8012958 <__ieee754_acos+0x2d8>)
 80127bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127c0:	f7ed fd7c 	bl	80002bc <__aeabi_dsub>
 80127c4:	4602      	mov	r2, r0
 80127c6:	460b      	mov	r3, r1
 80127c8:	4620      	mov	r0, r4
 80127ca:	4629      	mov	r1, r5
 80127cc:	f7ed fd76 	bl	80002bc <__aeabi_dsub>
 80127d0:	4602      	mov	r2, r0
 80127d2:	460b      	mov	r3, r1
 80127d4:	a162      	add	r1, pc, #392	; (adr r1, 8012960 <__ieee754_acos+0x2e0>)
 80127d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127da:	f7ed fd6f 	bl	80002bc <__aeabi_dsub>
 80127de:	e771      	b.n	80126c4 <__ieee754_acos+0x44>
 80127e0:	2d00      	cmp	r5, #0
 80127e2:	f280 80cb 	bge.w	801297c <__ieee754_acos+0x2fc>
 80127e6:	ee10 0a10 	vmov	r0, s0
 80127ea:	4b62      	ldr	r3, [pc, #392]	; (8012974 <__ieee754_acos+0x2f4>)
 80127ec:	2200      	movs	r2, #0
 80127ee:	4629      	mov	r1, r5
 80127f0:	f7ed fd66 	bl	80002c0 <__adddf3>
 80127f4:	4b60      	ldr	r3, [pc, #384]	; (8012978 <__ieee754_acos+0x2f8>)
 80127f6:	2200      	movs	r2, #0
 80127f8:	f7ed ff18 	bl	800062c <__aeabi_dmul>
 80127fc:	a342      	add	r3, pc, #264	; (adr r3, 8012908 <__ieee754_acos+0x288>)
 80127fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012802:	4604      	mov	r4, r0
 8012804:	460d      	mov	r5, r1
 8012806:	f7ed ff11 	bl	800062c <__aeabi_dmul>
 801280a:	a341      	add	r3, pc, #260	; (adr r3, 8012910 <__ieee754_acos+0x290>)
 801280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012810:	f7ed fd56 	bl	80002c0 <__adddf3>
 8012814:	4622      	mov	r2, r4
 8012816:	462b      	mov	r3, r5
 8012818:	f7ed ff08 	bl	800062c <__aeabi_dmul>
 801281c:	a33e      	add	r3, pc, #248	; (adr r3, 8012918 <__ieee754_acos+0x298>)
 801281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012822:	f7ed fd4b 	bl	80002bc <__aeabi_dsub>
 8012826:	4622      	mov	r2, r4
 8012828:	462b      	mov	r3, r5
 801282a:	f7ed feff 	bl	800062c <__aeabi_dmul>
 801282e:	a33c      	add	r3, pc, #240	; (adr r3, 8012920 <__ieee754_acos+0x2a0>)
 8012830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012834:	f7ed fd44 	bl	80002c0 <__adddf3>
 8012838:	4622      	mov	r2, r4
 801283a:	462b      	mov	r3, r5
 801283c:	f7ed fef6 	bl	800062c <__aeabi_dmul>
 8012840:	a339      	add	r3, pc, #228	; (adr r3, 8012928 <__ieee754_acos+0x2a8>)
 8012842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012846:	f7ed fd39 	bl	80002bc <__aeabi_dsub>
 801284a:	4622      	mov	r2, r4
 801284c:	462b      	mov	r3, r5
 801284e:	f7ed feed 	bl	800062c <__aeabi_dmul>
 8012852:	a337      	add	r3, pc, #220	; (adr r3, 8012930 <__ieee754_acos+0x2b0>)
 8012854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012858:	f7ed fd32 	bl	80002c0 <__adddf3>
 801285c:	4622      	mov	r2, r4
 801285e:	462b      	mov	r3, r5
 8012860:	f7ed fee4 	bl	800062c <__aeabi_dmul>
 8012864:	ec45 4b10 	vmov	d0, r4, r5
 8012868:	4680      	mov	r8, r0
 801286a:	4689      	mov	r9, r1
 801286c:	f001 f8a4 	bl	80139b8 <__ieee754_sqrt>
 8012870:	a331      	add	r3, pc, #196	; (adr r3, 8012938 <__ieee754_acos+0x2b8>)
 8012872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012876:	4620      	mov	r0, r4
 8012878:	4629      	mov	r1, r5
 801287a:	ec57 6b10 	vmov	r6, r7, d0
 801287e:	f7ed fed5 	bl	800062c <__aeabi_dmul>
 8012882:	a32f      	add	r3, pc, #188	; (adr r3, 8012940 <__ieee754_acos+0x2c0>)
 8012884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012888:	f7ed fd18 	bl	80002bc <__aeabi_dsub>
 801288c:	4622      	mov	r2, r4
 801288e:	462b      	mov	r3, r5
 8012890:	f7ed fecc 	bl	800062c <__aeabi_dmul>
 8012894:	a32c      	add	r3, pc, #176	; (adr r3, 8012948 <__ieee754_acos+0x2c8>)
 8012896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289a:	f7ed fd11 	bl	80002c0 <__adddf3>
 801289e:	4622      	mov	r2, r4
 80128a0:	462b      	mov	r3, r5
 80128a2:	f7ed fec3 	bl	800062c <__aeabi_dmul>
 80128a6:	a32a      	add	r3, pc, #168	; (adr r3, 8012950 <__ieee754_acos+0x2d0>)
 80128a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ac:	f7ed fd06 	bl	80002bc <__aeabi_dsub>
 80128b0:	4622      	mov	r2, r4
 80128b2:	462b      	mov	r3, r5
 80128b4:	f7ed feba 	bl	800062c <__aeabi_dmul>
 80128b8:	4b2e      	ldr	r3, [pc, #184]	; (8012974 <__ieee754_acos+0x2f4>)
 80128ba:	2200      	movs	r2, #0
 80128bc:	f7ed fd00 	bl	80002c0 <__adddf3>
 80128c0:	4602      	mov	r2, r0
 80128c2:	460b      	mov	r3, r1
 80128c4:	4640      	mov	r0, r8
 80128c6:	4649      	mov	r1, r9
 80128c8:	f7ed ffda 	bl	8000880 <__aeabi_ddiv>
 80128cc:	4632      	mov	r2, r6
 80128ce:	463b      	mov	r3, r7
 80128d0:	f7ed feac 	bl	800062c <__aeabi_dmul>
 80128d4:	a320      	add	r3, pc, #128	; (adr r3, 8012958 <__ieee754_acos+0x2d8>)
 80128d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128da:	f7ed fcef 	bl	80002bc <__aeabi_dsub>
 80128de:	4632      	mov	r2, r6
 80128e0:	463b      	mov	r3, r7
 80128e2:	f7ed fced 	bl	80002c0 <__adddf3>
 80128e6:	4602      	mov	r2, r0
 80128e8:	460b      	mov	r3, r1
 80128ea:	f7ed fce9 	bl	80002c0 <__adddf3>
 80128ee:	4602      	mov	r2, r0
 80128f0:	460b      	mov	r3, r1
 80128f2:	a103      	add	r1, pc, #12	; (adr r1, 8012900 <__ieee754_acos+0x280>)
 80128f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128f8:	e76f      	b.n	80127da <__ieee754_acos+0x15a>
 80128fa:	bf00      	nop
 80128fc:	f3af 8000 	nop.w
 8012900:	54442d18 	.word	0x54442d18
 8012904:	400921fb 	.word	0x400921fb
 8012908:	0dfdf709 	.word	0x0dfdf709
 801290c:	3f023de1 	.word	0x3f023de1
 8012910:	7501b288 	.word	0x7501b288
 8012914:	3f49efe0 	.word	0x3f49efe0
 8012918:	b5688f3b 	.word	0xb5688f3b
 801291c:	3fa48228 	.word	0x3fa48228
 8012920:	0e884455 	.word	0x0e884455
 8012924:	3fc9c155 	.word	0x3fc9c155
 8012928:	03eb6f7d 	.word	0x03eb6f7d
 801292c:	3fd4d612 	.word	0x3fd4d612
 8012930:	55555555 	.word	0x55555555
 8012934:	3fc55555 	.word	0x3fc55555
 8012938:	b12e9282 	.word	0xb12e9282
 801293c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012940:	1b8d0159 	.word	0x1b8d0159
 8012944:	3fe6066c 	.word	0x3fe6066c
 8012948:	9c598ac8 	.word	0x9c598ac8
 801294c:	40002ae5 	.word	0x40002ae5
 8012950:	1c8a2d4b 	.word	0x1c8a2d4b
 8012954:	40033a27 	.word	0x40033a27
 8012958:	33145c07 	.word	0x33145c07
 801295c:	3c91a626 	.word	0x3c91a626
 8012960:	54442d18 	.word	0x54442d18
 8012964:	3ff921fb 	.word	0x3ff921fb
 8012968:	3fefffff 	.word	0x3fefffff
 801296c:	3fdfffff 	.word	0x3fdfffff
 8012970:	3c600000 	.word	0x3c600000
 8012974:	3ff00000 	.word	0x3ff00000
 8012978:	3fe00000 	.word	0x3fe00000
 801297c:	ee10 2a10 	vmov	r2, s0
 8012980:	462b      	mov	r3, r5
 8012982:	496d      	ldr	r1, [pc, #436]	; (8012b38 <__ieee754_acos+0x4b8>)
 8012984:	2000      	movs	r0, #0
 8012986:	f7ed fc99 	bl	80002bc <__aeabi_dsub>
 801298a:	4b6c      	ldr	r3, [pc, #432]	; (8012b3c <__ieee754_acos+0x4bc>)
 801298c:	2200      	movs	r2, #0
 801298e:	f7ed fe4d 	bl	800062c <__aeabi_dmul>
 8012992:	4604      	mov	r4, r0
 8012994:	460d      	mov	r5, r1
 8012996:	ec45 4b10 	vmov	d0, r4, r5
 801299a:	f001 f80d 	bl	80139b8 <__ieee754_sqrt>
 801299e:	a34e      	add	r3, pc, #312	; (adr r3, 8012ad8 <__ieee754_acos+0x458>)
 80129a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a4:	4620      	mov	r0, r4
 80129a6:	4629      	mov	r1, r5
 80129a8:	ec59 8b10 	vmov	r8, r9, d0
 80129ac:	f7ed fe3e 	bl	800062c <__aeabi_dmul>
 80129b0:	a34b      	add	r3, pc, #300	; (adr r3, 8012ae0 <__ieee754_acos+0x460>)
 80129b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b6:	f7ed fc83 	bl	80002c0 <__adddf3>
 80129ba:	4622      	mov	r2, r4
 80129bc:	462b      	mov	r3, r5
 80129be:	f7ed fe35 	bl	800062c <__aeabi_dmul>
 80129c2:	a349      	add	r3, pc, #292	; (adr r3, 8012ae8 <__ieee754_acos+0x468>)
 80129c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c8:	f7ed fc78 	bl	80002bc <__aeabi_dsub>
 80129cc:	4622      	mov	r2, r4
 80129ce:	462b      	mov	r3, r5
 80129d0:	f7ed fe2c 	bl	800062c <__aeabi_dmul>
 80129d4:	a346      	add	r3, pc, #280	; (adr r3, 8012af0 <__ieee754_acos+0x470>)
 80129d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129da:	f7ed fc71 	bl	80002c0 <__adddf3>
 80129de:	4622      	mov	r2, r4
 80129e0:	462b      	mov	r3, r5
 80129e2:	f7ed fe23 	bl	800062c <__aeabi_dmul>
 80129e6:	a344      	add	r3, pc, #272	; (adr r3, 8012af8 <__ieee754_acos+0x478>)
 80129e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ec:	f7ed fc66 	bl	80002bc <__aeabi_dsub>
 80129f0:	4622      	mov	r2, r4
 80129f2:	462b      	mov	r3, r5
 80129f4:	f7ed fe1a 	bl	800062c <__aeabi_dmul>
 80129f8:	a341      	add	r3, pc, #260	; (adr r3, 8012b00 <__ieee754_acos+0x480>)
 80129fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fe:	f7ed fc5f 	bl	80002c0 <__adddf3>
 8012a02:	4622      	mov	r2, r4
 8012a04:	462b      	mov	r3, r5
 8012a06:	f7ed fe11 	bl	800062c <__aeabi_dmul>
 8012a0a:	a33f      	add	r3, pc, #252	; (adr r3, 8012b08 <__ieee754_acos+0x488>)
 8012a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a10:	4682      	mov	sl, r0
 8012a12:	468b      	mov	fp, r1
 8012a14:	4620      	mov	r0, r4
 8012a16:	4629      	mov	r1, r5
 8012a18:	f7ed fe08 	bl	800062c <__aeabi_dmul>
 8012a1c:	a33c      	add	r3, pc, #240	; (adr r3, 8012b10 <__ieee754_acos+0x490>)
 8012a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a22:	f7ed fc4b 	bl	80002bc <__aeabi_dsub>
 8012a26:	4622      	mov	r2, r4
 8012a28:	462b      	mov	r3, r5
 8012a2a:	f7ed fdff 	bl	800062c <__aeabi_dmul>
 8012a2e:	a33a      	add	r3, pc, #232	; (adr r3, 8012b18 <__ieee754_acos+0x498>)
 8012a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a34:	f7ed fc44 	bl	80002c0 <__adddf3>
 8012a38:	4622      	mov	r2, r4
 8012a3a:	462b      	mov	r3, r5
 8012a3c:	f7ed fdf6 	bl	800062c <__aeabi_dmul>
 8012a40:	a337      	add	r3, pc, #220	; (adr r3, 8012b20 <__ieee754_acos+0x4a0>)
 8012a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a46:	f7ed fc39 	bl	80002bc <__aeabi_dsub>
 8012a4a:	4622      	mov	r2, r4
 8012a4c:	462b      	mov	r3, r5
 8012a4e:	f7ed fded 	bl	800062c <__aeabi_dmul>
 8012a52:	4b39      	ldr	r3, [pc, #228]	; (8012b38 <__ieee754_acos+0x4b8>)
 8012a54:	2200      	movs	r2, #0
 8012a56:	f7ed fc33 	bl	80002c0 <__adddf3>
 8012a5a:	4602      	mov	r2, r0
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	4650      	mov	r0, sl
 8012a60:	4659      	mov	r1, fp
 8012a62:	f7ed ff0d 	bl	8000880 <__aeabi_ddiv>
 8012a66:	4642      	mov	r2, r8
 8012a68:	464b      	mov	r3, r9
 8012a6a:	f7ed fddf 	bl	800062c <__aeabi_dmul>
 8012a6e:	2600      	movs	r6, #0
 8012a70:	4682      	mov	sl, r0
 8012a72:	468b      	mov	fp, r1
 8012a74:	4632      	mov	r2, r6
 8012a76:	464b      	mov	r3, r9
 8012a78:	4630      	mov	r0, r6
 8012a7a:	4649      	mov	r1, r9
 8012a7c:	f7ed fdd6 	bl	800062c <__aeabi_dmul>
 8012a80:	4602      	mov	r2, r0
 8012a82:	460b      	mov	r3, r1
 8012a84:	4620      	mov	r0, r4
 8012a86:	4629      	mov	r1, r5
 8012a88:	f7ed fc18 	bl	80002bc <__aeabi_dsub>
 8012a8c:	4632      	mov	r2, r6
 8012a8e:	4604      	mov	r4, r0
 8012a90:	460d      	mov	r5, r1
 8012a92:	464b      	mov	r3, r9
 8012a94:	4640      	mov	r0, r8
 8012a96:	4649      	mov	r1, r9
 8012a98:	f7ed fc12 	bl	80002c0 <__adddf3>
 8012a9c:	4602      	mov	r2, r0
 8012a9e:	460b      	mov	r3, r1
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	4629      	mov	r1, r5
 8012aa4:	f7ed feec 	bl	8000880 <__aeabi_ddiv>
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	460b      	mov	r3, r1
 8012aac:	4650      	mov	r0, sl
 8012aae:	4659      	mov	r1, fp
 8012ab0:	f7ed fc06 	bl	80002c0 <__adddf3>
 8012ab4:	4632      	mov	r2, r6
 8012ab6:	464b      	mov	r3, r9
 8012ab8:	f7ed fc02 	bl	80002c0 <__adddf3>
 8012abc:	4602      	mov	r2, r0
 8012abe:	460b      	mov	r3, r1
 8012ac0:	f7ed fbfe 	bl	80002c0 <__adddf3>
 8012ac4:	e5fe      	b.n	80126c4 <__ieee754_acos+0x44>
 8012ac6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8012b28 <__ieee754_acos+0x4a8>
 8012aca:	e5ed      	b.n	80126a8 <__ieee754_acos+0x28>
 8012acc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8012b30 <__ieee754_acos+0x4b0>
 8012ad0:	e5ea      	b.n	80126a8 <__ieee754_acos+0x28>
 8012ad2:	bf00      	nop
 8012ad4:	f3af 8000 	nop.w
 8012ad8:	0dfdf709 	.word	0x0dfdf709
 8012adc:	3f023de1 	.word	0x3f023de1
 8012ae0:	7501b288 	.word	0x7501b288
 8012ae4:	3f49efe0 	.word	0x3f49efe0
 8012ae8:	b5688f3b 	.word	0xb5688f3b
 8012aec:	3fa48228 	.word	0x3fa48228
 8012af0:	0e884455 	.word	0x0e884455
 8012af4:	3fc9c155 	.word	0x3fc9c155
 8012af8:	03eb6f7d 	.word	0x03eb6f7d
 8012afc:	3fd4d612 	.word	0x3fd4d612
 8012b00:	55555555 	.word	0x55555555
 8012b04:	3fc55555 	.word	0x3fc55555
 8012b08:	b12e9282 	.word	0xb12e9282
 8012b0c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012b10:	1b8d0159 	.word	0x1b8d0159
 8012b14:	3fe6066c 	.word	0x3fe6066c
 8012b18:	9c598ac8 	.word	0x9c598ac8
 8012b1c:	40002ae5 	.word	0x40002ae5
 8012b20:	1c8a2d4b 	.word	0x1c8a2d4b
 8012b24:	40033a27 	.word	0x40033a27
	...
 8012b30:	54442d18 	.word	0x54442d18
 8012b34:	3ff921fb 	.word	0x3ff921fb
 8012b38:	3ff00000 	.word	0x3ff00000
 8012b3c:	3fe00000 	.word	0x3fe00000

08012b40 <__ieee754_pow>:
 8012b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b44:	ed2d 8b06 	vpush	{d8-d10}
 8012b48:	b089      	sub	sp, #36	; 0x24
 8012b4a:	ed8d 1b00 	vstr	d1, [sp]
 8012b4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012b52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012b56:	ea58 0102 	orrs.w	r1, r8, r2
 8012b5a:	ec57 6b10 	vmov	r6, r7, d0
 8012b5e:	d115      	bne.n	8012b8c <__ieee754_pow+0x4c>
 8012b60:	19b3      	adds	r3, r6, r6
 8012b62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012b66:	4152      	adcs	r2, r2
 8012b68:	4299      	cmp	r1, r3
 8012b6a:	4b89      	ldr	r3, [pc, #548]	; (8012d90 <__ieee754_pow+0x250>)
 8012b6c:	4193      	sbcs	r3, r2
 8012b6e:	f080 84d2 	bcs.w	8013516 <__ieee754_pow+0x9d6>
 8012b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b76:	4630      	mov	r0, r6
 8012b78:	4639      	mov	r1, r7
 8012b7a:	f7ed fba1 	bl	80002c0 <__adddf3>
 8012b7e:	ec41 0b10 	vmov	d0, r0, r1
 8012b82:	b009      	add	sp, #36	; 0x24
 8012b84:	ecbd 8b06 	vpop	{d8-d10}
 8012b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b8c:	4b81      	ldr	r3, [pc, #516]	; (8012d94 <__ieee754_pow+0x254>)
 8012b8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012b92:	429c      	cmp	r4, r3
 8012b94:	ee10 aa10 	vmov	sl, s0
 8012b98:	463d      	mov	r5, r7
 8012b9a:	dc06      	bgt.n	8012baa <__ieee754_pow+0x6a>
 8012b9c:	d101      	bne.n	8012ba2 <__ieee754_pow+0x62>
 8012b9e:	2e00      	cmp	r6, #0
 8012ba0:	d1e7      	bne.n	8012b72 <__ieee754_pow+0x32>
 8012ba2:	4598      	cmp	r8, r3
 8012ba4:	dc01      	bgt.n	8012baa <__ieee754_pow+0x6a>
 8012ba6:	d10f      	bne.n	8012bc8 <__ieee754_pow+0x88>
 8012ba8:	b172      	cbz	r2, 8012bc8 <__ieee754_pow+0x88>
 8012baa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012bae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8012bb2:	ea55 050a 	orrs.w	r5, r5, sl
 8012bb6:	d1dc      	bne.n	8012b72 <__ieee754_pow+0x32>
 8012bb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012bbc:	18db      	adds	r3, r3, r3
 8012bbe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8012bc2:	4152      	adcs	r2, r2
 8012bc4:	429d      	cmp	r5, r3
 8012bc6:	e7d0      	b.n	8012b6a <__ieee754_pow+0x2a>
 8012bc8:	2d00      	cmp	r5, #0
 8012bca:	da3b      	bge.n	8012c44 <__ieee754_pow+0x104>
 8012bcc:	4b72      	ldr	r3, [pc, #456]	; (8012d98 <__ieee754_pow+0x258>)
 8012bce:	4598      	cmp	r8, r3
 8012bd0:	dc51      	bgt.n	8012c76 <__ieee754_pow+0x136>
 8012bd2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012bd6:	4598      	cmp	r8, r3
 8012bd8:	f340 84ac 	ble.w	8013534 <__ieee754_pow+0x9f4>
 8012bdc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012be0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012be4:	2b14      	cmp	r3, #20
 8012be6:	dd0f      	ble.n	8012c08 <__ieee754_pow+0xc8>
 8012be8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012bec:	fa22 f103 	lsr.w	r1, r2, r3
 8012bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8012bf4:	4293      	cmp	r3, r2
 8012bf6:	f040 849d 	bne.w	8013534 <__ieee754_pow+0x9f4>
 8012bfa:	f001 0101 	and.w	r1, r1, #1
 8012bfe:	f1c1 0302 	rsb	r3, r1, #2
 8012c02:	9304      	str	r3, [sp, #16]
 8012c04:	b182      	cbz	r2, 8012c28 <__ieee754_pow+0xe8>
 8012c06:	e05f      	b.n	8012cc8 <__ieee754_pow+0x188>
 8012c08:	2a00      	cmp	r2, #0
 8012c0a:	d15b      	bne.n	8012cc4 <__ieee754_pow+0x184>
 8012c0c:	f1c3 0314 	rsb	r3, r3, #20
 8012c10:	fa48 f103 	asr.w	r1, r8, r3
 8012c14:	fa01 f303 	lsl.w	r3, r1, r3
 8012c18:	4543      	cmp	r3, r8
 8012c1a:	f040 8488 	bne.w	801352e <__ieee754_pow+0x9ee>
 8012c1e:	f001 0101 	and.w	r1, r1, #1
 8012c22:	f1c1 0302 	rsb	r3, r1, #2
 8012c26:	9304      	str	r3, [sp, #16]
 8012c28:	4b5c      	ldr	r3, [pc, #368]	; (8012d9c <__ieee754_pow+0x25c>)
 8012c2a:	4598      	cmp	r8, r3
 8012c2c:	d132      	bne.n	8012c94 <__ieee754_pow+0x154>
 8012c2e:	f1b9 0f00 	cmp.w	r9, #0
 8012c32:	f280 8478 	bge.w	8013526 <__ieee754_pow+0x9e6>
 8012c36:	4959      	ldr	r1, [pc, #356]	; (8012d9c <__ieee754_pow+0x25c>)
 8012c38:	4632      	mov	r2, r6
 8012c3a:	463b      	mov	r3, r7
 8012c3c:	2000      	movs	r0, #0
 8012c3e:	f7ed fe1f 	bl	8000880 <__aeabi_ddiv>
 8012c42:	e79c      	b.n	8012b7e <__ieee754_pow+0x3e>
 8012c44:	2300      	movs	r3, #0
 8012c46:	9304      	str	r3, [sp, #16]
 8012c48:	2a00      	cmp	r2, #0
 8012c4a:	d13d      	bne.n	8012cc8 <__ieee754_pow+0x188>
 8012c4c:	4b51      	ldr	r3, [pc, #324]	; (8012d94 <__ieee754_pow+0x254>)
 8012c4e:	4598      	cmp	r8, r3
 8012c50:	d1ea      	bne.n	8012c28 <__ieee754_pow+0xe8>
 8012c52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012c56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012c5a:	ea53 030a 	orrs.w	r3, r3, sl
 8012c5e:	f000 845a 	beq.w	8013516 <__ieee754_pow+0x9d6>
 8012c62:	4b4f      	ldr	r3, [pc, #316]	; (8012da0 <__ieee754_pow+0x260>)
 8012c64:	429c      	cmp	r4, r3
 8012c66:	dd08      	ble.n	8012c7a <__ieee754_pow+0x13a>
 8012c68:	f1b9 0f00 	cmp.w	r9, #0
 8012c6c:	f2c0 8457 	blt.w	801351e <__ieee754_pow+0x9de>
 8012c70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c74:	e783      	b.n	8012b7e <__ieee754_pow+0x3e>
 8012c76:	2302      	movs	r3, #2
 8012c78:	e7e5      	b.n	8012c46 <__ieee754_pow+0x106>
 8012c7a:	f1b9 0f00 	cmp.w	r9, #0
 8012c7e:	f04f 0000 	mov.w	r0, #0
 8012c82:	f04f 0100 	mov.w	r1, #0
 8012c86:	f6bf af7a 	bge.w	8012b7e <__ieee754_pow+0x3e>
 8012c8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012c8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012c92:	e774      	b.n	8012b7e <__ieee754_pow+0x3e>
 8012c94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012c98:	d106      	bne.n	8012ca8 <__ieee754_pow+0x168>
 8012c9a:	4632      	mov	r2, r6
 8012c9c:	463b      	mov	r3, r7
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	4639      	mov	r1, r7
 8012ca2:	f7ed fcc3 	bl	800062c <__aeabi_dmul>
 8012ca6:	e76a      	b.n	8012b7e <__ieee754_pow+0x3e>
 8012ca8:	4b3e      	ldr	r3, [pc, #248]	; (8012da4 <__ieee754_pow+0x264>)
 8012caa:	4599      	cmp	r9, r3
 8012cac:	d10c      	bne.n	8012cc8 <__ieee754_pow+0x188>
 8012cae:	2d00      	cmp	r5, #0
 8012cb0:	db0a      	blt.n	8012cc8 <__ieee754_pow+0x188>
 8012cb2:	ec47 6b10 	vmov	d0, r6, r7
 8012cb6:	b009      	add	sp, #36	; 0x24
 8012cb8:	ecbd 8b06 	vpop	{d8-d10}
 8012cbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc0:	f000 be7a 	b.w	80139b8 <__ieee754_sqrt>
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	9304      	str	r3, [sp, #16]
 8012cc8:	ec47 6b10 	vmov	d0, r6, r7
 8012ccc:	f001 fe3a 	bl	8014944 <fabs>
 8012cd0:	ec51 0b10 	vmov	r0, r1, d0
 8012cd4:	f1ba 0f00 	cmp.w	sl, #0
 8012cd8:	d129      	bne.n	8012d2e <__ieee754_pow+0x1ee>
 8012cda:	b124      	cbz	r4, 8012ce6 <__ieee754_pow+0x1a6>
 8012cdc:	4b2f      	ldr	r3, [pc, #188]	; (8012d9c <__ieee754_pow+0x25c>)
 8012cde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d123      	bne.n	8012d2e <__ieee754_pow+0x1ee>
 8012ce6:	f1b9 0f00 	cmp.w	r9, #0
 8012cea:	da05      	bge.n	8012cf8 <__ieee754_pow+0x1b8>
 8012cec:	4602      	mov	r2, r0
 8012cee:	460b      	mov	r3, r1
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	492a      	ldr	r1, [pc, #168]	; (8012d9c <__ieee754_pow+0x25c>)
 8012cf4:	f7ed fdc4 	bl	8000880 <__aeabi_ddiv>
 8012cf8:	2d00      	cmp	r5, #0
 8012cfa:	f6bf af40 	bge.w	8012b7e <__ieee754_pow+0x3e>
 8012cfe:	9b04      	ldr	r3, [sp, #16]
 8012d00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012d04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012d08:	4323      	orrs	r3, r4
 8012d0a:	d108      	bne.n	8012d1e <__ieee754_pow+0x1de>
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	460b      	mov	r3, r1
 8012d10:	4610      	mov	r0, r2
 8012d12:	4619      	mov	r1, r3
 8012d14:	f7ed fad2 	bl	80002bc <__aeabi_dsub>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	460b      	mov	r3, r1
 8012d1c:	e78f      	b.n	8012c3e <__ieee754_pow+0xfe>
 8012d1e:	9b04      	ldr	r3, [sp, #16]
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	f47f af2c 	bne.w	8012b7e <__ieee754_pow+0x3e>
 8012d26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d2a:	4619      	mov	r1, r3
 8012d2c:	e727      	b.n	8012b7e <__ieee754_pow+0x3e>
 8012d2e:	0feb      	lsrs	r3, r5, #31
 8012d30:	3b01      	subs	r3, #1
 8012d32:	9306      	str	r3, [sp, #24]
 8012d34:	9a06      	ldr	r2, [sp, #24]
 8012d36:	9b04      	ldr	r3, [sp, #16]
 8012d38:	4313      	orrs	r3, r2
 8012d3a:	d102      	bne.n	8012d42 <__ieee754_pow+0x202>
 8012d3c:	4632      	mov	r2, r6
 8012d3e:	463b      	mov	r3, r7
 8012d40:	e7e6      	b.n	8012d10 <__ieee754_pow+0x1d0>
 8012d42:	4b19      	ldr	r3, [pc, #100]	; (8012da8 <__ieee754_pow+0x268>)
 8012d44:	4598      	cmp	r8, r3
 8012d46:	f340 80fb 	ble.w	8012f40 <__ieee754_pow+0x400>
 8012d4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012d4e:	4598      	cmp	r8, r3
 8012d50:	4b13      	ldr	r3, [pc, #76]	; (8012da0 <__ieee754_pow+0x260>)
 8012d52:	dd0c      	ble.n	8012d6e <__ieee754_pow+0x22e>
 8012d54:	429c      	cmp	r4, r3
 8012d56:	dc0f      	bgt.n	8012d78 <__ieee754_pow+0x238>
 8012d58:	f1b9 0f00 	cmp.w	r9, #0
 8012d5c:	da0f      	bge.n	8012d7e <__ieee754_pow+0x23e>
 8012d5e:	2000      	movs	r0, #0
 8012d60:	b009      	add	sp, #36	; 0x24
 8012d62:	ecbd 8b06 	vpop	{d8-d10}
 8012d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d6a:	f001 bde2 	b.w	8014932 <__math_oflow>
 8012d6e:	429c      	cmp	r4, r3
 8012d70:	dbf2      	blt.n	8012d58 <__ieee754_pow+0x218>
 8012d72:	4b0a      	ldr	r3, [pc, #40]	; (8012d9c <__ieee754_pow+0x25c>)
 8012d74:	429c      	cmp	r4, r3
 8012d76:	dd19      	ble.n	8012dac <__ieee754_pow+0x26c>
 8012d78:	f1b9 0f00 	cmp.w	r9, #0
 8012d7c:	dcef      	bgt.n	8012d5e <__ieee754_pow+0x21e>
 8012d7e:	2000      	movs	r0, #0
 8012d80:	b009      	add	sp, #36	; 0x24
 8012d82:	ecbd 8b06 	vpop	{d8-d10}
 8012d86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d8a:	f001 bdc9 	b.w	8014920 <__math_uflow>
 8012d8e:	bf00      	nop
 8012d90:	fff00000 	.word	0xfff00000
 8012d94:	7ff00000 	.word	0x7ff00000
 8012d98:	433fffff 	.word	0x433fffff
 8012d9c:	3ff00000 	.word	0x3ff00000
 8012da0:	3fefffff 	.word	0x3fefffff
 8012da4:	3fe00000 	.word	0x3fe00000
 8012da8:	41e00000 	.word	0x41e00000
 8012dac:	4b60      	ldr	r3, [pc, #384]	; (8012f30 <__ieee754_pow+0x3f0>)
 8012dae:	2200      	movs	r2, #0
 8012db0:	f7ed fa84 	bl	80002bc <__aeabi_dsub>
 8012db4:	a354      	add	r3, pc, #336	; (adr r3, 8012f08 <__ieee754_pow+0x3c8>)
 8012db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dba:	4604      	mov	r4, r0
 8012dbc:	460d      	mov	r5, r1
 8012dbe:	f7ed fc35 	bl	800062c <__aeabi_dmul>
 8012dc2:	a353      	add	r3, pc, #332	; (adr r3, 8012f10 <__ieee754_pow+0x3d0>)
 8012dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc8:	4606      	mov	r6, r0
 8012dca:	460f      	mov	r7, r1
 8012dcc:	4620      	mov	r0, r4
 8012dce:	4629      	mov	r1, r5
 8012dd0:	f7ed fc2c 	bl	800062c <__aeabi_dmul>
 8012dd4:	4b57      	ldr	r3, [pc, #348]	; (8012f34 <__ieee754_pow+0x3f4>)
 8012dd6:	4682      	mov	sl, r0
 8012dd8:	468b      	mov	fp, r1
 8012dda:	2200      	movs	r2, #0
 8012ddc:	4620      	mov	r0, r4
 8012dde:	4629      	mov	r1, r5
 8012de0:	f7ed fc24 	bl	800062c <__aeabi_dmul>
 8012de4:	4602      	mov	r2, r0
 8012de6:	460b      	mov	r3, r1
 8012de8:	a14b      	add	r1, pc, #300	; (adr r1, 8012f18 <__ieee754_pow+0x3d8>)
 8012dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012dee:	f7ed fa65 	bl	80002bc <__aeabi_dsub>
 8012df2:	4622      	mov	r2, r4
 8012df4:	462b      	mov	r3, r5
 8012df6:	f7ed fc19 	bl	800062c <__aeabi_dmul>
 8012dfa:	4602      	mov	r2, r0
 8012dfc:	460b      	mov	r3, r1
 8012dfe:	2000      	movs	r0, #0
 8012e00:	494d      	ldr	r1, [pc, #308]	; (8012f38 <__ieee754_pow+0x3f8>)
 8012e02:	f7ed fa5b 	bl	80002bc <__aeabi_dsub>
 8012e06:	4622      	mov	r2, r4
 8012e08:	4680      	mov	r8, r0
 8012e0a:	4689      	mov	r9, r1
 8012e0c:	462b      	mov	r3, r5
 8012e0e:	4620      	mov	r0, r4
 8012e10:	4629      	mov	r1, r5
 8012e12:	f7ed fc0b 	bl	800062c <__aeabi_dmul>
 8012e16:	4602      	mov	r2, r0
 8012e18:	460b      	mov	r3, r1
 8012e1a:	4640      	mov	r0, r8
 8012e1c:	4649      	mov	r1, r9
 8012e1e:	f7ed fc05 	bl	800062c <__aeabi_dmul>
 8012e22:	a33f      	add	r3, pc, #252	; (adr r3, 8012f20 <__ieee754_pow+0x3e0>)
 8012e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e28:	f7ed fc00 	bl	800062c <__aeabi_dmul>
 8012e2c:	4602      	mov	r2, r0
 8012e2e:	460b      	mov	r3, r1
 8012e30:	4650      	mov	r0, sl
 8012e32:	4659      	mov	r1, fp
 8012e34:	f7ed fa42 	bl	80002bc <__aeabi_dsub>
 8012e38:	4602      	mov	r2, r0
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	4680      	mov	r8, r0
 8012e3e:	4689      	mov	r9, r1
 8012e40:	4630      	mov	r0, r6
 8012e42:	4639      	mov	r1, r7
 8012e44:	f7ed fa3c 	bl	80002c0 <__adddf3>
 8012e48:	2000      	movs	r0, #0
 8012e4a:	4632      	mov	r2, r6
 8012e4c:	463b      	mov	r3, r7
 8012e4e:	4604      	mov	r4, r0
 8012e50:	460d      	mov	r5, r1
 8012e52:	f7ed fa33 	bl	80002bc <__aeabi_dsub>
 8012e56:	4602      	mov	r2, r0
 8012e58:	460b      	mov	r3, r1
 8012e5a:	4640      	mov	r0, r8
 8012e5c:	4649      	mov	r1, r9
 8012e5e:	f7ed fa2d 	bl	80002bc <__aeabi_dsub>
 8012e62:	9b04      	ldr	r3, [sp, #16]
 8012e64:	9a06      	ldr	r2, [sp, #24]
 8012e66:	3b01      	subs	r3, #1
 8012e68:	4313      	orrs	r3, r2
 8012e6a:	4682      	mov	sl, r0
 8012e6c:	468b      	mov	fp, r1
 8012e6e:	f040 81e7 	bne.w	8013240 <__ieee754_pow+0x700>
 8012e72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012f28 <__ieee754_pow+0x3e8>
 8012e76:	eeb0 8a47 	vmov.f32	s16, s14
 8012e7a:	eef0 8a67 	vmov.f32	s17, s15
 8012e7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012e82:	2600      	movs	r6, #0
 8012e84:	4632      	mov	r2, r6
 8012e86:	463b      	mov	r3, r7
 8012e88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e8c:	f7ed fa16 	bl	80002bc <__aeabi_dsub>
 8012e90:	4622      	mov	r2, r4
 8012e92:	462b      	mov	r3, r5
 8012e94:	f7ed fbca 	bl	800062c <__aeabi_dmul>
 8012e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e9c:	4680      	mov	r8, r0
 8012e9e:	4689      	mov	r9, r1
 8012ea0:	4650      	mov	r0, sl
 8012ea2:	4659      	mov	r1, fp
 8012ea4:	f7ed fbc2 	bl	800062c <__aeabi_dmul>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	460b      	mov	r3, r1
 8012eac:	4640      	mov	r0, r8
 8012eae:	4649      	mov	r1, r9
 8012eb0:	f7ed fa06 	bl	80002c0 <__adddf3>
 8012eb4:	4632      	mov	r2, r6
 8012eb6:	463b      	mov	r3, r7
 8012eb8:	4680      	mov	r8, r0
 8012eba:	4689      	mov	r9, r1
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	f7ed fbb4 	bl	800062c <__aeabi_dmul>
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	460d      	mov	r5, r1
 8012eca:	4602      	mov	r2, r0
 8012ecc:	4649      	mov	r1, r9
 8012ece:	4640      	mov	r0, r8
 8012ed0:	f7ed f9f6 	bl	80002c0 <__adddf3>
 8012ed4:	4b19      	ldr	r3, [pc, #100]	; (8012f3c <__ieee754_pow+0x3fc>)
 8012ed6:	4299      	cmp	r1, r3
 8012ed8:	ec45 4b19 	vmov	d9, r4, r5
 8012edc:	4606      	mov	r6, r0
 8012ede:	460f      	mov	r7, r1
 8012ee0:	468b      	mov	fp, r1
 8012ee2:	f340 82f1 	ble.w	80134c8 <__ieee754_pow+0x988>
 8012ee6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012eea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012eee:	4303      	orrs	r3, r0
 8012ef0:	f000 81e4 	beq.w	80132bc <__ieee754_pow+0x77c>
 8012ef4:	ec51 0b18 	vmov	r0, r1, d8
 8012ef8:	2200      	movs	r2, #0
 8012efa:	2300      	movs	r3, #0
 8012efc:	f7ed fe08 	bl	8000b10 <__aeabi_dcmplt>
 8012f00:	3800      	subs	r0, #0
 8012f02:	bf18      	it	ne
 8012f04:	2001      	movne	r0, #1
 8012f06:	e72b      	b.n	8012d60 <__ieee754_pow+0x220>
 8012f08:	60000000 	.word	0x60000000
 8012f0c:	3ff71547 	.word	0x3ff71547
 8012f10:	f85ddf44 	.word	0xf85ddf44
 8012f14:	3e54ae0b 	.word	0x3e54ae0b
 8012f18:	55555555 	.word	0x55555555
 8012f1c:	3fd55555 	.word	0x3fd55555
 8012f20:	652b82fe 	.word	0x652b82fe
 8012f24:	3ff71547 	.word	0x3ff71547
 8012f28:	00000000 	.word	0x00000000
 8012f2c:	bff00000 	.word	0xbff00000
 8012f30:	3ff00000 	.word	0x3ff00000
 8012f34:	3fd00000 	.word	0x3fd00000
 8012f38:	3fe00000 	.word	0x3fe00000
 8012f3c:	408fffff 	.word	0x408fffff
 8012f40:	4bd5      	ldr	r3, [pc, #852]	; (8013298 <__ieee754_pow+0x758>)
 8012f42:	402b      	ands	r3, r5
 8012f44:	2200      	movs	r2, #0
 8012f46:	b92b      	cbnz	r3, 8012f54 <__ieee754_pow+0x414>
 8012f48:	4bd4      	ldr	r3, [pc, #848]	; (801329c <__ieee754_pow+0x75c>)
 8012f4a:	f7ed fb6f 	bl	800062c <__aeabi_dmul>
 8012f4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012f52:	460c      	mov	r4, r1
 8012f54:	1523      	asrs	r3, r4, #20
 8012f56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012f5a:	4413      	add	r3, r2
 8012f5c:	9305      	str	r3, [sp, #20]
 8012f5e:	4bd0      	ldr	r3, [pc, #832]	; (80132a0 <__ieee754_pow+0x760>)
 8012f60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012f64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012f68:	429c      	cmp	r4, r3
 8012f6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012f6e:	dd08      	ble.n	8012f82 <__ieee754_pow+0x442>
 8012f70:	4bcc      	ldr	r3, [pc, #816]	; (80132a4 <__ieee754_pow+0x764>)
 8012f72:	429c      	cmp	r4, r3
 8012f74:	f340 8162 	ble.w	801323c <__ieee754_pow+0x6fc>
 8012f78:	9b05      	ldr	r3, [sp, #20]
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	9305      	str	r3, [sp, #20]
 8012f7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012f82:	2400      	movs	r4, #0
 8012f84:	00e3      	lsls	r3, r4, #3
 8012f86:	9307      	str	r3, [sp, #28]
 8012f88:	4bc7      	ldr	r3, [pc, #796]	; (80132a8 <__ieee754_pow+0x768>)
 8012f8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012f8e:	ed93 7b00 	vldr	d7, [r3]
 8012f92:	4629      	mov	r1, r5
 8012f94:	ec53 2b17 	vmov	r2, r3, d7
 8012f98:	eeb0 9a47 	vmov.f32	s18, s14
 8012f9c:	eef0 9a67 	vmov.f32	s19, s15
 8012fa0:	4682      	mov	sl, r0
 8012fa2:	f7ed f98b 	bl	80002bc <__aeabi_dsub>
 8012fa6:	4652      	mov	r2, sl
 8012fa8:	4606      	mov	r6, r0
 8012faa:	460f      	mov	r7, r1
 8012fac:	462b      	mov	r3, r5
 8012fae:	ec51 0b19 	vmov	r0, r1, d9
 8012fb2:	f7ed f985 	bl	80002c0 <__adddf3>
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	460b      	mov	r3, r1
 8012fba:	2000      	movs	r0, #0
 8012fbc:	49bb      	ldr	r1, [pc, #748]	; (80132ac <__ieee754_pow+0x76c>)
 8012fbe:	f7ed fc5f 	bl	8000880 <__aeabi_ddiv>
 8012fc2:	ec41 0b1a 	vmov	d10, r0, r1
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	460b      	mov	r3, r1
 8012fca:	4630      	mov	r0, r6
 8012fcc:	4639      	mov	r1, r7
 8012fce:	f7ed fb2d 	bl	800062c <__aeabi_dmul>
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fd8:	9302      	str	r3, [sp, #8]
 8012fda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012fde:	46ab      	mov	fp, r5
 8012fe0:	106d      	asrs	r5, r5, #1
 8012fe2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012fe6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012fea:	ec41 0b18 	vmov	d8, r0, r1
 8012fee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	4640      	mov	r0, r8
 8012ff6:	4649      	mov	r1, r9
 8012ff8:	4614      	mov	r4, r2
 8012ffa:	461d      	mov	r5, r3
 8012ffc:	f7ed fb16 	bl	800062c <__aeabi_dmul>
 8013000:	4602      	mov	r2, r0
 8013002:	460b      	mov	r3, r1
 8013004:	4630      	mov	r0, r6
 8013006:	4639      	mov	r1, r7
 8013008:	f7ed f958 	bl	80002bc <__aeabi_dsub>
 801300c:	ec53 2b19 	vmov	r2, r3, d9
 8013010:	4606      	mov	r6, r0
 8013012:	460f      	mov	r7, r1
 8013014:	4620      	mov	r0, r4
 8013016:	4629      	mov	r1, r5
 8013018:	f7ed f950 	bl	80002bc <__aeabi_dsub>
 801301c:	4602      	mov	r2, r0
 801301e:	460b      	mov	r3, r1
 8013020:	4650      	mov	r0, sl
 8013022:	4659      	mov	r1, fp
 8013024:	f7ed f94a 	bl	80002bc <__aeabi_dsub>
 8013028:	4642      	mov	r2, r8
 801302a:	464b      	mov	r3, r9
 801302c:	f7ed fafe 	bl	800062c <__aeabi_dmul>
 8013030:	4602      	mov	r2, r0
 8013032:	460b      	mov	r3, r1
 8013034:	4630      	mov	r0, r6
 8013036:	4639      	mov	r1, r7
 8013038:	f7ed f940 	bl	80002bc <__aeabi_dsub>
 801303c:	ec53 2b1a 	vmov	r2, r3, d10
 8013040:	f7ed faf4 	bl	800062c <__aeabi_dmul>
 8013044:	ec53 2b18 	vmov	r2, r3, d8
 8013048:	ec41 0b19 	vmov	d9, r0, r1
 801304c:	ec51 0b18 	vmov	r0, r1, d8
 8013050:	f7ed faec 	bl	800062c <__aeabi_dmul>
 8013054:	a37c      	add	r3, pc, #496	; (adr r3, 8013248 <__ieee754_pow+0x708>)
 8013056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305a:	4604      	mov	r4, r0
 801305c:	460d      	mov	r5, r1
 801305e:	f7ed fae5 	bl	800062c <__aeabi_dmul>
 8013062:	a37b      	add	r3, pc, #492	; (adr r3, 8013250 <__ieee754_pow+0x710>)
 8013064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013068:	f7ed f92a 	bl	80002c0 <__adddf3>
 801306c:	4622      	mov	r2, r4
 801306e:	462b      	mov	r3, r5
 8013070:	f7ed fadc 	bl	800062c <__aeabi_dmul>
 8013074:	a378      	add	r3, pc, #480	; (adr r3, 8013258 <__ieee754_pow+0x718>)
 8013076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307a:	f7ed f921 	bl	80002c0 <__adddf3>
 801307e:	4622      	mov	r2, r4
 8013080:	462b      	mov	r3, r5
 8013082:	f7ed fad3 	bl	800062c <__aeabi_dmul>
 8013086:	a376      	add	r3, pc, #472	; (adr r3, 8013260 <__ieee754_pow+0x720>)
 8013088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308c:	f7ed f918 	bl	80002c0 <__adddf3>
 8013090:	4622      	mov	r2, r4
 8013092:	462b      	mov	r3, r5
 8013094:	f7ed faca 	bl	800062c <__aeabi_dmul>
 8013098:	a373      	add	r3, pc, #460	; (adr r3, 8013268 <__ieee754_pow+0x728>)
 801309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309e:	f7ed f90f 	bl	80002c0 <__adddf3>
 80130a2:	4622      	mov	r2, r4
 80130a4:	462b      	mov	r3, r5
 80130a6:	f7ed fac1 	bl	800062c <__aeabi_dmul>
 80130aa:	a371      	add	r3, pc, #452	; (adr r3, 8013270 <__ieee754_pow+0x730>)
 80130ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b0:	f7ed f906 	bl	80002c0 <__adddf3>
 80130b4:	4622      	mov	r2, r4
 80130b6:	4606      	mov	r6, r0
 80130b8:	460f      	mov	r7, r1
 80130ba:	462b      	mov	r3, r5
 80130bc:	4620      	mov	r0, r4
 80130be:	4629      	mov	r1, r5
 80130c0:	f7ed fab4 	bl	800062c <__aeabi_dmul>
 80130c4:	4602      	mov	r2, r0
 80130c6:	460b      	mov	r3, r1
 80130c8:	4630      	mov	r0, r6
 80130ca:	4639      	mov	r1, r7
 80130cc:	f7ed faae 	bl	800062c <__aeabi_dmul>
 80130d0:	4642      	mov	r2, r8
 80130d2:	4604      	mov	r4, r0
 80130d4:	460d      	mov	r5, r1
 80130d6:	464b      	mov	r3, r9
 80130d8:	ec51 0b18 	vmov	r0, r1, d8
 80130dc:	f7ed f8f0 	bl	80002c0 <__adddf3>
 80130e0:	ec53 2b19 	vmov	r2, r3, d9
 80130e4:	f7ed faa2 	bl	800062c <__aeabi_dmul>
 80130e8:	4622      	mov	r2, r4
 80130ea:	462b      	mov	r3, r5
 80130ec:	f7ed f8e8 	bl	80002c0 <__adddf3>
 80130f0:	4642      	mov	r2, r8
 80130f2:	4682      	mov	sl, r0
 80130f4:	468b      	mov	fp, r1
 80130f6:	464b      	mov	r3, r9
 80130f8:	4640      	mov	r0, r8
 80130fa:	4649      	mov	r1, r9
 80130fc:	f7ed fa96 	bl	800062c <__aeabi_dmul>
 8013100:	4b6b      	ldr	r3, [pc, #428]	; (80132b0 <__ieee754_pow+0x770>)
 8013102:	2200      	movs	r2, #0
 8013104:	4606      	mov	r6, r0
 8013106:	460f      	mov	r7, r1
 8013108:	f7ed f8da 	bl	80002c0 <__adddf3>
 801310c:	4652      	mov	r2, sl
 801310e:	465b      	mov	r3, fp
 8013110:	f7ed f8d6 	bl	80002c0 <__adddf3>
 8013114:	2000      	movs	r0, #0
 8013116:	4604      	mov	r4, r0
 8013118:	460d      	mov	r5, r1
 801311a:	4602      	mov	r2, r0
 801311c:	460b      	mov	r3, r1
 801311e:	4640      	mov	r0, r8
 8013120:	4649      	mov	r1, r9
 8013122:	f7ed fa83 	bl	800062c <__aeabi_dmul>
 8013126:	4b62      	ldr	r3, [pc, #392]	; (80132b0 <__ieee754_pow+0x770>)
 8013128:	4680      	mov	r8, r0
 801312a:	4689      	mov	r9, r1
 801312c:	2200      	movs	r2, #0
 801312e:	4620      	mov	r0, r4
 8013130:	4629      	mov	r1, r5
 8013132:	f7ed f8c3 	bl	80002bc <__aeabi_dsub>
 8013136:	4632      	mov	r2, r6
 8013138:	463b      	mov	r3, r7
 801313a:	f7ed f8bf 	bl	80002bc <__aeabi_dsub>
 801313e:	4602      	mov	r2, r0
 8013140:	460b      	mov	r3, r1
 8013142:	4650      	mov	r0, sl
 8013144:	4659      	mov	r1, fp
 8013146:	f7ed f8b9 	bl	80002bc <__aeabi_dsub>
 801314a:	ec53 2b18 	vmov	r2, r3, d8
 801314e:	f7ed fa6d 	bl	800062c <__aeabi_dmul>
 8013152:	4622      	mov	r2, r4
 8013154:	4606      	mov	r6, r0
 8013156:	460f      	mov	r7, r1
 8013158:	462b      	mov	r3, r5
 801315a:	ec51 0b19 	vmov	r0, r1, d9
 801315e:	f7ed fa65 	bl	800062c <__aeabi_dmul>
 8013162:	4602      	mov	r2, r0
 8013164:	460b      	mov	r3, r1
 8013166:	4630      	mov	r0, r6
 8013168:	4639      	mov	r1, r7
 801316a:	f7ed f8a9 	bl	80002c0 <__adddf3>
 801316e:	4606      	mov	r6, r0
 8013170:	460f      	mov	r7, r1
 8013172:	4602      	mov	r2, r0
 8013174:	460b      	mov	r3, r1
 8013176:	4640      	mov	r0, r8
 8013178:	4649      	mov	r1, r9
 801317a:	f7ed f8a1 	bl	80002c0 <__adddf3>
 801317e:	a33e      	add	r3, pc, #248	; (adr r3, 8013278 <__ieee754_pow+0x738>)
 8013180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013184:	2000      	movs	r0, #0
 8013186:	4604      	mov	r4, r0
 8013188:	460d      	mov	r5, r1
 801318a:	f7ed fa4f 	bl	800062c <__aeabi_dmul>
 801318e:	4642      	mov	r2, r8
 8013190:	ec41 0b18 	vmov	d8, r0, r1
 8013194:	464b      	mov	r3, r9
 8013196:	4620      	mov	r0, r4
 8013198:	4629      	mov	r1, r5
 801319a:	f7ed f88f 	bl	80002bc <__aeabi_dsub>
 801319e:	4602      	mov	r2, r0
 80131a0:	460b      	mov	r3, r1
 80131a2:	4630      	mov	r0, r6
 80131a4:	4639      	mov	r1, r7
 80131a6:	f7ed f889 	bl	80002bc <__aeabi_dsub>
 80131aa:	a335      	add	r3, pc, #212	; (adr r3, 8013280 <__ieee754_pow+0x740>)
 80131ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b0:	f7ed fa3c 	bl	800062c <__aeabi_dmul>
 80131b4:	a334      	add	r3, pc, #208	; (adr r3, 8013288 <__ieee754_pow+0x748>)
 80131b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ba:	4606      	mov	r6, r0
 80131bc:	460f      	mov	r7, r1
 80131be:	4620      	mov	r0, r4
 80131c0:	4629      	mov	r1, r5
 80131c2:	f7ed fa33 	bl	800062c <__aeabi_dmul>
 80131c6:	4602      	mov	r2, r0
 80131c8:	460b      	mov	r3, r1
 80131ca:	4630      	mov	r0, r6
 80131cc:	4639      	mov	r1, r7
 80131ce:	f7ed f877 	bl	80002c0 <__adddf3>
 80131d2:	9a07      	ldr	r2, [sp, #28]
 80131d4:	4b37      	ldr	r3, [pc, #220]	; (80132b4 <__ieee754_pow+0x774>)
 80131d6:	4413      	add	r3, r2
 80131d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131dc:	f7ed f870 	bl	80002c0 <__adddf3>
 80131e0:	4682      	mov	sl, r0
 80131e2:	9805      	ldr	r0, [sp, #20]
 80131e4:	468b      	mov	fp, r1
 80131e6:	f7ed f9b7 	bl	8000558 <__aeabi_i2d>
 80131ea:	9a07      	ldr	r2, [sp, #28]
 80131ec:	4b32      	ldr	r3, [pc, #200]	; (80132b8 <__ieee754_pow+0x778>)
 80131ee:	4413      	add	r3, r2
 80131f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80131f4:	4606      	mov	r6, r0
 80131f6:	460f      	mov	r7, r1
 80131f8:	4652      	mov	r2, sl
 80131fa:	465b      	mov	r3, fp
 80131fc:	ec51 0b18 	vmov	r0, r1, d8
 8013200:	f7ed f85e 	bl	80002c0 <__adddf3>
 8013204:	4642      	mov	r2, r8
 8013206:	464b      	mov	r3, r9
 8013208:	f7ed f85a 	bl	80002c0 <__adddf3>
 801320c:	4632      	mov	r2, r6
 801320e:	463b      	mov	r3, r7
 8013210:	f7ed f856 	bl	80002c0 <__adddf3>
 8013214:	2000      	movs	r0, #0
 8013216:	4632      	mov	r2, r6
 8013218:	463b      	mov	r3, r7
 801321a:	4604      	mov	r4, r0
 801321c:	460d      	mov	r5, r1
 801321e:	f7ed f84d 	bl	80002bc <__aeabi_dsub>
 8013222:	4642      	mov	r2, r8
 8013224:	464b      	mov	r3, r9
 8013226:	f7ed f849 	bl	80002bc <__aeabi_dsub>
 801322a:	ec53 2b18 	vmov	r2, r3, d8
 801322e:	f7ed f845 	bl	80002bc <__aeabi_dsub>
 8013232:	4602      	mov	r2, r0
 8013234:	460b      	mov	r3, r1
 8013236:	4650      	mov	r0, sl
 8013238:	4659      	mov	r1, fp
 801323a:	e610      	b.n	8012e5e <__ieee754_pow+0x31e>
 801323c:	2401      	movs	r4, #1
 801323e:	e6a1      	b.n	8012f84 <__ieee754_pow+0x444>
 8013240:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013290 <__ieee754_pow+0x750>
 8013244:	e617      	b.n	8012e76 <__ieee754_pow+0x336>
 8013246:	bf00      	nop
 8013248:	4a454eef 	.word	0x4a454eef
 801324c:	3fca7e28 	.word	0x3fca7e28
 8013250:	93c9db65 	.word	0x93c9db65
 8013254:	3fcd864a 	.word	0x3fcd864a
 8013258:	a91d4101 	.word	0xa91d4101
 801325c:	3fd17460 	.word	0x3fd17460
 8013260:	518f264d 	.word	0x518f264d
 8013264:	3fd55555 	.word	0x3fd55555
 8013268:	db6fabff 	.word	0xdb6fabff
 801326c:	3fdb6db6 	.word	0x3fdb6db6
 8013270:	33333303 	.word	0x33333303
 8013274:	3fe33333 	.word	0x3fe33333
 8013278:	e0000000 	.word	0xe0000000
 801327c:	3feec709 	.word	0x3feec709
 8013280:	dc3a03fd 	.word	0xdc3a03fd
 8013284:	3feec709 	.word	0x3feec709
 8013288:	145b01f5 	.word	0x145b01f5
 801328c:	be3e2fe0 	.word	0xbe3e2fe0
 8013290:	00000000 	.word	0x00000000
 8013294:	3ff00000 	.word	0x3ff00000
 8013298:	7ff00000 	.word	0x7ff00000
 801329c:	43400000 	.word	0x43400000
 80132a0:	0003988e 	.word	0x0003988e
 80132a4:	000bb679 	.word	0x000bb679
 80132a8:	0803cc90 	.word	0x0803cc90
 80132ac:	3ff00000 	.word	0x3ff00000
 80132b0:	40080000 	.word	0x40080000
 80132b4:	0803ccb0 	.word	0x0803ccb0
 80132b8:	0803cca0 	.word	0x0803cca0
 80132bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8013594 <__ieee754_pow+0xa54>)
 80132be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c2:	4640      	mov	r0, r8
 80132c4:	4649      	mov	r1, r9
 80132c6:	f7ec fffb 	bl	80002c0 <__adddf3>
 80132ca:	4622      	mov	r2, r4
 80132cc:	ec41 0b1a 	vmov	d10, r0, r1
 80132d0:	462b      	mov	r3, r5
 80132d2:	4630      	mov	r0, r6
 80132d4:	4639      	mov	r1, r7
 80132d6:	f7ec fff1 	bl	80002bc <__aeabi_dsub>
 80132da:	4602      	mov	r2, r0
 80132dc:	460b      	mov	r3, r1
 80132de:	ec51 0b1a 	vmov	r0, r1, d10
 80132e2:	f7ed fc33 	bl	8000b4c <__aeabi_dcmpgt>
 80132e6:	2800      	cmp	r0, #0
 80132e8:	f47f ae04 	bne.w	8012ef4 <__ieee754_pow+0x3b4>
 80132ec:	4aa4      	ldr	r2, [pc, #656]	; (8013580 <__ieee754_pow+0xa40>)
 80132ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80132f2:	4293      	cmp	r3, r2
 80132f4:	f340 8108 	ble.w	8013508 <__ieee754_pow+0x9c8>
 80132f8:	151b      	asrs	r3, r3, #20
 80132fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80132fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013302:	fa4a f303 	asr.w	r3, sl, r3
 8013306:	445b      	add	r3, fp
 8013308:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801330c:	4e9d      	ldr	r6, [pc, #628]	; (8013584 <__ieee754_pow+0xa44>)
 801330e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013312:	4116      	asrs	r6, r2
 8013314:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013318:	2000      	movs	r0, #0
 801331a:	ea23 0106 	bic.w	r1, r3, r6
 801331e:	f1c2 0214 	rsb	r2, r2, #20
 8013322:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013326:	fa4a fa02 	asr.w	sl, sl, r2
 801332a:	f1bb 0f00 	cmp.w	fp, #0
 801332e:	4602      	mov	r2, r0
 8013330:	460b      	mov	r3, r1
 8013332:	4620      	mov	r0, r4
 8013334:	4629      	mov	r1, r5
 8013336:	bfb8      	it	lt
 8013338:	f1ca 0a00 	rsblt	sl, sl, #0
 801333c:	f7ec ffbe 	bl	80002bc <__aeabi_dsub>
 8013340:	ec41 0b19 	vmov	d9, r0, r1
 8013344:	4642      	mov	r2, r8
 8013346:	464b      	mov	r3, r9
 8013348:	ec51 0b19 	vmov	r0, r1, d9
 801334c:	f7ec ffb8 	bl	80002c0 <__adddf3>
 8013350:	a37b      	add	r3, pc, #492	; (adr r3, 8013540 <__ieee754_pow+0xa00>)
 8013352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013356:	2000      	movs	r0, #0
 8013358:	4604      	mov	r4, r0
 801335a:	460d      	mov	r5, r1
 801335c:	f7ed f966 	bl	800062c <__aeabi_dmul>
 8013360:	ec53 2b19 	vmov	r2, r3, d9
 8013364:	4606      	mov	r6, r0
 8013366:	460f      	mov	r7, r1
 8013368:	4620      	mov	r0, r4
 801336a:	4629      	mov	r1, r5
 801336c:	f7ec ffa6 	bl	80002bc <__aeabi_dsub>
 8013370:	4602      	mov	r2, r0
 8013372:	460b      	mov	r3, r1
 8013374:	4640      	mov	r0, r8
 8013376:	4649      	mov	r1, r9
 8013378:	f7ec ffa0 	bl	80002bc <__aeabi_dsub>
 801337c:	a372      	add	r3, pc, #456	; (adr r3, 8013548 <__ieee754_pow+0xa08>)
 801337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013382:	f7ed f953 	bl	800062c <__aeabi_dmul>
 8013386:	a372      	add	r3, pc, #456	; (adr r3, 8013550 <__ieee754_pow+0xa10>)
 8013388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801338c:	4680      	mov	r8, r0
 801338e:	4689      	mov	r9, r1
 8013390:	4620      	mov	r0, r4
 8013392:	4629      	mov	r1, r5
 8013394:	f7ed f94a 	bl	800062c <__aeabi_dmul>
 8013398:	4602      	mov	r2, r0
 801339a:	460b      	mov	r3, r1
 801339c:	4640      	mov	r0, r8
 801339e:	4649      	mov	r1, r9
 80133a0:	f7ec ff8e 	bl	80002c0 <__adddf3>
 80133a4:	4604      	mov	r4, r0
 80133a6:	460d      	mov	r5, r1
 80133a8:	4602      	mov	r2, r0
 80133aa:	460b      	mov	r3, r1
 80133ac:	4630      	mov	r0, r6
 80133ae:	4639      	mov	r1, r7
 80133b0:	f7ec ff86 	bl	80002c0 <__adddf3>
 80133b4:	4632      	mov	r2, r6
 80133b6:	463b      	mov	r3, r7
 80133b8:	4680      	mov	r8, r0
 80133ba:	4689      	mov	r9, r1
 80133bc:	f7ec ff7e 	bl	80002bc <__aeabi_dsub>
 80133c0:	4602      	mov	r2, r0
 80133c2:	460b      	mov	r3, r1
 80133c4:	4620      	mov	r0, r4
 80133c6:	4629      	mov	r1, r5
 80133c8:	f7ec ff78 	bl	80002bc <__aeabi_dsub>
 80133cc:	4642      	mov	r2, r8
 80133ce:	4606      	mov	r6, r0
 80133d0:	460f      	mov	r7, r1
 80133d2:	464b      	mov	r3, r9
 80133d4:	4640      	mov	r0, r8
 80133d6:	4649      	mov	r1, r9
 80133d8:	f7ed f928 	bl	800062c <__aeabi_dmul>
 80133dc:	a35e      	add	r3, pc, #376	; (adr r3, 8013558 <__ieee754_pow+0xa18>)
 80133de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e2:	4604      	mov	r4, r0
 80133e4:	460d      	mov	r5, r1
 80133e6:	f7ed f921 	bl	800062c <__aeabi_dmul>
 80133ea:	a35d      	add	r3, pc, #372	; (adr r3, 8013560 <__ieee754_pow+0xa20>)
 80133ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f0:	f7ec ff64 	bl	80002bc <__aeabi_dsub>
 80133f4:	4622      	mov	r2, r4
 80133f6:	462b      	mov	r3, r5
 80133f8:	f7ed f918 	bl	800062c <__aeabi_dmul>
 80133fc:	a35a      	add	r3, pc, #360	; (adr r3, 8013568 <__ieee754_pow+0xa28>)
 80133fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013402:	f7ec ff5d 	bl	80002c0 <__adddf3>
 8013406:	4622      	mov	r2, r4
 8013408:	462b      	mov	r3, r5
 801340a:	f7ed f90f 	bl	800062c <__aeabi_dmul>
 801340e:	a358      	add	r3, pc, #352	; (adr r3, 8013570 <__ieee754_pow+0xa30>)
 8013410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013414:	f7ec ff52 	bl	80002bc <__aeabi_dsub>
 8013418:	4622      	mov	r2, r4
 801341a:	462b      	mov	r3, r5
 801341c:	f7ed f906 	bl	800062c <__aeabi_dmul>
 8013420:	a355      	add	r3, pc, #340	; (adr r3, 8013578 <__ieee754_pow+0xa38>)
 8013422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013426:	f7ec ff4b 	bl	80002c0 <__adddf3>
 801342a:	4622      	mov	r2, r4
 801342c:	462b      	mov	r3, r5
 801342e:	f7ed f8fd 	bl	800062c <__aeabi_dmul>
 8013432:	4602      	mov	r2, r0
 8013434:	460b      	mov	r3, r1
 8013436:	4640      	mov	r0, r8
 8013438:	4649      	mov	r1, r9
 801343a:	f7ec ff3f 	bl	80002bc <__aeabi_dsub>
 801343e:	4604      	mov	r4, r0
 8013440:	460d      	mov	r5, r1
 8013442:	4602      	mov	r2, r0
 8013444:	460b      	mov	r3, r1
 8013446:	4640      	mov	r0, r8
 8013448:	4649      	mov	r1, r9
 801344a:	f7ed f8ef 	bl	800062c <__aeabi_dmul>
 801344e:	2200      	movs	r2, #0
 8013450:	ec41 0b19 	vmov	d9, r0, r1
 8013454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013458:	4620      	mov	r0, r4
 801345a:	4629      	mov	r1, r5
 801345c:	f7ec ff2e 	bl	80002bc <__aeabi_dsub>
 8013460:	4602      	mov	r2, r0
 8013462:	460b      	mov	r3, r1
 8013464:	ec51 0b19 	vmov	r0, r1, d9
 8013468:	f7ed fa0a 	bl	8000880 <__aeabi_ddiv>
 801346c:	4632      	mov	r2, r6
 801346e:	4604      	mov	r4, r0
 8013470:	460d      	mov	r5, r1
 8013472:	463b      	mov	r3, r7
 8013474:	4640      	mov	r0, r8
 8013476:	4649      	mov	r1, r9
 8013478:	f7ed f8d8 	bl	800062c <__aeabi_dmul>
 801347c:	4632      	mov	r2, r6
 801347e:	463b      	mov	r3, r7
 8013480:	f7ec ff1e 	bl	80002c0 <__adddf3>
 8013484:	4602      	mov	r2, r0
 8013486:	460b      	mov	r3, r1
 8013488:	4620      	mov	r0, r4
 801348a:	4629      	mov	r1, r5
 801348c:	f7ec ff16 	bl	80002bc <__aeabi_dsub>
 8013490:	4642      	mov	r2, r8
 8013492:	464b      	mov	r3, r9
 8013494:	f7ec ff12 	bl	80002bc <__aeabi_dsub>
 8013498:	460b      	mov	r3, r1
 801349a:	4602      	mov	r2, r0
 801349c:	493a      	ldr	r1, [pc, #232]	; (8013588 <__ieee754_pow+0xa48>)
 801349e:	2000      	movs	r0, #0
 80134a0:	f7ec ff0c 	bl	80002bc <__aeabi_dsub>
 80134a4:	ec41 0b10 	vmov	d0, r0, r1
 80134a8:	ee10 3a90 	vmov	r3, s1
 80134ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80134b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80134b4:	da2b      	bge.n	801350e <__ieee754_pow+0x9ce>
 80134b6:	4650      	mov	r0, sl
 80134b8:	f001 fae2 	bl	8014a80 <scalbn>
 80134bc:	ec51 0b10 	vmov	r0, r1, d0
 80134c0:	ec53 2b18 	vmov	r2, r3, d8
 80134c4:	f7ff bbed 	b.w	8012ca2 <__ieee754_pow+0x162>
 80134c8:	4b30      	ldr	r3, [pc, #192]	; (801358c <__ieee754_pow+0xa4c>)
 80134ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80134ce:	429e      	cmp	r6, r3
 80134d0:	f77f af0c 	ble.w	80132ec <__ieee754_pow+0x7ac>
 80134d4:	4b2e      	ldr	r3, [pc, #184]	; (8013590 <__ieee754_pow+0xa50>)
 80134d6:	440b      	add	r3, r1
 80134d8:	4303      	orrs	r3, r0
 80134da:	d009      	beq.n	80134f0 <__ieee754_pow+0x9b0>
 80134dc:	ec51 0b18 	vmov	r0, r1, d8
 80134e0:	2200      	movs	r2, #0
 80134e2:	2300      	movs	r3, #0
 80134e4:	f7ed fb14 	bl	8000b10 <__aeabi_dcmplt>
 80134e8:	3800      	subs	r0, #0
 80134ea:	bf18      	it	ne
 80134ec:	2001      	movne	r0, #1
 80134ee:	e447      	b.n	8012d80 <__ieee754_pow+0x240>
 80134f0:	4622      	mov	r2, r4
 80134f2:	462b      	mov	r3, r5
 80134f4:	f7ec fee2 	bl	80002bc <__aeabi_dsub>
 80134f8:	4642      	mov	r2, r8
 80134fa:	464b      	mov	r3, r9
 80134fc:	f7ed fb1c 	bl	8000b38 <__aeabi_dcmpge>
 8013500:	2800      	cmp	r0, #0
 8013502:	f43f aef3 	beq.w	80132ec <__ieee754_pow+0x7ac>
 8013506:	e7e9      	b.n	80134dc <__ieee754_pow+0x99c>
 8013508:	f04f 0a00 	mov.w	sl, #0
 801350c:	e71a      	b.n	8013344 <__ieee754_pow+0x804>
 801350e:	ec51 0b10 	vmov	r0, r1, d0
 8013512:	4619      	mov	r1, r3
 8013514:	e7d4      	b.n	80134c0 <__ieee754_pow+0x980>
 8013516:	491c      	ldr	r1, [pc, #112]	; (8013588 <__ieee754_pow+0xa48>)
 8013518:	2000      	movs	r0, #0
 801351a:	f7ff bb30 	b.w	8012b7e <__ieee754_pow+0x3e>
 801351e:	2000      	movs	r0, #0
 8013520:	2100      	movs	r1, #0
 8013522:	f7ff bb2c 	b.w	8012b7e <__ieee754_pow+0x3e>
 8013526:	4630      	mov	r0, r6
 8013528:	4639      	mov	r1, r7
 801352a:	f7ff bb28 	b.w	8012b7e <__ieee754_pow+0x3e>
 801352e:	9204      	str	r2, [sp, #16]
 8013530:	f7ff bb7a 	b.w	8012c28 <__ieee754_pow+0xe8>
 8013534:	2300      	movs	r3, #0
 8013536:	f7ff bb64 	b.w	8012c02 <__ieee754_pow+0xc2>
 801353a:	bf00      	nop
 801353c:	f3af 8000 	nop.w
 8013540:	00000000 	.word	0x00000000
 8013544:	3fe62e43 	.word	0x3fe62e43
 8013548:	fefa39ef 	.word	0xfefa39ef
 801354c:	3fe62e42 	.word	0x3fe62e42
 8013550:	0ca86c39 	.word	0x0ca86c39
 8013554:	be205c61 	.word	0xbe205c61
 8013558:	72bea4d0 	.word	0x72bea4d0
 801355c:	3e663769 	.word	0x3e663769
 8013560:	c5d26bf1 	.word	0xc5d26bf1
 8013564:	3ebbbd41 	.word	0x3ebbbd41
 8013568:	af25de2c 	.word	0xaf25de2c
 801356c:	3f11566a 	.word	0x3f11566a
 8013570:	16bebd93 	.word	0x16bebd93
 8013574:	3f66c16c 	.word	0x3f66c16c
 8013578:	5555553e 	.word	0x5555553e
 801357c:	3fc55555 	.word	0x3fc55555
 8013580:	3fe00000 	.word	0x3fe00000
 8013584:	000fffff 	.word	0x000fffff
 8013588:	3ff00000 	.word	0x3ff00000
 801358c:	4090cbff 	.word	0x4090cbff
 8013590:	3f6f3400 	.word	0x3f6f3400
 8013594:	652b82fe 	.word	0x652b82fe
 8013598:	3c971547 	.word	0x3c971547
 801359c:	00000000 	.word	0x00000000

080135a0 <__ieee754_rem_pio2>:
 80135a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a4:	ed2d 8b02 	vpush	{d8}
 80135a8:	ec55 4b10 	vmov	r4, r5, d0
 80135ac:	4bca      	ldr	r3, [pc, #808]	; (80138d8 <__ieee754_rem_pio2+0x338>)
 80135ae:	b08b      	sub	sp, #44	; 0x2c
 80135b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80135b4:	4598      	cmp	r8, r3
 80135b6:	4682      	mov	sl, r0
 80135b8:	9502      	str	r5, [sp, #8]
 80135ba:	dc08      	bgt.n	80135ce <__ieee754_rem_pio2+0x2e>
 80135bc:	2200      	movs	r2, #0
 80135be:	2300      	movs	r3, #0
 80135c0:	ed80 0b00 	vstr	d0, [r0]
 80135c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80135c8:	f04f 0b00 	mov.w	fp, #0
 80135cc:	e028      	b.n	8013620 <__ieee754_rem_pio2+0x80>
 80135ce:	4bc3      	ldr	r3, [pc, #780]	; (80138dc <__ieee754_rem_pio2+0x33c>)
 80135d0:	4598      	cmp	r8, r3
 80135d2:	dc78      	bgt.n	80136c6 <__ieee754_rem_pio2+0x126>
 80135d4:	9b02      	ldr	r3, [sp, #8]
 80135d6:	4ec2      	ldr	r6, [pc, #776]	; (80138e0 <__ieee754_rem_pio2+0x340>)
 80135d8:	2b00      	cmp	r3, #0
 80135da:	ee10 0a10 	vmov	r0, s0
 80135de:	a3b0      	add	r3, pc, #704	; (adr r3, 80138a0 <__ieee754_rem_pio2+0x300>)
 80135e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e4:	4629      	mov	r1, r5
 80135e6:	dd39      	ble.n	801365c <__ieee754_rem_pio2+0xbc>
 80135e8:	f7ec fe68 	bl	80002bc <__aeabi_dsub>
 80135ec:	45b0      	cmp	r8, r6
 80135ee:	4604      	mov	r4, r0
 80135f0:	460d      	mov	r5, r1
 80135f2:	d01b      	beq.n	801362c <__ieee754_rem_pio2+0x8c>
 80135f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80138a8 <__ieee754_rem_pio2+0x308>)
 80135f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135fa:	f7ec fe5f 	bl	80002bc <__aeabi_dsub>
 80135fe:	4602      	mov	r2, r0
 8013600:	460b      	mov	r3, r1
 8013602:	e9ca 2300 	strd	r2, r3, [sl]
 8013606:	4620      	mov	r0, r4
 8013608:	4629      	mov	r1, r5
 801360a:	f7ec fe57 	bl	80002bc <__aeabi_dsub>
 801360e:	a3a6      	add	r3, pc, #664	; (adr r3, 80138a8 <__ieee754_rem_pio2+0x308>)
 8013610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013614:	f7ec fe52 	bl	80002bc <__aeabi_dsub>
 8013618:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801361c:	f04f 0b01 	mov.w	fp, #1
 8013620:	4658      	mov	r0, fp
 8013622:	b00b      	add	sp, #44	; 0x2c
 8013624:	ecbd 8b02 	vpop	{d8}
 8013628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801362c:	a3a0      	add	r3, pc, #640	; (adr r3, 80138b0 <__ieee754_rem_pio2+0x310>)
 801362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013632:	f7ec fe43 	bl	80002bc <__aeabi_dsub>
 8013636:	a3a0      	add	r3, pc, #640	; (adr r3, 80138b8 <__ieee754_rem_pio2+0x318>)
 8013638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363c:	4604      	mov	r4, r0
 801363e:	460d      	mov	r5, r1
 8013640:	f7ec fe3c 	bl	80002bc <__aeabi_dsub>
 8013644:	4602      	mov	r2, r0
 8013646:	460b      	mov	r3, r1
 8013648:	e9ca 2300 	strd	r2, r3, [sl]
 801364c:	4620      	mov	r0, r4
 801364e:	4629      	mov	r1, r5
 8013650:	f7ec fe34 	bl	80002bc <__aeabi_dsub>
 8013654:	a398      	add	r3, pc, #608	; (adr r3, 80138b8 <__ieee754_rem_pio2+0x318>)
 8013656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801365a:	e7db      	b.n	8013614 <__ieee754_rem_pio2+0x74>
 801365c:	f7ec fe30 	bl	80002c0 <__adddf3>
 8013660:	45b0      	cmp	r8, r6
 8013662:	4604      	mov	r4, r0
 8013664:	460d      	mov	r5, r1
 8013666:	d016      	beq.n	8013696 <__ieee754_rem_pio2+0xf6>
 8013668:	a38f      	add	r3, pc, #572	; (adr r3, 80138a8 <__ieee754_rem_pio2+0x308>)
 801366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366e:	f7ec fe27 	bl	80002c0 <__adddf3>
 8013672:	4602      	mov	r2, r0
 8013674:	460b      	mov	r3, r1
 8013676:	e9ca 2300 	strd	r2, r3, [sl]
 801367a:	4620      	mov	r0, r4
 801367c:	4629      	mov	r1, r5
 801367e:	f7ec fe1d 	bl	80002bc <__aeabi_dsub>
 8013682:	a389      	add	r3, pc, #548	; (adr r3, 80138a8 <__ieee754_rem_pio2+0x308>)
 8013684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013688:	f7ec fe1a 	bl	80002c0 <__adddf3>
 801368c:	f04f 3bff 	mov.w	fp, #4294967295
 8013690:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013694:	e7c4      	b.n	8013620 <__ieee754_rem_pio2+0x80>
 8013696:	a386      	add	r3, pc, #536	; (adr r3, 80138b0 <__ieee754_rem_pio2+0x310>)
 8013698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801369c:	f7ec fe10 	bl	80002c0 <__adddf3>
 80136a0:	a385      	add	r3, pc, #532	; (adr r3, 80138b8 <__ieee754_rem_pio2+0x318>)
 80136a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a6:	4604      	mov	r4, r0
 80136a8:	460d      	mov	r5, r1
 80136aa:	f7ec fe09 	bl	80002c0 <__adddf3>
 80136ae:	4602      	mov	r2, r0
 80136b0:	460b      	mov	r3, r1
 80136b2:	e9ca 2300 	strd	r2, r3, [sl]
 80136b6:	4620      	mov	r0, r4
 80136b8:	4629      	mov	r1, r5
 80136ba:	f7ec fdff 	bl	80002bc <__aeabi_dsub>
 80136be:	a37e      	add	r3, pc, #504	; (adr r3, 80138b8 <__ieee754_rem_pio2+0x318>)
 80136c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c4:	e7e0      	b.n	8013688 <__ieee754_rem_pio2+0xe8>
 80136c6:	4b87      	ldr	r3, [pc, #540]	; (80138e4 <__ieee754_rem_pio2+0x344>)
 80136c8:	4598      	cmp	r8, r3
 80136ca:	f300 80d9 	bgt.w	8013880 <__ieee754_rem_pio2+0x2e0>
 80136ce:	f001 f939 	bl	8014944 <fabs>
 80136d2:	ec55 4b10 	vmov	r4, r5, d0
 80136d6:	ee10 0a10 	vmov	r0, s0
 80136da:	a379      	add	r3, pc, #484	; (adr r3, 80138c0 <__ieee754_rem_pio2+0x320>)
 80136dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e0:	4629      	mov	r1, r5
 80136e2:	f7ec ffa3 	bl	800062c <__aeabi_dmul>
 80136e6:	4b80      	ldr	r3, [pc, #512]	; (80138e8 <__ieee754_rem_pio2+0x348>)
 80136e8:	2200      	movs	r2, #0
 80136ea:	f7ec fde9 	bl	80002c0 <__adddf3>
 80136ee:	f7ed fa4d 	bl	8000b8c <__aeabi_d2iz>
 80136f2:	4683      	mov	fp, r0
 80136f4:	f7ec ff30 	bl	8000558 <__aeabi_i2d>
 80136f8:	4602      	mov	r2, r0
 80136fa:	460b      	mov	r3, r1
 80136fc:	ec43 2b18 	vmov	d8, r2, r3
 8013700:	a367      	add	r3, pc, #412	; (adr r3, 80138a0 <__ieee754_rem_pio2+0x300>)
 8013702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013706:	f7ec ff91 	bl	800062c <__aeabi_dmul>
 801370a:	4602      	mov	r2, r0
 801370c:	460b      	mov	r3, r1
 801370e:	4620      	mov	r0, r4
 8013710:	4629      	mov	r1, r5
 8013712:	f7ec fdd3 	bl	80002bc <__aeabi_dsub>
 8013716:	a364      	add	r3, pc, #400	; (adr r3, 80138a8 <__ieee754_rem_pio2+0x308>)
 8013718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371c:	4606      	mov	r6, r0
 801371e:	460f      	mov	r7, r1
 8013720:	ec51 0b18 	vmov	r0, r1, d8
 8013724:	f7ec ff82 	bl	800062c <__aeabi_dmul>
 8013728:	f1bb 0f1f 	cmp.w	fp, #31
 801372c:	4604      	mov	r4, r0
 801372e:	460d      	mov	r5, r1
 8013730:	dc0d      	bgt.n	801374e <__ieee754_rem_pio2+0x1ae>
 8013732:	4b6e      	ldr	r3, [pc, #440]	; (80138ec <__ieee754_rem_pio2+0x34c>)
 8013734:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801373c:	4543      	cmp	r3, r8
 801373e:	d006      	beq.n	801374e <__ieee754_rem_pio2+0x1ae>
 8013740:	4622      	mov	r2, r4
 8013742:	462b      	mov	r3, r5
 8013744:	4630      	mov	r0, r6
 8013746:	4639      	mov	r1, r7
 8013748:	f7ec fdb8 	bl	80002bc <__aeabi_dsub>
 801374c:	e00f      	b.n	801376e <__ieee754_rem_pio2+0x1ce>
 801374e:	462b      	mov	r3, r5
 8013750:	4622      	mov	r2, r4
 8013752:	4630      	mov	r0, r6
 8013754:	4639      	mov	r1, r7
 8013756:	f7ec fdb1 	bl	80002bc <__aeabi_dsub>
 801375a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801375e:	9303      	str	r3, [sp, #12]
 8013760:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013764:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8013768:	f1b8 0f10 	cmp.w	r8, #16
 801376c:	dc02      	bgt.n	8013774 <__ieee754_rem_pio2+0x1d4>
 801376e:	e9ca 0100 	strd	r0, r1, [sl]
 8013772:	e039      	b.n	80137e8 <__ieee754_rem_pio2+0x248>
 8013774:	a34e      	add	r3, pc, #312	; (adr r3, 80138b0 <__ieee754_rem_pio2+0x310>)
 8013776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377a:	ec51 0b18 	vmov	r0, r1, d8
 801377e:	f7ec ff55 	bl	800062c <__aeabi_dmul>
 8013782:	4604      	mov	r4, r0
 8013784:	460d      	mov	r5, r1
 8013786:	4602      	mov	r2, r0
 8013788:	460b      	mov	r3, r1
 801378a:	4630      	mov	r0, r6
 801378c:	4639      	mov	r1, r7
 801378e:	f7ec fd95 	bl	80002bc <__aeabi_dsub>
 8013792:	4602      	mov	r2, r0
 8013794:	460b      	mov	r3, r1
 8013796:	4680      	mov	r8, r0
 8013798:	4689      	mov	r9, r1
 801379a:	4630      	mov	r0, r6
 801379c:	4639      	mov	r1, r7
 801379e:	f7ec fd8d 	bl	80002bc <__aeabi_dsub>
 80137a2:	4622      	mov	r2, r4
 80137a4:	462b      	mov	r3, r5
 80137a6:	f7ec fd89 	bl	80002bc <__aeabi_dsub>
 80137aa:	a343      	add	r3, pc, #268	; (adr r3, 80138b8 <__ieee754_rem_pio2+0x318>)
 80137ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b0:	4604      	mov	r4, r0
 80137b2:	460d      	mov	r5, r1
 80137b4:	ec51 0b18 	vmov	r0, r1, d8
 80137b8:	f7ec ff38 	bl	800062c <__aeabi_dmul>
 80137bc:	4622      	mov	r2, r4
 80137be:	462b      	mov	r3, r5
 80137c0:	f7ec fd7c 	bl	80002bc <__aeabi_dsub>
 80137c4:	4602      	mov	r2, r0
 80137c6:	460b      	mov	r3, r1
 80137c8:	4604      	mov	r4, r0
 80137ca:	460d      	mov	r5, r1
 80137cc:	4640      	mov	r0, r8
 80137ce:	4649      	mov	r1, r9
 80137d0:	f7ec fd74 	bl	80002bc <__aeabi_dsub>
 80137d4:	9a03      	ldr	r2, [sp, #12]
 80137d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80137da:	1ad3      	subs	r3, r2, r3
 80137dc:	2b31      	cmp	r3, #49	; 0x31
 80137de:	dc24      	bgt.n	801382a <__ieee754_rem_pio2+0x28a>
 80137e0:	e9ca 0100 	strd	r0, r1, [sl]
 80137e4:	4646      	mov	r6, r8
 80137e6:	464f      	mov	r7, r9
 80137e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80137ec:	4630      	mov	r0, r6
 80137ee:	4642      	mov	r2, r8
 80137f0:	464b      	mov	r3, r9
 80137f2:	4639      	mov	r1, r7
 80137f4:	f7ec fd62 	bl	80002bc <__aeabi_dsub>
 80137f8:	462b      	mov	r3, r5
 80137fa:	4622      	mov	r2, r4
 80137fc:	f7ec fd5e 	bl	80002bc <__aeabi_dsub>
 8013800:	9b02      	ldr	r3, [sp, #8]
 8013802:	2b00      	cmp	r3, #0
 8013804:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013808:	f6bf af0a 	bge.w	8013620 <__ieee754_rem_pio2+0x80>
 801380c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013810:	f8ca 3004 	str.w	r3, [sl, #4]
 8013814:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013818:	f8ca 8000 	str.w	r8, [sl]
 801381c:	f8ca 0008 	str.w	r0, [sl, #8]
 8013820:	f8ca 300c 	str.w	r3, [sl, #12]
 8013824:	f1cb 0b00 	rsb	fp, fp, #0
 8013828:	e6fa      	b.n	8013620 <__ieee754_rem_pio2+0x80>
 801382a:	a327      	add	r3, pc, #156	; (adr r3, 80138c8 <__ieee754_rem_pio2+0x328>)
 801382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013830:	ec51 0b18 	vmov	r0, r1, d8
 8013834:	f7ec fefa 	bl	800062c <__aeabi_dmul>
 8013838:	4604      	mov	r4, r0
 801383a:	460d      	mov	r5, r1
 801383c:	4602      	mov	r2, r0
 801383e:	460b      	mov	r3, r1
 8013840:	4640      	mov	r0, r8
 8013842:	4649      	mov	r1, r9
 8013844:	f7ec fd3a 	bl	80002bc <__aeabi_dsub>
 8013848:	4602      	mov	r2, r0
 801384a:	460b      	mov	r3, r1
 801384c:	4606      	mov	r6, r0
 801384e:	460f      	mov	r7, r1
 8013850:	4640      	mov	r0, r8
 8013852:	4649      	mov	r1, r9
 8013854:	f7ec fd32 	bl	80002bc <__aeabi_dsub>
 8013858:	4622      	mov	r2, r4
 801385a:	462b      	mov	r3, r5
 801385c:	f7ec fd2e 	bl	80002bc <__aeabi_dsub>
 8013860:	a31b      	add	r3, pc, #108	; (adr r3, 80138d0 <__ieee754_rem_pio2+0x330>)
 8013862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013866:	4604      	mov	r4, r0
 8013868:	460d      	mov	r5, r1
 801386a:	ec51 0b18 	vmov	r0, r1, d8
 801386e:	f7ec fedd 	bl	800062c <__aeabi_dmul>
 8013872:	4622      	mov	r2, r4
 8013874:	462b      	mov	r3, r5
 8013876:	f7ec fd21 	bl	80002bc <__aeabi_dsub>
 801387a:	4604      	mov	r4, r0
 801387c:	460d      	mov	r5, r1
 801387e:	e75f      	b.n	8013740 <__ieee754_rem_pio2+0x1a0>
 8013880:	4b1b      	ldr	r3, [pc, #108]	; (80138f0 <__ieee754_rem_pio2+0x350>)
 8013882:	4598      	cmp	r8, r3
 8013884:	dd36      	ble.n	80138f4 <__ieee754_rem_pio2+0x354>
 8013886:	ee10 2a10 	vmov	r2, s0
 801388a:	462b      	mov	r3, r5
 801388c:	4620      	mov	r0, r4
 801388e:	4629      	mov	r1, r5
 8013890:	f7ec fd14 	bl	80002bc <__aeabi_dsub>
 8013894:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013898:	e9ca 0100 	strd	r0, r1, [sl]
 801389c:	e694      	b.n	80135c8 <__ieee754_rem_pio2+0x28>
 801389e:	bf00      	nop
 80138a0:	54400000 	.word	0x54400000
 80138a4:	3ff921fb 	.word	0x3ff921fb
 80138a8:	1a626331 	.word	0x1a626331
 80138ac:	3dd0b461 	.word	0x3dd0b461
 80138b0:	1a600000 	.word	0x1a600000
 80138b4:	3dd0b461 	.word	0x3dd0b461
 80138b8:	2e037073 	.word	0x2e037073
 80138bc:	3ba3198a 	.word	0x3ba3198a
 80138c0:	6dc9c883 	.word	0x6dc9c883
 80138c4:	3fe45f30 	.word	0x3fe45f30
 80138c8:	2e000000 	.word	0x2e000000
 80138cc:	3ba3198a 	.word	0x3ba3198a
 80138d0:	252049c1 	.word	0x252049c1
 80138d4:	397b839a 	.word	0x397b839a
 80138d8:	3fe921fb 	.word	0x3fe921fb
 80138dc:	4002d97b 	.word	0x4002d97b
 80138e0:	3ff921fb 	.word	0x3ff921fb
 80138e4:	413921fb 	.word	0x413921fb
 80138e8:	3fe00000 	.word	0x3fe00000
 80138ec:	0803ccc0 	.word	0x0803ccc0
 80138f0:	7fefffff 	.word	0x7fefffff
 80138f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80138f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80138fc:	ee10 0a10 	vmov	r0, s0
 8013900:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8013904:	ee10 6a10 	vmov	r6, s0
 8013908:	460f      	mov	r7, r1
 801390a:	f7ed f93f 	bl	8000b8c <__aeabi_d2iz>
 801390e:	f7ec fe23 	bl	8000558 <__aeabi_i2d>
 8013912:	4602      	mov	r2, r0
 8013914:	460b      	mov	r3, r1
 8013916:	4630      	mov	r0, r6
 8013918:	4639      	mov	r1, r7
 801391a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801391e:	f7ec fccd 	bl	80002bc <__aeabi_dsub>
 8013922:	4b23      	ldr	r3, [pc, #140]	; (80139b0 <__ieee754_rem_pio2+0x410>)
 8013924:	2200      	movs	r2, #0
 8013926:	f7ec fe81 	bl	800062c <__aeabi_dmul>
 801392a:	460f      	mov	r7, r1
 801392c:	4606      	mov	r6, r0
 801392e:	f7ed f92d 	bl	8000b8c <__aeabi_d2iz>
 8013932:	f7ec fe11 	bl	8000558 <__aeabi_i2d>
 8013936:	4602      	mov	r2, r0
 8013938:	460b      	mov	r3, r1
 801393a:	4630      	mov	r0, r6
 801393c:	4639      	mov	r1, r7
 801393e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013942:	f7ec fcbb 	bl	80002bc <__aeabi_dsub>
 8013946:	4b1a      	ldr	r3, [pc, #104]	; (80139b0 <__ieee754_rem_pio2+0x410>)
 8013948:	2200      	movs	r2, #0
 801394a:	f7ec fe6f 	bl	800062c <__aeabi_dmul>
 801394e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013952:	ad04      	add	r5, sp, #16
 8013954:	f04f 0803 	mov.w	r8, #3
 8013958:	46a9      	mov	r9, r5
 801395a:	2600      	movs	r6, #0
 801395c:	2700      	movs	r7, #0
 801395e:	4632      	mov	r2, r6
 8013960:	463b      	mov	r3, r7
 8013962:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8013966:	46c3      	mov	fp, r8
 8013968:	3d08      	subs	r5, #8
 801396a:	f108 38ff 	add.w	r8, r8, #4294967295
 801396e:	f7ed f8c5 	bl	8000afc <__aeabi_dcmpeq>
 8013972:	2800      	cmp	r0, #0
 8013974:	d1f3      	bne.n	801395e <__ieee754_rem_pio2+0x3be>
 8013976:	4b0f      	ldr	r3, [pc, #60]	; (80139b4 <__ieee754_rem_pio2+0x414>)
 8013978:	9301      	str	r3, [sp, #4]
 801397a:	2302      	movs	r3, #2
 801397c:	9300      	str	r3, [sp, #0]
 801397e:	4622      	mov	r2, r4
 8013980:	465b      	mov	r3, fp
 8013982:	4651      	mov	r1, sl
 8013984:	4648      	mov	r0, r9
 8013986:	f000 f993 	bl	8013cb0 <__kernel_rem_pio2>
 801398a:	9b02      	ldr	r3, [sp, #8]
 801398c:	2b00      	cmp	r3, #0
 801398e:	4683      	mov	fp, r0
 8013990:	f6bf ae46 	bge.w	8013620 <__ieee754_rem_pio2+0x80>
 8013994:	e9da 2100 	ldrd	r2, r1, [sl]
 8013998:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801399c:	e9ca 2300 	strd	r2, r3, [sl]
 80139a0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80139a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80139a8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80139ac:	e73a      	b.n	8013824 <__ieee754_rem_pio2+0x284>
 80139ae:	bf00      	nop
 80139b0:	41700000 	.word	0x41700000
 80139b4:	0803cd40 	.word	0x0803cd40

080139b8 <__ieee754_sqrt>:
 80139b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139bc:	ec55 4b10 	vmov	r4, r5, d0
 80139c0:	4e55      	ldr	r6, [pc, #340]	; (8013b18 <__ieee754_sqrt+0x160>)
 80139c2:	43ae      	bics	r6, r5
 80139c4:	ee10 0a10 	vmov	r0, s0
 80139c8:	ee10 3a10 	vmov	r3, s0
 80139cc:	462a      	mov	r2, r5
 80139ce:	4629      	mov	r1, r5
 80139d0:	d110      	bne.n	80139f4 <__ieee754_sqrt+0x3c>
 80139d2:	ee10 2a10 	vmov	r2, s0
 80139d6:	462b      	mov	r3, r5
 80139d8:	f7ec fe28 	bl	800062c <__aeabi_dmul>
 80139dc:	4602      	mov	r2, r0
 80139de:	460b      	mov	r3, r1
 80139e0:	4620      	mov	r0, r4
 80139e2:	4629      	mov	r1, r5
 80139e4:	f7ec fc6c 	bl	80002c0 <__adddf3>
 80139e8:	4604      	mov	r4, r0
 80139ea:	460d      	mov	r5, r1
 80139ec:	ec45 4b10 	vmov	d0, r4, r5
 80139f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139f4:	2d00      	cmp	r5, #0
 80139f6:	dc10      	bgt.n	8013a1a <__ieee754_sqrt+0x62>
 80139f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80139fc:	4330      	orrs	r0, r6
 80139fe:	d0f5      	beq.n	80139ec <__ieee754_sqrt+0x34>
 8013a00:	b15d      	cbz	r5, 8013a1a <__ieee754_sqrt+0x62>
 8013a02:	ee10 2a10 	vmov	r2, s0
 8013a06:	462b      	mov	r3, r5
 8013a08:	ee10 0a10 	vmov	r0, s0
 8013a0c:	f7ec fc56 	bl	80002bc <__aeabi_dsub>
 8013a10:	4602      	mov	r2, r0
 8013a12:	460b      	mov	r3, r1
 8013a14:	f7ec ff34 	bl	8000880 <__aeabi_ddiv>
 8013a18:	e7e6      	b.n	80139e8 <__ieee754_sqrt+0x30>
 8013a1a:	1512      	asrs	r2, r2, #20
 8013a1c:	d074      	beq.n	8013b08 <__ieee754_sqrt+0x150>
 8013a1e:	07d4      	lsls	r4, r2, #31
 8013a20:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013a24:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8013a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013a2c:	bf5e      	ittt	pl
 8013a2e:	0fda      	lsrpl	r2, r3, #31
 8013a30:	005b      	lslpl	r3, r3, #1
 8013a32:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013a36:	2400      	movs	r4, #0
 8013a38:	0fda      	lsrs	r2, r3, #31
 8013a3a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013a3e:	107f      	asrs	r7, r7, #1
 8013a40:	005b      	lsls	r3, r3, #1
 8013a42:	2516      	movs	r5, #22
 8013a44:	4620      	mov	r0, r4
 8013a46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013a4a:	1886      	adds	r6, r0, r2
 8013a4c:	428e      	cmp	r6, r1
 8013a4e:	bfde      	ittt	le
 8013a50:	1b89      	suble	r1, r1, r6
 8013a52:	18b0      	addle	r0, r6, r2
 8013a54:	18a4      	addle	r4, r4, r2
 8013a56:	0049      	lsls	r1, r1, #1
 8013a58:	3d01      	subs	r5, #1
 8013a5a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8013a5e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013a62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013a66:	d1f0      	bne.n	8013a4a <__ieee754_sqrt+0x92>
 8013a68:	462a      	mov	r2, r5
 8013a6a:	f04f 0e20 	mov.w	lr, #32
 8013a6e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013a72:	4281      	cmp	r1, r0
 8013a74:	eb06 0c05 	add.w	ip, r6, r5
 8013a78:	dc02      	bgt.n	8013a80 <__ieee754_sqrt+0xc8>
 8013a7a:	d113      	bne.n	8013aa4 <__ieee754_sqrt+0xec>
 8013a7c:	459c      	cmp	ip, r3
 8013a7e:	d811      	bhi.n	8013aa4 <__ieee754_sqrt+0xec>
 8013a80:	f1bc 0f00 	cmp.w	ip, #0
 8013a84:	eb0c 0506 	add.w	r5, ip, r6
 8013a88:	da43      	bge.n	8013b12 <__ieee754_sqrt+0x15a>
 8013a8a:	2d00      	cmp	r5, #0
 8013a8c:	db41      	blt.n	8013b12 <__ieee754_sqrt+0x15a>
 8013a8e:	f100 0801 	add.w	r8, r0, #1
 8013a92:	1a09      	subs	r1, r1, r0
 8013a94:	459c      	cmp	ip, r3
 8013a96:	bf88      	it	hi
 8013a98:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013a9c:	eba3 030c 	sub.w	r3, r3, ip
 8013aa0:	4432      	add	r2, r6
 8013aa2:	4640      	mov	r0, r8
 8013aa4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013aa8:	f1be 0e01 	subs.w	lr, lr, #1
 8013aac:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013ab4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013ab8:	d1db      	bne.n	8013a72 <__ieee754_sqrt+0xba>
 8013aba:	430b      	orrs	r3, r1
 8013abc:	d006      	beq.n	8013acc <__ieee754_sqrt+0x114>
 8013abe:	1c50      	adds	r0, r2, #1
 8013ac0:	bf13      	iteet	ne
 8013ac2:	3201      	addne	r2, #1
 8013ac4:	3401      	addeq	r4, #1
 8013ac6:	4672      	moveq	r2, lr
 8013ac8:	f022 0201 	bicne.w	r2, r2, #1
 8013acc:	1063      	asrs	r3, r4, #1
 8013ace:	0852      	lsrs	r2, r2, #1
 8013ad0:	07e1      	lsls	r1, r4, #31
 8013ad2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013ad6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013ada:	bf48      	it	mi
 8013adc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8013ae0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013ae4:	4614      	mov	r4, r2
 8013ae6:	e781      	b.n	80139ec <__ieee754_sqrt+0x34>
 8013ae8:	0ad9      	lsrs	r1, r3, #11
 8013aea:	3815      	subs	r0, #21
 8013aec:	055b      	lsls	r3, r3, #21
 8013aee:	2900      	cmp	r1, #0
 8013af0:	d0fa      	beq.n	8013ae8 <__ieee754_sqrt+0x130>
 8013af2:	02cd      	lsls	r5, r1, #11
 8013af4:	d50a      	bpl.n	8013b0c <__ieee754_sqrt+0x154>
 8013af6:	f1c2 0420 	rsb	r4, r2, #32
 8013afa:	fa23 f404 	lsr.w	r4, r3, r4
 8013afe:	1e55      	subs	r5, r2, #1
 8013b00:	4093      	lsls	r3, r2
 8013b02:	4321      	orrs	r1, r4
 8013b04:	1b42      	subs	r2, r0, r5
 8013b06:	e78a      	b.n	8013a1e <__ieee754_sqrt+0x66>
 8013b08:	4610      	mov	r0, r2
 8013b0a:	e7f0      	b.n	8013aee <__ieee754_sqrt+0x136>
 8013b0c:	0049      	lsls	r1, r1, #1
 8013b0e:	3201      	adds	r2, #1
 8013b10:	e7ef      	b.n	8013af2 <__ieee754_sqrt+0x13a>
 8013b12:	4680      	mov	r8, r0
 8013b14:	e7bd      	b.n	8013a92 <__ieee754_sqrt+0xda>
 8013b16:	bf00      	nop
 8013b18:	7ff00000 	.word	0x7ff00000
 8013b1c:	00000000 	.word	0x00000000

08013b20 <__kernel_cos>:
 8013b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b24:	ec57 6b10 	vmov	r6, r7, d0
 8013b28:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013b2c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013b30:	ed8d 1b00 	vstr	d1, [sp]
 8013b34:	da07      	bge.n	8013b46 <__kernel_cos+0x26>
 8013b36:	ee10 0a10 	vmov	r0, s0
 8013b3a:	4639      	mov	r1, r7
 8013b3c:	f7ed f826 	bl	8000b8c <__aeabi_d2iz>
 8013b40:	2800      	cmp	r0, #0
 8013b42:	f000 8088 	beq.w	8013c56 <__kernel_cos+0x136>
 8013b46:	4632      	mov	r2, r6
 8013b48:	463b      	mov	r3, r7
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	4639      	mov	r1, r7
 8013b4e:	f7ec fd6d 	bl	800062c <__aeabi_dmul>
 8013b52:	4b51      	ldr	r3, [pc, #324]	; (8013c98 <__kernel_cos+0x178>)
 8013b54:	2200      	movs	r2, #0
 8013b56:	4604      	mov	r4, r0
 8013b58:	460d      	mov	r5, r1
 8013b5a:	f7ec fd67 	bl	800062c <__aeabi_dmul>
 8013b5e:	a340      	add	r3, pc, #256	; (adr r3, 8013c60 <__kernel_cos+0x140>)
 8013b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b64:	4682      	mov	sl, r0
 8013b66:	468b      	mov	fp, r1
 8013b68:	4620      	mov	r0, r4
 8013b6a:	4629      	mov	r1, r5
 8013b6c:	f7ec fd5e 	bl	800062c <__aeabi_dmul>
 8013b70:	a33d      	add	r3, pc, #244	; (adr r3, 8013c68 <__kernel_cos+0x148>)
 8013b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b76:	f7ec fba3 	bl	80002c0 <__adddf3>
 8013b7a:	4622      	mov	r2, r4
 8013b7c:	462b      	mov	r3, r5
 8013b7e:	f7ec fd55 	bl	800062c <__aeabi_dmul>
 8013b82:	a33b      	add	r3, pc, #236	; (adr r3, 8013c70 <__kernel_cos+0x150>)
 8013b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b88:	f7ec fb98 	bl	80002bc <__aeabi_dsub>
 8013b8c:	4622      	mov	r2, r4
 8013b8e:	462b      	mov	r3, r5
 8013b90:	f7ec fd4c 	bl	800062c <__aeabi_dmul>
 8013b94:	a338      	add	r3, pc, #224	; (adr r3, 8013c78 <__kernel_cos+0x158>)
 8013b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b9a:	f7ec fb91 	bl	80002c0 <__adddf3>
 8013b9e:	4622      	mov	r2, r4
 8013ba0:	462b      	mov	r3, r5
 8013ba2:	f7ec fd43 	bl	800062c <__aeabi_dmul>
 8013ba6:	a336      	add	r3, pc, #216	; (adr r3, 8013c80 <__kernel_cos+0x160>)
 8013ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bac:	f7ec fb86 	bl	80002bc <__aeabi_dsub>
 8013bb0:	4622      	mov	r2, r4
 8013bb2:	462b      	mov	r3, r5
 8013bb4:	f7ec fd3a 	bl	800062c <__aeabi_dmul>
 8013bb8:	a333      	add	r3, pc, #204	; (adr r3, 8013c88 <__kernel_cos+0x168>)
 8013bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bbe:	f7ec fb7f 	bl	80002c0 <__adddf3>
 8013bc2:	4622      	mov	r2, r4
 8013bc4:	462b      	mov	r3, r5
 8013bc6:	f7ec fd31 	bl	800062c <__aeabi_dmul>
 8013bca:	4622      	mov	r2, r4
 8013bcc:	462b      	mov	r3, r5
 8013bce:	f7ec fd2d 	bl	800062c <__aeabi_dmul>
 8013bd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	460d      	mov	r5, r1
 8013bda:	4630      	mov	r0, r6
 8013bdc:	4639      	mov	r1, r7
 8013bde:	f7ec fd25 	bl	800062c <__aeabi_dmul>
 8013be2:	460b      	mov	r3, r1
 8013be4:	4602      	mov	r2, r0
 8013be6:	4629      	mov	r1, r5
 8013be8:	4620      	mov	r0, r4
 8013bea:	f7ec fb67 	bl	80002bc <__aeabi_dsub>
 8013bee:	4b2b      	ldr	r3, [pc, #172]	; (8013c9c <__kernel_cos+0x17c>)
 8013bf0:	4598      	cmp	r8, r3
 8013bf2:	4606      	mov	r6, r0
 8013bf4:	460f      	mov	r7, r1
 8013bf6:	dc10      	bgt.n	8013c1a <__kernel_cos+0xfa>
 8013bf8:	4602      	mov	r2, r0
 8013bfa:	460b      	mov	r3, r1
 8013bfc:	4650      	mov	r0, sl
 8013bfe:	4659      	mov	r1, fp
 8013c00:	f7ec fb5c 	bl	80002bc <__aeabi_dsub>
 8013c04:	460b      	mov	r3, r1
 8013c06:	4926      	ldr	r1, [pc, #152]	; (8013ca0 <__kernel_cos+0x180>)
 8013c08:	4602      	mov	r2, r0
 8013c0a:	2000      	movs	r0, #0
 8013c0c:	f7ec fb56 	bl	80002bc <__aeabi_dsub>
 8013c10:	ec41 0b10 	vmov	d0, r0, r1
 8013c14:	b003      	add	sp, #12
 8013c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c1a:	4b22      	ldr	r3, [pc, #136]	; (8013ca4 <__kernel_cos+0x184>)
 8013c1c:	4920      	ldr	r1, [pc, #128]	; (8013ca0 <__kernel_cos+0x180>)
 8013c1e:	4598      	cmp	r8, r3
 8013c20:	bfcc      	ite	gt
 8013c22:	4d21      	ldrgt	r5, [pc, #132]	; (8013ca8 <__kernel_cos+0x188>)
 8013c24:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013c28:	2400      	movs	r4, #0
 8013c2a:	4622      	mov	r2, r4
 8013c2c:	462b      	mov	r3, r5
 8013c2e:	2000      	movs	r0, #0
 8013c30:	f7ec fb44 	bl	80002bc <__aeabi_dsub>
 8013c34:	4622      	mov	r2, r4
 8013c36:	4680      	mov	r8, r0
 8013c38:	4689      	mov	r9, r1
 8013c3a:	462b      	mov	r3, r5
 8013c3c:	4650      	mov	r0, sl
 8013c3e:	4659      	mov	r1, fp
 8013c40:	f7ec fb3c 	bl	80002bc <__aeabi_dsub>
 8013c44:	4632      	mov	r2, r6
 8013c46:	463b      	mov	r3, r7
 8013c48:	f7ec fb38 	bl	80002bc <__aeabi_dsub>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	460b      	mov	r3, r1
 8013c50:	4640      	mov	r0, r8
 8013c52:	4649      	mov	r1, r9
 8013c54:	e7da      	b.n	8013c0c <__kernel_cos+0xec>
 8013c56:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013c90 <__kernel_cos+0x170>
 8013c5a:	e7db      	b.n	8013c14 <__kernel_cos+0xf4>
 8013c5c:	f3af 8000 	nop.w
 8013c60:	be8838d4 	.word	0xbe8838d4
 8013c64:	bda8fae9 	.word	0xbda8fae9
 8013c68:	bdb4b1c4 	.word	0xbdb4b1c4
 8013c6c:	3e21ee9e 	.word	0x3e21ee9e
 8013c70:	809c52ad 	.word	0x809c52ad
 8013c74:	3e927e4f 	.word	0x3e927e4f
 8013c78:	19cb1590 	.word	0x19cb1590
 8013c7c:	3efa01a0 	.word	0x3efa01a0
 8013c80:	16c15177 	.word	0x16c15177
 8013c84:	3f56c16c 	.word	0x3f56c16c
 8013c88:	5555554c 	.word	0x5555554c
 8013c8c:	3fa55555 	.word	0x3fa55555
 8013c90:	00000000 	.word	0x00000000
 8013c94:	3ff00000 	.word	0x3ff00000
 8013c98:	3fe00000 	.word	0x3fe00000
 8013c9c:	3fd33332 	.word	0x3fd33332
 8013ca0:	3ff00000 	.word	0x3ff00000
 8013ca4:	3fe90000 	.word	0x3fe90000
 8013ca8:	3fd20000 	.word	0x3fd20000
 8013cac:	00000000 	.word	0x00000000

08013cb0 <__kernel_rem_pio2>:
 8013cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cb4:	ed2d 8b02 	vpush	{d8}
 8013cb8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013cbc:	f112 0f14 	cmn.w	r2, #20
 8013cc0:	9308      	str	r3, [sp, #32]
 8013cc2:	9101      	str	r1, [sp, #4]
 8013cc4:	4bc4      	ldr	r3, [pc, #784]	; (8013fd8 <__kernel_rem_pio2+0x328>)
 8013cc6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013cc8:	900b      	str	r0, [sp, #44]	; 0x2c
 8013cca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013cce:	9302      	str	r3, [sp, #8]
 8013cd0:	9b08      	ldr	r3, [sp, #32]
 8013cd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8013cd6:	bfa8      	it	ge
 8013cd8:	1ed4      	subge	r4, r2, #3
 8013cda:	9306      	str	r3, [sp, #24]
 8013cdc:	bfb2      	itee	lt
 8013cde:	2400      	movlt	r4, #0
 8013ce0:	2318      	movge	r3, #24
 8013ce2:	fb94 f4f3 	sdivge	r4, r4, r3
 8013ce6:	f06f 0317 	mvn.w	r3, #23
 8013cea:	fb04 3303 	mla	r3, r4, r3, r3
 8013cee:	eb03 0a02 	add.w	sl, r3, r2
 8013cf2:	9b02      	ldr	r3, [sp, #8]
 8013cf4:	9a06      	ldr	r2, [sp, #24]
 8013cf6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8013fc8 <__kernel_rem_pio2+0x318>
 8013cfa:	eb03 0802 	add.w	r8, r3, r2
 8013cfe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013d00:	1aa7      	subs	r7, r4, r2
 8013d02:	ae22      	add	r6, sp, #136	; 0x88
 8013d04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013d08:	2500      	movs	r5, #0
 8013d0a:	4545      	cmp	r5, r8
 8013d0c:	dd13      	ble.n	8013d36 <__kernel_rem_pio2+0x86>
 8013d0e:	9b08      	ldr	r3, [sp, #32]
 8013d10:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8013fc8 <__kernel_rem_pio2+0x318>
 8013d14:	aa22      	add	r2, sp, #136	; 0x88
 8013d16:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013d1a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013d1e:	f04f 0800 	mov.w	r8, #0
 8013d22:	9b02      	ldr	r3, [sp, #8]
 8013d24:	4598      	cmp	r8, r3
 8013d26:	dc2f      	bgt.n	8013d88 <__kernel_rem_pio2+0xd8>
 8013d28:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013d2c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8013d30:	462f      	mov	r7, r5
 8013d32:	2600      	movs	r6, #0
 8013d34:	e01b      	b.n	8013d6e <__kernel_rem_pio2+0xbe>
 8013d36:	42ef      	cmn	r7, r5
 8013d38:	d407      	bmi.n	8013d4a <__kernel_rem_pio2+0x9a>
 8013d3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013d3e:	f7ec fc0b 	bl	8000558 <__aeabi_i2d>
 8013d42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013d46:	3501      	adds	r5, #1
 8013d48:	e7df      	b.n	8013d0a <__kernel_rem_pio2+0x5a>
 8013d4a:	ec51 0b18 	vmov	r0, r1, d8
 8013d4e:	e7f8      	b.n	8013d42 <__kernel_rem_pio2+0x92>
 8013d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013d58:	f7ec fc68 	bl	800062c <__aeabi_dmul>
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	460b      	mov	r3, r1
 8013d60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d64:	f7ec faac 	bl	80002c0 <__adddf3>
 8013d68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013d6c:	3601      	adds	r6, #1
 8013d6e:	9b06      	ldr	r3, [sp, #24]
 8013d70:	429e      	cmp	r6, r3
 8013d72:	f1a7 0708 	sub.w	r7, r7, #8
 8013d76:	ddeb      	ble.n	8013d50 <__kernel_rem_pio2+0xa0>
 8013d78:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013d7c:	f108 0801 	add.w	r8, r8, #1
 8013d80:	ecab 7b02 	vstmia	fp!, {d7}
 8013d84:	3508      	adds	r5, #8
 8013d86:	e7cc      	b.n	8013d22 <__kernel_rem_pio2+0x72>
 8013d88:	9b02      	ldr	r3, [sp, #8]
 8013d8a:	aa0e      	add	r2, sp, #56	; 0x38
 8013d8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013d90:	930d      	str	r3, [sp, #52]	; 0x34
 8013d92:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013d94:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013d98:	9c02      	ldr	r4, [sp, #8]
 8013d9a:	930c      	str	r3, [sp, #48]	; 0x30
 8013d9c:	00e3      	lsls	r3, r4, #3
 8013d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8013da0:	ab9a      	add	r3, sp, #616	; 0x268
 8013da2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013da6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013daa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8013dae:	ab72      	add	r3, sp, #456	; 0x1c8
 8013db0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8013db4:	46c3      	mov	fp, r8
 8013db6:	46a1      	mov	r9, r4
 8013db8:	f1b9 0f00 	cmp.w	r9, #0
 8013dbc:	f1a5 0508 	sub.w	r5, r5, #8
 8013dc0:	dc77      	bgt.n	8013eb2 <__kernel_rem_pio2+0x202>
 8013dc2:	ec47 6b10 	vmov	d0, r6, r7
 8013dc6:	4650      	mov	r0, sl
 8013dc8:	f000 fe5a 	bl	8014a80 <scalbn>
 8013dcc:	ec57 6b10 	vmov	r6, r7, d0
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013dd6:	ee10 0a10 	vmov	r0, s0
 8013dda:	4639      	mov	r1, r7
 8013ddc:	f7ec fc26 	bl	800062c <__aeabi_dmul>
 8013de0:	ec41 0b10 	vmov	d0, r0, r1
 8013de4:	f000 fdc4 	bl	8014970 <floor>
 8013de8:	4b7c      	ldr	r3, [pc, #496]	; (8013fdc <__kernel_rem_pio2+0x32c>)
 8013dea:	ec51 0b10 	vmov	r0, r1, d0
 8013dee:	2200      	movs	r2, #0
 8013df0:	f7ec fc1c 	bl	800062c <__aeabi_dmul>
 8013df4:	4602      	mov	r2, r0
 8013df6:	460b      	mov	r3, r1
 8013df8:	4630      	mov	r0, r6
 8013dfa:	4639      	mov	r1, r7
 8013dfc:	f7ec fa5e 	bl	80002bc <__aeabi_dsub>
 8013e00:	460f      	mov	r7, r1
 8013e02:	4606      	mov	r6, r0
 8013e04:	f7ec fec2 	bl	8000b8c <__aeabi_d2iz>
 8013e08:	9004      	str	r0, [sp, #16]
 8013e0a:	f7ec fba5 	bl	8000558 <__aeabi_i2d>
 8013e0e:	4602      	mov	r2, r0
 8013e10:	460b      	mov	r3, r1
 8013e12:	4630      	mov	r0, r6
 8013e14:	4639      	mov	r1, r7
 8013e16:	f7ec fa51 	bl	80002bc <__aeabi_dsub>
 8013e1a:	f1ba 0f00 	cmp.w	sl, #0
 8013e1e:	4606      	mov	r6, r0
 8013e20:	460f      	mov	r7, r1
 8013e22:	dd6d      	ble.n	8013f00 <__kernel_rem_pio2+0x250>
 8013e24:	1e62      	subs	r2, r4, #1
 8013e26:	ab0e      	add	r3, sp, #56	; 0x38
 8013e28:	9d04      	ldr	r5, [sp, #16]
 8013e2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013e2e:	f1ca 0118 	rsb	r1, sl, #24
 8013e32:	fa40 f301 	asr.w	r3, r0, r1
 8013e36:	441d      	add	r5, r3
 8013e38:	408b      	lsls	r3, r1
 8013e3a:	1ac0      	subs	r0, r0, r3
 8013e3c:	ab0e      	add	r3, sp, #56	; 0x38
 8013e3e:	9504      	str	r5, [sp, #16]
 8013e40:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013e44:	f1ca 0317 	rsb	r3, sl, #23
 8013e48:	fa40 fb03 	asr.w	fp, r0, r3
 8013e4c:	f1bb 0f00 	cmp.w	fp, #0
 8013e50:	dd65      	ble.n	8013f1e <__kernel_rem_pio2+0x26e>
 8013e52:	9b04      	ldr	r3, [sp, #16]
 8013e54:	2200      	movs	r2, #0
 8013e56:	3301      	adds	r3, #1
 8013e58:	9304      	str	r3, [sp, #16]
 8013e5a:	4615      	mov	r5, r2
 8013e5c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013e60:	4294      	cmp	r4, r2
 8013e62:	f300 809c 	bgt.w	8013f9e <__kernel_rem_pio2+0x2ee>
 8013e66:	f1ba 0f00 	cmp.w	sl, #0
 8013e6a:	dd07      	ble.n	8013e7c <__kernel_rem_pio2+0x1cc>
 8013e6c:	f1ba 0f01 	cmp.w	sl, #1
 8013e70:	f000 80c0 	beq.w	8013ff4 <__kernel_rem_pio2+0x344>
 8013e74:	f1ba 0f02 	cmp.w	sl, #2
 8013e78:	f000 80c6 	beq.w	8014008 <__kernel_rem_pio2+0x358>
 8013e7c:	f1bb 0f02 	cmp.w	fp, #2
 8013e80:	d14d      	bne.n	8013f1e <__kernel_rem_pio2+0x26e>
 8013e82:	4632      	mov	r2, r6
 8013e84:	463b      	mov	r3, r7
 8013e86:	4956      	ldr	r1, [pc, #344]	; (8013fe0 <__kernel_rem_pio2+0x330>)
 8013e88:	2000      	movs	r0, #0
 8013e8a:	f7ec fa17 	bl	80002bc <__aeabi_dsub>
 8013e8e:	4606      	mov	r6, r0
 8013e90:	460f      	mov	r7, r1
 8013e92:	2d00      	cmp	r5, #0
 8013e94:	d043      	beq.n	8013f1e <__kernel_rem_pio2+0x26e>
 8013e96:	4650      	mov	r0, sl
 8013e98:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8013fd0 <__kernel_rem_pio2+0x320>
 8013e9c:	f000 fdf0 	bl	8014a80 <scalbn>
 8013ea0:	4630      	mov	r0, r6
 8013ea2:	4639      	mov	r1, r7
 8013ea4:	ec53 2b10 	vmov	r2, r3, d0
 8013ea8:	f7ec fa08 	bl	80002bc <__aeabi_dsub>
 8013eac:	4606      	mov	r6, r0
 8013eae:	460f      	mov	r7, r1
 8013eb0:	e035      	b.n	8013f1e <__kernel_rem_pio2+0x26e>
 8013eb2:	4b4c      	ldr	r3, [pc, #304]	; (8013fe4 <__kernel_rem_pio2+0x334>)
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	4630      	mov	r0, r6
 8013eb8:	4639      	mov	r1, r7
 8013eba:	f7ec fbb7 	bl	800062c <__aeabi_dmul>
 8013ebe:	f7ec fe65 	bl	8000b8c <__aeabi_d2iz>
 8013ec2:	f7ec fb49 	bl	8000558 <__aeabi_i2d>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	460b      	mov	r3, r1
 8013eca:	ec43 2b18 	vmov	d8, r2, r3
 8013ece:	4b46      	ldr	r3, [pc, #280]	; (8013fe8 <__kernel_rem_pio2+0x338>)
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	f7ec fbab 	bl	800062c <__aeabi_dmul>
 8013ed6:	4602      	mov	r2, r0
 8013ed8:	460b      	mov	r3, r1
 8013eda:	4630      	mov	r0, r6
 8013edc:	4639      	mov	r1, r7
 8013ede:	f7ec f9ed 	bl	80002bc <__aeabi_dsub>
 8013ee2:	f7ec fe53 	bl	8000b8c <__aeabi_d2iz>
 8013ee6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013eea:	f84b 0b04 	str.w	r0, [fp], #4
 8013eee:	ec51 0b18 	vmov	r0, r1, d8
 8013ef2:	f7ec f9e5 	bl	80002c0 <__adddf3>
 8013ef6:	f109 39ff 	add.w	r9, r9, #4294967295
 8013efa:	4606      	mov	r6, r0
 8013efc:	460f      	mov	r7, r1
 8013efe:	e75b      	b.n	8013db8 <__kernel_rem_pio2+0x108>
 8013f00:	d106      	bne.n	8013f10 <__kernel_rem_pio2+0x260>
 8013f02:	1e63      	subs	r3, r4, #1
 8013f04:	aa0e      	add	r2, sp, #56	; 0x38
 8013f06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013f0a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8013f0e:	e79d      	b.n	8013e4c <__kernel_rem_pio2+0x19c>
 8013f10:	4b36      	ldr	r3, [pc, #216]	; (8013fec <__kernel_rem_pio2+0x33c>)
 8013f12:	2200      	movs	r2, #0
 8013f14:	f7ec fe10 	bl	8000b38 <__aeabi_dcmpge>
 8013f18:	2800      	cmp	r0, #0
 8013f1a:	d13d      	bne.n	8013f98 <__kernel_rem_pio2+0x2e8>
 8013f1c:	4683      	mov	fp, r0
 8013f1e:	2200      	movs	r2, #0
 8013f20:	2300      	movs	r3, #0
 8013f22:	4630      	mov	r0, r6
 8013f24:	4639      	mov	r1, r7
 8013f26:	f7ec fde9 	bl	8000afc <__aeabi_dcmpeq>
 8013f2a:	2800      	cmp	r0, #0
 8013f2c:	f000 80c0 	beq.w	80140b0 <__kernel_rem_pio2+0x400>
 8013f30:	1e65      	subs	r5, r4, #1
 8013f32:	462b      	mov	r3, r5
 8013f34:	2200      	movs	r2, #0
 8013f36:	9902      	ldr	r1, [sp, #8]
 8013f38:	428b      	cmp	r3, r1
 8013f3a:	da6c      	bge.n	8014016 <__kernel_rem_pio2+0x366>
 8013f3c:	2a00      	cmp	r2, #0
 8013f3e:	f000 8089 	beq.w	8014054 <__kernel_rem_pio2+0x3a4>
 8013f42:	ab0e      	add	r3, sp, #56	; 0x38
 8013f44:	f1aa 0a18 	sub.w	sl, sl, #24
 8013f48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	f000 80ad 	beq.w	80140ac <__kernel_rem_pio2+0x3fc>
 8013f52:	4650      	mov	r0, sl
 8013f54:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8013fd0 <__kernel_rem_pio2+0x320>
 8013f58:	f000 fd92 	bl	8014a80 <scalbn>
 8013f5c:	ab9a      	add	r3, sp, #616	; 0x268
 8013f5e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013f62:	ec57 6b10 	vmov	r6, r7, d0
 8013f66:	00ec      	lsls	r4, r5, #3
 8013f68:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8013f6c:	46aa      	mov	sl, r5
 8013f6e:	f1ba 0f00 	cmp.w	sl, #0
 8013f72:	f280 80d6 	bge.w	8014122 <__kernel_rem_pio2+0x472>
 8013f76:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8013fc8 <__kernel_rem_pio2+0x318>
 8013f7a:	462e      	mov	r6, r5
 8013f7c:	2e00      	cmp	r6, #0
 8013f7e:	f2c0 8104 	blt.w	801418a <__kernel_rem_pio2+0x4da>
 8013f82:	ab72      	add	r3, sp, #456	; 0x1c8
 8013f84:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013f88:	f8df a064 	ldr.w	sl, [pc, #100]	; 8013ff0 <__kernel_rem_pio2+0x340>
 8013f8c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8013f90:	f04f 0800 	mov.w	r8, #0
 8013f94:	1baf      	subs	r7, r5, r6
 8013f96:	e0ea      	b.n	801416e <__kernel_rem_pio2+0x4be>
 8013f98:	f04f 0b02 	mov.w	fp, #2
 8013f9c:	e759      	b.n	8013e52 <__kernel_rem_pio2+0x1a2>
 8013f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8013fa2:	b955      	cbnz	r5, 8013fba <__kernel_rem_pio2+0x30a>
 8013fa4:	b123      	cbz	r3, 8013fb0 <__kernel_rem_pio2+0x300>
 8013fa6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013faa:	f8c8 3000 	str.w	r3, [r8]
 8013fae:	2301      	movs	r3, #1
 8013fb0:	3201      	adds	r2, #1
 8013fb2:	f108 0804 	add.w	r8, r8, #4
 8013fb6:	461d      	mov	r5, r3
 8013fb8:	e752      	b.n	8013e60 <__kernel_rem_pio2+0x1b0>
 8013fba:	1acb      	subs	r3, r1, r3
 8013fbc:	f8c8 3000 	str.w	r3, [r8]
 8013fc0:	462b      	mov	r3, r5
 8013fc2:	e7f5      	b.n	8013fb0 <__kernel_rem_pio2+0x300>
 8013fc4:	f3af 8000 	nop.w
	...
 8013fd4:	3ff00000 	.word	0x3ff00000
 8013fd8:	0803ce88 	.word	0x0803ce88
 8013fdc:	40200000 	.word	0x40200000
 8013fe0:	3ff00000 	.word	0x3ff00000
 8013fe4:	3e700000 	.word	0x3e700000
 8013fe8:	41700000 	.word	0x41700000
 8013fec:	3fe00000 	.word	0x3fe00000
 8013ff0:	0803ce48 	.word	0x0803ce48
 8013ff4:	1e62      	subs	r2, r4, #1
 8013ff6:	ab0e      	add	r3, sp, #56	; 0x38
 8013ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ffc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014000:	a90e      	add	r1, sp, #56	; 0x38
 8014002:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014006:	e739      	b.n	8013e7c <__kernel_rem_pio2+0x1cc>
 8014008:	1e62      	subs	r2, r4, #1
 801400a:	ab0e      	add	r3, sp, #56	; 0x38
 801400c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014010:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014014:	e7f4      	b.n	8014000 <__kernel_rem_pio2+0x350>
 8014016:	a90e      	add	r1, sp, #56	; 0x38
 8014018:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801401c:	3b01      	subs	r3, #1
 801401e:	430a      	orrs	r2, r1
 8014020:	e789      	b.n	8013f36 <__kernel_rem_pio2+0x286>
 8014022:	3301      	adds	r3, #1
 8014024:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014028:	2900      	cmp	r1, #0
 801402a:	d0fa      	beq.n	8014022 <__kernel_rem_pio2+0x372>
 801402c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801402e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8014032:	446a      	add	r2, sp
 8014034:	3a98      	subs	r2, #152	; 0x98
 8014036:	920a      	str	r2, [sp, #40]	; 0x28
 8014038:	9a08      	ldr	r2, [sp, #32]
 801403a:	18e3      	adds	r3, r4, r3
 801403c:	18a5      	adds	r5, r4, r2
 801403e:	aa22      	add	r2, sp, #136	; 0x88
 8014040:	f104 0801 	add.w	r8, r4, #1
 8014044:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8014048:	9304      	str	r3, [sp, #16]
 801404a:	9b04      	ldr	r3, [sp, #16]
 801404c:	4543      	cmp	r3, r8
 801404e:	da04      	bge.n	801405a <__kernel_rem_pio2+0x3aa>
 8014050:	461c      	mov	r4, r3
 8014052:	e6a3      	b.n	8013d9c <__kernel_rem_pio2+0xec>
 8014054:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014056:	2301      	movs	r3, #1
 8014058:	e7e4      	b.n	8014024 <__kernel_rem_pio2+0x374>
 801405a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801405c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014060:	f7ec fa7a 	bl	8000558 <__aeabi_i2d>
 8014064:	e8e5 0102 	strd	r0, r1, [r5], #8
 8014068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801406a:	46ab      	mov	fp, r5
 801406c:	461c      	mov	r4, r3
 801406e:	f04f 0900 	mov.w	r9, #0
 8014072:	2600      	movs	r6, #0
 8014074:	2700      	movs	r7, #0
 8014076:	9b06      	ldr	r3, [sp, #24]
 8014078:	4599      	cmp	r9, r3
 801407a:	dd06      	ble.n	801408a <__kernel_rem_pio2+0x3da>
 801407c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801407e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8014082:	f108 0801 	add.w	r8, r8, #1
 8014086:	930a      	str	r3, [sp, #40]	; 0x28
 8014088:	e7df      	b.n	801404a <__kernel_rem_pio2+0x39a>
 801408a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801408e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014092:	f7ec facb 	bl	800062c <__aeabi_dmul>
 8014096:	4602      	mov	r2, r0
 8014098:	460b      	mov	r3, r1
 801409a:	4630      	mov	r0, r6
 801409c:	4639      	mov	r1, r7
 801409e:	f7ec f90f 	bl	80002c0 <__adddf3>
 80140a2:	f109 0901 	add.w	r9, r9, #1
 80140a6:	4606      	mov	r6, r0
 80140a8:	460f      	mov	r7, r1
 80140aa:	e7e4      	b.n	8014076 <__kernel_rem_pio2+0x3c6>
 80140ac:	3d01      	subs	r5, #1
 80140ae:	e748      	b.n	8013f42 <__kernel_rem_pio2+0x292>
 80140b0:	ec47 6b10 	vmov	d0, r6, r7
 80140b4:	f1ca 0000 	rsb	r0, sl, #0
 80140b8:	f000 fce2 	bl	8014a80 <scalbn>
 80140bc:	ec57 6b10 	vmov	r6, r7, d0
 80140c0:	4ba0      	ldr	r3, [pc, #640]	; (8014344 <__kernel_rem_pio2+0x694>)
 80140c2:	ee10 0a10 	vmov	r0, s0
 80140c6:	2200      	movs	r2, #0
 80140c8:	4639      	mov	r1, r7
 80140ca:	f7ec fd35 	bl	8000b38 <__aeabi_dcmpge>
 80140ce:	b1f8      	cbz	r0, 8014110 <__kernel_rem_pio2+0x460>
 80140d0:	4b9d      	ldr	r3, [pc, #628]	; (8014348 <__kernel_rem_pio2+0x698>)
 80140d2:	2200      	movs	r2, #0
 80140d4:	4630      	mov	r0, r6
 80140d6:	4639      	mov	r1, r7
 80140d8:	f7ec faa8 	bl	800062c <__aeabi_dmul>
 80140dc:	f7ec fd56 	bl	8000b8c <__aeabi_d2iz>
 80140e0:	4680      	mov	r8, r0
 80140e2:	f7ec fa39 	bl	8000558 <__aeabi_i2d>
 80140e6:	4b97      	ldr	r3, [pc, #604]	; (8014344 <__kernel_rem_pio2+0x694>)
 80140e8:	2200      	movs	r2, #0
 80140ea:	f7ec fa9f 	bl	800062c <__aeabi_dmul>
 80140ee:	460b      	mov	r3, r1
 80140f0:	4602      	mov	r2, r0
 80140f2:	4639      	mov	r1, r7
 80140f4:	4630      	mov	r0, r6
 80140f6:	f7ec f8e1 	bl	80002bc <__aeabi_dsub>
 80140fa:	f7ec fd47 	bl	8000b8c <__aeabi_d2iz>
 80140fe:	1c65      	adds	r5, r4, #1
 8014100:	ab0e      	add	r3, sp, #56	; 0x38
 8014102:	f10a 0a18 	add.w	sl, sl, #24
 8014106:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801410a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801410e:	e720      	b.n	8013f52 <__kernel_rem_pio2+0x2a2>
 8014110:	4630      	mov	r0, r6
 8014112:	4639      	mov	r1, r7
 8014114:	f7ec fd3a 	bl	8000b8c <__aeabi_d2iz>
 8014118:	ab0e      	add	r3, sp, #56	; 0x38
 801411a:	4625      	mov	r5, r4
 801411c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014120:	e717      	b.n	8013f52 <__kernel_rem_pio2+0x2a2>
 8014122:	ab0e      	add	r3, sp, #56	; 0x38
 8014124:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8014128:	f7ec fa16 	bl	8000558 <__aeabi_i2d>
 801412c:	4632      	mov	r2, r6
 801412e:	463b      	mov	r3, r7
 8014130:	f7ec fa7c 	bl	800062c <__aeabi_dmul>
 8014134:	4b84      	ldr	r3, [pc, #528]	; (8014348 <__kernel_rem_pio2+0x698>)
 8014136:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801413a:	2200      	movs	r2, #0
 801413c:	4630      	mov	r0, r6
 801413e:	4639      	mov	r1, r7
 8014140:	f7ec fa74 	bl	800062c <__aeabi_dmul>
 8014144:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014148:	4606      	mov	r6, r0
 801414a:	460f      	mov	r7, r1
 801414c:	e70f      	b.n	8013f6e <__kernel_rem_pio2+0x2be>
 801414e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8014152:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8014156:	f7ec fa69 	bl	800062c <__aeabi_dmul>
 801415a:	4602      	mov	r2, r0
 801415c:	460b      	mov	r3, r1
 801415e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014162:	f7ec f8ad 	bl	80002c0 <__adddf3>
 8014166:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801416a:	f108 0801 	add.w	r8, r8, #1
 801416e:	9b02      	ldr	r3, [sp, #8]
 8014170:	4598      	cmp	r8, r3
 8014172:	dc01      	bgt.n	8014178 <__kernel_rem_pio2+0x4c8>
 8014174:	45b8      	cmp	r8, r7
 8014176:	ddea      	ble.n	801414e <__kernel_rem_pio2+0x49e>
 8014178:	ed9d 7b06 	vldr	d7, [sp, #24]
 801417c:	ab4a      	add	r3, sp, #296	; 0x128
 801417e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014182:	ed87 7b00 	vstr	d7, [r7]
 8014186:	3e01      	subs	r6, #1
 8014188:	e6f8      	b.n	8013f7c <__kernel_rem_pio2+0x2cc>
 801418a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801418c:	2b02      	cmp	r3, #2
 801418e:	dc0b      	bgt.n	80141a8 <__kernel_rem_pio2+0x4f8>
 8014190:	2b00      	cmp	r3, #0
 8014192:	dc35      	bgt.n	8014200 <__kernel_rem_pio2+0x550>
 8014194:	d059      	beq.n	801424a <__kernel_rem_pio2+0x59a>
 8014196:	9b04      	ldr	r3, [sp, #16]
 8014198:	f003 0007 	and.w	r0, r3, #7
 801419c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80141a0:	ecbd 8b02 	vpop	{d8}
 80141a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80141aa:	2b03      	cmp	r3, #3
 80141ac:	d1f3      	bne.n	8014196 <__kernel_rem_pio2+0x4e6>
 80141ae:	ab4a      	add	r3, sp, #296	; 0x128
 80141b0:	4423      	add	r3, r4
 80141b2:	9306      	str	r3, [sp, #24]
 80141b4:	461c      	mov	r4, r3
 80141b6:	469a      	mov	sl, r3
 80141b8:	9502      	str	r5, [sp, #8]
 80141ba:	9b02      	ldr	r3, [sp, #8]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	f1aa 0a08 	sub.w	sl, sl, #8
 80141c2:	dc6b      	bgt.n	801429c <__kernel_rem_pio2+0x5ec>
 80141c4:	46aa      	mov	sl, r5
 80141c6:	f1ba 0f01 	cmp.w	sl, #1
 80141ca:	f1a4 0408 	sub.w	r4, r4, #8
 80141ce:	f300 8085 	bgt.w	80142dc <__kernel_rem_pio2+0x62c>
 80141d2:	9c06      	ldr	r4, [sp, #24]
 80141d4:	2000      	movs	r0, #0
 80141d6:	3408      	adds	r4, #8
 80141d8:	2100      	movs	r1, #0
 80141da:	2d01      	cmp	r5, #1
 80141dc:	f300 809d 	bgt.w	801431a <__kernel_rem_pio2+0x66a>
 80141e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80141e4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80141e8:	f1bb 0f00 	cmp.w	fp, #0
 80141ec:	f040 809b 	bne.w	8014326 <__kernel_rem_pio2+0x676>
 80141f0:	9b01      	ldr	r3, [sp, #4]
 80141f2:	e9c3 5600 	strd	r5, r6, [r3]
 80141f6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80141fa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80141fe:	e7ca      	b.n	8014196 <__kernel_rem_pio2+0x4e6>
 8014200:	3408      	adds	r4, #8
 8014202:	ab4a      	add	r3, sp, #296	; 0x128
 8014204:	441c      	add	r4, r3
 8014206:	462e      	mov	r6, r5
 8014208:	2000      	movs	r0, #0
 801420a:	2100      	movs	r1, #0
 801420c:	2e00      	cmp	r6, #0
 801420e:	da36      	bge.n	801427e <__kernel_rem_pio2+0x5ce>
 8014210:	f1bb 0f00 	cmp.w	fp, #0
 8014214:	d039      	beq.n	801428a <__kernel_rem_pio2+0x5da>
 8014216:	4602      	mov	r2, r0
 8014218:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801421c:	9c01      	ldr	r4, [sp, #4]
 801421e:	e9c4 2300 	strd	r2, r3, [r4]
 8014222:	4602      	mov	r2, r0
 8014224:	460b      	mov	r3, r1
 8014226:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801422a:	f7ec f847 	bl	80002bc <__aeabi_dsub>
 801422e:	ae4c      	add	r6, sp, #304	; 0x130
 8014230:	2401      	movs	r4, #1
 8014232:	42a5      	cmp	r5, r4
 8014234:	da2c      	bge.n	8014290 <__kernel_rem_pio2+0x5e0>
 8014236:	f1bb 0f00 	cmp.w	fp, #0
 801423a:	d002      	beq.n	8014242 <__kernel_rem_pio2+0x592>
 801423c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014240:	4619      	mov	r1, r3
 8014242:	9b01      	ldr	r3, [sp, #4]
 8014244:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014248:	e7a5      	b.n	8014196 <__kernel_rem_pio2+0x4e6>
 801424a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801424e:	eb0d 0403 	add.w	r4, sp, r3
 8014252:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014256:	2000      	movs	r0, #0
 8014258:	2100      	movs	r1, #0
 801425a:	2d00      	cmp	r5, #0
 801425c:	da09      	bge.n	8014272 <__kernel_rem_pio2+0x5c2>
 801425e:	f1bb 0f00 	cmp.w	fp, #0
 8014262:	d002      	beq.n	801426a <__kernel_rem_pio2+0x5ba>
 8014264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014268:	4619      	mov	r1, r3
 801426a:	9b01      	ldr	r3, [sp, #4]
 801426c:	e9c3 0100 	strd	r0, r1, [r3]
 8014270:	e791      	b.n	8014196 <__kernel_rem_pio2+0x4e6>
 8014272:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014276:	f7ec f823 	bl	80002c0 <__adddf3>
 801427a:	3d01      	subs	r5, #1
 801427c:	e7ed      	b.n	801425a <__kernel_rem_pio2+0x5aa>
 801427e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014282:	f7ec f81d 	bl	80002c0 <__adddf3>
 8014286:	3e01      	subs	r6, #1
 8014288:	e7c0      	b.n	801420c <__kernel_rem_pio2+0x55c>
 801428a:	4602      	mov	r2, r0
 801428c:	460b      	mov	r3, r1
 801428e:	e7c5      	b.n	801421c <__kernel_rem_pio2+0x56c>
 8014290:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014294:	f7ec f814 	bl	80002c0 <__adddf3>
 8014298:	3401      	adds	r4, #1
 801429a:	e7ca      	b.n	8014232 <__kernel_rem_pio2+0x582>
 801429c:	e9da 8900 	ldrd	r8, r9, [sl]
 80142a0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80142a4:	9b02      	ldr	r3, [sp, #8]
 80142a6:	3b01      	subs	r3, #1
 80142a8:	9302      	str	r3, [sp, #8]
 80142aa:	4632      	mov	r2, r6
 80142ac:	463b      	mov	r3, r7
 80142ae:	4640      	mov	r0, r8
 80142b0:	4649      	mov	r1, r9
 80142b2:	f7ec f805 	bl	80002c0 <__adddf3>
 80142b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80142ba:	4602      	mov	r2, r0
 80142bc:	460b      	mov	r3, r1
 80142be:	4640      	mov	r0, r8
 80142c0:	4649      	mov	r1, r9
 80142c2:	f7eb fffb 	bl	80002bc <__aeabi_dsub>
 80142c6:	4632      	mov	r2, r6
 80142c8:	463b      	mov	r3, r7
 80142ca:	f7eb fff9 	bl	80002c0 <__adddf3>
 80142ce:	ed9d 7b08 	vldr	d7, [sp, #32]
 80142d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80142d6:	ed8a 7b00 	vstr	d7, [sl]
 80142da:	e76e      	b.n	80141ba <__kernel_rem_pio2+0x50a>
 80142dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80142e0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80142e4:	4640      	mov	r0, r8
 80142e6:	4632      	mov	r2, r6
 80142e8:	463b      	mov	r3, r7
 80142ea:	4649      	mov	r1, r9
 80142ec:	f7eb ffe8 	bl	80002c0 <__adddf3>
 80142f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80142f4:	4602      	mov	r2, r0
 80142f6:	460b      	mov	r3, r1
 80142f8:	4640      	mov	r0, r8
 80142fa:	4649      	mov	r1, r9
 80142fc:	f7eb ffde 	bl	80002bc <__aeabi_dsub>
 8014300:	4632      	mov	r2, r6
 8014302:	463b      	mov	r3, r7
 8014304:	f7eb ffdc 	bl	80002c0 <__adddf3>
 8014308:	ed9d 7b02 	vldr	d7, [sp, #8]
 801430c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014310:	ed84 7b00 	vstr	d7, [r4]
 8014314:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014318:	e755      	b.n	80141c6 <__kernel_rem_pio2+0x516>
 801431a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801431e:	f7eb ffcf 	bl	80002c0 <__adddf3>
 8014322:	3d01      	subs	r5, #1
 8014324:	e759      	b.n	80141da <__kernel_rem_pio2+0x52a>
 8014326:	9b01      	ldr	r3, [sp, #4]
 8014328:	9a01      	ldr	r2, [sp, #4]
 801432a:	601d      	str	r5, [r3, #0]
 801432c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8014330:	605c      	str	r4, [r3, #4]
 8014332:	609f      	str	r7, [r3, #8]
 8014334:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8014338:	60d3      	str	r3, [r2, #12]
 801433a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801433e:	6110      	str	r0, [r2, #16]
 8014340:	6153      	str	r3, [r2, #20]
 8014342:	e728      	b.n	8014196 <__kernel_rem_pio2+0x4e6>
 8014344:	41700000 	.word	0x41700000
 8014348:	3e700000 	.word	0x3e700000
 801434c:	00000000 	.word	0x00000000

08014350 <__kernel_sin>:
 8014350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014354:	ed2d 8b04 	vpush	{d8-d9}
 8014358:	eeb0 8a41 	vmov.f32	s16, s2
 801435c:	eef0 8a61 	vmov.f32	s17, s3
 8014360:	ec55 4b10 	vmov	r4, r5, d0
 8014364:	b083      	sub	sp, #12
 8014366:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801436a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801436e:	9001      	str	r0, [sp, #4]
 8014370:	da06      	bge.n	8014380 <__kernel_sin+0x30>
 8014372:	ee10 0a10 	vmov	r0, s0
 8014376:	4629      	mov	r1, r5
 8014378:	f7ec fc08 	bl	8000b8c <__aeabi_d2iz>
 801437c:	2800      	cmp	r0, #0
 801437e:	d051      	beq.n	8014424 <__kernel_sin+0xd4>
 8014380:	4622      	mov	r2, r4
 8014382:	462b      	mov	r3, r5
 8014384:	4620      	mov	r0, r4
 8014386:	4629      	mov	r1, r5
 8014388:	f7ec f950 	bl	800062c <__aeabi_dmul>
 801438c:	4682      	mov	sl, r0
 801438e:	468b      	mov	fp, r1
 8014390:	4602      	mov	r2, r0
 8014392:	460b      	mov	r3, r1
 8014394:	4620      	mov	r0, r4
 8014396:	4629      	mov	r1, r5
 8014398:	f7ec f948 	bl	800062c <__aeabi_dmul>
 801439c:	a341      	add	r3, pc, #260	; (adr r3, 80144a4 <__kernel_sin+0x154>)
 801439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a2:	4680      	mov	r8, r0
 80143a4:	4689      	mov	r9, r1
 80143a6:	4650      	mov	r0, sl
 80143a8:	4659      	mov	r1, fp
 80143aa:	f7ec f93f 	bl	800062c <__aeabi_dmul>
 80143ae:	a33f      	add	r3, pc, #252	; (adr r3, 80144ac <__kernel_sin+0x15c>)
 80143b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b4:	f7eb ff82 	bl	80002bc <__aeabi_dsub>
 80143b8:	4652      	mov	r2, sl
 80143ba:	465b      	mov	r3, fp
 80143bc:	f7ec f936 	bl	800062c <__aeabi_dmul>
 80143c0:	a33c      	add	r3, pc, #240	; (adr r3, 80144b4 <__kernel_sin+0x164>)
 80143c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c6:	f7eb ff7b 	bl	80002c0 <__adddf3>
 80143ca:	4652      	mov	r2, sl
 80143cc:	465b      	mov	r3, fp
 80143ce:	f7ec f92d 	bl	800062c <__aeabi_dmul>
 80143d2:	a33a      	add	r3, pc, #232	; (adr r3, 80144bc <__kernel_sin+0x16c>)
 80143d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d8:	f7eb ff70 	bl	80002bc <__aeabi_dsub>
 80143dc:	4652      	mov	r2, sl
 80143de:	465b      	mov	r3, fp
 80143e0:	f7ec f924 	bl	800062c <__aeabi_dmul>
 80143e4:	a337      	add	r3, pc, #220	; (adr r3, 80144c4 <__kernel_sin+0x174>)
 80143e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ea:	f7eb ff69 	bl	80002c0 <__adddf3>
 80143ee:	9b01      	ldr	r3, [sp, #4]
 80143f0:	4606      	mov	r6, r0
 80143f2:	460f      	mov	r7, r1
 80143f4:	b9eb      	cbnz	r3, 8014432 <__kernel_sin+0xe2>
 80143f6:	4602      	mov	r2, r0
 80143f8:	460b      	mov	r3, r1
 80143fa:	4650      	mov	r0, sl
 80143fc:	4659      	mov	r1, fp
 80143fe:	f7ec f915 	bl	800062c <__aeabi_dmul>
 8014402:	a325      	add	r3, pc, #148	; (adr r3, 8014498 <__kernel_sin+0x148>)
 8014404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014408:	f7eb ff58 	bl	80002bc <__aeabi_dsub>
 801440c:	4642      	mov	r2, r8
 801440e:	464b      	mov	r3, r9
 8014410:	f7ec f90c 	bl	800062c <__aeabi_dmul>
 8014414:	4602      	mov	r2, r0
 8014416:	460b      	mov	r3, r1
 8014418:	4620      	mov	r0, r4
 801441a:	4629      	mov	r1, r5
 801441c:	f7eb ff50 	bl	80002c0 <__adddf3>
 8014420:	4604      	mov	r4, r0
 8014422:	460d      	mov	r5, r1
 8014424:	ec45 4b10 	vmov	d0, r4, r5
 8014428:	b003      	add	sp, #12
 801442a:	ecbd 8b04 	vpop	{d8-d9}
 801442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014432:	4b1b      	ldr	r3, [pc, #108]	; (80144a0 <__kernel_sin+0x150>)
 8014434:	ec51 0b18 	vmov	r0, r1, d8
 8014438:	2200      	movs	r2, #0
 801443a:	f7ec f8f7 	bl	800062c <__aeabi_dmul>
 801443e:	4632      	mov	r2, r6
 8014440:	ec41 0b19 	vmov	d9, r0, r1
 8014444:	463b      	mov	r3, r7
 8014446:	4640      	mov	r0, r8
 8014448:	4649      	mov	r1, r9
 801444a:	f7ec f8ef 	bl	800062c <__aeabi_dmul>
 801444e:	4602      	mov	r2, r0
 8014450:	460b      	mov	r3, r1
 8014452:	ec51 0b19 	vmov	r0, r1, d9
 8014456:	f7eb ff31 	bl	80002bc <__aeabi_dsub>
 801445a:	4652      	mov	r2, sl
 801445c:	465b      	mov	r3, fp
 801445e:	f7ec f8e5 	bl	800062c <__aeabi_dmul>
 8014462:	ec53 2b18 	vmov	r2, r3, d8
 8014466:	f7eb ff29 	bl	80002bc <__aeabi_dsub>
 801446a:	a30b      	add	r3, pc, #44	; (adr r3, 8014498 <__kernel_sin+0x148>)
 801446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014470:	4606      	mov	r6, r0
 8014472:	460f      	mov	r7, r1
 8014474:	4640      	mov	r0, r8
 8014476:	4649      	mov	r1, r9
 8014478:	f7ec f8d8 	bl	800062c <__aeabi_dmul>
 801447c:	4602      	mov	r2, r0
 801447e:	460b      	mov	r3, r1
 8014480:	4630      	mov	r0, r6
 8014482:	4639      	mov	r1, r7
 8014484:	f7eb ff1c 	bl	80002c0 <__adddf3>
 8014488:	4602      	mov	r2, r0
 801448a:	460b      	mov	r3, r1
 801448c:	4620      	mov	r0, r4
 801448e:	4629      	mov	r1, r5
 8014490:	f7eb ff14 	bl	80002bc <__aeabi_dsub>
 8014494:	e7c4      	b.n	8014420 <__kernel_sin+0xd0>
 8014496:	bf00      	nop
 8014498:	55555549 	.word	0x55555549
 801449c:	3fc55555 	.word	0x3fc55555
 80144a0:	3fe00000 	.word	0x3fe00000
 80144a4:	5acfd57c 	.word	0x5acfd57c
 80144a8:	3de5d93a 	.word	0x3de5d93a
 80144ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80144b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80144b4:	57b1fe7d 	.word	0x57b1fe7d
 80144b8:	3ec71de3 	.word	0x3ec71de3
 80144bc:	19c161d5 	.word	0x19c161d5
 80144c0:	3f2a01a0 	.word	0x3f2a01a0
 80144c4:	1110f8a6 	.word	0x1110f8a6
 80144c8:	3f811111 	.word	0x3f811111
 80144cc:	00000000 	.word	0x00000000

080144d0 <__kernel_tan>:
 80144d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d4:	ed2d 8b06 	vpush	{d8-d10}
 80144d8:	ec5b ab10 	vmov	sl, fp, d0
 80144dc:	4be0      	ldr	r3, [pc, #896]	; (8014860 <__kernel_tan+0x390>)
 80144de:	b083      	sub	sp, #12
 80144e0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80144e4:	429f      	cmp	r7, r3
 80144e6:	ec59 8b11 	vmov	r8, r9, d1
 80144ea:	4606      	mov	r6, r0
 80144ec:	f8cd b000 	str.w	fp, [sp]
 80144f0:	dc61      	bgt.n	80145b6 <__kernel_tan+0xe6>
 80144f2:	ee10 0a10 	vmov	r0, s0
 80144f6:	4659      	mov	r1, fp
 80144f8:	f7ec fb48 	bl	8000b8c <__aeabi_d2iz>
 80144fc:	4605      	mov	r5, r0
 80144fe:	2800      	cmp	r0, #0
 8014500:	f040 8083 	bne.w	801460a <__kernel_tan+0x13a>
 8014504:	1c73      	adds	r3, r6, #1
 8014506:	4652      	mov	r2, sl
 8014508:	4313      	orrs	r3, r2
 801450a:	433b      	orrs	r3, r7
 801450c:	d112      	bne.n	8014534 <__kernel_tan+0x64>
 801450e:	ec4b ab10 	vmov	d0, sl, fp
 8014512:	f000 fa17 	bl	8014944 <fabs>
 8014516:	49d3      	ldr	r1, [pc, #844]	; (8014864 <__kernel_tan+0x394>)
 8014518:	ec53 2b10 	vmov	r2, r3, d0
 801451c:	2000      	movs	r0, #0
 801451e:	f7ec f9af 	bl	8000880 <__aeabi_ddiv>
 8014522:	4682      	mov	sl, r0
 8014524:	468b      	mov	fp, r1
 8014526:	ec4b ab10 	vmov	d0, sl, fp
 801452a:	b003      	add	sp, #12
 801452c:	ecbd 8b06 	vpop	{d8-d10}
 8014530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014534:	2e01      	cmp	r6, #1
 8014536:	d0f6      	beq.n	8014526 <__kernel_tan+0x56>
 8014538:	4642      	mov	r2, r8
 801453a:	464b      	mov	r3, r9
 801453c:	4650      	mov	r0, sl
 801453e:	4659      	mov	r1, fp
 8014540:	f7eb febe 	bl	80002c0 <__adddf3>
 8014544:	4602      	mov	r2, r0
 8014546:	460b      	mov	r3, r1
 8014548:	460f      	mov	r7, r1
 801454a:	2000      	movs	r0, #0
 801454c:	49c6      	ldr	r1, [pc, #792]	; (8014868 <__kernel_tan+0x398>)
 801454e:	f7ec f997 	bl	8000880 <__aeabi_ddiv>
 8014552:	e9cd 0100 	strd	r0, r1, [sp]
 8014556:	e9dd 2300 	ldrd	r2, r3, [sp]
 801455a:	462e      	mov	r6, r5
 801455c:	4652      	mov	r2, sl
 801455e:	462c      	mov	r4, r5
 8014560:	4630      	mov	r0, r6
 8014562:	461d      	mov	r5, r3
 8014564:	4639      	mov	r1, r7
 8014566:	465b      	mov	r3, fp
 8014568:	f7eb fea8 	bl	80002bc <__aeabi_dsub>
 801456c:	4602      	mov	r2, r0
 801456e:	460b      	mov	r3, r1
 8014570:	4640      	mov	r0, r8
 8014572:	4649      	mov	r1, r9
 8014574:	f7eb fea2 	bl	80002bc <__aeabi_dsub>
 8014578:	4632      	mov	r2, r6
 801457a:	462b      	mov	r3, r5
 801457c:	f7ec f856 	bl	800062c <__aeabi_dmul>
 8014580:	4632      	mov	r2, r6
 8014582:	4680      	mov	r8, r0
 8014584:	4689      	mov	r9, r1
 8014586:	462b      	mov	r3, r5
 8014588:	4630      	mov	r0, r6
 801458a:	4639      	mov	r1, r7
 801458c:	f7ec f84e 	bl	800062c <__aeabi_dmul>
 8014590:	4bb4      	ldr	r3, [pc, #720]	; (8014864 <__kernel_tan+0x394>)
 8014592:	2200      	movs	r2, #0
 8014594:	f7eb fe94 	bl	80002c0 <__adddf3>
 8014598:	4602      	mov	r2, r0
 801459a:	460b      	mov	r3, r1
 801459c:	4640      	mov	r0, r8
 801459e:	4649      	mov	r1, r9
 80145a0:	f7eb fe8e 	bl	80002c0 <__adddf3>
 80145a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145a8:	f7ec f840 	bl	800062c <__aeabi_dmul>
 80145ac:	4622      	mov	r2, r4
 80145ae:	462b      	mov	r3, r5
 80145b0:	f7eb fe86 	bl	80002c0 <__adddf3>
 80145b4:	e7b5      	b.n	8014522 <__kernel_tan+0x52>
 80145b6:	4bad      	ldr	r3, [pc, #692]	; (801486c <__kernel_tan+0x39c>)
 80145b8:	429f      	cmp	r7, r3
 80145ba:	dd26      	ble.n	801460a <__kernel_tan+0x13a>
 80145bc:	9b00      	ldr	r3, [sp, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	da09      	bge.n	80145d6 <__kernel_tan+0x106>
 80145c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80145c6:	469b      	mov	fp, r3
 80145c8:	ee10 aa10 	vmov	sl, s0
 80145cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80145d0:	ee11 8a10 	vmov	r8, s2
 80145d4:	4699      	mov	r9, r3
 80145d6:	4652      	mov	r2, sl
 80145d8:	465b      	mov	r3, fp
 80145da:	a183      	add	r1, pc, #524	; (adr r1, 80147e8 <__kernel_tan+0x318>)
 80145dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145e0:	f7eb fe6c 	bl	80002bc <__aeabi_dsub>
 80145e4:	4642      	mov	r2, r8
 80145e6:	464b      	mov	r3, r9
 80145e8:	4604      	mov	r4, r0
 80145ea:	460d      	mov	r5, r1
 80145ec:	a180      	add	r1, pc, #512	; (adr r1, 80147f0 <__kernel_tan+0x320>)
 80145ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145f2:	f7eb fe63 	bl	80002bc <__aeabi_dsub>
 80145f6:	4622      	mov	r2, r4
 80145f8:	462b      	mov	r3, r5
 80145fa:	f7eb fe61 	bl	80002c0 <__adddf3>
 80145fe:	f04f 0800 	mov.w	r8, #0
 8014602:	4682      	mov	sl, r0
 8014604:	468b      	mov	fp, r1
 8014606:	f04f 0900 	mov.w	r9, #0
 801460a:	4652      	mov	r2, sl
 801460c:	465b      	mov	r3, fp
 801460e:	4650      	mov	r0, sl
 8014610:	4659      	mov	r1, fp
 8014612:	f7ec f80b 	bl	800062c <__aeabi_dmul>
 8014616:	4602      	mov	r2, r0
 8014618:	460b      	mov	r3, r1
 801461a:	ec43 2b18 	vmov	d8, r2, r3
 801461e:	f7ec f805 	bl	800062c <__aeabi_dmul>
 8014622:	ec53 2b18 	vmov	r2, r3, d8
 8014626:	4604      	mov	r4, r0
 8014628:	460d      	mov	r5, r1
 801462a:	4650      	mov	r0, sl
 801462c:	4659      	mov	r1, fp
 801462e:	f7eb fffd 	bl	800062c <__aeabi_dmul>
 8014632:	a371      	add	r3, pc, #452	; (adr r3, 80147f8 <__kernel_tan+0x328>)
 8014634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014638:	ec41 0b19 	vmov	d9, r0, r1
 801463c:	4620      	mov	r0, r4
 801463e:	4629      	mov	r1, r5
 8014640:	f7eb fff4 	bl	800062c <__aeabi_dmul>
 8014644:	a36e      	add	r3, pc, #440	; (adr r3, 8014800 <__kernel_tan+0x330>)
 8014646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464a:	f7eb fe39 	bl	80002c0 <__adddf3>
 801464e:	4622      	mov	r2, r4
 8014650:	462b      	mov	r3, r5
 8014652:	f7eb ffeb 	bl	800062c <__aeabi_dmul>
 8014656:	a36c      	add	r3, pc, #432	; (adr r3, 8014808 <__kernel_tan+0x338>)
 8014658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465c:	f7eb fe30 	bl	80002c0 <__adddf3>
 8014660:	4622      	mov	r2, r4
 8014662:	462b      	mov	r3, r5
 8014664:	f7eb ffe2 	bl	800062c <__aeabi_dmul>
 8014668:	a369      	add	r3, pc, #420	; (adr r3, 8014810 <__kernel_tan+0x340>)
 801466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466e:	f7eb fe27 	bl	80002c0 <__adddf3>
 8014672:	4622      	mov	r2, r4
 8014674:	462b      	mov	r3, r5
 8014676:	f7eb ffd9 	bl	800062c <__aeabi_dmul>
 801467a:	a367      	add	r3, pc, #412	; (adr r3, 8014818 <__kernel_tan+0x348>)
 801467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014680:	f7eb fe1e 	bl	80002c0 <__adddf3>
 8014684:	4622      	mov	r2, r4
 8014686:	462b      	mov	r3, r5
 8014688:	f7eb ffd0 	bl	800062c <__aeabi_dmul>
 801468c:	a364      	add	r3, pc, #400	; (adr r3, 8014820 <__kernel_tan+0x350>)
 801468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014692:	f7eb fe15 	bl	80002c0 <__adddf3>
 8014696:	ec53 2b18 	vmov	r2, r3, d8
 801469a:	f7eb ffc7 	bl	800062c <__aeabi_dmul>
 801469e:	a362      	add	r3, pc, #392	; (adr r3, 8014828 <__kernel_tan+0x358>)
 80146a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a4:	ec41 0b1a 	vmov	d10, r0, r1
 80146a8:	4620      	mov	r0, r4
 80146aa:	4629      	mov	r1, r5
 80146ac:	f7eb ffbe 	bl	800062c <__aeabi_dmul>
 80146b0:	a35f      	add	r3, pc, #380	; (adr r3, 8014830 <__kernel_tan+0x360>)
 80146b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b6:	f7eb fe03 	bl	80002c0 <__adddf3>
 80146ba:	4622      	mov	r2, r4
 80146bc:	462b      	mov	r3, r5
 80146be:	f7eb ffb5 	bl	800062c <__aeabi_dmul>
 80146c2:	a35d      	add	r3, pc, #372	; (adr r3, 8014838 <__kernel_tan+0x368>)
 80146c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c8:	f7eb fdfa 	bl	80002c0 <__adddf3>
 80146cc:	4622      	mov	r2, r4
 80146ce:	462b      	mov	r3, r5
 80146d0:	f7eb ffac 	bl	800062c <__aeabi_dmul>
 80146d4:	a35a      	add	r3, pc, #360	; (adr r3, 8014840 <__kernel_tan+0x370>)
 80146d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146da:	f7eb fdf1 	bl	80002c0 <__adddf3>
 80146de:	4622      	mov	r2, r4
 80146e0:	462b      	mov	r3, r5
 80146e2:	f7eb ffa3 	bl	800062c <__aeabi_dmul>
 80146e6:	a358      	add	r3, pc, #352	; (adr r3, 8014848 <__kernel_tan+0x378>)
 80146e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ec:	f7eb fde8 	bl	80002c0 <__adddf3>
 80146f0:	4622      	mov	r2, r4
 80146f2:	462b      	mov	r3, r5
 80146f4:	f7eb ff9a 	bl	800062c <__aeabi_dmul>
 80146f8:	a355      	add	r3, pc, #340	; (adr r3, 8014850 <__kernel_tan+0x380>)
 80146fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fe:	f7eb fddf 	bl	80002c0 <__adddf3>
 8014702:	4602      	mov	r2, r0
 8014704:	460b      	mov	r3, r1
 8014706:	ec51 0b1a 	vmov	r0, r1, d10
 801470a:	f7eb fdd9 	bl	80002c0 <__adddf3>
 801470e:	ec53 2b19 	vmov	r2, r3, d9
 8014712:	f7eb ff8b 	bl	800062c <__aeabi_dmul>
 8014716:	4642      	mov	r2, r8
 8014718:	464b      	mov	r3, r9
 801471a:	f7eb fdd1 	bl	80002c0 <__adddf3>
 801471e:	ec53 2b18 	vmov	r2, r3, d8
 8014722:	f7eb ff83 	bl	800062c <__aeabi_dmul>
 8014726:	4642      	mov	r2, r8
 8014728:	464b      	mov	r3, r9
 801472a:	f7eb fdc9 	bl	80002c0 <__adddf3>
 801472e:	a34a      	add	r3, pc, #296	; (adr r3, 8014858 <__kernel_tan+0x388>)
 8014730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014734:	4604      	mov	r4, r0
 8014736:	460d      	mov	r5, r1
 8014738:	ec51 0b19 	vmov	r0, r1, d9
 801473c:	f7eb ff76 	bl	800062c <__aeabi_dmul>
 8014740:	4622      	mov	r2, r4
 8014742:	462b      	mov	r3, r5
 8014744:	f7eb fdbc 	bl	80002c0 <__adddf3>
 8014748:	460b      	mov	r3, r1
 801474a:	ec41 0b18 	vmov	d8, r0, r1
 801474e:	4602      	mov	r2, r0
 8014750:	4659      	mov	r1, fp
 8014752:	4650      	mov	r0, sl
 8014754:	f7eb fdb4 	bl	80002c0 <__adddf3>
 8014758:	4b44      	ldr	r3, [pc, #272]	; (801486c <__kernel_tan+0x39c>)
 801475a:	429f      	cmp	r7, r3
 801475c:	4604      	mov	r4, r0
 801475e:	460d      	mov	r5, r1
 8014760:	f340 8086 	ble.w	8014870 <__kernel_tan+0x3a0>
 8014764:	4630      	mov	r0, r6
 8014766:	f7eb fef7 	bl	8000558 <__aeabi_i2d>
 801476a:	4622      	mov	r2, r4
 801476c:	4680      	mov	r8, r0
 801476e:	4689      	mov	r9, r1
 8014770:	462b      	mov	r3, r5
 8014772:	4620      	mov	r0, r4
 8014774:	4629      	mov	r1, r5
 8014776:	f7eb ff59 	bl	800062c <__aeabi_dmul>
 801477a:	4642      	mov	r2, r8
 801477c:	4606      	mov	r6, r0
 801477e:	460f      	mov	r7, r1
 8014780:	464b      	mov	r3, r9
 8014782:	4620      	mov	r0, r4
 8014784:	4629      	mov	r1, r5
 8014786:	f7eb fd9b 	bl	80002c0 <__adddf3>
 801478a:	4602      	mov	r2, r0
 801478c:	460b      	mov	r3, r1
 801478e:	4630      	mov	r0, r6
 8014790:	4639      	mov	r1, r7
 8014792:	f7ec f875 	bl	8000880 <__aeabi_ddiv>
 8014796:	ec53 2b18 	vmov	r2, r3, d8
 801479a:	f7eb fd8f 	bl	80002bc <__aeabi_dsub>
 801479e:	4602      	mov	r2, r0
 80147a0:	460b      	mov	r3, r1
 80147a2:	4650      	mov	r0, sl
 80147a4:	4659      	mov	r1, fp
 80147a6:	f7eb fd89 	bl	80002bc <__aeabi_dsub>
 80147aa:	4602      	mov	r2, r0
 80147ac:	460b      	mov	r3, r1
 80147ae:	f7eb fd87 	bl	80002c0 <__adddf3>
 80147b2:	4602      	mov	r2, r0
 80147b4:	460b      	mov	r3, r1
 80147b6:	4640      	mov	r0, r8
 80147b8:	4649      	mov	r1, r9
 80147ba:	f7eb fd7f 	bl	80002bc <__aeabi_dsub>
 80147be:	9b00      	ldr	r3, [sp, #0]
 80147c0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80147c4:	f00a 0a02 	and.w	sl, sl, #2
 80147c8:	4604      	mov	r4, r0
 80147ca:	f1ca 0001 	rsb	r0, sl, #1
 80147ce:	460d      	mov	r5, r1
 80147d0:	f7eb fec2 	bl	8000558 <__aeabi_i2d>
 80147d4:	4602      	mov	r2, r0
 80147d6:	460b      	mov	r3, r1
 80147d8:	4620      	mov	r0, r4
 80147da:	4629      	mov	r1, r5
 80147dc:	f7eb ff26 	bl	800062c <__aeabi_dmul>
 80147e0:	e69f      	b.n	8014522 <__kernel_tan+0x52>
 80147e2:	bf00      	nop
 80147e4:	f3af 8000 	nop.w
 80147e8:	54442d18 	.word	0x54442d18
 80147ec:	3fe921fb 	.word	0x3fe921fb
 80147f0:	33145c07 	.word	0x33145c07
 80147f4:	3c81a626 	.word	0x3c81a626
 80147f8:	74bf7ad4 	.word	0x74bf7ad4
 80147fc:	3efb2a70 	.word	0x3efb2a70
 8014800:	32f0a7e9 	.word	0x32f0a7e9
 8014804:	3f12b80f 	.word	0x3f12b80f
 8014808:	1a8d1068 	.word	0x1a8d1068
 801480c:	3f3026f7 	.word	0x3f3026f7
 8014810:	fee08315 	.word	0xfee08315
 8014814:	3f57dbc8 	.word	0x3f57dbc8
 8014818:	e96e8493 	.word	0xe96e8493
 801481c:	3f8226e3 	.word	0x3f8226e3
 8014820:	1bb341fe 	.word	0x1bb341fe
 8014824:	3faba1ba 	.word	0x3faba1ba
 8014828:	db605373 	.word	0xdb605373
 801482c:	bef375cb 	.word	0xbef375cb
 8014830:	a03792a6 	.word	0xa03792a6
 8014834:	3f147e88 	.word	0x3f147e88
 8014838:	f2f26501 	.word	0xf2f26501
 801483c:	3f4344d8 	.word	0x3f4344d8
 8014840:	c9560328 	.word	0xc9560328
 8014844:	3f6d6d22 	.word	0x3f6d6d22
 8014848:	8406d637 	.word	0x8406d637
 801484c:	3f9664f4 	.word	0x3f9664f4
 8014850:	1110fe7a 	.word	0x1110fe7a
 8014854:	3fc11111 	.word	0x3fc11111
 8014858:	55555563 	.word	0x55555563
 801485c:	3fd55555 	.word	0x3fd55555
 8014860:	3e2fffff 	.word	0x3e2fffff
 8014864:	3ff00000 	.word	0x3ff00000
 8014868:	bff00000 	.word	0xbff00000
 801486c:	3fe59427 	.word	0x3fe59427
 8014870:	2e01      	cmp	r6, #1
 8014872:	d02f      	beq.n	80148d4 <__kernel_tan+0x404>
 8014874:	460f      	mov	r7, r1
 8014876:	4602      	mov	r2, r0
 8014878:	460b      	mov	r3, r1
 801487a:	4689      	mov	r9, r1
 801487c:	2000      	movs	r0, #0
 801487e:	4917      	ldr	r1, [pc, #92]	; (80148dc <__kernel_tan+0x40c>)
 8014880:	f7eb fffe 	bl	8000880 <__aeabi_ddiv>
 8014884:	2600      	movs	r6, #0
 8014886:	e9cd 0100 	strd	r0, r1, [sp]
 801488a:	4652      	mov	r2, sl
 801488c:	465b      	mov	r3, fp
 801488e:	4630      	mov	r0, r6
 8014890:	4639      	mov	r1, r7
 8014892:	f7eb fd13 	bl	80002bc <__aeabi_dsub>
 8014896:	e9dd 4500 	ldrd	r4, r5, [sp]
 801489a:	4602      	mov	r2, r0
 801489c:	460b      	mov	r3, r1
 801489e:	ec51 0b18 	vmov	r0, r1, d8
 80148a2:	f7eb fd0b 	bl	80002bc <__aeabi_dsub>
 80148a6:	4632      	mov	r2, r6
 80148a8:	462b      	mov	r3, r5
 80148aa:	f7eb febf 	bl	800062c <__aeabi_dmul>
 80148ae:	46b0      	mov	r8, r6
 80148b0:	460f      	mov	r7, r1
 80148b2:	4642      	mov	r2, r8
 80148b4:	462b      	mov	r3, r5
 80148b6:	4634      	mov	r4, r6
 80148b8:	4649      	mov	r1, r9
 80148ba:	4606      	mov	r6, r0
 80148bc:	4640      	mov	r0, r8
 80148be:	f7eb feb5 	bl	800062c <__aeabi_dmul>
 80148c2:	4b07      	ldr	r3, [pc, #28]	; (80148e0 <__kernel_tan+0x410>)
 80148c4:	2200      	movs	r2, #0
 80148c6:	f7eb fcfb 	bl	80002c0 <__adddf3>
 80148ca:	4602      	mov	r2, r0
 80148cc:	460b      	mov	r3, r1
 80148ce:	4630      	mov	r0, r6
 80148d0:	4639      	mov	r1, r7
 80148d2:	e665      	b.n	80145a0 <__kernel_tan+0xd0>
 80148d4:	4682      	mov	sl, r0
 80148d6:	468b      	mov	fp, r1
 80148d8:	e625      	b.n	8014526 <__kernel_tan+0x56>
 80148da:	bf00      	nop
 80148dc:	bff00000 	.word	0xbff00000
 80148e0:	3ff00000 	.word	0x3ff00000

080148e4 <with_errno>:
 80148e4:	b570      	push	{r4, r5, r6, lr}
 80148e6:	4604      	mov	r4, r0
 80148e8:	460d      	mov	r5, r1
 80148ea:	4616      	mov	r6, r2
 80148ec:	f7fc f8b6 	bl	8010a5c <__errno>
 80148f0:	4629      	mov	r1, r5
 80148f2:	6006      	str	r6, [r0, #0]
 80148f4:	4620      	mov	r0, r4
 80148f6:	bd70      	pop	{r4, r5, r6, pc}

080148f8 <xflow>:
 80148f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148fa:	4614      	mov	r4, r2
 80148fc:	461d      	mov	r5, r3
 80148fe:	b108      	cbz	r0, 8014904 <xflow+0xc>
 8014900:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014904:	e9cd 2300 	strd	r2, r3, [sp]
 8014908:	e9dd 2300 	ldrd	r2, r3, [sp]
 801490c:	4620      	mov	r0, r4
 801490e:	4629      	mov	r1, r5
 8014910:	f7eb fe8c 	bl	800062c <__aeabi_dmul>
 8014914:	2222      	movs	r2, #34	; 0x22
 8014916:	b003      	add	sp, #12
 8014918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801491c:	f7ff bfe2 	b.w	80148e4 <with_errno>

08014920 <__math_uflow>:
 8014920:	b508      	push	{r3, lr}
 8014922:	2200      	movs	r2, #0
 8014924:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014928:	f7ff ffe6 	bl	80148f8 <xflow>
 801492c:	ec41 0b10 	vmov	d0, r0, r1
 8014930:	bd08      	pop	{r3, pc}

08014932 <__math_oflow>:
 8014932:	b508      	push	{r3, lr}
 8014934:	2200      	movs	r2, #0
 8014936:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801493a:	f7ff ffdd 	bl	80148f8 <xflow>
 801493e:	ec41 0b10 	vmov	d0, r0, r1
 8014942:	bd08      	pop	{r3, pc}

08014944 <fabs>:
 8014944:	ec51 0b10 	vmov	r0, r1, d0
 8014948:	ee10 2a10 	vmov	r2, s0
 801494c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014950:	ec43 2b10 	vmov	d0, r2, r3
 8014954:	4770      	bx	lr

08014956 <finite>:
 8014956:	b082      	sub	sp, #8
 8014958:	ed8d 0b00 	vstr	d0, [sp]
 801495c:	9801      	ldr	r0, [sp, #4]
 801495e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014962:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014966:	0fc0      	lsrs	r0, r0, #31
 8014968:	b002      	add	sp, #8
 801496a:	4770      	bx	lr
 801496c:	0000      	movs	r0, r0
	...

08014970 <floor>:
 8014970:	ec51 0b10 	vmov	r0, r1, d0
 8014974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014978:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801497c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014980:	2e13      	cmp	r6, #19
 8014982:	ee10 5a10 	vmov	r5, s0
 8014986:	ee10 8a10 	vmov	r8, s0
 801498a:	460c      	mov	r4, r1
 801498c:	dc32      	bgt.n	80149f4 <floor+0x84>
 801498e:	2e00      	cmp	r6, #0
 8014990:	da14      	bge.n	80149bc <floor+0x4c>
 8014992:	a333      	add	r3, pc, #204	; (adr r3, 8014a60 <floor+0xf0>)
 8014994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014998:	f7eb fc92 	bl	80002c0 <__adddf3>
 801499c:	2200      	movs	r2, #0
 801499e:	2300      	movs	r3, #0
 80149a0:	f7ec f8d4 	bl	8000b4c <__aeabi_dcmpgt>
 80149a4:	b138      	cbz	r0, 80149b6 <floor+0x46>
 80149a6:	2c00      	cmp	r4, #0
 80149a8:	da57      	bge.n	8014a5a <floor+0xea>
 80149aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80149ae:	431d      	orrs	r5, r3
 80149b0:	d001      	beq.n	80149b6 <floor+0x46>
 80149b2:	4c2d      	ldr	r4, [pc, #180]	; (8014a68 <floor+0xf8>)
 80149b4:	2500      	movs	r5, #0
 80149b6:	4621      	mov	r1, r4
 80149b8:	4628      	mov	r0, r5
 80149ba:	e025      	b.n	8014a08 <floor+0x98>
 80149bc:	4f2b      	ldr	r7, [pc, #172]	; (8014a6c <floor+0xfc>)
 80149be:	4137      	asrs	r7, r6
 80149c0:	ea01 0307 	and.w	r3, r1, r7
 80149c4:	4303      	orrs	r3, r0
 80149c6:	d01f      	beq.n	8014a08 <floor+0x98>
 80149c8:	a325      	add	r3, pc, #148	; (adr r3, 8014a60 <floor+0xf0>)
 80149ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ce:	f7eb fc77 	bl	80002c0 <__adddf3>
 80149d2:	2200      	movs	r2, #0
 80149d4:	2300      	movs	r3, #0
 80149d6:	f7ec f8b9 	bl	8000b4c <__aeabi_dcmpgt>
 80149da:	2800      	cmp	r0, #0
 80149dc:	d0eb      	beq.n	80149b6 <floor+0x46>
 80149de:	2c00      	cmp	r4, #0
 80149e0:	bfbe      	ittt	lt
 80149e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80149e6:	fa43 f606 	asrlt.w	r6, r3, r6
 80149ea:	19a4      	addlt	r4, r4, r6
 80149ec:	ea24 0407 	bic.w	r4, r4, r7
 80149f0:	2500      	movs	r5, #0
 80149f2:	e7e0      	b.n	80149b6 <floor+0x46>
 80149f4:	2e33      	cmp	r6, #51	; 0x33
 80149f6:	dd0b      	ble.n	8014a10 <floor+0xa0>
 80149f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80149fc:	d104      	bne.n	8014a08 <floor+0x98>
 80149fe:	ee10 2a10 	vmov	r2, s0
 8014a02:	460b      	mov	r3, r1
 8014a04:	f7eb fc5c 	bl	80002c0 <__adddf3>
 8014a08:	ec41 0b10 	vmov	d0, r0, r1
 8014a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a10:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014a14:	f04f 33ff 	mov.w	r3, #4294967295
 8014a18:	fa23 f707 	lsr.w	r7, r3, r7
 8014a1c:	4207      	tst	r7, r0
 8014a1e:	d0f3      	beq.n	8014a08 <floor+0x98>
 8014a20:	a30f      	add	r3, pc, #60	; (adr r3, 8014a60 <floor+0xf0>)
 8014a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a26:	f7eb fc4b 	bl	80002c0 <__adddf3>
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	f7ec f88d 	bl	8000b4c <__aeabi_dcmpgt>
 8014a32:	2800      	cmp	r0, #0
 8014a34:	d0bf      	beq.n	80149b6 <floor+0x46>
 8014a36:	2c00      	cmp	r4, #0
 8014a38:	da02      	bge.n	8014a40 <floor+0xd0>
 8014a3a:	2e14      	cmp	r6, #20
 8014a3c:	d103      	bne.n	8014a46 <floor+0xd6>
 8014a3e:	3401      	adds	r4, #1
 8014a40:	ea25 0507 	bic.w	r5, r5, r7
 8014a44:	e7b7      	b.n	80149b6 <floor+0x46>
 8014a46:	2301      	movs	r3, #1
 8014a48:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014a4c:	fa03 f606 	lsl.w	r6, r3, r6
 8014a50:	4435      	add	r5, r6
 8014a52:	4545      	cmp	r5, r8
 8014a54:	bf38      	it	cc
 8014a56:	18e4      	addcc	r4, r4, r3
 8014a58:	e7f2      	b.n	8014a40 <floor+0xd0>
 8014a5a:	2500      	movs	r5, #0
 8014a5c:	462c      	mov	r4, r5
 8014a5e:	e7aa      	b.n	80149b6 <floor+0x46>
 8014a60:	8800759c 	.word	0x8800759c
 8014a64:	7e37e43c 	.word	0x7e37e43c
 8014a68:	bff00000 	.word	0xbff00000
 8014a6c:	000fffff 	.word	0x000fffff

08014a70 <nan>:
 8014a70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014a78 <nan+0x8>
 8014a74:	4770      	bx	lr
 8014a76:	bf00      	nop
 8014a78:	00000000 	.word	0x00000000
 8014a7c:	7ff80000 	.word	0x7ff80000

08014a80 <scalbn>:
 8014a80:	b570      	push	{r4, r5, r6, lr}
 8014a82:	ec55 4b10 	vmov	r4, r5, d0
 8014a86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014a8a:	4606      	mov	r6, r0
 8014a8c:	462b      	mov	r3, r5
 8014a8e:	b99a      	cbnz	r2, 8014ab8 <scalbn+0x38>
 8014a90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014a94:	4323      	orrs	r3, r4
 8014a96:	d036      	beq.n	8014b06 <scalbn+0x86>
 8014a98:	4b39      	ldr	r3, [pc, #228]	; (8014b80 <scalbn+0x100>)
 8014a9a:	4629      	mov	r1, r5
 8014a9c:	ee10 0a10 	vmov	r0, s0
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	f7eb fdc3 	bl	800062c <__aeabi_dmul>
 8014aa6:	4b37      	ldr	r3, [pc, #220]	; (8014b84 <scalbn+0x104>)
 8014aa8:	429e      	cmp	r6, r3
 8014aaa:	4604      	mov	r4, r0
 8014aac:	460d      	mov	r5, r1
 8014aae:	da10      	bge.n	8014ad2 <scalbn+0x52>
 8014ab0:	a32b      	add	r3, pc, #172	; (adr r3, 8014b60 <scalbn+0xe0>)
 8014ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab6:	e03a      	b.n	8014b2e <scalbn+0xae>
 8014ab8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014abc:	428a      	cmp	r2, r1
 8014abe:	d10c      	bne.n	8014ada <scalbn+0x5a>
 8014ac0:	ee10 2a10 	vmov	r2, s0
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	4629      	mov	r1, r5
 8014ac8:	f7eb fbfa 	bl	80002c0 <__adddf3>
 8014acc:	4604      	mov	r4, r0
 8014ace:	460d      	mov	r5, r1
 8014ad0:	e019      	b.n	8014b06 <scalbn+0x86>
 8014ad2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014ad6:	460b      	mov	r3, r1
 8014ad8:	3a36      	subs	r2, #54	; 0x36
 8014ada:	4432      	add	r2, r6
 8014adc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014ae0:	428a      	cmp	r2, r1
 8014ae2:	dd08      	ble.n	8014af6 <scalbn+0x76>
 8014ae4:	2d00      	cmp	r5, #0
 8014ae6:	a120      	add	r1, pc, #128	; (adr r1, 8014b68 <scalbn+0xe8>)
 8014ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014aec:	da1c      	bge.n	8014b28 <scalbn+0xa8>
 8014aee:	a120      	add	r1, pc, #128	; (adr r1, 8014b70 <scalbn+0xf0>)
 8014af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014af4:	e018      	b.n	8014b28 <scalbn+0xa8>
 8014af6:	2a00      	cmp	r2, #0
 8014af8:	dd08      	ble.n	8014b0c <scalbn+0x8c>
 8014afa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014afe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014b02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014b06:	ec45 4b10 	vmov	d0, r4, r5
 8014b0a:	bd70      	pop	{r4, r5, r6, pc}
 8014b0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014b10:	da19      	bge.n	8014b46 <scalbn+0xc6>
 8014b12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014b16:	429e      	cmp	r6, r3
 8014b18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014b1c:	dd0a      	ble.n	8014b34 <scalbn+0xb4>
 8014b1e:	a112      	add	r1, pc, #72	; (adr r1, 8014b68 <scalbn+0xe8>)
 8014b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d1e2      	bne.n	8014aee <scalbn+0x6e>
 8014b28:	a30f      	add	r3, pc, #60	; (adr r3, 8014b68 <scalbn+0xe8>)
 8014b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2e:	f7eb fd7d 	bl	800062c <__aeabi_dmul>
 8014b32:	e7cb      	b.n	8014acc <scalbn+0x4c>
 8014b34:	a10a      	add	r1, pc, #40	; (adr r1, 8014b60 <scalbn+0xe0>)
 8014b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d0b8      	beq.n	8014ab0 <scalbn+0x30>
 8014b3e:	a10e      	add	r1, pc, #56	; (adr r1, 8014b78 <scalbn+0xf8>)
 8014b40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b44:	e7b4      	b.n	8014ab0 <scalbn+0x30>
 8014b46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b4a:	3236      	adds	r2, #54	; 0x36
 8014b4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014b50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014b54:	4620      	mov	r0, r4
 8014b56:	4b0c      	ldr	r3, [pc, #48]	; (8014b88 <scalbn+0x108>)
 8014b58:	2200      	movs	r2, #0
 8014b5a:	e7e8      	b.n	8014b2e <scalbn+0xae>
 8014b5c:	f3af 8000 	nop.w
 8014b60:	c2f8f359 	.word	0xc2f8f359
 8014b64:	01a56e1f 	.word	0x01a56e1f
 8014b68:	8800759c 	.word	0x8800759c
 8014b6c:	7e37e43c 	.word	0x7e37e43c
 8014b70:	8800759c 	.word	0x8800759c
 8014b74:	fe37e43c 	.word	0xfe37e43c
 8014b78:	c2f8f359 	.word	0xc2f8f359
 8014b7c:	81a56e1f 	.word	0x81a56e1f
 8014b80:	43500000 	.word	0x43500000
 8014b84:	ffff3cb0 	.word	0xffff3cb0
 8014b88:	3c900000 	.word	0x3c900000

08014b8c <_close>:
 8014b8c:	4b02      	ldr	r3, [pc, #8]	; (8014b98 <_close+0xc>)
 8014b8e:	2258      	movs	r2, #88	; 0x58
 8014b90:	601a      	str	r2, [r3, #0]
 8014b92:	f04f 30ff 	mov.w	r0, #4294967295
 8014b96:	4770      	bx	lr
 8014b98:	20003c20 	.word	0x20003c20

08014b9c <_fstat>:
 8014b9c:	4b02      	ldr	r3, [pc, #8]	; (8014ba8 <_fstat+0xc>)
 8014b9e:	2258      	movs	r2, #88	; 0x58
 8014ba0:	601a      	str	r2, [r3, #0]
 8014ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ba6:	4770      	bx	lr
 8014ba8:	20003c20 	.word	0x20003c20

08014bac <_getpid>:
 8014bac:	4b02      	ldr	r3, [pc, #8]	; (8014bb8 <_getpid+0xc>)
 8014bae:	2258      	movs	r2, #88	; 0x58
 8014bb0:	601a      	str	r2, [r3, #0]
 8014bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8014bb6:	4770      	bx	lr
 8014bb8:	20003c20 	.word	0x20003c20

08014bbc <_isatty>:
 8014bbc:	4b02      	ldr	r3, [pc, #8]	; (8014bc8 <_isatty+0xc>)
 8014bbe:	2258      	movs	r2, #88	; 0x58
 8014bc0:	601a      	str	r2, [r3, #0]
 8014bc2:	2000      	movs	r0, #0
 8014bc4:	4770      	bx	lr
 8014bc6:	bf00      	nop
 8014bc8:	20003c20 	.word	0x20003c20

08014bcc <_kill>:
 8014bcc:	4b02      	ldr	r3, [pc, #8]	; (8014bd8 <_kill+0xc>)
 8014bce:	2258      	movs	r2, #88	; 0x58
 8014bd0:	601a      	str	r2, [r3, #0]
 8014bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8014bd6:	4770      	bx	lr
 8014bd8:	20003c20 	.word	0x20003c20

08014bdc <_lseek>:
 8014bdc:	4b02      	ldr	r3, [pc, #8]	; (8014be8 <_lseek+0xc>)
 8014bde:	2258      	movs	r2, #88	; 0x58
 8014be0:	601a      	str	r2, [r3, #0]
 8014be2:	f04f 30ff 	mov.w	r0, #4294967295
 8014be6:	4770      	bx	lr
 8014be8:	20003c20 	.word	0x20003c20

08014bec <_read>:
 8014bec:	4b02      	ldr	r3, [pc, #8]	; (8014bf8 <_read+0xc>)
 8014bee:	2258      	movs	r2, #88	; 0x58
 8014bf0:	601a      	str	r2, [r3, #0]
 8014bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8014bf6:	4770      	bx	lr
 8014bf8:	20003c20 	.word	0x20003c20

08014bfc <_sbrk>:
 8014bfc:	4a04      	ldr	r2, [pc, #16]	; (8014c10 <_sbrk+0x14>)
 8014bfe:	6811      	ldr	r1, [r2, #0]
 8014c00:	4603      	mov	r3, r0
 8014c02:	b909      	cbnz	r1, 8014c08 <_sbrk+0xc>
 8014c04:	4903      	ldr	r1, [pc, #12]	; (8014c14 <_sbrk+0x18>)
 8014c06:	6011      	str	r1, [r2, #0]
 8014c08:	6810      	ldr	r0, [r2, #0]
 8014c0a:	4403      	add	r3, r0
 8014c0c:	6013      	str	r3, [r2, #0]
 8014c0e:	4770      	bx	lr
 8014c10:	20003c28 	.word	0x20003c28
 8014c14:	20003c30 	.word	0x20003c30

08014c18 <_write>:
 8014c18:	4b02      	ldr	r3, [pc, #8]	; (8014c24 <_write+0xc>)
 8014c1a:	2258      	movs	r2, #88	; 0x58
 8014c1c:	601a      	str	r2, [r3, #0]
 8014c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c22:	4770      	bx	lr
 8014c24:	20003c20 	.word	0x20003c20

08014c28 <_exit>:
 8014c28:	e7fe      	b.n	8014c28 <_exit>
	...

08014c2c <_init>:
 8014c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c2e:	bf00      	nop
 8014c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c32:	bc08      	pop	{r3}
 8014c34:	469e      	mov	lr, r3
 8014c36:	4770      	bx	lr

08014c38 <_fini>:
 8014c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c3a:	bf00      	nop
 8014c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c3e:	bc08      	pop	{r3}
 8014c40:	469e      	mov	lr, r3
 8014c42:	4770      	bx	lr
