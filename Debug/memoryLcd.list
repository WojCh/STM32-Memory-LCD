
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c92c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013660  0800cae0  0800cae0  0001cae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020140  08020140  00040338  2**0
                  CONTENTS
  4 .ARM          00000008  08020140  08020140  00030140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020148  08020148  00040338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020148  08020148  00030148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802014c  0802014c  0003014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  08020150  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040338  2**0
                  CONTENTS
 10 .bss          00003290  20000338  20000338  00040338  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200035c8  200035c8  00040338  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e62f  00000000  00000000  00040368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dbc  00000000  00000000  0005e997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001870  00000000  00000000  00063758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001688  00000000  00000000  00064fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028e7c  00000000  00000000  00066650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021234  00000000  00000000  0008f4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7dfb  00000000  00000000  000b0700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001984fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007868  00000000  00000000  0019854c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000338 	.word	0x20000338
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cac4 	.word	0x0800cac4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000033c 	.word	0x2000033c
 80001ec:	0800cac4 	.word	0x0800cac4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8000f7a:	2332      	movs	r3, #50	; 0x32
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	1dbb      	adds	r3, r7, #6
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	22d0      	movs	r2, #208	; 0xd0
 8000f8a:	21ef      	movs	r1, #239	; 0xef
 8000f8c:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <read_chip_id+0x3c>)
 8000f8e:	f003 fccb 	bl	8004928 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	2b55      	cmp	r3, #85	; 0x55
 8000f96:	d001      	beq.n	8000f9c <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000484 	.word	0x20000484

08000fac <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af04      	add	r7, sp, #16
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8000fb8:	2300      	movs	r3, #0
 8000fba:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d81a      	bhi.n	8000ff8 <set_oss+0x4c>
 8000fc2:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <set_oss+0x1c>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08000fd9 	.word	0x08000fd9
 8000fcc:	08000fe1 	.word	0x08000fe1
 8000fd0:	08000fe9 	.word	0x08000fe9
 8000fd4:	08000ff1 	.word	0x08000ff1
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2205      	movs	r2, #5
 8000fdc:	705a      	strb	r2, [r3, #1]
			break;
 8000fde:	e00f      	b.n	8001000 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	705a      	strb	r2, [r3, #1]
			break;
 8000fe6:	e00b      	b.n	8001000 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	220e      	movs	r2, #14
 8000fec:	705a      	strb	r2, [r3, #1]
			break;
 8000fee:	e007      	b.n	8001000 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	221a      	movs	r2, #26
 8000ff4:	705a      	strb	r2, [r3, #1]
			break;
 8000ff6:	e003      	b.n	8001000 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	705a      	strb	r2, [r3, #1]
			break;
 8000ffe:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	78fa      	ldrb	r2, [r7, #3]
 8001004:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	019b      	lsls	r3, r3, #6
 800100a:	70fb      	strb	r3, [r7, #3]
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001010:	2332      	movs	r3, #50	; 0x32
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	2302      	movs	r3, #2
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	22f4      	movs	r2, #244	; 0xf4
 8001022:	21ee      	movs	r1, #238	; 0xee
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <set_oss+0x88>)
 8001026:	f003 fb85 	bl	8004734 <HAL_I2C_Mem_Write>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000484 	.word	0x20000484

08001038 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af04      	add	r7, sp, #16
 800103e:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001066:	2332      	movs	r3, #50	; 0x32
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	2316      	movs	r3, #22
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	22aa      	movs	r2, #170	; 0xaa
 8001078:	21ef      	movs	r1, #239	; 0xef
 800107a:	4827      	ldr	r0, [pc, #156]	; (8001118 <read_calib_data+0xe0>)
 800107c:	f003 fc54 	bl	8004928 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001086:	e03c      	b.n	8001102 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001088:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	3328      	adds	r3, #40	; 0x28
 8001090:	443b      	add	r3, r7
 8001092:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b219      	sxth	r1, r3
 800109a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800109e:	3328      	adds	r3, #40	; 0x28
 80010a0:	443b      	add	r3, r7
 80010a2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	4403      	add	r3, r0
 80010b2:	430a      	orrs	r2, r1
 80010b4:	b212      	sxth	r2, r2
 80010b6:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80010b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bf0c      	ite	eq
 80010ca:	2301      	moveq	r3, #1
 80010cc:	2300      	movne	r3, #0
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	440b      	add	r3, r1
 80010da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80010f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010fc:	3301      	adds	r3, #1
 80010fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001102:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001106:	2b0b      	cmp	r3, #11
 8001108:	d9be      	bls.n	8001088 <read_calib_data+0x50>
		}
	}

	return ret_val;
 800110a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800110e:	4618      	mov	r0, r3
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000484 	.word	0x20000484

0800111c <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2204      	movs	r2, #4
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f007 febe 	bl	8008eac <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001130:	687c      	ldr	r4, [r7, #4]
 8001132:	f7ff ff1b 	bl	8000f6c <read_chip_id>
 8001136:	4603      	mov	r3, r0
 8001138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	687c      	ldr	r4, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff79 	bl	8001038 <read_calib_data>
 8001146:	4603      	mov	r3, r0
 8001148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3340      	adds	r3, #64	; 0x40
 8001150:	2102      	movs	r1, #2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff2a 	bl	8000fac <set_oss>
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}

08001160 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8001166:	232e      	movs	r3, #46	; 0x2e
 8001168:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800116a:	2332      	movs	r3, #50	; 0x32
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	2301      	movs	r3, #1
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	22f4      	movs	r2, #244	; 0xf4
 800117a:	21ee      	movs	r1, #238	; 0xee
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <get_ut+0x50>)
 800117e:	f003 fad9 	bl	8004734 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001182:	2005      	movs	r0, #5
 8001184:	f002 fdae 	bl	8003ce4 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 8001188:	2332      	movs	r3, #50	; 0x32
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2302      	movs	r3, #2
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	22f6      	movs	r2, #246	; 0xf6
 8001198:	21ef      	movs	r1, #239	; 0xef
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <get_ut+0x50>)
 800119c:	f003 fbc4 	bl	8004928 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80011a0:	793b      	ldrb	r3, [r7, #4]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	797a      	ldrb	r2, [r7, #5]
 80011a6:	4313      	orrs	r3, r2
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000484 	.word	0x20000484

080011b4 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80011d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d4:	ee17 2a90 	vmov	r2, s15
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	895b      	ldrh	r3, [r3, #10]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	8912      	ldrh	r2, [r2, #8]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	13db      	asrs	r3, r3, #15
 80011e8:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80011f0:	02da      	lsls	r2, r3, #11
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011f8:	4619      	mov	r1, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	440b      	add	r3, r1
 80011fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001202:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	441a      	add	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001212:	3308      	adds	r3, #8
 8001214:	111b      	asrs	r3, r3, #4
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800121e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800126c <get_temp+0xb8>
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800122a:	edd7 7a03 	vldr	s15, [r7, #12]
 800122e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001270 <get_temp+0xbc>
 8001232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	d908      	bls.n	800124e <get_temp+0x9a>
 800123c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001240:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001274 <get_temp+0xc0>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	db03      	blt.n	8001256 <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2203      	movs	r2, #3
 8001252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	ee07 3a90 	vmov	s15, r3
}
 800125c:	eeb0 0a67 	vmov.f32	s0, s15
 8001260:	371c      	adds	r7, #28
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	3dcccccd 	.word	0x3dcccccd
 8001270:	c2200000 	.word	0xc2200000
 8001274:	42aa0000 	.word	0x42aa0000

08001278 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af04      	add	r7, sp, #16
 800127e:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <get_up+0x7c>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	813b      	strh	r3, [r7, #8]
 8001286:	2300      	movs	r3, #0
 8001288:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 800128e:	2334      	movs	r3, #52	; 0x34
 8001290:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001292:	2332      	movs	r3, #50	; 0x32
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	22f4      	movs	r2, #244	; 0xf4
 80012a4:	21ee      	movs	r1, #238	; 0xee
 80012a6:	4814      	ldr	r0, [pc, #80]	; (80012f8 <get_up+0x80>)
 80012a8:	f003 fa44 	bl	8004734 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80012ac:	797b      	ldrb	r3, [r7, #5]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fd18 	bl	8003ce4 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80012b4:	2332      	movs	r3, #50	; 0x32
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	2303      	movs	r3, #3
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2301      	movs	r3, #1
 80012c4:	22f6      	movs	r2, #246	; 0xf6
 80012c6:	21ef      	movs	r1, #239	; 0xef
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <get_up+0x80>)
 80012ca:	f003 fb2d 	bl	8004928 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80012ce:	7a3b      	ldrb	r3, [r7, #8]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	7a7b      	ldrb	r3, [r7, #9]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	4413      	add	r3, r2
 80012d8:	7aba      	ldrb	r2, [r7, #10]
 80012da:	441a      	add	r2, r3
 80012dc:	793b      	ldrb	r3, [r7, #4]
 80012de:	f1c3 0308 	rsb	r3, r3, #8
 80012e2:	fa42 f303 	asr.w	r3, r2, r3
 80012e6:	60fb      	str	r3, [r7, #12]
	return up;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	0800cae0 	.word	0x0800cae0
 80012f8:	20000484 	.word	0x20000484

080012fc <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80012fc:	b084      	sub	sp, #16
 80012fe:	b480      	push	{r7}
 8001300:	b089      	sub	sp, #36	; 0x24
 8001302:	af00      	add	r7, sp, #0
 8001304:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001308:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001316:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800131a:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 800131c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001320:	461a      	mov	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fb03 f303 	mul.w	r3, r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	da01      	bge.n	8001330 <get_pressure+0x34>
 800132c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001330:	131b      	asrs	r3, r3, #12
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	da01      	bge.n	800133e <get_pressure+0x42>
 800133a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800133e:	12db      	asrs	r3, r3, #11
 8001340:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001342:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001346:	461a      	mov	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	da01      	bge.n	8001356 <get_pressure+0x5a>
 8001352:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001356:	12db      	asrs	r3, r3, #11
 8001358:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001362:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001366:	009a      	lsls	r2, r3, #2
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4413      	add	r3, r2
 800136c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001370:	4093      	lsls	r3, r2
 8001372:	3302      	adds	r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	da00      	bge.n	800137a <get_pressure+0x7e>
 8001378:	3303      	adds	r3, #3
 800137a:	109b      	asrs	r3, r3, #2
 800137c:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800137e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001382:	461a      	mov	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	da02      	bge.n	8001394 <get_pressure+0x98>
 800138e:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001392:	331f      	adds	r3, #31
 8001394:	135b      	asrs	r3, r3, #13
 8001396:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001398:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800139c:	461a      	mov	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fb03 f303 	mul.w	r3, r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	da01      	bge.n	80013ac <get_pressure+0xb0>
 80013a8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013ac:	131b      	asrs	r3, r3, #12
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	da02      	bge.n	80013bc <get_pressure+0xc0>
 80013b6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80013ba:	33ff      	adds	r3, #255	; 0xff
 80013bc:	141b      	asrs	r3, r3, #16
 80013be:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	3302      	adds	r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da00      	bge.n	80013ce <get_pressure+0xd2>
 80013cc:	3303      	adds	r3, #3
 80013ce:	109b      	asrs	r3, r3, #2
 80013d0:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80013d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013d4:	461a      	mov	r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	0bdb      	lsrs	r3, r3, #15
 80013e2:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80013e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80013f0:	4611      	mov	r1, r2
 80013f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013f6:	410a      	asrs	r2, r1
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db06      	blt.n	8001412 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	005a      	lsls	r2, r3, #1
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	e005      	b.n	800141e <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	2b00      	cmp	r3, #0
 8001422:	da00      	bge.n	8001426 <get_pressure+0x12a>
 8001424:	33ff      	adds	r3, #255	; 0xff
 8001426:	121b      	asrs	r3, r3, #8
 8001428:	461a      	mov	r2, r3
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	2b00      	cmp	r3, #0
 800142e:	da00      	bge.n	8001432 <get_pressure+0x136>
 8001430:	33ff      	adds	r3, #255	; 0xff
 8001432:	121b      	asrs	r3, r3, #8
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f640 32de 	movw	r2, #3038	; 0xbde
 8001440:	fb02 f303 	mul.w	r3, r2, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	da02      	bge.n	800144e <get_pressure+0x152>
 8001448:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800144c:	33ff      	adds	r3, #255	; 0xff
 800144e:	141b      	asrs	r3, r3, #16
 8001450:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <get_pressure+0x198>)
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	da02      	bge.n	8001464 <get_pressure+0x168>
 800145e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001462:	33ff      	adds	r3, #255	; 0xff
 8001464:	141b      	asrs	r3, r3, #16
 8001466:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001472:	2b00      	cmp	r3, #0
 8001474:	da00      	bge.n	8001478 <get_pressure+0x17c>
 8001476:	330f      	adds	r3, #15
 8001478:	111b      	asrs	r3, r3, #4
 800147a:	461a      	mov	r2, r3
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	4413      	add	r3, r2
 8001480:	61fb      	str	r3, [r7, #28]

	return p;
 8001482:	69fb      	ldr	r3, [r7, #28]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3724      	adds	r7, #36	; 0x24
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	b004      	add	sp, #16
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	ffffe343 	.word	0xffffe343

08001498 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <get_altitude+0xb8>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014bc:	ee16 0a90 	vmov	r0, s13
 80014c0:	f7ff f852 	bl	8000568 <__aeabi_f2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001540 <get_altitude+0xa8>
 80014cc:	ec43 2b10 	vmov	d0, r2, r3
 80014d0:	f00a fbde 	bl	800bc90 <pow>
 80014d4:	ec53 2b10 	vmov	r2, r3, d0
 80014d8:	f04f 0000 	mov.w	r0, #0
 80014dc:	491d      	ldr	r1, [pc, #116]	; (8001554 <get_altitude+0xbc>)
 80014de:	f7fe fee3 	bl	80002a8 <__aeabi_dsub>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	a317      	add	r3, pc, #92	; (adr r3, 8001548 <get_altitude+0xb0>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f892 	bl	8000618 <__aeabi_dmul>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb64 	bl	8000bc8 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001504:	edd7 7a03 	vldr	s15, [r7, #12]
 8001508:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001558 <get_altitude+0xc0>
 800150c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	d908      	bls.n	8001528 <get_altitude+0x90>
 8001516:	edd7 7a03 	vldr	s15, [r7, #12]
 800151a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800155c <get_altitude+0xc4>
 800151e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	db03      	blt.n	8001530 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2205      	movs	r2, #5
 800152c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	ccd9456c 	.word	0xccd9456c
 8001544:	3fc85b95 	.word	0x3fc85b95
 8001548:	00000000 	.word	0x00000000
 800154c:	40e5a540 	.word	0x40e5a540
 8001550:	20000000 	.word	0x20000000
 8001554:	3ff00000 	.word	0x3ff00000
 8001558:	c3fa0000 	.word	0xc3fa0000
 800155c:	460ca000 	.word	0x460ca000

08001560 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffe6 	bl	8000544 <__aeabi_i2d>
 8001578:	4604      	mov	r4, r0
 800157a:	460d      	mov	r5, r1
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <get_slp+0x80>)
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	eddf 6a18 	vldr	s13, [pc, #96]	; 80015e4 <get_slp+0x84>
 8001586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800158e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001592:	ee17 0a90 	vmov	r0, s15
 8001596:	f7fe ffe7 	bl	8000568 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80015d8 <get_slp+0x78>
 80015a2:	ec43 2b10 	vmov	d0, r2, r3
 80015a6:	f00a fb73 	bl	800bc90 <pow>
 80015aa:	ec53 2b10 	vmov	r2, r3, d0
 80015ae:	4620      	mov	r0, r4
 80015b0:	4629      	mov	r1, r5
 80015b2:	f7ff f95b 	bl	800086c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fb03 	bl	8000bc8 <__aeabi_d2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	60fb      	str	r3, [r7, #12]

	return slp;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	ee07 3a90 	vmov	s15, r3
}
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bdb0      	pop	{r4, r5, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	b851eb85 	.word	0xb851eb85
 80015dc:	4015051e 	.word	0x4015051e
 80015e0:	20000004 	.word	0x20000004
 80015e4:	472d2a00 	.word	0x472d2a00

080015e8 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	b095      	sub	sp, #84	; 0x54
 80015ec:	af0e      	add	r7, sp, #56	; 0x38
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 80015f2:	f7ff fdb5 	bl	8001160 <get_ut>
 80015f6:	ee07 0a90 	vmov	s15, r0
 80015fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f7ff fdd5 	bl	80011b4 <get_temp>
 800160a:	eef0 7a40 	vmov.f32	s15, s0
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001618:	f7ff fe2e 	bl	8001278 <get_up>
 800161c:	4602      	mov	r2, r0
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001622:	683e      	ldr	r6, [r7, #0]
 8001624:	466d      	mov	r5, sp
 8001626:	f106 0410 	add.w	r4, r6, #16
 800162a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	602b      	str	r3, [r5, #0]
 800163a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800163e:	f7ff fe5d 	bl	80012fc <get_pressure>
 8001642:	4602      	mov	r2, r0
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001648:	6838      	ldr	r0, [r7, #0]
 800164a:	f7ff ff89 	bl	8001560 <get_slp>
 800164e:	eef0 7a40 	vmov.f32	s15, s0
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001658:	6838      	ldr	r0, [r7, #0]
 800165a:	f7ff ff1d 	bl	8001498 <get_altitude>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166c:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167e:	617b      	str	r3, [r7, #20]
	return result;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	461c      	mov	r4, r3
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800168a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001698 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80016a4:	e083      	b.n	80017ae <initButtons+0x116>
		btns[i]->pin = pins[i];
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	440b      	add	r3, r1
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4944      	ldr	r1, [pc, #272]	; (80017c4 <initButtons+0x12c>)
 80016b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80016b8:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	440b      	add	r3, r1
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4940      	ldr	r1, [pc, #256]	; (80017c8 <initButtons+0x130>)
 80016c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016cc:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	7993      	ldrb	r3, [r2, #6]
 80016da:	f36f 0300 	bfc	r3, #0, #1
 80016de:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	7993      	ldrb	r3, [r2, #6]
 80016ec:	f36f 0341 	bfc	r3, #1, #1
 80016f0:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2200      	movs	r2, #0
 8001752:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2200      	movs	r2, #0
 8001760:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	3301      	adds	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	f67f af78 	bls.w	80016a6 <initButtons+0xe>
	}
}
 80017b6:	bf00      	nop
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	20000020 	.word	0x20000020
 80017c8:	20000008 	.word	0x20000008

080017cc <resetButtonHandlers>:

void resetButtonHandlers(void){
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 80017d6:	e020      	b.n	800181a <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	4a15      	ldr	r2, [pc, #84]	; (8001830 <resetButtonHandlers+0x64>)
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <resetButtonHandlers+0x64>)
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <resetButtonHandlers+0x64>)
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <resetButtonHandlers+0x64>)
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <resetButtonHandlers+0x64>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
		i++;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	3301      	adds	r3, #1
 8001818:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d9db      	bls.n	80017d8 <resetButtonHandlers+0xc>
	}
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2000002c 	.word	0x2000002c

08001834 <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	889b      	ldrh	r3, [r3, #4]
 8001844:	4619      	mov	r1, r3
 8001846:	4610      	mov	r0, r2
 8001848:	f002 fdc0 	bl	80043cc <HAL_GPIO_ReadPin>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf0c      	ite	eq
 8001852:	2301      	moveq	r3, #1
 8001854:	2300      	movne	r3, #0
 8001856:	b2db      	uxtb	r3, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <scanButton>:

void scanButton(Button* btn){
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	799b      	ldrb	r3, [r3, #6]
 800186c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	b2d9      	uxtb	r1, r3
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	7993      	ldrb	r3, [r2, #6]
 8001880:	f361 0300 	bfi	r3, r1, #0, #1
 8001884:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffd4 	bl	8001834 <readButton>
 800188c:	4603      	mov	r3, r0
 800188e:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8001890:	7bbb      	ldrb	r3, [r7, #14]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	b2d9      	uxtb	r1, r3
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	7993      	ldrb	r3, [r2, #6]
 800189c:	f361 0341 	bfi	r3, r1, #1, #1
 80018a0:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 80018a2:	7bba      	ldrb	r2, [r7, #14]
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d150      	bne.n	800194c <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d146      	bne.n	800193e <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7a9b      	ldrb	r3, [r3, #10]
 80018b4:	3301      	adds	r3, #1
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2000      	movs	r0, #0
 80018ca:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7a9b      	ldrb	r3, [r3, #10]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <scanButton+0x15c>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d32d      	bcc.n	8001936 <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7b5b      	ldrb	r3, [r3, #13]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d110      	bne.n	8001904 <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2000      	movs	r0, #0
 80018f0:	4798      	blx	r3
					}
					btn->longSingleOn++;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7a5b      	ldrb	r3, [r3, #9]
 80018f6:	3301      	adds	r3, #1
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7a9b      	ldrb	r3, [r3, #10]
 8001908:	4a2c      	ldr	r2, [pc, #176]	; (80019bc <scanButton+0x15c>)
 800190a:	8852      	ldrh	r2, [r2, #2]
 800190c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001910:	fb01 f202 	mul.w	r2, r1, r2
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10d      	bne.n	8001936 <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	2000      	movs	r0, #0
 8001928:	4798      	blx	r3
					}
					btn->longContinuous++;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7adb      	ldrb	r3, [r3, #11]
 800192e:	3301      	adds	r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 800193c:	e03a      	b.n	80019b4 <scanButton+0x154>
			btn->shortSingleHandled = 0;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	735a      	strb	r2, [r3, #13]
}
 800194a:	e033      	b.n	80019b4 <scanButton+0x154>
		if(currStatus == 1){
 800194c:	7bbb      	ldrb	r3, [r7, #14]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d11b      	bne.n	800198a <scanButton+0x12a>
			btn->shortContinuous = 0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7b1b      	ldrb	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d126      	bne.n	80019b4 <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2000      	movs	r0, #0
 8001974:	4798      	blx	r3
				btn->shortSingleOn++;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	79db      	ldrb	r3, [r3, #7]
 800197a:	3301      	adds	r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	731a      	strb	r2, [r3, #12]
}
 8001988:	e014      	b.n	80019b4 <scanButton+0x154>
			if(btn->releaseHandled == 0){
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7b9b      	ldrb	r3, [r3, #14]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d110      	bne.n	80019b4 <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	2000      	movs	r0, #0
 80019a0:	4798      	blx	r3
				btn->shortSingleOff++;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7a1b      	ldrb	r3, [r3, #8]
 80019a6:	3301      	adds	r3, #1
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	739a      	strb	r2, [r3, #14]
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000044 	.word	0x20000044

080019c0 <scanButtons>:

void scanButtons(Button* btns[6]){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019cc:	e00a      	b.n	80019e4 <scanButtons+0x24>
		scanButton(btns[i]);
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff41 	bl	8001860 <scanButton>
		i++;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	3301      	adds	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d9f1      	bls.n	80019ce <scanButtons+0xe>
	}
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <initTimer>:
 *  Created on: Apr 11, 2022
 *      Author: wojch
 */
#include "customTimer.h"

void initTimer(void){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim11);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <initTimer+0x10>)
 80019fa:	f005 f977 	bl	8006cec <HAL_TIM_Base_Init>
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200034e0 	.word	0x200034e0

08001a08 <setTimeout>:

void setTimeout(int count){
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	htim11.Init.Period = 65000;
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <setTimeout+0x1c>)
 8001a12:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a16:	60da      	str	r2, [r3, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	200034e0 	.word	0x200034e0

08001a28 <startClock>:
void timerFunction(void){
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//	stopMeasure();
}

void startClock(void){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <startClock+0x10>)
 8001a2e:	f005 f9ad 	bl	8006d8c <HAL_TIM_Base_Start_IT>
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200034e0 	.word	0x200034e0

08001a3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	; 0x30
 8001a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	4b60      	ldr	r3, [pc, #384]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a5f      	ldr	r2, [pc, #380]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a58      	ldr	r2, [pc, #352]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a51      	ldr	r2, [pc, #324]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b4f      	ldr	r3, [pc, #316]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a4a      	ldr	r2, [pc, #296]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a43      	ldr	r2, [pc, #268]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a3c      	ldr	r2, [pc, #240]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a35      	ldr	r2, [pc, #212]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2140      	movs	r1, #64	; 0x40
 8001b1a:	4830      	ldr	r0, [pc, #192]	; (8001bdc <MX_GPIO_Init+0x1a0>)
 8001b1c:	f002 fc6e 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b26:	482e      	ldr	r0, [pc, #184]	; (8001be0 <MX_GPIO_Init+0x1a4>)
 8001b28:	f002 fc68 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2140      	movs	r1, #64	; 0x40
 8001b30:	482c      	ldr	r0, [pc, #176]	; (8001be4 <MX_GPIO_Init+0x1a8>)
 8001b32:	f002 fc63 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001b36:	2340      	movs	r3, #64	; 0x40
 8001b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4823      	ldr	r0, [pc, #140]	; (8001bdc <MX_GPIO_Init+0x1a0>)
 8001b4e:	f002 fa91 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b52:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481d      	ldr	r0, [pc, #116]	; (8001be0 <MX_GPIO_Init+0x1a4>)
 8001b6c:	f002 fa82 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8001b70:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b74:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b76:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	4619      	mov	r1, r3
 8001b86:	4818      	ldr	r0, [pc, #96]	; (8001be8 <MX_GPIO_Init+0x1ac>)
 8001b88:	f002 fa74 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b8c:	2340      	movs	r3, #64	; 0x40
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4810      	ldr	r0, [pc, #64]	; (8001be4 <MX_GPIO_Init+0x1a8>)
 8001ba4:	f002 fa66 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480a      	ldr	r0, [pc, #40]	; (8001be4 <MX_GPIO_Init+0x1a8>)
 8001bbc:	f002 fa5a 	bl	8004074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2028      	movs	r0, #40	; 0x28
 8001bc6:	f002 f98c 	bl	8003ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bca:	2028      	movs	r0, #40	; 0x28
 8001bcc:	f002 f9a5 	bl	8003f1a <HAL_NVIC_EnableIRQ>

}
 8001bd0:	bf00      	nop
 8001bd2:	3730      	adds	r7, #48	; 0x30
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40021000 	.word	0x40021000

08001bec <getDataFromUart>:


//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};
char gpsBuffer[600] = {0};

void getDataFromUart(gpsDevice* gps){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive(&huart6, &gps->buffer, 600, 1000);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	1d19      	adds	r1, r3, #4
 8001bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <getDataFromUart+0x24>)
 8001c02:	f006 f94e 	bl	8007ea2 <HAL_UART_Receive>
//	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000356c 	.word	0x2000356c

08001c14 <initGps>:

gpsDevice initGps(UART_HandleTypeDef* uartPort){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c20:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c24:	6018      	str	r0, [r3, #0]
 8001c26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c2a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001c2e:	6019      	str	r1, [r3, #0]
	gpsDevice gpsModule;
	gpsModule.uartPort = uartPort;
 8001c30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c34:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c38:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8001c3c:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, 600);
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	3304      	adds	r3, #4
 8001c4a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f007 fe00 	bl	8009856 <strncpy>
	gpsModule.getData = &getDataFromUart;
 8001c56:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c5a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <initGps+0x84>)
 8001c60:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	return(gpsModule);
 8001c64:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c68:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c72:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 7318 	mov.w	r3, #608	; 0x260
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f007 f906 	bl	8008e90 <memcpy>
}
 8001c84:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c88:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	08001bed 	.word	0x08001bed

08001c9c <mainMenuSetup>:
// default main menu
//void (*moduleSetupPtr)(void) = mainMenuSetup;
//void (*currentModulePtr)(void) = showMainMenu2;
uint8_t* isModuleSet = 0;

void mainMenuSetup(void){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	setMenuClbs();
 8001ca0:	f000 fa4c 	bl	800213c <setMenuClbs>
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <showGraphicalMainMenu>:
	  char guiPos[50] ={0};
	  sprintf(&guiPos, "%02d:%02d:%02d %4.1f*C %02d-%02d-20%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds, bmpData.temperature, RtcDate.Date, RtcDate.Month, RtcDate.Year);
	  lcdPutStr(0, SCR_H-currentFont->font_Height-1, guiPos, currentFont);
}

void showGraphicalMainMenu(void){
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b097      	sub	sp, #92	; 0x5c
 8001cac:	af00      	add	r7, sp, #0
	if(moduleDescPtr != NULL) moduleDescPtr();
 8001cae:	4b53      	ldr	r3, [pc, #332]	; (8001dfc <showGraphicalMainMenu+0x154>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <showGraphicalMainMenu+0x14>
 8001cb6:	4b51      	ldr	r3, [pc, #324]	; (8001dfc <showGraphicalMainMenu+0x154>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4798      	blx	r3
	uint8_t fontWidth = *ocrFont.font_Width;
 8001cbc:	2310      	movs	r3, #16
 8001cbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	char leftStr[10] = {0};
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	809a      	strh	r2, [r3, #4]
	char rightStr[10] = {0};
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8001cd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	809a      	strh	r2, [r3, #4]
	char centStr[10] = {0};
 8001cde:	2300      	movs	r3, #0
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	809a      	strh	r2, [r3, #4]
	sprintf(&centStr, "%s", menuItems[position].name);
 8001cec:	4b44      	ldr	r3, [pc, #272]	; (8001e00 <showGraphicalMainMenu+0x158>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4a42      	ldr	r2, [pc, #264]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001cfc:	441a      	add	r2, r3
 8001cfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d02:	4941      	ldr	r1, [pc, #260]	; (8001e08 <showGraphicalMainMenu+0x160>)
 8001d04:	4618      	mov	r0, r3
 8001d06:	f007 fd43 	bl	8009790 <siprintf>
	if(position > 0){
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <showGraphicalMainMenu+0x158>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d03b      	beq.n	8001d8a <showGraphicalMainMenu+0xe2>
		sprintf(&leftStr, "%s", menuItems[position-1].name);
 8001d12:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <showGraphicalMainMenu+0x158>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	1e5a      	subs	r2, r3, #1
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	4a38      	ldr	r2, [pc, #224]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001d22:	441a      	add	r2, r3
 8001d24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d28:	4937      	ldr	r1, [pc, #220]	; (8001e08 <showGraphicalMainMenu+0x160>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 fd30 	bl	8009790 <siprintf>
		if(menuItems[position-1].icon != NULL) lcdPutIcon(70 - menuItems[position-1].icon->icon_Width/2, 90, menuItems[position-1].icon);
 8001d30:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <showGraphicalMainMenu+0x158>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	1e5a      	subs	r2, r3, #1
 8001d36:	4933      	ldr	r1, [pc, #204]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	440b      	add	r3, r1
 8001d42:	332c      	adds	r3, #44	; 0x2c
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d03a      	beq.n	8001dc0 <showGraphicalMainMenu+0x118>
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <showGraphicalMainMenu+0x158>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	1e5a      	subs	r2, r3, #1
 8001d50:	492c      	ldr	r1, [pc, #176]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	440b      	add	r3, r1
 8001d5c:	332c      	adds	r3, #44	; 0x2c
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f1c3 0046 	rsb	r0, r3, #70	; 0x46
 8001d6a:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <showGraphicalMainMenu+0x158>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	1e5a      	subs	r2, r3, #1
 8001d70:	4924      	ldr	r1, [pc, #144]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	440b      	add	r3, r1
 8001d7c:	332c      	adds	r3, #44	; 0x2c
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	215a      	movs	r1, #90	; 0x5a
 8001d84:	f000 fbe4 	bl	8002550 <lcdPutIcon>
 8001d88:	e01a      	b.n	8001dc0 <showGraphicalMainMenu+0x118>
	} else {
		sprintf(&leftStr, "%s", menuItems[MENU_ITEM_NUM-1].name);
 8001d8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <showGraphicalMainMenu+0x164>)
 8001d90:	491d      	ldr	r1, [pc, #116]	; (8001e08 <showGraphicalMainMenu+0x160>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f007 fcfc 	bl	8009790 <siprintf>
		if(menuItems[MENU_ITEM_NUM-1].icon != NULL) lcdPutIcon(70 - menuItems[MENU_ITEM_NUM-1].icon->icon_Width/2, 90, menuItems[MENU_ITEM_NUM-1].icon);
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001d9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00e      	beq.n	8001dc0 <showGraphicalMainMenu+0x118>
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001da4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f1c3 0346 	rsb	r3, r3, #70	; 0x46
 8001db2:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001db4:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8001db8:	215a      	movs	r1, #90	; 0x5a
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 fbc8 	bl	8002550 <lcdPutIcon>
	}
	if(position >= MENU_ITEM_NUM - 1){
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <showGraphicalMainMenu+0x158>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d923      	bls.n	8001e10 <showGraphicalMainMenu+0x168>
		sprintf(&rightStr, "%s", menuItems[0].name);
 8001dc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001dce:	490e      	ldr	r1, [pc, #56]	; (8001e08 <showGraphicalMainMenu+0x160>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f007 fcdd 	bl	8009790 <siprintf>
		if(menuItems[0].icon != NULL) lcdPutIcon(330 - menuItems[0].icon->icon_Width/2, 90, menuItems[0].icon);
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d053      	beq.n	8001e86 <showGraphicalMainMenu+0x1de>
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	085b      	lsrs	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f5c3 73a5 	rsb	r3, r3, #330	; 0x14a
 8001dec:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <showGraphicalMainMenu+0x15c>)
 8001dee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001df0:	215a      	movs	r1, #90	; 0x5a
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fbac 	bl	8002550 <lcdPutIcon>
 8001df8:	e045      	b.n	8001e86 <showGraphicalMainMenu+0x1de>
 8001dfa:	bf00      	nop
 8001dfc:	20000140 	.word	0x20000140
 8001e00:	2000013c 	.word	0x2000013c
 8001e04:	2000004c 	.word	0x2000004c
 8001e08:	0800cb1c 	.word	0x0800cb1c
 8001e0c:	2000010c 	.word	0x2000010c
	} else {
		sprintf(&rightStr, "%s", menuItems[position+1].name);
 8001e10:	4b8a      	ldr	r3, [pc, #552]	; (800203c <showGraphicalMainMenu+0x394>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	4a88      	ldr	r2, [pc, #544]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001e20:	441a      	add	r2, r3
 8001e22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e26:	4987      	ldr	r1, [pc, #540]	; (8002044 <showGraphicalMainMenu+0x39c>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f007 fcb1 	bl	8009790 <siprintf>
		if(menuItems[position+1].icon != NULL) lcdPutIcon(330 - menuItems[position+1].icon->icon_Width/2, 90, menuItems[position+1].icon);
 8001e2e:	4b83      	ldr	r3, [pc, #524]	; (800203c <showGraphicalMainMenu+0x394>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	4982      	ldr	r1, [pc, #520]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	440b      	add	r3, r1
 8001e40:	332c      	adds	r3, #44	; 0x2c
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01e      	beq.n	8001e86 <showGraphicalMainMenu+0x1de>
 8001e48:	4b7c      	ldr	r3, [pc, #496]	; (800203c <showGraphicalMainMenu+0x394>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	497c      	ldr	r1, [pc, #496]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	440b      	add	r3, r1
 8001e5a:	332c      	adds	r3, #44	; 0x2c
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f5c3 70a5 	rsb	r0, r3, #330	; 0x14a
 8001e68:	4b74      	ldr	r3, [pc, #464]	; (800203c <showGraphicalMainMenu+0x394>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	4974      	ldr	r1, [pc, #464]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	440b      	add	r3, r1
 8001e7a:	332c      	adds	r3, #44	; 0x2c
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	215a      	movs	r1, #90	; 0x5a
 8001e82:	f000 fb65 	bl	8002550 <lcdPutIcon>
	}
	sprintf(&centStr, "%s", menuItems[position].name);
 8001e86:	4b6d      	ldr	r3, [pc, #436]	; (800203c <showGraphicalMainMenu+0x394>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	4a6a      	ldr	r2, [pc, #424]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001e96:	441a      	add	r2, r3
 8001e98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e9c:	4969      	ldr	r1, [pc, #420]	; (8002044 <showGraphicalMainMenu+0x39c>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f007 fc76 	bl	8009790 <siprintf>
	moduleDescPtr = menuItems[position].description;
 8001ea4:	4b65      	ldr	r3, [pc, #404]	; (800203c <showGraphicalMainMenu+0x394>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4a65      	ldr	r2, [pc, #404]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001eac:	460b      	mov	r3, r1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	440b      	add	r3, r1
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3320      	adds	r3, #32
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a63      	ldr	r2, [pc, #396]	; (8002048 <showGraphicalMainMenu+0x3a0>)
 8001ebc:	6013      	str	r3, [r2, #0]
	moduleSetupPtr = menuItems[position].setup;
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <showGraphicalMainMenu+0x394>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4a5e      	ldr	r2, [pc, #376]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	440b      	add	r3, r1
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	3324      	adds	r3, #36	; 0x24
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a5d      	ldr	r2, [pc, #372]	; (800204c <showGraphicalMainMenu+0x3a4>)
 8001ed6:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8001ed8:	4b58      	ldr	r3, [pc, #352]	; (800203c <showGraphicalMainMenu+0x394>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	4a58      	ldr	r2, [pc, #352]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	440b      	add	r3, r1
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	4413      	add	r3, r2
 8001eea:	3328      	adds	r3, #40	; 0x28
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a58      	ldr	r2, [pc, #352]	; (8002050 <showGraphicalMainMenu+0x3a8>)
 8001ef0:	6013      	str	r3, [r2, #0]
	lcdPutStr(200 - (fontWidth * strlen(menuItems[position].name)/2), 180, centStr, ocrFont);
 8001ef2:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8001ef6:	4b51      	ldr	r3, [pc, #324]	; (800203c <showGraphicalMainMenu+0x394>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001f06:	4413      	add	r3, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe f971 	bl	80001f0 <strlen>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	fb04 f303 	mul.w	r3, r4, r3
 8001f14:	085b      	lsrs	r3, r3, #1
 8001f16:	f1c3 00c8 	rsb	r0, r3, #200	; 0xc8
 8001f1a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <showGraphicalMainMenu+0x3ac>)
 8001f20:	21b4      	movs	r1, #180	; 0xb4
 8001f22:	f000 fbdd 	bl	80026e0 <lcdPutStr>
	if(menuItems[position].icon != NULL) lcdPutIcon(200 - menuItems[position].icon->icon_Width/2, 65, menuItems[position].icon);
 8001f26:	4b45      	ldr	r3, [pc, #276]	; (800203c <showGraphicalMainMenu+0x394>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4a44      	ldr	r2, [pc, #272]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001f2e:	460b      	mov	r3, r1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	440b      	add	r3, r1
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	332c      	adds	r3, #44	; 0x2c
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01e      	beq.n	8001f7e <showGraphicalMainMenu+0x2d6>
 8001f40:	4b3e      	ldr	r3, [pc, #248]	; (800203c <showGraphicalMainMenu+0x394>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	4a3e      	ldr	r2, [pc, #248]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001f48:	460b      	mov	r3, r1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	440b      	add	r3, r1
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	4413      	add	r3, r2
 8001f52:	332c      	adds	r3, #44	; 0x2c
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	085b      	lsrs	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f1c3 00c8 	rsb	r0, r3, #200	; 0xc8
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <showGraphicalMainMenu+0x394>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	4a36      	ldr	r2, [pc, #216]	; (8002040 <showGraphicalMainMenu+0x398>)
 8001f68:	460b      	mov	r3, r1
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	440b      	add	r3, r1
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4413      	add	r3, r2
 8001f72:	332c      	adds	r3, #44	; 0x2c
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	2141      	movs	r1, #65	; 0x41
 8001f7a:	f000 fae9 	bl	8002550 <lcdPutIcon>
	lcdPutStr(70 - (fontWidth * strlen(leftStr)/2), 190, leftStr, ocrFont);
 8001f7e:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8001f82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe f932 	bl	80001f0 <strlen>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	fb04 f303 	mul.w	r3, r4, r3
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	f1c3 0046 	rsb	r0, r3, #70	; 0x46
 8001f98:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <showGraphicalMainMenu+0x3ac>)
 8001f9e:	21be      	movs	r1, #190	; 0xbe
 8001fa0:	f000 fb9e 	bl	80026e0 <lcdPutStr>
	lcdPutStr(330 - (fontWidth * strlen(rightStr)/2), 190, rightStr, ocrFont);
 8001fa4:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8001fa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe f91f 	bl	80001f0 <strlen>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	fb04 f303 	mul.w	r3, r4, r3
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	f5c3 70a5 	rsb	r0, r3, #330	; 0x14a
 8001fbe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <showGraphicalMainMenu+0x3ac>)
 8001fc4:	21be      	movs	r1, #190	; 0xbe
 8001fc6:	f000 fb8b 	bl	80026e0 <lcdPutStr>

		// debug stuff
		if(1){
			sprintf(&centStr, "%d", position);
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <showGraphicalMainMenu+0x394>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fd4:	4920      	ldr	r1, [pc, #128]	; (8002058 <showGraphicalMainMenu+0x3b0>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f007 fbda 	bl	8009790 <siprintf>
			lcdPutStr(380, 0, centStr, currentFont);
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <showGraphicalMainMenu+0x3b4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8001fea:	f000 fb79 	bl	80026e0 <lcdPutStr>
		}
//		  char guiPos[50] ={0};
//		  sprintf(&guiPos, "%02d:%02d:%02d %4.1f*C %02d-%02d-20%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds, bmpData.temperature, RtcDate.Date, RtcDate.Month, RtcDate.Year);
//		  lcdPutStr(0, SCR_H-currentFont->font_Height-1, guiPos, currentFont);
		  char guiPos[50] = {0};
 8001fee:	2300      	movs	r3, #0
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	222e      	movs	r2, #46	; 0x2e
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f006 ff57 	bl	8008eac <memset>
		  sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <showGraphicalMainMenu+0x3b8>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	4b16      	ldr	r3, [pc, #88]	; (8002060 <showGraphicalMainMenu+0x3b8>)
 8002006:	785b      	ldrb	r3, [r3, #1]
 8002008:	4638      	mov	r0, r7
 800200a:	4916      	ldr	r1, [pc, #88]	; (8002064 <showGraphicalMainMenu+0x3bc>)
 800200c:	f007 fbc0 	bl	8009790 <siprintf>
//		  lcdPutStr(200 - fontWidth * strlen(guiPos[0])/2, SCR_H-ocrFont->font_Height-1, guiPos, ocrFont);
		  lcdPutStr(200 - fontWidth * strlen(guiPos)/2, 1, guiPos, ocrFont);
 8002010:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8002014:	463b      	mov	r3, r7
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe f8ea 	bl	80001f0 <strlen>
 800201c:	4603      	mov	r3, r0
 800201e:	fb04 f303 	mul.w	r3, r4, r3
 8002022:	085b      	lsrs	r3, r3, #1
 8002024:	f1c3 00c8 	rsb	r0, r3, #200	; 0xc8
 8002028:	463a      	mov	r2, r7
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <showGraphicalMainMenu+0x3ac>)
 800202c:	2101      	movs	r1, #1
 800202e:	f000 fb57 	bl	80026e0 <lcdPutStr>
}
 8002032:	bf00      	nop
 8002034:	375c      	adds	r7, #92	; 0x5c
 8002036:	46bd      	mov	sp, r7
 8002038:	bd90      	pop	{r4, r7, pc}
 800203a:	bf00      	nop
 800203c:	2000013c 	.word	0x2000013c
 8002040:	2000004c 	.word	0x2000004c
 8002044:	0800cb1c 	.word	0x0800cb1c
 8002048:	20000140 	.word	0x20000140
 800204c:	20000148 	.word	0x20000148
 8002050:	20000144 	.word	0x20000144
 8002054:	0800eeb8 	.word	0x0800eeb8
 8002058:	0800caf0 	.word	0x0800caf0
 800205c:	20000048 	.word	0x20000048
 8002060:	200033bc 	.word	0x200033bc
 8002064:	0800cb20 	.word	0x0800cb20

08002068 <prevPos>:

void prevPos(void){
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
	if(position>0){
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <prevPos+0x2c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <prevPos+0x1a>
		position--;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <prevPos+0x2c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	3b01      	subs	r3, #1
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <prevPos+0x2c>)
 800207e:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8002080:	e002      	b.n	8002088 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <prevPos+0x2c>)
 8002084:	2204      	movs	r2, #4
 8002086:	701a      	strb	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	2000013c 	.word	0x2000013c

08002098 <nextPos>:
void nextPos(void){
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <nextPos+0x2c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d806      	bhi.n	80020b2 <nextPos+0x1a>
		position++;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <nextPos+0x2c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <nextPos+0x2c>)
 80020ae:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 80020b0:	e002      	b.n	80020b8 <nextPos+0x20>
		position=0;
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <nextPos+0x2c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	2000013c 	.word	0x2000013c

080020c8 <resetPos>:
void resetPos(void){
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
		position=0;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <resetPos+0x14>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	2000013c 	.word	0x2000013c

080020e0 <select>:

void select(void){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 80020e4:	f7ff fb72 	bl	80017cc <resetButtonHandlers>
	isModuleSet = 0;
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <select+0x1c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <select+0x20>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a04      	ldr	r2, [pc, #16]	; (8002104 <select+0x24>)
 80020f4:	6013      	str	r3, [r2, #0]
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000480 	.word	0x20000480
 8002100:	20000144 	.word	0x20000144
 8002104:	2000014c 	.word	0x2000014c

08002108 <returnToMenu>:

void returnToMenu(void){
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	resetButtonHandlers();
 800210c:	f7ff fb5e 	bl	80017cc <resetButtonHandlers>
	isModuleSet = 0;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <returnToMenu+0x20>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
	moduleSetupPtr = mainMenuSetup;
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <returnToMenu+0x24>)
 8002118:	4a05      	ldr	r2, [pc, #20]	; (8002130 <returnToMenu+0x28>)
 800211a:	601a      	str	r2, [r3, #0]
	currentModulePtr = &showGraphicalMainMenu;
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <returnToMenu+0x2c>)
 800211e:	4a06      	ldr	r2, [pc, #24]	; (8002138 <returnToMenu+0x30>)
 8002120:	601a      	str	r2, [r3, #0]
//	currentModulePtr = &showMainMenu;
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000480 	.word	0x20000480
 800212c:	20000148 	.word	0x20000148
 8002130:	08001c9d 	.word	0x08001c9d
 8002134:	2000014c 	.word	0x2000014c
 8002138:	08001ca9 	.word	0x08001ca9

0800213c <setMenuClbs>:
		fontIndex = 0;
	}
		currentFont = fontArray[fontIndex];
}

void setMenuClbs(void){
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
	btn_BA.onSinglePressHandler = &nextPos;
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <setMenuClbs+0x34>)
 8002142:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <setMenuClbs+0x38>)
 8002144:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextPos;
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <setMenuClbs+0x34>)
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <setMenuClbs+0x38>)
 800214a:	61da      	str	r2, [r3, #28]

	btn_BB.onSinglePressHandler = &select;
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <setMenuClbs+0x3c>)
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <setMenuClbs+0x40>)
 8002150:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetPos;
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <setMenuClbs+0x44>)
 8002154:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <setMenuClbs+0x48>)
 8002156:	611a      	str	r2, [r3, #16]

	btn_B1.onContinuousLongPressHandler = &prevPos;
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <setMenuClbs+0x4c>)
 800215a:	4a0c      	ldr	r2, [pc, #48]	; (800218c <setMenuClbs+0x50>)
 800215c:	61da      	str	r2, [r3, #28]
	btn_B1.onSinglePressHandler = &prevPos;
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <setMenuClbs+0x4c>)
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <setMenuClbs+0x50>)
 8002162:	611a      	str	r2, [r3, #16]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	200003a8 	.word	0x200003a8
 8002174:	08002099 	.word	0x08002099
 8002178:	200003cc 	.word	0x200003cc
 800217c:	080020e1 	.word	0x080020e1
 8002180:	20000438 	.word	0x20000438
 8002184:	080020c9 	.word	0x080020c9
 8002188:	20000414 	.word	0x20000414
 800218c:	08002069 	.word	0x08002069

08002190 <showMenu>:

void showMenu(void){
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <showMenu+0x30>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <showMenu+0x18>
		moduleSetupPtr();
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <showMenu+0x34>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4798      	blx	r3
		isModuleSet = 1;
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <showMenu+0x30>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <showMenu+0x38>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <showMenu+0x26>
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <showMenu+0x38>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4798      	blx	r3
	lcdRefresh();
 80021b6:	f000 fac1 	bl	800273c <lcdRefresh>
//	while(1){
//	}
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000480 	.word	0x20000480
 80021c4:	20000148 	.word	0x20000148
 80021c8:	2000014c 	.word	0x2000014c

080021cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <MX_I2C1_Init+0x74>)
 80021d2:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <MX_I2C1_Init+0x78>)
 80021d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <MX_I2C1_Init+0x74>)
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <MX_I2C1_Init+0x7c>)
 80021da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <MX_I2C1_Init+0x74>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <MX_I2C1_Init+0x74>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <MX_I2C1_Init+0x74>)
 80021ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MX_I2C1_Init+0x74>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <MX_I2C1_Init+0x74>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021fc:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_I2C1_Init+0x74>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MX_I2C1_Init+0x74>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002208:	480d      	ldr	r0, [pc, #52]	; (8002240 <MX_I2C1_Init+0x74>)
 800220a:	f002 f94f 	bl	80044ac <HAL_I2C_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002214:	f000 fc18 	bl	8002a48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002218:	2100      	movs	r1, #0
 800221a:	4809      	ldr	r0, [pc, #36]	; (8002240 <MX_I2C1_Init+0x74>)
 800221c:	f003 f905 	bl	800542a <HAL_I2CEx_ConfigAnalogFilter>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002226:	f000 fc0f 	bl	8002a48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800222a:	2100      	movs	r1, #0
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <MX_I2C1_Init+0x74>)
 800222e:	f003 f938 	bl	80054a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002238:	f000 fc06 	bl	8002a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000484 	.word	0x20000484
 8002244:	40005400 	.word	0x40005400
 8002248:	000186a0 	.word	0x000186a0

0800224c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <HAL_I2C_MspInit+0x84>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d12c      	bne.n	80022c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800228a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800228e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002290:	2312      	movs	r3, #18
 8002292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800229c:	2304      	movs	r3, #4
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	480c      	ldr	r0, [pc, #48]	; (80022d8 <HAL_I2C_MspInit+0x8c>)
 80022a8:	f001 fee4 	bl	8004074 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 80022b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ba:	6413      	str	r3, [r2, #64]	; 0x40
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022c8:	bf00      	nop
 80022ca:	3728      	adds	r7, #40	; 0x28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40005400 	.word	0x40005400
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020400 	.word	0x40020400

080022dc <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 80022e6:	2307      	movs	r3, #7
 80022e8:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 80022f6:	e010      	b.n	800231a <reverse_uint8+0x3e>
		result = result << 1;
 80022f8:	7bbb      	ldrb	r3, [r7, #14]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 800230c:	7bba      	ldrb	r2, [r7, #14]
 800230e:	7b7b      	ldrb	r3, [r7, #13]
 8002310:	4313      	orrs	r3, r2
 8002312:	73bb      	strb	r3, [r7, #14]
		times--;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	3b01      	subs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1eb      	bne.n	80022f8 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002320:	7bbb      	ldrb	r3, [r7, #14]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002336:	2000      	movs	r0, #0
 8002338:	f000 f824 	bl	8002384 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 800233c:	2300      	movs	r3, #0
 800233e:	71fb      	strb	r3, [r7, #7]
 8002340:	e014      	b.n	800236c <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002342:	2300      	movs	r3, #0
 8002344:	80bb      	strh	r3, [r7, #4]
 8002346:	e00b      	b.n	8002360 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	2232      	movs	r2, #50	; 0x32
 800234c:	fb03 f202 	mul.w	r2, r3, r2
 8002350:	88bb      	ldrh	r3, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <lcdClearBuffer+0x50>)
 8002356:	21ff      	movs	r1, #255	; 0xff
 8002358:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 800235a:	88bb      	ldrh	r3, [r7, #4]
 800235c:	3301      	adds	r3, #1
 800235e:	80bb      	strh	r3, [r7, #4]
 8002360:	88bb      	ldrh	r3, [r7, #4]
 8002362:	2b31      	cmp	r3, #49	; 0x31
 8002364:	d9f0      	bls.n	8002348 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	3301      	adds	r3, #1
 800236a:	71fb      	strb	r3, [r7, #7]
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	2bef      	cmp	r3, #239	; 0xef
 8002370:	d9e7      	bls.n	8002342 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002372:	2001      	movs	r0, #1
 8002374:	f000 f806 	bl	8002384 <updateSetting>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200004dc 	.word	0x200004dc

08002384 <updateSetting>:

void updateSetting(uint8_t state){
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <updateSetting+0x1c>)
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	7013      	strb	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	20000150 	.word	0x20000150

080023a4 <lcdPutChar>:
//		lcdBuffer[bufferLoc + 2] &= ~((dataBlock2 << (8 - offset)) | (dataBlock3 >> offset));
//		lcdBuffer[bufferLoc + 3] &= ~(dataBlock3 << (8 - offset));
//	}
//
//}
void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	4603      	mov	r3, r0
 80023ae:	80fb      	strh	r3, [r7, #6]
 80023b0:	460b      	mov	r3, r1
 80023b2:	717b      	strb	r3, [r7, #5]
 80023b4:	4613      	mov	r3, r2
 80023b6:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	795b      	ldrb	r3, [r3, #5]
 80023bc:	793a      	ldrb	r2, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d304      	bcc.n	80023cc <lcdPutChar+0x28>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	799b      	ldrb	r3, [r3, #6]
 80023c6:	793a      	ldrb	r2, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d902      	bls.n	80023d2 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	79db      	ldrb	r3, [r3, #7]
 80023d0:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	08db      	lsrs	r3, r3, #3
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	885b      	ldrh	r3, [r3, #2]
 80023e8:	461a      	mov	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80023f2:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]
 80023f8:	e09b      	b.n	8002532 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 80023fa:	797a      	ldrb	r2, [r7, #5]
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	4413      	add	r3, r2
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	0092      	lsls	r2, r2, #2
 8002406:	4413      	add	r3, r2
 8002408:	461a      	mov	r2, r3
 800240a:	0091      	lsls	r1, r2, #2
 800240c:	461a      	mov	r2, r3
 800240e:	460b      	mov	r3, r1
 8002410:	4413      	add	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	b29b      	uxth	r3, r3
 800241a:	4413      	add	r3, r2
 800241c:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 800241e:	793b      	ldrb	r3, [r7, #4]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	7952      	ldrb	r2, [r2, #5]
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	8852      	ldrh	r2, [r2, #2]
 800242a:	fb03 f202 	mul.w	r2, r3, r2
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	7cb9      	ldrb	r1, [r7, #18]
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	3308      	adds	r3, #8
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	7d3b      	ldrb	r3, [r7, #20]
 8002448:	fa42 f303 	asr.w	r3, r2, r3
 800244c:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 800244e:	8a3b      	ldrh	r3, [r7, #16]
 8002450:	4a3e      	ldr	r2, [pc, #248]	; (800254c <lcdPutChar+0x1a8>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	b25a      	sxtb	r2, r3
 8002456:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800245a:	43db      	mvns	r3, r3
 800245c:	b25b      	sxtb	r3, r3
 800245e:	4013      	ands	r3, r2
 8002460:	b25a      	sxtb	r2, r3
 8002462:	8a3b      	ldrh	r3, [r7, #16]
 8002464:	b2d1      	uxtb	r1, r2
 8002466:	4a39      	ldr	r2, [pc, #228]	; (800254c <lcdPutChar+0x1a8>)
 8002468:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	3308      	adds	r3, #8
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b25a      	sxtb	r2, r3
 8002476:	7d3b      	ldrb	r3, [r7, #20]
 8002478:	f1c3 0308 	rsb	r3, r3, #8
 800247c:	21ff      	movs	r1, #255	; 0xff
 800247e:	fa41 f303 	asr.w	r3, r1, r3
 8002482:	b25b      	sxtb	r3, r3
 8002484:	4013      	ands	r3, r2
 8002486:	b25b      	sxtb	r3, r3
 8002488:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 800248a:	2301      	movs	r3, #1
 800248c:	757b      	strb	r3, [r7, #21]
 800248e:	e029      	b.n	80024e4 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8002490:	7d7a      	ldrb	r2, [r7, #21]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4413      	add	r3, r2
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	4413      	add	r3, r2
 800249a:	7a1b      	ldrb	r3, [r3, #8]
 800249c:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 800249e:	8a3a      	ldrh	r2, [r7, #16]
 80024a0:	7d7b      	ldrb	r3, [r7, #21]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a29      	ldr	r2, [pc, #164]	; (800254c <lcdPutChar+0x1a8>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	b25a      	sxtb	r2, r3
 80024aa:	7db9      	ldrb	r1, [r7, #22]
 80024ac:	7d3b      	ldrb	r3, [r7, #20]
 80024ae:	f1c3 0308 	rsb	r3, r3, #8
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	b259      	sxtb	r1, r3
 80024b8:	7af8      	ldrb	r0, [r7, #11]
 80024ba:	7d3b      	ldrb	r3, [r7, #20]
 80024bc:	fa40 f303 	asr.w	r3, r0, r3
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	430b      	orrs	r3, r1
 80024c4:	b25b      	sxtb	r3, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	b25b      	sxtb	r3, r3
 80024ca:	4013      	ands	r3, r2
 80024cc:	b259      	sxtb	r1, r3
 80024ce:	8a3a      	ldrh	r2, [r7, #16]
 80024d0:	7d7b      	ldrb	r3, [r7, #21]
 80024d2:	4413      	add	r3, r2
 80024d4:	b2c9      	uxtb	r1, r1
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <lcdPutChar+0x1a8>)
 80024d8:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80024de:	7d7b      	ldrb	r3, [r7, #21]
 80024e0:	3301      	adds	r3, #1
 80024e2:	757b      	strb	r3, [r7, #21]
 80024e4:	7d7a      	ldrb	r2, [r7, #21]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	3307      	adds	r3, #7
 80024ec:	10db      	asrs	r3, r3, #3
 80024ee:	429a      	cmp	r2, r3
 80024f0:	dbce      	blt.n	8002490 <lcdPutChar+0xec>
		}

		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 80024f2:	8a3a      	ldrh	r2, [r7, #16]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	3307      	adds	r3, #7
 80024fa:	10db      	asrs	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	4a13      	ldr	r2, [pc, #76]	; (800254c <lcdPutChar+0x1a8>)
 8002500:	5cd3      	ldrb	r3, [r2, r3]
 8002502:	b25a      	sxtb	r2, r3
 8002504:	7db9      	ldrb	r1, [r7, #22]
 8002506:	7d3b      	ldrb	r3, [r7, #20]
 8002508:	f1c3 0308 	rsb	r3, r3, #8
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	b25b      	sxtb	r3, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	b25b      	sxtb	r3, r3
 8002516:	4013      	ands	r3, r2
 8002518:	b259      	sxtb	r1, r3
 800251a:	8a3a      	ldrh	r2, [r7, #16]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	3307      	adds	r3, #7
 8002522:	10db      	asrs	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	b2c9      	uxtb	r1, r1
 8002528:	4a08      	ldr	r2, [pc, #32]	; (800254c <lcdPutChar+0x1a8>)
 800252a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	3301      	adds	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	7dfa      	ldrb	r2, [r7, #23]
 8002538:	429a      	cmp	r2, r3
 800253a:	f4ff af5e 	bcc.w	80023fa <lcdPutChar+0x56>
//			lcdBuffer[bufferLoc + ((font->font_Width)>>3)] &= ~(dataBlock << (8-offset));
//		}
//		lcdRefresh();
	}

}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	200004dc 	.word	0x200004dc

08002550 <lcdPutIcon>:
void lcdPutIcon(uint16_t x, uint8_t y, const Icon_TypeDef *icon){
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	; 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	603a      	str	r2, [r7, #0]
 800255a:	80fb      	strh	r3, [r7, #6]
 800255c:	460b      	mov	r3, r1
 800255e:	717b      	strb	r3, [r7, #5]
	uint8_t icon_Width = icon->icon_Width;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	773b      	strb	r3, [r7, #28]
	uint8_t icon_Height = icon->icon_Height;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	76fb      	strb	r3, [r7, #27]
	uint8_t* icon_Data = &icon->icon_Data;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	3305      	adds	r3, #5
 8002570:	617b      	str	r3, [r7, #20]
	uint8_t offset = x % 8;
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	74fb      	strb	r3, [r7, #19]
	uint8_t xBlock = x >> 3;
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	08db      	lsrs	r3, r3, #3
 8002580:	b29b      	uxth	r3, r3
 8002582:	74bb      	strb	r3, [r7, #18]
	uint8_t bytesInLine = (icon->icon_BPC/icon_Height);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	885b      	ldrh	r3, [r3, #2]
 8002588:	461a      	mov	r2, r3
 800258a:	7efb      	ldrb	r3, [r7, #27]
 800258c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002590:	747b      	strb	r3, [r7, #17]
	for(uint8_t j = 0; j < (icon_Height); j++){
 8002592:	2300      	movs	r3, #0
 8002594:	77fb      	strb	r3, [r7, #31]
 8002596:	e094      	b.n	80026c2 <lcdPutIcon+0x172>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002598:	797a      	ldrb	r2, [r7, #5]
 800259a:	7ffb      	ldrb	r3, [r7, #31]
 800259c:	4413      	add	r3, r2
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	461a      	mov	r2, r3
 80025a8:	0091      	lsls	r1, r2, #2
 80025aa:	461a      	mov	r2, r3
 80025ac:	460b      	mov	r3, r1
 80025ae:	4413      	add	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	7cbb      	ldrb	r3, [r7, #18]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	81fb      	strh	r3, [r7, #14]
		uint8_t dataBlock = icon_Data[j*bytesInLine] >> offset;
 80025bc:	7ffb      	ldrb	r3, [r7, #31]
 80025be:	7c7a      	ldrb	r2, [r7, #17]
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	4413      	add	r3, r2
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	fa42 f303 	asr.w	r3, r2, r3
 80025d4:	77bb      	strb	r3, [r7, #30]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 80025d6:	89fb      	ldrh	r3, [r7, #14]
 80025d8:	4a40      	ldr	r2, [pc, #256]	; (80026dc <lcdPutIcon+0x18c>)
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	b25a      	sxtb	r2, r3
 80025de:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	4013      	ands	r3, r2
 80025e8:	b25a      	sxtb	r2, r3
 80025ea:	89fb      	ldrh	r3, [r7, #14]
 80025ec:	b2d1      	uxtb	r1, r2
 80025ee:	4a3b      	ldr	r2, [pc, #236]	; (80026dc <lcdPutIcon+0x18c>)
 80025f0:	54d1      	strb	r1, [r2, r3]
		dataBlock = (icon_Data[j*bytesInLine] & (0xFF >> (8 - offset)));
 80025f2:	7ffb      	ldrb	r3, [r7, #31]
 80025f4:	7c7a      	ldrb	r2, [r7, #17]
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4413      	add	r3, r2
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b25a      	sxtb	r2, r3
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	f1c3 0308 	rsb	r3, r3, #8
 800260a:	21ff      	movs	r1, #255	; 0xff
 800260c:	fa41 f303 	asr.w	r3, r1, r3
 8002610:	b25b      	sxtb	r3, r3
 8002612:	4013      	ands	r3, r2
 8002614:	b25b      	sxtb	r3, r3
 8002616:	77bb      	strb	r3, [r7, #30]
			for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 8002618:	2301      	movs	r3, #1
 800261a:	777b      	strb	r3, [r7, #29]
 800261c:	e02d      	b.n	800267a <lcdPutIcon+0x12a>
				uint8_t newDataBlock = icon_Data[j*bytesInLine + i];
 800261e:	7ffb      	ldrb	r3, [r7, #31]
 8002620:	7c7a      	ldrb	r2, [r7, #17]
 8002622:	fb03 f202 	mul.w	r2, r3, r2
 8002626:	7f7b      	ldrb	r3, [r7, #29]
 8002628:	4413      	add	r3, r2
 800262a:	461a      	mov	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4413      	add	r3, r2
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	737b      	strb	r3, [r7, #13]
				lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002634:	89fa      	ldrh	r2, [r7, #14]
 8002636:	7f7b      	ldrb	r3, [r7, #29]
 8002638:	4413      	add	r3, r2
 800263a:	4a28      	ldr	r2, [pc, #160]	; (80026dc <lcdPutIcon+0x18c>)
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	b25a      	sxtb	r2, r3
 8002640:	7fb9      	ldrb	r1, [r7, #30]
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	f1c3 0308 	rsb	r3, r3, #8
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	b259      	sxtb	r1, r3
 800264e:	7b78      	ldrb	r0, [r7, #13]
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	fa40 f303 	asr.w	r3, r0, r3
 8002656:	b25b      	sxtb	r3, r3
 8002658:	430b      	orrs	r3, r1
 800265a:	b25b      	sxtb	r3, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	b25b      	sxtb	r3, r3
 8002660:	4013      	ands	r3, r2
 8002662:	b259      	sxtb	r1, r3
 8002664:	89fa      	ldrh	r2, [r7, #14]
 8002666:	7f7b      	ldrb	r3, [r7, #29]
 8002668:	4413      	add	r3, r2
 800266a:	b2c9      	uxtb	r1, r1
 800266c:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <lcdPutIcon+0x18c>)
 800266e:	54d1      	strb	r1, [r2, r3]
				dataBlock = newDataBlock;
 8002670:	7b7b      	ldrb	r3, [r7, #13]
 8002672:	77bb      	strb	r3, [r7, #30]
			for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 8002674:	7f7b      	ldrb	r3, [r7, #29]
 8002676:	3301      	adds	r3, #1
 8002678:	777b      	strb	r3, [r7, #29]
 800267a:	7f3b      	ldrb	r3, [r7, #28]
 800267c:	08db      	lsrs	r3, r3, #3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	7f7a      	ldrb	r2, [r7, #29]
 8002682:	429a      	cmp	r2, r3
 8002684:	d9cb      	bls.n	800261e <lcdPutIcon+0xce>
			}
//		if(offset != 0){
//			lcdBuffer[bufferLoc + ((icon_Width)>>3)] &= ~(dataBlock << (8-offset));
//		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002686:	89fa      	ldrh	r2, [r7, #14]
 8002688:	7f3b      	ldrb	r3, [r7, #28]
 800268a:	3307      	adds	r3, #7
 800268c:	10db      	asrs	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	4a12      	ldr	r2, [pc, #72]	; (80026dc <lcdPutIcon+0x18c>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	b25a      	sxtb	r2, r3
 8002696:	7fb9      	ldrb	r1, [r7, #30]
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	f1c3 0308 	rsb	r3, r3, #8
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	b25b      	sxtb	r3, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	4013      	ands	r3, r2
 80026aa:	b259      	sxtb	r1, r3
 80026ac:	89fa      	ldrh	r2, [r7, #14]
 80026ae:	7f3b      	ldrb	r3, [r7, #28]
 80026b0:	3307      	adds	r3, #7
 80026b2:	10db      	asrs	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	b2c9      	uxtb	r1, r1
 80026b8:	4a08      	ldr	r2, [pc, #32]	; (80026dc <lcdPutIcon+0x18c>)
 80026ba:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (icon_Height); j++){
 80026bc:	7ffb      	ldrb	r3, [r7, #31]
 80026be:	3301      	adds	r3, #1
 80026c0:	77fb      	strb	r3, [r7, #31]
 80026c2:	7ffa      	ldrb	r2, [r7, #31]
 80026c4:	7efb      	ldrb	r3, [r7, #27]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	f4ff af66 	bcc.w	8002598 <lcdPutIcon+0x48>

	}

}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	200004dc 	.word	0x200004dc

080026e0 <lcdPutStr>:

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60ba      	str	r2, [r7, #8]
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	4603      	mov	r3, r0
 80026ec:	81fb      	strh	r3, [r7, #14]
 80026ee:	460b      	mov	r3, r1
 80026f0:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 80026f2:	2300      	movs	r3, #0
 80026f4:	75fb      	strb	r3, [r7, #23]
 80026f6:	e015      	b.n	8002724 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	b29b      	uxth	r3, r3
 8002702:	fb12 f303 	smulbb	r3, r2, r3
 8002706:	b29a      	uxth	r2, r3
 8002708:	89fb      	ldrh	r3, [r7, #14]
 800270a:	4413      	add	r3, r2
 800270c:	b298      	uxth	r0, r3
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	4413      	add	r3, r2
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	7b79      	ldrb	r1, [r7, #13]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f7ff fe43 	bl	80023a4 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	3301      	adds	r3, #1
 8002722:	75fb      	strb	r3, [r7, #23]
 8002724:	7dfc      	ldrb	r4, [r7, #23]
 8002726:	68b8      	ldr	r0, [r7, #8]
 8002728:	f7fd fd62 	bl	80001f0 <strlen>
 800272c:	4603      	mov	r3, r0
 800272e:	429c      	cmp	r4, r3
 8002730:	d3e2      	bcc.n	80026f8 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}

0800273c <lcdRefresh>:
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;

}
void lcdRefresh(void){
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <lcdRefresh+0x7c>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d032      	beq.n	80027b0 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 800274a:	2201      	movs	r2, #1
 800274c:	2140      	movs	r1, #64	; 0x40
 800274e:	481b      	ldr	r0, [pc, #108]	; (80027bc <lcdRefresh+0x80>)
 8002750:	f001 fe54 	bl	80043fc <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8002754:	2301      	movs	r3, #1
 8002756:	71fb      	strb	r3, [r7, #7]
 8002758:	e01c      	b.n	8002794 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fdbd 	bl	80022dc <reverse_uint8>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <lcdRefresh+0x84>)
 8002768:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 800276a:	2396      	movs	r3, #150	; 0x96
 800276c:	2202      	movs	r2, #2
 800276e:	4914      	ldr	r1, [pc, #80]	; (80027c0 <lcdRefresh+0x84>)
 8002770:	4814      	ldr	r0, [pc, #80]	; (80027c4 <lcdRefresh+0x88>)
 8002772:	f004 f8b4 	bl	80068de <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	3b01      	subs	r3, #1
 800277a:	2232      	movs	r2, #50	; 0x32
 800277c:	fb02 f303 	mul.w	r3, r2, r3
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <lcdRefresh+0x8c>)
 8002782:	1899      	adds	r1, r3, r2
 8002784:	2396      	movs	r3, #150	; 0x96
 8002786:	2232      	movs	r2, #50	; 0x32
 8002788:	480e      	ldr	r0, [pc, #56]	; (80027c4 <lcdRefresh+0x88>)
 800278a:	f004 f8a8 	bl	80068de <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	3301      	adds	r3, #1
 8002792:	71fb      	strb	r3, [r7, #7]
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	2bf1      	cmp	r3, #241	; 0xf1
 8002798:	d9df      	bls.n	800275a <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 800279a:	2396      	movs	r3, #150	; 0x96
 800279c:	2202      	movs	r2, #2
 800279e:	490b      	ldr	r1, [pc, #44]	; (80027cc <lcdRefresh+0x90>)
 80027a0:	4808      	ldr	r0, [pc, #32]	; (80027c4 <lcdRefresh+0x88>)
 80027a2:	f004 f89c 	bl	80068de <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 80027a6:	2200      	movs	r2, #0
 80027a8:	2140      	movs	r1, #64	; 0x40
 80027aa:	4804      	ldr	r0, [pc, #16]	; (80027bc <lcdRefresh+0x80>)
 80027ac:	f001 fe26 	bl	80043fc <HAL_GPIO_WritePin>
	}
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000150 	.word	0x20000150
 80027bc:	40020000 	.word	0x40020000
 80027c0:	20000154 	.word	0x20000154
 80027c4:	200033f4 	.word	0x200033f4
 80027c8:	200004dc 	.word	0x200004dc
 80027cc:	200004d8 	.word	0x200004d8

080027d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80027d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80027dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80027e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80027ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80027f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00b      	beq.n	8002810 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80027f8:	e000      	b.n	80027fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80027fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80027fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f9      	beq.n	80027fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002806:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002810:	687b      	ldr	r3, [r7, #4]
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <__io_putchar>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ffd1 	bl	80027d0 <ITM_SendChar>
	return(ch);
 800282e:	687b      	ldr	r3, [r7, #4]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002840:	f001 f9de 	bl	8003c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002844:	f000 f868 	bl	8002918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002848:	f7ff f8f8 	bl	8001a3c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800284c:	f000 fd0a 	bl	8003264 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002850:	f000 f98c 	bl	8002b6c <MX_SPI1_Init>
  MX_TIM1_Init();
 8002854:	f000 fb76 	bl	8002f44 <MX_TIM1_Init>
  MX_TIM10_Init();
 8002858:	f000 fc16 	bl	8003088 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 800285c:	f000 fd2c 	bl	80032b8 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8002860:	f7ff fcb4 	bl	80021cc <MX_I2C1_Init>
  MX_TIM11_Init();
 8002864:	f000 fc34 	bl	80030d0 <MX_TIM11_Init>
  MX_RTC_Init();
 8002868:	f000 f8fc 	bl	8002a64 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart6, &znak, 1);

  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 800286c:	4821      	ldr	r0, [pc, #132]	; (80028f4 <main+0xbc>)
 800286e:	f004 fa3d 	bl	8006cec <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8002872:	4820      	ldr	r0, [pc, #128]	; (80028f4 <main+0xbc>)
 8002874:	f004 fa8a 	bl	8006d8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002878:	2100      	movs	r1, #0
 800287a:	481e      	ldr	r0, [pc, #120]	; (80028f4 <main+0xbc>)
 800287c:	f004 fb50 	bl	8006f20 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 8002880:	481d      	ldr	r0, [pc, #116]	; (80028f8 <main+0xc0>)
 8002882:	f004 fa83 	bl	8006d8c <HAL_TIM_Base_Start_IT>

  gpsDevice gpsModule;
  gpsModule = initGps(&huart6);
 8002886:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800288a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800288e:	491b      	ldr	r1, [pc, #108]	; (80028fc <main+0xc4>)
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff f9bf 	bl	8001c14 <initGps>

//  bmp_t bmp180module;
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8002896:	481a      	ldr	r0, [pc, #104]	; (8002900 <main+0xc8>)
 8002898:	f7fe fc40 	bl	800111c <bmp_init>

  initButtons(btnsPtrs);
 800289c:	4819      	ldr	r0, [pc, #100]	; (8002904 <main+0xcc>)
 800289e:	f7fe fefb 	bl	8001698 <initButtons>

  initTimer();
 80028a2:	f7ff f8a7 	bl	80019f4 <initTimer>
  setTimeout(1);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f7ff f8ae 	bl	8001a08 <setTimeout>
  startClock();
 80028ac:	f7ff f8bc 	bl	8001a28 <startClock>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 80028b0:	f7ff fd3e 	bl	8002330 <lcdClearBuffer>
  lcdRefresh();
 80028b4:	f7ff ff42 	bl	800273c <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 80028b8:	4c13      	ldr	r4, [pc, #76]	; (8002908 <main+0xd0>)
 80028ba:	463b      	mov	r3, r7
 80028bc:	4910      	ldr	r1, [pc, #64]	; (8002900 <main+0xc8>)
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fe92 	bl	80015e8 <getBmpData>
 80028c4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80028c8:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80028cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80028d2:	2200      	movs	r2, #0
 80028d4:	490d      	ldr	r1, [pc, #52]	; (800290c <main+0xd4>)
 80028d6:	480e      	ldr	r0, [pc, #56]	; (8002910 <main+0xd8>)
 80028d8:	f003 fd8a 	bl	80063f0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80028dc:	2200      	movs	r2, #0
 80028de:	490d      	ldr	r1, [pc, #52]	; (8002914 <main+0xdc>)
 80028e0:	480b      	ldr	r0, [pc, #44]	; (8002910 <main+0xd8>)
 80028e2:	f003 fe67 	bl	80065b4 <HAL_RTC_GetDate>

	  lcdClearBuffer();
 80028e6:	f7ff fd23 	bl	8002330 <lcdClearBuffer>

	  // functions executed through GUI
	  showMenu();
 80028ea:	f7ff fc51 	bl	8002190 <showMenu>

	  lcdRefresh();
 80028ee:	f7ff ff25 	bl	800273c <lcdRefresh>
  {
 80028f2:	e7e1      	b.n	80028b8 <main+0x80>
 80028f4:	20003450 	.word	0x20003450
 80028f8:	20003498 	.word	0x20003498
 80028fc:	2000356c 	.word	0x2000356c
 8002900:	20000354 	.word	0x20000354
 8002904:	2000002c 	.word	0x2000002c
 8002908:	20000398 	.word	0x20000398
 800290c:	200033bc 	.word	0x200033bc
 8002910:	200033d4 	.word	0x200033d4
 8002914:	200033d0 	.word	0x200033d0

08002918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b094      	sub	sp, #80	; 0x50
 800291c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800291e:	f107 0320 	add.w	r3, r7, #32
 8002922:	2230      	movs	r2, #48	; 0x30
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f006 fac0 	bl	8008eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <SystemClock_Config+0xd0>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	4a28      	ldr	r2, [pc, #160]	; (80029e8 <SystemClock_Config+0xd0>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6413      	str	r3, [r2, #64]	; 0x40
 800294c:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <SystemClock_Config+0xd0>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002958:	2300      	movs	r3, #0
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <SystemClock_Config+0xd4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a22      	ldr	r2, [pc, #136]	; (80029ec <SystemClock_Config+0xd4>)
 8002962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b20      	ldr	r3, [pc, #128]	; (80029ec <SystemClock_Config+0xd4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002974:	2309      	movs	r3, #9
 8002976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002978:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800297e:	2301      	movs	r3, #1
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002982:	2302      	movs	r3, #2
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800298c:	2304      	movs	r3, #4
 800298e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002990:	23a8      	movs	r3, #168	; 0xa8
 8002992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002994:	2302      	movs	r3, #2
 8002996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002998:	2307      	movs	r3, #7
 800299a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800299c:	f107 0320 	add.w	r3, r7, #32
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 fdbd 	bl	8005520 <HAL_RCC_OscConfig>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80029ac:	f000 f84c 	bl	8002a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029b0:	230f      	movs	r3, #15
 80029b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b4:	2302      	movs	r3, #2
 80029b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	2105      	movs	r1, #5
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 f81e 	bl	8005a10 <HAL_RCC_ClockConfig>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80029da:	f000 f835 	bl	8002a48 <Error_Handler>
  }
}
 80029de:	bf00      	nop
 80029e0:	3750      	adds	r7, #80	; 0x50
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40007000 	.word	0x40007000

080029f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d103      	bne.n	8002a0a <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002a02:	2101      	movs	r1, #1
 8002a04:	4808      	ldr	r0, [pc, #32]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a06:	f001 fd12 	bl	800442e <HAL_GPIO_TogglePin>
//		lcdRefresh();
	}
	if(htim->Instance == TIM11){
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d102      	bne.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x2a>
//		scanButton(&btn_BB);
//		scanButton(&btn_BC);
//		scanButton(&btn_B1);
//		scanButton(&btn_B2);
//		scanButton(&btn_B3);
		scanButtons(btnsPtrs);
 8002a14:	4806      	ldr	r0, [pc, #24]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a16:	f7fe ffd3 	bl	80019c0 <scanButtons>
	}
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40014400 	.word	0x40014400
 8002a28:	40020400 	.word	0x40020400
 8002a2c:	40014800 	.word	0x40014800
 8002a30:	2000002c 	.word	0x2000002c

08002a34 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){

	}
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a4c:	b672      	cpsid	i
}
 8002a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002a50:	2201      	movs	r2, #1
 8002a52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a56:	4802      	ldr	r0, [pc, #8]	; (8002a60 <Error_Handler+0x18>)
 8002a58:	f001 fcd0 	bl	80043fc <HAL_GPIO_WritePin>
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <Error_Handler+0x14>
 8002a5e:	bf00      	nop
 8002a60:	40020400 	.word	0x40020400

08002a64 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002a78:	2300      	movs	r3, #0
 8002a7a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a7c:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <MX_RTC_Init+0xac>)
 8002a7e:	4a25      	ldr	r2, [pc, #148]	; (8002b14 <MX_RTC_Init+0xb0>)
 8002a80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a82:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <MX_RTC_Init+0xac>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002a88:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <MX_RTC_Init+0xac>)
 8002a8a:	227f      	movs	r2, #127	; 0x7f
 8002a8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <MX_RTC_Init+0xac>)
 8002a90:	22ff      	movs	r2, #255	; 0xff
 8002a92:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a94:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <MX_RTC_Init+0xac>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a9a:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <MX_RTC_Init+0xac>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <MX_RTC_Init+0xac>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002aa6:	481a      	ldr	r0, [pc, #104]	; (8002b10 <MX_RTC_Init+0xac>)
 8002aa8:	f003 fb92 	bl	80061d0 <HAL_RTC_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002ab2:	f7ff ffc9 	bl	8002a48 <Error_Handler>
//	return 0;
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8002ab6:	230c      	movs	r3, #12
 8002ab8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 34;
 8002aba:	2322      	movs	r3, #34	; 0x22
 8002abc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 56;
 8002abe:	2338      	movs	r3, #56	; 0x38
 8002ac0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	4619      	mov	r1, r3
 8002ad0:	480f      	ldr	r0, [pc, #60]	; (8002b10 <MX_RTC_Init+0xac>)
 8002ad2:	f003 fbf3 	bl	80062bc <HAL_RTC_SetTime>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002adc:	f7ff ffb4 	bl	8002a48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 29;
 8002ae8:	231d      	movs	r3, #29
 8002aea:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8002aec:	2316      	movs	r3, #22
 8002aee:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002af0:	463b      	mov	r3, r7
 8002af2:	2200      	movs	r2, #0
 8002af4:	4619      	mov	r1, r3
 8002af6:	4806      	ldr	r0, [pc, #24]	; (8002b10 <MX_RTC_Init+0xac>)
 8002af8:	f003 fcd8 	bl	80064ac <HAL_RTC_SetDate>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002b02:	f7ff ffa1 	bl	8002a48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200033d4 	.word	0x200033d4
 8002b14:	40002800 	.word	0x40002800

08002b18 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08e      	sub	sp, #56	; 0x38
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b20:	f107 0308 	add.w	r3, r7, #8
 8002b24:	2230      	movs	r2, #48	; 0x30
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f006 f9bf 	bl	8008eac <memset>
  if(rtcHandle->Instance==RTC)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_RTC_MspInit+0x4c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d111      	bne.n	8002b5c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b42:	f107 0308 	add.w	r3, r7, #8
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 f982 	bl	8005e50 <HAL_RCCEx_PeriphCLKConfig>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002b52:	f7ff ff79 	bl	8002a48 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b56:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <HAL_RTC_MspInit+0x50>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3738      	adds	r7, #56	; 0x38
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40002800 	.word	0x40002800
 8002b68:	42470e3c 	.word	0x42470e3c

08002b6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002b72:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <MX_SPI1_Init+0x68>)
 8002b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002bb8:	220a      	movs	r2, #10
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bbc:	4804      	ldr	r0, [pc, #16]	; (8002bd0 <MX_SPI1_Init+0x64>)
 8002bbe:	f003 fe05 	bl	80067cc <HAL_SPI_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002bc8:	f7ff ff3e 	bl	8002a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200033f4 	.word	0x200033f4
 8002bd4:	40013000 	.word	0x40013000

08002bd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <HAL_SPI_MspInit+0x84>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d12b      	bne.n	8002c52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <HAL_SPI_MspInit+0x88>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	4a17      	ldr	r2, [pc, #92]	; (8002c60 <HAL_SPI_MspInit+0x88>)
 8002c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c08:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_SPI_MspInit+0x88>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_SPI_MspInit+0x88>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <HAL_SPI_MspInit+0x88>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_SPI_MspInit+0x88>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002c32:	23a0      	movs	r3, #160	; 0xa0
 8002c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c42:	2305      	movs	r3, #5
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4805      	ldr	r0, [pc, #20]	; (8002c64 <HAL_SPI_MspInit+0x8c>)
 8002c4e:	f001 fa11 	bl	8004074 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c52:	bf00      	nop
 8002c54:	3728      	adds	r7, #40	; 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40013000 	.word	0x40013000
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020000 	.word	0x40020000

08002c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800

08002cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <NMI_Handler+0x4>

08002cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 8002cc2:	f7ff fec1 	bl	8002a48 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <HardFault_Handler+0x8>

08002cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <MemManage_Handler+0x4>

08002cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd2:	e7fe      	b.n	8002cd2 <BusFault_Handler+0x4>

08002cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <UsageFault_Handler+0x4>

08002cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d08:	f000 ffcc 	bl	8003ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d14:	4803      	ldr	r0, [pc, #12]	; (8002d24 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002d16:	f004 f9cb 	bl	80070b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002d1a:	4803      	ldr	r0, [pc, #12]	; (8002d28 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002d1c:	f004 f9c8 	bl	80070b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20003450 	.word	0x20003450
 8002d28:	20003498 	.word	0x20003498

08002d2c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d30:	4803      	ldr	r0, [pc, #12]	; (8002d40 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002d32:	f004 f9bd 	bl	80070b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002d36:	4803      	ldr	r0, [pc, #12]	; (8002d44 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002d38:	f004 f9ba 	bl	80070b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20003450 	.word	0x20003450
 8002d44:	200034e0 	.word	0x200034e0

08002d48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 8002d4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d50:	f001 fb88 	bl	8004464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 8002d54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d58:	f001 fb84 	bl	8004464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002d5c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d60:	f001 fb80 	bl	8004464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8002d64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d68:	f001 fb7c 	bl	8004464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8002d6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d70:	f001 fb78 	bl	8004464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8002d74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d78:	f001 fb74 	bl	8004464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002d84:	4802      	ldr	r0, [pc, #8]	; (8002d90 <USART6_IRQHandler+0x10>)
 8002d86:	f005 f92f 	bl	8007fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	2000356c 	.word	0x2000356c

08002d94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
	return 1;
 8002d98:	2301      	movs	r3, #1
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <_kill>:

int _kill(int pid, int sig)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002dae:	f006 f845 	bl	8008e3c <__errno>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2216      	movs	r2, #22
 8002db6:	601a      	str	r2, [r3, #0]
	return -1;
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_exit>:

void _exit (int status)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffe7 	bl	8002da4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dd6:	e7fe      	b.n	8002dd6 <_exit+0x12>

08002dd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	e00a      	b.n	8002e00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dea:	f3af 8000 	nop.w
 8002dee:	4601      	mov	r1, r0
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	60ba      	str	r2, [r7, #8]
 8002df6:	b2ca      	uxtb	r2, r1
 8002df8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	dbf0      	blt.n	8002dea <_read+0x12>
	}

return len;
 8002e08:	687b      	ldr	r3, [r7, #4]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e009      	b.n	8002e38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	60ba      	str	r2, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fcf6 	bl	800281e <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3301      	adds	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	dbf1      	blt.n	8002e24 <_write+0x12>
	}
	return len;
 8002e40:	687b      	ldr	r3, [r7, #4]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <_close>:

int _close(int file)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
	return -1;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e72:	605a      	str	r2, [r3, #4]
	return 0;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_isatty>:

int _isatty(int file)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
	return 1;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <_sbrk+0x5c>)
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <_sbrk+0x60>)
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <_sbrk+0x64>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <_sbrk+0x68>)
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee4:	f005 ffaa 	bl	8008e3c <__errno>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	220c      	movs	r2, #12
 8002eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	e009      	b.n	8002f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <_sbrk+0x64>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <_sbrk+0x64>)
 8002f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20030000 	.word	0x20030000
 8002f14:	00000400 	.word	0x00000400
 8002f18:	2000344c 	.word	0x2000344c
 8002f1c:	200035c8 	.word	0x200035c8

08002f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <SystemInit+0x20>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <SystemInit+0x20>)
 8002f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b096      	sub	sp, #88	; 0x58
 8002f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	605a      	str	r2, [r3, #4]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	60da      	str	r2, [r3, #12]
 8002f70:	611a      	str	r2, [r3, #16]
 8002f72:	615a      	str	r2, [r3, #20]
 8002f74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	2220      	movs	r2, #32
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f005 ff95 	bl	8008eac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f82:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <MX_TIM1_Init+0x13c>)
 8002f84:	4a3f      	ldr	r2, [pc, #252]	; (8003084 <MX_TIM1_Init+0x140>)
 8002f86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8002f88:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <MX_TIM1_Init+0x13c>)
 8002f8a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002f8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f90:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <MX_TIM1_Init+0x13c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8002f96:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <MX_TIM1_Init+0x13c>)
 8002f98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9e:	4b38      	ldr	r3, [pc, #224]	; (8003080 <MX_TIM1_Init+0x13c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fa4:	4b36      	ldr	r3, [pc, #216]	; (8003080 <MX_TIM1_Init+0x13c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002faa:	4b35      	ldr	r3, [pc, #212]	; (8003080 <MX_TIM1_Init+0x13c>)
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fb0:	4833      	ldr	r0, [pc, #204]	; (8003080 <MX_TIM1_Init+0x13c>)
 8002fb2:	f003 fe9b 	bl	8006cec <HAL_TIM_Base_Init>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002fbc:	f7ff fd44 	bl	8002a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fca:	4619      	mov	r1, r3
 8002fcc:	482c      	ldr	r0, [pc, #176]	; (8003080 <MX_TIM1_Init+0x13c>)
 8002fce:	f004 fa39 	bl	8007444 <HAL_TIM_ConfigClockSource>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002fd8:	f7ff fd36 	bl	8002a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fdc:	4828      	ldr	r0, [pc, #160]	; (8003080 <MX_TIM1_Init+0x13c>)
 8002fde:	f003 ff45 	bl	8006e6c <HAL_TIM_PWM_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002fe8:	f7ff fd2e 	bl	8002a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ff4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4821      	ldr	r0, [pc, #132]	; (8003080 <MX_TIM1_Init+0x13c>)
 8002ffc:	f004 fe22 	bl	8007c44 <HAL_TIMEx_MasterConfigSynchronization>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003006:	f7ff fd1f 	bl	8002a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800300a:	2360      	movs	r3, #96	; 0x60
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 800300e:	2302      	movs	r3, #2
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003012:	2300      	movs	r3, #0
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003016:	2300      	movs	r3, #0
 8003018:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302a:	2200      	movs	r2, #0
 800302c:	4619      	mov	r1, r3
 800302e:	4814      	ldr	r0, [pc, #80]	; (8003080 <MX_TIM1_Init+0x13c>)
 8003030:	f004 f946 	bl	80072c0 <HAL_TIM_PWM_ConfigChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800303a:	f7ff fd05 	bl	8002a48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003056:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	4619      	mov	r1, r3
 8003060:	4807      	ldr	r0, [pc, #28]	; (8003080 <MX_TIM1_Init+0x13c>)
 8003062:	f004 fe6b 	bl	8007d3c <HAL_TIMEx_ConfigBreakDeadTime>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800306c:	f7ff fcec 	bl	8002a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003070:	4803      	ldr	r0, [pc, #12]	; (8003080 <MX_TIM1_Init+0x13c>)
 8003072:	f000 f8bd 	bl	80031f0 <HAL_TIM_MspPostInit>

}
 8003076:	bf00      	nop
 8003078:	3758      	adds	r7, #88	; 0x58
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20003450 	.word	0x20003450
 8003084:	40010000 	.word	0x40010000

08003088 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <MX_TIM10_Init+0x40>)
 800308e:	4a0f      	ldr	r2, [pc, #60]	; (80030cc <MX_TIM10_Init+0x44>)
 8003090:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <MX_TIM10_Init+0x40>)
 8003094:	f244 129f 	movw	r2, #16799	; 0x419f
 8003098:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <MX_TIM10_Init+0x40>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 499;
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <MX_TIM10_Init+0x40>)
 80030a2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80030a6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a8:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <MX_TIM10_Init+0x40>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <MX_TIM10_Init+0x40>)
 80030b0:	2280      	movs	r2, #128	; 0x80
 80030b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80030b4:	4804      	ldr	r0, [pc, #16]	; (80030c8 <MX_TIM10_Init+0x40>)
 80030b6:	f003 fe19 	bl	8006cec <HAL_TIM_Base_Init>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80030c0:	f7ff fcc2 	bl	8002a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20003498 	.word	0x20003498
 80030cc:	40014400 	.word	0x40014400

080030d0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <MX_TIM11_Init+0x40>)
 80030d6:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <MX_TIM11_Init+0x44>)
 80030d8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <MX_TIM11_Init+0x40>)
 80030dc:	f244 129f 	movw	r2, #16799	; 0x419f
 80030e0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <MX_TIM11_Init+0x40>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 499;
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <MX_TIM11_Init+0x40>)
 80030ea:	f240 12f3 	movw	r2, #499	; 0x1f3
 80030ee:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <MX_TIM11_Init+0x40>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <MX_TIM11_Init+0x40>)
 80030f8:	2280      	movs	r2, #128	; 0x80
 80030fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80030fc:	4804      	ldr	r0, [pc, #16]	; (8003110 <MX_TIM11_Init+0x40>)
 80030fe:	f003 fdf5 	bl	8006cec <HAL_TIM_Base_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8003108:	f7ff fc9e 	bl	8002a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	200034e0 	.word	0x200034e0
 8003114:	40014800 	.word	0x40014800

08003118 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2e      	ldr	r2, [pc, #184]	; (80031e0 <HAL_TIM_Base_MspInit+0xc8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d11e      	bne.n	8003168 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	4a2c      	ldr	r2, [pc, #176]	; (80031e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6453      	str	r3, [r2, #68]	; 0x44
 800313a:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_TIM_Base_MspInit+0xcc>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	2019      	movs	r0, #25
 800314c:	f000 fec9 	bl	8003ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003150:	2019      	movs	r0, #25
 8003152:	f000 fee2 	bl	8003f1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	2100      	movs	r1, #0
 800315a:	201a      	movs	r0, #26
 800315c:	f000 fec1 	bl	8003ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003160:	201a      	movs	r0, #26
 8003162:	f000 feda 	bl	8003f1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003166:	e036      	b.n	80031d6 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM10)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1e      	ldr	r2, [pc, #120]	; (80031e8 <HAL_TIM_Base_MspInit+0xd0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d116      	bne.n	80031a0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	4a1a      	ldr	r2, [pc, #104]	; (80031e4 <HAL_TIM_Base_MspInit+0xcc>)
 800317c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003180:	6453      	str	r3, [r2, #68]	; 0x44
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	2019      	movs	r0, #25
 8003194:	f000 fea5 	bl	8003ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003198:	2019      	movs	r0, #25
 800319a:	f000 febe 	bl	8003f1a <HAL_NVIC_EnableIRQ>
}
 800319e:	e01a      	b.n	80031d6 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_TIM_Base_MspInit+0xd4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d115      	bne.n	80031d6 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <HAL_TIM_Base_MspInit+0xcc>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <HAL_TIM_Base_MspInit+0xcc>)
 80031b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_TIM_Base_MspInit+0xcc>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2100      	movs	r1, #0
 80031ca:	201a      	movs	r0, #26
 80031cc:	f000 fe89 	bl	8003ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80031d0:	201a      	movs	r0, #26
 80031d2:	f000 fea2 	bl	8003f1a <HAL_NVIC_EnableIRQ>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40010000 	.word	0x40010000
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40014400 	.word	0x40014400
 80031ec:	40014800 	.word	0x40014800

080031f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a12      	ldr	r2, [pc, #72]	; (8003258 <HAL_TIM_MspPostInit+0x68>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d11e      	bne.n	8003250 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_TIM_MspPostInit+0x6c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_TIM_MspPostInit+0x6c>)
 800321c:	f043 0310 	orr.w	r3, r3, #16
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_TIM_MspPostInit+0x6c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800322e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003232:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003240:	2301      	movs	r3, #1
 8003242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003244:	f107 030c 	add.w	r3, r7, #12
 8003248:	4619      	mov	r1, r3
 800324a:	4805      	ldr	r0, [pc, #20]	; (8003260 <HAL_TIM_MspPostInit+0x70>)
 800324c:	f000 ff12 	bl	8004074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003250:	bf00      	nop
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40010000 	.word	0x40010000
 800325c:	40023800 	.word	0x40023800
 8003260:	40021000 	.word	0x40021000

08003264 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 800326a:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <MX_USART3_UART_Init+0x50>)
 800326c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 8003270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003274:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 800328a:	220c      	movs	r2, #12
 800328c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800329a:	4805      	ldr	r0, [pc, #20]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 800329c:	f004 fdb4 	bl	8007e08 <HAL_UART_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80032a6:	f7ff fbcf 	bl	8002a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20003528 	.word	0x20003528
 80032b4:	40004800 	.word	0x40004800

080032b8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <MX_USART6_UART_Init+0x4c>)
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <MX_USART6_UART_Init+0x50>)
 80032c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <MX_USART6_UART_Init+0x4c>)
 80032c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <MX_USART6_UART_Init+0x4c>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <MX_USART6_UART_Init+0x4c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <MX_USART6_UART_Init+0x4c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <MX_USART6_UART_Init+0x4c>)
 80032de:	2204      	movs	r2, #4
 80032e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <MX_USART6_UART_Init+0x4c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <MX_USART6_UART_Init+0x4c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80032ee:	4805      	ldr	r0, [pc, #20]	; (8003304 <MX_USART6_UART_Init+0x4c>)
 80032f0:	f004 fd8a 	bl	8007e08 <HAL_UART_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80032fa:	f7ff fba5 	bl	8002a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	2000356c 	.word	0x2000356c
 8003308:	40011400 	.word	0x40011400

0800330c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08c      	sub	sp, #48	; 0x30
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 031c 	add.w	r3, r7, #28
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a36      	ldr	r2, [pc, #216]	; (8003404 <HAL_UART_MspInit+0xf8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d12d      	bne.n	800338a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	4b35      	ldr	r3, [pc, #212]	; (8003408 <HAL_UART_MspInit+0xfc>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a34      	ldr	r2, [pc, #208]	; (8003408 <HAL_UART_MspInit+0xfc>)
 8003338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
 800333e:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_UART_MspInit+0xfc>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <HAL_UART_MspInit+0xfc>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <HAL_UART_MspInit+0xfc>)
 8003354:	f043 0308 	orr.w	r3, r3, #8
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_UART_MspInit+0xfc>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003366:	f44f 7340 	mov.w	r3, #768	; 0x300
 800336a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003374:	2303      	movs	r3, #3
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003378:	2307      	movs	r3, #7
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	4619      	mov	r1, r3
 8003382:	4822      	ldr	r0, [pc, #136]	; (800340c <HAL_UART_MspInit+0x100>)
 8003384:	f000 fe76 	bl	8004074 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003388:	e038      	b.n	80033fc <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a20      	ldr	r2, [pc, #128]	; (8003410 <HAL_UART_MspInit+0x104>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d133      	bne.n	80033fc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003394:	2300      	movs	r3, #0
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_UART_MspInit+0xfc>)
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	4a1a      	ldr	r2, [pc, #104]	; (8003408 <HAL_UART_MspInit+0xfc>)
 800339e:	f043 0320 	orr.w	r3, r3, #32
 80033a2:	6453      	str	r3, [r2, #68]	; 0x44
 80033a4:	4b18      	ldr	r3, [pc, #96]	; (8003408 <HAL_UART_MspInit+0xfc>)
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	4b14      	ldr	r3, [pc, #80]	; (8003408 <HAL_UART_MspInit+0xfc>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	4a13      	ldr	r2, [pc, #76]	; (8003408 <HAL_UART_MspInit+0xfc>)
 80033ba:	f043 0304 	orr.w	r3, r3, #4
 80033be:	6313      	str	r3, [r2, #48]	; 0x30
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_UART_MspInit+0xfc>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033cc:	23c0      	movs	r3, #192	; 0xc0
 80033ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80033dc:	2308      	movs	r3, #8
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e0:	f107 031c 	add.w	r3, r7, #28
 80033e4:	4619      	mov	r1, r3
 80033e6:	480b      	ldr	r0, [pc, #44]	; (8003414 <HAL_UART_MspInit+0x108>)
 80033e8:	f000 fe44 	bl	8004074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	2100      	movs	r1, #0
 80033f0:	2047      	movs	r0, #71	; 0x47
 80033f2:	f000 fd76 	bl	8003ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80033f6:	2047      	movs	r0, #71	; 0x47
 80033f8:	f000 fd8f 	bl	8003f1a <HAL_NVIC_EnableIRQ>
}
 80033fc:	bf00      	nop
 80033fe:	3730      	adds	r7, #48	; 0x30
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40004800 	.word	0x40004800
 8003408:	40023800 	.word	0x40023800
 800340c:	40020c00 	.word	0x40020c00
 8003410:	40011400 	.word	0x40011400
 8003414:	40020800 	.word	0x40020800

08003418 <setDefaultClbcks>:
#include "digits5x9.h"

// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = 0;

static void setDefaultClbcks(void){
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
	btn_B2.onSinglePressHandler = &returnToMenu;
 800341c:	4b08      	ldr	r3, [pc, #32]	; (8003440 <setDefaultClbcks+0x28>)
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <setDefaultClbcks+0x2c>)
 8003420:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <setDefaultClbcks+0x30>)
 8003424:	4a09      	ldr	r2, [pc, #36]	; (800344c <setDefaultClbcks+0x34>)
 8003426:	615a      	str	r2, [r3, #20]
	btn_BC.onContinuousShortPressHandler = &addBaro;
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <setDefaultClbcks+0x38>)
 800342a:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <setDefaultClbcks+0x3c>)
 800342c:	619a      	str	r2, [r3, #24]
	btn_BA.onContinuousShortPressHandler = &remBaro;
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <setDefaultClbcks+0x40>)
 8003430:	4a0a      	ldr	r2, [pc, #40]	; (800345c <setDefaultClbcks+0x44>)
 8003432:	619a      	str	r2, [r3, #24]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000438 	.word	0x20000438
 8003444:	08002109 	.word	0x08002109
 8003448:	200003cc 	.word	0x200003cc
 800344c:	0800363d 	.word	0x0800363d
 8003450:	200003f0 	.word	0x200003f0
 8003454:	08003681 	.word	0x08003681
 8003458:	200003a8 	.word	0x200003a8
 800345c:	080036cd 	.word	0x080036cd

08003460 <baroDescription>:

// function executed from menu level
void baroDescription(void){
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
//	char tempStr[30] = {0};
//	sprintf(&tempStr, "Baro will be shown");
//	lcdPutStr(0, 9, tempStr, font13);
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <baroSetup>:
// function executed once on module load
void baroSetup(void){
 800346e:	b580      	push	{r7, lr}
 8003470:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8003472:	f7ff ffd1 	bl	8003418 <setDefaultClbcks>
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <baroMain>:

// main function
void baroMain(void){
 800347c:	b5b0      	push	{r4, r5, r7, lr}
 800347e:	b0de      	sub	sp, #376	; 0x178
 8003480:	af02      	add	r7, sp, #8
	char str1[50] = {0};
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003488:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800348c:	222e      	movs	r2, #46	; 0x2e
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f005 fd0b 	bl	8008eac <memset>
	char str2[50] = {0};
 8003496:	2300      	movs	r3, #0
 8003498:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800349c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80034a0:	222e      	movs	r2, #46	; 0x2e
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f005 fd01 	bl	8008eac <memset>
	char str3[50] = {0};
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80034b0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80034b4:	222e      	movs	r2, #46	; 0x2e
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f005 fcf7 	bl	8008eac <memset>
	char str4[50] = {0};
 80034be:	2300      	movs	r3, #0
 80034c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034c8:	222e      	movs	r2, #46	; 0x2e
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f005 fced 	bl	8008eac <memset>
	char temp[50] = {0};
 80034d2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80034d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	3304      	adds	r3, #4
 80034e0:	222e      	movs	r2, #46	; 0x2e
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f005 fce1 	bl	8008eac <memset>
	char pres[50] = {0};
 80034ea:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80034ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	3304      	adds	r3, #4
 80034f8:	222e      	movs	r2, #46	; 0x2e
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f005 fcd5 	bl	8008eac <memset>
	char alti[50] = {0};
 8003502:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003506:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	3304      	adds	r3, #4
 8003510:	222e      	movs	r2, #46	; 0x2e
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f005 fcc9 	bl	8008eac <memset>
	sprintf(&str1, "%4.2f degC %04.2f hPa", bmpData.temperature, ((float)bmpData.pressure/100));
 800351a:	4b3d      	ldr	r3, [pc, #244]	; (8003610 <baroMain+0x194>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd f822 	bl	8000568 <__aeabi_f2d>
 8003524:	4604      	mov	r4, r0
 8003526:	460d      	mov	r5, r1
 8003528:	4b39      	ldr	r3, [pc, #228]	; (8003610 <baroMain+0x194>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003534:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003614 <baroMain+0x198>
 8003538:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800353c:	ee16 0a90 	vmov	r0, s13
 8003540:	f7fd f812 	bl	8000568 <__aeabi_f2d>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 800354c:	e9cd 2300 	strd	r2, r3, [sp]
 8003550:	4622      	mov	r2, r4
 8003552:	462b      	mov	r3, r5
 8003554:	4930      	ldr	r1, [pc, #192]	; (8003618 <baroMain+0x19c>)
 8003556:	f006 f91b 	bl	8009790 <siprintf>
	if(baroMode == 0){
 800355a:	4b30      	ldr	r3, [pc, #192]	; (800361c <baroMain+0x1a0>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11e      	bne.n	80035a0 <baroMain+0x124>
		sprintf(&str2, "%6.2f hPa@asl.", bmpData.slpress/100);
 8003562:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <baroMain+0x194>)
 8003564:	edd3 7a03 	vldr	s15, [r3, #12]
 8003568:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003614 <baroMain+0x198>
 800356c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003570:	ee16 0a90 	vmov	r0, s13
 8003574:	f7fc fff8 	bl	8000568 <__aeabi_f2d>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003580:	4927      	ldr	r1, [pc, #156]	; (8003620 <baroMain+0x1a4>)
 8003582:	f006 f905 	bl	8009790 <siprintf>
		sprintf(&str3, "Fix. Alt: %.0f m.asl", fixedAltitude);
 8003586:	4b27      	ldr	r3, [pc, #156]	; (8003624 <baroMain+0x1a8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fc ffec 	bl	8000568 <__aeabi_f2d>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8003598:	4923      	ldr	r1, [pc, #140]	; (8003628 <baroMain+0x1ac>)
 800359a:	f006 f8f9 	bl	8009790 <siprintf>
 800359e:	e01d      	b.n	80035dc <baroMain+0x160>
	} else {
		sprintf(&str2, "%6.2f m.asl.", bmpData.altitude);
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <baroMain+0x194>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ffdf 	bl	8000568 <__aeabi_f2d>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80035b2:	491e      	ldr	r1, [pc, #120]	; (800362c <baroMain+0x1b0>)
 80035b4:	f006 f8ec 	bl	8009790 <siprintf>
		sprintf(&str3, "Fix. Baro: %6.2f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <baroMain+0x1b4>)
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003614 <baroMain+0x198>
 80035c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80035c6:	ee16 0a90 	vmov	r0, s13
 80035ca:	f7fc ffcd 	bl	8000568 <__aeabi_f2d>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 80035d6:	4917      	ldr	r1, [pc, #92]	; (8003634 <baroMain+0x1b8>)
 80035d8:	f006 f8da 	bl	8009790 <siprintf>
	}
	lcdPutStr(0, 0, str1, dig5x9);
 80035dc:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80035e0:	4b15      	ldr	r3, [pc, #84]	; (8003638 <baroMain+0x1bc>)
 80035e2:	2100      	movs	r1, #0
 80035e4:	2000      	movs	r0, #0
 80035e6:	f7ff f87b 	bl	80026e0 <lcdPutStr>
	lcdPutStr(0, 2*25, str2, dig5x9);
 80035ea:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <baroMain+0x1bc>)
 80035f0:	2132      	movs	r1, #50	; 0x32
 80035f2:	2000      	movs	r0, #0
 80035f4:	f7ff f874 	bl	80026e0 <lcdPutStr>
	lcdPutStr(0, 3*25, str3, dig5x9);
 80035f8:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80035fc:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <baroMain+0x1bc>)
 80035fe:	214b      	movs	r1, #75	; 0x4b
 8003600:	2000      	movs	r0, #0
 8003602:	f7ff f86d 	bl	80026e0 <lcdPutStr>
}
 8003606:	bf00      	nop
 8003608:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 800360c:	46bd      	mov	sp, r7
 800360e:	bdb0      	pop	{r4, r5, r7, pc}
 8003610:	20000398 	.word	0x20000398
 8003614:	42c80000 	.word	0x42c80000
 8003618:	0800cb2c 	.word	0x0800cb2c
 800361c:	200035b0 	.word	0x200035b0
 8003620:	0800cb44 	.word	0x0800cb44
 8003624:	20000004 	.word	0x20000004
 8003628:	0800cb54 	.word	0x0800cb54
 800362c:	0800cb6c 	.word	0x0800cb6c
 8003630:	20000000 	.word	0x20000000
 8003634:	0800cb7c 	.word	0x0800cb7c
 8003638:	08010498 	.word	0x08010498

0800363c <changeBaroMode>:




void changeBaroMode(void){
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
	if(baroMode == 0){
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <changeBaroMode+0x34>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d107      	bne.n	8003658 <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <changeBaroMode+0x38>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <changeBaroMode+0x3c>)
 800364e:	6013      	str	r3, [r2, #0]
		baroMode = 1;
 8003650:	4b07      	ldr	r3, [pc, #28]	; (8003670 <changeBaroMode+0x34>)
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = 0;
	}
}
 8003656:	e006      	b.n	8003666 <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <changeBaroMode+0x38>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a07      	ldr	r2, [pc, #28]	; (800367c <changeBaroMode+0x40>)
 800365e:	6013      	str	r3, [r2, #0]
		baroMode = 0;
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <changeBaroMode+0x34>)
 8003662:	2200      	movs	r2, #0
 8003664:	701a      	strb	r2, [r3, #0]
}
 8003666:	bf00      	nop
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	200035b0 	.word	0x200035b0
 8003674:	20000398 	.word	0x20000398
 8003678:	20000000 	.word	0x20000000
 800367c:	20000004 	.word	0x20000004

08003680 <addBaro>:
void addBaro(void){
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
	if(baroMode == 0){
 8003684:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <addBaro+0x40>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <addBaro+0x22>
			fixedAltitude += 1;
 800368c:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <addBaro+0x44>)
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <addBaro+0x44>)
 800369c:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 1;
		}
}
 80036a0:	e009      	b.n	80036b6 <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 1;
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <addBaro+0x48>)
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <addBaro+0x48>)
 80036b2:	edc3 7a00 	vstr	s15, [r3]
}
 80036b6:	bf00      	nop
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	200035b0 	.word	0x200035b0
 80036c4:	20000004 	.word	0x20000004
 80036c8:	20000000 	.word	0x20000000

080036cc <remBaro>:
void remBaro(void){
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
	if(baroMode == 0){
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <remBaro+0x40>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <remBaro+0x22>
			fixedAltitude -= 1;
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <remBaro+0x44>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <remBaro+0x44>)
 80036e8:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 1;
		}
}
 80036ec:	e009      	b.n	8003702 <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 1;
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <remBaro+0x48>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <remBaro+0x48>)
 80036fe:	edc3 7a00 	vstr	s15, [r3]
}
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	200035b0 	.word	0x200035b0
 8003710:	20000004 	.word	0x20000004
 8003714:	20000000 	.word	0x20000000

08003718 <setDefaultClbcks>:

#include "gpsModule.h"
#include "font13.h"
#include "digits5x9.h"

static void setDefaultClbcks(void){
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
	btn_B2.onSinglePressHandler = &returnToMenu;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <setDefaultClbcks+0x14>)
 800371e:	4a04      	ldr	r2, [pc, #16]	; (8003730 <setDefaultClbcks+0x18>)
 8003720:	611a      	str	r2, [r3, #16]
}
 8003722:	bf00      	nop
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	20000438 	.word	0x20000438
 8003730:	08002109 	.word	0x08002109

08003734 <gpsDescription>:

void gpsDescription(void){
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
//	char tempStr[30] = {0};
//	sprintf(&tempStr, "GPS will be shown");
//	lcdPutStr(0, 9, tempStr, font13);
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <gpsSetup>:

void gpsSetup(void){
 8003742:	b580      	push	{r7, lr}
 8003744:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8003746:	f7ff ffe7 	bl	8003718 <setDefaultClbcks>

}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <gpsMain>:

void gpsMain(void){
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8003756:	2300      	movs	r3, #0
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
 8003768:	615a      	str	r2, [r3, #20]
 800376a:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, "GPS will be shown");
 800376c:	463b      	mov	r3, r7
 800376e:	4907      	ldr	r1, [pc, #28]	; (800378c <gpsMain+0x3c>)
 8003770:	4618      	mov	r0, r3
 8003772:	f006 f80d 	bl	8009790 <siprintf>
	lcdPutStr(0, 0, tempStr, font13);
 8003776:	463a      	mov	r2, r7
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <gpsMain+0x40>)
 800377a:	2100      	movs	r1, #0
 800377c:	2000      	movs	r0, #0
 800377e:	f7fe ffaf 	bl	80026e0 <lcdPutStr>
}
 8003782:	bf00      	nop
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	0800cb94 	.word	0x0800cb94
 8003790:	0801300c 	.word	0x0801300c

08003794 <setDefaultClbcks>:

#include "homeModule.h"
#include "font13.h"
#include "digits5x9.h"

static void setDefaultClbcks(void){
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
	btn_B2.onSinglePressHandler = &returnToMenu;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <setDefaultClbcks+0x14>)
 800379a:	4a04      	ldr	r2, [pc, #16]	; (80037ac <setDefaultClbcks+0x18>)
 800379c:	611a      	str	r2, [r3, #16]
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	20000438 	.word	0x20000438
 80037ac:	08002109 	.word	0x08002109

080037b0 <homeDescription>:

void homeDescription(void){
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
//	char tempStr[30] = {0};
//	sprintf(&tempStr, "HOME will be shown");
//	lcdPutStr(0, 9, tempStr, font13);
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <homeSetup>:

void homeSetup(void){
 80037be:	b580      	push	{r7, lr}
 80037c0:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80037c2:	f7ff ffe7 	bl	8003794 <setDefaultClbcks>

}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <homeMain>:

void homeMain(void){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 80037d2:	2300      	movs	r3, #0
 80037d4:	603b      	str	r3, [r7, #0]
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
 80037e4:	615a      	str	r2, [r3, #20]
 80037e6:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, "HOME will be shown");
 80037e8:	463b      	mov	r3, r7
 80037ea:	4907      	ldr	r1, [pc, #28]	; (8003808 <homeMain+0x3c>)
 80037ec:	4618      	mov	r0, r3
 80037ee:	f005 ffcf 	bl	8009790 <siprintf>
	lcdPutStr(0, 0, tempStr, font13);
 80037f2:	463a      	mov	r2, r7
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <homeMain+0x40>)
 80037f6:	2100      	movs	r1, #0
 80037f8:	2000      	movs	r0, #0
 80037fa:	f7fe ff71 	bl	80026e0 <lcdPutStr>
}
 80037fe:	bf00      	nop
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	0800cba8 	.word	0x0800cba8
 800380c:	08014068 	.word	0x08014068

08003810 <setDefaultClbcks>:

#include "settingsModule.h"
#include "font13.h"
#include "digits5x9.h"

static void setDefaultClbcks(void){
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
	btn_B2.onSinglePressHandler = &returnToMenu;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <setDefaultClbcks+0x14>)
 8003816:	4a04      	ldr	r2, [pc, #16]	; (8003828 <setDefaultClbcks+0x18>)
 8003818:	611a      	str	r2, [r3, #16]
}
 800381a:	bf00      	nop
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	20000438 	.word	0x20000438
 8003828:	08002109 	.word	0x08002109

0800382c <settingsDescription>:

void settingsDescription(void){
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
//	char tempStr[30] = {0};
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 9, tempStr, font13);
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <settingsSetup>:

void settingsSetup(void){
 800383a:	b580      	push	{r7, lr}
 800383c:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800383e:	f7ff ffe7 	bl	8003810 <setDefaultClbcks>
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <settingsMain>:

void settingsMain(void){
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 800384e:	2300      	movs	r3, #0
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	1d3b      	adds	r3, r7, #4
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]
 8003860:	615a      	str	r2, [r3, #20]
 8003862:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, "Settings will be shown");
 8003864:	463b      	mov	r3, r7
 8003866:	4907      	ldr	r1, [pc, #28]	; (8003884 <settingsMain+0x3c>)
 8003868:	4618      	mov	r0, r3
 800386a:	f005 ff91 	bl	8009790 <siprintf>
	lcdPutStr(0, 0, tempStr, font13);
 800386e:	463a      	mov	r2, r7
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <settingsMain+0x40>)
 8003872:	2100      	movs	r1, #0
 8003874:	2000      	movs	r0, #0
 8003876:	f7fe ff33 	bl	80026e0 <lcdPutStr>
}
 800387a:	bf00      	nop
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	0800cbbc 	.word	0x0800cbbc
 8003888:	080150c4 	.word	0x080150c4

0800388c <prevPage>:
#include "fonts/ocrFont.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <prevPage+0x30>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d006      	beq.n	80038a6 <prevPage+0x1a>
		currentPage--;
 8003898:	4b08      	ldr	r3, [pc, #32]	; (80038bc <prevPage+0x30>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	3b01      	subs	r3, #1
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <prevPage+0x30>)
 80038a2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 80038a4:	e005      	b.n	80038b2 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <prevPage+0x34>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4b03      	ldr	r3, [pc, #12]	; (80038bc <prevPage+0x30>)
 80038b0:	701a      	strb	r2, [r3, #0]
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	200035b1 	.word	0x200035b1
 80038c0:	2000015c 	.word	0x2000015c

080038c4 <nextPage>:
void nextPage(void){
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <nextPage+0x34>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <nextPage+0x38>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	429a      	cmp	r2, r3
 80038d6:	da06      	bge.n	80038e6 <nextPage+0x22>
		currentPage++;
 80038d8:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <nextPage+0x34>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <nextPage+0x34>)
 80038e2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 80038e4:	e002      	b.n	80038ec <nextPage+0x28>
		currentPage=0;
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <nextPage+0x34>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	200035b1 	.word	0x200035b1
 80038fc:	2000015c 	.word	0x2000015c

08003900 <showPage1>:

void showPage1(void){
 8003900:	b580      	push	{r7, lr}
 8003902:	b090      	sub	sp, #64	; 0x40
 8003904:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8003906:	2300      	movs	r3, #0
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	60da      	str	r2, [r3, #12]
 8003918:	611a      	str	r2, [r3, #16]
 800391a:	615a      	str	r2, [r3, #20]
 800391c:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 800391e:	2300      	movs	r3, #0
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	1d3b      	adds	r3, r7, #4
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
 8003930:	615a      	str	r2, [r3, #20]
 8003932:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d%02d", RtcTime.Hours, RtcTime.Minutes);
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <showPage1+0x7c>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <showPage1+0x7c>)
 800393c:	785b      	ldrb	r3, [r3, #1]
 800393e:	4638      	mov	r0, r7
 8003940:	490f      	ldr	r1, [pc, #60]	; (8003980 <showPage1+0x80>)
 8003942:	f005 ff25 	bl	8009790 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8003946:	4b0d      	ldr	r3, [pc, #52]	; (800397c <showPage1+0x7c>)
 8003948:	789b      	ldrb	r3, [r3, #2]
 800394a:	461a      	mov	r2, r3
 800394c:	f107 0320 	add.w	r3, r7, #32
 8003950:	490c      	ldr	r1, [pc, #48]	; (8003984 <showPage1+0x84>)
 8003952:	4618      	mov	r0, r3
 8003954:	f005 ff1c 	bl	8009790 <siprintf>
		lcdPutStr(0, 0, timeStr, bigDigitsLarabie);
 8003958:	463a      	mov	r2, r7
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <showPage1+0x88>)
 800395c:	2100      	movs	r1, #0
 800395e:	2000      	movs	r0, #0
 8003960:	f7fe febe 	bl	80026e0 <lcdPutStr>
		lcdPutStr(300, 0, fracStr, fontLarabieMedium);
 8003964:	f107 0220 	add.w	r2, r7, #32
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <showPage1+0x8c>)
 800396a:	2100      	movs	r1, #0
 800396c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003970:	f7fe feb6 	bl	80026e0 <lcdPutStr>
}
 8003974:	bf00      	nop
 8003976:	3740      	adds	r7, #64	; 0x40
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200033bc 	.word	0x200033bc
 8003980:	0800cbd4 	.word	0x0800cbd4
 8003984:	0800cbe0 	.word	0x0800cbe0
 8003988:	08016120 	.word	0x08016120
 800398c:	0801a23c 	.word	0x0801a23c

08003990 <showPage2>:
void showPage2(void){
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8003996:	2300      	movs	r3, #0
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	1d3b      	adds	r3, r7, #4
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	611a      	str	r2, [r3, #16]
 80039a8:	615a      	str	r2, [r3, #20]
 80039aa:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 2: STW");
 80039ac:	463b      	mov	r3, r7
 80039ae:	4907      	ldr	r1, [pc, #28]	; (80039cc <showPage2+0x3c>)
 80039b0:	4618      	mov	r0, r3
 80039b2:	f005 feed 	bl	8009790 <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 80039b6:	463a      	mov	r2, r7
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <showPage2+0x40>)
 80039ba:	2100      	movs	r1, #0
 80039bc:	2000      	movs	r0, #0
 80039be:	f7fe fe8f 	bl	80026e0 <lcdPutStr>
}
 80039c2:	bf00      	nop
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	0800cbe8 	.word	0x0800cbe8
 80039d0:	0801a23c 	.word	0x0801a23c

080039d4 <showPage3>:
void showPage3(void){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80039da:	2300      	movs	r3, #0
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	611a      	str	r2, [r3, #16]
 80039ec:	615a      	str	r2, [r3, #20]
 80039ee:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 80039f0:	463b      	mov	r3, r7
 80039f2:	4907      	ldr	r1, [pc, #28]	; (8003a10 <showPage3+0x3c>)
 80039f4:	4618      	mov	r0, r3
 80039f6:	f005 fecb 	bl	8009790 <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 80039fa:	463a      	mov	r2, r7
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <showPage3+0x40>)
 80039fe:	2100      	movs	r1, #0
 8003a00:	2000      	movs	r0, #0
 8003a02:	f7fe fe6d 	bl	80026e0 <lcdPutStr>
}
 8003a06:	bf00      	nop
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	0800cbf4 	.word	0x0800cbf4
 8003a14:	0801a23c 	.word	0x0801a23c

08003a18 <showPage4>:
void showPage4(void){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8003a1e:	2300      	movs	r3, #0
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	611a      	str	r2, [r3, #16]
 8003a30:	615a      	str	r2, [r3, #20]
 8003a32:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 8003a34:	463b      	mov	r3, r7
 8003a36:	4907      	ldr	r1, [pc, #28]	; (8003a54 <showPage4+0x3c>)
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f005 fea9 	bl	8009790 <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 8003a3e:	463a      	mov	r2, r7
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <showPage4+0x40>)
 8003a42:	2100      	movs	r1, #0
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7fe fe4b 	bl	80026e0 <lcdPutStr>
}
 8003a4a:	bf00      	nop
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	0800cc00 	.word	0x0800cc00
 8003a58:	0801a23c 	.word	0x0801a23c

08003a5c <showPage5>:
void showPage5(void){
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8003a62:	2300      	movs	r3, #0
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
 8003a74:	615a      	str	r2, [r3, #20]
 8003a76:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 5: WRLD");
 8003a78:	463b      	mov	r3, r7
 8003a7a:	4907      	ldr	r1, [pc, #28]	; (8003a98 <showPage5+0x3c>)
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f005 fe87 	bl	8009790 <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 8003a82:	463a      	mov	r2, r7
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <showPage5+0x40>)
 8003a86:	2100      	movs	r1, #0
 8003a88:	2000      	movs	r0, #0
 8003a8a:	f7fe fe29 	bl	80026e0 <lcdPutStr>
}
 8003a8e:	bf00      	nop
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	0800cc0c 	.word	0x0800cc0c
 8003a9c:	0801a23c 	.word	0x0801a23c

08003aa0 <showPage6>:
void showPage6(void){
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
 8003ab8:	615a      	str	r2, [r3, #20]
 8003aba:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 6: DLT");
 8003abc:	463b      	mov	r3, r7
 8003abe:	4907      	ldr	r1, [pc, #28]	; (8003adc <showPage6+0x3c>)
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f005 fe65 	bl	8009790 <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 8003ac6:	463a      	mov	r2, r7
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <showPage6+0x40>)
 8003aca:	2100      	movs	r1, #0
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7fe fe07 	bl	80026e0 <lcdPutStr>
}
 8003ad2:	bf00      	nop
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	0800cc1c 	.word	0x0800cc1c
 8003ae0:	0801a23c 	.word	0x0801a23c

08003ae4 <showPage>:

void showPage(uint8_t pageNum){
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d821      	bhi.n	8003b38 <showPage+0x54>
 8003af4:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <showPage+0x18>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b15 	.word	0x08003b15
 8003b00:	08003b1b 	.word	0x08003b1b
 8003b04:	08003b21 	.word	0x08003b21
 8003b08:	08003b27 	.word	0x08003b27
 8003b0c:	08003b2d 	.word	0x08003b2d
 8003b10:	08003b33 	.word	0x08003b33
	case 0:
		showPage1();
 8003b14:	f7ff fef4 	bl	8003900 <showPage1>
		break;
 8003b18:	e00e      	b.n	8003b38 <showPage+0x54>
	case 1:
		showPage2();
 8003b1a:	f7ff ff39 	bl	8003990 <showPage2>
		break;
 8003b1e:	e00b      	b.n	8003b38 <showPage+0x54>
	case 2:
		showPage3();
 8003b20:	f7ff ff58 	bl	80039d4 <showPage3>
		break;
 8003b24:	e008      	b.n	8003b38 <showPage+0x54>
	case 3:
		showPage4();
 8003b26:	f7ff ff77 	bl	8003a18 <showPage4>
		break;
 8003b2a:	e005      	b.n	8003b38 <showPage+0x54>
	case 4:
		showPage5();
 8003b2c:	f7ff ff96 	bl	8003a5c <showPage5>
		break;
 8003b30:	e002      	b.n	8003b38 <showPage+0x54>
	case 5:
		showPage6();
 8003b32:	f7ff ffb5 	bl	8003aa0 <showPage6>
		break;
 8003b36:	bf00      	nop
	}
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
	btn_B2.onSinglePressHandler = &returnToMenu;
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <setDefaultClbcks+0x20>)
 8003b46:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <setDefaultClbcks+0x24>)
 8003b48:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &prevPage;
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <setDefaultClbcks+0x28>)
 8003b4c:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <setDefaultClbcks+0x2c>)
 8003b4e:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextPage;
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <setDefaultClbcks+0x30>)
 8003b52:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <setDefaultClbcks+0x34>)
 8003b54:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;

}
 8003b56:	bf00      	nop
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	20000438 	.word	0x20000438
 8003b64:	08002109 	.word	0x08002109
 8003b68:	20000414 	.word	0x20000414
 8003b6c:	0800388d 	.word	0x0800388d
 8003b70:	200003a8 	.word	0x200003a8
 8003b74:	080038c5 	.word	0x080038c5

08003b78 <timeDescription>:
// functions to execute while menu item highlighted
void timeDescription(void){
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
//	sprintf(&tempStr, "Time will be 24h45.2min");
//	lcdPutStr(0,132, tempStr, smallestFont);
//	lcdPutStr(4,140, tempStr, smallestFont);
//	lcdPutStr(7,180, tempStr, ocrFont);
//	lcdPutStr(4,5, tempStr, font13);
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <timeSetup>:

void timeSetup(void){
 8003b86:	b580      	push	{r7, lr}
 8003b88:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8003b8a:	f7ff ffd9 	bl	8003b40 <setDefaultClbcks>
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <timeMain>:

// functions to execute when menu item entered
void timeMain(void){
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
	showPage(currentPage);
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <timeMain+0x14>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff ffa1 	bl	8003ae4 <showPage>
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200035b1 	.word	0x200035b1

08003bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003be4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bb0:	480d      	ldr	r0, [pc, #52]	; (8003be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bb2:	490e      	ldr	r1, [pc, #56]	; (8003bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bb4:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bb8:	e002      	b.n	8003bc0 <LoopCopyDataInit>

08003bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bbe:	3304      	adds	r3, #4

08003bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bc4:	d3f9      	bcc.n	8003bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bc6:	4a0b      	ldr	r2, [pc, #44]	; (8003bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bc8:	4c0b      	ldr	r4, [pc, #44]	; (8003bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bcc:	e001      	b.n	8003bd2 <LoopFillZerobss>

08003bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bd0:	3204      	adds	r2, #4

08003bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bd4:	d3fb      	bcc.n	8003bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bd6:	f7ff f9a3 	bl	8002f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bda:	f005 f935 	bl	8008e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bde:	f7fe fe2b 	bl	8002838 <main>
  bx  lr    
 8003be2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003be4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bec:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8003bf0:	08020150 	.word	0x08020150
  ldr r2, =_sbss
 8003bf4:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8003bf8:	200035c8 	.word	0x200035c8

08003bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bfc:	e7fe      	b.n	8003bfc <ADC_IRQHandler>
	...

08003c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <HAL_Init+0x40>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0d      	ldr	r2, [pc, #52]	; (8003c40 <HAL_Init+0x40>)
 8003c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_Init+0x40>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <HAL_Init+0x40>)
 8003c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c1c:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <HAL_Init+0x40>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a07      	ldr	r2, [pc, #28]	; (8003c40 <HAL_Init+0x40>)
 8003c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c28:	2003      	movs	r0, #3
 8003c2a:	f000 f94f 	bl	8003ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c2e:	2000      	movs	r0, #0
 8003c30:	f000 f808 	bl	8003c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c34:	f7ff f818 	bl	8002c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023c00 	.word	0x40023c00

08003c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <HAL_InitTick+0x54>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_InitTick+0x58>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	4619      	mov	r1, r3
 8003c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f967 	bl	8003f36 <HAL_SYSTICK_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e00e      	b.n	8003c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b0f      	cmp	r3, #15
 8003c76:	d80a      	bhi.n	8003c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c80:	f000 f92f 	bl	8003ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c84:	4a06      	ldr	r2, [pc, #24]	; (8003ca0 <HAL_InitTick+0x5c>)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e000      	b.n	8003c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000158 	.word	0x20000158
 8003c9c:	20000164 	.word	0x20000164
 8003ca0:	20000160 	.word	0x20000160

08003ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_IncTick+0x20>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_IncTick+0x24>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <HAL_IncTick+0x24>)
 8003cb6:	6013      	str	r3, [r2, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000164 	.word	0x20000164
 8003cc8:	200035b4 	.word	0x200035b4

08003ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return uwTick;
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_GetTick+0x14>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	200035b4 	.word	0x200035b4

08003ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cec:	f7ff ffee 	bl	8003ccc <HAL_GetTick>
 8003cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d005      	beq.n	8003d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_Delay+0x44>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d0a:	bf00      	nop
 8003d0c:	f7ff ffde 	bl	8003ccc <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d8f7      	bhi.n	8003d0c <HAL_Delay+0x28>
  {
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000164 	.word	0x20000164

08003d2c <__NVIC_SetPriorityGrouping>:
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <__NVIC_SetPriorityGrouping+0x44>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d5e:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <__NVIC_SetPriorityGrouping+0x44>)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	60d3      	str	r3, [r2, #12]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <__NVIC_GetPriorityGrouping>:
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <__NVIC_GetPriorityGrouping+0x18>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	f003 0307 	and.w	r3, r3, #7
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <__NVIC_EnableIRQ>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	db0b      	blt.n	8003dba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	f003 021f 	and.w	r2, r3, #31
 8003da8:	4907      	ldr	r1, [pc, #28]	; (8003dc8 <__NVIC_EnableIRQ+0x38>)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2001      	movs	r0, #1
 8003db2:	fa00 f202 	lsl.w	r2, r0, r2
 8003db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000e100 	.word	0xe000e100

08003dcc <__NVIC_SetPriority>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db0a      	blt.n	8003df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	490c      	ldr	r1, [pc, #48]	; (8003e18 <__NVIC_SetPriority+0x4c>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	0112      	lsls	r2, r2, #4
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	440b      	add	r3, r1
 8003df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003df4:	e00a      	b.n	8003e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4908      	ldr	r1, [pc, #32]	; (8003e1c <__NVIC_SetPriority+0x50>)
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	3b04      	subs	r3, #4
 8003e04:	0112      	lsls	r2, r2, #4
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	440b      	add	r3, r1
 8003e0a:	761a      	strb	r2, [r3, #24]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000e100 	.word	0xe000e100
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <NVIC_EncodePriority>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	; 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f1c3 0307 	rsb	r3, r3, #7
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	bf28      	it	cs
 8003e3e:	2304      	movcs	r3, #4
 8003e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d902      	bls.n	8003e50 <NVIC_EncodePriority+0x30>
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3b03      	subs	r3, #3
 8003e4e:	e000      	b.n	8003e52 <NVIC_EncodePriority+0x32>
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	401a      	ands	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e68:	f04f 31ff 	mov.w	r1, #4294967295
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	43d9      	mvns	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e78:	4313      	orrs	r3, r2
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3724      	adds	r7, #36	; 0x24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <SysTick_Config>:
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e98:	d301      	bcc.n	8003e9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e00f      	b.n	8003ebe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ec8 <SysTick_Config+0x40>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ea6:	210f      	movs	r1, #15
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	f7ff ff8e 	bl	8003dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <SysTick_Config+0x40>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eb6:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <SysTick_Config+0x40>)
 8003eb8:	2207      	movs	r2, #7
 8003eba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	e000e010 	.word	0xe000e010

08003ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff29 	bl	8003d2c <__NVIC_SetPriorityGrouping>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ef4:	f7ff ff3e 	bl	8003d74 <__NVIC_GetPriorityGrouping>
 8003ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	6978      	ldr	r0, [r7, #20]
 8003f00:	f7ff ff8e 	bl	8003e20 <NVIC_EncodePriority>
 8003f04:	4602      	mov	r2, r0
 8003f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff ff5d 	bl	8003dcc <__NVIC_SetPriority>
}
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	4603      	mov	r3, r0
 8003f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff31 	bl	8003d90 <__NVIC_EnableIRQ>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff ffa2 	bl	8003e88 <SysTick_Config>
 8003f44:	4603      	mov	r3, r0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f5c:	f7ff feb6 	bl	8003ccc <HAL_GetTick>
 8003f60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d008      	beq.n	8003f80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e052      	b.n	8004026 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0216 	bic.w	r2, r2, #22
 8003f8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d103      	bne.n	8003fb0 <HAL_DMA_Abort+0x62>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0208 	bic.w	r2, r2, #8
 8003fbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fd0:	e013      	b.n	8003ffa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fd2:	f7ff fe7b 	bl	8003ccc <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b05      	cmp	r3, #5
 8003fde:	d90c      	bls.n	8003ffa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2203      	movs	r2, #3
 8003fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e015      	b.n	8004026 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e4      	bne.n	8003fd2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	223f      	movs	r2, #63	; 0x3f
 800400e:	409a      	lsls	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d004      	beq.n	800404c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2280      	movs	r2, #128	; 0x80
 8004046:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e00c      	b.n	8004066 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2205      	movs	r2, #5
 8004050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004074:	b480      	push	{r7}
 8004076:	b089      	sub	sp, #36	; 0x24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	e177      	b.n	8004380 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004090:	2201      	movs	r2, #1
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	f040 8166 	bne.w	800437a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d005      	beq.n	80040c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d130      	bne.n	8004128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	2203      	movs	r2, #3
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040fc:	2201      	movs	r2, #1
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 0201 	and.w	r2, r3, #1
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	2b03      	cmp	r3, #3
 8004132:	d017      	beq.n	8004164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	2203      	movs	r2, #3
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d123      	bne.n	80041b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	08da      	lsrs	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3208      	adds	r2, #8
 8004178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	220f      	movs	r2, #15
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	08da      	lsrs	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3208      	adds	r2, #8
 80041b2:	69b9      	ldr	r1, [r7, #24]
 80041b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	2203      	movs	r2, #3
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 0203 	and.w	r2, r3, #3
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80c0 	beq.w	800437a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	4b66      	ldr	r3, [pc, #408]	; (8004398 <HAL_GPIO_Init+0x324>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	4a65      	ldr	r2, [pc, #404]	; (8004398 <HAL_GPIO_Init+0x324>)
 8004204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004208:	6453      	str	r3, [r2, #68]	; 0x44
 800420a:	4b63      	ldr	r3, [pc, #396]	; (8004398 <HAL_GPIO_Init+0x324>)
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004216:	4a61      	ldr	r2, [pc, #388]	; (800439c <HAL_GPIO_Init+0x328>)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	3302      	adds	r3, #2
 800421e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	220f      	movs	r2, #15
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4013      	ands	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a58      	ldr	r2, [pc, #352]	; (80043a0 <HAL_GPIO_Init+0x32c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d037      	beq.n	80042b2 <HAL_GPIO_Init+0x23e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a57      	ldr	r2, [pc, #348]	; (80043a4 <HAL_GPIO_Init+0x330>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d031      	beq.n	80042ae <HAL_GPIO_Init+0x23a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a56      	ldr	r2, [pc, #344]	; (80043a8 <HAL_GPIO_Init+0x334>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d02b      	beq.n	80042aa <HAL_GPIO_Init+0x236>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a55      	ldr	r2, [pc, #340]	; (80043ac <HAL_GPIO_Init+0x338>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d025      	beq.n	80042a6 <HAL_GPIO_Init+0x232>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a54      	ldr	r2, [pc, #336]	; (80043b0 <HAL_GPIO_Init+0x33c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01f      	beq.n	80042a2 <HAL_GPIO_Init+0x22e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a53      	ldr	r2, [pc, #332]	; (80043b4 <HAL_GPIO_Init+0x340>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d019      	beq.n	800429e <HAL_GPIO_Init+0x22a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a52      	ldr	r2, [pc, #328]	; (80043b8 <HAL_GPIO_Init+0x344>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_GPIO_Init+0x226>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a51      	ldr	r2, [pc, #324]	; (80043bc <HAL_GPIO_Init+0x348>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00d      	beq.n	8004296 <HAL_GPIO_Init+0x222>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a50      	ldr	r2, [pc, #320]	; (80043c0 <HAL_GPIO_Init+0x34c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <HAL_GPIO_Init+0x21e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a4f      	ldr	r2, [pc, #316]	; (80043c4 <HAL_GPIO_Init+0x350>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <HAL_GPIO_Init+0x21a>
 800428a:	2309      	movs	r3, #9
 800428c:	e012      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 800428e:	230a      	movs	r3, #10
 8004290:	e010      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 8004292:	2308      	movs	r3, #8
 8004294:	e00e      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 8004296:	2307      	movs	r3, #7
 8004298:	e00c      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 800429a:	2306      	movs	r3, #6
 800429c:	e00a      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 800429e:	2305      	movs	r3, #5
 80042a0:	e008      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 80042a2:	2304      	movs	r3, #4
 80042a4:	e006      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 80042a6:	2303      	movs	r3, #3
 80042a8:	e004      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e002      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 80042b2:	2300      	movs	r3, #0
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	f002 0203 	and.w	r2, r2, #3
 80042ba:	0092      	lsls	r2, r2, #2
 80042bc:	4093      	lsls	r3, r2
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042c4:	4935      	ldr	r1, [pc, #212]	; (800439c <HAL_GPIO_Init+0x328>)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	3302      	adds	r3, #2
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042d2:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <HAL_GPIO_Init+0x354>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042f6:	4a34      	ldr	r2, [pc, #208]	; (80043c8 <HAL_GPIO_Init+0x354>)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042fc:	4b32      	ldr	r3, [pc, #200]	; (80043c8 <HAL_GPIO_Init+0x354>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004320:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <HAL_GPIO_Init+0x354>)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004326:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <HAL_GPIO_Init+0x354>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800434a:	4a1f      	ldr	r2, [pc, #124]	; (80043c8 <HAL_GPIO_Init+0x354>)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004350:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <HAL_GPIO_Init+0x354>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004374:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <HAL_GPIO_Init+0x354>)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3301      	adds	r3, #1
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	2b0f      	cmp	r3, #15
 8004384:	f67f ae84 	bls.w	8004090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	3724      	adds	r7, #36	; 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800
 800439c:	40013800 	.word	0x40013800
 80043a0:	40020000 	.word	0x40020000
 80043a4:	40020400 	.word	0x40020400
 80043a8:	40020800 	.word	0x40020800
 80043ac:	40020c00 	.word	0x40020c00
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40021400 	.word	0x40021400
 80043b8:	40021800 	.word	0x40021800
 80043bc:	40021c00 	.word	0x40021c00
 80043c0:	40022000 	.word	0x40022000
 80043c4:	40022400 	.word	0x40022400
 80043c8:	40013c00 	.word	0x40013c00

080043cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	887b      	ldrh	r3, [r7, #2]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	e001      	b.n	80043ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800440c:	787b      	ldrb	r3, [r7, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004418:	e003      	b.n	8004422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	041a      	lsls	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	619a      	str	r2, [r3, #24]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004440:	887a      	ldrh	r2, [r7, #2]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4013      	ands	r3, r2
 8004446:	041a      	lsls	r2, r3, #16
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	43d9      	mvns	r1, r3
 800444c:	887b      	ldrh	r3, [r7, #2]
 800444e:	400b      	ands	r3, r1
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	619a      	str	r2, [r3, #24]
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	4013      	ands	r3, r2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d006      	beq.n	8004488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800447a:	4a05      	ldr	r2, [pc, #20]	; (8004490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f806 	bl	8004494 <HAL_GPIO_EXTI_Callback>
  }
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40013c00 	.word	0x40013c00

08004494 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e12b      	b.n	8004716 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fd feba 	bl	800224c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	; 0x24
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800450e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004510:	f001 fc76 	bl	8005e00 <HAL_RCC_GetPCLK1Freq>
 8004514:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4a81      	ldr	r2, [pc, #516]	; (8004720 <HAL_I2C_Init+0x274>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d807      	bhi.n	8004530 <HAL_I2C_Init+0x84>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a80      	ldr	r2, [pc, #512]	; (8004724 <HAL_I2C_Init+0x278>)
 8004524:	4293      	cmp	r3, r2
 8004526:	bf94      	ite	ls
 8004528:	2301      	movls	r3, #1
 800452a:	2300      	movhi	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e006      	b.n	800453e <HAL_I2C_Init+0x92>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a7d      	ldr	r2, [pc, #500]	; (8004728 <HAL_I2C_Init+0x27c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	bf94      	ite	ls
 8004538:	2301      	movls	r3, #1
 800453a:	2300      	movhi	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e0e7      	b.n	8004716 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4a78      	ldr	r2, [pc, #480]	; (800472c <HAL_I2C_Init+0x280>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	0c9b      	lsrs	r3, r3, #18
 8004550:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a6a      	ldr	r2, [pc, #424]	; (8004720 <HAL_I2C_Init+0x274>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d802      	bhi.n	8004580 <HAL_I2C_Init+0xd4>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	3301      	adds	r3, #1
 800457e:	e009      	b.n	8004594 <HAL_I2C_Init+0xe8>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	4a69      	ldr	r2, [pc, #420]	; (8004730 <HAL_I2C_Init+0x284>)
 800458c:	fba2 2303 	umull	r2, r3, r2, r3
 8004590:	099b      	lsrs	r3, r3, #6
 8004592:	3301      	adds	r3, #1
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	430b      	orrs	r3, r1
 800459a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	495c      	ldr	r1, [pc, #368]	; (8004720 <HAL_I2C_Init+0x274>)
 80045b0:	428b      	cmp	r3, r1
 80045b2:	d819      	bhi.n	80045e8 <HAL_I2C_Init+0x13c>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1e59      	subs	r1, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fbb1 f3f3 	udiv	r3, r1, r3
 80045c2:	1c59      	adds	r1, r3, #1
 80045c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045c8:	400b      	ands	r3, r1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_I2C_Init+0x138>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1e59      	subs	r1, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80045dc:	3301      	adds	r3, #1
 80045de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e2:	e051      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 80045e4:	2304      	movs	r3, #4
 80045e6:	e04f      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d111      	bne.n	8004614 <HAL_I2C_Init+0x168>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1e58      	subs	r0, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	440b      	add	r3, r1
 80045fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004602:	3301      	adds	r3, #1
 8004604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e012      	b.n	800463a <HAL_I2C_Init+0x18e>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e58      	subs	r0, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	0099      	lsls	r1, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	fbb0 f3f3 	udiv	r3, r0, r3
 800462a:	3301      	adds	r3, #1
 800462c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_I2C_Init+0x196>
 800463e:	2301      	movs	r3, #1
 8004640:	e022      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10e      	bne.n	8004668 <HAL_I2C_Init+0x1bc>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1e58      	subs	r0, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	440b      	add	r3, r1
 8004658:	fbb0 f3f3 	udiv	r3, r0, r3
 800465c:	3301      	adds	r3, #1
 800465e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004666:	e00f      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1e58      	subs	r0, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	0099      	lsls	r1, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	fbb0 f3f3 	udiv	r3, r0, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	6809      	ldr	r1, [r1, #0]
 800468c:	4313      	orrs	r3, r2
 800468e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6911      	ldr	r1, [r2, #16]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68d2      	ldr	r2, [r2, #12]
 80046c2:	4311      	orrs	r1, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	000186a0 	.word	0x000186a0
 8004724:	001e847f 	.word	0x001e847f
 8004728:	003d08ff 	.word	0x003d08ff
 800472c:	431bde83 	.word	0x431bde83
 8004730:	10624dd3 	.word	0x10624dd3

08004734 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af02      	add	r7, sp, #8
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	4608      	mov	r0, r1
 800473e:	4611      	mov	r1, r2
 8004740:	461a      	mov	r2, r3
 8004742:	4603      	mov	r3, r0
 8004744:	817b      	strh	r3, [r7, #10]
 8004746:	460b      	mov	r3, r1
 8004748:	813b      	strh	r3, [r7, #8]
 800474a:	4613      	mov	r3, r2
 800474c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800474e:	f7ff fabd 	bl	8003ccc <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b20      	cmp	r3, #32
 800475e:	f040 80d9 	bne.w	8004914 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	2319      	movs	r3, #25
 8004768:	2201      	movs	r2, #1
 800476a:	496d      	ldr	r1, [pc, #436]	; (8004920 <HAL_I2C_Mem_Write+0x1ec>)
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fc7f 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
 800477a:	e0cc      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_I2C_Mem_Write+0x56>
 8004786:	2302      	movs	r3, #2
 8004788:	e0c5      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b01      	cmp	r3, #1
 800479e:	d007      	beq.n	80047b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2221      	movs	r2, #33	; 0x21
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2240      	movs	r2, #64	; 0x40
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a3a      	ldr	r2, [r7, #32]
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a4d      	ldr	r2, [pc, #308]	; (8004924 <HAL_I2C_Mem_Write+0x1f0>)
 80047f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047f2:	88f8      	ldrh	r0, [r7, #6]
 80047f4:	893a      	ldrh	r2, [r7, #8]
 80047f6:	8979      	ldrh	r1, [r7, #10]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	4603      	mov	r3, r0
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fab6 	bl	8004d74 <I2C_RequestMemoryWrite>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d052      	beq.n	80048b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e081      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fd00 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00d      	beq.n	800483e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	2b04      	cmp	r3, #4
 8004828:	d107      	bne.n	800483a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004838:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e06b      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b04      	cmp	r3, #4
 800487a:	d11b      	bne.n	80048b4 <HAL_I2C_Mem_Write+0x180>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004880:	2b00      	cmp	r3, #0
 8004882:	d017      	beq.n	80048b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	781a      	ldrb	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1aa      	bne.n	8004812 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fcec 	bl	800529e <I2C_WaitOnBTFFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00d      	beq.n	80048e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d107      	bne.n	80048e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e016      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	e000      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004914:	2302      	movs	r3, #2
  }
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	00100002 	.word	0x00100002
 8004924:	ffff0000 	.word	0xffff0000

08004928 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08c      	sub	sp, #48	; 0x30
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	461a      	mov	r2, r3
 8004936:	4603      	mov	r3, r0
 8004938:	817b      	strh	r3, [r7, #10]
 800493a:	460b      	mov	r3, r1
 800493c:	813b      	strh	r3, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004942:	f7ff f9c3 	bl	8003ccc <HAL_GetTick>
 8004946:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	f040 8208 	bne.w	8004d66 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	2319      	movs	r3, #25
 800495c:	2201      	movs	r2, #1
 800495e:	497b      	ldr	r1, [pc, #492]	; (8004b4c <HAL_I2C_Mem_Read+0x224>)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fb85 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800496c:	2302      	movs	r3, #2
 800496e:	e1fb      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_I2C_Mem_Read+0x56>
 800497a:	2302      	movs	r3, #2
 800497c:	e1f4      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d007      	beq.n	80049a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2222      	movs	r2, #34	; 0x22
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2240      	movs	r2, #64	; 0x40
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a5b      	ldr	r2, [pc, #364]	; (8004b50 <HAL_I2C_Mem_Read+0x228>)
 80049e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049e6:	88f8      	ldrh	r0, [r7, #6]
 80049e8:	893a      	ldrh	r2, [r7, #8]
 80049ea:	8979      	ldrh	r1, [r7, #10]
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	4603      	mov	r3, r0
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fa52 	bl	8004ea0 <I2C_RequestMemoryRead>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e1b0      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d113      	bne.n	8004a36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	623b      	str	r3, [r7, #32]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	623b      	str	r3, [r7, #32]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e184      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d11b      	bne.n	8004a76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e164      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d11b      	bne.n	8004ab6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	e144      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004acc:	e138      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	f200 80f1 	bhi.w	8004cba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d123      	bne.n	8004b28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fc1b 	bl	8005320 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e139      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b26:	e10b      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d14e      	bne.n	8004bce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	2200      	movs	r2, #0
 8004b38:	4906      	ldr	r1, [pc, #24]	; (8004b54 <HAL_I2C_Mem_Read+0x22c>)
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fa98 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e10e      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
 8004b4a:	bf00      	nop
 8004b4c:	00100002 	.word	0x00100002
 8004b50:	ffff0000 	.word	0xffff0000
 8004b54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bcc:	e0b8      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	4966      	ldr	r1, [pc, #408]	; (8004d70 <HAL_I2C_Mem_Read+0x448>)
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 fa49 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0bf      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	2200      	movs	r2, #0
 8004c32:	494f      	ldr	r1, [pc, #316]	; (8004d70 <HAL_I2C_Mem_Read+0x448>)
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fa1b 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e091      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cb8:	e042      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fb2e 	bl	8005320 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e04c      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d118      	bne.n	8004d40 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f47f aec2 	bne.w	8004ace <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e000      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d66:	2302      	movs	r3, #2
  }
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3728      	adds	r7, #40	; 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	00010004 	.word	0x00010004

08004d74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	461a      	mov	r2, r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	817b      	strh	r3, [r7, #10]
 8004d86:	460b      	mov	r3, r1
 8004d88:	813b      	strh	r3, [r7, #8]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f960 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00d      	beq.n	8004dd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc4:	d103      	bne.n	8004dce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e05f      	b.n	8004e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dd2:	897b      	ldrh	r3, [r7, #10]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004de0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	492d      	ldr	r1, [pc, #180]	; (8004e9c <I2C_RequestMemoryWrite+0x128>)
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f998 	bl	800511e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e04c      	b.n	8004e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e10:	6a39      	ldr	r1, [r7, #32]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fa02 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d107      	bne.n	8004e36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e02b      	b.n	8004e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e40:	893b      	ldrh	r3, [r7, #8]
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	611a      	str	r2, [r3, #16]
 8004e4a:	e021      	b.n	8004e90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e4c:	893b      	ldrh	r3, [r7, #8]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5c:	6a39      	ldr	r1, [r7, #32]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f9dc 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00d      	beq.n	8004e86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d107      	bne.n	8004e82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e005      	b.n	8004e92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e86:	893b      	ldrh	r3, [r7, #8]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	00010002 	.word	0x00010002

08004ea0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	4608      	mov	r0, r1
 8004eaa:	4611      	mov	r1, r2
 8004eac:	461a      	mov	r2, r3
 8004eae:	4603      	mov	r3, r0
 8004eb0:	817b      	strh	r3, [r7, #10]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	813b      	strh	r3, [r7, #8]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ec8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f8c2 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f00:	d103      	bne.n	8004f0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0aa      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	6a3a      	ldr	r2, [r7, #32]
 8004f22:	4952      	ldr	r1, [pc, #328]	; (800506c <I2C_RequestMemoryRead+0x1cc>)
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f8fa 	bl	800511e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e097      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	6a39      	ldr	r1, [r7, #32]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f964 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00d      	beq.n	8004f76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d107      	bne.n	8004f72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e076      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d105      	bne.n	8004f88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f7c:	893b      	ldrh	r3, [r7, #8]
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	611a      	str	r2, [r3, #16]
 8004f86:	e021      	b.n	8004fcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f88:	893b      	ldrh	r3, [r7, #8]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f98:	6a39      	ldr	r1, [r7, #32]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f93e 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00d      	beq.n	8004fc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d107      	bne.n	8004fbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e050      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc2:	893b      	ldrh	r3, [r7, #8]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fce:	6a39      	ldr	r1, [r7, #32]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f923 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00d      	beq.n	8004ff8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d107      	bne.n	8004ff4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e035      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005006:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2200      	movs	r2, #0
 8005010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f82b 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00d      	beq.n	800503c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502e:	d103      	bne.n	8005038 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e013      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800503c:	897b      	ldrh	r3, [r7, #10]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	6a3a      	ldr	r2, [r7, #32]
 8005050:	4906      	ldr	r1, [pc, #24]	; (800506c <I2C_RequestMemoryRead+0x1cc>)
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f863 	bl	800511e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	00010002 	.word	0x00010002

08005070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005080:	e025      	b.n	80050ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005088:	d021      	beq.n	80050ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508a:	f7fe fe1f 	bl	8003ccc <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d302      	bcc.n	80050a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d116      	bne.n	80050ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f043 0220 	orr.w	r2, r3, #32
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e023      	b.n	8005116 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	0c1b      	lsrs	r3, r3, #16
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d10d      	bne.n	80050f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	43da      	mvns	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	e00c      	b.n	800510e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	43da      	mvns	r2, r3
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4013      	ands	r3, r2
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	429a      	cmp	r2, r3
 8005112:	d0b6      	beq.n	8005082 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800512c:	e051      	b.n	80051d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513c:	d123      	bne.n	8005186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005156:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f043 0204 	orr.w	r2, r3, #4
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e046      	b.n	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518c:	d021      	beq.n	80051d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518e:	f7fe fd9d 	bl	8003ccc <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d116      	bne.n	80051d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e020      	b.n	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d10c      	bne.n	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	43da      	mvns	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bf14      	ite	ne
 80051ee:	2301      	movne	r3, #1
 80051f0:	2300      	moveq	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	e00b      	b.n	800520e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	43da      	mvns	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4013      	ands	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	bf14      	ite	ne
 8005208:	2301      	movne	r3, #1
 800520a:	2300      	moveq	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d18d      	bne.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005228:	e02d      	b.n	8005286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f8ce 	bl	80053cc <I2C_IsAcknowledgeFailed>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e02d      	b.n	8005296 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d021      	beq.n	8005286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7fe fd43 	bl	8003ccc <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d116      	bne.n	8005286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e007      	b.n	8005296 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	2b80      	cmp	r3, #128	; 0x80
 8005292:	d1ca      	bne.n	800522a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052aa:	e02d      	b.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f88d 	bl	80053cc <I2C_IsAcknowledgeFailed>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e02d      	b.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d021      	beq.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c4:	f7fe fd02 	bl	8003ccc <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d302      	bcc.n	80052da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d116      	bne.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e007      	b.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b04      	cmp	r3, #4
 8005314:	d1ca      	bne.n	80052ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800532c:	e042      	b.n	80053b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b10      	cmp	r3, #16
 800533a:	d119      	bne.n	8005370 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0210 	mvn.w	r2, #16
 8005344:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e029      	b.n	80053c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005370:	f7fe fcac 	bl	8003ccc <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d116      	bne.n	80053b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	f043 0220 	orr.w	r2, r3, #32
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e007      	b.n	80053c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	d1b5      	bne.n	800532e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e2:	d11b      	bne.n	800541c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	f043 0204 	orr.w	r2, r3, #4
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b20      	cmp	r3, #32
 800543e:	d129      	bne.n	8005494 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2224      	movs	r2, #36	; 0x24
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0201 	bic.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0210 	bic.w	r2, r2, #16
 8005466:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	e000      	b.n	8005496 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005494:	2302      	movs	r3, #2
  }
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d12a      	bne.n	8005512 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2224      	movs	r2, #36	; 0x24
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0201 	bic.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80054dc:	89fb      	ldrh	r3, [r7, #14]
 80054de:	f023 030f 	bic.w	r3, r3, #15
 80054e2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	89fb      	ldrh	r3, [r7, #14]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	89fa      	ldrh	r2, [r7, #14]
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0201 	orr.w	r2, r2, #1
 8005504:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	e000      	b.n	8005514 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005512:	2302      	movs	r3, #2
  }
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e267      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d075      	beq.n	800562a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800553e:	4b88      	ldr	r3, [pc, #544]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 030c 	and.w	r3, r3, #12
 8005546:	2b04      	cmp	r3, #4
 8005548:	d00c      	beq.n	8005564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800554a:	4b85      	ldr	r3, [pc, #532]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005552:	2b08      	cmp	r3, #8
 8005554:	d112      	bne.n	800557c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005556:	4b82      	ldr	r3, [pc, #520]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005562:	d10b      	bne.n	800557c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005564:	4b7e      	ldr	r3, [pc, #504]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d05b      	beq.n	8005628 <HAL_RCC_OscConfig+0x108>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d157      	bne.n	8005628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e242      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005584:	d106      	bne.n	8005594 <HAL_RCC_OscConfig+0x74>
 8005586:	4b76      	ldr	r3, [pc, #472]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a75      	ldr	r2, [pc, #468]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 800558c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e01d      	b.n	80055d0 <HAL_RCC_OscConfig+0xb0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800559c:	d10c      	bne.n	80055b8 <HAL_RCC_OscConfig+0x98>
 800559e:	4b70      	ldr	r3, [pc, #448]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a6f      	ldr	r2, [pc, #444]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80055a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	4b6d      	ldr	r3, [pc, #436]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a6c      	ldr	r2, [pc, #432]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e00b      	b.n	80055d0 <HAL_RCC_OscConfig+0xb0>
 80055b8:	4b69      	ldr	r3, [pc, #420]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a68      	ldr	r2, [pc, #416]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80055be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	4b66      	ldr	r3, [pc, #408]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a65      	ldr	r2, [pc, #404]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80055ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d013      	beq.n	8005600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d8:	f7fe fb78 	bl	8003ccc <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055e0:	f7fe fb74 	bl	8003ccc <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b64      	cmp	r3, #100	; 0x64
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e207      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f2:	4b5b      	ldr	r3, [pc, #364]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0xc0>
 80055fe:	e014      	b.n	800562a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005600:	f7fe fb64 	bl	8003ccc <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005608:	f7fe fb60 	bl	8003ccc <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b64      	cmp	r3, #100	; 0x64
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e1f3      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800561a:	4b51      	ldr	r3, [pc, #324]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0xe8>
 8005626:	e000      	b.n	800562a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d063      	beq.n	80056fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005636:	4b4a      	ldr	r3, [pc, #296]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00b      	beq.n	800565a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005642:	4b47      	ldr	r3, [pc, #284]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800564a:	2b08      	cmp	r3, #8
 800564c:	d11c      	bne.n	8005688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800564e:	4b44      	ldr	r3, [pc, #272]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d116      	bne.n	8005688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565a:	4b41      	ldr	r3, [pc, #260]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <HAL_RCC_OscConfig+0x152>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d001      	beq.n	8005672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e1c7      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005672:	4b3b      	ldr	r3, [pc, #236]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4937      	ldr	r1, [pc, #220]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 8005682:	4313      	orrs	r3, r2
 8005684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005686:	e03a      	b.n	80056fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d020      	beq.n	80056d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005690:	4b34      	ldr	r3, [pc, #208]	; (8005764 <HAL_RCC_OscConfig+0x244>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005696:	f7fe fb19 	bl	8003ccc <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800569e:	f7fe fb15 	bl	8003ccc <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e1a8      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b0:	4b2b      	ldr	r3, [pc, #172]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056bc:	4b28      	ldr	r3, [pc, #160]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4925      	ldr	r1, [pc, #148]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	600b      	str	r3, [r1, #0]
 80056d0:	e015      	b.n	80056fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056d2:	4b24      	ldr	r3, [pc, #144]	; (8005764 <HAL_RCC_OscConfig+0x244>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fe faf8 	bl	8003ccc <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056e0:	f7fe faf4 	bl	8003ccc <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e187      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056f2:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d036      	beq.n	8005778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d016      	beq.n	8005740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <HAL_RCC_OscConfig+0x248>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005718:	f7fe fad8 	bl	8003ccc <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005720:	f7fe fad4 	bl	8003ccc <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e167      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005732:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <HAL_RCC_OscConfig+0x240>)
 8005734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0x200>
 800573e:	e01b      	b.n	8005778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005740:	4b09      	ldr	r3, [pc, #36]	; (8005768 <HAL_RCC_OscConfig+0x248>)
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005746:	f7fe fac1 	bl	8003ccc <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800574c:	e00e      	b.n	800576c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800574e:	f7fe fabd 	bl	8003ccc <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d907      	bls.n	800576c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e150      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
 8005760:	40023800 	.word	0x40023800
 8005764:	42470000 	.word	0x42470000
 8005768:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800576c:	4b88      	ldr	r3, [pc, #544]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 800576e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1ea      	bne.n	800574e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8097 	beq.w	80058b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005786:	2300      	movs	r3, #0
 8005788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800578a:	4b81      	ldr	r3, [pc, #516]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10f      	bne.n	80057b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	4b7d      	ldr	r3, [pc, #500]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	4a7c      	ldr	r2, [pc, #496]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 80057a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a4:	6413      	str	r3, [r2, #64]	; 0x40
 80057a6:	4b7a      	ldr	r3, [pc, #488]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b6:	4b77      	ldr	r3, [pc, #476]	; (8005994 <HAL_RCC_OscConfig+0x474>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d118      	bne.n	80057f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057c2:	4b74      	ldr	r3, [pc, #464]	; (8005994 <HAL_RCC_OscConfig+0x474>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a73      	ldr	r2, [pc, #460]	; (8005994 <HAL_RCC_OscConfig+0x474>)
 80057c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ce:	f7fe fa7d 	bl	8003ccc <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d6:	f7fe fa79 	bl	8003ccc <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e10c      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e8:	4b6a      	ldr	r3, [pc, #424]	; (8005994 <HAL_RCC_OscConfig+0x474>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d106      	bne.n	800580a <HAL_RCC_OscConfig+0x2ea>
 80057fc:	4b64      	ldr	r3, [pc, #400]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	4a63      	ldr	r2, [pc, #396]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	6713      	str	r3, [r2, #112]	; 0x70
 8005808:	e01c      	b.n	8005844 <HAL_RCC_OscConfig+0x324>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b05      	cmp	r3, #5
 8005810:	d10c      	bne.n	800582c <HAL_RCC_OscConfig+0x30c>
 8005812:	4b5f      	ldr	r3, [pc, #380]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	4a5e      	ldr	r2, [pc, #376]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 8005818:	f043 0304 	orr.w	r3, r3, #4
 800581c:	6713      	str	r3, [r2, #112]	; 0x70
 800581e:	4b5c      	ldr	r3, [pc, #368]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 8005820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005822:	4a5b      	ldr	r2, [pc, #364]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	6713      	str	r3, [r2, #112]	; 0x70
 800582a:	e00b      	b.n	8005844 <HAL_RCC_OscConfig+0x324>
 800582c:	4b58      	ldr	r3, [pc, #352]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	4a57      	ldr	r2, [pc, #348]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	6713      	str	r3, [r2, #112]	; 0x70
 8005838:	4b55      	ldr	r3, [pc, #340]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 800583a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583c:	4a54      	ldr	r2, [pc, #336]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 800583e:	f023 0304 	bic.w	r3, r3, #4
 8005842:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d015      	beq.n	8005878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584c:	f7fe fa3e 	bl	8003ccc <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005852:	e00a      	b.n	800586a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005854:	f7fe fa3a 	bl	8003ccc <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e0cb      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800586a:	4b49      	ldr	r3, [pc, #292]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0ee      	beq.n	8005854 <HAL_RCC_OscConfig+0x334>
 8005876:	e014      	b.n	80058a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005878:	f7fe fa28 	bl	8003ccc <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800587e:	e00a      	b.n	8005896 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005880:	f7fe fa24 	bl	8003ccc <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f241 3288 	movw	r2, #5000	; 0x1388
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e0b5      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005896:	4b3e      	ldr	r3, [pc, #248]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 8005898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1ee      	bne.n	8005880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d105      	bne.n	80058b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a8:	4b39      	ldr	r3, [pc, #228]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	4a38      	ldr	r2, [pc, #224]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 80058ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80a1 	beq.w	8005a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058be:	4b34      	ldr	r3, [pc, #208]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 030c 	and.w	r3, r3, #12
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d05c      	beq.n	8005984 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d141      	bne.n	8005956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d2:	4b31      	ldr	r3, [pc, #196]	; (8005998 <HAL_RCC_OscConfig+0x478>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d8:	f7fe f9f8 	bl	8003ccc <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e0:	f7fe f9f4 	bl	8003ccc <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e087      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f2:	4b27      	ldr	r3, [pc, #156]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	019b      	lsls	r3, r3, #6
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	3b01      	subs	r3, #1
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	061b      	lsls	r3, r3, #24
 8005922:	491b      	ldr	r1, [pc, #108]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 8005924:	4313      	orrs	r3, r2
 8005926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <HAL_RCC_OscConfig+0x478>)
 800592a:	2201      	movs	r2, #1
 800592c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592e:	f7fe f9cd 	bl	8003ccc <HAL_GetTick>
 8005932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005936:	f7fe f9c9 	bl	8003ccc <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e05c      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005948:	4b11      	ldr	r3, [pc, #68]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0f0      	beq.n	8005936 <HAL_RCC_OscConfig+0x416>
 8005954:	e054      	b.n	8005a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <HAL_RCC_OscConfig+0x478>)
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595c:	f7fe f9b6 	bl	8003ccc <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005964:	f7fe f9b2 	bl	8003ccc <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e045      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005976:	4b06      	ldr	r3, [pc, #24]	; (8005990 <HAL_RCC_OscConfig+0x470>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f0      	bne.n	8005964 <HAL_RCC_OscConfig+0x444>
 8005982:	e03d      	b.n	8005a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d107      	bne.n	800599c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e038      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
 8005990:	40023800 	.word	0x40023800
 8005994:	40007000 	.word	0x40007000
 8005998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800599c:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <HAL_RCC_OscConfig+0x4ec>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d028      	beq.n	80059fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d121      	bne.n	80059fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d11a      	bne.n	80059fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d111      	bne.n	80059fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	085b      	lsrs	r3, r3, #1
 80059e4:	3b01      	subs	r3, #1
 80059e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d107      	bne.n	80059fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800

08005a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e0cc      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a24:	4b68      	ldr	r3, [pc, #416]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d90c      	bls.n	8005a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a32:	4b65      	ldr	r3, [pc, #404]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0b8      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d020      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a64:	4b59      	ldr	r3, [pc, #356]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	4a58      	ldr	r2, [pc, #352]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a7c:	4b53      	ldr	r3, [pc, #332]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4a52      	ldr	r2, [pc, #328]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a88:	4b50      	ldr	r3, [pc, #320]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	494d      	ldr	r1, [pc, #308]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d044      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d107      	bne.n	8005abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d119      	bne.n	8005aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e07f      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d003      	beq.n	8005ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d107      	bne.n	8005ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ace:	4b3f      	ldr	r3, [pc, #252]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e06f      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ade:	4b3b      	ldr	r3, [pc, #236]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e067      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aee:	4b37      	ldr	r3, [pc, #220]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f023 0203 	bic.w	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4934      	ldr	r1, [pc, #208]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b00:	f7fe f8e4 	bl	8003ccc <HAL_GetTick>
 8005b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b06:	e00a      	b.n	8005b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b08:	f7fe f8e0 	bl	8003ccc <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e04f      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b1e:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 020c 	and.w	r2, r3, #12
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d1eb      	bne.n	8005b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b30:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d20c      	bcs.n	8005b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3e:	4b22      	ldr	r3, [pc, #136]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b46:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d001      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e032      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b64:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4916      	ldr	r1, [pc, #88]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	490e      	ldr	r1, [pc, #56]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b96:	f000 f821 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	091b      	lsrs	r3, r3, #4
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	490a      	ldr	r1, [pc, #40]	; (8005bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005ba8:	5ccb      	ldrb	r3, [r1, r3]
 8005baa:	fa22 f303 	lsr.w	r3, r2, r3
 8005bae:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fe f844 	bl	8003c44 <HAL_InitTick>

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40023c00 	.word	0x40023c00
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	08010480 	.word	0x08010480
 8005bd4:	20000158 	.word	0x20000158
 8005bd8:	20000160 	.word	0x20000160

08005bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be0:	b094      	sub	sp, #80	; 0x50
 8005be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	647b      	str	r3, [r7, #68]	; 0x44
 8005be8:	2300      	movs	r3, #0
 8005bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bec:	2300      	movs	r3, #0
 8005bee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bf4:	4b79      	ldr	r3, [pc, #484]	; (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 030c 	and.w	r3, r3, #12
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d00d      	beq.n	8005c1c <HAL_RCC_GetSysClockFreq+0x40>
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	f200 80e1 	bhi.w	8005dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_RCC_GetSysClockFreq+0x34>
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d003      	beq.n	8005c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c0e:	e0db      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c10:	4b73      	ldr	r3, [pc, #460]	; (8005de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c14:	e0db      	b.n	8005dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c16:	4b73      	ldr	r3, [pc, #460]	; (8005de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c1a:	e0d8      	b.n	8005dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c1c:	4b6f      	ldr	r3, [pc, #444]	; (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c26:	4b6d      	ldr	r3, [pc, #436]	; (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d063      	beq.n	8005cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c32:	4b6a      	ldr	r3, [pc, #424]	; (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	099b      	lsrs	r3, r3, #6
 8005c38:	2200      	movs	r2, #0
 8005c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c44:	633b      	str	r3, [r7, #48]	; 0x30
 8005c46:	2300      	movs	r3, #0
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c4e:	4622      	mov	r2, r4
 8005c50:	462b      	mov	r3, r5
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f04f 0100 	mov.w	r1, #0
 8005c5a:	0159      	lsls	r1, r3, #5
 8005c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c60:	0150      	lsls	r0, r2, #5
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4621      	mov	r1, r4
 8005c68:	1a51      	subs	r1, r2, r1
 8005c6a:	6139      	str	r1, [r7, #16]
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c80:	4659      	mov	r1, fp
 8005c82:	018b      	lsls	r3, r1, #6
 8005c84:	4651      	mov	r1, sl
 8005c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	018a      	lsls	r2, r1, #6
 8005c8e:	4651      	mov	r1, sl
 8005c90:	ebb2 0801 	subs.w	r8, r2, r1
 8005c94:	4659      	mov	r1, fp
 8005c96:	eb63 0901 	sbc.w	r9, r3, r1
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cae:	4690      	mov	r8, r2
 8005cb0:	4699      	mov	r9, r3
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	eb18 0303 	adds.w	r3, r8, r3
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	462b      	mov	r3, r5
 8005cbc:	eb49 0303 	adc.w	r3, r9, r3
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cce:	4629      	mov	r1, r5
 8005cd0:	024b      	lsls	r3, r1, #9
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cd8:	4621      	mov	r1, r4
 8005cda:	024a      	lsls	r2, r1, #9
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cec:	f7fa ffbc 	bl	8000c68 <__aeabi_uldivmod>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf8:	e058      	b.n	8005dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cfa:	4b38      	ldr	r3, [pc, #224]	; (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	099b      	lsrs	r3, r3, #6
 8005d00:	2200      	movs	r2, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	4611      	mov	r1, r2
 8005d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d0a:	623b      	str	r3, [r7, #32]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	f04f 0000 	mov.w	r0, #0
 8005d1c:	f04f 0100 	mov.w	r1, #0
 8005d20:	0159      	lsls	r1, r3, #5
 8005d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d26:	0150      	lsls	r0, r2, #5
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d32:	4649      	mov	r1, r9
 8005d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8005d50:	eb63 050b 	sbc.w	r5, r3, fp
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	00eb      	lsls	r3, r5, #3
 8005d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d62:	00e2      	lsls	r2, r4, #3
 8005d64:	4614      	mov	r4, r2
 8005d66:	461d      	mov	r5, r3
 8005d68:	4643      	mov	r3, r8
 8005d6a:	18e3      	adds	r3, r4, r3
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	464b      	mov	r3, r9
 8005d70:	eb45 0303 	adc.w	r3, r5, r3
 8005d74:	607b      	str	r3, [r7, #4]
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d82:	4629      	mov	r1, r5
 8005d84:	028b      	lsls	r3, r1, #10
 8005d86:	4621      	mov	r1, r4
 8005d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	028a      	lsls	r2, r1, #10
 8005d90:	4610      	mov	r0, r2
 8005d92:	4619      	mov	r1, r3
 8005d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d96:	2200      	movs	r2, #0
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	61fa      	str	r2, [r7, #28]
 8005d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005da0:	f7fa ff62 	bl	8000c68 <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4613      	mov	r3, r2
 8005daa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dac:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	0c1b      	lsrs	r3, r3, #16
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	3301      	adds	r3, #1
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dc6:	e002      	b.n	8005dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3750      	adds	r7, #80	; 0x50
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dda:	bf00      	nop
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	00f42400 	.word	0x00f42400
 8005de4:	007a1200 	.word	0x007a1200

08005de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8005dee:	681b      	ldr	r3, [r3, #0]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000158 	.word	0x20000158

08005e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e04:	f7ff fff0 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	0a9b      	lsrs	r3, r3, #10
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	4903      	ldr	r1, [pc, #12]	; (8005e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e16:	5ccb      	ldrb	r3, [r1, r3]
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40023800 	.word	0x40023800
 8005e24:	08010490 	.word	0x08010490

08005e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e2c:	f7ff ffdc 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 8005e30:	4602      	mov	r2, r0
 8005e32:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	0b5b      	lsrs	r3, r3, #13
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	4903      	ldr	r1, [pc, #12]	; (8005e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e3e:	5ccb      	ldrb	r3, [r1, r3]
 8005e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	08010490 	.word	0x08010490

08005e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d105      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d075      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e84:	4b91      	ldr	r3, [pc, #580]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e8a:	f7fd ff1f 	bl	8003ccc <HAL_GetTick>
 8005e8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e92:	f7fd ff1b 	bl	8003ccc <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e189      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ea4:	4b8a      	ldr	r3, [pc, #552]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f0      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d009      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	019a      	lsls	r2, r3, #6
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	071b      	lsls	r3, r3, #28
 8005ec8:	4981      	ldr	r1, [pc, #516]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01f      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005edc:	4b7c      	ldr	r3, [pc, #496]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee2:	0f1b      	lsrs	r3, r3, #28
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	019a      	lsls	r2, r3, #6
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	061b      	lsls	r3, r3, #24
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	071b      	lsls	r3, r3, #28
 8005efc:	4974      	ldr	r1, [pc, #464]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f04:	4b72      	ldr	r3, [pc, #456]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f0a:	f023 021f 	bic.w	r2, r3, #31
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	496e      	ldr	r1, [pc, #440]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00d      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	019a      	lsls	r2, r3, #6
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	061b      	lsls	r3, r3, #24
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	071b      	lsls	r3, r3, #28
 8005f3c:	4964      	ldr	r1, [pc, #400]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f44:	4b61      	ldr	r3, [pc, #388]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f4a:	f7fd febf 	bl	8003ccc <HAL_GetTick>
 8005f4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f50:	e008      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f52:	f7fd febb 	bl	8003ccc <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e129      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f64:	4b5a      	ldr	r3, [pc, #360]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0f0      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d105      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d079      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f88:	4b52      	ldr	r3, [pc, #328]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f8e:	f7fd fe9d 	bl	8003ccc <HAL_GetTick>
 8005f92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f94:	e008      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f96:	f7fd fe99 	bl	8003ccc <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e107      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fa8:	4b49      	ldr	r3, [pc, #292]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fb4:	d0ef      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d020      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005fc2:	4b43      	ldr	r3, [pc, #268]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc8:	0f1b      	lsrs	r3, r3, #28
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	019a      	lsls	r2, r3, #6
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	061b      	lsls	r3, r3, #24
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	071b      	lsls	r3, r3, #28
 8005fe2:	493b      	ldr	r1, [pc, #236]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005fea:	4b39      	ldr	r3, [pc, #228]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	4934      	ldr	r1, [pc, #208]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01e      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006010:	4b2f      	ldr	r3, [pc, #188]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	0e1b      	lsrs	r3, r3, #24
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	019a      	lsls	r2, r3, #6
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	061b      	lsls	r3, r3, #24
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	071b      	lsls	r3, r3, #28
 8006030:	4927      	ldr	r1, [pc, #156]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006038:	4b25      	ldr	r3, [pc, #148]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800603a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800603e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	4922      	ldr	r1, [pc, #136]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800604e:	4b21      	ldr	r3, [pc, #132]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006054:	f7fd fe3a 	bl	8003ccc <HAL_GetTick>
 8006058:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800605c:	f7fd fe36 	bl	8003ccc <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e0a4      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800606e:	4b18      	ldr	r3, [pc, #96]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800607a:	d1ef      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 808b 	beq.w	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	4a0f      	ldr	r2, [pc, #60]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006098:	6413      	str	r3, [r2, #64]	; 0x40
 800609a:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060a6:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a0b      	ldr	r2, [pc, #44]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80060ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060b2:	f7fd fe0b 	bl	8003ccc <HAL_GetTick>
 80060b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060b8:	e010      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060ba:	f7fd fe07 	bl	8003ccc <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d909      	bls.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e075      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80060cc:	42470068 	.word	0x42470068
 80060d0:	40023800 	.word	0x40023800
 80060d4:	42470070 	.word	0x42470070
 80060d8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060dc:	4b38      	ldr	r3, [pc, #224]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0e8      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060e8:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d02f      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	429a      	cmp	r2, r3
 8006104:	d028      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006106:	4b2f      	ldr	r3, [pc, #188]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006110:	4b2d      	ldr	r3, [pc, #180]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006116:	4b2c      	ldr	r3, [pc, #176]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800611c:	4a29      	ldr	r2, [pc, #164]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006122:	4b28      	ldr	r3, [pc, #160]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b01      	cmp	r3, #1
 800612c:	d114      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800612e:	f7fd fdcd 	bl	8003ccc <HAL_GetTick>
 8006132:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006134:	e00a      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006136:	f7fd fdc9 	bl	8003ccc <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	f241 3288 	movw	r2, #5000	; 0x1388
 8006144:	4293      	cmp	r3, r2
 8006146:	d901      	bls.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e035      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614c:	4b1d      	ldr	r3, [pc, #116]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800614e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0ee      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006164:	d10d      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006166:	4b17      	ldr	r3, [pc, #92]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617a:	4912      	ldr	r1, [pc, #72]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800617c:	4313      	orrs	r3, r2
 800617e:	608b      	str	r3, [r1, #8]
 8006180:	e005      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	4a0f      	ldr	r2, [pc, #60]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006188:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800618c:	6093      	str	r3, [r2, #8]
 800618e:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800619a:	490a      	ldr	r1, [pc, #40]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800619c:	4313      	orrs	r3, r2
 800619e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d004      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80061b4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40007000 	.word	0x40007000
 80061c4:	40023800 	.word	0x40023800
 80061c8:	42470e40 	.word	0x42470e40
 80061cc:	424711e0 	.word	0x424711e0

080061d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e066      	b.n	80062b4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	7f5b      	ldrb	r3, [r3, #29]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fc fc8e 	bl	8002b18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	22ca      	movs	r2, #202	; 0xca
 8006208:	625a      	str	r2, [r3, #36]	; 0x24
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2253      	movs	r2, #83	; 0x53
 8006210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa45 	bl	80066a2 <RTC_EnterInitMode>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d12c      	bne.n	800627c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6812      	ldr	r2, [r2, #0]
 800622c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006234:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6899      	ldr	r1, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68d2      	ldr	r2, [r2, #12]
 800625c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6919      	ldr	r1, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	041a      	lsls	r2, r3, #16
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fa4c 	bl	8006710 <RTC_ExitInitMode>
 8006278:	4603      	mov	r3, r0
 800627a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d113      	bne.n	80062aa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006290:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699a      	ldr	r2, [r3, #24]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	22ff      	movs	r2, #255	; 0xff
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80062bc:	b590      	push	{r4, r7, lr}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	7f1b      	ldrb	r3, [r3, #28]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_RTC_SetTime+0x1c>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e087      	b.n	80063e8 <HAL_RTC_SetTime+0x12c>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2202      	movs	r2, #2
 80062e2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d126      	bne.n	8006338 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2200      	movs	r2, #0
 80062fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fa29 	bl	800675a <RTC_ByteToBcd2>
 8006308:	4603      	mov	r3, r0
 800630a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fa22 	bl	800675a <RTC_ByteToBcd2>
 8006316:	4603      	mov	r3, r0
 8006318:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800631a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	789b      	ldrb	r3, [r3, #2]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fa1a 	bl	800675a <RTC_ByteToBcd2>
 8006326:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006328:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	78db      	ldrb	r3, [r3, #3]
 8006330:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	e018      	b.n	800636a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d102      	bne.n	800634c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2200      	movs	r2, #0
 800634a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	785b      	ldrb	r3, [r3, #1]
 8006356:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006358:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800635e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	78db      	ldrb	r3, [r3, #3]
 8006364:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	22ca      	movs	r2, #202	; 0xca
 8006370:	625a      	str	r2, [r3, #36]	; 0x24
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2253      	movs	r2, #83	; 0x53
 8006378:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f991 	bl	80066a2 <RTC_EnterInitMode>
 8006380:	4603      	mov	r3, r0
 8006382:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d120      	bne.n	80063cc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006394:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006398:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6899      	ldr	r1, [r3, #8]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	431a      	orrs	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 f9a4 	bl	8006710 <RTC_ExitInitMode>
 80063c8:	4603      	mov	r3, r0
 80063ca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80063cc:	7cfb      	ldrb	r3, [r7, #19]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	22ff      	movs	r2, #255	; 0xff
 80063de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	771a      	strb	r2, [r3, #28]

  return status;
 80063e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	371c      	adds	r7, #28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd90      	pop	{r4, r7, pc}

080063f0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006422:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006426:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	0c1b      	lsrs	r3, r3, #16
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006432:	b2da      	uxtb	r2, r3
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	0a1b      	lsrs	r3, r3, #8
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006442:	b2da      	uxtb	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006450:	b2da      	uxtb	r2, r3
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	0d9b      	lsrs	r3, r3, #22
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	b2da      	uxtb	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d11a      	bne.n	80064a2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 f98f 	bl	8006794 <RTC_Bcd2ToByte>
 8006476:	4603      	mov	r3, r0
 8006478:	461a      	mov	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f986 	bl	8006794 <RTC_Bcd2ToByte>
 8006488:	4603      	mov	r3, r0
 800648a:	461a      	mov	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	789b      	ldrb	r3, [r3, #2]
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f97d 	bl	8006794 <RTC_Bcd2ToByte>
 800649a:	4603      	mov	r3, r0
 800649c:	461a      	mov	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064ac:	b590      	push	{r4, r7, lr}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	7f1b      	ldrb	r3, [r3, #28]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_RTC_SetDate+0x1c>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e071      	b.n	80065ac <HAL_RTC_SetDate+0x100>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2201      	movs	r2, #1
 80064cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2202      	movs	r2, #2
 80064d2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10e      	bne.n	80064f8 <HAL_RTC_SetDate+0x4c>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d008      	beq.n	80064f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	f023 0310 	bic.w	r3, r3, #16
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	330a      	adds	r3, #10
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d11c      	bne.n	8006538 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	78db      	ldrb	r3, [r3, #3]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 f929 	bl	800675a <RTC_ByteToBcd2>
 8006508:	4603      	mov	r3, r0
 800650a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 f922 	bl	800675a <RTC_ByteToBcd2>
 8006516:	4603      	mov	r3, r0
 8006518:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800651a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	789b      	ldrb	r3, [r3, #2]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 f91a 	bl	800675a <RTC_ByteToBcd2>
 8006526:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006528:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e00e      	b.n	8006556 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	78db      	ldrb	r3, [r3, #3]
 800653c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	785b      	ldrb	r3, [r3, #1]
 8006542:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006544:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800654a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	22ca      	movs	r2, #202	; 0xca
 800655c:	625a      	str	r2, [r3, #36]	; 0x24
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2253      	movs	r2, #83	; 0x53
 8006564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 f89b 	bl	80066a2 <RTC_EnterInitMode>
 800656c:	4603      	mov	r3, r0
 800656e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006570:	7cfb      	ldrb	r3, [r7, #19]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10c      	bne.n	8006590 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006580:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006584:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 f8c2 	bl	8006710 <RTC_ExitInitMode>
 800658c:	4603      	mov	r3, r0
 800658e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006590:	7cfb      	ldrb	r3, [r7, #19]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d102      	bne.n	800659c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	22ff      	movs	r2, #255	; 0xff
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	771a      	strb	r2, [r3, #28]

  return status;
 80065aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd90      	pop	{r4, r7, pc}

080065b4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80065d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	0c1b      	lsrs	r3, r3, #16
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	0a1b      	lsrs	r3, r3, #8
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	0b5b      	lsrs	r3, r3, #13
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	b2da      	uxtb	r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d11a      	bne.n	8006648 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	78db      	ldrb	r3, [r3, #3]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f8bc 	bl	8006794 <RTC_Bcd2ToByte>
 800661c:	4603      	mov	r3, r0
 800661e:	461a      	mov	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 f8b3 	bl	8006794 <RTC_Bcd2ToByte>
 800662e:	4603      	mov	r3, r0
 8006630:	461a      	mov	r2, r3
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	789b      	ldrb	r3, [r3, #2]
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f8aa 	bl	8006794 <RTC_Bcd2ToByte>
 8006640:	4603      	mov	r3, r0
 8006642:	461a      	mov	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800666c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800666e:	f7fd fb2d 	bl	8003ccc <HAL_GetTick>
 8006672:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006674:	e009      	b.n	800668a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006676:	f7fd fb29 	bl	8003ccc <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006684:	d901      	bls.n	800668a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e007      	b.n	800669a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0ee      	beq.n	8006676 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d122      	bne.n	8006706 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066d0:	f7fd fafc 	bl	8003ccc <HAL_GetTick>
 80066d4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80066d6:	e00c      	b.n	80066f2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066d8:	f7fd faf8 	bl	8003ccc <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066e6:	d904      	bls.n	80066f2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2204      	movs	r2, #4
 80066ec:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <RTC_EnterInitMode+0x64>
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d1e8      	bne.n	80066d8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800672a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10a      	bne.n	8006750 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff ff89 	bl	8006652 <HAL_RTC_WaitForSynchro>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d004      	beq.n	8006750 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2204      	movs	r2, #4
 800674a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	4603      	mov	r3, r0
 8006762:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006768:	e005      	b.n	8006776 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	3301      	adds	r3, #1
 800676e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	3b0a      	subs	r3, #10
 8006774:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	2b09      	cmp	r3, #9
 800677a:	d8f6      	bhi.n	800676a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	b2da      	uxtb	r2, r3
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	4313      	orrs	r3, r2
 8006786:	b2db      	uxtb	r3, r3
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	0092      	lsls	r2, r2, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80067b2:	79fb      	ldrb	r3, [r7, #7]
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	4413      	add	r3, r2
 80067be:	b2db      	uxtb	r3, r3
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e07b      	b.n	80068d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d108      	bne.n	80067f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ee:	d009      	beq.n	8006804 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	61da      	str	r2, [r3, #28]
 80067f6:	e005      	b.n	8006804 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7fc f9da 	bl	8002bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006888:	ea42 0103 	orr.w	r1, r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006890:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	0c1b      	lsrs	r3, r3, #16
 80068a2:	f003 0104 	and.w	r1, r3, #4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	f003 0210 	and.w	r2, r3, #16
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b088      	sub	sp, #32
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	603b      	str	r3, [r7, #0]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_SPI_Transmit+0x22>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e126      	b.n	8006b4e <HAL_SPI_Transmit+0x270>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006908:	f7fd f9e0 	bl	8003ccc <HAL_GetTick>
 800690c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b01      	cmp	r3, #1
 800691c:	d002      	beq.n	8006924 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800691e:	2302      	movs	r3, #2
 8006920:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006922:	e10b      	b.n	8006b3c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <HAL_SPI_Transmit+0x52>
 800692a:	88fb      	ldrh	r3, [r7, #6]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d102      	bne.n	8006936 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006934:	e102      	b.n	8006b3c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2203      	movs	r2, #3
 800693a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	88fa      	ldrh	r2, [r7, #6]
 800694e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	88fa      	ldrh	r2, [r7, #6]
 8006954:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697c:	d10f      	bne.n	800699e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800698c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800699c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	d007      	beq.n	80069bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c4:	d14b      	bne.n	8006a5e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <HAL_SPI_Transmit+0xf6>
 80069ce:	8afb      	ldrh	r3, [r7, #22]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d13e      	bne.n	8006a52 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	881a      	ldrh	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069f8:	e02b      	b.n	8006a52 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d112      	bne.n	8006a2e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0c:	881a      	ldrh	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	1c9a      	adds	r2, r3, #2
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a2c:	e011      	b.n	8006a52 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a2e:	f7fd f94d 	bl	8003ccc <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d803      	bhi.n	8006a46 <HAL_SPI_Transmit+0x168>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d102      	bne.n	8006a4c <HAL_SPI_Transmit+0x16e>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a50:	e074      	b.n	8006b3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1ce      	bne.n	80069fa <HAL_SPI_Transmit+0x11c>
 8006a5c:	e04c      	b.n	8006af8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <HAL_SPI_Transmit+0x18e>
 8006a66:	8afb      	ldrh	r3, [r7, #22]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d140      	bne.n	8006aee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	330c      	adds	r3, #12
 8006a76:	7812      	ldrb	r2, [r2, #0]
 8006a78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a92:	e02c      	b.n	8006aee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d113      	bne.n	8006aca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	7812      	ldrb	r2, [r2, #0]
 8006aae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ac8:	e011      	b.n	8006aee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aca:	f7fd f8ff 	bl	8003ccc <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d803      	bhi.n	8006ae2 <HAL_SPI_Transmit+0x204>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d102      	bne.n	8006ae8 <HAL_SPI_Transmit+0x20a>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006aec:	e026      	b.n	8006b3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1cd      	bne.n	8006a94 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f8b3 	bl	8006c68 <SPI_EndRxTxTransaction>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b16:	2300      	movs	r3, #0
 8006b18:	613b      	str	r3, [r7, #16]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	77fb      	strb	r3, [r7, #31]
 8006b38:	e000      	b.n	8006b3c <HAL_SPI_Transmit+0x25e>
  }

error:
 8006b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3720      	adds	r7, #32
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	4613      	mov	r3, r2
 8006b66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b68:	f7fd f8b0 	bl	8003ccc <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	1a9b      	subs	r3, r3, r2
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	4413      	add	r3, r2
 8006b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b78:	f7fd f8a8 	bl	8003ccc <HAL_GetTick>
 8006b7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b7e:	4b39      	ldr	r3, [pc, #228]	; (8006c64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	015b      	lsls	r3, r3, #5
 8006b84:	0d1b      	lsrs	r3, r3, #20
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	fb02 f303 	mul.w	r3, r2, r3
 8006b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b8e:	e054      	b.n	8006c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b96:	d050      	beq.n	8006c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b98:	f7fd f898 	bl	8003ccc <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d902      	bls.n	8006bae <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d13d      	bne.n	8006c2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bc6:	d111      	bne.n	8006bec <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd0:	d004      	beq.n	8006bdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bda:	d107      	bne.n	8006bec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf4:	d10f      	bne.n	8006c16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e017      	b.n	8006c5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4013      	ands	r3, r2
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	bf0c      	ite	eq
 8006c4a:	2301      	moveq	r3, #1
 8006c4c:	2300      	movne	r3, #0
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	461a      	mov	r2, r3
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d19b      	bne.n	8006b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000158 	.word	0x20000158

08006c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c74:	4b1b      	ldr	r3, [pc, #108]	; (8006ce4 <SPI_EndRxTxTransaction+0x7c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1b      	ldr	r2, [pc, #108]	; (8006ce8 <SPI_EndRxTxTransaction+0x80>)
 8006c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7e:	0d5b      	lsrs	r3, r3, #21
 8006c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c84:	fb02 f303 	mul.w	r3, r2, r3
 8006c88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c92:	d112      	bne.n	8006cba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2180      	movs	r1, #128	; 0x80
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff ff5a 	bl	8006b58 <SPI_WaitFlagStateUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d016      	beq.n	8006cd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cae:	f043 0220 	orr.w	r2, r3, #32
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e00f      	b.n	8006cda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd0:	2b80      	cmp	r3, #128	; 0x80
 8006cd2:	d0f2      	beq.n	8006cba <SPI_EndRxTxTransaction+0x52>
 8006cd4:	e000      	b.n	8006cd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006cd6:	bf00      	nop
  }

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000158 	.word	0x20000158
 8006ce8:	165e9f81 	.word	0x165e9f81

08006cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e041      	b.n	8006d82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fc fa00 	bl	8003118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f000 fc7a 	bl	8007624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d001      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e04e      	b.n	8006e42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0201 	orr.w	r2, r2, #1
 8006dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a23      	ldr	r2, [pc, #140]	; (8006e50 <HAL_TIM_Base_Start_IT+0xc4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d022      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dce:	d01d      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a1f      	ldr	r2, [pc, #124]	; (8006e54 <HAL_TIM_Base_Start_IT+0xc8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d018      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <HAL_TIM_Base_Start_IT+0xcc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d013      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1c      	ldr	r2, [pc, #112]	; (8006e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00e      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1b      	ldr	r2, [pc, #108]	; (8006e60 <HAL_TIM_Base_Start_IT+0xd4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d009      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a19      	ldr	r2, [pc, #100]	; (8006e64 <HAL_TIM_Base_Start_IT+0xd8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d111      	bne.n	8006e30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b06      	cmp	r3, #6
 8006e1c:	d010      	beq.n	8006e40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0201 	orr.w	r2, r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2e:	e007      	b.n	8006e40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40010000 	.word	0x40010000
 8006e54:	40000400 	.word	0x40000400
 8006e58:	40000800 	.word	0x40000800
 8006e5c:	40000c00 	.word	0x40000c00
 8006e60:	40010400 	.word	0x40010400
 8006e64:	40014000 	.word	0x40014000
 8006e68:	40001800 	.word	0x40001800

08006e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e041      	b.n	8006f02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f839 	bl	8006f0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4610      	mov	r0, r2
 8006eac:	f000 fbba 	bl	8007624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d109      	bne.n	8006f44 <HAL_TIM_PWM_Start+0x24>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	bf14      	ite	ne
 8006f3c:	2301      	movne	r3, #1
 8006f3e:	2300      	moveq	r3, #0
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	e022      	b.n	8006f8a <HAL_TIM_PWM_Start+0x6a>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d109      	bne.n	8006f5e <HAL_TIM_PWM_Start+0x3e>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	bf14      	ite	ne
 8006f56:	2301      	movne	r3, #1
 8006f58:	2300      	moveq	r3, #0
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	e015      	b.n	8006f8a <HAL_TIM_PWM_Start+0x6a>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d109      	bne.n	8006f78 <HAL_TIM_PWM_Start+0x58>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	bf14      	ite	ne
 8006f70:	2301      	movne	r3, #1
 8006f72:	2300      	moveq	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	e008      	b.n	8006f8a <HAL_TIM_PWM_Start+0x6a>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	bf14      	ite	ne
 8006f84:	2301      	movne	r3, #1
 8006f86:	2300      	moveq	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e07c      	b.n	800708c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <HAL_TIM_PWM_Start+0x82>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fa0:	e013      	b.n	8006fca <HAL_TIM_PWM_Start+0xaa>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d104      	bne.n	8006fb2 <HAL_TIM_PWM_Start+0x92>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fb0:	e00b      	b.n	8006fca <HAL_TIM_PWM_Start+0xaa>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d104      	bne.n	8006fc2 <HAL_TIM_PWM_Start+0xa2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fc0:	e003      	b.n	8006fca <HAL_TIM_PWM_Start+0xaa>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fe10 	bl	8007bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a2d      	ldr	r2, [pc, #180]	; (8007094 <HAL_TIM_PWM_Start+0x174>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d004      	beq.n	8006fec <HAL_TIM_PWM_Start+0xcc>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a2c      	ldr	r2, [pc, #176]	; (8007098 <HAL_TIM_PWM_Start+0x178>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d101      	bne.n	8006ff0 <HAL_TIM_PWM_Start+0xd0>
 8006fec:	2301      	movs	r3, #1
 8006fee:	e000      	b.n	8006ff2 <HAL_TIM_PWM_Start+0xd2>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007004:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a22      	ldr	r2, [pc, #136]	; (8007094 <HAL_TIM_PWM_Start+0x174>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d022      	beq.n	8007056 <HAL_TIM_PWM_Start+0x136>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007018:	d01d      	beq.n	8007056 <HAL_TIM_PWM_Start+0x136>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1f      	ldr	r2, [pc, #124]	; (800709c <HAL_TIM_PWM_Start+0x17c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d018      	beq.n	8007056 <HAL_TIM_PWM_Start+0x136>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1d      	ldr	r2, [pc, #116]	; (80070a0 <HAL_TIM_PWM_Start+0x180>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d013      	beq.n	8007056 <HAL_TIM_PWM_Start+0x136>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1c      	ldr	r2, [pc, #112]	; (80070a4 <HAL_TIM_PWM_Start+0x184>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00e      	beq.n	8007056 <HAL_TIM_PWM_Start+0x136>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a16      	ldr	r2, [pc, #88]	; (8007098 <HAL_TIM_PWM_Start+0x178>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d009      	beq.n	8007056 <HAL_TIM_PWM_Start+0x136>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a18      	ldr	r2, [pc, #96]	; (80070a8 <HAL_TIM_PWM_Start+0x188>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d004      	beq.n	8007056 <HAL_TIM_PWM_Start+0x136>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a16      	ldr	r2, [pc, #88]	; (80070ac <HAL_TIM_PWM_Start+0x18c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d111      	bne.n	800707a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b06      	cmp	r3, #6
 8007066:	d010      	beq.n	800708a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0201 	orr.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007078:	e007      	b.n	800708a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0201 	orr.w	r2, r2, #1
 8007088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40010000 	.word	0x40010000
 8007098:	40010400 	.word	0x40010400
 800709c:	40000400 	.word	0x40000400
 80070a0:	40000800 	.word	0x40000800
 80070a4:	40000c00 	.word	0x40000c00
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40001800 	.word	0x40001800

080070b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d122      	bne.n	800710c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d11b      	bne.n	800710c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0202 	mvn.w	r2, #2
 80070dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fa77 	bl	80075e6 <HAL_TIM_IC_CaptureCallback>
 80070f8:	e005      	b.n	8007106 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa69 	bl	80075d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa7a 	bl	80075fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b04      	cmp	r3, #4
 8007118:	d122      	bne.n	8007160 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b04      	cmp	r3, #4
 8007126:	d11b      	bne.n	8007160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f06f 0204 	mvn.w	r2, #4
 8007130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa4d 	bl	80075e6 <HAL_TIM_IC_CaptureCallback>
 800714c:	e005      	b.n	800715a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fa3f 	bl	80075d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fa50 	bl	80075fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b08      	cmp	r3, #8
 800716c:	d122      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b08      	cmp	r3, #8
 800717a:	d11b      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f06f 0208 	mvn.w	r2, #8
 8007184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2204      	movs	r2, #4
 800718a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fa23 	bl	80075e6 <HAL_TIM_IC_CaptureCallback>
 80071a0:	e005      	b.n	80071ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fa15 	bl	80075d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fa26 	bl	80075fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	2b10      	cmp	r3, #16
 80071c0:	d122      	bne.n	8007208 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f003 0310 	and.w	r3, r3, #16
 80071cc:	2b10      	cmp	r3, #16
 80071ce:	d11b      	bne.n	8007208 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f06f 0210 	mvn.w	r2, #16
 80071d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2208      	movs	r2, #8
 80071de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f9f9 	bl	80075e6 <HAL_TIM_IC_CaptureCallback>
 80071f4:	e005      	b.n	8007202 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f9eb 	bl	80075d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f9fc 	bl	80075fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b01      	cmp	r3, #1
 8007214:	d10e      	bne.n	8007234 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	d107      	bne.n	8007234 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f06f 0201 	mvn.w	r2, #1
 800722c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fb fbde 	bl	80029f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723e:	2b80      	cmp	r3, #128	; 0x80
 8007240:	d10e      	bne.n	8007260 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724c:	2b80      	cmp	r3, #128	; 0x80
 800724e:	d107      	bne.n	8007260 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fdca 	bl	8007df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d10e      	bne.n	800728c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007278:	2b40      	cmp	r3, #64	; 0x40
 800727a:	d107      	bne.n	800728c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f9c1 	bl	800760e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b20      	cmp	r3, #32
 8007298:	d10e      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b20      	cmp	r3, #32
 80072a6:	d107      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0220 	mvn.w	r2, #32
 80072b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fd94 	bl	8007de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072da:	2302      	movs	r3, #2
 80072dc:	e0ae      	b.n	800743c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b0c      	cmp	r3, #12
 80072ea:	f200 809f 	bhi.w	800742c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072ee:	a201      	add	r2, pc, #4	; (adr r2, 80072f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f4:	08007329 	.word	0x08007329
 80072f8:	0800742d 	.word	0x0800742d
 80072fc:	0800742d 	.word	0x0800742d
 8007300:	0800742d 	.word	0x0800742d
 8007304:	08007369 	.word	0x08007369
 8007308:	0800742d 	.word	0x0800742d
 800730c:	0800742d 	.word	0x0800742d
 8007310:	0800742d 	.word	0x0800742d
 8007314:	080073ab 	.word	0x080073ab
 8007318:	0800742d 	.word	0x0800742d
 800731c:	0800742d 	.word	0x0800742d
 8007320:	0800742d 	.word	0x0800742d
 8007324:	080073eb 	.word	0x080073eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fa18 	bl	8007764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0208 	orr.w	r2, r2, #8
 8007342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0204 	bic.w	r2, r2, #4
 8007352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6999      	ldr	r1, [r3, #24]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	619a      	str	r2, [r3, #24]
      break;
 8007366:	e064      	b.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fa68 	bl	8007844 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699a      	ldr	r2, [r3, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6999      	ldr	r1, [r3, #24]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	021a      	lsls	r2, r3, #8
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	619a      	str	r2, [r3, #24]
      break;
 80073a8:	e043      	b.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68b9      	ldr	r1, [r7, #8]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fabd 	bl	8007930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69da      	ldr	r2, [r3, #28]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f042 0208 	orr.w	r2, r2, #8
 80073c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0204 	bic.w	r2, r2, #4
 80073d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69d9      	ldr	r1, [r3, #28]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	61da      	str	r2, [r3, #28]
      break;
 80073e8:	e023      	b.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fb11 	bl	8007a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69d9      	ldr	r1, [r3, #28]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	021a      	lsls	r2, r3, #8
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	61da      	str	r2, [r3, #28]
      break;
 800742a:	e002      	b.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]
      break;
 8007430:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007458:	2b01      	cmp	r3, #1
 800745a:	d101      	bne.n	8007460 <HAL_TIM_ConfigClockSource+0x1c>
 800745c:	2302      	movs	r3, #2
 800745e:	e0b4      	b.n	80075ca <HAL_TIM_ConfigClockSource+0x186>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800747e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007498:	d03e      	beq.n	8007518 <HAL_TIM_ConfigClockSource+0xd4>
 800749a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749e:	f200 8087 	bhi.w	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a6:	f000 8086 	beq.w	80075b6 <HAL_TIM_ConfigClockSource+0x172>
 80074aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ae:	d87f      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074b0:	2b70      	cmp	r3, #112	; 0x70
 80074b2:	d01a      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0xa6>
 80074b4:	2b70      	cmp	r3, #112	; 0x70
 80074b6:	d87b      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074b8:	2b60      	cmp	r3, #96	; 0x60
 80074ba:	d050      	beq.n	800755e <HAL_TIM_ConfigClockSource+0x11a>
 80074bc:	2b60      	cmp	r3, #96	; 0x60
 80074be:	d877      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074c0:	2b50      	cmp	r3, #80	; 0x50
 80074c2:	d03c      	beq.n	800753e <HAL_TIM_ConfigClockSource+0xfa>
 80074c4:	2b50      	cmp	r3, #80	; 0x50
 80074c6:	d873      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074c8:	2b40      	cmp	r3, #64	; 0x40
 80074ca:	d058      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x13a>
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d86f      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d0:	2b30      	cmp	r3, #48	; 0x30
 80074d2:	d064      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x15a>
 80074d4:	2b30      	cmp	r3, #48	; 0x30
 80074d6:	d86b      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d060      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x15a>
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d867      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d05c      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x15a>
 80074e4:	2b10      	cmp	r3, #16
 80074e6:	d05a      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x15a>
 80074e8:	e062      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6899      	ldr	r1, [r3, #8]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f000 fb5d 	bl	8007bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800750c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	609a      	str	r2, [r3, #8]
      break;
 8007516:	e04f      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	6899      	ldr	r1, [r3, #8]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f000 fb46 	bl	8007bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800753a:	609a      	str	r2, [r3, #8]
      break;
 800753c:	e03c      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6859      	ldr	r1, [r3, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	461a      	mov	r2, r3
 800754c:	f000 faba 	bl	8007ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2150      	movs	r1, #80	; 0x50
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fb13 	bl	8007b82 <TIM_ITRx_SetConfig>
      break;
 800755c:	e02c      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6859      	ldr	r1, [r3, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	461a      	mov	r2, r3
 800756c:	f000 fad9 	bl	8007b22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2160      	movs	r1, #96	; 0x60
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fb03 	bl	8007b82 <TIM_ITRx_SetConfig>
      break;
 800757c:	e01c      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6859      	ldr	r1, [r3, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	461a      	mov	r2, r3
 800758c:	f000 fa9a 	bl	8007ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2140      	movs	r1, #64	; 0x40
 8007596:	4618      	mov	r0, r3
 8007598:	f000 faf3 	bl	8007b82 <TIM_ITRx_SetConfig>
      break;
 800759c:	e00c      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4619      	mov	r1, r3
 80075a8:	4610      	mov	r0, r2
 80075aa:	f000 faea 	bl	8007b82 <TIM_ITRx_SetConfig>
      break;
 80075ae:	e003      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	73fb      	strb	r3, [r7, #15]
      break;
 80075b4:	e000      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a40      	ldr	r2, [pc, #256]	; (8007738 <TIM_Base_SetConfig+0x114>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d013      	beq.n	8007664 <TIM_Base_SetConfig+0x40>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007642:	d00f      	beq.n	8007664 <TIM_Base_SetConfig+0x40>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a3d      	ldr	r2, [pc, #244]	; (800773c <TIM_Base_SetConfig+0x118>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00b      	beq.n	8007664 <TIM_Base_SetConfig+0x40>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a3c      	ldr	r2, [pc, #240]	; (8007740 <TIM_Base_SetConfig+0x11c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d007      	beq.n	8007664 <TIM_Base_SetConfig+0x40>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a3b      	ldr	r2, [pc, #236]	; (8007744 <TIM_Base_SetConfig+0x120>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d003      	beq.n	8007664 <TIM_Base_SetConfig+0x40>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a3a      	ldr	r2, [pc, #232]	; (8007748 <TIM_Base_SetConfig+0x124>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d108      	bne.n	8007676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a2f      	ldr	r2, [pc, #188]	; (8007738 <TIM_Base_SetConfig+0x114>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d02b      	beq.n	80076d6 <TIM_Base_SetConfig+0xb2>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007684:	d027      	beq.n	80076d6 <TIM_Base_SetConfig+0xb2>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a2c      	ldr	r2, [pc, #176]	; (800773c <TIM_Base_SetConfig+0x118>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d023      	beq.n	80076d6 <TIM_Base_SetConfig+0xb2>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a2b      	ldr	r2, [pc, #172]	; (8007740 <TIM_Base_SetConfig+0x11c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d01f      	beq.n	80076d6 <TIM_Base_SetConfig+0xb2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a2a      	ldr	r2, [pc, #168]	; (8007744 <TIM_Base_SetConfig+0x120>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d01b      	beq.n	80076d6 <TIM_Base_SetConfig+0xb2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a29      	ldr	r2, [pc, #164]	; (8007748 <TIM_Base_SetConfig+0x124>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d017      	beq.n	80076d6 <TIM_Base_SetConfig+0xb2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a28      	ldr	r2, [pc, #160]	; (800774c <TIM_Base_SetConfig+0x128>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d013      	beq.n	80076d6 <TIM_Base_SetConfig+0xb2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a27      	ldr	r2, [pc, #156]	; (8007750 <TIM_Base_SetConfig+0x12c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00f      	beq.n	80076d6 <TIM_Base_SetConfig+0xb2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a26      	ldr	r2, [pc, #152]	; (8007754 <TIM_Base_SetConfig+0x130>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d00b      	beq.n	80076d6 <TIM_Base_SetConfig+0xb2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a25      	ldr	r2, [pc, #148]	; (8007758 <TIM_Base_SetConfig+0x134>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d007      	beq.n	80076d6 <TIM_Base_SetConfig+0xb2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a24      	ldr	r2, [pc, #144]	; (800775c <TIM_Base_SetConfig+0x138>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d003      	beq.n	80076d6 <TIM_Base_SetConfig+0xb2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a23      	ldr	r2, [pc, #140]	; (8007760 <TIM_Base_SetConfig+0x13c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d108      	bne.n	80076e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a0a      	ldr	r2, [pc, #40]	; (8007738 <TIM_Base_SetConfig+0x114>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d003      	beq.n	800771c <TIM_Base_SetConfig+0xf8>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a0c      	ldr	r2, [pc, #48]	; (8007748 <TIM_Base_SetConfig+0x124>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d103      	bne.n	8007724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	691a      	ldr	r2, [r3, #16]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	615a      	str	r2, [r3, #20]
}
 800772a:	bf00      	nop
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40010000 	.word	0x40010000
 800773c:	40000400 	.word	0x40000400
 8007740:	40000800 	.word	0x40000800
 8007744:	40000c00 	.word	0x40000c00
 8007748:	40010400 	.word	0x40010400
 800774c:	40014000 	.word	0x40014000
 8007750:	40014400 	.word	0x40014400
 8007754:	40014800 	.word	0x40014800
 8007758:	40001800 	.word	0x40001800
 800775c:	40001c00 	.word	0x40001c00
 8007760:	40002000 	.word	0x40002000

08007764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f023 0201 	bic.w	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0303 	bic.w	r3, r3, #3
 800779a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f023 0302 	bic.w	r3, r3, #2
 80077ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a20      	ldr	r2, [pc, #128]	; (800783c <TIM_OC1_SetConfig+0xd8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d003      	beq.n	80077c8 <TIM_OC1_SetConfig+0x64>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a1f      	ldr	r2, [pc, #124]	; (8007840 <TIM_OC1_SetConfig+0xdc>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d10c      	bne.n	80077e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f023 0308 	bic.w	r3, r3, #8
 80077ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f023 0304 	bic.w	r3, r3, #4
 80077e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a15      	ldr	r2, [pc, #84]	; (800783c <TIM_OC1_SetConfig+0xd8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d003      	beq.n	80077f2 <TIM_OC1_SetConfig+0x8e>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a14      	ldr	r2, [pc, #80]	; (8007840 <TIM_OC1_SetConfig+0xdc>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d111      	bne.n	8007816 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	4313      	orrs	r3, r2
 800780a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	621a      	str	r2, [r3, #32]
}
 8007830:	bf00      	nop
 8007832:	371c      	adds	r7, #28
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	40010000 	.word	0x40010000
 8007840:	40010400 	.word	0x40010400

08007844 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	f023 0210 	bic.w	r2, r3, #16
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800787a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	4313      	orrs	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f023 0320 	bic.w	r3, r3, #32
 800788e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4313      	orrs	r3, r2
 800789a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a22      	ldr	r2, [pc, #136]	; (8007928 <TIM_OC2_SetConfig+0xe4>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d003      	beq.n	80078ac <TIM_OC2_SetConfig+0x68>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a21      	ldr	r2, [pc, #132]	; (800792c <TIM_OC2_SetConfig+0xe8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d10d      	bne.n	80078c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	4313      	orrs	r3, r2
 80078be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a17      	ldr	r2, [pc, #92]	; (8007928 <TIM_OC2_SetConfig+0xe4>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d003      	beq.n	80078d8 <TIM_OC2_SetConfig+0x94>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a16      	ldr	r2, [pc, #88]	; (800792c <TIM_OC2_SetConfig+0xe8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d113      	bne.n	8007900 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40010000 	.word	0x40010000
 800792c:	40010400 	.word	0x40010400

08007930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 0303 	bic.w	r3, r3, #3
 8007966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	021b      	lsls	r3, r3, #8
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	4313      	orrs	r3, r2
 8007984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a21      	ldr	r2, [pc, #132]	; (8007a10 <TIM_OC3_SetConfig+0xe0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d003      	beq.n	8007996 <TIM_OC3_SetConfig+0x66>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a20      	ldr	r2, [pc, #128]	; (8007a14 <TIM_OC3_SetConfig+0xe4>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d10d      	bne.n	80079b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800799c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	021b      	lsls	r3, r3, #8
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a16      	ldr	r2, [pc, #88]	; (8007a10 <TIM_OC3_SetConfig+0xe0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d003      	beq.n	80079c2 <TIM_OC3_SetConfig+0x92>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a15      	ldr	r2, [pc, #84]	; (8007a14 <TIM_OC3_SetConfig+0xe4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d113      	bne.n	80079ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	621a      	str	r2, [r3, #32]
}
 8007a04:	bf00      	nop
 8007a06:	371c      	adds	r7, #28
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	40010000 	.word	0x40010000
 8007a14:	40010400 	.word	0x40010400

08007a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	031b      	lsls	r3, r3, #12
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a12      	ldr	r2, [pc, #72]	; (8007abc <TIM_OC4_SetConfig+0xa4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d003      	beq.n	8007a80 <TIM_OC4_SetConfig+0x68>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a11      	ldr	r2, [pc, #68]	; (8007ac0 <TIM_OC4_SetConfig+0xa8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d109      	bne.n	8007a94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	019b      	lsls	r3, r3, #6
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	621a      	str	r2, [r3, #32]
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	40010000 	.word	0x40010000
 8007ac0:	40010400 	.word	0x40010400

08007ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	f023 0201 	bic.w	r2, r3, #1
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f023 030a 	bic.w	r3, r3, #10
 8007b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	621a      	str	r2, [r3, #32]
}
 8007b16:	bf00      	nop
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b087      	sub	sp, #28
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f023 0210 	bic.w	r2, r3, #16
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	031b      	lsls	r3, r3, #12
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	621a      	str	r2, [r3, #32]
}
 8007b76:	bf00      	nop
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b085      	sub	sp, #20
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f043 0307 	orr.w	r3, r3, #7
 8007ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	609a      	str	r2, [r3, #8]
}
 8007bac:	bf00      	nop
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	021a      	lsls	r2, r3, #8
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	609a      	str	r2, [r3, #8]
}
 8007bec:	bf00      	nop
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1a      	ldr	r2, [r3, #32]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a1a      	ldr	r2, [r3, #32]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 031f 	and.w	r3, r3, #31
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c30:	431a      	orrs	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	621a      	str	r2, [r3, #32]
}
 8007c36:	bf00      	nop
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
	...

08007c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d101      	bne.n	8007c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	e05a      	b.n	8007d12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a21      	ldr	r2, [pc, #132]	; (8007d20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d022      	beq.n	8007ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca8:	d01d      	beq.n	8007ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d018      	beq.n	8007ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a1b      	ldr	r2, [pc, #108]	; (8007d28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d013      	beq.n	8007ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a1a      	ldr	r2, [pc, #104]	; (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00e      	beq.n	8007ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a18      	ldr	r2, [pc, #96]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d009      	beq.n	8007ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a17      	ldr	r2, [pc, #92]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d004      	beq.n	8007ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a15      	ldr	r2, [pc, #84]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d10c      	bne.n	8007d00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	40010000 	.word	0x40010000
 8007d24:	40000400 	.word	0x40000400
 8007d28:	40000800 	.word	0x40000800
 8007d2c:	40000c00 	.word	0x40000c00
 8007d30:	40010400 	.word	0x40010400
 8007d34:	40014000 	.word	0x40014000
 8007d38:	40001800 	.word	0x40001800

08007d3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d54:	2302      	movs	r3, #2
 8007d56:	e03d      	b.n	8007dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e03f      	b.n	8007e9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fb fa6c 	bl	800330c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2224      	movs	r2, #36	; 0x24
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fd81 	bl	8008954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	695a      	ldr	r2, [r3, #20]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68da      	ldr	r2, [r3, #12]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b08a      	sub	sp, #40	; 0x28
 8007ea6:	af02      	add	r7, sp, #8
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	f040 808c 	bne.w	8007fdc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <HAL_UART_Receive+0x2e>
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e084      	b.n	8007fde <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_UART_Receive+0x40>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e07d      	b.n	8007fde <HAL_UART_Receive+0x13c>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2222      	movs	r2, #34	; 0x22
 8007ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007efe:	f7fb fee5 	bl	8003ccc <HAL_GetTick>
 8007f02:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	88fa      	ldrh	r2, [r7, #6]
 8007f08:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	88fa      	ldrh	r2, [r7, #6]
 8007f0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f18:	d108      	bne.n	8007f2c <HAL_UART_Receive+0x8a>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d104      	bne.n	8007f2c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	e003      	b.n	8007f34 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007f3c:	e043      	b.n	8007fc6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2200      	movs	r2, #0
 8007f46:	2120      	movs	r1, #32
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fafb 	bl	8008544 <UART_WaitOnFlagUntilTimeout>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e042      	b.n	8007fde <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10c      	bne.n	8007f78 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	3302      	adds	r3, #2
 8007f74:	61bb      	str	r3, [r7, #24]
 8007f76:	e01f      	b.n	8007fb8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f80:	d007      	beq.n	8007f92 <HAL_UART_Receive+0xf0>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10a      	bne.n	8007fa0 <HAL_UART_Receive+0xfe>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	e008      	b.n	8007fb2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1b6      	bne.n	8007f3e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e000      	b.n	8007fde <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007fdc:	2302      	movs	r3, #2
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b0ba      	sub	sp, #232	; 0xe8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800800e:	2300      	movs	r3, #0
 8008010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008014:	2300      	movs	r3, #0
 8008016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800801a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10f      	bne.n	800804e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800802e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <HAL_UART_IRQHandler+0x66>
 800803a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fbc9 	bl	80087de <UART_Receive_IT>
      return;
 800804c:	e256      	b.n	80084fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800804e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 80de 	beq.w	8008214 <HAL_UART_IRQHandler+0x22c>
 8008058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d106      	bne.n	8008072 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008068:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 80d1 	beq.w	8008214 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00b      	beq.n	8008096 <HAL_UART_IRQHandler+0xae>
 800807e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	f043 0201 	orr.w	r2, r3, #1
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00b      	beq.n	80080ba <HAL_UART_IRQHandler+0xd2>
 80080a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	f043 0202 	orr.w	r2, r3, #2
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00b      	beq.n	80080de <HAL_UART_IRQHandler+0xf6>
 80080c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	f043 0204 	orr.w	r2, r3, #4
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80080de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d011      	beq.n	800810e <HAL_UART_IRQHandler+0x126>
 80080ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d105      	bne.n	8008102 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80080f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d005      	beq.n	800810e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	f043 0208 	orr.w	r2, r3, #8
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 81ed 	beq.w	80084f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d008      	beq.n	8008136 <HAL_UART_IRQHandler+0x14e>
 8008124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008128:	f003 0320 	and.w	r3, r3, #32
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fb54 	bl	80087de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008140:	2b40      	cmp	r3, #64	; 0x40
 8008142:	bf0c      	ite	eq
 8008144:	2301      	moveq	r3, #1
 8008146:	2300      	movne	r3, #0
 8008148:	b2db      	uxtb	r3, r3
 800814a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	f003 0308 	and.w	r3, r3, #8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d103      	bne.n	8008162 <HAL_UART_IRQHandler+0x17a>
 800815a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d04f      	beq.n	8008202 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa5c 	bl	8008620 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008172:	2b40      	cmp	r3, #64	; 0x40
 8008174:	d141      	bne.n	80081fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3314      	adds	r3, #20
 800817c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800818c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3314      	adds	r3, #20
 800819e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081b2:	e841 2300 	strex	r3, r2, [r1]
 80081b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1d9      	bne.n	8008176 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d013      	beq.n	80081f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ce:	4a7d      	ldr	r2, [pc, #500]	; (80083c4 <HAL_UART_IRQHandler+0x3dc>)
 80081d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fb ff29 	bl	800402e <HAL_DMA_Abort_IT>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d016      	beq.n	8008210 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081ec:	4610      	mov	r0, r2
 80081ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f0:	e00e      	b.n	8008210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f990 	bl	8008518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f8:	e00a      	b.n	8008210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f98c 	bl	8008518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008200:	e006      	b.n	8008210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f988 	bl	8008518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800820e:	e170      	b.n	80084f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008210:	bf00      	nop
    return;
 8008212:	e16e      	b.n	80084f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008218:	2b01      	cmp	r3, #1
 800821a:	f040 814a 	bne.w	80084b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800821e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008222:	f003 0310 	and.w	r3, r3, #16
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8143 	beq.w	80084b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 813c 	beq.w	80084b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800823a:	2300      	movs	r3, #0
 800823c:	60bb      	str	r3, [r7, #8]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	60bb      	str	r3, [r7, #8]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	60bb      	str	r3, [r7, #8]
 800824e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825a:	2b40      	cmp	r3, #64	; 0x40
 800825c:	f040 80b4 	bne.w	80083c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800826c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 8140 	beq.w	80084f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800827a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800827e:	429a      	cmp	r2, r3
 8008280:	f080 8139 	bcs.w	80084f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800828a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008296:	f000 8088 	beq.w	80083aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	330c      	adds	r3, #12
 80082a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	330c      	adds	r3, #12
 80082c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80082c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1d9      	bne.n	800829a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3314      	adds	r3, #20
 80082ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3314      	adds	r3, #20
 8008306:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800830a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800830e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008312:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800831c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e1      	bne.n	80082e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3314      	adds	r3, #20
 8008328:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3314      	adds	r3, #20
 8008342:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008346:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008348:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800834c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e3      	bne.n	8008322 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	330c      	adds	r3, #12
 800836e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800837a:	f023 0310 	bic.w	r3, r3, #16
 800837e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	330c      	adds	r3, #12
 8008388:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800838c:	65ba      	str	r2, [r7, #88]	; 0x58
 800838e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008392:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800839a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e3      	bne.n	8008368 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fb fdd2 	bl	8003f4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f8b6 	bl	800852c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083c0:	e099      	b.n	80084f6 <HAL_UART_IRQHandler+0x50e>
 80083c2:	bf00      	nop
 80083c4:	080086e7 	.word	0x080086e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083dc:	b29b      	uxth	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 808b 	beq.w	80084fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80083e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8086 	beq.w	80084fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	330c      	adds	r3, #12
 80083f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	330c      	adds	r3, #12
 800840e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008412:	647a      	str	r2, [r7, #68]	; 0x44
 8008414:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008418:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e3      	bne.n	80083ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3314      	adds	r3, #20
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	623b      	str	r3, [r7, #32]
   return(result);
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3314      	adds	r3, #20
 8008446:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800844a:	633a      	str	r2, [r7, #48]	; 0x30
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1e3      	bne.n	8008426 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2220      	movs	r2, #32
 8008462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	330c      	adds	r3, #12
 8008472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	e853 3f00 	ldrex	r3, [r3]
 800847a:	60fb      	str	r3, [r7, #12]
   return(result);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0310 	bic.w	r3, r3, #16
 8008482:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	330c      	adds	r3, #12
 800848c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008490:	61fa      	str	r2, [r7, #28]
 8008492:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	69b9      	ldr	r1, [r7, #24]
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	617b      	str	r3, [r7, #20]
   return(result);
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e3      	bne.n	800846c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f83e 	bl	800852c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084b0:	e023      	b.n	80084fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d009      	beq.n	80084d2 <HAL_UART_IRQHandler+0x4ea>
 80084be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f91f 	bl	800870e <UART_Transmit_IT>
    return;
 80084d0:	e014      	b.n	80084fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00e      	beq.n	80084fc <HAL_UART_IRQHandler+0x514>
 80084de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d008      	beq.n	80084fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f95f 	bl	80087ae <UART_EndTransmit_IT>
    return;
 80084f0:	e004      	b.n	80084fc <HAL_UART_IRQHandler+0x514>
    return;
 80084f2:	bf00      	nop
 80084f4:	e002      	b.n	80084fc <HAL_UART_IRQHandler+0x514>
      return;
 80084f6:	bf00      	nop
 80084f8:	e000      	b.n	80084fc <HAL_UART_IRQHandler+0x514>
      return;
 80084fa:	bf00      	nop
  }
}
 80084fc:	37e8      	adds	r7, #232	; 0xe8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop

08008504 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b090      	sub	sp, #64	; 0x40
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	4613      	mov	r3, r2
 8008552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008554:	e050      	b.n	80085f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855c:	d04c      	beq.n	80085f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800855e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008560:	2b00      	cmp	r3, #0
 8008562:	d007      	beq.n	8008574 <UART_WaitOnFlagUntilTimeout+0x30>
 8008564:	f7fb fbb2 	bl	8003ccc <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008570:	429a      	cmp	r2, r3
 8008572:	d241      	bcs.n	80085f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	330c      	adds	r3, #12
 800857a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	330c      	adds	r3, #12
 8008592:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008594:	637a      	str	r2, [r7, #52]	; 0x34
 8008596:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800859a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e5      	bne.n	8008574 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3314      	adds	r3, #20
 80085ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	613b      	str	r3, [r7, #16]
   return(result);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f023 0301 	bic.w	r3, r3, #1
 80085be:	63bb      	str	r3, [r7, #56]	; 0x38
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3314      	adds	r3, #20
 80085c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085c8:	623a      	str	r2, [r7, #32]
 80085ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	69f9      	ldr	r1, [r7, #28]
 80085ce:	6a3a      	ldr	r2, [r7, #32]
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e5      	bne.n	80085a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2220      	movs	r2, #32
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e00f      	b.n	8008618 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	4013      	ands	r3, r2
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	429a      	cmp	r2, r3
 8008606:	bf0c      	ite	eq
 8008608:	2301      	moveq	r3, #1
 800860a:	2300      	movne	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	429a      	cmp	r2, r3
 8008614:	d09f      	beq.n	8008556 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3740      	adds	r7, #64	; 0x40
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008620:	b480      	push	{r7}
 8008622:	b095      	sub	sp, #84	; 0x54
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	330c      	adds	r3, #12
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800863e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	330c      	adds	r3, #12
 8008646:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008648:	643a      	str	r2, [r7, #64]	; 0x40
 800864a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800864e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e5      	bne.n	8008628 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3314      	adds	r3, #20
 8008662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	61fb      	str	r3, [r7, #28]
   return(result);
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f023 0301 	bic.w	r3, r3, #1
 8008672:	64bb      	str	r3, [r7, #72]	; 0x48
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3314      	adds	r3, #20
 800867a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800867c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800867e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e5      	bne.n	800865c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008694:	2b01      	cmp	r3, #1
 8008696:	d119      	bne.n	80086cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	330c      	adds	r3, #12
 800869e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f023 0310 	bic.w	r3, r3, #16
 80086ae:	647b      	str	r3, [r7, #68]	; 0x44
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	330c      	adds	r3, #12
 80086b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086b8:	61ba      	str	r2, [r7, #24]
 80086ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6979      	ldr	r1, [r7, #20]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	613b      	str	r3, [r7, #16]
   return(result);
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e5      	bne.n	8008698 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80086da:	bf00      	nop
 80086dc:	3754      	adds	r7, #84	; 0x54
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff ff09 	bl	8008518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800870e:	b480      	push	{r7}
 8008710:	b085      	sub	sp, #20
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b21      	cmp	r3, #33	; 0x21
 8008720:	d13e      	bne.n	80087a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800872a:	d114      	bne.n	8008756 <UART_Transmit_IT+0x48>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d110      	bne.n	8008756 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008748:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	1c9a      	adds	r2, r3, #2
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	621a      	str	r2, [r3, #32]
 8008754:	e008      	b.n	8008768 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	1c59      	adds	r1, r3, #1
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6211      	str	r1, [r2, #32]
 8008760:	781a      	ldrb	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800876c:	b29b      	uxth	r3, r3
 800876e:	3b01      	subs	r3, #1
 8008770:	b29b      	uxth	r3, r3
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	4619      	mov	r1, r3
 8008776:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10f      	bne.n	800879c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800878a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800879a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	e000      	b.n	80087a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80087a0:	2302      	movs	r3, #2
  }
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff fe98 	bl	8008504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b08c      	sub	sp, #48	; 0x30
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b22      	cmp	r3, #34	; 0x22
 80087f0:	f040 80ab 	bne.w	800894a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fc:	d117      	bne.n	800882e <UART_Receive_IT+0x50>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d113      	bne.n	800882e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008806:	2300      	movs	r3, #0
 8008808:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	b29b      	uxth	r3, r3
 8008818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800881c:	b29a      	uxth	r2, r3
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	1c9a      	adds	r2, r3, #2
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	629a      	str	r2, [r3, #40]	; 0x28
 800882c:	e026      	b.n	800887c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008834:	2300      	movs	r3, #0
 8008836:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008840:	d007      	beq.n	8008852 <UART_Receive_IT+0x74>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <UART_Receive_IT+0x82>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d106      	bne.n	8008860 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	b2da      	uxtb	r2, r3
 800885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885c:	701a      	strb	r2, [r3, #0]
 800885e:	e008      	b.n	8008872 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800886c:	b2da      	uxtb	r2, r3
 800886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008870:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008880:	b29b      	uxth	r3, r3
 8008882:	3b01      	subs	r3, #1
 8008884:	b29b      	uxth	r3, r3
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	4619      	mov	r1, r3
 800888a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800888c:	2b00      	cmp	r3, #0
 800888e:	d15a      	bne.n	8008946 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0220 	bic.w	r2, r2, #32
 800889e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	695a      	ldr	r2, [r3, #20]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f022 0201 	bic.w	r2, r2, #1
 80088be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d135      	bne.n	800893c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	330c      	adds	r3, #12
 80088dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	613b      	str	r3, [r7, #16]
   return(result);
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f023 0310 	bic.w	r3, r3, #16
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	330c      	adds	r3, #12
 80088f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f6:	623a      	str	r2, [r7, #32]
 80088f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	69f9      	ldr	r1, [r7, #28]
 80088fc:	6a3a      	ldr	r2, [r7, #32]
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	61bb      	str	r3, [r7, #24]
   return(result);
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e5      	bne.n	80088d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	2b10      	cmp	r3, #16
 8008916:	d10a      	bne.n	800892e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008918:	2300      	movs	r3, #0
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fdf9 	bl	800852c <HAL_UARTEx_RxEventCallback>
 800893a:	e002      	b.n	8008942 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fa f879 	bl	8002a34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	e002      	b.n	800894c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	e000      	b.n	800894c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800894a:	2302      	movs	r3, #2
  }
}
 800894c:	4618      	mov	r0, r3
 800894e:	3730      	adds	r7, #48	; 0x30
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008958:	b0c0      	sub	sp, #256	; 0x100
 800895a:	af00      	add	r7, sp, #0
 800895c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800896c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008970:	68d9      	ldr	r1, [r3, #12]
 8008972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	ea40 0301 	orr.w	r3, r0, r1
 800897c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800897e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	431a      	orrs	r2, r3
 800898c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	431a      	orrs	r2, r3
 8008994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	4313      	orrs	r3, r2
 800899c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80089a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089ac:	f021 010c 	bic.w	r1, r1, #12
 80089b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089ba:	430b      	orrs	r3, r1
 80089bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80089ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ce:	6999      	ldr	r1, [r3, #24]
 80089d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	ea40 0301 	orr.w	r3, r0, r1
 80089da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	4b8f      	ldr	r3, [pc, #572]	; (8008c20 <UART_SetConfig+0x2cc>)
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d005      	beq.n	80089f4 <UART_SetConfig+0xa0>
 80089e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	4b8d      	ldr	r3, [pc, #564]	; (8008c24 <UART_SetConfig+0x2d0>)
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d104      	bne.n	80089fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089f4:	f7fd fa18 	bl	8005e28 <HAL_RCC_GetPCLK2Freq>
 80089f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80089fc:	e003      	b.n	8008a06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089fe:	f7fd f9ff 	bl	8005e00 <HAL_RCC_GetPCLK1Freq>
 8008a02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a10:	f040 810c 	bne.w	8008c2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a26:	4622      	mov	r2, r4
 8008a28:	462b      	mov	r3, r5
 8008a2a:	1891      	adds	r1, r2, r2
 8008a2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a2e:	415b      	adcs	r3, r3
 8008a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a36:	4621      	mov	r1, r4
 8008a38:	eb12 0801 	adds.w	r8, r2, r1
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	eb43 0901 	adc.w	r9, r3, r1
 8008a42:	f04f 0200 	mov.w	r2, #0
 8008a46:	f04f 0300 	mov.w	r3, #0
 8008a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a56:	4690      	mov	r8, r2
 8008a58:	4699      	mov	r9, r3
 8008a5a:	4623      	mov	r3, r4
 8008a5c:	eb18 0303 	adds.w	r3, r8, r3
 8008a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a64:	462b      	mov	r3, r5
 8008a66:	eb49 0303 	adc.w	r3, r9, r3
 8008a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008a7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a82:	460b      	mov	r3, r1
 8008a84:	18db      	adds	r3, r3, r3
 8008a86:	653b      	str	r3, [r7, #80]	; 0x50
 8008a88:	4613      	mov	r3, r2
 8008a8a:	eb42 0303 	adc.w	r3, r2, r3
 8008a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8008a90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a98:	f7f8 f8e6 	bl	8000c68 <__aeabi_uldivmod>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4b61      	ldr	r3, [pc, #388]	; (8008c28 <UART_SetConfig+0x2d4>)
 8008aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8008aa6:	095b      	lsrs	r3, r3, #5
 8008aa8:	011c      	lsls	r4, r3, #4
 8008aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ab4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ab8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008abc:	4642      	mov	r2, r8
 8008abe:	464b      	mov	r3, r9
 8008ac0:	1891      	adds	r1, r2, r2
 8008ac2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ac4:	415b      	adcs	r3, r3
 8008ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008acc:	4641      	mov	r1, r8
 8008ace:	eb12 0a01 	adds.w	sl, r2, r1
 8008ad2:	4649      	mov	r1, r9
 8008ad4:	eb43 0b01 	adc.w	fp, r3, r1
 8008ad8:	f04f 0200 	mov.w	r2, #0
 8008adc:	f04f 0300 	mov.w	r3, #0
 8008ae0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ae4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008aec:	4692      	mov	sl, r2
 8008aee:	469b      	mov	fp, r3
 8008af0:	4643      	mov	r3, r8
 8008af2:	eb1a 0303 	adds.w	r3, sl, r3
 8008af6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008afa:	464b      	mov	r3, r9
 8008afc:	eb4b 0303 	adc.w	r3, fp, r3
 8008b00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	18db      	adds	r3, r3, r3
 8008b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b1e:	4613      	mov	r3, r2
 8008b20:	eb42 0303 	adc.w	r3, r2, r3
 8008b24:	647b      	str	r3, [r7, #68]	; 0x44
 8008b26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b2e:	f7f8 f89b 	bl	8000c68 <__aeabi_uldivmod>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4611      	mov	r1, r2
 8008b38:	4b3b      	ldr	r3, [pc, #236]	; (8008c28 <UART_SetConfig+0x2d4>)
 8008b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8008b3e:	095b      	lsrs	r3, r3, #5
 8008b40:	2264      	movs	r2, #100	; 0x64
 8008b42:	fb02 f303 	mul.w	r3, r2, r3
 8008b46:	1acb      	subs	r3, r1, r3
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b4e:	4b36      	ldr	r3, [pc, #216]	; (8008c28 <UART_SetConfig+0x2d4>)
 8008b50:	fba3 2302 	umull	r2, r3, r3, r2
 8008b54:	095b      	lsrs	r3, r3, #5
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b5c:	441c      	add	r4, r3
 8008b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008b70:	4642      	mov	r2, r8
 8008b72:	464b      	mov	r3, r9
 8008b74:	1891      	adds	r1, r2, r2
 8008b76:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b78:	415b      	adcs	r3, r3
 8008b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b80:	4641      	mov	r1, r8
 8008b82:	1851      	adds	r1, r2, r1
 8008b84:	6339      	str	r1, [r7, #48]	; 0x30
 8008b86:	4649      	mov	r1, r9
 8008b88:	414b      	adcs	r3, r1
 8008b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b8c:	f04f 0200 	mov.w	r2, #0
 8008b90:	f04f 0300 	mov.w	r3, #0
 8008b94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008b98:	4659      	mov	r1, fp
 8008b9a:	00cb      	lsls	r3, r1, #3
 8008b9c:	4651      	mov	r1, sl
 8008b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ba2:	4651      	mov	r1, sl
 8008ba4:	00ca      	lsls	r2, r1, #3
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4603      	mov	r3, r0
 8008bac:	4642      	mov	r2, r8
 8008bae:	189b      	adds	r3, r3, r2
 8008bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bb4:	464b      	mov	r3, r9
 8008bb6:	460a      	mov	r2, r1
 8008bb8:	eb42 0303 	adc.w	r3, r2, r3
 8008bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008bcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008bd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	18db      	adds	r3, r3, r3
 8008bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bda:	4613      	mov	r3, r2
 8008bdc:	eb42 0303 	adc.w	r3, r2, r3
 8008be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008be6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008bea:	f7f8 f83d 	bl	8000c68 <__aeabi_uldivmod>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4b0d      	ldr	r3, [pc, #52]	; (8008c28 <UART_SetConfig+0x2d4>)
 8008bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8008bf8:	095b      	lsrs	r3, r3, #5
 8008bfa:	2164      	movs	r1, #100	; 0x64
 8008bfc:	fb01 f303 	mul.w	r3, r1, r3
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	3332      	adds	r3, #50	; 0x32
 8008c06:	4a08      	ldr	r2, [pc, #32]	; (8008c28 <UART_SetConfig+0x2d4>)
 8008c08:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0c:	095b      	lsrs	r3, r3, #5
 8008c0e:	f003 0207 	and.w	r2, r3, #7
 8008c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4422      	add	r2, r4
 8008c1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c1c:	e105      	b.n	8008e2a <UART_SetConfig+0x4d6>
 8008c1e:	bf00      	nop
 8008c20:	40011000 	.word	0x40011000
 8008c24:	40011400 	.word	0x40011400
 8008c28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c30:	2200      	movs	r2, #0
 8008c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c3e:	4642      	mov	r2, r8
 8008c40:	464b      	mov	r3, r9
 8008c42:	1891      	adds	r1, r2, r2
 8008c44:	6239      	str	r1, [r7, #32]
 8008c46:	415b      	adcs	r3, r3
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
 8008c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c4e:	4641      	mov	r1, r8
 8008c50:	1854      	adds	r4, r2, r1
 8008c52:	4649      	mov	r1, r9
 8008c54:	eb43 0501 	adc.w	r5, r3, r1
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	f04f 0300 	mov.w	r3, #0
 8008c60:	00eb      	lsls	r3, r5, #3
 8008c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c66:	00e2      	lsls	r2, r4, #3
 8008c68:	4614      	mov	r4, r2
 8008c6a:	461d      	mov	r5, r3
 8008c6c:	4643      	mov	r3, r8
 8008c6e:	18e3      	adds	r3, r4, r3
 8008c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c74:	464b      	mov	r3, r9
 8008c76:	eb45 0303 	adc.w	r3, r5, r3
 8008c7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c8e:	f04f 0200 	mov.w	r2, #0
 8008c92:	f04f 0300 	mov.w	r3, #0
 8008c96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	008b      	lsls	r3, r1, #2
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	008a      	lsls	r2, r1, #2
 8008ca8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008cac:	f7f7 ffdc 	bl	8000c68 <__aeabi_uldivmod>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4b60      	ldr	r3, [pc, #384]	; (8008e38 <UART_SetConfig+0x4e4>)
 8008cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8008cba:	095b      	lsrs	r3, r3, #5
 8008cbc:	011c      	lsls	r4, r3, #4
 8008cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ccc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008cd0:	4642      	mov	r2, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	1891      	adds	r1, r2, r2
 8008cd6:	61b9      	str	r1, [r7, #24]
 8008cd8:	415b      	adcs	r3, r3
 8008cda:	61fb      	str	r3, [r7, #28]
 8008cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ce0:	4641      	mov	r1, r8
 8008ce2:	1851      	adds	r1, r2, r1
 8008ce4:	6139      	str	r1, [r7, #16]
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	414b      	adcs	r3, r1
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	f04f 0300 	mov.w	r3, #0
 8008cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008cf8:	4659      	mov	r1, fp
 8008cfa:	00cb      	lsls	r3, r1, #3
 8008cfc:	4651      	mov	r1, sl
 8008cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d02:	4651      	mov	r1, sl
 8008d04:	00ca      	lsls	r2, r1, #3
 8008d06:	4610      	mov	r0, r2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	4642      	mov	r2, r8
 8008d0e:	189b      	adds	r3, r3, r2
 8008d10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d14:	464b      	mov	r3, r9
 8008d16:	460a      	mov	r2, r1
 8008d18:	eb42 0303 	adc.w	r3, r2, r3
 8008d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d38:	4649      	mov	r1, r9
 8008d3a:	008b      	lsls	r3, r1, #2
 8008d3c:	4641      	mov	r1, r8
 8008d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d42:	4641      	mov	r1, r8
 8008d44:	008a      	lsls	r2, r1, #2
 8008d46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d4a:	f7f7 ff8d 	bl	8000c68 <__aeabi_uldivmod>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4b39      	ldr	r3, [pc, #228]	; (8008e38 <UART_SetConfig+0x4e4>)
 8008d54:	fba3 1302 	umull	r1, r3, r3, r2
 8008d58:	095b      	lsrs	r3, r3, #5
 8008d5a:	2164      	movs	r1, #100	; 0x64
 8008d5c:	fb01 f303 	mul.w	r3, r1, r3
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	011b      	lsls	r3, r3, #4
 8008d64:	3332      	adds	r3, #50	; 0x32
 8008d66:	4a34      	ldr	r2, [pc, #208]	; (8008e38 <UART_SetConfig+0x4e4>)
 8008d68:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6c:	095b      	lsrs	r3, r3, #5
 8008d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d72:	441c      	add	r4, r3
 8008d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d78:	2200      	movs	r2, #0
 8008d7a:	673b      	str	r3, [r7, #112]	; 0x70
 8008d7c:	677a      	str	r2, [r7, #116]	; 0x74
 8008d7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008d82:	4642      	mov	r2, r8
 8008d84:	464b      	mov	r3, r9
 8008d86:	1891      	adds	r1, r2, r2
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	415b      	adcs	r3, r3
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d92:	4641      	mov	r1, r8
 8008d94:	1851      	adds	r1, r2, r1
 8008d96:	6039      	str	r1, [r7, #0]
 8008d98:	4649      	mov	r1, r9
 8008d9a:	414b      	adcs	r3, r1
 8008d9c:	607b      	str	r3, [r7, #4]
 8008d9e:	f04f 0200 	mov.w	r2, #0
 8008da2:	f04f 0300 	mov.w	r3, #0
 8008da6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008daa:	4659      	mov	r1, fp
 8008dac:	00cb      	lsls	r3, r1, #3
 8008dae:	4651      	mov	r1, sl
 8008db0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008db4:	4651      	mov	r1, sl
 8008db6:	00ca      	lsls	r2, r1, #3
 8008db8:	4610      	mov	r0, r2
 8008dba:	4619      	mov	r1, r3
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	4642      	mov	r2, r8
 8008dc0:	189b      	adds	r3, r3, r2
 8008dc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	460a      	mov	r2, r1
 8008dc8:	eb42 0303 	adc.w	r3, r2, r3
 8008dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	663b      	str	r3, [r7, #96]	; 0x60
 8008dd8:	667a      	str	r2, [r7, #100]	; 0x64
 8008dda:	f04f 0200 	mov.w	r2, #0
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008de6:	4649      	mov	r1, r9
 8008de8:	008b      	lsls	r3, r1, #2
 8008dea:	4641      	mov	r1, r8
 8008dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008df0:	4641      	mov	r1, r8
 8008df2:	008a      	lsls	r2, r1, #2
 8008df4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008df8:	f7f7 ff36 	bl	8000c68 <__aeabi_uldivmod>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4b0d      	ldr	r3, [pc, #52]	; (8008e38 <UART_SetConfig+0x4e4>)
 8008e02:	fba3 1302 	umull	r1, r3, r3, r2
 8008e06:	095b      	lsrs	r3, r3, #5
 8008e08:	2164      	movs	r1, #100	; 0x64
 8008e0a:	fb01 f303 	mul.w	r3, r1, r3
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	011b      	lsls	r3, r3, #4
 8008e12:	3332      	adds	r3, #50	; 0x32
 8008e14:	4a08      	ldr	r2, [pc, #32]	; (8008e38 <UART_SetConfig+0x4e4>)
 8008e16:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1a:	095b      	lsrs	r3, r3, #5
 8008e1c:	f003 020f 	and.w	r2, r3, #15
 8008e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4422      	add	r2, r4
 8008e28:	609a      	str	r2, [r3, #8]
}
 8008e2a:	bf00      	nop
 8008e2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e30:	46bd      	mov	sp, r7
 8008e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e36:	bf00      	nop
 8008e38:	51eb851f 	.word	0x51eb851f

08008e3c <__errno>:
 8008e3c:	4b01      	ldr	r3, [pc, #4]	; (8008e44 <__errno+0x8>)
 8008e3e:	6818      	ldr	r0, [r3, #0]
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20000168 	.word	0x20000168

08008e48 <__libc_init_array>:
 8008e48:	b570      	push	{r4, r5, r6, lr}
 8008e4a:	4d0d      	ldr	r5, [pc, #52]	; (8008e80 <__libc_init_array+0x38>)
 8008e4c:	4c0d      	ldr	r4, [pc, #52]	; (8008e84 <__libc_init_array+0x3c>)
 8008e4e:	1b64      	subs	r4, r4, r5
 8008e50:	10a4      	asrs	r4, r4, #2
 8008e52:	2600      	movs	r6, #0
 8008e54:	42a6      	cmp	r6, r4
 8008e56:	d109      	bne.n	8008e6c <__libc_init_array+0x24>
 8008e58:	4d0b      	ldr	r5, [pc, #44]	; (8008e88 <__libc_init_array+0x40>)
 8008e5a:	4c0c      	ldr	r4, [pc, #48]	; (8008e8c <__libc_init_array+0x44>)
 8008e5c:	f003 fe32 	bl	800cac4 <_init>
 8008e60:	1b64      	subs	r4, r4, r5
 8008e62:	10a4      	asrs	r4, r4, #2
 8008e64:	2600      	movs	r6, #0
 8008e66:	42a6      	cmp	r6, r4
 8008e68:	d105      	bne.n	8008e76 <__libc_init_array+0x2e>
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
 8008e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e70:	4798      	blx	r3
 8008e72:	3601      	adds	r6, #1
 8008e74:	e7ee      	b.n	8008e54 <__libc_init_array+0xc>
 8008e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e7a:	4798      	blx	r3
 8008e7c:	3601      	adds	r6, #1
 8008e7e:	e7f2      	b.n	8008e66 <__libc_init_array+0x1e>
 8008e80:	08020148 	.word	0x08020148
 8008e84:	08020148 	.word	0x08020148
 8008e88:	08020148 	.word	0x08020148
 8008e8c:	0802014c 	.word	0x0802014c

08008e90 <memcpy>:
 8008e90:	440a      	add	r2, r1
 8008e92:	4291      	cmp	r1, r2
 8008e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e98:	d100      	bne.n	8008e9c <memcpy+0xc>
 8008e9a:	4770      	bx	lr
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ea6:	4291      	cmp	r1, r2
 8008ea8:	d1f9      	bne.n	8008e9e <memcpy+0xe>
 8008eaa:	bd10      	pop	{r4, pc}

08008eac <memset>:
 8008eac:	4402      	add	r2, r0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d100      	bne.n	8008eb6 <memset+0xa>
 8008eb4:	4770      	bx	lr
 8008eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eba:	e7f9      	b.n	8008eb0 <memset+0x4>

08008ebc <__cvt>:
 8008ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	ec55 4b10 	vmov	r4, r5, d0
 8008ec4:	2d00      	cmp	r5, #0
 8008ec6:	460e      	mov	r6, r1
 8008ec8:	4619      	mov	r1, r3
 8008eca:	462b      	mov	r3, r5
 8008ecc:	bfbb      	ittet	lt
 8008ece:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ed2:	461d      	movlt	r5, r3
 8008ed4:	2300      	movge	r3, #0
 8008ed6:	232d      	movlt	r3, #45	; 0x2d
 8008ed8:	700b      	strb	r3, [r1, #0]
 8008eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008edc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ee0:	4691      	mov	r9, r2
 8008ee2:	f023 0820 	bic.w	r8, r3, #32
 8008ee6:	bfbc      	itt	lt
 8008ee8:	4622      	movlt	r2, r4
 8008eea:	4614      	movlt	r4, r2
 8008eec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ef0:	d005      	beq.n	8008efe <__cvt+0x42>
 8008ef2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ef6:	d100      	bne.n	8008efa <__cvt+0x3e>
 8008ef8:	3601      	adds	r6, #1
 8008efa:	2102      	movs	r1, #2
 8008efc:	e000      	b.n	8008f00 <__cvt+0x44>
 8008efe:	2103      	movs	r1, #3
 8008f00:	ab03      	add	r3, sp, #12
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	ab02      	add	r3, sp, #8
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	ec45 4b10 	vmov	d0, r4, r5
 8008f0c:	4653      	mov	r3, sl
 8008f0e:	4632      	mov	r2, r6
 8008f10:	f000 fd82 	bl	8009a18 <_dtoa_r>
 8008f14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f18:	4607      	mov	r7, r0
 8008f1a:	d102      	bne.n	8008f22 <__cvt+0x66>
 8008f1c:	f019 0f01 	tst.w	r9, #1
 8008f20:	d022      	beq.n	8008f68 <__cvt+0xac>
 8008f22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f26:	eb07 0906 	add.w	r9, r7, r6
 8008f2a:	d110      	bne.n	8008f4e <__cvt+0x92>
 8008f2c:	783b      	ldrb	r3, [r7, #0]
 8008f2e:	2b30      	cmp	r3, #48	; 0x30
 8008f30:	d10a      	bne.n	8008f48 <__cvt+0x8c>
 8008f32:	2200      	movs	r2, #0
 8008f34:	2300      	movs	r3, #0
 8008f36:	4620      	mov	r0, r4
 8008f38:	4629      	mov	r1, r5
 8008f3a:	f7f7 fdd5 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f3e:	b918      	cbnz	r0, 8008f48 <__cvt+0x8c>
 8008f40:	f1c6 0601 	rsb	r6, r6, #1
 8008f44:	f8ca 6000 	str.w	r6, [sl]
 8008f48:	f8da 3000 	ldr.w	r3, [sl]
 8008f4c:	4499      	add	r9, r3
 8008f4e:	2200      	movs	r2, #0
 8008f50:	2300      	movs	r3, #0
 8008f52:	4620      	mov	r0, r4
 8008f54:	4629      	mov	r1, r5
 8008f56:	f7f7 fdc7 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f5a:	b108      	cbz	r0, 8008f60 <__cvt+0xa4>
 8008f5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f60:	2230      	movs	r2, #48	; 0x30
 8008f62:	9b03      	ldr	r3, [sp, #12]
 8008f64:	454b      	cmp	r3, r9
 8008f66:	d307      	bcc.n	8008f78 <__cvt+0xbc>
 8008f68:	9b03      	ldr	r3, [sp, #12]
 8008f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f6c:	1bdb      	subs	r3, r3, r7
 8008f6e:	4638      	mov	r0, r7
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	b004      	add	sp, #16
 8008f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f78:	1c59      	adds	r1, r3, #1
 8008f7a:	9103      	str	r1, [sp, #12]
 8008f7c:	701a      	strb	r2, [r3, #0]
 8008f7e:	e7f0      	b.n	8008f62 <__cvt+0xa6>

08008f80 <__exponent>:
 8008f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f82:	4603      	mov	r3, r0
 8008f84:	2900      	cmp	r1, #0
 8008f86:	bfb8      	it	lt
 8008f88:	4249      	neglt	r1, r1
 8008f8a:	f803 2b02 	strb.w	r2, [r3], #2
 8008f8e:	bfb4      	ite	lt
 8008f90:	222d      	movlt	r2, #45	; 0x2d
 8008f92:	222b      	movge	r2, #43	; 0x2b
 8008f94:	2909      	cmp	r1, #9
 8008f96:	7042      	strb	r2, [r0, #1]
 8008f98:	dd2a      	ble.n	8008ff0 <__exponent+0x70>
 8008f9a:	f10d 0407 	add.w	r4, sp, #7
 8008f9e:	46a4      	mov	ip, r4
 8008fa0:	270a      	movs	r7, #10
 8008fa2:	46a6      	mov	lr, r4
 8008fa4:	460a      	mov	r2, r1
 8008fa6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008faa:	fb07 1516 	mls	r5, r7, r6, r1
 8008fae:	3530      	adds	r5, #48	; 0x30
 8008fb0:	2a63      	cmp	r2, #99	; 0x63
 8008fb2:	f104 34ff 	add.w	r4, r4, #4294967295
 8008fb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008fba:	4631      	mov	r1, r6
 8008fbc:	dcf1      	bgt.n	8008fa2 <__exponent+0x22>
 8008fbe:	3130      	adds	r1, #48	; 0x30
 8008fc0:	f1ae 0502 	sub.w	r5, lr, #2
 8008fc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008fc8:	1c44      	adds	r4, r0, #1
 8008fca:	4629      	mov	r1, r5
 8008fcc:	4561      	cmp	r1, ip
 8008fce:	d30a      	bcc.n	8008fe6 <__exponent+0x66>
 8008fd0:	f10d 0209 	add.w	r2, sp, #9
 8008fd4:	eba2 020e 	sub.w	r2, r2, lr
 8008fd8:	4565      	cmp	r5, ip
 8008fda:	bf88      	it	hi
 8008fdc:	2200      	movhi	r2, #0
 8008fde:	4413      	add	r3, r2
 8008fe0:	1a18      	subs	r0, r3, r0
 8008fe2:	b003      	add	sp, #12
 8008fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008fee:	e7ed      	b.n	8008fcc <__exponent+0x4c>
 8008ff0:	2330      	movs	r3, #48	; 0x30
 8008ff2:	3130      	adds	r1, #48	; 0x30
 8008ff4:	7083      	strb	r3, [r0, #2]
 8008ff6:	70c1      	strb	r1, [r0, #3]
 8008ff8:	1d03      	adds	r3, r0, #4
 8008ffa:	e7f1      	b.n	8008fe0 <__exponent+0x60>

08008ffc <_printf_float>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	ed2d 8b02 	vpush	{d8}
 8009004:	b08d      	sub	sp, #52	; 0x34
 8009006:	460c      	mov	r4, r1
 8009008:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800900c:	4616      	mov	r6, r2
 800900e:	461f      	mov	r7, r3
 8009010:	4605      	mov	r5, r0
 8009012:	f001 fb01 	bl	800a618 <_localeconv_r>
 8009016:	f8d0 a000 	ldr.w	sl, [r0]
 800901a:	4650      	mov	r0, sl
 800901c:	f7f7 f8e8 	bl	80001f0 <strlen>
 8009020:	2300      	movs	r3, #0
 8009022:	930a      	str	r3, [sp, #40]	; 0x28
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	9305      	str	r3, [sp, #20]
 8009028:	f8d8 3000 	ldr.w	r3, [r8]
 800902c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009030:	3307      	adds	r3, #7
 8009032:	f023 0307 	bic.w	r3, r3, #7
 8009036:	f103 0208 	add.w	r2, r3, #8
 800903a:	f8c8 2000 	str.w	r2, [r8]
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009046:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800904a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800904e:	9307      	str	r3, [sp, #28]
 8009050:	f8cd 8018 	str.w	r8, [sp, #24]
 8009054:	ee08 0a10 	vmov	s16, r0
 8009058:	4b9f      	ldr	r3, [pc, #636]	; (80092d8 <_printf_float+0x2dc>)
 800905a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800905e:	f04f 32ff 	mov.w	r2, #4294967295
 8009062:	f7f7 fd73 	bl	8000b4c <__aeabi_dcmpun>
 8009066:	bb88      	cbnz	r0, 80090cc <_printf_float+0xd0>
 8009068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800906c:	4b9a      	ldr	r3, [pc, #616]	; (80092d8 <_printf_float+0x2dc>)
 800906e:	f04f 32ff 	mov.w	r2, #4294967295
 8009072:	f7f7 fd4d 	bl	8000b10 <__aeabi_dcmple>
 8009076:	bb48      	cbnz	r0, 80090cc <_printf_float+0xd0>
 8009078:	2200      	movs	r2, #0
 800907a:	2300      	movs	r3, #0
 800907c:	4640      	mov	r0, r8
 800907e:	4649      	mov	r1, r9
 8009080:	f7f7 fd3c 	bl	8000afc <__aeabi_dcmplt>
 8009084:	b110      	cbz	r0, 800908c <_printf_float+0x90>
 8009086:	232d      	movs	r3, #45	; 0x2d
 8009088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800908c:	4b93      	ldr	r3, [pc, #588]	; (80092dc <_printf_float+0x2e0>)
 800908e:	4894      	ldr	r0, [pc, #592]	; (80092e0 <_printf_float+0x2e4>)
 8009090:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009094:	bf94      	ite	ls
 8009096:	4698      	movls	r8, r3
 8009098:	4680      	movhi	r8, r0
 800909a:	2303      	movs	r3, #3
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	9b05      	ldr	r3, [sp, #20]
 80090a0:	f023 0204 	bic.w	r2, r3, #4
 80090a4:	6022      	str	r2, [r4, #0]
 80090a6:	f04f 0900 	mov.w	r9, #0
 80090aa:	9700      	str	r7, [sp, #0]
 80090ac:	4633      	mov	r3, r6
 80090ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80090b0:	4621      	mov	r1, r4
 80090b2:	4628      	mov	r0, r5
 80090b4:	f000 f9d8 	bl	8009468 <_printf_common>
 80090b8:	3001      	adds	r0, #1
 80090ba:	f040 8090 	bne.w	80091de <_printf_float+0x1e2>
 80090be:	f04f 30ff 	mov.w	r0, #4294967295
 80090c2:	b00d      	add	sp, #52	; 0x34
 80090c4:	ecbd 8b02 	vpop	{d8}
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	4642      	mov	r2, r8
 80090ce:	464b      	mov	r3, r9
 80090d0:	4640      	mov	r0, r8
 80090d2:	4649      	mov	r1, r9
 80090d4:	f7f7 fd3a 	bl	8000b4c <__aeabi_dcmpun>
 80090d8:	b140      	cbz	r0, 80090ec <_printf_float+0xf0>
 80090da:	464b      	mov	r3, r9
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bfbc      	itt	lt
 80090e0:	232d      	movlt	r3, #45	; 0x2d
 80090e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090e6:	487f      	ldr	r0, [pc, #508]	; (80092e4 <_printf_float+0x2e8>)
 80090e8:	4b7f      	ldr	r3, [pc, #508]	; (80092e8 <_printf_float+0x2ec>)
 80090ea:	e7d1      	b.n	8009090 <_printf_float+0x94>
 80090ec:	6863      	ldr	r3, [r4, #4]
 80090ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80090f2:	9206      	str	r2, [sp, #24]
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	d13f      	bne.n	8009178 <_printf_float+0x17c>
 80090f8:	2306      	movs	r3, #6
 80090fa:	6063      	str	r3, [r4, #4]
 80090fc:	9b05      	ldr	r3, [sp, #20]
 80090fe:	6861      	ldr	r1, [r4, #4]
 8009100:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009104:	2300      	movs	r3, #0
 8009106:	9303      	str	r3, [sp, #12]
 8009108:	ab0a      	add	r3, sp, #40	; 0x28
 800910a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800910e:	ab09      	add	r3, sp, #36	; 0x24
 8009110:	ec49 8b10 	vmov	d0, r8, r9
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	6022      	str	r2, [r4, #0]
 8009118:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800911c:	4628      	mov	r0, r5
 800911e:	f7ff fecd 	bl	8008ebc <__cvt>
 8009122:	9b06      	ldr	r3, [sp, #24]
 8009124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009126:	2b47      	cmp	r3, #71	; 0x47
 8009128:	4680      	mov	r8, r0
 800912a:	d108      	bne.n	800913e <_printf_float+0x142>
 800912c:	1cc8      	adds	r0, r1, #3
 800912e:	db02      	blt.n	8009136 <_printf_float+0x13a>
 8009130:	6863      	ldr	r3, [r4, #4]
 8009132:	4299      	cmp	r1, r3
 8009134:	dd41      	ble.n	80091ba <_printf_float+0x1be>
 8009136:	f1ab 0b02 	sub.w	fp, fp, #2
 800913a:	fa5f fb8b 	uxtb.w	fp, fp
 800913e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009142:	d820      	bhi.n	8009186 <_printf_float+0x18a>
 8009144:	3901      	subs	r1, #1
 8009146:	465a      	mov	r2, fp
 8009148:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800914c:	9109      	str	r1, [sp, #36]	; 0x24
 800914e:	f7ff ff17 	bl	8008f80 <__exponent>
 8009152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009154:	1813      	adds	r3, r2, r0
 8009156:	2a01      	cmp	r2, #1
 8009158:	4681      	mov	r9, r0
 800915a:	6123      	str	r3, [r4, #16]
 800915c:	dc02      	bgt.n	8009164 <_printf_float+0x168>
 800915e:	6822      	ldr	r2, [r4, #0]
 8009160:	07d2      	lsls	r2, r2, #31
 8009162:	d501      	bpl.n	8009168 <_printf_float+0x16c>
 8009164:	3301      	adds	r3, #1
 8009166:	6123      	str	r3, [r4, #16]
 8009168:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800916c:	2b00      	cmp	r3, #0
 800916e:	d09c      	beq.n	80090aa <_printf_float+0xae>
 8009170:	232d      	movs	r3, #45	; 0x2d
 8009172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009176:	e798      	b.n	80090aa <_printf_float+0xae>
 8009178:	9a06      	ldr	r2, [sp, #24]
 800917a:	2a47      	cmp	r2, #71	; 0x47
 800917c:	d1be      	bne.n	80090fc <_printf_float+0x100>
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1bc      	bne.n	80090fc <_printf_float+0x100>
 8009182:	2301      	movs	r3, #1
 8009184:	e7b9      	b.n	80090fa <_printf_float+0xfe>
 8009186:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800918a:	d118      	bne.n	80091be <_printf_float+0x1c2>
 800918c:	2900      	cmp	r1, #0
 800918e:	6863      	ldr	r3, [r4, #4]
 8009190:	dd0b      	ble.n	80091aa <_printf_float+0x1ae>
 8009192:	6121      	str	r1, [r4, #16]
 8009194:	b913      	cbnz	r3, 800919c <_printf_float+0x1a0>
 8009196:	6822      	ldr	r2, [r4, #0]
 8009198:	07d0      	lsls	r0, r2, #31
 800919a:	d502      	bpl.n	80091a2 <_printf_float+0x1a6>
 800919c:	3301      	adds	r3, #1
 800919e:	440b      	add	r3, r1
 80091a0:	6123      	str	r3, [r4, #16]
 80091a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80091a4:	f04f 0900 	mov.w	r9, #0
 80091a8:	e7de      	b.n	8009168 <_printf_float+0x16c>
 80091aa:	b913      	cbnz	r3, 80091b2 <_printf_float+0x1b6>
 80091ac:	6822      	ldr	r2, [r4, #0]
 80091ae:	07d2      	lsls	r2, r2, #31
 80091b0:	d501      	bpl.n	80091b6 <_printf_float+0x1ba>
 80091b2:	3302      	adds	r3, #2
 80091b4:	e7f4      	b.n	80091a0 <_printf_float+0x1a4>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e7f2      	b.n	80091a0 <_printf_float+0x1a4>
 80091ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80091be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c0:	4299      	cmp	r1, r3
 80091c2:	db05      	blt.n	80091d0 <_printf_float+0x1d4>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	6121      	str	r1, [r4, #16]
 80091c8:	07d8      	lsls	r0, r3, #31
 80091ca:	d5ea      	bpl.n	80091a2 <_printf_float+0x1a6>
 80091cc:	1c4b      	adds	r3, r1, #1
 80091ce:	e7e7      	b.n	80091a0 <_printf_float+0x1a4>
 80091d0:	2900      	cmp	r1, #0
 80091d2:	bfd4      	ite	le
 80091d4:	f1c1 0202 	rsble	r2, r1, #2
 80091d8:	2201      	movgt	r2, #1
 80091da:	4413      	add	r3, r2
 80091dc:	e7e0      	b.n	80091a0 <_printf_float+0x1a4>
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	055a      	lsls	r2, r3, #21
 80091e2:	d407      	bmi.n	80091f4 <_printf_float+0x1f8>
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	4642      	mov	r2, r8
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	d12c      	bne.n	800924c <_printf_float+0x250>
 80091f2:	e764      	b.n	80090be <_printf_float+0xc2>
 80091f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091f8:	f240 80e0 	bls.w	80093bc <_printf_float+0x3c0>
 80091fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009200:	2200      	movs	r2, #0
 8009202:	2300      	movs	r3, #0
 8009204:	f7f7 fc70 	bl	8000ae8 <__aeabi_dcmpeq>
 8009208:	2800      	cmp	r0, #0
 800920a:	d034      	beq.n	8009276 <_printf_float+0x27a>
 800920c:	4a37      	ldr	r2, [pc, #220]	; (80092ec <_printf_float+0x2f0>)
 800920e:	2301      	movs	r3, #1
 8009210:	4631      	mov	r1, r6
 8009212:	4628      	mov	r0, r5
 8009214:	47b8      	blx	r7
 8009216:	3001      	adds	r0, #1
 8009218:	f43f af51 	beq.w	80090be <_printf_float+0xc2>
 800921c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009220:	429a      	cmp	r2, r3
 8009222:	db02      	blt.n	800922a <_printf_float+0x22e>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	07d8      	lsls	r0, r3, #31
 8009228:	d510      	bpl.n	800924c <_printf_float+0x250>
 800922a:	ee18 3a10 	vmov	r3, s16
 800922e:	4652      	mov	r2, sl
 8009230:	4631      	mov	r1, r6
 8009232:	4628      	mov	r0, r5
 8009234:	47b8      	blx	r7
 8009236:	3001      	adds	r0, #1
 8009238:	f43f af41 	beq.w	80090be <_printf_float+0xc2>
 800923c:	f04f 0800 	mov.w	r8, #0
 8009240:	f104 091a 	add.w	r9, r4, #26
 8009244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009246:	3b01      	subs	r3, #1
 8009248:	4543      	cmp	r3, r8
 800924a:	dc09      	bgt.n	8009260 <_printf_float+0x264>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	079b      	lsls	r3, r3, #30
 8009250:	f100 8105 	bmi.w	800945e <_printf_float+0x462>
 8009254:	68e0      	ldr	r0, [r4, #12]
 8009256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009258:	4298      	cmp	r0, r3
 800925a:	bfb8      	it	lt
 800925c:	4618      	movlt	r0, r3
 800925e:	e730      	b.n	80090c2 <_printf_float+0xc6>
 8009260:	2301      	movs	r3, #1
 8009262:	464a      	mov	r2, r9
 8009264:	4631      	mov	r1, r6
 8009266:	4628      	mov	r0, r5
 8009268:	47b8      	blx	r7
 800926a:	3001      	adds	r0, #1
 800926c:	f43f af27 	beq.w	80090be <_printf_float+0xc2>
 8009270:	f108 0801 	add.w	r8, r8, #1
 8009274:	e7e6      	b.n	8009244 <_printf_float+0x248>
 8009276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009278:	2b00      	cmp	r3, #0
 800927a:	dc39      	bgt.n	80092f0 <_printf_float+0x2f4>
 800927c:	4a1b      	ldr	r2, [pc, #108]	; (80092ec <_printf_float+0x2f0>)
 800927e:	2301      	movs	r3, #1
 8009280:	4631      	mov	r1, r6
 8009282:	4628      	mov	r0, r5
 8009284:	47b8      	blx	r7
 8009286:	3001      	adds	r0, #1
 8009288:	f43f af19 	beq.w	80090be <_printf_float+0xc2>
 800928c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009290:	4313      	orrs	r3, r2
 8009292:	d102      	bne.n	800929a <_printf_float+0x29e>
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	07d9      	lsls	r1, r3, #31
 8009298:	d5d8      	bpl.n	800924c <_printf_float+0x250>
 800929a:	ee18 3a10 	vmov	r3, s16
 800929e:	4652      	mov	r2, sl
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	f43f af09 	beq.w	80090be <_printf_float+0xc2>
 80092ac:	f04f 0900 	mov.w	r9, #0
 80092b0:	f104 0a1a 	add.w	sl, r4, #26
 80092b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b6:	425b      	negs	r3, r3
 80092b8:	454b      	cmp	r3, r9
 80092ba:	dc01      	bgt.n	80092c0 <_printf_float+0x2c4>
 80092bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092be:	e792      	b.n	80091e6 <_printf_float+0x1ea>
 80092c0:	2301      	movs	r3, #1
 80092c2:	4652      	mov	r2, sl
 80092c4:	4631      	mov	r1, r6
 80092c6:	4628      	mov	r0, r5
 80092c8:	47b8      	blx	r7
 80092ca:	3001      	adds	r0, #1
 80092cc:	f43f aef7 	beq.w	80090be <_printf_float+0xc2>
 80092d0:	f109 0901 	add.w	r9, r9, #1
 80092d4:	e7ee      	b.n	80092b4 <_printf_float+0x2b8>
 80092d6:	bf00      	nop
 80092d8:	7fefffff 	.word	0x7fefffff
 80092dc:	0801fd34 	.word	0x0801fd34
 80092e0:	0801fd38 	.word	0x0801fd38
 80092e4:	0801fd40 	.word	0x0801fd40
 80092e8:	0801fd3c 	.word	0x0801fd3c
 80092ec:	0801fd44 	.word	0x0801fd44
 80092f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092f4:	429a      	cmp	r2, r3
 80092f6:	bfa8      	it	ge
 80092f8:	461a      	movge	r2, r3
 80092fa:	2a00      	cmp	r2, #0
 80092fc:	4691      	mov	r9, r2
 80092fe:	dc37      	bgt.n	8009370 <_printf_float+0x374>
 8009300:	f04f 0b00 	mov.w	fp, #0
 8009304:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009308:	f104 021a 	add.w	r2, r4, #26
 800930c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800930e:	9305      	str	r3, [sp, #20]
 8009310:	eba3 0309 	sub.w	r3, r3, r9
 8009314:	455b      	cmp	r3, fp
 8009316:	dc33      	bgt.n	8009380 <_printf_float+0x384>
 8009318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800931c:	429a      	cmp	r2, r3
 800931e:	db3b      	blt.n	8009398 <_printf_float+0x39c>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	07da      	lsls	r2, r3, #31
 8009324:	d438      	bmi.n	8009398 <_printf_float+0x39c>
 8009326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009328:	9a05      	ldr	r2, [sp, #20]
 800932a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800932c:	1a9a      	subs	r2, r3, r2
 800932e:	eba3 0901 	sub.w	r9, r3, r1
 8009332:	4591      	cmp	r9, r2
 8009334:	bfa8      	it	ge
 8009336:	4691      	movge	r9, r2
 8009338:	f1b9 0f00 	cmp.w	r9, #0
 800933c:	dc35      	bgt.n	80093aa <_printf_float+0x3ae>
 800933e:	f04f 0800 	mov.w	r8, #0
 8009342:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009346:	f104 0a1a 	add.w	sl, r4, #26
 800934a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800934e:	1a9b      	subs	r3, r3, r2
 8009350:	eba3 0309 	sub.w	r3, r3, r9
 8009354:	4543      	cmp	r3, r8
 8009356:	f77f af79 	ble.w	800924c <_printf_float+0x250>
 800935a:	2301      	movs	r3, #1
 800935c:	4652      	mov	r2, sl
 800935e:	4631      	mov	r1, r6
 8009360:	4628      	mov	r0, r5
 8009362:	47b8      	blx	r7
 8009364:	3001      	adds	r0, #1
 8009366:	f43f aeaa 	beq.w	80090be <_printf_float+0xc2>
 800936a:	f108 0801 	add.w	r8, r8, #1
 800936e:	e7ec      	b.n	800934a <_printf_float+0x34e>
 8009370:	4613      	mov	r3, r2
 8009372:	4631      	mov	r1, r6
 8009374:	4642      	mov	r2, r8
 8009376:	4628      	mov	r0, r5
 8009378:	47b8      	blx	r7
 800937a:	3001      	adds	r0, #1
 800937c:	d1c0      	bne.n	8009300 <_printf_float+0x304>
 800937e:	e69e      	b.n	80090be <_printf_float+0xc2>
 8009380:	2301      	movs	r3, #1
 8009382:	4631      	mov	r1, r6
 8009384:	4628      	mov	r0, r5
 8009386:	9205      	str	r2, [sp, #20]
 8009388:	47b8      	blx	r7
 800938a:	3001      	adds	r0, #1
 800938c:	f43f ae97 	beq.w	80090be <_printf_float+0xc2>
 8009390:	9a05      	ldr	r2, [sp, #20]
 8009392:	f10b 0b01 	add.w	fp, fp, #1
 8009396:	e7b9      	b.n	800930c <_printf_float+0x310>
 8009398:	ee18 3a10 	vmov	r3, s16
 800939c:	4652      	mov	r2, sl
 800939e:	4631      	mov	r1, r6
 80093a0:	4628      	mov	r0, r5
 80093a2:	47b8      	blx	r7
 80093a4:	3001      	adds	r0, #1
 80093a6:	d1be      	bne.n	8009326 <_printf_float+0x32a>
 80093a8:	e689      	b.n	80090be <_printf_float+0xc2>
 80093aa:	9a05      	ldr	r2, [sp, #20]
 80093ac:	464b      	mov	r3, r9
 80093ae:	4442      	add	r2, r8
 80093b0:	4631      	mov	r1, r6
 80093b2:	4628      	mov	r0, r5
 80093b4:	47b8      	blx	r7
 80093b6:	3001      	adds	r0, #1
 80093b8:	d1c1      	bne.n	800933e <_printf_float+0x342>
 80093ba:	e680      	b.n	80090be <_printf_float+0xc2>
 80093bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093be:	2a01      	cmp	r2, #1
 80093c0:	dc01      	bgt.n	80093c6 <_printf_float+0x3ca>
 80093c2:	07db      	lsls	r3, r3, #31
 80093c4:	d538      	bpl.n	8009438 <_printf_float+0x43c>
 80093c6:	2301      	movs	r3, #1
 80093c8:	4642      	mov	r2, r8
 80093ca:	4631      	mov	r1, r6
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b8      	blx	r7
 80093d0:	3001      	adds	r0, #1
 80093d2:	f43f ae74 	beq.w	80090be <_printf_float+0xc2>
 80093d6:	ee18 3a10 	vmov	r3, s16
 80093da:	4652      	mov	r2, sl
 80093dc:	4631      	mov	r1, r6
 80093de:	4628      	mov	r0, r5
 80093e0:	47b8      	blx	r7
 80093e2:	3001      	adds	r0, #1
 80093e4:	f43f ae6b 	beq.w	80090be <_printf_float+0xc2>
 80093e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093ec:	2200      	movs	r2, #0
 80093ee:	2300      	movs	r3, #0
 80093f0:	f7f7 fb7a 	bl	8000ae8 <__aeabi_dcmpeq>
 80093f4:	b9d8      	cbnz	r0, 800942e <_printf_float+0x432>
 80093f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f8:	f108 0201 	add.w	r2, r8, #1
 80093fc:	3b01      	subs	r3, #1
 80093fe:	4631      	mov	r1, r6
 8009400:	4628      	mov	r0, r5
 8009402:	47b8      	blx	r7
 8009404:	3001      	adds	r0, #1
 8009406:	d10e      	bne.n	8009426 <_printf_float+0x42a>
 8009408:	e659      	b.n	80090be <_printf_float+0xc2>
 800940a:	2301      	movs	r3, #1
 800940c:	4652      	mov	r2, sl
 800940e:	4631      	mov	r1, r6
 8009410:	4628      	mov	r0, r5
 8009412:	47b8      	blx	r7
 8009414:	3001      	adds	r0, #1
 8009416:	f43f ae52 	beq.w	80090be <_printf_float+0xc2>
 800941a:	f108 0801 	add.w	r8, r8, #1
 800941e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009420:	3b01      	subs	r3, #1
 8009422:	4543      	cmp	r3, r8
 8009424:	dcf1      	bgt.n	800940a <_printf_float+0x40e>
 8009426:	464b      	mov	r3, r9
 8009428:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800942c:	e6dc      	b.n	80091e8 <_printf_float+0x1ec>
 800942e:	f04f 0800 	mov.w	r8, #0
 8009432:	f104 0a1a 	add.w	sl, r4, #26
 8009436:	e7f2      	b.n	800941e <_printf_float+0x422>
 8009438:	2301      	movs	r3, #1
 800943a:	4642      	mov	r2, r8
 800943c:	e7df      	b.n	80093fe <_printf_float+0x402>
 800943e:	2301      	movs	r3, #1
 8009440:	464a      	mov	r2, r9
 8009442:	4631      	mov	r1, r6
 8009444:	4628      	mov	r0, r5
 8009446:	47b8      	blx	r7
 8009448:	3001      	adds	r0, #1
 800944a:	f43f ae38 	beq.w	80090be <_printf_float+0xc2>
 800944e:	f108 0801 	add.w	r8, r8, #1
 8009452:	68e3      	ldr	r3, [r4, #12]
 8009454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009456:	1a5b      	subs	r3, r3, r1
 8009458:	4543      	cmp	r3, r8
 800945a:	dcf0      	bgt.n	800943e <_printf_float+0x442>
 800945c:	e6fa      	b.n	8009254 <_printf_float+0x258>
 800945e:	f04f 0800 	mov.w	r8, #0
 8009462:	f104 0919 	add.w	r9, r4, #25
 8009466:	e7f4      	b.n	8009452 <_printf_float+0x456>

08009468 <_printf_common>:
 8009468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800946c:	4616      	mov	r6, r2
 800946e:	4699      	mov	r9, r3
 8009470:	688a      	ldr	r2, [r1, #8]
 8009472:	690b      	ldr	r3, [r1, #16]
 8009474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009478:	4293      	cmp	r3, r2
 800947a:	bfb8      	it	lt
 800947c:	4613      	movlt	r3, r2
 800947e:	6033      	str	r3, [r6, #0]
 8009480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009484:	4607      	mov	r7, r0
 8009486:	460c      	mov	r4, r1
 8009488:	b10a      	cbz	r2, 800948e <_printf_common+0x26>
 800948a:	3301      	adds	r3, #1
 800948c:	6033      	str	r3, [r6, #0]
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	0699      	lsls	r1, r3, #26
 8009492:	bf42      	ittt	mi
 8009494:	6833      	ldrmi	r3, [r6, #0]
 8009496:	3302      	addmi	r3, #2
 8009498:	6033      	strmi	r3, [r6, #0]
 800949a:	6825      	ldr	r5, [r4, #0]
 800949c:	f015 0506 	ands.w	r5, r5, #6
 80094a0:	d106      	bne.n	80094b0 <_printf_common+0x48>
 80094a2:	f104 0a19 	add.w	sl, r4, #25
 80094a6:	68e3      	ldr	r3, [r4, #12]
 80094a8:	6832      	ldr	r2, [r6, #0]
 80094aa:	1a9b      	subs	r3, r3, r2
 80094ac:	42ab      	cmp	r3, r5
 80094ae:	dc26      	bgt.n	80094fe <_printf_common+0x96>
 80094b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094b4:	1e13      	subs	r3, r2, #0
 80094b6:	6822      	ldr	r2, [r4, #0]
 80094b8:	bf18      	it	ne
 80094ba:	2301      	movne	r3, #1
 80094bc:	0692      	lsls	r2, r2, #26
 80094be:	d42b      	bmi.n	8009518 <_printf_common+0xb0>
 80094c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094c4:	4649      	mov	r1, r9
 80094c6:	4638      	mov	r0, r7
 80094c8:	47c0      	blx	r8
 80094ca:	3001      	adds	r0, #1
 80094cc:	d01e      	beq.n	800950c <_printf_common+0xa4>
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	68e5      	ldr	r5, [r4, #12]
 80094d2:	6832      	ldr	r2, [r6, #0]
 80094d4:	f003 0306 	and.w	r3, r3, #6
 80094d8:	2b04      	cmp	r3, #4
 80094da:	bf08      	it	eq
 80094dc:	1aad      	subeq	r5, r5, r2
 80094de:	68a3      	ldr	r3, [r4, #8]
 80094e0:	6922      	ldr	r2, [r4, #16]
 80094e2:	bf0c      	ite	eq
 80094e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094e8:	2500      	movne	r5, #0
 80094ea:	4293      	cmp	r3, r2
 80094ec:	bfc4      	itt	gt
 80094ee:	1a9b      	subgt	r3, r3, r2
 80094f0:	18ed      	addgt	r5, r5, r3
 80094f2:	2600      	movs	r6, #0
 80094f4:	341a      	adds	r4, #26
 80094f6:	42b5      	cmp	r5, r6
 80094f8:	d11a      	bne.n	8009530 <_printf_common+0xc8>
 80094fa:	2000      	movs	r0, #0
 80094fc:	e008      	b.n	8009510 <_printf_common+0xa8>
 80094fe:	2301      	movs	r3, #1
 8009500:	4652      	mov	r2, sl
 8009502:	4649      	mov	r1, r9
 8009504:	4638      	mov	r0, r7
 8009506:	47c0      	blx	r8
 8009508:	3001      	adds	r0, #1
 800950a:	d103      	bne.n	8009514 <_printf_common+0xac>
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009514:	3501      	adds	r5, #1
 8009516:	e7c6      	b.n	80094a6 <_printf_common+0x3e>
 8009518:	18e1      	adds	r1, r4, r3
 800951a:	1c5a      	adds	r2, r3, #1
 800951c:	2030      	movs	r0, #48	; 0x30
 800951e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009522:	4422      	add	r2, r4
 8009524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800952c:	3302      	adds	r3, #2
 800952e:	e7c7      	b.n	80094c0 <_printf_common+0x58>
 8009530:	2301      	movs	r3, #1
 8009532:	4622      	mov	r2, r4
 8009534:	4649      	mov	r1, r9
 8009536:	4638      	mov	r0, r7
 8009538:	47c0      	blx	r8
 800953a:	3001      	adds	r0, #1
 800953c:	d0e6      	beq.n	800950c <_printf_common+0xa4>
 800953e:	3601      	adds	r6, #1
 8009540:	e7d9      	b.n	80094f6 <_printf_common+0x8e>
	...

08009544 <_printf_i>:
 8009544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009548:	7e0f      	ldrb	r7, [r1, #24]
 800954a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800954c:	2f78      	cmp	r7, #120	; 0x78
 800954e:	4691      	mov	r9, r2
 8009550:	4680      	mov	r8, r0
 8009552:	460c      	mov	r4, r1
 8009554:	469a      	mov	sl, r3
 8009556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800955a:	d807      	bhi.n	800956c <_printf_i+0x28>
 800955c:	2f62      	cmp	r7, #98	; 0x62
 800955e:	d80a      	bhi.n	8009576 <_printf_i+0x32>
 8009560:	2f00      	cmp	r7, #0
 8009562:	f000 80d8 	beq.w	8009716 <_printf_i+0x1d2>
 8009566:	2f58      	cmp	r7, #88	; 0x58
 8009568:	f000 80a3 	beq.w	80096b2 <_printf_i+0x16e>
 800956c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009574:	e03a      	b.n	80095ec <_printf_i+0xa8>
 8009576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800957a:	2b15      	cmp	r3, #21
 800957c:	d8f6      	bhi.n	800956c <_printf_i+0x28>
 800957e:	a101      	add	r1, pc, #4	; (adr r1, 8009584 <_printf_i+0x40>)
 8009580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009584:	080095dd 	.word	0x080095dd
 8009588:	080095f1 	.word	0x080095f1
 800958c:	0800956d 	.word	0x0800956d
 8009590:	0800956d 	.word	0x0800956d
 8009594:	0800956d 	.word	0x0800956d
 8009598:	0800956d 	.word	0x0800956d
 800959c:	080095f1 	.word	0x080095f1
 80095a0:	0800956d 	.word	0x0800956d
 80095a4:	0800956d 	.word	0x0800956d
 80095a8:	0800956d 	.word	0x0800956d
 80095ac:	0800956d 	.word	0x0800956d
 80095b0:	080096fd 	.word	0x080096fd
 80095b4:	08009621 	.word	0x08009621
 80095b8:	080096df 	.word	0x080096df
 80095bc:	0800956d 	.word	0x0800956d
 80095c0:	0800956d 	.word	0x0800956d
 80095c4:	0800971f 	.word	0x0800971f
 80095c8:	0800956d 	.word	0x0800956d
 80095cc:	08009621 	.word	0x08009621
 80095d0:	0800956d 	.word	0x0800956d
 80095d4:	0800956d 	.word	0x0800956d
 80095d8:	080096e7 	.word	0x080096e7
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	1d1a      	adds	r2, r3, #4
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	602a      	str	r2, [r5, #0]
 80095e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095ec:	2301      	movs	r3, #1
 80095ee:	e0a3      	b.n	8009738 <_printf_i+0x1f4>
 80095f0:	6820      	ldr	r0, [r4, #0]
 80095f2:	6829      	ldr	r1, [r5, #0]
 80095f4:	0606      	lsls	r6, r0, #24
 80095f6:	f101 0304 	add.w	r3, r1, #4
 80095fa:	d50a      	bpl.n	8009612 <_printf_i+0xce>
 80095fc:	680e      	ldr	r6, [r1, #0]
 80095fe:	602b      	str	r3, [r5, #0]
 8009600:	2e00      	cmp	r6, #0
 8009602:	da03      	bge.n	800960c <_printf_i+0xc8>
 8009604:	232d      	movs	r3, #45	; 0x2d
 8009606:	4276      	negs	r6, r6
 8009608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800960c:	485e      	ldr	r0, [pc, #376]	; (8009788 <_printf_i+0x244>)
 800960e:	230a      	movs	r3, #10
 8009610:	e019      	b.n	8009646 <_printf_i+0x102>
 8009612:	680e      	ldr	r6, [r1, #0]
 8009614:	602b      	str	r3, [r5, #0]
 8009616:	f010 0f40 	tst.w	r0, #64	; 0x40
 800961a:	bf18      	it	ne
 800961c:	b236      	sxthne	r6, r6
 800961e:	e7ef      	b.n	8009600 <_printf_i+0xbc>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	6820      	ldr	r0, [r4, #0]
 8009624:	1d19      	adds	r1, r3, #4
 8009626:	6029      	str	r1, [r5, #0]
 8009628:	0601      	lsls	r1, r0, #24
 800962a:	d501      	bpl.n	8009630 <_printf_i+0xec>
 800962c:	681e      	ldr	r6, [r3, #0]
 800962e:	e002      	b.n	8009636 <_printf_i+0xf2>
 8009630:	0646      	lsls	r6, r0, #25
 8009632:	d5fb      	bpl.n	800962c <_printf_i+0xe8>
 8009634:	881e      	ldrh	r6, [r3, #0]
 8009636:	4854      	ldr	r0, [pc, #336]	; (8009788 <_printf_i+0x244>)
 8009638:	2f6f      	cmp	r7, #111	; 0x6f
 800963a:	bf0c      	ite	eq
 800963c:	2308      	moveq	r3, #8
 800963e:	230a      	movne	r3, #10
 8009640:	2100      	movs	r1, #0
 8009642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009646:	6865      	ldr	r5, [r4, #4]
 8009648:	60a5      	str	r5, [r4, #8]
 800964a:	2d00      	cmp	r5, #0
 800964c:	bfa2      	ittt	ge
 800964e:	6821      	ldrge	r1, [r4, #0]
 8009650:	f021 0104 	bicge.w	r1, r1, #4
 8009654:	6021      	strge	r1, [r4, #0]
 8009656:	b90e      	cbnz	r6, 800965c <_printf_i+0x118>
 8009658:	2d00      	cmp	r5, #0
 800965a:	d04d      	beq.n	80096f8 <_printf_i+0x1b4>
 800965c:	4615      	mov	r5, r2
 800965e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009662:	fb03 6711 	mls	r7, r3, r1, r6
 8009666:	5dc7      	ldrb	r7, [r0, r7]
 8009668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800966c:	4637      	mov	r7, r6
 800966e:	42bb      	cmp	r3, r7
 8009670:	460e      	mov	r6, r1
 8009672:	d9f4      	bls.n	800965e <_printf_i+0x11a>
 8009674:	2b08      	cmp	r3, #8
 8009676:	d10b      	bne.n	8009690 <_printf_i+0x14c>
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	07de      	lsls	r6, r3, #31
 800967c:	d508      	bpl.n	8009690 <_printf_i+0x14c>
 800967e:	6923      	ldr	r3, [r4, #16]
 8009680:	6861      	ldr	r1, [r4, #4]
 8009682:	4299      	cmp	r1, r3
 8009684:	bfde      	ittt	le
 8009686:	2330      	movle	r3, #48	; 0x30
 8009688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800968c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009690:	1b52      	subs	r2, r2, r5
 8009692:	6122      	str	r2, [r4, #16]
 8009694:	f8cd a000 	str.w	sl, [sp]
 8009698:	464b      	mov	r3, r9
 800969a:	aa03      	add	r2, sp, #12
 800969c:	4621      	mov	r1, r4
 800969e:	4640      	mov	r0, r8
 80096a0:	f7ff fee2 	bl	8009468 <_printf_common>
 80096a4:	3001      	adds	r0, #1
 80096a6:	d14c      	bne.n	8009742 <_printf_i+0x1fe>
 80096a8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ac:	b004      	add	sp, #16
 80096ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b2:	4835      	ldr	r0, [pc, #212]	; (8009788 <_printf_i+0x244>)
 80096b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80096b8:	6829      	ldr	r1, [r5, #0]
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80096c0:	6029      	str	r1, [r5, #0]
 80096c2:	061d      	lsls	r5, r3, #24
 80096c4:	d514      	bpl.n	80096f0 <_printf_i+0x1ac>
 80096c6:	07df      	lsls	r7, r3, #31
 80096c8:	bf44      	itt	mi
 80096ca:	f043 0320 	orrmi.w	r3, r3, #32
 80096ce:	6023      	strmi	r3, [r4, #0]
 80096d0:	b91e      	cbnz	r6, 80096da <_printf_i+0x196>
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	f023 0320 	bic.w	r3, r3, #32
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	2310      	movs	r3, #16
 80096dc:	e7b0      	b.n	8009640 <_printf_i+0xfc>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	f043 0320 	orr.w	r3, r3, #32
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	2378      	movs	r3, #120	; 0x78
 80096e8:	4828      	ldr	r0, [pc, #160]	; (800978c <_printf_i+0x248>)
 80096ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096ee:	e7e3      	b.n	80096b8 <_printf_i+0x174>
 80096f0:	0659      	lsls	r1, r3, #25
 80096f2:	bf48      	it	mi
 80096f4:	b2b6      	uxthmi	r6, r6
 80096f6:	e7e6      	b.n	80096c6 <_printf_i+0x182>
 80096f8:	4615      	mov	r5, r2
 80096fa:	e7bb      	b.n	8009674 <_printf_i+0x130>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	6826      	ldr	r6, [r4, #0]
 8009700:	6961      	ldr	r1, [r4, #20]
 8009702:	1d18      	adds	r0, r3, #4
 8009704:	6028      	str	r0, [r5, #0]
 8009706:	0635      	lsls	r5, r6, #24
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	d501      	bpl.n	8009710 <_printf_i+0x1cc>
 800970c:	6019      	str	r1, [r3, #0]
 800970e:	e002      	b.n	8009716 <_printf_i+0x1d2>
 8009710:	0670      	lsls	r0, r6, #25
 8009712:	d5fb      	bpl.n	800970c <_printf_i+0x1c8>
 8009714:	8019      	strh	r1, [r3, #0]
 8009716:	2300      	movs	r3, #0
 8009718:	6123      	str	r3, [r4, #16]
 800971a:	4615      	mov	r5, r2
 800971c:	e7ba      	b.n	8009694 <_printf_i+0x150>
 800971e:	682b      	ldr	r3, [r5, #0]
 8009720:	1d1a      	adds	r2, r3, #4
 8009722:	602a      	str	r2, [r5, #0]
 8009724:	681d      	ldr	r5, [r3, #0]
 8009726:	6862      	ldr	r2, [r4, #4]
 8009728:	2100      	movs	r1, #0
 800972a:	4628      	mov	r0, r5
 800972c:	f7f6 fd68 	bl	8000200 <memchr>
 8009730:	b108      	cbz	r0, 8009736 <_printf_i+0x1f2>
 8009732:	1b40      	subs	r0, r0, r5
 8009734:	6060      	str	r0, [r4, #4]
 8009736:	6863      	ldr	r3, [r4, #4]
 8009738:	6123      	str	r3, [r4, #16]
 800973a:	2300      	movs	r3, #0
 800973c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009740:	e7a8      	b.n	8009694 <_printf_i+0x150>
 8009742:	6923      	ldr	r3, [r4, #16]
 8009744:	462a      	mov	r2, r5
 8009746:	4649      	mov	r1, r9
 8009748:	4640      	mov	r0, r8
 800974a:	47d0      	blx	sl
 800974c:	3001      	adds	r0, #1
 800974e:	d0ab      	beq.n	80096a8 <_printf_i+0x164>
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	079b      	lsls	r3, r3, #30
 8009754:	d413      	bmi.n	800977e <_printf_i+0x23a>
 8009756:	68e0      	ldr	r0, [r4, #12]
 8009758:	9b03      	ldr	r3, [sp, #12]
 800975a:	4298      	cmp	r0, r3
 800975c:	bfb8      	it	lt
 800975e:	4618      	movlt	r0, r3
 8009760:	e7a4      	b.n	80096ac <_printf_i+0x168>
 8009762:	2301      	movs	r3, #1
 8009764:	4632      	mov	r2, r6
 8009766:	4649      	mov	r1, r9
 8009768:	4640      	mov	r0, r8
 800976a:	47d0      	blx	sl
 800976c:	3001      	adds	r0, #1
 800976e:	d09b      	beq.n	80096a8 <_printf_i+0x164>
 8009770:	3501      	adds	r5, #1
 8009772:	68e3      	ldr	r3, [r4, #12]
 8009774:	9903      	ldr	r1, [sp, #12]
 8009776:	1a5b      	subs	r3, r3, r1
 8009778:	42ab      	cmp	r3, r5
 800977a:	dcf2      	bgt.n	8009762 <_printf_i+0x21e>
 800977c:	e7eb      	b.n	8009756 <_printf_i+0x212>
 800977e:	2500      	movs	r5, #0
 8009780:	f104 0619 	add.w	r6, r4, #25
 8009784:	e7f5      	b.n	8009772 <_printf_i+0x22e>
 8009786:	bf00      	nop
 8009788:	0801fd46 	.word	0x0801fd46
 800978c:	0801fd57 	.word	0x0801fd57

08009790 <siprintf>:
 8009790:	b40e      	push	{r1, r2, r3}
 8009792:	b500      	push	{lr}
 8009794:	b09c      	sub	sp, #112	; 0x70
 8009796:	ab1d      	add	r3, sp, #116	; 0x74
 8009798:	9002      	str	r0, [sp, #8]
 800979a:	9006      	str	r0, [sp, #24]
 800979c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097a0:	4809      	ldr	r0, [pc, #36]	; (80097c8 <siprintf+0x38>)
 80097a2:	9107      	str	r1, [sp, #28]
 80097a4:	9104      	str	r1, [sp, #16]
 80097a6:	4909      	ldr	r1, [pc, #36]	; (80097cc <siprintf+0x3c>)
 80097a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ac:	9105      	str	r1, [sp, #20]
 80097ae:	6800      	ldr	r0, [r0, #0]
 80097b0:	9301      	str	r3, [sp, #4]
 80097b2:	a902      	add	r1, sp, #8
 80097b4:	f001 fc24 	bl	800b000 <_svfiprintf_r>
 80097b8:	9b02      	ldr	r3, [sp, #8]
 80097ba:	2200      	movs	r2, #0
 80097bc:	701a      	strb	r2, [r3, #0]
 80097be:	b01c      	add	sp, #112	; 0x70
 80097c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097c4:	b003      	add	sp, #12
 80097c6:	4770      	bx	lr
 80097c8:	20000168 	.word	0x20000168
 80097cc:	ffff0208 	.word	0xffff0208

080097d0 <__sread>:
 80097d0:	b510      	push	{r4, lr}
 80097d2:	460c      	mov	r4, r1
 80097d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d8:	f001 fe6c 	bl	800b4b4 <_read_r>
 80097dc:	2800      	cmp	r0, #0
 80097de:	bfab      	itete	ge
 80097e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097e2:	89a3      	ldrhlt	r3, [r4, #12]
 80097e4:	181b      	addge	r3, r3, r0
 80097e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097ea:	bfac      	ite	ge
 80097ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80097ee:	81a3      	strhlt	r3, [r4, #12]
 80097f0:	bd10      	pop	{r4, pc}

080097f2 <__swrite>:
 80097f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f6:	461f      	mov	r7, r3
 80097f8:	898b      	ldrh	r3, [r1, #12]
 80097fa:	05db      	lsls	r3, r3, #23
 80097fc:	4605      	mov	r5, r0
 80097fe:	460c      	mov	r4, r1
 8009800:	4616      	mov	r6, r2
 8009802:	d505      	bpl.n	8009810 <__swrite+0x1e>
 8009804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009808:	2302      	movs	r3, #2
 800980a:	2200      	movs	r2, #0
 800980c:	f000 ff08 	bl	800a620 <_lseek_r>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800981a:	81a3      	strh	r3, [r4, #12]
 800981c:	4632      	mov	r2, r6
 800981e:	463b      	mov	r3, r7
 8009820:	4628      	mov	r0, r5
 8009822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009826:	f000 b829 	b.w	800987c <_write_r>

0800982a <__sseek>:
 800982a:	b510      	push	{r4, lr}
 800982c:	460c      	mov	r4, r1
 800982e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009832:	f000 fef5 	bl	800a620 <_lseek_r>
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	bf15      	itete	ne
 800983c:	6560      	strne	r0, [r4, #84]	; 0x54
 800983e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009846:	81a3      	strheq	r3, [r4, #12]
 8009848:	bf18      	it	ne
 800984a:	81a3      	strhne	r3, [r4, #12]
 800984c:	bd10      	pop	{r4, pc}

0800984e <__sclose>:
 800984e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009852:	f000 b843 	b.w	80098dc <_close_r>

08009856 <strncpy>:
 8009856:	b510      	push	{r4, lr}
 8009858:	3901      	subs	r1, #1
 800985a:	4603      	mov	r3, r0
 800985c:	b132      	cbz	r2, 800986c <strncpy+0x16>
 800985e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009862:	f803 4b01 	strb.w	r4, [r3], #1
 8009866:	3a01      	subs	r2, #1
 8009868:	2c00      	cmp	r4, #0
 800986a:	d1f7      	bne.n	800985c <strncpy+0x6>
 800986c:	441a      	add	r2, r3
 800986e:	2100      	movs	r1, #0
 8009870:	4293      	cmp	r3, r2
 8009872:	d100      	bne.n	8009876 <strncpy+0x20>
 8009874:	bd10      	pop	{r4, pc}
 8009876:	f803 1b01 	strb.w	r1, [r3], #1
 800987a:	e7f9      	b.n	8009870 <strncpy+0x1a>

0800987c <_write_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d07      	ldr	r5, [pc, #28]	; (800989c <_write_r+0x20>)
 8009880:	4604      	mov	r4, r0
 8009882:	4608      	mov	r0, r1
 8009884:	4611      	mov	r1, r2
 8009886:	2200      	movs	r2, #0
 8009888:	602a      	str	r2, [r5, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f7f9 fac1 	bl	8002e12 <_write>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_write_r+0x1e>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_write_r+0x1e>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	200035c0 	.word	0x200035c0

080098a0 <__assert_func>:
 80098a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098a2:	4614      	mov	r4, r2
 80098a4:	461a      	mov	r2, r3
 80098a6:	4b09      	ldr	r3, [pc, #36]	; (80098cc <__assert_func+0x2c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4605      	mov	r5, r0
 80098ac:	68d8      	ldr	r0, [r3, #12]
 80098ae:	b14c      	cbz	r4, 80098c4 <__assert_func+0x24>
 80098b0:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <__assert_func+0x30>)
 80098b2:	9100      	str	r1, [sp, #0]
 80098b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098b8:	4906      	ldr	r1, [pc, #24]	; (80098d4 <__assert_func+0x34>)
 80098ba:	462b      	mov	r3, r5
 80098bc:	f000 fe9a 	bl	800a5f4 <fiprintf>
 80098c0:	f001 feda 	bl	800b678 <abort>
 80098c4:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <__assert_func+0x38>)
 80098c6:	461c      	mov	r4, r3
 80098c8:	e7f3      	b.n	80098b2 <__assert_func+0x12>
 80098ca:	bf00      	nop
 80098cc:	20000168 	.word	0x20000168
 80098d0:	0801fd68 	.word	0x0801fd68
 80098d4:	0801fd75 	.word	0x0801fd75
 80098d8:	0801fda3 	.word	0x0801fda3

080098dc <_close_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4d06      	ldr	r5, [pc, #24]	; (80098f8 <_close_r+0x1c>)
 80098e0:	2300      	movs	r3, #0
 80098e2:	4604      	mov	r4, r0
 80098e4:	4608      	mov	r0, r1
 80098e6:	602b      	str	r3, [r5, #0]
 80098e8:	f7f9 faaf 	bl	8002e4a <_close>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d102      	bne.n	80098f6 <_close_r+0x1a>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b103      	cbz	r3, 80098f6 <_close_r+0x1a>
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	200035c0 	.word	0x200035c0

080098fc <quorem>:
 80098fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	6903      	ldr	r3, [r0, #16]
 8009902:	690c      	ldr	r4, [r1, #16]
 8009904:	42a3      	cmp	r3, r4
 8009906:	4607      	mov	r7, r0
 8009908:	f2c0 8081 	blt.w	8009a0e <quorem+0x112>
 800990c:	3c01      	subs	r4, #1
 800990e:	f101 0814 	add.w	r8, r1, #20
 8009912:	f100 0514 	add.w	r5, r0, #20
 8009916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009924:	3301      	adds	r3, #1
 8009926:	429a      	cmp	r2, r3
 8009928:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800992c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009930:	fbb2 f6f3 	udiv	r6, r2, r3
 8009934:	d331      	bcc.n	800999a <quorem+0x9e>
 8009936:	f04f 0e00 	mov.w	lr, #0
 800993a:	4640      	mov	r0, r8
 800993c:	46ac      	mov	ip, r5
 800993e:	46f2      	mov	sl, lr
 8009940:	f850 2b04 	ldr.w	r2, [r0], #4
 8009944:	b293      	uxth	r3, r2
 8009946:	fb06 e303 	mla	r3, r6, r3, lr
 800994a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800994e:	b29b      	uxth	r3, r3
 8009950:	ebaa 0303 	sub.w	r3, sl, r3
 8009954:	f8dc a000 	ldr.w	sl, [ip]
 8009958:	0c12      	lsrs	r2, r2, #16
 800995a:	fa13 f38a 	uxtah	r3, r3, sl
 800995e:	fb06 e202 	mla	r2, r6, r2, lr
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	9b00      	ldr	r3, [sp, #0]
 8009966:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800996a:	b292      	uxth	r2, r2
 800996c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009974:	f8bd 3000 	ldrh.w	r3, [sp]
 8009978:	4581      	cmp	r9, r0
 800997a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800997e:	f84c 3b04 	str.w	r3, [ip], #4
 8009982:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009986:	d2db      	bcs.n	8009940 <quorem+0x44>
 8009988:	f855 300b 	ldr.w	r3, [r5, fp]
 800998c:	b92b      	cbnz	r3, 800999a <quorem+0x9e>
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	3b04      	subs	r3, #4
 8009992:	429d      	cmp	r5, r3
 8009994:	461a      	mov	r2, r3
 8009996:	d32e      	bcc.n	80099f6 <quorem+0xfa>
 8009998:	613c      	str	r4, [r7, #16]
 800999a:	4638      	mov	r0, r7
 800999c:	f001 f8dc 	bl	800ab58 <__mcmp>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	db24      	blt.n	80099ee <quorem+0xf2>
 80099a4:	3601      	adds	r6, #1
 80099a6:	4628      	mov	r0, r5
 80099a8:	f04f 0c00 	mov.w	ip, #0
 80099ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80099b0:	f8d0 e000 	ldr.w	lr, [r0]
 80099b4:	b293      	uxth	r3, r2
 80099b6:	ebac 0303 	sub.w	r3, ip, r3
 80099ba:	0c12      	lsrs	r2, r2, #16
 80099bc:	fa13 f38e 	uxtah	r3, r3, lr
 80099c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099ce:	45c1      	cmp	r9, r8
 80099d0:	f840 3b04 	str.w	r3, [r0], #4
 80099d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099d8:	d2e8      	bcs.n	80099ac <quorem+0xb0>
 80099da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099e2:	b922      	cbnz	r2, 80099ee <quorem+0xf2>
 80099e4:	3b04      	subs	r3, #4
 80099e6:	429d      	cmp	r5, r3
 80099e8:	461a      	mov	r2, r3
 80099ea:	d30a      	bcc.n	8009a02 <quorem+0x106>
 80099ec:	613c      	str	r4, [r7, #16]
 80099ee:	4630      	mov	r0, r6
 80099f0:	b003      	add	sp, #12
 80099f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f6:	6812      	ldr	r2, [r2, #0]
 80099f8:	3b04      	subs	r3, #4
 80099fa:	2a00      	cmp	r2, #0
 80099fc:	d1cc      	bne.n	8009998 <quorem+0x9c>
 80099fe:	3c01      	subs	r4, #1
 8009a00:	e7c7      	b.n	8009992 <quorem+0x96>
 8009a02:	6812      	ldr	r2, [r2, #0]
 8009a04:	3b04      	subs	r3, #4
 8009a06:	2a00      	cmp	r2, #0
 8009a08:	d1f0      	bne.n	80099ec <quorem+0xf0>
 8009a0a:	3c01      	subs	r4, #1
 8009a0c:	e7eb      	b.n	80099e6 <quorem+0xea>
 8009a0e:	2000      	movs	r0, #0
 8009a10:	e7ee      	b.n	80099f0 <quorem+0xf4>
 8009a12:	0000      	movs	r0, r0
 8009a14:	0000      	movs	r0, r0
	...

08009a18 <_dtoa_r>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	ed2d 8b04 	vpush	{d8-d9}
 8009a20:	ec57 6b10 	vmov	r6, r7, d0
 8009a24:	b093      	sub	sp, #76	; 0x4c
 8009a26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a2c:	9106      	str	r1, [sp, #24]
 8009a2e:	ee10 aa10 	vmov	sl, s0
 8009a32:	4604      	mov	r4, r0
 8009a34:	9209      	str	r2, [sp, #36]	; 0x24
 8009a36:	930c      	str	r3, [sp, #48]	; 0x30
 8009a38:	46bb      	mov	fp, r7
 8009a3a:	b975      	cbnz	r5, 8009a5a <_dtoa_r+0x42>
 8009a3c:	2010      	movs	r0, #16
 8009a3e:	f000 fe01 	bl	800a644 <malloc>
 8009a42:	4602      	mov	r2, r0
 8009a44:	6260      	str	r0, [r4, #36]	; 0x24
 8009a46:	b920      	cbnz	r0, 8009a52 <_dtoa_r+0x3a>
 8009a48:	4ba7      	ldr	r3, [pc, #668]	; (8009ce8 <_dtoa_r+0x2d0>)
 8009a4a:	21ea      	movs	r1, #234	; 0xea
 8009a4c:	48a7      	ldr	r0, [pc, #668]	; (8009cec <_dtoa_r+0x2d4>)
 8009a4e:	f7ff ff27 	bl	80098a0 <__assert_func>
 8009a52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a56:	6005      	str	r5, [r0, #0]
 8009a58:	60c5      	str	r5, [r0, #12]
 8009a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a5c:	6819      	ldr	r1, [r3, #0]
 8009a5e:	b151      	cbz	r1, 8009a76 <_dtoa_r+0x5e>
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	604a      	str	r2, [r1, #4]
 8009a64:	2301      	movs	r3, #1
 8009a66:	4093      	lsls	r3, r2
 8009a68:	608b      	str	r3, [r1, #8]
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 fe32 	bl	800a6d4 <_Bfree>
 8009a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	1e3b      	subs	r3, r7, #0
 8009a78:	bfaa      	itet	ge
 8009a7a:	2300      	movge	r3, #0
 8009a7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a80:	f8c8 3000 	strge.w	r3, [r8]
 8009a84:	4b9a      	ldr	r3, [pc, #616]	; (8009cf0 <_dtoa_r+0x2d8>)
 8009a86:	bfbc      	itt	lt
 8009a88:	2201      	movlt	r2, #1
 8009a8a:	f8c8 2000 	strlt.w	r2, [r8]
 8009a8e:	ea33 030b 	bics.w	r3, r3, fp
 8009a92:	d11b      	bne.n	8009acc <_dtoa_r+0xb4>
 8009a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a96:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aa0:	4333      	orrs	r3, r6
 8009aa2:	f000 8592 	beq.w	800a5ca <_dtoa_r+0xbb2>
 8009aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aa8:	b963      	cbnz	r3, 8009ac4 <_dtoa_r+0xac>
 8009aaa:	4b92      	ldr	r3, [pc, #584]	; (8009cf4 <_dtoa_r+0x2dc>)
 8009aac:	e022      	b.n	8009af4 <_dtoa_r+0xdc>
 8009aae:	4b92      	ldr	r3, [pc, #584]	; (8009cf8 <_dtoa_r+0x2e0>)
 8009ab0:	9301      	str	r3, [sp, #4]
 8009ab2:	3308      	adds	r3, #8
 8009ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ab6:	6013      	str	r3, [r2, #0]
 8009ab8:	9801      	ldr	r0, [sp, #4]
 8009aba:	b013      	add	sp, #76	; 0x4c
 8009abc:	ecbd 8b04 	vpop	{d8-d9}
 8009ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac4:	4b8b      	ldr	r3, [pc, #556]	; (8009cf4 <_dtoa_r+0x2dc>)
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	3303      	adds	r3, #3
 8009aca:	e7f3      	b.n	8009ab4 <_dtoa_r+0x9c>
 8009acc:	2200      	movs	r2, #0
 8009ace:	2300      	movs	r3, #0
 8009ad0:	4650      	mov	r0, sl
 8009ad2:	4659      	mov	r1, fp
 8009ad4:	f7f7 f808 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ad8:	ec4b ab19 	vmov	d9, sl, fp
 8009adc:	4680      	mov	r8, r0
 8009ade:	b158      	cbz	r0, 8009af8 <_dtoa_r+0xe0>
 8009ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 856b 	beq.w	800a5c4 <_dtoa_r+0xbac>
 8009aee:	4883      	ldr	r0, [pc, #524]	; (8009cfc <_dtoa_r+0x2e4>)
 8009af0:	6018      	str	r0, [r3, #0]
 8009af2:	1e43      	subs	r3, r0, #1
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	e7df      	b.n	8009ab8 <_dtoa_r+0xa0>
 8009af8:	ec4b ab10 	vmov	d0, sl, fp
 8009afc:	aa10      	add	r2, sp, #64	; 0x40
 8009afe:	a911      	add	r1, sp, #68	; 0x44
 8009b00:	4620      	mov	r0, r4
 8009b02:	f001 f8cf 	bl	800aca4 <__d2b>
 8009b06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009b0a:	ee08 0a10 	vmov	s16, r0
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	f000 8084 	beq.w	8009c1c <_dtoa_r+0x204>
 8009b14:	ee19 3a90 	vmov	r3, s19
 8009b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b20:	4656      	mov	r6, sl
 8009b22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009b2e:	4b74      	ldr	r3, [pc, #464]	; (8009d00 <_dtoa_r+0x2e8>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	4630      	mov	r0, r6
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 fbb7 	bl	80002a8 <__aeabi_dsub>
 8009b3a:	a365      	add	r3, pc, #404	; (adr r3, 8009cd0 <_dtoa_r+0x2b8>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 fd6a 	bl	8000618 <__aeabi_dmul>
 8009b44:	a364      	add	r3, pc, #400	; (adr r3, 8009cd8 <_dtoa_r+0x2c0>)
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	f7f6 fbaf 	bl	80002ac <__adddf3>
 8009b4e:	4606      	mov	r6, r0
 8009b50:	4628      	mov	r0, r5
 8009b52:	460f      	mov	r7, r1
 8009b54:	f7f6 fcf6 	bl	8000544 <__aeabi_i2d>
 8009b58:	a361      	add	r3, pc, #388	; (adr r3, 8009ce0 <_dtoa_r+0x2c8>)
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	f7f6 fd5b 	bl	8000618 <__aeabi_dmul>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4630      	mov	r0, r6
 8009b68:	4639      	mov	r1, r7
 8009b6a:	f7f6 fb9f 	bl	80002ac <__adddf3>
 8009b6e:	4606      	mov	r6, r0
 8009b70:	460f      	mov	r7, r1
 8009b72:	f7f7 f801 	bl	8000b78 <__aeabi_d2iz>
 8009b76:	2200      	movs	r2, #0
 8009b78:	9000      	str	r0, [sp, #0]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	4639      	mov	r1, r7
 8009b80:	f7f6 ffbc 	bl	8000afc <__aeabi_dcmplt>
 8009b84:	b150      	cbz	r0, 8009b9c <_dtoa_r+0x184>
 8009b86:	9800      	ldr	r0, [sp, #0]
 8009b88:	f7f6 fcdc 	bl	8000544 <__aeabi_i2d>
 8009b8c:	4632      	mov	r2, r6
 8009b8e:	463b      	mov	r3, r7
 8009b90:	f7f6 ffaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b94:	b910      	cbnz	r0, 8009b9c <_dtoa_r+0x184>
 8009b96:	9b00      	ldr	r3, [sp, #0]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	9b00      	ldr	r3, [sp, #0]
 8009b9e:	2b16      	cmp	r3, #22
 8009ba0:	d85a      	bhi.n	8009c58 <_dtoa_r+0x240>
 8009ba2:	9a00      	ldr	r2, [sp, #0]
 8009ba4:	4b57      	ldr	r3, [pc, #348]	; (8009d04 <_dtoa_r+0x2ec>)
 8009ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	ec51 0b19 	vmov	r0, r1, d9
 8009bb2:	f7f6 ffa3 	bl	8000afc <__aeabi_dcmplt>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d050      	beq.n	8009c5c <_dtoa_r+0x244>
 8009bba:	9b00      	ldr	r3, [sp, #0]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bc6:	1b5d      	subs	r5, r3, r5
 8009bc8:	1e6b      	subs	r3, r5, #1
 8009bca:	9305      	str	r3, [sp, #20]
 8009bcc:	bf45      	ittet	mi
 8009bce:	f1c5 0301 	rsbmi	r3, r5, #1
 8009bd2:	9304      	strmi	r3, [sp, #16]
 8009bd4:	2300      	movpl	r3, #0
 8009bd6:	2300      	movmi	r3, #0
 8009bd8:	bf4c      	ite	mi
 8009bda:	9305      	strmi	r3, [sp, #20]
 8009bdc:	9304      	strpl	r3, [sp, #16]
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	db3d      	blt.n	8009c60 <_dtoa_r+0x248>
 8009be4:	9b05      	ldr	r3, [sp, #20]
 8009be6:	9a00      	ldr	r2, [sp, #0]
 8009be8:	920a      	str	r2, [sp, #40]	; 0x28
 8009bea:	4413      	add	r3, r2
 8009bec:	9305      	str	r3, [sp, #20]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	9307      	str	r3, [sp, #28]
 8009bf2:	9b06      	ldr	r3, [sp, #24]
 8009bf4:	2b09      	cmp	r3, #9
 8009bf6:	f200 8089 	bhi.w	8009d0c <_dtoa_r+0x2f4>
 8009bfa:	2b05      	cmp	r3, #5
 8009bfc:	bfc4      	itt	gt
 8009bfe:	3b04      	subgt	r3, #4
 8009c00:	9306      	strgt	r3, [sp, #24]
 8009c02:	9b06      	ldr	r3, [sp, #24]
 8009c04:	f1a3 0302 	sub.w	r3, r3, #2
 8009c08:	bfcc      	ite	gt
 8009c0a:	2500      	movgt	r5, #0
 8009c0c:	2501      	movle	r5, #1
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	f200 8087 	bhi.w	8009d22 <_dtoa_r+0x30a>
 8009c14:	e8df f003 	tbb	[pc, r3]
 8009c18:	59383a2d 	.word	0x59383a2d
 8009c1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c20:	441d      	add	r5, r3
 8009c22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c26:	2b20      	cmp	r3, #32
 8009c28:	bfc1      	itttt	gt
 8009c2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c32:	fa0b f303 	lslgt.w	r3, fp, r3
 8009c36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c3a:	bfda      	itte	le
 8009c3c:	f1c3 0320 	rsble	r3, r3, #32
 8009c40:	fa06 f003 	lslle.w	r0, r6, r3
 8009c44:	4318      	orrgt	r0, r3
 8009c46:	f7f6 fc6d 	bl	8000524 <__aeabi_ui2d>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c52:	3d01      	subs	r5, #1
 8009c54:	930e      	str	r3, [sp, #56]	; 0x38
 8009c56:	e76a      	b.n	8009b2e <_dtoa_r+0x116>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e7b2      	b.n	8009bc2 <_dtoa_r+0x1aa>
 8009c5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c5e:	e7b1      	b.n	8009bc4 <_dtoa_r+0x1ac>
 8009c60:	9b04      	ldr	r3, [sp, #16]
 8009c62:	9a00      	ldr	r2, [sp, #0]
 8009c64:	1a9b      	subs	r3, r3, r2
 8009c66:	9304      	str	r3, [sp, #16]
 8009c68:	4253      	negs	r3, r2
 8009c6a:	9307      	str	r3, [sp, #28]
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c70:	e7bf      	b.n	8009bf2 <_dtoa_r+0x1da>
 8009c72:	2300      	movs	r3, #0
 8009c74:	9308      	str	r3, [sp, #32]
 8009c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dc55      	bgt.n	8009d28 <_dtoa_r+0x310>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c82:	461a      	mov	r2, r3
 8009c84:	9209      	str	r2, [sp, #36]	; 0x24
 8009c86:	e00c      	b.n	8009ca2 <_dtoa_r+0x28a>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e7f3      	b.n	8009c74 <_dtoa_r+0x25c>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c90:	9308      	str	r3, [sp, #32]
 8009c92:	9b00      	ldr	r3, [sp, #0]
 8009c94:	4413      	add	r3, r2
 8009c96:	9302      	str	r3, [sp, #8]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	9303      	str	r3, [sp, #12]
 8009c9e:	bfb8      	it	lt
 8009ca0:	2301      	movlt	r3, #1
 8009ca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	6042      	str	r2, [r0, #4]
 8009ca8:	2204      	movs	r2, #4
 8009caa:	f102 0614 	add.w	r6, r2, #20
 8009cae:	429e      	cmp	r6, r3
 8009cb0:	6841      	ldr	r1, [r0, #4]
 8009cb2:	d93d      	bls.n	8009d30 <_dtoa_r+0x318>
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 fccd 	bl	800a654 <_Balloc>
 8009cba:	9001      	str	r0, [sp, #4]
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d13b      	bne.n	8009d38 <_dtoa_r+0x320>
 8009cc0:	4b11      	ldr	r3, [pc, #68]	; (8009d08 <_dtoa_r+0x2f0>)
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009cc8:	e6c0      	b.n	8009a4c <_dtoa_r+0x34>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e7df      	b.n	8009c8e <_dtoa_r+0x276>
 8009cce:	bf00      	nop
 8009cd0:	636f4361 	.word	0x636f4361
 8009cd4:	3fd287a7 	.word	0x3fd287a7
 8009cd8:	8b60c8b3 	.word	0x8b60c8b3
 8009cdc:	3fc68a28 	.word	0x3fc68a28
 8009ce0:	509f79fb 	.word	0x509f79fb
 8009ce4:	3fd34413 	.word	0x3fd34413
 8009ce8:	0801fdb1 	.word	0x0801fdb1
 8009cec:	0801fdc8 	.word	0x0801fdc8
 8009cf0:	7ff00000 	.word	0x7ff00000
 8009cf4:	0801fdad 	.word	0x0801fdad
 8009cf8:	0801fda4 	.word	0x0801fda4
 8009cfc:	0801fd45 	.word	0x0801fd45
 8009d00:	3ff80000 	.word	0x3ff80000
 8009d04:	0801feb8 	.word	0x0801feb8
 8009d08:	0801fe23 	.word	0x0801fe23
 8009d0c:	2501      	movs	r5, #1
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9306      	str	r3, [sp, #24]
 8009d12:	9508      	str	r5, [sp, #32]
 8009d14:	f04f 33ff 	mov.w	r3, #4294967295
 8009d18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2312      	movs	r3, #18
 8009d20:	e7b0      	b.n	8009c84 <_dtoa_r+0x26c>
 8009d22:	2301      	movs	r3, #1
 8009d24:	9308      	str	r3, [sp, #32]
 8009d26:	e7f5      	b.n	8009d14 <_dtoa_r+0x2fc>
 8009d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d2e:	e7b8      	b.n	8009ca2 <_dtoa_r+0x28a>
 8009d30:	3101      	adds	r1, #1
 8009d32:	6041      	str	r1, [r0, #4]
 8009d34:	0052      	lsls	r2, r2, #1
 8009d36:	e7b8      	b.n	8009caa <_dtoa_r+0x292>
 8009d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d3a:	9a01      	ldr	r2, [sp, #4]
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	2b0e      	cmp	r3, #14
 8009d42:	f200 809d 	bhi.w	8009e80 <_dtoa_r+0x468>
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	f000 809a 	beq.w	8009e80 <_dtoa_r+0x468>
 8009d4c:	9b00      	ldr	r3, [sp, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	dd32      	ble.n	8009db8 <_dtoa_r+0x3a0>
 8009d52:	4ab7      	ldr	r2, [pc, #732]	; (800a030 <_dtoa_r+0x618>)
 8009d54:	f003 030f 	and.w	r3, r3, #15
 8009d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d60:	9b00      	ldr	r3, [sp, #0]
 8009d62:	05d8      	lsls	r0, r3, #23
 8009d64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d68:	d516      	bpl.n	8009d98 <_dtoa_r+0x380>
 8009d6a:	4bb2      	ldr	r3, [pc, #712]	; (800a034 <_dtoa_r+0x61c>)
 8009d6c:	ec51 0b19 	vmov	r0, r1, d9
 8009d70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d74:	f7f6 fd7a 	bl	800086c <__aeabi_ddiv>
 8009d78:	f007 070f 	and.w	r7, r7, #15
 8009d7c:	4682      	mov	sl, r0
 8009d7e:	468b      	mov	fp, r1
 8009d80:	2503      	movs	r5, #3
 8009d82:	4eac      	ldr	r6, [pc, #688]	; (800a034 <_dtoa_r+0x61c>)
 8009d84:	b957      	cbnz	r7, 8009d9c <_dtoa_r+0x384>
 8009d86:	4642      	mov	r2, r8
 8009d88:	464b      	mov	r3, r9
 8009d8a:	4650      	mov	r0, sl
 8009d8c:	4659      	mov	r1, fp
 8009d8e:	f7f6 fd6d 	bl	800086c <__aeabi_ddiv>
 8009d92:	4682      	mov	sl, r0
 8009d94:	468b      	mov	fp, r1
 8009d96:	e028      	b.n	8009dea <_dtoa_r+0x3d2>
 8009d98:	2502      	movs	r5, #2
 8009d9a:	e7f2      	b.n	8009d82 <_dtoa_r+0x36a>
 8009d9c:	07f9      	lsls	r1, r7, #31
 8009d9e:	d508      	bpl.n	8009db2 <_dtoa_r+0x39a>
 8009da0:	4640      	mov	r0, r8
 8009da2:	4649      	mov	r1, r9
 8009da4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009da8:	f7f6 fc36 	bl	8000618 <__aeabi_dmul>
 8009dac:	3501      	adds	r5, #1
 8009dae:	4680      	mov	r8, r0
 8009db0:	4689      	mov	r9, r1
 8009db2:	107f      	asrs	r7, r7, #1
 8009db4:	3608      	adds	r6, #8
 8009db6:	e7e5      	b.n	8009d84 <_dtoa_r+0x36c>
 8009db8:	f000 809b 	beq.w	8009ef2 <_dtoa_r+0x4da>
 8009dbc:	9b00      	ldr	r3, [sp, #0]
 8009dbe:	4f9d      	ldr	r7, [pc, #628]	; (800a034 <_dtoa_r+0x61c>)
 8009dc0:	425e      	negs	r6, r3
 8009dc2:	4b9b      	ldr	r3, [pc, #620]	; (800a030 <_dtoa_r+0x618>)
 8009dc4:	f006 020f 	and.w	r2, r6, #15
 8009dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	ec51 0b19 	vmov	r0, r1, d9
 8009dd4:	f7f6 fc20 	bl	8000618 <__aeabi_dmul>
 8009dd8:	1136      	asrs	r6, r6, #4
 8009dda:	4682      	mov	sl, r0
 8009ddc:	468b      	mov	fp, r1
 8009dde:	2300      	movs	r3, #0
 8009de0:	2502      	movs	r5, #2
 8009de2:	2e00      	cmp	r6, #0
 8009de4:	d17a      	bne.n	8009edc <_dtoa_r+0x4c4>
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1d3      	bne.n	8009d92 <_dtoa_r+0x37a>
 8009dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8082 	beq.w	8009ef6 <_dtoa_r+0x4de>
 8009df2:	4b91      	ldr	r3, [pc, #580]	; (800a038 <_dtoa_r+0x620>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	4650      	mov	r0, sl
 8009df8:	4659      	mov	r1, fp
 8009dfa:	f7f6 fe7f 	bl	8000afc <__aeabi_dcmplt>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d079      	beq.n	8009ef6 <_dtoa_r+0x4de>
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d076      	beq.n	8009ef6 <_dtoa_r+0x4de>
 8009e08:	9b02      	ldr	r3, [sp, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	dd36      	ble.n	8009e7c <_dtoa_r+0x464>
 8009e0e:	9b00      	ldr	r3, [sp, #0]
 8009e10:	4650      	mov	r0, sl
 8009e12:	4659      	mov	r1, fp
 8009e14:	1e5f      	subs	r7, r3, #1
 8009e16:	2200      	movs	r2, #0
 8009e18:	4b88      	ldr	r3, [pc, #544]	; (800a03c <_dtoa_r+0x624>)
 8009e1a:	f7f6 fbfd 	bl	8000618 <__aeabi_dmul>
 8009e1e:	9e02      	ldr	r6, [sp, #8]
 8009e20:	4682      	mov	sl, r0
 8009e22:	468b      	mov	fp, r1
 8009e24:	3501      	adds	r5, #1
 8009e26:	4628      	mov	r0, r5
 8009e28:	f7f6 fb8c 	bl	8000544 <__aeabi_i2d>
 8009e2c:	4652      	mov	r2, sl
 8009e2e:	465b      	mov	r3, fp
 8009e30:	f7f6 fbf2 	bl	8000618 <__aeabi_dmul>
 8009e34:	4b82      	ldr	r3, [pc, #520]	; (800a040 <_dtoa_r+0x628>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	f7f6 fa38 	bl	80002ac <__adddf3>
 8009e3c:	46d0      	mov	r8, sl
 8009e3e:	46d9      	mov	r9, fp
 8009e40:	4682      	mov	sl, r0
 8009e42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	d158      	bne.n	8009efc <_dtoa_r+0x4e4>
 8009e4a:	4b7e      	ldr	r3, [pc, #504]	; (800a044 <_dtoa_r+0x62c>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4640      	mov	r0, r8
 8009e50:	4649      	mov	r1, r9
 8009e52:	f7f6 fa29 	bl	80002a8 <__aeabi_dsub>
 8009e56:	4652      	mov	r2, sl
 8009e58:	465b      	mov	r3, fp
 8009e5a:	4680      	mov	r8, r0
 8009e5c:	4689      	mov	r9, r1
 8009e5e:	f7f6 fe6b 	bl	8000b38 <__aeabi_dcmpgt>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f040 8295 	bne.w	800a392 <_dtoa_r+0x97a>
 8009e68:	4652      	mov	r2, sl
 8009e6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e6e:	4640      	mov	r0, r8
 8009e70:	4649      	mov	r1, r9
 8009e72:	f7f6 fe43 	bl	8000afc <__aeabi_dcmplt>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	f040 8289 	bne.w	800a38e <_dtoa_r+0x976>
 8009e7c:	ec5b ab19 	vmov	sl, fp, d9
 8009e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f2c0 8148 	blt.w	800a118 <_dtoa_r+0x700>
 8009e88:	9a00      	ldr	r2, [sp, #0]
 8009e8a:	2a0e      	cmp	r2, #14
 8009e8c:	f300 8144 	bgt.w	800a118 <_dtoa_r+0x700>
 8009e90:	4b67      	ldr	r3, [pc, #412]	; (800a030 <_dtoa_r+0x618>)
 8009e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f280 80d5 	bge.w	800a04c <_dtoa_r+0x634>
 8009ea2:	9b03      	ldr	r3, [sp, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f300 80d1 	bgt.w	800a04c <_dtoa_r+0x634>
 8009eaa:	f040 826f 	bne.w	800a38c <_dtoa_r+0x974>
 8009eae:	4b65      	ldr	r3, [pc, #404]	; (800a044 <_dtoa_r+0x62c>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	4649      	mov	r1, r9
 8009eb6:	f7f6 fbaf 	bl	8000618 <__aeabi_dmul>
 8009eba:	4652      	mov	r2, sl
 8009ebc:	465b      	mov	r3, fp
 8009ebe:	f7f6 fe31 	bl	8000b24 <__aeabi_dcmpge>
 8009ec2:	9e03      	ldr	r6, [sp, #12]
 8009ec4:	4637      	mov	r7, r6
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	f040 8245 	bne.w	800a356 <_dtoa_r+0x93e>
 8009ecc:	9d01      	ldr	r5, [sp, #4]
 8009ece:	2331      	movs	r3, #49	; 0x31
 8009ed0:	f805 3b01 	strb.w	r3, [r5], #1
 8009ed4:	9b00      	ldr	r3, [sp, #0]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	e240      	b.n	800a35e <_dtoa_r+0x946>
 8009edc:	07f2      	lsls	r2, r6, #31
 8009ede:	d505      	bpl.n	8009eec <_dtoa_r+0x4d4>
 8009ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ee4:	f7f6 fb98 	bl	8000618 <__aeabi_dmul>
 8009ee8:	3501      	adds	r5, #1
 8009eea:	2301      	movs	r3, #1
 8009eec:	1076      	asrs	r6, r6, #1
 8009eee:	3708      	adds	r7, #8
 8009ef0:	e777      	b.n	8009de2 <_dtoa_r+0x3ca>
 8009ef2:	2502      	movs	r5, #2
 8009ef4:	e779      	b.n	8009dea <_dtoa_r+0x3d2>
 8009ef6:	9f00      	ldr	r7, [sp, #0]
 8009ef8:	9e03      	ldr	r6, [sp, #12]
 8009efa:	e794      	b.n	8009e26 <_dtoa_r+0x40e>
 8009efc:	9901      	ldr	r1, [sp, #4]
 8009efe:	4b4c      	ldr	r3, [pc, #304]	; (800a030 <_dtoa_r+0x618>)
 8009f00:	4431      	add	r1, r6
 8009f02:	910d      	str	r1, [sp, #52]	; 0x34
 8009f04:	9908      	ldr	r1, [sp, #32]
 8009f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f0e:	2900      	cmp	r1, #0
 8009f10:	d043      	beq.n	8009f9a <_dtoa_r+0x582>
 8009f12:	494d      	ldr	r1, [pc, #308]	; (800a048 <_dtoa_r+0x630>)
 8009f14:	2000      	movs	r0, #0
 8009f16:	f7f6 fca9 	bl	800086c <__aeabi_ddiv>
 8009f1a:	4652      	mov	r2, sl
 8009f1c:	465b      	mov	r3, fp
 8009f1e:	f7f6 f9c3 	bl	80002a8 <__aeabi_dsub>
 8009f22:	9d01      	ldr	r5, [sp, #4]
 8009f24:	4682      	mov	sl, r0
 8009f26:	468b      	mov	fp, r1
 8009f28:	4649      	mov	r1, r9
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	f7f6 fe24 	bl	8000b78 <__aeabi_d2iz>
 8009f30:	4606      	mov	r6, r0
 8009f32:	f7f6 fb07 	bl	8000544 <__aeabi_i2d>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	f7f6 f9b3 	bl	80002a8 <__aeabi_dsub>
 8009f42:	3630      	adds	r6, #48	; 0x30
 8009f44:	f805 6b01 	strb.w	r6, [r5], #1
 8009f48:	4652      	mov	r2, sl
 8009f4a:	465b      	mov	r3, fp
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	4689      	mov	r9, r1
 8009f50:	f7f6 fdd4 	bl	8000afc <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d163      	bne.n	800a020 <_dtoa_r+0x608>
 8009f58:	4642      	mov	r2, r8
 8009f5a:	464b      	mov	r3, r9
 8009f5c:	4936      	ldr	r1, [pc, #216]	; (800a038 <_dtoa_r+0x620>)
 8009f5e:	2000      	movs	r0, #0
 8009f60:	f7f6 f9a2 	bl	80002a8 <__aeabi_dsub>
 8009f64:	4652      	mov	r2, sl
 8009f66:	465b      	mov	r3, fp
 8009f68:	f7f6 fdc8 	bl	8000afc <__aeabi_dcmplt>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	f040 80b5 	bne.w	800a0dc <_dtoa_r+0x6c4>
 8009f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f74:	429d      	cmp	r5, r3
 8009f76:	d081      	beq.n	8009e7c <_dtoa_r+0x464>
 8009f78:	4b30      	ldr	r3, [pc, #192]	; (800a03c <_dtoa_r+0x624>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	4659      	mov	r1, fp
 8009f80:	f7f6 fb4a 	bl	8000618 <__aeabi_dmul>
 8009f84:	4b2d      	ldr	r3, [pc, #180]	; (800a03c <_dtoa_r+0x624>)
 8009f86:	4682      	mov	sl, r0
 8009f88:	468b      	mov	fp, r1
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f7f6 fb42 	bl	8000618 <__aeabi_dmul>
 8009f94:	4680      	mov	r8, r0
 8009f96:	4689      	mov	r9, r1
 8009f98:	e7c6      	b.n	8009f28 <_dtoa_r+0x510>
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	4659      	mov	r1, fp
 8009f9e:	f7f6 fb3b 	bl	8000618 <__aeabi_dmul>
 8009fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fa4:	9d01      	ldr	r5, [sp, #4]
 8009fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fa8:	4682      	mov	sl, r0
 8009faa:	468b      	mov	fp, r1
 8009fac:	4649      	mov	r1, r9
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f7f6 fde2 	bl	8000b78 <__aeabi_d2iz>
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	f7f6 fac5 	bl	8000544 <__aeabi_i2d>
 8009fba:	3630      	adds	r6, #48	; 0x30
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	f7f6 f970 	bl	80002a8 <__aeabi_dsub>
 8009fc8:	f805 6b01 	strb.w	r6, [r5], #1
 8009fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fce:	429d      	cmp	r5, r3
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	4689      	mov	r9, r1
 8009fd4:	f04f 0200 	mov.w	r2, #0
 8009fd8:	d124      	bne.n	800a024 <_dtoa_r+0x60c>
 8009fda:	4b1b      	ldr	r3, [pc, #108]	; (800a048 <_dtoa_r+0x630>)
 8009fdc:	4650      	mov	r0, sl
 8009fde:	4659      	mov	r1, fp
 8009fe0:	f7f6 f964 	bl	80002ac <__adddf3>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4640      	mov	r0, r8
 8009fea:	4649      	mov	r1, r9
 8009fec:	f7f6 fda4 	bl	8000b38 <__aeabi_dcmpgt>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d173      	bne.n	800a0dc <_dtoa_r+0x6c4>
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	465b      	mov	r3, fp
 8009ff8:	4913      	ldr	r1, [pc, #76]	; (800a048 <_dtoa_r+0x630>)
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	f7f6 f954 	bl	80002a8 <__aeabi_dsub>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4640      	mov	r0, r8
 800a006:	4649      	mov	r1, r9
 800a008:	f7f6 fd78 	bl	8000afc <__aeabi_dcmplt>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	f43f af35 	beq.w	8009e7c <_dtoa_r+0x464>
 800a012:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a014:	1e6b      	subs	r3, r5, #1
 800a016:	930f      	str	r3, [sp, #60]	; 0x3c
 800a018:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a01c:	2b30      	cmp	r3, #48	; 0x30
 800a01e:	d0f8      	beq.n	800a012 <_dtoa_r+0x5fa>
 800a020:	9700      	str	r7, [sp, #0]
 800a022:	e049      	b.n	800a0b8 <_dtoa_r+0x6a0>
 800a024:	4b05      	ldr	r3, [pc, #20]	; (800a03c <_dtoa_r+0x624>)
 800a026:	f7f6 faf7 	bl	8000618 <__aeabi_dmul>
 800a02a:	4680      	mov	r8, r0
 800a02c:	4689      	mov	r9, r1
 800a02e:	e7bd      	b.n	8009fac <_dtoa_r+0x594>
 800a030:	0801feb8 	.word	0x0801feb8
 800a034:	0801fe90 	.word	0x0801fe90
 800a038:	3ff00000 	.word	0x3ff00000
 800a03c:	40240000 	.word	0x40240000
 800a040:	401c0000 	.word	0x401c0000
 800a044:	40140000 	.word	0x40140000
 800a048:	3fe00000 	.word	0x3fe00000
 800a04c:	9d01      	ldr	r5, [sp, #4]
 800a04e:	4656      	mov	r6, sl
 800a050:	465f      	mov	r7, fp
 800a052:	4642      	mov	r2, r8
 800a054:	464b      	mov	r3, r9
 800a056:	4630      	mov	r0, r6
 800a058:	4639      	mov	r1, r7
 800a05a:	f7f6 fc07 	bl	800086c <__aeabi_ddiv>
 800a05e:	f7f6 fd8b 	bl	8000b78 <__aeabi_d2iz>
 800a062:	4682      	mov	sl, r0
 800a064:	f7f6 fa6e 	bl	8000544 <__aeabi_i2d>
 800a068:	4642      	mov	r2, r8
 800a06a:	464b      	mov	r3, r9
 800a06c:	f7f6 fad4 	bl	8000618 <__aeabi_dmul>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a07c:	f7f6 f914 	bl	80002a8 <__aeabi_dsub>
 800a080:	f805 6b01 	strb.w	r6, [r5], #1
 800a084:	9e01      	ldr	r6, [sp, #4]
 800a086:	9f03      	ldr	r7, [sp, #12]
 800a088:	1bae      	subs	r6, r5, r6
 800a08a:	42b7      	cmp	r7, r6
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	d135      	bne.n	800a0fe <_dtoa_r+0x6e6>
 800a092:	f7f6 f90b 	bl	80002ac <__adddf3>
 800a096:	4642      	mov	r2, r8
 800a098:	464b      	mov	r3, r9
 800a09a:	4606      	mov	r6, r0
 800a09c:	460f      	mov	r7, r1
 800a09e:	f7f6 fd4b 	bl	8000b38 <__aeabi_dcmpgt>
 800a0a2:	b9d0      	cbnz	r0, 800a0da <_dtoa_r+0x6c2>
 800a0a4:	4642      	mov	r2, r8
 800a0a6:	464b      	mov	r3, r9
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	f7f6 fd1c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0b0:	b110      	cbz	r0, 800a0b8 <_dtoa_r+0x6a0>
 800a0b2:	f01a 0f01 	tst.w	sl, #1
 800a0b6:	d110      	bne.n	800a0da <_dtoa_r+0x6c2>
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	ee18 1a10 	vmov	r1, s16
 800a0be:	f000 fb09 	bl	800a6d4 <_Bfree>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9800      	ldr	r0, [sp, #0]
 800a0c6:	702b      	strb	r3, [r5, #0]
 800a0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	6018      	str	r0, [r3, #0]
 800a0ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f43f acf1 	beq.w	8009ab8 <_dtoa_r+0xa0>
 800a0d6:	601d      	str	r5, [r3, #0]
 800a0d8:	e4ee      	b.n	8009ab8 <_dtoa_r+0xa0>
 800a0da:	9f00      	ldr	r7, [sp, #0]
 800a0dc:	462b      	mov	r3, r5
 800a0de:	461d      	mov	r5, r3
 800a0e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0e4:	2a39      	cmp	r2, #57	; 0x39
 800a0e6:	d106      	bne.n	800a0f6 <_dtoa_r+0x6de>
 800a0e8:	9a01      	ldr	r2, [sp, #4]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d1f7      	bne.n	800a0de <_dtoa_r+0x6c6>
 800a0ee:	9901      	ldr	r1, [sp, #4]
 800a0f0:	2230      	movs	r2, #48	; 0x30
 800a0f2:	3701      	adds	r7, #1
 800a0f4:	700a      	strb	r2, [r1, #0]
 800a0f6:	781a      	ldrb	r2, [r3, #0]
 800a0f8:	3201      	adds	r2, #1
 800a0fa:	701a      	strb	r2, [r3, #0]
 800a0fc:	e790      	b.n	800a020 <_dtoa_r+0x608>
 800a0fe:	4ba6      	ldr	r3, [pc, #664]	; (800a398 <_dtoa_r+0x980>)
 800a100:	2200      	movs	r2, #0
 800a102:	f7f6 fa89 	bl	8000618 <__aeabi_dmul>
 800a106:	2200      	movs	r2, #0
 800a108:	2300      	movs	r3, #0
 800a10a:	4606      	mov	r6, r0
 800a10c:	460f      	mov	r7, r1
 800a10e:	f7f6 fceb 	bl	8000ae8 <__aeabi_dcmpeq>
 800a112:	2800      	cmp	r0, #0
 800a114:	d09d      	beq.n	800a052 <_dtoa_r+0x63a>
 800a116:	e7cf      	b.n	800a0b8 <_dtoa_r+0x6a0>
 800a118:	9a08      	ldr	r2, [sp, #32]
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	f000 80d7 	beq.w	800a2ce <_dtoa_r+0x8b6>
 800a120:	9a06      	ldr	r2, [sp, #24]
 800a122:	2a01      	cmp	r2, #1
 800a124:	f300 80ba 	bgt.w	800a29c <_dtoa_r+0x884>
 800a128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a12a:	2a00      	cmp	r2, #0
 800a12c:	f000 80b2 	beq.w	800a294 <_dtoa_r+0x87c>
 800a130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a134:	9e07      	ldr	r6, [sp, #28]
 800a136:	9d04      	ldr	r5, [sp, #16]
 800a138:	9a04      	ldr	r2, [sp, #16]
 800a13a:	441a      	add	r2, r3
 800a13c:	9204      	str	r2, [sp, #16]
 800a13e:	9a05      	ldr	r2, [sp, #20]
 800a140:	2101      	movs	r1, #1
 800a142:	441a      	add	r2, r3
 800a144:	4620      	mov	r0, r4
 800a146:	9205      	str	r2, [sp, #20]
 800a148:	f000 fb7c 	bl	800a844 <__i2b>
 800a14c:	4607      	mov	r7, r0
 800a14e:	2d00      	cmp	r5, #0
 800a150:	dd0c      	ble.n	800a16c <_dtoa_r+0x754>
 800a152:	9b05      	ldr	r3, [sp, #20]
 800a154:	2b00      	cmp	r3, #0
 800a156:	dd09      	ble.n	800a16c <_dtoa_r+0x754>
 800a158:	42ab      	cmp	r3, r5
 800a15a:	9a04      	ldr	r2, [sp, #16]
 800a15c:	bfa8      	it	ge
 800a15e:	462b      	movge	r3, r5
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	9204      	str	r2, [sp, #16]
 800a164:	9a05      	ldr	r2, [sp, #20]
 800a166:	1aed      	subs	r5, r5, r3
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	9305      	str	r3, [sp, #20]
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	b31b      	cbz	r3, 800a1b8 <_dtoa_r+0x7a0>
 800a170:	9b08      	ldr	r3, [sp, #32]
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 80af 	beq.w	800a2d6 <_dtoa_r+0x8be>
 800a178:	2e00      	cmp	r6, #0
 800a17a:	dd13      	ble.n	800a1a4 <_dtoa_r+0x78c>
 800a17c:	4639      	mov	r1, r7
 800a17e:	4632      	mov	r2, r6
 800a180:	4620      	mov	r0, r4
 800a182:	f000 fc1f 	bl	800a9c4 <__pow5mult>
 800a186:	ee18 2a10 	vmov	r2, s16
 800a18a:	4601      	mov	r1, r0
 800a18c:	4607      	mov	r7, r0
 800a18e:	4620      	mov	r0, r4
 800a190:	f000 fb6e 	bl	800a870 <__multiply>
 800a194:	ee18 1a10 	vmov	r1, s16
 800a198:	4680      	mov	r8, r0
 800a19a:	4620      	mov	r0, r4
 800a19c:	f000 fa9a 	bl	800a6d4 <_Bfree>
 800a1a0:	ee08 8a10 	vmov	s16, r8
 800a1a4:	9b07      	ldr	r3, [sp, #28]
 800a1a6:	1b9a      	subs	r2, r3, r6
 800a1a8:	d006      	beq.n	800a1b8 <_dtoa_r+0x7a0>
 800a1aa:	ee18 1a10 	vmov	r1, s16
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f000 fc08 	bl	800a9c4 <__pow5mult>
 800a1b4:	ee08 0a10 	vmov	s16, r0
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fb42 	bl	800a844 <__i2b>
 800a1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	f340 8088 	ble.w	800a2da <_dtoa_r+0x8c2>
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	4601      	mov	r1, r0
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f000 fbf8 	bl	800a9c4 <__pow5mult>
 800a1d4:	9b06      	ldr	r3, [sp, #24]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	4606      	mov	r6, r0
 800a1da:	f340 8081 	ble.w	800a2e0 <_dtoa_r+0x8c8>
 800a1de:	f04f 0800 	mov.w	r8, #0
 800a1e2:	6933      	ldr	r3, [r6, #16]
 800a1e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1e8:	6918      	ldr	r0, [r3, #16]
 800a1ea:	f000 fadb 	bl	800a7a4 <__hi0bits>
 800a1ee:	f1c0 0020 	rsb	r0, r0, #32
 800a1f2:	9b05      	ldr	r3, [sp, #20]
 800a1f4:	4418      	add	r0, r3
 800a1f6:	f010 001f 	ands.w	r0, r0, #31
 800a1fa:	f000 8092 	beq.w	800a322 <_dtoa_r+0x90a>
 800a1fe:	f1c0 0320 	rsb	r3, r0, #32
 800a202:	2b04      	cmp	r3, #4
 800a204:	f340 808a 	ble.w	800a31c <_dtoa_r+0x904>
 800a208:	f1c0 001c 	rsb	r0, r0, #28
 800a20c:	9b04      	ldr	r3, [sp, #16]
 800a20e:	4403      	add	r3, r0
 800a210:	9304      	str	r3, [sp, #16]
 800a212:	9b05      	ldr	r3, [sp, #20]
 800a214:	4403      	add	r3, r0
 800a216:	4405      	add	r5, r0
 800a218:	9305      	str	r3, [sp, #20]
 800a21a:	9b04      	ldr	r3, [sp, #16]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	dd07      	ble.n	800a230 <_dtoa_r+0x818>
 800a220:	ee18 1a10 	vmov	r1, s16
 800a224:	461a      	mov	r2, r3
 800a226:	4620      	mov	r0, r4
 800a228:	f000 fc26 	bl	800aa78 <__lshift>
 800a22c:	ee08 0a10 	vmov	s16, r0
 800a230:	9b05      	ldr	r3, [sp, #20]
 800a232:	2b00      	cmp	r3, #0
 800a234:	dd05      	ble.n	800a242 <_dtoa_r+0x82a>
 800a236:	4631      	mov	r1, r6
 800a238:	461a      	mov	r2, r3
 800a23a:	4620      	mov	r0, r4
 800a23c:	f000 fc1c 	bl	800aa78 <__lshift>
 800a240:	4606      	mov	r6, r0
 800a242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d06e      	beq.n	800a326 <_dtoa_r+0x90e>
 800a248:	ee18 0a10 	vmov	r0, s16
 800a24c:	4631      	mov	r1, r6
 800a24e:	f000 fc83 	bl	800ab58 <__mcmp>
 800a252:	2800      	cmp	r0, #0
 800a254:	da67      	bge.n	800a326 <_dtoa_r+0x90e>
 800a256:	9b00      	ldr	r3, [sp, #0]
 800a258:	3b01      	subs	r3, #1
 800a25a:	ee18 1a10 	vmov	r1, s16
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	220a      	movs	r2, #10
 800a262:	2300      	movs	r3, #0
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fa57 	bl	800a718 <__multadd>
 800a26a:	9b08      	ldr	r3, [sp, #32]
 800a26c:	ee08 0a10 	vmov	s16, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 81b1 	beq.w	800a5d8 <_dtoa_r+0xbc0>
 800a276:	2300      	movs	r3, #0
 800a278:	4639      	mov	r1, r7
 800a27a:	220a      	movs	r2, #10
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fa4b 	bl	800a718 <__multadd>
 800a282:	9b02      	ldr	r3, [sp, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	4607      	mov	r7, r0
 800a288:	f300 808e 	bgt.w	800a3a8 <_dtoa_r+0x990>
 800a28c:	9b06      	ldr	r3, [sp, #24]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	dc51      	bgt.n	800a336 <_dtoa_r+0x91e>
 800a292:	e089      	b.n	800a3a8 <_dtoa_r+0x990>
 800a294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a29a:	e74b      	b.n	800a134 <_dtoa_r+0x71c>
 800a29c:	9b03      	ldr	r3, [sp, #12]
 800a29e:	1e5e      	subs	r6, r3, #1
 800a2a0:	9b07      	ldr	r3, [sp, #28]
 800a2a2:	42b3      	cmp	r3, r6
 800a2a4:	bfbf      	itttt	lt
 800a2a6:	9b07      	ldrlt	r3, [sp, #28]
 800a2a8:	9607      	strlt	r6, [sp, #28]
 800a2aa:	1af2      	sublt	r2, r6, r3
 800a2ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a2ae:	bfb6      	itet	lt
 800a2b0:	189b      	addlt	r3, r3, r2
 800a2b2:	1b9e      	subge	r6, r3, r6
 800a2b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a2b6:	9b03      	ldr	r3, [sp, #12]
 800a2b8:	bfb8      	it	lt
 800a2ba:	2600      	movlt	r6, #0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	bfb7      	itett	lt
 800a2c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a2c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a2c8:	1a9d      	sublt	r5, r3, r2
 800a2ca:	2300      	movlt	r3, #0
 800a2cc:	e734      	b.n	800a138 <_dtoa_r+0x720>
 800a2ce:	9e07      	ldr	r6, [sp, #28]
 800a2d0:	9d04      	ldr	r5, [sp, #16]
 800a2d2:	9f08      	ldr	r7, [sp, #32]
 800a2d4:	e73b      	b.n	800a14e <_dtoa_r+0x736>
 800a2d6:	9a07      	ldr	r2, [sp, #28]
 800a2d8:	e767      	b.n	800a1aa <_dtoa_r+0x792>
 800a2da:	9b06      	ldr	r3, [sp, #24]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	dc18      	bgt.n	800a312 <_dtoa_r+0x8fa>
 800a2e0:	f1ba 0f00 	cmp.w	sl, #0
 800a2e4:	d115      	bne.n	800a312 <_dtoa_r+0x8fa>
 800a2e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2ea:	b993      	cbnz	r3, 800a312 <_dtoa_r+0x8fa>
 800a2ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2f0:	0d1b      	lsrs	r3, r3, #20
 800a2f2:	051b      	lsls	r3, r3, #20
 800a2f4:	b183      	cbz	r3, 800a318 <_dtoa_r+0x900>
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	9304      	str	r3, [sp, #16]
 800a2fc:	9b05      	ldr	r3, [sp, #20]
 800a2fe:	3301      	adds	r3, #1
 800a300:	9305      	str	r3, [sp, #20]
 800a302:	f04f 0801 	mov.w	r8, #1
 800a306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f47f af6a 	bne.w	800a1e2 <_dtoa_r+0x7ca>
 800a30e:	2001      	movs	r0, #1
 800a310:	e76f      	b.n	800a1f2 <_dtoa_r+0x7da>
 800a312:	f04f 0800 	mov.w	r8, #0
 800a316:	e7f6      	b.n	800a306 <_dtoa_r+0x8ee>
 800a318:	4698      	mov	r8, r3
 800a31a:	e7f4      	b.n	800a306 <_dtoa_r+0x8ee>
 800a31c:	f43f af7d 	beq.w	800a21a <_dtoa_r+0x802>
 800a320:	4618      	mov	r0, r3
 800a322:	301c      	adds	r0, #28
 800a324:	e772      	b.n	800a20c <_dtoa_r+0x7f4>
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dc37      	bgt.n	800a39c <_dtoa_r+0x984>
 800a32c:	9b06      	ldr	r3, [sp, #24]
 800a32e:	2b02      	cmp	r3, #2
 800a330:	dd34      	ble.n	800a39c <_dtoa_r+0x984>
 800a332:	9b03      	ldr	r3, [sp, #12]
 800a334:	9302      	str	r3, [sp, #8]
 800a336:	9b02      	ldr	r3, [sp, #8]
 800a338:	b96b      	cbnz	r3, 800a356 <_dtoa_r+0x93e>
 800a33a:	4631      	mov	r1, r6
 800a33c:	2205      	movs	r2, #5
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 f9ea 	bl	800a718 <__multadd>
 800a344:	4601      	mov	r1, r0
 800a346:	4606      	mov	r6, r0
 800a348:	ee18 0a10 	vmov	r0, s16
 800a34c:	f000 fc04 	bl	800ab58 <__mcmp>
 800a350:	2800      	cmp	r0, #0
 800a352:	f73f adbb 	bgt.w	8009ecc <_dtoa_r+0x4b4>
 800a356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a358:	9d01      	ldr	r5, [sp, #4]
 800a35a:	43db      	mvns	r3, r3
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	f04f 0800 	mov.w	r8, #0
 800a362:	4631      	mov	r1, r6
 800a364:	4620      	mov	r0, r4
 800a366:	f000 f9b5 	bl	800a6d4 <_Bfree>
 800a36a:	2f00      	cmp	r7, #0
 800a36c:	f43f aea4 	beq.w	800a0b8 <_dtoa_r+0x6a0>
 800a370:	f1b8 0f00 	cmp.w	r8, #0
 800a374:	d005      	beq.n	800a382 <_dtoa_r+0x96a>
 800a376:	45b8      	cmp	r8, r7
 800a378:	d003      	beq.n	800a382 <_dtoa_r+0x96a>
 800a37a:	4641      	mov	r1, r8
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 f9a9 	bl	800a6d4 <_Bfree>
 800a382:	4639      	mov	r1, r7
 800a384:	4620      	mov	r0, r4
 800a386:	f000 f9a5 	bl	800a6d4 <_Bfree>
 800a38a:	e695      	b.n	800a0b8 <_dtoa_r+0x6a0>
 800a38c:	2600      	movs	r6, #0
 800a38e:	4637      	mov	r7, r6
 800a390:	e7e1      	b.n	800a356 <_dtoa_r+0x93e>
 800a392:	9700      	str	r7, [sp, #0]
 800a394:	4637      	mov	r7, r6
 800a396:	e599      	b.n	8009ecc <_dtoa_r+0x4b4>
 800a398:	40240000 	.word	0x40240000
 800a39c:	9b08      	ldr	r3, [sp, #32]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 80ca 	beq.w	800a538 <_dtoa_r+0xb20>
 800a3a4:	9b03      	ldr	r3, [sp, #12]
 800a3a6:	9302      	str	r3, [sp, #8]
 800a3a8:	2d00      	cmp	r5, #0
 800a3aa:	dd05      	ble.n	800a3b8 <_dtoa_r+0x9a0>
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	462a      	mov	r2, r5
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 fb61 	bl	800aa78 <__lshift>
 800a3b6:	4607      	mov	r7, r0
 800a3b8:	f1b8 0f00 	cmp.w	r8, #0
 800a3bc:	d05b      	beq.n	800a476 <_dtoa_r+0xa5e>
 800a3be:	6879      	ldr	r1, [r7, #4]
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f000 f947 	bl	800a654 <_Balloc>
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	b928      	cbnz	r0, 800a3d6 <_dtoa_r+0x9be>
 800a3ca:	4b87      	ldr	r3, [pc, #540]	; (800a5e8 <_dtoa_r+0xbd0>)
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3d2:	f7ff bb3b 	b.w	8009a4c <_dtoa_r+0x34>
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	3202      	adds	r2, #2
 800a3da:	0092      	lsls	r2, r2, #2
 800a3dc:	f107 010c 	add.w	r1, r7, #12
 800a3e0:	300c      	adds	r0, #12
 800a3e2:	f7fe fd55 	bl	8008e90 <memcpy>
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 fb44 	bl	800aa78 <__lshift>
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	f103 0901 	add.w	r9, r3, #1
 800a3f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	9305      	str	r3, [sp, #20]
 800a3fe:	f00a 0301 	and.w	r3, sl, #1
 800a402:	46b8      	mov	r8, r7
 800a404:	9304      	str	r3, [sp, #16]
 800a406:	4607      	mov	r7, r0
 800a408:	4631      	mov	r1, r6
 800a40a:	ee18 0a10 	vmov	r0, s16
 800a40e:	f7ff fa75 	bl	80098fc <quorem>
 800a412:	4641      	mov	r1, r8
 800a414:	9002      	str	r0, [sp, #8]
 800a416:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a41a:	ee18 0a10 	vmov	r0, s16
 800a41e:	f000 fb9b 	bl	800ab58 <__mcmp>
 800a422:	463a      	mov	r2, r7
 800a424:	9003      	str	r0, [sp, #12]
 800a426:	4631      	mov	r1, r6
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 fbb1 	bl	800ab90 <__mdiff>
 800a42e:	68c2      	ldr	r2, [r0, #12]
 800a430:	f109 3bff 	add.w	fp, r9, #4294967295
 800a434:	4605      	mov	r5, r0
 800a436:	bb02      	cbnz	r2, 800a47a <_dtoa_r+0xa62>
 800a438:	4601      	mov	r1, r0
 800a43a:	ee18 0a10 	vmov	r0, s16
 800a43e:	f000 fb8b 	bl	800ab58 <__mcmp>
 800a442:	4602      	mov	r2, r0
 800a444:	4629      	mov	r1, r5
 800a446:	4620      	mov	r0, r4
 800a448:	9207      	str	r2, [sp, #28]
 800a44a:	f000 f943 	bl	800a6d4 <_Bfree>
 800a44e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a452:	ea43 0102 	orr.w	r1, r3, r2
 800a456:	9b04      	ldr	r3, [sp, #16]
 800a458:	430b      	orrs	r3, r1
 800a45a:	464d      	mov	r5, r9
 800a45c:	d10f      	bne.n	800a47e <_dtoa_r+0xa66>
 800a45e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a462:	d02a      	beq.n	800a4ba <_dtoa_r+0xaa2>
 800a464:	9b03      	ldr	r3, [sp, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	dd02      	ble.n	800a470 <_dtoa_r+0xa58>
 800a46a:	9b02      	ldr	r3, [sp, #8]
 800a46c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a470:	f88b a000 	strb.w	sl, [fp]
 800a474:	e775      	b.n	800a362 <_dtoa_r+0x94a>
 800a476:	4638      	mov	r0, r7
 800a478:	e7ba      	b.n	800a3f0 <_dtoa_r+0x9d8>
 800a47a:	2201      	movs	r2, #1
 800a47c:	e7e2      	b.n	800a444 <_dtoa_r+0xa2c>
 800a47e:	9b03      	ldr	r3, [sp, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	db04      	blt.n	800a48e <_dtoa_r+0xa76>
 800a484:	9906      	ldr	r1, [sp, #24]
 800a486:	430b      	orrs	r3, r1
 800a488:	9904      	ldr	r1, [sp, #16]
 800a48a:	430b      	orrs	r3, r1
 800a48c:	d122      	bne.n	800a4d4 <_dtoa_r+0xabc>
 800a48e:	2a00      	cmp	r2, #0
 800a490:	ddee      	ble.n	800a470 <_dtoa_r+0xa58>
 800a492:	ee18 1a10 	vmov	r1, s16
 800a496:	2201      	movs	r2, #1
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 faed 	bl	800aa78 <__lshift>
 800a49e:	4631      	mov	r1, r6
 800a4a0:	ee08 0a10 	vmov	s16, r0
 800a4a4:	f000 fb58 	bl	800ab58 <__mcmp>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	dc03      	bgt.n	800a4b4 <_dtoa_r+0xa9c>
 800a4ac:	d1e0      	bne.n	800a470 <_dtoa_r+0xa58>
 800a4ae:	f01a 0f01 	tst.w	sl, #1
 800a4b2:	d0dd      	beq.n	800a470 <_dtoa_r+0xa58>
 800a4b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4b8:	d1d7      	bne.n	800a46a <_dtoa_r+0xa52>
 800a4ba:	2339      	movs	r3, #57	; 0x39
 800a4bc:	f88b 3000 	strb.w	r3, [fp]
 800a4c0:	462b      	mov	r3, r5
 800a4c2:	461d      	mov	r5, r3
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4ca:	2a39      	cmp	r2, #57	; 0x39
 800a4cc:	d071      	beq.n	800a5b2 <_dtoa_r+0xb9a>
 800a4ce:	3201      	adds	r2, #1
 800a4d0:	701a      	strb	r2, [r3, #0]
 800a4d2:	e746      	b.n	800a362 <_dtoa_r+0x94a>
 800a4d4:	2a00      	cmp	r2, #0
 800a4d6:	dd07      	ble.n	800a4e8 <_dtoa_r+0xad0>
 800a4d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4dc:	d0ed      	beq.n	800a4ba <_dtoa_r+0xaa2>
 800a4de:	f10a 0301 	add.w	r3, sl, #1
 800a4e2:	f88b 3000 	strb.w	r3, [fp]
 800a4e6:	e73c      	b.n	800a362 <_dtoa_r+0x94a>
 800a4e8:	9b05      	ldr	r3, [sp, #20]
 800a4ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a4ee:	4599      	cmp	r9, r3
 800a4f0:	d047      	beq.n	800a582 <_dtoa_r+0xb6a>
 800a4f2:	ee18 1a10 	vmov	r1, s16
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	220a      	movs	r2, #10
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f000 f90c 	bl	800a718 <__multadd>
 800a500:	45b8      	cmp	r8, r7
 800a502:	ee08 0a10 	vmov	s16, r0
 800a506:	f04f 0300 	mov.w	r3, #0
 800a50a:	f04f 020a 	mov.w	r2, #10
 800a50e:	4641      	mov	r1, r8
 800a510:	4620      	mov	r0, r4
 800a512:	d106      	bne.n	800a522 <_dtoa_r+0xb0a>
 800a514:	f000 f900 	bl	800a718 <__multadd>
 800a518:	4680      	mov	r8, r0
 800a51a:	4607      	mov	r7, r0
 800a51c:	f109 0901 	add.w	r9, r9, #1
 800a520:	e772      	b.n	800a408 <_dtoa_r+0x9f0>
 800a522:	f000 f8f9 	bl	800a718 <__multadd>
 800a526:	4639      	mov	r1, r7
 800a528:	4680      	mov	r8, r0
 800a52a:	2300      	movs	r3, #0
 800a52c:	220a      	movs	r2, #10
 800a52e:	4620      	mov	r0, r4
 800a530:	f000 f8f2 	bl	800a718 <__multadd>
 800a534:	4607      	mov	r7, r0
 800a536:	e7f1      	b.n	800a51c <_dtoa_r+0xb04>
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	9302      	str	r3, [sp, #8]
 800a53c:	9d01      	ldr	r5, [sp, #4]
 800a53e:	ee18 0a10 	vmov	r0, s16
 800a542:	4631      	mov	r1, r6
 800a544:	f7ff f9da 	bl	80098fc <quorem>
 800a548:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a54c:	9b01      	ldr	r3, [sp, #4]
 800a54e:	f805 ab01 	strb.w	sl, [r5], #1
 800a552:	1aea      	subs	r2, r5, r3
 800a554:	9b02      	ldr	r3, [sp, #8]
 800a556:	4293      	cmp	r3, r2
 800a558:	dd09      	ble.n	800a56e <_dtoa_r+0xb56>
 800a55a:	ee18 1a10 	vmov	r1, s16
 800a55e:	2300      	movs	r3, #0
 800a560:	220a      	movs	r2, #10
 800a562:	4620      	mov	r0, r4
 800a564:	f000 f8d8 	bl	800a718 <__multadd>
 800a568:	ee08 0a10 	vmov	s16, r0
 800a56c:	e7e7      	b.n	800a53e <_dtoa_r+0xb26>
 800a56e:	9b02      	ldr	r3, [sp, #8]
 800a570:	2b00      	cmp	r3, #0
 800a572:	bfc8      	it	gt
 800a574:	461d      	movgt	r5, r3
 800a576:	9b01      	ldr	r3, [sp, #4]
 800a578:	bfd8      	it	le
 800a57a:	2501      	movle	r5, #1
 800a57c:	441d      	add	r5, r3
 800a57e:	f04f 0800 	mov.w	r8, #0
 800a582:	ee18 1a10 	vmov	r1, s16
 800a586:	2201      	movs	r2, #1
 800a588:	4620      	mov	r0, r4
 800a58a:	f000 fa75 	bl	800aa78 <__lshift>
 800a58e:	4631      	mov	r1, r6
 800a590:	ee08 0a10 	vmov	s16, r0
 800a594:	f000 fae0 	bl	800ab58 <__mcmp>
 800a598:	2800      	cmp	r0, #0
 800a59a:	dc91      	bgt.n	800a4c0 <_dtoa_r+0xaa8>
 800a59c:	d102      	bne.n	800a5a4 <_dtoa_r+0xb8c>
 800a59e:	f01a 0f01 	tst.w	sl, #1
 800a5a2:	d18d      	bne.n	800a4c0 <_dtoa_r+0xaa8>
 800a5a4:	462b      	mov	r3, r5
 800a5a6:	461d      	mov	r5, r3
 800a5a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5ac:	2a30      	cmp	r2, #48	; 0x30
 800a5ae:	d0fa      	beq.n	800a5a6 <_dtoa_r+0xb8e>
 800a5b0:	e6d7      	b.n	800a362 <_dtoa_r+0x94a>
 800a5b2:	9a01      	ldr	r2, [sp, #4]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d184      	bne.n	800a4c2 <_dtoa_r+0xaaa>
 800a5b8:	9b00      	ldr	r3, [sp, #0]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	2331      	movs	r3, #49	; 0x31
 800a5c0:	7013      	strb	r3, [r2, #0]
 800a5c2:	e6ce      	b.n	800a362 <_dtoa_r+0x94a>
 800a5c4:	4b09      	ldr	r3, [pc, #36]	; (800a5ec <_dtoa_r+0xbd4>)
 800a5c6:	f7ff ba95 	b.w	8009af4 <_dtoa_r+0xdc>
 800a5ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f47f aa6e 	bne.w	8009aae <_dtoa_r+0x96>
 800a5d2:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <_dtoa_r+0xbd8>)
 800a5d4:	f7ff ba8e 	b.w	8009af4 <_dtoa_r+0xdc>
 800a5d8:	9b02      	ldr	r3, [sp, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	dcae      	bgt.n	800a53c <_dtoa_r+0xb24>
 800a5de:	9b06      	ldr	r3, [sp, #24]
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	f73f aea8 	bgt.w	800a336 <_dtoa_r+0x91e>
 800a5e6:	e7a9      	b.n	800a53c <_dtoa_r+0xb24>
 800a5e8:	0801fe23 	.word	0x0801fe23
 800a5ec:	0801fd44 	.word	0x0801fd44
 800a5f0:	0801fda4 	.word	0x0801fda4

0800a5f4 <fiprintf>:
 800a5f4:	b40e      	push	{r1, r2, r3}
 800a5f6:	b503      	push	{r0, r1, lr}
 800a5f8:	4601      	mov	r1, r0
 800a5fa:	ab03      	add	r3, sp, #12
 800a5fc:	4805      	ldr	r0, [pc, #20]	; (800a614 <fiprintf+0x20>)
 800a5fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a602:	6800      	ldr	r0, [r0, #0]
 800a604:	9301      	str	r3, [sp, #4]
 800a606:	f000 fe25 	bl	800b254 <_vfiprintf_r>
 800a60a:	b002      	add	sp, #8
 800a60c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a610:	b003      	add	sp, #12
 800a612:	4770      	bx	lr
 800a614:	20000168 	.word	0x20000168

0800a618 <_localeconv_r>:
 800a618:	4800      	ldr	r0, [pc, #0]	; (800a61c <_localeconv_r+0x4>)
 800a61a:	4770      	bx	lr
 800a61c:	200002bc 	.word	0x200002bc

0800a620 <_lseek_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4d07      	ldr	r5, [pc, #28]	; (800a640 <_lseek_r+0x20>)
 800a624:	4604      	mov	r4, r0
 800a626:	4608      	mov	r0, r1
 800a628:	4611      	mov	r1, r2
 800a62a:	2200      	movs	r2, #0
 800a62c:	602a      	str	r2, [r5, #0]
 800a62e:	461a      	mov	r2, r3
 800a630:	f7f8 fc32 	bl	8002e98 <_lseek>
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	d102      	bne.n	800a63e <_lseek_r+0x1e>
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	b103      	cbz	r3, 800a63e <_lseek_r+0x1e>
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	bd38      	pop	{r3, r4, r5, pc}
 800a640:	200035c0 	.word	0x200035c0

0800a644 <malloc>:
 800a644:	4b02      	ldr	r3, [pc, #8]	; (800a650 <malloc+0xc>)
 800a646:	4601      	mov	r1, r0
 800a648:	6818      	ldr	r0, [r3, #0]
 800a64a:	f000 bc09 	b.w	800ae60 <_malloc_r>
 800a64e:	bf00      	nop
 800a650:	20000168 	.word	0x20000168

0800a654 <_Balloc>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a658:	4604      	mov	r4, r0
 800a65a:	460d      	mov	r5, r1
 800a65c:	b976      	cbnz	r6, 800a67c <_Balloc+0x28>
 800a65e:	2010      	movs	r0, #16
 800a660:	f7ff fff0 	bl	800a644 <malloc>
 800a664:	4602      	mov	r2, r0
 800a666:	6260      	str	r0, [r4, #36]	; 0x24
 800a668:	b920      	cbnz	r0, 800a674 <_Balloc+0x20>
 800a66a:	4b18      	ldr	r3, [pc, #96]	; (800a6cc <_Balloc+0x78>)
 800a66c:	4818      	ldr	r0, [pc, #96]	; (800a6d0 <_Balloc+0x7c>)
 800a66e:	2166      	movs	r1, #102	; 0x66
 800a670:	f7ff f916 	bl	80098a0 <__assert_func>
 800a674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a678:	6006      	str	r6, [r0, #0]
 800a67a:	60c6      	str	r6, [r0, #12]
 800a67c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a67e:	68f3      	ldr	r3, [r6, #12]
 800a680:	b183      	cbz	r3, 800a6a4 <_Balloc+0x50>
 800a682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a68a:	b9b8      	cbnz	r0, 800a6bc <_Balloc+0x68>
 800a68c:	2101      	movs	r1, #1
 800a68e:	fa01 f605 	lsl.w	r6, r1, r5
 800a692:	1d72      	adds	r2, r6, #5
 800a694:	0092      	lsls	r2, r2, #2
 800a696:	4620      	mov	r0, r4
 800a698:	f000 fb60 	bl	800ad5c <_calloc_r>
 800a69c:	b160      	cbz	r0, 800a6b8 <_Balloc+0x64>
 800a69e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6a2:	e00e      	b.n	800a6c2 <_Balloc+0x6e>
 800a6a4:	2221      	movs	r2, #33	; 0x21
 800a6a6:	2104      	movs	r1, #4
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 fb57 	bl	800ad5c <_calloc_r>
 800a6ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6b0:	60f0      	str	r0, [r6, #12]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d1e4      	bne.n	800a682 <_Balloc+0x2e>
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	bd70      	pop	{r4, r5, r6, pc}
 800a6bc:	6802      	ldr	r2, [r0, #0]
 800a6be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6c8:	e7f7      	b.n	800a6ba <_Balloc+0x66>
 800a6ca:	bf00      	nop
 800a6cc:	0801fdb1 	.word	0x0801fdb1
 800a6d0:	0801fe34 	.word	0x0801fe34

0800a6d4 <_Bfree>:
 800a6d4:	b570      	push	{r4, r5, r6, lr}
 800a6d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6d8:	4605      	mov	r5, r0
 800a6da:	460c      	mov	r4, r1
 800a6dc:	b976      	cbnz	r6, 800a6fc <_Bfree+0x28>
 800a6de:	2010      	movs	r0, #16
 800a6e0:	f7ff ffb0 	bl	800a644 <malloc>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	6268      	str	r0, [r5, #36]	; 0x24
 800a6e8:	b920      	cbnz	r0, 800a6f4 <_Bfree+0x20>
 800a6ea:	4b09      	ldr	r3, [pc, #36]	; (800a710 <_Bfree+0x3c>)
 800a6ec:	4809      	ldr	r0, [pc, #36]	; (800a714 <_Bfree+0x40>)
 800a6ee:	218a      	movs	r1, #138	; 0x8a
 800a6f0:	f7ff f8d6 	bl	80098a0 <__assert_func>
 800a6f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6f8:	6006      	str	r6, [r0, #0]
 800a6fa:	60c6      	str	r6, [r0, #12]
 800a6fc:	b13c      	cbz	r4, 800a70e <_Bfree+0x3a>
 800a6fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a700:	6862      	ldr	r2, [r4, #4]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a708:	6021      	str	r1, [r4, #0]
 800a70a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a70e:	bd70      	pop	{r4, r5, r6, pc}
 800a710:	0801fdb1 	.word	0x0801fdb1
 800a714:	0801fe34 	.word	0x0801fe34

0800a718 <__multadd>:
 800a718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71c:	690d      	ldr	r5, [r1, #16]
 800a71e:	4607      	mov	r7, r0
 800a720:	460c      	mov	r4, r1
 800a722:	461e      	mov	r6, r3
 800a724:	f101 0c14 	add.w	ip, r1, #20
 800a728:	2000      	movs	r0, #0
 800a72a:	f8dc 3000 	ldr.w	r3, [ip]
 800a72e:	b299      	uxth	r1, r3
 800a730:	fb02 6101 	mla	r1, r2, r1, r6
 800a734:	0c1e      	lsrs	r6, r3, #16
 800a736:	0c0b      	lsrs	r3, r1, #16
 800a738:	fb02 3306 	mla	r3, r2, r6, r3
 800a73c:	b289      	uxth	r1, r1
 800a73e:	3001      	adds	r0, #1
 800a740:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a744:	4285      	cmp	r5, r0
 800a746:	f84c 1b04 	str.w	r1, [ip], #4
 800a74a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a74e:	dcec      	bgt.n	800a72a <__multadd+0x12>
 800a750:	b30e      	cbz	r6, 800a796 <__multadd+0x7e>
 800a752:	68a3      	ldr	r3, [r4, #8]
 800a754:	42ab      	cmp	r3, r5
 800a756:	dc19      	bgt.n	800a78c <__multadd+0x74>
 800a758:	6861      	ldr	r1, [r4, #4]
 800a75a:	4638      	mov	r0, r7
 800a75c:	3101      	adds	r1, #1
 800a75e:	f7ff ff79 	bl	800a654 <_Balloc>
 800a762:	4680      	mov	r8, r0
 800a764:	b928      	cbnz	r0, 800a772 <__multadd+0x5a>
 800a766:	4602      	mov	r2, r0
 800a768:	4b0c      	ldr	r3, [pc, #48]	; (800a79c <__multadd+0x84>)
 800a76a:	480d      	ldr	r0, [pc, #52]	; (800a7a0 <__multadd+0x88>)
 800a76c:	21b5      	movs	r1, #181	; 0xb5
 800a76e:	f7ff f897 	bl	80098a0 <__assert_func>
 800a772:	6922      	ldr	r2, [r4, #16]
 800a774:	3202      	adds	r2, #2
 800a776:	f104 010c 	add.w	r1, r4, #12
 800a77a:	0092      	lsls	r2, r2, #2
 800a77c:	300c      	adds	r0, #12
 800a77e:	f7fe fb87 	bl	8008e90 <memcpy>
 800a782:	4621      	mov	r1, r4
 800a784:	4638      	mov	r0, r7
 800a786:	f7ff ffa5 	bl	800a6d4 <_Bfree>
 800a78a:	4644      	mov	r4, r8
 800a78c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a790:	3501      	adds	r5, #1
 800a792:	615e      	str	r6, [r3, #20]
 800a794:	6125      	str	r5, [r4, #16]
 800a796:	4620      	mov	r0, r4
 800a798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a79c:	0801fe23 	.word	0x0801fe23
 800a7a0:	0801fe34 	.word	0x0801fe34

0800a7a4 <__hi0bits>:
 800a7a4:	0c03      	lsrs	r3, r0, #16
 800a7a6:	041b      	lsls	r3, r3, #16
 800a7a8:	b9d3      	cbnz	r3, 800a7e0 <__hi0bits+0x3c>
 800a7aa:	0400      	lsls	r0, r0, #16
 800a7ac:	2310      	movs	r3, #16
 800a7ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a7b2:	bf04      	itt	eq
 800a7b4:	0200      	lsleq	r0, r0, #8
 800a7b6:	3308      	addeq	r3, #8
 800a7b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a7bc:	bf04      	itt	eq
 800a7be:	0100      	lsleq	r0, r0, #4
 800a7c0:	3304      	addeq	r3, #4
 800a7c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a7c6:	bf04      	itt	eq
 800a7c8:	0080      	lsleq	r0, r0, #2
 800a7ca:	3302      	addeq	r3, #2
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	db05      	blt.n	800a7dc <__hi0bits+0x38>
 800a7d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7d4:	f103 0301 	add.w	r3, r3, #1
 800a7d8:	bf08      	it	eq
 800a7da:	2320      	moveq	r3, #32
 800a7dc:	4618      	mov	r0, r3
 800a7de:	4770      	bx	lr
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	e7e4      	b.n	800a7ae <__hi0bits+0xa>

0800a7e4 <__lo0bits>:
 800a7e4:	6803      	ldr	r3, [r0, #0]
 800a7e6:	f013 0207 	ands.w	r2, r3, #7
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	d00b      	beq.n	800a806 <__lo0bits+0x22>
 800a7ee:	07da      	lsls	r2, r3, #31
 800a7f0:	d423      	bmi.n	800a83a <__lo0bits+0x56>
 800a7f2:	0798      	lsls	r0, r3, #30
 800a7f4:	bf49      	itett	mi
 800a7f6:	085b      	lsrmi	r3, r3, #1
 800a7f8:	089b      	lsrpl	r3, r3, #2
 800a7fa:	2001      	movmi	r0, #1
 800a7fc:	600b      	strmi	r3, [r1, #0]
 800a7fe:	bf5c      	itt	pl
 800a800:	600b      	strpl	r3, [r1, #0]
 800a802:	2002      	movpl	r0, #2
 800a804:	4770      	bx	lr
 800a806:	b298      	uxth	r0, r3
 800a808:	b9a8      	cbnz	r0, 800a836 <__lo0bits+0x52>
 800a80a:	0c1b      	lsrs	r3, r3, #16
 800a80c:	2010      	movs	r0, #16
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	b90a      	cbnz	r2, 800a816 <__lo0bits+0x32>
 800a812:	3008      	adds	r0, #8
 800a814:	0a1b      	lsrs	r3, r3, #8
 800a816:	071a      	lsls	r2, r3, #28
 800a818:	bf04      	itt	eq
 800a81a:	091b      	lsreq	r3, r3, #4
 800a81c:	3004      	addeq	r0, #4
 800a81e:	079a      	lsls	r2, r3, #30
 800a820:	bf04      	itt	eq
 800a822:	089b      	lsreq	r3, r3, #2
 800a824:	3002      	addeq	r0, #2
 800a826:	07da      	lsls	r2, r3, #31
 800a828:	d403      	bmi.n	800a832 <__lo0bits+0x4e>
 800a82a:	085b      	lsrs	r3, r3, #1
 800a82c:	f100 0001 	add.w	r0, r0, #1
 800a830:	d005      	beq.n	800a83e <__lo0bits+0x5a>
 800a832:	600b      	str	r3, [r1, #0]
 800a834:	4770      	bx	lr
 800a836:	4610      	mov	r0, r2
 800a838:	e7e9      	b.n	800a80e <__lo0bits+0x2a>
 800a83a:	2000      	movs	r0, #0
 800a83c:	4770      	bx	lr
 800a83e:	2020      	movs	r0, #32
 800a840:	4770      	bx	lr
	...

0800a844 <__i2b>:
 800a844:	b510      	push	{r4, lr}
 800a846:	460c      	mov	r4, r1
 800a848:	2101      	movs	r1, #1
 800a84a:	f7ff ff03 	bl	800a654 <_Balloc>
 800a84e:	4602      	mov	r2, r0
 800a850:	b928      	cbnz	r0, 800a85e <__i2b+0x1a>
 800a852:	4b05      	ldr	r3, [pc, #20]	; (800a868 <__i2b+0x24>)
 800a854:	4805      	ldr	r0, [pc, #20]	; (800a86c <__i2b+0x28>)
 800a856:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a85a:	f7ff f821 	bl	80098a0 <__assert_func>
 800a85e:	2301      	movs	r3, #1
 800a860:	6144      	str	r4, [r0, #20]
 800a862:	6103      	str	r3, [r0, #16]
 800a864:	bd10      	pop	{r4, pc}
 800a866:	bf00      	nop
 800a868:	0801fe23 	.word	0x0801fe23
 800a86c:	0801fe34 	.word	0x0801fe34

0800a870 <__multiply>:
 800a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a874:	4691      	mov	r9, r2
 800a876:	690a      	ldr	r2, [r1, #16]
 800a878:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	bfb8      	it	lt
 800a880:	460b      	movlt	r3, r1
 800a882:	460c      	mov	r4, r1
 800a884:	bfbc      	itt	lt
 800a886:	464c      	movlt	r4, r9
 800a888:	4699      	movlt	r9, r3
 800a88a:	6927      	ldr	r7, [r4, #16]
 800a88c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a890:	68a3      	ldr	r3, [r4, #8]
 800a892:	6861      	ldr	r1, [r4, #4]
 800a894:	eb07 060a 	add.w	r6, r7, sl
 800a898:	42b3      	cmp	r3, r6
 800a89a:	b085      	sub	sp, #20
 800a89c:	bfb8      	it	lt
 800a89e:	3101      	addlt	r1, #1
 800a8a0:	f7ff fed8 	bl	800a654 <_Balloc>
 800a8a4:	b930      	cbnz	r0, 800a8b4 <__multiply+0x44>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	4b44      	ldr	r3, [pc, #272]	; (800a9bc <__multiply+0x14c>)
 800a8aa:	4845      	ldr	r0, [pc, #276]	; (800a9c0 <__multiply+0x150>)
 800a8ac:	f240 115d 	movw	r1, #349	; 0x15d
 800a8b0:	f7fe fff6 	bl	80098a0 <__assert_func>
 800a8b4:	f100 0514 	add.w	r5, r0, #20
 800a8b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a8bc:	462b      	mov	r3, r5
 800a8be:	2200      	movs	r2, #0
 800a8c0:	4543      	cmp	r3, r8
 800a8c2:	d321      	bcc.n	800a908 <__multiply+0x98>
 800a8c4:	f104 0314 	add.w	r3, r4, #20
 800a8c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a8cc:	f109 0314 	add.w	r3, r9, #20
 800a8d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a8d4:	9202      	str	r2, [sp, #8]
 800a8d6:	1b3a      	subs	r2, r7, r4
 800a8d8:	3a15      	subs	r2, #21
 800a8da:	f022 0203 	bic.w	r2, r2, #3
 800a8de:	3204      	adds	r2, #4
 800a8e0:	f104 0115 	add.w	r1, r4, #21
 800a8e4:	428f      	cmp	r7, r1
 800a8e6:	bf38      	it	cc
 800a8e8:	2204      	movcc	r2, #4
 800a8ea:	9201      	str	r2, [sp, #4]
 800a8ec:	9a02      	ldr	r2, [sp, #8]
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d80c      	bhi.n	800a90e <__multiply+0x9e>
 800a8f4:	2e00      	cmp	r6, #0
 800a8f6:	dd03      	ble.n	800a900 <__multiply+0x90>
 800a8f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d05a      	beq.n	800a9b6 <__multiply+0x146>
 800a900:	6106      	str	r6, [r0, #16]
 800a902:	b005      	add	sp, #20
 800a904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a908:	f843 2b04 	str.w	r2, [r3], #4
 800a90c:	e7d8      	b.n	800a8c0 <__multiply+0x50>
 800a90e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a912:	f1ba 0f00 	cmp.w	sl, #0
 800a916:	d024      	beq.n	800a962 <__multiply+0xf2>
 800a918:	f104 0e14 	add.w	lr, r4, #20
 800a91c:	46a9      	mov	r9, r5
 800a91e:	f04f 0c00 	mov.w	ip, #0
 800a922:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a926:	f8d9 1000 	ldr.w	r1, [r9]
 800a92a:	fa1f fb82 	uxth.w	fp, r2
 800a92e:	b289      	uxth	r1, r1
 800a930:	fb0a 110b 	mla	r1, sl, fp, r1
 800a934:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a938:	f8d9 2000 	ldr.w	r2, [r9]
 800a93c:	4461      	add	r1, ip
 800a93e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a942:	fb0a c20b 	mla	r2, sl, fp, ip
 800a946:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a94a:	b289      	uxth	r1, r1
 800a94c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a950:	4577      	cmp	r7, lr
 800a952:	f849 1b04 	str.w	r1, [r9], #4
 800a956:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a95a:	d8e2      	bhi.n	800a922 <__multiply+0xb2>
 800a95c:	9a01      	ldr	r2, [sp, #4]
 800a95e:	f845 c002 	str.w	ip, [r5, r2]
 800a962:	9a03      	ldr	r2, [sp, #12]
 800a964:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a968:	3304      	adds	r3, #4
 800a96a:	f1b9 0f00 	cmp.w	r9, #0
 800a96e:	d020      	beq.n	800a9b2 <__multiply+0x142>
 800a970:	6829      	ldr	r1, [r5, #0]
 800a972:	f104 0c14 	add.w	ip, r4, #20
 800a976:	46ae      	mov	lr, r5
 800a978:	f04f 0a00 	mov.w	sl, #0
 800a97c:	f8bc b000 	ldrh.w	fp, [ip]
 800a980:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a984:	fb09 220b 	mla	r2, r9, fp, r2
 800a988:	4492      	add	sl, r2
 800a98a:	b289      	uxth	r1, r1
 800a98c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a990:	f84e 1b04 	str.w	r1, [lr], #4
 800a994:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a998:	f8be 1000 	ldrh.w	r1, [lr]
 800a99c:	0c12      	lsrs	r2, r2, #16
 800a99e:	fb09 1102 	mla	r1, r9, r2, r1
 800a9a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a9a6:	4567      	cmp	r7, ip
 800a9a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a9ac:	d8e6      	bhi.n	800a97c <__multiply+0x10c>
 800a9ae:	9a01      	ldr	r2, [sp, #4]
 800a9b0:	50a9      	str	r1, [r5, r2]
 800a9b2:	3504      	adds	r5, #4
 800a9b4:	e79a      	b.n	800a8ec <__multiply+0x7c>
 800a9b6:	3e01      	subs	r6, #1
 800a9b8:	e79c      	b.n	800a8f4 <__multiply+0x84>
 800a9ba:	bf00      	nop
 800a9bc:	0801fe23 	.word	0x0801fe23
 800a9c0:	0801fe34 	.word	0x0801fe34

0800a9c4 <__pow5mult>:
 800a9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c8:	4615      	mov	r5, r2
 800a9ca:	f012 0203 	ands.w	r2, r2, #3
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	460f      	mov	r7, r1
 800a9d2:	d007      	beq.n	800a9e4 <__pow5mult+0x20>
 800a9d4:	4c25      	ldr	r4, [pc, #148]	; (800aa6c <__pow5mult+0xa8>)
 800a9d6:	3a01      	subs	r2, #1
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9de:	f7ff fe9b 	bl	800a718 <__multadd>
 800a9e2:	4607      	mov	r7, r0
 800a9e4:	10ad      	asrs	r5, r5, #2
 800a9e6:	d03d      	beq.n	800aa64 <__pow5mult+0xa0>
 800a9e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9ea:	b97c      	cbnz	r4, 800aa0c <__pow5mult+0x48>
 800a9ec:	2010      	movs	r0, #16
 800a9ee:	f7ff fe29 	bl	800a644 <malloc>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	6270      	str	r0, [r6, #36]	; 0x24
 800a9f6:	b928      	cbnz	r0, 800aa04 <__pow5mult+0x40>
 800a9f8:	4b1d      	ldr	r3, [pc, #116]	; (800aa70 <__pow5mult+0xac>)
 800a9fa:	481e      	ldr	r0, [pc, #120]	; (800aa74 <__pow5mult+0xb0>)
 800a9fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aa00:	f7fe ff4e 	bl	80098a0 <__assert_func>
 800aa04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa08:	6004      	str	r4, [r0, #0]
 800aa0a:	60c4      	str	r4, [r0, #12]
 800aa0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa14:	b94c      	cbnz	r4, 800aa2a <__pow5mult+0x66>
 800aa16:	f240 2171 	movw	r1, #625	; 0x271
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	f7ff ff12 	bl	800a844 <__i2b>
 800aa20:	2300      	movs	r3, #0
 800aa22:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa26:	4604      	mov	r4, r0
 800aa28:	6003      	str	r3, [r0, #0]
 800aa2a:	f04f 0900 	mov.w	r9, #0
 800aa2e:	07eb      	lsls	r3, r5, #31
 800aa30:	d50a      	bpl.n	800aa48 <__pow5mult+0x84>
 800aa32:	4639      	mov	r1, r7
 800aa34:	4622      	mov	r2, r4
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7ff ff1a 	bl	800a870 <__multiply>
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	4680      	mov	r8, r0
 800aa40:	4630      	mov	r0, r6
 800aa42:	f7ff fe47 	bl	800a6d4 <_Bfree>
 800aa46:	4647      	mov	r7, r8
 800aa48:	106d      	asrs	r5, r5, #1
 800aa4a:	d00b      	beq.n	800aa64 <__pow5mult+0xa0>
 800aa4c:	6820      	ldr	r0, [r4, #0]
 800aa4e:	b938      	cbnz	r0, 800aa60 <__pow5mult+0x9c>
 800aa50:	4622      	mov	r2, r4
 800aa52:	4621      	mov	r1, r4
 800aa54:	4630      	mov	r0, r6
 800aa56:	f7ff ff0b 	bl	800a870 <__multiply>
 800aa5a:	6020      	str	r0, [r4, #0]
 800aa5c:	f8c0 9000 	str.w	r9, [r0]
 800aa60:	4604      	mov	r4, r0
 800aa62:	e7e4      	b.n	800aa2e <__pow5mult+0x6a>
 800aa64:	4638      	mov	r0, r7
 800aa66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa6a:	bf00      	nop
 800aa6c:	0801ff80 	.word	0x0801ff80
 800aa70:	0801fdb1 	.word	0x0801fdb1
 800aa74:	0801fe34 	.word	0x0801fe34

0800aa78 <__lshift>:
 800aa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	6849      	ldr	r1, [r1, #4]
 800aa80:	6923      	ldr	r3, [r4, #16]
 800aa82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa86:	68a3      	ldr	r3, [r4, #8]
 800aa88:	4607      	mov	r7, r0
 800aa8a:	4691      	mov	r9, r2
 800aa8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa90:	f108 0601 	add.w	r6, r8, #1
 800aa94:	42b3      	cmp	r3, r6
 800aa96:	db0b      	blt.n	800aab0 <__lshift+0x38>
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f7ff fddb 	bl	800a654 <_Balloc>
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	b948      	cbnz	r0, 800aab6 <__lshift+0x3e>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	4b2a      	ldr	r3, [pc, #168]	; (800ab50 <__lshift+0xd8>)
 800aaa6:	482b      	ldr	r0, [pc, #172]	; (800ab54 <__lshift+0xdc>)
 800aaa8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aaac:	f7fe fef8 	bl	80098a0 <__assert_func>
 800aab0:	3101      	adds	r1, #1
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	e7ee      	b.n	800aa94 <__lshift+0x1c>
 800aab6:	2300      	movs	r3, #0
 800aab8:	f100 0114 	add.w	r1, r0, #20
 800aabc:	f100 0210 	add.w	r2, r0, #16
 800aac0:	4618      	mov	r0, r3
 800aac2:	4553      	cmp	r3, sl
 800aac4:	db37      	blt.n	800ab36 <__lshift+0xbe>
 800aac6:	6920      	ldr	r0, [r4, #16]
 800aac8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aacc:	f104 0314 	add.w	r3, r4, #20
 800aad0:	f019 091f 	ands.w	r9, r9, #31
 800aad4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aad8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aadc:	d02f      	beq.n	800ab3e <__lshift+0xc6>
 800aade:	f1c9 0e20 	rsb	lr, r9, #32
 800aae2:	468a      	mov	sl, r1
 800aae4:	f04f 0c00 	mov.w	ip, #0
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	fa02 f209 	lsl.w	r2, r2, r9
 800aaee:	ea42 020c 	orr.w	r2, r2, ip
 800aaf2:	f84a 2b04 	str.w	r2, [sl], #4
 800aaf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aafa:	4298      	cmp	r0, r3
 800aafc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ab00:	d8f2      	bhi.n	800aae8 <__lshift+0x70>
 800ab02:	1b03      	subs	r3, r0, r4
 800ab04:	3b15      	subs	r3, #21
 800ab06:	f023 0303 	bic.w	r3, r3, #3
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	f104 0215 	add.w	r2, r4, #21
 800ab10:	4290      	cmp	r0, r2
 800ab12:	bf38      	it	cc
 800ab14:	2304      	movcc	r3, #4
 800ab16:	f841 c003 	str.w	ip, [r1, r3]
 800ab1a:	f1bc 0f00 	cmp.w	ip, #0
 800ab1e:	d001      	beq.n	800ab24 <__lshift+0xac>
 800ab20:	f108 0602 	add.w	r6, r8, #2
 800ab24:	3e01      	subs	r6, #1
 800ab26:	4638      	mov	r0, r7
 800ab28:	612e      	str	r6, [r5, #16]
 800ab2a:	4621      	mov	r1, r4
 800ab2c:	f7ff fdd2 	bl	800a6d4 <_Bfree>
 800ab30:	4628      	mov	r0, r5
 800ab32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab36:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	e7c1      	b.n	800aac2 <__lshift+0x4a>
 800ab3e:	3904      	subs	r1, #4
 800ab40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab44:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab48:	4298      	cmp	r0, r3
 800ab4a:	d8f9      	bhi.n	800ab40 <__lshift+0xc8>
 800ab4c:	e7ea      	b.n	800ab24 <__lshift+0xac>
 800ab4e:	bf00      	nop
 800ab50:	0801fe23 	.word	0x0801fe23
 800ab54:	0801fe34 	.word	0x0801fe34

0800ab58 <__mcmp>:
 800ab58:	b530      	push	{r4, r5, lr}
 800ab5a:	6902      	ldr	r2, [r0, #16]
 800ab5c:	690c      	ldr	r4, [r1, #16]
 800ab5e:	1b12      	subs	r2, r2, r4
 800ab60:	d10e      	bne.n	800ab80 <__mcmp+0x28>
 800ab62:	f100 0314 	add.w	r3, r0, #20
 800ab66:	3114      	adds	r1, #20
 800ab68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab78:	42a5      	cmp	r5, r4
 800ab7a:	d003      	beq.n	800ab84 <__mcmp+0x2c>
 800ab7c:	d305      	bcc.n	800ab8a <__mcmp+0x32>
 800ab7e:	2201      	movs	r2, #1
 800ab80:	4610      	mov	r0, r2
 800ab82:	bd30      	pop	{r4, r5, pc}
 800ab84:	4283      	cmp	r3, r0
 800ab86:	d3f3      	bcc.n	800ab70 <__mcmp+0x18>
 800ab88:	e7fa      	b.n	800ab80 <__mcmp+0x28>
 800ab8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab8e:	e7f7      	b.n	800ab80 <__mcmp+0x28>

0800ab90 <__mdiff>:
 800ab90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	460c      	mov	r4, r1
 800ab96:	4606      	mov	r6, r0
 800ab98:	4611      	mov	r1, r2
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	4690      	mov	r8, r2
 800ab9e:	f7ff ffdb 	bl	800ab58 <__mcmp>
 800aba2:	1e05      	subs	r5, r0, #0
 800aba4:	d110      	bne.n	800abc8 <__mdiff+0x38>
 800aba6:	4629      	mov	r1, r5
 800aba8:	4630      	mov	r0, r6
 800abaa:	f7ff fd53 	bl	800a654 <_Balloc>
 800abae:	b930      	cbnz	r0, 800abbe <__mdiff+0x2e>
 800abb0:	4b3a      	ldr	r3, [pc, #232]	; (800ac9c <__mdiff+0x10c>)
 800abb2:	4602      	mov	r2, r0
 800abb4:	f240 2132 	movw	r1, #562	; 0x232
 800abb8:	4839      	ldr	r0, [pc, #228]	; (800aca0 <__mdiff+0x110>)
 800abba:	f7fe fe71 	bl	80098a0 <__assert_func>
 800abbe:	2301      	movs	r3, #1
 800abc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800abc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc8:	bfa4      	itt	ge
 800abca:	4643      	movge	r3, r8
 800abcc:	46a0      	movge	r8, r4
 800abce:	4630      	mov	r0, r6
 800abd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800abd4:	bfa6      	itte	ge
 800abd6:	461c      	movge	r4, r3
 800abd8:	2500      	movge	r5, #0
 800abda:	2501      	movlt	r5, #1
 800abdc:	f7ff fd3a 	bl	800a654 <_Balloc>
 800abe0:	b920      	cbnz	r0, 800abec <__mdiff+0x5c>
 800abe2:	4b2e      	ldr	r3, [pc, #184]	; (800ac9c <__mdiff+0x10c>)
 800abe4:	4602      	mov	r2, r0
 800abe6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800abea:	e7e5      	b.n	800abb8 <__mdiff+0x28>
 800abec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abf0:	6926      	ldr	r6, [r4, #16]
 800abf2:	60c5      	str	r5, [r0, #12]
 800abf4:	f104 0914 	add.w	r9, r4, #20
 800abf8:	f108 0514 	add.w	r5, r8, #20
 800abfc:	f100 0e14 	add.w	lr, r0, #20
 800ac00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ac04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac08:	f108 0210 	add.w	r2, r8, #16
 800ac0c:	46f2      	mov	sl, lr
 800ac0e:	2100      	movs	r1, #0
 800ac10:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ac18:	fa1f f883 	uxth.w	r8, r3
 800ac1c:	fa11 f18b 	uxtah	r1, r1, fp
 800ac20:	0c1b      	lsrs	r3, r3, #16
 800ac22:	eba1 0808 	sub.w	r8, r1, r8
 800ac26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac2e:	fa1f f888 	uxth.w	r8, r8
 800ac32:	1419      	asrs	r1, r3, #16
 800ac34:	454e      	cmp	r6, r9
 800ac36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac3a:	f84a 3b04 	str.w	r3, [sl], #4
 800ac3e:	d8e7      	bhi.n	800ac10 <__mdiff+0x80>
 800ac40:	1b33      	subs	r3, r6, r4
 800ac42:	3b15      	subs	r3, #21
 800ac44:	f023 0303 	bic.w	r3, r3, #3
 800ac48:	3304      	adds	r3, #4
 800ac4a:	3415      	adds	r4, #21
 800ac4c:	42a6      	cmp	r6, r4
 800ac4e:	bf38      	it	cc
 800ac50:	2304      	movcc	r3, #4
 800ac52:	441d      	add	r5, r3
 800ac54:	4473      	add	r3, lr
 800ac56:	469e      	mov	lr, r3
 800ac58:	462e      	mov	r6, r5
 800ac5a:	4566      	cmp	r6, ip
 800ac5c:	d30e      	bcc.n	800ac7c <__mdiff+0xec>
 800ac5e:	f10c 0203 	add.w	r2, ip, #3
 800ac62:	1b52      	subs	r2, r2, r5
 800ac64:	f022 0203 	bic.w	r2, r2, #3
 800ac68:	3d03      	subs	r5, #3
 800ac6a:	45ac      	cmp	ip, r5
 800ac6c:	bf38      	it	cc
 800ac6e:	2200      	movcc	r2, #0
 800ac70:	441a      	add	r2, r3
 800ac72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac76:	b17b      	cbz	r3, 800ac98 <__mdiff+0x108>
 800ac78:	6107      	str	r7, [r0, #16]
 800ac7a:	e7a3      	b.n	800abc4 <__mdiff+0x34>
 800ac7c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac80:	fa11 f288 	uxtah	r2, r1, r8
 800ac84:	1414      	asrs	r4, r2, #16
 800ac86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac8a:	b292      	uxth	r2, r2
 800ac8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac90:	f84e 2b04 	str.w	r2, [lr], #4
 800ac94:	1421      	asrs	r1, r4, #16
 800ac96:	e7e0      	b.n	800ac5a <__mdiff+0xca>
 800ac98:	3f01      	subs	r7, #1
 800ac9a:	e7ea      	b.n	800ac72 <__mdiff+0xe2>
 800ac9c:	0801fe23 	.word	0x0801fe23
 800aca0:	0801fe34 	.word	0x0801fe34

0800aca4 <__d2b>:
 800aca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aca8:	4689      	mov	r9, r1
 800acaa:	2101      	movs	r1, #1
 800acac:	ec57 6b10 	vmov	r6, r7, d0
 800acb0:	4690      	mov	r8, r2
 800acb2:	f7ff fccf 	bl	800a654 <_Balloc>
 800acb6:	4604      	mov	r4, r0
 800acb8:	b930      	cbnz	r0, 800acc8 <__d2b+0x24>
 800acba:	4602      	mov	r2, r0
 800acbc:	4b25      	ldr	r3, [pc, #148]	; (800ad54 <__d2b+0xb0>)
 800acbe:	4826      	ldr	r0, [pc, #152]	; (800ad58 <__d2b+0xb4>)
 800acc0:	f240 310a 	movw	r1, #778	; 0x30a
 800acc4:	f7fe fdec 	bl	80098a0 <__assert_func>
 800acc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800accc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800acd0:	bb35      	cbnz	r5, 800ad20 <__d2b+0x7c>
 800acd2:	2e00      	cmp	r6, #0
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	d028      	beq.n	800ad2a <__d2b+0x86>
 800acd8:	4668      	mov	r0, sp
 800acda:	9600      	str	r6, [sp, #0]
 800acdc:	f7ff fd82 	bl	800a7e4 <__lo0bits>
 800ace0:	9900      	ldr	r1, [sp, #0]
 800ace2:	b300      	cbz	r0, 800ad26 <__d2b+0x82>
 800ace4:	9a01      	ldr	r2, [sp, #4]
 800ace6:	f1c0 0320 	rsb	r3, r0, #32
 800acea:	fa02 f303 	lsl.w	r3, r2, r3
 800acee:	430b      	orrs	r3, r1
 800acf0:	40c2      	lsrs	r2, r0
 800acf2:	6163      	str	r3, [r4, #20]
 800acf4:	9201      	str	r2, [sp, #4]
 800acf6:	9b01      	ldr	r3, [sp, #4]
 800acf8:	61a3      	str	r3, [r4, #24]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	bf14      	ite	ne
 800acfe:	2202      	movne	r2, #2
 800ad00:	2201      	moveq	r2, #1
 800ad02:	6122      	str	r2, [r4, #16]
 800ad04:	b1d5      	cbz	r5, 800ad3c <__d2b+0x98>
 800ad06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad0a:	4405      	add	r5, r0
 800ad0c:	f8c9 5000 	str.w	r5, [r9]
 800ad10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad14:	f8c8 0000 	str.w	r0, [r8]
 800ad18:	4620      	mov	r0, r4
 800ad1a:	b003      	add	sp, #12
 800ad1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad24:	e7d5      	b.n	800acd2 <__d2b+0x2e>
 800ad26:	6161      	str	r1, [r4, #20]
 800ad28:	e7e5      	b.n	800acf6 <__d2b+0x52>
 800ad2a:	a801      	add	r0, sp, #4
 800ad2c:	f7ff fd5a 	bl	800a7e4 <__lo0bits>
 800ad30:	9b01      	ldr	r3, [sp, #4]
 800ad32:	6163      	str	r3, [r4, #20]
 800ad34:	2201      	movs	r2, #1
 800ad36:	6122      	str	r2, [r4, #16]
 800ad38:	3020      	adds	r0, #32
 800ad3a:	e7e3      	b.n	800ad04 <__d2b+0x60>
 800ad3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad44:	f8c9 0000 	str.w	r0, [r9]
 800ad48:	6918      	ldr	r0, [r3, #16]
 800ad4a:	f7ff fd2b 	bl	800a7a4 <__hi0bits>
 800ad4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad52:	e7df      	b.n	800ad14 <__d2b+0x70>
 800ad54:	0801fe23 	.word	0x0801fe23
 800ad58:	0801fe34 	.word	0x0801fe34

0800ad5c <_calloc_r>:
 800ad5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad5e:	fba1 2402 	umull	r2, r4, r1, r2
 800ad62:	b94c      	cbnz	r4, 800ad78 <_calloc_r+0x1c>
 800ad64:	4611      	mov	r1, r2
 800ad66:	9201      	str	r2, [sp, #4]
 800ad68:	f000 f87a 	bl	800ae60 <_malloc_r>
 800ad6c:	9a01      	ldr	r2, [sp, #4]
 800ad6e:	4605      	mov	r5, r0
 800ad70:	b930      	cbnz	r0, 800ad80 <_calloc_r+0x24>
 800ad72:	4628      	mov	r0, r5
 800ad74:	b003      	add	sp, #12
 800ad76:	bd30      	pop	{r4, r5, pc}
 800ad78:	220c      	movs	r2, #12
 800ad7a:	6002      	str	r2, [r0, #0]
 800ad7c:	2500      	movs	r5, #0
 800ad7e:	e7f8      	b.n	800ad72 <_calloc_r+0x16>
 800ad80:	4621      	mov	r1, r4
 800ad82:	f7fe f893 	bl	8008eac <memset>
 800ad86:	e7f4      	b.n	800ad72 <_calloc_r+0x16>

0800ad88 <_free_r>:
 800ad88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad8a:	2900      	cmp	r1, #0
 800ad8c:	d044      	beq.n	800ae18 <_free_r+0x90>
 800ad8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad92:	9001      	str	r0, [sp, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f1a1 0404 	sub.w	r4, r1, #4
 800ad9a:	bfb8      	it	lt
 800ad9c:	18e4      	addlt	r4, r4, r3
 800ad9e:	f000 febf 	bl	800bb20 <__malloc_lock>
 800ada2:	4a1e      	ldr	r2, [pc, #120]	; (800ae1c <_free_r+0x94>)
 800ada4:	9801      	ldr	r0, [sp, #4]
 800ada6:	6813      	ldr	r3, [r2, #0]
 800ada8:	b933      	cbnz	r3, 800adb8 <_free_r+0x30>
 800adaa:	6063      	str	r3, [r4, #4]
 800adac:	6014      	str	r4, [r2, #0]
 800adae:	b003      	add	sp, #12
 800adb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adb4:	f000 beba 	b.w	800bb2c <__malloc_unlock>
 800adb8:	42a3      	cmp	r3, r4
 800adba:	d908      	bls.n	800adce <_free_r+0x46>
 800adbc:	6825      	ldr	r5, [r4, #0]
 800adbe:	1961      	adds	r1, r4, r5
 800adc0:	428b      	cmp	r3, r1
 800adc2:	bf01      	itttt	eq
 800adc4:	6819      	ldreq	r1, [r3, #0]
 800adc6:	685b      	ldreq	r3, [r3, #4]
 800adc8:	1949      	addeq	r1, r1, r5
 800adca:	6021      	streq	r1, [r4, #0]
 800adcc:	e7ed      	b.n	800adaa <_free_r+0x22>
 800adce:	461a      	mov	r2, r3
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	b10b      	cbz	r3, 800add8 <_free_r+0x50>
 800add4:	42a3      	cmp	r3, r4
 800add6:	d9fa      	bls.n	800adce <_free_r+0x46>
 800add8:	6811      	ldr	r1, [r2, #0]
 800adda:	1855      	adds	r5, r2, r1
 800addc:	42a5      	cmp	r5, r4
 800adde:	d10b      	bne.n	800adf8 <_free_r+0x70>
 800ade0:	6824      	ldr	r4, [r4, #0]
 800ade2:	4421      	add	r1, r4
 800ade4:	1854      	adds	r4, r2, r1
 800ade6:	42a3      	cmp	r3, r4
 800ade8:	6011      	str	r1, [r2, #0]
 800adea:	d1e0      	bne.n	800adae <_free_r+0x26>
 800adec:	681c      	ldr	r4, [r3, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	6053      	str	r3, [r2, #4]
 800adf2:	4421      	add	r1, r4
 800adf4:	6011      	str	r1, [r2, #0]
 800adf6:	e7da      	b.n	800adae <_free_r+0x26>
 800adf8:	d902      	bls.n	800ae00 <_free_r+0x78>
 800adfa:	230c      	movs	r3, #12
 800adfc:	6003      	str	r3, [r0, #0]
 800adfe:	e7d6      	b.n	800adae <_free_r+0x26>
 800ae00:	6825      	ldr	r5, [r4, #0]
 800ae02:	1961      	adds	r1, r4, r5
 800ae04:	428b      	cmp	r3, r1
 800ae06:	bf04      	itt	eq
 800ae08:	6819      	ldreq	r1, [r3, #0]
 800ae0a:	685b      	ldreq	r3, [r3, #4]
 800ae0c:	6063      	str	r3, [r4, #4]
 800ae0e:	bf04      	itt	eq
 800ae10:	1949      	addeq	r1, r1, r5
 800ae12:	6021      	streq	r1, [r4, #0]
 800ae14:	6054      	str	r4, [r2, #4]
 800ae16:	e7ca      	b.n	800adae <_free_r+0x26>
 800ae18:	b003      	add	sp, #12
 800ae1a:	bd30      	pop	{r4, r5, pc}
 800ae1c:	200035b8 	.word	0x200035b8

0800ae20 <sbrk_aligned>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	4e0e      	ldr	r6, [pc, #56]	; (800ae5c <sbrk_aligned+0x3c>)
 800ae24:	460c      	mov	r4, r1
 800ae26:	6831      	ldr	r1, [r6, #0]
 800ae28:	4605      	mov	r5, r0
 800ae2a:	b911      	cbnz	r1, 800ae32 <sbrk_aligned+0x12>
 800ae2c:	f000 fb54 	bl	800b4d8 <_sbrk_r>
 800ae30:	6030      	str	r0, [r6, #0]
 800ae32:	4621      	mov	r1, r4
 800ae34:	4628      	mov	r0, r5
 800ae36:	f000 fb4f 	bl	800b4d8 <_sbrk_r>
 800ae3a:	1c43      	adds	r3, r0, #1
 800ae3c:	d00a      	beq.n	800ae54 <sbrk_aligned+0x34>
 800ae3e:	1cc4      	adds	r4, r0, #3
 800ae40:	f024 0403 	bic.w	r4, r4, #3
 800ae44:	42a0      	cmp	r0, r4
 800ae46:	d007      	beq.n	800ae58 <sbrk_aligned+0x38>
 800ae48:	1a21      	subs	r1, r4, r0
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	f000 fb44 	bl	800b4d8 <_sbrk_r>
 800ae50:	3001      	adds	r0, #1
 800ae52:	d101      	bne.n	800ae58 <sbrk_aligned+0x38>
 800ae54:	f04f 34ff 	mov.w	r4, #4294967295
 800ae58:	4620      	mov	r0, r4
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}
 800ae5c:	200035bc 	.word	0x200035bc

0800ae60 <_malloc_r>:
 800ae60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae64:	1ccd      	adds	r5, r1, #3
 800ae66:	f025 0503 	bic.w	r5, r5, #3
 800ae6a:	3508      	adds	r5, #8
 800ae6c:	2d0c      	cmp	r5, #12
 800ae6e:	bf38      	it	cc
 800ae70:	250c      	movcc	r5, #12
 800ae72:	2d00      	cmp	r5, #0
 800ae74:	4607      	mov	r7, r0
 800ae76:	db01      	blt.n	800ae7c <_malloc_r+0x1c>
 800ae78:	42a9      	cmp	r1, r5
 800ae7a:	d905      	bls.n	800ae88 <_malloc_r+0x28>
 800ae7c:	230c      	movs	r3, #12
 800ae7e:	603b      	str	r3, [r7, #0]
 800ae80:	2600      	movs	r6, #0
 800ae82:	4630      	mov	r0, r6
 800ae84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae88:	4e2e      	ldr	r6, [pc, #184]	; (800af44 <_malloc_r+0xe4>)
 800ae8a:	f000 fe49 	bl	800bb20 <__malloc_lock>
 800ae8e:	6833      	ldr	r3, [r6, #0]
 800ae90:	461c      	mov	r4, r3
 800ae92:	bb34      	cbnz	r4, 800aee2 <_malloc_r+0x82>
 800ae94:	4629      	mov	r1, r5
 800ae96:	4638      	mov	r0, r7
 800ae98:	f7ff ffc2 	bl	800ae20 <sbrk_aligned>
 800ae9c:	1c43      	adds	r3, r0, #1
 800ae9e:	4604      	mov	r4, r0
 800aea0:	d14d      	bne.n	800af3e <_malloc_r+0xde>
 800aea2:	6834      	ldr	r4, [r6, #0]
 800aea4:	4626      	mov	r6, r4
 800aea6:	2e00      	cmp	r6, #0
 800aea8:	d140      	bne.n	800af2c <_malloc_r+0xcc>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	4631      	mov	r1, r6
 800aeae:	4638      	mov	r0, r7
 800aeb0:	eb04 0803 	add.w	r8, r4, r3
 800aeb4:	f000 fb10 	bl	800b4d8 <_sbrk_r>
 800aeb8:	4580      	cmp	r8, r0
 800aeba:	d13a      	bne.n	800af32 <_malloc_r+0xd2>
 800aebc:	6821      	ldr	r1, [r4, #0]
 800aebe:	3503      	adds	r5, #3
 800aec0:	1a6d      	subs	r5, r5, r1
 800aec2:	f025 0503 	bic.w	r5, r5, #3
 800aec6:	3508      	adds	r5, #8
 800aec8:	2d0c      	cmp	r5, #12
 800aeca:	bf38      	it	cc
 800aecc:	250c      	movcc	r5, #12
 800aece:	4629      	mov	r1, r5
 800aed0:	4638      	mov	r0, r7
 800aed2:	f7ff ffa5 	bl	800ae20 <sbrk_aligned>
 800aed6:	3001      	adds	r0, #1
 800aed8:	d02b      	beq.n	800af32 <_malloc_r+0xd2>
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	442b      	add	r3, r5
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	e00e      	b.n	800af00 <_malloc_r+0xa0>
 800aee2:	6822      	ldr	r2, [r4, #0]
 800aee4:	1b52      	subs	r2, r2, r5
 800aee6:	d41e      	bmi.n	800af26 <_malloc_r+0xc6>
 800aee8:	2a0b      	cmp	r2, #11
 800aeea:	d916      	bls.n	800af1a <_malloc_r+0xba>
 800aeec:	1961      	adds	r1, r4, r5
 800aeee:	42a3      	cmp	r3, r4
 800aef0:	6025      	str	r5, [r4, #0]
 800aef2:	bf18      	it	ne
 800aef4:	6059      	strne	r1, [r3, #4]
 800aef6:	6863      	ldr	r3, [r4, #4]
 800aef8:	bf08      	it	eq
 800aefa:	6031      	streq	r1, [r6, #0]
 800aefc:	5162      	str	r2, [r4, r5]
 800aefe:	604b      	str	r3, [r1, #4]
 800af00:	4638      	mov	r0, r7
 800af02:	f104 060b 	add.w	r6, r4, #11
 800af06:	f000 fe11 	bl	800bb2c <__malloc_unlock>
 800af0a:	f026 0607 	bic.w	r6, r6, #7
 800af0e:	1d23      	adds	r3, r4, #4
 800af10:	1af2      	subs	r2, r6, r3
 800af12:	d0b6      	beq.n	800ae82 <_malloc_r+0x22>
 800af14:	1b9b      	subs	r3, r3, r6
 800af16:	50a3      	str	r3, [r4, r2]
 800af18:	e7b3      	b.n	800ae82 <_malloc_r+0x22>
 800af1a:	6862      	ldr	r2, [r4, #4]
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	bf0c      	ite	eq
 800af20:	6032      	streq	r2, [r6, #0]
 800af22:	605a      	strne	r2, [r3, #4]
 800af24:	e7ec      	b.n	800af00 <_malloc_r+0xa0>
 800af26:	4623      	mov	r3, r4
 800af28:	6864      	ldr	r4, [r4, #4]
 800af2a:	e7b2      	b.n	800ae92 <_malloc_r+0x32>
 800af2c:	4634      	mov	r4, r6
 800af2e:	6876      	ldr	r6, [r6, #4]
 800af30:	e7b9      	b.n	800aea6 <_malloc_r+0x46>
 800af32:	230c      	movs	r3, #12
 800af34:	603b      	str	r3, [r7, #0]
 800af36:	4638      	mov	r0, r7
 800af38:	f000 fdf8 	bl	800bb2c <__malloc_unlock>
 800af3c:	e7a1      	b.n	800ae82 <_malloc_r+0x22>
 800af3e:	6025      	str	r5, [r4, #0]
 800af40:	e7de      	b.n	800af00 <_malloc_r+0xa0>
 800af42:	bf00      	nop
 800af44:	200035b8 	.word	0x200035b8

0800af48 <__ssputs_r>:
 800af48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af4c:	688e      	ldr	r6, [r1, #8]
 800af4e:	429e      	cmp	r6, r3
 800af50:	4682      	mov	sl, r0
 800af52:	460c      	mov	r4, r1
 800af54:	4690      	mov	r8, r2
 800af56:	461f      	mov	r7, r3
 800af58:	d838      	bhi.n	800afcc <__ssputs_r+0x84>
 800af5a:	898a      	ldrh	r2, [r1, #12]
 800af5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af60:	d032      	beq.n	800afc8 <__ssputs_r+0x80>
 800af62:	6825      	ldr	r5, [r4, #0]
 800af64:	6909      	ldr	r1, [r1, #16]
 800af66:	eba5 0901 	sub.w	r9, r5, r1
 800af6a:	6965      	ldr	r5, [r4, #20]
 800af6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af74:	3301      	adds	r3, #1
 800af76:	444b      	add	r3, r9
 800af78:	106d      	asrs	r5, r5, #1
 800af7a:	429d      	cmp	r5, r3
 800af7c:	bf38      	it	cc
 800af7e:	461d      	movcc	r5, r3
 800af80:	0553      	lsls	r3, r2, #21
 800af82:	d531      	bpl.n	800afe8 <__ssputs_r+0xa0>
 800af84:	4629      	mov	r1, r5
 800af86:	f7ff ff6b 	bl	800ae60 <_malloc_r>
 800af8a:	4606      	mov	r6, r0
 800af8c:	b950      	cbnz	r0, 800afa4 <__ssputs_r+0x5c>
 800af8e:	230c      	movs	r3, #12
 800af90:	f8ca 3000 	str.w	r3, [sl]
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af9a:	81a3      	strh	r3, [r4, #12]
 800af9c:	f04f 30ff 	mov.w	r0, #4294967295
 800afa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa4:	6921      	ldr	r1, [r4, #16]
 800afa6:	464a      	mov	r2, r9
 800afa8:	f7fd ff72 	bl	8008e90 <memcpy>
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb6:	81a3      	strh	r3, [r4, #12]
 800afb8:	6126      	str	r6, [r4, #16]
 800afba:	6165      	str	r5, [r4, #20]
 800afbc:	444e      	add	r6, r9
 800afbe:	eba5 0509 	sub.w	r5, r5, r9
 800afc2:	6026      	str	r6, [r4, #0]
 800afc4:	60a5      	str	r5, [r4, #8]
 800afc6:	463e      	mov	r6, r7
 800afc8:	42be      	cmp	r6, r7
 800afca:	d900      	bls.n	800afce <__ssputs_r+0x86>
 800afcc:	463e      	mov	r6, r7
 800afce:	6820      	ldr	r0, [r4, #0]
 800afd0:	4632      	mov	r2, r6
 800afd2:	4641      	mov	r1, r8
 800afd4:	f000 fd8a 	bl	800baec <memmove>
 800afd8:	68a3      	ldr	r3, [r4, #8]
 800afda:	1b9b      	subs	r3, r3, r6
 800afdc:	60a3      	str	r3, [r4, #8]
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	4433      	add	r3, r6
 800afe2:	6023      	str	r3, [r4, #0]
 800afe4:	2000      	movs	r0, #0
 800afe6:	e7db      	b.n	800afa0 <__ssputs_r+0x58>
 800afe8:	462a      	mov	r2, r5
 800afea:	f000 fda5 	bl	800bb38 <_realloc_r>
 800afee:	4606      	mov	r6, r0
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d1e1      	bne.n	800afb8 <__ssputs_r+0x70>
 800aff4:	6921      	ldr	r1, [r4, #16]
 800aff6:	4650      	mov	r0, sl
 800aff8:	f7ff fec6 	bl	800ad88 <_free_r>
 800affc:	e7c7      	b.n	800af8e <__ssputs_r+0x46>
	...

0800b000 <_svfiprintf_r>:
 800b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b004:	4698      	mov	r8, r3
 800b006:	898b      	ldrh	r3, [r1, #12]
 800b008:	061b      	lsls	r3, r3, #24
 800b00a:	b09d      	sub	sp, #116	; 0x74
 800b00c:	4607      	mov	r7, r0
 800b00e:	460d      	mov	r5, r1
 800b010:	4614      	mov	r4, r2
 800b012:	d50e      	bpl.n	800b032 <_svfiprintf_r+0x32>
 800b014:	690b      	ldr	r3, [r1, #16]
 800b016:	b963      	cbnz	r3, 800b032 <_svfiprintf_r+0x32>
 800b018:	2140      	movs	r1, #64	; 0x40
 800b01a:	f7ff ff21 	bl	800ae60 <_malloc_r>
 800b01e:	6028      	str	r0, [r5, #0]
 800b020:	6128      	str	r0, [r5, #16]
 800b022:	b920      	cbnz	r0, 800b02e <_svfiprintf_r+0x2e>
 800b024:	230c      	movs	r3, #12
 800b026:	603b      	str	r3, [r7, #0]
 800b028:	f04f 30ff 	mov.w	r0, #4294967295
 800b02c:	e0d1      	b.n	800b1d2 <_svfiprintf_r+0x1d2>
 800b02e:	2340      	movs	r3, #64	; 0x40
 800b030:	616b      	str	r3, [r5, #20]
 800b032:	2300      	movs	r3, #0
 800b034:	9309      	str	r3, [sp, #36]	; 0x24
 800b036:	2320      	movs	r3, #32
 800b038:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b03c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b040:	2330      	movs	r3, #48	; 0x30
 800b042:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b1ec <_svfiprintf_r+0x1ec>
 800b046:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b04a:	f04f 0901 	mov.w	r9, #1
 800b04e:	4623      	mov	r3, r4
 800b050:	469a      	mov	sl, r3
 800b052:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b056:	b10a      	cbz	r2, 800b05c <_svfiprintf_r+0x5c>
 800b058:	2a25      	cmp	r2, #37	; 0x25
 800b05a:	d1f9      	bne.n	800b050 <_svfiprintf_r+0x50>
 800b05c:	ebba 0b04 	subs.w	fp, sl, r4
 800b060:	d00b      	beq.n	800b07a <_svfiprintf_r+0x7a>
 800b062:	465b      	mov	r3, fp
 800b064:	4622      	mov	r2, r4
 800b066:	4629      	mov	r1, r5
 800b068:	4638      	mov	r0, r7
 800b06a:	f7ff ff6d 	bl	800af48 <__ssputs_r>
 800b06e:	3001      	adds	r0, #1
 800b070:	f000 80aa 	beq.w	800b1c8 <_svfiprintf_r+0x1c8>
 800b074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b076:	445a      	add	r2, fp
 800b078:	9209      	str	r2, [sp, #36]	; 0x24
 800b07a:	f89a 3000 	ldrb.w	r3, [sl]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 80a2 	beq.w	800b1c8 <_svfiprintf_r+0x1c8>
 800b084:	2300      	movs	r3, #0
 800b086:	f04f 32ff 	mov.w	r2, #4294967295
 800b08a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b08e:	f10a 0a01 	add.w	sl, sl, #1
 800b092:	9304      	str	r3, [sp, #16]
 800b094:	9307      	str	r3, [sp, #28]
 800b096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b09a:	931a      	str	r3, [sp, #104]	; 0x68
 800b09c:	4654      	mov	r4, sl
 800b09e:	2205      	movs	r2, #5
 800b0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a4:	4851      	ldr	r0, [pc, #324]	; (800b1ec <_svfiprintf_r+0x1ec>)
 800b0a6:	f7f5 f8ab 	bl	8000200 <memchr>
 800b0aa:	9a04      	ldr	r2, [sp, #16]
 800b0ac:	b9d8      	cbnz	r0, 800b0e6 <_svfiprintf_r+0xe6>
 800b0ae:	06d0      	lsls	r0, r2, #27
 800b0b0:	bf44      	itt	mi
 800b0b2:	2320      	movmi	r3, #32
 800b0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0b8:	0711      	lsls	r1, r2, #28
 800b0ba:	bf44      	itt	mi
 800b0bc:	232b      	movmi	r3, #43	; 0x2b
 800b0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b0c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c8:	d015      	beq.n	800b0f6 <_svfiprintf_r+0xf6>
 800b0ca:	9a07      	ldr	r2, [sp, #28]
 800b0cc:	4654      	mov	r4, sl
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	f04f 0c0a 	mov.w	ip, #10
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0da:	3b30      	subs	r3, #48	; 0x30
 800b0dc:	2b09      	cmp	r3, #9
 800b0de:	d94e      	bls.n	800b17e <_svfiprintf_r+0x17e>
 800b0e0:	b1b0      	cbz	r0, 800b110 <_svfiprintf_r+0x110>
 800b0e2:	9207      	str	r2, [sp, #28]
 800b0e4:	e014      	b.n	800b110 <_svfiprintf_r+0x110>
 800b0e6:	eba0 0308 	sub.w	r3, r0, r8
 800b0ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	9304      	str	r3, [sp, #16]
 800b0f2:	46a2      	mov	sl, r4
 800b0f4:	e7d2      	b.n	800b09c <_svfiprintf_r+0x9c>
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	1d19      	adds	r1, r3, #4
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	9103      	str	r1, [sp, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	bfbb      	ittet	lt
 800b102:	425b      	neglt	r3, r3
 800b104:	f042 0202 	orrlt.w	r2, r2, #2
 800b108:	9307      	strge	r3, [sp, #28]
 800b10a:	9307      	strlt	r3, [sp, #28]
 800b10c:	bfb8      	it	lt
 800b10e:	9204      	strlt	r2, [sp, #16]
 800b110:	7823      	ldrb	r3, [r4, #0]
 800b112:	2b2e      	cmp	r3, #46	; 0x2e
 800b114:	d10c      	bne.n	800b130 <_svfiprintf_r+0x130>
 800b116:	7863      	ldrb	r3, [r4, #1]
 800b118:	2b2a      	cmp	r3, #42	; 0x2a
 800b11a:	d135      	bne.n	800b188 <_svfiprintf_r+0x188>
 800b11c:	9b03      	ldr	r3, [sp, #12]
 800b11e:	1d1a      	adds	r2, r3, #4
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	9203      	str	r2, [sp, #12]
 800b124:	2b00      	cmp	r3, #0
 800b126:	bfb8      	it	lt
 800b128:	f04f 33ff 	movlt.w	r3, #4294967295
 800b12c:	3402      	adds	r4, #2
 800b12e:	9305      	str	r3, [sp, #20]
 800b130:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b1fc <_svfiprintf_r+0x1fc>
 800b134:	7821      	ldrb	r1, [r4, #0]
 800b136:	2203      	movs	r2, #3
 800b138:	4650      	mov	r0, sl
 800b13a:	f7f5 f861 	bl	8000200 <memchr>
 800b13e:	b140      	cbz	r0, 800b152 <_svfiprintf_r+0x152>
 800b140:	2340      	movs	r3, #64	; 0x40
 800b142:	eba0 000a 	sub.w	r0, r0, sl
 800b146:	fa03 f000 	lsl.w	r0, r3, r0
 800b14a:	9b04      	ldr	r3, [sp, #16]
 800b14c:	4303      	orrs	r3, r0
 800b14e:	3401      	adds	r4, #1
 800b150:	9304      	str	r3, [sp, #16]
 800b152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b156:	4826      	ldr	r0, [pc, #152]	; (800b1f0 <_svfiprintf_r+0x1f0>)
 800b158:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b15c:	2206      	movs	r2, #6
 800b15e:	f7f5 f84f 	bl	8000200 <memchr>
 800b162:	2800      	cmp	r0, #0
 800b164:	d038      	beq.n	800b1d8 <_svfiprintf_r+0x1d8>
 800b166:	4b23      	ldr	r3, [pc, #140]	; (800b1f4 <_svfiprintf_r+0x1f4>)
 800b168:	bb1b      	cbnz	r3, 800b1b2 <_svfiprintf_r+0x1b2>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	3307      	adds	r3, #7
 800b16e:	f023 0307 	bic.w	r3, r3, #7
 800b172:	3308      	adds	r3, #8
 800b174:	9303      	str	r3, [sp, #12]
 800b176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b178:	4433      	add	r3, r6
 800b17a:	9309      	str	r3, [sp, #36]	; 0x24
 800b17c:	e767      	b.n	800b04e <_svfiprintf_r+0x4e>
 800b17e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b182:	460c      	mov	r4, r1
 800b184:	2001      	movs	r0, #1
 800b186:	e7a5      	b.n	800b0d4 <_svfiprintf_r+0xd4>
 800b188:	2300      	movs	r3, #0
 800b18a:	3401      	adds	r4, #1
 800b18c:	9305      	str	r3, [sp, #20]
 800b18e:	4619      	mov	r1, r3
 800b190:	f04f 0c0a 	mov.w	ip, #10
 800b194:	4620      	mov	r0, r4
 800b196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b19a:	3a30      	subs	r2, #48	; 0x30
 800b19c:	2a09      	cmp	r2, #9
 800b19e:	d903      	bls.n	800b1a8 <_svfiprintf_r+0x1a8>
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d0c5      	beq.n	800b130 <_svfiprintf_r+0x130>
 800b1a4:	9105      	str	r1, [sp, #20]
 800b1a6:	e7c3      	b.n	800b130 <_svfiprintf_r+0x130>
 800b1a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e7f0      	b.n	800b194 <_svfiprintf_r+0x194>
 800b1b2:	ab03      	add	r3, sp, #12
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	4b0f      	ldr	r3, [pc, #60]	; (800b1f8 <_svfiprintf_r+0x1f8>)
 800b1ba:	a904      	add	r1, sp, #16
 800b1bc:	4638      	mov	r0, r7
 800b1be:	f7fd ff1d 	bl	8008ffc <_printf_float>
 800b1c2:	1c42      	adds	r2, r0, #1
 800b1c4:	4606      	mov	r6, r0
 800b1c6:	d1d6      	bne.n	800b176 <_svfiprintf_r+0x176>
 800b1c8:	89ab      	ldrh	r3, [r5, #12]
 800b1ca:	065b      	lsls	r3, r3, #25
 800b1cc:	f53f af2c 	bmi.w	800b028 <_svfiprintf_r+0x28>
 800b1d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1d2:	b01d      	add	sp, #116	; 0x74
 800b1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d8:	ab03      	add	r3, sp, #12
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	462a      	mov	r2, r5
 800b1de:	4b06      	ldr	r3, [pc, #24]	; (800b1f8 <_svfiprintf_r+0x1f8>)
 800b1e0:	a904      	add	r1, sp, #16
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	f7fe f9ae 	bl	8009544 <_printf_i>
 800b1e8:	e7eb      	b.n	800b1c2 <_svfiprintf_r+0x1c2>
 800b1ea:	bf00      	nop
 800b1ec:	0801ff8c 	.word	0x0801ff8c
 800b1f0:	0801ff96 	.word	0x0801ff96
 800b1f4:	08008ffd 	.word	0x08008ffd
 800b1f8:	0800af49 	.word	0x0800af49
 800b1fc:	0801ff92 	.word	0x0801ff92

0800b200 <__sfputc_r>:
 800b200:	6893      	ldr	r3, [r2, #8]
 800b202:	3b01      	subs	r3, #1
 800b204:	2b00      	cmp	r3, #0
 800b206:	b410      	push	{r4}
 800b208:	6093      	str	r3, [r2, #8]
 800b20a:	da08      	bge.n	800b21e <__sfputc_r+0x1e>
 800b20c:	6994      	ldr	r4, [r2, #24]
 800b20e:	42a3      	cmp	r3, r4
 800b210:	db01      	blt.n	800b216 <__sfputc_r+0x16>
 800b212:	290a      	cmp	r1, #10
 800b214:	d103      	bne.n	800b21e <__sfputc_r+0x1e>
 800b216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b21a:	f000 b96d 	b.w	800b4f8 <__swbuf_r>
 800b21e:	6813      	ldr	r3, [r2, #0]
 800b220:	1c58      	adds	r0, r3, #1
 800b222:	6010      	str	r0, [r2, #0]
 800b224:	7019      	strb	r1, [r3, #0]
 800b226:	4608      	mov	r0, r1
 800b228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <__sfputs_r>:
 800b22e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b230:	4606      	mov	r6, r0
 800b232:	460f      	mov	r7, r1
 800b234:	4614      	mov	r4, r2
 800b236:	18d5      	adds	r5, r2, r3
 800b238:	42ac      	cmp	r4, r5
 800b23a:	d101      	bne.n	800b240 <__sfputs_r+0x12>
 800b23c:	2000      	movs	r0, #0
 800b23e:	e007      	b.n	800b250 <__sfputs_r+0x22>
 800b240:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b244:	463a      	mov	r2, r7
 800b246:	4630      	mov	r0, r6
 800b248:	f7ff ffda 	bl	800b200 <__sfputc_r>
 800b24c:	1c43      	adds	r3, r0, #1
 800b24e:	d1f3      	bne.n	800b238 <__sfputs_r+0xa>
 800b250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b254 <_vfiprintf_r>:
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	460d      	mov	r5, r1
 800b25a:	b09d      	sub	sp, #116	; 0x74
 800b25c:	4614      	mov	r4, r2
 800b25e:	4698      	mov	r8, r3
 800b260:	4606      	mov	r6, r0
 800b262:	b118      	cbz	r0, 800b26c <_vfiprintf_r+0x18>
 800b264:	6983      	ldr	r3, [r0, #24]
 800b266:	b90b      	cbnz	r3, 800b26c <_vfiprintf_r+0x18>
 800b268:	f000 fb28 	bl	800b8bc <__sinit>
 800b26c:	4b89      	ldr	r3, [pc, #548]	; (800b494 <_vfiprintf_r+0x240>)
 800b26e:	429d      	cmp	r5, r3
 800b270:	d11b      	bne.n	800b2aa <_vfiprintf_r+0x56>
 800b272:	6875      	ldr	r5, [r6, #4]
 800b274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b276:	07d9      	lsls	r1, r3, #31
 800b278:	d405      	bmi.n	800b286 <_vfiprintf_r+0x32>
 800b27a:	89ab      	ldrh	r3, [r5, #12]
 800b27c:	059a      	lsls	r2, r3, #22
 800b27e:	d402      	bmi.n	800b286 <_vfiprintf_r+0x32>
 800b280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b282:	f000 fbb9 	bl	800b9f8 <__retarget_lock_acquire_recursive>
 800b286:	89ab      	ldrh	r3, [r5, #12]
 800b288:	071b      	lsls	r3, r3, #28
 800b28a:	d501      	bpl.n	800b290 <_vfiprintf_r+0x3c>
 800b28c:	692b      	ldr	r3, [r5, #16]
 800b28e:	b9eb      	cbnz	r3, 800b2cc <_vfiprintf_r+0x78>
 800b290:	4629      	mov	r1, r5
 800b292:	4630      	mov	r0, r6
 800b294:	f000 f982 	bl	800b59c <__swsetup_r>
 800b298:	b1c0      	cbz	r0, 800b2cc <_vfiprintf_r+0x78>
 800b29a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b29c:	07dc      	lsls	r4, r3, #31
 800b29e:	d50e      	bpl.n	800b2be <_vfiprintf_r+0x6a>
 800b2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a4:	b01d      	add	sp, #116	; 0x74
 800b2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2aa:	4b7b      	ldr	r3, [pc, #492]	; (800b498 <_vfiprintf_r+0x244>)
 800b2ac:	429d      	cmp	r5, r3
 800b2ae:	d101      	bne.n	800b2b4 <_vfiprintf_r+0x60>
 800b2b0:	68b5      	ldr	r5, [r6, #8]
 800b2b2:	e7df      	b.n	800b274 <_vfiprintf_r+0x20>
 800b2b4:	4b79      	ldr	r3, [pc, #484]	; (800b49c <_vfiprintf_r+0x248>)
 800b2b6:	429d      	cmp	r5, r3
 800b2b8:	bf08      	it	eq
 800b2ba:	68f5      	ldreq	r5, [r6, #12]
 800b2bc:	e7da      	b.n	800b274 <_vfiprintf_r+0x20>
 800b2be:	89ab      	ldrh	r3, [r5, #12]
 800b2c0:	0598      	lsls	r0, r3, #22
 800b2c2:	d4ed      	bmi.n	800b2a0 <_vfiprintf_r+0x4c>
 800b2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2c6:	f000 fb98 	bl	800b9fa <__retarget_lock_release_recursive>
 800b2ca:	e7e9      	b.n	800b2a0 <_vfiprintf_r+0x4c>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d0:	2320      	movs	r3, #32
 800b2d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2da:	2330      	movs	r3, #48	; 0x30
 800b2dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b4a0 <_vfiprintf_r+0x24c>
 800b2e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2e4:	f04f 0901 	mov.w	r9, #1
 800b2e8:	4623      	mov	r3, r4
 800b2ea:	469a      	mov	sl, r3
 800b2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2f0:	b10a      	cbz	r2, 800b2f6 <_vfiprintf_r+0xa2>
 800b2f2:	2a25      	cmp	r2, #37	; 0x25
 800b2f4:	d1f9      	bne.n	800b2ea <_vfiprintf_r+0x96>
 800b2f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b2fa:	d00b      	beq.n	800b314 <_vfiprintf_r+0xc0>
 800b2fc:	465b      	mov	r3, fp
 800b2fe:	4622      	mov	r2, r4
 800b300:	4629      	mov	r1, r5
 800b302:	4630      	mov	r0, r6
 800b304:	f7ff ff93 	bl	800b22e <__sfputs_r>
 800b308:	3001      	adds	r0, #1
 800b30a:	f000 80aa 	beq.w	800b462 <_vfiprintf_r+0x20e>
 800b30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b310:	445a      	add	r2, fp
 800b312:	9209      	str	r2, [sp, #36]	; 0x24
 800b314:	f89a 3000 	ldrb.w	r3, [sl]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f000 80a2 	beq.w	800b462 <_vfiprintf_r+0x20e>
 800b31e:	2300      	movs	r3, #0
 800b320:	f04f 32ff 	mov.w	r2, #4294967295
 800b324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b328:	f10a 0a01 	add.w	sl, sl, #1
 800b32c:	9304      	str	r3, [sp, #16]
 800b32e:	9307      	str	r3, [sp, #28]
 800b330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b334:	931a      	str	r3, [sp, #104]	; 0x68
 800b336:	4654      	mov	r4, sl
 800b338:	2205      	movs	r2, #5
 800b33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b33e:	4858      	ldr	r0, [pc, #352]	; (800b4a0 <_vfiprintf_r+0x24c>)
 800b340:	f7f4 ff5e 	bl	8000200 <memchr>
 800b344:	9a04      	ldr	r2, [sp, #16]
 800b346:	b9d8      	cbnz	r0, 800b380 <_vfiprintf_r+0x12c>
 800b348:	06d1      	lsls	r1, r2, #27
 800b34a:	bf44      	itt	mi
 800b34c:	2320      	movmi	r3, #32
 800b34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b352:	0713      	lsls	r3, r2, #28
 800b354:	bf44      	itt	mi
 800b356:	232b      	movmi	r3, #43	; 0x2b
 800b358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b35c:	f89a 3000 	ldrb.w	r3, [sl]
 800b360:	2b2a      	cmp	r3, #42	; 0x2a
 800b362:	d015      	beq.n	800b390 <_vfiprintf_r+0x13c>
 800b364:	9a07      	ldr	r2, [sp, #28]
 800b366:	4654      	mov	r4, sl
 800b368:	2000      	movs	r0, #0
 800b36a:	f04f 0c0a 	mov.w	ip, #10
 800b36e:	4621      	mov	r1, r4
 800b370:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b374:	3b30      	subs	r3, #48	; 0x30
 800b376:	2b09      	cmp	r3, #9
 800b378:	d94e      	bls.n	800b418 <_vfiprintf_r+0x1c4>
 800b37a:	b1b0      	cbz	r0, 800b3aa <_vfiprintf_r+0x156>
 800b37c:	9207      	str	r2, [sp, #28]
 800b37e:	e014      	b.n	800b3aa <_vfiprintf_r+0x156>
 800b380:	eba0 0308 	sub.w	r3, r0, r8
 800b384:	fa09 f303 	lsl.w	r3, r9, r3
 800b388:	4313      	orrs	r3, r2
 800b38a:	9304      	str	r3, [sp, #16]
 800b38c:	46a2      	mov	sl, r4
 800b38e:	e7d2      	b.n	800b336 <_vfiprintf_r+0xe2>
 800b390:	9b03      	ldr	r3, [sp, #12]
 800b392:	1d19      	adds	r1, r3, #4
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	9103      	str	r1, [sp, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	bfbb      	ittet	lt
 800b39c:	425b      	neglt	r3, r3
 800b39e:	f042 0202 	orrlt.w	r2, r2, #2
 800b3a2:	9307      	strge	r3, [sp, #28]
 800b3a4:	9307      	strlt	r3, [sp, #28]
 800b3a6:	bfb8      	it	lt
 800b3a8:	9204      	strlt	r2, [sp, #16]
 800b3aa:	7823      	ldrb	r3, [r4, #0]
 800b3ac:	2b2e      	cmp	r3, #46	; 0x2e
 800b3ae:	d10c      	bne.n	800b3ca <_vfiprintf_r+0x176>
 800b3b0:	7863      	ldrb	r3, [r4, #1]
 800b3b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3b4:	d135      	bne.n	800b422 <_vfiprintf_r+0x1ce>
 800b3b6:	9b03      	ldr	r3, [sp, #12]
 800b3b8:	1d1a      	adds	r2, r3, #4
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	9203      	str	r2, [sp, #12]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	bfb8      	it	lt
 800b3c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3c6:	3402      	adds	r4, #2
 800b3c8:	9305      	str	r3, [sp, #20]
 800b3ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4b0 <_vfiprintf_r+0x25c>
 800b3ce:	7821      	ldrb	r1, [r4, #0]
 800b3d0:	2203      	movs	r2, #3
 800b3d2:	4650      	mov	r0, sl
 800b3d4:	f7f4 ff14 	bl	8000200 <memchr>
 800b3d8:	b140      	cbz	r0, 800b3ec <_vfiprintf_r+0x198>
 800b3da:	2340      	movs	r3, #64	; 0x40
 800b3dc:	eba0 000a 	sub.w	r0, r0, sl
 800b3e0:	fa03 f000 	lsl.w	r0, r3, r0
 800b3e4:	9b04      	ldr	r3, [sp, #16]
 800b3e6:	4303      	orrs	r3, r0
 800b3e8:	3401      	adds	r4, #1
 800b3ea:	9304      	str	r3, [sp, #16]
 800b3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f0:	482c      	ldr	r0, [pc, #176]	; (800b4a4 <_vfiprintf_r+0x250>)
 800b3f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3f6:	2206      	movs	r2, #6
 800b3f8:	f7f4 ff02 	bl	8000200 <memchr>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d03f      	beq.n	800b480 <_vfiprintf_r+0x22c>
 800b400:	4b29      	ldr	r3, [pc, #164]	; (800b4a8 <_vfiprintf_r+0x254>)
 800b402:	bb1b      	cbnz	r3, 800b44c <_vfiprintf_r+0x1f8>
 800b404:	9b03      	ldr	r3, [sp, #12]
 800b406:	3307      	adds	r3, #7
 800b408:	f023 0307 	bic.w	r3, r3, #7
 800b40c:	3308      	adds	r3, #8
 800b40e:	9303      	str	r3, [sp, #12]
 800b410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b412:	443b      	add	r3, r7
 800b414:	9309      	str	r3, [sp, #36]	; 0x24
 800b416:	e767      	b.n	800b2e8 <_vfiprintf_r+0x94>
 800b418:	fb0c 3202 	mla	r2, ip, r2, r3
 800b41c:	460c      	mov	r4, r1
 800b41e:	2001      	movs	r0, #1
 800b420:	e7a5      	b.n	800b36e <_vfiprintf_r+0x11a>
 800b422:	2300      	movs	r3, #0
 800b424:	3401      	adds	r4, #1
 800b426:	9305      	str	r3, [sp, #20]
 800b428:	4619      	mov	r1, r3
 800b42a:	f04f 0c0a 	mov.w	ip, #10
 800b42e:	4620      	mov	r0, r4
 800b430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b434:	3a30      	subs	r2, #48	; 0x30
 800b436:	2a09      	cmp	r2, #9
 800b438:	d903      	bls.n	800b442 <_vfiprintf_r+0x1ee>
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0c5      	beq.n	800b3ca <_vfiprintf_r+0x176>
 800b43e:	9105      	str	r1, [sp, #20]
 800b440:	e7c3      	b.n	800b3ca <_vfiprintf_r+0x176>
 800b442:	fb0c 2101 	mla	r1, ip, r1, r2
 800b446:	4604      	mov	r4, r0
 800b448:	2301      	movs	r3, #1
 800b44a:	e7f0      	b.n	800b42e <_vfiprintf_r+0x1da>
 800b44c:	ab03      	add	r3, sp, #12
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	462a      	mov	r2, r5
 800b452:	4b16      	ldr	r3, [pc, #88]	; (800b4ac <_vfiprintf_r+0x258>)
 800b454:	a904      	add	r1, sp, #16
 800b456:	4630      	mov	r0, r6
 800b458:	f7fd fdd0 	bl	8008ffc <_printf_float>
 800b45c:	4607      	mov	r7, r0
 800b45e:	1c78      	adds	r0, r7, #1
 800b460:	d1d6      	bne.n	800b410 <_vfiprintf_r+0x1bc>
 800b462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b464:	07d9      	lsls	r1, r3, #31
 800b466:	d405      	bmi.n	800b474 <_vfiprintf_r+0x220>
 800b468:	89ab      	ldrh	r3, [r5, #12]
 800b46a:	059a      	lsls	r2, r3, #22
 800b46c:	d402      	bmi.n	800b474 <_vfiprintf_r+0x220>
 800b46e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b470:	f000 fac3 	bl	800b9fa <__retarget_lock_release_recursive>
 800b474:	89ab      	ldrh	r3, [r5, #12]
 800b476:	065b      	lsls	r3, r3, #25
 800b478:	f53f af12 	bmi.w	800b2a0 <_vfiprintf_r+0x4c>
 800b47c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b47e:	e711      	b.n	800b2a4 <_vfiprintf_r+0x50>
 800b480:	ab03      	add	r3, sp, #12
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	462a      	mov	r2, r5
 800b486:	4b09      	ldr	r3, [pc, #36]	; (800b4ac <_vfiprintf_r+0x258>)
 800b488:	a904      	add	r1, sp, #16
 800b48a:	4630      	mov	r0, r6
 800b48c:	f7fe f85a 	bl	8009544 <_printf_i>
 800b490:	e7e4      	b.n	800b45c <_vfiprintf_r+0x208>
 800b492:	bf00      	nop
 800b494:	080200c0 	.word	0x080200c0
 800b498:	080200e0 	.word	0x080200e0
 800b49c:	080200a0 	.word	0x080200a0
 800b4a0:	0801ff8c 	.word	0x0801ff8c
 800b4a4:	0801ff96 	.word	0x0801ff96
 800b4a8:	08008ffd 	.word	0x08008ffd
 800b4ac:	0800b22f 	.word	0x0800b22f
 800b4b0:	0801ff92 	.word	0x0801ff92

0800b4b4 <_read_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	4d07      	ldr	r5, [pc, #28]	; (800b4d4 <_read_r+0x20>)
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	4608      	mov	r0, r1
 800b4bc:	4611      	mov	r1, r2
 800b4be:	2200      	movs	r2, #0
 800b4c0:	602a      	str	r2, [r5, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	f7f7 fc88 	bl	8002dd8 <_read>
 800b4c8:	1c43      	adds	r3, r0, #1
 800b4ca:	d102      	bne.n	800b4d2 <_read_r+0x1e>
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	b103      	cbz	r3, 800b4d2 <_read_r+0x1e>
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	200035c0 	.word	0x200035c0

0800b4d8 <_sbrk_r>:
 800b4d8:	b538      	push	{r3, r4, r5, lr}
 800b4da:	4d06      	ldr	r5, [pc, #24]	; (800b4f4 <_sbrk_r+0x1c>)
 800b4dc:	2300      	movs	r3, #0
 800b4de:	4604      	mov	r4, r0
 800b4e0:	4608      	mov	r0, r1
 800b4e2:	602b      	str	r3, [r5, #0]
 800b4e4:	f7f7 fce6 	bl	8002eb4 <_sbrk>
 800b4e8:	1c43      	adds	r3, r0, #1
 800b4ea:	d102      	bne.n	800b4f2 <_sbrk_r+0x1a>
 800b4ec:	682b      	ldr	r3, [r5, #0]
 800b4ee:	b103      	cbz	r3, 800b4f2 <_sbrk_r+0x1a>
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	200035c0 	.word	0x200035c0

0800b4f8 <__swbuf_r>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	460e      	mov	r6, r1
 800b4fc:	4614      	mov	r4, r2
 800b4fe:	4605      	mov	r5, r0
 800b500:	b118      	cbz	r0, 800b50a <__swbuf_r+0x12>
 800b502:	6983      	ldr	r3, [r0, #24]
 800b504:	b90b      	cbnz	r3, 800b50a <__swbuf_r+0x12>
 800b506:	f000 f9d9 	bl	800b8bc <__sinit>
 800b50a:	4b21      	ldr	r3, [pc, #132]	; (800b590 <__swbuf_r+0x98>)
 800b50c:	429c      	cmp	r4, r3
 800b50e:	d12b      	bne.n	800b568 <__swbuf_r+0x70>
 800b510:	686c      	ldr	r4, [r5, #4]
 800b512:	69a3      	ldr	r3, [r4, #24]
 800b514:	60a3      	str	r3, [r4, #8]
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	071a      	lsls	r2, r3, #28
 800b51a:	d52f      	bpl.n	800b57c <__swbuf_r+0x84>
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	b36b      	cbz	r3, 800b57c <__swbuf_r+0x84>
 800b520:	6923      	ldr	r3, [r4, #16]
 800b522:	6820      	ldr	r0, [r4, #0]
 800b524:	1ac0      	subs	r0, r0, r3
 800b526:	6963      	ldr	r3, [r4, #20]
 800b528:	b2f6      	uxtb	r6, r6
 800b52a:	4283      	cmp	r3, r0
 800b52c:	4637      	mov	r7, r6
 800b52e:	dc04      	bgt.n	800b53a <__swbuf_r+0x42>
 800b530:	4621      	mov	r1, r4
 800b532:	4628      	mov	r0, r5
 800b534:	f000 f92e 	bl	800b794 <_fflush_r>
 800b538:	bb30      	cbnz	r0, 800b588 <__swbuf_r+0x90>
 800b53a:	68a3      	ldr	r3, [r4, #8]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	60a3      	str	r3, [r4, #8]
 800b540:	6823      	ldr	r3, [r4, #0]
 800b542:	1c5a      	adds	r2, r3, #1
 800b544:	6022      	str	r2, [r4, #0]
 800b546:	701e      	strb	r6, [r3, #0]
 800b548:	6963      	ldr	r3, [r4, #20]
 800b54a:	3001      	adds	r0, #1
 800b54c:	4283      	cmp	r3, r0
 800b54e:	d004      	beq.n	800b55a <__swbuf_r+0x62>
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	07db      	lsls	r3, r3, #31
 800b554:	d506      	bpl.n	800b564 <__swbuf_r+0x6c>
 800b556:	2e0a      	cmp	r6, #10
 800b558:	d104      	bne.n	800b564 <__swbuf_r+0x6c>
 800b55a:	4621      	mov	r1, r4
 800b55c:	4628      	mov	r0, r5
 800b55e:	f000 f919 	bl	800b794 <_fflush_r>
 800b562:	b988      	cbnz	r0, 800b588 <__swbuf_r+0x90>
 800b564:	4638      	mov	r0, r7
 800b566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b568:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <__swbuf_r+0x9c>)
 800b56a:	429c      	cmp	r4, r3
 800b56c:	d101      	bne.n	800b572 <__swbuf_r+0x7a>
 800b56e:	68ac      	ldr	r4, [r5, #8]
 800b570:	e7cf      	b.n	800b512 <__swbuf_r+0x1a>
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <__swbuf_r+0xa0>)
 800b574:	429c      	cmp	r4, r3
 800b576:	bf08      	it	eq
 800b578:	68ec      	ldreq	r4, [r5, #12]
 800b57a:	e7ca      	b.n	800b512 <__swbuf_r+0x1a>
 800b57c:	4621      	mov	r1, r4
 800b57e:	4628      	mov	r0, r5
 800b580:	f000 f80c 	bl	800b59c <__swsetup_r>
 800b584:	2800      	cmp	r0, #0
 800b586:	d0cb      	beq.n	800b520 <__swbuf_r+0x28>
 800b588:	f04f 37ff 	mov.w	r7, #4294967295
 800b58c:	e7ea      	b.n	800b564 <__swbuf_r+0x6c>
 800b58e:	bf00      	nop
 800b590:	080200c0 	.word	0x080200c0
 800b594:	080200e0 	.word	0x080200e0
 800b598:	080200a0 	.word	0x080200a0

0800b59c <__swsetup_r>:
 800b59c:	4b32      	ldr	r3, [pc, #200]	; (800b668 <__swsetup_r+0xcc>)
 800b59e:	b570      	push	{r4, r5, r6, lr}
 800b5a0:	681d      	ldr	r5, [r3, #0]
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	b125      	cbz	r5, 800b5b2 <__swsetup_r+0x16>
 800b5a8:	69ab      	ldr	r3, [r5, #24]
 800b5aa:	b913      	cbnz	r3, 800b5b2 <__swsetup_r+0x16>
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f000 f985 	bl	800b8bc <__sinit>
 800b5b2:	4b2e      	ldr	r3, [pc, #184]	; (800b66c <__swsetup_r+0xd0>)
 800b5b4:	429c      	cmp	r4, r3
 800b5b6:	d10f      	bne.n	800b5d8 <__swsetup_r+0x3c>
 800b5b8:	686c      	ldr	r4, [r5, #4]
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5c0:	0719      	lsls	r1, r3, #28
 800b5c2:	d42c      	bmi.n	800b61e <__swsetup_r+0x82>
 800b5c4:	06dd      	lsls	r5, r3, #27
 800b5c6:	d411      	bmi.n	800b5ec <__swsetup_r+0x50>
 800b5c8:	2309      	movs	r3, #9
 800b5ca:	6033      	str	r3, [r6, #0]
 800b5cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d6:	e03e      	b.n	800b656 <__swsetup_r+0xba>
 800b5d8:	4b25      	ldr	r3, [pc, #148]	; (800b670 <__swsetup_r+0xd4>)
 800b5da:	429c      	cmp	r4, r3
 800b5dc:	d101      	bne.n	800b5e2 <__swsetup_r+0x46>
 800b5de:	68ac      	ldr	r4, [r5, #8]
 800b5e0:	e7eb      	b.n	800b5ba <__swsetup_r+0x1e>
 800b5e2:	4b24      	ldr	r3, [pc, #144]	; (800b674 <__swsetup_r+0xd8>)
 800b5e4:	429c      	cmp	r4, r3
 800b5e6:	bf08      	it	eq
 800b5e8:	68ec      	ldreq	r4, [r5, #12]
 800b5ea:	e7e6      	b.n	800b5ba <__swsetup_r+0x1e>
 800b5ec:	0758      	lsls	r0, r3, #29
 800b5ee:	d512      	bpl.n	800b616 <__swsetup_r+0x7a>
 800b5f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5f2:	b141      	cbz	r1, 800b606 <__swsetup_r+0x6a>
 800b5f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5f8:	4299      	cmp	r1, r3
 800b5fa:	d002      	beq.n	800b602 <__swsetup_r+0x66>
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f7ff fbc3 	bl	800ad88 <_free_r>
 800b602:	2300      	movs	r3, #0
 800b604:	6363      	str	r3, [r4, #52]	; 0x34
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b60c:	81a3      	strh	r3, [r4, #12]
 800b60e:	2300      	movs	r3, #0
 800b610:	6063      	str	r3, [r4, #4]
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	f043 0308 	orr.w	r3, r3, #8
 800b61c:	81a3      	strh	r3, [r4, #12]
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	b94b      	cbnz	r3, 800b636 <__swsetup_r+0x9a>
 800b622:	89a3      	ldrh	r3, [r4, #12]
 800b624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b62c:	d003      	beq.n	800b636 <__swsetup_r+0x9a>
 800b62e:	4621      	mov	r1, r4
 800b630:	4630      	mov	r0, r6
 800b632:	f000 fa09 	bl	800ba48 <__smakebuf_r>
 800b636:	89a0      	ldrh	r0, [r4, #12]
 800b638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b63c:	f010 0301 	ands.w	r3, r0, #1
 800b640:	d00a      	beq.n	800b658 <__swsetup_r+0xbc>
 800b642:	2300      	movs	r3, #0
 800b644:	60a3      	str	r3, [r4, #8]
 800b646:	6963      	ldr	r3, [r4, #20]
 800b648:	425b      	negs	r3, r3
 800b64a:	61a3      	str	r3, [r4, #24]
 800b64c:	6923      	ldr	r3, [r4, #16]
 800b64e:	b943      	cbnz	r3, 800b662 <__swsetup_r+0xc6>
 800b650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b654:	d1ba      	bne.n	800b5cc <__swsetup_r+0x30>
 800b656:	bd70      	pop	{r4, r5, r6, pc}
 800b658:	0781      	lsls	r1, r0, #30
 800b65a:	bf58      	it	pl
 800b65c:	6963      	ldrpl	r3, [r4, #20]
 800b65e:	60a3      	str	r3, [r4, #8]
 800b660:	e7f4      	b.n	800b64c <__swsetup_r+0xb0>
 800b662:	2000      	movs	r0, #0
 800b664:	e7f7      	b.n	800b656 <__swsetup_r+0xba>
 800b666:	bf00      	nop
 800b668:	20000168 	.word	0x20000168
 800b66c:	080200c0 	.word	0x080200c0
 800b670:	080200e0 	.word	0x080200e0
 800b674:	080200a0 	.word	0x080200a0

0800b678 <abort>:
 800b678:	b508      	push	{r3, lr}
 800b67a:	2006      	movs	r0, #6
 800b67c:	f000 fab4 	bl	800bbe8 <raise>
 800b680:	2001      	movs	r0, #1
 800b682:	f7f7 fb9f 	bl	8002dc4 <_exit>
	...

0800b688 <__sflush_r>:
 800b688:	898a      	ldrh	r2, [r1, #12]
 800b68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68e:	4605      	mov	r5, r0
 800b690:	0710      	lsls	r0, r2, #28
 800b692:	460c      	mov	r4, r1
 800b694:	d458      	bmi.n	800b748 <__sflush_r+0xc0>
 800b696:	684b      	ldr	r3, [r1, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	dc05      	bgt.n	800b6a8 <__sflush_r+0x20>
 800b69c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	dc02      	bgt.n	800b6a8 <__sflush_r+0x20>
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6aa:	2e00      	cmp	r6, #0
 800b6ac:	d0f9      	beq.n	800b6a2 <__sflush_r+0x1a>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6b4:	682f      	ldr	r7, [r5, #0]
 800b6b6:	602b      	str	r3, [r5, #0]
 800b6b8:	d032      	beq.n	800b720 <__sflush_r+0x98>
 800b6ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	075a      	lsls	r2, r3, #29
 800b6c0:	d505      	bpl.n	800b6ce <__sflush_r+0x46>
 800b6c2:	6863      	ldr	r3, [r4, #4]
 800b6c4:	1ac0      	subs	r0, r0, r3
 800b6c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6c8:	b10b      	cbz	r3, 800b6ce <__sflush_r+0x46>
 800b6ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6cc:	1ac0      	subs	r0, r0, r3
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6d4:	6a21      	ldr	r1, [r4, #32]
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	47b0      	blx	r6
 800b6da:	1c43      	adds	r3, r0, #1
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	d106      	bne.n	800b6ee <__sflush_r+0x66>
 800b6e0:	6829      	ldr	r1, [r5, #0]
 800b6e2:	291d      	cmp	r1, #29
 800b6e4:	d82c      	bhi.n	800b740 <__sflush_r+0xb8>
 800b6e6:	4a2a      	ldr	r2, [pc, #168]	; (800b790 <__sflush_r+0x108>)
 800b6e8:	40ca      	lsrs	r2, r1
 800b6ea:	07d6      	lsls	r6, r2, #31
 800b6ec:	d528      	bpl.n	800b740 <__sflush_r+0xb8>
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	6062      	str	r2, [r4, #4]
 800b6f2:	04d9      	lsls	r1, r3, #19
 800b6f4:	6922      	ldr	r2, [r4, #16]
 800b6f6:	6022      	str	r2, [r4, #0]
 800b6f8:	d504      	bpl.n	800b704 <__sflush_r+0x7c>
 800b6fa:	1c42      	adds	r2, r0, #1
 800b6fc:	d101      	bne.n	800b702 <__sflush_r+0x7a>
 800b6fe:	682b      	ldr	r3, [r5, #0]
 800b700:	b903      	cbnz	r3, 800b704 <__sflush_r+0x7c>
 800b702:	6560      	str	r0, [r4, #84]	; 0x54
 800b704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b706:	602f      	str	r7, [r5, #0]
 800b708:	2900      	cmp	r1, #0
 800b70a:	d0ca      	beq.n	800b6a2 <__sflush_r+0x1a>
 800b70c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b710:	4299      	cmp	r1, r3
 800b712:	d002      	beq.n	800b71a <__sflush_r+0x92>
 800b714:	4628      	mov	r0, r5
 800b716:	f7ff fb37 	bl	800ad88 <_free_r>
 800b71a:	2000      	movs	r0, #0
 800b71c:	6360      	str	r0, [r4, #52]	; 0x34
 800b71e:	e7c1      	b.n	800b6a4 <__sflush_r+0x1c>
 800b720:	6a21      	ldr	r1, [r4, #32]
 800b722:	2301      	movs	r3, #1
 800b724:	4628      	mov	r0, r5
 800b726:	47b0      	blx	r6
 800b728:	1c41      	adds	r1, r0, #1
 800b72a:	d1c7      	bne.n	800b6bc <__sflush_r+0x34>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d0c4      	beq.n	800b6bc <__sflush_r+0x34>
 800b732:	2b1d      	cmp	r3, #29
 800b734:	d001      	beq.n	800b73a <__sflush_r+0xb2>
 800b736:	2b16      	cmp	r3, #22
 800b738:	d101      	bne.n	800b73e <__sflush_r+0xb6>
 800b73a:	602f      	str	r7, [r5, #0]
 800b73c:	e7b1      	b.n	800b6a2 <__sflush_r+0x1a>
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b744:	81a3      	strh	r3, [r4, #12]
 800b746:	e7ad      	b.n	800b6a4 <__sflush_r+0x1c>
 800b748:	690f      	ldr	r7, [r1, #16]
 800b74a:	2f00      	cmp	r7, #0
 800b74c:	d0a9      	beq.n	800b6a2 <__sflush_r+0x1a>
 800b74e:	0793      	lsls	r3, r2, #30
 800b750:	680e      	ldr	r6, [r1, #0]
 800b752:	bf08      	it	eq
 800b754:	694b      	ldreq	r3, [r1, #20]
 800b756:	600f      	str	r7, [r1, #0]
 800b758:	bf18      	it	ne
 800b75a:	2300      	movne	r3, #0
 800b75c:	eba6 0807 	sub.w	r8, r6, r7
 800b760:	608b      	str	r3, [r1, #8]
 800b762:	f1b8 0f00 	cmp.w	r8, #0
 800b766:	dd9c      	ble.n	800b6a2 <__sflush_r+0x1a>
 800b768:	6a21      	ldr	r1, [r4, #32]
 800b76a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b76c:	4643      	mov	r3, r8
 800b76e:	463a      	mov	r2, r7
 800b770:	4628      	mov	r0, r5
 800b772:	47b0      	blx	r6
 800b774:	2800      	cmp	r0, #0
 800b776:	dc06      	bgt.n	800b786 <__sflush_r+0xfe>
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b77e:	81a3      	strh	r3, [r4, #12]
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	e78e      	b.n	800b6a4 <__sflush_r+0x1c>
 800b786:	4407      	add	r7, r0
 800b788:	eba8 0800 	sub.w	r8, r8, r0
 800b78c:	e7e9      	b.n	800b762 <__sflush_r+0xda>
 800b78e:	bf00      	nop
 800b790:	20400001 	.word	0x20400001

0800b794 <_fflush_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	690b      	ldr	r3, [r1, #16]
 800b798:	4605      	mov	r5, r0
 800b79a:	460c      	mov	r4, r1
 800b79c:	b913      	cbnz	r3, 800b7a4 <_fflush_r+0x10>
 800b79e:	2500      	movs	r5, #0
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}
 800b7a4:	b118      	cbz	r0, 800b7ae <_fflush_r+0x1a>
 800b7a6:	6983      	ldr	r3, [r0, #24]
 800b7a8:	b90b      	cbnz	r3, 800b7ae <_fflush_r+0x1a>
 800b7aa:	f000 f887 	bl	800b8bc <__sinit>
 800b7ae:	4b14      	ldr	r3, [pc, #80]	; (800b800 <_fflush_r+0x6c>)
 800b7b0:	429c      	cmp	r4, r3
 800b7b2:	d11b      	bne.n	800b7ec <_fflush_r+0x58>
 800b7b4:	686c      	ldr	r4, [r5, #4]
 800b7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d0ef      	beq.n	800b79e <_fflush_r+0xa>
 800b7be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7c0:	07d0      	lsls	r0, r2, #31
 800b7c2:	d404      	bmi.n	800b7ce <_fflush_r+0x3a>
 800b7c4:	0599      	lsls	r1, r3, #22
 800b7c6:	d402      	bmi.n	800b7ce <_fflush_r+0x3a>
 800b7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ca:	f000 f915 	bl	800b9f8 <__retarget_lock_acquire_recursive>
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	f7ff ff59 	bl	800b688 <__sflush_r>
 800b7d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7d8:	07da      	lsls	r2, r3, #31
 800b7da:	4605      	mov	r5, r0
 800b7dc:	d4e0      	bmi.n	800b7a0 <_fflush_r+0xc>
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	059b      	lsls	r3, r3, #22
 800b7e2:	d4dd      	bmi.n	800b7a0 <_fflush_r+0xc>
 800b7e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7e6:	f000 f908 	bl	800b9fa <__retarget_lock_release_recursive>
 800b7ea:	e7d9      	b.n	800b7a0 <_fflush_r+0xc>
 800b7ec:	4b05      	ldr	r3, [pc, #20]	; (800b804 <_fflush_r+0x70>)
 800b7ee:	429c      	cmp	r4, r3
 800b7f0:	d101      	bne.n	800b7f6 <_fflush_r+0x62>
 800b7f2:	68ac      	ldr	r4, [r5, #8]
 800b7f4:	e7df      	b.n	800b7b6 <_fflush_r+0x22>
 800b7f6:	4b04      	ldr	r3, [pc, #16]	; (800b808 <_fflush_r+0x74>)
 800b7f8:	429c      	cmp	r4, r3
 800b7fa:	bf08      	it	eq
 800b7fc:	68ec      	ldreq	r4, [r5, #12]
 800b7fe:	e7da      	b.n	800b7b6 <_fflush_r+0x22>
 800b800:	080200c0 	.word	0x080200c0
 800b804:	080200e0 	.word	0x080200e0
 800b808:	080200a0 	.word	0x080200a0

0800b80c <std>:
 800b80c:	2300      	movs	r3, #0
 800b80e:	b510      	push	{r4, lr}
 800b810:	4604      	mov	r4, r0
 800b812:	e9c0 3300 	strd	r3, r3, [r0]
 800b816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b81a:	6083      	str	r3, [r0, #8]
 800b81c:	8181      	strh	r1, [r0, #12]
 800b81e:	6643      	str	r3, [r0, #100]	; 0x64
 800b820:	81c2      	strh	r2, [r0, #14]
 800b822:	6183      	str	r3, [r0, #24]
 800b824:	4619      	mov	r1, r3
 800b826:	2208      	movs	r2, #8
 800b828:	305c      	adds	r0, #92	; 0x5c
 800b82a:	f7fd fb3f 	bl	8008eac <memset>
 800b82e:	4b05      	ldr	r3, [pc, #20]	; (800b844 <std+0x38>)
 800b830:	6263      	str	r3, [r4, #36]	; 0x24
 800b832:	4b05      	ldr	r3, [pc, #20]	; (800b848 <std+0x3c>)
 800b834:	62a3      	str	r3, [r4, #40]	; 0x28
 800b836:	4b05      	ldr	r3, [pc, #20]	; (800b84c <std+0x40>)
 800b838:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b83a:	4b05      	ldr	r3, [pc, #20]	; (800b850 <std+0x44>)
 800b83c:	6224      	str	r4, [r4, #32]
 800b83e:	6323      	str	r3, [r4, #48]	; 0x30
 800b840:	bd10      	pop	{r4, pc}
 800b842:	bf00      	nop
 800b844:	080097d1 	.word	0x080097d1
 800b848:	080097f3 	.word	0x080097f3
 800b84c:	0800982b 	.word	0x0800982b
 800b850:	0800984f 	.word	0x0800984f

0800b854 <_cleanup_r>:
 800b854:	4901      	ldr	r1, [pc, #4]	; (800b85c <_cleanup_r+0x8>)
 800b856:	f000 b8af 	b.w	800b9b8 <_fwalk_reent>
 800b85a:	bf00      	nop
 800b85c:	0800b795 	.word	0x0800b795

0800b860 <__sfmoreglue>:
 800b860:	b570      	push	{r4, r5, r6, lr}
 800b862:	2268      	movs	r2, #104	; 0x68
 800b864:	1e4d      	subs	r5, r1, #1
 800b866:	4355      	muls	r5, r2
 800b868:	460e      	mov	r6, r1
 800b86a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b86e:	f7ff faf7 	bl	800ae60 <_malloc_r>
 800b872:	4604      	mov	r4, r0
 800b874:	b140      	cbz	r0, 800b888 <__sfmoreglue+0x28>
 800b876:	2100      	movs	r1, #0
 800b878:	e9c0 1600 	strd	r1, r6, [r0]
 800b87c:	300c      	adds	r0, #12
 800b87e:	60a0      	str	r0, [r4, #8]
 800b880:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b884:	f7fd fb12 	bl	8008eac <memset>
 800b888:	4620      	mov	r0, r4
 800b88a:	bd70      	pop	{r4, r5, r6, pc}

0800b88c <__sfp_lock_acquire>:
 800b88c:	4801      	ldr	r0, [pc, #4]	; (800b894 <__sfp_lock_acquire+0x8>)
 800b88e:	f000 b8b3 	b.w	800b9f8 <__retarget_lock_acquire_recursive>
 800b892:	bf00      	nop
 800b894:	200035c5 	.word	0x200035c5

0800b898 <__sfp_lock_release>:
 800b898:	4801      	ldr	r0, [pc, #4]	; (800b8a0 <__sfp_lock_release+0x8>)
 800b89a:	f000 b8ae 	b.w	800b9fa <__retarget_lock_release_recursive>
 800b89e:	bf00      	nop
 800b8a0:	200035c5 	.word	0x200035c5

0800b8a4 <__sinit_lock_acquire>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	; (800b8ac <__sinit_lock_acquire+0x8>)
 800b8a6:	f000 b8a7 	b.w	800b9f8 <__retarget_lock_acquire_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	200035c6 	.word	0x200035c6

0800b8b0 <__sinit_lock_release>:
 800b8b0:	4801      	ldr	r0, [pc, #4]	; (800b8b8 <__sinit_lock_release+0x8>)
 800b8b2:	f000 b8a2 	b.w	800b9fa <__retarget_lock_release_recursive>
 800b8b6:	bf00      	nop
 800b8b8:	200035c6 	.word	0x200035c6

0800b8bc <__sinit>:
 800b8bc:	b510      	push	{r4, lr}
 800b8be:	4604      	mov	r4, r0
 800b8c0:	f7ff fff0 	bl	800b8a4 <__sinit_lock_acquire>
 800b8c4:	69a3      	ldr	r3, [r4, #24]
 800b8c6:	b11b      	cbz	r3, 800b8d0 <__sinit+0x14>
 800b8c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8cc:	f7ff bff0 	b.w	800b8b0 <__sinit_lock_release>
 800b8d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8d4:	6523      	str	r3, [r4, #80]	; 0x50
 800b8d6:	4b13      	ldr	r3, [pc, #76]	; (800b924 <__sinit+0x68>)
 800b8d8:	4a13      	ldr	r2, [pc, #76]	; (800b928 <__sinit+0x6c>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8de:	42a3      	cmp	r3, r4
 800b8e0:	bf04      	itt	eq
 800b8e2:	2301      	moveq	r3, #1
 800b8e4:	61a3      	streq	r3, [r4, #24]
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f000 f820 	bl	800b92c <__sfp>
 800b8ec:	6060      	str	r0, [r4, #4]
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f000 f81c 	bl	800b92c <__sfp>
 800b8f4:	60a0      	str	r0, [r4, #8]
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 f818 	bl	800b92c <__sfp>
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	60e0      	str	r0, [r4, #12]
 800b900:	2104      	movs	r1, #4
 800b902:	6860      	ldr	r0, [r4, #4]
 800b904:	f7ff ff82 	bl	800b80c <std>
 800b908:	68a0      	ldr	r0, [r4, #8]
 800b90a:	2201      	movs	r2, #1
 800b90c:	2109      	movs	r1, #9
 800b90e:	f7ff ff7d 	bl	800b80c <std>
 800b912:	68e0      	ldr	r0, [r4, #12]
 800b914:	2202      	movs	r2, #2
 800b916:	2112      	movs	r1, #18
 800b918:	f7ff ff78 	bl	800b80c <std>
 800b91c:	2301      	movs	r3, #1
 800b91e:	61a3      	str	r3, [r4, #24]
 800b920:	e7d2      	b.n	800b8c8 <__sinit+0xc>
 800b922:	bf00      	nop
 800b924:	0801fd30 	.word	0x0801fd30
 800b928:	0800b855 	.word	0x0800b855

0800b92c <__sfp>:
 800b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92e:	4607      	mov	r7, r0
 800b930:	f7ff ffac 	bl	800b88c <__sfp_lock_acquire>
 800b934:	4b1e      	ldr	r3, [pc, #120]	; (800b9b0 <__sfp+0x84>)
 800b936:	681e      	ldr	r6, [r3, #0]
 800b938:	69b3      	ldr	r3, [r6, #24]
 800b93a:	b913      	cbnz	r3, 800b942 <__sfp+0x16>
 800b93c:	4630      	mov	r0, r6
 800b93e:	f7ff ffbd 	bl	800b8bc <__sinit>
 800b942:	3648      	adds	r6, #72	; 0x48
 800b944:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b948:	3b01      	subs	r3, #1
 800b94a:	d503      	bpl.n	800b954 <__sfp+0x28>
 800b94c:	6833      	ldr	r3, [r6, #0]
 800b94e:	b30b      	cbz	r3, 800b994 <__sfp+0x68>
 800b950:	6836      	ldr	r6, [r6, #0]
 800b952:	e7f7      	b.n	800b944 <__sfp+0x18>
 800b954:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b958:	b9d5      	cbnz	r5, 800b990 <__sfp+0x64>
 800b95a:	4b16      	ldr	r3, [pc, #88]	; (800b9b4 <__sfp+0x88>)
 800b95c:	60e3      	str	r3, [r4, #12]
 800b95e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b962:	6665      	str	r5, [r4, #100]	; 0x64
 800b964:	f000 f847 	bl	800b9f6 <__retarget_lock_init_recursive>
 800b968:	f7ff ff96 	bl	800b898 <__sfp_lock_release>
 800b96c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b970:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b974:	6025      	str	r5, [r4, #0]
 800b976:	61a5      	str	r5, [r4, #24]
 800b978:	2208      	movs	r2, #8
 800b97a:	4629      	mov	r1, r5
 800b97c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b980:	f7fd fa94 	bl	8008eac <memset>
 800b984:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b988:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b98c:	4620      	mov	r0, r4
 800b98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b990:	3468      	adds	r4, #104	; 0x68
 800b992:	e7d9      	b.n	800b948 <__sfp+0x1c>
 800b994:	2104      	movs	r1, #4
 800b996:	4638      	mov	r0, r7
 800b998:	f7ff ff62 	bl	800b860 <__sfmoreglue>
 800b99c:	4604      	mov	r4, r0
 800b99e:	6030      	str	r0, [r6, #0]
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	d1d5      	bne.n	800b950 <__sfp+0x24>
 800b9a4:	f7ff ff78 	bl	800b898 <__sfp_lock_release>
 800b9a8:	230c      	movs	r3, #12
 800b9aa:	603b      	str	r3, [r7, #0]
 800b9ac:	e7ee      	b.n	800b98c <__sfp+0x60>
 800b9ae:	bf00      	nop
 800b9b0:	0801fd30 	.word	0x0801fd30
 800b9b4:	ffff0001 	.word	0xffff0001

0800b9b8 <_fwalk_reent>:
 800b9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9bc:	4606      	mov	r6, r0
 800b9be:	4688      	mov	r8, r1
 800b9c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9c4:	2700      	movs	r7, #0
 800b9c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9ca:	f1b9 0901 	subs.w	r9, r9, #1
 800b9ce:	d505      	bpl.n	800b9dc <_fwalk_reent+0x24>
 800b9d0:	6824      	ldr	r4, [r4, #0]
 800b9d2:	2c00      	cmp	r4, #0
 800b9d4:	d1f7      	bne.n	800b9c6 <_fwalk_reent+0xe>
 800b9d6:	4638      	mov	r0, r7
 800b9d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9dc:	89ab      	ldrh	r3, [r5, #12]
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d907      	bls.n	800b9f2 <_fwalk_reent+0x3a>
 800b9e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	d003      	beq.n	800b9f2 <_fwalk_reent+0x3a>
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	47c0      	blx	r8
 800b9f0:	4307      	orrs	r7, r0
 800b9f2:	3568      	adds	r5, #104	; 0x68
 800b9f4:	e7e9      	b.n	800b9ca <_fwalk_reent+0x12>

0800b9f6 <__retarget_lock_init_recursive>:
 800b9f6:	4770      	bx	lr

0800b9f8 <__retarget_lock_acquire_recursive>:
 800b9f8:	4770      	bx	lr

0800b9fa <__retarget_lock_release_recursive>:
 800b9fa:	4770      	bx	lr

0800b9fc <__swhatbuf_r>:
 800b9fc:	b570      	push	{r4, r5, r6, lr}
 800b9fe:	460e      	mov	r6, r1
 800ba00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba04:	2900      	cmp	r1, #0
 800ba06:	b096      	sub	sp, #88	; 0x58
 800ba08:	4614      	mov	r4, r2
 800ba0a:	461d      	mov	r5, r3
 800ba0c:	da08      	bge.n	800ba20 <__swhatbuf_r+0x24>
 800ba0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	602a      	str	r2, [r5, #0]
 800ba16:	061a      	lsls	r2, r3, #24
 800ba18:	d410      	bmi.n	800ba3c <__swhatbuf_r+0x40>
 800ba1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba1e:	e00e      	b.n	800ba3e <__swhatbuf_r+0x42>
 800ba20:	466a      	mov	r2, sp
 800ba22:	f000 f90b 	bl	800bc3c <_fstat_r>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	dbf1      	blt.n	800ba0e <__swhatbuf_r+0x12>
 800ba2a:	9a01      	ldr	r2, [sp, #4]
 800ba2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba34:	425a      	negs	r2, r3
 800ba36:	415a      	adcs	r2, r3
 800ba38:	602a      	str	r2, [r5, #0]
 800ba3a:	e7ee      	b.n	800ba1a <__swhatbuf_r+0x1e>
 800ba3c:	2340      	movs	r3, #64	; 0x40
 800ba3e:	2000      	movs	r0, #0
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	b016      	add	sp, #88	; 0x58
 800ba44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba48 <__smakebuf_r>:
 800ba48:	898b      	ldrh	r3, [r1, #12]
 800ba4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba4c:	079d      	lsls	r5, r3, #30
 800ba4e:	4606      	mov	r6, r0
 800ba50:	460c      	mov	r4, r1
 800ba52:	d507      	bpl.n	800ba64 <__smakebuf_r+0x1c>
 800ba54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	6123      	str	r3, [r4, #16]
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	6163      	str	r3, [r4, #20]
 800ba60:	b002      	add	sp, #8
 800ba62:	bd70      	pop	{r4, r5, r6, pc}
 800ba64:	ab01      	add	r3, sp, #4
 800ba66:	466a      	mov	r2, sp
 800ba68:	f7ff ffc8 	bl	800b9fc <__swhatbuf_r>
 800ba6c:	9900      	ldr	r1, [sp, #0]
 800ba6e:	4605      	mov	r5, r0
 800ba70:	4630      	mov	r0, r6
 800ba72:	f7ff f9f5 	bl	800ae60 <_malloc_r>
 800ba76:	b948      	cbnz	r0, 800ba8c <__smakebuf_r+0x44>
 800ba78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba7c:	059a      	lsls	r2, r3, #22
 800ba7e:	d4ef      	bmi.n	800ba60 <__smakebuf_r+0x18>
 800ba80:	f023 0303 	bic.w	r3, r3, #3
 800ba84:	f043 0302 	orr.w	r3, r3, #2
 800ba88:	81a3      	strh	r3, [r4, #12]
 800ba8a:	e7e3      	b.n	800ba54 <__smakebuf_r+0xc>
 800ba8c:	4b0d      	ldr	r3, [pc, #52]	; (800bac4 <__smakebuf_r+0x7c>)
 800ba8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	6020      	str	r0, [r4, #0]
 800ba94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba98:	81a3      	strh	r3, [r4, #12]
 800ba9a:	9b00      	ldr	r3, [sp, #0]
 800ba9c:	6163      	str	r3, [r4, #20]
 800ba9e:	9b01      	ldr	r3, [sp, #4]
 800baa0:	6120      	str	r0, [r4, #16]
 800baa2:	b15b      	cbz	r3, 800babc <__smakebuf_r+0x74>
 800baa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baa8:	4630      	mov	r0, r6
 800baaa:	f000 f8d9 	bl	800bc60 <_isatty_r>
 800baae:	b128      	cbz	r0, 800babc <__smakebuf_r+0x74>
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	f023 0303 	bic.w	r3, r3, #3
 800bab6:	f043 0301 	orr.w	r3, r3, #1
 800baba:	81a3      	strh	r3, [r4, #12]
 800babc:	89a0      	ldrh	r0, [r4, #12]
 800babe:	4305      	orrs	r5, r0
 800bac0:	81a5      	strh	r5, [r4, #12]
 800bac2:	e7cd      	b.n	800ba60 <__smakebuf_r+0x18>
 800bac4:	0800b855 	.word	0x0800b855

0800bac8 <__ascii_mbtowc>:
 800bac8:	b082      	sub	sp, #8
 800baca:	b901      	cbnz	r1, 800bace <__ascii_mbtowc+0x6>
 800bacc:	a901      	add	r1, sp, #4
 800bace:	b142      	cbz	r2, 800bae2 <__ascii_mbtowc+0x1a>
 800bad0:	b14b      	cbz	r3, 800bae6 <__ascii_mbtowc+0x1e>
 800bad2:	7813      	ldrb	r3, [r2, #0]
 800bad4:	600b      	str	r3, [r1, #0]
 800bad6:	7812      	ldrb	r2, [r2, #0]
 800bad8:	1e10      	subs	r0, r2, #0
 800bada:	bf18      	it	ne
 800badc:	2001      	movne	r0, #1
 800bade:	b002      	add	sp, #8
 800bae0:	4770      	bx	lr
 800bae2:	4610      	mov	r0, r2
 800bae4:	e7fb      	b.n	800bade <__ascii_mbtowc+0x16>
 800bae6:	f06f 0001 	mvn.w	r0, #1
 800baea:	e7f8      	b.n	800bade <__ascii_mbtowc+0x16>

0800baec <memmove>:
 800baec:	4288      	cmp	r0, r1
 800baee:	b510      	push	{r4, lr}
 800baf0:	eb01 0402 	add.w	r4, r1, r2
 800baf4:	d902      	bls.n	800bafc <memmove+0x10>
 800baf6:	4284      	cmp	r4, r0
 800baf8:	4623      	mov	r3, r4
 800bafa:	d807      	bhi.n	800bb0c <memmove+0x20>
 800bafc:	1e43      	subs	r3, r0, #1
 800bafe:	42a1      	cmp	r1, r4
 800bb00:	d008      	beq.n	800bb14 <memmove+0x28>
 800bb02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb0a:	e7f8      	b.n	800bafe <memmove+0x12>
 800bb0c:	4402      	add	r2, r0
 800bb0e:	4601      	mov	r1, r0
 800bb10:	428a      	cmp	r2, r1
 800bb12:	d100      	bne.n	800bb16 <memmove+0x2a>
 800bb14:	bd10      	pop	{r4, pc}
 800bb16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb1e:	e7f7      	b.n	800bb10 <memmove+0x24>

0800bb20 <__malloc_lock>:
 800bb20:	4801      	ldr	r0, [pc, #4]	; (800bb28 <__malloc_lock+0x8>)
 800bb22:	f7ff bf69 	b.w	800b9f8 <__retarget_lock_acquire_recursive>
 800bb26:	bf00      	nop
 800bb28:	200035c4 	.word	0x200035c4

0800bb2c <__malloc_unlock>:
 800bb2c:	4801      	ldr	r0, [pc, #4]	; (800bb34 <__malloc_unlock+0x8>)
 800bb2e:	f7ff bf64 	b.w	800b9fa <__retarget_lock_release_recursive>
 800bb32:	bf00      	nop
 800bb34:	200035c4 	.word	0x200035c4

0800bb38 <_realloc_r>:
 800bb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3c:	4680      	mov	r8, r0
 800bb3e:	4614      	mov	r4, r2
 800bb40:	460e      	mov	r6, r1
 800bb42:	b921      	cbnz	r1, 800bb4e <_realloc_r+0x16>
 800bb44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb48:	4611      	mov	r1, r2
 800bb4a:	f7ff b989 	b.w	800ae60 <_malloc_r>
 800bb4e:	b92a      	cbnz	r2, 800bb5c <_realloc_r+0x24>
 800bb50:	f7ff f91a 	bl	800ad88 <_free_r>
 800bb54:	4625      	mov	r5, r4
 800bb56:	4628      	mov	r0, r5
 800bb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb5c:	f000 f890 	bl	800bc80 <_malloc_usable_size_r>
 800bb60:	4284      	cmp	r4, r0
 800bb62:	4607      	mov	r7, r0
 800bb64:	d802      	bhi.n	800bb6c <_realloc_r+0x34>
 800bb66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb6a:	d812      	bhi.n	800bb92 <_realloc_r+0x5a>
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	4640      	mov	r0, r8
 800bb70:	f7ff f976 	bl	800ae60 <_malloc_r>
 800bb74:	4605      	mov	r5, r0
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d0ed      	beq.n	800bb56 <_realloc_r+0x1e>
 800bb7a:	42bc      	cmp	r4, r7
 800bb7c:	4622      	mov	r2, r4
 800bb7e:	4631      	mov	r1, r6
 800bb80:	bf28      	it	cs
 800bb82:	463a      	movcs	r2, r7
 800bb84:	f7fd f984 	bl	8008e90 <memcpy>
 800bb88:	4631      	mov	r1, r6
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	f7ff f8fc 	bl	800ad88 <_free_r>
 800bb90:	e7e1      	b.n	800bb56 <_realloc_r+0x1e>
 800bb92:	4635      	mov	r5, r6
 800bb94:	e7df      	b.n	800bb56 <_realloc_r+0x1e>

0800bb96 <_raise_r>:
 800bb96:	291f      	cmp	r1, #31
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	460d      	mov	r5, r1
 800bb9e:	d904      	bls.n	800bbaa <_raise_r+0x14>
 800bba0:	2316      	movs	r3, #22
 800bba2:	6003      	str	r3, [r0, #0]
 800bba4:	f04f 30ff 	mov.w	r0, #4294967295
 800bba8:	bd38      	pop	{r3, r4, r5, pc}
 800bbaa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbac:	b112      	cbz	r2, 800bbb4 <_raise_r+0x1e>
 800bbae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbb2:	b94b      	cbnz	r3, 800bbc8 <_raise_r+0x32>
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f000 f831 	bl	800bc1c <_getpid_r>
 800bbba:	462a      	mov	r2, r5
 800bbbc:	4601      	mov	r1, r0
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbc4:	f000 b818 	b.w	800bbf8 <_kill_r>
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d00a      	beq.n	800bbe2 <_raise_r+0x4c>
 800bbcc:	1c59      	adds	r1, r3, #1
 800bbce:	d103      	bne.n	800bbd8 <_raise_r+0x42>
 800bbd0:	2316      	movs	r3, #22
 800bbd2:	6003      	str	r3, [r0, #0]
 800bbd4:	2001      	movs	r0, #1
 800bbd6:	e7e7      	b.n	800bba8 <_raise_r+0x12>
 800bbd8:	2400      	movs	r4, #0
 800bbda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbde:	4628      	mov	r0, r5
 800bbe0:	4798      	blx	r3
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	e7e0      	b.n	800bba8 <_raise_r+0x12>
	...

0800bbe8 <raise>:
 800bbe8:	4b02      	ldr	r3, [pc, #8]	; (800bbf4 <raise+0xc>)
 800bbea:	4601      	mov	r1, r0
 800bbec:	6818      	ldr	r0, [r3, #0]
 800bbee:	f7ff bfd2 	b.w	800bb96 <_raise_r>
 800bbf2:	bf00      	nop
 800bbf4:	20000168 	.word	0x20000168

0800bbf8 <_kill_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4d07      	ldr	r5, [pc, #28]	; (800bc18 <_kill_r+0x20>)
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4604      	mov	r4, r0
 800bc00:	4608      	mov	r0, r1
 800bc02:	4611      	mov	r1, r2
 800bc04:	602b      	str	r3, [r5, #0]
 800bc06:	f7f7 f8cd 	bl	8002da4 <_kill>
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	d102      	bne.n	800bc14 <_kill_r+0x1c>
 800bc0e:	682b      	ldr	r3, [r5, #0]
 800bc10:	b103      	cbz	r3, 800bc14 <_kill_r+0x1c>
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	bd38      	pop	{r3, r4, r5, pc}
 800bc16:	bf00      	nop
 800bc18:	200035c0 	.word	0x200035c0

0800bc1c <_getpid_r>:
 800bc1c:	f7f7 b8ba 	b.w	8002d94 <_getpid>

0800bc20 <__ascii_wctomb>:
 800bc20:	b149      	cbz	r1, 800bc36 <__ascii_wctomb+0x16>
 800bc22:	2aff      	cmp	r2, #255	; 0xff
 800bc24:	bf85      	ittet	hi
 800bc26:	238a      	movhi	r3, #138	; 0x8a
 800bc28:	6003      	strhi	r3, [r0, #0]
 800bc2a:	700a      	strbls	r2, [r1, #0]
 800bc2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc30:	bf98      	it	ls
 800bc32:	2001      	movls	r0, #1
 800bc34:	4770      	bx	lr
 800bc36:	4608      	mov	r0, r1
 800bc38:	4770      	bx	lr
	...

0800bc3c <_fstat_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4d07      	ldr	r5, [pc, #28]	; (800bc5c <_fstat_r+0x20>)
 800bc40:	2300      	movs	r3, #0
 800bc42:	4604      	mov	r4, r0
 800bc44:	4608      	mov	r0, r1
 800bc46:	4611      	mov	r1, r2
 800bc48:	602b      	str	r3, [r5, #0]
 800bc4a:	f7f7 f90a 	bl	8002e62 <_fstat>
 800bc4e:	1c43      	adds	r3, r0, #1
 800bc50:	d102      	bne.n	800bc58 <_fstat_r+0x1c>
 800bc52:	682b      	ldr	r3, [r5, #0]
 800bc54:	b103      	cbz	r3, 800bc58 <_fstat_r+0x1c>
 800bc56:	6023      	str	r3, [r4, #0]
 800bc58:	bd38      	pop	{r3, r4, r5, pc}
 800bc5a:	bf00      	nop
 800bc5c:	200035c0 	.word	0x200035c0

0800bc60 <_isatty_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4d06      	ldr	r5, [pc, #24]	; (800bc7c <_isatty_r+0x1c>)
 800bc64:	2300      	movs	r3, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	602b      	str	r3, [r5, #0]
 800bc6c:	f7f7 f909 	bl	8002e82 <_isatty>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d102      	bne.n	800bc7a <_isatty_r+0x1a>
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	b103      	cbz	r3, 800bc7a <_isatty_r+0x1a>
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	200035c0 	.word	0x200035c0

0800bc80 <_malloc_usable_size_r>:
 800bc80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc84:	1f18      	subs	r0, r3, #4
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	bfbc      	itt	lt
 800bc8a:	580b      	ldrlt	r3, [r1, r0]
 800bc8c:	18c0      	addlt	r0, r0, r3
 800bc8e:	4770      	bx	lr

0800bc90 <pow>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	ed2d 8b02 	vpush	{d8}
 800bc96:	eeb0 8a40 	vmov.f32	s16, s0
 800bc9a:	eef0 8a60 	vmov.f32	s17, s1
 800bc9e:	ec55 4b11 	vmov	r4, r5, d1
 800bca2:	f000 f865 	bl	800bd70 <__ieee754_pow>
 800bca6:	4622      	mov	r2, r4
 800bca8:	462b      	mov	r3, r5
 800bcaa:	4620      	mov	r0, r4
 800bcac:	4629      	mov	r1, r5
 800bcae:	ec57 6b10 	vmov	r6, r7, d0
 800bcb2:	f7f4 ff4b 	bl	8000b4c <__aeabi_dcmpun>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d13b      	bne.n	800bd32 <pow+0xa2>
 800bcba:	ec51 0b18 	vmov	r0, r1, d8
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f7f4 ff11 	bl	8000ae8 <__aeabi_dcmpeq>
 800bcc6:	b1b8      	cbz	r0, 800bcf8 <pow+0x68>
 800bcc8:	2200      	movs	r2, #0
 800bcca:	2300      	movs	r3, #0
 800bccc:	4620      	mov	r0, r4
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f4 ff0a 	bl	8000ae8 <__aeabi_dcmpeq>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d146      	bne.n	800bd66 <pow+0xd6>
 800bcd8:	ec45 4b10 	vmov	d0, r4, r5
 800bcdc:	f000 fe61 	bl	800c9a2 <finite>
 800bce0:	b338      	cbz	r0, 800bd32 <pow+0xa2>
 800bce2:	2200      	movs	r2, #0
 800bce4:	2300      	movs	r3, #0
 800bce6:	4620      	mov	r0, r4
 800bce8:	4629      	mov	r1, r5
 800bcea:	f7f4 ff07 	bl	8000afc <__aeabi_dcmplt>
 800bcee:	b300      	cbz	r0, 800bd32 <pow+0xa2>
 800bcf0:	f7fd f8a4 	bl	8008e3c <__errno>
 800bcf4:	2322      	movs	r3, #34	; 0x22
 800bcf6:	e01b      	b.n	800bd30 <pow+0xa0>
 800bcf8:	ec47 6b10 	vmov	d0, r6, r7
 800bcfc:	f000 fe51 	bl	800c9a2 <finite>
 800bd00:	b9e0      	cbnz	r0, 800bd3c <pow+0xac>
 800bd02:	eeb0 0a48 	vmov.f32	s0, s16
 800bd06:	eef0 0a68 	vmov.f32	s1, s17
 800bd0a:	f000 fe4a 	bl	800c9a2 <finite>
 800bd0e:	b1a8      	cbz	r0, 800bd3c <pow+0xac>
 800bd10:	ec45 4b10 	vmov	d0, r4, r5
 800bd14:	f000 fe45 	bl	800c9a2 <finite>
 800bd18:	b180      	cbz	r0, 800bd3c <pow+0xac>
 800bd1a:	4632      	mov	r2, r6
 800bd1c:	463b      	mov	r3, r7
 800bd1e:	4630      	mov	r0, r6
 800bd20:	4639      	mov	r1, r7
 800bd22:	f7f4 ff13 	bl	8000b4c <__aeabi_dcmpun>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d0e2      	beq.n	800bcf0 <pow+0x60>
 800bd2a:	f7fd f887 	bl	8008e3c <__errno>
 800bd2e:	2321      	movs	r3, #33	; 0x21
 800bd30:	6003      	str	r3, [r0, #0]
 800bd32:	ecbd 8b02 	vpop	{d8}
 800bd36:	ec47 6b10 	vmov	d0, r6, r7
 800bd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	2300      	movs	r3, #0
 800bd40:	4630      	mov	r0, r6
 800bd42:	4639      	mov	r1, r7
 800bd44:	f7f4 fed0 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d0f2      	beq.n	800bd32 <pow+0xa2>
 800bd4c:	eeb0 0a48 	vmov.f32	s0, s16
 800bd50:	eef0 0a68 	vmov.f32	s1, s17
 800bd54:	f000 fe25 	bl	800c9a2 <finite>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d0ea      	beq.n	800bd32 <pow+0xa2>
 800bd5c:	ec45 4b10 	vmov	d0, r4, r5
 800bd60:	f000 fe1f 	bl	800c9a2 <finite>
 800bd64:	e7c3      	b.n	800bcee <pow+0x5e>
 800bd66:	4f01      	ldr	r7, [pc, #4]	; (800bd6c <pow+0xdc>)
 800bd68:	2600      	movs	r6, #0
 800bd6a:	e7e2      	b.n	800bd32 <pow+0xa2>
 800bd6c:	3ff00000 	.word	0x3ff00000

0800bd70 <__ieee754_pow>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	ed2d 8b06 	vpush	{d8-d10}
 800bd78:	b089      	sub	sp, #36	; 0x24
 800bd7a:	ed8d 1b00 	vstr	d1, [sp]
 800bd7e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bd82:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bd86:	ea58 0102 	orrs.w	r1, r8, r2
 800bd8a:	ec57 6b10 	vmov	r6, r7, d0
 800bd8e:	d115      	bne.n	800bdbc <__ieee754_pow+0x4c>
 800bd90:	19b3      	adds	r3, r6, r6
 800bd92:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bd96:	4152      	adcs	r2, r2
 800bd98:	4299      	cmp	r1, r3
 800bd9a:	4b89      	ldr	r3, [pc, #548]	; (800bfc0 <__ieee754_pow+0x250>)
 800bd9c:	4193      	sbcs	r3, r2
 800bd9e:	f080 84d2 	bcs.w	800c746 <__ieee754_pow+0x9d6>
 800bda2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bda6:	4630      	mov	r0, r6
 800bda8:	4639      	mov	r1, r7
 800bdaa:	f7f4 fa7f 	bl	80002ac <__adddf3>
 800bdae:	ec41 0b10 	vmov	d0, r0, r1
 800bdb2:	b009      	add	sp, #36	; 0x24
 800bdb4:	ecbd 8b06 	vpop	{d8-d10}
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbc:	4b81      	ldr	r3, [pc, #516]	; (800bfc4 <__ieee754_pow+0x254>)
 800bdbe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bdc2:	429c      	cmp	r4, r3
 800bdc4:	ee10 aa10 	vmov	sl, s0
 800bdc8:	463d      	mov	r5, r7
 800bdca:	dc06      	bgt.n	800bdda <__ieee754_pow+0x6a>
 800bdcc:	d101      	bne.n	800bdd2 <__ieee754_pow+0x62>
 800bdce:	2e00      	cmp	r6, #0
 800bdd0:	d1e7      	bne.n	800bda2 <__ieee754_pow+0x32>
 800bdd2:	4598      	cmp	r8, r3
 800bdd4:	dc01      	bgt.n	800bdda <__ieee754_pow+0x6a>
 800bdd6:	d10f      	bne.n	800bdf8 <__ieee754_pow+0x88>
 800bdd8:	b172      	cbz	r2, 800bdf8 <__ieee754_pow+0x88>
 800bdda:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bdde:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bde2:	ea55 050a 	orrs.w	r5, r5, sl
 800bde6:	d1dc      	bne.n	800bda2 <__ieee754_pow+0x32>
 800bde8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bdec:	18db      	adds	r3, r3, r3
 800bdee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bdf2:	4152      	adcs	r2, r2
 800bdf4:	429d      	cmp	r5, r3
 800bdf6:	e7d0      	b.n	800bd9a <__ieee754_pow+0x2a>
 800bdf8:	2d00      	cmp	r5, #0
 800bdfa:	da3b      	bge.n	800be74 <__ieee754_pow+0x104>
 800bdfc:	4b72      	ldr	r3, [pc, #456]	; (800bfc8 <__ieee754_pow+0x258>)
 800bdfe:	4598      	cmp	r8, r3
 800be00:	dc51      	bgt.n	800bea6 <__ieee754_pow+0x136>
 800be02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800be06:	4598      	cmp	r8, r3
 800be08:	f340 84ac 	ble.w	800c764 <__ieee754_pow+0x9f4>
 800be0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800be10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800be14:	2b14      	cmp	r3, #20
 800be16:	dd0f      	ble.n	800be38 <__ieee754_pow+0xc8>
 800be18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800be1c:	fa22 f103 	lsr.w	r1, r2, r3
 800be20:	fa01 f303 	lsl.w	r3, r1, r3
 800be24:	4293      	cmp	r3, r2
 800be26:	f040 849d 	bne.w	800c764 <__ieee754_pow+0x9f4>
 800be2a:	f001 0101 	and.w	r1, r1, #1
 800be2e:	f1c1 0302 	rsb	r3, r1, #2
 800be32:	9304      	str	r3, [sp, #16]
 800be34:	b182      	cbz	r2, 800be58 <__ieee754_pow+0xe8>
 800be36:	e05f      	b.n	800bef8 <__ieee754_pow+0x188>
 800be38:	2a00      	cmp	r2, #0
 800be3a:	d15b      	bne.n	800bef4 <__ieee754_pow+0x184>
 800be3c:	f1c3 0314 	rsb	r3, r3, #20
 800be40:	fa48 f103 	asr.w	r1, r8, r3
 800be44:	fa01 f303 	lsl.w	r3, r1, r3
 800be48:	4543      	cmp	r3, r8
 800be4a:	f040 8488 	bne.w	800c75e <__ieee754_pow+0x9ee>
 800be4e:	f001 0101 	and.w	r1, r1, #1
 800be52:	f1c1 0302 	rsb	r3, r1, #2
 800be56:	9304      	str	r3, [sp, #16]
 800be58:	4b5c      	ldr	r3, [pc, #368]	; (800bfcc <__ieee754_pow+0x25c>)
 800be5a:	4598      	cmp	r8, r3
 800be5c:	d132      	bne.n	800bec4 <__ieee754_pow+0x154>
 800be5e:	f1b9 0f00 	cmp.w	r9, #0
 800be62:	f280 8478 	bge.w	800c756 <__ieee754_pow+0x9e6>
 800be66:	4959      	ldr	r1, [pc, #356]	; (800bfcc <__ieee754_pow+0x25c>)
 800be68:	4632      	mov	r2, r6
 800be6a:	463b      	mov	r3, r7
 800be6c:	2000      	movs	r0, #0
 800be6e:	f7f4 fcfd 	bl	800086c <__aeabi_ddiv>
 800be72:	e79c      	b.n	800bdae <__ieee754_pow+0x3e>
 800be74:	2300      	movs	r3, #0
 800be76:	9304      	str	r3, [sp, #16]
 800be78:	2a00      	cmp	r2, #0
 800be7a:	d13d      	bne.n	800bef8 <__ieee754_pow+0x188>
 800be7c:	4b51      	ldr	r3, [pc, #324]	; (800bfc4 <__ieee754_pow+0x254>)
 800be7e:	4598      	cmp	r8, r3
 800be80:	d1ea      	bne.n	800be58 <__ieee754_pow+0xe8>
 800be82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800be86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800be8a:	ea53 030a 	orrs.w	r3, r3, sl
 800be8e:	f000 845a 	beq.w	800c746 <__ieee754_pow+0x9d6>
 800be92:	4b4f      	ldr	r3, [pc, #316]	; (800bfd0 <__ieee754_pow+0x260>)
 800be94:	429c      	cmp	r4, r3
 800be96:	dd08      	ble.n	800beaa <__ieee754_pow+0x13a>
 800be98:	f1b9 0f00 	cmp.w	r9, #0
 800be9c:	f2c0 8457 	blt.w	800c74e <__ieee754_pow+0x9de>
 800bea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bea4:	e783      	b.n	800bdae <__ieee754_pow+0x3e>
 800bea6:	2302      	movs	r3, #2
 800bea8:	e7e5      	b.n	800be76 <__ieee754_pow+0x106>
 800beaa:	f1b9 0f00 	cmp.w	r9, #0
 800beae:	f04f 0000 	mov.w	r0, #0
 800beb2:	f04f 0100 	mov.w	r1, #0
 800beb6:	f6bf af7a 	bge.w	800bdae <__ieee754_pow+0x3e>
 800beba:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bebe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bec2:	e774      	b.n	800bdae <__ieee754_pow+0x3e>
 800bec4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bec8:	d106      	bne.n	800bed8 <__ieee754_pow+0x168>
 800beca:	4632      	mov	r2, r6
 800becc:	463b      	mov	r3, r7
 800bece:	4630      	mov	r0, r6
 800bed0:	4639      	mov	r1, r7
 800bed2:	f7f4 fba1 	bl	8000618 <__aeabi_dmul>
 800bed6:	e76a      	b.n	800bdae <__ieee754_pow+0x3e>
 800bed8:	4b3e      	ldr	r3, [pc, #248]	; (800bfd4 <__ieee754_pow+0x264>)
 800beda:	4599      	cmp	r9, r3
 800bedc:	d10c      	bne.n	800bef8 <__ieee754_pow+0x188>
 800bede:	2d00      	cmp	r5, #0
 800bee0:	db0a      	blt.n	800bef8 <__ieee754_pow+0x188>
 800bee2:	ec47 6b10 	vmov	d0, r6, r7
 800bee6:	b009      	add	sp, #36	; 0x24
 800bee8:	ecbd 8b06 	vpop	{d8-d10}
 800beec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef0:	f000 bc6c 	b.w	800c7cc <__ieee754_sqrt>
 800bef4:	2300      	movs	r3, #0
 800bef6:	9304      	str	r3, [sp, #16]
 800bef8:	ec47 6b10 	vmov	d0, r6, r7
 800befc:	f000 fd48 	bl	800c990 <fabs>
 800bf00:	ec51 0b10 	vmov	r0, r1, d0
 800bf04:	f1ba 0f00 	cmp.w	sl, #0
 800bf08:	d129      	bne.n	800bf5e <__ieee754_pow+0x1ee>
 800bf0a:	b124      	cbz	r4, 800bf16 <__ieee754_pow+0x1a6>
 800bf0c:	4b2f      	ldr	r3, [pc, #188]	; (800bfcc <__ieee754_pow+0x25c>)
 800bf0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d123      	bne.n	800bf5e <__ieee754_pow+0x1ee>
 800bf16:	f1b9 0f00 	cmp.w	r9, #0
 800bf1a:	da05      	bge.n	800bf28 <__ieee754_pow+0x1b8>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	2000      	movs	r0, #0
 800bf22:	492a      	ldr	r1, [pc, #168]	; (800bfcc <__ieee754_pow+0x25c>)
 800bf24:	f7f4 fca2 	bl	800086c <__aeabi_ddiv>
 800bf28:	2d00      	cmp	r5, #0
 800bf2a:	f6bf af40 	bge.w	800bdae <__ieee754_pow+0x3e>
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bf34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bf38:	4323      	orrs	r3, r4
 800bf3a:	d108      	bne.n	800bf4e <__ieee754_pow+0x1de>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4610      	mov	r0, r2
 800bf42:	4619      	mov	r1, r3
 800bf44:	f7f4 f9b0 	bl	80002a8 <__aeabi_dsub>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	e78f      	b.n	800be6e <__ieee754_pow+0xfe>
 800bf4e:	9b04      	ldr	r3, [sp, #16]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	f47f af2c 	bne.w	800bdae <__ieee754_pow+0x3e>
 800bf56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	e727      	b.n	800bdae <__ieee754_pow+0x3e>
 800bf5e:	0feb      	lsrs	r3, r5, #31
 800bf60:	3b01      	subs	r3, #1
 800bf62:	9306      	str	r3, [sp, #24]
 800bf64:	9a06      	ldr	r2, [sp, #24]
 800bf66:	9b04      	ldr	r3, [sp, #16]
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	d102      	bne.n	800bf72 <__ieee754_pow+0x202>
 800bf6c:	4632      	mov	r2, r6
 800bf6e:	463b      	mov	r3, r7
 800bf70:	e7e6      	b.n	800bf40 <__ieee754_pow+0x1d0>
 800bf72:	4b19      	ldr	r3, [pc, #100]	; (800bfd8 <__ieee754_pow+0x268>)
 800bf74:	4598      	cmp	r8, r3
 800bf76:	f340 80fb 	ble.w	800c170 <__ieee754_pow+0x400>
 800bf7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bf7e:	4598      	cmp	r8, r3
 800bf80:	4b13      	ldr	r3, [pc, #76]	; (800bfd0 <__ieee754_pow+0x260>)
 800bf82:	dd0c      	ble.n	800bf9e <__ieee754_pow+0x22e>
 800bf84:	429c      	cmp	r4, r3
 800bf86:	dc0f      	bgt.n	800bfa8 <__ieee754_pow+0x238>
 800bf88:	f1b9 0f00 	cmp.w	r9, #0
 800bf8c:	da0f      	bge.n	800bfae <__ieee754_pow+0x23e>
 800bf8e:	2000      	movs	r0, #0
 800bf90:	b009      	add	sp, #36	; 0x24
 800bf92:	ecbd 8b06 	vpop	{d8-d10}
 800bf96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9a:	f000 bcf0 	b.w	800c97e <__math_oflow>
 800bf9e:	429c      	cmp	r4, r3
 800bfa0:	dbf2      	blt.n	800bf88 <__ieee754_pow+0x218>
 800bfa2:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <__ieee754_pow+0x25c>)
 800bfa4:	429c      	cmp	r4, r3
 800bfa6:	dd19      	ble.n	800bfdc <__ieee754_pow+0x26c>
 800bfa8:	f1b9 0f00 	cmp.w	r9, #0
 800bfac:	dcef      	bgt.n	800bf8e <__ieee754_pow+0x21e>
 800bfae:	2000      	movs	r0, #0
 800bfb0:	b009      	add	sp, #36	; 0x24
 800bfb2:	ecbd 8b06 	vpop	{d8-d10}
 800bfb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfba:	f000 bcd7 	b.w	800c96c <__math_uflow>
 800bfbe:	bf00      	nop
 800bfc0:	fff00000 	.word	0xfff00000
 800bfc4:	7ff00000 	.word	0x7ff00000
 800bfc8:	433fffff 	.word	0x433fffff
 800bfcc:	3ff00000 	.word	0x3ff00000
 800bfd0:	3fefffff 	.word	0x3fefffff
 800bfd4:	3fe00000 	.word	0x3fe00000
 800bfd8:	41e00000 	.word	0x41e00000
 800bfdc:	4b60      	ldr	r3, [pc, #384]	; (800c160 <__ieee754_pow+0x3f0>)
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f7f4 f962 	bl	80002a8 <__aeabi_dsub>
 800bfe4:	a354      	add	r3, pc, #336	; (adr r3, 800c138 <__ieee754_pow+0x3c8>)
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	4604      	mov	r4, r0
 800bfec:	460d      	mov	r5, r1
 800bfee:	f7f4 fb13 	bl	8000618 <__aeabi_dmul>
 800bff2:	a353      	add	r3, pc, #332	; (adr r3, 800c140 <__ieee754_pow+0x3d0>)
 800bff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff8:	4606      	mov	r6, r0
 800bffa:	460f      	mov	r7, r1
 800bffc:	4620      	mov	r0, r4
 800bffe:	4629      	mov	r1, r5
 800c000:	f7f4 fb0a 	bl	8000618 <__aeabi_dmul>
 800c004:	4b57      	ldr	r3, [pc, #348]	; (800c164 <__ieee754_pow+0x3f4>)
 800c006:	4682      	mov	sl, r0
 800c008:	468b      	mov	fp, r1
 800c00a:	2200      	movs	r2, #0
 800c00c:	4620      	mov	r0, r4
 800c00e:	4629      	mov	r1, r5
 800c010:	f7f4 fb02 	bl	8000618 <__aeabi_dmul>
 800c014:	4602      	mov	r2, r0
 800c016:	460b      	mov	r3, r1
 800c018:	a14b      	add	r1, pc, #300	; (adr r1, 800c148 <__ieee754_pow+0x3d8>)
 800c01a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c01e:	f7f4 f943 	bl	80002a8 <__aeabi_dsub>
 800c022:	4622      	mov	r2, r4
 800c024:	462b      	mov	r3, r5
 800c026:	f7f4 faf7 	bl	8000618 <__aeabi_dmul>
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	2000      	movs	r0, #0
 800c030:	494d      	ldr	r1, [pc, #308]	; (800c168 <__ieee754_pow+0x3f8>)
 800c032:	f7f4 f939 	bl	80002a8 <__aeabi_dsub>
 800c036:	4622      	mov	r2, r4
 800c038:	4680      	mov	r8, r0
 800c03a:	4689      	mov	r9, r1
 800c03c:	462b      	mov	r3, r5
 800c03e:	4620      	mov	r0, r4
 800c040:	4629      	mov	r1, r5
 800c042:	f7f4 fae9 	bl	8000618 <__aeabi_dmul>
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4640      	mov	r0, r8
 800c04c:	4649      	mov	r1, r9
 800c04e:	f7f4 fae3 	bl	8000618 <__aeabi_dmul>
 800c052:	a33f      	add	r3, pc, #252	; (adr r3, 800c150 <__ieee754_pow+0x3e0>)
 800c054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c058:	f7f4 fade 	bl	8000618 <__aeabi_dmul>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4650      	mov	r0, sl
 800c062:	4659      	mov	r1, fp
 800c064:	f7f4 f920 	bl	80002a8 <__aeabi_dsub>
 800c068:	4602      	mov	r2, r0
 800c06a:	460b      	mov	r3, r1
 800c06c:	4680      	mov	r8, r0
 800c06e:	4689      	mov	r9, r1
 800c070:	4630      	mov	r0, r6
 800c072:	4639      	mov	r1, r7
 800c074:	f7f4 f91a 	bl	80002ac <__adddf3>
 800c078:	2000      	movs	r0, #0
 800c07a:	4632      	mov	r2, r6
 800c07c:	463b      	mov	r3, r7
 800c07e:	4604      	mov	r4, r0
 800c080:	460d      	mov	r5, r1
 800c082:	f7f4 f911 	bl	80002a8 <__aeabi_dsub>
 800c086:	4602      	mov	r2, r0
 800c088:	460b      	mov	r3, r1
 800c08a:	4640      	mov	r0, r8
 800c08c:	4649      	mov	r1, r9
 800c08e:	f7f4 f90b 	bl	80002a8 <__aeabi_dsub>
 800c092:	9b04      	ldr	r3, [sp, #16]
 800c094:	9a06      	ldr	r2, [sp, #24]
 800c096:	3b01      	subs	r3, #1
 800c098:	4313      	orrs	r3, r2
 800c09a:	4682      	mov	sl, r0
 800c09c:	468b      	mov	fp, r1
 800c09e:	f040 81e7 	bne.w	800c470 <__ieee754_pow+0x700>
 800c0a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c158 <__ieee754_pow+0x3e8>
 800c0a6:	eeb0 8a47 	vmov.f32	s16, s14
 800c0aa:	eef0 8a67 	vmov.f32	s17, s15
 800c0ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c0b2:	2600      	movs	r6, #0
 800c0b4:	4632      	mov	r2, r6
 800c0b6:	463b      	mov	r3, r7
 800c0b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0bc:	f7f4 f8f4 	bl	80002a8 <__aeabi_dsub>
 800c0c0:	4622      	mov	r2, r4
 800c0c2:	462b      	mov	r3, r5
 800c0c4:	f7f4 faa8 	bl	8000618 <__aeabi_dmul>
 800c0c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0cc:	4680      	mov	r8, r0
 800c0ce:	4689      	mov	r9, r1
 800c0d0:	4650      	mov	r0, sl
 800c0d2:	4659      	mov	r1, fp
 800c0d4:	f7f4 faa0 	bl	8000618 <__aeabi_dmul>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4640      	mov	r0, r8
 800c0de:	4649      	mov	r1, r9
 800c0e0:	f7f4 f8e4 	bl	80002ac <__adddf3>
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	4680      	mov	r8, r0
 800c0ea:	4689      	mov	r9, r1
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	f7f4 fa92 	bl	8000618 <__aeabi_dmul>
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	460d      	mov	r5, r1
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	4640      	mov	r0, r8
 800c100:	f7f4 f8d4 	bl	80002ac <__adddf3>
 800c104:	4b19      	ldr	r3, [pc, #100]	; (800c16c <__ieee754_pow+0x3fc>)
 800c106:	4299      	cmp	r1, r3
 800c108:	ec45 4b19 	vmov	d9, r4, r5
 800c10c:	4606      	mov	r6, r0
 800c10e:	460f      	mov	r7, r1
 800c110:	468b      	mov	fp, r1
 800c112:	f340 82f1 	ble.w	800c6f8 <__ieee754_pow+0x988>
 800c116:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c11a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c11e:	4303      	orrs	r3, r0
 800c120:	f000 81e4 	beq.w	800c4ec <__ieee754_pow+0x77c>
 800c124:	ec51 0b18 	vmov	r0, r1, d8
 800c128:	2200      	movs	r2, #0
 800c12a:	2300      	movs	r3, #0
 800c12c:	f7f4 fce6 	bl	8000afc <__aeabi_dcmplt>
 800c130:	3800      	subs	r0, #0
 800c132:	bf18      	it	ne
 800c134:	2001      	movne	r0, #1
 800c136:	e72b      	b.n	800bf90 <__ieee754_pow+0x220>
 800c138:	60000000 	.word	0x60000000
 800c13c:	3ff71547 	.word	0x3ff71547
 800c140:	f85ddf44 	.word	0xf85ddf44
 800c144:	3e54ae0b 	.word	0x3e54ae0b
 800c148:	55555555 	.word	0x55555555
 800c14c:	3fd55555 	.word	0x3fd55555
 800c150:	652b82fe 	.word	0x652b82fe
 800c154:	3ff71547 	.word	0x3ff71547
 800c158:	00000000 	.word	0x00000000
 800c15c:	bff00000 	.word	0xbff00000
 800c160:	3ff00000 	.word	0x3ff00000
 800c164:	3fd00000 	.word	0x3fd00000
 800c168:	3fe00000 	.word	0x3fe00000
 800c16c:	408fffff 	.word	0x408fffff
 800c170:	4bd5      	ldr	r3, [pc, #852]	; (800c4c8 <__ieee754_pow+0x758>)
 800c172:	402b      	ands	r3, r5
 800c174:	2200      	movs	r2, #0
 800c176:	b92b      	cbnz	r3, 800c184 <__ieee754_pow+0x414>
 800c178:	4bd4      	ldr	r3, [pc, #848]	; (800c4cc <__ieee754_pow+0x75c>)
 800c17a:	f7f4 fa4d 	bl	8000618 <__aeabi_dmul>
 800c17e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c182:	460c      	mov	r4, r1
 800c184:	1523      	asrs	r3, r4, #20
 800c186:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c18a:	4413      	add	r3, r2
 800c18c:	9305      	str	r3, [sp, #20]
 800c18e:	4bd0      	ldr	r3, [pc, #832]	; (800c4d0 <__ieee754_pow+0x760>)
 800c190:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c194:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c198:	429c      	cmp	r4, r3
 800c19a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c19e:	dd08      	ble.n	800c1b2 <__ieee754_pow+0x442>
 800c1a0:	4bcc      	ldr	r3, [pc, #816]	; (800c4d4 <__ieee754_pow+0x764>)
 800c1a2:	429c      	cmp	r4, r3
 800c1a4:	f340 8162 	ble.w	800c46c <__ieee754_pow+0x6fc>
 800c1a8:	9b05      	ldr	r3, [sp, #20]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	9305      	str	r3, [sp, #20]
 800c1ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c1b2:	2400      	movs	r4, #0
 800c1b4:	00e3      	lsls	r3, r4, #3
 800c1b6:	9307      	str	r3, [sp, #28]
 800c1b8:	4bc7      	ldr	r3, [pc, #796]	; (800c4d8 <__ieee754_pow+0x768>)
 800c1ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1be:	ed93 7b00 	vldr	d7, [r3]
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	ec53 2b17 	vmov	r2, r3, d7
 800c1c8:	eeb0 9a47 	vmov.f32	s18, s14
 800c1cc:	eef0 9a67 	vmov.f32	s19, s15
 800c1d0:	4682      	mov	sl, r0
 800c1d2:	f7f4 f869 	bl	80002a8 <__aeabi_dsub>
 800c1d6:	4652      	mov	r2, sl
 800c1d8:	4606      	mov	r6, r0
 800c1da:	460f      	mov	r7, r1
 800c1dc:	462b      	mov	r3, r5
 800c1de:	ec51 0b19 	vmov	r0, r1, d9
 800c1e2:	f7f4 f863 	bl	80002ac <__adddf3>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	49bb      	ldr	r1, [pc, #748]	; (800c4dc <__ieee754_pow+0x76c>)
 800c1ee:	f7f4 fb3d 	bl	800086c <__aeabi_ddiv>
 800c1f2:	ec41 0b1a 	vmov	d10, r0, r1
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	f7f4 fa0b 	bl	8000618 <__aeabi_dmul>
 800c202:	2300      	movs	r3, #0
 800c204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c208:	9302      	str	r3, [sp, #8]
 800c20a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c20e:	46ab      	mov	fp, r5
 800c210:	106d      	asrs	r5, r5, #1
 800c212:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c216:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c21a:	ec41 0b18 	vmov	d8, r0, r1
 800c21e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c222:	2200      	movs	r2, #0
 800c224:	4640      	mov	r0, r8
 800c226:	4649      	mov	r1, r9
 800c228:	4614      	mov	r4, r2
 800c22a:	461d      	mov	r5, r3
 800c22c:	f7f4 f9f4 	bl	8000618 <__aeabi_dmul>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	4630      	mov	r0, r6
 800c236:	4639      	mov	r1, r7
 800c238:	f7f4 f836 	bl	80002a8 <__aeabi_dsub>
 800c23c:	ec53 2b19 	vmov	r2, r3, d9
 800c240:	4606      	mov	r6, r0
 800c242:	460f      	mov	r7, r1
 800c244:	4620      	mov	r0, r4
 800c246:	4629      	mov	r1, r5
 800c248:	f7f4 f82e 	bl	80002a8 <__aeabi_dsub>
 800c24c:	4602      	mov	r2, r0
 800c24e:	460b      	mov	r3, r1
 800c250:	4650      	mov	r0, sl
 800c252:	4659      	mov	r1, fp
 800c254:	f7f4 f828 	bl	80002a8 <__aeabi_dsub>
 800c258:	4642      	mov	r2, r8
 800c25a:	464b      	mov	r3, r9
 800c25c:	f7f4 f9dc 	bl	8000618 <__aeabi_dmul>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4630      	mov	r0, r6
 800c266:	4639      	mov	r1, r7
 800c268:	f7f4 f81e 	bl	80002a8 <__aeabi_dsub>
 800c26c:	ec53 2b1a 	vmov	r2, r3, d10
 800c270:	f7f4 f9d2 	bl	8000618 <__aeabi_dmul>
 800c274:	ec53 2b18 	vmov	r2, r3, d8
 800c278:	ec41 0b19 	vmov	d9, r0, r1
 800c27c:	ec51 0b18 	vmov	r0, r1, d8
 800c280:	f7f4 f9ca 	bl	8000618 <__aeabi_dmul>
 800c284:	a37c      	add	r3, pc, #496	; (adr r3, 800c478 <__ieee754_pow+0x708>)
 800c286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28a:	4604      	mov	r4, r0
 800c28c:	460d      	mov	r5, r1
 800c28e:	f7f4 f9c3 	bl	8000618 <__aeabi_dmul>
 800c292:	a37b      	add	r3, pc, #492	; (adr r3, 800c480 <__ieee754_pow+0x710>)
 800c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c298:	f7f4 f808 	bl	80002ac <__adddf3>
 800c29c:	4622      	mov	r2, r4
 800c29e:	462b      	mov	r3, r5
 800c2a0:	f7f4 f9ba 	bl	8000618 <__aeabi_dmul>
 800c2a4:	a378      	add	r3, pc, #480	; (adr r3, 800c488 <__ieee754_pow+0x718>)
 800c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2aa:	f7f3 ffff 	bl	80002ac <__adddf3>
 800c2ae:	4622      	mov	r2, r4
 800c2b0:	462b      	mov	r3, r5
 800c2b2:	f7f4 f9b1 	bl	8000618 <__aeabi_dmul>
 800c2b6:	a376      	add	r3, pc, #472	; (adr r3, 800c490 <__ieee754_pow+0x720>)
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	f7f3 fff6 	bl	80002ac <__adddf3>
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	462b      	mov	r3, r5
 800c2c4:	f7f4 f9a8 	bl	8000618 <__aeabi_dmul>
 800c2c8:	a373      	add	r3, pc, #460	; (adr r3, 800c498 <__ieee754_pow+0x728>)
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	f7f3 ffed 	bl	80002ac <__adddf3>
 800c2d2:	4622      	mov	r2, r4
 800c2d4:	462b      	mov	r3, r5
 800c2d6:	f7f4 f99f 	bl	8000618 <__aeabi_dmul>
 800c2da:	a371      	add	r3, pc, #452	; (adr r3, 800c4a0 <__ieee754_pow+0x730>)
 800c2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e0:	f7f3 ffe4 	bl	80002ac <__adddf3>
 800c2e4:	4622      	mov	r2, r4
 800c2e6:	4606      	mov	r6, r0
 800c2e8:	460f      	mov	r7, r1
 800c2ea:	462b      	mov	r3, r5
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	f7f4 f992 	bl	8000618 <__aeabi_dmul>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	f7f4 f98c 	bl	8000618 <__aeabi_dmul>
 800c300:	4642      	mov	r2, r8
 800c302:	4604      	mov	r4, r0
 800c304:	460d      	mov	r5, r1
 800c306:	464b      	mov	r3, r9
 800c308:	ec51 0b18 	vmov	r0, r1, d8
 800c30c:	f7f3 ffce 	bl	80002ac <__adddf3>
 800c310:	ec53 2b19 	vmov	r2, r3, d9
 800c314:	f7f4 f980 	bl	8000618 <__aeabi_dmul>
 800c318:	4622      	mov	r2, r4
 800c31a:	462b      	mov	r3, r5
 800c31c:	f7f3 ffc6 	bl	80002ac <__adddf3>
 800c320:	4642      	mov	r2, r8
 800c322:	4682      	mov	sl, r0
 800c324:	468b      	mov	fp, r1
 800c326:	464b      	mov	r3, r9
 800c328:	4640      	mov	r0, r8
 800c32a:	4649      	mov	r1, r9
 800c32c:	f7f4 f974 	bl	8000618 <__aeabi_dmul>
 800c330:	4b6b      	ldr	r3, [pc, #428]	; (800c4e0 <__ieee754_pow+0x770>)
 800c332:	2200      	movs	r2, #0
 800c334:	4606      	mov	r6, r0
 800c336:	460f      	mov	r7, r1
 800c338:	f7f3 ffb8 	bl	80002ac <__adddf3>
 800c33c:	4652      	mov	r2, sl
 800c33e:	465b      	mov	r3, fp
 800c340:	f7f3 ffb4 	bl	80002ac <__adddf3>
 800c344:	2000      	movs	r0, #0
 800c346:	4604      	mov	r4, r0
 800c348:	460d      	mov	r5, r1
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	4640      	mov	r0, r8
 800c350:	4649      	mov	r1, r9
 800c352:	f7f4 f961 	bl	8000618 <__aeabi_dmul>
 800c356:	4b62      	ldr	r3, [pc, #392]	; (800c4e0 <__ieee754_pow+0x770>)
 800c358:	4680      	mov	r8, r0
 800c35a:	4689      	mov	r9, r1
 800c35c:	2200      	movs	r2, #0
 800c35e:	4620      	mov	r0, r4
 800c360:	4629      	mov	r1, r5
 800c362:	f7f3 ffa1 	bl	80002a8 <__aeabi_dsub>
 800c366:	4632      	mov	r2, r6
 800c368:	463b      	mov	r3, r7
 800c36a:	f7f3 ff9d 	bl	80002a8 <__aeabi_dsub>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4650      	mov	r0, sl
 800c374:	4659      	mov	r1, fp
 800c376:	f7f3 ff97 	bl	80002a8 <__aeabi_dsub>
 800c37a:	ec53 2b18 	vmov	r2, r3, d8
 800c37e:	f7f4 f94b 	bl	8000618 <__aeabi_dmul>
 800c382:	4622      	mov	r2, r4
 800c384:	4606      	mov	r6, r0
 800c386:	460f      	mov	r7, r1
 800c388:	462b      	mov	r3, r5
 800c38a:	ec51 0b19 	vmov	r0, r1, d9
 800c38e:	f7f4 f943 	bl	8000618 <__aeabi_dmul>
 800c392:	4602      	mov	r2, r0
 800c394:	460b      	mov	r3, r1
 800c396:	4630      	mov	r0, r6
 800c398:	4639      	mov	r1, r7
 800c39a:	f7f3 ff87 	bl	80002ac <__adddf3>
 800c39e:	4606      	mov	r6, r0
 800c3a0:	460f      	mov	r7, r1
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4640      	mov	r0, r8
 800c3a8:	4649      	mov	r1, r9
 800c3aa:	f7f3 ff7f 	bl	80002ac <__adddf3>
 800c3ae:	a33e      	add	r3, pc, #248	; (adr r3, 800c4a8 <__ieee754_pow+0x738>)
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	460d      	mov	r5, r1
 800c3ba:	f7f4 f92d 	bl	8000618 <__aeabi_dmul>
 800c3be:	4642      	mov	r2, r8
 800c3c0:	ec41 0b18 	vmov	d8, r0, r1
 800c3c4:	464b      	mov	r3, r9
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	f7f3 ff6d 	bl	80002a8 <__aeabi_dsub>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	4639      	mov	r1, r7
 800c3d6:	f7f3 ff67 	bl	80002a8 <__aeabi_dsub>
 800c3da:	a335      	add	r3, pc, #212	; (adr r3, 800c4b0 <__ieee754_pow+0x740>)
 800c3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e0:	f7f4 f91a 	bl	8000618 <__aeabi_dmul>
 800c3e4:	a334      	add	r3, pc, #208	; (adr r3, 800c4b8 <__ieee754_pow+0x748>)
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	460f      	mov	r7, r1
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	f7f4 f911 	bl	8000618 <__aeabi_dmul>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	f7f3 ff55 	bl	80002ac <__adddf3>
 800c402:	9a07      	ldr	r2, [sp, #28]
 800c404:	4b37      	ldr	r3, [pc, #220]	; (800c4e4 <__ieee754_pow+0x774>)
 800c406:	4413      	add	r3, r2
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f7f3 ff4e 	bl	80002ac <__adddf3>
 800c410:	4682      	mov	sl, r0
 800c412:	9805      	ldr	r0, [sp, #20]
 800c414:	468b      	mov	fp, r1
 800c416:	f7f4 f895 	bl	8000544 <__aeabi_i2d>
 800c41a:	9a07      	ldr	r2, [sp, #28]
 800c41c:	4b32      	ldr	r3, [pc, #200]	; (800c4e8 <__ieee754_pow+0x778>)
 800c41e:	4413      	add	r3, r2
 800c420:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c424:	4606      	mov	r6, r0
 800c426:	460f      	mov	r7, r1
 800c428:	4652      	mov	r2, sl
 800c42a:	465b      	mov	r3, fp
 800c42c:	ec51 0b18 	vmov	r0, r1, d8
 800c430:	f7f3 ff3c 	bl	80002ac <__adddf3>
 800c434:	4642      	mov	r2, r8
 800c436:	464b      	mov	r3, r9
 800c438:	f7f3 ff38 	bl	80002ac <__adddf3>
 800c43c:	4632      	mov	r2, r6
 800c43e:	463b      	mov	r3, r7
 800c440:	f7f3 ff34 	bl	80002ac <__adddf3>
 800c444:	2000      	movs	r0, #0
 800c446:	4632      	mov	r2, r6
 800c448:	463b      	mov	r3, r7
 800c44a:	4604      	mov	r4, r0
 800c44c:	460d      	mov	r5, r1
 800c44e:	f7f3 ff2b 	bl	80002a8 <__aeabi_dsub>
 800c452:	4642      	mov	r2, r8
 800c454:	464b      	mov	r3, r9
 800c456:	f7f3 ff27 	bl	80002a8 <__aeabi_dsub>
 800c45a:	ec53 2b18 	vmov	r2, r3, d8
 800c45e:	f7f3 ff23 	bl	80002a8 <__aeabi_dsub>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	4650      	mov	r0, sl
 800c468:	4659      	mov	r1, fp
 800c46a:	e610      	b.n	800c08e <__ieee754_pow+0x31e>
 800c46c:	2401      	movs	r4, #1
 800c46e:	e6a1      	b.n	800c1b4 <__ieee754_pow+0x444>
 800c470:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c4c0 <__ieee754_pow+0x750>
 800c474:	e617      	b.n	800c0a6 <__ieee754_pow+0x336>
 800c476:	bf00      	nop
 800c478:	4a454eef 	.word	0x4a454eef
 800c47c:	3fca7e28 	.word	0x3fca7e28
 800c480:	93c9db65 	.word	0x93c9db65
 800c484:	3fcd864a 	.word	0x3fcd864a
 800c488:	a91d4101 	.word	0xa91d4101
 800c48c:	3fd17460 	.word	0x3fd17460
 800c490:	518f264d 	.word	0x518f264d
 800c494:	3fd55555 	.word	0x3fd55555
 800c498:	db6fabff 	.word	0xdb6fabff
 800c49c:	3fdb6db6 	.word	0x3fdb6db6
 800c4a0:	33333303 	.word	0x33333303
 800c4a4:	3fe33333 	.word	0x3fe33333
 800c4a8:	e0000000 	.word	0xe0000000
 800c4ac:	3feec709 	.word	0x3feec709
 800c4b0:	dc3a03fd 	.word	0xdc3a03fd
 800c4b4:	3feec709 	.word	0x3feec709
 800c4b8:	145b01f5 	.word	0x145b01f5
 800c4bc:	be3e2fe0 	.word	0xbe3e2fe0
 800c4c0:	00000000 	.word	0x00000000
 800c4c4:	3ff00000 	.word	0x3ff00000
 800c4c8:	7ff00000 	.word	0x7ff00000
 800c4cc:	43400000 	.word	0x43400000
 800c4d0:	0003988e 	.word	0x0003988e
 800c4d4:	000bb679 	.word	0x000bb679
 800c4d8:	08020110 	.word	0x08020110
 800c4dc:	3ff00000 	.word	0x3ff00000
 800c4e0:	40080000 	.word	0x40080000
 800c4e4:	08020130 	.word	0x08020130
 800c4e8:	08020120 	.word	0x08020120
 800c4ec:	a3b5      	add	r3, pc, #724	; (adr r3, 800c7c4 <__ieee754_pow+0xa54>)
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	4640      	mov	r0, r8
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	f7f3 fed9 	bl	80002ac <__adddf3>
 800c4fa:	4622      	mov	r2, r4
 800c4fc:	ec41 0b1a 	vmov	d10, r0, r1
 800c500:	462b      	mov	r3, r5
 800c502:	4630      	mov	r0, r6
 800c504:	4639      	mov	r1, r7
 800c506:	f7f3 fecf 	bl	80002a8 <__aeabi_dsub>
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	ec51 0b1a 	vmov	r0, r1, d10
 800c512:	f7f4 fb11 	bl	8000b38 <__aeabi_dcmpgt>
 800c516:	2800      	cmp	r0, #0
 800c518:	f47f ae04 	bne.w	800c124 <__ieee754_pow+0x3b4>
 800c51c:	4aa4      	ldr	r2, [pc, #656]	; (800c7b0 <__ieee754_pow+0xa40>)
 800c51e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c522:	4293      	cmp	r3, r2
 800c524:	f340 8108 	ble.w	800c738 <__ieee754_pow+0x9c8>
 800c528:	151b      	asrs	r3, r3, #20
 800c52a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c52e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c532:	fa4a f303 	asr.w	r3, sl, r3
 800c536:	445b      	add	r3, fp
 800c538:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c53c:	4e9d      	ldr	r6, [pc, #628]	; (800c7b4 <__ieee754_pow+0xa44>)
 800c53e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c542:	4116      	asrs	r6, r2
 800c544:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c548:	2000      	movs	r0, #0
 800c54a:	ea23 0106 	bic.w	r1, r3, r6
 800c54e:	f1c2 0214 	rsb	r2, r2, #20
 800c552:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c556:	fa4a fa02 	asr.w	sl, sl, r2
 800c55a:	f1bb 0f00 	cmp.w	fp, #0
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4620      	mov	r0, r4
 800c564:	4629      	mov	r1, r5
 800c566:	bfb8      	it	lt
 800c568:	f1ca 0a00 	rsblt	sl, sl, #0
 800c56c:	f7f3 fe9c 	bl	80002a8 <__aeabi_dsub>
 800c570:	ec41 0b19 	vmov	d9, r0, r1
 800c574:	4642      	mov	r2, r8
 800c576:	464b      	mov	r3, r9
 800c578:	ec51 0b19 	vmov	r0, r1, d9
 800c57c:	f7f3 fe96 	bl	80002ac <__adddf3>
 800c580:	a37b      	add	r3, pc, #492	; (adr r3, 800c770 <__ieee754_pow+0xa00>)
 800c582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c586:	2000      	movs	r0, #0
 800c588:	4604      	mov	r4, r0
 800c58a:	460d      	mov	r5, r1
 800c58c:	f7f4 f844 	bl	8000618 <__aeabi_dmul>
 800c590:	ec53 2b19 	vmov	r2, r3, d9
 800c594:	4606      	mov	r6, r0
 800c596:	460f      	mov	r7, r1
 800c598:	4620      	mov	r0, r4
 800c59a:	4629      	mov	r1, r5
 800c59c:	f7f3 fe84 	bl	80002a8 <__aeabi_dsub>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	f7f3 fe7e 	bl	80002a8 <__aeabi_dsub>
 800c5ac:	a372      	add	r3, pc, #456	; (adr r3, 800c778 <__ieee754_pow+0xa08>)
 800c5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b2:	f7f4 f831 	bl	8000618 <__aeabi_dmul>
 800c5b6:	a372      	add	r3, pc, #456	; (adr r3, 800c780 <__ieee754_pow+0xa10>)
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	4680      	mov	r8, r0
 800c5be:	4689      	mov	r9, r1
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	f7f4 f828 	bl	8000618 <__aeabi_dmul>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4640      	mov	r0, r8
 800c5ce:	4649      	mov	r1, r9
 800c5d0:	f7f3 fe6c 	bl	80002ac <__adddf3>
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	460d      	mov	r5, r1
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4630      	mov	r0, r6
 800c5de:	4639      	mov	r1, r7
 800c5e0:	f7f3 fe64 	bl	80002ac <__adddf3>
 800c5e4:	4632      	mov	r2, r6
 800c5e6:	463b      	mov	r3, r7
 800c5e8:	4680      	mov	r8, r0
 800c5ea:	4689      	mov	r9, r1
 800c5ec:	f7f3 fe5c 	bl	80002a8 <__aeabi_dsub>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	f7f3 fe56 	bl	80002a8 <__aeabi_dsub>
 800c5fc:	4642      	mov	r2, r8
 800c5fe:	4606      	mov	r6, r0
 800c600:	460f      	mov	r7, r1
 800c602:	464b      	mov	r3, r9
 800c604:	4640      	mov	r0, r8
 800c606:	4649      	mov	r1, r9
 800c608:	f7f4 f806 	bl	8000618 <__aeabi_dmul>
 800c60c:	a35e      	add	r3, pc, #376	; (adr r3, 800c788 <__ieee754_pow+0xa18>)
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	4604      	mov	r4, r0
 800c614:	460d      	mov	r5, r1
 800c616:	f7f3 ffff 	bl	8000618 <__aeabi_dmul>
 800c61a:	a35d      	add	r3, pc, #372	; (adr r3, 800c790 <__ieee754_pow+0xa20>)
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	f7f3 fe42 	bl	80002a8 <__aeabi_dsub>
 800c624:	4622      	mov	r2, r4
 800c626:	462b      	mov	r3, r5
 800c628:	f7f3 fff6 	bl	8000618 <__aeabi_dmul>
 800c62c:	a35a      	add	r3, pc, #360	; (adr r3, 800c798 <__ieee754_pow+0xa28>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	f7f3 fe3b 	bl	80002ac <__adddf3>
 800c636:	4622      	mov	r2, r4
 800c638:	462b      	mov	r3, r5
 800c63a:	f7f3 ffed 	bl	8000618 <__aeabi_dmul>
 800c63e:	a358      	add	r3, pc, #352	; (adr r3, 800c7a0 <__ieee754_pow+0xa30>)
 800c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c644:	f7f3 fe30 	bl	80002a8 <__aeabi_dsub>
 800c648:	4622      	mov	r2, r4
 800c64a:	462b      	mov	r3, r5
 800c64c:	f7f3 ffe4 	bl	8000618 <__aeabi_dmul>
 800c650:	a355      	add	r3, pc, #340	; (adr r3, 800c7a8 <__ieee754_pow+0xa38>)
 800c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c656:	f7f3 fe29 	bl	80002ac <__adddf3>
 800c65a:	4622      	mov	r2, r4
 800c65c:	462b      	mov	r3, r5
 800c65e:	f7f3 ffdb 	bl	8000618 <__aeabi_dmul>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	4640      	mov	r0, r8
 800c668:	4649      	mov	r1, r9
 800c66a:	f7f3 fe1d 	bl	80002a8 <__aeabi_dsub>
 800c66e:	4604      	mov	r4, r0
 800c670:	460d      	mov	r5, r1
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	4640      	mov	r0, r8
 800c678:	4649      	mov	r1, r9
 800c67a:	f7f3 ffcd 	bl	8000618 <__aeabi_dmul>
 800c67e:	2200      	movs	r2, #0
 800c680:	ec41 0b19 	vmov	d9, r0, r1
 800c684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c688:	4620      	mov	r0, r4
 800c68a:	4629      	mov	r1, r5
 800c68c:	f7f3 fe0c 	bl	80002a8 <__aeabi_dsub>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	ec51 0b19 	vmov	r0, r1, d9
 800c698:	f7f4 f8e8 	bl	800086c <__aeabi_ddiv>
 800c69c:	4632      	mov	r2, r6
 800c69e:	4604      	mov	r4, r0
 800c6a0:	460d      	mov	r5, r1
 800c6a2:	463b      	mov	r3, r7
 800c6a4:	4640      	mov	r0, r8
 800c6a6:	4649      	mov	r1, r9
 800c6a8:	f7f3 ffb6 	bl	8000618 <__aeabi_dmul>
 800c6ac:	4632      	mov	r2, r6
 800c6ae:	463b      	mov	r3, r7
 800c6b0:	f7f3 fdfc 	bl	80002ac <__adddf3>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	f7f3 fdf4 	bl	80002a8 <__aeabi_dsub>
 800c6c0:	4642      	mov	r2, r8
 800c6c2:	464b      	mov	r3, r9
 800c6c4:	f7f3 fdf0 	bl	80002a8 <__aeabi_dsub>
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	493a      	ldr	r1, [pc, #232]	; (800c7b8 <__ieee754_pow+0xa48>)
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	f7f3 fdea 	bl	80002a8 <__aeabi_dsub>
 800c6d4:	ec41 0b10 	vmov	d0, r0, r1
 800c6d8:	ee10 3a90 	vmov	r3, s1
 800c6dc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c6e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6e4:	da2b      	bge.n	800c73e <__ieee754_pow+0x9ce>
 800c6e6:	4650      	mov	r0, sl
 800c6e8:	f000 f966 	bl	800c9b8 <scalbn>
 800c6ec:	ec51 0b10 	vmov	r0, r1, d0
 800c6f0:	ec53 2b18 	vmov	r2, r3, d8
 800c6f4:	f7ff bbed 	b.w	800bed2 <__ieee754_pow+0x162>
 800c6f8:	4b30      	ldr	r3, [pc, #192]	; (800c7bc <__ieee754_pow+0xa4c>)
 800c6fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c6fe:	429e      	cmp	r6, r3
 800c700:	f77f af0c 	ble.w	800c51c <__ieee754_pow+0x7ac>
 800c704:	4b2e      	ldr	r3, [pc, #184]	; (800c7c0 <__ieee754_pow+0xa50>)
 800c706:	440b      	add	r3, r1
 800c708:	4303      	orrs	r3, r0
 800c70a:	d009      	beq.n	800c720 <__ieee754_pow+0x9b0>
 800c70c:	ec51 0b18 	vmov	r0, r1, d8
 800c710:	2200      	movs	r2, #0
 800c712:	2300      	movs	r3, #0
 800c714:	f7f4 f9f2 	bl	8000afc <__aeabi_dcmplt>
 800c718:	3800      	subs	r0, #0
 800c71a:	bf18      	it	ne
 800c71c:	2001      	movne	r0, #1
 800c71e:	e447      	b.n	800bfb0 <__ieee754_pow+0x240>
 800c720:	4622      	mov	r2, r4
 800c722:	462b      	mov	r3, r5
 800c724:	f7f3 fdc0 	bl	80002a8 <__aeabi_dsub>
 800c728:	4642      	mov	r2, r8
 800c72a:	464b      	mov	r3, r9
 800c72c:	f7f4 f9fa 	bl	8000b24 <__aeabi_dcmpge>
 800c730:	2800      	cmp	r0, #0
 800c732:	f43f aef3 	beq.w	800c51c <__ieee754_pow+0x7ac>
 800c736:	e7e9      	b.n	800c70c <__ieee754_pow+0x99c>
 800c738:	f04f 0a00 	mov.w	sl, #0
 800c73c:	e71a      	b.n	800c574 <__ieee754_pow+0x804>
 800c73e:	ec51 0b10 	vmov	r0, r1, d0
 800c742:	4619      	mov	r1, r3
 800c744:	e7d4      	b.n	800c6f0 <__ieee754_pow+0x980>
 800c746:	491c      	ldr	r1, [pc, #112]	; (800c7b8 <__ieee754_pow+0xa48>)
 800c748:	2000      	movs	r0, #0
 800c74a:	f7ff bb30 	b.w	800bdae <__ieee754_pow+0x3e>
 800c74e:	2000      	movs	r0, #0
 800c750:	2100      	movs	r1, #0
 800c752:	f7ff bb2c 	b.w	800bdae <__ieee754_pow+0x3e>
 800c756:	4630      	mov	r0, r6
 800c758:	4639      	mov	r1, r7
 800c75a:	f7ff bb28 	b.w	800bdae <__ieee754_pow+0x3e>
 800c75e:	9204      	str	r2, [sp, #16]
 800c760:	f7ff bb7a 	b.w	800be58 <__ieee754_pow+0xe8>
 800c764:	2300      	movs	r3, #0
 800c766:	f7ff bb64 	b.w	800be32 <__ieee754_pow+0xc2>
 800c76a:	bf00      	nop
 800c76c:	f3af 8000 	nop.w
 800c770:	00000000 	.word	0x00000000
 800c774:	3fe62e43 	.word	0x3fe62e43
 800c778:	fefa39ef 	.word	0xfefa39ef
 800c77c:	3fe62e42 	.word	0x3fe62e42
 800c780:	0ca86c39 	.word	0x0ca86c39
 800c784:	be205c61 	.word	0xbe205c61
 800c788:	72bea4d0 	.word	0x72bea4d0
 800c78c:	3e663769 	.word	0x3e663769
 800c790:	c5d26bf1 	.word	0xc5d26bf1
 800c794:	3ebbbd41 	.word	0x3ebbbd41
 800c798:	af25de2c 	.word	0xaf25de2c
 800c79c:	3f11566a 	.word	0x3f11566a
 800c7a0:	16bebd93 	.word	0x16bebd93
 800c7a4:	3f66c16c 	.word	0x3f66c16c
 800c7a8:	5555553e 	.word	0x5555553e
 800c7ac:	3fc55555 	.word	0x3fc55555
 800c7b0:	3fe00000 	.word	0x3fe00000
 800c7b4:	000fffff 	.word	0x000fffff
 800c7b8:	3ff00000 	.word	0x3ff00000
 800c7bc:	4090cbff 	.word	0x4090cbff
 800c7c0:	3f6f3400 	.word	0x3f6f3400
 800c7c4:	652b82fe 	.word	0x652b82fe
 800c7c8:	3c971547 	.word	0x3c971547

0800c7cc <__ieee754_sqrt>:
 800c7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d0:	ec55 4b10 	vmov	r4, r5, d0
 800c7d4:	4e55      	ldr	r6, [pc, #340]	; (800c92c <__ieee754_sqrt+0x160>)
 800c7d6:	43ae      	bics	r6, r5
 800c7d8:	ee10 0a10 	vmov	r0, s0
 800c7dc:	ee10 3a10 	vmov	r3, s0
 800c7e0:	462a      	mov	r2, r5
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	d110      	bne.n	800c808 <__ieee754_sqrt+0x3c>
 800c7e6:	ee10 2a10 	vmov	r2, s0
 800c7ea:	462b      	mov	r3, r5
 800c7ec:	f7f3 ff14 	bl	8000618 <__aeabi_dmul>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	f7f3 fd58 	bl	80002ac <__adddf3>
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	460d      	mov	r5, r1
 800c800:	ec45 4b10 	vmov	d0, r4, r5
 800c804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c808:	2d00      	cmp	r5, #0
 800c80a:	dc10      	bgt.n	800c82e <__ieee754_sqrt+0x62>
 800c80c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c810:	4330      	orrs	r0, r6
 800c812:	d0f5      	beq.n	800c800 <__ieee754_sqrt+0x34>
 800c814:	b15d      	cbz	r5, 800c82e <__ieee754_sqrt+0x62>
 800c816:	ee10 2a10 	vmov	r2, s0
 800c81a:	462b      	mov	r3, r5
 800c81c:	ee10 0a10 	vmov	r0, s0
 800c820:	f7f3 fd42 	bl	80002a8 <__aeabi_dsub>
 800c824:	4602      	mov	r2, r0
 800c826:	460b      	mov	r3, r1
 800c828:	f7f4 f820 	bl	800086c <__aeabi_ddiv>
 800c82c:	e7e6      	b.n	800c7fc <__ieee754_sqrt+0x30>
 800c82e:	1512      	asrs	r2, r2, #20
 800c830:	d074      	beq.n	800c91c <__ieee754_sqrt+0x150>
 800c832:	07d4      	lsls	r4, r2, #31
 800c834:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c838:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c83c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c840:	bf5e      	ittt	pl
 800c842:	0fda      	lsrpl	r2, r3, #31
 800c844:	005b      	lslpl	r3, r3, #1
 800c846:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c84a:	2400      	movs	r4, #0
 800c84c:	0fda      	lsrs	r2, r3, #31
 800c84e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c852:	107f      	asrs	r7, r7, #1
 800c854:	005b      	lsls	r3, r3, #1
 800c856:	2516      	movs	r5, #22
 800c858:	4620      	mov	r0, r4
 800c85a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c85e:	1886      	adds	r6, r0, r2
 800c860:	428e      	cmp	r6, r1
 800c862:	bfde      	ittt	le
 800c864:	1b89      	suble	r1, r1, r6
 800c866:	18b0      	addle	r0, r6, r2
 800c868:	18a4      	addle	r4, r4, r2
 800c86a:	0049      	lsls	r1, r1, #1
 800c86c:	3d01      	subs	r5, #1
 800c86e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c872:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c876:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c87a:	d1f0      	bne.n	800c85e <__ieee754_sqrt+0x92>
 800c87c:	462a      	mov	r2, r5
 800c87e:	f04f 0e20 	mov.w	lr, #32
 800c882:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c886:	4281      	cmp	r1, r0
 800c888:	eb06 0c05 	add.w	ip, r6, r5
 800c88c:	dc02      	bgt.n	800c894 <__ieee754_sqrt+0xc8>
 800c88e:	d113      	bne.n	800c8b8 <__ieee754_sqrt+0xec>
 800c890:	459c      	cmp	ip, r3
 800c892:	d811      	bhi.n	800c8b8 <__ieee754_sqrt+0xec>
 800c894:	f1bc 0f00 	cmp.w	ip, #0
 800c898:	eb0c 0506 	add.w	r5, ip, r6
 800c89c:	da43      	bge.n	800c926 <__ieee754_sqrt+0x15a>
 800c89e:	2d00      	cmp	r5, #0
 800c8a0:	db41      	blt.n	800c926 <__ieee754_sqrt+0x15a>
 800c8a2:	f100 0801 	add.w	r8, r0, #1
 800c8a6:	1a09      	subs	r1, r1, r0
 800c8a8:	459c      	cmp	ip, r3
 800c8aa:	bf88      	it	hi
 800c8ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c8b0:	eba3 030c 	sub.w	r3, r3, ip
 800c8b4:	4432      	add	r2, r6
 800c8b6:	4640      	mov	r0, r8
 800c8b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c8bc:	f1be 0e01 	subs.w	lr, lr, #1
 800c8c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c8c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c8c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c8cc:	d1db      	bne.n	800c886 <__ieee754_sqrt+0xba>
 800c8ce:	430b      	orrs	r3, r1
 800c8d0:	d006      	beq.n	800c8e0 <__ieee754_sqrt+0x114>
 800c8d2:	1c50      	adds	r0, r2, #1
 800c8d4:	bf13      	iteet	ne
 800c8d6:	3201      	addne	r2, #1
 800c8d8:	3401      	addeq	r4, #1
 800c8da:	4672      	moveq	r2, lr
 800c8dc:	f022 0201 	bicne.w	r2, r2, #1
 800c8e0:	1063      	asrs	r3, r4, #1
 800c8e2:	0852      	lsrs	r2, r2, #1
 800c8e4:	07e1      	lsls	r1, r4, #31
 800c8e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c8ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c8ee:	bf48      	it	mi
 800c8f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c8f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c8f8:	4614      	mov	r4, r2
 800c8fa:	e781      	b.n	800c800 <__ieee754_sqrt+0x34>
 800c8fc:	0ad9      	lsrs	r1, r3, #11
 800c8fe:	3815      	subs	r0, #21
 800c900:	055b      	lsls	r3, r3, #21
 800c902:	2900      	cmp	r1, #0
 800c904:	d0fa      	beq.n	800c8fc <__ieee754_sqrt+0x130>
 800c906:	02cd      	lsls	r5, r1, #11
 800c908:	d50a      	bpl.n	800c920 <__ieee754_sqrt+0x154>
 800c90a:	f1c2 0420 	rsb	r4, r2, #32
 800c90e:	fa23 f404 	lsr.w	r4, r3, r4
 800c912:	1e55      	subs	r5, r2, #1
 800c914:	4093      	lsls	r3, r2
 800c916:	4321      	orrs	r1, r4
 800c918:	1b42      	subs	r2, r0, r5
 800c91a:	e78a      	b.n	800c832 <__ieee754_sqrt+0x66>
 800c91c:	4610      	mov	r0, r2
 800c91e:	e7f0      	b.n	800c902 <__ieee754_sqrt+0x136>
 800c920:	0049      	lsls	r1, r1, #1
 800c922:	3201      	adds	r2, #1
 800c924:	e7ef      	b.n	800c906 <__ieee754_sqrt+0x13a>
 800c926:	4680      	mov	r8, r0
 800c928:	e7bd      	b.n	800c8a6 <__ieee754_sqrt+0xda>
 800c92a:	bf00      	nop
 800c92c:	7ff00000 	.word	0x7ff00000

0800c930 <with_errno>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	4604      	mov	r4, r0
 800c934:	460d      	mov	r5, r1
 800c936:	4616      	mov	r6, r2
 800c938:	f7fc fa80 	bl	8008e3c <__errno>
 800c93c:	4629      	mov	r1, r5
 800c93e:	6006      	str	r6, [r0, #0]
 800c940:	4620      	mov	r0, r4
 800c942:	bd70      	pop	{r4, r5, r6, pc}

0800c944 <xflow>:
 800c944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c946:	4614      	mov	r4, r2
 800c948:	461d      	mov	r5, r3
 800c94a:	b108      	cbz	r0, 800c950 <xflow+0xc>
 800c94c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c950:	e9cd 2300 	strd	r2, r3, [sp]
 800c954:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c958:	4620      	mov	r0, r4
 800c95a:	4629      	mov	r1, r5
 800c95c:	f7f3 fe5c 	bl	8000618 <__aeabi_dmul>
 800c960:	2222      	movs	r2, #34	; 0x22
 800c962:	b003      	add	sp, #12
 800c964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c968:	f7ff bfe2 	b.w	800c930 <with_errno>

0800c96c <__math_uflow>:
 800c96c:	b508      	push	{r3, lr}
 800c96e:	2200      	movs	r2, #0
 800c970:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c974:	f7ff ffe6 	bl	800c944 <xflow>
 800c978:	ec41 0b10 	vmov	d0, r0, r1
 800c97c:	bd08      	pop	{r3, pc}

0800c97e <__math_oflow>:
 800c97e:	b508      	push	{r3, lr}
 800c980:	2200      	movs	r2, #0
 800c982:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c986:	f7ff ffdd 	bl	800c944 <xflow>
 800c98a:	ec41 0b10 	vmov	d0, r0, r1
 800c98e:	bd08      	pop	{r3, pc}

0800c990 <fabs>:
 800c990:	ec51 0b10 	vmov	r0, r1, d0
 800c994:	ee10 2a10 	vmov	r2, s0
 800c998:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c99c:	ec43 2b10 	vmov	d0, r2, r3
 800c9a0:	4770      	bx	lr

0800c9a2 <finite>:
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	ed8d 0b00 	vstr	d0, [sp]
 800c9a8:	9801      	ldr	r0, [sp, #4]
 800c9aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c9ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c9b2:	0fc0      	lsrs	r0, r0, #31
 800c9b4:	b002      	add	sp, #8
 800c9b6:	4770      	bx	lr

0800c9b8 <scalbn>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	ec55 4b10 	vmov	r4, r5, d0
 800c9be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	462b      	mov	r3, r5
 800c9c6:	b99a      	cbnz	r2, 800c9f0 <scalbn+0x38>
 800c9c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c9cc:	4323      	orrs	r3, r4
 800c9ce:	d036      	beq.n	800ca3e <scalbn+0x86>
 800c9d0:	4b39      	ldr	r3, [pc, #228]	; (800cab8 <scalbn+0x100>)
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	ee10 0a10 	vmov	r0, s0
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f7f3 fe1d 	bl	8000618 <__aeabi_dmul>
 800c9de:	4b37      	ldr	r3, [pc, #220]	; (800cabc <scalbn+0x104>)
 800c9e0:	429e      	cmp	r6, r3
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	da10      	bge.n	800ca0a <scalbn+0x52>
 800c9e8:	a32b      	add	r3, pc, #172	; (adr r3, 800ca98 <scalbn+0xe0>)
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	e03a      	b.n	800ca66 <scalbn+0xae>
 800c9f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c9f4:	428a      	cmp	r2, r1
 800c9f6:	d10c      	bne.n	800ca12 <scalbn+0x5a>
 800c9f8:	ee10 2a10 	vmov	r2, s0
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	4629      	mov	r1, r5
 800ca00:	f7f3 fc54 	bl	80002ac <__adddf3>
 800ca04:	4604      	mov	r4, r0
 800ca06:	460d      	mov	r5, r1
 800ca08:	e019      	b.n	800ca3e <scalbn+0x86>
 800ca0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ca0e:	460b      	mov	r3, r1
 800ca10:	3a36      	subs	r2, #54	; 0x36
 800ca12:	4432      	add	r2, r6
 800ca14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ca18:	428a      	cmp	r2, r1
 800ca1a:	dd08      	ble.n	800ca2e <scalbn+0x76>
 800ca1c:	2d00      	cmp	r5, #0
 800ca1e:	a120      	add	r1, pc, #128	; (adr r1, 800caa0 <scalbn+0xe8>)
 800ca20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca24:	da1c      	bge.n	800ca60 <scalbn+0xa8>
 800ca26:	a120      	add	r1, pc, #128	; (adr r1, 800caa8 <scalbn+0xf0>)
 800ca28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca2c:	e018      	b.n	800ca60 <scalbn+0xa8>
 800ca2e:	2a00      	cmp	r2, #0
 800ca30:	dd08      	ble.n	800ca44 <scalbn+0x8c>
 800ca32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ca3e:	ec45 4b10 	vmov	d0, r4, r5
 800ca42:	bd70      	pop	{r4, r5, r6, pc}
 800ca44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ca48:	da19      	bge.n	800ca7e <scalbn+0xc6>
 800ca4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ca4e:	429e      	cmp	r6, r3
 800ca50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ca54:	dd0a      	ble.n	800ca6c <scalbn+0xb4>
 800ca56:	a112      	add	r1, pc, #72	; (adr r1, 800caa0 <scalbn+0xe8>)
 800ca58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1e2      	bne.n	800ca26 <scalbn+0x6e>
 800ca60:	a30f      	add	r3, pc, #60	; (adr r3, 800caa0 <scalbn+0xe8>)
 800ca62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca66:	f7f3 fdd7 	bl	8000618 <__aeabi_dmul>
 800ca6a:	e7cb      	b.n	800ca04 <scalbn+0x4c>
 800ca6c:	a10a      	add	r1, pc, #40	; (adr r1, 800ca98 <scalbn+0xe0>)
 800ca6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d0b8      	beq.n	800c9e8 <scalbn+0x30>
 800ca76:	a10e      	add	r1, pc, #56	; (adr r1, 800cab0 <scalbn+0xf8>)
 800ca78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca7c:	e7b4      	b.n	800c9e8 <scalbn+0x30>
 800ca7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca82:	3236      	adds	r2, #54	; 0x36
 800ca84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	4b0c      	ldr	r3, [pc, #48]	; (800cac0 <scalbn+0x108>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	e7e8      	b.n	800ca66 <scalbn+0xae>
 800ca94:	f3af 8000 	nop.w
 800ca98:	c2f8f359 	.word	0xc2f8f359
 800ca9c:	01a56e1f 	.word	0x01a56e1f
 800caa0:	8800759c 	.word	0x8800759c
 800caa4:	7e37e43c 	.word	0x7e37e43c
 800caa8:	8800759c 	.word	0x8800759c
 800caac:	fe37e43c 	.word	0xfe37e43c
 800cab0:	c2f8f359 	.word	0xc2f8f359
 800cab4:	81a56e1f 	.word	0x81a56e1f
 800cab8:	43500000 	.word	0x43500000
 800cabc:	ffff3cb0 	.word	0xffff3cb0
 800cac0:	3c900000 	.word	0x3c900000

0800cac4 <_init>:
 800cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac6:	bf00      	nop
 800cac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caca:	bc08      	pop	{r3}
 800cacc:	469e      	mov	lr, r3
 800cace:	4770      	bx	lr

0800cad0 <_fini>:
 800cad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad2:	bf00      	nop
 800cad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad6:	bc08      	pop	{r3}
 800cad8:	469e      	mov	lr, r3
 800cada:	4770      	bx	lr
