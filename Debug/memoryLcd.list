
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cf4  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008998  08008998  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008998  08008998  00018998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089a0  080089a0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089a0  080089a0  000189a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089a4  080089a4  000189a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080089a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000032f0  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003378  20003378  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015646  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d71  00000000  00000000  000356fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00038470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f80  00000000  00000000  00039518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002567d  00000000  00000000  0003a498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014199  00000000  00000000  0005fb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddc03  00000000  00000000  00073cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001518b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f98  00000000  00000000  00151904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005c8c 	.word	0x08005c8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08005c8c 	.word	0x08005c8c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
 80005b2:	4b5c      	ldr	r3, [pc, #368]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a5b      	ldr	r2, [pc, #364]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b59      	ldr	r3, [pc, #356]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	61bb      	str	r3, [r7, #24]
 80005c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	4b55      	ldr	r3, [pc, #340]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a54      	ldr	r2, [pc, #336]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b52      	ldr	r3, [pc, #328]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	4b4e      	ldr	r3, [pc, #312]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a4d      	ldr	r2, [pc, #308]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	4b47      	ldr	r3, [pc, #284]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a46      	ldr	r2, [pc, #280]	; (8000724 <MX_GPIO_Init+0x18c>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b44      	ldr	r3, [pc, #272]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	4b40      	ldr	r3, [pc, #256]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a3f      	ldr	r2, [pc, #252]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0310 	and.w	r3, r3, #16
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b39      	ldr	r3, [pc, #228]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a38      	ldr	r2, [pc, #224]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b36      	ldr	r3, [pc, #216]	; (8000724 <MX_GPIO_Init+0x18c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <MX_GPIO_Init+0x18c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a31      	ldr	r2, [pc, #196]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	482c      	ldr	r0, [pc, #176]	; (8000728 <MX_GPIO_Init+0x190>)
 8000678:	f001 fb3e 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000682:	482a      	ldr	r0, [pc, #168]	; (800072c <MX_GPIO_Init+0x194>)
 8000684:	f001 fb38 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	4828      	ldr	r0, [pc, #160]	; (8000730 <MX_GPIO_Init+0x198>)
 800068e:	f001 fb33 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000698:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4822      	ldr	r0, [pc, #136]	; (8000734 <MX_GPIO_Init+0x19c>)
 80006aa:	f001 f979 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006ae:	2340      	movs	r3, #64	; 0x40
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	4818      	ldr	r0, [pc, #96]	; (8000728 <MX_GPIO_Init+0x190>)
 80006c6:	f001 f96b 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006ca:	f244 0381 	movw	r3, #16513	; 0x4081
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4812      	ldr	r0, [pc, #72]	; (800072c <MX_GPIO_Init+0x194>)
 80006e4:	f001 f95c 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <MX_GPIO_Init+0x198>)
 8000700:	f001 f94e 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_GPIO_Init+0x198>)
 8000718:	f001 f942 	bl	80019a0 <HAL_GPIO_Init>

}
 800071c:	bf00      	nop
 800071e:	3730      	adds	r7, #48	; 0x30
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40020000 	.word	0x40020000
 800072c:	40020400 	.word	0x40020400
 8000730:	40021800 	.word	0x40021800
 8000734:	40020800 	.word	0x40020800

08000738 <test>:
#include "gps.h"

//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};

void test(char* buffer, gpsTime* time){
 8000738:	b580      	push	{r7, lr}
 800073a:	b09e      	sub	sp, #120	; 0x78
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]

	char* loc = strchr(buffer, '$');
 8000742:	2124      	movs	r1, #36	; 0x24
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f004 fa4b 	bl	8004be0 <strchr>
 800074a:	6778      	str	r0, [r7, #116]	; 0x74
	char code[] = "GNZDA";
 800074c:	4a2b      	ldr	r2, [pc, #172]	; (80007fc <test+0xc4>)
 800074e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000756:	6018      	str	r0, [r3, #0]
 8000758:	3304      	adds	r3, #4
 800075a:	8019      	strh	r1, [r3, #0]

	if(loc != NULL){
 800075c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800075e:	2b00      	cmp	r3, #0
 8000760:	d047      	beq.n	80007f2 <test+0xba>
	//	int diff = strncmp(loc+1, "GNZDA", sizeof(uint8_t)*5);
		char* pos = strstr(code, *buffer);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800076c:	4611      	mov	r1, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fa56 	bl	8004c20 <strstr>
 8000774:	6738      	str	r0, [r7, #112]	; 0x70
		char* end = strchr(pos, '*');
 8000776:	212a      	movs	r1, #42	; 0x2a
 8000778:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800077a:	f004 fa31 	bl	8004be0 <strchr>
 800077e:	66f8      	str	r0, [r7, #108]	; 0x6c
		int strl = (end-pos);
 8000780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	66bb      	str	r3, [r7, #104]	; 0x68
		char myStr[84] = {0};
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2250      	movs	r2, #80	; 0x50
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f004 fa1b 	bl	8004bd0 <memset>
//		should check if pos fits in myStr
		strncpy(myStr, pos, 83);
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2253      	movs	r2, #83	; 0x53
 80007a0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 fa29 	bl	8004bfa <strncpy>

		char* tok = strtok(myStr, ",");
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	4914      	ldr	r1, [pc, #80]	; (8000800 <test+0xc8>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fa4e 	bl	8004c50 <strtok>
 80007b4:	4603      	mov	r3, r0
 80007b6:	667b      	str	r3, [r7, #100]	; 0x64
		tok = strtok(NULL, ",");
 80007b8:	4911      	ldr	r1, [pc, #68]	; (8000800 <test+0xc8>)
 80007ba:	2000      	movs	r0, #0
 80007bc:	f004 fa48 	bl	8004c50 <strtok>
 80007c0:	4603      	mov	r3, r0
 80007c2:	667b      	str	r3, [r7, #100]	; 0x64

	//	int diff = strncmp(loc+1, "GPTXT", 5);

		if(pos != NULL){
 80007c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d013      	beq.n	80007f2 <test+0xba>
			memcpy(&time->hour, tok, 7);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2207      	movs	r2, #7
 80007ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80007d0:	4618      	mov	r0, r3
 80007d2:	f004 f9ef 	bl	8004bb4 <memcpy>
			memcpy(&time->minute, "Mm", 3);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	3307      	adds	r3, #7
 80007da:	2203      	movs	r2, #3
 80007dc:	4909      	ldr	r1, [pc, #36]	; (8000804 <test+0xcc>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 f9e8 	bl	8004bb4 <memcpy>
			memcpy(&time->second, "Ss", 3);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	330a      	adds	r3, #10
 80007e8:	2203      	movs	r2, #3
 80007ea:	4907      	ldr	r1, [pc, #28]	; (8000808 <test+0xd0>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 f9e1 	bl	8004bb4 <memcpy>

	}
	}
}
 80007f2:	bf00      	nop
 80007f4:	3778      	adds	r7, #120	; 0x78
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	08005cb0 	.word	0x08005cb0
 8000800:	08005ca4 	.word	0x08005ca4
 8000804:	08005ca8 	.word	0x08005ca8
 8000808:	08005cac 	.word	0x08005cac

0800080c <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8000816:	2307      	movs	r3, #7
 8000818:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8000826:	e010      	b.n	800084a <reverse_uint8+0x3e>
		result = result << 1;
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 800083c:	7bba      	ldrb	r2, [r7, #14]
 800083e:	7b7b      	ldrb	r3, [r7, #13]
 8000840:	4313      	orrs	r3, r2
 8000842:	73bb      	strb	r3, [r7, #14]
		times--;
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	3b01      	subs	r3, #1
 8000848:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1eb      	bne.n	8000828 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8000850:	7bbb      	ldrb	r3, [r7, #14]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
	updateSetting(0);
 8000866:	2000      	movs	r0, #0
 8000868:	f000 f824 	bl	80008b4 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 800086c:	2300      	movs	r3, #0
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	e014      	b.n	800089c <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8000872:	2300      	movs	r3, #0
 8000874:	80bb      	strh	r3, [r7, #4]
 8000876:	e00b      	b.n	8000890 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2232      	movs	r2, #50	; 0x32
 800087c:	fb02 f203 	mul.w	r2, r2, r3
 8000880:	88bb      	ldrh	r3, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <lcdClearBuffer+0x50>)
 8000886:	21ff      	movs	r1, #255	; 0xff
 8000888:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 800088a:	88bb      	ldrh	r3, [r7, #4]
 800088c:	3301      	adds	r3, #1
 800088e:	80bb      	strh	r3, [r7, #4]
 8000890:	88bb      	ldrh	r3, [r7, #4]
 8000892:	2b31      	cmp	r3, #49	; 0x31
 8000894:	d9f0      	bls.n	8000878 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	3301      	adds	r3, #1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2bef      	cmp	r3, #239	; 0xef
 80008a0:	d9e7      	bls.n	8000872 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 80008a2:	2001      	movs	r0, #1
 80008a4:	f000 f806 	bl	80008b4 <updateSetting>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000a8 	.word	0x200000a8

080008b4 <updateSetting>:

void updateSetting(uint8_t state){
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <updateSetting+0x1c>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	7013      	strb	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	20000000 	.word	0x20000000

080008d4 <lcdPutChar>:
//		lcdBuffer[bufferLoc + 2] &= ~((dataBlock2 << (8 - offset)) | (dataBlock3 >> offset));
//		lcdBuffer[bufferLoc + 3] &= ~(dataBlock3 << (8 - offset));
//	}
//
//}
void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 80008d4:	b480      	push	{r7}
 80008d6:	b087      	sub	sp, #28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4603      	mov	r3, r0
 80008de:	80fb      	strh	r3, [r7, #6]
 80008e0:	460b      	mov	r3, r1
 80008e2:	717b      	strb	r3, [r7, #5]
 80008e4:	4613      	mov	r3, r2
 80008e6:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	793a      	ldrb	r2, [r7, #4]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d304      	bcc.n	80008fc <lcdPutChar+0x28>
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	799b      	ldrb	r3, [r3, #6]
 80008f6:	793a      	ldrb	r2, [r7, #4]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d902      	bls.n	8000902 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	79db      	ldrb	r3, [r3, #7]
 8000900:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	b29b      	uxth	r3, r3
 8000912:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	885b      	ldrh	r3, [r3, #2]
 8000918:	461a      	mov	r2, r3
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000922:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8000924:	2300      	movs	r3, #0
 8000926:	75fb      	strb	r3, [r7, #23]
 8000928:	e09d      	b.n	8000a66 <lcdPutChar+0x192>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 800092a:	797a      	ldrb	r2, [r7, #5]
 800092c:	7dfb      	ldrb	r3, [r7, #23]
 800092e:	4413      	add	r3, r2
 8000930:	b29b      	uxth	r3, r3
 8000932:	461a      	mov	r2, r3
 8000934:	0092      	lsls	r2, r2, #2
 8000936:	4413      	add	r3, r2
 8000938:	461a      	mov	r2, r3
 800093a:	0091      	lsls	r1, r2, #2
 800093c:	461a      	mov	r2, r3
 800093e:	460b      	mov	r3, r1
 8000940:	4413      	add	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	b29a      	uxth	r2, r3
 8000946:	7cfb      	ldrb	r3, [r7, #19]
 8000948:	b29b      	uxth	r3, r3
 800094a:	4413      	add	r3, r2
 800094c:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 800094e:	793b      	ldrb	r3, [r7, #4]
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	7952      	ldrb	r2, [r2, #5]
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	8852      	ldrh	r2, [r2, #2]
 800095a:	fb02 f203 	mul.w	r2, r2, r3
 800095e:	7dfb      	ldrb	r3, [r7, #23]
 8000960:	7cb9      	ldrb	r1, [r7, #18]
 8000962:	fb01 f303 	mul.w	r3, r1, r3
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	3308      	adds	r3, #8
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	7d3b      	ldrb	r3, [r7, #20]
 8000978:	fa42 f303 	asr.w	r3, r2, r3
 800097c:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 800097e:	8a3b      	ldrh	r3, [r7, #16]
 8000980:	4a3f      	ldr	r2, [pc, #252]	; (8000a80 <lcdPutChar+0x1ac>)
 8000982:	5cd3      	ldrb	r3, [r2, r3]
 8000984:	b25a      	sxtb	r2, r3
 8000986:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800098a:	43db      	mvns	r3, r3
 800098c:	b25b      	sxtb	r3, r3
 800098e:	4013      	ands	r3, r2
 8000990:	b25a      	sxtb	r2, r3
 8000992:	8a3b      	ldrh	r3, [r7, #16]
 8000994:	b2d1      	uxtb	r1, r2
 8000996:	4a3a      	ldr	r2, [pc, #232]	; (8000a80 <lcdPutChar+0x1ac>)
 8000998:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	3308      	adds	r3, #8
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b25a      	sxtb	r2, r3
 80009a6:	7d3b      	ldrb	r3, [r7, #20]
 80009a8:	f1c3 0308 	rsb	r3, r3, #8
 80009ac:	21ff      	movs	r1, #255	; 0xff
 80009ae:	fa41 f303 	asr.w	r3, r1, r3
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	4013      	ands	r3, r2
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i <= (font->font_Width)>>3; i++){
 80009ba:	2301      	movs	r3, #1
 80009bc:	757b      	strb	r3, [r7, #21]
 80009be:	e029      	b.n	8000a14 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 80009c0:	7d7a      	ldrb	r2, [r7, #21]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4413      	add	r3, r2
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	7a1b      	ldrb	r3, [r3, #8]
 80009cc:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80009ce:	8a3a      	ldrh	r2, [r7, #16]
 80009d0:	7d7b      	ldrb	r3, [r7, #21]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <lcdPutChar+0x1ac>)
 80009d6:	5cd3      	ldrb	r3, [r2, r3]
 80009d8:	b25a      	sxtb	r2, r3
 80009da:	7db9      	ldrb	r1, [r7, #22]
 80009dc:	7d3b      	ldrb	r3, [r7, #20]
 80009de:	f1c3 0308 	rsb	r3, r3, #8
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	b259      	sxtb	r1, r3
 80009e8:	7af8      	ldrb	r0, [r7, #11]
 80009ea:	7d3b      	ldrb	r3, [r7, #20]
 80009ec:	fa40 f303 	asr.w	r3, r0, r3
 80009f0:	b25b      	sxtb	r3, r3
 80009f2:	430b      	orrs	r3, r1
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	4013      	ands	r3, r2
 80009fc:	b259      	sxtb	r1, r3
 80009fe:	8a3a      	ldrh	r2, [r7, #16]
 8000a00:	7d7b      	ldrb	r3, [r7, #21]
 8000a02:	4413      	add	r3, r2
 8000a04:	b2c9      	uxtb	r1, r1
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <lcdPutChar+0x1ac>)
 8000a08:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8000a0a:	7afb      	ldrb	r3, [r7, #11]
 8000a0c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i <= (font->font_Width)>>3; i++){
 8000a0e:	7d7b      	ldrb	r3, [r7, #21]
 8000a10:	3301      	adds	r3, #1
 8000a12:	757b      	strb	r3, [r7, #21]
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	7d7a      	ldrb	r2, [r7, #21]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d9ce      	bls.n	80009c0 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width)>>3) + 1] &= ~(dataBlock << (8-offset));
 8000a22:	8a3b      	ldrh	r3, [r7, #16]
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	7812      	ldrb	r2, [r2, #0]
 8000a28:	08d2      	lsrs	r2, r2, #3
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <lcdPutChar+0x1ac>)
 8000a32:	5cd3      	ldrb	r3, [r2, r3]
 8000a34:	b25a      	sxtb	r2, r3
 8000a36:	7db9      	ldrb	r1, [r7, #22]
 8000a38:	7d3b      	ldrb	r3, [r7, #20]
 8000a3a:	f1c3 0308 	rsb	r3, r3, #8
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	b25b      	sxtb	r3, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	4013      	ands	r3, r2
 8000a4a:	b259      	sxtb	r1, r3
 8000a4c:	8a3b      	ldrh	r3, [r7, #16]
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	08d2      	lsrs	r2, r2, #3
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	4413      	add	r3, r2
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b2c9      	uxtb	r1, r1
 8000a5c:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <lcdPutChar+0x1ac>)
 8000a5e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8000a60:	7dfb      	ldrb	r3, [r7, #23]
 8000a62:	3301      	adds	r3, #1
 8000a64:	75fb      	strb	r3, [r7, #23]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	7dfa      	ldrb	r2, [r7, #23]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	f4ff af5c 	bcc.w	800092a <lcdPutChar+0x56>
	}

}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	371c      	adds	r7, #28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	200000a8 	.word	0x200000a8

08000a84 <lcdPutStr>:

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60ba      	str	r2, [r7, #8]
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4603      	mov	r3, r0
 8000a90:	81fb      	strh	r3, [r7, #14]
 8000a92:	460b      	mov	r3, r1
 8000a94:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8000a96:	2300      	movs	r3, #0
 8000a98:	75fb      	strb	r3, [r7, #23]
 8000a9a:	e01a      	b.n	8000ad2 <lcdPutStr+0x4e>
		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	fb12 f303 	smulbb	r3, r2, r3
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	89fb      	ldrh	r3, [r7, #14]
 8000aae:	4413      	add	r3, r2
 8000ab0:	b298      	uxth	r0, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	785b      	ldrb	r3, [r3, #1]
 8000ab6:	7b7a      	ldrb	r2, [r7, #13]
 8000ab8:	fb12 f303 	smulbb	r3, r2, r3
 8000abc:	b2d9      	uxtb	r1, r3
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
 8000ac0:	68ba      	ldr	r2, [r7, #8]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f7ff ff04 	bl	80008d4 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	75fb      	strb	r3, [r7, #23]
 8000ad2:	7dfc      	ldrb	r4, [r7, #23]
 8000ad4:	68b8      	ldr	r0, [r7, #8]
 8000ad6:	f7ff fb8b 	bl	80001f0 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	429c      	cmp	r4, r3
 8000ade:	d3dd      	bcc.n	8000a9c <lcdPutStr+0x18>
//		  HAL_Delay(1);
		  }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	371c      	adds	r7, #28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}
	...

08000aec <lcdRefresh>:
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;

}
void lcdRefresh(void){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <lcdRefresh+0x7c>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d032      	beq.n	8000b60 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8000afa:	2201      	movs	r2, #1
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	481b      	ldr	r0, [pc, #108]	; (8000b6c <lcdRefresh+0x80>)
 8000b00:	f001 f8fa 	bl	8001cf8 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8000b04:	2301      	movs	r3, #1
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	e01c      	b.n	8000b44 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fe7d 	bl	800080c <reverse_uint8>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <lcdRefresh+0x84>)
 8000b18:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8000b1a:	2396      	movs	r3, #150	; 0x96
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	4914      	ldr	r1, [pc, #80]	; (8000b70 <lcdRefresh+0x84>)
 8000b20:	4814      	ldr	r0, [pc, #80]	; (8000b74 <lcdRefresh+0x88>)
 8000b22:	f001 fe1a 	bl	800275a <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	2232      	movs	r2, #50	; 0x32
 8000b2c:	fb02 f303 	mul.w	r3, r2, r3
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <lcdRefresh+0x8c>)
 8000b32:	1899      	adds	r1, r3, r2
 8000b34:	2396      	movs	r3, #150	; 0x96
 8000b36:	2232      	movs	r2, #50	; 0x32
 8000b38:	480e      	ldr	r0, [pc, #56]	; (8000b74 <lcdRefresh+0x88>)
 8000b3a:	f001 fe0e 	bl	800275a <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	3301      	adds	r3, #1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2bf1      	cmp	r3, #241	; 0xf1
 8000b48:	d9df      	bls.n	8000b0a <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8000b4a:	2396      	movs	r3, #150	; 0x96
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	490b      	ldr	r1, [pc, #44]	; (8000b7c <lcdRefresh+0x90>)
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <lcdRefresh+0x88>)
 8000b52:	f001 fe02 	bl	800275a <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8000b56:	2200      	movs	r2, #0
 8000b58:	2140      	movs	r1, #64	; 0x40
 8000b5a:	4804      	ldr	r0, [pc, #16]	; (8000b6c <lcdRefresh+0x80>)
 8000b5c:	f001 f8cc 	bl	8001cf8 <HAL_GPIO_WritePin>
	}
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	20000004 	.word	0x20000004
 8000b74:	200031f4 	.word	0x200031f4
 8000b78:	200000a8 	.word	0x200000a8
 8000b7c:	200000a4 	.word	0x200000a4

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f000 fcf5 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f859 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f7ff fd03 	bl	8000598 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b92:	f000 fbeb 	bl	800136c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000b96:	f000 f8e3 	bl	8000d60 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000b9a:	f000 faa1 	bl	80010e0 <MX_TIM1_Init>
  MX_TIM10_Init();
 8000b9e:	f000 fb41 	bl	8001224 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 8000ba2:	f000 fc0d 	bl	80013c0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart6, &znak, 1);

  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8000ba6:	481d      	ldr	r0, [pc, #116]	; (8000c1c <main+0x9c>)
 8000ba8:	f001 ffde 	bl	8002b68 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8000bac:	481b      	ldr	r0, [pc, #108]	; (8000c1c <main+0x9c>)
 8000bae:	f002 f82b 	bl	8002c08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4819      	ldr	r0, [pc, #100]	; (8000c1c <main+0x9c>)
 8000bb6:	f002 f8f1 	bl	8002d9c <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 8000bba:	4819      	ldr	r0, [pc, #100]	; (8000c20 <main+0xa0>)
 8000bbc:	f002 f824 	bl	8002c08 <HAL_TIM_Base_Start_IT>

  char text[] = "Pik!";
 8000bc0:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <main+0xa4>)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bc8:	6018      	str	r0, [r3, #0]
 8000bca:	3304      	adds	r3, #4
 8000bcc:	7019      	strb	r1, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  lcdClearBuffer();
 8000bce:	f7ff fe47 	bl	8000860 <lcdClearBuffer>
	  lcdRefresh();
 8000bd2:	f7ff ff8b 	bl	8000aec <lcdRefresh>
  while (1)
  {


	  HAL_UART_Receive(&huart6, &buffer, 600, 1000);
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000bde:	4912      	ldr	r1, [pc, #72]	; (8000c28 <main+0xa8>)
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <main+0xac>)
 8000be2:	f003 f89c 	bl	8003d1e <HAL_UART_Receive>
	  test(&buffer, &now);
 8000be6:	4912      	ldr	r1, [pc, #72]	; (8000c30 <main+0xb0>)
 8000be8:	480f      	ldr	r0, [pc, #60]	; (8000c28 <main+0xa8>)
 8000bea:	f7ff fda5 	bl	8000738 <test>
//				  break;
//			  }
//		  }
//		index++;
//		}
	  lcdClearBuffer();
 8000bee:	f7ff fe37 	bl	8000860 <lcdClearBuffer>
//	  lcdPutStr(0,0, ppp,dig5x9);
//	  lcdPutStr(0,1, qqq,dig5x9);
	  lcdPutStr(0,0, now.hour ,dig5x9);
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <main+0xb4>)
 8000bf4:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <main+0xb0>)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff ff43 	bl	8000a84 <lcdPutStr>
	  lcdPutStr(0,1, now.minute ,dig5x9);
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <main+0xb4>)
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <main+0xb8>)
 8000c02:	2101      	movs	r1, #1
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff ff3d 	bl	8000a84 <lcdPutStr>
	  lcdPutStr(0,2, now.second ,dig5x9);
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <main+0xb4>)
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <main+0xbc>)
 8000c0e:	2102      	movs	r1, #2
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff ff37 	bl	8000a84 <lcdPutStr>
	  lcdRefresh();
 8000c16:	f7ff ff69 	bl	8000aec <lcdRefresh>
  {
 8000c1a:	e7dc      	b.n	8000bd6 <main+0x56>
 8000c1c:	20003294 	.word	0x20003294
 8000c20:	2000324c 	.word	0x2000324c
 8000c24:	08005cb8 	.word	0x08005cb8
 8000c28:	20002f98 	.word	0x20002f98
 8000c2c:	20003320 	.word	0x20003320
 8000c30:	20000008 	.word	0x20000008
 8000c34:	08005cc0 	.word	0x08005cc0
 8000c38:	2000000f 	.word	0x2000000f
 8000c3c:	20000012 	.word	0x20000012

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b094      	sub	sp, #80	; 0x50
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2230      	movs	r2, #48	; 0x30
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 ffbe 	bl	8004bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <SystemClock_Config+0xcc>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <SystemClock_Config+0xcc>)
 8000c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <SystemClock_Config+0xcc>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <SystemClock_Config+0xd0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a21      	ldr	r2, [pc, #132]	; (8000d10 <SystemClock_Config+0xd0>)
 8000c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <SystemClock_Config+0xd0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ca0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000caa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cb4:	23a8      	movs	r3, #168	; 0xa8
 8000cb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 0320 	add.w	r3, r7, #32
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 f84b 	bl	8001d60 <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cd0:	f000 f840 	bl	8000d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 faac 	bl	8002250 <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cfe:	f000 f829 	bl	8000d54 <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3750      	adds	r7, #80	; 0x50
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d103      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d26:	2101      	movs	r1, #1
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d2a:	f000 fffe 	bl	8001d2a <HAL_GPIO_TogglePin>
//		lcdRefresh();

	}
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40014400 	.word	0x40014400
 8000d3c:	40020400 	.word	0x40020400

08000d40 <HAL_UART_RxCpltCallback>:
char currChar, index;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
//		} else {
////			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//			HAL_UART_Receive_IT(&huart6, &znak,1);
//		}
	}
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <Error_Handler+0x8>
	...

08000d60 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000d66:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <MX_SPI1_Init+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000d6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000d94:	2220      	movs	r2, #32
 8000d96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000dac:	220a      	movs	r2, #10
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_SPI1_Init+0x64>)
 8000db2:	f001 fc49 	bl	8002648 <HAL_SPI_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dbc:	f7ff ffca 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200031f4 	.word	0x200031f4
 8000dc8:	40013000 	.word	0x40013000

08000dcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <HAL_SPI_MspInit+0x84>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12b      	bne.n	8000e46 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e26:	23a0      	movs	r3, #160	; 0xa0
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e36:	2305      	movs	r3, #5
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_SPI_MspInit+0x8c>)
 8000e42:	f000 fdad 	bl	80019a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40013000 	.word	0x40013000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef8:	f000 fb8e 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000f06:	f002 f811 	bl	8002f2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000f0c:	f002 f80e 	bl	8002f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20003294 	.word	0x20003294
 8000f18:	2000324c 	.word	0x2000324c

08000f1c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <USART6_IRQHandler+0x10>)
 8000f22:	f002 ff9f 	bl	8003e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20003320 	.word	0x20003320

08000f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	return 1;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_kill>:

int _kill(int pid, int sig)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f4a:	f003 fe09 	bl	8004b60 <__errno>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2216      	movs	r2, #22
 8000f52:	601a      	str	r2, [r3, #0]
	return -1;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_exit>:

void _exit (int status)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ffe7 	bl	8000f40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f72:	e7fe      	b.n	8000f72 <_exit+0x12>

08000f74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f86:	f3af 8000 	nop.w
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
	}

return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e009      	b.n	8000fd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf1      	blt.n	8000fc0 <_write+0x12>
	}
	return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:

int _close(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100e:	605a      	str	r2, [r3, #4]
	return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_isatty>:

int _isatty(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f003 fd6e 	bl	8004b60 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20030000 	.word	0x20030000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	20002f88 	.word	0x20002f88
 80010b8:	20003378 	.word	0x20003378

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b096      	sub	sp, #88	; 0x58
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2220      	movs	r2, #32
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fd59 	bl	8004bd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800111e:	4b3f      	ldr	r3, [pc, #252]	; (800121c <MX_TIM1_Init+0x13c>)
 8001120:	4a3f      	ldr	r2, [pc, #252]	; (8001220 <MX_TIM1_Init+0x140>)
 8001122:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8001124:	4b3d      	ldr	r3, [pc, #244]	; (800121c <MX_TIM1_Init+0x13c>)
 8001126:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800112a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b3b      	ldr	r3, [pc, #236]	; (800121c <MX_TIM1_Init+0x13c>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <MX_TIM1_Init+0x13c>)
 8001134:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001138:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b38      	ldr	r3, [pc, #224]	; (800121c <MX_TIM1_Init+0x13c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <MX_TIM1_Init+0x13c>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001146:	4b35      	ldr	r3, [pc, #212]	; (800121c <MX_TIM1_Init+0x13c>)
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800114c:	4833      	ldr	r0, [pc, #204]	; (800121c <MX_TIM1_Init+0x13c>)
 800114e:	f001 fd0b 	bl	8002b68 <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001158:	f7ff fdfc 	bl	8000d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001162:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001166:	4619      	mov	r1, r3
 8001168:	482c      	ldr	r0, [pc, #176]	; (800121c <MX_TIM1_Init+0x13c>)
 800116a:	f002 f8a9 	bl	80032c0 <HAL_TIM_ConfigClockSource>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001174:	f7ff fdee 	bl	8000d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001178:	4828      	ldr	r0, [pc, #160]	; (800121c <MX_TIM1_Init+0x13c>)
 800117a:	f001 fdb5 	bl	8002ce8 <HAL_TIM_PWM_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001184:	f7ff fde6 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001190:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001194:	4619      	mov	r1, r3
 8001196:	4821      	ldr	r0, [pc, #132]	; (800121c <MX_TIM1_Init+0x13c>)
 8001198:	f002 fc92 	bl	8003ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80011a2:	f7ff fdd7 	bl	8000d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	; 0x60
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	4814      	ldr	r0, [pc, #80]	; (800121c <MX_TIM1_Init+0x13c>)
 80011cc:	f001 ffb6 	bl	800313c <HAL_TIM_PWM_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80011d6:	f7ff fdbd 	bl	8000d54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <MX_TIM1_Init+0x13c>)
 80011fe:	f002 fcdb 	bl	8003bb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001208:	f7ff fda4 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <MX_TIM1_Init+0x13c>)
 800120e:	f000 f873 	bl	80012f8 <HAL_TIM_MspPostInit>

}
 8001212:	bf00      	nop
 8001214:	3758      	adds	r7, #88	; 0x58
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20003294 	.word	0x20003294
 8001220:	40010000 	.word	0x40010000

08001224 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_TIM10_Init+0x40>)
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <MX_TIM10_Init+0x44>)
 800122c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <MX_TIM10_Init+0x40>)
 8001230:	f244 129f 	movw	r2, #16799	; 0x419f
 8001234:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_TIM10_Init+0x40>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 499;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_TIM10_Init+0x40>)
 800123e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001242:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <MX_TIM10_Init+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_TIM10_Init+0x40>)
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_TIM10_Init+0x40>)
 8001252:	f001 fc89 	bl	8002b68 <HAL_TIM_Base_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800125c:	f7ff fd7a 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000324c 	.word	0x2000324c
 8001268:	40014400 	.word	0x40014400

0800126c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <HAL_TIM_Base_MspInit+0x80>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d116      	bne.n	80012ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a1a      	ldr	r2, [pc, #104]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2019      	movs	r0, #25
 80012a0:	f000 fab5 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012a4:	2019      	movs	r0, #25
 80012a6:	f000 face 	bl	8001846 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80012aa:	e01a      	b.n	80012e2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM10)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <HAL_TIM_Base_MspInit+0x88>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d115      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2019      	movs	r0, #25
 80012d8:	f000 fa99 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012dc:	2019      	movs	r0, #25
 80012de:	f000 fab2 	bl	8001846 <HAL_NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40010000 	.word	0x40010000
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40014400 	.word	0x40014400

080012f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_TIM_MspPostInit+0x68>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d11e      	bne.n	8001358 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_TIM_MspPostInit+0x6c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <HAL_TIM_MspPostInit+0x6c>)
 8001324:	f043 0310 	orr.w	r3, r3, #16
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_TIM_MspPostInit+0x6c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4619      	mov	r1, r3
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <HAL_TIM_MspPostInit+0x70>)
 8001354:	f000 fb24 	bl	80019a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40010000 	.word	0x40010000
 8001364:	40023800 	.word	0x40023800
 8001368:	40021000 	.word	0x40021000

0800136c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <MX_USART3_UART_Init+0x50>)
 8001374:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 80013a4:	f002 fc6e 	bl	8003c84 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013ae:	f7ff fcd1 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200032dc 	.word	0x200032dc
 80013bc:	40004800 	.word	0x40004800

080013c0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_USART6_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <MX_USART6_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_USART6_UART_Init+0x4c>)
 80013cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_USART6_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_USART6_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_USART6_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_USART6_UART_Init+0x4c>)
 80013e6:	2204      	movs	r2, #4
 80013e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_USART6_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_USART6_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_USART6_UART_Init+0x4c>)
 80013f8:	f002 fc44 	bl	8003c84 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f7ff fca7 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20003320 	.word	0x20003320
 8001410:	40011400 	.word	0x40011400

08001414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a36      	ldr	r2, [pc, #216]	; (800150c <HAL_UART_MspInit+0xf8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d12d      	bne.n	8001492 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <HAL_UART_MspInit+0xfc>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a34      	ldr	r2, [pc, #208]	; (8001510 <HAL_UART_MspInit+0xfc>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b32      	ldr	r3, [pc, #200]	; (8001510 <HAL_UART_MspInit+0xfc>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <HAL_UART_MspInit+0xfc>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a2d      	ldr	r2, [pc, #180]	; (8001510 <HAL_UART_MspInit+0xfc>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <HAL_UART_MspInit+0xfc>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800146e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001480:	2307      	movs	r3, #7
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4619      	mov	r1, r3
 800148a:	4822      	ldr	r0, [pc, #136]	; (8001514 <HAL_UART_MspInit+0x100>)
 800148c:	f000 fa88 	bl	80019a0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001490:	e038      	b.n	8001504 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a20      	ldr	r2, [pc, #128]	; (8001518 <HAL_UART_MspInit+0x104>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d133      	bne.n	8001504 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_UART_MspInit+0xfc>)
 80014a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a4:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <HAL_UART_MspInit+0xfc>)
 80014a6:	f043 0320 	orr.w	r3, r3, #32
 80014aa:	6453      	str	r3, [r2, #68]	; 0x44
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_UART_MspInit+0xfc>)
 80014ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_UART_MspInit+0xfc>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4a13      	ldr	r2, [pc, #76]	; (8001510 <HAL_UART_MspInit+0xfc>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6313      	str	r3, [r2, #48]	; 0x30
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_UART_MspInit+0xfc>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014d4:	23c0      	movs	r3, #192	; 0xc0
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014e4:	2308      	movs	r3, #8
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <HAL_UART_MspInit+0x108>)
 80014f0:	f000 fa56 	bl	80019a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	2047      	movs	r0, #71	; 0x47
 80014fa:	f000 f988 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80014fe:	2047      	movs	r0, #71	; 0x47
 8001500:	f000 f9a1 	bl	8001846 <HAL_NVIC_EnableIRQ>
}
 8001504:	bf00      	nop
 8001506:	3730      	adds	r7, #48	; 0x30
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40004800 	.word	0x40004800
 8001510:	40023800 	.word	0x40023800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40011400 	.word	0x40011400
 800151c:	40020800 	.word	0x40020800

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001558 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001526:	490e      	ldr	r1, [pc, #56]	; (8001560 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800153c:	4c0b      	ldr	r4, [pc, #44]	; (800156c <LoopFillZerobss+0x26>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800154a:	f7ff fdb7 	bl	80010bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154e:	f003 fb0d 	bl	8004b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f7ff fb15 	bl	8000b80 <main>
  bx  lr    
 8001556:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001558:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001564:	080089a8 	.word	0x080089a8
  ldr r2, =_sbss
 8001568:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800156c:	20003378 	.word	0x20003378

08001570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC_IRQHandler>
	...

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <HAL_Init+0x40>)
 800157e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_Init+0x40>)
 800158a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_Init+0x40>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 f92b 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f808 	bl	80015b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f7ff fc58 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x54>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x58>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f943 	bl	8001862 <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f000 f90b 	bl	800180e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_InitTick+0x5c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000018 	.word	0x20000018
 8001610:	20000020 	.word	0x20000020
 8001614:	2000001c 	.word	0x2000001c

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000020 	.word	0x20000020
 800163c:	20003364 	.word	0x20003364

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20003364 	.word	0x20003364

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	4907      	ldr	r1, [pc, #28]	; (80016f4 <__NVIC_EnableIRQ+0x38>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0a      	blt.n	8001722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	490c      	ldr	r1, [pc, #48]	; (8001744 <__NVIC_SetPriority+0x4c>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	440b      	add	r3, r1
 800171c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001720:	e00a      	b.n	8001738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4908      	ldr	r1, [pc, #32]	; (8001748 <__NVIC_SetPriority+0x50>)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3b04      	subs	r3, #4
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	440b      	add	r3, r1
 8001736:	761a      	strb	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f1c3 0307 	rsb	r3, r3, #7
 8001766:	2b04      	cmp	r3, #4
 8001768:	bf28      	it	cs
 800176a:	2304      	movcs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3304      	adds	r3, #4
 8001772:	2b06      	cmp	r3, #6
 8001774:	d902      	bls.n	800177c <NVIC_EncodePriority+0x30>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3b03      	subs	r3, #3
 800177a:	e000      	b.n	800177e <NVIC_EncodePriority+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43d9      	mvns	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	4313      	orrs	r3, r2
         );
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	; 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c4:	d301      	bcc.n	80017ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00f      	b.n	80017ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <SysTick_Config+0x40>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d2:	210f      	movs	r1, #15
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f7ff ff8e 	bl	80016f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <SysTick_Config+0x40>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <SysTick_Config+0x40>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff29 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001820:	f7ff ff3e 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 8001824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ff8e 	bl	800174c <NVIC_EncodePriority>
 8001830:	4602      	mov	r2, r0
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff5d 	bl	80016f8 <__NVIC_SetPriority>
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff31 	bl	80016bc <__NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffa2 	bl	80017b4 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff feda 	bl	8001640 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d008      	beq.n	80018ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e052      	b.n	8001952 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0216 	bic.w	r2, r2, #22
 80018ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <HAL_DMA_Abort+0x62>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0208 	bic.w	r2, r2, #8
 80018ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fc:	e013      	b.n	8001926 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fe:	f7ff fe9f 	bl	8001640 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b05      	cmp	r3, #5
 800190a:	d90c      	bls.n	8001926 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2220      	movs	r2, #32
 8001910:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e015      	b.n	8001952 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e4      	bne.n	80018fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	223f      	movs	r2, #63	; 0x3f
 800193a:	409a      	lsls	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d004      	beq.n	8001978 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e00c      	b.n	8001992 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2205      	movs	r2, #5
 800197c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	e177      	b.n	8001cac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019bc:	2201      	movs	r2, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f040 8166 	bne.w	8001ca6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d005      	beq.n	80019f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d130      	bne.n	8001a54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 0201 	and.w	r2, r3, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d017      	beq.n	8001a90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d123      	bne.n	8001ae4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3208      	adds	r2, #8
 8001aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	08da      	lsrs	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3208      	adds	r2, #8
 8001ade:	69b9      	ldr	r1, [r7, #24]
 8001ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0203 	and.w	r2, r3, #3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80c0 	beq.w	8001ca6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <HAL_GPIO_Init+0x324>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a65      	ldr	r2, [pc, #404]	; (8001cc4 <HAL_GPIO_Init+0x324>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <HAL_GPIO_Init+0x324>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b42:	4a61      	ldr	r2, [pc, #388]	; (8001cc8 <HAL_GPIO_Init+0x328>)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a58      	ldr	r2, [pc, #352]	; (8001ccc <HAL_GPIO_Init+0x32c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d037      	beq.n	8001bde <HAL_GPIO_Init+0x23e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a57      	ldr	r2, [pc, #348]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d031      	beq.n	8001bda <HAL_GPIO_Init+0x23a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a56      	ldr	r2, [pc, #344]	; (8001cd4 <HAL_GPIO_Init+0x334>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d02b      	beq.n	8001bd6 <HAL_GPIO_Init+0x236>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a55      	ldr	r2, [pc, #340]	; (8001cd8 <HAL_GPIO_Init+0x338>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d025      	beq.n	8001bd2 <HAL_GPIO_Init+0x232>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a54      	ldr	r2, [pc, #336]	; (8001cdc <HAL_GPIO_Init+0x33c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01f      	beq.n	8001bce <HAL_GPIO_Init+0x22e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a53      	ldr	r2, [pc, #332]	; (8001ce0 <HAL_GPIO_Init+0x340>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x22a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <HAL_GPIO_Init+0x344>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x226>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_GPIO_Init+0x348>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x222>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a50      	ldr	r2, [pc, #320]	; (8001cec <HAL_GPIO_Init+0x34c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x21e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x21a>
 8001bb6:	2309      	movs	r3, #9
 8001bb8:	e012      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bba:	230a      	movs	r3, #10
 8001bbc:	e010      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	e00e      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	e00c      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	e00a      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bca:	2305      	movs	r3, #5
 8001bcc:	e008      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e004      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bde:	2300      	movs	r3, #0
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f002 0203 	and.w	r2, r2, #3
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	4093      	lsls	r3, r2
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf0:	4935      	ldr	r1, [pc, #212]	; (8001cc8 <HAL_GPIO_Init+0x328>)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c22:	4a34      	ldr	r2, [pc, #208]	; (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c28:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4c:	4a29      	ldr	r2, [pc, #164]	; (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c52:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c76:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca0:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <HAL_GPIO_Init+0x354>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	f67f ae84 	bls.w	80019bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40020800 	.word	0x40020800
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40021400 	.word	0x40021400
 8001ce4:	40021800 	.word	0x40021800
 8001ce8:	40021c00 	.word	0x40021c00
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40022400 	.word	0x40022400
 8001cf4:	40013c00 	.word	0x40013c00

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	619a      	str	r2, [r3, #24]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d3c:	887a      	ldrh	r2, [r7, #2]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4013      	ands	r3, r2
 8001d42:	041a      	lsls	r2, r3, #16
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	400b      	ands	r3, r1
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	619a      	str	r2, [r3, #24]
}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e264      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d075      	beq.n	8001e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d7e:	4ba3      	ldr	r3, [pc, #652]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d00c      	beq.n	8001da4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8a:	4ba0      	ldr	r3, [pc, #640]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d112      	bne.n	8001dbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d96:	4b9d      	ldr	r3, [pc, #628]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001da2:	d10b      	bne.n	8001dbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	4b99      	ldr	r3, [pc, #612]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d05b      	beq.n	8001e68 <HAL_RCC_OscConfig+0x108>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d157      	bne.n	8001e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e23f      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x74>
 8001dc6:	4b91      	ldr	r3, [pc, #580]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a90      	ldr	r2, [pc, #576]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e01d      	b.n	8001e10 <HAL_RCC_OscConfig+0xb0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x98>
 8001dde:	4b8b      	ldr	r3, [pc, #556]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a8a      	ldr	r2, [pc, #552]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a87      	ldr	r2, [pc, #540]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0xb0>
 8001df8:	4b84      	ldr	r3, [pc, #528]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a83      	ldr	r2, [pc, #524]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b81      	ldr	r3, [pc, #516]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a80      	ldr	r2, [pc, #512]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fc12 	bl	8001640 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fc0e 	bl	8001640 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e204      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0xc0>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fbfe 	bl	8001640 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff fbfa 	bl	8001640 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e1f0      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	4b6c      	ldr	r3, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0xe8>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d063      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e76:	4b65      	ldr	r3, [pc, #404]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e82:	4b62      	ldr	r3, [pc, #392]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e8e:	4b5f      	ldr	r3, [pc, #380]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d116      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	4b5c      	ldr	r3, [pc, #368]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x152>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e1c4      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb2:	4b56      	ldr	r3, [pc, #344]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4952      	ldr	r1, [pc, #328]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	e03a      	b.n	8001f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d020      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed0:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <HAL_RCC_OscConfig+0x2b0>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fbb3 	bl	8001640 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ede:	f7ff fbaf 	bl	8001640 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1a5      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	4b46      	ldr	r3, [pc, #280]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efc:	4b43      	ldr	r3, [pc, #268]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4940      	ldr	r1, [pc, #256]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
 8001f10:	e015      	b.n	8001f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f12:	4b3f      	ldr	r3, [pc, #252]	; (8002010 <HAL_RCC_OscConfig+0x2b0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff fb92 	bl	8001640 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f20:	f7ff fb8e 	bl	8001640 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e184      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	4b36      	ldr	r3, [pc, #216]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d030      	beq.n	8001fac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d016      	beq.n	8001f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <HAL_RCC_OscConfig+0x2b4>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff fb72 	bl	8001640 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f60:	f7ff fb6e 	bl	8001640 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e164      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	4b26      	ldr	r3, [pc, #152]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x200>
 8001f7e:	e015      	b.n	8001fac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_OscConfig+0x2b4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fb5b 	bl	8001640 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fb57 	bl	8001640 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e14d      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a0 	beq.w	80020fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10f      	bne.n	8001fea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_OscConfig+0x2b8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d121      	bne.n	800203a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_RCC_OscConfig+0x2b8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a07      	ldr	r2, [pc, #28]	; (8002018 <HAL_RCC_OscConfig+0x2b8>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002002:	f7ff fb1d 	bl	8001640 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	e011      	b.n	800202e <HAL_RCC_OscConfig+0x2ce>
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	42470000 	.word	0x42470000
 8002014:	42470e80 	.word	0x42470e80
 8002018:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201c:	f7ff fb10 	bl	8001640 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e106      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202e:	4b85      	ldr	r3, [pc, #532]	; (8002244 <HAL_RCC_OscConfig+0x4e4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d106      	bne.n	8002050 <HAL_RCC_OscConfig+0x2f0>
 8002042:	4b81      	ldr	r3, [pc, #516]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002046:	4a80      	ldr	r2, [pc, #512]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6713      	str	r3, [r2, #112]	; 0x70
 800204e:	e01c      	b.n	800208a <HAL_RCC_OscConfig+0x32a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b05      	cmp	r3, #5
 8002056:	d10c      	bne.n	8002072 <HAL_RCC_OscConfig+0x312>
 8002058:	4b7b      	ldr	r3, [pc, #492]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	4a7a      	ldr	r2, [pc, #488]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6713      	str	r3, [r2, #112]	; 0x70
 8002064:	4b78      	ldr	r3, [pc, #480]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a77      	ldr	r2, [pc, #476]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
 8002070:	e00b      	b.n	800208a <HAL_RCC_OscConfig+0x32a>
 8002072:	4b75      	ldr	r3, [pc, #468]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	4a74      	ldr	r2, [pc, #464]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6713      	str	r3, [r2, #112]	; 0x70
 800207e:	4b72      	ldr	r3, [pc, #456]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	4a71      	ldr	r2, [pc, #452]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d015      	beq.n	80020be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002092:	f7ff fad5 	bl	8001640 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7ff fad1 	bl	8001640 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e0c5      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	4b65      	ldr	r3, [pc, #404]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ee      	beq.n	800209a <HAL_RCC_OscConfig+0x33a>
 80020bc:	e014      	b.n	80020e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7ff fabf 	bl	8001640 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff fabb 	bl	8001640 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0af      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020dc:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ee      	bne.n	80020c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e8:	7dfb      	ldrb	r3, [r7, #23]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ee:	4b56      	ldr	r3, [pc, #344]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a55      	ldr	r2, [pc, #340]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 80020f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 809b 	beq.w	800223a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002104:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	d05c      	beq.n	80021ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d141      	bne.n	800219c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002118:	4b4c      	ldr	r3, [pc, #304]	; (800224c <HAL_RCC_OscConfig+0x4ec>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fa8f 	bl	8001640 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002126:	f7ff fa8b 	bl	8001640 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e081      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002138:	4b43      	ldr	r3, [pc, #268]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	019b      	lsls	r3, r3, #6
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	3b01      	subs	r3, #1
 800215e:	041b      	lsls	r3, r3, #16
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	061b      	lsls	r3, r3, #24
 8002168:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216e:	4b37      	ldr	r3, [pc, #220]	; (800224c <HAL_RCC_OscConfig+0x4ec>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fa64 	bl	8001640 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff fa60 	bl	8001640 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e056      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218e:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x41c>
 800219a:	e04e      	b.n	800223a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219c:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_RCC_OscConfig+0x4ec>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7ff fa4d 	bl	8001640 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021aa:	f7ff fa49 	bl	8001640 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e03f      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021bc:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f0      	bne.n	80021aa <HAL_RCC_OscConfig+0x44a>
 80021c8:	e037      	b.n	800223a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e032      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021d6:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <HAL_RCC_OscConfig+0x4e8>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d028      	beq.n	8002236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d121      	bne.n	8002236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d11a      	bne.n	8002236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002206:	4013      	ands	r3, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800220c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800220e:	4293      	cmp	r3, r2
 8002210:	d111      	bne.n	8002236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	3b01      	subs	r3, #1
 8002220:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d107      	bne.n	8002236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40007000 	.word	0x40007000
 8002248:	40023800 	.word	0x40023800
 800224c:	42470060 	.word	0x42470060

08002250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0cc      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002264:	4b68      	ldr	r3, [pc, #416]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d90c      	bls.n	800228c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b65      	ldr	r3, [pc, #404]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0b8      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a4:	4b59      	ldr	r3, [pc, #356]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a58      	ldr	r2, [pc, #352]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022bc:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	4a52      	ldr	r2, [pc, #328]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c8:	4b50      	ldr	r3, [pc, #320]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	494d      	ldr	r1, [pc, #308]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d044      	beq.n	8002370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d119      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e07f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d003      	beq.n	800230e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230a:	2b03      	cmp	r3, #3
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b3f      	ldr	r3, [pc, #252]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e06f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	4b3b      	ldr	r3, [pc, #236]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e067      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232e:	4b37      	ldr	r3, [pc, #220]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f023 0203 	bic.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4934      	ldr	r1, [pc, #208]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002340:	f7ff f97e 	bl	8001640 <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7ff f97a 	bl	8001640 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e04f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 020c 	and.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d1eb      	bne.n	8002348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b25      	ldr	r3, [pc, #148]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d20c      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e032      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4916      	ldr	r1, [pc, #88]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	490e      	ldr	r1, [pc, #56]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023d6:	f000 f821 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	490a      	ldr	r1, [pc, #40]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	5ccb      	ldrb	r3, [r1, r3]
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f8de 	bl	80015b8 <HAL_InitTick>

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023c00 	.word	0x40023c00
 800240c:	40023800 	.word	0x40023800
 8002410:	08008834 	.word	0x08008834
 8002414:	20000018 	.word	0x20000018
 8002418:	2000001c 	.word	0x2000001c

0800241c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	2300      	movs	r3, #0
 800242e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002434:	4b67      	ldr	r3, [pc, #412]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b08      	cmp	r3, #8
 800243e:	d00d      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x40>
 8002440:	2b08      	cmp	r3, #8
 8002442:	f200 80bd 	bhi.w	80025c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x34>
 800244a:	2b04      	cmp	r3, #4
 800244c:	d003      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x3a>
 800244e:	e0b7      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002450:	4b61      	ldr	r3, [pc, #388]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002452:	60bb      	str	r3, [r7, #8]
       break;
 8002454:	e0b7      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002456:	4b61      	ldr	r3, [pc, #388]	; (80025dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002458:	60bb      	str	r3, [r7, #8]
      break;
 800245a:	e0b4      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800245c:	4b5d      	ldr	r3, [pc, #372]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002464:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002466:	4b5b      	ldr	r3, [pc, #364]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d04d      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002472:	4b58      	ldr	r3, [pc, #352]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	099b      	lsrs	r3, r3, #6
 8002478:	461a      	mov	r2, r3
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002482:	f04f 0100 	mov.w	r1, #0
 8002486:	ea02 0800 	and.w	r8, r2, r0
 800248a:	ea03 0901 	and.w	r9, r3, r1
 800248e:	4640      	mov	r0, r8
 8002490:	4649      	mov	r1, r9
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	014b      	lsls	r3, r1, #5
 800249c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024a0:	0142      	lsls	r2, r0, #5
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	ebb0 0008 	subs.w	r0, r0, r8
 80024aa:	eb61 0109 	sbc.w	r1, r1, r9
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	018b      	lsls	r3, r1, #6
 80024b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024bc:	0182      	lsls	r2, r0, #6
 80024be:	1a12      	subs	r2, r2, r0
 80024c0:	eb63 0301 	sbc.w	r3, r3, r1
 80024c4:	f04f 0000 	mov.w	r0, #0
 80024c8:	f04f 0100 	mov.w	r1, #0
 80024cc:	00d9      	lsls	r1, r3, #3
 80024ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024d2:	00d0      	lsls	r0, r2, #3
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	eb12 0208 	adds.w	r2, r2, r8
 80024dc:	eb43 0309 	adc.w	r3, r3, r9
 80024e0:	f04f 0000 	mov.w	r0, #0
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	0259      	lsls	r1, r3, #9
 80024ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024ee:	0250      	lsls	r0, r2, #9
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	f7fd fece 	bl	80002a0 <__aeabi_uldivmod>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4613      	mov	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e04a      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	099b      	lsrs	r3, r3, #6
 8002514:	461a      	mov	r2, r3
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	ea02 0400 	and.w	r4, r2, r0
 8002526:	ea03 0501 	and.w	r5, r3, r1
 800252a:	4620      	mov	r0, r4
 800252c:	4629      	mov	r1, r5
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	014b      	lsls	r3, r1, #5
 8002538:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800253c:	0142      	lsls	r2, r0, #5
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	1b00      	subs	r0, r0, r4
 8002544:	eb61 0105 	sbc.w	r1, r1, r5
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	018b      	lsls	r3, r1, #6
 8002552:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002556:	0182      	lsls	r2, r0, #6
 8002558:	1a12      	subs	r2, r2, r0
 800255a:	eb63 0301 	sbc.w	r3, r3, r1
 800255e:	f04f 0000 	mov.w	r0, #0
 8002562:	f04f 0100 	mov.w	r1, #0
 8002566:	00d9      	lsls	r1, r3, #3
 8002568:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800256c:	00d0      	lsls	r0, r2, #3
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	1912      	adds	r2, r2, r4
 8002574:	eb45 0303 	adc.w	r3, r5, r3
 8002578:	f04f 0000 	mov.w	r0, #0
 800257c:	f04f 0100 	mov.w	r1, #0
 8002580:	0299      	lsls	r1, r3, #10
 8002582:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002586:	0290      	lsls	r0, r2, #10
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	461a      	mov	r2, r3
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	f7fd fe82 	bl	80002a0 <__aeabi_uldivmod>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4613      	mov	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	3301      	adds	r3, #1
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	60bb      	str	r3, [r7, #8]
      break;
 80025be:	e002      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80025c2:	60bb      	str	r3, [r7, #8]
      break;
 80025c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c6:	68bb      	ldr	r3, [r7, #8]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	007a1200 	.word	0x007a1200

080025e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000018 	.word	0x20000018

080025f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025fc:	f7ff fff0 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0a9b      	lsrs	r3, r3, #10
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4903      	ldr	r1, [pc, #12]	; (800261c <HAL_RCC_GetPCLK1Freq+0x24>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	08008844 	.word	0x08008844

08002620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002624:	f7ff ffdc 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0b5b      	lsrs	r3, r3, #13
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4903      	ldr	r1, [pc, #12]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	08008844 	.word	0x08008844

08002648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e07b      	b.n	8002752 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	2b00      	cmp	r3, #0
 8002660:	d108      	bne.n	8002674 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800266a:	d009      	beq.n	8002680 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
 8002672:	e005      	b.n	8002680 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe fb96 	bl	8000dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002704:	ea42 0103 	orr.w	r1, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	0c1b      	lsrs	r3, r3, #16
 800271e:	f003 0104 	and.w	r1, r3, #4
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	f003 0210 	and.w	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002740:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b088      	sub	sp, #32
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_SPI_Transmit+0x22>
 8002778:	2302      	movs	r3, #2
 800277a:	e126      	b.n	80029ca <HAL_SPI_Transmit+0x270>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002784:	f7fe ff5c 	bl	8001640 <HAL_GetTick>
 8002788:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d002      	beq.n	80027a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800279a:	2302      	movs	r3, #2
 800279c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800279e:	e10b      	b.n	80029b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_SPI_Transmit+0x52>
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027b0:	e102      	b.n	80029b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2203      	movs	r2, #3
 80027b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	88fa      	ldrh	r2, [r7, #6]
 80027ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	88fa      	ldrh	r2, [r7, #6]
 80027d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f8:	d10f      	bne.n	800281a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002808:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002818:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d007      	beq.n	8002838 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002836:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002840:	d14b      	bne.n	80028da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_SPI_Transmit+0xf6>
 800284a:	8afb      	ldrh	r3, [r7, #22]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d13e      	bne.n	80028ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	881a      	ldrh	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	1c9a      	adds	r2, r3, #2
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002874:	e02b      	b.n	80028ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b02      	cmp	r3, #2
 8002882:	d112      	bne.n	80028aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	881a      	ldrh	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	1c9a      	adds	r2, r3, #2
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80028a8:	e011      	b.n	80028ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028aa:	f7fe fec9 	bl	8001640 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d803      	bhi.n	80028c2 <HAL_SPI_Transmit+0x168>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d102      	bne.n	80028c8 <HAL_SPI_Transmit+0x16e>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028cc:	e074      	b.n	80029b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ce      	bne.n	8002876 <HAL_SPI_Transmit+0x11c>
 80028d8:	e04c      	b.n	8002974 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <HAL_SPI_Transmit+0x18e>
 80028e2:	8afb      	ldrh	r3, [r7, #22]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d140      	bne.n	800296a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	7812      	ldrb	r2, [r2, #0]
 80028f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800290e:	e02c      	b.n	800296a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	d113      	bne.n	8002946 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	330c      	adds	r3, #12
 8002928:	7812      	ldrb	r2, [r2, #0]
 800292a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	86da      	strh	r2, [r3, #54]	; 0x36
 8002944:	e011      	b.n	800296a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002946:	f7fe fe7b 	bl	8001640 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d803      	bhi.n	800295e <HAL_SPI_Transmit+0x204>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d102      	bne.n	8002964 <HAL_SPI_Transmit+0x20a>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002968:	e026      	b.n	80029b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1cd      	bne.n	8002910 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	6839      	ldr	r1, [r7, #0]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f8b3 	bl	8002ae4 <SPI_EndRxTxTransaction>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	77fb      	strb	r3, [r7, #31]
 80029b4:	e000      	b.n	80029b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80029b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029e4:	f7fe fe2c 	bl	8001640 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029f4:	f7fe fe24 	bl	8001640 <HAL_GetTick>
 80029f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	015b      	lsls	r3, r3, #5
 8002a00:	0d1b      	lsrs	r3, r3, #20
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a0a:	e054      	b.n	8002ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a12:	d050      	beq.n	8002ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a14:	f7fe fe14 	bl	8001640 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d902      	bls.n	8002a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d13d      	bne.n	8002aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a42:	d111      	bne.n	8002a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4c:	d004      	beq.n	8002a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a56:	d107      	bne.n	8002a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a70:	d10f      	bne.n	8002a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e017      	b.n	8002ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d19b      	bne.n	8002a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3720      	adds	r7, #32
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000018 	.word	0x20000018

08002ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <SPI_EndRxTxTransaction+0x7c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <SPI_EndRxTxTransaction+0x80>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0d5b      	lsrs	r3, r3, #21
 8002afc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b0e:	d112      	bne.n	8002b36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2200      	movs	r2, #0
 8002b18:	2180      	movs	r1, #128	; 0x80
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff ff5a 	bl	80029d4 <SPI_WaitFlagStateUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d016      	beq.n	8002b54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e00f      	b.n	8002b56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4c:	2b80      	cmp	r3, #128	; 0x80
 8002b4e:	d0f2      	beq.n	8002b36 <SPI_EndRxTxTransaction+0x52>
 8002b50:	e000      	b.n	8002b54 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b52:	bf00      	nop
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000018 	.word	0x20000018
 8002b64:	165e9f81 	.word	0x165e9f81

08002b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e041      	b.n	8002bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe fb6c 	bl	800126c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f000 fc7a 	bl	80034a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d001      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e04e      	b.n	8002cbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <HAL_TIM_Base_Start_IT+0xc4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d022      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4a:	d01d      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d018      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	; (8002cd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00e      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <HAL_TIM_Base_Start_IT+0xd4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d111      	bne.n	8002cac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d010      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002caa:	e007      	b.n	8002cbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	40000400 	.word	0x40000400
 8002cd4:	40000800 	.word	0x40000800
 8002cd8:	40000c00 	.word	0x40000c00
 8002cdc:	40010400 	.word	0x40010400
 8002ce0:	40014000 	.word	0x40014000
 8002ce4:	40001800 	.word	0x40001800

08002ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e041      	b.n	8002d7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f839 	bl	8002d86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f000 fbba 	bl	80034a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_TIM_PWM_Start+0x24>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e022      	b.n	8002e06 <HAL_TIM_PWM_Start+0x6a>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d109      	bne.n	8002dda <HAL_TIM_PWM_Start+0x3e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	e015      	b.n	8002e06 <HAL_TIM_PWM_Start+0x6a>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d109      	bne.n	8002df4 <HAL_TIM_PWM_Start+0x58>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e008      	b.n	8002e06 <HAL_TIM_PWM_Start+0x6a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e07c      	b.n	8002f08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_PWM_Start+0x82>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e1c:	e013      	b.n	8002e46 <HAL_TIM_PWM_Start+0xaa>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_PWM_Start+0x92>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e2c:	e00b      	b.n	8002e46 <HAL_TIM_PWM_Start+0xaa>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d104      	bne.n	8002e3e <HAL_TIM_PWM_Start+0xa2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e3c:	e003      	b.n	8002e46 <HAL_TIM_PWM_Start+0xaa>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	6839      	ldr	r1, [r7, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fe10 	bl	8003a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2d      	ldr	r2, [pc, #180]	; (8002f10 <HAL_TIM_PWM_Start+0x174>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_TIM_PWM_Start+0xcc>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2c      	ldr	r2, [pc, #176]	; (8002f14 <HAL_TIM_PWM_Start+0x178>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_TIM_PWM_Start+0xd0>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_TIM_PWM_Start+0xd2>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <HAL_TIM_PWM_Start+0x174>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d01d      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <HAL_TIM_PWM_Start+0x17c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d018      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_TIM_PWM_Start+0x180>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <HAL_TIM_PWM_Start+0x184>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a16      	ldr	r2, [pc, #88]	; (8002f14 <HAL_TIM_PWM_Start+0x178>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_TIM_PWM_Start+0x188>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <HAL_TIM_PWM_Start+0x18c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d111      	bne.n	8002ef6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b06      	cmp	r3, #6
 8002ee2:	d010      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef4:	e007      	b.n	8002f06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0201 	orr.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40010000 	.word	0x40010000
 8002f14:	40010400 	.word	0x40010400
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40000c00 	.word	0x40000c00
 8002f24:	40014000 	.word	0x40014000
 8002f28:	40001800 	.word	0x40001800

08002f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d122      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d11b      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0202 	mvn.w	r2, #2
 8002f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fa77 	bl	8003462 <HAL_TIM_IC_CaptureCallback>
 8002f74:	e005      	b.n	8002f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa69 	bl	800344e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fa7a 	bl	8003476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d122      	bne.n	8002fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d11b      	bne.n	8002fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0204 	mvn.w	r2, #4
 8002fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fa4d 	bl	8003462 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fa3f 	bl	800344e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fa50 	bl	8003476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0208 	mvn.w	r2, #8
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2204      	movs	r2, #4
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fa23 	bl	8003462 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fa15 	bl	800344e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fa26 	bl	8003476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b10      	cmp	r3, #16
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b10      	cmp	r3, #16
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0210 	mvn.w	r2, #16
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2208      	movs	r2, #8
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f9f9 	bl	8003462 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f9eb 	bl	800344e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f9fc 	bl	8003476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d10e      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d107      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0201 	mvn.w	r2, #1
 80030a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd fe32 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b80      	cmp	r3, #128	; 0x80
 80030bc:	d10e      	bne.n	80030dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d107      	bne.n	80030dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fdca 	bl	8003c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d10e      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d107      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f9c1 	bl	800348a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b20      	cmp	r3, #32
 8003114:	d10e      	bne.n	8003134 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b20      	cmp	r3, #32
 8003122:	d107      	bne.n	8003134 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0220 	mvn.w	r2, #32
 800312c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fd94 	bl	8003c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003156:	2302      	movs	r3, #2
 8003158:	e0ae      	b.n	80032b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b0c      	cmp	r3, #12
 8003166:	f200 809f 	bhi.w	80032a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	080031a5 	.word	0x080031a5
 8003174:	080032a9 	.word	0x080032a9
 8003178:	080032a9 	.word	0x080032a9
 800317c:	080032a9 	.word	0x080032a9
 8003180:	080031e5 	.word	0x080031e5
 8003184:	080032a9 	.word	0x080032a9
 8003188:	080032a9 	.word	0x080032a9
 800318c:	080032a9 	.word	0x080032a9
 8003190:	08003227 	.word	0x08003227
 8003194:	080032a9 	.word	0x080032a9
 8003198:	080032a9 	.word	0x080032a9
 800319c:	080032a9 	.word	0x080032a9
 80031a0:	08003267 	.word	0x08003267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fa18 	bl	80035e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0208 	orr.w	r2, r2, #8
 80031be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0204 	bic.w	r2, r2, #4
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	619a      	str	r2, [r3, #24]
      break;
 80031e2:	e064      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fa68 	bl	80036c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6999      	ldr	r1, [r3, #24]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	021a      	lsls	r2, r3, #8
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	619a      	str	r2, [r3, #24]
      break;
 8003224:	e043      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fabd 	bl	80037ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0208 	orr.w	r2, r2, #8
 8003240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0204 	bic.w	r2, r2, #4
 8003250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69d9      	ldr	r1, [r3, #28]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	61da      	str	r2, [r3, #28]
      break;
 8003264:	e023      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fb11 	bl	8003894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69d9      	ldr	r1, [r3, #28]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	021a      	lsls	r2, r3, #8
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	61da      	str	r2, [r3, #28]
      break;
 80032a6:	e002      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	75fb      	strb	r3, [r7, #23]
      break;
 80032ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_TIM_ConfigClockSource+0x1c>
 80032d8:	2302      	movs	r3, #2
 80032da:	e0b4      	b.n	8003446 <HAL_TIM_ConfigClockSource+0x186>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003314:	d03e      	beq.n	8003394 <HAL_TIM_ConfigClockSource+0xd4>
 8003316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331a:	f200 8087 	bhi.w	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800331e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003322:	f000 8086 	beq.w	8003432 <HAL_TIM_ConfigClockSource+0x172>
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	d87f      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800332c:	2b70      	cmp	r3, #112	; 0x70
 800332e:	d01a      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0xa6>
 8003330:	2b70      	cmp	r3, #112	; 0x70
 8003332:	d87b      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b60      	cmp	r3, #96	; 0x60
 8003336:	d050      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x11a>
 8003338:	2b60      	cmp	r3, #96	; 0x60
 800333a:	d877      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800333c:	2b50      	cmp	r3, #80	; 0x50
 800333e:	d03c      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0xfa>
 8003340:	2b50      	cmp	r3, #80	; 0x50
 8003342:	d873      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d058      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x13a>
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d86f      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800334c:	2b30      	cmp	r3, #48	; 0x30
 800334e:	d064      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003350:	2b30      	cmp	r3, #48	; 0x30
 8003352:	d86b      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d060      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003358:	2b20      	cmp	r3, #32
 800335a:	d867      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d05c      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003360:	2b10      	cmp	r3, #16
 8003362:	d05a      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003364:	e062      	b.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f000 fb5d 	bl	8003a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	609a      	str	r2, [r3, #8]
      break;
 8003392:	e04f      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6899      	ldr	r1, [r3, #8]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f000 fb46 	bl	8003a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b6:	609a      	str	r2, [r3, #8]
      break;
 80033b8:	e03c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f000 faba 	bl	8003940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2150      	movs	r1, #80	; 0x50
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fb13 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 80033d8:	e02c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f000 fad9 	bl	800399e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2160      	movs	r1, #96	; 0x60
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fb03 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 80033f8:	e01c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	461a      	mov	r2, r3
 8003408:	f000 fa9a 	bl	8003940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	4618      	mov	r0, r3
 8003414:	f000 faf3 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 8003418:	e00c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f000 faea 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 800342a:	e003      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e000      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a40      	ldr	r2, [pc, #256]	; (80035b4 <TIM_Base_SetConfig+0x114>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034be:	d00f      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a3d      	ldr	r2, [pc, #244]	; (80035b8 <TIM_Base_SetConfig+0x118>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00b      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a3c      	ldr	r2, [pc, #240]	; (80035bc <TIM_Base_SetConfig+0x11c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d007      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a3b      	ldr	r2, [pc, #236]	; (80035c0 <TIM_Base_SetConfig+0x120>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_Base_SetConfig+0x40>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a3a      	ldr	r2, [pc, #232]	; (80035c4 <TIM_Base_SetConfig+0x124>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d108      	bne.n	80034f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a2f      	ldr	r2, [pc, #188]	; (80035b4 <TIM_Base_SetConfig+0x114>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d02b      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003500:	d027      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <TIM_Base_SetConfig+0x118>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d023      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a2b      	ldr	r2, [pc, #172]	; (80035bc <TIM_Base_SetConfig+0x11c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01f      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2a      	ldr	r2, [pc, #168]	; (80035c0 <TIM_Base_SetConfig+0x120>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01b      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a29      	ldr	r2, [pc, #164]	; (80035c4 <TIM_Base_SetConfig+0x124>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d017      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a28      	ldr	r2, [pc, #160]	; (80035c8 <TIM_Base_SetConfig+0x128>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a27      	ldr	r2, [pc, #156]	; (80035cc <TIM_Base_SetConfig+0x12c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00f      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a26      	ldr	r2, [pc, #152]	; (80035d0 <TIM_Base_SetConfig+0x130>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00b      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <TIM_Base_SetConfig+0x134>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d007      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <TIM_Base_SetConfig+0x138>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d003      	beq.n	8003552 <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a23      	ldr	r2, [pc, #140]	; (80035dc <TIM_Base_SetConfig+0x13c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d108      	bne.n	8003564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <TIM_Base_SetConfig+0x114>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <TIM_Base_SetConfig+0xf8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <TIM_Base_SetConfig+0x124>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d103      	bne.n	80035a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	615a      	str	r2, [r3, #20]
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40000800 	.word	0x40000800
 80035c0:	40000c00 	.word	0x40000c00
 80035c4:	40010400 	.word	0x40010400
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800
 80035d4:	40001800 	.word	0x40001800
 80035d8:	40001c00 	.word	0x40001c00
 80035dc:	40002000 	.word	0x40002000

080035e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f023 0201 	bic.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 0302 	bic.w	r3, r3, #2
 8003628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a20      	ldr	r2, [pc, #128]	; (80036b8 <TIM_OC1_SetConfig+0xd8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_OC1_SetConfig+0x64>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <TIM_OC1_SetConfig+0xdc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10c      	bne.n	800365e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f023 0308 	bic.w	r3, r3, #8
 800364a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f023 0304 	bic.w	r3, r3, #4
 800365c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a15      	ldr	r2, [pc, #84]	; (80036b8 <TIM_OC1_SetConfig+0xd8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d003      	beq.n	800366e <TIM_OC1_SetConfig+0x8e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a14      	ldr	r2, [pc, #80]	; (80036bc <TIM_OC1_SetConfig+0xdc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d111      	bne.n	8003692 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800367c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	621a      	str	r2, [r3, #32]
}
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40010400 	.word	0x40010400

080036c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f023 0210 	bic.w	r2, r3, #16
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f023 0320 	bic.w	r3, r3, #32
 800370a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a22      	ldr	r2, [pc, #136]	; (80037a4 <TIM_OC2_SetConfig+0xe4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_OC2_SetConfig+0x68>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <TIM_OC2_SetConfig+0xe8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10d      	bne.n	8003744 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <TIM_OC2_SetConfig+0xe4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_OC2_SetConfig+0x94>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <TIM_OC2_SetConfig+0xe8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d113      	bne.n	800377c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40010000 	.word	0x40010000
 80037a8:	40010400 	.word	0x40010400

080037ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a21      	ldr	r2, [pc, #132]	; (800388c <TIM_OC3_SetConfig+0xe0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <TIM_OC3_SetConfig+0x66>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a20      	ldr	r2, [pc, #128]	; (8003890 <TIM_OC3_SetConfig+0xe4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10d      	bne.n	800382e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a16      	ldr	r2, [pc, #88]	; (800388c <TIM_OC3_SetConfig+0xe0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_OC3_SetConfig+0x92>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a15      	ldr	r2, [pc, #84]	; (8003890 <TIM_OC3_SetConfig+0xe4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d113      	bne.n	8003866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800384c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40010000 	.word	0x40010000
 8003890:	40010400 	.word	0x40010400

08003894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	031b      	lsls	r3, r3, #12
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a12      	ldr	r2, [pc, #72]	; (8003938 <TIM_OC4_SetConfig+0xa4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_OC4_SetConfig+0x68>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a11      	ldr	r2, [pc, #68]	; (800393c <TIM_OC4_SetConfig+0xa8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d109      	bne.n	8003910 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	621a      	str	r2, [r3, #32]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40010400 	.word	0x40010400

08003940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f023 0201 	bic.w	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f023 030a 	bic.w	r3, r3, #10
 800397c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800399e:	b480      	push	{r7}
 80039a0:	b087      	sub	sp, #28
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f023 0210 	bic.w	r2, r3, #16
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	031b      	lsls	r3, r3, #12
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f043 0307 	orr.w	r3, r3, #7
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	021a      	lsls	r2, r3, #8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	609a      	str	r2, [r3, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2201      	movs	r2, #1
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1a      	ldr	r2, [r3, #32]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	401a      	ands	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e05a      	b.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a21      	ldr	r2, [pc, #132]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b24:	d01d      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d018      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10c      	bne.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40000c00 	.word	0x40000c00
 8003bac:	40010400 	.word	0x40010400
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40001800 	.word	0x40001800

08003bb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e03d      	b.n	8003c50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e03f      	b.n	8003d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fd fbb2 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2224      	movs	r2, #36	; 0x24
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fd81 	bl	80047d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b08a      	sub	sp, #40	; 0x28
 8003d22:	af02      	add	r7, sp, #8
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	f040 808c 	bne.w	8003e58 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_UART_Receive+0x2e>
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e084      	b.n	8003e5a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Receive+0x40>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e07d      	b.n	8003e5a <HAL_UART_Receive+0x13c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2222      	movs	r2, #34	; 0x22
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d7a:	f7fd fc61 	bl	8001640 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	88fa      	ldrh	r2, [r7, #6]
 8003d84:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	88fa      	ldrh	r2, [r7, #6]
 8003d8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d94:	d108      	bne.n	8003da8 <HAL_UART_Receive+0x8a>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d104      	bne.n	8003da8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	e003      	b.n	8003db0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003db8:	e043      	b.n	8003e42 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2120      	movs	r1, #32
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fafb 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e042      	b.n	8003e5a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10c      	bne.n	8003df4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	3302      	adds	r3, #2
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e01f      	b.n	8003e34 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfc:	d007      	beq.n	8003e0e <HAL_UART_Receive+0xf0>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_UART_Receive+0xfe>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e008      	b.n	8003e2e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1b6      	bne.n	8003dba <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e000      	b.n	8003e5a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b0ba      	sub	sp, #232	; 0xe8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10f      	bne.n	8003eca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_UART_IRQHandler+0x66>
 8003eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fbc9 	bl	800465a <UART_Receive_IT>
      return;
 8003ec8:	e256      	b.n	8004378 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80de 	beq.w	8004090 <HAL_UART_IRQHandler+0x22c>
 8003ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d106      	bne.n	8003eee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80d1 	beq.w	8004090 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <HAL_UART_IRQHandler+0xae>
 8003efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0201 	orr.w	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_UART_IRQHandler+0xd2>
 8003f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f043 0202 	orr.w	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_UART_IRQHandler+0xf6>
 8003f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0204 	orr.w	r2, r3, #4
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d011      	beq.n	8003f8a <HAL_UART_IRQHandler+0x126>
 8003f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f043 0208 	orr.w	r2, r3, #8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 81ed 	beq.w	800436e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x14e>
 8003fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fb54 	bl	800465a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <HAL_UART_IRQHandler+0x17a>
 8003fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d04f      	beq.n	800407e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fa5c 	bl	800449c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d141      	bne.n	8004076 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3314      	adds	r3, #20
 8003ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800400c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3314      	adds	r3, #20
 800401a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800401e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800402a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1d9      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	2b00      	cmp	r3, #0
 8004044:	d013      	beq.n	800406e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	4a7d      	ldr	r2, [pc, #500]	; (8004240 <HAL_UART_IRQHandler+0x3dc>)
 800404c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd fc81 	bl	800195a <HAL_DMA_Abort_IT>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d016      	beq.n	800408c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004068:	4610      	mov	r0, r2
 800406a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406c:	e00e      	b.n	800408c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f990 	bl	8004394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004074:	e00a      	b.n	800408c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f98c 	bl	8004394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407c:	e006      	b.n	800408c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f988 	bl	8004394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800408a:	e170      	b.n	800436e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408c:	bf00      	nop
    return;
 800408e:	e16e      	b.n	800436e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	2b01      	cmp	r3, #1
 8004096:	f040 814a 	bne.w	800432e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8143 	beq.w	800432e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 813c 	beq.w	800432e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	f040 80b4 	bne.w	8004244 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8140 	beq.w	8004372 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040fa:	429a      	cmp	r2, r3
 80040fc:	f080 8139 	bcs.w	8004372 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004106:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004112:	f000 8088 	beq.w	8004226 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800412c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004142:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800414e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800415a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1d9      	bne.n	8004116 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3314      	adds	r3, #20
 8004168:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3314      	adds	r3, #20
 8004182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004186:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800418a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800418e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e1      	bne.n	8004162 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3314      	adds	r3, #20
 80041a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3314      	adds	r3, #20
 80041be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e3      	bne.n	800419e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f6:	f023 0310 	bic.w	r3, r3, #16
 80041fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004208:	65ba      	str	r2, [r7, #88]	; 0x58
 800420a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800420e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e3      	bne.n	80041e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	4618      	mov	r0, r3
 8004222:	f7fd fb2a 	bl	800187a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800422e:	b29b      	uxth	r3, r3
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	b29b      	uxth	r3, r3
 8004234:	4619      	mov	r1, r3
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f8b6 	bl	80043a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800423c:	e099      	b.n	8004372 <HAL_UART_IRQHandler+0x50e>
 800423e:	bf00      	nop
 8004240:	08004563 	.word	0x08004563
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800424c:	b29b      	uxth	r3, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 808b 	beq.w	8004376 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8086 	beq.w	8004376 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800427a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800428e:	647a      	str	r2, [r7, #68]	; 0x44
 8004290:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800429c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e3      	bne.n	800426a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3314      	adds	r3, #20
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	623b      	str	r3, [r7, #32]
   return(result);
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3314      	adds	r3, #20
 80042c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042c6:	633a      	str	r2, [r7, #48]	; 0x30
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e3      	bne.n	80042a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	330c      	adds	r3, #12
 80042ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0310 	bic.w	r3, r3, #16
 80042fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800430c:	61fa      	str	r2, [r7, #28]
 800430e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	69b9      	ldr	r1, [r7, #24]
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	617b      	str	r3, [r7, #20]
   return(result);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e3      	bne.n	80042e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f83e 	bl	80043a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800432c:	e023      	b.n	8004376 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <HAL_UART_IRQHandler+0x4ea>
 800433a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f91f 	bl	800458a <UART_Transmit_IT>
    return;
 800434c:	e014      	b.n	8004378 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800434e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00e      	beq.n	8004378 <HAL_UART_IRQHandler+0x514>
 800435a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f95f 	bl	800462a <UART_EndTransmit_IT>
    return;
 800436c:	e004      	b.n	8004378 <HAL_UART_IRQHandler+0x514>
    return;
 800436e:	bf00      	nop
 8004370:	e002      	b.n	8004378 <HAL_UART_IRQHandler+0x514>
      return;
 8004372:	bf00      	nop
 8004374:	e000      	b.n	8004378 <HAL_UART_IRQHandler+0x514>
      return;
 8004376:	bf00      	nop
  }
}
 8004378:	37e8      	adds	r7, #232	; 0xe8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop

08004380 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b090      	sub	sp, #64	; 0x40
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d0:	e050      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d04c      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e0:	f7fd f92e 	bl	8001640 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d241      	bcs.n	8004474 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004410:	637a      	str	r2, [r7, #52]	; 0x34
 8004412:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e5      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	613b      	str	r3, [r7, #16]
   return(result);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f023 0301 	bic.w	r3, r3, #1
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004444:	623a      	str	r2, [r7, #32]
 8004446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	69f9      	ldr	r1, [r7, #28]
 800444a:	6a3a      	ldr	r2, [r7, #32]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	61bb      	str	r3, [r7, #24]
   return(result);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e00f      	b.n	8004494 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	429a      	cmp	r2, r3
 8004490:	d09f      	beq.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3740      	adds	r7, #64	; 0x40
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b095      	sub	sp, #84	; 0x54
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c4:	643a      	str	r2, [r7, #64]	; 0x40
 80044c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e5      	bne.n	80044a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3314      	adds	r3, #20
 80044de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3314      	adds	r3, #20
 80044f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	d119      	bne.n	8004548 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	60bb      	str	r3, [r7, #8]
   return(result);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0310 	bic.w	r3, r3, #16
 800452a:	647b      	str	r3, [r7, #68]	; 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004534:	61ba      	str	r2, [r7, #24]
 8004536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6979      	ldr	r1, [r7, #20]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	613b      	str	r3, [r7, #16]
   return(result);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004556:	bf00      	nop
 8004558:	3754      	adds	r7, #84	; 0x54
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff ff09 	bl	8004394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b21      	cmp	r3, #33	; 0x21
 800459c:	d13e      	bne.n	800461c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d114      	bne.n	80045d2 <UART_Transmit_IT+0x48>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d110      	bne.n	80045d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	1c9a      	adds	r2, r3, #2
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	621a      	str	r2, [r3, #32]
 80045d0:	e008      	b.n	80045e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	1c59      	adds	r1, r3, #1
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6211      	str	r1, [r2, #32]
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4619      	mov	r1, r3
 80045f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10f      	bne.n	8004618 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004606:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004616:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004640:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff fe98 	bl	8004380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b08c      	sub	sp, #48	; 0x30
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b22      	cmp	r3, #34	; 0x22
 800466c:	f040 80ab 	bne.w	80047c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004678:	d117      	bne.n	80046aa <UART_Receive_IT+0x50>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d113      	bne.n	80046aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004698:	b29a      	uxth	r2, r3
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	1c9a      	adds	r2, r3, #2
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
 80046a8:	e026      	b.n	80046f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046bc:	d007      	beq.n	80046ce <UART_Receive_IT+0x74>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <UART_Receive_IT+0x82>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	e008      	b.n	80046ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29b      	uxth	r3, r3
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4619      	mov	r1, r3
 8004706:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004708:	2b00      	cmp	r3, #0
 800470a:	d15a      	bne.n	80047c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0220 	bic.w	r2, r2, #32
 800471a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800472a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	2b01      	cmp	r3, #1
 800474a:	d135      	bne.n	80047b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	613b      	str	r3, [r7, #16]
   return(result);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f023 0310 	bic.w	r3, r3, #16
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004772:	623a      	str	r2, [r7, #32]
 8004774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	69f9      	ldr	r1, [r7, #28]
 8004778:	6a3a      	ldr	r2, [r7, #32]
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b10      	cmp	r3, #16
 8004792:	d10a      	bne.n	80047aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fdf9 	bl	80043a8 <HAL_UARTEx_RxEventCallback>
 80047b6:	e002      	b.n	80047be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fc fac1 	bl	8000d40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	e002      	b.n	80047c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e000      	b.n	80047c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3730      	adds	r7, #48	; 0x30
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d4:	b09f      	sub	sp, #124	; 0x7c
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e6:	68d9      	ldr	r1, [r3, #12]
 80047e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	ea40 0301 	orr.w	r3, r0, r1
 80047f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	431a      	orrs	r2, r3
 8004802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4313      	orrs	r3, r2
 8004808:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800480a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004814:	f021 010c 	bic.w	r1, r1, #12
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800481e:	430b      	orrs	r3, r1
 8004820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800482c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482e:	6999      	ldr	r1, [r3, #24]
 8004830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	ea40 0301 	orr.w	r3, r0, r1
 8004838:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800483a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4bc5      	ldr	r3, [pc, #788]	; (8004b54 <UART_SetConfig+0x384>)
 8004840:	429a      	cmp	r2, r3
 8004842:	d004      	beq.n	800484e <UART_SetConfig+0x7e>
 8004844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4bc3      	ldr	r3, [pc, #780]	; (8004b58 <UART_SetConfig+0x388>)
 800484a:	429a      	cmp	r2, r3
 800484c:	d103      	bne.n	8004856 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800484e:	f7fd fee7 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8004852:	6778      	str	r0, [r7, #116]	; 0x74
 8004854:	e002      	b.n	800485c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004856:	f7fd fecf 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 800485a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004864:	f040 80b6 	bne.w	80049d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486a:	461c      	mov	r4, r3
 800486c:	f04f 0500 	mov.w	r5, #0
 8004870:	4622      	mov	r2, r4
 8004872:	462b      	mov	r3, r5
 8004874:	1891      	adds	r1, r2, r2
 8004876:	6439      	str	r1, [r7, #64]	; 0x40
 8004878:	415b      	adcs	r3, r3
 800487a:	647b      	str	r3, [r7, #68]	; 0x44
 800487c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004880:	1912      	adds	r2, r2, r4
 8004882:	eb45 0303 	adc.w	r3, r5, r3
 8004886:	f04f 0000 	mov.w	r0, #0
 800488a:	f04f 0100 	mov.w	r1, #0
 800488e:	00d9      	lsls	r1, r3, #3
 8004890:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004894:	00d0      	lsls	r0, r2, #3
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	1911      	adds	r1, r2, r4
 800489c:	6639      	str	r1, [r7, #96]	; 0x60
 800489e:	416b      	adcs	r3, r5
 80048a0:	667b      	str	r3, [r7, #100]	; 0x64
 80048a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	1891      	adds	r1, r2, r2
 80048ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80048b0:	415b      	adcs	r3, r3
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80048bc:	f7fb fcf0 	bl	80002a0 <__aeabi_uldivmod>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4ba5      	ldr	r3, [pc, #660]	; (8004b5c <UART_SetConfig+0x38c>)
 80048c6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	011e      	lsls	r6, r3, #4
 80048ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d0:	461c      	mov	r4, r3
 80048d2:	f04f 0500 	mov.w	r5, #0
 80048d6:	4622      	mov	r2, r4
 80048d8:	462b      	mov	r3, r5
 80048da:	1891      	adds	r1, r2, r2
 80048dc:	6339      	str	r1, [r7, #48]	; 0x30
 80048de:	415b      	adcs	r3, r3
 80048e0:	637b      	str	r3, [r7, #52]	; 0x34
 80048e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048e6:	1912      	adds	r2, r2, r4
 80048e8:	eb45 0303 	adc.w	r3, r5, r3
 80048ec:	f04f 0000 	mov.w	r0, #0
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	00d9      	lsls	r1, r3, #3
 80048f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048fa:	00d0      	lsls	r0, r2, #3
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	1911      	adds	r1, r2, r4
 8004902:	65b9      	str	r1, [r7, #88]	; 0x58
 8004904:	416b      	adcs	r3, r5
 8004906:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	461a      	mov	r2, r3
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	1891      	adds	r1, r2, r2
 8004914:	62b9      	str	r1, [r7, #40]	; 0x28
 8004916:	415b      	adcs	r3, r3
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800491e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004922:	f7fb fcbd 	bl	80002a0 <__aeabi_uldivmod>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4b8c      	ldr	r3, [pc, #560]	; (8004b5c <UART_SetConfig+0x38c>)
 800492c:	fba3 1302 	umull	r1, r3, r3, r2
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	2164      	movs	r1, #100	; 0x64
 8004934:	fb01 f303 	mul.w	r3, r1, r3
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	3332      	adds	r3, #50	; 0x32
 800493e:	4a87      	ldr	r2, [pc, #540]	; (8004b5c <UART_SetConfig+0x38c>)
 8004940:	fba2 2303 	umull	r2, r3, r2, r3
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800494c:	441e      	add	r6, r3
 800494e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004950:	4618      	mov	r0, r3
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	1894      	adds	r4, r2, r2
 800495c:	623c      	str	r4, [r7, #32]
 800495e:	415b      	adcs	r3, r3
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
 8004962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004966:	1812      	adds	r2, r2, r0
 8004968:	eb41 0303 	adc.w	r3, r1, r3
 800496c:	f04f 0400 	mov.w	r4, #0
 8004970:	f04f 0500 	mov.w	r5, #0
 8004974:	00dd      	lsls	r5, r3, #3
 8004976:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800497a:	00d4      	lsls	r4, r2, #3
 800497c:	4622      	mov	r2, r4
 800497e:	462b      	mov	r3, r5
 8004980:	1814      	adds	r4, r2, r0
 8004982:	653c      	str	r4, [r7, #80]	; 0x50
 8004984:	414b      	adcs	r3, r1
 8004986:	657b      	str	r3, [r7, #84]	; 0x54
 8004988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	461a      	mov	r2, r3
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	1891      	adds	r1, r2, r2
 8004994:	61b9      	str	r1, [r7, #24]
 8004996:	415b      	adcs	r3, r3
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800499e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049a2:	f7fb fc7d 	bl	80002a0 <__aeabi_uldivmod>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4b6c      	ldr	r3, [pc, #432]	; (8004b5c <UART_SetConfig+0x38c>)
 80049ac:	fba3 1302 	umull	r1, r3, r3, r2
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	2164      	movs	r1, #100	; 0x64
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	3332      	adds	r3, #50	; 0x32
 80049be:	4a67      	ldr	r2, [pc, #412]	; (8004b5c <UART_SetConfig+0x38c>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	f003 0207 	and.w	r2, r3, #7
 80049ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4432      	add	r2, r6
 80049d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049d2:	e0b9      	b.n	8004b48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d6:	461c      	mov	r4, r3
 80049d8:	f04f 0500 	mov.w	r5, #0
 80049dc:	4622      	mov	r2, r4
 80049de:	462b      	mov	r3, r5
 80049e0:	1891      	adds	r1, r2, r2
 80049e2:	6139      	str	r1, [r7, #16]
 80049e4:	415b      	adcs	r3, r3
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049ec:	1912      	adds	r2, r2, r4
 80049ee:	eb45 0303 	adc.w	r3, r5, r3
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	00d9      	lsls	r1, r3, #3
 80049fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a00:	00d0      	lsls	r0, r2, #3
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	eb12 0804 	adds.w	r8, r2, r4
 8004a0a:	eb43 0905 	adc.w	r9, r3, r5
 8004a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f04f 0100 	mov.w	r1, #0
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	008b      	lsls	r3, r1, #2
 8004a22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a26:	0082      	lsls	r2, r0, #2
 8004a28:	4640      	mov	r0, r8
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	f7fb fc38 	bl	80002a0 <__aeabi_uldivmod>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4b49      	ldr	r3, [pc, #292]	; (8004b5c <UART_SetConfig+0x38c>)
 8004a36:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	011e      	lsls	r6, r3, #4
 8004a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a40:	4618      	mov	r0, r3
 8004a42:	f04f 0100 	mov.w	r1, #0
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	1894      	adds	r4, r2, r2
 8004a4c:	60bc      	str	r4, [r7, #8]
 8004a4e:	415b      	adcs	r3, r3
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a56:	1812      	adds	r2, r2, r0
 8004a58:	eb41 0303 	adc.w	r3, r1, r3
 8004a5c:	f04f 0400 	mov.w	r4, #0
 8004a60:	f04f 0500 	mov.w	r5, #0
 8004a64:	00dd      	lsls	r5, r3, #3
 8004a66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a6a:	00d4      	lsls	r4, r2, #3
 8004a6c:	4622      	mov	r2, r4
 8004a6e:	462b      	mov	r3, r5
 8004a70:	1814      	adds	r4, r2, r0
 8004a72:	64bc      	str	r4, [r7, #72]	; 0x48
 8004a74:	414b      	adcs	r3, r1
 8004a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f04f 0100 	mov.w	r1, #0
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	008b      	lsls	r3, r1, #2
 8004a8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a90:	0082      	lsls	r2, r0, #2
 8004a92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004a96:	f7fb fc03 	bl	80002a0 <__aeabi_uldivmod>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4b2f      	ldr	r3, [pc, #188]	; (8004b5c <UART_SetConfig+0x38c>)
 8004aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	2164      	movs	r1, #100	; 0x64
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	3332      	adds	r3, #50	; 0x32
 8004ab2:	4a2a      	ldr	r2, [pc, #168]	; (8004b5c <UART_SetConfig+0x38c>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004abe:	441e      	add	r6, r3
 8004ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f04f 0100 	mov.w	r1, #0
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	1894      	adds	r4, r2, r2
 8004ace:	603c      	str	r4, [r7, #0]
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	607b      	str	r3, [r7, #4]
 8004ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ad8:	1812      	adds	r2, r2, r0
 8004ada:	eb41 0303 	adc.w	r3, r1, r3
 8004ade:	f04f 0400 	mov.w	r4, #0
 8004ae2:	f04f 0500 	mov.w	r5, #0
 8004ae6:	00dd      	lsls	r5, r3, #3
 8004ae8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004aec:	00d4      	lsls	r4, r2, #3
 8004aee:	4622      	mov	r2, r4
 8004af0:	462b      	mov	r3, r5
 8004af2:	eb12 0a00 	adds.w	sl, r2, r0
 8004af6:	eb43 0b01 	adc.w	fp, r3, r1
 8004afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	008b      	lsls	r3, r1, #2
 8004b0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b12:	0082      	lsls	r2, r0, #2
 8004b14:	4650      	mov	r0, sl
 8004b16:	4659      	mov	r1, fp
 8004b18:	f7fb fbc2 	bl	80002a0 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <UART_SetConfig+0x38c>)
 8004b22:	fba3 1302 	umull	r1, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2164      	movs	r1, #100	; 0x64
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	3332      	adds	r3, #50	; 0x32
 8004b34:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <UART_SetConfig+0x38c>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4432      	add	r2, r6
 8004b46:	609a      	str	r2, [r3, #8]
}
 8004b48:	bf00      	nop
 8004b4a:	377c      	adds	r7, #124	; 0x7c
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b52:	bf00      	nop
 8004b54:	40011000 	.word	0x40011000
 8004b58:	40011400 	.word	0x40011400
 8004b5c:	51eb851f 	.word	0x51eb851f

08004b60 <__errno>:
 8004b60:	4b01      	ldr	r3, [pc, #4]	; (8004b68 <__errno+0x8>)
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000024 	.word	0x20000024

08004b6c <__libc_init_array>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	4d0d      	ldr	r5, [pc, #52]	; (8004ba4 <__libc_init_array+0x38>)
 8004b70:	4c0d      	ldr	r4, [pc, #52]	; (8004ba8 <__libc_init_array+0x3c>)
 8004b72:	1b64      	subs	r4, r4, r5
 8004b74:	10a4      	asrs	r4, r4, #2
 8004b76:	2600      	movs	r6, #0
 8004b78:	42a6      	cmp	r6, r4
 8004b7a:	d109      	bne.n	8004b90 <__libc_init_array+0x24>
 8004b7c:	4d0b      	ldr	r5, [pc, #44]	; (8004bac <__libc_init_array+0x40>)
 8004b7e:	4c0c      	ldr	r4, [pc, #48]	; (8004bb0 <__libc_init_array+0x44>)
 8004b80:	f001 f884 	bl	8005c8c <_init>
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	2600      	movs	r6, #0
 8004b8a:	42a6      	cmp	r6, r4
 8004b8c:	d105      	bne.n	8004b9a <__libc_init_array+0x2e>
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b94:	4798      	blx	r3
 8004b96:	3601      	adds	r6, #1
 8004b98:	e7ee      	b.n	8004b78 <__libc_init_array+0xc>
 8004b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9e:	4798      	blx	r3
 8004ba0:	3601      	adds	r6, #1
 8004ba2:	e7f2      	b.n	8004b8a <__libc_init_array+0x1e>
 8004ba4:	080089a0 	.word	0x080089a0
 8004ba8:	080089a0 	.word	0x080089a0
 8004bac:	080089a0 	.word	0x080089a0
 8004bb0:	080089a4 	.word	0x080089a4

08004bb4 <memcpy>:
 8004bb4:	440a      	add	r2, r1
 8004bb6:	4291      	cmp	r1, r2
 8004bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bbc:	d100      	bne.n	8004bc0 <memcpy+0xc>
 8004bbe:	4770      	bx	lr
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bca:	4291      	cmp	r1, r2
 8004bcc:	d1f9      	bne.n	8004bc2 <memcpy+0xe>
 8004bce:	bd10      	pop	{r4, pc}

08004bd0 <memset>:
 8004bd0:	4402      	add	r2, r0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d100      	bne.n	8004bda <memset+0xa>
 8004bd8:	4770      	bx	lr
 8004bda:	f803 1b01 	strb.w	r1, [r3], #1
 8004bde:	e7f9      	b.n	8004bd4 <memset+0x4>

08004be0 <strchr>:
 8004be0:	b2c9      	uxtb	r1, r1
 8004be2:	4603      	mov	r3, r0
 8004be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004be8:	b11a      	cbz	r2, 8004bf2 <strchr+0x12>
 8004bea:	428a      	cmp	r2, r1
 8004bec:	d1f9      	bne.n	8004be2 <strchr+0x2>
 8004bee:	4618      	mov	r0, r3
 8004bf0:	4770      	bx	lr
 8004bf2:	2900      	cmp	r1, #0
 8004bf4:	bf18      	it	ne
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	e7f9      	b.n	8004bee <strchr+0xe>

08004bfa <strncpy>:
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	3901      	subs	r1, #1
 8004bfe:	4603      	mov	r3, r0
 8004c00:	b132      	cbz	r2, 8004c10 <strncpy+0x16>
 8004c02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004c06:	f803 4b01 	strb.w	r4, [r3], #1
 8004c0a:	3a01      	subs	r2, #1
 8004c0c:	2c00      	cmp	r4, #0
 8004c0e:	d1f7      	bne.n	8004c00 <strncpy+0x6>
 8004c10:	441a      	add	r2, r3
 8004c12:	2100      	movs	r1, #0
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d100      	bne.n	8004c1a <strncpy+0x20>
 8004c18:	bd10      	pop	{r4, pc}
 8004c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1e:	e7f9      	b.n	8004c14 <strncpy+0x1a>

08004c20 <strstr>:
 8004c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c22:	780c      	ldrb	r4, [r1, #0]
 8004c24:	b164      	cbz	r4, 8004c40 <strstr+0x20>
 8004c26:	4603      	mov	r3, r0
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	1c5e      	adds	r6, r3, #1
 8004c2e:	b90a      	cbnz	r2, 8004c34 <strstr+0x14>
 8004c30:	4610      	mov	r0, r2
 8004c32:	e005      	b.n	8004c40 <strstr+0x20>
 8004c34:	4294      	cmp	r4, r2
 8004c36:	d108      	bne.n	8004c4a <strstr+0x2a>
 8004c38:	460d      	mov	r5, r1
 8004c3a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004c3e:	b902      	cbnz	r2, 8004c42 <strstr+0x22>
 8004c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c42:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004c46:	4297      	cmp	r7, r2
 8004c48:	d0f7      	beq.n	8004c3a <strstr+0x1a>
 8004c4a:	4633      	mov	r3, r6
 8004c4c:	e7ec      	b.n	8004c28 <strstr+0x8>
	...

08004c50 <strtok>:
 8004c50:	4b16      	ldr	r3, [pc, #88]	; (8004cac <strtok+0x5c>)
 8004c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c54:	681e      	ldr	r6, [r3, #0]
 8004c56:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004c58:	4605      	mov	r5, r0
 8004c5a:	b9fc      	cbnz	r4, 8004c9c <strtok+0x4c>
 8004c5c:	2050      	movs	r0, #80	; 0x50
 8004c5e:	9101      	str	r1, [sp, #4]
 8004c60:	f000 f882 	bl	8004d68 <malloc>
 8004c64:	9901      	ldr	r1, [sp, #4]
 8004c66:	65b0      	str	r0, [r6, #88]	; 0x58
 8004c68:	4602      	mov	r2, r0
 8004c6a:	b920      	cbnz	r0, 8004c76 <strtok+0x26>
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <strtok+0x60>)
 8004c6e:	4811      	ldr	r0, [pc, #68]	; (8004cb4 <strtok+0x64>)
 8004c70:	2157      	movs	r1, #87	; 0x57
 8004c72:	f000 f849 	bl	8004d08 <__assert_func>
 8004c76:	e9c0 4400 	strd	r4, r4, [r0]
 8004c7a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004c7e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004c82:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004c86:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004c8a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004c8e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004c92:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004c96:	6184      	str	r4, [r0, #24]
 8004c98:	7704      	strb	r4, [r0, #28]
 8004c9a:	6244      	str	r4, [r0, #36]	; 0x24
 8004c9c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	b002      	add	sp, #8
 8004ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ca8:	f000 b806 	b.w	8004cb8 <__strtok_r>
 8004cac:	20000024 	.word	0x20000024
 8004cb0:	08008850 	.word	0x08008850
 8004cb4:	08008867 	.word	0x08008867

08004cb8 <__strtok_r>:
 8004cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cba:	b908      	cbnz	r0, 8004cc0 <__strtok_r+0x8>
 8004cbc:	6810      	ldr	r0, [r2, #0]
 8004cbe:	b188      	cbz	r0, 8004ce4 <__strtok_r+0x2c>
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004cc8:	460f      	mov	r7, r1
 8004cca:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004cce:	b91e      	cbnz	r6, 8004cd8 <__strtok_r+0x20>
 8004cd0:	b965      	cbnz	r5, 8004cec <__strtok_r+0x34>
 8004cd2:	6015      	str	r5, [r2, #0]
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	e005      	b.n	8004ce4 <__strtok_r+0x2c>
 8004cd8:	42b5      	cmp	r5, r6
 8004cda:	d1f6      	bne.n	8004cca <__strtok_r+0x12>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <__strtok_r+0xa>
 8004ce0:	6014      	str	r4, [r2, #0]
 8004ce2:	7003      	strb	r3, [r0, #0]
 8004ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ce6:	461c      	mov	r4, r3
 8004ce8:	e00c      	b.n	8004d04 <__strtok_r+0x4c>
 8004cea:	b915      	cbnz	r5, 8004cf2 <__strtok_r+0x3a>
 8004cec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004cf0:	460e      	mov	r6, r1
 8004cf2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004cf6:	42ab      	cmp	r3, r5
 8004cf8:	d1f7      	bne.n	8004cea <__strtok_r+0x32>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f3      	beq.n	8004ce6 <__strtok_r+0x2e>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004d04:	6014      	str	r4, [r2, #0]
 8004d06:	e7ed      	b.n	8004ce4 <__strtok_r+0x2c>

08004d08 <__assert_func>:
 8004d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d0a:	4614      	mov	r4, r2
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <__assert_func+0x2c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4605      	mov	r5, r0
 8004d14:	68d8      	ldr	r0, [r3, #12]
 8004d16:	b14c      	cbz	r4, 8004d2c <__assert_func+0x24>
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <__assert_func+0x30>)
 8004d1a:	9100      	str	r1, [sp, #0]
 8004d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d20:	4906      	ldr	r1, [pc, #24]	; (8004d3c <__assert_func+0x34>)
 8004d22:	462b      	mov	r3, r5
 8004d24:	f000 f80e 	bl	8004d44 <fiprintf>
 8004d28:	f000 fc8e 	bl	8005648 <abort>
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <__assert_func+0x38>)
 8004d2e:	461c      	mov	r4, r3
 8004d30:	e7f3      	b.n	8004d1a <__assert_func+0x12>
 8004d32:	bf00      	nop
 8004d34:	20000024 	.word	0x20000024
 8004d38:	080088c8 	.word	0x080088c8
 8004d3c:	080088d5 	.word	0x080088d5
 8004d40:	08008903 	.word	0x08008903

08004d44 <fiprintf>:
 8004d44:	b40e      	push	{r1, r2, r3}
 8004d46:	b503      	push	{r0, r1, lr}
 8004d48:	4601      	mov	r1, r0
 8004d4a:	ab03      	add	r3, sp, #12
 8004d4c:	4805      	ldr	r0, [pc, #20]	; (8004d64 <fiprintf+0x20>)
 8004d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d52:	6800      	ldr	r0, [r0, #0]
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	f000 f8e3 	bl	8004f20 <_vfiprintf_r>
 8004d5a:	b002      	add	sp, #8
 8004d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d60:	b003      	add	sp, #12
 8004d62:	4770      	bx	lr
 8004d64:	20000024 	.word	0x20000024

08004d68 <malloc>:
 8004d68:	4b02      	ldr	r3, [pc, #8]	; (8004d74 <malloc+0xc>)
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	f000 b853 	b.w	8004e18 <_malloc_r>
 8004d72:	bf00      	nop
 8004d74:	20000024 	.word	0x20000024

08004d78 <_free_r>:
 8004d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d048      	beq.n	8004e10 <_free_r+0x98>
 8004d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d82:	9001      	str	r0, [sp, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f1a1 0404 	sub.w	r4, r1, #4
 8004d8a:	bfb8      	it	lt
 8004d8c:	18e4      	addlt	r4, r4, r3
 8004d8e:	f000 fe81 	bl	8005a94 <__malloc_lock>
 8004d92:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <_free_r+0x9c>)
 8004d94:	9801      	ldr	r0, [sp, #4]
 8004d96:	6813      	ldr	r3, [r2, #0]
 8004d98:	4615      	mov	r5, r2
 8004d9a:	b933      	cbnz	r3, 8004daa <_free_r+0x32>
 8004d9c:	6063      	str	r3, [r4, #4]
 8004d9e:	6014      	str	r4, [r2, #0]
 8004da0:	b003      	add	sp, #12
 8004da2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004da6:	f000 be7b 	b.w	8005aa0 <__malloc_unlock>
 8004daa:	42a3      	cmp	r3, r4
 8004dac:	d90b      	bls.n	8004dc6 <_free_r+0x4e>
 8004dae:	6821      	ldr	r1, [r4, #0]
 8004db0:	1862      	adds	r2, r4, r1
 8004db2:	4293      	cmp	r3, r2
 8004db4:	bf04      	itt	eq
 8004db6:	681a      	ldreq	r2, [r3, #0]
 8004db8:	685b      	ldreq	r3, [r3, #4]
 8004dba:	6063      	str	r3, [r4, #4]
 8004dbc:	bf04      	itt	eq
 8004dbe:	1852      	addeq	r2, r2, r1
 8004dc0:	6022      	streq	r2, [r4, #0]
 8004dc2:	602c      	str	r4, [r5, #0]
 8004dc4:	e7ec      	b.n	8004da0 <_free_r+0x28>
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	b10b      	cbz	r3, 8004dd0 <_free_r+0x58>
 8004dcc:	42a3      	cmp	r3, r4
 8004dce:	d9fa      	bls.n	8004dc6 <_free_r+0x4e>
 8004dd0:	6811      	ldr	r1, [r2, #0]
 8004dd2:	1855      	adds	r5, r2, r1
 8004dd4:	42a5      	cmp	r5, r4
 8004dd6:	d10b      	bne.n	8004df0 <_free_r+0x78>
 8004dd8:	6824      	ldr	r4, [r4, #0]
 8004dda:	4421      	add	r1, r4
 8004ddc:	1854      	adds	r4, r2, r1
 8004dde:	42a3      	cmp	r3, r4
 8004de0:	6011      	str	r1, [r2, #0]
 8004de2:	d1dd      	bne.n	8004da0 <_free_r+0x28>
 8004de4:	681c      	ldr	r4, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	6053      	str	r3, [r2, #4]
 8004dea:	4421      	add	r1, r4
 8004dec:	6011      	str	r1, [r2, #0]
 8004dee:	e7d7      	b.n	8004da0 <_free_r+0x28>
 8004df0:	d902      	bls.n	8004df8 <_free_r+0x80>
 8004df2:	230c      	movs	r3, #12
 8004df4:	6003      	str	r3, [r0, #0]
 8004df6:	e7d3      	b.n	8004da0 <_free_r+0x28>
 8004df8:	6825      	ldr	r5, [r4, #0]
 8004dfa:	1961      	adds	r1, r4, r5
 8004dfc:	428b      	cmp	r3, r1
 8004dfe:	bf04      	itt	eq
 8004e00:	6819      	ldreq	r1, [r3, #0]
 8004e02:	685b      	ldreq	r3, [r3, #4]
 8004e04:	6063      	str	r3, [r4, #4]
 8004e06:	bf04      	itt	eq
 8004e08:	1949      	addeq	r1, r1, r5
 8004e0a:	6021      	streq	r1, [r4, #0]
 8004e0c:	6054      	str	r4, [r2, #4]
 8004e0e:	e7c7      	b.n	8004da0 <_free_r+0x28>
 8004e10:	b003      	add	sp, #12
 8004e12:	bd30      	pop	{r4, r5, pc}
 8004e14:	20002f8c 	.word	0x20002f8c

08004e18 <_malloc_r>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	1ccd      	adds	r5, r1, #3
 8004e1c:	f025 0503 	bic.w	r5, r5, #3
 8004e20:	3508      	adds	r5, #8
 8004e22:	2d0c      	cmp	r5, #12
 8004e24:	bf38      	it	cc
 8004e26:	250c      	movcc	r5, #12
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	db01      	blt.n	8004e32 <_malloc_r+0x1a>
 8004e2e:	42a9      	cmp	r1, r5
 8004e30:	d903      	bls.n	8004e3a <_malloc_r+0x22>
 8004e32:	230c      	movs	r3, #12
 8004e34:	6033      	str	r3, [r6, #0]
 8004e36:	2000      	movs	r0, #0
 8004e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e3a:	f000 fe2b 	bl	8005a94 <__malloc_lock>
 8004e3e:	4921      	ldr	r1, [pc, #132]	; (8004ec4 <_malloc_r+0xac>)
 8004e40:	680a      	ldr	r2, [r1, #0]
 8004e42:	4614      	mov	r4, r2
 8004e44:	b99c      	cbnz	r4, 8004e6e <_malloc_r+0x56>
 8004e46:	4f20      	ldr	r7, [pc, #128]	; (8004ec8 <_malloc_r+0xb0>)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	b923      	cbnz	r3, 8004e56 <_malloc_r+0x3e>
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f000 fb2a 	bl	80054a8 <_sbrk_r>
 8004e54:	6038      	str	r0, [r7, #0]
 8004e56:	4629      	mov	r1, r5
 8004e58:	4630      	mov	r0, r6
 8004e5a:	f000 fb25 	bl	80054a8 <_sbrk_r>
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	d123      	bne.n	8004eaa <_malloc_r+0x92>
 8004e62:	230c      	movs	r3, #12
 8004e64:	6033      	str	r3, [r6, #0]
 8004e66:	4630      	mov	r0, r6
 8004e68:	f000 fe1a 	bl	8005aa0 <__malloc_unlock>
 8004e6c:	e7e3      	b.n	8004e36 <_malloc_r+0x1e>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	1b5b      	subs	r3, r3, r5
 8004e72:	d417      	bmi.n	8004ea4 <_malloc_r+0x8c>
 8004e74:	2b0b      	cmp	r3, #11
 8004e76:	d903      	bls.n	8004e80 <_malloc_r+0x68>
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	441c      	add	r4, r3
 8004e7c:	6025      	str	r5, [r4, #0]
 8004e7e:	e004      	b.n	8004e8a <_malloc_r+0x72>
 8004e80:	6863      	ldr	r3, [r4, #4]
 8004e82:	42a2      	cmp	r2, r4
 8004e84:	bf0c      	ite	eq
 8004e86:	600b      	streq	r3, [r1, #0]
 8004e88:	6053      	strne	r3, [r2, #4]
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f000 fe08 	bl	8005aa0 <__malloc_unlock>
 8004e90:	f104 000b 	add.w	r0, r4, #11
 8004e94:	1d23      	adds	r3, r4, #4
 8004e96:	f020 0007 	bic.w	r0, r0, #7
 8004e9a:	1ac2      	subs	r2, r0, r3
 8004e9c:	d0cc      	beq.n	8004e38 <_malloc_r+0x20>
 8004e9e:	1a1b      	subs	r3, r3, r0
 8004ea0:	50a3      	str	r3, [r4, r2]
 8004ea2:	e7c9      	b.n	8004e38 <_malloc_r+0x20>
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	6864      	ldr	r4, [r4, #4]
 8004ea8:	e7cc      	b.n	8004e44 <_malloc_r+0x2c>
 8004eaa:	1cc4      	adds	r4, r0, #3
 8004eac:	f024 0403 	bic.w	r4, r4, #3
 8004eb0:	42a0      	cmp	r0, r4
 8004eb2:	d0e3      	beq.n	8004e7c <_malloc_r+0x64>
 8004eb4:	1a21      	subs	r1, r4, r0
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f000 faf6 	bl	80054a8 <_sbrk_r>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d1dd      	bne.n	8004e7c <_malloc_r+0x64>
 8004ec0:	e7cf      	b.n	8004e62 <_malloc_r+0x4a>
 8004ec2:	bf00      	nop
 8004ec4:	20002f8c 	.word	0x20002f8c
 8004ec8:	20002f90 	.word	0x20002f90

08004ecc <__sfputc_r>:
 8004ecc:	6893      	ldr	r3, [r2, #8]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	b410      	push	{r4}
 8004ed4:	6093      	str	r3, [r2, #8]
 8004ed6:	da08      	bge.n	8004eea <__sfputc_r+0x1e>
 8004ed8:	6994      	ldr	r4, [r2, #24]
 8004eda:	42a3      	cmp	r3, r4
 8004edc:	db01      	blt.n	8004ee2 <__sfputc_r+0x16>
 8004ede:	290a      	cmp	r1, #10
 8004ee0:	d103      	bne.n	8004eea <__sfputc_r+0x1e>
 8004ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ee6:	f000 baef 	b.w	80054c8 <__swbuf_r>
 8004eea:	6813      	ldr	r3, [r2, #0]
 8004eec:	1c58      	adds	r0, r3, #1
 8004eee:	6010      	str	r0, [r2, #0]
 8004ef0:	7019      	strb	r1, [r3, #0]
 8004ef2:	4608      	mov	r0, r1
 8004ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <__sfputs_r>:
 8004efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efc:	4606      	mov	r6, r0
 8004efe:	460f      	mov	r7, r1
 8004f00:	4614      	mov	r4, r2
 8004f02:	18d5      	adds	r5, r2, r3
 8004f04:	42ac      	cmp	r4, r5
 8004f06:	d101      	bne.n	8004f0c <__sfputs_r+0x12>
 8004f08:	2000      	movs	r0, #0
 8004f0a:	e007      	b.n	8004f1c <__sfputs_r+0x22>
 8004f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f10:	463a      	mov	r2, r7
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7ff ffda 	bl	8004ecc <__sfputc_r>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d1f3      	bne.n	8004f04 <__sfputs_r+0xa>
 8004f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f20 <_vfiprintf_r>:
 8004f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f24:	460d      	mov	r5, r1
 8004f26:	b09d      	sub	sp, #116	; 0x74
 8004f28:	4614      	mov	r4, r2
 8004f2a:	4698      	mov	r8, r3
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	b118      	cbz	r0, 8004f38 <_vfiprintf_r+0x18>
 8004f30:	6983      	ldr	r3, [r0, #24]
 8004f32:	b90b      	cbnz	r3, 8004f38 <_vfiprintf_r+0x18>
 8004f34:	f000 fcaa 	bl	800588c <__sinit>
 8004f38:	4b89      	ldr	r3, [pc, #548]	; (8005160 <_vfiprintf_r+0x240>)
 8004f3a:	429d      	cmp	r5, r3
 8004f3c:	d11b      	bne.n	8004f76 <_vfiprintf_r+0x56>
 8004f3e:	6875      	ldr	r5, [r6, #4]
 8004f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f42:	07d9      	lsls	r1, r3, #31
 8004f44:	d405      	bmi.n	8004f52 <_vfiprintf_r+0x32>
 8004f46:	89ab      	ldrh	r3, [r5, #12]
 8004f48:	059a      	lsls	r2, r3, #22
 8004f4a:	d402      	bmi.n	8004f52 <_vfiprintf_r+0x32>
 8004f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f4e:	f000 fd3b 	bl	80059c8 <__retarget_lock_acquire_recursive>
 8004f52:	89ab      	ldrh	r3, [r5, #12]
 8004f54:	071b      	lsls	r3, r3, #28
 8004f56:	d501      	bpl.n	8004f5c <_vfiprintf_r+0x3c>
 8004f58:	692b      	ldr	r3, [r5, #16]
 8004f5a:	b9eb      	cbnz	r3, 8004f98 <_vfiprintf_r+0x78>
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f000 fb04 	bl	800556c <__swsetup_r>
 8004f64:	b1c0      	cbz	r0, 8004f98 <_vfiprintf_r+0x78>
 8004f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f68:	07dc      	lsls	r4, r3, #31
 8004f6a:	d50e      	bpl.n	8004f8a <_vfiprintf_r+0x6a>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	b01d      	add	sp, #116	; 0x74
 8004f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f76:	4b7b      	ldr	r3, [pc, #492]	; (8005164 <_vfiprintf_r+0x244>)
 8004f78:	429d      	cmp	r5, r3
 8004f7a:	d101      	bne.n	8004f80 <_vfiprintf_r+0x60>
 8004f7c:	68b5      	ldr	r5, [r6, #8]
 8004f7e:	e7df      	b.n	8004f40 <_vfiprintf_r+0x20>
 8004f80:	4b79      	ldr	r3, [pc, #484]	; (8005168 <_vfiprintf_r+0x248>)
 8004f82:	429d      	cmp	r5, r3
 8004f84:	bf08      	it	eq
 8004f86:	68f5      	ldreq	r5, [r6, #12]
 8004f88:	e7da      	b.n	8004f40 <_vfiprintf_r+0x20>
 8004f8a:	89ab      	ldrh	r3, [r5, #12]
 8004f8c:	0598      	lsls	r0, r3, #22
 8004f8e:	d4ed      	bmi.n	8004f6c <_vfiprintf_r+0x4c>
 8004f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f92:	f000 fd1a 	bl	80059ca <__retarget_lock_release_recursive>
 8004f96:	e7e9      	b.n	8004f6c <_vfiprintf_r+0x4c>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fa6:	2330      	movs	r3, #48	; 0x30
 8004fa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800516c <_vfiprintf_r+0x24c>
 8004fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fb0:	f04f 0901 	mov.w	r9, #1
 8004fb4:	4623      	mov	r3, r4
 8004fb6:	469a      	mov	sl, r3
 8004fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fbc:	b10a      	cbz	r2, 8004fc2 <_vfiprintf_r+0xa2>
 8004fbe:	2a25      	cmp	r2, #37	; 0x25
 8004fc0:	d1f9      	bne.n	8004fb6 <_vfiprintf_r+0x96>
 8004fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8004fc6:	d00b      	beq.n	8004fe0 <_vfiprintf_r+0xc0>
 8004fc8:	465b      	mov	r3, fp
 8004fca:	4622      	mov	r2, r4
 8004fcc:	4629      	mov	r1, r5
 8004fce:	4630      	mov	r0, r6
 8004fd0:	f7ff ff93 	bl	8004efa <__sfputs_r>
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	f000 80aa 	beq.w	800512e <_vfiprintf_r+0x20e>
 8004fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fdc:	445a      	add	r2, fp
 8004fde:	9209      	str	r2, [sp, #36]	; 0x24
 8004fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80a2 	beq.w	800512e <_vfiprintf_r+0x20e>
 8004fea:	2300      	movs	r3, #0
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ff4:	f10a 0a01 	add.w	sl, sl, #1
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	9307      	str	r3, [sp, #28]
 8004ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005000:	931a      	str	r3, [sp, #104]	; 0x68
 8005002:	4654      	mov	r4, sl
 8005004:	2205      	movs	r2, #5
 8005006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800500a:	4858      	ldr	r0, [pc, #352]	; (800516c <_vfiprintf_r+0x24c>)
 800500c:	f7fb f8f8 	bl	8000200 <memchr>
 8005010:	9a04      	ldr	r2, [sp, #16]
 8005012:	b9d8      	cbnz	r0, 800504c <_vfiprintf_r+0x12c>
 8005014:	06d1      	lsls	r1, r2, #27
 8005016:	bf44      	itt	mi
 8005018:	2320      	movmi	r3, #32
 800501a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800501e:	0713      	lsls	r3, r2, #28
 8005020:	bf44      	itt	mi
 8005022:	232b      	movmi	r3, #43	; 0x2b
 8005024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005028:	f89a 3000 	ldrb.w	r3, [sl]
 800502c:	2b2a      	cmp	r3, #42	; 0x2a
 800502e:	d015      	beq.n	800505c <_vfiprintf_r+0x13c>
 8005030:	9a07      	ldr	r2, [sp, #28]
 8005032:	4654      	mov	r4, sl
 8005034:	2000      	movs	r0, #0
 8005036:	f04f 0c0a 	mov.w	ip, #10
 800503a:	4621      	mov	r1, r4
 800503c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005040:	3b30      	subs	r3, #48	; 0x30
 8005042:	2b09      	cmp	r3, #9
 8005044:	d94e      	bls.n	80050e4 <_vfiprintf_r+0x1c4>
 8005046:	b1b0      	cbz	r0, 8005076 <_vfiprintf_r+0x156>
 8005048:	9207      	str	r2, [sp, #28]
 800504a:	e014      	b.n	8005076 <_vfiprintf_r+0x156>
 800504c:	eba0 0308 	sub.w	r3, r0, r8
 8005050:	fa09 f303 	lsl.w	r3, r9, r3
 8005054:	4313      	orrs	r3, r2
 8005056:	9304      	str	r3, [sp, #16]
 8005058:	46a2      	mov	sl, r4
 800505a:	e7d2      	b.n	8005002 <_vfiprintf_r+0xe2>
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	1d19      	adds	r1, r3, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	9103      	str	r1, [sp, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	bfbb      	ittet	lt
 8005068:	425b      	neglt	r3, r3
 800506a:	f042 0202 	orrlt.w	r2, r2, #2
 800506e:	9307      	strge	r3, [sp, #28]
 8005070:	9307      	strlt	r3, [sp, #28]
 8005072:	bfb8      	it	lt
 8005074:	9204      	strlt	r2, [sp, #16]
 8005076:	7823      	ldrb	r3, [r4, #0]
 8005078:	2b2e      	cmp	r3, #46	; 0x2e
 800507a:	d10c      	bne.n	8005096 <_vfiprintf_r+0x176>
 800507c:	7863      	ldrb	r3, [r4, #1]
 800507e:	2b2a      	cmp	r3, #42	; 0x2a
 8005080:	d135      	bne.n	80050ee <_vfiprintf_r+0x1ce>
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	1d1a      	adds	r2, r3, #4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	9203      	str	r2, [sp, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	bfb8      	it	lt
 800508e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005092:	3402      	adds	r4, #2
 8005094:	9305      	str	r3, [sp, #20]
 8005096:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800517c <_vfiprintf_r+0x25c>
 800509a:	7821      	ldrb	r1, [r4, #0]
 800509c:	2203      	movs	r2, #3
 800509e:	4650      	mov	r0, sl
 80050a0:	f7fb f8ae 	bl	8000200 <memchr>
 80050a4:	b140      	cbz	r0, 80050b8 <_vfiprintf_r+0x198>
 80050a6:	2340      	movs	r3, #64	; 0x40
 80050a8:	eba0 000a 	sub.w	r0, r0, sl
 80050ac:	fa03 f000 	lsl.w	r0, r3, r0
 80050b0:	9b04      	ldr	r3, [sp, #16]
 80050b2:	4303      	orrs	r3, r0
 80050b4:	3401      	adds	r4, #1
 80050b6:	9304      	str	r3, [sp, #16]
 80050b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050bc:	482c      	ldr	r0, [pc, #176]	; (8005170 <_vfiprintf_r+0x250>)
 80050be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050c2:	2206      	movs	r2, #6
 80050c4:	f7fb f89c 	bl	8000200 <memchr>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d03f      	beq.n	800514c <_vfiprintf_r+0x22c>
 80050cc:	4b29      	ldr	r3, [pc, #164]	; (8005174 <_vfiprintf_r+0x254>)
 80050ce:	bb1b      	cbnz	r3, 8005118 <_vfiprintf_r+0x1f8>
 80050d0:	9b03      	ldr	r3, [sp, #12]
 80050d2:	3307      	adds	r3, #7
 80050d4:	f023 0307 	bic.w	r3, r3, #7
 80050d8:	3308      	adds	r3, #8
 80050da:	9303      	str	r3, [sp, #12]
 80050dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050de:	443b      	add	r3, r7
 80050e0:	9309      	str	r3, [sp, #36]	; 0x24
 80050e2:	e767      	b.n	8004fb4 <_vfiprintf_r+0x94>
 80050e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80050e8:	460c      	mov	r4, r1
 80050ea:	2001      	movs	r0, #1
 80050ec:	e7a5      	b.n	800503a <_vfiprintf_r+0x11a>
 80050ee:	2300      	movs	r3, #0
 80050f0:	3401      	adds	r4, #1
 80050f2:	9305      	str	r3, [sp, #20]
 80050f4:	4619      	mov	r1, r3
 80050f6:	f04f 0c0a 	mov.w	ip, #10
 80050fa:	4620      	mov	r0, r4
 80050fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005100:	3a30      	subs	r2, #48	; 0x30
 8005102:	2a09      	cmp	r2, #9
 8005104:	d903      	bls.n	800510e <_vfiprintf_r+0x1ee>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0c5      	beq.n	8005096 <_vfiprintf_r+0x176>
 800510a:	9105      	str	r1, [sp, #20]
 800510c:	e7c3      	b.n	8005096 <_vfiprintf_r+0x176>
 800510e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005112:	4604      	mov	r4, r0
 8005114:	2301      	movs	r3, #1
 8005116:	e7f0      	b.n	80050fa <_vfiprintf_r+0x1da>
 8005118:	ab03      	add	r3, sp, #12
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	462a      	mov	r2, r5
 800511e:	4b16      	ldr	r3, [pc, #88]	; (8005178 <_vfiprintf_r+0x258>)
 8005120:	a904      	add	r1, sp, #16
 8005122:	4630      	mov	r0, r6
 8005124:	f3af 8000 	nop.w
 8005128:	4607      	mov	r7, r0
 800512a:	1c78      	adds	r0, r7, #1
 800512c:	d1d6      	bne.n	80050dc <_vfiprintf_r+0x1bc>
 800512e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005130:	07d9      	lsls	r1, r3, #31
 8005132:	d405      	bmi.n	8005140 <_vfiprintf_r+0x220>
 8005134:	89ab      	ldrh	r3, [r5, #12]
 8005136:	059a      	lsls	r2, r3, #22
 8005138:	d402      	bmi.n	8005140 <_vfiprintf_r+0x220>
 800513a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800513c:	f000 fc45 	bl	80059ca <__retarget_lock_release_recursive>
 8005140:	89ab      	ldrh	r3, [r5, #12]
 8005142:	065b      	lsls	r3, r3, #25
 8005144:	f53f af12 	bmi.w	8004f6c <_vfiprintf_r+0x4c>
 8005148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800514a:	e711      	b.n	8004f70 <_vfiprintf_r+0x50>
 800514c:	ab03      	add	r3, sp, #12
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	462a      	mov	r2, r5
 8005152:	4b09      	ldr	r3, [pc, #36]	; (8005178 <_vfiprintf_r+0x258>)
 8005154:	a904      	add	r1, sp, #16
 8005156:	4630      	mov	r0, r6
 8005158:	f000 f880 	bl	800525c <_printf_i>
 800515c:	e7e4      	b.n	8005128 <_vfiprintf_r+0x208>
 800515e:	bf00      	nop
 8005160:	08008958 	.word	0x08008958
 8005164:	08008978 	.word	0x08008978
 8005168:	08008938 	.word	0x08008938
 800516c:	08008904 	.word	0x08008904
 8005170:	0800890e 	.word	0x0800890e
 8005174:	00000000 	.word	0x00000000
 8005178:	08004efb 	.word	0x08004efb
 800517c:	0800890a 	.word	0x0800890a

08005180 <_printf_common>:
 8005180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005184:	4616      	mov	r6, r2
 8005186:	4699      	mov	r9, r3
 8005188:	688a      	ldr	r2, [r1, #8]
 800518a:	690b      	ldr	r3, [r1, #16]
 800518c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005190:	4293      	cmp	r3, r2
 8005192:	bfb8      	it	lt
 8005194:	4613      	movlt	r3, r2
 8005196:	6033      	str	r3, [r6, #0]
 8005198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800519c:	4607      	mov	r7, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	b10a      	cbz	r2, 80051a6 <_printf_common+0x26>
 80051a2:	3301      	adds	r3, #1
 80051a4:	6033      	str	r3, [r6, #0]
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	0699      	lsls	r1, r3, #26
 80051aa:	bf42      	ittt	mi
 80051ac:	6833      	ldrmi	r3, [r6, #0]
 80051ae:	3302      	addmi	r3, #2
 80051b0:	6033      	strmi	r3, [r6, #0]
 80051b2:	6825      	ldr	r5, [r4, #0]
 80051b4:	f015 0506 	ands.w	r5, r5, #6
 80051b8:	d106      	bne.n	80051c8 <_printf_common+0x48>
 80051ba:	f104 0a19 	add.w	sl, r4, #25
 80051be:	68e3      	ldr	r3, [r4, #12]
 80051c0:	6832      	ldr	r2, [r6, #0]
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	42ab      	cmp	r3, r5
 80051c6:	dc26      	bgt.n	8005216 <_printf_common+0x96>
 80051c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051cc:	1e13      	subs	r3, r2, #0
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	bf18      	it	ne
 80051d2:	2301      	movne	r3, #1
 80051d4:	0692      	lsls	r2, r2, #26
 80051d6:	d42b      	bmi.n	8005230 <_printf_common+0xb0>
 80051d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051dc:	4649      	mov	r1, r9
 80051de:	4638      	mov	r0, r7
 80051e0:	47c0      	blx	r8
 80051e2:	3001      	adds	r0, #1
 80051e4:	d01e      	beq.n	8005224 <_printf_common+0xa4>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	68e5      	ldr	r5, [r4, #12]
 80051ea:	6832      	ldr	r2, [r6, #0]
 80051ec:	f003 0306 	and.w	r3, r3, #6
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	bf08      	it	eq
 80051f4:	1aad      	subeq	r5, r5, r2
 80051f6:	68a3      	ldr	r3, [r4, #8]
 80051f8:	6922      	ldr	r2, [r4, #16]
 80051fa:	bf0c      	ite	eq
 80051fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005200:	2500      	movne	r5, #0
 8005202:	4293      	cmp	r3, r2
 8005204:	bfc4      	itt	gt
 8005206:	1a9b      	subgt	r3, r3, r2
 8005208:	18ed      	addgt	r5, r5, r3
 800520a:	2600      	movs	r6, #0
 800520c:	341a      	adds	r4, #26
 800520e:	42b5      	cmp	r5, r6
 8005210:	d11a      	bne.n	8005248 <_printf_common+0xc8>
 8005212:	2000      	movs	r0, #0
 8005214:	e008      	b.n	8005228 <_printf_common+0xa8>
 8005216:	2301      	movs	r3, #1
 8005218:	4652      	mov	r2, sl
 800521a:	4649      	mov	r1, r9
 800521c:	4638      	mov	r0, r7
 800521e:	47c0      	blx	r8
 8005220:	3001      	adds	r0, #1
 8005222:	d103      	bne.n	800522c <_printf_common+0xac>
 8005224:	f04f 30ff 	mov.w	r0, #4294967295
 8005228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522c:	3501      	adds	r5, #1
 800522e:	e7c6      	b.n	80051be <_printf_common+0x3e>
 8005230:	18e1      	adds	r1, r4, r3
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	2030      	movs	r0, #48	; 0x30
 8005236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800523a:	4422      	add	r2, r4
 800523c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005244:	3302      	adds	r3, #2
 8005246:	e7c7      	b.n	80051d8 <_printf_common+0x58>
 8005248:	2301      	movs	r3, #1
 800524a:	4622      	mov	r2, r4
 800524c:	4649      	mov	r1, r9
 800524e:	4638      	mov	r0, r7
 8005250:	47c0      	blx	r8
 8005252:	3001      	adds	r0, #1
 8005254:	d0e6      	beq.n	8005224 <_printf_common+0xa4>
 8005256:	3601      	adds	r6, #1
 8005258:	e7d9      	b.n	800520e <_printf_common+0x8e>
	...

0800525c <_printf_i>:
 800525c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005260:	460c      	mov	r4, r1
 8005262:	4691      	mov	r9, r2
 8005264:	7e27      	ldrb	r7, [r4, #24]
 8005266:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005268:	2f78      	cmp	r7, #120	; 0x78
 800526a:	4680      	mov	r8, r0
 800526c:	469a      	mov	sl, r3
 800526e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005272:	d807      	bhi.n	8005284 <_printf_i+0x28>
 8005274:	2f62      	cmp	r7, #98	; 0x62
 8005276:	d80a      	bhi.n	800528e <_printf_i+0x32>
 8005278:	2f00      	cmp	r7, #0
 800527a:	f000 80d8 	beq.w	800542e <_printf_i+0x1d2>
 800527e:	2f58      	cmp	r7, #88	; 0x58
 8005280:	f000 80a3 	beq.w	80053ca <_printf_i+0x16e>
 8005284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800528c:	e03a      	b.n	8005304 <_printf_i+0xa8>
 800528e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005292:	2b15      	cmp	r3, #21
 8005294:	d8f6      	bhi.n	8005284 <_printf_i+0x28>
 8005296:	a001      	add	r0, pc, #4	; (adr r0, 800529c <_printf_i+0x40>)
 8005298:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800529c:	080052f5 	.word	0x080052f5
 80052a0:	08005309 	.word	0x08005309
 80052a4:	08005285 	.word	0x08005285
 80052a8:	08005285 	.word	0x08005285
 80052ac:	08005285 	.word	0x08005285
 80052b0:	08005285 	.word	0x08005285
 80052b4:	08005309 	.word	0x08005309
 80052b8:	08005285 	.word	0x08005285
 80052bc:	08005285 	.word	0x08005285
 80052c0:	08005285 	.word	0x08005285
 80052c4:	08005285 	.word	0x08005285
 80052c8:	08005415 	.word	0x08005415
 80052cc:	08005339 	.word	0x08005339
 80052d0:	080053f7 	.word	0x080053f7
 80052d4:	08005285 	.word	0x08005285
 80052d8:	08005285 	.word	0x08005285
 80052dc:	08005437 	.word	0x08005437
 80052e0:	08005285 	.word	0x08005285
 80052e4:	08005339 	.word	0x08005339
 80052e8:	08005285 	.word	0x08005285
 80052ec:	08005285 	.word	0x08005285
 80052f0:	080053ff 	.word	0x080053ff
 80052f4:	680b      	ldr	r3, [r1, #0]
 80052f6:	1d1a      	adds	r2, r3, #4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	600a      	str	r2, [r1, #0]
 80052fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005304:	2301      	movs	r3, #1
 8005306:	e0a3      	b.n	8005450 <_printf_i+0x1f4>
 8005308:	6825      	ldr	r5, [r4, #0]
 800530a:	6808      	ldr	r0, [r1, #0]
 800530c:	062e      	lsls	r6, r5, #24
 800530e:	f100 0304 	add.w	r3, r0, #4
 8005312:	d50a      	bpl.n	800532a <_printf_i+0xce>
 8005314:	6805      	ldr	r5, [r0, #0]
 8005316:	600b      	str	r3, [r1, #0]
 8005318:	2d00      	cmp	r5, #0
 800531a:	da03      	bge.n	8005324 <_printf_i+0xc8>
 800531c:	232d      	movs	r3, #45	; 0x2d
 800531e:	426d      	negs	r5, r5
 8005320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005324:	485e      	ldr	r0, [pc, #376]	; (80054a0 <_printf_i+0x244>)
 8005326:	230a      	movs	r3, #10
 8005328:	e019      	b.n	800535e <_printf_i+0x102>
 800532a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800532e:	6805      	ldr	r5, [r0, #0]
 8005330:	600b      	str	r3, [r1, #0]
 8005332:	bf18      	it	ne
 8005334:	b22d      	sxthne	r5, r5
 8005336:	e7ef      	b.n	8005318 <_printf_i+0xbc>
 8005338:	680b      	ldr	r3, [r1, #0]
 800533a:	6825      	ldr	r5, [r4, #0]
 800533c:	1d18      	adds	r0, r3, #4
 800533e:	6008      	str	r0, [r1, #0]
 8005340:	0628      	lsls	r0, r5, #24
 8005342:	d501      	bpl.n	8005348 <_printf_i+0xec>
 8005344:	681d      	ldr	r5, [r3, #0]
 8005346:	e002      	b.n	800534e <_printf_i+0xf2>
 8005348:	0669      	lsls	r1, r5, #25
 800534a:	d5fb      	bpl.n	8005344 <_printf_i+0xe8>
 800534c:	881d      	ldrh	r5, [r3, #0]
 800534e:	4854      	ldr	r0, [pc, #336]	; (80054a0 <_printf_i+0x244>)
 8005350:	2f6f      	cmp	r7, #111	; 0x6f
 8005352:	bf0c      	ite	eq
 8005354:	2308      	moveq	r3, #8
 8005356:	230a      	movne	r3, #10
 8005358:	2100      	movs	r1, #0
 800535a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800535e:	6866      	ldr	r6, [r4, #4]
 8005360:	60a6      	str	r6, [r4, #8]
 8005362:	2e00      	cmp	r6, #0
 8005364:	bfa2      	ittt	ge
 8005366:	6821      	ldrge	r1, [r4, #0]
 8005368:	f021 0104 	bicge.w	r1, r1, #4
 800536c:	6021      	strge	r1, [r4, #0]
 800536e:	b90d      	cbnz	r5, 8005374 <_printf_i+0x118>
 8005370:	2e00      	cmp	r6, #0
 8005372:	d04d      	beq.n	8005410 <_printf_i+0x1b4>
 8005374:	4616      	mov	r6, r2
 8005376:	fbb5 f1f3 	udiv	r1, r5, r3
 800537a:	fb03 5711 	mls	r7, r3, r1, r5
 800537e:	5dc7      	ldrb	r7, [r0, r7]
 8005380:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005384:	462f      	mov	r7, r5
 8005386:	42bb      	cmp	r3, r7
 8005388:	460d      	mov	r5, r1
 800538a:	d9f4      	bls.n	8005376 <_printf_i+0x11a>
 800538c:	2b08      	cmp	r3, #8
 800538e:	d10b      	bne.n	80053a8 <_printf_i+0x14c>
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	07df      	lsls	r7, r3, #31
 8005394:	d508      	bpl.n	80053a8 <_printf_i+0x14c>
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	6861      	ldr	r1, [r4, #4]
 800539a:	4299      	cmp	r1, r3
 800539c:	bfde      	ittt	le
 800539e:	2330      	movle	r3, #48	; 0x30
 80053a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053a8:	1b92      	subs	r2, r2, r6
 80053aa:	6122      	str	r2, [r4, #16]
 80053ac:	f8cd a000 	str.w	sl, [sp]
 80053b0:	464b      	mov	r3, r9
 80053b2:	aa03      	add	r2, sp, #12
 80053b4:	4621      	mov	r1, r4
 80053b6:	4640      	mov	r0, r8
 80053b8:	f7ff fee2 	bl	8005180 <_printf_common>
 80053bc:	3001      	adds	r0, #1
 80053be:	d14c      	bne.n	800545a <_printf_i+0x1fe>
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	b004      	add	sp, #16
 80053c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ca:	4835      	ldr	r0, [pc, #212]	; (80054a0 <_printf_i+0x244>)
 80053cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	680e      	ldr	r6, [r1, #0]
 80053d4:	061f      	lsls	r7, r3, #24
 80053d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80053da:	600e      	str	r6, [r1, #0]
 80053dc:	d514      	bpl.n	8005408 <_printf_i+0x1ac>
 80053de:	07d9      	lsls	r1, r3, #31
 80053e0:	bf44      	itt	mi
 80053e2:	f043 0320 	orrmi.w	r3, r3, #32
 80053e6:	6023      	strmi	r3, [r4, #0]
 80053e8:	b91d      	cbnz	r5, 80053f2 <_printf_i+0x196>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	f023 0320 	bic.w	r3, r3, #32
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	2310      	movs	r3, #16
 80053f4:	e7b0      	b.n	8005358 <_printf_i+0xfc>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	f043 0320 	orr.w	r3, r3, #32
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	2378      	movs	r3, #120	; 0x78
 8005400:	4828      	ldr	r0, [pc, #160]	; (80054a4 <_printf_i+0x248>)
 8005402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005406:	e7e3      	b.n	80053d0 <_printf_i+0x174>
 8005408:	065e      	lsls	r6, r3, #25
 800540a:	bf48      	it	mi
 800540c:	b2ad      	uxthmi	r5, r5
 800540e:	e7e6      	b.n	80053de <_printf_i+0x182>
 8005410:	4616      	mov	r6, r2
 8005412:	e7bb      	b.n	800538c <_printf_i+0x130>
 8005414:	680b      	ldr	r3, [r1, #0]
 8005416:	6826      	ldr	r6, [r4, #0]
 8005418:	6960      	ldr	r0, [r4, #20]
 800541a:	1d1d      	adds	r5, r3, #4
 800541c:	600d      	str	r5, [r1, #0]
 800541e:	0635      	lsls	r5, r6, #24
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	d501      	bpl.n	8005428 <_printf_i+0x1cc>
 8005424:	6018      	str	r0, [r3, #0]
 8005426:	e002      	b.n	800542e <_printf_i+0x1d2>
 8005428:	0671      	lsls	r1, r6, #25
 800542a:	d5fb      	bpl.n	8005424 <_printf_i+0x1c8>
 800542c:	8018      	strh	r0, [r3, #0]
 800542e:	2300      	movs	r3, #0
 8005430:	6123      	str	r3, [r4, #16]
 8005432:	4616      	mov	r6, r2
 8005434:	e7ba      	b.n	80053ac <_printf_i+0x150>
 8005436:	680b      	ldr	r3, [r1, #0]
 8005438:	1d1a      	adds	r2, r3, #4
 800543a:	600a      	str	r2, [r1, #0]
 800543c:	681e      	ldr	r6, [r3, #0]
 800543e:	6862      	ldr	r2, [r4, #4]
 8005440:	2100      	movs	r1, #0
 8005442:	4630      	mov	r0, r6
 8005444:	f7fa fedc 	bl	8000200 <memchr>
 8005448:	b108      	cbz	r0, 800544e <_printf_i+0x1f2>
 800544a:	1b80      	subs	r0, r0, r6
 800544c:	6060      	str	r0, [r4, #4]
 800544e:	6863      	ldr	r3, [r4, #4]
 8005450:	6123      	str	r3, [r4, #16]
 8005452:	2300      	movs	r3, #0
 8005454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005458:	e7a8      	b.n	80053ac <_printf_i+0x150>
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	4632      	mov	r2, r6
 800545e:	4649      	mov	r1, r9
 8005460:	4640      	mov	r0, r8
 8005462:	47d0      	blx	sl
 8005464:	3001      	adds	r0, #1
 8005466:	d0ab      	beq.n	80053c0 <_printf_i+0x164>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	079b      	lsls	r3, r3, #30
 800546c:	d413      	bmi.n	8005496 <_printf_i+0x23a>
 800546e:	68e0      	ldr	r0, [r4, #12]
 8005470:	9b03      	ldr	r3, [sp, #12]
 8005472:	4298      	cmp	r0, r3
 8005474:	bfb8      	it	lt
 8005476:	4618      	movlt	r0, r3
 8005478:	e7a4      	b.n	80053c4 <_printf_i+0x168>
 800547a:	2301      	movs	r3, #1
 800547c:	4632      	mov	r2, r6
 800547e:	4649      	mov	r1, r9
 8005480:	4640      	mov	r0, r8
 8005482:	47d0      	blx	sl
 8005484:	3001      	adds	r0, #1
 8005486:	d09b      	beq.n	80053c0 <_printf_i+0x164>
 8005488:	3501      	adds	r5, #1
 800548a:	68e3      	ldr	r3, [r4, #12]
 800548c:	9903      	ldr	r1, [sp, #12]
 800548e:	1a5b      	subs	r3, r3, r1
 8005490:	42ab      	cmp	r3, r5
 8005492:	dcf2      	bgt.n	800547a <_printf_i+0x21e>
 8005494:	e7eb      	b.n	800546e <_printf_i+0x212>
 8005496:	2500      	movs	r5, #0
 8005498:	f104 0619 	add.w	r6, r4, #25
 800549c:	e7f5      	b.n	800548a <_printf_i+0x22e>
 800549e:	bf00      	nop
 80054a0:	08008915 	.word	0x08008915
 80054a4:	08008926 	.word	0x08008926

080054a8 <_sbrk_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4d06      	ldr	r5, [pc, #24]	; (80054c4 <_sbrk_r+0x1c>)
 80054ac:	2300      	movs	r3, #0
 80054ae:	4604      	mov	r4, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	602b      	str	r3, [r5, #0]
 80054b4:	f7fb fdcc 	bl	8001050 <_sbrk>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d102      	bne.n	80054c2 <_sbrk_r+0x1a>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	b103      	cbz	r3, 80054c2 <_sbrk_r+0x1a>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	20003374 	.word	0x20003374

080054c8 <__swbuf_r>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	460e      	mov	r6, r1
 80054cc:	4614      	mov	r4, r2
 80054ce:	4605      	mov	r5, r0
 80054d0:	b118      	cbz	r0, 80054da <__swbuf_r+0x12>
 80054d2:	6983      	ldr	r3, [r0, #24]
 80054d4:	b90b      	cbnz	r3, 80054da <__swbuf_r+0x12>
 80054d6:	f000 f9d9 	bl	800588c <__sinit>
 80054da:	4b21      	ldr	r3, [pc, #132]	; (8005560 <__swbuf_r+0x98>)
 80054dc:	429c      	cmp	r4, r3
 80054de:	d12b      	bne.n	8005538 <__swbuf_r+0x70>
 80054e0:	686c      	ldr	r4, [r5, #4]
 80054e2:	69a3      	ldr	r3, [r4, #24]
 80054e4:	60a3      	str	r3, [r4, #8]
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	071a      	lsls	r2, r3, #28
 80054ea:	d52f      	bpl.n	800554c <__swbuf_r+0x84>
 80054ec:	6923      	ldr	r3, [r4, #16]
 80054ee:	b36b      	cbz	r3, 800554c <__swbuf_r+0x84>
 80054f0:	6923      	ldr	r3, [r4, #16]
 80054f2:	6820      	ldr	r0, [r4, #0]
 80054f4:	1ac0      	subs	r0, r0, r3
 80054f6:	6963      	ldr	r3, [r4, #20]
 80054f8:	b2f6      	uxtb	r6, r6
 80054fa:	4283      	cmp	r3, r0
 80054fc:	4637      	mov	r7, r6
 80054fe:	dc04      	bgt.n	800550a <__swbuf_r+0x42>
 8005500:	4621      	mov	r1, r4
 8005502:	4628      	mov	r0, r5
 8005504:	f000 f92e 	bl	8005764 <_fflush_r>
 8005508:	bb30      	cbnz	r0, 8005558 <__swbuf_r+0x90>
 800550a:	68a3      	ldr	r3, [r4, #8]
 800550c:	3b01      	subs	r3, #1
 800550e:	60a3      	str	r3, [r4, #8]
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	6022      	str	r2, [r4, #0]
 8005516:	701e      	strb	r6, [r3, #0]
 8005518:	6963      	ldr	r3, [r4, #20]
 800551a:	3001      	adds	r0, #1
 800551c:	4283      	cmp	r3, r0
 800551e:	d004      	beq.n	800552a <__swbuf_r+0x62>
 8005520:	89a3      	ldrh	r3, [r4, #12]
 8005522:	07db      	lsls	r3, r3, #31
 8005524:	d506      	bpl.n	8005534 <__swbuf_r+0x6c>
 8005526:	2e0a      	cmp	r6, #10
 8005528:	d104      	bne.n	8005534 <__swbuf_r+0x6c>
 800552a:	4621      	mov	r1, r4
 800552c:	4628      	mov	r0, r5
 800552e:	f000 f919 	bl	8005764 <_fflush_r>
 8005532:	b988      	cbnz	r0, 8005558 <__swbuf_r+0x90>
 8005534:	4638      	mov	r0, r7
 8005536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <__swbuf_r+0x9c>)
 800553a:	429c      	cmp	r4, r3
 800553c:	d101      	bne.n	8005542 <__swbuf_r+0x7a>
 800553e:	68ac      	ldr	r4, [r5, #8]
 8005540:	e7cf      	b.n	80054e2 <__swbuf_r+0x1a>
 8005542:	4b09      	ldr	r3, [pc, #36]	; (8005568 <__swbuf_r+0xa0>)
 8005544:	429c      	cmp	r4, r3
 8005546:	bf08      	it	eq
 8005548:	68ec      	ldreq	r4, [r5, #12]
 800554a:	e7ca      	b.n	80054e2 <__swbuf_r+0x1a>
 800554c:	4621      	mov	r1, r4
 800554e:	4628      	mov	r0, r5
 8005550:	f000 f80c 	bl	800556c <__swsetup_r>
 8005554:	2800      	cmp	r0, #0
 8005556:	d0cb      	beq.n	80054f0 <__swbuf_r+0x28>
 8005558:	f04f 37ff 	mov.w	r7, #4294967295
 800555c:	e7ea      	b.n	8005534 <__swbuf_r+0x6c>
 800555e:	bf00      	nop
 8005560:	08008958 	.word	0x08008958
 8005564:	08008978 	.word	0x08008978
 8005568:	08008938 	.word	0x08008938

0800556c <__swsetup_r>:
 800556c:	4b32      	ldr	r3, [pc, #200]	; (8005638 <__swsetup_r+0xcc>)
 800556e:	b570      	push	{r4, r5, r6, lr}
 8005570:	681d      	ldr	r5, [r3, #0]
 8005572:	4606      	mov	r6, r0
 8005574:	460c      	mov	r4, r1
 8005576:	b125      	cbz	r5, 8005582 <__swsetup_r+0x16>
 8005578:	69ab      	ldr	r3, [r5, #24]
 800557a:	b913      	cbnz	r3, 8005582 <__swsetup_r+0x16>
 800557c:	4628      	mov	r0, r5
 800557e:	f000 f985 	bl	800588c <__sinit>
 8005582:	4b2e      	ldr	r3, [pc, #184]	; (800563c <__swsetup_r+0xd0>)
 8005584:	429c      	cmp	r4, r3
 8005586:	d10f      	bne.n	80055a8 <__swsetup_r+0x3c>
 8005588:	686c      	ldr	r4, [r5, #4]
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005590:	0719      	lsls	r1, r3, #28
 8005592:	d42c      	bmi.n	80055ee <__swsetup_r+0x82>
 8005594:	06dd      	lsls	r5, r3, #27
 8005596:	d411      	bmi.n	80055bc <__swsetup_r+0x50>
 8005598:	2309      	movs	r3, #9
 800559a:	6033      	str	r3, [r6, #0]
 800559c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055a0:	81a3      	strh	r3, [r4, #12]
 80055a2:	f04f 30ff 	mov.w	r0, #4294967295
 80055a6:	e03e      	b.n	8005626 <__swsetup_r+0xba>
 80055a8:	4b25      	ldr	r3, [pc, #148]	; (8005640 <__swsetup_r+0xd4>)
 80055aa:	429c      	cmp	r4, r3
 80055ac:	d101      	bne.n	80055b2 <__swsetup_r+0x46>
 80055ae:	68ac      	ldr	r4, [r5, #8]
 80055b0:	e7eb      	b.n	800558a <__swsetup_r+0x1e>
 80055b2:	4b24      	ldr	r3, [pc, #144]	; (8005644 <__swsetup_r+0xd8>)
 80055b4:	429c      	cmp	r4, r3
 80055b6:	bf08      	it	eq
 80055b8:	68ec      	ldreq	r4, [r5, #12]
 80055ba:	e7e6      	b.n	800558a <__swsetup_r+0x1e>
 80055bc:	0758      	lsls	r0, r3, #29
 80055be:	d512      	bpl.n	80055e6 <__swsetup_r+0x7a>
 80055c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055c2:	b141      	cbz	r1, 80055d6 <__swsetup_r+0x6a>
 80055c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055c8:	4299      	cmp	r1, r3
 80055ca:	d002      	beq.n	80055d2 <__swsetup_r+0x66>
 80055cc:	4630      	mov	r0, r6
 80055ce:	f7ff fbd3 	bl	8004d78 <_free_r>
 80055d2:	2300      	movs	r3, #0
 80055d4:	6363      	str	r3, [r4, #52]	; 0x34
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055dc:	81a3      	strh	r3, [r4, #12]
 80055de:	2300      	movs	r3, #0
 80055e0:	6063      	str	r3, [r4, #4]
 80055e2:	6923      	ldr	r3, [r4, #16]
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f043 0308 	orr.w	r3, r3, #8
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	6923      	ldr	r3, [r4, #16]
 80055f0:	b94b      	cbnz	r3, 8005606 <__swsetup_r+0x9a>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fc:	d003      	beq.n	8005606 <__swsetup_r+0x9a>
 80055fe:	4621      	mov	r1, r4
 8005600:	4630      	mov	r0, r6
 8005602:	f000 fa07 	bl	8005a14 <__smakebuf_r>
 8005606:	89a0      	ldrh	r0, [r4, #12]
 8005608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800560c:	f010 0301 	ands.w	r3, r0, #1
 8005610:	d00a      	beq.n	8005628 <__swsetup_r+0xbc>
 8005612:	2300      	movs	r3, #0
 8005614:	60a3      	str	r3, [r4, #8]
 8005616:	6963      	ldr	r3, [r4, #20]
 8005618:	425b      	negs	r3, r3
 800561a:	61a3      	str	r3, [r4, #24]
 800561c:	6923      	ldr	r3, [r4, #16]
 800561e:	b943      	cbnz	r3, 8005632 <__swsetup_r+0xc6>
 8005620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005624:	d1ba      	bne.n	800559c <__swsetup_r+0x30>
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	0781      	lsls	r1, r0, #30
 800562a:	bf58      	it	pl
 800562c:	6963      	ldrpl	r3, [r4, #20]
 800562e:	60a3      	str	r3, [r4, #8]
 8005630:	e7f4      	b.n	800561c <__swsetup_r+0xb0>
 8005632:	2000      	movs	r0, #0
 8005634:	e7f7      	b.n	8005626 <__swsetup_r+0xba>
 8005636:	bf00      	nop
 8005638:	20000024 	.word	0x20000024
 800563c:	08008958 	.word	0x08008958
 8005640:	08008978 	.word	0x08008978
 8005644:	08008938 	.word	0x08008938

08005648 <abort>:
 8005648:	b508      	push	{r3, lr}
 800564a:	2006      	movs	r0, #6
 800564c:	f000 fa56 	bl	8005afc <raise>
 8005650:	2001      	movs	r0, #1
 8005652:	f7fb fc85 	bl	8000f60 <_exit>
	...

08005658 <__sflush_r>:
 8005658:	898a      	ldrh	r2, [r1, #12]
 800565a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800565e:	4605      	mov	r5, r0
 8005660:	0710      	lsls	r0, r2, #28
 8005662:	460c      	mov	r4, r1
 8005664:	d458      	bmi.n	8005718 <__sflush_r+0xc0>
 8005666:	684b      	ldr	r3, [r1, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	dc05      	bgt.n	8005678 <__sflush_r+0x20>
 800566c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	dc02      	bgt.n	8005678 <__sflush_r+0x20>
 8005672:	2000      	movs	r0, #0
 8005674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800567a:	2e00      	cmp	r6, #0
 800567c:	d0f9      	beq.n	8005672 <__sflush_r+0x1a>
 800567e:	2300      	movs	r3, #0
 8005680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005684:	682f      	ldr	r7, [r5, #0]
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	d032      	beq.n	80056f0 <__sflush_r+0x98>
 800568a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	075a      	lsls	r2, r3, #29
 8005690:	d505      	bpl.n	800569e <__sflush_r+0x46>
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	1ac0      	subs	r0, r0, r3
 8005696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005698:	b10b      	cbz	r3, 800569e <__sflush_r+0x46>
 800569a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800569c:	1ac0      	subs	r0, r0, r3
 800569e:	2300      	movs	r3, #0
 80056a0:	4602      	mov	r2, r0
 80056a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056a4:	6a21      	ldr	r1, [r4, #32]
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b0      	blx	r6
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	d106      	bne.n	80056be <__sflush_r+0x66>
 80056b0:	6829      	ldr	r1, [r5, #0]
 80056b2:	291d      	cmp	r1, #29
 80056b4:	d82c      	bhi.n	8005710 <__sflush_r+0xb8>
 80056b6:	4a2a      	ldr	r2, [pc, #168]	; (8005760 <__sflush_r+0x108>)
 80056b8:	40ca      	lsrs	r2, r1
 80056ba:	07d6      	lsls	r6, r2, #31
 80056bc:	d528      	bpl.n	8005710 <__sflush_r+0xb8>
 80056be:	2200      	movs	r2, #0
 80056c0:	6062      	str	r2, [r4, #4]
 80056c2:	04d9      	lsls	r1, r3, #19
 80056c4:	6922      	ldr	r2, [r4, #16]
 80056c6:	6022      	str	r2, [r4, #0]
 80056c8:	d504      	bpl.n	80056d4 <__sflush_r+0x7c>
 80056ca:	1c42      	adds	r2, r0, #1
 80056cc:	d101      	bne.n	80056d2 <__sflush_r+0x7a>
 80056ce:	682b      	ldr	r3, [r5, #0]
 80056d0:	b903      	cbnz	r3, 80056d4 <__sflush_r+0x7c>
 80056d2:	6560      	str	r0, [r4, #84]	; 0x54
 80056d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056d6:	602f      	str	r7, [r5, #0]
 80056d8:	2900      	cmp	r1, #0
 80056da:	d0ca      	beq.n	8005672 <__sflush_r+0x1a>
 80056dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056e0:	4299      	cmp	r1, r3
 80056e2:	d002      	beq.n	80056ea <__sflush_r+0x92>
 80056e4:	4628      	mov	r0, r5
 80056e6:	f7ff fb47 	bl	8004d78 <_free_r>
 80056ea:	2000      	movs	r0, #0
 80056ec:	6360      	str	r0, [r4, #52]	; 0x34
 80056ee:	e7c1      	b.n	8005674 <__sflush_r+0x1c>
 80056f0:	6a21      	ldr	r1, [r4, #32]
 80056f2:	2301      	movs	r3, #1
 80056f4:	4628      	mov	r0, r5
 80056f6:	47b0      	blx	r6
 80056f8:	1c41      	adds	r1, r0, #1
 80056fa:	d1c7      	bne.n	800568c <__sflush_r+0x34>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0c4      	beq.n	800568c <__sflush_r+0x34>
 8005702:	2b1d      	cmp	r3, #29
 8005704:	d001      	beq.n	800570a <__sflush_r+0xb2>
 8005706:	2b16      	cmp	r3, #22
 8005708:	d101      	bne.n	800570e <__sflush_r+0xb6>
 800570a:	602f      	str	r7, [r5, #0]
 800570c:	e7b1      	b.n	8005672 <__sflush_r+0x1a>
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005714:	81a3      	strh	r3, [r4, #12]
 8005716:	e7ad      	b.n	8005674 <__sflush_r+0x1c>
 8005718:	690f      	ldr	r7, [r1, #16]
 800571a:	2f00      	cmp	r7, #0
 800571c:	d0a9      	beq.n	8005672 <__sflush_r+0x1a>
 800571e:	0793      	lsls	r3, r2, #30
 8005720:	680e      	ldr	r6, [r1, #0]
 8005722:	bf08      	it	eq
 8005724:	694b      	ldreq	r3, [r1, #20]
 8005726:	600f      	str	r7, [r1, #0]
 8005728:	bf18      	it	ne
 800572a:	2300      	movne	r3, #0
 800572c:	eba6 0807 	sub.w	r8, r6, r7
 8005730:	608b      	str	r3, [r1, #8]
 8005732:	f1b8 0f00 	cmp.w	r8, #0
 8005736:	dd9c      	ble.n	8005672 <__sflush_r+0x1a>
 8005738:	6a21      	ldr	r1, [r4, #32]
 800573a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800573c:	4643      	mov	r3, r8
 800573e:	463a      	mov	r2, r7
 8005740:	4628      	mov	r0, r5
 8005742:	47b0      	blx	r6
 8005744:	2800      	cmp	r0, #0
 8005746:	dc06      	bgt.n	8005756 <__sflush_r+0xfe>
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800574e:	81a3      	strh	r3, [r4, #12]
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	e78e      	b.n	8005674 <__sflush_r+0x1c>
 8005756:	4407      	add	r7, r0
 8005758:	eba8 0800 	sub.w	r8, r8, r0
 800575c:	e7e9      	b.n	8005732 <__sflush_r+0xda>
 800575e:	bf00      	nop
 8005760:	20400001 	.word	0x20400001

08005764 <_fflush_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	690b      	ldr	r3, [r1, #16]
 8005768:	4605      	mov	r5, r0
 800576a:	460c      	mov	r4, r1
 800576c:	b913      	cbnz	r3, 8005774 <_fflush_r+0x10>
 800576e:	2500      	movs	r5, #0
 8005770:	4628      	mov	r0, r5
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	b118      	cbz	r0, 800577e <_fflush_r+0x1a>
 8005776:	6983      	ldr	r3, [r0, #24]
 8005778:	b90b      	cbnz	r3, 800577e <_fflush_r+0x1a>
 800577a:	f000 f887 	bl	800588c <__sinit>
 800577e:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <_fflush_r+0x6c>)
 8005780:	429c      	cmp	r4, r3
 8005782:	d11b      	bne.n	80057bc <_fflush_r+0x58>
 8005784:	686c      	ldr	r4, [r5, #4]
 8005786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0ef      	beq.n	800576e <_fflush_r+0xa>
 800578e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005790:	07d0      	lsls	r0, r2, #31
 8005792:	d404      	bmi.n	800579e <_fflush_r+0x3a>
 8005794:	0599      	lsls	r1, r3, #22
 8005796:	d402      	bmi.n	800579e <_fflush_r+0x3a>
 8005798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800579a:	f000 f915 	bl	80059c8 <__retarget_lock_acquire_recursive>
 800579e:	4628      	mov	r0, r5
 80057a0:	4621      	mov	r1, r4
 80057a2:	f7ff ff59 	bl	8005658 <__sflush_r>
 80057a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057a8:	07da      	lsls	r2, r3, #31
 80057aa:	4605      	mov	r5, r0
 80057ac:	d4e0      	bmi.n	8005770 <_fflush_r+0xc>
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	059b      	lsls	r3, r3, #22
 80057b2:	d4dd      	bmi.n	8005770 <_fflush_r+0xc>
 80057b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057b6:	f000 f908 	bl	80059ca <__retarget_lock_release_recursive>
 80057ba:	e7d9      	b.n	8005770 <_fflush_r+0xc>
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <_fflush_r+0x70>)
 80057be:	429c      	cmp	r4, r3
 80057c0:	d101      	bne.n	80057c6 <_fflush_r+0x62>
 80057c2:	68ac      	ldr	r4, [r5, #8]
 80057c4:	e7df      	b.n	8005786 <_fflush_r+0x22>
 80057c6:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <_fflush_r+0x74>)
 80057c8:	429c      	cmp	r4, r3
 80057ca:	bf08      	it	eq
 80057cc:	68ec      	ldreq	r4, [r5, #12]
 80057ce:	e7da      	b.n	8005786 <_fflush_r+0x22>
 80057d0:	08008958 	.word	0x08008958
 80057d4:	08008978 	.word	0x08008978
 80057d8:	08008938 	.word	0x08008938

080057dc <std>:
 80057dc:	2300      	movs	r3, #0
 80057de:	b510      	push	{r4, lr}
 80057e0:	4604      	mov	r4, r0
 80057e2:	e9c0 3300 	strd	r3, r3, [r0]
 80057e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057ea:	6083      	str	r3, [r0, #8]
 80057ec:	8181      	strh	r1, [r0, #12]
 80057ee:	6643      	str	r3, [r0, #100]	; 0x64
 80057f0:	81c2      	strh	r2, [r0, #14]
 80057f2:	6183      	str	r3, [r0, #24]
 80057f4:	4619      	mov	r1, r3
 80057f6:	2208      	movs	r2, #8
 80057f8:	305c      	adds	r0, #92	; 0x5c
 80057fa:	f7ff f9e9 	bl	8004bd0 <memset>
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <std+0x38>)
 8005800:	6263      	str	r3, [r4, #36]	; 0x24
 8005802:	4b05      	ldr	r3, [pc, #20]	; (8005818 <std+0x3c>)
 8005804:	62a3      	str	r3, [r4, #40]	; 0x28
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <std+0x40>)
 8005808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <std+0x44>)
 800580c:	6224      	str	r4, [r4, #32]
 800580e:	6323      	str	r3, [r4, #48]	; 0x30
 8005810:	bd10      	pop	{r4, pc}
 8005812:	bf00      	nop
 8005814:	08005b35 	.word	0x08005b35
 8005818:	08005b57 	.word	0x08005b57
 800581c:	08005b8f 	.word	0x08005b8f
 8005820:	08005bb3 	.word	0x08005bb3

08005824 <_cleanup_r>:
 8005824:	4901      	ldr	r1, [pc, #4]	; (800582c <_cleanup_r+0x8>)
 8005826:	f000 b8af 	b.w	8005988 <_fwalk_reent>
 800582a:	bf00      	nop
 800582c:	08005765 	.word	0x08005765

08005830 <__sfmoreglue>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	1e4a      	subs	r2, r1, #1
 8005834:	2568      	movs	r5, #104	; 0x68
 8005836:	4355      	muls	r5, r2
 8005838:	460e      	mov	r6, r1
 800583a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800583e:	f7ff faeb 	bl	8004e18 <_malloc_r>
 8005842:	4604      	mov	r4, r0
 8005844:	b140      	cbz	r0, 8005858 <__sfmoreglue+0x28>
 8005846:	2100      	movs	r1, #0
 8005848:	e9c0 1600 	strd	r1, r6, [r0]
 800584c:	300c      	adds	r0, #12
 800584e:	60a0      	str	r0, [r4, #8]
 8005850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005854:	f7ff f9bc 	bl	8004bd0 <memset>
 8005858:	4620      	mov	r0, r4
 800585a:	bd70      	pop	{r4, r5, r6, pc}

0800585c <__sfp_lock_acquire>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__sfp_lock_acquire+0x8>)
 800585e:	f000 b8b3 	b.w	80059c8 <__retarget_lock_acquire_recursive>
 8005862:	bf00      	nop
 8005864:	20003370 	.word	0x20003370

08005868 <__sfp_lock_release>:
 8005868:	4801      	ldr	r0, [pc, #4]	; (8005870 <__sfp_lock_release+0x8>)
 800586a:	f000 b8ae 	b.w	80059ca <__retarget_lock_release_recursive>
 800586e:	bf00      	nop
 8005870:	20003370 	.word	0x20003370

08005874 <__sinit_lock_acquire>:
 8005874:	4801      	ldr	r0, [pc, #4]	; (800587c <__sinit_lock_acquire+0x8>)
 8005876:	f000 b8a7 	b.w	80059c8 <__retarget_lock_acquire_recursive>
 800587a:	bf00      	nop
 800587c:	2000336b 	.word	0x2000336b

08005880 <__sinit_lock_release>:
 8005880:	4801      	ldr	r0, [pc, #4]	; (8005888 <__sinit_lock_release+0x8>)
 8005882:	f000 b8a2 	b.w	80059ca <__retarget_lock_release_recursive>
 8005886:	bf00      	nop
 8005888:	2000336b 	.word	0x2000336b

0800588c <__sinit>:
 800588c:	b510      	push	{r4, lr}
 800588e:	4604      	mov	r4, r0
 8005890:	f7ff fff0 	bl	8005874 <__sinit_lock_acquire>
 8005894:	69a3      	ldr	r3, [r4, #24]
 8005896:	b11b      	cbz	r3, 80058a0 <__sinit+0x14>
 8005898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800589c:	f7ff bff0 	b.w	8005880 <__sinit_lock_release>
 80058a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058a4:	6523      	str	r3, [r4, #80]	; 0x50
 80058a6:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <__sinit+0x68>)
 80058a8:	4a13      	ldr	r2, [pc, #76]	; (80058f8 <__sinit+0x6c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80058ae:	42a3      	cmp	r3, r4
 80058b0:	bf04      	itt	eq
 80058b2:	2301      	moveq	r3, #1
 80058b4:	61a3      	streq	r3, [r4, #24]
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 f820 	bl	80058fc <__sfp>
 80058bc:	6060      	str	r0, [r4, #4]
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 f81c 	bl	80058fc <__sfp>
 80058c4:	60a0      	str	r0, [r4, #8]
 80058c6:	4620      	mov	r0, r4
 80058c8:	f000 f818 	bl	80058fc <__sfp>
 80058cc:	2200      	movs	r2, #0
 80058ce:	60e0      	str	r0, [r4, #12]
 80058d0:	2104      	movs	r1, #4
 80058d2:	6860      	ldr	r0, [r4, #4]
 80058d4:	f7ff ff82 	bl	80057dc <std>
 80058d8:	68a0      	ldr	r0, [r4, #8]
 80058da:	2201      	movs	r2, #1
 80058dc:	2109      	movs	r1, #9
 80058de:	f7ff ff7d 	bl	80057dc <std>
 80058e2:	68e0      	ldr	r0, [r4, #12]
 80058e4:	2202      	movs	r2, #2
 80058e6:	2112      	movs	r1, #18
 80058e8:	f7ff ff78 	bl	80057dc <std>
 80058ec:	2301      	movs	r3, #1
 80058ee:	61a3      	str	r3, [r4, #24]
 80058f0:	e7d2      	b.n	8005898 <__sinit+0xc>
 80058f2:	bf00      	nop
 80058f4:	0800884c 	.word	0x0800884c
 80058f8:	08005825 	.word	0x08005825

080058fc <__sfp>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	4607      	mov	r7, r0
 8005900:	f7ff ffac 	bl	800585c <__sfp_lock_acquire>
 8005904:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <__sfp+0x84>)
 8005906:	681e      	ldr	r6, [r3, #0]
 8005908:	69b3      	ldr	r3, [r6, #24]
 800590a:	b913      	cbnz	r3, 8005912 <__sfp+0x16>
 800590c:	4630      	mov	r0, r6
 800590e:	f7ff ffbd 	bl	800588c <__sinit>
 8005912:	3648      	adds	r6, #72	; 0x48
 8005914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005918:	3b01      	subs	r3, #1
 800591a:	d503      	bpl.n	8005924 <__sfp+0x28>
 800591c:	6833      	ldr	r3, [r6, #0]
 800591e:	b30b      	cbz	r3, 8005964 <__sfp+0x68>
 8005920:	6836      	ldr	r6, [r6, #0]
 8005922:	e7f7      	b.n	8005914 <__sfp+0x18>
 8005924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005928:	b9d5      	cbnz	r5, 8005960 <__sfp+0x64>
 800592a:	4b16      	ldr	r3, [pc, #88]	; (8005984 <__sfp+0x88>)
 800592c:	60e3      	str	r3, [r4, #12]
 800592e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005932:	6665      	str	r5, [r4, #100]	; 0x64
 8005934:	f000 f847 	bl	80059c6 <__retarget_lock_init_recursive>
 8005938:	f7ff ff96 	bl	8005868 <__sfp_lock_release>
 800593c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005944:	6025      	str	r5, [r4, #0]
 8005946:	61a5      	str	r5, [r4, #24]
 8005948:	2208      	movs	r2, #8
 800594a:	4629      	mov	r1, r5
 800594c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005950:	f7ff f93e 	bl	8004bd0 <memset>
 8005954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800595c:	4620      	mov	r0, r4
 800595e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005960:	3468      	adds	r4, #104	; 0x68
 8005962:	e7d9      	b.n	8005918 <__sfp+0x1c>
 8005964:	2104      	movs	r1, #4
 8005966:	4638      	mov	r0, r7
 8005968:	f7ff ff62 	bl	8005830 <__sfmoreglue>
 800596c:	4604      	mov	r4, r0
 800596e:	6030      	str	r0, [r6, #0]
 8005970:	2800      	cmp	r0, #0
 8005972:	d1d5      	bne.n	8005920 <__sfp+0x24>
 8005974:	f7ff ff78 	bl	8005868 <__sfp_lock_release>
 8005978:	230c      	movs	r3, #12
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	e7ee      	b.n	800595c <__sfp+0x60>
 800597e:	bf00      	nop
 8005980:	0800884c 	.word	0x0800884c
 8005984:	ffff0001 	.word	0xffff0001

08005988 <_fwalk_reent>:
 8005988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800598c:	4606      	mov	r6, r0
 800598e:	4688      	mov	r8, r1
 8005990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005994:	2700      	movs	r7, #0
 8005996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800599a:	f1b9 0901 	subs.w	r9, r9, #1
 800599e:	d505      	bpl.n	80059ac <_fwalk_reent+0x24>
 80059a0:	6824      	ldr	r4, [r4, #0]
 80059a2:	2c00      	cmp	r4, #0
 80059a4:	d1f7      	bne.n	8005996 <_fwalk_reent+0xe>
 80059a6:	4638      	mov	r0, r7
 80059a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ac:	89ab      	ldrh	r3, [r5, #12]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d907      	bls.n	80059c2 <_fwalk_reent+0x3a>
 80059b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059b6:	3301      	adds	r3, #1
 80059b8:	d003      	beq.n	80059c2 <_fwalk_reent+0x3a>
 80059ba:	4629      	mov	r1, r5
 80059bc:	4630      	mov	r0, r6
 80059be:	47c0      	blx	r8
 80059c0:	4307      	orrs	r7, r0
 80059c2:	3568      	adds	r5, #104	; 0x68
 80059c4:	e7e9      	b.n	800599a <_fwalk_reent+0x12>

080059c6 <__retarget_lock_init_recursive>:
 80059c6:	4770      	bx	lr

080059c8 <__retarget_lock_acquire_recursive>:
 80059c8:	4770      	bx	lr

080059ca <__retarget_lock_release_recursive>:
 80059ca:	4770      	bx	lr

080059cc <__swhatbuf_r>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	460e      	mov	r6, r1
 80059d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d4:	2900      	cmp	r1, #0
 80059d6:	b096      	sub	sp, #88	; 0x58
 80059d8:	4614      	mov	r4, r2
 80059da:	461d      	mov	r5, r3
 80059dc:	da07      	bge.n	80059ee <__swhatbuf_r+0x22>
 80059de:	2300      	movs	r3, #0
 80059e0:	602b      	str	r3, [r5, #0]
 80059e2:	89b3      	ldrh	r3, [r6, #12]
 80059e4:	061a      	lsls	r2, r3, #24
 80059e6:	d410      	bmi.n	8005a0a <__swhatbuf_r+0x3e>
 80059e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059ec:	e00e      	b.n	8005a0c <__swhatbuf_r+0x40>
 80059ee:	466a      	mov	r2, sp
 80059f0:	f000 f906 	bl	8005c00 <_fstat_r>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	dbf2      	blt.n	80059de <__swhatbuf_r+0x12>
 80059f8:	9a01      	ldr	r2, [sp, #4]
 80059fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a02:	425a      	negs	r2, r3
 8005a04:	415a      	adcs	r2, r3
 8005a06:	602a      	str	r2, [r5, #0]
 8005a08:	e7ee      	b.n	80059e8 <__swhatbuf_r+0x1c>
 8005a0a:	2340      	movs	r3, #64	; 0x40
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	6023      	str	r3, [r4, #0]
 8005a10:	b016      	add	sp, #88	; 0x58
 8005a12:	bd70      	pop	{r4, r5, r6, pc}

08005a14 <__smakebuf_r>:
 8005a14:	898b      	ldrh	r3, [r1, #12]
 8005a16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a18:	079d      	lsls	r5, r3, #30
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	d507      	bpl.n	8005a30 <__smakebuf_r+0x1c>
 8005a20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	6123      	str	r3, [r4, #16]
 8005a28:	2301      	movs	r3, #1
 8005a2a:	6163      	str	r3, [r4, #20]
 8005a2c:	b002      	add	sp, #8
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	ab01      	add	r3, sp, #4
 8005a32:	466a      	mov	r2, sp
 8005a34:	f7ff ffca 	bl	80059cc <__swhatbuf_r>
 8005a38:	9900      	ldr	r1, [sp, #0]
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f7ff f9eb 	bl	8004e18 <_malloc_r>
 8005a42:	b948      	cbnz	r0, 8005a58 <__smakebuf_r+0x44>
 8005a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a48:	059a      	lsls	r2, r3, #22
 8005a4a:	d4ef      	bmi.n	8005a2c <__smakebuf_r+0x18>
 8005a4c:	f023 0303 	bic.w	r3, r3, #3
 8005a50:	f043 0302 	orr.w	r3, r3, #2
 8005a54:	81a3      	strh	r3, [r4, #12]
 8005a56:	e7e3      	b.n	8005a20 <__smakebuf_r+0xc>
 8005a58:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <__smakebuf_r+0x7c>)
 8005a5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	6020      	str	r0, [r4, #0]
 8005a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a64:	81a3      	strh	r3, [r4, #12]
 8005a66:	9b00      	ldr	r3, [sp, #0]
 8005a68:	6163      	str	r3, [r4, #20]
 8005a6a:	9b01      	ldr	r3, [sp, #4]
 8005a6c:	6120      	str	r0, [r4, #16]
 8005a6e:	b15b      	cbz	r3, 8005a88 <__smakebuf_r+0x74>
 8005a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a74:	4630      	mov	r0, r6
 8005a76:	f000 f8d5 	bl	8005c24 <_isatty_r>
 8005a7a:	b128      	cbz	r0, 8005a88 <__smakebuf_r+0x74>
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	f023 0303 	bic.w	r3, r3, #3
 8005a82:	f043 0301 	orr.w	r3, r3, #1
 8005a86:	81a3      	strh	r3, [r4, #12]
 8005a88:	89a0      	ldrh	r0, [r4, #12]
 8005a8a:	4305      	orrs	r5, r0
 8005a8c:	81a5      	strh	r5, [r4, #12]
 8005a8e:	e7cd      	b.n	8005a2c <__smakebuf_r+0x18>
 8005a90:	08005825 	.word	0x08005825

08005a94 <__malloc_lock>:
 8005a94:	4801      	ldr	r0, [pc, #4]	; (8005a9c <__malloc_lock+0x8>)
 8005a96:	f7ff bf97 	b.w	80059c8 <__retarget_lock_acquire_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	2000336c 	.word	0x2000336c

08005aa0 <__malloc_unlock>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__malloc_unlock+0x8>)
 8005aa2:	f7ff bf92 	b.w	80059ca <__retarget_lock_release_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	2000336c 	.word	0x2000336c

08005aac <_raise_r>:
 8005aac:	291f      	cmp	r1, #31
 8005aae:	b538      	push	{r3, r4, r5, lr}
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	460d      	mov	r5, r1
 8005ab4:	d904      	bls.n	8005ac0 <_raise_r+0x14>
 8005ab6:	2316      	movs	r3, #22
 8005ab8:	6003      	str	r3, [r0, #0]
 8005aba:	f04f 30ff 	mov.w	r0, #4294967295
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ac2:	b112      	cbz	r2, 8005aca <_raise_r+0x1e>
 8005ac4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ac8:	b94b      	cbnz	r3, 8005ade <_raise_r+0x32>
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 f830 	bl	8005b30 <_getpid_r>
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ada:	f000 b817 	b.w	8005b0c <_kill_r>
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d00a      	beq.n	8005af8 <_raise_r+0x4c>
 8005ae2:	1c59      	adds	r1, r3, #1
 8005ae4:	d103      	bne.n	8005aee <_raise_r+0x42>
 8005ae6:	2316      	movs	r3, #22
 8005ae8:	6003      	str	r3, [r0, #0]
 8005aea:	2001      	movs	r0, #1
 8005aec:	e7e7      	b.n	8005abe <_raise_r+0x12>
 8005aee:	2400      	movs	r4, #0
 8005af0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005af4:	4628      	mov	r0, r5
 8005af6:	4798      	blx	r3
 8005af8:	2000      	movs	r0, #0
 8005afa:	e7e0      	b.n	8005abe <_raise_r+0x12>

08005afc <raise>:
 8005afc:	4b02      	ldr	r3, [pc, #8]	; (8005b08 <raise+0xc>)
 8005afe:	4601      	mov	r1, r0
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	f7ff bfd3 	b.w	8005aac <_raise_r>
 8005b06:	bf00      	nop
 8005b08:	20000024 	.word	0x20000024

08005b0c <_kill_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4d07      	ldr	r5, [pc, #28]	; (8005b2c <_kill_r+0x20>)
 8005b10:	2300      	movs	r3, #0
 8005b12:	4604      	mov	r4, r0
 8005b14:	4608      	mov	r0, r1
 8005b16:	4611      	mov	r1, r2
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	f7fb fa11 	bl	8000f40 <_kill>
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	d102      	bne.n	8005b28 <_kill_r+0x1c>
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	b103      	cbz	r3, 8005b28 <_kill_r+0x1c>
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	bd38      	pop	{r3, r4, r5, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20003374 	.word	0x20003374

08005b30 <_getpid_r>:
 8005b30:	f7fb b9fe 	b.w	8000f30 <_getpid>

08005b34 <__sread>:
 8005b34:	b510      	push	{r4, lr}
 8005b36:	460c      	mov	r4, r1
 8005b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3c:	f000 f894 	bl	8005c68 <_read_r>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	bfab      	itete	ge
 8005b44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b46:	89a3      	ldrhlt	r3, [r4, #12]
 8005b48:	181b      	addge	r3, r3, r0
 8005b4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b4e:	bfac      	ite	ge
 8005b50:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b52:	81a3      	strhlt	r3, [r4, #12]
 8005b54:	bd10      	pop	{r4, pc}

08005b56 <__swrite>:
 8005b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5a:	461f      	mov	r7, r3
 8005b5c:	898b      	ldrh	r3, [r1, #12]
 8005b5e:	05db      	lsls	r3, r3, #23
 8005b60:	4605      	mov	r5, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	4616      	mov	r6, r2
 8005b66:	d505      	bpl.n	8005b74 <__swrite+0x1e>
 8005b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f000 f868 	bl	8005c44 <_lseek_r>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	4632      	mov	r2, r6
 8005b82:	463b      	mov	r3, r7
 8005b84:	4628      	mov	r0, r5
 8005b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8a:	f000 b817 	b.w	8005bbc <_write_r>

08005b8e <__sseek>:
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	460c      	mov	r4, r1
 8005b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b96:	f000 f855 	bl	8005c44 <_lseek_r>
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	bf15      	itete	ne
 8005ba0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005baa:	81a3      	strheq	r3, [r4, #12]
 8005bac:	bf18      	it	ne
 8005bae:	81a3      	strhne	r3, [r4, #12]
 8005bb0:	bd10      	pop	{r4, pc}

08005bb2 <__sclose>:
 8005bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb6:	f000 b813 	b.w	8005be0 <_close_r>
	...

08005bbc <_write_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4d07      	ldr	r5, [pc, #28]	; (8005bdc <_write_r+0x20>)
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	4608      	mov	r0, r1
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	602a      	str	r2, [r5, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f7fb f9ef 	bl	8000fae <_write>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	d102      	bne.n	8005bda <_write_r+0x1e>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	b103      	cbz	r3, 8005bda <_write_r+0x1e>
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	20003374 	.word	0x20003374

08005be0 <_close_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4d06      	ldr	r5, [pc, #24]	; (8005bfc <_close_r+0x1c>)
 8005be4:	2300      	movs	r3, #0
 8005be6:	4604      	mov	r4, r0
 8005be8:	4608      	mov	r0, r1
 8005bea:	602b      	str	r3, [r5, #0]
 8005bec:	f7fb f9fb 	bl	8000fe6 <_close>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d102      	bne.n	8005bfa <_close_r+0x1a>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	b103      	cbz	r3, 8005bfa <_close_r+0x1a>
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	20003374 	.word	0x20003374

08005c00 <_fstat_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4d07      	ldr	r5, [pc, #28]	; (8005c20 <_fstat_r+0x20>)
 8005c04:	2300      	movs	r3, #0
 8005c06:	4604      	mov	r4, r0
 8005c08:	4608      	mov	r0, r1
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	602b      	str	r3, [r5, #0]
 8005c0e:	f7fb f9f6 	bl	8000ffe <_fstat>
 8005c12:	1c43      	adds	r3, r0, #1
 8005c14:	d102      	bne.n	8005c1c <_fstat_r+0x1c>
 8005c16:	682b      	ldr	r3, [r5, #0]
 8005c18:	b103      	cbz	r3, 8005c1c <_fstat_r+0x1c>
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	bd38      	pop	{r3, r4, r5, pc}
 8005c1e:	bf00      	nop
 8005c20:	20003374 	.word	0x20003374

08005c24 <_isatty_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4d06      	ldr	r5, [pc, #24]	; (8005c40 <_isatty_r+0x1c>)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	602b      	str	r3, [r5, #0]
 8005c30:	f7fb f9f5 	bl	800101e <_isatty>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d102      	bne.n	8005c3e <_isatty_r+0x1a>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	b103      	cbz	r3, 8005c3e <_isatty_r+0x1a>
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	20003374 	.word	0x20003374

08005c44 <_lseek_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d07      	ldr	r5, [pc, #28]	; (8005c64 <_lseek_r+0x20>)
 8005c48:	4604      	mov	r4, r0
 8005c4a:	4608      	mov	r0, r1
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	2200      	movs	r2, #0
 8005c50:	602a      	str	r2, [r5, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	f7fb f9ee 	bl	8001034 <_lseek>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d102      	bne.n	8005c62 <_lseek_r+0x1e>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	b103      	cbz	r3, 8005c62 <_lseek_r+0x1e>
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	20003374 	.word	0x20003374

08005c68 <_read_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4d07      	ldr	r5, [pc, #28]	; (8005c88 <_read_r+0x20>)
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	4608      	mov	r0, r1
 8005c70:	4611      	mov	r1, r2
 8005c72:	2200      	movs	r2, #0
 8005c74:	602a      	str	r2, [r5, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f7fb f97c 	bl	8000f74 <_read>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_read_r+0x1e>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_read_r+0x1e>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	20003374 	.word	0x20003374

08005c8c <_init>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	bf00      	nop
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr

08005c98 <_fini>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr
