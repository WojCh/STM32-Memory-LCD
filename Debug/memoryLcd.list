
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf64  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00023c58  0800d118  0800d118  0001d118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030d70  08030d70  00050358  2**0
                  CONTENTS
  4 .ARM          00000008  08030d70  08030d70  00040d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030d78  08030d78  00050358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030d78  08030d78  00040d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030d7c  08030d7c  00040d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08030d80  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00050358  2**0
                  CONTENTS
 10 .bss          000032a0  20000358  20000358  00050358  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200035f8  200035f8  00050358  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050358  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e36e  00000000  00000000  00050388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f9d  00000000  00000000  0006e6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001838  00000000  00000000  00073698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001630  00000000  00000000  00074ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029394  00000000  00000000  00076500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021522  00000000  00000000  0009f894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7daf  00000000  00000000  000c0db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a8b65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007624  00000000  00000000  001a8bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000358 	.word	0x20000358
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d0fc 	.word	0x0800d0fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000035c 	.word	0x2000035c
 80001ec:	0800d0fc 	.word	0x0800d0fc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8000f7a:	2332      	movs	r3, #50	; 0x32
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	1dbb      	adds	r3, r7, #6
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	22d0      	movs	r2, #208	; 0xd0
 8000f8a:	21ef      	movs	r1, #239	; 0xef
 8000f8c:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <read_chip_id+0x3c>)
 8000f8e:	f004 f86d 	bl	800506c <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	2b55      	cmp	r3, #85	; 0x55
 8000f96:	d001      	beq.n	8000f9c <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200004a4 	.word	0x200004a4

08000fac <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af04      	add	r7, sp, #16
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8000fb8:	2300      	movs	r3, #0
 8000fba:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d81a      	bhi.n	8000ff8 <set_oss+0x4c>
 8000fc2:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <set_oss+0x1c>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08000fd9 	.word	0x08000fd9
 8000fcc:	08000fe1 	.word	0x08000fe1
 8000fd0:	08000fe9 	.word	0x08000fe9
 8000fd4:	08000ff1 	.word	0x08000ff1
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2205      	movs	r2, #5
 8000fdc:	705a      	strb	r2, [r3, #1]
			break;
 8000fde:	e00f      	b.n	8001000 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	705a      	strb	r2, [r3, #1]
			break;
 8000fe6:	e00b      	b.n	8001000 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	220e      	movs	r2, #14
 8000fec:	705a      	strb	r2, [r3, #1]
			break;
 8000fee:	e007      	b.n	8001000 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	221a      	movs	r2, #26
 8000ff4:	705a      	strb	r2, [r3, #1]
			break;
 8000ff6:	e003      	b.n	8001000 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	705a      	strb	r2, [r3, #1]
			break;
 8000ffe:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	78fa      	ldrb	r2, [r7, #3]
 8001004:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	019b      	lsls	r3, r3, #6
 800100a:	70fb      	strb	r3, [r7, #3]
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001010:	2332      	movs	r3, #50	; 0x32
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	2302      	movs	r3, #2
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	22f4      	movs	r2, #244	; 0xf4
 8001022:	21ee      	movs	r1, #238	; 0xee
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <set_oss+0x88>)
 8001026:	f003 ff27 	bl	8004e78 <HAL_I2C_Mem_Write>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200004a4 	.word	0x200004a4

08001038 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af04      	add	r7, sp, #16
 800103e:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001066:	2332      	movs	r3, #50	; 0x32
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	2316      	movs	r3, #22
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	22aa      	movs	r2, #170	; 0xaa
 8001078:	21ef      	movs	r1, #239	; 0xef
 800107a:	4827      	ldr	r0, [pc, #156]	; (8001118 <read_calib_data+0xe0>)
 800107c:	f003 fff6 	bl	800506c <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001086:	e03c      	b.n	8001102 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001088:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	3328      	adds	r3, #40	; 0x28
 8001090:	443b      	add	r3, r7
 8001092:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b219      	sxth	r1, r3
 800109a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800109e:	3328      	adds	r3, #40	; 0x28
 80010a0:	443b      	add	r3, r7
 80010a2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	4403      	add	r3, r0
 80010b2:	430a      	orrs	r2, r1
 80010b4:	b212      	sxth	r2, r2
 80010b6:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80010b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bf0c      	ite	eq
 80010ca:	2301      	moveq	r3, #1
 80010cc:	2300      	movne	r3, #0
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	440b      	add	r3, r1
 80010da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80010f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010fc:	3301      	adds	r3, #1
 80010fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001102:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001106:	2b0b      	cmp	r3, #11
 8001108:	d9be      	bls.n	8001088 <read_calib_data+0x50>
		}
	}

	return ret_val;
 800110a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800110e:	4618      	mov	r0, r3
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200004a4 	.word	0x200004a4

0800111c <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2204      	movs	r2, #4
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f008 f9dc 	bl	80094e8 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001130:	687c      	ldr	r4, [r7, #4]
 8001132:	f7ff ff1b 	bl	8000f6c <read_chip_id>
 8001136:	4603      	mov	r3, r0
 8001138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	687c      	ldr	r4, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff79 	bl	8001038 <read_calib_data>
 8001146:	4603      	mov	r3, r0
 8001148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3340      	adds	r3, #64	; 0x40
 8001150:	2102      	movs	r1, #2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff2a 	bl	8000fac <set_oss>
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}

08001160 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8001166:	232e      	movs	r3, #46	; 0x2e
 8001168:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800116a:	2332      	movs	r3, #50	; 0x32
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	2301      	movs	r3, #1
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	22f4      	movs	r2, #244	; 0xf4
 800117a:	21ee      	movs	r1, #238	; 0xee
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <get_ut+0x50>)
 800117e:	f003 fe7b 	bl	8004e78 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001182:	2005      	movs	r0, #5
 8001184:	f003 f950 	bl	8004428 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 8001188:	2332      	movs	r3, #50	; 0x32
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2302      	movs	r3, #2
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	22f6      	movs	r2, #246	; 0xf6
 8001198:	21ef      	movs	r1, #239	; 0xef
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <get_ut+0x50>)
 800119c:	f003 ff66 	bl	800506c <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80011a0:	793b      	ldrb	r3, [r7, #4]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	797a      	ldrb	r2, [r7, #5]
 80011a6:	4313      	orrs	r3, r2
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200004a4 	.word	0x200004a4

080011b4 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80011d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d4:	ee17 2a90 	vmov	r2, s15
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	895b      	ldrh	r3, [r3, #10]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	8912      	ldrh	r2, [r2, #8]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	13db      	asrs	r3, r3, #15
 80011e8:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80011f0:	02da      	lsls	r2, r3, #11
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011f8:	4619      	mov	r1, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	440b      	add	r3, r1
 80011fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001202:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	441a      	add	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001212:	3308      	adds	r3, #8
 8001214:	111b      	asrs	r3, r3, #4
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800121e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800126c <get_temp+0xb8>
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800122a:	edd7 7a03 	vldr	s15, [r7, #12]
 800122e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001270 <get_temp+0xbc>
 8001232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	d908      	bls.n	800124e <get_temp+0x9a>
 800123c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001240:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001274 <get_temp+0xc0>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	db03      	blt.n	8001256 <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2203      	movs	r2, #3
 8001252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	ee07 3a90 	vmov	s15, r3
}
 800125c:	eeb0 0a67 	vmov.f32	s0, s15
 8001260:	371c      	adds	r7, #28
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	3dcccccd 	.word	0x3dcccccd
 8001270:	c2200000 	.word	0xc2200000
 8001274:	42aa0000 	.word	0x42aa0000

08001278 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af04      	add	r7, sp, #16
 800127e:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <get_up+0x7c>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	813b      	strh	r3, [r7, #8]
 8001286:	2300      	movs	r3, #0
 8001288:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 800128e:	2334      	movs	r3, #52	; 0x34
 8001290:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001292:	2332      	movs	r3, #50	; 0x32
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	22f4      	movs	r2, #244	; 0xf4
 80012a4:	21ee      	movs	r1, #238	; 0xee
 80012a6:	4814      	ldr	r0, [pc, #80]	; (80012f8 <get_up+0x80>)
 80012a8:	f003 fde6 	bl	8004e78 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80012ac:	797b      	ldrb	r3, [r7, #5]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 f8ba 	bl	8004428 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80012b4:	2332      	movs	r3, #50	; 0x32
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	2303      	movs	r3, #3
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2301      	movs	r3, #1
 80012c4:	22f6      	movs	r2, #246	; 0xf6
 80012c6:	21ef      	movs	r1, #239	; 0xef
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <get_up+0x80>)
 80012ca:	f003 fecf 	bl	800506c <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80012ce:	7a3b      	ldrb	r3, [r7, #8]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	7a7b      	ldrb	r3, [r7, #9]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	4413      	add	r3, r2
 80012d8:	7aba      	ldrb	r2, [r7, #10]
 80012da:	441a      	add	r2, r3
 80012dc:	793b      	ldrb	r3, [r7, #4]
 80012de:	f1c3 0308 	rsb	r3, r3, #8
 80012e2:	fa42 f303 	asr.w	r3, r2, r3
 80012e6:	60fb      	str	r3, [r7, #12]
	return up;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	0800d118 	.word	0x0800d118
 80012f8:	200004a4 	.word	0x200004a4

080012fc <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80012fc:	b084      	sub	sp, #16
 80012fe:	b480      	push	{r7}
 8001300:	b089      	sub	sp, #36	; 0x24
 8001302:	af00      	add	r7, sp, #0
 8001304:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001308:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001316:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800131a:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 800131c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001320:	461a      	mov	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fb03 f303 	mul.w	r3, r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	da01      	bge.n	8001330 <get_pressure+0x34>
 800132c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001330:	131b      	asrs	r3, r3, #12
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	da01      	bge.n	800133e <get_pressure+0x42>
 800133a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800133e:	12db      	asrs	r3, r3, #11
 8001340:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001342:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001346:	461a      	mov	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	da01      	bge.n	8001356 <get_pressure+0x5a>
 8001352:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001356:	12db      	asrs	r3, r3, #11
 8001358:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001362:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001366:	009a      	lsls	r2, r3, #2
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4413      	add	r3, r2
 800136c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001370:	4093      	lsls	r3, r2
 8001372:	3302      	adds	r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	da00      	bge.n	800137a <get_pressure+0x7e>
 8001378:	3303      	adds	r3, #3
 800137a:	109b      	asrs	r3, r3, #2
 800137c:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800137e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001382:	461a      	mov	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	da02      	bge.n	8001394 <get_pressure+0x98>
 800138e:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001392:	331f      	adds	r3, #31
 8001394:	135b      	asrs	r3, r3, #13
 8001396:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001398:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800139c:	461a      	mov	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fb03 f303 	mul.w	r3, r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	da01      	bge.n	80013ac <get_pressure+0xb0>
 80013a8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013ac:	131b      	asrs	r3, r3, #12
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	da02      	bge.n	80013bc <get_pressure+0xc0>
 80013b6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80013ba:	33ff      	adds	r3, #255	; 0xff
 80013bc:	141b      	asrs	r3, r3, #16
 80013be:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	3302      	adds	r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da00      	bge.n	80013ce <get_pressure+0xd2>
 80013cc:	3303      	adds	r3, #3
 80013ce:	109b      	asrs	r3, r3, #2
 80013d0:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80013d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013d4:	461a      	mov	r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	0bdb      	lsrs	r3, r3, #15
 80013e2:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80013e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80013f0:	4611      	mov	r1, r2
 80013f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013f6:	410a      	asrs	r2, r1
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db06      	blt.n	8001412 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	005a      	lsls	r2, r3, #1
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	e005      	b.n	800141e <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	2b00      	cmp	r3, #0
 8001422:	da00      	bge.n	8001426 <get_pressure+0x12a>
 8001424:	33ff      	adds	r3, #255	; 0xff
 8001426:	121b      	asrs	r3, r3, #8
 8001428:	461a      	mov	r2, r3
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	2b00      	cmp	r3, #0
 800142e:	da00      	bge.n	8001432 <get_pressure+0x136>
 8001430:	33ff      	adds	r3, #255	; 0xff
 8001432:	121b      	asrs	r3, r3, #8
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f640 32de 	movw	r2, #3038	; 0xbde
 8001440:	fb02 f303 	mul.w	r3, r2, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	da02      	bge.n	800144e <get_pressure+0x152>
 8001448:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800144c:	33ff      	adds	r3, #255	; 0xff
 800144e:	141b      	asrs	r3, r3, #16
 8001450:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <get_pressure+0x198>)
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	da02      	bge.n	8001464 <get_pressure+0x168>
 800145e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001462:	33ff      	adds	r3, #255	; 0xff
 8001464:	141b      	asrs	r3, r3, #16
 8001466:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001472:	2b00      	cmp	r3, #0
 8001474:	da00      	bge.n	8001478 <get_pressure+0x17c>
 8001476:	330f      	adds	r3, #15
 8001478:	111b      	asrs	r3, r3, #4
 800147a:	461a      	mov	r2, r3
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	4413      	add	r3, r2
 8001480:	61fb      	str	r3, [r7, #28]

	return p;
 8001482:	69fb      	ldr	r3, [r7, #28]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3724      	adds	r7, #36	; 0x24
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	b004      	add	sp, #16
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	ffffe343 	.word	0xffffe343

08001498 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <get_altitude+0xb8>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014bc:	ee16 0a90 	vmov	r0, s13
 80014c0:	f7ff f852 	bl	8000568 <__aeabi_f2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001540 <get_altitude+0xa8>
 80014cc:	ec43 2b10 	vmov	d0, r2, r3
 80014d0:	f00a fefa 	bl	800c2c8 <pow>
 80014d4:	ec53 2b10 	vmov	r2, r3, d0
 80014d8:	f04f 0000 	mov.w	r0, #0
 80014dc:	491d      	ldr	r1, [pc, #116]	; (8001554 <get_altitude+0xbc>)
 80014de:	f7fe fee3 	bl	80002a8 <__aeabi_dsub>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	a317      	add	r3, pc, #92	; (adr r3, 8001548 <get_altitude+0xb0>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f892 	bl	8000618 <__aeabi_dmul>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb64 	bl	8000bc8 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001504:	edd7 7a03 	vldr	s15, [r7, #12]
 8001508:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001558 <get_altitude+0xc0>
 800150c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	d908      	bls.n	8001528 <get_altitude+0x90>
 8001516:	edd7 7a03 	vldr	s15, [r7, #12]
 800151a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800155c <get_altitude+0xc4>
 800151e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	db03      	blt.n	8001530 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2205      	movs	r2, #5
 800152c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	ccd9456c 	.word	0xccd9456c
 8001544:	3fc85b95 	.word	0x3fc85b95
 8001548:	00000000 	.word	0x00000000
 800154c:	40e5a540 	.word	0x40e5a540
 8001550:	20000000 	.word	0x20000000
 8001554:	3ff00000 	.word	0x3ff00000
 8001558:	c3fa0000 	.word	0xc3fa0000
 800155c:	460ca000 	.word	0x460ca000

08001560 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffe6 	bl	8000544 <__aeabi_i2d>
 8001578:	4604      	mov	r4, r0
 800157a:	460d      	mov	r5, r1
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <get_slp+0x80>)
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	eddf 6a18 	vldr	s13, [pc, #96]	; 80015e4 <get_slp+0x84>
 8001586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800158e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001592:	ee17 0a90 	vmov	r0, s15
 8001596:	f7fe ffe7 	bl	8000568 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80015d8 <get_slp+0x78>
 80015a2:	ec43 2b10 	vmov	d0, r2, r3
 80015a6:	f00a fe8f 	bl	800c2c8 <pow>
 80015aa:	ec53 2b10 	vmov	r2, r3, d0
 80015ae:	4620      	mov	r0, r4
 80015b0:	4629      	mov	r1, r5
 80015b2:	f7ff f95b 	bl	800086c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fb03 	bl	8000bc8 <__aeabi_d2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	60fb      	str	r3, [r7, #12]

	return slp;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	ee07 3a90 	vmov	s15, r3
}
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bdb0      	pop	{r4, r5, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	b851eb85 	.word	0xb851eb85
 80015dc:	4015051e 	.word	0x4015051e
 80015e0:	20000004 	.word	0x20000004
 80015e4:	472d2a00 	.word	0x472d2a00

080015e8 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	b095      	sub	sp, #84	; 0x54
 80015ec:	af0e      	add	r7, sp, #56	; 0x38
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 80015f2:	f7ff fdb5 	bl	8001160 <get_ut>
 80015f6:	ee07 0a90 	vmov	s15, r0
 80015fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f7ff fdd5 	bl	80011b4 <get_temp>
 800160a:	eef0 7a40 	vmov.f32	s15, s0
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001618:	f7ff fe2e 	bl	8001278 <get_up>
 800161c:	4602      	mov	r2, r0
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001622:	683e      	ldr	r6, [r7, #0]
 8001624:	466d      	mov	r5, sp
 8001626:	f106 0410 	add.w	r4, r6, #16
 800162a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	602b      	str	r3, [r5, #0]
 800163a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800163e:	f7ff fe5d 	bl	80012fc <get_pressure>
 8001642:	4602      	mov	r2, r0
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001648:	6838      	ldr	r0, [r7, #0]
 800164a:	f7ff ff89 	bl	8001560 <get_slp>
 800164e:	eef0 7a40 	vmov.f32	s15, s0
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001658:	6838      	ldr	r0, [r7, #0]
 800165a:	f7ff ff1d 	bl	8001498 <get_altitude>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166c:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167e:	617b      	str	r3, [r7, #20]
	return result;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	461c      	mov	r4, r3
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800168a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001698 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80016a4:	e083      	b.n	80017ae <initButtons+0x116>
		btns[i]->pin = pins[i];
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	440b      	add	r3, r1
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4944      	ldr	r1, [pc, #272]	; (80017c4 <initButtons+0x12c>)
 80016b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80016b8:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	440b      	add	r3, r1
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4940      	ldr	r1, [pc, #256]	; (80017c8 <initButtons+0x130>)
 80016c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016cc:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	7993      	ldrb	r3, [r2, #6]
 80016da:	f36f 0300 	bfc	r3, #0, #1
 80016de:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	7993      	ldrb	r3, [r2, #6]
 80016ec:	f36f 0341 	bfc	r3, #1, #1
 80016f0:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2200      	movs	r2, #0
 8001752:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2200      	movs	r2, #0
 8001760:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	3301      	adds	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	f67f af78 	bls.w	80016a6 <initButtons+0xe>
	}
}
 80017b6:	bf00      	nop
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	20000020 	.word	0x20000020
 80017c8:	20000008 	.word	0x20000008

080017cc <resetButtonHandlers>:

void resetButtonHandlers(void){
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 80017d6:	e020      	b.n	800181a <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	4a15      	ldr	r2, [pc, #84]	; (8001830 <resetButtonHandlers+0x64>)
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <resetButtonHandlers+0x64>)
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <resetButtonHandlers+0x64>)
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <resetButtonHandlers+0x64>)
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <resetButtonHandlers+0x64>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
		i++;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	3301      	adds	r3, #1
 8001818:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d9db      	bls.n	80017d8 <resetButtonHandlers+0xc>
	}
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2000002c 	.word	0x2000002c

08001834 <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	889b      	ldrh	r3, [r3, #4]
 8001844:	4619      	mov	r1, r3
 8001846:	4610      	mov	r0, r2
 8001848:	f003 f962 	bl	8004b10 <HAL_GPIO_ReadPin>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf0c      	ite	eq
 8001852:	2301      	moveq	r3, #1
 8001854:	2300      	movne	r3, #0
 8001856:	b2db      	uxtb	r3, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <scanButton>:

void scanButton(Button* btn){
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	799b      	ldrb	r3, [r3, #6]
 800186c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	b2d9      	uxtb	r1, r3
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	7993      	ldrb	r3, [r2, #6]
 8001880:	f361 0300 	bfi	r3, r1, #0, #1
 8001884:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffd4 	bl	8001834 <readButton>
 800188c:	4603      	mov	r3, r0
 800188e:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8001890:	7bbb      	ldrb	r3, [r7, #14]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	b2d9      	uxtb	r1, r3
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	7993      	ldrb	r3, [r2, #6]
 800189c:	f361 0341 	bfi	r3, r1, #1, #1
 80018a0:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 80018a2:	7bba      	ldrb	r2, [r7, #14]
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d150      	bne.n	800194c <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d146      	bne.n	800193e <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7a9b      	ldrb	r3, [r3, #10]
 80018b4:	3301      	adds	r3, #1
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2000      	movs	r0, #0
 80018ca:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7a9b      	ldrb	r3, [r3, #10]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <scanButton+0x15c>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d32d      	bcc.n	8001936 <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7b5b      	ldrb	r3, [r3, #13]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d110      	bne.n	8001904 <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2000      	movs	r0, #0
 80018f0:	4798      	blx	r3
					}
					btn->longSingleOn++;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7a5b      	ldrb	r3, [r3, #9]
 80018f6:	3301      	adds	r3, #1
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7a9b      	ldrb	r3, [r3, #10]
 8001908:	4a2c      	ldr	r2, [pc, #176]	; (80019bc <scanButton+0x15c>)
 800190a:	8852      	ldrh	r2, [r2, #2]
 800190c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001910:	fb01 f202 	mul.w	r2, r1, r2
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10d      	bne.n	8001936 <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	2000      	movs	r0, #0
 8001928:	4798      	blx	r3
					}
					btn->longContinuous++;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7adb      	ldrb	r3, [r3, #11]
 800192e:	3301      	adds	r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 800193c:	e03a      	b.n	80019b4 <scanButton+0x154>
			btn->shortSingleHandled = 0;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	735a      	strb	r2, [r3, #13]
}
 800194a:	e033      	b.n	80019b4 <scanButton+0x154>
		if(currStatus == 1){
 800194c:	7bbb      	ldrb	r3, [r7, #14]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d11b      	bne.n	800198a <scanButton+0x12a>
			btn->shortContinuous = 0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7b1b      	ldrb	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d126      	bne.n	80019b4 <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2000      	movs	r0, #0
 8001974:	4798      	blx	r3
				btn->shortSingleOn++;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	79db      	ldrb	r3, [r3, #7]
 800197a:	3301      	adds	r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	731a      	strb	r2, [r3, #12]
}
 8001988:	e014      	b.n	80019b4 <scanButton+0x154>
			if(btn->releaseHandled == 0){
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7b9b      	ldrb	r3, [r3, #14]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d110      	bne.n	80019b4 <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	2000      	movs	r0, #0
 80019a0:	4798      	blx	r3
				btn->shortSingleOff++;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7a1b      	ldrb	r3, [r3, #8]
 80019a6:	3301      	adds	r3, #1
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	739a      	strb	r2, [r3, #14]
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000044 	.word	0x20000044

080019c0 <scanButtons>:

void scanButtons(Button* btns[6]){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019cc:	e00a      	b.n	80019e4 <scanButtons+0x24>
		scanButton(btns[i]);
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff41 	bl	8001860 <scanButton>
		i++;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	3301      	adds	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d9f1      	bls.n	80019ce <scanButtons+0xe>
	}
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <initTimer>:
 *  Created on: Apr 11, 2022
 *      Author: wojch
 */
#include "customTimer.h"

void initTimer(void){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim11);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <initTimer+0x10>)
 80019fa:	f005 fc95 	bl	8007328 <HAL_TIM_Base_Init>
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20003504 	.word	0x20003504

08001a08 <setTimeout>:

void setTimeout(int count){
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	htim11.Init.Period = 65000;
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <setTimeout+0x1c>)
 8001a12:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a16:	60da      	str	r2, [r3, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	20003504 	.word	0x20003504

08001a28 <startClock>:
void timerFunction(void){
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//	stopMeasure();
}

void startClock(void){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <startClock+0x10>)
 8001a2e:	f005 fccb 	bl	80073c8 <HAL_TIM_Base_Start_IT>
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20003504 	.word	0x20003504

08001a3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	; 0x30
 8001a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	4b60      	ldr	r3, [pc, #384]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a5f      	ldr	r2, [pc, #380]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a58      	ldr	r2, [pc, #352]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a51      	ldr	r2, [pc, #324]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b4f      	ldr	r3, [pc, #316]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a4a      	ldr	r2, [pc, #296]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a43      	ldr	r2, [pc, #268]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a3c      	ldr	r2, [pc, #240]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a35      	ldr	r2, [pc, #212]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <MX_GPIO_Init+0x19c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2140      	movs	r1, #64	; 0x40
 8001b1a:	4830      	ldr	r0, [pc, #192]	; (8001bdc <MX_GPIO_Init+0x1a0>)
 8001b1c:	f003 f810 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b26:	482e      	ldr	r0, [pc, #184]	; (8001be0 <MX_GPIO_Init+0x1a4>)
 8001b28:	f003 f80a 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2140      	movs	r1, #64	; 0x40
 8001b30:	482c      	ldr	r0, [pc, #176]	; (8001be4 <MX_GPIO_Init+0x1a8>)
 8001b32:	f003 f805 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001b36:	2340      	movs	r3, #64	; 0x40
 8001b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4823      	ldr	r0, [pc, #140]	; (8001bdc <MX_GPIO_Init+0x1a0>)
 8001b4e:	f002 fe33 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b52:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481d      	ldr	r0, [pc, #116]	; (8001be0 <MX_GPIO_Init+0x1a4>)
 8001b6c:	f002 fe24 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8001b70:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b74:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b76:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	4619      	mov	r1, r3
 8001b86:	4818      	ldr	r0, [pc, #96]	; (8001be8 <MX_GPIO_Init+0x1ac>)
 8001b88:	f002 fe16 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b8c:	2340      	movs	r3, #64	; 0x40
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4810      	ldr	r0, [pc, #64]	; (8001be4 <MX_GPIO_Init+0x1a8>)
 8001ba4:	f002 fe08 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480a      	ldr	r0, [pc, #40]	; (8001be4 <MX_GPIO_Init+0x1a8>)
 8001bbc:	f002 fdfc 	bl	80047b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2028      	movs	r0, #40	; 0x28
 8001bc6:	f002 fd2e 	bl	8004626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bca:	2028      	movs	r0, #40	; 0x28
 8001bcc:	f002 fd47 	bl	800465e <HAL_NVIC_EnableIRQ>

}
 8001bd0:	bf00      	nop
 8001bd2:	3730      	adds	r7, #48	; 0x30
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40021000 	.word	0x40021000

08001bec <getDataFromUart>:


//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};
char gpsBuffer[600] = {0};

void getDataFromUart(gpsDevice* gps){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive(&huart6, &gps->buffer, 600, 1000);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	1d19      	adds	r1, r3, #4
 8001bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <getDataFromUart+0x24>)
 8001c02:	f006 fc6c 	bl	80084de <HAL_UART_Receive>
//	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20003590 	.word	0x20003590

08001c14 <initGps>:

gpsDevice initGps(UART_HandleTypeDef* uartPort){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c20:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c24:	6018      	str	r0, [r3, #0]
 8001c26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c2a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001c2e:	6019      	str	r1, [r3, #0]
	gpsDevice gpsModule;
	gpsModule.uartPort = uartPort;
 8001c30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c34:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c38:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8001c3c:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, 600);
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	3304      	adds	r3, #4
 8001c4a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f008 f91e 	bl	8009e92 <strncpy>
	gpsModule.getData = &getDataFromUart;
 8001c56:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c5a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <initGps+0x84>)
 8001c60:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	return(gpsModule);
 8001c64:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c68:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c72:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 7318 	mov.w	r3, #608	; 0x260
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f007 fc24 	bl	80094cc <memcpy>
}
 8001c84:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c88:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	08001bed 	.word	0x08001bed

08001c9c <prevPos>:
void (*moduleSetupPtr)(void) = faceSetup;
void (*currentModulePtr)(void) = faceMain;

uint8_t isModuleSet = 0;

void prevPos(void){
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
	if(position>0){
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <prevPos+0x2c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <prevPos+0x1a>
		position--;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <prevPos+0x2c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <prevPos+0x2c>)
 8001cb2:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8001cb4:	e002      	b.n	8001cbc <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <prevPos+0x2c>)
 8001cb8:	2204      	movs	r2, #4
 8001cba:	701a      	strb	r2, [r3, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	200004a0 	.word	0x200004a0

08001ccc <nextPos>:

void nextPos(void){
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <nextPos+0x2c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d806      	bhi.n	8001ce6 <nextPos+0x1a>
		position++;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <nextPos+0x2c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <nextPos+0x2c>)
 8001ce2:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8001ce4:	e002      	b.n	8001cec <nextPos+0x20>
		position=0;
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <nextPos+0x2c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	200004a0 	.word	0x200004a0

08001cfc <nextScreen>:

void nextScreen(void){
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	nextPos();
 8001d00:	f7ff ffe4 	bl	8001ccc <nextPos>
	applySelectedScreen();
 8001d04:	f000 f816 	bl	8001d34 <applySelectedScreen>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <prevScreen>:
void prevScreen(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	prevPos();
 8001d10:	f7ff ffc4 	bl	8001c9c <prevPos>
	applySelectedScreen();
 8001d14:	f000 f80e 	bl	8001d34 <applySelectedScreen>
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <resetPos>:
void resetPos(void){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	position=0;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <resetPos+0x14>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8001d26:	f000 f805 	bl	8001d34 <applySelectedScreen>
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200004a0 	.word	0x200004a0

08001d34 <applySelectedScreen>:

void applySelectedScreen(void){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <applySelectedScreen+0x3c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <applySelectedScreen+0x40>)
 8001d40:	232c      	movs	r3, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3320      	adds	r3, #32
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <applySelectedScreen+0x44>)
 8001d4e:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <applySelectedScreen+0x3c>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <applySelectedScreen+0x40>)
 8001d58:	232c      	movs	r3, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3324      	adds	r3, #36	; 0x24
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <applySelectedScreen+0x48>)
 8001d66:	6013      	str	r3, [r2, #0]
	selectScreen();
 8001d68:	f000 f80a 	bl	8001d80 <selectScreen>
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200004a0 	.word	0x200004a0
 8001d74:	20000048 	.word	0x20000048
 8001d78:	20000128 	.word	0x20000128
 8001d7c:	20000124 	.word	0x20000124

08001d80 <selectScreen>:

void selectScreen(void){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8001d84:	f7ff fd22 	bl	80017cc <resetButtonHandlers>
	isModuleSet = 0;
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <selectScreen+0x1c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <selectScreen+0x20>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <selectScreen+0x24>)
 8001d94:	6013      	str	r3, [r2, #0]
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200004a1 	.word	0x200004a1
 8001da0:	20000124 	.word	0x20000124
 8001da4:	2000012c 	.word	0x2000012c

08001da8 <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <showGui+0x30>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <showGui+0x18>
		moduleSetupPtr();
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <showGui+0x34>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4798      	blx	r3
		isModuleSet = 1;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <showGui+0x30>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <showGui+0x38>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <showGui+0x26>
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <showGui+0x38>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4798      	blx	r3
	lcdRefresh();
 8001dce:	f000 faeb 	bl	80023a8 <lcdRefresh>
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200004a1 	.word	0x200004a1
 8001ddc:	20000128 	.word	0x20000128
 8001de0:	2000012c 	.word	0x2000012c

08001de4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001dea:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <MX_I2C1_Init+0x78>)
 8001dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <MX_I2C1_Init+0x7c>)
 8001df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e22:	f002 fee5 	bl	8004bf0 <HAL_I2C_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e2c:	f000 fc72 	bl	8002714 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	4809      	ldr	r0, [pc, #36]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e34:	f003 fe9b 	bl	8005b6e <HAL_I2CEx_ConfigAnalogFilter>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001e3e:	f000 fc69 	bl	8002714 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e46:	f003 fece 	bl	8005be6 <HAL_I2CEx_ConfigDigitalFilter>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001e50:	f000 fc60 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200004a4 	.word	0x200004a4
 8001e5c:	40005400 	.word	0x40005400
 8001e60:	000186a0 	.word	0x000186a0

08001e64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_I2C_MspInit+0x84>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12c      	bne.n	8001ee0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea8:	2312      	movs	r3, #18
 8001eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <HAL_I2C_MspInit+0x8c>)
 8001ec0:	f002 fc7a 	bl	80047b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40005400 	.word	0x40005400
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020400 	.word	0x40020400

08001ef4 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8001efe:	2307      	movs	r3, #7
 8001f00:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8001f0e:	e010      	b.n	8001f32 <reverse_uint8+0x3e>
		result = result << 1;
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8001f24:	7bba      	ldrb	r2, [r7, #14]
 8001f26:	7b7b      	ldrb	r3, [r7, #13]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	73bb      	strb	r3, [r7, #14]
		times--;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1eb      	bne.n	8001f10 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
	updateSetting(0);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f824 	bl	8001f9c <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8001f54:	2300      	movs	r3, #0
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	e014      	b.n	8001f84 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	80bb      	strh	r3, [r7, #4]
 8001f5e:	e00b      	b.n	8001f78 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2232      	movs	r2, #50	; 0x32
 8001f64:	fb03 f202 	mul.w	r2, r3, r2
 8001f68:	88bb      	ldrh	r3, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <lcdClearBuffer+0x50>)
 8001f6e:	21ff      	movs	r1, #255	; 0xff
 8001f70:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8001f72:	88bb      	ldrh	r3, [r7, #4]
 8001f74:	3301      	adds	r3, #1
 8001f76:	80bb      	strh	r3, [r7, #4]
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	2b31      	cmp	r3, #49	; 0x31
 8001f7c:	d9f0      	bls.n	8001f60 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	3301      	adds	r3, #1
 8001f82:	71fb      	strb	r3, [r7, #7]
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	2bef      	cmp	r3, #239	; 0xef
 8001f88:	d9e7      	bls.n	8001f5a <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 f806 	bl	8001f9c <updateSetting>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200004fc 	.word	0x200004fc

08001f9c <updateSetting>:

void updateSetting(uint8_t state){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <updateSetting+0x1c>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	7013      	strb	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	20000130 	.word	0x20000130

08001fbc <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	80fb      	strh	r3, [r7, #6]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	717b      	strb	r3, [r7, #5]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	795b      	ldrb	r3, [r3, #5]
 8001fd4:	793a      	ldrb	r2, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d304      	bcc.n	8001fe4 <lcdPutChar+0x28>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	799b      	ldrb	r3, [r3, #6]
 8001fde:	793a      	ldrb	r2, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d902      	bls.n	8001fea <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	79db      	ldrb	r3, [r3, #7]
 8001fe8:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	08db      	lsrs	r3, r3, #3
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	885b      	ldrh	r3, [r3, #2]
 8002000:	461a      	mov	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	785b      	ldrb	r3, [r3, #1]
 8002006:	fb92 f3f3 	sdiv	r3, r2, r3
 800200a:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 800200c:	2300      	movs	r3, #0
 800200e:	75fb      	strb	r3, [r7, #23]
 8002010:	e09b      	b.n	800214a <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002012:	797a      	ldrb	r2, [r7, #5]
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	4413      	add	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	0092      	lsls	r2, r2, #2
 800201e:	4413      	add	r3, r2
 8002020:	461a      	mov	r2, r3
 8002022:	0091      	lsls	r1, r2, #2
 8002024:	461a      	mov	r2, r3
 8002026:	460b      	mov	r3, r1
 8002028:	4413      	add	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4413      	add	r3, r2
 8002034:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002036:	793b      	ldrb	r3, [r7, #4]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	7952      	ldrb	r2, [r2, #5]
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	8852      	ldrh	r2, [r2, #2]
 8002042:	fb03 f202 	mul.w	r2, r3, r2
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	7cb9      	ldrb	r1, [r7, #18]
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	3308      	adds	r3, #8
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	7d3b      	ldrb	r3, [r7, #20]
 8002060:	fa42 f303 	asr.w	r3, r2, r3
 8002064:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002066:	8a3b      	ldrh	r3, [r7, #16]
 8002068:	4a3e      	ldr	r2, [pc, #248]	; (8002164 <lcdPutChar+0x1a8>)
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	b25a      	sxtb	r2, r3
 800206e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002072:	43db      	mvns	r3, r3
 8002074:	b25b      	sxtb	r3, r3
 8002076:	4013      	ands	r3, r2
 8002078:	b25a      	sxtb	r2, r3
 800207a:	8a3b      	ldrh	r3, [r7, #16]
 800207c:	b2d1      	uxtb	r1, r2
 800207e:	4a39      	ldr	r2, [pc, #228]	; (8002164 <lcdPutChar+0x1a8>)
 8002080:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	3308      	adds	r3, #8
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b25a      	sxtb	r2, r3
 800208e:	7d3b      	ldrb	r3, [r7, #20]
 8002090:	f1c3 0308 	rsb	r3, r3, #8
 8002094:	21ff      	movs	r1, #255	; 0xff
 8002096:	fa41 f303 	asr.w	r3, r1, r3
 800209a:	b25b      	sxtb	r3, r3
 800209c:	4013      	ands	r3, r2
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80020a2:	2301      	movs	r3, #1
 80020a4:	757b      	strb	r3, [r7, #21]
 80020a6:	e029      	b.n	80020fc <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 80020a8:	7d7a      	ldrb	r2, [r7, #21]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4413      	add	r3, r2
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	7a1b      	ldrb	r3, [r3, #8]
 80020b4:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80020b6:	8a3a      	ldrh	r2, [r7, #16]
 80020b8:	7d7b      	ldrb	r3, [r7, #21]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <lcdPutChar+0x1a8>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	b25a      	sxtb	r2, r3
 80020c2:	7db9      	ldrb	r1, [r7, #22]
 80020c4:	7d3b      	ldrb	r3, [r7, #20]
 80020c6:	f1c3 0308 	rsb	r3, r3, #8
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	b259      	sxtb	r1, r3
 80020d0:	7af8      	ldrb	r0, [r7, #11]
 80020d2:	7d3b      	ldrb	r3, [r7, #20]
 80020d4:	fa40 f303 	asr.w	r3, r0, r3
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	430b      	orrs	r3, r1
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	4013      	ands	r3, r2
 80020e4:	b259      	sxtb	r1, r3
 80020e6:	8a3a      	ldrh	r2, [r7, #16]
 80020e8:	7d7b      	ldrb	r3, [r7, #21]
 80020ea:	4413      	add	r3, r2
 80020ec:	b2c9      	uxtb	r1, r1
 80020ee:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <lcdPutChar+0x1a8>)
 80020f0:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 80020f2:	7afb      	ldrb	r3, [r7, #11]
 80020f4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80020f6:	7d7b      	ldrb	r3, [r7, #21]
 80020f8:	3301      	adds	r3, #1
 80020fa:	757b      	strb	r3, [r7, #21]
 80020fc:	7d7a      	ldrb	r2, [r7, #21]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	3307      	adds	r3, #7
 8002104:	10db      	asrs	r3, r3, #3
 8002106:	429a      	cmp	r2, r3
 8002108:	dbce      	blt.n	80020a8 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 800210a:	8a3a      	ldrh	r2, [r7, #16]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	3307      	adds	r3, #7
 8002112:	10db      	asrs	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <lcdPutChar+0x1a8>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	b25a      	sxtb	r2, r3
 800211c:	7db9      	ldrb	r1, [r7, #22]
 800211e:	7d3b      	ldrb	r3, [r7, #20]
 8002120:	f1c3 0308 	rsb	r3, r3, #8
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	b25b      	sxtb	r3, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	b25b      	sxtb	r3, r3
 800212e:	4013      	ands	r3, r2
 8002130:	b259      	sxtb	r1, r3
 8002132:	8a3a      	ldrh	r2, [r7, #16]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	3307      	adds	r3, #7
 800213a:	10db      	asrs	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	b2c9      	uxtb	r1, r1
 8002140:	4a08      	ldr	r2, [pc, #32]	; (8002164 <lcdPutChar+0x1a8>)
 8002142:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	3301      	adds	r3, #1
 8002148:	75fb      	strb	r3, [r7, #23]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	7dfa      	ldrb	r2, [r7, #23]
 8002150:	429a      	cmp	r2, r3
 8002152:	f4ff af5e 	bcc.w	8002012 <lcdPutChar+0x56>
	}
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	200004fc 	.word	0x200004fc

08002168 <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60ba      	str	r2, [r7, #8]
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4603      	mov	r3, r0
 8002174:	81fb      	strh	r3, [r7, #14]
 8002176:	460b      	mov	r3, r1
 8002178:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 800217a:	2300      	movs	r3, #0
 800217c:	75fb      	strb	r3, [r7, #23]
 800217e:	e015      	b.n	80021ac <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b29a      	uxth	r2, r3
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	b29b      	uxth	r3, r3
 800218a:	fb12 f303 	smulbb	r3, r2, r3
 800218e:	b29a      	uxth	r2, r3
 8002190:	89fb      	ldrh	r3, [r7, #14]
 8002192:	4413      	add	r3, r2
 8002194:	b298      	uxth	r0, r3
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	4413      	add	r3, r2
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	7b79      	ldrb	r1, [r7, #13]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f7ff ff0b 	bl	8001fbc <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	3301      	adds	r3, #1
 80021aa:	75fb      	strb	r3, [r7, #23]
 80021ac:	7dfc      	ldrb	r4, [r7, #23]
 80021ae:	68b8      	ldr	r0, [r7, #8]
 80021b0:	f7fe f81e 	bl	80001f0 <strlen>
 80021b4:	4603      	mov	r3, r0
 80021b6:	429c      	cmp	r4, r3
 80021b8:	d3e2      	bcc.n	8002180 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd90      	pop	{r4, r7, pc}

080021c4 <lcdHLine>:

// Draw horizontal line - minimum width = 8px
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 80021c4:	b490      	push	{r4, r7}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4604      	mov	r4, r0
 80021cc:	4608      	mov	r0, r1
 80021ce:	4611      	mov	r1, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	4623      	mov	r3, r4
 80021d4:	80fb      	strh	r3, [r7, #6]
 80021d6:	4603      	mov	r3, r0
 80021d8:	80bb      	strh	r3, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	70fb      	strb	r3, [r7, #3]
 80021de:	4613      	mov	r3, r2
 80021e0:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	74bb      	strb	r3, [r7, #18]
	uint8_t offset1 = x1%8;
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	747b      	strb	r3, [r7, #17]
	uint8_t x2block = x2/8;
 80021f4:	88bb      	ldrh	r3, [r7, #4]
 80021f6:	08db      	lsrs	r3, r3, #3
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	743b      	strb	r3, [r7, #16]
	uint8_t offset2 = x2%8;
 80021fc:	88bb      	ldrh	r3, [r7, #4]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	73fb      	strb	r3, [r7, #15]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	2232      	movs	r2, #50	; 0x32
 800220a:	fb03 f202 	mul.w	r2, r3, r2
 800220e:	7cbb      	ldrb	r3, [r7, #18]
 8002210:	4413      	add	r3, r2
 8002212:	4a64      	ldr	r2, [pc, #400]	; (80023a4 <lcdHLine+0x1e0>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	2232      	movs	r2, #50	; 0x32
 800221c:	fb03 f202 	mul.w	r2, r3, r2
 8002220:	7cbb      	ldrb	r3, [r7, #18]
 8002222:	441a      	add	r2, r3
 8002224:	7c3b      	ldrb	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	4a5e      	ldr	r2, [pc, #376]	; (80023a4 <lcdHLine+0x1e0>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	75bb      	strb	r3, [r7, #22]
	switch(mode){
 800222e:	78bb      	ldrb	r3, [r7, #2]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d067      	beq.n	8002304 <lcdHLine+0x140>
 8002234:	2b02      	cmp	r3, #2
 8002236:	f300 809e 	bgt.w	8002376 <lcdHLine+0x1b2>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <lcdHLine+0x80>
 800223e:	2b01      	cmp	r3, #1
 8002240:	d02e      	beq.n	80022a0 <lcdHLine+0xdc>
 8002242:	e098      	b.n	8002376 <lcdHLine+0x1b2>
	// clear
	case 0:
		firstBlock |= (0xFF >> offset1);
 8002244:	7c7b      	ldrb	r3, [r7, #17]
 8002246:	22ff      	movs	r2, #255	; 0xff
 8002248:	fa42 f303 	asr.w	r3, r2, r3
 800224c:	b25a      	sxtb	r2, r3
 800224e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002252:	4313      	orrs	r3, r2
 8002254:	b25b      	sxtb	r3, r3
 8002256:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2));
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	f1c3 0308 	rsb	r3, r3, #8
 800225e:	22ff      	movs	r2, #255	; 0xff
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	b25a      	sxtb	r2, r3
 8002266:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800226a:	4313      	orrs	r3, r2
 800226c:	b25b      	sxtb	r3, r3
 800226e:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002270:	2301      	movs	r3, #1
 8002272:	757b      	strb	r3, [r7, #21]
 8002274:	e00d      	b.n	8002292 <lcdHLine+0xce>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	2232      	movs	r2, #50	; 0x32
 800227a:	fb03 f202 	mul.w	r2, r3, r2
 800227e:	7cbb      	ldrb	r3, [r7, #18]
 8002280:	441a      	add	r2, r3
 8002282:	7d7b      	ldrb	r3, [r7, #21]
 8002284:	4413      	add	r3, r2
 8002286:	4a47      	ldr	r2, [pc, #284]	; (80023a4 <lcdHLine+0x1e0>)
 8002288:	21ff      	movs	r1, #255	; 0xff
 800228a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800228c:	7d7b      	ldrb	r3, [r7, #21]
 800228e:	3301      	adds	r3, #1
 8002290:	757b      	strb	r3, [r7, #21]
 8002292:	7d7a      	ldrb	r2, [r7, #21]
 8002294:	7c39      	ldrb	r1, [r7, #16]
 8002296:	7cbb      	ldrb	r3, [r7, #18]
 8002298:	1acb      	subs	r3, r1, r3
 800229a:	429a      	cmp	r2, r3
 800229c:	dbeb      	blt.n	8002276 <lcdHLine+0xb2>
		}
		break;
 800229e:	e06a      	b.n	8002376 <lcdHLine+0x1b2>
	// fill
	case 1:
		firstBlock &= ~(0xFF >> offset1);
 80022a0:	7c7b      	ldrb	r3, [r7, #17]
 80022a2:	22ff      	movs	r2, #255	; 0xff
 80022a4:	fa42 f303 	asr.w	r3, r2, r3
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	b25a      	sxtb	r2, r3
 80022ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022b2:	4013      	ands	r3, r2
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2));
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	f1c3 0308 	rsb	r3, r3, #8
 80022be:	22ff      	movs	r2, #255	; 0xff
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	b25a      	sxtb	r2, r3
 80022ca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80022ce:	4013      	ands	r3, r2
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80022d4:	2301      	movs	r3, #1
 80022d6:	753b      	strb	r3, [r7, #20]
 80022d8:	e00d      	b.n	80022f6 <lcdHLine+0x132>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	2232      	movs	r2, #50	; 0x32
 80022de:	fb03 f202 	mul.w	r2, r3, r2
 80022e2:	7cbb      	ldrb	r3, [r7, #18]
 80022e4:	441a      	add	r2, r3
 80022e6:	7d3b      	ldrb	r3, [r7, #20]
 80022e8:	4413      	add	r3, r2
 80022ea:	4a2e      	ldr	r2, [pc, #184]	; (80023a4 <lcdHLine+0x1e0>)
 80022ec:	2100      	movs	r1, #0
 80022ee:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80022f0:	7d3b      	ldrb	r3, [r7, #20]
 80022f2:	3301      	adds	r3, #1
 80022f4:	753b      	strb	r3, [r7, #20]
 80022f6:	7d3a      	ldrb	r2, [r7, #20]
 80022f8:	7c39      	ldrb	r1, [r7, #16]
 80022fa:	7cbb      	ldrb	r3, [r7, #18]
 80022fc:	1acb      	subs	r3, r1, r3
 80022fe:	429a      	cmp	r2, r3
 8002300:	dbeb      	blt.n	80022da <lcdHLine+0x116>
		}
		break;
 8002302:	e038      	b.n	8002376 <lcdHLine+0x1b2>
	// revert
	case 2:
		firstBlock ^= (0xFF >> offset1);
 8002304:	7c7b      	ldrb	r3, [r7, #17]
 8002306:	22ff      	movs	r2, #255	; 0xff
 8002308:	fa42 f303 	asr.w	r3, r2, r3
 800230c:	b25a      	sxtb	r2, r3
 800230e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002312:	4053      	eors	r3, r2
 8002314:	b25b      	sxtb	r3, r3
 8002316:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2));
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	f1c3 0308 	rsb	r3, r3, #8
 800231e:	22ff      	movs	r2, #255	; 0xff
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	b25a      	sxtb	r2, r3
 8002326:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800232a:	4053      	eors	r3, r2
 800232c:	b25b      	sxtb	r3, r3
 800232e:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002330:	2301      	movs	r3, #1
 8002332:	74fb      	strb	r3, [r7, #19]
 8002334:	e018      	b.n	8002368 <lcdHLine+0x1a4>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	2232      	movs	r2, #50	; 0x32
 800233a:	fb03 f202 	mul.w	r2, r3, r2
 800233e:	7cbb      	ldrb	r3, [r7, #18]
 8002340:	441a      	add	r2, r3
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	4413      	add	r3, r2
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <lcdHLine+0x1e0>)
 8002348:	5cd2      	ldrb	r2, [r2, r3]
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	2132      	movs	r1, #50	; 0x32
 800234e:	fb03 f101 	mul.w	r1, r3, r1
 8002352:	7cbb      	ldrb	r3, [r7, #18]
 8002354:	4419      	add	r1, r3
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	440b      	add	r3, r1
 800235a:	43d2      	mvns	r2, r2
 800235c:	b2d1      	uxtb	r1, r2
 800235e:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <lcdHLine+0x1e0>)
 8002360:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002362:	7cfb      	ldrb	r3, [r7, #19]
 8002364:	3301      	adds	r3, #1
 8002366:	74fb      	strb	r3, [r7, #19]
 8002368:	7cfa      	ldrb	r2, [r7, #19]
 800236a:	7c39      	ldrb	r1, [r7, #16]
 800236c:	7cbb      	ldrb	r3, [r7, #18]
 800236e:	1acb      	subs	r3, r1, r3
 8002370:	429a      	cmp	r2, r3
 8002372:	dbe0      	blt.n	8002336 <lcdHLine+0x172>
		}
		break;
 8002374:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	2232      	movs	r2, #50	; 0x32
 800237a:	fb03 f202 	mul.w	r2, r3, r2
 800237e:	7cbb      	ldrb	r3, [r7, #18]
 8002380:	4413      	add	r3, r2
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <lcdHLine+0x1e0>)
 8002384:	7dfa      	ldrb	r2, [r7, #23]
 8002386:	54ca      	strb	r2, [r1, r3]
	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	2232      	movs	r2, #50	; 0x32
 800238c:	fb03 f202 	mul.w	r2, r3, r2
 8002390:	7c3b      	ldrb	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	4903      	ldr	r1, [pc, #12]	; (80023a4 <lcdHLine+0x1e0>)
 8002396:	7dba      	ldrb	r2, [r7, #22]
 8002398:	54ca      	strb	r2, [r1, r3]
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc90      	pop	{r4, r7}
 80023a2:	4770      	bx	lr
 80023a4:	200004fc 	.word	0x200004fc

080023a8 <lcdRefresh>:

void lcdRefresh(void){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
	if(allowUpdate){
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <lcdRefresh+0x7c>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d032      	beq.n	800241c <lcdRefresh+0x74>
		SMLCD_SCS_H;
 80023b6:	2201      	movs	r2, #1
 80023b8:	2140      	movs	r1, #64	; 0x40
 80023ba:	481b      	ldr	r0, [pc, #108]	; (8002428 <lcdRefresh+0x80>)
 80023bc:	f002 fbc0 	bl	8004b40 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80023c0:	2301      	movs	r3, #1
 80023c2:	71fb      	strb	r3, [r7, #7]
 80023c4:	e01c      	b.n	8002400 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fd93 	bl	8001ef4 <reverse_uint8>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <lcdRefresh+0x84>)
 80023d4:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 80023d6:	2396      	movs	r3, #150	; 0x96
 80023d8:	2202      	movs	r2, #2
 80023da:	4914      	ldr	r1, [pc, #80]	; (800242c <lcdRefresh+0x84>)
 80023dc:	4814      	ldr	r0, [pc, #80]	; (8002430 <lcdRefresh+0x88>)
 80023de:	f004 fd9c 	bl	8006f1a <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	2232      	movs	r2, #50	; 0x32
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <lcdRefresh+0x8c>)
 80023ee:	1899      	adds	r1, r3, r2
 80023f0:	2396      	movs	r3, #150	; 0x96
 80023f2:	2232      	movs	r2, #50	; 0x32
 80023f4:	480e      	ldr	r0, [pc, #56]	; (8002430 <lcdRefresh+0x88>)
 80023f6:	f004 fd90 	bl	8006f1a <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	3301      	adds	r3, #1
 80023fe:	71fb      	strb	r3, [r7, #7]
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	2bf1      	cmp	r3, #241	; 0xf1
 8002404:	d9df      	bls.n	80023c6 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8002406:	2396      	movs	r3, #150	; 0x96
 8002408:	2202      	movs	r2, #2
 800240a:	490b      	ldr	r1, [pc, #44]	; (8002438 <lcdRefresh+0x90>)
 800240c:	4808      	ldr	r0, [pc, #32]	; (8002430 <lcdRefresh+0x88>)
 800240e:	f004 fd84 	bl	8006f1a <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8002412:	2200      	movs	r2, #0
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	4804      	ldr	r0, [pc, #16]	; (8002428 <lcdRefresh+0x80>)
 8002418:	f002 fb92 	bl	8004b40 <HAL_GPIO_WritePin>
	}
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000130 	.word	0x20000130
 8002428:	40020000 	.word	0x40020000
 800242c:	20000134 	.word	0x20000134
 8002430:	20003414 	.word	0x20003414
 8002434:	200004fc 	.word	0x200004fc
 8002438:	200004f8 	.word	0x200004f8

0800243c <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	4604      	mov	r4, r0
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4623      	mov	r3, r4
 800244c:	80fb      	strh	r3, [r7, #6]
 800244e:	4603      	mov	r3, r0
 8002450:	80bb      	strh	r3, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	70fb      	strb	r3, [r7, #3]
 8002456:	4613      	mov	r3, r2
 8002458:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e009      	b.n	8002474 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8002460:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	88b9      	ldrh	r1, [r7, #4]
 8002468:	88f8      	ldrh	r0, [r7, #6]
 800246a:	f7ff feab 	bl	80021c4 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	3301      	adds	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	78bb      	ldrb	r3, [r7, #2]
 8002478:	429a      	cmp	r2, r3
 800247a:	d9f1      	bls.n	8002460 <lcdRect+0x24>
	}
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	bd90      	pop	{r4, r7, pc}

08002486 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800248e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002492:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d013      	beq.n	80024c6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800249e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024a2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80024a6:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80024ae:	e000      	b.n	80024b2 <ITM_SendChar+0x2c>
    {
      __NOP();
 80024b0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80024b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f9      	beq.n	80024b0 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80024bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80024c6:	687b      	ldr	r3, [r7, #4]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ffd1 	bl	8002486 <ITM_SendChar>
	return(ch);
 80024e4:	687b      	ldr	r3, [r7, #4]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024f8:	f001 ff24 	bl	8004344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024fc:	f000 f868 	bl	80025d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002500:	f7ff fa9c 	bl	8001a3c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002504:	f000 fd6a 	bl	8002fdc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002508:	f000 f96e 	bl	80027e8 <MX_SPI1_Init>
  MX_TIM1_Init();
 800250c:	f000 fbd6 	bl	8002cbc <MX_TIM1_Init>
  MX_TIM10_Init();
 8002510:	f000 fc76 	bl	8002e00 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 8002514:	f000 fd8c 	bl	8003030 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8002518:	f7ff fc64 	bl	8001de4 <MX_I2C1_Init>
  MX_TIM11_Init();
 800251c:	f000 fc94 	bl	8002e48 <MX_TIM11_Init>
  MX_RTC_Init();
 8002520:	f000 f906 	bl	8002730 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart6, &znak, 1);

  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8002524:	4821      	ldr	r0, [pc, #132]	; (80025ac <main+0xbc>)
 8002526:	f004 feff 	bl	8007328 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800252a:	4820      	ldr	r0, [pc, #128]	; (80025ac <main+0xbc>)
 800252c:	f004 ff4c 	bl	80073c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002530:	2100      	movs	r1, #0
 8002532:	481e      	ldr	r0, [pc, #120]	; (80025ac <main+0xbc>)
 8002534:	f005 f812 	bl	800755c <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 8002538:	481d      	ldr	r0, [pc, #116]	; (80025b0 <main+0xc0>)
 800253a:	f004 ff45 	bl	80073c8 <HAL_TIM_Base_Start_IT>

  gpsDevice gpsModule;
  gpsModule = initGps(&huart6);
 800253e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002542:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002546:	491b      	ldr	r1, [pc, #108]	; (80025b4 <main+0xc4>)
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fb63 	bl	8001c14 <initGps>

//  bmp_t bmp180module;
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 800254e:	481a      	ldr	r0, [pc, #104]	; (80025b8 <main+0xc8>)
 8002550:	f7fe fde4 	bl	800111c <bmp_init>

  initButtons(btnsPtrs);
 8002554:	4819      	ldr	r0, [pc, #100]	; (80025bc <main+0xcc>)
 8002556:	f7ff f89f 	bl	8001698 <initButtons>

  initTimer();
 800255a:	f7ff fa4b 	bl	80019f4 <initTimer>
  setTimeout(1);
 800255e:	2001      	movs	r0, #1
 8002560:	f7ff fa52 	bl	8001a08 <setTimeout>
  startClock();
 8002564:	f7ff fa60 	bl	8001a28 <startClock>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 8002568:	f7ff fcee 	bl	8001f48 <lcdClearBuffer>
  lcdRefresh();
 800256c:	f7ff ff1c 	bl	80023a8 <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 8002570:	4c13      	ldr	r4, [pc, #76]	; (80025c0 <main+0xd0>)
 8002572:	463b      	mov	r3, r7
 8002574:	4910      	ldr	r1, [pc, #64]	; (80025b8 <main+0xc8>)
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff f836 	bl	80015e8 <getBmpData>
 800257c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002580:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8002584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800258a:	2200      	movs	r2, #0
 800258c:	490d      	ldr	r1, [pc, #52]	; (80025c4 <main+0xd4>)
 800258e:	480e      	ldr	r0, [pc, #56]	; (80025c8 <main+0xd8>)
 8002590:	f004 fad0 	bl	8006b34 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8002594:	2200      	movs	r2, #0
 8002596:	490d      	ldr	r1, [pc, #52]	; (80025cc <main+0xdc>)
 8002598:	480b      	ldr	r0, [pc, #44]	; (80025c8 <main+0xd8>)
 800259a:	f004 fb29 	bl	8006bf0 <HAL_RTC_GetDate>

	  lcdClearBuffer();
 800259e:	f7ff fcd3 	bl	8001f48 <lcdClearBuffer>

	  // functions executed through GUI
	  showGui();
 80025a2:	f7ff fc01 	bl	8001da8 <showGui>

	  lcdRefresh();
 80025a6:	f7ff feff 	bl	80023a8 <lcdRefresh>
		bmpData = getBmpData(&bmp180module);
 80025aa:	e7e1      	b.n	8002570 <main+0x80>
 80025ac:	20003474 	.word	0x20003474
 80025b0:	200034bc 	.word	0x200034bc
 80025b4:	20003590 	.word	0x20003590
 80025b8:	20000374 	.word	0x20000374
 80025bc:	2000002c 	.word	0x2000002c
 80025c0:	200003b8 	.word	0x200003b8
 80025c4:	200033dc 	.word	0x200033dc
 80025c8:	200033f4 	.word	0x200033f4
 80025cc:	200033f0 	.word	0x200033f0

080025d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b094      	sub	sp, #80	; 0x50
 80025d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d6:	f107 0320 	add.w	r3, r7, #32
 80025da:	2230      	movs	r2, #48	; 0x30
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f006 ff82 	bl	80094e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e4:	f107 030c 	add.w	r3, r7, #12
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <SystemClock_Config+0xd0>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	4a28      	ldr	r2, [pc, #160]	; (80026a0 <SystemClock_Config+0xd0>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002602:	6413      	str	r3, [r2, #64]	; 0x40
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <SystemClock_Config+0xd0>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002610:	2300      	movs	r3, #0
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <SystemClock_Config+0xd4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <SystemClock_Config+0xd4>)
 800261a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <SystemClock_Config+0xd4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800262c:	2309      	movs	r3, #9
 800262e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002630:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002636:	2301      	movs	r3, #1
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800263a:	2302      	movs	r3, #2
 800263c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800263e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002644:	2304      	movs	r3, #4
 8002646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002648:	23a8      	movs	r3, #168	; 0xa8
 800264a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800264c:	2302      	movs	r3, #2
 800264e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002650:	2307      	movs	r3, #7
 8002652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002654:	f107 0320 	add.w	r3, r7, #32
 8002658:	4618      	mov	r0, r3
 800265a:	f003 fb03 	bl	8005c64 <HAL_RCC_OscConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002664:	f000 f856 	bl	8002714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002668:	230f      	movs	r3, #15
 800266a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800266c:	2302      	movs	r3, #2
 800266e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800267a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	2105      	movs	r1, #5
 8002686:	4618      	mov	r0, r3
 8002688:	f003 fd64 	bl	8006154 <HAL_RCC_ClockConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002692:	f000 f83f 	bl	8002714 <Error_Handler>
  }
}
 8002696:	bf00      	nop
 8002698:	3750      	adds	r7, #80	; 0x50
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000

080026a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM10){
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0d      	ldr	r2, [pc, #52]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10c      	bne.n	80026d4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		if(stwS.state){
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026bc:	78db      	ldrb	r3, [r3, #3]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_TIM_PeriodElapsedCallback+0x2c>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80026c8:	2101      	movs	r1, #1
 80026ca:	480a      	ldr	r0, [pc, #40]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80026cc:	f002 fa51 	bl	8004b72 <HAL_GPIO_TogglePin>
			stwTick();
 80026d0:	f000 f9da 	bl	8002a88 <stwTick>
		}
	}
	if(htim->Instance == TIM11){
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d102      	bne.n	80026e4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		scanButtons(btnsPtrs);
 80026de:	4807      	ldr	r0, [pc, #28]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80026e0:	f7ff f96e 	bl	80019c0 <scanButtons>
	}
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40014400 	.word	0x40014400
 80026f0:	2000346c 	.word	0x2000346c
 80026f4:	40020400 	.word	0x40020400
 80026f8:	40014800 	.word	0x40014800
 80026fc:	2000002c 	.word	0x2000002c

08002700 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){

	}
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002718:	b672      	cpsid	i
}
 800271a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800271c:	2201      	movs	r2, #1
 800271e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002722:	4802      	ldr	r0, [pc, #8]	; (800272c <Error_Handler+0x18>)
 8002724:	f002 fa0c 	bl	8004b40 <HAL_GPIO_WritePin>
  while (1)
 8002728:	e7fe      	b.n	8002728 <Error_Handler+0x14>
 800272a:	bf00      	nop
 800272c:	40020400 	.word	0x40020400

08002730 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002744:	2300      	movs	r3, #0
 8002746:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <MX_RTC_Init+0x5c>)
 800274a:	4a11      	ldr	r2, [pc, #68]	; (8002790 <MX_RTC_Init+0x60>)
 800274c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <MX_RTC_Init+0x5c>)
 8002750:	2200      	movs	r2, #0
 8002752:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <MX_RTC_Init+0x5c>)
 8002756:	227f      	movs	r2, #127	; 0x7f
 8002758:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <MX_RTC_Init+0x5c>)
 800275c:	22ff      	movs	r2, #255	; 0xff
 800275e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <MX_RTC_Init+0x5c>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <MX_RTC_Init+0x5c>)
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <MX_RTC_Init+0x5c>)
 800276e:	2200      	movs	r2, #0
 8002770:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002772:	4806      	ldr	r0, [pc, #24]	; (800278c <MX_RTC_Init+0x5c>)
 8002774:	f004 f8ce 	bl	8006914 <HAL_RTC_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800277e:	f7ff ffc9 	bl	8002714 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200033f4 	.word	0x200033f4
 8002790:	40002800 	.word	0x40002800

08002794 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08e      	sub	sp, #56	; 0x38
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800279c:	f107 0308 	add.w	r3, r7, #8
 80027a0:	2230      	movs	r2, #48	; 0x30
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f006 fe9f 	bl	80094e8 <memset>
  if(rtcHandle->Instance==RTC)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a0c      	ldr	r2, [pc, #48]	; (80027e0 <HAL_RTC_MspInit+0x4c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d111      	bne.n	80027d8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027b4:	2320      	movs	r3, #32
 80027b6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027bc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 fee6 	bl	8006594 <HAL_RCCEx_PeriphCLKConfig>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80027ce:	f7ff ffa1 	bl	8002714 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <HAL_RTC_MspInit+0x50>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80027d8:	bf00      	nop
 80027da:	3738      	adds	r7, #56	; 0x38
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40002800 	.word	0x40002800
 80027e4:	42470e3c 	.word	0x42470e3c

080027e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <MX_SPI1_Init+0x64>)
 80027ee:	4a18      	ldr	r2, [pc, #96]	; (8002850 <MX_SPI1_Init+0x68>)
 80027f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <MX_SPI1_Init+0x64>)
 80027f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <MX_SPI1_Init+0x64>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <MX_SPI1_Init+0x64>)
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <MX_SPI1_Init+0x64>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <MX_SPI1_Init+0x64>)
 800280e:	2200      	movs	r2, #0
 8002810:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <MX_SPI1_Init+0x64>)
 8002814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002818:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_SPI1_Init+0x64>)
 800281c:	2220      	movs	r2, #32
 800281e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <MX_SPI1_Init+0x64>)
 8002822:	2200      	movs	r2, #0
 8002824:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_SPI1_Init+0x64>)
 8002828:	2200      	movs	r2, #0
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800282c:	4b07      	ldr	r3, [pc, #28]	; (800284c <MX_SPI1_Init+0x64>)
 800282e:	2200      	movs	r2, #0
 8002830:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_SPI1_Init+0x64>)
 8002834:	220a      	movs	r2, #10
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002838:	4804      	ldr	r0, [pc, #16]	; (800284c <MX_SPI1_Init+0x64>)
 800283a:	f004 fae5 	bl	8006e08 <HAL_SPI_Init>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002844:	f7ff ff66 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20003414 	.word	0x20003414
 8002850:	40013000 	.word	0x40013000

08002854 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_SPI_MspInit+0x84>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d12b      	bne.n	80028ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_SPI_MspInit+0x88>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a17      	ldr	r2, [pc, #92]	; (80028dc <HAL_SPI_MspInit+0x88>)
 8002880:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_SPI_MspInit+0x88>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_SPI_MspInit+0x88>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a10      	ldr	r2, [pc, #64]	; (80028dc <HAL_SPI_MspInit+0x88>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_SPI_MspInit+0x88>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80028ae:	23a0      	movs	r3, #160	; 0xa0
 80028b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ba:	2303      	movs	r3, #3
 80028bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028be:	2305      	movs	r3, #5
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	4805      	ldr	r0, [pc, #20]	; (80028e0 <HAL_SPI_MspInit+0x8c>)
 80028ca:	f001 ff75 	bl	80047b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40013000 	.word	0x40013000
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020000 	.word	0x40020000

080028e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_MspInit+0x4c>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a0f      	ldr	r2, [pc, #60]	; (8002930 <HAL_MspInit+0x4c>)
 80028f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <HAL_MspInit+0x4c>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_MspInit+0x4c>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_MspInit+0x4c>)
 8002910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_MspInit+0x4c>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800

08002934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <NMI_Handler+0x4>

0800293a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 800293e:	f7ff fee9 	bl	8002714 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002942:	e7fe      	b.n	8002942 <HardFault_Handler+0x8>

08002944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <MemManage_Handler+0x4>

0800294a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <BusFault_Handler+0x4>

08002950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <UsageFault_Handler+0x4>

08002956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002984:	f001 fd30 	bl	80043e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}

0800298c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002990:	4803      	ldr	r0, [pc, #12]	; (80029a0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002992:	f004 feab 	bl	80076ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002996:	4803      	ldr	r0, [pc, #12]	; (80029a4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002998:	f004 fea8 	bl	80076ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20003474 	.word	0x20003474
 80029a4:	200034bc 	.word	0x200034bc

080029a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029ac:	4803      	ldr	r0, [pc, #12]	; (80029bc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80029ae:	f004 fe9d 	bl	80076ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80029b2:	4803      	ldr	r0, [pc, #12]	; (80029c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80029b4:	f004 fe9a 	bl	80076ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20003474 	.word	0x20003474
 80029c0:	20003504 	.word	0x20003504

080029c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 80029c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80029cc:	f002 f8ec 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 80029d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80029d4:	f002 f8e8 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80029d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029dc:	f002 f8e4 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 80029e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029e4:	f002 f8e0 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80029e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029ec:	f002 f8dc 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80029f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029f4:	f002 f8d8 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}

080029fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <USART6_IRQHandler+0x10>)
 8002a02:	f005 fe0f 	bl	8008624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20003590 	.word	0x20003590

08002a10 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 8002a14:	2228      	movs	r2, #40	; 0x28
 8002a16:	2100      	movs	r1, #0
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <clearTable+0x1c>)
 8002a1a:	f006 fd65 	bl	80094e8 <memset>
	stwT.position = 0;
 8002a1e:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <clearTable+0x1c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000138 	.word	0x20000138

08002a30 <addItem>:
void addItem(stw_struct stwS){
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <addItem+0x38>)
 8002a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <addItem+0x38>)
 8002a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <addItem+0x38>)
 8002a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <addItem+0x38>)
 8002a58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	20000138 	.word	0x20000138

08002a6c <stwStart>:

void stwStart(void){
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
	stwS.state = 1;
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <stwStart+0x18>)
 8002a72:	78d3      	ldrb	r3, [r2, #3]
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	70d3      	strb	r3, [r2, #3]
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	2000346c 	.word	0x2000346c

08002a88 <stwTick>:
void stwTick(void){
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
	stwS.cnt++;
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <stwTick+0x28>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002a9a:	4905      	ldr	r1, [pc, #20]	; (8002ab0 <stwTick+0x28>)
 8002a9c:	680b      	ldr	r3, [r1, #0]
 8002a9e:	f362 0317 	bfi	r3, r2, #0, #24
 8002aa2:	600b      	str	r3, [r1, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	2000346c 	.word	0x2000346c

08002ab4 <stwStop>:
void stwStop(void){
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
	stwS.state = 0;
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <stwStop+0x18>)
 8002aba:	78d3      	ldrb	r3, [r2, #3]
 8002abc:	f36f 0300 	bfc	r3, #0, #1
 8002ac0:	70d3      	strb	r3, [r2, #3]
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	2000346c 	.word	0x2000346c

08002ad0 <stwClear>:
void stwClear(void){
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
	stwS.cnt = 0;
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <stwClear+0x18>)
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	f36f 0317 	bfc	r3, #0, #24
 8002adc:	6013      	str	r3, [r2, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	2000346c 	.word	0x2000346c

08002aec <stwSave>:
void stwSave(void){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <stwSave+0x18>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <stwSave+0x1c>)
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000138 	.word	0x20000138
 8002b08:	2000346c 	.word	0x2000346c

08002b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
	return 1;
 8002b10:	2301      	movs	r3, #1
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_kill>:

int _kill(int pid, int sig)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b26:	f006 fca7 	bl	8009478 <__errno>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2216      	movs	r2, #22
 8002b2e:	601a      	str	r2, [r3, #0]
	return -1;
 8002b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <_exit>:

void _exit (int status)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ffe7 	bl	8002b1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b4e:	e7fe      	b.n	8002b4e <_exit+0x12>

08002b50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	e00a      	b.n	8002b78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b62:	f3af 8000 	nop.w
 8002b66:	4601      	mov	r1, r0
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	60ba      	str	r2, [r7, #8]
 8002b6e:	b2ca      	uxtb	r2, r1
 8002b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	dbf0      	blt.n	8002b62 <_read+0x12>
	}

return len;
 8002b80:	687b      	ldr	r3, [r7, #4]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e009      	b.n	8002bb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	60ba      	str	r2, [r7, #8]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fc95 	bl	80024d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dbf1      	blt.n	8002b9c <_write+0x12>
	}
	return len;
 8002bb8:	687b      	ldr	r3, [r7, #4]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_close>:

int _close(int file)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
	return -1;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bea:	605a      	str	r2, [r3, #4]
	return 0;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <_isatty>:

int _isatty(int file)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
	return 1;
 8002c02:	2301      	movs	r3, #1
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <_sbrk+0x5c>)
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <_sbrk+0x60>)
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c40:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <_sbrk+0x64>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <_sbrk+0x64>)
 8002c4a:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <_sbrk+0x68>)
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <_sbrk+0x64>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d207      	bcs.n	8002c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c5c:	f006 fc0c 	bl	8009478 <__errno>
 8002c60:	4603      	mov	r3, r0
 8002c62:	220c      	movs	r2, #12
 8002c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c66:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6a:	e009      	b.n	8002c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <_sbrk+0x64>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <_sbrk+0x64>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	4a05      	ldr	r2, [pc, #20]	; (8002c90 <_sbrk+0x64>)
 8002c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20030000 	.word	0x20030000
 8002c8c:	00000400 	.word	0x00000400
 8002c90:	20003470 	.word	0x20003470
 8002c94:	200035f8 	.word	0x200035f8

08002c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <SystemInit+0x20>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	4a05      	ldr	r2, [pc, #20]	; (8002cb8 <SystemInit+0x20>)
 8002ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b096      	sub	sp, #88	; 0x58
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	611a      	str	r2, [r3, #16]
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f006 fbf7 	bl	80094e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cfa:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002cfc:	4a3f      	ldr	r2, [pc, #252]	; (8002dfc <MX_TIM1_Init+0x140>)
 8002cfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8002d00:	4b3d      	ldr	r3, [pc, #244]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002d02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d08:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8002d0e:	4b3a      	ldr	r3, [pc, #232]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002d10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d16:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d1c:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d22:	4b35      	ldr	r3, [pc, #212]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d28:	4833      	ldr	r0, [pc, #204]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002d2a:	f004 fafd 	bl	8007328 <HAL_TIM_Base_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002d34:	f7ff fcee 	bl	8002714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d42:	4619      	mov	r1, r3
 8002d44:	482c      	ldr	r0, [pc, #176]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002d46:	f004 fe9b 	bl	8007a80 <HAL_TIM_ConfigClockSource>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002d50:	f7ff fce0 	bl	8002714 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d54:	4828      	ldr	r0, [pc, #160]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002d56:	f004 fba7 	bl	80074a8 <HAL_TIM_PWM_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002d60:	f7ff fcd8 	bl	8002714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d64:	2300      	movs	r3, #0
 8002d66:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d70:	4619      	mov	r1, r3
 8002d72:	4821      	ldr	r0, [pc, #132]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002d74:	f005 fa84 	bl	8008280 <HAL_TIMEx_MasterConfigSynchronization>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002d7e:	f7ff fcc9 	bl	8002714 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d82:	2360      	movs	r3, #96	; 0x60
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8002d86:	2302      	movs	r3, #2
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da2:	2200      	movs	r2, #0
 8002da4:	4619      	mov	r1, r3
 8002da6:	4814      	ldr	r0, [pc, #80]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002da8:	f004 fda8 	bl	80078fc <HAL_TIM_PWM_ConfigChannel>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002db2:	f7ff fcaf 	bl	8002714 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4807      	ldr	r0, [pc, #28]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002dda:	f005 facd 	bl	8008378 <HAL_TIMEx_ConfigBreakDeadTime>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002de4:	f7ff fc96 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002de8:	4803      	ldr	r0, [pc, #12]	; (8002df8 <MX_TIM1_Init+0x13c>)
 8002dea:	f000 f8bd 	bl	8002f68 <HAL_TIM_MspPostInit>

}
 8002dee:	bf00      	nop
 8002df0:	3758      	adds	r7, #88	; 0x58
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20003474 	.word	0x20003474
 8002dfc:	40010000 	.word	0x40010000

08002e00 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <MX_TIM10_Init+0x40>)
 8002e06:	4a0f      	ldr	r2, [pc, #60]	; (8002e44 <MX_TIM10_Init+0x44>)
 8002e08:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <MX_TIM10_Init+0x40>)
 8002e0c:	f244 129f 	movw	r2, #16799	; 0x419f
 8002e10:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <MX_TIM10_Init+0x40>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <MX_TIM10_Init+0x40>)
 8002e1a:	2263      	movs	r2, #99	; 0x63
 8002e1c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <MX_TIM10_Init+0x40>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MX_TIM10_Init+0x40>)
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <MX_TIM10_Init+0x40>)
 8002e2c:	f004 fa7c 	bl	8007328 <HAL_TIM_Base_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002e36:	f7ff fc6d 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200034bc 	.word	0x200034bc
 8002e44:	40014400 	.word	0x40014400

08002e48 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <MX_TIM11_Init+0x40>)
 8002e4e:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <MX_TIM11_Init+0x44>)
 8002e50:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <MX_TIM11_Init+0x40>)
 8002e54:	f244 129f 	movw	r2, #16799	; 0x419f
 8002e58:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <MX_TIM11_Init+0x40>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 499;
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <MX_TIM11_Init+0x40>)
 8002e62:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002e66:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e68:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <MX_TIM11_Init+0x40>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <MX_TIM11_Init+0x40>)
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002e74:	4804      	ldr	r0, [pc, #16]	; (8002e88 <MX_TIM11_Init+0x40>)
 8002e76:	f004 fa57 	bl	8007328 <HAL_TIM_Base_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002e80:	f7ff fc48 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20003504 	.word	0x20003504
 8002e8c:	40014800 	.word	0x40014800

08002e90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a2e      	ldr	r2, [pc, #184]	; (8002f58 <HAL_TIM_Base_MspInit+0xc8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d11e      	bne.n	8002ee0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_TIM_Base_MspInit+0xcc>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	4a2c      	ldr	r2, [pc, #176]	; (8002f5c <HAL_TIM_Base_MspInit+0xcc>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb2:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <HAL_TIM_Base_MspInit+0xcc>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2019      	movs	r0, #25
 8002ec4:	f001 fbaf 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ec8:	2019      	movs	r0, #25
 8002eca:	f001 fbc8 	bl	800465e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	201a      	movs	r0, #26
 8002ed4:	f001 fba7 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ed8:	201a      	movs	r0, #26
 8002eda:	f001 fbc0 	bl	800465e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002ede:	e036      	b.n	8002f4e <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM10)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_TIM_Base_MspInit+0xd0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d116      	bne.n	8002f18 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_TIM_Base_MspInit+0xcc>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_TIM_Base_MspInit+0xcc>)
 8002ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <HAL_TIM_Base_MspInit+0xcc>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2019      	movs	r0, #25
 8002f0c:	f001 fb8b 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f10:	2019      	movs	r0, #25
 8002f12:	f001 fba4 	bl	800465e <HAL_NVIC_EnableIRQ>
}
 8002f16:	e01a      	b.n	8002f4e <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <HAL_TIM_Base_MspInit+0xd4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d115      	bne.n	8002f4e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <HAL_TIM_Base_MspInit+0xcc>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <HAL_TIM_Base_MspInit+0xcc>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6453      	str	r3, [r2, #68]	; 0x44
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_TIM_Base_MspInit+0xcc>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2100      	movs	r1, #0
 8002f42:	201a      	movs	r0, #26
 8002f44:	f001 fb6f 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002f48:	201a      	movs	r0, #26
 8002f4a:	f001 fb88 	bl	800465e <HAL_NVIC_EnableIRQ>
}
 8002f4e:	bf00      	nop
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800

08002f68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <HAL_TIM_MspPostInit+0x68>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d11e      	bne.n	8002fc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_TIM_MspPostInit+0x6c>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <HAL_TIM_MspPostInit+0x6c>)
 8002f94:	f043 0310 	orr.w	r3, r3, #16
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_TIM_MspPostInit+0x6c>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4805      	ldr	r0, [pc, #20]	; (8002fd8 <HAL_TIM_MspPostInit+0x70>)
 8002fc4:	f001 fbf8 	bl	80047b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002fc8:	bf00      	nop
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40021000 	.word	0x40021000

08002fdc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fe0:	4b11      	ldr	r3, [pc, #68]	; (8003028 <MX_USART3_UART_Init+0x4c>)
 8002fe2:	4a12      	ldr	r2, [pc, #72]	; (800302c <MX_USART3_UART_Init+0x50>)
 8002fe4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <MX_USART3_UART_Init+0x4c>)
 8002fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <MX_USART3_UART_Init+0x4c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <MX_USART3_UART_Init+0x4c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <MX_USART3_UART_Init+0x4c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <MX_USART3_UART_Init+0x4c>)
 8003002:	220c      	movs	r2, #12
 8003004:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <MX_USART3_UART_Init+0x4c>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <MX_USART3_UART_Init+0x4c>)
 800300e:	2200      	movs	r2, #0
 8003010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003012:	4805      	ldr	r0, [pc, #20]	; (8003028 <MX_USART3_UART_Init+0x4c>)
 8003014:	f005 fa16 	bl	8008444 <HAL_UART_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800301e:	f7ff fb79 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2000354c 	.word	0x2000354c
 800302c:	40004800 	.word	0x40004800

08003030 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <MX_USART6_UART_Init+0x4c>)
 8003036:	4a12      	ldr	r2, [pc, #72]	; (8003080 <MX_USART6_UART_Init+0x50>)
 8003038:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <MX_USART6_UART_Init+0x4c>)
 800303c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003040:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003042:	4b0e      	ldr	r3, [pc, #56]	; (800307c <MX_USART6_UART_Init+0x4c>)
 8003044:	2200      	movs	r2, #0
 8003046:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <MX_USART6_UART_Init+0x4c>)
 800304a:	2200      	movs	r2, #0
 800304c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <MX_USART6_UART_Init+0x4c>)
 8003050:	2200      	movs	r2, #0
 8003052:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <MX_USART6_UART_Init+0x4c>)
 8003056:	2204      	movs	r2, #4
 8003058:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <MX_USART6_UART_Init+0x4c>)
 800305c:	2200      	movs	r2, #0
 800305e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <MX_USART6_UART_Init+0x4c>)
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003066:	4805      	ldr	r0, [pc, #20]	; (800307c <MX_USART6_UART_Init+0x4c>)
 8003068:	f005 f9ec 	bl	8008444 <HAL_UART_Init>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003072:	f7ff fb4f 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20003590 	.word	0x20003590
 8003080:	40011400 	.word	0x40011400

08003084 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08c      	sub	sp, #48	; 0x30
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308c:	f107 031c 	add.w	r3, r7, #28
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a36      	ldr	r2, [pc, #216]	; (800317c <HAL_UART_MspInit+0xf8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d12d      	bne.n	8003102 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	4b35      	ldr	r3, [pc, #212]	; (8003180 <HAL_UART_MspInit+0xfc>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	4a34      	ldr	r2, [pc, #208]	; (8003180 <HAL_UART_MspInit+0xfc>)
 80030b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b4:	6413      	str	r3, [r2, #64]	; 0x40
 80030b6:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_UART_MspInit+0xfc>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <HAL_UART_MspInit+0xfc>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a2d      	ldr	r2, [pc, #180]	; (8003180 <HAL_UART_MspInit+0xfc>)
 80030cc:	f043 0308 	orr.w	r3, r3, #8
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <HAL_UART_MspInit+0xfc>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80030de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ec:	2303      	movs	r3, #3
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030f0:	2307      	movs	r3, #7
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f4:	f107 031c 	add.w	r3, r7, #28
 80030f8:	4619      	mov	r1, r3
 80030fa:	4822      	ldr	r0, [pc, #136]	; (8003184 <HAL_UART_MspInit+0x100>)
 80030fc:	f001 fb5c 	bl	80047b8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003100:	e038      	b.n	8003174 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a20      	ldr	r2, [pc, #128]	; (8003188 <HAL_UART_MspInit+0x104>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d133      	bne.n	8003174 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_UART_MspInit+0xfc>)
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	4a1a      	ldr	r2, [pc, #104]	; (8003180 <HAL_UART_MspInit+0xfc>)
 8003116:	f043 0320 	orr.w	r3, r3, #32
 800311a:	6453      	str	r3, [r2, #68]	; 0x44
 800311c:	4b18      	ldr	r3, [pc, #96]	; (8003180 <HAL_UART_MspInit+0xfc>)
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_UART_MspInit+0xfc>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <HAL_UART_MspInit+0xfc>)
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	6313      	str	r3, [r2, #48]	; 0x30
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <HAL_UART_MspInit+0xfc>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003144:	23c0      	movs	r3, #192	; 0xc0
 8003146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003148:	2302      	movs	r3, #2
 800314a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003150:	2303      	movs	r3, #3
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003154:	2308      	movs	r3, #8
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003158:	f107 031c 	add.w	r3, r7, #28
 800315c:	4619      	mov	r1, r3
 800315e:	480b      	ldr	r0, [pc, #44]	; (800318c <HAL_UART_MspInit+0x108>)
 8003160:	f001 fb2a 	bl	80047b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	2100      	movs	r1, #0
 8003168:	2047      	movs	r0, #71	; 0x47
 800316a:	f001 fa5c 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800316e:	2047      	movs	r0, #71	; 0x47
 8003170:	f001 fa75 	bl	800465e <HAL_NVIC_EnableIRQ>
}
 8003174:	bf00      	nop
 8003176:	3730      	adds	r7, #48	; 0x30
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40004800 	.word	0x40004800
 8003180:	40023800 	.word	0x40023800
 8003184:	40020c00 	.word	0x40020c00
 8003188:	40011400 	.word	0x40011400
 800318c:	40020800 	.word	0x40020800

08003190 <setDefaultClbcks>:
#include "digits5x9.h"

// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = 0;

static void setDefaultClbcks(void){
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <setDefaultClbcks+0x2c>)
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <setDefaultClbcks+0x30>)
 8003198:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <setDefaultClbcks+0x34>)
 800319c:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <setDefaultClbcks+0x38>)
 800319e:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <setDefaultClbcks+0x3c>)
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <setDefaultClbcks+0x40>)
 80031a4:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <setDefaultClbcks+0x44>)
 80031a8:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <setDefaultClbcks+0x48>)
 80031aa:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <setDefaultClbcks+0x4c>)
 80031ae:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <setDefaultClbcks+0x50>)
 80031b0:	619a      	str	r2, [r3, #24]
}
 80031b2:	bf00      	nop
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	200003c8 	.word	0x200003c8
 80031c0:	08001cfd 	.word	0x08001cfd
 80031c4:	20000410 	.word	0x20000410
 80031c8:	08001d0d 	.word	0x08001d0d
 80031cc:	200003ec 	.word	0x200003ec
 80031d0:	080033b1 	.word	0x080033b1
 80031d4:	2000047c 	.word	0x2000047c
 80031d8:	080033f5 	.word	0x080033f5
 80031dc:	20000434 	.word	0x20000434
 80031e0:	08003441 	.word	0x08003441

080031e4 <baroSetup>:

// function executed once on module load
void baroSetup(void){
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80031e8:	f7ff ffd2 	bl	8003190 <setDefaultClbcks>
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <baroMain>:

// main function
void baroMain(void){
 80031f0:	b5b0      	push	{r4, r5, r7, lr}
 80031f2:	b0de      	sub	sp, #376	; 0x178
 80031f4:	af02      	add	r7, sp, #8
	char str1[50] = {0};
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80031fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003200:	222e      	movs	r2, #46	; 0x2e
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f006 f96f 	bl	80094e8 <memset>
	char str2[50] = {0};
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003210:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003214:	222e      	movs	r2, #46	; 0x2e
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f006 f965 	bl	80094e8 <memset>
	char str3[50] = {0};
 800321e:	2300      	movs	r3, #0
 8003220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003224:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003228:	222e      	movs	r2, #46	; 0x2e
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f006 f95b 	bl	80094e8 <memset>
	char str4[50] = {0};
 8003232:	2300      	movs	r3, #0
 8003234:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003238:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800323c:	222e      	movs	r2, #46	; 0x2e
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f006 f951 	bl	80094e8 <memset>
	char temp[50] = {0};
 8003246:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800324a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	3304      	adds	r3, #4
 8003254:	222e      	movs	r2, #46	; 0x2e
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f006 f945 	bl	80094e8 <memset>
	char pres[50] = {0};
 800325e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003262:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	3304      	adds	r3, #4
 800326c:	222e      	movs	r2, #46	; 0x2e
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f006 f939 	bl	80094e8 <memset>
	char alti[50] = {0};
 8003276:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800327a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	3304      	adds	r3, #4
 8003284:	222e      	movs	r2, #46	; 0x2e
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f006 f92d 	bl	80094e8 <memset>
	sprintf(&str1, "%4.2f degC %04.2f hPa", bmpData.temperature, ((float)bmpData.pressure/100));
 800328e:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <baroMain+0x194>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd f968 	bl	8000568 <__aeabi_f2d>
 8003298:	4604      	mov	r4, r0
 800329a:	460d      	mov	r5, r1
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <baroMain+0x194>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003388 <baroMain+0x198>
 80032ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032b0:	ee16 0a90 	vmov	r0, s13
 80032b4:	f7fd f958 	bl	8000568 <__aeabi_f2d>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 80032c0:	e9cd 2300 	strd	r2, r3, [sp]
 80032c4:	4622      	mov	r2, r4
 80032c6:	462b      	mov	r3, r5
 80032c8:	4930      	ldr	r1, [pc, #192]	; (800338c <baroMain+0x19c>)
 80032ca:	f006 fd7f 	bl	8009dcc <siprintf>
	if(baroMode == 0){
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <baroMain+0x1a0>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11e      	bne.n	8003314 <baroMain+0x124>
		sprintf(&str2, "%6.2f hPa@asl.", bmpData.slpress/100);
 80032d6:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <baroMain+0x194>)
 80032d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80032dc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003388 <baroMain+0x198>
 80032e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032e4:	ee16 0a90 	vmov	r0, s13
 80032e8:	f7fd f93e 	bl	8000568 <__aeabi_f2d>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80032f4:	4927      	ldr	r1, [pc, #156]	; (8003394 <baroMain+0x1a4>)
 80032f6:	f006 fd69 	bl	8009dcc <siprintf>
		sprintf(&str3, "Fix. Alt: %.0f m.asl", fixedAltitude);
 80032fa:	4b27      	ldr	r3, [pc, #156]	; (8003398 <baroMain+0x1a8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd f932 	bl	8000568 <__aeabi_f2d>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 800330c:	4923      	ldr	r1, [pc, #140]	; (800339c <baroMain+0x1ac>)
 800330e:	f006 fd5d 	bl	8009dcc <siprintf>
 8003312:	e01d      	b.n	8003350 <baroMain+0x160>
	} else {
		sprintf(&str2, "%6.2f m.asl.", bmpData.altitude);
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <baroMain+0x194>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd f925 	bl	8000568 <__aeabi_f2d>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003326:	491e      	ldr	r1, [pc, #120]	; (80033a0 <baroMain+0x1b0>)
 8003328:	f006 fd50 	bl	8009dcc <siprintf>
		sprintf(&str3, "Fix. Baro: %6.2f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 800332c:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <baroMain+0x1b4>)
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003388 <baroMain+0x198>
 8003336:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800333a:	ee16 0a90 	vmov	r0, s13
 800333e:	f7fd f913 	bl	8000568 <__aeabi_f2d>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 800334a:	4917      	ldr	r1, [pc, #92]	; (80033a8 <baroMain+0x1b8>)
 800334c:	f006 fd3e 	bl	8009dcc <siprintf>
	}
	lcdPutStr(0, 0, str1, dig5x9);
 8003350:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8003354:	4b15      	ldr	r3, [pc, #84]	; (80033ac <baroMain+0x1bc>)
 8003356:	2100      	movs	r1, #0
 8003358:	2000      	movs	r0, #0
 800335a:	f7fe ff05 	bl	8002168 <lcdPutStr>
	lcdPutStr(0, 2*25, str2, dig5x9);
 800335e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <baroMain+0x1bc>)
 8003364:	2132      	movs	r1, #50	; 0x32
 8003366:	2000      	movs	r0, #0
 8003368:	f7fe fefe 	bl	8002168 <lcdPutStr>
	lcdPutStr(0, 3*25, str3, dig5x9);
 800336c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <baroMain+0x1bc>)
 8003372:	214b      	movs	r1, #75	; 0x4b
 8003374:	2000      	movs	r0, #0
 8003376:	f7fe fef7 	bl	8002168 <lcdPutStr>
}
 800337a:	bf00      	nop
 800337c:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8003380:	46bd      	mov	sp, r7
 8003382:	bdb0      	pop	{r4, r5, r7, pc}
 8003384:	200003b8 	.word	0x200003b8
 8003388:	42c80000 	.word	0x42c80000
 800338c:	0800d11c 	.word	0x0800d11c
 8003390:	200035d4 	.word	0x200035d4
 8003394:	0800d134 	.word	0x0800d134
 8003398:	20000004 	.word	0x20000004
 800339c:	0800d144 	.word	0x0800d144
 80033a0:	0800d15c 	.word	0x0800d15c
 80033a4:	20000000 	.word	0x20000000
 80033a8:	0800d16c 	.word	0x0800d16c
 80033ac:	0800e4e8 	.word	0x0800e4e8

080033b0 <changeBaroMode>:




void changeBaroMode(void){
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
	if(baroMode == 0){
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <changeBaroMode+0x34>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d107      	bne.n	80033cc <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <changeBaroMode+0x38>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <changeBaroMode+0x3c>)
 80033c2:	6013      	str	r3, [r2, #0]
		baroMode = 1;
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <changeBaroMode+0x34>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = 0;
	}
}
 80033ca:	e006      	b.n	80033da <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <changeBaroMode+0x38>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <changeBaroMode+0x40>)
 80033d2:	6013      	str	r3, [r2, #0]
		baroMode = 0;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <changeBaroMode+0x34>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	200035d4 	.word	0x200035d4
 80033e8:	200003b8 	.word	0x200003b8
 80033ec:	20000000 	.word	0x20000000
 80033f0:	20000004 	.word	0x20000004

080033f4 <addBaro>:
void addBaro(void){
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
	if(baroMode == 0){
 80033f8:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <addBaro+0x40>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <addBaro+0x22>
			fixedAltitude += 1;
 8003400:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <addBaro+0x44>)
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800340a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <addBaro+0x44>)
 8003410:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 1;
		}
}
 8003414:	e009      	b.n	800342a <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 1;
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <addBaro+0x48>)
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <addBaro+0x48>)
 8003426:	edc3 7a00 	vstr	s15, [r3]
}
 800342a:	bf00      	nop
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	200035d4 	.word	0x200035d4
 8003438:	20000004 	.word	0x20000004
 800343c:	20000000 	.word	0x20000000

08003440 <remBaro>:
void remBaro(void){
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
	if(baroMode == 0){
 8003444:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <remBaro+0x40>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <remBaro+0x22>
			fixedAltitude -= 1;
 800344c:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <remBaro+0x44>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003456:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <remBaro+0x44>)
 800345c:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 1;
		}
}
 8003460:	e009      	b.n	8003476 <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 1;
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <remBaro+0x48>)
 8003464:	edd3 7a00 	vldr	s15, [r3]
 8003468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800346c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <remBaro+0x48>)
 8003472:	edc3 7a00 	vstr	s15, [r3]
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	200035d4 	.word	0x200035d4
 8003484:	20000004 	.word	0x20000004
 8003488:	20000000 	.word	0x20000000

0800348c <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 8003494:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <setupCntxMenu+0x1c>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6013      	str	r3, [r2, #0]
	//define item structure based on passed parameters
//	cntxActions2 = act;
//	actionsNum = num;
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	200035d8 	.word	0x200035d8

080034ac <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	hideCntxMenu();
 80034b0:	f000 f87e 	bl	80035b0 <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 80034b4:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <cntxSelect+0x1c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b04      	ldr	r3, [pc, #16]	; (80034cc <cntxSelect+0x20>)
 80034bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4798      	blx	r3
}
 80034c4:	bf00      	nop
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	200035d6 	.word	0x200035d6
 80034cc:	20000174 	.word	0x20000174

080034d0 <nextItem>:

void nextItem(void){
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <nextItem+0x34>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <nextItem+0x38>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	3b01      	subs	r3, #1
 80034e0:	429a      	cmp	r2, r3
 80034e2:	da06      	bge.n	80034f2 <nextItem+0x22>
		cntxPosition++;
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <nextItem+0x34>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <nextItem+0x34>)
 80034ee:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 80034f0:	e002      	b.n	80034f8 <nextItem+0x28>
		cntxPosition = 0;
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <nextItem+0x34>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	200035d6 	.word	0x200035d6
 8003508:	20000170 	.word	0x20000170

0800350c <prevItem>:
void prevItem(void){
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <prevItem+0x30>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <prevItem+0x1a>
		cntxPosition--;
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <prevItem+0x30>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	3b01      	subs	r3, #1
 800351e:	b2da      	uxtb	r2, r3
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <prevItem+0x30>)
 8003522:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 8003524:	e005      	b.n	8003532 <prevItem+0x26>
		cntxPosition = actionsNum-1;
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <prevItem+0x34>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	3b01      	subs	r3, #1
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4b03      	ldr	r3, [pc, #12]	; (800353c <prevItem+0x30>)
 8003530:	701a      	strb	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	200035d6 	.word	0x200035d6
 8003540:	20000170 	.word	0x20000170

08003544 <setDefaultClbcks>:

void setDefaultClbcks(void){
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <setDefaultClbcks+0x34>)
 800354a:	4a0c      	ldr	r2, [pc, #48]	; (800357c <setDefaultClbcks+0x38>)
 800354c:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <setDefaultClbcks+0x3c>)
 8003550:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <setDefaultClbcks+0x40>)
 8003552:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 8003554:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <setDefaultClbcks+0x3c>)
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <setDefaultClbcks+0x40>)
 8003558:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <setDefaultClbcks+0x44>)
 800355c:	4a0b      	ldr	r2, [pc, #44]	; (800358c <setDefaultClbcks+0x48>)
 800355e:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <setDefaultClbcks+0x4c>)
 8003562:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <setDefaultClbcks+0x50>)
 8003564:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 8003566:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <setDefaultClbcks+0x4c>)
 8003568:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <setDefaultClbcks+0x50>)
 800356a:	61da      	str	r2, [r3, #28]
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	2000047c 	.word	0x2000047c
 800357c:	080035b1 	.word	0x080035b1
 8003580:	20000410 	.word	0x20000410
 8003584:	0800350d 	.word	0x0800350d
 8003588:	200003ec 	.word	0x200003ec
 800358c:	080034ad 	.word	0x080034ad
 8003590:	200003c8 	.word	0x200003c8
 8003594:	080034d1 	.word	0x080034d1

08003598 <showCntxMenu>:

void showCntxMenu(void){
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
	//set up context callbacks
	setDefaultClbcks();
 800359c:	f7ff ffd2 	bl	8003544 <setDefaultClbcks>
	isCntxOpen = 1;
 80035a0:	4b02      	ldr	r3, [pc, #8]	; (80035ac <showCntxMenu+0x14>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200035d5 	.word	0x200035d5

080035b0 <hideCntxMenu>:
void hideCntxMenu(void){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 80035b4:	f7fe f90a 	bl	80017cc <resetButtonHandlers>
	(*prevClbcks)();
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <hideCntxMenu+0x18>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4798      	blx	r3
	isCntxOpen = 0;
 80035be:	4b03      	ldr	r3, [pc, #12]	; (80035cc <hideCntxMenu+0x1c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
}
 80035c4:	bf00      	nop
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	200035d8 	.word	0x200035d8
 80035cc:	200035d5 	.word	0x200035d5

080035d0 <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <enableCntxMenu+0xc0>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d054      	beq.n	8003688 <enableCntxMenu+0xb8>
//		clear rect
		lcdRect(0, 200, 10, 230, 0);
 80035de:	2300      	movs	r3, #0
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	23e6      	movs	r3, #230	; 0xe6
 80035e4:	220a      	movs	r2, #10
 80035e6:	21c8      	movs	r1, #200	; 0xc8
 80035e8:	2000      	movs	r0, #0
 80035ea:	f7fe ff27 	bl	800243c <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 80035ee:	2301      	movs	r3, #1
 80035f0:	2206      	movs	r2, #6
 80035f2:	21c8      	movs	r1, #200	; 0xc8
 80035f4:	2000      	movs	r0, #0
 80035f6:	f7fe fde5 	bl	80021c4 <lcdHLine>
		lcdHLine(0, 200, 231, 1);
 80035fa:	2301      	movs	r3, #1
 80035fc:	22e7      	movs	r2, #231	; 0xe7
 80035fe:	21c8      	movs	r1, #200	; 0xc8
 8003600:	2000      	movs	r0, #0
 8003602:	f7fe fddf 	bl	80021c4 <lcdHLine>
//		create list
		char item[30] = {0};
 8003606:	2300      	movs	r3, #0
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
 8003618:	615a      	str	r2, [r3, #20]
 800361a:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e018      	b.n	8003654 <enableCntxMenu+0x84>
			sprintf(&item, ContextActions[i]->name);
 8003622:	7ffb      	ldrb	r3, [r7, #31]
 8003624:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <enableCntxMenu+0xc4>)
 8003626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362a:	461a      	mov	r2, r3
 800362c:	463b      	mov	r3, r7
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f006 fbcb 	bl	8009dcc <siprintf>
			lcdPutStr(5, 10+(*zektonSmallFont.font_Height)*i, item, zektonSmallFont);
 8003636:	221b      	movs	r2, #27
 8003638:	7ffb      	ldrb	r3, [r7, #31]
 800363a:	fb13 f302 	smulbb	r3, r3, r2
 800363e:	b2db      	uxtb	r3, r3
 8003640:	330a      	adds	r3, #10
 8003642:	b2d9      	uxtb	r1, r3
 8003644:	463a      	mov	r2, r7
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <enableCntxMenu+0xc8>)
 8003648:	2005      	movs	r0, #5
 800364a:	f7fe fd8d 	bl	8002168 <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 800364e:	7ffb      	ldrb	r3, [r7, #31]
 8003650:	3301      	adds	r3, #1
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <enableCntxMenu+0xcc>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	7ffa      	ldrb	r2, [r7, #31]
 800365a:	429a      	cmp	r2, r3
 800365c:	d3e1      	bcc.n	8003622 <enableCntxMenu+0x52>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*zektonSmallFont.font_Height)*cntxPosition, 33+(*zektonSmallFont.font_Height)*cntxPosition, 2);
 800365e:	231b      	movs	r3, #27
 8003660:	461a      	mov	r2, r3
 8003662:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <enableCntxMenu+0xd0>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	fb02 f303 	mul.w	r3, r2, r3
 800366a:	f103 0208 	add.w	r2, r3, #8
 800366e:	231b      	movs	r3, #27
 8003670:	4619      	mov	r1, r3
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <enableCntxMenu+0xd0>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	3321      	adds	r3, #33	; 0x21
 800367c:	2102      	movs	r1, #2
 800367e:	9100      	str	r1, [sp, #0]
 8003680:	21c8      	movs	r1, #200	; 0xc8
 8003682:	2000      	movs	r0, #0
 8003684:	f7fe feda 	bl	800243c <lcdRect>

	}
}
 8003688:	bf00      	nop
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200035d5 	.word	0x200035d5
 8003694:	20000174 	.word	0x20000174
 8003698:	0801105c 	.word	0x0801105c
 800369c:	20000170 	.word	0x20000170
 80036a0:	200035d6 	.word	0x200035d6

080036a4 <setDefaultClbcks>:

#include "gpsModule.h"
#include "font13.h"
#include "digits5x9.h"

static void setDefaultClbcks(void){
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <setDefaultClbcks+0x1c>)
 80036aa:	4a06      	ldr	r2, [pc, #24]	; (80036c4 <setDefaultClbcks+0x20>)
 80036ac:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <setDefaultClbcks+0x24>)
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <setDefaultClbcks+0x28>)
 80036b2:	611a      	str	r2, [r3, #16]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	200003c8 	.word	0x200003c8
 80036c4:	08001cfd 	.word	0x08001cfd
 80036c8:	20000410 	.word	0x20000410
 80036cc:	08001d0d 	.word	0x08001d0d

080036d0 <gpsSetup>:

void gpsSetup(void){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80036d4:	f7ff ffe6 	bl	80036a4 <setDefaultClbcks>

}
 80036d8:	bf00      	nop
 80036da:	bd80      	pop	{r7, pc}

080036dc <gpsMain>:

void gpsMain(void){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 80036e2:	2300      	movs	r3, #0
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
 80036f4:	615a      	str	r2, [r3, #20]
 80036f6:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, "GPS will be shown");
 80036f8:	463b      	mov	r3, r7
 80036fa:	4907      	ldr	r1, [pc, #28]	; (8003718 <gpsMain+0x3c>)
 80036fc:	4618      	mov	r0, r3
 80036fe:	f006 fb65 	bl	8009dcc <siprintf>
	lcdPutStr(0, 0, tempStr, font13);
 8003702:	463a      	mov	r2, r7
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <gpsMain+0x40>)
 8003706:	2100      	movs	r1, #0
 8003708:	2000      	movs	r0, #0
 800370a:	f7fe fd2d 	bl	8002168 <lcdPutStr>
}
 800370e:	bf00      	nop
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	0800d184 	.word	0x0800d184
 800371c:	08012ec4 	.word	0x08012ec4

08003720 <prevPage>:
#include "fonts/ocrFont.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8003724:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <prevPage+0x30>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d006      	beq.n	800373a <prevPage+0x1a>
		currentPage--;
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <prevPage+0x30>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	3b01      	subs	r3, #1
 8003732:	b2da      	uxtb	r2, r3
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <prevPage+0x30>)
 8003736:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 8003738:	e005      	b.n	8003746 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <prevPage+0x34>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	3b01      	subs	r3, #1
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4b03      	ldr	r3, [pc, #12]	; (8003750 <prevPage+0x30>)
 8003744:	701a      	strb	r2, [r3, #0]
}
 8003746:	bf00      	nop
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	200035dc 	.word	0x200035dc
 8003754:	20000171 	.word	0x20000171

08003758 <nextPage>:
void nextPage(void){
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <nextPage+0x34>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <nextPage+0x38>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	3b01      	subs	r3, #1
 8003768:	429a      	cmp	r2, r3
 800376a:	da06      	bge.n	800377a <nextPage+0x22>
		currentPage++;
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <nextPage+0x34>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	b2da      	uxtb	r2, r3
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <nextPage+0x34>)
 8003776:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 8003778:	e002      	b.n	8003780 <nextPage+0x28>
		currentPage=0;
 800377a:	4b04      	ldr	r3, [pc, #16]	; (800378c <nextPage+0x34>)
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	200035dc 	.word	0x200035dc
 8003790:	20000171 	.word	0x20000171

08003794 <showPage1>:

void showPage1(void){
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800379a:	2300      	movs	r3, #0
 800379c:	623b      	str	r3, [r7, #32]
 800379e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	609a      	str	r2, [r3, #8]
 80037aa:	60da      	str	r2, [r3, #12]
 80037ac:	611a      	str	r2, [r3, #16]
 80037ae:	615a      	str	r2, [r3, #20]
 80037b0:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 80037b2:	2300      	movs	r3, #0
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
 80037c4:	615a      	str	r2, [r3, #20]
 80037c6:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d%02d", RtcTime.Hours, RtcTime.Minutes);
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <showPage1+0x7c>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <showPage1+0x7c>)
 80037d0:	785b      	ldrb	r3, [r3, #1]
 80037d2:	4638      	mov	r0, r7
 80037d4:	490f      	ldr	r1, [pc, #60]	; (8003814 <showPage1+0x80>)
 80037d6:	f006 faf9 	bl	8009dcc <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		sprintf(&fracStr, "%02d", RtcTime.Seconds);
 80037da:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <showPage1+0x7c>)
 80037dc:	789b      	ldrb	r3, [r3, #2]
 80037de:	461a      	mov	r2, r3
 80037e0:	f107 0320 	add.w	r3, r7, #32
 80037e4:	490c      	ldr	r1, [pc, #48]	; (8003818 <showPage1+0x84>)
 80037e6:	4618      	mov	r0, r3
 80037e8:	f006 faf0 	bl	8009dcc <siprintf>
		lcdPutStr(0, 0, timeStr, bigDigitsLarabie);
 80037ec:	463a      	mov	r2, r7
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <showPage1+0x88>)
 80037f0:	2100      	movs	r1, #0
 80037f2:	2000      	movs	r0, #0
 80037f4:	f7fe fcb8 	bl	8002168 <lcdPutStr>
		lcdPutStr(300, 0, fracStr, fontLarabieMedium);
 80037f8:	f107 0220 	add.w	r2, r7, #32
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <showPage1+0x8c>)
 80037fe:	2100      	movs	r1, #0
 8003800:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003804:	f7fe fcb0 	bl	8002168 <lcdPutStr>
}
 8003808:	bf00      	nop
 800380a:	3740      	adds	r7, #64	; 0x40
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	200033dc 	.word	0x200033dc
 8003814:	0800d198 	.word	0x0800d198
 8003818:	0800d1a4 	.word	0x0800d1a4
 800381c:	08014f7c 	.word	0x08014f7c
 8003820:	08019098 	.word	0x08019098

08003824 <showPage2>:
void showPage2(void){
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800382a:	2300      	movs	r3, #0
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	1d3b      	adds	r3, r7, #4
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
 800383c:	615a      	str	r2, [r3, #20]
 800383e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 2: STW");
 8003840:	463b      	mov	r3, r7
 8003842:	4907      	ldr	r1, [pc, #28]	; (8003860 <showPage2+0x3c>)
 8003844:	4618      	mov	r0, r3
 8003846:	f006 fac1 	bl	8009dcc <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 800384a:	463a      	mov	r2, r7
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <showPage2+0x40>)
 800384e:	2100      	movs	r1, #0
 8003850:	2000      	movs	r0, #0
 8003852:	f7fe fc89 	bl	8002168 <lcdPutStr>
}
 8003856:	bf00      	nop
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	0800d1ac 	.word	0x0800d1ac
 8003864:	08019098 	.word	0x08019098

08003868 <showPage3>:
void showPage3(void){
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800386e:	2300      	movs	r3, #0
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
 8003880:	615a      	str	r2, [r3, #20]
 8003882:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 8003884:	463b      	mov	r3, r7
 8003886:	4907      	ldr	r1, [pc, #28]	; (80038a4 <showPage3+0x3c>)
 8003888:	4618      	mov	r0, r3
 800388a:	f006 fa9f 	bl	8009dcc <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 800388e:	463a      	mov	r2, r7
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <showPage3+0x40>)
 8003892:	2100      	movs	r1, #0
 8003894:	2000      	movs	r0, #0
 8003896:	f7fe fc67 	bl	8002168 <lcdPutStr>
}
 800389a:	bf00      	nop
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	0800d1b8 	.word	0x0800d1b8
 80038a8:	08019098 	.word	0x08019098

080038ac <showPage4>:
void showPage4(void){
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80038b2:	2300      	movs	r3, #0
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	1d3b      	adds	r3, r7, #4
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	611a      	str	r2, [r3, #16]
 80038c4:	615a      	str	r2, [r3, #20]
 80038c6:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 80038c8:	463b      	mov	r3, r7
 80038ca:	4907      	ldr	r1, [pc, #28]	; (80038e8 <showPage4+0x3c>)
 80038cc:	4618      	mov	r0, r3
 80038ce:	f006 fa7d 	bl	8009dcc <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 80038d2:	463a      	mov	r2, r7
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <showPage4+0x40>)
 80038d6:	2100      	movs	r1, #0
 80038d8:	2000      	movs	r0, #0
 80038da:	f7fe fc45 	bl	8002168 <lcdPutStr>
}
 80038de:	bf00      	nop
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	0800d1c4 	.word	0x0800d1c4
 80038ec:	08019098 	.word	0x08019098

080038f0 <showPage5>:
void showPage5(void){
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80038f6:	2300      	movs	r3, #0
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	1d3b      	adds	r3, r7, #4
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	611a      	str	r2, [r3, #16]
 8003908:	615a      	str	r2, [r3, #20]
 800390a:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 5: WRLD");
 800390c:	463b      	mov	r3, r7
 800390e:	4907      	ldr	r1, [pc, #28]	; (800392c <showPage5+0x3c>)
 8003910:	4618      	mov	r0, r3
 8003912:	f006 fa5b 	bl	8009dcc <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 8003916:	463a      	mov	r2, r7
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <showPage5+0x40>)
 800391a:	2100      	movs	r1, #0
 800391c:	2000      	movs	r0, #0
 800391e:	f7fe fc23 	bl	8002168 <lcdPutStr>
}
 8003922:	bf00      	nop
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	0800d1d0 	.word	0x0800d1d0
 8003930:	08019098 	.word	0x08019098

08003934 <showPage6>:
void showPage6(void){
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800393a:	2300      	movs	r3, #0
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]
 800394c:	615a      	str	r2, [r3, #20]
 800394e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 6: DLT");
 8003950:	463b      	mov	r3, r7
 8003952:	4907      	ldr	r1, [pc, #28]	; (8003970 <showPage6+0x3c>)
 8003954:	4618      	mov	r0, r3
 8003956:	f006 fa39 	bl	8009dcc <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 800395a:	463a      	mov	r2, r7
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <showPage6+0x40>)
 800395e:	2100      	movs	r1, #0
 8003960:	2000      	movs	r0, #0
 8003962:	f7fe fc01 	bl	8002168 <lcdPutStr>
}
 8003966:	bf00      	nop
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	0800d1e0 	.word	0x0800d1e0
 8003974:	08019098 	.word	0x08019098

08003978 <showPage>:

void showPage(uint8_t pageNum){
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	2b05      	cmp	r3, #5
 8003986:	d821      	bhi.n	80039cc <showPage+0x54>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <showPage+0x18>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039a9 	.word	0x080039a9
 8003994:	080039af 	.word	0x080039af
 8003998:	080039b5 	.word	0x080039b5
 800399c:	080039bb 	.word	0x080039bb
 80039a0:	080039c1 	.word	0x080039c1
 80039a4:	080039c7 	.word	0x080039c7
	case 0:
		showPage1();
 80039a8:	f7ff fef4 	bl	8003794 <showPage1>
		break;
 80039ac:	e00e      	b.n	80039cc <showPage+0x54>
	case 1:
		showPage2();
 80039ae:	f7ff ff39 	bl	8003824 <showPage2>
		break;
 80039b2:	e00b      	b.n	80039cc <showPage+0x54>
	case 2:
		showPage3();
 80039b4:	f7ff ff58 	bl	8003868 <showPage3>
		break;
 80039b8:	e008      	b.n	80039cc <showPage+0x54>
	case 3:
		showPage4();
 80039ba:	f7ff ff77 	bl	80038ac <showPage4>
		break;
 80039be:	e005      	b.n	80039cc <showPage+0x54>
	case 4:
		showPage5();
 80039c0:	f7ff ff96 	bl	80038f0 <showPage5>
		break;
 80039c4:	e002      	b.n	80039cc <showPage+0x54>
	case 5:
		showPage6();
 80039c6:	f7ff ffb5 	bl	8003934 <showPage6>
		break;
 80039ca:	bf00      	nop
	}
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 80039d8:	4b08      	ldr	r3, [pc, #32]	; (80039fc <setDefaultClbcks+0x28>)
 80039da:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <setDefaultClbcks+0x2c>)
 80039dc:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <setDefaultClbcks+0x30>)
 80039e0:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <setDefaultClbcks+0x34>)
 80039e2:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <setDefaultClbcks+0x38>)
 80039e6:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <setDefaultClbcks+0x3c>)
 80039e8:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <setDefaultClbcks+0x40>)
 80039ec:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <setDefaultClbcks+0x44>)
 80039ee:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	200003c8 	.word	0x200003c8
 8003a00:	08001cfd 	.word	0x08001cfd
 8003a04:	20000410 	.word	0x20000410
 8003a08:	08001d0d 	.word	0x08001d0d
 8003a0c:	2000047c 	.word	0x2000047c
 8003a10:	08003721 	.word	0x08003721
 8003a14:	20000434 	.word	0x20000434
 8003a18:	08003759 	.word	0x08003759

08003a1c <settingsSetup>:


void settingsSetup(void){
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8003a20:	f7ff ffd8 	bl	80039d4 <setDefaultClbcks>
}
 8003a24:	bf00      	nop
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <settingsMain>:

void settingsMain(void){
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8003a2e:	2300      	movs	r3, #0
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	1d3b      	adds	r3, r7, #4
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	611a      	str	r2, [r3, #16]
 8003a40:	615a      	str	r2, [r3, #20]
 8003a42:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, "Settings will be shown");
 8003a44:	463b      	mov	r3, r7
 8003a46:	4909      	ldr	r1, [pc, #36]	; (8003a6c <settingsMain+0x44>)
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f006 f9bf 	bl	8009dcc <siprintf>
	lcdPutStr(0, 0, tempStr, font13);
 8003a4e:	463a      	mov	r2, r7
 8003a50:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <settingsMain+0x48>)
 8003a52:	2100      	movs	r1, #0
 8003a54:	2000      	movs	r0, #0
 8003a56:	f7fe fb87 	bl	8002168 <lcdPutStr>
	showPage(currentPage);
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <settingsMain+0x4c>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff ff8a 	bl	8003978 <showPage>

}
 8003a64:	bf00      	nop
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	0800d1ec 	.word	0x0800d1ec
 8003a70:	08013f20 	.word	0x08013f20
 8003a74:	200035dc 	.word	0x200035dc

08003a78 <startStopwatch>:
#include "fonts/zekton24.h"

#include <fonts/zekton45.h>
#include "stopwatchModule.h"

void startStopwatch(){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	stwStart();
 8003a7c:	f7fe fff6 	bl	8002a6c <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <startStopwatch+0x18>)
 8003a82:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <startStopwatch+0x1c>)
 8003a84:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 8003a86:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <startStopwatch+0x20>)
 8003a88:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <startStopwatch+0x24>)
 8003a8a:	611a      	str	r2, [r3, #16]
}
 8003a8c:	bf00      	nop
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	200003ec 	.word	0x200003ec
 8003a94:	08003aa1 	.word	0x08003aa1
 8003a98:	20000458 	.word	0x20000458
 8003a9c:	08003ae1 	.word	0x08003ae1

08003aa0 <stopStopwatch>:
void stopStopwatch(){
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
	stwStop();
 8003aa4:	f7ff f806 	bl	8002ab4 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <stopStopwatch+0x18>)
 8003aaa:	4a04      	ldr	r2, [pc, #16]	; (8003abc <stopStopwatch+0x1c>)
 8003aac:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <stopStopwatch+0x20>)
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <stopStopwatch+0x24>)
 8003ab2:	611a      	str	r2, [r3, #16]
}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200003ec 	.word	0x200003ec
 8003abc:	08003a79 	.word	0x08003a79
 8003ac0:	20000458 	.word	0x20000458
 8003ac4:	08003ac9 	.word	0x08003ac9

08003ac8 <resetStopwatch>:
void resetStopwatch(){
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
	stwClear();
 8003acc:	f7ff f800 	bl	8002ad0 <stwClear>
	stwT.clear();
 8003ad0:	4b02      	ldr	r3, [pc, #8]	; (8003adc <resetStopwatch+0x14>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4798      	blx	r3
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000138 	.word	0x20000138

08003ae0 <saveStopwatch>:
void saveStopwatch(){
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
	stwSave();
 8003ae4:	f7ff f802 	bl	8002aec <stwSave>
}
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}

08003aec <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
//	btn_B3.onSingleLongPressHandler = &returnToMenu;
	btn_B3.onSinglePressHandler = &resetPos;
 8003af0:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <setDefaultClbcks+0x48>)
 8003af2:	4a11      	ldr	r2, [pc, #68]	; (8003b38 <setDefaultClbcks+0x4c>)
 8003af4:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <setDefaultClbcks+0x50>)
 8003af8:	4a11      	ldr	r2, [pc, #68]	; (8003b40 <setDefaultClbcks+0x54>)
 8003afa:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <setDefaultClbcks+0x58>)
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <setDefaultClbcks+0x5c>)
 8003b00:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <setDefaultClbcks+0x60>)
 8003b04:	78db      	ldrb	r3, [r3, #3]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d006      	beq.n	8003b1e <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <setDefaultClbcks+0x64>)
 8003b12:	4a10      	ldr	r2, [pc, #64]	; (8003b54 <setDefaultClbcks+0x68>)
 8003b14:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <setDefaultClbcks+0x6c>)
 8003b18:	4a10      	ldr	r2, [pc, #64]	; (8003b5c <setDefaultClbcks+0x70>)
 8003b1a:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8003b1c:	e005      	b.n	8003b2a <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <setDefaultClbcks+0x64>)
 8003b20:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <setDefaultClbcks+0x74>)
 8003b22:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <setDefaultClbcks+0x6c>)
 8003b26:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <setDefaultClbcks+0x78>)
 8003b28:	611a      	str	r2, [r3, #16]
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	2000047c 	.word	0x2000047c
 8003b38:	08001d1d 	.word	0x08001d1d
 8003b3c:	200003c8 	.word	0x200003c8
 8003b40:	08001cfd 	.word	0x08001cfd
 8003b44:	20000410 	.word	0x20000410
 8003b48:	08001d0d 	.word	0x08001d0d
 8003b4c:	2000346c 	.word	0x2000346c
 8003b50:	200003ec 	.word	0x200003ec
 8003b54:	08003aa1 	.word	0x08003aa1
 8003b58:	20000458 	.word	0x20000458
 8003b5c:	08003ae1 	.word	0x08003ae1
 8003b60:	08003a79 	.word	0x08003a79
 8003b64:	08003ac9 	.word	0x08003ac9

08003b68 <convertTicks>:

struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	099b      	lsrs	r3, r3, #6
 8003b74:	4a22      	ldr	r2, [pc, #136]	; (8003c00 <convertTicks+0x98>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	0993      	lsrs	r3, r2, #6
 8003b84:	491e      	ldr	r1, [pc, #120]	; (8003c00 <convertTicks+0x98>)
 8003b86:	fba1 1303 	umull	r1, r3, r1, r3
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	491d      	ldr	r1, [pc, #116]	; (8003c04 <convertTicks+0x9c>)
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <convertTicks+0xa0>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <convertTicks+0xa0>)
 8003ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba8:	09db      	lsrs	r3, r3, #7
 8003baa:	f241 7170 	movw	r1, #6000	; 0x1770
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <convertTicks+0xa4>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	72bb      	strb	r3, [r7, #10]
		ticks%100
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <convertTicks+0xa4>)
 8003bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	2164      	movs	r1, #100	; 0x64
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	7b3a      	ldrb	r2, [r7, #12]
 8003bde:	f362 0307 	bfi	r3, r2, #0, #8
 8003be2:	7b7a      	ldrb	r2, [r7, #13]
 8003be4:	f362 230f 	bfi	r3, r2, #8, #8
 8003be8:	7bba      	ldrb	r2, [r7, #14]
 8003bea:	f362 4317 	bfi	r3, r2, #16, #8
 8003bee:	7bfa      	ldrb	r2, [r7, #15]
 8003bf0:	f362 631f 	bfi	r3, r2, #24, #8
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	002e9a77 	.word	0x002e9a77
 8003c04:	00057e40 	.word	0x00057e40
 8003c08:	057619f1 	.word	0x057619f1
 8003c0c:	51eb851f 	.word	0x51eb851f

08003c10 <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 8003c1a:	793b      	ldrb	r3, [r7, #4]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	797b      	ldrb	r3, [r7, #5]
 8003c20:	4618      	mov	r0, r3
 8003c22:	79bb      	ldrb	r3, [r7, #6]
 8003c24:	79fa      	ldrb	r2, [r7, #7]
 8003c26:	9201      	str	r2, [sp, #4]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	460a      	mov	r2, r1
 8003c2e:	4904      	ldr	r1, [pc, #16]	; (8003c40 <stwString+0x30>)
 8003c30:	6838      	ldr	r0, [r7, #0]
 8003c32:	f006 f8cb 	bl	8009dcc <siprintf>
	return str;
 8003c36:	683b      	ldr	r3, [r7, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	0800d204 	.word	0x0800d204

08003c44 <updateStopwatch>:
void updateStopwatch(void){
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
	stw_val.hours = stwS.cnt/(100*60*60);
 8003c48:	4b2a      	ldr	r3, [pc, #168]	; (8003cf4 <updateStopwatch+0xb0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8003c50:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <updateStopwatch+0xb4>)
 8003c52:	fb82 1203 	smull	r1, r2, r2, r3
 8003c56:	1452      	asrs	r2, r2, #17
 8003c58:	17db      	asrs	r3, r3, #31
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <updateStopwatch+0xb8>)
 8003c60:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <updateStopwatch+0xb0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4b22      	ldr	r3, [pc, #136]	; (8003cf8 <updateStopwatch+0xb4>)
 8003c6e:	fb83 1302 	smull	r1, r3, r3, r2
 8003c72:	1459      	asrs	r1, r3, #17
 8003c74:	17d3      	asrs	r3, r2, #31
 8003c76:	1acb      	subs	r3, r1, r3
 8003c78:	4921      	ldr	r1, [pc, #132]	; (8003d00 <updateStopwatch+0xbc>)
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	4a20      	ldr	r2, [pc, #128]	; (8003d04 <updateStopwatch+0xc0>)
 8003c82:	fb82 1203 	smull	r1, r2, r2, r3
 8003c86:	11d2      	asrs	r2, r2, #7
 8003c88:	17db      	asrs	r3, r3, #31
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <updateStopwatch+0xb8>)
 8003c90:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%(60*100)/(100);
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <updateStopwatch+0xb0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <updateStopwatch+0xc0>)
 8003c9e:	fb83 1302 	smull	r1, r3, r3, r2
 8003ca2:	11d9      	asrs	r1, r3, #7
 8003ca4:	17d3      	asrs	r3, r2, #31
 8003ca6:	1acb      	subs	r3, r1, r3
 8003ca8:	f241 7170 	movw	r1, #6000	; 0x1770
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <updateStopwatch+0xc4>)
 8003cb4:	fb82 1203 	smull	r1, r2, r2, r3
 8003cb8:	1152      	asrs	r2, r2, #5
 8003cba:	17db      	asrs	r3, r3, #31
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <updateStopwatch+0xb8>)
 8003cc2:	709a      	strb	r2, [r3, #2]
	stw_val.csec = stwS.cnt%100;
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <updateStopwatch+0xb0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <updateStopwatch+0xc4>)
 8003cd0:	fb83 1302 	smull	r1, r3, r3, r2
 8003cd4:	1159      	asrs	r1, r3, #5
 8003cd6:	17d3      	asrs	r3, r2, #31
 8003cd8:	1acb      	subs	r3, r1, r3
 8003cda:	2164      	movs	r1, #100	; 0x64
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <updateStopwatch+0xb8>)
 8003ce6:	70da      	strb	r2, [r3, #3]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	2000346c 	.word	0x2000346c
 8003cf8:	5d34edef 	.word	0x5d34edef
 8003cfc:	200035e0 	.word	0x200035e0
 8003d00:	00057e40 	.word	0x00057e40
 8003d04:	057619f1 	.word	0x057619f1
 8003d08:	51eb851f 	.word	0x51eb851f

08003d0c <stwSetup>:

void stwSetup(void){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8003d10:	f7ff feec 	bl	8003aec <setDefaultClbcks>
}
 8003d14:	bf00      	nop
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 8003d18:	b5b0      	push	{r4, r5, r7, lr}
 8003d1a:	b098      	sub	sp, #96	; 0x60
 8003d1c:	af02      	add	r7, sp, #8
	char tempStr[4] = {0};
 8003d1e:	2300      	movs	r3, #0
 8003d20:	647b      	str	r3, [r7, #68]	; 0x44
	char funcArr[6][4] = {"STW", "TMR", "WRT", "TRK", "LFT", "SLT"};
 8003d22:	4ba8      	ldr	r3, [pc, #672]	; (8003fc4 <stwMain+0x2ac>)
 8003d24:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003d28:	461d      	mov	r5, r3
 8003d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003d32:	e884 0003 	stmia.w	r4, {r0, r1}
	for(uint8_t i = 0; i < 6; i++){
 8003d36:	2300      	movs	r3, #0
 8003d38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003d3c:	e03f      	b.n	8003dbe <stwMain+0xa6>
		sprintf(&tempStr, funcArr[i]);
 8003d3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d42:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	441a      	add	r2, r3
 8003d4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f006 f83b 	bl	8009dcc <siprintf>
		if(i == 0){
 8003d56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d115      	bne.n	8003d8a <stwMain+0x72>
			lcdPutStr(10+50*i, 10, tempStr, zecton12bfont);
 8003d5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	0092      	lsls	r2, r2, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	0091      	lsls	r1, r2, #2
 8003d6e:	461a      	mov	r2, r3
 8003d70:	460b      	mov	r3, r1
 8003d72:	4413      	add	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	330a      	adds	r3, #10
 8003d7a:	b298      	uxth	r0, r3
 8003d7c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003d80:	4b91      	ldr	r3, [pc, #580]	; (8003fc8 <stwMain+0x2b0>)
 8003d82:	210a      	movs	r1, #10
 8003d84:	f7fe f9f0 	bl	8002168 <lcdPutStr>
 8003d88:	e014      	b.n	8003db4 <stwMain+0x9c>
		} else {
			lcdPutStr(10+50*i, 10, tempStr, zecton12font);
 8003d8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	0092      	lsls	r2, r2, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	461a      	mov	r2, r3
 8003d98:	0091      	lsls	r1, r2, #2
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4413      	add	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	330a      	adds	r3, #10
 8003da6:	b298      	uxth	r0, r3
 8003da8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003dac:	4b87      	ldr	r3, [pc, #540]	; (8003fcc <stwMain+0x2b4>)
 8003dae:	210a      	movs	r1, #10
 8003db0:	f7fe f9da 	bl	8002168 <lcdPutStr>
	for(uint8_t i = 0; i < 6; i++){
 8003db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003db8:	3301      	adds	r3, #1
 8003dba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003dbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003dc2:	2b05      	cmp	r3, #5
 8003dc4:	d9bb      	bls.n	8003d3e <stwMain+0x26>
		}
	}

	char guiPos[6] = {0};
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dca:	2300      	movs	r3, #0
 8003dcc:	853b      	strh	r3, [r7, #40]	; 0x28
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8003dce:	4b80      	ldr	r3, [pc, #512]	; (8003fd0 <stwMain+0x2b8>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4b7e      	ldr	r3, [pc, #504]	; (8003fd0 <stwMain+0x2b8>)
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ddc:	497d      	ldr	r1, [pc, #500]	; (8003fd4 <stwMain+0x2bc>)
 8003dde:	f005 fff5 	bl	8009dcc <siprintf>
	lcdPutStr(400 - 10 - (*zecton12font.font_Width) * strlen(guiPos), 10, guiPos, zecton12font);
 8003de2:	2309      	movs	r3, #9
 8003de4:	b29c      	uxth	r4, r3
 8003de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc fa00 	bl	80001f0 <strlen>
 8003df0:	4603      	mov	r3, r0
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	fb14 f303 	smulbb	r3, r4, r3
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8003dfe:	b298      	uxth	r0, r3
 8003e00:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003e04:	4b71      	ldr	r3, [pc, #452]	; (8003fcc <stwMain+0x2b4>)
 8003e06:	210a      	movs	r1, #10
 8003e08:	f7fe f9ae 	bl	8002168 <lcdPutStr>

	updateStopwatch();
 8003e0c:	f7ff ff1a 	bl	8003c44 <updateStopwatch>
	char tempStr2[30] = {0};
 8003e10:	2300      	movs	r3, #0
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	f107 0308 	add.w	r3, r7, #8
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	611a      	str	r2, [r3, #16]
 8003e24:	615a      	str	r2, [r3, #20]
 8003e26:	831a      	strh	r2, [r3, #24]
	if(stw_val.hours != 0){
 8003e28:	4b6b      	ldr	r3, [pc, #428]	; (8003fd8 <stwMain+0x2c0>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <stwMain+0x128>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 8003e30:	4b69      	ldr	r3, [pc, #420]	; (8003fd8 <stwMain+0x2c0>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	1d3b      	adds	r3, r7, #4
 8003e38:	4968      	ldr	r1, [pc, #416]	; (8003fdc <stwMain+0x2c4>)
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f005 ffc6 	bl	8009dcc <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zektonSmallFont);
 8003e40:	1d3a      	adds	r2, r7, #4
 8003e42:	4b67      	ldr	r3, [pc, #412]	; (8003fe0 <stwMain+0x2c8>)
 8003e44:	215f      	movs	r1, #95	; 0x5f
 8003e46:	2014      	movs	r0, #20
 8003e48:	f7fe f98e 	bl	8002168 <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8003e4c:	4b62      	ldr	r3, [pc, #392]	; (8003fd8 <stwMain+0x2c0>)
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b61      	ldr	r3, [pc, #388]	; (8003fd8 <stwMain+0x2c0>)
 8003e54:	789b      	ldrb	r3, [r3, #2]
 8003e56:	4619      	mov	r1, r3
 8003e58:	4b5f      	ldr	r3, [pc, #380]	; (8003fd8 <stwMain+0x2c0>)
 8003e5a:	78db      	ldrb	r3, [r3, #3]
 8003e5c:	1d38      	adds	r0, r7, #4
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	460b      	mov	r3, r1
 8003e62:	4960      	ldr	r1, [pc, #384]	; (8003fe4 <stwMain+0x2cc>)
 8003e64:	f005 ffb2 	bl	8009dcc <siprintf>
	lcdPutStr(380-(*(zecton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zecton45font);
 8003e68:	2322      	movs	r3, #34	; 0x22
 8003e6a:	b29c      	uxth	r4, r3
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc f9be 	bl	80001f0 <strlen>
 8003e74:	4603      	mov	r3, r0
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	fb14 f303 	smulbb	r3, r4, r3
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8003e82:	b298      	uxth	r0, r3
 8003e84:	1d3a      	adds	r2, r7, #4
 8003e86:	4b58      	ldr	r3, [pc, #352]	; (8003fe8 <stwMain+0x2d0>)
 8003e88:	214c      	movs	r1, #76	; 0x4c
 8003e8a:	f7fe f96d 	bl	8002168 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003e94:	e08b      	b.n	8003fae <stwMain+0x296>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 8003e96:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003e9a:	4a54      	ldr	r2, [pc, #336]	; (8003fec <stwMain+0x2d4>)
 8003e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d07f      	beq.n	8003fa4 <stwMain+0x28c>
			sprintf(&tempStr2, "Lap %d:", i+1);
 8003ea4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	4950      	ldr	r1, [pc, #320]	; (8003ff0 <stwMain+0x2d8>)
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f005 ff8c 	bl	8009dcc <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, zecton12font);
 8003eb4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	3b7e      	subs	r3, #126	; 0x7e
 8003ebe:	b2d9      	uxtb	r1, r3
 8003ec0:	1d3a      	adds	r2, r7, #4
 8003ec2:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <stwMain+0x2b4>)
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7fe f94f 	bl	8002168 <lcdPutStr>
			if(i>0){
 8003eca:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d022      	beq.n	8003f18 <stwMain+0x200>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), zecton12font);
 8003ed2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	3b7e      	subs	r3, #126	; 0x7e
 8003edc:	b2dc      	uxtb	r4, r3
 8003ede:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003ee2:	4a42      	ldr	r2, [pc, #264]	; (8003fec <stwMain+0x2d4>)
 8003ee4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ee8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003eec:	3b01      	subs	r3, #1
 8003eee:	493f      	ldr	r1, [pc, #252]	; (8003fec <stwMain+0x2d4>)
 8003ef0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fe36 	bl	8003b68 <convertTicks>
 8003efc:	4603      	mov	r3, r0
 8003efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	4619      	mov	r1, r3
 8003f04:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003f06:	f7ff fe83 	bl	8003c10 <stwString>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	4b2f      	ldr	r3, [pc, #188]	; (8003fcc <stwMain+0x2b4>)
 8003f0e:	4621      	mov	r1, r4
 8003f10:	2037      	movs	r0, #55	; 0x37
 8003f12:	f7fe f929 	bl	8002168 <lcdPutStr>
 8003f16:	e01a      	b.n	8003f4e <stwMain+0x236>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), zecton12font);
 8003f18:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	3b7e      	subs	r3, #126	; 0x7e
 8003f22:	b2dc      	uxtb	r4, r3
 8003f24:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003f28:	4a30      	ldr	r2, [pc, #192]	; (8003fec <stwMain+0x2d4>)
 8003f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fe1a 	bl	8003b68 <convertTicks>
 8003f34:	4603      	mov	r3, r0
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003f3e:	f7ff fe67 	bl	8003c10 <stwString>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <stwMain+0x2b4>)
 8003f46:	4621      	mov	r1, r4
 8003f48:	2037      	movs	r0, #55	; 0x37
 8003f4a:	f7fe f90d 	bl	8002168 <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	4928      	ldr	r1, [pc, #160]	; (8003ff4 <stwMain+0x2dc>)
 8003f52:	4618      	mov	r0, r3
 8003f54:	f005 ff3a 	bl	8009dcc <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, zecton12font);
 8003f58:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	3b7e      	subs	r3, #126	; 0x7e
 8003f62:	b2d9      	uxtb	r1, r3
 8003f64:	1d3a      	adds	r2, r7, #4
 8003f66:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <stwMain+0x2b4>)
 8003f68:	20a5      	movs	r0, #165	; 0xa5
 8003f6a:	f7fe f8fd 	bl	8002168 <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), zecton12font);
 8003f6e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	3b7e      	subs	r3, #126	; 0x7e
 8003f78:	b2dc      	uxtb	r4, r3
 8003f7a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003f7e:	4a1b      	ldr	r2, [pc, #108]	; (8003fec <stwMain+0x2d4>)
 8003f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fdef 	bl	8003b68 <convertTicks>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003f94:	f7ff fe3c 	bl	8003c10 <stwString>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <stwMain+0x2b4>)
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	20e1      	movs	r0, #225	; 0xe1
 8003fa0:	f7fe f8e2 	bl	8002168 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8003fa4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003fae:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	f67f af6f 	bls.w	8003e96 <stwMain+0x17e>

//	sprintf(&tempStr2, "%d", stwS.cnt);
//	lcdPutStr(0, 130, tempStr2, zecton45font);
//	sprintf(&tempStr2, "%d", stwS.state);
//	lcdPutStr(0, 184, tempStr2, zecton45font);
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	3758      	adds	r7, #88	; 0x58
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	0800d24c 	.word	0x0800d24c
 8003fc8:	0801f614 	.word	0x0801f614
 8003fcc:	0801eb8c 	.word	0x0801eb8c
 8003fd0:	200033dc 	.word	0x200033dc
 8003fd4:	0800d218 	.word	0x0800d218
 8003fd8:	200035e0 	.word	0x200035e0
 8003fdc:	0800d224 	.word	0x0800d224
 8003fe0:	0802009c 	.word	0x0802009c
 8003fe4:	0800d22c 	.word	0x0800d22c
 8003fe8:	08021f04 	.word	0x08021f04
 8003fec:	20000138 	.word	0x20000138
 8003ff0:	0800d23c 	.word	0x0800d23c
 8003ff4:	0800d244 	.word	0x0800d244

08003ff8 <setDefaultClbcks>:
#include "digits5x9.h"
#include "fonts/zekton24.h"
#include "fonts/zekton84.h"
#include <fonts/zekton45.h>

static void setDefaultClbcks(void){
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <setDefaultClbcks+0x20>)
 8003ffe:	4a07      	ldr	r2, [pc, #28]	; (800401c <setDefaultClbcks+0x24>)
 8004000:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <setDefaultClbcks+0x28>)
 8004004:	4a07      	ldr	r2, [pc, #28]	; (8004024 <setDefaultClbcks+0x2c>)
 8004006:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004008:	4b07      	ldr	r3, [pc, #28]	; (8004028 <setDefaultClbcks+0x30>)
 800400a:	4a08      	ldr	r2, [pc, #32]	; (800402c <setDefaultClbcks+0x34>)
 800400c:	611a      	str	r2, [r3, #16]
}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	20000458 	.word	0x20000458
 800401c:	08003599 	.word	0x08003599
 8004020:	200003c8 	.word	0x200003c8
 8004024:	08001cfd 	.word	0x08001cfd
 8004028:	20000410 	.word	0x20000410
 800402c:	08001d0d 	.word	0x08001d0d

08004030 <setTimeScreen>:

static void setTimeScreen(void){
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af02      	add	r7, sp, #8
	lcdRect(150, 300, 10, 230, 2);
 8004036:	2302      	movs	r3, #2
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	23e6      	movs	r3, #230	; 0xe6
 800403c:	220a      	movs	r2, #10
 800403e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004042:	2096      	movs	r0, #150	; 0x96
 8004044:	f7fe f9fa 	bl	800243c <lcdRect>
	RtcTime.Hours = 12;
 8004048:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <setTimeScreen+0x50>)
 800404a:	220c      	movs	r2, #12
 800404c:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = 34;
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <setTimeScreen+0x50>)
 8004050:	2222      	movs	r2, #34	; 0x22
 8004052:	705a      	strb	r2, [r3, #1]
	RtcTime.Seconds = 56;
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <setTimeScreen+0x50>)
 8004056:	2238      	movs	r2, #56	; 0x38
 8004058:	709a      	strb	r2, [r3, #2]
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <setTimeScreen+0x50>)
 800405c:	2200      	movs	r2, #0
 800405e:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <setTimeScreen+0x50>)
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8004066:	2200      	movs	r2, #0
 8004068:	4905      	ldr	r1, [pc, #20]	; (8004080 <setTimeScreen+0x50>)
 800406a:	4806      	ldr	r0, [pc, #24]	; (8004084 <setTimeScreen+0x54>)
 800406c:	f002 fcc8 	bl	8006a00 <HAL_RTC_SetTime>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <setTimeScreen+0x4a>
	{
	Error_Handler();
 8004076:	f7fe fb4d 	bl	8002714 <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
}
 800407a:	bf00      	nop
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	200033dc 	.word	0x200033dc
 8004084:	200033f4 	.word	0x200033f4

08004088 <faceSetup>:
const struct ContextAction action1 = {"Set time", &setTimeScreen};
const struct ContextAction action2 = {"Customize", &setTimeScreen};
const struct ContextAction action3 = {"Action 2", &setTimeScreen};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3};

void faceSetup(void){
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800408c:	f7ff ffb4 	bl	8003ff8 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 8004090:	4802      	ldr	r0, [pc, #8]	; (800409c <faceSetup+0x14>)
 8004092:	f7ff f9fb 	bl	800348c <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	08003ff9 	.word	0x08003ff9

080040a0 <faceMain>:

void faceMain(void){
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b0b9      	sub	sp, #228	; 0xe4
 80040a4:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 80040a6:	2300      	movs	r3, #0
 80040a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	611a      	str	r2, [r3, #16]
 80040bc:	615a      	str	r2, [r3, #20]
 80040be:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 80040c0:	4b80      	ldr	r3, [pc, #512]	; (80042c4 <faceMain+0x224>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc fa4f 	bl	8000568 <__aeabi_f2d>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80040d2:	497d      	ldr	r1, [pc, #500]	; (80042c8 <faceMain+0x228>)
 80040d4:	f005 fe7a 	bl	8009dcc <siprintf>
	lcdPutStr(35+(*(zektonSmallFont.font_Width)*(13-strlen(temperature))), 14, temperature, zektonSmallFont);
 80040d8:	2314      	movs	r3, #20
 80040da:	b29c      	uxth	r4, r3
 80040dc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fc f885 	bl	80001f0 <strlen>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f1c3 030d 	rsb	r3, r3, #13
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	fb14 f303 	smulbb	r3, r4, r3
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3323      	adds	r3, #35	; 0x23
 80040f6:	b298      	uxth	r0, r3
 80040f8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80040fc:	4b73      	ldr	r3, [pc, #460]	; (80042cc <faceMain+0x22c>)
 80040fe:	210e      	movs	r1, #14
 8004100:	f7fe f832 	bl	8002168 <lcdPutStr>
	char baroStr[30] = {0};
 8004104:	2300      	movs	r3, #0
 8004106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800410a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	60da      	str	r2, [r3, #12]
 8004118:	611a      	str	r2, [r3, #16]
 800411a:	615a      	str	r2, [r3, #20]
 800411c:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%04.1f hPa", ((float)bmpData.pressure/100));
 800411e:	4b69      	ldr	r3, [pc, #420]	; (80042c4 <faceMain+0x224>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80042d0 <faceMain+0x230>
 800412e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004132:	ee16 0a90 	vmov	r0, s13
 8004136:	f7fc fa17 	bl	8000568 <__aeabi_f2d>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8004142:	4964      	ldr	r1, [pc, #400]	; (80042d4 <faceMain+0x234>)
 8004144:	f005 fe42 	bl	8009dcc <siprintf>
	lcdPutStr(35+(*(zektonSmallFont.font_Width)*(13-strlen(baroStr))), 42, baroStr, zektonSmallFont);
 8004148:	2314      	movs	r3, #20
 800414a:	b29c      	uxth	r4, r3
 800414c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc f84d 	bl	80001f0 <strlen>
 8004156:	4603      	mov	r3, r0
 8004158:	f1c3 030d 	rsb	r3, r3, #13
 800415c:	b29b      	uxth	r3, r3
 800415e:	fb14 f303 	smulbb	r3, r4, r3
 8004162:	b29b      	uxth	r3, r3
 8004164:	3323      	adds	r3, #35	; 0x23
 8004166:	b298      	uxth	r0, r3
 8004168:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800416c:	4b57      	ldr	r3, [pc, #348]	; (80042cc <faceMain+0x22c>)
 800416e:	212a      	movs	r1, #42	; 0x2a
 8004170:	f7fd fffa 	bl	8002168 <lcdPutStr>

	char fracStr[30] = {0};
 8004174:	2300      	movs	r3, #0
 8004176:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800417a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	609a      	str	r2, [r3, #8]
 8004186:	60da      	str	r2, [r3, #12]
 8004188:	611a      	str	r2, [r3, #16]
 800418a:	615a      	str	r2, [r3, #20]
 800418c:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 800418e:	2300      	movs	r3, #0
 8004190:	663b      	str	r3, [r7, #96]	; 0x60
 8004192:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	609a      	str	r2, [r3, #8]
 800419e:	60da      	str	r2, [r3, #12]
 80041a0:	611a      	str	r2, [r3, #16]
 80041a2:	615a      	str	r2, [r3, #20]
 80041a4:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 80041a6:	2300      	movs	r3, #0
 80041a8:	643b      	str	r3, [r7, #64]	; 0x40
 80041aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	609a      	str	r2, [r3, #8]
 80041b6:	60da      	str	r2, [r3, #12]
 80041b8:	611a      	str	r2, [r3, #16]
 80041ba:	615a      	str	r2, [r3, #20]
 80041bc:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 80041be:	4b46      	ldr	r3, [pc, #280]	; (80042d8 <faceMain+0x238>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80041c8:	4944      	ldr	r1, [pc, #272]	; (80042dc <faceMain+0x23c>)
 80041ca:	4618      	mov	r0, r3
 80041cc:	f005 fdfe 	bl	8009dcc <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 80041d0:	4b41      	ldr	r3, [pc, #260]	; (80042d8 <faceMain+0x238>)
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	461a      	mov	r2, r3
 80041d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041da:	4940      	ldr	r1, [pc, #256]	; (80042dc <faceMain+0x23c>)
 80041dc:	4618      	mov	r0, r3
 80041de:	f005 fdf5 	bl	8009dcc <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 80041e2:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <faceMain+0x238>)
 80041e4:	789b      	ldrb	r3, [r3, #2]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80041ec:	493b      	ldr	r1, [pc, #236]	; (80042dc <faceMain+0x23c>)
 80041ee:	4618      	mov	r0, r3
 80041f0:	f005 fdec 	bl	8009dcc <siprintf>
	lcdPutStr(20, 76, timeStr, zecton84font);
 80041f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041f8:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <faceMain+0x240>)
 80041fa:	214c      	movs	r1, #76	; 0x4c
 80041fc:	2014      	movs	r0, #20
 80041fe:	f7fd ffb3 	bl	8002168 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zecton84font);
 8004202:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004206:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <faceMain+0x240>)
 8004208:	214c      	movs	r1, #76	; 0x4c
 800420a:	20aa      	movs	r0, #170	; 0xaa
 800420c:	f7fd ffac 	bl	8002168 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zecton45font);
 8004210:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004214:	4b33      	ldr	r3, [pc, #204]	; (80042e4 <faceMain+0x244>)
 8004216:	214c      	movs	r1, #76	; 0x4c
 8004218:	f240 103b 	movw	r0, #315	; 0x13b
 800421c:	f7fd ffa4 	bl	8002168 <lcdPutStr>

	char dateStr[30] = {0};
 8004220:	2300      	movs	r3, #0
 8004222:	623b      	str	r3, [r7, #32]
 8004224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	611a      	str	r2, [r3, #16]
 8004234:	615a      	str	r2, [r3, #20]
 8004236:	831a      	strh	r2, [r3, #24]
	sprintf(&dateStr, "20 september");
 8004238:	f107 0320 	add.w	r3, r7, #32
 800423c:	492a      	ldr	r1, [pc, #168]	; (80042e8 <faceMain+0x248>)
 800423e:	4618      	mov	r0, r3
 8004240:	f005 fdc4 	bl	8009dcc <siprintf>
	lcdPutStr(35+(*(zektonSmallFont.font_Width)*(13-strlen(dateStr))), 174, dateStr, zektonSmallFont);
 8004244:	2314      	movs	r3, #20
 8004246:	b29c      	uxth	r4, r3
 8004248:	f107 0320 	add.w	r3, r7, #32
 800424c:	4618      	mov	r0, r3
 800424e:	f7fb ffcf 	bl	80001f0 <strlen>
 8004252:	4603      	mov	r3, r0
 8004254:	f1c3 030d 	rsb	r3, r3, #13
 8004258:	b29b      	uxth	r3, r3
 800425a:	fb14 f303 	smulbb	r3, r4, r3
 800425e:	b29b      	uxth	r3, r3
 8004260:	3323      	adds	r3, #35	; 0x23
 8004262:	b298      	uxth	r0, r3
 8004264:	f107 0220 	add.w	r2, r7, #32
 8004268:	4b18      	ldr	r3, [pc, #96]	; (80042cc <faceMain+0x22c>)
 800426a:	21ae      	movs	r1, #174	; 0xae
 800426c:	f7fd ff7c 	bl	8002168 <lcdPutStr>
	char weekStr[30] = {0};
 8004270:	2300      	movs	r3, #0
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	1d3b      	adds	r3, r7, #4
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	611a      	str	r2, [r3, #16]
 8004282:	615a      	str	r2, [r3, #20]
 8004284:	831a      	strh	r2, [r3, #24]
	sprintf(&weekStr, "wednesday");
 8004286:	463b      	mov	r3, r7
 8004288:	4918      	ldr	r1, [pc, #96]	; (80042ec <faceMain+0x24c>)
 800428a:	4618      	mov	r0, r3
 800428c:	f005 fd9e 	bl	8009dcc <siprintf>
	lcdPutStr(35+(*(zektonSmallFont.font_Width)*(13-strlen(weekStr))), 200, weekStr, zektonSmallFont);
 8004290:	2314      	movs	r3, #20
 8004292:	b29c      	uxth	r4, r3
 8004294:	463b      	mov	r3, r7
 8004296:	4618      	mov	r0, r3
 8004298:	f7fb ffaa 	bl	80001f0 <strlen>
 800429c:	4603      	mov	r3, r0
 800429e:	f1c3 030d 	rsb	r3, r3, #13
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	fb14 f303 	smulbb	r3, r4, r3
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3323      	adds	r3, #35	; 0x23
 80042ac:	b298      	uxth	r0, r3
 80042ae:	463a      	mov	r2, r7
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <faceMain+0x22c>)
 80042b2:	21c8      	movs	r1, #200	; 0xc8
 80042b4:	f7fd ff58 	bl	8002168 <lcdPutStr>

	enableCntxMenu();
 80042b8:	f7ff f98a 	bl	80035d0 <enableCntxMenu>
}
 80042bc:	bf00      	nop
 80042be:	37e4      	adds	r7, #228	; 0xe4
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd90      	pop	{r4, r7, pc}
 80042c4:	200003b8 	.word	0x200003b8
 80042c8:	0800d264 	.word	0x0800d264
 80042cc:	0802754c 	.word	0x0802754c
 80042d0:	42c80000 	.word	0x42c80000
 80042d4:	0800d26c 	.word	0x0800d26c
 80042d8:	200033dc 	.word	0x200033dc
 80042dc:	0800d278 	.word	0x0800d278
 80042e0:	080293b4 	.word	0x080293b4
 80042e4:	0802b2ac 	.word	0x0802b2ac
 80042e8:	0800d280 	.word	0x0800d280
 80042ec:	0800d290 	.word	0x0800d290

080042f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80042f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004328 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042f4:	480d      	ldr	r0, [pc, #52]	; (800432c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042f6:	490e      	ldr	r1, [pc, #56]	; (8004330 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042f8:	4a0e      	ldr	r2, [pc, #56]	; (8004334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042fc:	e002      	b.n	8004304 <LoopCopyDataInit>

080042fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004302:	3304      	adds	r3, #4

08004304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004308:	d3f9      	bcc.n	80042fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800430a:	4a0b      	ldr	r2, [pc, #44]	; (8004338 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800430c:	4c0b      	ldr	r4, [pc, #44]	; (800433c <LoopFillZerobss+0x26>)
  movs r3, #0
 800430e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004310:	e001      	b.n	8004316 <LoopFillZerobss>

08004312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004314:	3204      	adds	r2, #4

08004316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004318:	d3fb      	bcc.n	8004312 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800431a:	f7fe fcbd 	bl	8002c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800431e:	f005 f8b1 	bl	8009484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004322:	f7fe f8e5 	bl	80024f0 <main>
  bx  lr    
 8004326:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004328:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800432c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004330:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8004334:	08030d80 	.word	0x08030d80
  ldr r2, =_sbss
 8004338:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 800433c:	200035f8 	.word	0x200035f8

08004340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004340:	e7fe      	b.n	8004340 <ADC_IRQHandler>
	...

08004344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004348:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <HAL_Init+0x40>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <HAL_Init+0x40>)
 800434e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_Init+0x40>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <HAL_Init+0x40>)
 800435a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800435e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004360:	4b08      	ldr	r3, [pc, #32]	; (8004384 <HAL_Init+0x40>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a07      	ldr	r2, [pc, #28]	; (8004384 <HAL_Init+0x40>)
 8004366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800436c:	2003      	movs	r0, #3
 800436e:	f000 f94f 	bl	8004610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004372:	2000      	movs	r0, #0
 8004374:	f000 f808 	bl	8004388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004378:	f7fe fab4 	bl	80028e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023c00 	.word	0x40023c00

08004388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004390:	4b12      	ldr	r3, [pc, #72]	; (80043dc <HAL_InitTick+0x54>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_InitTick+0x58>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	4619      	mov	r1, r3
 800439a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800439e:	fbb3 f3f1 	udiv	r3, r3, r1
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f967 	bl	800467a <HAL_SYSTICK_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e00e      	b.n	80043d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b0f      	cmp	r3, #15
 80043ba:	d80a      	bhi.n	80043d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043bc:	2200      	movs	r2, #0
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	f000 f92f 	bl	8004626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043c8:	4a06      	ldr	r2, [pc, #24]	; (80043e4 <HAL_InitTick+0x5c>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	2000016c 	.word	0x2000016c
 80043e0:	20000184 	.word	0x20000184
 80043e4:	20000180 	.word	0x20000180

080043e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_IncTick+0x20>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_IncTick+0x24>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4413      	add	r3, r2
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <HAL_IncTick+0x24>)
 80043fa:	6013      	str	r3, [r2, #0]
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000184 	.word	0x20000184
 800440c:	200035e4 	.word	0x200035e4

08004410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return uwTick;
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_GetTick+0x14>)
 8004416:	681b      	ldr	r3, [r3, #0]
}
 8004418:	4618      	mov	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	200035e4 	.word	0x200035e4

08004428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004430:	f7ff ffee 	bl	8004410 <HAL_GetTick>
 8004434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d005      	beq.n	800444e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <HAL_Delay+0x44>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800444e:	bf00      	nop
 8004450:	f7ff ffde 	bl	8004410 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	429a      	cmp	r2, r3
 800445e:	d8f7      	bhi.n	8004450 <HAL_Delay+0x28>
  {
  }
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000184 	.word	0x20000184

08004470 <__NVIC_SetPriorityGrouping>:
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800448c:	4013      	ands	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800449c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a2:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	60d3      	str	r3, [r2, #12]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <__NVIC_GetPriorityGrouping>:
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <__NVIC_GetPriorityGrouping+0x18>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f003 0307 	and.w	r3, r3, #7
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_EnableIRQ>:
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	db0b      	blt.n	80044fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	4907      	ldr	r1, [pc, #28]	; (800450c <__NVIC_EnableIRQ+0x38>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2001      	movs	r0, #1
 80044f6:	fa00 f202 	lsl.w	r2, r0, r2
 80044fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000e100 	.word	0xe000e100

08004510 <__NVIC_SetPriority>:
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	6039      	str	r1, [r7, #0]
 800451a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004520:	2b00      	cmp	r3, #0
 8004522:	db0a      	blt.n	800453a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	490c      	ldr	r1, [pc, #48]	; (800455c <__NVIC_SetPriority+0x4c>)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	0112      	lsls	r2, r2, #4
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	440b      	add	r3, r1
 8004534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004538:	e00a      	b.n	8004550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	4908      	ldr	r1, [pc, #32]	; (8004560 <__NVIC_SetPriority+0x50>)
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	3b04      	subs	r3, #4
 8004548:	0112      	lsls	r2, r2, #4
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	440b      	add	r3, r1
 800454e:	761a      	strb	r2, [r3, #24]
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000e100 	.word	0xe000e100
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <NVIC_EncodePriority>:
{
 8004564:	b480      	push	{r7}
 8004566:	b089      	sub	sp, #36	; 0x24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f1c3 0307 	rsb	r3, r3, #7
 800457e:	2b04      	cmp	r3, #4
 8004580:	bf28      	it	cs
 8004582:	2304      	movcs	r3, #4
 8004584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3304      	adds	r3, #4
 800458a:	2b06      	cmp	r3, #6
 800458c:	d902      	bls.n	8004594 <NVIC_EncodePriority+0x30>
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3b03      	subs	r3, #3
 8004592:	e000      	b.n	8004596 <NVIC_EncodePriority+0x32>
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004598:	f04f 32ff 	mov.w	r2, #4294967295
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43da      	mvns	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	401a      	ands	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ac:	f04f 31ff 	mov.w	r1, #4294967295
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	43d9      	mvns	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045bc:	4313      	orrs	r3, r2
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3724      	adds	r7, #36	; 0x24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <SysTick_Config>:
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045dc:	d301      	bcc.n	80045e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80045de:	2301      	movs	r3, #1
 80045e0:	e00f      	b.n	8004602 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <SysTick_Config+0x40>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ea:	210f      	movs	r1, #15
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	f7ff ff8e 	bl	8004510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <SysTick_Config+0x40>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045fa:	4b04      	ldr	r3, [pc, #16]	; (800460c <SysTick_Config+0x40>)
 80045fc:	2207      	movs	r2, #7
 80045fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	e000e010 	.word	0xe000e010

08004610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff ff29 	bl	8004470 <__NVIC_SetPriorityGrouping>
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	4603      	mov	r3, r0
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004638:	f7ff ff3e 	bl	80044b8 <__NVIC_GetPriorityGrouping>
 800463c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	6978      	ldr	r0, [r7, #20]
 8004644:	f7ff ff8e 	bl	8004564 <NVIC_EncodePriority>
 8004648:	4602      	mov	r2, r0
 800464a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff5d 	bl	8004510 <__NVIC_SetPriority>
}
 8004656:	bf00      	nop
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff31 	bl	80044d4 <__NVIC_EnableIRQ>
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff ffa2 	bl	80045cc <SysTick_Config>
 8004688:	4603      	mov	r3, r0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046a0:	f7ff feb6 	bl	8004410 <HAL_GetTick>
 80046a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d008      	beq.n	80046c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2280      	movs	r2, #128	; 0x80
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e052      	b.n	800476a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0216 	bic.w	r2, r2, #22
 80046d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d103      	bne.n	80046f4 <HAL_DMA_Abort+0x62>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0208 	bic.w	r2, r2, #8
 8004702:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004714:	e013      	b.n	800473e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004716:	f7ff fe7b 	bl	8004410 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b05      	cmp	r3, #5
 8004722:	d90c      	bls.n	800473e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2203      	movs	r2, #3
 800472e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e015      	b.n	800476a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e4      	bne.n	8004716 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004750:	223f      	movs	r2, #63	; 0x3f
 8004752:	409a      	lsls	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d004      	beq.n	8004790 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2280      	movs	r2, #128	; 0x80
 800478a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e00c      	b.n	80047aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2205      	movs	r2, #5
 8004794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0201 	bic.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b089      	sub	sp, #36	; 0x24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	e177      	b.n	8004ac4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047d4:	2201      	movs	r2, #1
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	f040 8166 	bne.w	8004abe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d005      	beq.n	800480a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004806:	2b02      	cmp	r3, #2
 8004808:	d130      	bne.n	800486c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	2203      	movs	r2, #3
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43db      	mvns	r3, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4013      	ands	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4313      	orrs	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004840:	2201      	movs	r2, #1
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4013      	ands	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 0201 	and.w	r2, r3, #1
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b03      	cmp	r3, #3
 8004876:	d017      	beq.n	80048a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	2203      	movs	r2, #3
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d123      	bne.n	80048fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	08da      	lsrs	r2, r3, #3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3208      	adds	r2, #8
 80048bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	220f      	movs	r2, #15
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	08da      	lsrs	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3208      	adds	r2, #8
 80048f6:	69b9      	ldr	r1, [r7, #24]
 80048f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	2203      	movs	r2, #3
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 0203 	and.w	r2, r3, #3
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80c0 	beq.w	8004abe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	4b66      	ldr	r3, [pc, #408]	; (8004adc <HAL_GPIO_Init+0x324>)
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	4a65      	ldr	r2, [pc, #404]	; (8004adc <HAL_GPIO_Init+0x324>)
 8004948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800494c:	6453      	str	r3, [r2, #68]	; 0x44
 800494e:	4b63      	ldr	r3, [pc, #396]	; (8004adc <HAL_GPIO_Init+0x324>)
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800495a:	4a61      	ldr	r2, [pc, #388]	; (8004ae0 <HAL_GPIO_Init+0x328>)
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	089b      	lsrs	r3, r3, #2
 8004960:	3302      	adds	r3, #2
 8004962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	220f      	movs	r2, #15
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a58      	ldr	r2, [pc, #352]	; (8004ae4 <HAL_GPIO_Init+0x32c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d037      	beq.n	80049f6 <HAL_GPIO_Init+0x23e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a57      	ldr	r2, [pc, #348]	; (8004ae8 <HAL_GPIO_Init+0x330>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d031      	beq.n	80049f2 <HAL_GPIO_Init+0x23a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a56      	ldr	r2, [pc, #344]	; (8004aec <HAL_GPIO_Init+0x334>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d02b      	beq.n	80049ee <HAL_GPIO_Init+0x236>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a55      	ldr	r2, [pc, #340]	; (8004af0 <HAL_GPIO_Init+0x338>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d025      	beq.n	80049ea <HAL_GPIO_Init+0x232>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a54      	ldr	r2, [pc, #336]	; (8004af4 <HAL_GPIO_Init+0x33c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01f      	beq.n	80049e6 <HAL_GPIO_Init+0x22e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a53      	ldr	r2, [pc, #332]	; (8004af8 <HAL_GPIO_Init+0x340>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d019      	beq.n	80049e2 <HAL_GPIO_Init+0x22a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a52      	ldr	r2, [pc, #328]	; (8004afc <HAL_GPIO_Init+0x344>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_GPIO_Init+0x226>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a51      	ldr	r2, [pc, #324]	; (8004b00 <HAL_GPIO_Init+0x348>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00d      	beq.n	80049da <HAL_GPIO_Init+0x222>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a50      	ldr	r2, [pc, #320]	; (8004b04 <HAL_GPIO_Init+0x34c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d007      	beq.n	80049d6 <HAL_GPIO_Init+0x21e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a4f      	ldr	r2, [pc, #316]	; (8004b08 <HAL_GPIO_Init+0x350>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <HAL_GPIO_Init+0x21a>
 80049ce:	2309      	movs	r3, #9
 80049d0:	e012      	b.n	80049f8 <HAL_GPIO_Init+0x240>
 80049d2:	230a      	movs	r3, #10
 80049d4:	e010      	b.n	80049f8 <HAL_GPIO_Init+0x240>
 80049d6:	2308      	movs	r3, #8
 80049d8:	e00e      	b.n	80049f8 <HAL_GPIO_Init+0x240>
 80049da:	2307      	movs	r3, #7
 80049dc:	e00c      	b.n	80049f8 <HAL_GPIO_Init+0x240>
 80049de:	2306      	movs	r3, #6
 80049e0:	e00a      	b.n	80049f8 <HAL_GPIO_Init+0x240>
 80049e2:	2305      	movs	r3, #5
 80049e4:	e008      	b.n	80049f8 <HAL_GPIO_Init+0x240>
 80049e6:	2304      	movs	r3, #4
 80049e8:	e006      	b.n	80049f8 <HAL_GPIO_Init+0x240>
 80049ea:	2303      	movs	r3, #3
 80049ec:	e004      	b.n	80049f8 <HAL_GPIO_Init+0x240>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e002      	b.n	80049f8 <HAL_GPIO_Init+0x240>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <HAL_GPIO_Init+0x240>
 80049f6:	2300      	movs	r3, #0
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	f002 0203 	and.w	r2, r2, #3
 80049fe:	0092      	lsls	r2, r2, #2
 8004a00:	4093      	lsls	r3, r2
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a08:	4935      	ldr	r1, [pc, #212]	; (8004ae0 <HAL_GPIO_Init+0x328>)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	089b      	lsrs	r3, r3, #2
 8004a0e:	3302      	adds	r3, #2
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a16:	4b3d      	ldr	r3, [pc, #244]	; (8004b0c <HAL_GPIO_Init+0x354>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4013      	ands	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a3a:	4a34      	ldr	r2, [pc, #208]	; (8004b0c <HAL_GPIO_Init+0x354>)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a40:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <HAL_GPIO_Init+0x354>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a64:	4a29      	ldr	r2, [pc, #164]	; (8004b0c <HAL_GPIO_Init+0x354>)
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a6a:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <HAL_GPIO_Init+0x354>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a8e:	4a1f      	ldr	r2, [pc, #124]	; (8004b0c <HAL_GPIO_Init+0x354>)
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a94:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <HAL_GPIO_Init+0x354>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ab8:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <HAL_GPIO_Init+0x354>)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	f67f ae84 	bls.w	80047d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004acc:	bf00      	nop
 8004ace:	bf00      	nop
 8004ad0:	3724      	adds	r7, #36	; 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40013800 	.word	0x40013800
 8004ae4:	40020000 	.word	0x40020000
 8004ae8:	40020400 	.word	0x40020400
 8004aec:	40020800 	.word	0x40020800
 8004af0:	40020c00 	.word	0x40020c00
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40021400 	.word	0x40021400
 8004afc:	40021800 	.word	0x40021800
 8004b00:	40021c00 	.word	0x40021c00
 8004b04:	40022000 	.word	0x40022000
 8004b08:	40022400 	.word	0x40022400
 8004b0c:	40013c00 	.word	0x40013c00

08004b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	887b      	ldrh	r3, [r7, #2]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
 8004b2c:	e001      	b.n	8004b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	807b      	strh	r3, [r7, #2]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b50:	787b      	ldrb	r3, [r7, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b5c:	e003      	b.n	8004b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	041a      	lsls	r2, r3, #16
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	619a      	str	r2, [r3, #24]
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b84:	887a      	ldrh	r2, [r7, #2]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	041a      	lsls	r2, r3, #16
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	43d9      	mvns	r1, r3
 8004b90:	887b      	ldrh	r3, [r7, #2]
 8004b92:	400b      	ands	r3, r1
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	619a      	str	r2, [r3, #24]
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
	...

08004ba8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004bb2:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bb4:	695a      	ldr	r2, [r3, #20]
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d006      	beq.n	8004bcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bbe:	4a05      	ldr	r2, [pc, #20]	; (8004bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f806 	bl	8004bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40013c00 	.word	0x40013c00

08004bd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e12b      	b.n	8004e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fd f924 	bl	8001e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2224      	movs	r2, #36	; 0x24
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0201 	bic.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c54:	f001 fc76 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 8004c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4a81      	ldr	r2, [pc, #516]	; (8004e64 <HAL_I2C_Init+0x274>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d807      	bhi.n	8004c74 <HAL_I2C_Init+0x84>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a80      	ldr	r2, [pc, #512]	; (8004e68 <HAL_I2C_Init+0x278>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	bf94      	ite	ls
 8004c6c:	2301      	movls	r3, #1
 8004c6e:	2300      	movhi	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	e006      	b.n	8004c82 <HAL_I2C_Init+0x92>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4a7d      	ldr	r2, [pc, #500]	; (8004e6c <HAL_I2C_Init+0x27c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	bf94      	ite	ls
 8004c7c:	2301      	movls	r3, #1
 8004c7e:	2300      	movhi	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e0e7      	b.n	8004e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a78      	ldr	r2, [pc, #480]	; (8004e70 <HAL_I2C_Init+0x280>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	0c9b      	lsrs	r3, r3, #18
 8004c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a6a      	ldr	r2, [pc, #424]	; (8004e64 <HAL_I2C_Init+0x274>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d802      	bhi.n	8004cc4 <HAL_I2C_Init+0xd4>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	e009      	b.n	8004cd8 <HAL_I2C_Init+0xe8>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	4a69      	ldr	r2, [pc, #420]	; (8004e74 <HAL_I2C_Init+0x284>)
 8004cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd4:	099b      	lsrs	r3, r3, #6
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	495c      	ldr	r1, [pc, #368]	; (8004e64 <HAL_I2C_Init+0x274>)
 8004cf4:	428b      	cmp	r3, r1
 8004cf6:	d819      	bhi.n	8004d2c <HAL_I2C_Init+0x13c>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1e59      	subs	r1, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d06:	1c59      	adds	r1, r3, #1
 8004d08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d0c:	400b      	ands	r3, r1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_I2C_Init+0x138>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1e59      	subs	r1, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d20:	3301      	adds	r3, #1
 8004d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d26:	e051      	b.n	8004dcc <HAL_I2C_Init+0x1dc>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	e04f      	b.n	8004dcc <HAL_I2C_Init+0x1dc>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d111      	bne.n	8004d58 <HAL_I2C_Init+0x168>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1e58      	subs	r0, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	440b      	add	r3, r1
 8004d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d46:	3301      	adds	r3, #1
 8004d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e012      	b.n	8004d7e <HAL_I2C_Init+0x18e>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	1e58      	subs	r0, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6859      	ldr	r1, [r3, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	0099      	lsls	r1, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d6e:	3301      	adds	r3, #1
 8004d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_I2C_Init+0x196>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e022      	b.n	8004dcc <HAL_I2C_Init+0x1dc>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10e      	bne.n	8004dac <HAL_I2C_Init+0x1bc>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1e58      	subs	r0, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6859      	ldr	r1, [r3, #4]
 8004d96:	460b      	mov	r3, r1
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	440b      	add	r3, r1
 8004d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004da0:	3301      	adds	r3, #1
 8004da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004daa:	e00f      	b.n	8004dcc <HAL_I2C_Init+0x1dc>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1e58      	subs	r0, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	0099      	lsls	r1, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	6809      	ldr	r1, [r1, #0]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6911      	ldr	r1, [r2, #16]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68d2      	ldr	r2, [r2, #12]
 8004e06:	4311      	orrs	r1, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	000186a0 	.word	0x000186a0
 8004e68:	001e847f 	.word	0x001e847f
 8004e6c:	003d08ff 	.word	0x003d08ff
 8004e70:	431bde83 	.word	0x431bde83
 8004e74:	10624dd3 	.word	0x10624dd3

08004e78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	4608      	mov	r0, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	817b      	strh	r3, [r7, #10]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	813b      	strh	r3, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e92:	f7ff fabd 	bl	8004410 <HAL_GetTick>
 8004e96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	f040 80d9 	bne.w	8005058 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	2319      	movs	r3, #25
 8004eac:	2201      	movs	r2, #1
 8004eae:	496d      	ldr	r1, [pc, #436]	; (8005064 <HAL_I2C_Mem_Write+0x1ec>)
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fc7f 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e0cc      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_I2C_Mem_Write+0x56>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e0c5      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d007      	beq.n	8004ef4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2221      	movs	r2, #33	; 0x21
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2240      	movs	r2, #64	; 0x40
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a3a      	ldr	r2, [r7, #32]
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a4d      	ldr	r2, [pc, #308]	; (8005068 <HAL_I2C_Mem_Write+0x1f0>)
 8004f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f36:	88f8      	ldrh	r0, [r7, #6]
 8004f38:	893a      	ldrh	r2, [r7, #8]
 8004f3a:	8979      	ldrh	r1, [r7, #10]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	4603      	mov	r3, r0
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 fab6 	bl	80054b8 <I2C_RequestMemoryWrite>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d052      	beq.n	8004ff8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e081      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fd00 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00d      	beq.n	8004f82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d107      	bne.n	8004f7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e06b      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	781a      	ldrb	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d11b      	bne.n	8004ff8 <HAL_I2C_Mem_Write+0x180>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d017      	beq.n	8004ff8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1aa      	bne.n	8004f56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fcec 	bl	80059e2 <I2C_WaitOnBTFFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00d      	beq.n	800502c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	2b04      	cmp	r3, #4
 8005016:	d107      	bne.n	8005028 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005026:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e016      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e000      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	00100002 	.word	0x00100002
 8005068:	ffff0000 	.word	0xffff0000

0800506c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	; 0x30
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	4608      	mov	r0, r1
 8005076:	4611      	mov	r1, r2
 8005078:	461a      	mov	r2, r3
 800507a:	4603      	mov	r3, r0
 800507c:	817b      	strh	r3, [r7, #10]
 800507e:	460b      	mov	r3, r1
 8005080:	813b      	strh	r3, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005086:	f7ff f9c3 	bl	8004410 <HAL_GetTick>
 800508a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b20      	cmp	r3, #32
 8005096:	f040 8208 	bne.w	80054aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2319      	movs	r3, #25
 80050a0:	2201      	movs	r2, #1
 80050a2:	497b      	ldr	r1, [pc, #492]	; (8005290 <HAL_I2C_Mem_Read+0x224>)
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 fb85 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
 80050b2:	e1fb      	b.n	80054ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_I2C_Mem_Read+0x56>
 80050be:	2302      	movs	r3, #2
 80050c0:	e1f4      	b.n	80054ac <HAL_I2C_Mem_Read+0x440>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d007      	beq.n	80050e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2222      	movs	r2, #34	; 0x22
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2240      	movs	r2, #64	; 0x40
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4a5b      	ldr	r2, [pc, #364]	; (8005294 <HAL_I2C_Mem_Read+0x228>)
 8005128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800512a:	88f8      	ldrh	r0, [r7, #6]
 800512c:	893a      	ldrh	r2, [r7, #8]
 800512e:	8979      	ldrh	r1, [r7, #10]
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	4603      	mov	r3, r0
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 fa52 	bl	80055e4 <I2C_RequestMemoryRead>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e1b0      	b.n	80054ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	2b00      	cmp	r3, #0
 8005150:	d113      	bne.n	800517a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005152:	2300      	movs	r3, #0
 8005154:	623b      	str	r3, [r7, #32]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	623b      	str	r3, [r7, #32]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	623b      	str	r3, [r7, #32]
 8005166:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	e184      	b.n	8005484 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517e:	2b01      	cmp	r3, #1
 8005180:	d11b      	bne.n	80051ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005190:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	e164      	b.n	8005484 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d11b      	bne.n	80051fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	e144      	b.n	8005484 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005210:	e138      	b.n	8005484 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005216:	2b03      	cmp	r3, #3
 8005218:	f200 80f1 	bhi.w	80053fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005220:	2b01      	cmp	r3, #1
 8005222:	d123      	bne.n	800526c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fc1b 	bl	8005a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e139      	b.n	80054ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	855a      	strh	r2, [r3, #42]	; 0x2a
 800526a:	e10b      	b.n	8005484 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005270:	2b02      	cmp	r3, #2
 8005272:	d14e      	bne.n	8005312 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	2200      	movs	r2, #0
 800527c:	4906      	ldr	r1, [pc, #24]	; (8005298 <HAL_I2C_Mem_Read+0x22c>)
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fa98 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e10e      	b.n	80054ac <HAL_I2C_Mem_Read+0x440>
 800528e:	bf00      	nop
 8005290:	00100002 	.word	0x00100002
 8005294:	ffff0000 	.word	0xffff0000
 8005298:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005310:	e0b8      	b.n	8005484 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	2200      	movs	r2, #0
 800531a:	4966      	ldr	r1, [pc, #408]	; (80054b4 <HAL_I2C_Mem_Read+0x448>)
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 fa49 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0bf      	b.n	80054ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	2200      	movs	r2, #0
 8005376:	494f      	ldr	r1, [pc, #316]	; (80054b4 <HAL_I2C_Mem_Read+0x448>)
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 fa1b 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e091      	b.n	80054ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053fc:	e042      	b.n	8005484 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005400:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fb2e 	bl	8005a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e04c      	b.n	80054ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b04      	cmp	r3, #4
 8005450:	d118      	bne.n	8005484 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005488:	2b00      	cmp	r3, #0
 800548a:	f47f aec2 	bne.w	8005212 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e000      	b.n	80054ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80054aa:	2302      	movs	r3, #2
  }
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3728      	adds	r7, #40	; 0x28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	00010004 	.word	0x00010004

080054b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	817b      	strh	r3, [r7, #10]
 80054ca:	460b      	mov	r3, r1
 80054cc:	813b      	strh	r3, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f960 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005508:	d103      	bne.n	8005512 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e05f      	b.n	80055d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005516:	897b      	ldrh	r3, [r7, #10]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005524:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	6a3a      	ldr	r2, [r7, #32]
 800552a:	492d      	ldr	r1, [pc, #180]	; (80055e0 <I2C_RequestMemoryWrite+0x128>)
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f998 	bl	8005862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e04c      	b.n	80055d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005554:	6a39      	ldr	r1, [r7, #32]
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fa02 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00d      	beq.n	800557e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	2b04      	cmp	r3, #4
 8005568:	d107      	bne.n	800557a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005578:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e02b      	b.n	80055d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005584:	893b      	ldrh	r3, [r7, #8]
 8005586:	b2da      	uxtb	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	611a      	str	r2, [r3, #16]
 800558e:	e021      	b.n	80055d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005590:	893b      	ldrh	r3, [r7, #8]
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	b29b      	uxth	r3, r3
 8005596:	b2da      	uxtb	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800559e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a0:	6a39      	ldr	r1, [r7, #32]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f9dc 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00d      	beq.n	80055ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d107      	bne.n	80055c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e005      	b.n	80055d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055ca:	893b      	ldrh	r3, [r7, #8]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	00010002 	.word	0x00010002

080055e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	4608      	mov	r0, r1
 80055ee:	4611      	mov	r1, r2
 80055f0:	461a      	mov	r2, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	817b      	strh	r3, [r7, #10]
 80055f6:	460b      	mov	r3, r1
 80055f8:	813b      	strh	r3, [r7, #8]
 80055fa:	4613      	mov	r3, r2
 80055fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800560c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800561c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	2200      	movs	r2, #0
 8005626:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f8c2 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005644:	d103      	bne.n	800564e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e0aa      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005652:	897b      	ldrh	r3, [r7, #10]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005660:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	4952      	ldr	r1, [pc, #328]	; (80057b0 <I2C_RequestMemoryRead+0x1cc>)
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f8fa 	bl	8005862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e097      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800568e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005690:	6a39      	ldr	r1, [r7, #32]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f964 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00d      	beq.n	80056ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d107      	bne.n	80056b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e076      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056c0:	893b      	ldrh	r3, [r7, #8]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	611a      	str	r2, [r3, #16]
 80056ca:	e021      	b.n	8005710 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056cc:	893b      	ldrh	r3, [r7, #8]
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056dc:	6a39      	ldr	r1, [r7, #32]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f93e 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d107      	bne.n	8005702 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005700:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e050      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005706:	893b      	ldrh	r3, [r7, #8]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005712:	6a39      	ldr	r1, [r7, #32]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f923 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	2b04      	cmp	r3, #4
 8005726:	d107      	bne.n	8005738 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005736:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e035      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800574a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	2200      	movs	r2, #0
 8005754:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f82b 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00d      	beq.n	8005780 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005772:	d103      	bne.n	800577c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800577a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e013      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005780:	897b      	ldrh	r3, [r7, #10]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	6a3a      	ldr	r2, [r7, #32]
 8005794:	4906      	ldr	r1, [pc, #24]	; (80057b0 <I2C_RequestMemoryRead+0x1cc>)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f863 	bl	8005862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	00010002 	.word	0x00010002

080057b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057c4:	e025      	b.n	8005812 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d021      	beq.n	8005812 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ce:	f7fe fe1f 	bl	8004410 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d302      	bcc.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d116      	bne.n	8005812 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f043 0220 	orr.w	r2, r3, #32
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e023      	b.n	800585a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	0c1b      	lsrs	r3, r3, #16
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	d10d      	bne.n	8005838 <I2C_WaitOnFlagUntilTimeout+0x84>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	43da      	mvns	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4013      	ands	r3, r2
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	bf0c      	ite	eq
 800582e:	2301      	moveq	r3, #1
 8005830:	2300      	movne	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	e00c      	b.n	8005852 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	43da      	mvns	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4013      	ands	r3, r2
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf0c      	ite	eq
 800584a:	2301      	moveq	r3, #1
 800584c:	2300      	movne	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	429a      	cmp	r2, r3
 8005856:	d0b6      	beq.n	80057c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	607a      	str	r2, [r7, #4]
 800586e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005870:	e051      	b.n	8005916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005880:	d123      	bne.n	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005890:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800589a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f043 0204 	orr.w	r2, r3, #4
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e046      	b.n	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d021      	beq.n	8005916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d2:	f7fe fd9d 	bl	8004410 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d302      	bcc.n	80058e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d116      	bne.n	8005916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f043 0220 	orr.w	r2, r3, #32
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e020      	b.n	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	0c1b      	lsrs	r3, r3, #16
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	d10c      	bne.n	800593a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	43da      	mvns	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4013      	ands	r3, r2
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	bf14      	ite	ne
 8005932:	2301      	movne	r3, #1
 8005934:	2300      	moveq	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	e00b      	b.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	43da      	mvns	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	4013      	ands	r3, r2
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	bf14      	ite	ne
 800594c:	2301      	movne	r3, #1
 800594e:	2300      	moveq	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d18d      	bne.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800596c:	e02d      	b.n	80059ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f8ce 	bl	8005b10 <I2C_IsAcknowledgeFailed>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e02d      	b.n	80059da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d021      	beq.n	80059ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005986:	f7fe fd43 	bl	8004410 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d116      	bne.n	80059ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	f043 0220 	orr.w	r2, r3, #32
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e007      	b.n	80059da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d1ca      	bne.n	800596e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059ee:	e02d      	b.n	8005a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f88d 	bl	8005b10 <I2C_IsAcknowledgeFailed>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e02d      	b.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a06:	d021      	beq.n	8005a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a08:	f7fe fd02 	bl	8004410 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d302      	bcc.n	8005a1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d116      	bne.n	8005a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	f043 0220 	orr.w	r2, r3, #32
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e007      	b.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d1ca      	bne.n	80059f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a70:	e042      	b.n	8005af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d119      	bne.n	8005ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0210 	mvn.w	r2, #16
 8005a88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e029      	b.n	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab4:	f7fe fcac 	bl	8004410 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d302      	bcc.n	8005aca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d116      	bne.n	8005af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	f043 0220 	orr.w	r2, r3, #32
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e007      	b.n	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d1b5      	bne.n	8005a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b26:	d11b      	bne.n	8005b60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	f043 0204 	orr.w	r2, r3, #4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d129      	bne.n	8005bd8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2224      	movs	r2, #36	; 0x24
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0210 	bic.w	r2, r2, #16
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e000      	b.n	8005bda <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d12a      	bne.n	8005c56 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2224      	movs	r2, #36	; 0x24
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005c20:	89fb      	ldrh	r3, [r7, #14]
 8005c22:	f023 030f 	bic.w	r3, r3, #15
 8005c26:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	89fb      	ldrh	r3, [r7, #14]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	89fa      	ldrh	r2, [r7, #14]
 8005c38:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e000      	b.n	8005c58 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005c56:	2302      	movs	r3, #2
  }
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e267      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d075      	beq.n	8005d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c82:	4b88      	ldr	r3, [pc, #544]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 030c 	and.w	r3, r3, #12
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d00c      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c8e:	4b85      	ldr	r3, [pc, #532]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d112      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c9a:	4b82      	ldr	r3, [pc, #520]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca6:	d10b      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca8:	4b7e      	ldr	r3, [pc, #504]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d05b      	beq.n	8005d6c <HAL_RCC_OscConfig+0x108>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d157      	bne.n	8005d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e242      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc8:	d106      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x74>
 8005cca:	4b76      	ldr	r3, [pc, #472]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a75      	ldr	r2, [pc, #468]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e01d      	b.n	8005d14 <HAL_RCC_OscConfig+0xb0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCC_OscConfig+0x98>
 8005ce2:	4b70      	ldr	r3, [pc, #448]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a6f      	ldr	r2, [pc, #444]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b6d      	ldr	r3, [pc, #436]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a6c      	ldr	r2, [pc, #432]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e00b      	b.n	8005d14 <HAL_RCC_OscConfig+0xb0>
 8005cfc:	4b69      	ldr	r3, [pc, #420]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a68      	ldr	r2, [pc, #416]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	4b66      	ldr	r3, [pc, #408]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a65      	ldr	r2, [pc, #404]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d013      	beq.n	8005d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1c:	f7fe fb78 	bl	8004410 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d24:	f7fe fb74 	bl	8004410 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b64      	cmp	r3, #100	; 0x64
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e207      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	4b5b      	ldr	r3, [pc, #364]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0xc0>
 8005d42:	e014      	b.n	8005d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d44:	f7fe fb64 	bl	8004410 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d4c:	f7fe fb60 	bl	8004410 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b64      	cmp	r3, #100	; 0x64
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e1f3      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5e:	4b51      	ldr	r3, [pc, #324]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0xe8>
 8005d6a:	e000      	b.n	8005d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d063      	beq.n	8005e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00b      	beq.n	8005d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d86:	4b47      	ldr	r3, [pc, #284]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d11c      	bne.n	8005dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d92:	4b44      	ldr	r3, [pc, #272]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d116      	bne.n	8005dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d9e:	4b41      	ldr	r3, [pc, #260]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_RCC_OscConfig+0x152>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d001      	beq.n	8005db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e1c7      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db6:	4b3b      	ldr	r3, [pc, #236]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4937      	ldr	r1, [pc, #220]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dca:	e03a      	b.n	8005e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d020      	beq.n	8005e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd4:	4b34      	ldr	r3, [pc, #208]	; (8005ea8 <HAL_RCC_OscConfig+0x244>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dda:	f7fe fb19 	bl	8004410 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de2:	f7fe fb15 	bl	8004410 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e1a8      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df4:	4b2b      	ldr	r3, [pc, #172]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e00:	4b28      	ldr	r3, [pc, #160]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4925      	ldr	r1, [pc, #148]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	600b      	str	r3, [r1, #0]
 8005e14:	e015      	b.n	8005e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e16:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <HAL_RCC_OscConfig+0x244>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fe faf8 	bl	8004410 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e24:	f7fe faf4 	bl	8004410 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e187      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e36:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d036      	beq.n	8005ebc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d016      	beq.n	8005e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e56:	4b15      	ldr	r3, [pc, #84]	; (8005eac <HAL_RCC_OscConfig+0x248>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5c:	f7fe fad8 	bl	8004410 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e64:	f7fe fad4 	bl	8004410 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e167      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e76:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCC_OscConfig+0x200>
 8005e82:	e01b      	b.n	8005ebc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e84:	4b09      	ldr	r3, [pc, #36]	; (8005eac <HAL_RCC_OscConfig+0x248>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e8a:	f7fe fac1 	bl	8004410 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e90:	e00e      	b.n	8005eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e92:	f7fe fabd 	bl	8004410 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d907      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e150      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	42470000 	.word	0x42470000
 8005eac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb0:	4b88      	ldr	r3, [pc, #544]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1ea      	bne.n	8005e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 8097 	beq.w	8005ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ece:	4b81      	ldr	r3, [pc, #516]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10f      	bne.n	8005efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eda:	2300      	movs	r3, #0
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	4b7d      	ldr	r3, [pc, #500]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	4a7c      	ldr	r2, [pc, #496]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eea:	4b7a      	ldr	r3, [pc, #488]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005efa:	4b77      	ldr	r3, [pc, #476]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d118      	bne.n	8005f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f06:	4b74      	ldr	r3, [pc, #464]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a73      	ldr	r2, [pc, #460]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f12:	f7fe fa7d 	bl	8004410 <HAL_GetTick>
 8005f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f1a:	f7fe fa79 	bl	8004410 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e10c      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2c:	4b6a      	ldr	r3, [pc, #424]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f0      	beq.n	8005f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d106      	bne.n	8005f4e <HAL_RCC_OscConfig+0x2ea>
 8005f40:	4b64      	ldr	r3, [pc, #400]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	4a63      	ldr	r2, [pc, #396]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4c:	e01c      	b.n	8005f88 <HAL_RCC_OscConfig+0x324>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b05      	cmp	r3, #5
 8005f54:	d10c      	bne.n	8005f70 <HAL_RCC_OscConfig+0x30c>
 8005f56:	4b5f      	ldr	r3, [pc, #380]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5a:	4a5e      	ldr	r2, [pc, #376]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	f043 0304 	orr.w	r3, r3, #4
 8005f60:	6713      	str	r3, [r2, #112]	; 0x70
 8005f62:	4b5c      	ldr	r3, [pc, #368]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f66:	4a5b      	ldr	r2, [pc, #364]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f68:	f043 0301 	orr.w	r3, r3, #1
 8005f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6e:	e00b      	b.n	8005f88 <HAL_RCC_OscConfig+0x324>
 8005f70:	4b58      	ldr	r3, [pc, #352]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f74:	4a57      	ldr	r2, [pc, #348]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7c:	4b55      	ldr	r3, [pc, #340]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f80:	4a54      	ldr	r2, [pc, #336]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f82:	f023 0304 	bic.w	r3, r3, #4
 8005f86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d015      	beq.n	8005fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fe fa3e 	bl	8004410 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f96:	e00a      	b.n	8005fae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f98:	f7fe fa3a 	bl	8004410 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e0cb      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fae:	4b49      	ldr	r3, [pc, #292]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0ee      	beq.n	8005f98 <HAL_RCC_OscConfig+0x334>
 8005fba:	e014      	b.n	8005fe6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fbc:	f7fe fa28 	bl	8004410 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc2:	e00a      	b.n	8005fda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc4:	f7fe fa24 	bl	8004410 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e0b5      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fda:	4b3e      	ldr	r3, [pc, #248]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1ee      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d105      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fec:	4b39      	ldr	r3, [pc, #228]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	4a38      	ldr	r2, [pc, #224]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 80a1 	beq.w	8006144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006002:	4b34      	ldr	r3, [pc, #208]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 030c 	and.w	r3, r3, #12
 800600a:	2b08      	cmp	r3, #8
 800600c:	d05c      	beq.n	80060c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d141      	bne.n	800609a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006016:	4b31      	ldr	r3, [pc, #196]	; (80060dc <HAL_RCC_OscConfig+0x478>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601c:	f7fe f9f8 	bl	8004410 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006024:	f7fe f9f4 	bl	8004410 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e087      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006036:	4b27      	ldr	r3, [pc, #156]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	019b      	lsls	r3, r3, #6
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	3b01      	subs	r3, #1
 800605c:	041b      	lsls	r3, r3, #16
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	061b      	lsls	r3, r3, #24
 8006066:	491b      	ldr	r1, [pc, #108]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8006068:	4313      	orrs	r3, r2
 800606a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800606c:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <HAL_RCC_OscConfig+0x478>)
 800606e:	2201      	movs	r2, #1
 8006070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006072:	f7fe f9cd 	bl	8004410 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800607a:	f7fe f9c9 	bl	8004410 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e05c      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608c:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f0      	beq.n	800607a <HAL_RCC_OscConfig+0x416>
 8006098:	e054      	b.n	8006144 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609a:	4b10      	ldr	r3, [pc, #64]	; (80060dc <HAL_RCC_OscConfig+0x478>)
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a0:	f7fe f9b6 	bl	8004410 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a8:	f7fe f9b2 	bl	8004410 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e045      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f0      	bne.n	80060a8 <HAL_RCC_OscConfig+0x444>
 80060c6:	e03d      	b.n	8006144 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d107      	bne.n	80060e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e038      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
 80060d4:	40023800 	.word	0x40023800
 80060d8:	40007000 	.word	0x40007000
 80060dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060e0:	4b1b      	ldr	r3, [pc, #108]	; (8006150 <HAL_RCC_OscConfig+0x4ec>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d028      	beq.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d121      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006106:	429a      	cmp	r2, r3
 8006108:	d11a      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006110:	4013      	ands	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006118:	4293      	cmp	r3, r2
 800611a:	d111      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	3b01      	subs	r3, #1
 800612a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800612c:	429a      	cmp	r2, r3
 800612e:	d107      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40023800 	.word	0x40023800

08006154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0cc      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006168:	4b68      	ldr	r3, [pc, #416]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d90c      	bls.n	8006190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006176:	4b65      	ldr	r3, [pc, #404]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b63      	ldr	r3, [pc, #396]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0b8      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d020      	beq.n	80061de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061a8:	4b59      	ldr	r3, [pc, #356]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	4a58      	ldr	r2, [pc, #352]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061c0:	4b53      	ldr	r3, [pc, #332]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4a52      	ldr	r2, [pc, #328]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061cc:	4b50      	ldr	r3, [pc, #320]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	494d      	ldr	r1, [pc, #308]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d044      	beq.n	8006274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d107      	bne.n	8006202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	4b47      	ldr	r3, [pc, #284]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d119      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e07f      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d003      	beq.n	8006212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800620e:	2b03      	cmp	r3, #3
 8006210:	d107      	bne.n	8006222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006212:	4b3f      	ldr	r3, [pc, #252]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e06f      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006222:	4b3b      	ldr	r3, [pc, #236]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e067      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006232:	4b37      	ldr	r3, [pc, #220]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f023 0203 	bic.w	r2, r3, #3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4934      	ldr	r1, [pc, #208]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	4313      	orrs	r3, r2
 8006242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006244:	f7fe f8e4 	bl	8004410 <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624a:	e00a      	b.n	8006262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800624c:	f7fe f8e0 	bl	8004410 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e04f      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006262:	4b2b      	ldr	r3, [pc, #172]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 020c 	and.w	r2, r3, #12
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	429a      	cmp	r2, r3
 8006272:	d1eb      	bne.n	800624c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006274:	4b25      	ldr	r3, [pc, #148]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d20c      	bcs.n	800629c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006282:	4b22      	ldr	r3, [pc, #136]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800628a:	4b20      	ldr	r3, [pc, #128]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d001      	beq.n	800629c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e032      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d008      	beq.n	80062ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062a8:	4b19      	ldr	r3, [pc, #100]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	4916      	ldr	r1, [pc, #88]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062c6:	4b12      	ldr	r3, [pc, #72]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	490e      	ldr	r1, [pc, #56]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062da:	f000 f821 	bl	8006320 <HAL_RCC_GetSysClockFreq>
 80062de:	4602      	mov	r2, r0
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	091b      	lsrs	r3, r3, #4
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	490a      	ldr	r1, [pc, #40]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 80062ec:	5ccb      	ldrb	r3, [r1, r3]
 80062ee:	fa22 f303 	lsr.w	r3, r2, r3
 80062f2:	4a09      	ldr	r2, [pc, #36]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <HAL_RCC_ClockConfig+0x1c8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe f844 	bl	8004388 <HAL_InitTick>

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40023c00 	.word	0x40023c00
 8006310:	40023800 	.word	0x40023800
 8006314:	0800e4d0 	.word	0x0800e4d0
 8006318:	2000016c 	.word	0x2000016c
 800631c:	20000180 	.word	0x20000180

08006320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006324:	b094      	sub	sp, #80	; 0x50
 8006326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	647b      	str	r3, [r7, #68]	; 0x44
 800632c:	2300      	movs	r3, #0
 800632e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006330:	2300      	movs	r3, #0
 8006332:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006338:	4b79      	ldr	r3, [pc, #484]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 030c 	and.w	r3, r3, #12
 8006340:	2b08      	cmp	r3, #8
 8006342:	d00d      	beq.n	8006360 <HAL_RCC_GetSysClockFreq+0x40>
 8006344:	2b08      	cmp	r3, #8
 8006346:	f200 80e1 	bhi.w	800650c <HAL_RCC_GetSysClockFreq+0x1ec>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_RCC_GetSysClockFreq+0x34>
 800634e:	2b04      	cmp	r3, #4
 8006350:	d003      	beq.n	800635a <HAL_RCC_GetSysClockFreq+0x3a>
 8006352:	e0db      	b.n	800650c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006354:	4b73      	ldr	r3, [pc, #460]	; (8006524 <HAL_RCC_GetSysClockFreq+0x204>)
 8006356:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006358:	e0db      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800635a:	4b73      	ldr	r3, [pc, #460]	; (8006528 <HAL_RCC_GetSysClockFreq+0x208>)
 800635c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800635e:	e0d8      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006360:	4b6f      	ldr	r3, [pc, #444]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006368:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800636a:	4b6d      	ldr	r3, [pc, #436]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d063      	beq.n	800643e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006376:	4b6a      	ldr	r3, [pc, #424]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	099b      	lsrs	r3, r3, #6
 800637c:	2200      	movs	r2, #0
 800637e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006380:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006388:	633b      	str	r3, [r7, #48]	; 0x30
 800638a:	2300      	movs	r3, #0
 800638c:	637b      	str	r3, [r7, #52]	; 0x34
 800638e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006392:	4622      	mov	r2, r4
 8006394:	462b      	mov	r3, r5
 8006396:	f04f 0000 	mov.w	r0, #0
 800639a:	f04f 0100 	mov.w	r1, #0
 800639e:	0159      	lsls	r1, r3, #5
 80063a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063a4:	0150      	lsls	r0, r2, #5
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4621      	mov	r1, r4
 80063ac:	1a51      	subs	r1, r2, r1
 80063ae:	6139      	str	r1, [r7, #16]
 80063b0:	4629      	mov	r1, r5
 80063b2:	eb63 0301 	sbc.w	r3, r3, r1
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063c4:	4659      	mov	r1, fp
 80063c6:	018b      	lsls	r3, r1, #6
 80063c8:	4651      	mov	r1, sl
 80063ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063ce:	4651      	mov	r1, sl
 80063d0:	018a      	lsls	r2, r1, #6
 80063d2:	4651      	mov	r1, sl
 80063d4:	ebb2 0801 	subs.w	r8, r2, r1
 80063d8:	4659      	mov	r1, fp
 80063da:	eb63 0901 	sbc.w	r9, r3, r1
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063f2:	4690      	mov	r8, r2
 80063f4:	4699      	mov	r9, r3
 80063f6:	4623      	mov	r3, r4
 80063f8:	eb18 0303 	adds.w	r3, r8, r3
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	462b      	mov	r3, r5
 8006400:	eb49 0303 	adc.w	r3, r9, r3
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006412:	4629      	mov	r1, r5
 8006414:	024b      	lsls	r3, r1, #9
 8006416:	4621      	mov	r1, r4
 8006418:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800641c:	4621      	mov	r1, r4
 800641e:	024a      	lsls	r2, r1, #9
 8006420:	4610      	mov	r0, r2
 8006422:	4619      	mov	r1, r3
 8006424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006426:	2200      	movs	r2, #0
 8006428:	62bb      	str	r3, [r7, #40]	; 0x28
 800642a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800642c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006430:	f7fa fc1a 	bl	8000c68 <__aeabi_uldivmod>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4613      	mov	r3, r2
 800643a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800643c:	e058      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800643e:	4b38      	ldr	r3, [pc, #224]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	099b      	lsrs	r3, r3, #6
 8006444:	2200      	movs	r2, #0
 8006446:	4618      	mov	r0, r3
 8006448:	4611      	mov	r1, r2
 800644a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800644e:	623b      	str	r3, [r7, #32]
 8006450:	2300      	movs	r3, #0
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
 8006454:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006458:	4642      	mov	r2, r8
 800645a:	464b      	mov	r3, r9
 800645c:	f04f 0000 	mov.w	r0, #0
 8006460:	f04f 0100 	mov.w	r1, #0
 8006464:	0159      	lsls	r1, r3, #5
 8006466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800646a:	0150      	lsls	r0, r2, #5
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4641      	mov	r1, r8
 8006472:	ebb2 0a01 	subs.w	sl, r2, r1
 8006476:	4649      	mov	r1, r9
 8006478:	eb63 0b01 	sbc.w	fp, r3, r1
 800647c:	f04f 0200 	mov.w	r2, #0
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006488:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800648c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006490:	ebb2 040a 	subs.w	r4, r2, sl
 8006494:	eb63 050b 	sbc.w	r5, r3, fp
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	00eb      	lsls	r3, r5, #3
 80064a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064a6:	00e2      	lsls	r2, r4, #3
 80064a8:	4614      	mov	r4, r2
 80064aa:	461d      	mov	r5, r3
 80064ac:	4643      	mov	r3, r8
 80064ae:	18e3      	adds	r3, r4, r3
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	464b      	mov	r3, r9
 80064b4:	eb45 0303 	adc.w	r3, r5, r3
 80064b8:	607b      	str	r3, [r7, #4]
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064c6:	4629      	mov	r1, r5
 80064c8:	028b      	lsls	r3, r1, #10
 80064ca:	4621      	mov	r1, r4
 80064cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064d0:	4621      	mov	r1, r4
 80064d2:	028a      	lsls	r2, r1, #10
 80064d4:	4610      	mov	r0, r2
 80064d6:	4619      	mov	r1, r3
 80064d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064da:	2200      	movs	r2, #0
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	61fa      	str	r2, [r7, #28]
 80064e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064e4:	f7fa fbc0 	bl	8000c68 <__aeabi_uldivmod>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4613      	mov	r3, r2
 80064ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	0c1b      	lsrs	r3, r3, #16
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	3301      	adds	r3, #1
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800650a:	e002      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <HAL_RCC_GetSysClockFreq+0x204>)
 800650e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006514:	4618      	mov	r0, r3
 8006516:	3750      	adds	r7, #80	; 0x50
 8006518:	46bd      	mov	sp, r7
 800651a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800651e:	bf00      	nop
 8006520:	40023800 	.word	0x40023800
 8006524:	00f42400 	.word	0x00f42400
 8006528:	007a1200 	.word	0x007a1200

0800652c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006530:	4b03      	ldr	r3, [pc, #12]	; (8006540 <HAL_RCC_GetHCLKFreq+0x14>)
 8006532:	681b      	ldr	r3, [r3, #0]
}
 8006534:	4618      	mov	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	2000016c 	.word	0x2000016c

08006544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006548:	f7ff fff0 	bl	800652c <HAL_RCC_GetHCLKFreq>
 800654c:	4602      	mov	r2, r0
 800654e:	4b05      	ldr	r3, [pc, #20]	; (8006564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	0a9b      	lsrs	r3, r3, #10
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	4903      	ldr	r1, [pc, #12]	; (8006568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800655a:	5ccb      	ldrb	r3, [r1, r3]
 800655c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006560:	4618      	mov	r0, r3
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40023800 	.word	0x40023800
 8006568:	0800e4e0 	.word	0x0800e4e0

0800656c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006570:	f7ff ffdc 	bl	800652c <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	0b5b      	lsrs	r3, r3, #13
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4903      	ldr	r1, [pc, #12]	; (8006590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006588:	4618      	mov	r0, r3
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40023800 	.word	0x40023800
 8006590:	0800e4e0 	.word	0x0800e4e0

08006594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10b      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d105      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d075      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065c8:	4b91      	ldr	r3, [pc, #580]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065ce:	f7fd ff1f 	bl	8004410 <HAL_GetTick>
 80065d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065d4:	e008      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065d6:	f7fd ff1b 	bl	8004410 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e189      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065e8:	4b8a      	ldr	r3, [pc, #552]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1f0      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d009      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	019a      	lsls	r2, r3, #6
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	071b      	lsls	r3, r3, #28
 800660c:	4981      	ldr	r1, [pc, #516]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01f      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006620:	4b7c      	ldr	r3, [pc, #496]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006626:	0f1b      	lsrs	r3, r3, #28
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	019a      	lsls	r2, r3, #6
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	061b      	lsls	r3, r3, #24
 800663a:	431a      	orrs	r2, r3
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	071b      	lsls	r3, r3, #28
 8006640:	4974      	ldr	r1, [pc, #464]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006648:	4b72      	ldr	r3, [pc, #456]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800664a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800664e:	f023 021f 	bic.w	r2, r3, #31
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	3b01      	subs	r3, #1
 8006658:	496e      	ldr	r1, [pc, #440]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800665a:	4313      	orrs	r3, r2
 800665c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00d      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	019a      	lsls	r2, r3, #6
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	061b      	lsls	r3, r3, #24
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	071b      	lsls	r3, r3, #28
 8006680:	4964      	ldr	r1, [pc, #400]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006688:	4b61      	ldr	r3, [pc, #388]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800668e:	f7fd febf 	bl	8004410 <HAL_GetTick>
 8006692:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006696:	f7fd febb 	bl	8004410 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e129      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066a8:	4b5a      	ldr	r3, [pc, #360]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d105      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d079      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066cc:	4b52      	ldr	r3, [pc, #328]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066d2:	f7fd fe9d 	bl	8004410 <HAL_GetTick>
 80066d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066d8:	e008      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80066da:	f7fd fe99 	bl	8004410 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e107      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066ec:	4b49      	ldr	r3, [pc, #292]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f8:	d0ef      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d020      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006706:	4b43      	ldr	r3, [pc, #268]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670c:	0f1b      	lsrs	r3, r3, #28
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	019a      	lsls	r2, r3, #6
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	061b      	lsls	r3, r3, #24
 8006720:	431a      	orrs	r2, r3
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	071b      	lsls	r3, r3, #28
 8006726:	493b      	ldr	r1, [pc, #236]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800672e:	4b39      	ldr	r3, [pc, #228]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006734:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	3b01      	subs	r3, #1
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	4934      	ldr	r1, [pc, #208]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01e      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006754:	4b2f      	ldr	r3, [pc, #188]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675a:	0e1b      	lsrs	r3, r3, #24
 800675c:	f003 030f 	and.w	r3, r3, #15
 8006760:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	019a      	lsls	r2, r3, #6
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	061b      	lsls	r3, r3, #24
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	071b      	lsls	r3, r3, #28
 8006774:	4927      	ldr	r1, [pc, #156]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800677c:	4b25      	ldr	r3, [pc, #148]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800677e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006782:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	4922      	ldr	r1, [pc, #136]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800678c:	4313      	orrs	r3, r2
 800678e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006792:	4b21      	ldr	r3, [pc, #132]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006794:	2201      	movs	r2, #1
 8006796:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006798:	f7fd fe3a 	bl	8004410 <HAL_GetTick>
 800679c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800679e:	e008      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80067a0:	f7fd fe36 	bl	8004410 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e0a4      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067b2:	4b18      	ldr	r3, [pc, #96]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067be:	d1ef      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 808b 	beq.w	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	4b10      	ldr	r3, [pc, #64]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	4a0f      	ldr	r2, [pc, #60]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067dc:	6413      	str	r3, [r2, #64]	; 0x40
 80067de:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80067ea:	4b0c      	ldr	r3, [pc, #48]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a0b      	ldr	r2, [pc, #44]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80067f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067f6:	f7fd fe0b 	bl	8004410 <HAL_GetTick>
 80067fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067fc:	e010      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067fe:	f7fd fe07 	bl	8004410 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d909      	bls.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e075      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006810:	42470068 	.word	0x42470068
 8006814:	40023800 	.word	0x40023800
 8006818:	42470070 	.word	0x42470070
 800681c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006820:	4b38      	ldr	r3, [pc, #224]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0e8      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800682c:	4b36      	ldr	r3, [pc, #216]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800682e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006834:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d02f      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	429a      	cmp	r2, r3
 8006848:	d028      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800684a:	4b2f      	ldr	r3, [pc, #188]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006852:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006854:	4b2d      	ldr	r3, [pc, #180]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006856:	2201      	movs	r2, #1
 8006858:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800685a:	4b2c      	ldr	r3, [pc, #176]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006860:	4a29      	ldr	r2, [pc, #164]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006866:	4b28      	ldr	r3, [pc, #160]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b01      	cmp	r3, #1
 8006870:	d114      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006872:	f7fd fdcd 	bl	8004410 <HAL_GetTick>
 8006876:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006878:	e00a      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800687a:	f7fd fdc9 	bl	8004410 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	f241 3288 	movw	r2, #5000	; 0x1388
 8006888:	4293      	cmp	r3, r2
 800688a:	d901      	bls.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e035      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006890:	4b1d      	ldr	r3, [pc, #116]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0ee      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a8:	d10d      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80068aa:	4b17      	ldr	r3, [pc, #92]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068be:	4912      	ldr	r1, [pc, #72]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	608b      	str	r3, [r1, #8]
 80068c4:	e005      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80068c6:	4b10      	ldr	r3, [pc, #64]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	4a0f      	ldr	r2, [pc, #60]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068d0:	6093      	str	r3, [r2, #8]
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068de:	490a      	ldr	r1, [pc, #40]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80068f6:	4b06      	ldr	r3, [pc, #24]	; (8006910 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80068f8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	40007000 	.word	0x40007000
 8006908:	40023800 	.word	0x40023800
 800690c:	42470e40 	.word	0x42470e40
 8006910:	424711e0 	.word	0x424711e0

08006914 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e066      	b.n	80069f8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	7f5b      	ldrb	r3, [r3, #29]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d105      	bne.n	8006940 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fb ff2a 	bl	8002794 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	22ca      	movs	r2, #202	; 0xca
 800694c:	625a      	str	r2, [r3, #36]	; 0x24
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2253      	movs	r2, #83	; 0x53
 8006954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f9c1 	bl	8006cde <RTC_EnterInitMode>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d12c      	bne.n	80069c0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006978:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6899      	ldr	r1, [r3, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	431a      	orrs	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	68d2      	ldr	r2, [r2, #12]
 80069a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6919      	ldr	r1, [r3, #16]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	041a      	lsls	r2, r3, #16
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f9c8 	bl	8006d4c <RTC_ExitInitMode>
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d113      	bne.n	80069ee <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699a      	ldr	r2, [r3, #24]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	22ff      	movs	r2, #255	; 0xff
 80069f4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a00:	b590      	push	{r4, r7, lr}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	7f1b      	ldrb	r3, [r3, #28]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_RTC_SetTime+0x1c>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e087      	b.n	8006b2c <HAL_RTC_SetTime+0x12c>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2202      	movs	r2, #2
 8006a26:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d126      	bne.n	8006a7c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f9a5 	bl	8006d96 <RTC_ByteToBcd2>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 f99e 	bl	8006d96 <RTC_ByteToBcd2>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a5e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	789b      	ldrb	r3, [r3, #2]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 f996 	bl	8006d96 <RTC_ByteToBcd2>
 8006a6a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a6c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	78db      	ldrb	r3, [r3, #3]
 8006a74:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	e018      	b.n	8006aae <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d102      	bne.n	8006a90 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a9c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006aa2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	78db      	ldrb	r3, [r3, #3]
 8006aa8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	22ca      	movs	r2, #202	; 0xca
 8006ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2253      	movs	r2, #83	; 0x53
 8006abc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f90d 	bl	8006cde <RTC_EnterInitMode>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006ac8:	7cfb      	ldrb	r3, [r7, #19]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d120      	bne.n	8006b10 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006ad8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006adc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006aec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6899      	ldr	r1, [r3, #8]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	431a      	orrs	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 f920 	bl	8006d4c <RTC_ExitInitMode>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006b10:	7cfb      	ldrb	r3, [r7, #19]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d102      	bne.n	8006b1c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	22ff      	movs	r2, #255	; 0xff
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	771a      	strb	r2, [r3, #28]

  return status;
 8006b2a:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd90      	pop	{r4, r7, pc}

08006b34 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006b66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	0c1b      	lsrs	r3, r3, #16
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	0a1b      	lsrs	r3, r3, #8
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	0d9b      	lsrs	r3, r3, #22
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11a      	bne.n	8006be6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 f90b 	bl	8006dd0 <RTC_Bcd2ToByte>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f902 	bl	8006dd0 <RTC_Bcd2ToByte>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	789b      	ldrb	r3, [r3, #2]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 f8f9 	bl	8006dd0 <RTC_Bcd2ToByte>
 8006bde:	4603      	mov	r3, r0
 8006be0:	461a      	mov	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	0c1b      	lsrs	r3, r3, #16
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	0a1b      	lsrs	r3, r3, #8
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	0b5b      	lsrs	r3, r3, #13
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d11a      	bne.n	8006c84 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	78db      	ldrb	r3, [r3, #3]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 f8bc 	bl	8006dd0 <RTC_Bcd2ToByte>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 f8b3 	bl	8006dd0 <RTC_Bcd2ToByte>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	789b      	ldrb	r3, [r3, #2]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 f8aa 	bl	8006dd0 <RTC_Bcd2ToByte>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ca8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006caa:	f7fd fbb1 	bl	8004410 <HAL_GetTick>
 8006cae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006cb0:	e009      	b.n	8006cc6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006cb2:	f7fd fbad 	bl	8004410 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e007      	b.n	8006cd6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0ee      	beq.n	8006cb2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d122      	bne.n	8006d42 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d0c:	f7fd fb80 	bl	8004410 <HAL_GetTick>
 8006d10:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006d12:	e00c      	b.n	8006d2e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d14:	f7fd fb7c 	bl	8004410 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d22:	d904      	bls.n	8006d2e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2204      	movs	r2, #4
 8006d28:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d102      	bne.n	8006d42 <RTC_EnterInitMode+0x64>
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d1e8      	bne.n	8006d14 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d66:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff ff89 	bl	8006c8e <HAL_RTC_WaitForSynchro>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2204      	movs	r2, #4
 8006d86:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006da4:	e005      	b.n	8006db2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	3301      	adds	r3, #1
 8006daa:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	3b0a      	subs	r3, #10
 8006db0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	2b09      	cmp	r3, #9
 8006db6:	d8f6      	bhi.n	8006da6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	b2db      	uxtb	r3, r3
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	091b      	lsrs	r3, r3, #4
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	0092      	lsls	r2, r2, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	4413      	add	r3, r2
 8006dfa:	b2db      	uxtb	r3, r3
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e07b      	b.n	8006f12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d108      	bne.n	8006e34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e2a:	d009      	beq.n	8006e40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	61da      	str	r2, [r3, #28]
 8006e32:	e005      	b.n	8006e40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d106      	bne.n	8006e60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fb fcfa 	bl	8002854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec4:	ea42 0103 	orr.w	r1, r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ecc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	0c1b      	lsrs	r3, r3, #16
 8006ede:	f003 0104 	and.w	r1, r3, #4
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	f003 0210 	and.w	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69da      	ldr	r2, [r3, #28]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b088      	sub	sp, #32
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	603b      	str	r3, [r7, #0]
 8006f26:	4613      	mov	r3, r2
 8006f28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_SPI_Transmit+0x22>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e126      	b.n	800718a <HAL_SPI_Transmit+0x270>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f44:	f7fd fa64 	bl	8004410 <HAL_GetTick>
 8006f48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f4a:	88fb      	ldrh	r3, [r7, #6]
 8006f4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d002      	beq.n	8006f60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f5e:	e10b      	b.n	8007178 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <HAL_SPI_Transmit+0x52>
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f70:	e102      	b.n	8007178 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2203      	movs	r2, #3
 8006f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	88fa      	ldrh	r2, [r7, #6]
 8006f8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb8:	d10f      	bne.n	8006fda <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d007      	beq.n	8006ff8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007000:	d14b      	bne.n	800709a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <HAL_SPI_Transmit+0xf6>
 800700a:	8afb      	ldrh	r3, [r7, #22]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d13e      	bne.n	800708e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007014:	881a      	ldrh	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007020:	1c9a      	adds	r2, r3, #2
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007034:	e02b      	b.n	800708e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b02      	cmp	r3, #2
 8007042:	d112      	bne.n	800706a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	881a      	ldrh	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	1c9a      	adds	r2, r3, #2
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	86da      	strh	r2, [r3, #54]	; 0x36
 8007068:	e011      	b.n	800708e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800706a:	f7fd f9d1 	bl	8004410 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d803      	bhi.n	8007082 <HAL_SPI_Transmit+0x168>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d102      	bne.n	8007088 <HAL_SPI_Transmit+0x16e>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800708c:	e074      	b.n	8007178 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1ce      	bne.n	8007036 <HAL_SPI_Transmit+0x11c>
 8007098:	e04c      	b.n	8007134 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <HAL_SPI_Transmit+0x18e>
 80070a2:	8afb      	ldrh	r3, [r7, #22]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d140      	bne.n	800712a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	7812      	ldrb	r2, [r2, #0]
 80070b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070ce:	e02c      	b.n	800712a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d113      	bne.n	8007106 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	7812      	ldrb	r2, [r2, #0]
 80070ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	86da      	strh	r2, [r3, #54]	; 0x36
 8007104:	e011      	b.n	800712a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007106:	f7fd f983 	bl	8004410 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d803      	bhi.n	800711e <HAL_SPI_Transmit+0x204>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711c:	d102      	bne.n	8007124 <HAL_SPI_Transmit+0x20a>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d102      	bne.n	800712a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007128:	e026      	b.n	8007178 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1cd      	bne.n	80070d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 f8b3 	bl	80072a4 <SPI_EndRxTxTransaction>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2220      	movs	r2, #32
 8007148:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007152:	2300      	movs	r3, #0
 8007154:	613b      	str	r3, [r7, #16]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	613b      	str	r3, [r7, #16]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e000      	b.n	8007178 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007176:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007188:	7ffb      	ldrb	r3, [r7, #31]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	4613      	mov	r3, r2
 80071a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071a4:	f7fd f934 	bl	8004410 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	4413      	add	r3, r2
 80071b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071b4:	f7fd f92c 	bl	8004410 <HAL_GetTick>
 80071b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071ba:	4b39      	ldr	r3, [pc, #228]	; (80072a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	015b      	lsls	r3, r3, #5
 80071c0:	0d1b      	lsrs	r3, r3, #20
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	fb02 f303 	mul.w	r3, r2, r3
 80071c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071ca:	e054      	b.n	8007276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d050      	beq.n	8007276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071d4:	f7fd f91c 	bl	8004410 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	69fa      	ldr	r2, [r7, #28]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d902      	bls.n	80071ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d13d      	bne.n	8007266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007202:	d111      	bne.n	8007228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800720c:	d004      	beq.n	8007218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007216:	d107      	bne.n	8007228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007230:	d10f      	bne.n	8007252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e017      	b.n	8007296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	3b01      	subs	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4013      	ands	r3, r2
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	429a      	cmp	r2, r3
 8007284:	bf0c      	ite	eq
 8007286:	2301      	moveq	r3, #1
 8007288:	2300      	movne	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	429a      	cmp	r2, r3
 8007292:	d19b      	bne.n	80071cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3720      	adds	r7, #32
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	2000016c 	.word	0x2000016c

080072a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b088      	sub	sp, #32
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80072b0:	4b1b      	ldr	r3, [pc, #108]	; (8007320 <SPI_EndRxTxTransaction+0x7c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a1b      	ldr	r2, [pc, #108]	; (8007324 <SPI_EndRxTxTransaction+0x80>)
 80072b6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ba:	0d5b      	lsrs	r3, r3, #21
 80072bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072c0:	fb02 f303 	mul.w	r3, r2, r3
 80072c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072ce:	d112      	bne.n	80072f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2200      	movs	r2, #0
 80072d8:	2180      	movs	r1, #128	; 0x80
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f7ff ff5a 	bl	8007194 <SPI_WaitFlagStateUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d016      	beq.n	8007314 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ea:	f043 0220 	orr.w	r2, r3, #32
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e00f      	b.n	8007316 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	3b01      	subs	r3, #1
 8007300:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730c:	2b80      	cmp	r3, #128	; 0x80
 800730e:	d0f2      	beq.n	80072f6 <SPI_EndRxTxTransaction+0x52>
 8007310:	e000      	b.n	8007314 <SPI_EndRxTxTransaction+0x70>
        break;
 8007312:	bf00      	nop
  }

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	2000016c 	.word	0x2000016c
 8007324:	165e9f81 	.word	0x165e9f81

08007328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e041      	b.n	80073be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d106      	bne.n	8007354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fb fd9e 	bl	8002e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3304      	adds	r3, #4
 8007364:	4619      	mov	r1, r3
 8007366:	4610      	mov	r0, r2
 8007368:	f000 fc7a 	bl	8007c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d001      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e04e      	b.n	800747e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0201 	orr.w	r2, r2, #1
 80073f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a23      	ldr	r2, [pc, #140]	; (800748c <HAL_TIM_Base_Start_IT+0xc4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d022      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0x80>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740a:	d01d      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0x80>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1f      	ldr	r2, [pc, #124]	; (8007490 <HAL_TIM_Base_Start_IT+0xc8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d018      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0x80>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1e      	ldr	r2, [pc, #120]	; (8007494 <HAL_TIM_Base_Start_IT+0xcc>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d013      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0x80>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1c      	ldr	r2, [pc, #112]	; (8007498 <HAL_TIM_Base_Start_IT+0xd0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00e      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0x80>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1b      	ldr	r2, [pc, #108]	; (800749c <HAL_TIM_Base_Start_IT+0xd4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d009      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0x80>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a19      	ldr	r2, [pc, #100]	; (80074a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0x80>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a18      	ldr	r2, [pc, #96]	; (80074a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d111      	bne.n	800746c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b06      	cmp	r3, #6
 8007458:	d010      	beq.n	800747c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f042 0201 	orr.w	r2, r2, #1
 8007468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800746a:	e007      	b.n	800747c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40010000 	.word	0x40010000
 8007490:	40000400 	.word	0x40000400
 8007494:	40000800 	.word	0x40000800
 8007498:	40000c00 	.word	0x40000c00
 800749c:	40010400 	.word	0x40010400
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40001800 	.word	0x40001800

080074a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e041      	b.n	800753e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f839 	bl	8007546 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f000 fbba 	bl	8007c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
	...

0800755c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d109      	bne.n	8007580 <HAL_TIM_PWM_Start+0x24>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	bf14      	ite	ne
 8007578:	2301      	movne	r3, #1
 800757a:	2300      	moveq	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	e022      	b.n	80075c6 <HAL_TIM_PWM_Start+0x6a>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b04      	cmp	r3, #4
 8007584:	d109      	bne.n	800759a <HAL_TIM_PWM_Start+0x3e>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b01      	cmp	r3, #1
 8007590:	bf14      	ite	ne
 8007592:	2301      	movne	r3, #1
 8007594:	2300      	moveq	r3, #0
 8007596:	b2db      	uxtb	r3, r3
 8007598:	e015      	b.n	80075c6 <HAL_TIM_PWM_Start+0x6a>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b08      	cmp	r3, #8
 800759e:	d109      	bne.n	80075b4 <HAL_TIM_PWM_Start+0x58>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	bf14      	ite	ne
 80075ac:	2301      	movne	r3, #1
 80075ae:	2300      	moveq	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	e008      	b.n	80075c6 <HAL_TIM_PWM_Start+0x6a>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	bf14      	ite	ne
 80075c0:	2301      	movne	r3, #1
 80075c2:	2300      	moveq	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e07c      	b.n	80076c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d104      	bne.n	80075de <HAL_TIM_PWM_Start+0x82>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075dc:	e013      	b.n	8007606 <HAL_TIM_PWM_Start+0xaa>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d104      	bne.n	80075ee <HAL_TIM_PWM_Start+0x92>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075ec:	e00b      	b.n	8007606 <HAL_TIM_PWM_Start+0xaa>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d104      	bne.n	80075fe <HAL_TIM_PWM_Start+0xa2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075fc:	e003      	b.n	8007606 <HAL_TIM_PWM_Start+0xaa>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2202      	movs	r2, #2
 8007602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2201      	movs	r2, #1
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fe10 	bl	8008234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a2d      	ldr	r2, [pc, #180]	; (80076d0 <HAL_TIM_PWM_Start+0x174>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d004      	beq.n	8007628 <HAL_TIM_PWM_Start+0xcc>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a2c      	ldr	r2, [pc, #176]	; (80076d4 <HAL_TIM_PWM_Start+0x178>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d101      	bne.n	800762c <HAL_TIM_PWM_Start+0xd0>
 8007628:	2301      	movs	r3, #1
 800762a:	e000      	b.n	800762e <HAL_TIM_PWM_Start+0xd2>
 800762c:	2300      	movs	r3, #0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d007      	beq.n	8007642 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a22      	ldr	r2, [pc, #136]	; (80076d0 <HAL_TIM_PWM_Start+0x174>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d022      	beq.n	8007692 <HAL_TIM_PWM_Start+0x136>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007654:	d01d      	beq.n	8007692 <HAL_TIM_PWM_Start+0x136>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1f      	ldr	r2, [pc, #124]	; (80076d8 <HAL_TIM_PWM_Start+0x17c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d018      	beq.n	8007692 <HAL_TIM_PWM_Start+0x136>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a1d      	ldr	r2, [pc, #116]	; (80076dc <HAL_TIM_PWM_Start+0x180>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d013      	beq.n	8007692 <HAL_TIM_PWM_Start+0x136>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a1c      	ldr	r2, [pc, #112]	; (80076e0 <HAL_TIM_PWM_Start+0x184>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00e      	beq.n	8007692 <HAL_TIM_PWM_Start+0x136>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a16      	ldr	r2, [pc, #88]	; (80076d4 <HAL_TIM_PWM_Start+0x178>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d009      	beq.n	8007692 <HAL_TIM_PWM_Start+0x136>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a18      	ldr	r2, [pc, #96]	; (80076e4 <HAL_TIM_PWM_Start+0x188>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d004      	beq.n	8007692 <HAL_TIM_PWM_Start+0x136>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a16      	ldr	r2, [pc, #88]	; (80076e8 <HAL_TIM_PWM_Start+0x18c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d111      	bne.n	80076b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b06      	cmp	r3, #6
 80076a2:	d010      	beq.n	80076c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b4:	e007      	b.n	80076c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0201 	orr.w	r2, r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	40010000 	.word	0x40010000
 80076d4:	40010400 	.word	0x40010400
 80076d8:	40000400 	.word	0x40000400
 80076dc:	40000800 	.word	0x40000800
 80076e0:	40000c00 	.word	0x40000c00
 80076e4:	40014000 	.word	0x40014000
 80076e8:	40001800 	.word	0x40001800

080076ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d122      	bne.n	8007748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b02      	cmp	r3, #2
 800770e:	d11b      	bne.n	8007748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0202 	mvn.w	r2, #2
 8007718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	f003 0303 	and.w	r3, r3, #3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fa77 	bl	8007c22 <HAL_TIM_IC_CaptureCallback>
 8007734:	e005      	b.n	8007742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fa69 	bl	8007c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fa7a 	bl	8007c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	f003 0304 	and.w	r3, r3, #4
 8007752:	2b04      	cmp	r3, #4
 8007754:	d122      	bne.n	800779c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b04      	cmp	r3, #4
 8007762:	d11b      	bne.n	800779c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f06f 0204 	mvn.w	r2, #4
 800776c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2202      	movs	r2, #2
 8007772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa4d 	bl	8007c22 <HAL_TIM_IC_CaptureCallback>
 8007788:	e005      	b.n	8007796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa3f 	bl	8007c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fa50 	bl	8007c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b08      	cmp	r3, #8
 80077a8:	d122      	bne.n	80077f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d11b      	bne.n	80077f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f06f 0208 	mvn.w	r2, #8
 80077c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2204      	movs	r2, #4
 80077c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	f003 0303 	and.w	r3, r3, #3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa23 	bl	8007c22 <HAL_TIM_IC_CaptureCallback>
 80077dc:	e005      	b.n	80077ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa15 	bl	8007c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fa26 	bl	8007c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	2b10      	cmp	r3, #16
 80077fc:	d122      	bne.n	8007844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b10      	cmp	r3, #16
 800780a:	d11b      	bne.n	8007844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f06f 0210 	mvn.w	r2, #16
 8007814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2208      	movs	r2, #8
 800781a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f9f9 	bl	8007c22 <HAL_TIM_IC_CaptureCallback>
 8007830:	e005      	b.n	800783e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f9eb 	bl	8007c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f9fc 	bl	8007c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b01      	cmp	r3, #1
 8007850:	d10e      	bne.n	8007870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b01      	cmp	r3, #1
 800785e:	d107      	bne.n	8007870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0201 	mvn.w	r2, #1
 8007868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fa ff1c 	bl	80026a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787a:	2b80      	cmp	r3, #128	; 0x80
 800787c:	d10e      	bne.n	800789c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007888:	2b80      	cmp	r3, #128	; 0x80
 800788a:	d107      	bne.n	800789c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fdca 	bl	8008430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d10e      	bne.n	80078c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b4:	2b40      	cmp	r3, #64	; 0x40
 80078b6:	d107      	bne.n	80078c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9c1 	bl	8007c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f003 0320 	and.w	r3, r3, #32
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d10e      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f003 0320 	and.w	r3, r3, #32
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d107      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f06f 0220 	mvn.w	r2, #32
 80078ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fd94 	bl	800841c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007912:	2b01      	cmp	r3, #1
 8007914:	d101      	bne.n	800791a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007916:	2302      	movs	r3, #2
 8007918:	e0ae      	b.n	8007a78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b0c      	cmp	r3, #12
 8007926:	f200 809f 	bhi.w	8007a68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800792a:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007965 	.word	0x08007965
 8007934:	08007a69 	.word	0x08007a69
 8007938:	08007a69 	.word	0x08007a69
 800793c:	08007a69 	.word	0x08007a69
 8007940:	080079a5 	.word	0x080079a5
 8007944:	08007a69 	.word	0x08007a69
 8007948:	08007a69 	.word	0x08007a69
 800794c:	08007a69 	.word	0x08007a69
 8007950:	080079e7 	.word	0x080079e7
 8007954:	08007a69 	.word	0x08007a69
 8007958:	08007a69 	.word	0x08007a69
 800795c:	08007a69 	.word	0x08007a69
 8007960:	08007a27 	.word	0x08007a27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68b9      	ldr	r1, [r7, #8]
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fa18 	bl	8007da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0208 	orr.w	r2, r2, #8
 800797e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699a      	ldr	r2, [r3, #24]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0204 	bic.w	r2, r2, #4
 800798e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6999      	ldr	r1, [r3, #24]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	619a      	str	r2, [r3, #24]
      break;
 80079a2:	e064      	b.n	8007a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fa68 	bl	8007e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6999      	ldr	r1, [r3, #24]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	021a      	lsls	r2, r3, #8
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	619a      	str	r2, [r3, #24]
      break;
 80079e4:	e043      	b.n	8007a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fabd 	bl	8007f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f042 0208 	orr.w	r2, r2, #8
 8007a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69da      	ldr	r2, [r3, #28]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0204 	bic.w	r2, r2, #4
 8007a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69d9      	ldr	r1, [r3, #28]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	691a      	ldr	r2, [r3, #16]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	61da      	str	r2, [r3, #28]
      break;
 8007a24:	e023      	b.n	8007a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fb11 	bl	8008054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69da      	ldr	r2, [r3, #28]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69da      	ldr	r2, [r3, #28]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69d9      	ldr	r1, [r3, #28]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	021a      	lsls	r2, r3, #8
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	61da      	str	r2, [r3, #28]
      break;
 8007a66:	e002      	b.n	8007a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_TIM_ConfigClockSource+0x1c>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e0b4      	b.n	8007c06 <HAL_TIM_ConfigClockSource+0x186>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ad4:	d03e      	beq.n	8007b54 <HAL_TIM_ConfigClockSource+0xd4>
 8007ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ada:	f200 8087 	bhi.w	8007bec <HAL_TIM_ConfigClockSource+0x16c>
 8007ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae2:	f000 8086 	beq.w	8007bf2 <HAL_TIM_ConfigClockSource+0x172>
 8007ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aea:	d87f      	bhi.n	8007bec <HAL_TIM_ConfigClockSource+0x16c>
 8007aec:	2b70      	cmp	r3, #112	; 0x70
 8007aee:	d01a      	beq.n	8007b26 <HAL_TIM_ConfigClockSource+0xa6>
 8007af0:	2b70      	cmp	r3, #112	; 0x70
 8007af2:	d87b      	bhi.n	8007bec <HAL_TIM_ConfigClockSource+0x16c>
 8007af4:	2b60      	cmp	r3, #96	; 0x60
 8007af6:	d050      	beq.n	8007b9a <HAL_TIM_ConfigClockSource+0x11a>
 8007af8:	2b60      	cmp	r3, #96	; 0x60
 8007afa:	d877      	bhi.n	8007bec <HAL_TIM_ConfigClockSource+0x16c>
 8007afc:	2b50      	cmp	r3, #80	; 0x50
 8007afe:	d03c      	beq.n	8007b7a <HAL_TIM_ConfigClockSource+0xfa>
 8007b00:	2b50      	cmp	r3, #80	; 0x50
 8007b02:	d873      	bhi.n	8007bec <HAL_TIM_ConfigClockSource+0x16c>
 8007b04:	2b40      	cmp	r3, #64	; 0x40
 8007b06:	d058      	beq.n	8007bba <HAL_TIM_ConfigClockSource+0x13a>
 8007b08:	2b40      	cmp	r3, #64	; 0x40
 8007b0a:	d86f      	bhi.n	8007bec <HAL_TIM_ConfigClockSource+0x16c>
 8007b0c:	2b30      	cmp	r3, #48	; 0x30
 8007b0e:	d064      	beq.n	8007bda <HAL_TIM_ConfigClockSource+0x15a>
 8007b10:	2b30      	cmp	r3, #48	; 0x30
 8007b12:	d86b      	bhi.n	8007bec <HAL_TIM_ConfigClockSource+0x16c>
 8007b14:	2b20      	cmp	r3, #32
 8007b16:	d060      	beq.n	8007bda <HAL_TIM_ConfigClockSource+0x15a>
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	d867      	bhi.n	8007bec <HAL_TIM_ConfigClockSource+0x16c>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d05c      	beq.n	8007bda <HAL_TIM_ConfigClockSource+0x15a>
 8007b20:	2b10      	cmp	r3, #16
 8007b22:	d05a      	beq.n	8007bda <HAL_TIM_ConfigClockSource+0x15a>
 8007b24:	e062      	b.n	8007bec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	6899      	ldr	r1, [r3, #8]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f000 fb5d 	bl	80081f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	609a      	str	r2, [r3, #8]
      break;
 8007b52:	e04f      	b.n	8007bf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	6899      	ldr	r1, [r3, #8]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f000 fb46 	bl	80081f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b76:	609a      	str	r2, [r3, #8]
      break;
 8007b78:	e03c      	b.n	8007bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6818      	ldr	r0, [r3, #0]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	6859      	ldr	r1, [r3, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	461a      	mov	r2, r3
 8007b88:	f000 faba 	bl	8008100 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2150      	movs	r1, #80	; 0x50
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 fb13 	bl	80081be <TIM_ITRx_SetConfig>
      break;
 8007b98:	e02c      	b.n	8007bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	6859      	ldr	r1, [r3, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	f000 fad9 	bl	800815e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2160      	movs	r1, #96	; 0x60
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fb03 	bl	80081be <TIM_ITRx_SetConfig>
      break;
 8007bb8:	e01c      	b.n	8007bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	6859      	ldr	r1, [r3, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f000 fa9a 	bl	8008100 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2140      	movs	r1, #64	; 0x40
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 faf3 	bl	80081be <TIM_ITRx_SetConfig>
      break;
 8007bd8:	e00c      	b.n	8007bf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f000 faea 	bl	80081be <TIM_ITRx_SetConfig>
      break;
 8007bea:	e003      	b.n	8007bf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf0:	e000      	b.n	8007bf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a40      	ldr	r2, [pc, #256]	; (8007d74 <TIM_Base_SetConfig+0x114>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d013      	beq.n	8007ca0 <TIM_Base_SetConfig+0x40>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c7e:	d00f      	beq.n	8007ca0 <TIM_Base_SetConfig+0x40>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a3d      	ldr	r2, [pc, #244]	; (8007d78 <TIM_Base_SetConfig+0x118>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d00b      	beq.n	8007ca0 <TIM_Base_SetConfig+0x40>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a3c      	ldr	r2, [pc, #240]	; (8007d7c <TIM_Base_SetConfig+0x11c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d007      	beq.n	8007ca0 <TIM_Base_SetConfig+0x40>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a3b      	ldr	r2, [pc, #236]	; (8007d80 <TIM_Base_SetConfig+0x120>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d003      	beq.n	8007ca0 <TIM_Base_SetConfig+0x40>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a3a      	ldr	r2, [pc, #232]	; (8007d84 <TIM_Base_SetConfig+0x124>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d108      	bne.n	8007cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a2f      	ldr	r2, [pc, #188]	; (8007d74 <TIM_Base_SetConfig+0x114>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d02b      	beq.n	8007d12 <TIM_Base_SetConfig+0xb2>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc0:	d027      	beq.n	8007d12 <TIM_Base_SetConfig+0xb2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a2c      	ldr	r2, [pc, #176]	; (8007d78 <TIM_Base_SetConfig+0x118>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d023      	beq.n	8007d12 <TIM_Base_SetConfig+0xb2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a2b      	ldr	r2, [pc, #172]	; (8007d7c <TIM_Base_SetConfig+0x11c>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d01f      	beq.n	8007d12 <TIM_Base_SetConfig+0xb2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a2a      	ldr	r2, [pc, #168]	; (8007d80 <TIM_Base_SetConfig+0x120>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d01b      	beq.n	8007d12 <TIM_Base_SetConfig+0xb2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a29      	ldr	r2, [pc, #164]	; (8007d84 <TIM_Base_SetConfig+0x124>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d017      	beq.n	8007d12 <TIM_Base_SetConfig+0xb2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a28      	ldr	r2, [pc, #160]	; (8007d88 <TIM_Base_SetConfig+0x128>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d013      	beq.n	8007d12 <TIM_Base_SetConfig+0xb2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a27      	ldr	r2, [pc, #156]	; (8007d8c <TIM_Base_SetConfig+0x12c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d00f      	beq.n	8007d12 <TIM_Base_SetConfig+0xb2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a26      	ldr	r2, [pc, #152]	; (8007d90 <TIM_Base_SetConfig+0x130>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d00b      	beq.n	8007d12 <TIM_Base_SetConfig+0xb2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a25      	ldr	r2, [pc, #148]	; (8007d94 <TIM_Base_SetConfig+0x134>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d007      	beq.n	8007d12 <TIM_Base_SetConfig+0xb2>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a24      	ldr	r2, [pc, #144]	; (8007d98 <TIM_Base_SetConfig+0x138>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d003      	beq.n	8007d12 <TIM_Base_SetConfig+0xb2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a23      	ldr	r2, [pc, #140]	; (8007d9c <TIM_Base_SetConfig+0x13c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d108      	bne.n	8007d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a0a      	ldr	r2, [pc, #40]	; (8007d74 <TIM_Base_SetConfig+0x114>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_Base_SetConfig+0xf8>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a0c      	ldr	r2, [pc, #48]	; (8007d84 <TIM_Base_SetConfig+0x124>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d103      	bne.n	8007d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	691a      	ldr	r2, [r3, #16]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	615a      	str	r2, [r3, #20]
}
 8007d66:	bf00      	nop
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	40010000 	.word	0x40010000
 8007d78:	40000400 	.word	0x40000400
 8007d7c:	40000800 	.word	0x40000800
 8007d80:	40000c00 	.word	0x40000c00
 8007d84:	40010400 	.word	0x40010400
 8007d88:	40014000 	.word	0x40014000
 8007d8c:	40014400 	.word	0x40014400
 8007d90:	40014800 	.word	0x40014800
 8007d94:	40001800 	.word	0x40001800
 8007d98:	40001c00 	.word	0x40001c00
 8007d9c:	40002000 	.word	0x40002000

08007da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	f023 0201 	bic.w	r2, r3, #1
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0303 	bic.w	r3, r3, #3
 8007dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f023 0302 	bic.w	r3, r3, #2
 8007de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a20      	ldr	r2, [pc, #128]	; (8007e78 <TIM_OC1_SetConfig+0xd8>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d003      	beq.n	8007e04 <TIM_OC1_SetConfig+0x64>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a1f      	ldr	r2, [pc, #124]	; (8007e7c <TIM_OC1_SetConfig+0xdc>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d10c      	bne.n	8007e1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f023 0308 	bic.w	r3, r3, #8
 8007e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f023 0304 	bic.w	r3, r3, #4
 8007e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a15      	ldr	r2, [pc, #84]	; (8007e78 <TIM_OC1_SetConfig+0xd8>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d003      	beq.n	8007e2e <TIM_OC1_SetConfig+0x8e>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a14      	ldr	r2, [pc, #80]	; (8007e7c <TIM_OC1_SetConfig+0xdc>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d111      	bne.n	8007e52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	621a      	str	r2, [r3, #32]
}
 8007e6c:	bf00      	nop
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	40010000 	.word	0x40010000
 8007e7c:	40010400 	.word	0x40010400

08007e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	f023 0210 	bic.w	r2, r3, #16
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	021b      	lsls	r3, r3, #8
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f023 0320 	bic.w	r3, r3, #32
 8007eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <TIM_OC2_SetConfig+0xe4>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d003      	beq.n	8007ee8 <TIM_OC2_SetConfig+0x68>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a21      	ldr	r2, [pc, #132]	; (8007f68 <TIM_OC2_SetConfig+0xe8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d10d      	bne.n	8007f04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a17      	ldr	r2, [pc, #92]	; (8007f64 <TIM_OC2_SetConfig+0xe4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d003      	beq.n	8007f14 <TIM_OC2_SetConfig+0x94>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a16      	ldr	r2, [pc, #88]	; (8007f68 <TIM_OC2_SetConfig+0xe8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d113      	bne.n	8007f3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	621a      	str	r2, [r3, #32]
}
 8007f56:	bf00      	nop
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40010000 	.word	0x40010000
 8007f68:	40010400 	.word	0x40010400

08007f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f023 0303 	bic.w	r3, r3, #3
 8007fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	021b      	lsls	r3, r3, #8
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a21      	ldr	r2, [pc, #132]	; (800804c <TIM_OC3_SetConfig+0xe0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d003      	beq.n	8007fd2 <TIM_OC3_SetConfig+0x66>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a20      	ldr	r2, [pc, #128]	; (8008050 <TIM_OC3_SetConfig+0xe4>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d10d      	bne.n	8007fee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a16      	ldr	r2, [pc, #88]	; (800804c <TIM_OC3_SetConfig+0xe0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_OC3_SetConfig+0x92>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a15      	ldr	r2, [pc, #84]	; (8008050 <TIM_OC3_SetConfig+0xe4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d113      	bne.n	8008026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800800c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	621a      	str	r2, [r3, #32]
}
 8008040:	bf00      	nop
 8008042:	371c      	adds	r7, #28
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	40010000 	.word	0x40010000
 8008050:	40010400 	.word	0x40010400

08008054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800808a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800809e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	031b      	lsls	r3, r3, #12
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a12      	ldr	r2, [pc, #72]	; (80080f8 <TIM_OC4_SetConfig+0xa4>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_OC4_SetConfig+0x68>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a11      	ldr	r2, [pc, #68]	; (80080fc <TIM_OC4_SetConfig+0xa8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d109      	bne.n	80080d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	019b      	lsls	r3, r3, #6
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	40010000 	.word	0x40010000
 80080fc:	40010400 	.word	0x40010400

08008100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6a1b      	ldr	r3, [r3, #32]
 8008110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	f023 0201 	bic.w	r2, r3, #1
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800812a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4313      	orrs	r3, r2
 8008134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f023 030a 	bic.w	r3, r3, #10
 800813c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4313      	orrs	r3, r2
 8008144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	621a      	str	r2, [r3, #32]
}
 8008152:	bf00      	nop
 8008154:	371c      	adds	r7, #28
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800815e:	b480      	push	{r7}
 8008160:	b087      	sub	sp, #28
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	f023 0210 	bic.w	r2, r3, #16
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008188:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	031b      	lsls	r3, r3, #12
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800819a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	011b      	lsls	r3, r3, #4
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	621a      	str	r2, [r3, #32]
}
 80081b2:	bf00      	nop
 80081b4:	371c      	adds	r7, #28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081be:	b480      	push	{r7}
 80081c0:	b085      	sub	sp, #20
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4313      	orrs	r3, r2
 80081dc:	f043 0307 	orr.w	r3, r3, #7
 80081e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	609a      	str	r2, [r3, #8]
}
 80081e8:	bf00      	nop
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800820e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	021a      	lsls	r2, r3, #8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	431a      	orrs	r2, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4313      	orrs	r3, r2
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	609a      	str	r2, [r3, #8]
}
 8008228:	bf00      	nop
 800822a:	371c      	adds	r7, #28
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f003 031f 	and.w	r3, r3, #31
 8008246:	2201      	movs	r2, #1
 8008248:	fa02 f303 	lsl.w	r3, r2, r3
 800824c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a1a      	ldr	r2, [r3, #32]
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	43db      	mvns	r3, r3
 8008256:	401a      	ands	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6a1a      	ldr	r2, [r3, #32]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f003 031f 	and.w	r3, r3, #31
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	fa01 f303 	lsl.w	r3, r1, r3
 800826c:	431a      	orrs	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	621a      	str	r2, [r3, #32]
}
 8008272:	bf00      	nop
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
	...

08008280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008294:	2302      	movs	r3, #2
 8008296:	e05a      	b.n	800834e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a21      	ldr	r2, [pc, #132]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d022      	beq.n	8008322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e4:	d01d      	beq.n	8008322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1d      	ldr	r2, [pc, #116]	; (8008360 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d018      	beq.n	8008322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a1b      	ldr	r2, [pc, #108]	; (8008364 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d013      	beq.n	8008322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1a      	ldr	r2, [pc, #104]	; (8008368 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00e      	beq.n	8008322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a18      	ldr	r2, [pc, #96]	; (800836c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d009      	beq.n	8008322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a17      	ldr	r2, [pc, #92]	; (8008370 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d004      	beq.n	8008322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a15      	ldr	r2, [pc, #84]	; (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d10c      	bne.n	800833c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008328:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	4313      	orrs	r3, r2
 8008332:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	40010000 	.word	0x40010000
 8008360:	40000400 	.word	0x40000400
 8008364:	40000800 	.word	0x40000800
 8008368:	40000c00 	.word	0x40000c00
 800836c:	40010400 	.word	0x40010400
 8008370:	40014000 	.word	0x40014000
 8008374:	40001800 	.word	0x40001800

08008378 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008390:	2302      	movs	r3, #2
 8008392:	e03d      	b.n	8008410 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e03f      	b.n	80084d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d106      	bne.n	8008470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7fa fe0a 	bl	8003084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2224      	movs	r2, #36	; 0x24
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fd81 	bl	8008f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	691a      	ldr	r2, [r3, #16]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800849c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	695a      	ldr	r2, [r3, #20]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b08a      	sub	sp, #40	; 0x28
 80084e2:	af02      	add	r7, sp, #8
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	603b      	str	r3, [r7, #0]
 80084ea:	4613      	mov	r3, r2
 80084ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	f040 808c 	bne.w	8008618 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <HAL_UART_Receive+0x2e>
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e084      	b.n	800861a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008516:	2b01      	cmp	r3, #1
 8008518:	d101      	bne.n	800851e <HAL_UART_Receive+0x40>
 800851a:	2302      	movs	r3, #2
 800851c:	e07d      	b.n	800861a <HAL_UART_Receive+0x13c>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2222      	movs	r2, #34	; 0x22
 8008530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800853a:	f7fb ff69 	bl	8004410 <HAL_GetTick>
 800853e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	88fa      	ldrh	r2, [r7, #6]
 8008544:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	88fa      	ldrh	r2, [r7, #6]
 800854a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008554:	d108      	bne.n	8008568 <HAL_UART_Receive+0x8a>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d104      	bne.n	8008568 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800855e:	2300      	movs	r3, #0
 8008560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	61bb      	str	r3, [r7, #24]
 8008566:	e003      	b.n	8008570 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800856c:	2300      	movs	r3, #0
 800856e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008578:	e043      	b.n	8008602 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2200      	movs	r2, #0
 8008582:	2120      	movs	r1, #32
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 fafb 	bl	8008b80 <UART_WaitOnFlagUntilTimeout>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e042      	b.n	800861a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10c      	bne.n	80085b4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	3302      	adds	r3, #2
 80085b0:	61bb      	str	r3, [r7, #24]
 80085b2:	e01f      	b.n	80085f4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085bc:	d007      	beq.n	80085ce <HAL_UART_Receive+0xf0>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <HAL_UART_Receive+0xfe>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d106      	bne.n	80085dc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	e008      	b.n	80085ee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	3301      	adds	r3, #1
 80085f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	3b01      	subs	r3, #1
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1b6      	bne.n	800857a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2220      	movs	r2, #32
 8008610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e000      	b.n	800861a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008618:	2302      	movs	r3, #2
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b0ba      	sub	sp, #232	; 0xe8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800864a:	2300      	movs	r3, #0
 800864c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008650:	2300      	movs	r3, #0
 8008652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800865a:	f003 030f 	and.w	r3, r3, #15
 800865e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10f      	bne.n	800868a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800866a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d009      	beq.n	800868a <HAL_UART_IRQHandler+0x66>
 8008676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fbc9 	bl	8008e1a <UART_Receive_IT>
      return;
 8008688:	e256      	b.n	8008b38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800868a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 80de 	beq.w	8008850 <HAL_UART_IRQHandler+0x22c>
 8008694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d106      	bne.n	80086ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 80d1 	beq.w	8008850 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00b      	beq.n	80086d2 <HAL_UART_IRQHandler+0xae>
 80086ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d005      	beq.n	80086d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	f043 0201 	orr.w	r2, r3, #1
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00b      	beq.n	80086f6 <HAL_UART_IRQHandler+0xd2>
 80086de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d005      	beq.n	80086f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	f043 0202 	orr.w	r2, r3, #2
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00b      	beq.n	800871a <HAL_UART_IRQHandler+0xf6>
 8008702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d005      	beq.n	800871a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	f043 0204 	orr.w	r2, r3, #4
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800871a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800871e:	f003 0308 	and.w	r3, r3, #8
 8008722:	2b00      	cmp	r3, #0
 8008724:	d011      	beq.n	800874a <HAL_UART_IRQHandler+0x126>
 8008726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d005      	beq.n	800874a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	f043 0208 	orr.w	r2, r3, #8
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	f000 81ed 	beq.w	8008b2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d008      	beq.n	8008772 <HAL_UART_IRQHandler+0x14e>
 8008760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008764:	f003 0320 	and.w	r3, r3, #32
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fb54 	bl	8008e1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877c:	2b40      	cmp	r3, #64	; 0x40
 800877e:	bf0c      	ite	eq
 8008780:	2301      	moveq	r3, #1
 8008782:	2300      	movne	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	f003 0308 	and.w	r3, r3, #8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <HAL_UART_IRQHandler+0x17a>
 8008796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800879a:	2b00      	cmp	r3, #0
 800879c:	d04f      	beq.n	800883e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa5c 	bl	8008c5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ae:	2b40      	cmp	r3, #64	; 0x40
 80087b0:	d141      	bne.n	8008836 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3314      	adds	r3, #20
 80087b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3314      	adds	r3, #20
 80087da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087ee:	e841 2300 	strex	r3, r2, [r1]
 80087f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1d9      	bne.n	80087b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	2b00      	cmp	r3, #0
 8008804:	d013      	beq.n	800882e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	4a7d      	ldr	r2, [pc, #500]	; (8008a00 <HAL_UART_IRQHandler+0x3dc>)
 800880c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008812:	4618      	mov	r0, r3
 8008814:	f7fb ffad 	bl	8004772 <HAL_DMA_Abort_IT>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d016      	beq.n	800884c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008828:	4610      	mov	r0, r2
 800882a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	e00e      	b.n	800884c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f990 	bl	8008b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008834:	e00a      	b.n	800884c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f98c 	bl	8008b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800883c:	e006      	b.n	800884c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f988 	bl	8008b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800884a:	e170      	b.n	8008b2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800884c:	bf00      	nop
    return;
 800884e:	e16e      	b.n	8008b2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008854:	2b01      	cmp	r3, #1
 8008856:	f040 814a 	bne.w	8008aee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800885a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885e:	f003 0310 	and.w	r3, r3, #16
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 8143 	beq.w	8008aee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 813c 	beq.w	8008aee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008876:	2300      	movs	r3, #0
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	60bb      	str	r3, [r7, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	60bb      	str	r3, [r7, #8]
 800888a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008896:	2b40      	cmp	r3, #64	; 0x40
 8008898:	f040 80b4 	bne.w	8008a04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 8140 	beq.w	8008b32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088ba:	429a      	cmp	r2, r3
 80088bc:	f080 8139 	bcs.w	8008b32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d2:	f000 8088 	beq.w	80089e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	330c      	adds	r3, #12
 80088dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088e4:	e853 3f00 	ldrex	r3, [r3]
 80088e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	330c      	adds	r3, #12
 80088fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008902:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800890e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800891a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1d9      	bne.n	80088d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3314      	adds	r3, #20
 8008928:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008934:	f023 0301 	bic.w	r3, r3, #1
 8008938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3314      	adds	r3, #20
 8008942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008946:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800894a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800894e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e1      	bne.n	8008922 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3314      	adds	r3, #20
 8008964:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800896e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3314      	adds	r3, #20
 800897e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008982:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008984:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e3      	bne.n	800895e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2220      	movs	r2, #32
 800899a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	330c      	adds	r3, #12
 80089aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089b6:	f023 0310 	bic.w	r3, r3, #16
 80089ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	330c      	adds	r3, #12
 80089c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80089ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089d0:	e841 2300 	strex	r3, r2, [r1]
 80089d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e3      	bne.n	80089a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fb fe56 	bl	8004692 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8b6 	bl	8008b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089fc:	e099      	b.n	8008b32 <HAL_UART_IRQHandler+0x50e>
 80089fe:	bf00      	nop
 8008a00:	08008d23 	.word	0x08008d23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 808b 	beq.w	8008b36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 8086 	beq.w	8008b36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a4e:	647a      	str	r2, [r7, #68]	; 0x44
 8008a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e3      	bne.n	8008a2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3314      	adds	r3, #20
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	e853 3f00 	ldrex	r3, [r3]
 8008a70:	623b      	str	r3, [r7, #32]
   return(result);
 8008a72:	6a3b      	ldr	r3, [r7, #32]
 8008a74:	f023 0301 	bic.w	r3, r3, #1
 8008a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3314      	adds	r3, #20
 8008a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a86:	633a      	str	r2, [r7, #48]	; 0x30
 8008a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e3      	bne.n	8008a62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	330c      	adds	r3, #12
 8008aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0310 	bic.w	r3, r3, #16
 8008abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	330c      	adds	r3, #12
 8008ac8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008acc:	61fa      	str	r2, [r7, #28]
 8008ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	69b9      	ldr	r1, [r7, #24]
 8008ad2:	69fa      	ldr	r2, [r7, #28]
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e3      	bne.n	8008aa8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f83e 	bl	8008b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008aec:	e023      	b.n	8008b36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <HAL_UART_IRQHandler+0x4ea>
 8008afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f91f 	bl	8008d4a <UART_Transmit_IT>
    return;
 8008b0c:	e014      	b.n	8008b38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00e      	beq.n	8008b38 <HAL_UART_IRQHandler+0x514>
 8008b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d008      	beq.n	8008b38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f95f 	bl	8008dea <UART_EndTransmit_IT>
    return;
 8008b2c:	e004      	b.n	8008b38 <HAL_UART_IRQHandler+0x514>
    return;
 8008b2e:	bf00      	nop
 8008b30:	e002      	b.n	8008b38 <HAL_UART_IRQHandler+0x514>
      return;
 8008b32:	bf00      	nop
 8008b34:	e000      	b.n	8008b38 <HAL_UART_IRQHandler+0x514>
      return;
 8008b36:	bf00      	nop
  }
}
 8008b38:	37e8      	adds	r7, #232	; 0xe8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop

08008b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b090      	sub	sp, #64	; 0x40
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b90:	e050      	b.n	8008c34 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b98:	d04c      	beq.n	8008c34 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d007      	beq.n	8008bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ba0:	f7fb fc36 	bl	8004410 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d241      	bcs.n	8008c34 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	330c      	adds	r3, #12
 8008bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	e853 3f00 	ldrex	r3, [r3]
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	330c      	adds	r3, #12
 8008bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bd0:	637a      	str	r2, [r7, #52]	; 0x34
 8008bd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bd8:	e841 2300 	strex	r3, r2, [r1]
 8008bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e5      	bne.n	8008bb0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3314      	adds	r3, #20
 8008bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	e853 3f00 	ldrex	r3, [r3]
 8008bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f023 0301 	bic.w	r3, r3, #1
 8008bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3314      	adds	r3, #20
 8008c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c04:	623a      	str	r2, [r7, #32]
 8008c06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c08:	69f9      	ldr	r1, [r7, #28]
 8008c0a:	6a3a      	ldr	r2, [r7, #32]
 8008c0c:	e841 2300 	strex	r3, r2, [r1]
 8008c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e5      	bne.n	8008be4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2220      	movs	r2, #32
 8008c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e00f      	b.n	8008c54 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	bf0c      	ite	eq
 8008c44:	2301      	moveq	r3, #1
 8008c46:	2300      	movne	r3, #0
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	79fb      	ldrb	r3, [r7, #7]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d09f      	beq.n	8008b92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3740      	adds	r7, #64	; 0x40
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b095      	sub	sp, #84	; 0x54
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	330c      	adds	r3, #12
 8008c6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6e:	e853 3f00 	ldrex	r3, [r3]
 8008c72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	330c      	adds	r3, #12
 8008c82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c84:	643a      	str	r2, [r7, #64]	; 0x40
 8008c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c8c:	e841 2300 	strex	r3, r2, [r1]
 8008c90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e5      	bne.n	8008c64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3314      	adds	r3, #20
 8008c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	f023 0301 	bic.w	r3, r3, #1
 8008cae:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3314      	adds	r3, #20
 8008cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e5      	bne.n	8008c98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d119      	bne.n	8008d08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	330c      	adds	r3, #12
 8008cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	e853 3f00 	ldrex	r3, [r3]
 8008ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f023 0310 	bic.w	r3, r3, #16
 8008cea:	647b      	str	r3, [r7, #68]	; 0x44
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cf4:	61ba      	str	r2, [r7, #24]
 8008cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	6979      	ldr	r1, [r7, #20]
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	e841 2300 	strex	r3, r2, [r1]
 8008d00:	613b      	str	r3, [r7, #16]
   return(result);
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e5      	bne.n	8008cd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d16:	bf00      	nop
 8008d18:	3754      	adds	r7, #84	; 0x54
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f7ff ff09 	bl	8008b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d42:	bf00      	nop
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b085      	sub	sp, #20
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b21      	cmp	r3, #33	; 0x21
 8008d5c:	d13e      	bne.n	8008ddc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d66:	d114      	bne.n	8008d92 <UART_Transmit_IT+0x48>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d110      	bne.n	8008d92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	1c9a      	adds	r2, r3, #2
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	621a      	str	r2, [r3, #32]
 8008d90:	e008      	b.n	8008da4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	1c59      	adds	r1, r3, #1
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6211      	str	r1, [r2, #32]
 8008d9c:	781a      	ldrb	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	3b01      	subs	r3, #1
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	4619      	mov	r1, r3
 8008db2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10f      	bne.n	8008dd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68da      	ldr	r2, [r3, #12]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68da      	ldr	r2, [r3, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	e000      	b.n	8008dde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ddc:	2302      	movs	r3, #2
  }
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68da      	ldr	r2, [r3, #12]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff fe98 	bl	8008b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b08c      	sub	sp, #48	; 0x30
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b22      	cmp	r3, #34	; 0x22
 8008e2c:	f040 80ab 	bne.w	8008f86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e38:	d117      	bne.n	8008e6a <UART_Receive_IT+0x50>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d113      	bne.n	8008e6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e62:	1c9a      	adds	r2, r3, #2
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	629a      	str	r2, [r3, #40]	; 0x28
 8008e68:	e026      	b.n	8008eb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e7c:	d007      	beq.n	8008e8e <UART_Receive_IT+0x74>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10a      	bne.n	8008e9c <UART_Receive_IT+0x82>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d106      	bne.n	8008e9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	e008      	b.n	8008eae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d15a      	bne.n	8008f82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68da      	ldr	r2, [r3, #12]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0220 	bic.w	r2, r2, #32
 8008eda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68da      	ldr	r2, [r3, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	695a      	ldr	r2, [r3, #20]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0201 	bic.w	r2, r2, #1
 8008efa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d135      	bne.n	8008f78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	330c      	adds	r3, #12
 8008f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	613b      	str	r3, [r7, #16]
   return(result);
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f023 0310 	bic.w	r3, r3, #16
 8008f28:	627b      	str	r3, [r7, #36]	; 0x24
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	330c      	adds	r3, #12
 8008f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f32:	623a      	str	r2, [r7, #32]
 8008f34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f36:	69f9      	ldr	r1, [r7, #28]
 8008f38:	6a3a      	ldr	r2, [r7, #32]
 8008f3a:	e841 2300 	strex	r3, r2, [r1]
 8008f3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1e5      	bne.n	8008f12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0310 	and.w	r3, r3, #16
 8008f50:	2b10      	cmp	r3, #16
 8008f52:	d10a      	bne.n	8008f6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f54:	2300      	movs	r3, #0
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff fdf9 	bl	8008b68 <HAL_UARTEx_RxEventCallback>
 8008f76:	e002      	b.n	8008f7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7f9 fbc1 	bl	8002700 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e002      	b.n	8008f88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	e000      	b.n	8008f88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008f86:	2302      	movs	r3, #2
  }
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3730      	adds	r7, #48	; 0x30
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f94:	b0c0      	sub	sp, #256	; 0x100
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fac:	68d9      	ldr	r1, [r3, #12]
 8008fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	ea40 0301 	orr.w	r3, r0, r1
 8008fb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fbe:	689a      	ldr	r2, [r3, #8]
 8008fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008fe8:	f021 010c 	bic.w	r1, r1, #12
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800900a:	6999      	ldr	r1, [r3, #24]
 800900c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	ea40 0301 	orr.w	r3, r0, r1
 8009016:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	4b8f      	ldr	r3, [pc, #572]	; (800925c <UART_SetConfig+0x2cc>)
 8009020:	429a      	cmp	r2, r3
 8009022:	d005      	beq.n	8009030 <UART_SetConfig+0xa0>
 8009024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	4b8d      	ldr	r3, [pc, #564]	; (8009260 <UART_SetConfig+0x2d0>)
 800902c:	429a      	cmp	r2, r3
 800902e:	d104      	bne.n	800903a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009030:	f7fd fa9c 	bl	800656c <HAL_RCC_GetPCLK2Freq>
 8009034:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009038:	e003      	b.n	8009042 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800903a:	f7fd fa83 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 800903e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800904c:	f040 810c 	bne.w	8009268 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009054:	2200      	movs	r2, #0
 8009056:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800905a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800905e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009062:	4622      	mov	r2, r4
 8009064:	462b      	mov	r3, r5
 8009066:	1891      	adds	r1, r2, r2
 8009068:	65b9      	str	r1, [r7, #88]	; 0x58
 800906a:	415b      	adcs	r3, r3
 800906c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800906e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009072:	4621      	mov	r1, r4
 8009074:	eb12 0801 	adds.w	r8, r2, r1
 8009078:	4629      	mov	r1, r5
 800907a:	eb43 0901 	adc.w	r9, r3, r1
 800907e:	f04f 0200 	mov.w	r2, #0
 8009082:	f04f 0300 	mov.w	r3, #0
 8009086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800908a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800908e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009092:	4690      	mov	r8, r2
 8009094:	4699      	mov	r9, r3
 8009096:	4623      	mov	r3, r4
 8009098:	eb18 0303 	adds.w	r3, r8, r3
 800909c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090a0:	462b      	mov	r3, r5
 80090a2:	eb49 0303 	adc.w	r3, r9, r3
 80090a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80090ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80090be:	460b      	mov	r3, r1
 80090c0:	18db      	adds	r3, r3, r3
 80090c2:	653b      	str	r3, [r7, #80]	; 0x50
 80090c4:	4613      	mov	r3, r2
 80090c6:	eb42 0303 	adc.w	r3, r2, r3
 80090ca:	657b      	str	r3, [r7, #84]	; 0x54
 80090cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80090d4:	f7f7 fdc8 	bl	8000c68 <__aeabi_uldivmod>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4b61      	ldr	r3, [pc, #388]	; (8009264 <UART_SetConfig+0x2d4>)
 80090de:	fba3 2302 	umull	r2, r3, r3, r2
 80090e2:	095b      	lsrs	r3, r3, #5
 80090e4:	011c      	lsls	r4, r3, #4
 80090e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090ea:	2200      	movs	r2, #0
 80090ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80090f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80090f8:	4642      	mov	r2, r8
 80090fa:	464b      	mov	r3, r9
 80090fc:	1891      	adds	r1, r2, r2
 80090fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8009100:	415b      	adcs	r3, r3
 8009102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009104:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009108:	4641      	mov	r1, r8
 800910a:	eb12 0a01 	adds.w	sl, r2, r1
 800910e:	4649      	mov	r1, r9
 8009110:	eb43 0b01 	adc.w	fp, r3, r1
 8009114:	f04f 0200 	mov.w	r2, #0
 8009118:	f04f 0300 	mov.w	r3, #0
 800911c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009120:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009128:	4692      	mov	sl, r2
 800912a:	469b      	mov	fp, r3
 800912c:	4643      	mov	r3, r8
 800912e:	eb1a 0303 	adds.w	r3, sl, r3
 8009132:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009136:	464b      	mov	r3, r9
 8009138:	eb4b 0303 	adc.w	r3, fp, r3
 800913c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800914c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009150:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009154:	460b      	mov	r3, r1
 8009156:	18db      	adds	r3, r3, r3
 8009158:	643b      	str	r3, [r7, #64]	; 0x40
 800915a:	4613      	mov	r3, r2
 800915c:	eb42 0303 	adc.w	r3, r2, r3
 8009160:	647b      	str	r3, [r7, #68]	; 0x44
 8009162:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009166:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800916a:	f7f7 fd7d 	bl	8000c68 <__aeabi_uldivmod>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4611      	mov	r1, r2
 8009174:	4b3b      	ldr	r3, [pc, #236]	; (8009264 <UART_SetConfig+0x2d4>)
 8009176:	fba3 2301 	umull	r2, r3, r3, r1
 800917a:	095b      	lsrs	r3, r3, #5
 800917c:	2264      	movs	r2, #100	; 0x64
 800917e:	fb02 f303 	mul.w	r3, r2, r3
 8009182:	1acb      	subs	r3, r1, r3
 8009184:	00db      	lsls	r3, r3, #3
 8009186:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800918a:	4b36      	ldr	r3, [pc, #216]	; (8009264 <UART_SetConfig+0x2d4>)
 800918c:	fba3 2302 	umull	r2, r3, r3, r2
 8009190:	095b      	lsrs	r3, r3, #5
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009198:	441c      	add	r4, r3
 800919a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800919e:	2200      	movs	r2, #0
 80091a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80091a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80091ac:	4642      	mov	r2, r8
 80091ae:	464b      	mov	r3, r9
 80091b0:	1891      	adds	r1, r2, r2
 80091b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80091b4:	415b      	adcs	r3, r3
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091bc:	4641      	mov	r1, r8
 80091be:	1851      	adds	r1, r2, r1
 80091c0:	6339      	str	r1, [r7, #48]	; 0x30
 80091c2:	4649      	mov	r1, r9
 80091c4:	414b      	adcs	r3, r1
 80091c6:	637b      	str	r3, [r7, #52]	; 0x34
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	f04f 0300 	mov.w	r3, #0
 80091d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80091d4:	4659      	mov	r1, fp
 80091d6:	00cb      	lsls	r3, r1, #3
 80091d8:	4651      	mov	r1, sl
 80091da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091de:	4651      	mov	r1, sl
 80091e0:	00ca      	lsls	r2, r1, #3
 80091e2:	4610      	mov	r0, r2
 80091e4:	4619      	mov	r1, r3
 80091e6:	4603      	mov	r3, r0
 80091e8:	4642      	mov	r2, r8
 80091ea:	189b      	adds	r3, r3, r2
 80091ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091f0:	464b      	mov	r3, r9
 80091f2:	460a      	mov	r2, r1
 80091f4:	eb42 0303 	adc.w	r3, r2, r3
 80091f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009208:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800920c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009210:	460b      	mov	r3, r1
 8009212:	18db      	adds	r3, r3, r3
 8009214:	62bb      	str	r3, [r7, #40]	; 0x28
 8009216:	4613      	mov	r3, r2
 8009218:	eb42 0303 	adc.w	r3, r2, r3
 800921c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800921e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009222:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009226:	f7f7 fd1f 	bl	8000c68 <__aeabi_uldivmod>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <UART_SetConfig+0x2d4>)
 8009230:	fba3 1302 	umull	r1, r3, r3, r2
 8009234:	095b      	lsrs	r3, r3, #5
 8009236:	2164      	movs	r1, #100	; 0x64
 8009238:	fb01 f303 	mul.w	r3, r1, r3
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	3332      	adds	r3, #50	; 0x32
 8009242:	4a08      	ldr	r2, [pc, #32]	; (8009264 <UART_SetConfig+0x2d4>)
 8009244:	fba2 2303 	umull	r2, r3, r2, r3
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	f003 0207 	and.w	r2, r3, #7
 800924e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4422      	add	r2, r4
 8009256:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009258:	e105      	b.n	8009466 <UART_SetConfig+0x4d6>
 800925a:	bf00      	nop
 800925c:	40011000 	.word	0x40011000
 8009260:	40011400 	.word	0x40011400
 8009264:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800926c:	2200      	movs	r2, #0
 800926e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009272:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009276:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800927a:	4642      	mov	r2, r8
 800927c:	464b      	mov	r3, r9
 800927e:	1891      	adds	r1, r2, r2
 8009280:	6239      	str	r1, [r7, #32]
 8009282:	415b      	adcs	r3, r3
 8009284:	627b      	str	r3, [r7, #36]	; 0x24
 8009286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800928a:	4641      	mov	r1, r8
 800928c:	1854      	adds	r4, r2, r1
 800928e:	4649      	mov	r1, r9
 8009290:	eb43 0501 	adc.w	r5, r3, r1
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	f04f 0300 	mov.w	r3, #0
 800929c:	00eb      	lsls	r3, r5, #3
 800929e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092a2:	00e2      	lsls	r2, r4, #3
 80092a4:	4614      	mov	r4, r2
 80092a6:	461d      	mov	r5, r3
 80092a8:	4643      	mov	r3, r8
 80092aa:	18e3      	adds	r3, r4, r3
 80092ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092b0:	464b      	mov	r3, r9
 80092b2:	eb45 0303 	adc.w	r3, r5, r3
 80092b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	f04f 0300 	mov.w	r3, #0
 80092d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80092d6:	4629      	mov	r1, r5
 80092d8:	008b      	lsls	r3, r1, #2
 80092da:	4621      	mov	r1, r4
 80092dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092e0:	4621      	mov	r1, r4
 80092e2:	008a      	lsls	r2, r1, #2
 80092e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80092e8:	f7f7 fcbe 	bl	8000c68 <__aeabi_uldivmod>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4b60      	ldr	r3, [pc, #384]	; (8009474 <UART_SetConfig+0x4e4>)
 80092f2:	fba3 2302 	umull	r2, r3, r3, r2
 80092f6:	095b      	lsrs	r3, r3, #5
 80092f8:	011c      	lsls	r4, r3, #4
 80092fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092fe:	2200      	movs	r2, #0
 8009300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009304:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009308:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800930c:	4642      	mov	r2, r8
 800930e:	464b      	mov	r3, r9
 8009310:	1891      	adds	r1, r2, r2
 8009312:	61b9      	str	r1, [r7, #24]
 8009314:	415b      	adcs	r3, r3
 8009316:	61fb      	str	r3, [r7, #28]
 8009318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800931c:	4641      	mov	r1, r8
 800931e:	1851      	adds	r1, r2, r1
 8009320:	6139      	str	r1, [r7, #16]
 8009322:	4649      	mov	r1, r9
 8009324:	414b      	adcs	r3, r1
 8009326:	617b      	str	r3, [r7, #20]
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	f04f 0300 	mov.w	r3, #0
 8009330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009334:	4659      	mov	r1, fp
 8009336:	00cb      	lsls	r3, r1, #3
 8009338:	4651      	mov	r1, sl
 800933a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800933e:	4651      	mov	r1, sl
 8009340:	00ca      	lsls	r2, r1, #3
 8009342:	4610      	mov	r0, r2
 8009344:	4619      	mov	r1, r3
 8009346:	4603      	mov	r3, r0
 8009348:	4642      	mov	r2, r8
 800934a:	189b      	adds	r3, r3, r2
 800934c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009350:	464b      	mov	r3, r9
 8009352:	460a      	mov	r2, r1
 8009354:	eb42 0303 	adc.w	r3, r2, r3
 8009358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800935c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	67bb      	str	r3, [r7, #120]	; 0x78
 8009366:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	f04f 0300 	mov.w	r3, #0
 8009370:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009374:	4649      	mov	r1, r9
 8009376:	008b      	lsls	r3, r1, #2
 8009378:	4641      	mov	r1, r8
 800937a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800937e:	4641      	mov	r1, r8
 8009380:	008a      	lsls	r2, r1, #2
 8009382:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009386:	f7f7 fc6f 	bl	8000c68 <__aeabi_uldivmod>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4b39      	ldr	r3, [pc, #228]	; (8009474 <UART_SetConfig+0x4e4>)
 8009390:	fba3 1302 	umull	r1, r3, r3, r2
 8009394:	095b      	lsrs	r3, r3, #5
 8009396:	2164      	movs	r1, #100	; 0x64
 8009398:	fb01 f303 	mul.w	r3, r1, r3
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	011b      	lsls	r3, r3, #4
 80093a0:	3332      	adds	r3, #50	; 0x32
 80093a2:	4a34      	ldr	r2, [pc, #208]	; (8009474 <UART_SetConfig+0x4e4>)
 80093a4:	fba2 2303 	umull	r2, r3, r2, r3
 80093a8:	095b      	lsrs	r3, r3, #5
 80093aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093ae:	441c      	add	r4, r3
 80093b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093b4:	2200      	movs	r2, #0
 80093b6:	673b      	str	r3, [r7, #112]	; 0x70
 80093b8:	677a      	str	r2, [r7, #116]	; 0x74
 80093ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80093be:	4642      	mov	r2, r8
 80093c0:	464b      	mov	r3, r9
 80093c2:	1891      	adds	r1, r2, r2
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	415b      	adcs	r3, r3
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093ce:	4641      	mov	r1, r8
 80093d0:	1851      	adds	r1, r2, r1
 80093d2:	6039      	str	r1, [r7, #0]
 80093d4:	4649      	mov	r1, r9
 80093d6:	414b      	adcs	r3, r1
 80093d8:	607b      	str	r3, [r7, #4]
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	f04f 0300 	mov.w	r3, #0
 80093e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80093e6:	4659      	mov	r1, fp
 80093e8:	00cb      	lsls	r3, r1, #3
 80093ea:	4651      	mov	r1, sl
 80093ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093f0:	4651      	mov	r1, sl
 80093f2:	00ca      	lsls	r2, r1, #3
 80093f4:	4610      	mov	r0, r2
 80093f6:	4619      	mov	r1, r3
 80093f8:	4603      	mov	r3, r0
 80093fa:	4642      	mov	r2, r8
 80093fc:	189b      	adds	r3, r3, r2
 80093fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009400:	464b      	mov	r3, r9
 8009402:	460a      	mov	r2, r1
 8009404:	eb42 0303 	adc.w	r3, r2, r3
 8009408:	66fb      	str	r3, [r7, #108]	; 0x6c
 800940a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	663b      	str	r3, [r7, #96]	; 0x60
 8009414:	667a      	str	r2, [r7, #100]	; 0x64
 8009416:	f04f 0200 	mov.w	r2, #0
 800941a:	f04f 0300 	mov.w	r3, #0
 800941e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009422:	4649      	mov	r1, r9
 8009424:	008b      	lsls	r3, r1, #2
 8009426:	4641      	mov	r1, r8
 8009428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800942c:	4641      	mov	r1, r8
 800942e:	008a      	lsls	r2, r1, #2
 8009430:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009434:	f7f7 fc18 	bl	8000c68 <__aeabi_uldivmod>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <UART_SetConfig+0x4e4>)
 800943e:	fba3 1302 	umull	r1, r3, r3, r2
 8009442:	095b      	lsrs	r3, r3, #5
 8009444:	2164      	movs	r1, #100	; 0x64
 8009446:	fb01 f303 	mul.w	r3, r1, r3
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	011b      	lsls	r3, r3, #4
 800944e:	3332      	adds	r3, #50	; 0x32
 8009450:	4a08      	ldr	r2, [pc, #32]	; (8009474 <UART_SetConfig+0x4e4>)
 8009452:	fba2 2303 	umull	r2, r3, r2, r3
 8009456:	095b      	lsrs	r3, r3, #5
 8009458:	f003 020f 	and.w	r2, r3, #15
 800945c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4422      	add	r2, r4
 8009464:	609a      	str	r2, [r3, #8]
}
 8009466:	bf00      	nop
 8009468:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800946c:	46bd      	mov	sp, r7
 800946e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009472:	bf00      	nop
 8009474:	51eb851f 	.word	0x51eb851f

08009478 <__errno>:
 8009478:	4b01      	ldr	r3, [pc, #4]	; (8009480 <__errno+0x8>)
 800947a:	6818      	ldr	r0, [r3, #0]
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	20000188 	.word	0x20000188

08009484 <__libc_init_array>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	4d0d      	ldr	r5, [pc, #52]	; (80094bc <__libc_init_array+0x38>)
 8009488:	4c0d      	ldr	r4, [pc, #52]	; (80094c0 <__libc_init_array+0x3c>)
 800948a:	1b64      	subs	r4, r4, r5
 800948c:	10a4      	asrs	r4, r4, #2
 800948e:	2600      	movs	r6, #0
 8009490:	42a6      	cmp	r6, r4
 8009492:	d109      	bne.n	80094a8 <__libc_init_array+0x24>
 8009494:	4d0b      	ldr	r5, [pc, #44]	; (80094c4 <__libc_init_array+0x40>)
 8009496:	4c0c      	ldr	r4, [pc, #48]	; (80094c8 <__libc_init_array+0x44>)
 8009498:	f003 fe30 	bl	800d0fc <_init>
 800949c:	1b64      	subs	r4, r4, r5
 800949e:	10a4      	asrs	r4, r4, #2
 80094a0:	2600      	movs	r6, #0
 80094a2:	42a6      	cmp	r6, r4
 80094a4:	d105      	bne.n	80094b2 <__libc_init_array+0x2e>
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
 80094a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ac:	4798      	blx	r3
 80094ae:	3601      	adds	r6, #1
 80094b0:	e7ee      	b.n	8009490 <__libc_init_array+0xc>
 80094b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b6:	4798      	blx	r3
 80094b8:	3601      	adds	r6, #1
 80094ba:	e7f2      	b.n	80094a2 <__libc_init_array+0x1e>
 80094bc:	08030d78 	.word	0x08030d78
 80094c0:	08030d78 	.word	0x08030d78
 80094c4:	08030d78 	.word	0x08030d78
 80094c8:	08030d7c 	.word	0x08030d7c

080094cc <memcpy>:
 80094cc:	440a      	add	r2, r1
 80094ce:	4291      	cmp	r1, r2
 80094d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80094d4:	d100      	bne.n	80094d8 <memcpy+0xc>
 80094d6:	4770      	bx	lr
 80094d8:	b510      	push	{r4, lr}
 80094da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094e2:	4291      	cmp	r1, r2
 80094e4:	d1f9      	bne.n	80094da <memcpy+0xe>
 80094e6:	bd10      	pop	{r4, pc}

080094e8 <memset>:
 80094e8:	4402      	add	r2, r0
 80094ea:	4603      	mov	r3, r0
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d100      	bne.n	80094f2 <memset+0xa>
 80094f0:	4770      	bx	lr
 80094f2:	f803 1b01 	strb.w	r1, [r3], #1
 80094f6:	e7f9      	b.n	80094ec <memset+0x4>

080094f8 <__cvt>:
 80094f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094fc:	ec55 4b10 	vmov	r4, r5, d0
 8009500:	2d00      	cmp	r5, #0
 8009502:	460e      	mov	r6, r1
 8009504:	4619      	mov	r1, r3
 8009506:	462b      	mov	r3, r5
 8009508:	bfbb      	ittet	lt
 800950a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800950e:	461d      	movlt	r5, r3
 8009510:	2300      	movge	r3, #0
 8009512:	232d      	movlt	r3, #45	; 0x2d
 8009514:	700b      	strb	r3, [r1, #0]
 8009516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009518:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800951c:	4691      	mov	r9, r2
 800951e:	f023 0820 	bic.w	r8, r3, #32
 8009522:	bfbc      	itt	lt
 8009524:	4622      	movlt	r2, r4
 8009526:	4614      	movlt	r4, r2
 8009528:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800952c:	d005      	beq.n	800953a <__cvt+0x42>
 800952e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009532:	d100      	bne.n	8009536 <__cvt+0x3e>
 8009534:	3601      	adds	r6, #1
 8009536:	2102      	movs	r1, #2
 8009538:	e000      	b.n	800953c <__cvt+0x44>
 800953a:	2103      	movs	r1, #3
 800953c:	ab03      	add	r3, sp, #12
 800953e:	9301      	str	r3, [sp, #4]
 8009540:	ab02      	add	r3, sp, #8
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	ec45 4b10 	vmov	d0, r4, r5
 8009548:	4653      	mov	r3, sl
 800954a:	4632      	mov	r2, r6
 800954c:	f000 fd80 	bl	800a050 <_dtoa_r>
 8009550:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009554:	4607      	mov	r7, r0
 8009556:	d102      	bne.n	800955e <__cvt+0x66>
 8009558:	f019 0f01 	tst.w	r9, #1
 800955c:	d022      	beq.n	80095a4 <__cvt+0xac>
 800955e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009562:	eb07 0906 	add.w	r9, r7, r6
 8009566:	d110      	bne.n	800958a <__cvt+0x92>
 8009568:	783b      	ldrb	r3, [r7, #0]
 800956a:	2b30      	cmp	r3, #48	; 0x30
 800956c:	d10a      	bne.n	8009584 <__cvt+0x8c>
 800956e:	2200      	movs	r2, #0
 8009570:	2300      	movs	r3, #0
 8009572:	4620      	mov	r0, r4
 8009574:	4629      	mov	r1, r5
 8009576:	f7f7 fab7 	bl	8000ae8 <__aeabi_dcmpeq>
 800957a:	b918      	cbnz	r0, 8009584 <__cvt+0x8c>
 800957c:	f1c6 0601 	rsb	r6, r6, #1
 8009580:	f8ca 6000 	str.w	r6, [sl]
 8009584:	f8da 3000 	ldr.w	r3, [sl]
 8009588:	4499      	add	r9, r3
 800958a:	2200      	movs	r2, #0
 800958c:	2300      	movs	r3, #0
 800958e:	4620      	mov	r0, r4
 8009590:	4629      	mov	r1, r5
 8009592:	f7f7 faa9 	bl	8000ae8 <__aeabi_dcmpeq>
 8009596:	b108      	cbz	r0, 800959c <__cvt+0xa4>
 8009598:	f8cd 900c 	str.w	r9, [sp, #12]
 800959c:	2230      	movs	r2, #48	; 0x30
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	454b      	cmp	r3, r9
 80095a2:	d307      	bcc.n	80095b4 <__cvt+0xbc>
 80095a4:	9b03      	ldr	r3, [sp, #12]
 80095a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095a8:	1bdb      	subs	r3, r3, r7
 80095aa:	4638      	mov	r0, r7
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	b004      	add	sp, #16
 80095b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b4:	1c59      	adds	r1, r3, #1
 80095b6:	9103      	str	r1, [sp, #12]
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	e7f0      	b.n	800959e <__cvt+0xa6>

080095bc <__exponent>:
 80095bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095be:	4603      	mov	r3, r0
 80095c0:	2900      	cmp	r1, #0
 80095c2:	bfb8      	it	lt
 80095c4:	4249      	neglt	r1, r1
 80095c6:	f803 2b02 	strb.w	r2, [r3], #2
 80095ca:	bfb4      	ite	lt
 80095cc:	222d      	movlt	r2, #45	; 0x2d
 80095ce:	222b      	movge	r2, #43	; 0x2b
 80095d0:	2909      	cmp	r1, #9
 80095d2:	7042      	strb	r2, [r0, #1]
 80095d4:	dd2a      	ble.n	800962c <__exponent+0x70>
 80095d6:	f10d 0407 	add.w	r4, sp, #7
 80095da:	46a4      	mov	ip, r4
 80095dc:	270a      	movs	r7, #10
 80095de:	46a6      	mov	lr, r4
 80095e0:	460a      	mov	r2, r1
 80095e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80095e6:	fb07 1516 	mls	r5, r7, r6, r1
 80095ea:	3530      	adds	r5, #48	; 0x30
 80095ec:	2a63      	cmp	r2, #99	; 0x63
 80095ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80095f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095f6:	4631      	mov	r1, r6
 80095f8:	dcf1      	bgt.n	80095de <__exponent+0x22>
 80095fa:	3130      	adds	r1, #48	; 0x30
 80095fc:	f1ae 0502 	sub.w	r5, lr, #2
 8009600:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009604:	1c44      	adds	r4, r0, #1
 8009606:	4629      	mov	r1, r5
 8009608:	4561      	cmp	r1, ip
 800960a:	d30a      	bcc.n	8009622 <__exponent+0x66>
 800960c:	f10d 0209 	add.w	r2, sp, #9
 8009610:	eba2 020e 	sub.w	r2, r2, lr
 8009614:	4565      	cmp	r5, ip
 8009616:	bf88      	it	hi
 8009618:	2200      	movhi	r2, #0
 800961a:	4413      	add	r3, r2
 800961c:	1a18      	subs	r0, r3, r0
 800961e:	b003      	add	sp, #12
 8009620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009626:	f804 2f01 	strb.w	r2, [r4, #1]!
 800962a:	e7ed      	b.n	8009608 <__exponent+0x4c>
 800962c:	2330      	movs	r3, #48	; 0x30
 800962e:	3130      	adds	r1, #48	; 0x30
 8009630:	7083      	strb	r3, [r0, #2]
 8009632:	70c1      	strb	r1, [r0, #3]
 8009634:	1d03      	adds	r3, r0, #4
 8009636:	e7f1      	b.n	800961c <__exponent+0x60>

08009638 <_printf_float>:
 8009638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	ed2d 8b02 	vpush	{d8}
 8009640:	b08d      	sub	sp, #52	; 0x34
 8009642:	460c      	mov	r4, r1
 8009644:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009648:	4616      	mov	r6, r2
 800964a:	461f      	mov	r7, r3
 800964c:	4605      	mov	r5, r0
 800964e:	f001 faff 	bl	800ac50 <_localeconv_r>
 8009652:	f8d0 a000 	ldr.w	sl, [r0]
 8009656:	4650      	mov	r0, sl
 8009658:	f7f6 fdca 	bl	80001f0 <strlen>
 800965c:	2300      	movs	r3, #0
 800965e:	930a      	str	r3, [sp, #40]	; 0x28
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	9305      	str	r3, [sp, #20]
 8009664:	f8d8 3000 	ldr.w	r3, [r8]
 8009668:	f894 b018 	ldrb.w	fp, [r4, #24]
 800966c:	3307      	adds	r3, #7
 800966e:	f023 0307 	bic.w	r3, r3, #7
 8009672:	f103 0208 	add.w	r2, r3, #8
 8009676:	f8c8 2000 	str.w	r2, [r8]
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009682:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009686:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800968a:	9307      	str	r3, [sp, #28]
 800968c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009690:	ee08 0a10 	vmov	s16, r0
 8009694:	4b9f      	ldr	r3, [pc, #636]	; (8009914 <_printf_float+0x2dc>)
 8009696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800969a:	f04f 32ff 	mov.w	r2, #4294967295
 800969e:	f7f7 fa55 	bl	8000b4c <__aeabi_dcmpun>
 80096a2:	bb88      	cbnz	r0, 8009708 <_printf_float+0xd0>
 80096a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096a8:	4b9a      	ldr	r3, [pc, #616]	; (8009914 <_printf_float+0x2dc>)
 80096aa:	f04f 32ff 	mov.w	r2, #4294967295
 80096ae:	f7f7 fa2f 	bl	8000b10 <__aeabi_dcmple>
 80096b2:	bb48      	cbnz	r0, 8009708 <_printf_float+0xd0>
 80096b4:	2200      	movs	r2, #0
 80096b6:	2300      	movs	r3, #0
 80096b8:	4640      	mov	r0, r8
 80096ba:	4649      	mov	r1, r9
 80096bc:	f7f7 fa1e 	bl	8000afc <__aeabi_dcmplt>
 80096c0:	b110      	cbz	r0, 80096c8 <_printf_float+0x90>
 80096c2:	232d      	movs	r3, #45	; 0x2d
 80096c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c8:	4b93      	ldr	r3, [pc, #588]	; (8009918 <_printf_float+0x2e0>)
 80096ca:	4894      	ldr	r0, [pc, #592]	; (800991c <_printf_float+0x2e4>)
 80096cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80096d0:	bf94      	ite	ls
 80096d2:	4698      	movls	r8, r3
 80096d4:	4680      	movhi	r8, r0
 80096d6:	2303      	movs	r3, #3
 80096d8:	6123      	str	r3, [r4, #16]
 80096da:	9b05      	ldr	r3, [sp, #20]
 80096dc:	f023 0204 	bic.w	r2, r3, #4
 80096e0:	6022      	str	r2, [r4, #0]
 80096e2:	f04f 0900 	mov.w	r9, #0
 80096e6:	9700      	str	r7, [sp, #0]
 80096e8:	4633      	mov	r3, r6
 80096ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80096ec:	4621      	mov	r1, r4
 80096ee:	4628      	mov	r0, r5
 80096f0:	f000 f9d8 	bl	8009aa4 <_printf_common>
 80096f4:	3001      	adds	r0, #1
 80096f6:	f040 8090 	bne.w	800981a <_printf_float+0x1e2>
 80096fa:	f04f 30ff 	mov.w	r0, #4294967295
 80096fe:	b00d      	add	sp, #52	; 0x34
 8009700:	ecbd 8b02 	vpop	{d8}
 8009704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009708:	4642      	mov	r2, r8
 800970a:	464b      	mov	r3, r9
 800970c:	4640      	mov	r0, r8
 800970e:	4649      	mov	r1, r9
 8009710:	f7f7 fa1c 	bl	8000b4c <__aeabi_dcmpun>
 8009714:	b140      	cbz	r0, 8009728 <_printf_float+0xf0>
 8009716:	464b      	mov	r3, r9
 8009718:	2b00      	cmp	r3, #0
 800971a:	bfbc      	itt	lt
 800971c:	232d      	movlt	r3, #45	; 0x2d
 800971e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009722:	487f      	ldr	r0, [pc, #508]	; (8009920 <_printf_float+0x2e8>)
 8009724:	4b7f      	ldr	r3, [pc, #508]	; (8009924 <_printf_float+0x2ec>)
 8009726:	e7d1      	b.n	80096cc <_printf_float+0x94>
 8009728:	6863      	ldr	r3, [r4, #4]
 800972a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800972e:	9206      	str	r2, [sp, #24]
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	d13f      	bne.n	80097b4 <_printf_float+0x17c>
 8009734:	2306      	movs	r3, #6
 8009736:	6063      	str	r3, [r4, #4]
 8009738:	9b05      	ldr	r3, [sp, #20]
 800973a:	6861      	ldr	r1, [r4, #4]
 800973c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009740:	2300      	movs	r3, #0
 8009742:	9303      	str	r3, [sp, #12]
 8009744:	ab0a      	add	r3, sp, #40	; 0x28
 8009746:	e9cd b301 	strd	fp, r3, [sp, #4]
 800974a:	ab09      	add	r3, sp, #36	; 0x24
 800974c:	ec49 8b10 	vmov	d0, r8, r9
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	6022      	str	r2, [r4, #0]
 8009754:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009758:	4628      	mov	r0, r5
 800975a:	f7ff fecd 	bl	80094f8 <__cvt>
 800975e:	9b06      	ldr	r3, [sp, #24]
 8009760:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009762:	2b47      	cmp	r3, #71	; 0x47
 8009764:	4680      	mov	r8, r0
 8009766:	d108      	bne.n	800977a <_printf_float+0x142>
 8009768:	1cc8      	adds	r0, r1, #3
 800976a:	db02      	blt.n	8009772 <_printf_float+0x13a>
 800976c:	6863      	ldr	r3, [r4, #4]
 800976e:	4299      	cmp	r1, r3
 8009770:	dd41      	ble.n	80097f6 <_printf_float+0x1be>
 8009772:	f1ab 0b02 	sub.w	fp, fp, #2
 8009776:	fa5f fb8b 	uxtb.w	fp, fp
 800977a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800977e:	d820      	bhi.n	80097c2 <_printf_float+0x18a>
 8009780:	3901      	subs	r1, #1
 8009782:	465a      	mov	r2, fp
 8009784:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009788:	9109      	str	r1, [sp, #36]	; 0x24
 800978a:	f7ff ff17 	bl	80095bc <__exponent>
 800978e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009790:	1813      	adds	r3, r2, r0
 8009792:	2a01      	cmp	r2, #1
 8009794:	4681      	mov	r9, r0
 8009796:	6123      	str	r3, [r4, #16]
 8009798:	dc02      	bgt.n	80097a0 <_printf_float+0x168>
 800979a:	6822      	ldr	r2, [r4, #0]
 800979c:	07d2      	lsls	r2, r2, #31
 800979e:	d501      	bpl.n	80097a4 <_printf_float+0x16c>
 80097a0:	3301      	adds	r3, #1
 80097a2:	6123      	str	r3, [r4, #16]
 80097a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d09c      	beq.n	80096e6 <_printf_float+0xae>
 80097ac:	232d      	movs	r3, #45	; 0x2d
 80097ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097b2:	e798      	b.n	80096e6 <_printf_float+0xae>
 80097b4:	9a06      	ldr	r2, [sp, #24]
 80097b6:	2a47      	cmp	r2, #71	; 0x47
 80097b8:	d1be      	bne.n	8009738 <_printf_float+0x100>
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1bc      	bne.n	8009738 <_printf_float+0x100>
 80097be:	2301      	movs	r3, #1
 80097c0:	e7b9      	b.n	8009736 <_printf_float+0xfe>
 80097c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80097c6:	d118      	bne.n	80097fa <_printf_float+0x1c2>
 80097c8:	2900      	cmp	r1, #0
 80097ca:	6863      	ldr	r3, [r4, #4]
 80097cc:	dd0b      	ble.n	80097e6 <_printf_float+0x1ae>
 80097ce:	6121      	str	r1, [r4, #16]
 80097d0:	b913      	cbnz	r3, 80097d8 <_printf_float+0x1a0>
 80097d2:	6822      	ldr	r2, [r4, #0]
 80097d4:	07d0      	lsls	r0, r2, #31
 80097d6:	d502      	bpl.n	80097de <_printf_float+0x1a6>
 80097d8:	3301      	adds	r3, #1
 80097da:	440b      	add	r3, r1
 80097dc:	6123      	str	r3, [r4, #16]
 80097de:	65a1      	str	r1, [r4, #88]	; 0x58
 80097e0:	f04f 0900 	mov.w	r9, #0
 80097e4:	e7de      	b.n	80097a4 <_printf_float+0x16c>
 80097e6:	b913      	cbnz	r3, 80097ee <_printf_float+0x1b6>
 80097e8:	6822      	ldr	r2, [r4, #0]
 80097ea:	07d2      	lsls	r2, r2, #31
 80097ec:	d501      	bpl.n	80097f2 <_printf_float+0x1ba>
 80097ee:	3302      	adds	r3, #2
 80097f0:	e7f4      	b.n	80097dc <_printf_float+0x1a4>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e7f2      	b.n	80097dc <_printf_float+0x1a4>
 80097f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80097fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097fc:	4299      	cmp	r1, r3
 80097fe:	db05      	blt.n	800980c <_printf_float+0x1d4>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	6121      	str	r1, [r4, #16]
 8009804:	07d8      	lsls	r0, r3, #31
 8009806:	d5ea      	bpl.n	80097de <_printf_float+0x1a6>
 8009808:	1c4b      	adds	r3, r1, #1
 800980a:	e7e7      	b.n	80097dc <_printf_float+0x1a4>
 800980c:	2900      	cmp	r1, #0
 800980e:	bfd4      	ite	le
 8009810:	f1c1 0202 	rsble	r2, r1, #2
 8009814:	2201      	movgt	r2, #1
 8009816:	4413      	add	r3, r2
 8009818:	e7e0      	b.n	80097dc <_printf_float+0x1a4>
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	055a      	lsls	r2, r3, #21
 800981e:	d407      	bmi.n	8009830 <_printf_float+0x1f8>
 8009820:	6923      	ldr	r3, [r4, #16]
 8009822:	4642      	mov	r2, r8
 8009824:	4631      	mov	r1, r6
 8009826:	4628      	mov	r0, r5
 8009828:	47b8      	blx	r7
 800982a:	3001      	adds	r0, #1
 800982c:	d12c      	bne.n	8009888 <_printf_float+0x250>
 800982e:	e764      	b.n	80096fa <_printf_float+0xc2>
 8009830:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009834:	f240 80e0 	bls.w	80099f8 <_printf_float+0x3c0>
 8009838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800983c:	2200      	movs	r2, #0
 800983e:	2300      	movs	r3, #0
 8009840:	f7f7 f952 	bl	8000ae8 <__aeabi_dcmpeq>
 8009844:	2800      	cmp	r0, #0
 8009846:	d034      	beq.n	80098b2 <_printf_float+0x27a>
 8009848:	4a37      	ldr	r2, [pc, #220]	; (8009928 <_printf_float+0x2f0>)
 800984a:	2301      	movs	r3, #1
 800984c:	4631      	mov	r1, r6
 800984e:	4628      	mov	r0, r5
 8009850:	47b8      	blx	r7
 8009852:	3001      	adds	r0, #1
 8009854:	f43f af51 	beq.w	80096fa <_printf_float+0xc2>
 8009858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800985c:	429a      	cmp	r2, r3
 800985e:	db02      	blt.n	8009866 <_printf_float+0x22e>
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	07d8      	lsls	r0, r3, #31
 8009864:	d510      	bpl.n	8009888 <_printf_float+0x250>
 8009866:	ee18 3a10 	vmov	r3, s16
 800986a:	4652      	mov	r2, sl
 800986c:	4631      	mov	r1, r6
 800986e:	4628      	mov	r0, r5
 8009870:	47b8      	blx	r7
 8009872:	3001      	adds	r0, #1
 8009874:	f43f af41 	beq.w	80096fa <_printf_float+0xc2>
 8009878:	f04f 0800 	mov.w	r8, #0
 800987c:	f104 091a 	add.w	r9, r4, #26
 8009880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009882:	3b01      	subs	r3, #1
 8009884:	4543      	cmp	r3, r8
 8009886:	dc09      	bgt.n	800989c <_printf_float+0x264>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	079b      	lsls	r3, r3, #30
 800988c:	f100 8105 	bmi.w	8009a9a <_printf_float+0x462>
 8009890:	68e0      	ldr	r0, [r4, #12]
 8009892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009894:	4298      	cmp	r0, r3
 8009896:	bfb8      	it	lt
 8009898:	4618      	movlt	r0, r3
 800989a:	e730      	b.n	80096fe <_printf_float+0xc6>
 800989c:	2301      	movs	r3, #1
 800989e:	464a      	mov	r2, r9
 80098a0:	4631      	mov	r1, r6
 80098a2:	4628      	mov	r0, r5
 80098a4:	47b8      	blx	r7
 80098a6:	3001      	adds	r0, #1
 80098a8:	f43f af27 	beq.w	80096fa <_printf_float+0xc2>
 80098ac:	f108 0801 	add.w	r8, r8, #1
 80098b0:	e7e6      	b.n	8009880 <_printf_float+0x248>
 80098b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	dc39      	bgt.n	800992c <_printf_float+0x2f4>
 80098b8:	4a1b      	ldr	r2, [pc, #108]	; (8009928 <_printf_float+0x2f0>)
 80098ba:	2301      	movs	r3, #1
 80098bc:	4631      	mov	r1, r6
 80098be:	4628      	mov	r0, r5
 80098c0:	47b8      	blx	r7
 80098c2:	3001      	adds	r0, #1
 80098c4:	f43f af19 	beq.w	80096fa <_printf_float+0xc2>
 80098c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098cc:	4313      	orrs	r3, r2
 80098ce:	d102      	bne.n	80098d6 <_printf_float+0x29e>
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	07d9      	lsls	r1, r3, #31
 80098d4:	d5d8      	bpl.n	8009888 <_printf_float+0x250>
 80098d6:	ee18 3a10 	vmov	r3, s16
 80098da:	4652      	mov	r2, sl
 80098dc:	4631      	mov	r1, r6
 80098de:	4628      	mov	r0, r5
 80098e0:	47b8      	blx	r7
 80098e2:	3001      	adds	r0, #1
 80098e4:	f43f af09 	beq.w	80096fa <_printf_float+0xc2>
 80098e8:	f04f 0900 	mov.w	r9, #0
 80098ec:	f104 0a1a 	add.w	sl, r4, #26
 80098f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f2:	425b      	negs	r3, r3
 80098f4:	454b      	cmp	r3, r9
 80098f6:	dc01      	bgt.n	80098fc <_printf_float+0x2c4>
 80098f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098fa:	e792      	b.n	8009822 <_printf_float+0x1ea>
 80098fc:	2301      	movs	r3, #1
 80098fe:	4652      	mov	r2, sl
 8009900:	4631      	mov	r1, r6
 8009902:	4628      	mov	r0, r5
 8009904:	47b8      	blx	r7
 8009906:	3001      	adds	r0, #1
 8009908:	f43f aef7 	beq.w	80096fa <_printf_float+0xc2>
 800990c:	f109 0901 	add.w	r9, r9, #1
 8009910:	e7ee      	b.n	80098f0 <_printf_float+0x2b8>
 8009912:	bf00      	nop
 8009914:	7fefffff 	.word	0x7fefffff
 8009918:	08030964 	.word	0x08030964
 800991c:	08030968 	.word	0x08030968
 8009920:	08030970 	.word	0x08030970
 8009924:	0803096c 	.word	0x0803096c
 8009928:	08030974 	.word	0x08030974
 800992c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800992e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009930:	429a      	cmp	r2, r3
 8009932:	bfa8      	it	ge
 8009934:	461a      	movge	r2, r3
 8009936:	2a00      	cmp	r2, #0
 8009938:	4691      	mov	r9, r2
 800993a:	dc37      	bgt.n	80099ac <_printf_float+0x374>
 800993c:	f04f 0b00 	mov.w	fp, #0
 8009940:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009944:	f104 021a 	add.w	r2, r4, #26
 8009948:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800994a:	9305      	str	r3, [sp, #20]
 800994c:	eba3 0309 	sub.w	r3, r3, r9
 8009950:	455b      	cmp	r3, fp
 8009952:	dc33      	bgt.n	80099bc <_printf_float+0x384>
 8009954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009958:	429a      	cmp	r2, r3
 800995a:	db3b      	blt.n	80099d4 <_printf_float+0x39c>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	07da      	lsls	r2, r3, #31
 8009960:	d438      	bmi.n	80099d4 <_printf_float+0x39c>
 8009962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009964:	9a05      	ldr	r2, [sp, #20]
 8009966:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009968:	1a9a      	subs	r2, r3, r2
 800996a:	eba3 0901 	sub.w	r9, r3, r1
 800996e:	4591      	cmp	r9, r2
 8009970:	bfa8      	it	ge
 8009972:	4691      	movge	r9, r2
 8009974:	f1b9 0f00 	cmp.w	r9, #0
 8009978:	dc35      	bgt.n	80099e6 <_printf_float+0x3ae>
 800997a:	f04f 0800 	mov.w	r8, #0
 800997e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009982:	f104 0a1a 	add.w	sl, r4, #26
 8009986:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800998a:	1a9b      	subs	r3, r3, r2
 800998c:	eba3 0309 	sub.w	r3, r3, r9
 8009990:	4543      	cmp	r3, r8
 8009992:	f77f af79 	ble.w	8009888 <_printf_float+0x250>
 8009996:	2301      	movs	r3, #1
 8009998:	4652      	mov	r2, sl
 800999a:	4631      	mov	r1, r6
 800999c:	4628      	mov	r0, r5
 800999e:	47b8      	blx	r7
 80099a0:	3001      	adds	r0, #1
 80099a2:	f43f aeaa 	beq.w	80096fa <_printf_float+0xc2>
 80099a6:	f108 0801 	add.w	r8, r8, #1
 80099aa:	e7ec      	b.n	8009986 <_printf_float+0x34e>
 80099ac:	4613      	mov	r3, r2
 80099ae:	4631      	mov	r1, r6
 80099b0:	4642      	mov	r2, r8
 80099b2:	4628      	mov	r0, r5
 80099b4:	47b8      	blx	r7
 80099b6:	3001      	adds	r0, #1
 80099b8:	d1c0      	bne.n	800993c <_printf_float+0x304>
 80099ba:	e69e      	b.n	80096fa <_printf_float+0xc2>
 80099bc:	2301      	movs	r3, #1
 80099be:	4631      	mov	r1, r6
 80099c0:	4628      	mov	r0, r5
 80099c2:	9205      	str	r2, [sp, #20]
 80099c4:	47b8      	blx	r7
 80099c6:	3001      	adds	r0, #1
 80099c8:	f43f ae97 	beq.w	80096fa <_printf_float+0xc2>
 80099cc:	9a05      	ldr	r2, [sp, #20]
 80099ce:	f10b 0b01 	add.w	fp, fp, #1
 80099d2:	e7b9      	b.n	8009948 <_printf_float+0x310>
 80099d4:	ee18 3a10 	vmov	r3, s16
 80099d8:	4652      	mov	r2, sl
 80099da:	4631      	mov	r1, r6
 80099dc:	4628      	mov	r0, r5
 80099de:	47b8      	blx	r7
 80099e0:	3001      	adds	r0, #1
 80099e2:	d1be      	bne.n	8009962 <_printf_float+0x32a>
 80099e4:	e689      	b.n	80096fa <_printf_float+0xc2>
 80099e6:	9a05      	ldr	r2, [sp, #20]
 80099e8:	464b      	mov	r3, r9
 80099ea:	4442      	add	r2, r8
 80099ec:	4631      	mov	r1, r6
 80099ee:	4628      	mov	r0, r5
 80099f0:	47b8      	blx	r7
 80099f2:	3001      	adds	r0, #1
 80099f4:	d1c1      	bne.n	800997a <_printf_float+0x342>
 80099f6:	e680      	b.n	80096fa <_printf_float+0xc2>
 80099f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099fa:	2a01      	cmp	r2, #1
 80099fc:	dc01      	bgt.n	8009a02 <_printf_float+0x3ca>
 80099fe:	07db      	lsls	r3, r3, #31
 8009a00:	d538      	bpl.n	8009a74 <_printf_float+0x43c>
 8009a02:	2301      	movs	r3, #1
 8009a04:	4642      	mov	r2, r8
 8009a06:	4631      	mov	r1, r6
 8009a08:	4628      	mov	r0, r5
 8009a0a:	47b8      	blx	r7
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	f43f ae74 	beq.w	80096fa <_printf_float+0xc2>
 8009a12:	ee18 3a10 	vmov	r3, s16
 8009a16:	4652      	mov	r2, sl
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	47b8      	blx	r7
 8009a1e:	3001      	adds	r0, #1
 8009a20:	f43f ae6b 	beq.w	80096fa <_printf_float+0xc2>
 8009a24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f7f7 f85c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a30:	b9d8      	cbnz	r0, 8009a6a <_printf_float+0x432>
 8009a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a34:	f108 0201 	add.w	r2, r8, #1
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	d10e      	bne.n	8009a62 <_printf_float+0x42a>
 8009a44:	e659      	b.n	80096fa <_printf_float+0xc2>
 8009a46:	2301      	movs	r3, #1
 8009a48:	4652      	mov	r2, sl
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b8      	blx	r7
 8009a50:	3001      	adds	r0, #1
 8009a52:	f43f ae52 	beq.w	80096fa <_printf_float+0xc2>
 8009a56:	f108 0801 	add.w	r8, r8, #1
 8009a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	4543      	cmp	r3, r8
 8009a60:	dcf1      	bgt.n	8009a46 <_printf_float+0x40e>
 8009a62:	464b      	mov	r3, r9
 8009a64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a68:	e6dc      	b.n	8009824 <_printf_float+0x1ec>
 8009a6a:	f04f 0800 	mov.w	r8, #0
 8009a6e:	f104 0a1a 	add.w	sl, r4, #26
 8009a72:	e7f2      	b.n	8009a5a <_printf_float+0x422>
 8009a74:	2301      	movs	r3, #1
 8009a76:	4642      	mov	r2, r8
 8009a78:	e7df      	b.n	8009a3a <_printf_float+0x402>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	464a      	mov	r2, r9
 8009a7e:	4631      	mov	r1, r6
 8009a80:	4628      	mov	r0, r5
 8009a82:	47b8      	blx	r7
 8009a84:	3001      	adds	r0, #1
 8009a86:	f43f ae38 	beq.w	80096fa <_printf_float+0xc2>
 8009a8a:	f108 0801 	add.w	r8, r8, #1
 8009a8e:	68e3      	ldr	r3, [r4, #12]
 8009a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a92:	1a5b      	subs	r3, r3, r1
 8009a94:	4543      	cmp	r3, r8
 8009a96:	dcf0      	bgt.n	8009a7a <_printf_float+0x442>
 8009a98:	e6fa      	b.n	8009890 <_printf_float+0x258>
 8009a9a:	f04f 0800 	mov.w	r8, #0
 8009a9e:	f104 0919 	add.w	r9, r4, #25
 8009aa2:	e7f4      	b.n	8009a8e <_printf_float+0x456>

08009aa4 <_printf_common>:
 8009aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa8:	4616      	mov	r6, r2
 8009aaa:	4699      	mov	r9, r3
 8009aac:	688a      	ldr	r2, [r1, #8]
 8009aae:	690b      	ldr	r3, [r1, #16]
 8009ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	bfb8      	it	lt
 8009ab8:	4613      	movlt	r3, r2
 8009aba:	6033      	str	r3, [r6, #0]
 8009abc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	b10a      	cbz	r2, 8009aca <_printf_common+0x26>
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	6033      	str	r3, [r6, #0]
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	0699      	lsls	r1, r3, #26
 8009ace:	bf42      	ittt	mi
 8009ad0:	6833      	ldrmi	r3, [r6, #0]
 8009ad2:	3302      	addmi	r3, #2
 8009ad4:	6033      	strmi	r3, [r6, #0]
 8009ad6:	6825      	ldr	r5, [r4, #0]
 8009ad8:	f015 0506 	ands.w	r5, r5, #6
 8009adc:	d106      	bne.n	8009aec <_printf_common+0x48>
 8009ade:	f104 0a19 	add.w	sl, r4, #25
 8009ae2:	68e3      	ldr	r3, [r4, #12]
 8009ae4:	6832      	ldr	r2, [r6, #0]
 8009ae6:	1a9b      	subs	r3, r3, r2
 8009ae8:	42ab      	cmp	r3, r5
 8009aea:	dc26      	bgt.n	8009b3a <_printf_common+0x96>
 8009aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009af0:	1e13      	subs	r3, r2, #0
 8009af2:	6822      	ldr	r2, [r4, #0]
 8009af4:	bf18      	it	ne
 8009af6:	2301      	movne	r3, #1
 8009af8:	0692      	lsls	r2, r2, #26
 8009afa:	d42b      	bmi.n	8009b54 <_printf_common+0xb0>
 8009afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b00:	4649      	mov	r1, r9
 8009b02:	4638      	mov	r0, r7
 8009b04:	47c0      	blx	r8
 8009b06:	3001      	adds	r0, #1
 8009b08:	d01e      	beq.n	8009b48 <_printf_common+0xa4>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	68e5      	ldr	r5, [r4, #12]
 8009b0e:	6832      	ldr	r2, [r6, #0]
 8009b10:	f003 0306 	and.w	r3, r3, #6
 8009b14:	2b04      	cmp	r3, #4
 8009b16:	bf08      	it	eq
 8009b18:	1aad      	subeq	r5, r5, r2
 8009b1a:	68a3      	ldr	r3, [r4, #8]
 8009b1c:	6922      	ldr	r2, [r4, #16]
 8009b1e:	bf0c      	ite	eq
 8009b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b24:	2500      	movne	r5, #0
 8009b26:	4293      	cmp	r3, r2
 8009b28:	bfc4      	itt	gt
 8009b2a:	1a9b      	subgt	r3, r3, r2
 8009b2c:	18ed      	addgt	r5, r5, r3
 8009b2e:	2600      	movs	r6, #0
 8009b30:	341a      	adds	r4, #26
 8009b32:	42b5      	cmp	r5, r6
 8009b34:	d11a      	bne.n	8009b6c <_printf_common+0xc8>
 8009b36:	2000      	movs	r0, #0
 8009b38:	e008      	b.n	8009b4c <_printf_common+0xa8>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	4652      	mov	r2, sl
 8009b3e:	4649      	mov	r1, r9
 8009b40:	4638      	mov	r0, r7
 8009b42:	47c0      	blx	r8
 8009b44:	3001      	adds	r0, #1
 8009b46:	d103      	bne.n	8009b50 <_printf_common+0xac>
 8009b48:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b50:	3501      	adds	r5, #1
 8009b52:	e7c6      	b.n	8009ae2 <_printf_common+0x3e>
 8009b54:	18e1      	adds	r1, r4, r3
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	2030      	movs	r0, #48	; 0x30
 8009b5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b5e:	4422      	add	r2, r4
 8009b60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b68:	3302      	adds	r3, #2
 8009b6a:	e7c7      	b.n	8009afc <_printf_common+0x58>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	4622      	mov	r2, r4
 8009b70:	4649      	mov	r1, r9
 8009b72:	4638      	mov	r0, r7
 8009b74:	47c0      	blx	r8
 8009b76:	3001      	adds	r0, #1
 8009b78:	d0e6      	beq.n	8009b48 <_printf_common+0xa4>
 8009b7a:	3601      	adds	r6, #1
 8009b7c:	e7d9      	b.n	8009b32 <_printf_common+0x8e>
	...

08009b80 <_printf_i>:
 8009b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b84:	7e0f      	ldrb	r7, [r1, #24]
 8009b86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b88:	2f78      	cmp	r7, #120	; 0x78
 8009b8a:	4691      	mov	r9, r2
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	460c      	mov	r4, r1
 8009b90:	469a      	mov	sl, r3
 8009b92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b96:	d807      	bhi.n	8009ba8 <_printf_i+0x28>
 8009b98:	2f62      	cmp	r7, #98	; 0x62
 8009b9a:	d80a      	bhi.n	8009bb2 <_printf_i+0x32>
 8009b9c:	2f00      	cmp	r7, #0
 8009b9e:	f000 80d8 	beq.w	8009d52 <_printf_i+0x1d2>
 8009ba2:	2f58      	cmp	r7, #88	; 0x58
 8009ba4:	f000 80a3 	beq.w	8009cee <_printf_i+0x16e>
 8009ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bb0:	e03a      	b.n	8009c28 <_printf_i+0xa8>
 8009bb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bb6:	2b15      	cmp	r3, #21
 8009bb8:	d8f6      	bhi.n	8009ba8 <_printf_i+0x28>
 8009bba:	a101      	add	r1, pc, #4	; (adr r1, 8009bc0 <_printf_i+0x40>)
 8009bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bc0:	08009c19 	.word	0x08009c19
 8009bc4:	08009c2d 	.word	0x08009c2d
 8009bc8:	08009ba9 	.word	0x08009ba9
 8009bcc:	08009ba9 	.word	0x08009ba9
 8009bd0:	08009ba9 	.word	0x08009ba9
 8009bd4:	08009ba9 	.word	0x08009ba9
 8009bd8:	08009c2d 	.word	0x08009c2d
 8009bdc:	08009ba9 	.word	0x08009ba9
 8009be0:	08009ba9 	.word	0x08009ba9
 8009be4:	08009ba9 	.word	0x08009ba9
 8009be8:	08009ba9 	.word	0x08009ba9
 8009bec:	08009d39 	.word	0x08009d39
 8009bf0:	08009c5d 	.word	0x08009c5d
 8009bf4:	08009d1b 	.word	0x08009d1b
 8009bf8:	08009ba9 	.word	0x08009ba9
 8009bfc:	08009ba9 	.word	0x08009ba9
 8009c00:	08009d5b 	.word	0x08009d5b
 8009c04:	08009ba9 	.word	0x08009ba9
 8009c08:	08009c5d 	.word	0x08009c5d
 8009c0c:	08009ba9 	.word	0x08009ba9
 8009c10:	08009ba9 	.word	0x08009ba9
 8009c14:	08009d23 	.word	0x08009d23
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	1d1a      	adds	r2, r3, #4
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	602a      	str	r2, [r5, #0]
 8009c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e0a3      	b.n	8009d74 <_printf_i+0x1f4>
 8009c2c:	6820      	ldr	r0, [r4, #0]
 8009c2e:	6829      	ldr	r1, [r5, #0]
 8009c30:	0606      	lsls	r6, r0, #24
 8009c32:	f101 0304 	add.w	r3, r1, #4
 8009c36:	d50a      	bpl.n	8009c4e <_printf_i+0xce>
 8009c38:	680e      	ldr	r6, [r1, #0]
 8009c3a:	602b      	str	r3, [r5, #0]
 8009c3c:	2e00      	cmp	r6, #0
 8009c3e:	da03      	bge.n	8009c48 <_printf_i+0xc8>
 8009c40:	232d      	movs	r3, #45	; 0x2d
 8009c42:	4276      	negs	r6, r6
 8009c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c48:	485e      	ldr	r0, [pc, #376]	; (8009dc4 <_printf_i+0x244>)
 8009c4a:	230a      	movs	r3, #10
 8009c4c:	e019      	b.n	8009c82 <_printf_i+0x102>
 8009c4e:	680e      	ldr	r6, [r1, #0]
 8009c50:	602b      	str	r3, [r5, #0]
 8009c52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c56:	bf18      	it	ne
 8009c58:	b236      	sxthne	r6, r6
 8009c5a:	e7ef      	b.n	8009c3c <_printf_i+0xbc>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	6820      	ldr	r0, [r4, #0]
 8009c60:	1d19      	adds	r1, r3, #4
 8009c62:	6029      	str	r1, [r5, #0]
 8009c64:	0601      	lsls	r1, r0, #24
 8009c66:	d501      	bpl.n	8009c6c <_printf_i+0xec>
 8009c68:	681e      	ldr	r6, [r3, #0]
 8009c6a:	e002      	b.n	8009c72 <_printf_i+0xf2>
 8009c6c:	0646      	lsls	r6, r0, #25
 8009c6e:	d5fb      	bpl.n	8009c68 <_printf_i+0xe8>
 8009c70:	881e      	ldrh	r6, [r3, #0]
 8009c72:	4854      	ldr	r0, [pc, #336]	; (8009dc4 <_printf_i+0x244>)
 8009c74:	2f6f      	cmp	r7, #111	; 0x6f
 8009c76:	bf0c      	ite	eq
 8009c78:	2308      	moveq	r3, #8
 8009c7a:	230a      	movne	r3, #10
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c82:	6865      	ldr	r5, [r4, #4]
 8009c84:	60a5      	str	r5, [r4, #8]
 8009c86:	2d00      	cmp	r5, #0
 8009c88:	bfa2      	ittt	ge
 8009c8a:	6821      	ldrge	r1, [r4, #0]
 8009c8c:	f021 0104 	bicge.w	r1, r1, #4
 8009c90:	6021      	strge	r1, [r4, #0]
 8009c92:	b90e      	cbnz	r6, 8009c98 <_printf_i+0x118>
 8009c94:	2d00      	cmp	r5, #0
 8009c96:	d04d      	beq.n	8009d34 <_printf_i+0x1b4>
 8009c98:	4615      	mov	r5, r2
 8009c9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c9e:	fb03 6711 	mls	r7, r3, r1, r6
 8009ca2:	5dc7      	ldrb	r7, [r0, r7]
 8009ca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ca8:	4637      	mov	r7, r6
 8009caa:	42bb      	cmp	r3, r7
 8009cac:	460e      	mov	r6, r1
 8009cae:	d9f4      	bls.n	8009c9a <_printf_i+0x11a>
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	d10b      	bne.n	8009ccc <_printf_i+0x14c>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	07de      	lsls	r6, r3, #31
 8009cb8:	d508      	bpl.n	8009ccc <_printf_i+0x14c>
 8009cba:	6923      	ldr	r3, [r4, #16]
 8009cbc:	6861      	ldr	r1, [r4, #4]
 8009cbe:	4299      	cmp	r1, r3
 8009cc0:	bfde      	ittt	le
 8009cc2:	2330      	movle	r3, #48	; 0x30
 8009cc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ccc:	1b52      	subs	r2, r2, r5
 8009cce:	6122      	str	r2, [r4, #16]
 8009cd0:	f8cd a000 	str.w	sl, [sp]
 8009cd4:	464b      	mov	r3, r9
 8009cd6:	aa03      	add	r2, sp, #12
 8009cd8:	4621      	mov	r1, r4
 8009cda:	4640      	mov	r0, r8
 8009cdc:	f7ff fee2 	bl	8009aa4 <_printf_common>
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d14c      	bne.n	8009d7e <_printf_i+0x1fe>
 8009ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce8:	b004      	add	sp, #16
 8009cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cee:	4835      	ldr	r0, [pc, #212]	; (8009dc4 <_printf_i+0x244>)
 8009cf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cf4:	6829      	ldr	r1, [r5, #0]
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cfc:	6029      	str	r1, [r5, #0]
 8009cfe:	061d      	lsls	r5, r3, #24
 8009d00:	d514      	bpl.n	8009d2c <_printf_i+0x1ac>
 8009d02:	07df      	lsls	r7, r3, #31
 8009d04:	bf44      	itt	mi
 8009d06:	f043 0320 	orrmi.w	r3, r3, #32
 8009d0a:	6023      	strmi	r3, [r4, #0]
 8009d0c:	b91e      	cbnz	r6, 8009d16 <_printf_i+0x196>
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	f023 0320 	bic.w	r3, r3, #32
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	2310      	movs	r3, #16
 8009d18:	e7b0      	b.n	8009c7c <_printf_i+0xfc>
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	f043 0320 	orr.w	r3, r3, #32
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	2378      	movs	r3, #120	; 0x78
 8009d24:	4828      	ldr	r0, [pc, #160]	; (8009dc8 <_printf_i+0x248>)
 8009d26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d2a:	e7e3      	b.n	8009cf4 <_printf_i+0x174>
 8009d2c:	0659      	lsls	r1, r3, #25
 8009d2e:	bf48      	it	mi
 8009d30:	b2b6      	uxthmi	r6, r6
 8009d32:	e7e6      	b.n	8009d02 <_printf_i+0x182>
 8009d34:	4615      	mov	r5, r2
 8009d36:	e7bb      	b.n	8009cb0 <_printf_i+0x130>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	6826      	ldr	r6, [r4, #0]
 8009d3c:	6961      	ldr	r1, [r4, #20]
 8009d3e:	1d18      	adds	r0, r3, #4
 8009d40:	6028      	str	r0, [r5, #0]
 8009d42:	0635      	lsls	r5, r6, #24
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	d501      	bpl.n	8009d4c <_printf_i+0x1cc>
 8009d48:	6019      	str	r1, [r3, #0]
 8009d4a:	e002      	b.n	8009d52 <_printf_i+0x1d2>
 8009d4c:	0670      	lsls	r0, r6, #25
 8009d4e:	d5fb      	bpl.n	8009d48 <_printf_i+0x1c8>
 8009d50:	8019      	strh	r1, [r3, #0]
 8009d52:	2300      	movs	r3, #0
 8009d54:	6123      	str	r3, [r4, #16]
 8009d56:	4615      	mov	r5, r2
 8009d58:	e7ba      	b.n	8009cd0 <_printf_i+0x150>
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	1d1a      	adds	r2, r3, #4
 8009d5e:	602a      	str	r2, [r5, #0]
 8009d60:	681d      	ldr	r5, [r3, #0]
 8009d62:	6862      	ldr	r2, [r4, #4]
 8009d64:	2100      	movs	r1, #0
 8009d66:	4628      	mov	r0, r5
 8009d68:	f7f6 fa4a 	bl	8000200 <memchr>
 8009d6c:	b108      	cbz	r0, 8009d72 <_printf_i+0x1f2>
 8009d6e:	1b40      	subs	r0, r0, r5
 8009d70:	6060      	str	r0, [r4, #4]
 8009d72:	6863      	ldr	r3, [r4, #4]
 8009d74:	6123      	str	r3, [r4, #16]
 8009d76:	2300      	movs	r3, #0
 8009d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d7c:	e7a8      	b.n	8009cd0 <_printf_i+0x150>
 8009d7e:	6923      	ldr	r3, [r4, #16]
 8009d80:	462a      	mov	r2, r5
 8009d82:	4649      	mov	r1, r9
 8009d84:	4640      	mov	r0, r8
 8009d86:	47d0      	blx	sl
 8009d88:	3001      	adds	r0, #1
 8009d8a:	d0ab      	beq.n	8009ce4 <_printf_i+0x164>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	079b      	lsls	r3, r3, #30
 8009d90:	d413      	bmi.n	8009dba <_printf_i+0x23a>
 8009d92:	68e0      	ldr	r0, [r4, #12]
 8009d94:	9b03      	ldr	r3, [sp, #12]
 8009d96:	4298      	cmp	r0, r3
 8009d98:	bfb8      	it	lt
 8009d9a:	4618      	movlt	r0, r3
 8009d9c:	e7a4      	b.n	8009ce8 <_printf_i+0x168>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4632      	mov	r2, r6
 8009da2:	4649      	mov	r1, r9
 8009da4:	4640      	mov	r0, r8
 8009da6:	47d0      	blx	sl
 8009da8:	3001      	adds	r0, #1
 8009daa:	d09b      	beq.n	8009ce4 <_printf_i+0x164>
 8009dac:	3501      	adds	r5, #1
 8009dae:	68e3      	ldr	r3, [r4, #12]
 8009db0:	9903      	ldr	r1, [sp, #12]
 8009db2:	1a5b      	subs	r3, r3, r1
 8009db4:	42ab      	cmp	r3, r5
 8009db6:	dcf2      	bgt.n	8009d9e <_printf_i+0x21e>
 8009db8:	e7eb      	b.n	8009d92 <_printf_i+0x212>
 8009dba:	2500      	movs	r5, #0
 8009dbc:	f104 0619 	add.w	r6, r4, #25
 8009dc0:	e7f5      	b.n	8009dae <_printf_i+0x22e>
 8009dc2:	bf00      	nop
 8009dc4:	08030976 	.word	0x08030976
 8009dc8:	08030987 	.word	0x08030987

08009dcc <siprintf>:
 8009dcc:	b40e      	push	{r1, r2, r3}
 8009dce:	b500      	push	{lr}
 8009dd0:	b09c      	sub	sp, #112	; 0x70
 8009dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8009dd4:	9002      	str	r0, [sp, #8]
 8009dd6:	9006      	str	r0, [sp, #24]
 8009dd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ddc:	4809      	ldr	r0, [pc, #36]	; (8009e04 <siprintf+0x38>)
 8009dde:	9107      	str	r1, [sp, #28]
 8009de0:	9104      	str	r1, [sp, #16]
 8009de2:	4909      	ldr	r1, [pc, #36]	; (8009e08 <siprintf+0x3c>)
 8009de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de8:	9105      	str	r1, [sp, #20]
 8009dea:	6800      	ldr	r0, [r0, #0]
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	a902      	add	r1, sp, #8
 8009df0:	f001 fc22 	bl	800b638 <_svfiprintf_r>
 8009df4:	9b02      	ldr	r3, [sp, #8]
 8009df6:	2200      	movs	r2, #0
 8009df8:	701a      	strb	r2, [r3, #0]
 8009dfa:	b01c      	add	sp, #112	; 0x70
 8009dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e00:	b003      	add	sp, #12
 8009e02:	4770      	bx	lr
 8009e04:	20000188 	.word	0x20000188
 8009e08:	ffff0208 	.word	0xffff0208

08009e0c <__sread>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	460c      	mov	r4, r1
 8009e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e14:	f001 fe6a 	bl	800baec <_read_r>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	bfab      	itete	ge
 8009e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e20:	181b      	addge	r3, r3, r0
 8009e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e26:	bfac      	ite	ge
 8009e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e2a:	81a3      	strhlt	r3, [r4, #12]
 8009e2c:	bd10      	pop	{r4, pc}

08009e2e <__swrite>:
 8009e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e32:	461f      	mov	r7, r3
 8009e34:	898b      	ldrh	r3, [r1, #12]
 8009e36:	05db      	lsls	r3, r3, #23
 8009e38:	4605      	mov	r5, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	d505      	bpl.n	8009e4c <__swrite+0x1e>
 8009e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e44:	2302      	movs	r3, #2
 8009e46:	2200      	movs	r2, #0
 8009e48:	f000 ff06 	bl	800ac58 <_lseek_r>
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	4632      	mov	r2, r6
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e62:	f000 b829 	b.w	8009eb8 <_write_r>

08009e66 <__sseek>:
 8009e66:	b510      	push	{r4, lr}
 8009e68:	460c      	mov	r4, r1
 8009e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6e:	f000 fef3 	bl	800ac58 <_lseek_r>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	bf15      	itete	ne
 8009e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e82:	81a3      	strheq	r3, [r4, #12]
 8009e84:	bf18      	it	ne
 8009e86:	81a3      	strhne	r3, [r4, #12]
 8009e88:	bd10      	pop	{r4, pc}

08009e8a <__sclose>:
 8009e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8e:	f000 b843 	b.w	8009f18 <_close_r>

08009e92 <strncpy>:
 8009e92:	b510      	push	{r4, lr}
 8009e94:	3901      	subs	r1, #1
 8009e96:	4603      	mov	r3, r0
 8009e98:	b132      	cbz	r2, 8009ea8 <strncpy+0x16>
 8009e9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009e9e:	f803 4b01 	strb.w	r4, [r3], #1
 8009ea2:	3a01      	subs	r2, #1
 8009ea4:	2c00      	cmp	r4, #0
 8009ea6:	d1f7      	bne.n	8009e98 <strncpy+0x6>
 8009ea8:	441a      	add	r2, r3
 8009eaa:	2100      	movs	r1, #0
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d100      	bne.n	8009eb2 <strncpy+0x20>
 8009eb0:	bd10      	pop	{r4, pc}
 8009eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8009eb6:	e7f9      	b.n	8009eac <strncpy+0x1a>

08009eb8 <_write_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d07      	ldr	r5, [pc, #28]	; (8009ed8 <_write_r+0x20>)
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	4608      	mov	r0, r1
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	602a      	str	r2, [r5, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f7f8 fe5f 	bl	8002b8a <_write>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d102      	bne.n	8009ed6 <_write_r+0x1e>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	b103      	cbz	r3, 8009ed6 <_write_r+0x1e>
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	200035f0 	.word	0x200035f0

08009edc <__assert_func>:
 8009edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ede:	4614      	mov	r4, r2
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	4b09      	ldr	r3, [pc, #36]	; (8009f08 <__assert_func+0x2c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	68d8      	ldr	r0, [r3, #12]
 8009eea:	b14c      	cbz	r4, 8009f00 <__assert_func+0x24>
 8009eec:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <__assert_func+0x30>)
 8009eee:	9100      	str	r1, [sp, #0]
 8009ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ef4:	4906      	ldr	r1, [pc, #24]	; (8009f10 <__assert_func+0x34>)
 8009ef6:	462b      	mov	r3, r5
 8009ef8:	f000 fe98 	bl	800ac2c <fiprintf>
 8009efc:	f001 fed8 	bl	800bcb0 <abort>
 8009f00:	4b04      	ldr	r3, [pc, #16]	; (8009f14 <__assert_func+0x38>)
 8009f02:	461c      	mov	r4, r3
 8009f04:	e7f3      	b.n	8009eee <__assert_func+0x12>
 8009f06:	bf00      	nop
 8009f08:	20000188 	.word	0x20000188
 8009f0c:	08030998 	.word	0x08030998
 8009f10:	080309a5 	.word	0x080309a5
 8009f14:	080309d3 	.word	0x080309d3

08009f18 <_close_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4d06      	ldr	r5, [pc, #24]	; (8009f34 <_close_r+0x1c>)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4604      	mov	r4, r0
 8009f20:	4608      	mov	r0, r1
 8009f22:	602b      	str	r3, [r5, #0]
 8009f24:	f7f8 fe4d 	bl	8002bc2 <_close>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d102      	bne.n	8009f32 <_close_r+0x1a>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	b103      	cbz	r3, 8009f32 <_close_r+0x1a>
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	200035f0 	.word	0x200035f0

08009f38 <quorem>:
 8009f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	6903      	ldr	r3, [r0, #16]
 8009f3e:	690c      	ldr	r4, [r1, #16]
 8009f40:	42a3      	cmp	r3, r4
 8009f42:	4607      	mov	r7, r0
 8009f44:	f2c0 8081 	blt.w	800a04a <quorem+0x112>
 8009f48:	3c01      	subs	r4, #1
 8009f4a:	f101 0814 	add.w	r8, r1, #20
 8009f4e:	f100 0514 	add.w	r5, r0, #20
 8009f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f56:	9301      	str	r3, [sp, #4]
 8009f58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f60:	3301      	adds	r3, #1
 8009f62:	429a      	cmp	r2, r3
 8009f64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f70:	d331      	bcc.n	8009fd6 <quorem+0x9e>
 8009f72:	f04f 0e00 	mov.w	lr, #0
 8009f76:	4640      	mov	r0, r8
 8009f78:	46ac      	mov	ip, r5
 8009f7a:	46f2      	mov	sl, lr
 8009f7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f80:	b293      	uxth	r3, r2
 8009f82:	fb06 e303 	mla	r3, r6, r3, lr
 8009f86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	ebaa 0303 	sub.w	r3, sl, r3
 8009f90:	f8dc a000 	ldr.w	sl, [ip]
 8009f94:	0c12      	lsrs	r2, r2, #16
 8009f96:	fa13 f38a 	uxtah	r3, r3, sl
 8009f9a:	fb06 e202 	mla	r2, r6, r2, lr
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	9b00      	ldr	r3, [sp, #0]
 8009fa2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009fac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fb0:	f8bd 3000 	ldrh.w	r3, [sp]
 8009fb4:	4581      	cmp	r9, r0
 8009fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fba:	f84c 3b04 	str.w	r3, [ip], #4
 8009fbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fc2:	d2db      	bcs.n	8009f7c <quorem+0x44>
 8009fc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fc8:	b92b      	cbnz	r3, 8009fd6 <quorem+0x9e>
 8009fca:	9b01      	ldr	r3, [sp, #4]
 8009fcc:	3b04      	subs	r3, #4
 8009fce:	429d      	cmp	r5, r3
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	d32e      	bcc.n	800a032 <quorem+0xfa>
 8009fd4:	613c      	str	r4, [r7, #16]
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	f001 f8da 	bl	800b190 <__mcmp>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	db24      	blt.n	800a02a <quorem+0xf2>
 8009fe0:	3601      	adds	r6, #1
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f04f 0c00 	mov.w	ip, #0
 8009fe8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fec:	f8d0 e000 	ldr.w	lr, [r0]
 8009ff0:	b293      	uxth	r3, r2
 8009ff2:	ebac 0303 	sub.w	r3, ip, r3
 8009ff6:	0c12      	lsrs	r2, r2, #16
 8009ff8:	fa13 f38e 	uxtah	r3, r3, lr
 8009ffc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a000:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a004:	b29b      	uxth	r3, r3
 800a006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a00a:	45c1      	cmp	r9, r8
 800a00c:	f840 3b04 	str.w	r3, [r0], #4
 800a010:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a014:	d2e8      	bcs.n	8009fe8 <quorem+0xb0>
 800a016:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a01a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a01e:	b922      	cbnz	r2, 800a02a <quorem+0xf2>
 800a020:	3b04      	subs	r3, #4
 800a022:	429d      	cmp	r5, r3
 800a024:	461a      	mov	r2, r3
 800a026:	d30a      	bcc.n	800a03e <quorem+0x106>
 800a028:	613c      	str	r4, [r7, #16]
 800a02a:	4630      	mov	r0, r6
 800a02c:	b003      	add	sp, #12
 800a02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a032:	6812      	ldr	r2, [r2, #0]
 800a034:	3b04      	subs	r3, #4
 800a036:	2a00      	cmp	r2, #0
 800a038:	d1cc      	bne.n	8009fd4 <quorem+0x9c>
 800a03a:	3c01      	subs	r4, #1
 800a03c:	e7c7      	b.n	8009fce <quorem+0x96>
 800a03e:	6812      	ldr	r2, [r2, #0]
 800a040:	3b04      	subs	r3, #4
 800a042:	2a00      	cmp	r2, #0
 800a044:	d1f0      	bne.n	800a028 <quorem+0xf0>
 800a046:	3c01      	subs	r4, #1
 800a048:	e7eb      	b.n	800a022 <quorem+0xea>
 800a04a:	2000      	movs	r0, #0
 800a04c:	e7ee      	b.n	800a02c <quorem+0xf4>
	...

0800a050 <_dtoa_r>:
 800a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	ed2d 8b04 	vpush	{d8-d9}
 800a058:	ec57 6b10 	vmov	r6, r7, d0
 800a05c:	b093      	sub	sp, #76	; 0x4c
 800a05e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a060:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a064:	9106      	str	r1, [sp, #24]
 800a066:	ee10 aa10 	vmov	sl, s0
 800a06a:	4604      	mov	r4, r0
 800a06c:	9209      	str	r2, [sp, #36]	; 0x24
 800a06e:	930c      	str	r3, [sp, #48]	; 0x30
 800a070:	46bb      	mov	fp, r7
 800a072:	b975      	cbnz	r5, 800a092 <_dtoa_r+0x42>
 800a074:	2010      	movs	r0, #16
 800a076:	f000 fe01 	bl	800ac7c <malloc>
 800a07a:	4602      	mov	r2, r0
 800a07c:	6260      	str	r0, [r4, #36]	; 0x24
 800a07e:	b920      	cbnz	r0, 800a08a <_dtoa_r+0x3a>
 800a080:	4ba7      	ldr	r3, [pc, #668]	; (800a320 <_dtoa_r+0x2d0>)
 800a082:	21ea      	movs	r1, #234	; 0xea
 800a084:	48a7      	ldr	r0, [pc, #668]	; (800a324 <_dtoa_r+0x2d4>)
 800a086:	f7ff ff29 	bl	8009edc <__assert_func>
 800a08a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a08e:	6005      	str	r5, [r0, #0]
 800a090:	60c5      	str	r5, [r0, #12]
 800a092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a094:	6819      	ldr	r1, [r3, #0]
 800a096:	b151      	cbz	r1, 800a0ae <_dtoa_r+0x5e>
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	604a      	str	r2, [r1, #4]
 800a09c:	2301      	movs	r3, #1
 800a09e:	4093      	lsls	r3, r2
 800a0a0:	608b      	str	r3, [r1, #8]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 fe32 	bl	800ad0c <_Bfree>
 800a0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	1e3b      	subs	r3, r7, #0
 800a0b0:	bfaa      	itet	ge
 800a0b2:	2300      	movge	r3, #0
 800a0b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a0b8:	f8c8 3000 	strge.w	r3, [r8]
 800a0bc:	4b9a      	ldr	r3, [pc, #616]	; (800a328 <_dtoa_r+0x2d8>)
 800a0be:	bfbc      	itt	lt
 800a0c0:	2201      	movlt	r2, #1
 800a0c2:	f8c8 2000 	strlt.w	r2, [r8]
 800a0c6:	ea33 030b 	bics.w	r3, r3, fp
 800a0ca:	d11b      	bne.n	800a104 <_dtoa_r+0xb4>
 800a0cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0d8:	4333      	orrs	r3, r6
 800a0da:	f000 8592 	beq.w	800ac02 <_dtoa_r+0xbb2>
 800a0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0e0:	b963      	cbnz	r3, 800a0fc <_dtoa_r+0xac>
 800a0e2:	4b92      	ldr	r3, [pc, #584]	; (800a32c <_dtoa_r+0x2dc>)
 800a0e4:	e022      	b.n	800a12c <_dtoa_r+0xdc>
 800a0e6:	4b92      	ldr	r3, [pc, #584]	; (800a330 <_dtoa_r+0x2e0>)
 800a0e8:	9301      	str	r3, [sp, #4]
 800a0ea:	3308      	adds	r3, #8
 800a0ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0ee:	6013      	str	r3, [r2, #0]
 800a0f0:	9801      	ldr	r0, [sp, #4]
 800a0f2:	b013      	add	sp, #76	; 0x4c
 800a0f4:	ecbd 8b04 	vpop	{d8-d9}
 800a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fc:	4b8b      	ldr	r3, [pc, #556]	; (800a32c <_dtoa_r+0x2dc>)
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	3303      	adds	r3, #3
 800a102:	e7f3      	b.n	800a0ec <_dtoa_r+0x9c>
 800a104:	2200      	movs	r2, #0
 800a106:	2300      	movs	r3, #0
 800a108:	4650      	mov	r0, sl
 800a10a:	4659      	mov	r1, fp
 800a10c:	f7f6 fcec 	bl	8000ae8 <__aeabi_dcmpeq>
 800a110:	ec4b ab19 	vmov	d9, sl, fp
 800a114:	4680      	mov	r8, r0
 800a116:	b158      	cbz	r0, 800a130 <_dtoa_r+0xe0>
 800a118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a11a:	2301      	movs	r3, #1
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 856b 	beq.w	800abfc <_dtoa_r+0xbac>
 800a126:	4883      	ldr	r0, [pc, #524]	; (800a334 <_dtoa_r+0x2e4>)
 800a128:	6018      	str	r0, [r3, #0]
 800a12a:	1e43      	subs	r3, r0, #1
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	e7df      	b.n	800a0f0 <_dtoa_r+0xa0>
 800a130:	ec4b ab10 	vmov	d0, sl, fp
 800a134:	aa10      	add	r2, sp, #64	; 0x40
 800a136:	a911      	add	r1, sp, #68	; 0x44
 800a138:	4620      	mov	r0, r4
 800a13a:	f001 f8cf 	bl	800b2dc <__d2b>
 800a13e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a142:	ee08 0a10 	vmov	s16, r0
 800a146:	2d00      	cmp	r5, #0
 800a148:	f000 8084 	beq.w	800a254 <_dtoa_r+0x204>
 800a14c:	ee19 3a90 	vmov	r3, s19
 800a150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a154:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a158:	4656      	mov	r6, sl
 800a15a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a15e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a162:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a166:	4b74      	ldr	r3, [pc, #464]	; (800a338 <_dtoa_r+0x2e8>)
 800a168:	2200      	movs	r2, #0
 800a16a:	4630      	mov	r0, r6
 800a16c:	4639      	mov	r1, r7
 800a16e:	f7f6 f89b 	bl	80002a8 <__aeabi_dsub>
 800a172:	a365      	add	r3, pc, #404	; (adr r3, 800a308 <_dtoa_r+0x2b8>)
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	f7f6 fa4e 	bl	8000618 <__aeabi_dmul>
 800a17c:	a364      	add	r3, pc, #400	; (adr r3, 800a310 <_dtoa_r+0x2c0>)
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f7f6 f893 	bl	80002ac <__adddf3>
 800a186:	4606      	mov	r6, r0
 800a188:	4628      	mov	r0, r5
 800a18a:	460f      	mov	r7, r1
 800a18c:	f7f6 f9da 	bl	8000544 <__aeabi_i2d>
 800a190:	a361      	add	r3, pc, #388	; (adr r3, 800a318 <_dtoa_r+0x2c8>)
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	f7f6 fa3f 	bl	8000618 <__aeabi_dmul>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4630      	mov	r0, r6
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	f7f6 f883 	bl	80002ac <__adddf3>
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460f      	mov	r7, r1
 800a1aa:	f7f6 fce5 	bl	8000b78 <__aeabi_d2iz>
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	9000      	str	r0, [sp, #0]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 fca0 	bl	8000afc <__aeabi_dcmplt>
 800a1bc:	b150      	cbz	r0, 800a1d4 <_dtoa_r+0x184>
 800a1be:	9800      	ldr	r0, [sp, #0]
 800a1c0:	f7f6 f9c0 	bl	8000544 <__aeabi_i2d>
 800a1c4:	4632      	mov	r2, r6
 800a1c6:	463b      	mov	r3, r7
 800a1c8:	f7f6 fc8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1cc:	b910      	cbnz	r0, 800a1d4 <_dtoa_r+0x184>
 800a1ce:	9b00      	ldr	r3, [sp, #0]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	9b00      	ldr	r3, [sp, #0]
 800a1d6:	2b16      	cmp	r3, #22
 800a1d8:	d85a      	bhi.n	800a290 <_dtoa_r+0x240>
 800a1da:	9a00      	ldr	r2, [sp, #0]
 800a1dc:	4b57      	ldr	r3, [pc, #348]	; (800a33c <_dtoa_r+0x2ec>)
 800a1de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e6:	ec51 0b19 	vmov	r0, r1, d9
 800a1ea:	f7f6 fc87 	bl	8000afc <__aeabi_dcmplt>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d050      	beq.n	800a294 <_dtoa_r+0x244>
 800a1f2:	9b00      	ldr	r3, [sp, #0]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1fe:	1b5d      	subs	r5, r3, r5
 800a200:	1e6b      	subs	r3, r5, #1
 800a202:	9305      	str	r3, [sp, #20]
 800a204:	bf45      	ittet	mi
 800a206:	f1c5 0301 	rsbmi	r3, r5, #1
 800a20a:	9304      	strmi	r3, [sp, #16]
 800a20c:	2300      	movpl	r3, #0
 800a20e:	2300      	movmi	r3, #0
 800a210:	bf4c      	ite	mi
 800a212:	9305      	strmi	r3, [sp, #20]
 800a214:	9304      	strpl	r3, [sp, #16]
 800a216:	9b00      	ldr	r3, [sp, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	db3d      	blt.n	800a298 <_dtoa_r+0x248>
 800a21c:	9b05      	ldr	r3, [sp, #20]
 800a21e:	9a00      	ldr	r2, [sp, #0]
 800a220:	920a      	str	r2, [sp, #40]	; 0x28
 800a222:	4413      	add	r3, r2
 800a224:	9305      	str	r3, [sp, #20]
 800a226:	2300      	movs	r3, #0
 800a228:	9307      	str	r3, [sp, #28]
 800a22a:	9b06      	ldr	r3, [sp, #24]
 800a22c:	2b09      	cmp	r3, #9
 800a22e:	f200 8089 	bhi.w	800a344 <_dtoa_r+0x2f4>
 800a232:	2b05      	cmp	r3, #5
 800a234:	bfc4      	itt	gt
 800a236:	3b04      	subgt	r3, #4
 800a238:	9306      	strgt	r3, [sp, #24]
 800a23a:	9b06      	ldr	r3, [sp, #24]
 800a23c:	f1a3 0302 	sub.w	r3, r3, #2
 800a240:	bfcc      	ite	gt
 800a242:	2500      	movgt	r5, #0
 800a244:	2501      	movle	r5, #1
 800a246:	2b03      	cmp	r3, #3
 800a248:	f200 8087 	bhi.w	800a35a <_dtoa_r+0x30a>
 800a24c:	e8df f003 	tbb	[pc, r3]
 800a250:	59383a2d 	.word	0x59383a2d
 800a254:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a258:	441d      	add	r5, r3
 800a25a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a25e:	2b20      	cmp	r3, #32
 800a260:	bfc1      	itttt	gt
 800a262:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a266:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a26a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a26e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a272:	bfda      	itte	le
 800a274:	f1c3 0320 	rsble	r3, r3, #32
 800a278:	fa06 f003 	lslle.w	r0, r6, r3
 800a27c:	4318      	orrgt	r0, r3
 800a27e:	f7f6 f951 	bl	8000524 <__aeabi_ui2d>
 800a282:	2301      	movs	r3, #1
 800a284:	4606      	mov	r6, r0
 800a286:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a28a:	3d01      	subs	r5, #1
 800a28c:	930e      	str	r3, [sp, #56]	; 0x38
 800a28e:	e76a      	b.n	800a166 <_dtoa_r+0x116>
 800a290:	2301      	movs	r3, #1
 800a292:	e7b2      	b.n	800a1fa <_dtoa_r+0x1aa>
 800a294:	900b      	str	r0, [sp, #44]	; 0x2c
 800a296:	e7b1      	b.n	800a1fc <_dtoa_r+0x1ac>
 800a298:	9b04      	ldr	r3, [sp, #16]
 800a29a:	9a00      	ldr	r2, [sp, #0]
 800a29c:	1a9b      	subs	r3, r3, r2
 800a29e:	9304      	str	r3, [sp, #16]
 800a2a0:	4253      	negs	r3, r2
 800a2a2:	9307      	str	r3, [sp, #28]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a8:	e7bf      	b.n	800a22a <_dtoa_r+0x1da>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9308      	str	r3, [sp, #32]
 800a2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	dc55      	bgt.n	800a360 <_dtoa_r+0x310>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a2be:	e00c      	b.n	800a2da <_dtoa_r+0x28a>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e7f3      	b.n	800a2ac <_dtoa_r+0x25c>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2c8:	9308      	str	r3, [sp, #32]
 800a2ca:	9b00      	ldr	r3, [sp, #0]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	9302      	str	r3, [sp, #8]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	9303      	str	r3, [sp, #12]
 800a2d6:	bfb8      	it	lt
 800a2d8:	2301      	movlt	r3, #1
 800a2da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a2dc:	2200      	movs	r2, #0
 800a2de:	6042      	str	r2, [r0, #4]
 800a2e0:	2204      	movs	r2, #4
 800a2e2:	f102 0614 	add.w	r6, r2, #20
 800a2e6:	429e      	cmp	r6, r3
 800a2e8:	6841      	ldr	r1, [r0, #4]
 800a2ea:	d93d      	bls.n	800a368 <_dtoa_r+0x318>
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f000 fccd 	bl	800ac8c <_Balloc>
 800a2f2:	9001      	str	r0, [sp, #4]
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d13b      	bne.n	800a370 <_dtoa_r+0x320>
 800a2f8:	4b11      	ldr	r3, [pc, #68]	; (800a340 <_dtoa_r+0x2f0>)
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a300:	e6c0      	b.n	800a084 <_dtoa_r+0x34>
 800a302:	2301      	movs	r3, #1
 800a304:	e7df      	b.n	800a2c6 <_dtoa_r+0x276>
 800a306:	bf00      	nop
 800a308:	636f4361 	.word	0x636f4361
 800a30c:	3fd287a7 	.word	0x3fd287a7
 800a310:	8b60c8b3 	.word	0x8b60c8b3
 800a314:	3fc68a28 	.word	0x3fc68a28
 800a318:	509f79fb 	.word	0x509f79fb
 800a31c:	3fd34413 	.word	0x3fd34413
 800a320:	080309e1 	.word	0x080309e1
 800a324:	080309f8 	.word	0x080309f8
 800a328:	7ff00000 	.word	0x7ff00000
 800a32c:	080309dd 	.word	0x080309dd
 800a330:	080309d4 	.word	0x080309d4
 800a334:	08030975 	.word	0x08030975
 800a338:	3ff80000 	.word	0x3ff80000
 800a33c:	08030ae8 	.word	0x08030ae8
 800a340:	08030a53 	.word	0x08030a53
 800a344:	2501      	movs	r5, #1
 800a346:	2300      	movs	r3, #0
 800a348:	9306      	str	r3, [sp, #24]
 800a34a:	9508      	str	r5, [sp, #32]
 800a34c:	f04f 33ff 	mov.w	r3, #4294967295
 800a350:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a354:	2200      	movs	r2, #0
 800a356:	2312      	movs	r3, #18
 800a358:	e7b0      	b.n	800a2bc <_dtoa_r+0x26c>
 800a35a:	2301      	movs	r3, #1
 800a35c:	9308      	str	r3, [sp, #32]
 800a35e:	e7f5      	b.n	800a34c <_dtoa_r+0x2fc>
 800a360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a362:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a366:	e7b8      	b.n	800a2da <_dtoa_r+0x28a>
 800a368:	3101      	adds	r1, #1
 800a36a:	6041      	str	r1, [r0, #4]
 800a36c:	0052      	lsls	r2, r2, #1
 800a36e:	e7b8      	b.n	800a2e2 <_dtoa_r+0x292>
 800a370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a372:	9a01      	ldr	r2, [sp, #4]
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	9b03      	ldr	r3, [sp, #12]
 800a378:	2b0e      	cmp	r3, #14
 800a37a:	f200 809d 	bhi.w	800a4b8 <_dtoa_r+0x468>
 800a37e:	2d00      	cmp	r5, #0
 800a380:	f000 809a 	beq.w	800a4b8 <_dtoa_r+0x468>
 800a384:	9b00      	ldr	r3, [sp, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	dd32      	ble.n	800a3f0 <_dtoa_r+0x3a0>
 800a38a:	4ab7      	ldr	r2, [pc, #732]	; (800a668 <_dtoa_r+0x618>)
 800a38c:	f003 030f 	and.w	r3, r3, #15
 800a390:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a394:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a398:	9b00      	ldr	r3, [sp, #0]
 800a39a:	05d8      	lsls	r0, r3, #23
 800a39c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a3a0:	d516      	bpl.n	800a3d0 <_dtoa_r+0x380>
 800a3a2:	4bb2      	ldr	r3, [pc, #712]	; (800a66c <_dtoa_r+0x61c>)
 800a3a4:	ec51 0b19 	vmov	r0, r1, d9
 800a3a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3ac:	f7f6 fa5e 	bl	800086c <__aeabi_ddiv>
 800a3b0:	f007 070f 	and.w	r7, r7, #15
 800a3b4:	4682      	mov	sl, r0
 800a3b6:	468b      	mov	fp, r1
 800a3b8:	2503      	movs	r5, #3
 800a3ba:	4eac      	ldr	r6, [pc, #688]	; (800a66c <_dtoa_r+0x61c>)
 800a3bc:	b957      	cbnz	r7, 800a3d4 <_dtoa_r+0x384>
 800a3be:	4642      	mov	r2, r8
 800a3c0:	464b      	mov	r3, r9
 800a3c2:	4650      	mov	r0, sl
 800a3c4:	4659      	mov	r1, fp
 800a3c6:	f7f6 fa51 	bl	800086c <__aeabi_ddiv>
 800a3ca:	4682      	mov	sl, r0
 800a3cc:	468b      	mov	fp, r1
 800a3ce:	e028      	b.n	800a422 <_dtoa_r+0x3d2>
 800a3d0:	2502      	movs	r5, #2
 800a3d2:	e7f2      	b.n	800a3ba <_dtoa_r+0x36a>
 800a3d4:	07f9      	lsls	r1, r7, #31
 800a3d6:	d508      	bpl.n	800a3ea <_dtoa_r+0x39a>
 800a3d8:	4640      	mov	r0, r8
 800a3da:	4649      	mov	r1, r9
 800a3dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3e0:	f7f6 f91a 	bl	8000618 <__aeabi_dmul>
 800a3e4:	3501      	adds	r5, #1
 800a3e6:	4680      	mov	r8, r0
 800a3e8:	4689      	mov	r9, r1
 800a3ea:	107f      	asrs	r7, r7, #1
 800a3ec:	3608      	adds	r6, #8
 800a3ee:	e7e5      	b.n	800a3bc <_dtoa_r+0x36c>
 800a3f0:	f000 809b 	beq.w	800a52a <_dtoa_r+0x4da>
 800a3f4:	9b00      	ldr	r3, [sp, #0]
 800a3f6:	4f9d      	ldr	r7, [pc, #628]	; (800a66c <_dtoa_r+0x61c>)
 800a3f8:	425e      	negs	r6, r3
 800a3fa:	4b9b      	ldr	r3, [pc, #620]	; (800a668 <_dtoa_r+0x618>)
 800a3fc:	f006 020f 	and.w	r2, r6, #15
 800a400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a408:	ec51 0b19 	vmov	r0, r1, d9
 800a40c:	f7f6 f904 	bl	8000618 <__aeabi_dmul>
 800a410:	1136      	asrs	r6, r6, #4
 800a412:	4682      	mov	sl, r0
 800a414:	468b      	mov	fp, r1
 800a416:	2300      	movs	r3, #0
 800a418:	2502      	movs	r5, #2
 800a41a:	2e00      	cmp	r6, #0
 800a41c:	d17a      	bne.n	800a514 <_dtoa_r+0x4c4>
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1d3      	bne.n	800a3ca <_dtoa_r+0x37a>
 800a422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 8082 	beq.w	800a52e <_dtoa_r+0x4de>
 800a42a:	4b91      	ldr	r3, [pc, #580]	; (800a670 <_dtoa_r+0x620>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	4650      	mov	r0, sl
 800a430:	4659      	mov	r1, fp
 800a432:	f7f6 fb63 	bl	8000afc <__aeabi_dcmplt>
 800a436:	2800      	cmp	r0, #0
 800a438:	d079      	beq.n	800a52e <_dtoa_r+0x4de>
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d076      	beq.n	800a52e <_dtoa_r+0x4de>
 800a440:	9b02      	ldr	r3, [sp, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	dd36      	ble.n	800a4b4 <_dtoa_r+0x464>
 800a446:	9b00      	ldr	r3, [sp, #0]
 800a448:	4650      	mov	r0, sl
 800a44a:	4659      	mov	r1, fp
 800a44c:	1e5f      	subs	r7, r3, #1
 800a44e:	2200      	movs	r2, #0
 800a450:	4b88      	ldr	r3, [pc, #544]	; (800a674 <_dtoa_r+0x624>)
 800a452:	f7f6 f8e1 	bl	8000618 <__aeabi_dmul>
 800a456:	9e02      	ldr	r6, [sp, #8]
 800a458:	4682      	mov	sl, r0
 800a45a:	468b      	mov	fp, r1
 800a45c:	3501      	adds	r5, #1
 800a45e:	4628      	mov	r0, r5
 800a460:	f7f6 f870 	bl	8000544 <__aeabi_i2d>
 800a464:	4652      	mov	r2, sl
 800a466:	465b      	mov	r3, fp
 800a468:	f7f6 f8d6 	bl	8000618 <__aeabi_dmul>
 800a46c:	4b82      	ldr	r3, [pc, #520]	; (800a678 <_dtoa_r+0x628>)
 800a46e:	2200      	movs	r2, #0
 800a470:	f7f5 ff1c 	bl	80002ac <__adddf3>
 800a474:	46d0      	mov	r8, sl
 800a476:	46d9      	mov	r9, fp
 800a478:	4682      	mov	sl, r0
 800a47a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a47e:	2e00      	cmp	r6, #0
 800a480:	d158      	bne.n	800a534 <_dtoa_r+0x4e4>
 800a482:	4b7e      	ldr	r3, [pc, #504]	; (800a67c <_dtoa_r+0x62c>)
 800a484:	2200      	movs	r2, #0
 800a486:	4640      	mov	r0, r8
 800a488:	4649      	mov	r1, r9
 800a48a:	f7f5 ff0d 	bl	80002a8 <__aeabi_dsub>
 800a48e:	4652      	mov	r2, sl
 800a490:	465b      	mov	r3, fp
 800a492:	4680      	mov	r8, r0
 800a494:	4689      	mov	r9, r1
 800a496:	f7f6 fb4f 	bl	8000b38 <__aeabi_dcmpgt>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	f040 8295 	bne.w	800a9ca <_dtoa_r+0x97a>
 800a4a0:	4652      	mov	r2, sl
 800a4a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a4a6:	4640      	mov	r0, r8
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	f7f6 fb27 	bl	8000afc <__aeabi_dcmplt>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f040 8289 	bne.w	800a9c6 <_dtoa_r+0x976>
 800a4b4:	ec5b ab19 	vmov	sl, fp, d9
 800a4b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f2c0 8148 	blt.w	800a750 <_dtoa_r+0x700>
 800a4c0:	9a00      	ldr	r2, [sp, #0]
 800a4c2:	2a0e      	cmp	r2, #14
 800a4c4:	f300 8144 	bgt.w	800a750 <_dtoa_r+0x700>
 800a4c8:	4b67      	ldr	r3, [pc, #412]	; (800a668 <_dtoa_r+0x618>)
 800a4ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f280 80d5 	bge.w	800a684 <_dtoa_r+0x634>
 800a4da:	9b03      	ldr	r3, [sp, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f300 80d1 	bgt.w	800a684 <_dtoa_r+0x634>
 800a4e2:	f040 826f 	bne.w	800a9c4 <_dtoa_r+0x974>
 800a4e6:	4b65      	ldr	r3, [pc, #404]	; (800a67c <_dtoa_r+0x62c>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	4640      	mov	r0, r8
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	f7f6 f893 	bl	8000618 <__aeabi_dmul>
 800a4f2:	4652      	mov	r2, sl
 800a4f4:	465b      	mov	r3, fp
 800a4f6:	f7f6 fb15 	bl	8000b24 <__aeabi_dcmpge>
 800a4fa:	9e03      	ldr	r6, [sp, #12]
 800a4fc:	4637      	mov	r7, r6
 800a4fe:	2800      	cmp	r0, #0
 800a500:	f040 8245 	bne.w	800a98e <_dtoa_r+0x93e>
 800a504:	9d01      	ldr	r5, [sp, #4]
 800a506:	2331      	movs	r3, #49	; 0x31
 800a508:	f805 3b01 	strb.w	r3, [r5], #1
 800a50c:	9b00      	ldr	r3, [sp, #0]
 800a50e:	3301      	adds	r3, #1
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	e240      	b.n	800a996 <_dtoa_r+0x946>
 800a514:	07f2      	lsls	r2, r6, #31
 800a516:	d505      	bpl.n	800a524 <_dtoa_r+0x4d4>
 800a518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a51c:	f7f6 f87c 	bl	8000618 <__aeabi_dmul>
 800a520:	3501      	adds	r5, #1
 800a522:	2301      	movs	r3, #1
 800a524:	1076      	asrs	r6, r6, #1
 800a526:	3708      	adds	r7, #8
 800a528:	e777      	b.n	800a41a <_dtoa_r+0x3ca>
 800a52a:	2502      	movs	r5, #2
 800a52c:	e779      	b.n	800a422 <_dtoa_r+0x3d2>
 800a52e:	9f00      	ldr	r7, [sp, #0]
 800a530:	9e03      	ldr	r6, [sp, #12]
 800a532:	e794      	b.n	800a45e <_dtoa_r+0x40e>
 800a534:	9901      	ldr	r1, [sp, #4]
 800a536:	4b4c      	ldr	r3, [pc, #304]	; (800a668 <_dtoa_r+0x618>)
 800a538:	4431      	add	r1, r6
 800a53a:	910d      	str	r1, [sp, #52]	; 0x34
 800a53c:	9908      	ldr	r1, [sp, #32]
 800a53e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a542:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a546:	2900      	cmp	r1, #0
 800a548:	d043      	beq.n	800a5d2 <_dtoa_r+0x582>
 800a54a:	494d      	ldr	r1, [pc, #308]	; (800a680 <_dtoa_r+0x630>)
 800a54c:	2000      	movs	r0, #0
 800a54e:	f7f6 f98d 	bl	800086c <__aeabi_ddiv>
 800a552:	4652      	mov	r2, sl
 800a554:	465b      	mov	r3, fp
 800a556:	f7f5 fea7 	bl	80002a8 <__aeabi_dsub>
 800a55a:	9d01      	ldr	r5, [sp, #4]
 800a55c:	4682      	mov	sl, r0
 800a55e:	468b      	mov	fp, r1
 800a560:	4649      	mov	r1, r9
 800a562:	4640      	mov	r0, r8
 800a564:	f7f6 fb08 	bl	8000b78 <__aeabi_d2iz>
 800a568:	4606      	mov	r6, r0
 800a56a:	f7f5 ffeb 	bl	8000544 <__aeabi_i2d>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	4640      	mov	r0, r8
 800a574:	4649      	mov	r1, r9
 800a576:	f7f5 fe97 	bl	80002a8 <__aeabi_dsub>
 800a57a:	3630      	adds	r6, #48	; 0x30
 800a57c:	f805 6b01 	strb.w	r6, [r5], #1
 800a580:	4652      	mov	r2, sl
 800a582:	465b      	mov	r3, fp
 800a584:	4680      	mov	r8, r0
 800a586:	4689      	mov	r9, r1
 800a588:	f7f6 fab8 	bl	8000afc <__aeabi_dcmplt>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d163      	bne.n	800a658 <_dtoa_r+0x608>
 800a590:	4642      	mov	r2, r8
 800a592:	464b      	mov	r3, r9
 800a594:	4936      	ldr	r1, [pc, #216]	; (800a670 <_dtoa_r+0x620>)
 800a596:	2000      	movs	r0, #0
 800a598:	f7f5 fe86 	bl	80002a8 <__aeabi_dsub>
 800a59c:	4652      	mov	r2, sl
 800a59e:	465b      	mov	r3, fp
 800a5a0:	f7f6 faac 	bl	8000afc <__aeabi_dcmplt>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	f040 80b5 	bne.w	800a714 <_dtoa_r+0x6c4>
 800a5aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5ac:	429d      	cmp	r5, r3
 800a5ae:	d081      	beq.n	800a4b4 <_dtoa_r+0x464>
 800a5b0:	4b30      	ldr	r3, [pc, #192]	; (800a674 <_dtoa_r+0x624>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	4650      	mov	r0, sl
 800a5b6:	4659      	mov	r1, fp
 800a5b8:	f7f6 f82e 	bl	8000618 <__aeabi_dmul>
 800a5bc:	4b2d      	ldr	r3, [pc, #180]	; (800a674 <_dtoa_r+0x624>)
 800a5be:	4682      	mov	sl, r0
 800a5c0:	468b      	mov	fp, r1
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f7f6 f826 	bl	8000618 <__aeabi_dmul>
 800a5cc:	4680      	mov	r8, r0
 800a5ce:	4689      	mov	r9, r1
 800a5d0:	e7c6      	b.n	800a560 <_dtoa_r+0x510>
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	4659      	mov	r1, fp
 800a5d6:	f7f6 f81f 	bl	8000618 <__aeabi_dmul>
 800a5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5dc:	9d01      	ldr	r5, [sp, #4]
 800a5de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5e0:	4682      	mov	sl, r0
 800a5e2:	468b      	mov	fp, r1
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	4640      	mov	r0, r8
 800a5e8:	f7f6 fac6 	bl	8000b78 <__aeabi_d2iz>
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	f7f5 ffa9 	bl	8000544 <__aeabi_i2d>
 800a5f2:	3630      	adds	r6, #48	; 0x30
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	f7f5 fe54 	bl	80002a8 <__aeabi_dsub>
 800a600:	f805 6b01 	strb.w	r6, [r5], #1
 800a604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a606:	429d      	cmp	r5, r3
 800a608:	4680      	mov	r8, r0
 800a60a:	4689      	mov	r9, r1
 800a60c:	f04f 0200 	mov.w	r2, #0
 800a610:	d124      	bne.n	800a65c <_dtoa_r+0x60c>
 800a612:	4b1b      	ldr	r3, [pc, #108]	; (800a680 <_dtoa_r+0x630>)
 800a614:	4650      	mov	r0, sl
 800a616:	4659      	mov	r1, fp
 800a618:	f7f5 fe48 	bl	80002ac <__adddf3>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4640      	mov	r0, r8
 800a622:	4649      	mov	r1, r9
 800a624:	f7f6 fa88 	bl	8000b38 <__aeabi_dcmpgt>
 800a628:	2800      	cmp	r0, #0
 800a62a:	d173      	bne.n	800a714 <_dtoa_r+0x6c4>
 800a62c:	4652      	mov	r2, sl
 800a62e:	465b      	mov	r3, fp
 800a630:	4913      	ldr	r1, [pc, #76]	; (800a680 <_dtoa_r+0x630>)
 800a632:	2000      	movs	r0, #0
 800a634:	f7f5 fe38 	bl	80002a8 <__aeabi_dsub>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4640      	mov	r0, r8
 800a63e:	4649      	mov	r1, r9
 800a640:	f7f6 fa5c 	bl	8000afc <__aeabi_dcmplt>
 800a644:	2800      	cmp	r0, #0
 800a646:	f43f af35 	beq.w	800a4b4 <_dtoa_r+0x464>
 800a64a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a64c:	1e6b      	subs	r3, r5, #1
 800a64e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a650:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a654:	2b30      	cmp	r3, #48	; 0x30
 800a656:	d0f8      	beq.n	800a64a <_dtoa_r+0x5fa>
 800a658:	9700      	str	r7, [sp, #0]
 800a65a:	e049      	b.n	800a6f0 <_dtoa_r+0x6a0>
 800a65c:	4b05      	ldr	r3, [pc, #20]	; (800a674 <_dtoa_r+0x624>)
 800a65e:	f7f5 ffdb 	bl	8000618 <__aeabi_dmul>
 800a662:	4680      	mov	r8, r0
 800a664:	4689      	mov	r9, r1
 800a666:	e7bd      	b.n	800a5e4 <_dtoa_r+0x594>
 800a668:	08030ae8 	.word	0x08030ae8
 800a66c:	08030ac0 	.word	0x08030ac0
 800a670:	3ff00000 	.word	0x3ff00000
 800a674:	40240000 	.word	0x40240000
 800a678:	401c0000 	.word	0x401c0000
 800a67c:	40140000 	.word	0x40140000
 800a680:	3fe00000 	.word	0x3fe00000
 800a684:	9d01      	ldr	r5, [sp, #4]
 800a686:	4656      	mov	r6, sl
 800a688:	465f      	mov	r7, fp
 800a68a:	4642      	mov	r2, r8
 800a68c:	464b      	mov	r3, r9
 800a68e:	4630      	mov	r0, r6
 800a690:	4639      	mov	r1, r7
 800a692:	f7f6 f8eb 	bl	800086c <__aeabi_ddiv>
 800a696:	f7f6 fa6f 	bl	8000b78 <__aeabi_d2iz>
 800a69a:	4682      	mov	sl, r0
 800a69c:	f7f5 ff52 	bl	8000544 <__aeabi_i2d>
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	464b      	mov	r3, r9
 800a6a4:	f7f5 ffb8 	bl	8000618 <__aeabi_dmul>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a6b4:	f7f5 fdf8 	bl	80002a8 <__aeabi_dsub>
 800a6b8:	f805 6b01 	strb.w	r6, [r5], #1
 800a6bc:	9e01      	ldr	r6, [sp, #4]
 800a6be:	9f03      	ldr	r7, [sp, #12]
 800a6c0:	1bae      	subs	r6, r5, r6
 800a6c2:	42b7      	cmp	r7, r6
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	d135      	bne.n	800a736 <_dtoa_r+0x6e6>
 800a6ca:	f7f5 fdef 	bl	80002ac <__adddf3>
 800a6ce:	4642      	mov	r2, r8
 800a6d0:	464b      	mov	r3, r9
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	460f      	mov	r7, r1
 800a6d6:	f7f6 fa2f 	bl	8000b38 <__aeabi_dcmpgt>
 800a6da:	b9d0      	cbnz	r0, 800a712 <_dtoa_r+0x6c2>
 800a6dc:	4642      	mov	r2, r8
 800a6de:	464b      	mov	r3, r9
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f6 fa00 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6e8:	b110      	cbz	r0, 800a6f0 <_dtoa_r+0x6a0>
 800a6ea:	f01a 0f01 	tst.w	sl, #1
 800a6ee:	d110      	bne.n	800a712 <_dtoa_r+0x6c2>
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	ee18 1a10 	vmov	r1, s16
 800a6f6:	f000 fb09 	bl	800ad0c <_Bfree>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9800      	ldr	r0, [sp, #0]
 800a6fe:	702b      	strb	r3, [r5, #0]
 800a700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a702:	3001      	adds	r0, #1
 800a704:	6018      	str	r0, [r3, #0]
 800a706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f43f acf1 	beq.w	800a0f0 <_dtoa_r+0xa0>
 800a70e:	601d      	str	r5, [r3, #0]
 800a710:	e4ee      	b.n	800a0f0 <_dtoa_r+0xa0>
 800a712:	9f00      	ldr	r7, [sp, #0]
 800a714:	462b      	mov	r3, r5
 800a716:	461d      	mov	r5, r3
 800a718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a71c:	2a39      	cmp	r2, #57	; 0x39
 800a71e:	d106      	bne.n	800a72e <_dtoa_r+0x6de>
 800a720:	9a01      	ldr	r2, [sp, #4]
 800a722:	429a      	cmp	r2, r3
 800a724:	d1f7      	bne.n	800a716 <_dtoa_r+0x6c6>
 800a726:	9901      	ldr	r1, [sp, #4]
 800a728:	2230      	movs	r2, #48	; 0x30
 800a72a:	3701      	adds	r7, #1
 800a72c:	700a      	strb	r2, [r1, #0]
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	3201      	adds	r2, #1
 800a732:	701a      	strb	r2, [r3, #0]
 800a734:	e790      	b.n	800a658 <_dtoa_r+0x608>
 800a736:	4ba6      	ldr	r3, [pc, #664]	; (800a9d0 <_dtoa_r+0x980>)
 800a738:	2200      	movs	r2, #0
 800a73a:	f7f5 ff6d 	bl	8000618 <__aeabi_dmul>
 800a73e:	2200      	movs	r2, #0
 800a740:	2300      	movs	r3, #0
 800a742:	4606      	mov	r6, r0
 800a744:	460f      	mov	r7, r1
 800a746:	f7f6 f9cf 	bl	8000ae8 <__aeabi_dcmpeq>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d09d      	beq.n	800a68a <_dtoa_r+0x63a>
 800a74e:	e7cf      	b.n	800a6f0 <_dtoa_r+0x6a0>
 800a750:	9a08      	ldr	r2, [sp, #32]
 800a752:	2a00      	cmp	r2, #0
 800a754:	f000 80d7 	beq.w	800a906 <_dtoa_r+0x8b6>
 800a758:	9a06      	ldr	r2, [sp, #24]
 800a75a:	2a01      	cmp	r2, #1
 800a75c:	f300 80ba 	bgt.w	800a8d4 <_dtoa_r+0x884>
 800a760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a762:	2a00      	cmp	r2, #0
 800a764:	f000 80b2 	beq.w	800a8cc <_dtoa_r+0x87c>
 800a768:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a76c:	9e07      	ldr	r6, [sp, #28]
 800a76e:	9d04      	ldr	r5, [sp, #16]
 800a770:	9a04      	ldr	r2, [sp, #16]
 800a772:	441a      	add	r2, r3
 800a774:	9204      	str	r2, [sp, #16]
 800a776:	9a05      	ldr	r2, [sp, #20]
 800a778:	2101      	movs	r1, #1
 800a77a:	441a      	add	r2, r3
 800a77c:	4620      	mov	r0, r4
 800a77e:	9205      	str	r2, [sp, #20]
 800a780:	f000 fb7c 	bl	800ae7c <__i2b>
 800a784:	4607      	mov	r7, r0
 800a786:	2d00      	cmp	r5, #0
 800a788:	dd0c      	ble.n	800a7a4 <_dtoa_r+0x754>
 800a78a:	9b05      	ldr	r3, [sp, #20]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	dd09      	ble.n	800a7a4 <_dtoa_r+0x754>
 800a790:	42ab      	cmp	r3, r5
 800a792:	9a04      	ldr	r2, [sp, #16]
 800a794:	bfa8      	it	ge
 800a796:	462b      	movge	r3, r5
 800a798:	1ad2      	subs	r2, r2, r3
 800a79a:	9204      	str	r2, [sp, #16]
 800a79c:	9a05      	ldr	r2, [sp, #20]
 800a79e:	1aed      	subs	r5, r5, r3
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	9305      	str	r3, [sp, #20]
 800a7a4:	9b07      	ldr	r3, [sp, #28]
 800a7a6:	b31b      	cbz	r3, 800a7f0 <_dtoa_r+0x7a0>
 800a7a8:	9b08      	ldr	r3, [sp, #32]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f000 80af 	beq.w	800a90e <_dtoa_r+0x8be>
 800a7b0:	2e00      	cmp	r6, #0
 800a7b2:	dd13      	ble.n	800a7dc <_dtoa_r+0x78c>
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	4632      	mov	r2, r6
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 fc1f 	bl	800affc <__pow5mult>
 800a7be:	ee18 2a10 	vmov	r2, s16
 800a7c2:	4601      	mov	r1, r0
 800a7c4:	4607      	mov	r7, r0
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f000 fb6e 	bl	800aea8 <__multiply>
 800a7cc:	ee18 1a10 	vmov	r1, s16
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f000 fa9a 	bl	800ad0c <_Bfree>
 800a7d8:	ee08 8a10 	vmov	s16, r8
 800a7dc:	9b07      	ldr	r3, [sp, #28]
 800a7de:	1b9a      	subs	r2, r3, r6
 800a7e0:	d006      	beq.n	800a7f0 <_dtoa_r+0x7a0>
 800a7e2:	ee18 1a10 	vmov	r1, s16
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f000 fc08 	bl	800affc <__pow5mult>
 800a7ec:	ee08 0a10 	vmov	s16, r0
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f000 fb42 	bl	800ae7c <__i2b>
 800a7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	f340 8088 	ble.w	800a912 <_dtoa_r+0x8c2>
 800a802:	461a      	mov	r2, r3
 800a804:	4601      	mov	r1, r0
 800a806:	4620      	mov	r0, r4
 800a808:	f000 fbf8 	bl	800affc <__pow5mult>
 800a80c:	9b06      	ldr	r3, [sp, #24]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	4606      	mov	r6, r0
 800a812:	f340 8081 	ble.w	800a918 <_dtoa_r+0x8c8>
 800a816:	f04f 0800 	mov.w	r8, #0
 800a81a:	6933      	ldr	r3, [r6, #16]
 800a81c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a820:	6918      	ldr	r0, [r3, #16]
 800a822:	f000 fadb 	bl	800addc <__hi0bits>
 800a826:	f1c0 0020 	rsb	r0, r0, #32
 800a82a:	9b05      	ldr	r3, [sp, #20]
 800a82c:	4418      	add	r0, r3
 800a82e:	f010 001f 	ands.w	r0, r0, #31
 800a832:	f000 8092 	beq.w	800a95a <_dtoa_r+0x90a>
 800a836:	f1c0 0320 	rsb	r3, r0, #32
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	f340 808a 	ble.w	800a954 <_dtoa_r+0x904>
 800a840:	f1c0 001c 	rsb	r0, r0, #28
 800a844:	9b04      	ldr	r3, [sp, #16]
 800a846:	4403      	add	r3, r0
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	9b05      	ldr	r3, [sp, #20]
 800a84c:	4403      	add	r3, r0
 800a84e:	4405      	add	r5, r0
 800a850:	9305      	str	r3, [sp, #20]
 800a852:	9b04      	ldr	r3, [sp, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	dd07      	ble.n	800a868 <_dtoa_r+0x818>
 800a858:	ee18 1a10 	vmov	r1, s16
 800a85c:	461a      	mov	r2, r3
 800a85e:	4620      	mov	r0, r4
 800a860:	f000 fc26 	bl	800b0b0 <__lshift>
 800a864:	ee08 0a10 	vmov	s16, r0
 800a868:	9b05      	ldr	r3, [sp, #20]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	dd05      	ble.n	800a87a <_dtoa_r+0x82a>
 800a86e:	4631      	mov	r1, r6
 800a870:	461a      	mov	r2, r3
 800a872:	4620      	mov	r0, r4
 800a874:	f000 fc1c 	bl	800b0b0 <__lshift>
 800a878:	4606      	mov	r6, r0
 800a87a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d06e      	beq.n	800a95e <_dtoa_r+0x90e>
 800a880:	ee18 0a10 	vmov	r0, s16
 800a884:	4631      	mov	r1, r6
 800a886:	f000 fc83 	bl	800b190 <__mcmp>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	da67      	bge.n	800a95e <_dtoa_r+0x90e>
 800a88e:	9b00      	ldr	r3, [sp, #0]
 800a890:	3b01      	subs	r3, #1
 800a892:	ee18 1a10 	vmov	r1, s16
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	220a      	movs	r2, #10
 800a89a:	2300      	movs	r3, #0
 800a89c:	4620      	mov	r0, r4
 800a89e:	f000 fa57 	bl	800ad50 <__multadd>
 800a8a2:	9b08      	ldr	r3, [sp, #32]
 800a8a4:	ee08 0a10 	vmov	s16, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 81b1 	beq.w	800ac10 <_dtoa_r+0xbc0>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	220a      	movs	r2, #10
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 fa4b 	bl	800ad50 <__multadd>
 800a8ba:	9b02      	ldr	r3, [sp, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	4607      	mov	r7, r0
 800a8c0:	f300 808e 	bgt.w	800a9e0 <_dtoa_r+0x990>
 800a8c4:	9b06      	ldr	r3, [sp, #24]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	dc51      	bgt.n	800a96e <_dtoa_r+0x91e>
 800a8ca:	e089      	b.n	800a9e0 <_dtoa_r+0x990>
 800a8cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8d2:	e74b      	b.n	800a76c <_dtoa_r+0x71c>
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	1e5e      	subs	r6, r3, #1
 800a8d8:	9b07      	ldr	r3, [sp, #28]
 800a8da:	42b3      	cmp	r3, r6
 800a8dc:	bfbf      	itttt	lt
 800a8de:	9b07      	ldrlt	r3, [sp, #28]
 800a8e0:	9607      	strlt	r6, [sp, #28]
 800a8e2:	1af2      	sublt	r2, r6, r3
 800a8e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a8e6:	bfb6      	itet	lt
 800a8e8:	189b      	addlt	r3, r3, r2
 800a8ea:	1b9e      	subge	r6, r3, r6
 800a8ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a8ee:	9b03      	ldr	r3, [sp, #12]
 800a8f0:	bfb8      	it	lt
 800a8f2:	2600      	movlt	r6, #0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	bfb7      	itett	lt
 800a8f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a8fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a900:	1a9d      	sublt	r5, r3, r2
 800a902:	2300      	movlt	r3, #0
 800a904:	e734      	b.n	800a770 <_dtoa_r+0x720>
 800a906:	9e07      	ldr	r6, [sp, #28]
 800a908:	9d04      	ldr	r5, [sp, #16]
 800a90a:	9f08      	ldr	r7, [sp, #32]
 800a90c:	e73b      	b.n	800a786 <_dtoa_r+0x736>
 800a90e:	9a07      	ldr	r2, [sp, #28]
 800a910:	e767      	b.n	800a7e2 <_dtoa_r+0x792>
 800a912:	9b06      	ldr	r3, [sp, #24]
 800a914:	2b01      	cmp	r3, #1
 800a916:	dc18      	bgt.n	800a94a <_dtoa_r+0x8fa>
 800a918:	f1ba 0f00 	cmp.w	sl, #0
 800a91c:	d115      	bne.n	800a94a <_dtoa_r+0x8fa>
 800a91e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a922:	b993      	cbnz	r3, 800a94a <_dtoa_r+0x8fa>
 800a924:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a928:	0d1b      	lsrs	r3, r3, #20
 800a92a:	051b      	lsls	r3, r3, #20
 800a92c:	b183      	cbz	r3, 800a950 <_dtoa_r+0x900>
 800a92e:	9b04      	ldr	r3, [sp, #16]
 800a930:	3301      	adds	r3, #1
 800a932:	9304      	str	r3, [sp, #16]
 800a934:	9b05      	ldr	r3, [sp, #20]
 800a936:	3301      	adds	r3, #1
 800a938:	9305      	str	r3, [sp, #20]
 800a93a:	f04f 0801 	mov.w	r8, #1
 800a93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a940:	2b00      	cmp	r3, #0
 800a942:	f47f af6a 	bne.w	800a81a <_dtoa_r+0x7ca>
 800a946:	2001      	movs	r0, #1
 800a948:	e76f      	b.n	800a82a <_dtoa_r+0x7da>
 800a94a:	f04f 0800 	mov.w	r8, #0
 800a94e:	e7f6      	b.n	800a93e <_dtoa_r+0x8ee>
 800a950:	4698      	mov	r8, r3
 800a952:	e7f4      	b.n	800a93e <_dtoa_r+0x8ee>
 800a954:	f43f af7d 	beq.w	800a852 <_dtoa_r+0x802>
 800a958:	4618      	mov	r0, r3
 800a95a:	301c      	adds	r0, #28
 800a95c:	e772      	b.n	800a844 <_dtoa_r+0x7f4>
 800a95e:	9b03      	ldr	r3, [sp, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	dc37      	bgt.n	800a9d4 <_dtoa_r+0x984>
 800a964:	9b06      	ldr	r3, [sp, #24]
 800a966:	2b02      	cmp	r3, #2
 800a968:	dd34      	ble.n	800a9d4 <_dtoa_r+0x984>
 800a96a:	9b03      	ldr	r3, [sp, #12]
 800a96c:	9302      	str	r3, [sp, #8]
 800a96e:	9b02      	ldr	r3, [sp, #8]
 800a970:	b96b      	cbnz	r3, 800a98e <_dtoa_r+0x93e>
 800a972:	4631      	mov	r1, r6
 800a974:	2205      	movs	r2, #5
 800a976:	4620      	mov	r0, r4
 800a978:	f000 f9ea 	bl	800ad50 <__multadd>
 800a97c:	4601      	mov	r1, r0
 800a97e:	4606      	mov	r6, r0
 800a980:	ee18 0a10 	vmov	r0, s16
 800a984:	f000 fc04 	bl	800b190 <__mcmp>
 800a988:	2800      	cmp	r0, #0
 800a98a:	f73f adbb 	bgt.w	800a504 <_dtoa_r+0x4b4>
 800a98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a990:	9d01      	ldr	r5, [sp, #4]
 800a992:	43db      	mvns	r3, r3
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	f04f 0800 	mov.w	r8, #0
 800a99a:	4631      	mov	r1, r6
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 f9b5 	bl	800ad0c <_Bfree>
 800a9a2:	2f00      	cmp	r7, #0
 800a9a4:	f43f aea4 	beq.w	800a6f0 <_dtoa_r+0x6a0>
 800a9a8:	f1b8 0f00 	cmp.w	r8, #0
 800a9ac:	d005      	beq.n	800a9ba <_dtoa_r+0x96a>
 800a9ae:	45b8      	cmp	r8, r7
 800a9b0:	d003      	beq.n	800a9ba <_dtoa_r+0x96a>
 800a9b2:	4641      	mov	r1, r8
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f000 f9a9 	bl	800ad0c <_Bfree>
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f000 f9a5 	bl	800ad0c <_Bfree>
 800a9c2:	e695      	b.n	800a6f0 <_dtoa_r+0x6a0>
 800a9c4:	2600      	movs	r6, #0
 800a9c6:	4637      	mov	r7, r6
 800a9c8:	e7e1      	b.n	800a98e <_dtoa_r+0x93e>
 800a9ca:	9700      	str	r7, [sp, #0]
 800a9cc:	4637      	mov	r7, r6
 800a9ce:	e599      	b.n	800a504 <_dtoa_r+0x4b4>
 800a9d0:	40240000 	.word	0x40240000
 800a9d4:	9b08      	ldr	r3, [sp, #32]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f000 80ca 	beq.w	800ab70 <_dtoa_r+0xb20>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	9302      	str	r3, [sp, #8]
 800a9e0:	2d00      	cmp	r5, #0
 800a9e2:	dd05      	ble.n	800a9f0 <_dtoa_r+0x9a0>
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	462a      	mov	r2, r5
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fb61 	bl	800b0b0 <__lshift>
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	f1b8 0f00 	cmp.w	r8, #0
 800a9f4:	d05b      	beq.n	800aaae <_dtoa_r+0xa5e>
 800a9f6:	6879      	ldr	r1, [r7, #4]
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f000 f947 	bl	800ac8c <_Balloc>
 800a9fe:	4605      	mov	r5, r0
 800aa00:	b928      	cbnz	r0, 800aa0e <_dtoa_r+0x9be>
 800aa02:	4b87      	ldr	r3, [pc, #540]	; (800ac20 <_dtoa_r+0xbd0>)
 800aa04:	4602      	mov	r2, r0
 800aa06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa0a:	f7ff bb3b 	b.w	800a084 <_dtoa_r+0x34>
 800aa0e:	693a      	ldr	r2, [r7, #16]
 800aa10:	3202      	adds	r2, #2
 800aa12:	0092      	lsls	r2, r2, #2
 800aa14:	f107 010c 	add.w	r1, r7, #12
 800aa18:	300c      	adds	r0, #12
 800aa1a:	f7fe fd57 	bl	80094cc <memcpy>
 800aa1e:	2201      	movs	r2, #1
 800aa20:	4629      	mov	r1, r5
 800aa22:	4620      	mov	r0, r4
 800aa24:	f000 fb44 	bl	800b0b0 <__lshift>
 800aa28:	9b01      	ldr	r3, [sp, #4]
 800aa2a:	f103 0901 	add.w	r9, r3, #1
 800aa2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aa32:	4413      	add	r3, r2
 800aa34:	9305      	str	r3, [sp, #20]
 800aa36:	f00a 0301 	and.w	r3, sl, #1
 800aa3a:	46b8      	mov	r8, r7
 800aa3c:	9304      	str	r3, [sp, #16]
 800aa3e:	4607      	mov	r7, r0
 800aa40:	4631      	mov	r1, r6
 800aa42:	ee18 0a10 	vmov	r0, s16
 800aa46:	f7ff fa77 	bl	8009f38 <quorem>
 800aa4a:	4641      	mov	r1, r8
 800aa4c:	9002      	str	r0, [sp, #8]
 800aa4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa52:	ee18 0a10 	vmov	r0, s16
 800aa56:	f000 fb9b 	bl	800b190 <__mcmp>
 800aa5a:	463a      	mov	r2, r7
 800aa5c:	9003      	str	r0, [sp, #12]
 800aa5e:	4631      	mov	r1, r6
 800aa60:	4620      	mov	r0, r4
 800aa62:	f000 fbb1 	bl	800b1c8 <__mdiff>
 800aa66:	68c2      	ldr	r2, [r0, #12]
 800aa68:	f109 3bff 	add.w	fp, r9, #4294967295
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	bb02      	cbnz	r2, 800aab2 <_dtoa_r+0xa62>
 800aa70:	4601      	mov	r1, r0
 800aa72:	ee18 0a10 	vmov	r0, s16
 800aa76:	f000 fb8b 	bl	800b190 <__mcmp>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	4620      	mov	r0, r4
 800aa80:	9207      	str	r2, [sp, #28]
 800aa82:	f000 f943 	bl	800ad0c <_Bfree>
 800aa86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aa8a:	ea43 0102 	orr.w	r1, r3, r2
 800aa8e:	9b04      	ldr	r3, [sp, #16]
 800aa90:	430b      	orrs	r3, r1
 800aa92:	464d      	mov	r5, r9
 800aa94:	d10f      	bne.n	800aab6 <_dtoa_r+0xa66>
 800aa96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa9a:	d02a      	beq.n	800aaf2 <_dtoa_r+0xaa2>
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dd02      	ble.n	800aaa8 <_dtoa_r+0xa58>
 800aaa2:	9b02      	ldr	r3, [sp, #8]
 800aaa4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aaa8:	f88b a000 	strb.w	sl, [fp]
 800aaac:	e775      	b.n	800a99a <_dtoa_r+0x94a>
 800aaae:	4638      	mov	r0, r7
 800aab0:	e7ba      	b.n	800aa28 <_dtoa_r+0x9d8>
 800aab2:	2201      	movs	r2, #1
 800aab4:	e7e2      	b.n	800aa7c <_dtoa_r+0xa2c>
 800aab6:	9b03      	ldr	r3, [sp, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	db04      	blt.n	800aac6 <_dtoa_r+0xa76>
 800aabc:	9906      	ldr	r1, [sp, #24]
 800aabe:	430b      	orrs	r3, r1
 800aac0:	9904      	ldr	r1, [sp, #16]
 800aac2:	430b      	orrs	r3, r1
 800aac4:	d122      	bne.n	800ab0c <_dtoa_r+0xabc>
 800aac6:	2a00      	cmp	r2, #0
 800aac8:	ddee      	ble.n	800aaa8 <_dtoa_r+0xa58>
 800aaca:	ee18 1a10 	vmov	r1, s16
 800aace:	2201      	movs	r2, #1
 800aad0:	4620      	mov	r0, r4
 800aad2:	f000 faed 	bl	800b0b0 <__lshift>
 800aad6:	4631      	mov	r1, r6
 800aad8:	ee08 0a10 	vmov	s16, r0
 800aadc:	f000 fb58 	bl	800b190 <__mcmp>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	dc03      	bgt.n	800aaec <_dtoa_r+0xa9c>
 800aae4:	d1e0      	bne.n	800aaa8 <_dtoa_r+0xa58>
 800aae6:	f01a 0f01 	tst.w	sl, #1
 800aaea:	d0dd      	beq.n	800aaa8 <_dtoa_r+0xa58>
 800aaec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aaf0:	d1d7      	bne.n	800aaa2 <_dtoa_r+0xa52>
 800aaf2:	2339      	movs	r3, #57	; 0x39
 800aaf4:	f88b 3000 	strb.w	r3, [fp]
 800aaf8:	462b      	mov	r3, r5
 800aafa:	461d      	mov	r5, r3
 800aafc:	3b01      	subs	r3, #1
 800aafe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab02:	2a39      	cmp	r2, #57	; 0x39
 800ab04:	d071      	beq.n	800abea <_dtoa_r+0xb9a>
 800ab06:	3201      	adds	r2, #1
 800ab08:	701a      	strb	r2, [r3, #0]
 800ab0a:	e746      	b.n	800a99a <_dtoa_r+0x94a>
 800ab0c:	2a00      	cmp	r2, #0
 800ab0e:	dd07      	ble.n	800ab20 <_dtoa_r+0xad0>
 800ab10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab14:	d0ed      	beq.n	800aaf2 <_dtoa_r+0xaa2>
 800ab16:	f10a 0301 	add.w	r3, sl, #1
 800ab1a:	f88b 3000 	strb.w	r3, [fp]
 800ab1e:	e73c      	b.n	800a99a <_dtoa_r+0x94a>
 800ab20:	9b05      	ldr	r3, [sp, #20]
 800ab22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ab26:	4599      	cmp	r9, r3
 800ab28:	d047      	beq.n	800abba <_dtoa_r+0xb6a>
 800ab2a:	ee18 1a10 	vmov	r1, s16
 800ab2e:	2300      	movs	r3, #0
 800ab30:	220a      	movs	r2, #10
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 f90c 	bl	800ad50 <__multadd>
 800ab38:	45b8      	cmp	r8, r7
 800ab3a:	ee08 0a10 	vmov	s16, r0
 800ab3e:	f04f 0300 	mov.w	r3, #0
 800ab42:	f04f 020a 	mov.w	r2, #10
 800ab46:	4641      	mov	r1, r8
 800ab48:	4620      	mov	r0, r4
 800ab4a:	d106      	bne.n	800ab5a <_dtoa_r+0xb0a>
 800ab4c:	f000 f900 	bl	800ad50 <__multadd>
 800ab50:	4680      	mov	r8, r0
 800ab52:	4607      	mov	r7, r0
 800ab54:	f109 0901 	add.w	r9, r9, #1
 800ab58:	e772      	b.n	800aa40 <_dtoa_r+0x9f0>
 800ab5a:	f000 f8f9 	bl	800ad50 <__multadd>
 800ab5e:	4639      	mov	r1, r7
 800ab60:	4680      	mov	r8, r0
 800ab62:	2300      	movs	r3, #0
 800ab64:	220a      	movs	r2, #10
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 f8f2 	bl	800ad50 <__multadd>
 800ab6c:	4607      	mov	r7, r0
 800ab6e:	e7f1      	b.n	800ab54 <_dtoa_r+0xb04>
 800ab70:	9b03      	ldr	r3, [sp, #12]
 800ab72:	9302      	str	r3, [sp, #8]
 800ab74:	9d01      	ldr	r5, [sp, #4]
 800ab76:	ee18 0a10 	vmov	r0, s16
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	f7ff f9dc 	bl	8009f38 <quorem>
 800ab80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab84:	9b01      	ldr	r3, [sp, #4]
 800ab86:	f805 ab01 	strb.w	sl, [r5], #1
 800ab8a:	1aea      	subs	r2, r5, r3
 800ab8c:	9b02      	ldr	r3, [sp, #8]
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	dd09      	ble.n	800aba6 <_dtoa_r+0xb56>
 800ab92:	ee18 1a10 	vmov	r1, s16
 800ab96:	2300      	movs	r3, #0
 800ab98:	220a      	movs	r2, #10
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 f8d8 	bl	800ad50 <__multadd>
 800aba0:	ee08 0a10 	vmov	s16, r0
 800aba4:	e7e7      	b.n	800ab76 <_dtoa_r+0xb26>
 800aba6:	9b02      	ldr	r3, [sp, #8]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bfc8      	it	gt
 800abac:	461d      	movgt	r5, r3
 800abae:	9b01      	ldr	r3, [sp, #4]
 800abb0:	bfd8      	it	le
 800abb2:	2501      	movle	r5, #1
 800abb4:	441d      	add	r5, r3
 800abb6:	f04f 0800 	mov.w	r8, #0
 800abba:	ee18 1a10 	vmov	r1, s16
 800abbe:	2201      	movs	r2, #1
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 fa75 	bl	800b0b0 <__lshift>
 800abc6:	4631      	mov	r1, r6
 800abc8:	ee08 0a10 	vmov	s16, r0
 800abcc:	f000 fae0 	bl	800b190 <__mcmp>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	dc91      	bgt.n	800aaf8 <_dtoa_r+0xaa8>
 800abd4:	d102      	bne.n	800abdc <_dtoa_r+0xb8c>
 800abd6:	f01a 0f01 	tst.w	sl, #1
 800abda:	d18d      	bne.n	800aaf8 <_dtoa_r+0xaa8>
 800abdc:	462b      	mov	r3, r5
 800abde:	461d      	mov	r5, r3
 800abe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abe4:	2a30      	cmp	r2, #48	; 0x30
 800abe6:	d0fa      	beq.n	800abde <_dtoa_r+0xb8e>
 800abe8:	e6d7      	b.n	800a99a <_dtoa_r+0x94a>
 800abea:	9a01      	ldr	r2, [sp, #4]
 800abec:	429a      	cmp	r2, r3
 800abee:	d184      	bne.n	800aafa <_dtoa_r+0xaaa>
 800abf0:	9b00      	ldr	r3, [sp, #0]
 800abf2:	3301      	adds	r3, #1
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	2331      	movs	r3, #49	; 0x31
 800abf8:	7013      	strb	r3, [r2, #0]
 800abfa:	e6ce      	b.n	800a99a <_dtoa_r+0x94a>
 800abfc:	4b09      	ldr	r3, [pc, #36]	; (800ac24 <_dtoa_r+0xbd4>)
 800abfe:	f7ff ba95 	b.w	800a12c <_dtoa_r+0xdc>
 800ac02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f47f aa6e 	bne.w	800a0e6 <_dtoa_r+0x96>
 800ac0a:	4b07      	ldr	r3, [pc, #28]	; (800ac28 <_dtoa_r+0xbd8>)
 800ac0c:	f7ff ba8e 	b.w	800a12c <_dtoa_r+0xdc>
 800ac10:	9b02      	ldr	r3, [sp, #8]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	dcae      	bgt.n	800ab74 <_dtoa_r+0xb24>
 800ac16:	9b06      	ldr	r3, [sp, #24]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	f73f aea8 	bgt.w	800a96e <_dtoa_r+0x91e>
 800ac1e:	e7a9      	b.n	800ab74 <_dtoa_r+0xb24>
 800ac20:	08030a53 	.word	0x08030a53
 800ac24:	08030974 	.word	0x08030974
 800ac28:	080309d4 	.word	0x080309d4

0800ac2c <fiprintf>:
 800ac2c:	b40e      	push	{r1, r2, r3}
 800ac2e:	b503      	push	{r0, r1, lr}
 800ac30:	4601      	mov	r1, r0
 800ac32:	ab03      	add	r3, sp, #12
 800ac34:	4805      	ldr	r0, [pc, #20]	; (800ac4c <fiprintf+0x20>)
 800ac36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac3a:	6800      	ldr	r0, [r0, #0]
 800ac3c:	9301      	str	r3, [sp, #4]
 800ac3e:	f000 fe25 	bl	800b88c <_vfiprintf_r>
 800ac42:	b002      	add	sp, #8
 800ac44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac48:	b003      	add	sp, #12
 800ac4a:	4770      	bx	lr
 800ac4c:	20000188 	.word	0x20000188

0800ac50 <_localeconv_r>:
 800ac50:	4800      	ldr	r0, [pc, #0]	; (800ac54 <_localeconv_r+0x4>)
 800ac52:	4770      	bx	lr
 800ac54:	200002dc 	.word	0x200002dc

0800ac58 <_lseek_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4d07      	ldr	r5, [pc, #28]	; (800ac78 <_lseek_r+0x20>)
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	4608      	mov	r0, r1
 800ac60:	4611      	mov	r1, r2
 800ac62:	2200      	movs	r2, #0
 800ac64:	602a      	str	r2, [r5, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	f7f7 ffd2 	bl	8002c10 <_lseek>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d102      	bne.n	800ac76 <_lseek_r+0x1e>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	b103      	cbz	r3, 800ac76 <_lseek_r+0x1e>
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	200035f0 	.word	0x200035f0

0800ac7c <malloc>:
 800ac7c:	4b02      	ldr	r3, [pc, #8]	; (800ac88 <malloc+0xc>)
 800ac7e:	4601      	mov	r1, r0
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	f000 bc09 	b.w	800b498 <_malloc_r>
 800ac86:	bf00      	nop
 800ac88:	20000188 	.word	0x20000188

0800ac8c <_Balloc>:
 800ac8c:	b570      	push	{r4, r5, r6, lr}
 800ac8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac90:	4604      	mov	r4, r0
 800ac92:	460d      	mov	r5, r1
 800ac94:	b976      	cbnz	r6, 800acb4 <_Balloc+0x28>
 800ac96:	2010      	movs	r0, #16
 800ac98:	f7ff fff0 	bl	800ac7c <malloc>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	6260      	str	r0, [r4, #36]	; 0x24
 800aca0:	b920      	cbnz	r0, 800acac <_Balloc+0x20>
 800aca2:	4b18      	ldr	r3, [pc, #96]	; (800ad04 <_Balloc+0x78>)
 800aca4:	4818      	ldr	r0, [pc, #96]	; (800ad08 <_Balloc+0x7c>)
 800aca6:	2166      	movs	r1, #102	; 0x66
 800aca8:	f7ff f918 	bl	8009edc <__assert_func>
 800acac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acb0:	6006      	str	r6, [r0, #0]
 800acb2:	60c6      	str	r6, [r0, #12]
 800acb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800acb6:	68f3      	ldr	r3, [r6, #12]
 800acb8:	b183      	cbz	r3, 800acdc <_Balloc+0x50>
 800acba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acc2:	b9b8      	cbnz	r0, 800acf4 <_Balloc+0x68>
 800acc4:	2101      	movs	r1, #1
 800acc6:	fa01 f605 	lsl.w	r6, r1, r5
 800acca:	1d72      	adds	r2, r6, #5
 800accc:	0092      	lsls	r2, r2, #2
 800acce:	4620      	mov	r0, r4
 800acd0:	f000 fb60 	bl	800b394 <_calloc_r>
 800acd4:	b160      	cbz	r0, 800acf0 <_Balloc+0x64>
 800acd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acda:	e00e      	b.n	800acfa <_Balloc+0x6e>
 800acdc:	2221      	movs	r2, #33	; 0x21
 800acde:	2104      	movs	r1, #4
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 fb57 	bl	800b394 <_calloc_r>
 800ace6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ace8:	60f0      	str	r0, [r6, #12]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1e4      	bne.n	800acba <_Balloc+0x2e>
 800acf0:	2000      	movs	r0, #0
 800acf2:	bd70      	pop	{r4, r5, r6, pc}
 800acf4:	6802      	ldr	r2, [r0, #0]
 800acf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acfa:	2300      	movs	r3, #0
 800acfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad00:	e7f7      	b.n	800acf2 <_Balloc+0x66>
 800ad02:	bf00      	nop
 800ad04:	080309e1 	.word	0x080309e1
 800ad08:	08030a64 	.word	0x08030a64

0800ad0c <_Bfree>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad10:	4605      	mov	r5, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	b976      	cbnz	r6, 800ad34 <_Bfree+0x28>
 800ad16:	2010      	movs	r0, #16
 800ad18:	f7ff ffb0 	bl	800ac7c <malloc>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	6268      	str	r0, [r5, #36]	; 0x24
 800ad20:	b920      	cbnz	r0, 800ad2c <_Bfree+0x20>
 800ad22:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <_Bfree+0x3c>)
 800ad24:	4809      	ldr	r0, [pc, #36]	; (800ad4c <_Bfree+0x40>)
 800ad26:	218a      	movs	r1, #138	; 0x8a
 800ad28:	f7ff f8d8 	bl	8009edc <__assert_func>
 800ad2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad30:	6006      	str	r6, [r0, #0]
 800ad32:	60c6      	str	r6, [r0, #12]
 800ad34:	b13c      	cbz	r4, 800ad46 <_Bfree+0x3a>
 800ad36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad38:	6862      	ldr	r2, [r4, #4]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad40:	6021      	str	r1, [r4, #0]
 800ad42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	080309e1 	.word	0x080309e1
 800ad4c:	08030a64 	.word	0x08030a64

0800ad50 <__multadd>:
 800ad50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad54:	690d      	ldr	r5, [r1, #16]
 800ad56:	4607      	mov	r7, r0
 800ad58:	460c      	mov	r4, r1
 800ad5a:	461e      	mov	r6, r3
 800ad5c:	f101 0c14 	add.w	ip, r1, #20
 800ad60:	2000      	movs	r0, #0
 800ad62:	f8dc 3000 	ldr.w	r3, [ip]
 800ad66:	b299      	uxth	r1, r3
 800ad68:	fb02 6101 	mla	r1, r2, r1, r6
 800ad6c:	0c1e      	lsrs	r6, r3, #16
 800ad6e:	0c0b      	lsrs	r3, r1, #16
 800ad70:	fb02 3306 	mla	r3, r2, r6, r3
 800ad74:	b289      	uxth	r1, r1
 800ad76:	3001      	adds	r0, #1
 800ad78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad7c:	4285      	cmp	r5, r0
 800ad7e:	f84c 1b04 	str.w	r1, [ip], #4
 800ad82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad86:	dcec      	bgt.n	800ad62 <__multadd+0x12>
 800ad88:	b30e      	cbz	r6, 800adce <__multadd+0x7e>
 800ad8a:	68a3      	ldr	r3, [r4, #8]
 800ad8c:	42ab      	cmp	r3, r5
 800ad8e:	dc19      	bgt.n	800adc4 <__multadd+0x74>
 800ad90:	6861      	ldr	r1, [r4, #4]
 800ad92:	4638      	mov	r0, r7
 800ad94:	3101      	adds	r1, #1
 800ad96:	f7ff ff79 	bl	800ac8c <_Balloc>
 800ad9a:	4680      	mov	r8, r0
 800ad9c:	b928      	cbnz	r0, 800adaa <__multadd+0x5a>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	4b0c      	ldr	r3, [pc, #48]	; (800add4 <__multadd+0x84>)
 800ada2:	480d      	ldr	r0, [pc, #52]	; (800add8 <__multadd+0x88>)
 800ada4:	21b5      	movs	r1, #181	; 0xb5
 800ada6:	f7ff f899 	bl	8009edc <__assert_func>
 800adaa:	6922      	ldr	r2, [r4, #16]
 800adac:	3202      	adds	r2, #2
 800adae:	f104 010c 	add.w	r1, r4, #12
 800adb2:	0092      	lsls	r2, r2, #2
 800adb4:	300c      	adds	r0, #12
 800adb6:	f7fe fb89 	bl	80094cc <memcpy>
 800adba:	4621      	mov	r1, r4
 800adbc:	4638      	mov	r0, r7
 800adbe:	f7ff ffa5 	bl	800ad0c <_Bfree>
 800adc2:	4644      	mov	r4, r8
 800adc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adc8:	3501      	adds	r5, #1
 800adca:	615e      	str	r6, [r3, #20]
 800adcc:	6125      	str	r5, [r4, #16]
 800adce:	4620      	mov	r0, r4
 800add0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add4:	08030a53 	.word	0x08030a53
 800add8:	08030a64 	.word	0x08030a64

0800addc <__hi0bits>:
 800addc:	0c03      	lsrs	r3, r0, #16
 800adde:	041b      	lsls	r3, r3, #16
 800ade0:	b9d3      	cbnz	r3, 800ae18 <__hi0bits+0x3c>
 800ade2:	0400      	lsls	r0, r0, #16
 800ade4:	2310      	movs	r3, #16
 800ade6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800adea:	bf04      	itt	eq
 800adec:	0200      	lsleq	r0, r0, #8
 800adee:	3308      	addeq	r3, #8
 800adf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800adf4:	bf04      	itt	eq
 800adf6:	0100      	lsleq	r0, r0, #4
 800adf8:	3304      	addeq	r3, #4
 800adfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800adfe:	bf04      	itt	eq
 800ae00:	0080      	lsleq	r0, r0, #2
 800ae02:	3302      	addeq	r3, #2
 800ae04:	2800      	cmp	r0, #0
 800ae06:	db05      	blt.n	800ae14 <__hi0bits+0x38>
 800ae08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae0c:	f103 0301 	add.w	r3, r3, #1
 800ae10:	bf08      	it	eq
 800ae12:	2320      	moveq	r3, #32
 800ae14:	4618      	mov	r0, r3
 800ae16:	4770      	bx	lr
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e7e4      	b.n	800ade6 <__hi0bits+0xa>

0800ae1c <__lo0bits>:
 800ae1c:	6803      	ldr	r3, [r0, #0]
 800ae1e:	f013 0207 	ands.w	r2, r3, #7
 800ae22:	4601      	mov	r1, r0
 800ae24:	d00b      	beq.n	800ae3e <__lo0bits+0x22>
 800ae26:	07da      	lsls	r2, r3, #31
 800ae28:	d423      	bmi.n	800ae72 <__lo0bits+0x56>
 800ae2a:	0798      	lsls	r0, r3, #30
 800ae2c:	bf49      	itett	mi
 800ae2e:	085b      	lsrmi	r3, r3, #1
 800ae30:	089b      	lsrpl	r3, r3, #2
 800ae32:	2001      	movmi	r0, #1
 800ae34:	600b      	strmi	r3, [r1, #0]
 800ae36:	bf5c      	itt	pl
 800ae38:	600b      	strpl	r3, [r1, #0]
 800ae3a:	2002      	movpl	r0, #2
 800ae3c:	4770      	bx	lr
 800ae3e:	b298      	uxth	r0, r3
 800ae40:	b9a8      	cbnz	r0, 800ae6e <__lo0bits+0x52>
 800ae42:	0c1b      	lsrs	r3, r3, #16
 800ae44:	2010      	movs	r0, #16
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	b90a      	cbnz	r2, 800ae4e <__lo0bits+0x32>
 800ae4a:	3008      	adds	r0, #8
 800ae4c:	0a1b      	lsrs	r3, r3, #8
 800ae4e:	071a      	lsls	r2, r3, #28
 800ae50:	bf04      	itt	eq
 800ae52:	091b      	lsreq	r3, r3, #4
 800ae54:	3004      	addeq	r0, #4
 800ae56:	079a      	lsls	r2, r3, #30
 800ae58:	bf04      	itt	eq
 800ae5a:	089b      	lsreq	r3, r3, #2
 800ae5c:	3002      	addeq	r0, #2
 800ae5e:	07da      	lsls	r2, r3, #31
 800ae60:	d403      	bmi.n	800ae6a <__lo0bits+0x4e>
 800ae62:	085b      	lsrs	r3, r3, #1
 800ae64:	f100 0001 	add.w	r0, r0, #1
 800ae68:	d005      	beq.n	800ae76 <__lo0bits+0x5a>
 800ae6a:	600b      	str	r3, [r1, #0]
 800ae6c:	4770      	bx	lr
 800ae6e:	4610      	mov	r0, r2
 800ae70:	e7e9      	b.n	800ae46 <__lo0bits+0x2a>
 800ae72:	2000      	movs	r0, #0
 800ae74:	4770      	bx	lr
 800ae76:	2020      	movs	r0, #32
 800ae78:	4770      	bx	lr
	...

0800ae7c <__i2b>:
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	460c      	mov	r4, r1
 800ae80:	2101      	movs	r1, #1
 800ae82:	f7ff ff03 	bl	800ac8c <_Balloc>
 800ae86:	4602      	mov	r2, r0
 800ae88:	b928      	cbnz	r0, 800ae96 <__i2b+0x1a>
 800ae8a:	4b05      	ldr	r3, [pc, #20]	; (800aea0 <__i2b+0x24>)
 800ae8c:	4805      	ldr	r0, [pc, #20]	; (800aea4 <__i2b+0x28>)
 800ae8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ae92:	f7ff f823 	bl	8009edc <__assert_func>
 800ae96:	2301      	movs	r3, #1
 800ae98:	6144      	str	r4, [r0, #20]
 800ae9a:	6103      	str	r3, [r0, #16]
 800ae9c:	bd10      	pop	{r4, pc}
 800ae9e:	bf00      	nop
 800aea0:	08030a53 	.word	0x08030a53
 800aea4:	08030a64 	.word	0x08030a64

0800aea8 <__multiply>:
 800aea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeac:	4691      	mov	r9, r2
 800aeae:	690a      	ldr	r2, [r1, #16]
 800aeb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	bfb8      	it	lt
 800aeb8:	460b      	movlt	r3, r1
 800aeba:	460c      	mov	r4, r1
 800aebc:	bfbc      	itt	lt
 800aebe:	464c      	movlt	r4, r9
 800aec0:	4699      	movlt	r9, r3
 800aec2:	6927      	ldr	r7, [r4, #16]
 800aec4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aec8:	68a3      	ldr	r3, [r4, #8]
 800aeca:	6861      	ldr	r1, [r4, #4]
 800aecc:	eb07 060a 	add.w	r6, r7, sl
 800aed0:	42b3      	cmp	r3, r6
 800aed2:	b085      	sub	sp, #20
 800aed4:	bfb8      	it	lt
 800aed6:	3101      	addlt	r1, #1
 800aed8:	f7ff fed8 	bl	800ac8c <_Balloc>
 800aedc:	b930      	cbnz	r0, 800aeec <__multiply+0x44>
 800aede:	4602      	mov	r2, r0
 800aee0:	4b44      	ldr	r3, [pc, #272]	; (800aff4 <__multiply+0x14c>)
 800aee2:	4845      	ldr	r0, [pc, #276]	; (800aff8 <__multiply+0x150>)
 800aee4:	f240 115d 	movw	r1, #349	; 0x15d
 800aee8:	f7fe fff8 	bl	8009edc <__assert_func>
 800aeec:	f100 0514 	add.w	r5, r0, #20
 800aef0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aef4:	462b      	mov	r3, r5
 800aef6:	2200      	movs	r2, #0
 800aef8:	4543      	cmp	r3, r8
 800aefa:	d321      	bcc.n	800af40 <__multiply+0x98>
 800aefc:	f104 0314 	add.w	r3, r4, #20
 800af00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af04:	f109 0314 	add.w	r3, r9, #20
 800af08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af0c:	9202      	str	r2, [sp, #8]
 800af0e:	1b3a      	subs	r2, r7, r4
 800af10:	3a15      	subs	r2, #21
 800af12:	f022 0203 	bic.w	r2, r2, #3
 800af16:	3204      	adds	r2, #4
 800af18:	f104 0115 	add.w	r1, r4, #21
 800af1c:	428f      	cmp	r7, r1
 800af1e:	bf38      	it	cc
 800af20:	2204      	movcc	r2, #4
 800af22:	9201      	str	r2, [sp, #4]
 800af24:	9a02      	ldr	r2, [sp, #8]
 800af26:	9303      	str	r3, [sp, #12]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d80c      	bhi.n	800af46 <__multiply+0x9e>
 800af2c:	2e00      	cmp	r6, #0
 800af2e:	dd03      	ble.n	800af38 <__multiply+0x90>
 800af30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af34:	2b00      	cmp	r3, #0
 800af36:	d05a      	beq.n	800afee <__multiply+0x146>
 800af38:	6106      	str	r6, [r0, #16]
 800af3a:	b005      	add	sp, #20
 800af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af40:	f843 2b04 	str.w	r2, [r3], #4
 800af44:	e7d8      	b.n	800aef8 <__multiply+0x50>
 800af46:	f8b3 a000 	ldrh.w	sl, [r3]
 800af4a:	f1ba 0f00 	cmp.w	sl, #0
 800af4e:	d024      	beq.n	800af9a <__multiply+0xf2>
 800af50:	f104 0e14 	add.w	lr, r4, #20
 800af54:	46a9      	mov	r9, r5
 800af56:	f04f 0c00 	mov.w	ip, #0
 800af5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af5e:	f8d9 1000 	ldr.w	r1, [r9]
 800af62:	fa1f fb82 	uxth.w	fp, r2
 800af66:	b289      	uxth	r1, r1
 800af68:	fb0a 110b 	mla	r1, sl, fp, r1
 800af6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af70:	f8d9 2000 	ldr.w	r2, [r9]
 800af74:	4461      	add	r1, ip
 800af76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af7a:	fb0a c20b 	mla	r2, sl, fp, ip
 800af7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af82:	b289      	uxth	r1, r1
 800af84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af88:	4577      	cmp	r7, lr
 800af8a:	f849 1b04 	str.w	r1, [r9], #4
 800af8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af92:	d8e2      	bhi.n	800af5a <__multiply+0xb2>
 800af94:	9a01      	ldr	r2, [sp, #4]
 800af96:	f845 c002 	str.w	ip, [r5, r2]
 800af9a:	9a03      	ldr	r2, [sp, #12]
 800af9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800afa0:	3304      	adds	r3, #4
 800afa2:	f1b9 0f00 	cmp.w	r9, #0
 800afa6:	d020      	beq.n	800afea <__multiply+0x142>
 800afa8:	6829      	ldr	r1, [r5, #0]
 800afaa:	f104 0c14 	add.w	ip, r4, #20
 800afae:	46ae      	mov	lr, r5
 800afb0:	f04f 0a00 	mov.w	sl, #0
 800afb4:	f8bc b000 	ldrh.w	fp, [ip]
 800afb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800afbc:	fb09 220b 	mla	r2, r9, fp, r2
 800afc0:	4492      	add	sl, r2
 800afc2:	b289      	uxth	r1, r1
 800afc4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800afc8:	f84e 1b04 	str.w	r1, [lr], #4
 800afcc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800afd0:	f8be 1000 	ldrh.w	r1, [lr]
 800afd4:	0c12      	lsrs	r2, r2, #16
 800afd6:	fb09 1102 	mla	r1, r9, r2, r1
 800afda:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800afde:	4567      	cmp	r7, ip
 800afe0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afe4:	d8e6      	bhi.n	800afb4 <__multiply+0x10c>
 800afe6:	9a01      	ldr	r2, [sp, #4]
 800afe8:	50a9      	str	r1, [r5, r2]
 800afea:	3504      	adds	r5, #4
 800afec:	e79a      	b.n	800af24 <__multiply+0x7c>
 800afee:	3e01      	subs	r6, #1
 800aff0:	e79c      	b.n	800af2c <__multiply+0x84>
 800aff2:	bf00      	nop
 800aff4:	08030a53 	.word	0x08030a53
 800aff8:	08030a64 	.word	0x08030a64

0800affc <__pow5mult>:
 800affc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b000:	4615      	mov	r5, r2
 800b002:	f012 0203 	ands.w	r2, r2, #3
 800b006:	4606      	mov	r6, r0
 800b008:	460f      	mov	r7, r1
 800b00a:	d007      	beq.n	800b01c <__pow5mult+0x20>
 800b00c:	4c25      	ldr	r4, [pc, #148]	; (800b0a4 <__pow5mult+0xa8>)
 800b00e:	3a01      	subs	r2, #1
 800b010:	2300      	movs	r3, #0
 800b012:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b016:	f7ff fe9b 	bl	800ad50 <__multadd>
 800b01a:	4607      	mov	r7, r0
 800b01c:	10ad      	asrs	r5, r5, #2
 800b01e:	d03d      	beq.n	800b09c <__pow5mult+0xa0>
 800b020:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b022:	b97c      	cbnz	r4, 800b044 <__pow5mult+0x48>
 800b024:	2010      	movs	r0, #16
 800b026:	f7ff fe29 	bl	800ac7c <malloc>
 800b02a:	4602      	mov	r2, r0
 800b02c:	6270      	str	r0, [r6, #36]	; 0x24
 800b02e:	b928      	cbnz	r0, 800b03c <__pow5mult+0x40>
 800b030:	4b1d      	ldr	r3, [pc, #116]	; (800b0a8 <__pow5mult+0xac>)
 800b032:	481e      	ldr	r0, [pc, #120]	; (800b0ac <__pow5mult+0xb0>)
 800b034:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b038:	f7fe ff50 	bl	8009edc <__assert_func>
 800b03c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b040:	6004      	str	r4, [r0, #0]
 800b042:	60c4      	str	r4, [r0, #12]
 800b044:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b048:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b04c:	b94c      	cbnz	r4, 800b062 <__pow5mult+0x66>
 800b04e:	f240 2171 	movw	r1, #625	; 0x271
 800b052:	4630      	mov	r0, r6
 800b054:	f7ff ff12 	bl	800ae7c <__i2b>
 800b058:	2300      	movs	r3, #0
 800b05a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b05e:	4604      	mov	r4, r0
 800b060:	6003      	str	r3, [r0, #0]
 800b062:	f04f 0900 	mov.w	r9, #0
 800b066:	07eb      	lsls	r3, r5, #31
 800b068:	d50a      	bpl.n	800b080 <__pow5mult+0x84>
 800b06a:	4639      	mov	r1, r7
 800b06c:	4622      	mov	r2, r4
 800b06e:	4630      	mov	r0, r6
 800b070:	f7ff ff1a 	bl	800aea8 <__multiply>
 800b074:	4639      	mov	r1, r7
 800b076:	4680      	mov	r8, r0
 800b078:	4630      	mov	r0, r6
 800b07a:	f7ff fe47 	bl	800ad0c <_Bfree>
 800b07e:	4647      	mov	r7, r8
 800b080:	106d      	asrs	r5, r5, #1
 800b082:	d00b      	beq.n	800b09c <__pow5mult+0xa0>
 800b084:	6820      	ldr	r0, [r4, #0]
 800b086:	b938      	cbnz	r0, 800b098 <__pow5mult+0x9c>
 800b088:	4622      	mov	r2, r4
 800b08a:	4621      	mov	r1, r4
 800b08c:	4630      	mov	r0, r6
 800b08e:	f7ff ff0b 	bl	800aea8 <__multiply>
 800b092:	6020      	str	r0, [r4, #0]
 800b094:	f8c0 9000 	str.w	r9, [r0]
 800b098:	4604      	mov	r4, r0
 800b09a:	e7e4      	b.n	800b066 <__pow5mult+0x6a>
 800b09c:	4638      	mov	r0, r7
 800b09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a2:	bf00      	nop
 800b0a4:	08030bb0 	.word	0x08030bb0
 800b0a8:	080309e1 	.word	0x080309e1
 800b0ac:	08030a64 	.word	0x08030a64

0800b0b0 <__lshift>:
 800b0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	6849      	ldr	r1, [r1, #4]
 800b0b8:	6923      	ldr	r3, [r4, #16]
 800b0ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0be:	68a3      	ldr	r3, [r4, #8]
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	4691      	mov	r9, r2
 800b0c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0c8:	f108 0601 	add.w	r6, r8, #1
 800b0cc:	42b3      	cmp	r3, r6
 800b0ce:	db0b      	blt.n	800b0e8 <__lshift+0x38>
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	f7ff fddb 	bl	800ac8c <_Balloc>
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	b948      	cbnz	r0, 800b0ee <__lshift+0x3e>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	4b2a      	ldr	r3, [pc, #168]	; (800b188 <__lshift+0xd8>)
 800b0de:	482b      	ldr	r0, [pc, #172]	; (800b18c <__lshift+0xdc>)
 800b0e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b0e4:	f7fe fefa 	bl	8009edc <__assert_func>
 800b0e8:	3101      	adds	r1, #1
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	e7ee      	b.n	800b0cc <__lshift+0x1c>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f100 0114 	add.w	r1, r0, #20
 800b0f4:	f100 0210 	add.w	r2, r0, #16
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	4553      	cmp	r3, sl
 800b0fc:	db37      	blt.n	800b16e <__lshift+0xbe>
 800b0fe:	6920      	ldr	r0, [r4, #16]
 800b100:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b104:	f104 0314 	add.w	r3, r4, #20
 800b108:	f019 091f 	ands.w	r9, r9, #31
 800b10c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b110:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b114:	d02f      	beq.n	800b176 <__lshift+0xc6>
 800b116:	f1c9 0e20 	rsb	lr, r9, #32
 800b11a:	468a      	mov	sl, r1
 800b11c:	f04f 0c00 	mov.w	ip, #0
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	fa02 f209 	lsl.w	r2, r2, r9
 800b126:	ea42 020c 	orr.w	r2, r2, ip
 800b12a:	f84a 2b04 	str.w	r2, [sl], #4
 800b12e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b132:	4298      	cmp	r0, r3
 800b134:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b138:	d8f2      	bhi.n	800b120 <__lshift+0x70>
 800b13a:	1b03      	subs	r3, r0, r4
 800b13c:	3b15      	subs	r3, #21
 800b13e:	f023 0303 	bic.w	r3, r3, #3
 800b142:	3304      	adds	r3, #4
 800b144:	f104 0215 	add.w	r2, r4, #21
 800b148:	4290      	cmp	r0, r2
 800b14a:	bf38      	it	cc
 800b14c:	2304      	movcc	r3, #4
 800b14e:	f841 c003 	str.w	ip, [r1, r3]
 800b152:	f1bc 0f00 	cmp.w	ip, #0
 800b156:	d001      	beq.n	800b15c <__lshift+0xac>
 800b158:	f108 0602 	add.w	r6, r8, #2
 800b15c:	3e01      	subs	r6, #1
 800b15e:	4638      	mov	r0, r7
 800b160:	612e      	str	r6, [r5, #16]
 800b162:	4621      	mov	r1, r4
 800b164:	f7ff fdd2 	bl	800ad0c <_Bfree>
 800b168:	4628      	mov	r0, r5
 800b16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b16e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b172:	3301      	adds	r3, #1
 800b174:	e7c1      	b.n	800b0fa <__lshift+0x4a>
 800b176:	3904      	subs	r1, #4
 800b178:	f853 2b04 	ldr.w	r2, [r3], #4
 800b17c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b180:	4298      	cmp	r0, r3
 800b182:	d8f9      	bhi.n	800b178 <__lshift+0xc8>
 800b184:	e7ea      	b.n	800b15c <__lshift+0xac>
 800b186:	bf00      	nop
 800b188:	08030a53 	.word	0x08030a53
 800b18c:	08030a64 	.word	0x08030a64

0800b190 <__mcmp>:
 800b190:	b530      	push	{r4, r5, lr}
 800b192:	6902      	ldr	r2, [r0, #16]
 800b194:	690c      	ldr	r4, [r1, #16]
 800b196:	1b12      	subs	r2, r2, r4
 800b198:	d10e      	bne.n	800b1b8 <__mcmp+0x28>
 800b19a:	f100 0314 	add.w	r3, r0, #20
 800b19e:	3114      	adds	r1, #20
 800b1a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b1a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b1a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b1ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1b0:	42a5      	cmp	r5, r4
 800b1b2:	d003      	beq.n	800b1bc <__mcmp+0x2c>
 800b1b4:	d305      	bcc.n	800b1c2 <__mcmp+0x32>
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	4610      	mov	r0, r2
 800b1ba:	bd30      	pop	{r4, r5, pc}
 800b1bc:	4283      	cmp	r3, r0
 800b1be:	d3f3      	bcc.n	800b1a8 <__mcmp+0x18>
 800b1c0:	e7fa      	b.n	800b1b8 <__mcmp+0x28>
 800b1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c6:	e7f7      	b.n	800b1b8 <__mcmp+0x28>

0800b1c8 <__mdiff>:
 800b1c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	4690      	mov	r8, r2
 800b1d6:	f7ff ffdb 	bl	800b190 <__mcmp>
 800b1da:	1e05      	subs	r5, r0, #0
 800b1dc:	d110      	bne.n	800b200 <__mdiff+0x38>
 800b1de:	4629      	mov	r1, r5
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f7ff fd53 	bl	800ac8c <_Balloc>
 800b1e6:	b930      	cbnz	r0, 800b1f6 <__mdiff+0x2e>
 800b1e8:	4b3a      	ldr	r3, [pc, #232]	; (800b2d4 <__mdiff+0x10c>)
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	f240 2132 	movw	r1, #562	; 0x232
 800b1f0:	4839      	ldr	r0, [pc, #228]	; (800b2d8 <__mdiff+0x110>)
 800b1f2:	f7fe fe73 	bl	8009edc <__assert_func>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b200:	bfa4      	itt	ge
 800b202:	4643      	movge	r3, r8
 800b204:	46a0      	movge	r8, r4
 800b206:	4630      	mov	r0, r6
 800b208:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b20c:	bfa6      	itte	ge
 800b20e:	461c      	movge	r4, r3
 800b210:	2500      	movge	r5, #0
 800b212:	2501      	movlt	r5, #1
 800b214:	f7ff fd3a 	bl	800ac8c <_Balloc>
 800b218:	b920      	cbnz	r0, 800b224 <__mdiff+0x5c>
 800b21a:	4b2e      	ldr	r3, [pc, #184]	; (800b2d4 <__mdiff+0x10c>)
 800b21c:	4602      	mov	r2, r0
 800b21e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b222:	e7e5      	b.n	800b1f0 <__mdiff+0x28>
 800b224:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b228:	6926      	ldr	r6, [r4, #16]
 800b22a:	60c5      	str	r5, [r0, #12]
 800b22c:	f104 0914 	add.w	r9, r4, #20
 800b230:	f108 0514 	add.w	r5, r8, #20
 800b234:	f100 0e14 	add.w	lr, r0, #20
 800b238:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b23c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b240:	f108 0210 	add.w	r2, r8, #16
 800b244:	46f2      	mov	sl, lr
 800b246:	2100      	movs	r1, #0
 800b248:	f859 3b04 	ldr.w	r3, [r9], #4
 800b24c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b250:	fa1f f883 	uxth.w	r8, r3
 800b254:	fa11 f18b 	uxtah	r1, r1, fp
 800b258:	0c1b      	lsrs	r3, r3, #16
 800b25a:	eba1 0808 	sub.w	r8, r1, r8
 800b25e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b262:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b266:	fa1f f888 	uxth.w	r8, r8
 800b26a:	1419      	asrs	r1, r3, #16
 800b26c:	454e      	cmp	r6, r9
 800b26e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b272:	f84a 3b04 	str.w	r3, [sl], #4
 800b276:	d8e7      	bhi.n	800b248 <__mdiff+0x80>
 800b278:	1b33      	subs	r3, r6, r4
 800b27a:	3b15      	subs	r3, #21
 800b27c:	f023 0303 	bic.w	r3, r3, #3
 800b280:	3304      	adds	r3, #4
 800b282:	3415      	adds	r4, #21
 800b284:	42a6      	cmp	r6, r4
 800b286:	bf38      	it	cc
 800b288:	2304      	movcc	r3, #4
 800b28a:	441d      	add	r5, r3
 800b28c:	4473      	add	r3, lr
 800b28e:	469e      	mov	lr, r3
 800b290:	462e      	mov	r6, r5
 800b292:	4566      	cmp	r6, ip
 800b294:	d30e      	bcc.n	800b2b4 <__mdiff+0xec>
 800b296:	f10c 0203 	add.w	r2, ip, #3
 800b29a:	1b52      	subs	r2, r2, r5
 800b29c:	f022 0203 	bic.w	r2, r2, #3
 800b2a0:	3d03      	subs	r5, #3
 800b2a2:	45ac      	cmp	ip, r5
 800b2a4:	bf38      	it	cc
 800b2a6:	2200      	movcc	r2, #0
 800b2a8:	441a      	add	r2, r3
 800b2aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b2ae:	b17b      	cbz	r3, 800b2d0 <__mdiff+0x108>
 800b2b0:	6107      	str	r7, [r0, #16]
 800b2b2:	e7a3      	b.n	800b1fc <__mdiff+0x34>
 800b2b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b2b8:	fa11 f288 	uxtah	r2, r1, r8
 800b2bc:	1414      	asrs	r4, r2, #16
 800b2be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b2c2:	b292      	uxth	r2, r2
 800b2c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b2c8:	f84e 2b04 	str.w	r2, [lr], #4
 800b2cc:	1421      	asrs	r1, r4, #16
 800b2ce:	e7e0      	b.n	800b292 <__mdiff+0xca>
 800b2d0:	3f01      	subs	r7, #1
 800b2d2:	e7ea      	b.n	800b2aa <__mdiff+0xe2>
 800b2d4:	08030a53 	.word	0x08030a53
 800b2d8:	08030a64 	.word	0x08030a64

0800b2dc <__d2b>:
 800b2dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2e0:	4689      	mov	r9, r1
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	ec57 6b10 	vmov	r6, r7, d0
 800b2e8:	4690      	mov	r8, r2
 800b2ea:	f7ff fccf 	bl	800ac8c <_Balloc>
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	b930      	cbnz	r0, 800b300 <__d2b+0x24>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	4b25      	ldr	r3, [pc, #148]	; (800b38c <__d2b+0xb0>)
 800b2f6:	4826      	ldr	r0, [pc, #152]	; (800b390 <__d2b+0xb4>)
 800b2f8:	f240 310a 	movw	r1, #778	; 0x30a
 800b2fc:	f7fe fdee 	bl	8009edc <__assert_func>
 800b300:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b304:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b308:	bb35      	cbnz	r5, 800b358 <__d2b+0x7c>
 800b30a:	2e00      	cmp	r6, #0
 800b30c:	9301      	str	r3, [sp, #4]
 800b30e:	d028      	beq.n	800b362 <__d2b+0x86>
 800b310:	4668      	mov	r0, sp
 800b312:	9600      	str	r6, [sp, #0]
 800b314:	f7ff fd82 	bl	800ae1c <__lo0bits>
 800b318:	9900      	ldr	r1, [sp, #0]
 800b31a:	b300      	cbz	r0, 800b35e <__d2b+0x82>
 800b31c:	9a01      	ldr	r2, [sp, #4]
 800b31e:	f1c0 0320 	rsb	r3, r0, #32
 800b322:	fa02 f303 	lsl.w	r3, r2, r3
 800b326:	430b      	orrs	r3, r1
 800b328:	40c2      	lsrs	r2, r0
 800b32a:	6163      	str	r3, [r4, #20]
 800b32c:	9201      	str	r2, [sp, #4]
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	61a3      	str	r3, [r4, #24]
 800b332:	2b00      	cmp	r3, #0
 800b334:	bf14      	ite	ne
 800b336:	2202      	movne	r2, #2
 800b338:	2201      	moveq	r2, #1
 800b33a:	6122      	str	r2, [r4, #16]
 800b33c:	b1d5      	cbz	r5, 800b374 <__d2b+0x98>
 800b33e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b342:	4405      	add	r5, r0
 800b344:	f8c9 5000 	str.w	r5, [r9]
 800b348:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b34c:	f8c8 0000 	str.w	r0, [r8]
 800b350:	4620      	mov	r0, r4
 800b352:	b003      	add	sp, #12
 800b354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b35c:	e7d5      	b.n	800b30a <__d2b+0x2e>
 800b35e:	6161      	str	r1, [r4, #20]
 800b360:	e7e5      	b.n	800b32e <__d2b+0x52>
 800b362:	a801      	add	r0, sp, #4
 800b364:	f7ff fd5a 	bl	800ae1c <__lo0bits>
 800b368:	9b01      	ldr	r3, [sp, #4]
 800b36a:	6163      	str	r3, [r4, #20]
 800b36c:	2201      	movs	r2, #1
 800b36e:	6122      	str	r2, [r4, #16]
 800b370:	3020      	adds	r0, #32
 800b372:	e7e3      	b.n	800b33c <__d2b+0x60>
 800b374:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b378:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b37c:	f8c9 0000 	str.w	r0, [r9]
 800b380:	6918      	ldr	r0, [r3, #16]
 800b382:	f7ff fd2b 	bl	800addc <__hi0bits>
 800b386:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b38a:	e7df      	b.n	800b34c <__d2b+0x70>
 800b38c:	08030a53 	.word	0x08030a53
 800b390:	08030a64 	.word	0x08030a64

0800b394 <_calloc_r>:
 800b394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b396:	fba1 2402 	umull	r2, r4, r1, r2
 800b39a:	b94c      	cbnz	r4, 800b3b0 <_calloc_r+0x1c>
 800b39c:	4611      	mov	r1, r2
 800b39e:	9201      	str	r2, [sp, #4]
 800b3a0:	f000 f87a 	bl	800b498 <_malloc_r>
 800b3a4:	9a01      	ldr	r2, [sp, #4]
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	b930      	cbnz	r0, 800b3b8 <_calloc_r+0x24>
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	b003      	add	sp, #12
 800b3ae:	bd30      	pop	{r4, r5, pc}
 800b3b0:	220c      	movs	r2, #12
 800b3b2:	6002      	str	r2, [r0, #0]
 800b3b4:	2500      	movs	r5, #0
 800b3b6:	e7f8      	b.n	800b3aa <_calloc_r+0x16>
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	f7fe f895 	bl	80094e8 <memset>
 800b3be:	e7f4      	b.n	800b3aa <_calloc_r+0x16>

0800b3c0 <_free_r>:
 800b3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3c2:	2900      	cmp	r1, #0
 800b3c4:	d044      	beq.n	800b450 <_free_r+0x90>
 800b3c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ca:	9001      	str	r0, [sp, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f1a1 0404 	sub.w	r4, r1, #4
 800b3d2:	bfb8      	it	lt
 800b3d4:	18e4      	addlt	r4, r4, r3
 800b3d6:	f000 febf 	bl	800c158 <__malloc_lock>
 800b3da:	4a1e      	ldr	r2, [pc, #120]	; (800b454 <_free_r+0x94>)
 800b3dc:	9801      	ldr	r0, [sp, #4]
 800b3de:	6813      	ldr	r3, [r2, #0]
 800b3e0:	b933      	cbnz	r3, 800b3f0 <_free_r+0x30>
 800b3e2:	6063      	str	r3, [r4, #4]
 800b3e4:	6014      	str	r4, [r2, #0]
 800b3e6:	b003      	add	sp, #12
 800b3e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3ec:	f000 beba 	b.w	800c164 <__malloc_unlock>
 800b3f0:	42a3      	cmp	r3, r4
 800b3f2:	d908      	bls.n	800b406 <_free_r+0x46>
 800b3f4:	6825      	ldr	r5, [r4, #0]
 800b3f6:	1961      	adds	r1, r4, r5
 800b3f8:	428b      	cmp	r3, r1
 800b3fa:	bf01      	itttt	eq
 800b3fc:	6819      	ldreq	r1, [r3, #0]
 800b3fe:	685b      	ldreq	r3, [r3, #4]
 800b400:	1949      	addeq	r1, r1, r5
 800b402:	6021      	streq	r1, [r4, #0]
 800b404:	e7ed      	b.n	800b3e2 <_free_r+0x22>
 800b406:	461a      	mov	r2, r3
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	b10b      	cbz	r3, 800b410 <_free_r+0x50>
 800b40c:	42a3      	cmp	r3, r4
 800b40e:	d9fa      	bls.n	800b406 <_free_r+0x46>
 800b410:	6811      	ldr	r1, [r2, #0]
 800b412:	1855      	adds	r5, r2, r1
 800b414:	42a5      	cmp	r5, r4
 800b416:	d10b      	bne.n	800b430 <_free_r+0x70>
 800b418:	6824      	ldr	r4, [r4, #0]
 800b41a:	4421      	add	r1, r4
 800b41c:	1854      	adds	r4, r2, r1
 800b41e:	42a3      	cmp	r3, r4
 800b420:	6011      	str	r1, [r2, #0]
 800b422:	d1e0      	bne.n	800b3e6 <_free_r+0x26>
 800b424:	681c      	ldr	r4, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	6053      	str	r3, [r2, #4]
 800b42a:	4421      	add	r1, r4
 800b42c:	6011      	str	r1, [r2, #0]
 800b42e:	e7da      	b.n	800b3e6 <_free_r+0x26>
 800b430:	d902      	bls.n	800b438 <_free_r+0x78>
 800b432:	230c      	movs	r3, #12
 800b434:	6003      	str	r3, [r0, #0]
 800b436:	e7d6      	b.n	800b3e6 <_free_r+0x26>
 800b438:	6825      	ldr	r5, [r4, #0]
 800b43a:	1961      	adds	r1, r4, r5
 800b43c:	428b      	cmp	r3, r1
 800b43e:	bf04      	itt	eq
 800b440:	6819      	ldreq	r1, [r3, #0]
 800b442:	685b      	ldreq	r3, [r3, #4]
 800b444:	6063      	str	r3, [r4, #4]
 800b446:	bf04      	itt	eq
 800b448:	1949      	addeq	r1, r1, r5
 800b44a:	6021      	streq	r1, [r4, #0]
 800b44c:	6054      	str	r4, [r2, #4]
 800b44e:	e7ca      	b.n	800b3e6 <_free_r+0x26>
 800b450:	b003      	add	sp, #12
 800b452:	bd30      	pop	{r4, r5, pc}
 800b454:	200035e8 	.word	0x200035e8

0800b458 <sbrk_aligned>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	4e0e      	ldr	r6, [pc, #56]	; (800b494 <sbrk_aligned+0x3c>)
 800b45c:	460c      	mov	r4, r1
 800b45e:	6831      	ldr	r1, [r6, #0]
 800b460:	4605      	mov	r5, r0
 800b462:	b911      	cbnz	r1, 800b46a <sbrk_aligned+0x12>
 800b464:	f000 fb54 	bl	800bb10 <_sbrk_r>
 800b468:	6030      	str	r0, [r6, #0]
 800b46a:	4621      	mov	r1, r4
 800b46c:	4628      	mov	r0, r5
 800b46e:	f000 fb4f 	bl	800bb10 <_sbrk_r>
 800b472:	1c43      	adds	r3, r0, #1
 800b474:	d00a      	beq.n	800b48c <sbrk_aligned+0x34>
 800b476:	1cc4      	adds	r4, r0, #3
 800b478:	f024 0403 	bic.w	r4, r4, #3
 800b47c:	42a0      	cmp	r0, r4
 800b47e:	d007      	beq.n	800b490 <sbrk_aligned+0x38>
 800b480:	1a21      	subs	r1, r4, r0
 800b482:	4628      	mov	r0, r5
 800b484:	f000 fb44 	bl	800bb10 <_sbrk_r>
 800b488:	3001      	adds	r0, #1
 800b48a:	d101      	bne.n	800b490 <sbrk_aligned+0x38>
 800b48c:	f04f 34ff 	mov.w	r4, #4294967295
 800b490:	4620      	mov	r0, r4
 800b492:	bd70      	pop	{r4, r5, r6, pc}
 800b494:	200035ec 	.word	0x200035ec

0800b498 <_malloc_r>:
 800b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49c:	1ccd      	adds	r5, r1, #3
 800b49e:	f025 0503 	bic.w	r5, r5, #3
 800b4a2:	3508      	adds	r5, #8
 800b4a4:	2d0c      	cmp	r5, #12
 800b4a6:	bf38      	it	cc
 800b4a8:	250c      	movcc	r5, #12
 800b4aa:	2d00      	cmp	r5, #0
 800b4ac:	4607      	mov	r7, r0
 800b4ae:	db01      	blt.n	800b4b4 <_malloc_r+0x1c>
 800b4b0:	42a9      	cmp	r1, r5
 800b4b2:	d905      	bls.n	800b4c0 <_malloc_r+0x28>
 800b4b4:	230c      	movs	r3, #12
 800b4b6:	603b      	str	r3, [r7, #0]
 800b4b8:	2600      	movs	r6, #0
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c0:	4e2e      	ldr	r6, [pc, #184]	; (800b57c <_malloc_r+0xe4>)
 800b4c2:	f000 fe49 	bl	800c158 <__malloc_lock>
 800b4c6:	6833      	ldr	r3, [r6, #0]
 800b4c8:	461c      	mov	r4, r3
 800b4ca:	bb34      	cbnz	r4, 800b51a <_malloc_r+0x82>
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f7ff ffc2 	bl	800b458 <sbrk_aligned>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	d14d      	bne.n	800b576 <_malloc_r+0xde>
 800b4da:	6834      	ldr	r4, [r6, #0]
 800b4dc:	4626      	mov	r6, r4
 800b4de:	2e00      	cmp	r6, #0
 800b4e0:	d140      	bne.n	800b564 <_malloc_r+0xcc>
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	4631      	mov	r1, r6
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	eb04 0803 	add.w	r8, r4, r3
 800b4ec:	f000 fb10 	bl	800bb10 <_sbrk_r>
 800b4f0:	4580      	cmp	r8, r0
 800b4f2:	d13a      	bne.n	800b56a <_malloc_r+0xd2>
 800b4f4:	6821      	ldr	r1, [r4, #0]
 800b4f6:	3503      	adds	r5, #3
 800b4f8:	1a6d      	subs	r5, r5, r1
 800b4fa:	f025 0503 	bic.w	r5, r5, #3
 800b4fe:	3508      	adds	r5, #8
 800b500:	2d0c      	cmp	r5, #12
 800b502:	bf38      	it	cc
 800b504:	250c      	movcc	r5, #12
 800b506:	4629      	mov	r1, r5
 800b508:	4638      	mov	r0, r7
 800b50a:	f7ff ffa5 	bl	800b458 <sbrk_aligned>
 800b50e:	3001      	adds	r0, #1
 800b510:	d02b      	beq.n	800b56a <_malloc_r+0xd2>
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	442b      	add	r3, r5
 800b516:	6023      	str	r3, [r4, #0]
 800b518:	e00e      	b.n	800b538 <_malloc_r+0xa0>
 800b51a:	6822      	ldr	r2, [r4, #0]
 800b51c:	1b52      	subs	r2, r2, r5
 800b51e:	d41e      	bmi.n	800b55e <_malloc_r+0xc6>
 800b520:	2a0b      	cmp	r2, #11
 800b522:	d916      	bls.n	800b552 <_malloc_r+0xba>
 800b524:	1961      	adds	r1, r4, r5
 800b526:	42a3      	cmp	r3, r4
 800b528:	6025      	str	r5, [r4, #0]
 800b52a:	bf18      	it	ne
 800b52c:	6059      	strne	r1, [r3, #4]
 800b52e:	6863      	ldr	r3, [r4, #4]
 800b530:	bf08      	it	eq
 800b532:	6031      	streq	r1, [r6, #0]
 800b534:	5162      	str	r2, [r4, r5]
 800b536:	604b      	str	r3, [r1, #4]
 800b538:	4638      	mov	r0, r7
 800b53a:	f104 060b 	add.w	r6, r4, #11
 800b53e:	f000 fe11 	bl	800c164 <__malloc_unlock>
 800b542:	f026 0607 	bic.w	r6, r6, #7
 800b546:	1d23      	adds	r3, r4, #4
 800b548:	1af2      	subs	r2, r6, r3
 800b54a:	d0b6      	beq.n	800b4ba <_malloc_r+0x22>
 800b54c:	1b9b      	subs	r3, r3, r6
 800b54e:	50a3      	str	r3, [r4, r2]
 800b550:	e7b3      	b.n	800b4ba <_malloc_r+0x22>
 800b552:	6862      	ldr	r2, [r4, #4]
 800b554:	42a3      	cmp	r3, r4
 800b556:	bf0c      	ite	eq
 800b558:	6032      	streq	r2, [r6, #0]
 800b55a:	605a      	strne	r2, [r3, #4]
 800b55c:	e7ec      	b.n	800b538 <_malloc_r+0xa0>
 800b55e:	4623      	mov	r3, r4
 800b560:	6864      	ldr	r4, [r4, #4]
 800b562:	e7b2      	b.n	800b4ca <_malloc_r+0x32>
 800b564:	4634      	mov	r4, r6
 800b566:	6876      	ldr	r6, [r6, #4]
 800b568:	e7b9      	b.n	800b4de <_malloc_r+0x46>
 800b56a:	230c      	movs	r3, #12
 800b56c:	603b      	str	r3, [r7, #0]
 800b56e:	4638      	mov	r0, r7
 800b570:	f000 fdf8 	bl	800c164 <__malloc_unlock>
 800b574:	e7a1      	b.n	800b4ba <_malloc_r+0x22>
 800b576:	6025      	str	r5, [r4, #0]
 800b578:	e7de      	b.n	800b538 <_malloc_r+0xa0>
 800b57a:	bf00      	nop
 800b57c:	200035e8 	.word	0x200035e8

0800b580 <__ssputs_r>:
 800b580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b584:	688e      	ldr	r6, [r1, #8]
 800b586:	429e      	cmp	r6, r3
 800b588:	4682      	mov	sl, r0
 800b58a:	460c      	mov	r4, r1
 800b58c:	4690      	mov	r8, r2
 800b58e:	461f      	mov	r7, r3
 800b590:	d838      	bhi.n	800b604 <__ssputs_r+0x84>
 800b592:	898a      	ldrh	r2, [r1, #12]
 800b594:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b598:	d032      	beq.n	800b600 <__ssputs_r+0x80>
 800b59a:	6825      	ldr	r5, [r4, #0]
 800b59c:	6909      	ldr	r1, [r1, #16]
 800b59e:	eba5 0901 	sub.w	r9, r5, r1
 800b5a2:	6965      	ldr	r5, [r4, #20]
 800b5a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	444b      	add	r3, r9
 800b5b0:	106d      	asrs	r5, r5, #1
 800b5b2:	429d      	cmp	r5, r3
 800b5b4:	bf38      	it	cc
 800b5b6:	461d      	movcc	r5, r3
 800b5b8:	0553      	lsls	r3, r2, #21
 800b5ba:	d531      	bpl.n	800b620 <__ssputs_r+0xa0>
 800b5bc:	4629      	mov	r1, r5
 800b5be:	f7ff ff6b 	bl	800b498 <_malloc_r>
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	b950      	cbnz	r0, 800b5dc <__ssputs_r+0x5c>
 800b5c6:	230c      	movs	r3, #12
 800b5c8:	f8ca 3000 	str.w	r3, [sl]
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d2:	81a3      	strh	r3, [r4, #12]
 800b5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5dc:	6921      	ldr	r1, [r4, #16]
 800b5de:	464a      	mov	r2, r9
 800b5e0:	f7fd ff74 	bl	80094cc <memcpy>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	6126      	str	r6, [r4, #16]
 800b5f2:	6165      	str	r5, [r4, #20]
 800b5f4:	444e      	add	r6, r9
 800b5f6:	eba5 0509 	sub.w	r5, r5, r9
 800b5fa:	6026      	str	r6, [r4, #0]
 800b5fc:	60a5      	str	r5, [r4, #8]
 800b5fe:	463e      	mov	r6, r7
 800b600:	42be      	cmp	r6, r7
 800b602:	d900      	bls.n	800b606 <__ssputs_r+0x86>
 800b604:	463e      	mov	r6, r7
 800b606:	6820      	ldr	r0, [r4, #0]
 800b608:	4632      	mov	r2, r6
 800b60a:	4641      	mov	r1, r8
 800b60c:	f000 fd8a 	bl	800c124 <memmove>
 800b610:	68a3      	ldr	r3, [r4, #8]
 800b612:	1b9b      	subs	r3, r3, r6
 800b614:	60a3      	str	r3, [r4, #8]
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	4433      	add	r3, r6
 800b61a:	6023      	str	r3, [r4, #0]
 800b61c:	2000      	movs	r0, #0
 800b61e:	e7db      	b.n	800b5d8 <__ssputs_r+0x58>
 800b620:	462a      	mov	r2, r5
 800b622:	f000 fda5 	bl	800c170 <_realloc_r>
 800b626:	4606      	mov	r6, r0
 800b628:	2800      	cmp	r0, #0
 800b62a:	d1e1      	bne.n	800b5f0 <__ssputs_r+0x70>
 800b62c:	6921      	ldr	r1, [r4, #16]
 800b62e:	4650      	mov	r0, sl
 800b630:	f7ff fec6 	bl	800b3c0 <_free_r>
 800b634:	e7c7      	b.n	800b5c6 <__ssputs_r+0x46>
	...

0800b638 <_svfiprintf_r>:
 800b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	4698      	mov	r8, r3
 800b63e:	898b      	ldrh	r3, [r1, #12]
 800b640:	061b      	lsls	r3, r3, #24
 800b642:	b09d      	sub	sp, #116	; 0x74
 800b644:	4607      	mov	r7, r0
 800b646:	460d      	mov	r5, r1
 800b648:	4614      	mov	r4, r2
 800b64a:	d50e      	bpl.n	800b66a <_svfiprintf_r+0x32>
 800b64c:	690b      	ldr	r3, [r1, #16]
 800b64e:	b963      	cbnz	r3, 800b66a <_svfiprintf_r+0x32>
 800b650:	2140      	movs	r1, #64	; 0x40
 800b652:	f7ff ff21 	bl	800b498 <_malloc_r>
 800b656:	6028      	str	r0, [r5, #0]
 800b658:	6128      	str	r0, [r5, #16]
 800b65a:	b920      	cbnz	r0, 800b666 <_svfiprintf_r+0x2e>
 800b65c:	230c      	movs	r3, #12
 800b65e:	603b      	str	r3, [r7, #0]
 800b660:	f04f 30ff 	mov.w	r0, #4294967295
 800b664:	e0d1      	b.n	800b80a <_svfiprintf_r+0x1d2>
 800b666:	2340      	movs	r3, #64	; 0x40
 800b668:	616b      	str	r3, [r5, #20]
 800b66a:	2300      	movs	r3, #0
 800b66c:	9309      	str	r3, [sp, #36]	; 0x24
 800b66e:	2320      	movs	r3, #32
 800b670:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b674:	f8cd 800c 	str.w	r8, [sp, #12]
 800b678:	2330      	movs	r3, #48	; 0x30
 800b67a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b824 <_svfiprintf_r+0x1ec>
 800b67e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b682:	f04f 0901 	mov.w	r9, #1
 800b686:	4623      	mov	r3, r4
 800b688:	469a      	mov	sl, r3
 800b68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b68e:	b10a      	cbz	r2, 800b694 <_svfiprintf_r+0x5c>
 800b690:	2a25      	cmp	r2, #37	; 0x25
 800b692:	d1f9      	bne.n	800b688 <_svfiprintf_r+0x50>
 800b694:	ebba 0b04 	subs.w	fp, sl, r4
 800b698:	d00b      	beq.n	800b6b2 <_svfiprintf_r+0x7a>
 800b69a:	465b      	mov	r3, fp
 800b69c:	4622      	mov	r2, r4
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4638      	mov	r0, r7
 800b6a2:	f7ff ff6d 	bl	800b580 <__ssputs_r>
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	f000 80aa 	beq.w	800b800 <_svfiprintf_r+0x1c8>
 800b6ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6ae:	445a      	add	r2, fp
 800b6b0:	9209      	str	r2, [sp, #36]	; 0x24
 800b6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f000 80a2 	beq.w	800b800 <_svfiprintf_r+0x1c8>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6c6:	f10a 0a01 	add.w	sl, sl, #1
 800b6ca:	9304      	str	r3, [sp, #16]
 800b6cc:	9307      	str	r3, [sp, #28]
 800b6ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6d2:	931a      	str	r3, [sp, #104]	; 0x68
 800b6d4:	4654      	mov	r4, sl
 800b6d6:	2205      	movs	r2, #5
 800b6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6dc:	4851      	ldr	r0, [pc, #324]	; (800b824 <_svfiprintf_r+0x1ec>)
 800b6de:	f7f4 fd8f 	bl	8000200 <memchr>
 800b6e2:	9a04      	ldr	r2, [sp, #16]
 800b6e4:	b9d8      	cbnz	r0, 800b71e <_svfiprintf_r+0xe6>
 800b6e6:	06d0      	lsls	r0, r2, #27
 800b6e8:	bf44      	itt	mi
 800b6ea:	2320      	movmi	r3, #32
 800b6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6f0:	0711      	lsls	r1, r2, #28
 800b6f2:	bf44      	itt	mi
 800b6f4:	232b      	movmi	r3, #43	; 0x2b
 800b6f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b6fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b700:	d015      	beq.n	800b72e <_svfiprintf_r+0xf6>
 800b702:	9a07      	ldr	r2, [sp, #28]
 800b704:	4654      	mov	r4, sl
 800b706:	2000      	movs	r0, #0
 800b708:	f04f 0c0a 	mov.w	ip, #10
 800b70c:	4621      	mov	r1, r4
 800b70e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b712:	3b30      	subs	r3, #48	; 0x30
 800b714:	2b09      	cmp	r3, #9
 800b716:	d94e      	bls.n	800b7b6 <_svfiprintf_r+0x17e>
 800b718:	b1b0      	cbz	r0, 800b748 <_svfiprintf_r+0x110>
 800b71a:	9207      	str	r2, [sp, #28]
 800b71c:	e014      	b.n	800b748 <_svfiprintf_r+0x110>
 800b71e:	eba0 0308 	sub.w	r3, r0, r8
 800b722:	fa09 f303 	lsl.w	r3, r9, r3
 800b726:	4313      	orrs	r3, r2
 800b728:	9304      	str	r3, [sp, #16]
 800b72a:	46a2      	mov	sl, r4
 800b72c:	e7d2      	b.n	800b6d4 <_svfiprintf_r+0x9c>
 800b72e:	9b03      	ldr	r3, [sp, #12]
 800b730:	1d19      	adds	r1, r3, #4
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	9103      	str	r1, [sp, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	bfbb      	ittet	lt
 800b73a:	425b      	neglt	r3, r3
 800b73c:	f042 0202 	orrlt.w	r2, r2, #2
 800b740:	9307      	strge	r3, [sp, #28]
 800b742:	9307      	strlt	r3, [sp, #28]
 800b744:	bfb8      	it	lt
 800b746:	9204      	strlt	r2, [sp, #16]
 800b748:	7823      	ldrb	r3, [r4, #0]
 800b74a:	2b2e      	cmp	r3, #46	; 0x2e
 800b74c:	d10c      	bne.n	800b768 <_svfiprintf_r+0x130>
 800b74e:	7863      	ldrb	r3, [r4, #1]
 800b750:	2b2a      	cmp	r3, #42	; 0x2a
 800b752:	d135      	bne.n	800b7c0 <_svfiprintf_r+0x188>
 800b754:	9b03      	ldr	r3, [sp, #12]
 800b756:	1d1a      	adds	r2, r3, #4
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	9203      	str	r2, [sp, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	bfb8      	it	lt
 800b760:	f04f 33ff 	movlt.w	r3, #4294967295
 800b764:	3402      	adds	r4, #2
 800b766:	9305      	str	r3, [sp, #20]
 800b768:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b834 <_svfiprintf_r+0x1fc>
 800b76c:	7821      	ldrb	r1, [r4, #0]
 800b76e:	2203      	movs	r2, #3
 800b770:	4650      	mov	r0, sl
 800b772:	f7f4 fd45 	bl	8000200 <memchr>
 800b776:	b140      	cbz	r0, 800b78a <_svfiprintf_r+0x152>
 800b778:	2340      	movs	r3, #64	; 0x40
 800b77a:	eba0 000a 	sub.w	r0, r0, sl
 800b77e:	fa03 f000 	lsl.w	r0, r3, r0
 800b782:	9b04      	ldr	r3, [sp, #16]
 800b784:	4303      	orrs	r3, r0
 800b786:	3401      	adds	r4, #1
 800b788:	9304      	str	r3, [sp, #16]
 800b78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78e:	4826      	ldr	r0, [pc, #152]	; (800b828 <_svfiprintf_r+0x1f0>)
 800b790:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b794:	2206      	movs	r2, #6
 800b796:	f7f4 fd33 	bl	8000200 <memchr>
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d038      	beq.n	800b810 <_svfiprintf_r+0x1d8>
 800b79e:	4b23      	ldr	r3, [pc, #140]	; (800b82c <_svfiprintf_r+0x1f4>)
 800b7a0:	bb1b      	cbnz	r3, 800b7ea <_svfiprintf_r+0x1b2>
 800b7a2:	9b03      	ldr	r3, [sp, #12]
 800b7a4:	3307      	adds	r3, #7
 800b7a6:	f023 0307 	bic.w	r3, r3, #7
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	9303      	str	r3, [sp, #12]
 800b7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b0:	4433      	add	r3, r6
 800b7b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b4:	e767      	b.n	800b686 <_svfiprintf_r+0x4e>
 800b7b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	2001      	movs	r0, #1
 800b7be:	e7a5      	b.n	800b70c <_svfiprintf_r+0xd4>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	3401      	adds	r4, #1
 800b7c4:	9305      	str	r3, [sp, #20]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	f04f 0c0a 	mov.w	ip, #10
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7d2:	3a30      	subs	r2, #48	; 0x30
 800b7d4:	2a09      	cmp	r2, #9
 800b7d6:	d903      	bls.n	800b7e0 <_svfiprintf_r+0x1a8>
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0c5      	beq.n	800b768 <_svfiprintf_r+0x130>
 800b7dc:	9105      	str	r1, [sp, #20]
 800b7de:	e7c3      	b.n	800b768 <_svfiprintf_r+0x130>
 800b7e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e7f0      	b.n	800b7cc <_svfiprintf_r+0x194>
 800b7ea:	ab03      	add	r3, sp, #12
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	462a      	mov	r2, r5
 800b7f0:	4b0f      	ldr	r3, [pc, #60]	; (800b830 <_svfiprintf_r+0x1f8>)
 800b7f2:	a904      	add	r1, sp, #16
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	f7fd ff1f 	bl	8009638 <_printf_float>
 800b7fa:	1c42      	adds	r2, r0, #1
 800b7fc:	4606      	mov	r6, r0
 800b7fe:	d1d6      	bne.n	800b7ae <_svfiprintf_r+0x176>
 800b800:	89ab      	ldrh	r3, [r5, #12]
 800b802:	065b      	lsls	r3, r3, #25
 800b804:	f53f af2c 	bmi.w	800b660 <_svfiprintf_r+0x28>
 800b808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b80a:	b01d      	add	sp, #116	; 0x74
 800b80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b810:	ab03      	add	r3, sp, #12
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	462a      	mov	r2, r5
 800b816:	4b06      	ldr	r3, [pc, #24]	; (800b830 <_svfiprintf_r+0x1f8>)
 800b818:	a904      	add	r1, sp, #16
 800b81a:	4638      	mov	r0, r7
 800b81c:	f7fe f9b0 	bl	8009b80 <_printf_i>
 800b820:	e7eb      	b.n	800b7fa <_svfiprintf_r+0x1c2>
 800b822:	bf00      	nop
 800b824:	08030bbc 	.word	0x08030bbc
 800b828:	08030bc6 	.word	0x08030bc6
 800b82c:	08009639 	.word	0x08009639
 800b830:	0800b581 	.word	0x0800b581
 800b834:	08030bc2 	.word	0x08030bc2

0800b838 <__sfputc_r>:
 800b838:	6893      	ldr	r3, [r2, #8]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	b410      	push	{r4}
 800b840:	6093      	str	r3, [r2, #8]
 800b842:	da08      	bge.n	800b856 <__sfputc_r+0x1e>
 800b844:	6994      	ldr	r4, [r2, #24]
 800b846:	42a3      	cmp	r3, r4
 800b848:	db01      	blt.n	800b84e <__sfputc_r+0x16>
 800b84a:	290a      	cmp	r1, #10
 800b84c:	d103      	bne.n	800b856 <__sfputc_r+0x1e>
 800b84e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b852:	f000 b96d 	b.w	800bb30 <__swbuf_r>
 800b856:	6813      	ldr	r3, [r2, #0]
 800b858:	1c58      	adds	r0, r3, #1
 800b85a:	6010      	str	r0, [r2, #0]
 800b85c:	7019      	strb	r1, [r3, #0]
 800b85e:	4608      	mov	r0, r1
 800b860:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <__sfputs_r>:
 800b866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b868:	4606      	mov	r6, r0
 800b86a:	460f      	mov	r7, r1
 800b86c:	4614      	mov	r4, r2
 800b86e:	18d5      	adds	r5, r2, r3
 800b870:	42ac      	cmp	r4, r5
 800b872:	d101      	bne.n	800b878 <__sfputs_r+0x12>
 800b874:	2000      	movs	r0, #0
 800b876:	e007      	b.n	800b888 <__sfputs_r+0x22>
 800b878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87c:	463a      	mov	r2, r7
 800b87e:	4630      	mov	r0, r6
 800b880:	f7ff ffda 	bl	800b838 <__sfputc_r>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d1f3      	bne.n	800b870 <__sfputs_r+0xa>
 800b888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b88c <_vfiprintf_r>:
 800b88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b890:	460d      	mov	r5, r1
 800b892:	b09d      	sub	sp, #116	; 0x74
 800b894:	4614      	mov	r4, r2
 800b896:	4698      	mov	r8, r3
 800b898:	4606      	mov	r6, r0
 800b89a:	b118      	cbz	r0, 800b8a4 <_vfiprintf_r+0x18>
 800b89c:	6983      	ldr	r3, [r0, #24]
 800b89e:	b90b      	cbnz	r3, 800b8a4 <_vfiprintf_r+0x18>
 800b8a0:	f000 fb28 	bl	800bef4 <__sinit>
 800b8a4:	4b89      	ldr	r3, [pc, #548]	; (800bacc <_vfiprintf_r+0x240>)
 800b8a6:	429d      	cmp	r5, r3
 800b8a8:	d11b      	bne.n	800b8e2 <_vfiprintf_r+0x56>
 800b8aa:	6875      	ldr	r5, [r6, #4]
 800b8ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ae:	07d9      	lsls	r1, r3, #31
 800b8b0:	d405      	bmi.n	800b8be <_vfiprintf_r+0x32>
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	059a      	lsls	r2, r3, #22
 800b8b6:	d402      	bmi.n	800b8be <_vfiprintf_r+0x32>
 800b8b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ba:	f000 fbb9 	bl	800c030 <__retarget_lock_acquire_recursive>
 800b8be:	89ab      	ldrh	r3, [r5, #12]
 800b8c0:	071b      	lsls	r3, r3, #28
 800b8c2:	d501      	bpl.n	800b8c8 <_vfiprintf_r+0x3c>
 800b8c4:	692b      	ldr	r3, [r5, #16]
 800b8c6:	b9eb      	cbnz	r3, 800b904 <_vfiprintf_r+0x78>
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f000 f982 	bl	800bbd4 <__swsetup_r>
 800b8d0:	b1c0      	cbz	r0, 800b904 <_vfiprintf_r+0x78>
 800b8d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8d4:	07dc      	lsls	r4, r3, #31
 800b8d6:	d50e      	bpl.n	800b8f6 <_vfiprintf_r+0x6a>
 800b8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8dc:	b01d      	add	sp, #116	; 0x74
 800b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e2:	4b7b      	ldr	r3, [pc, #492]	; (800bad0 <_vfiprintf_r+0x244>)
 800b8e4:	429d      	cmp	r5, r3
 800b8e6:	d101      	bne.n	800b8ec <_vfiprintf_r+0x60>
 800b8e8:	68b5      	ldr	r5, [r6, #8]
 800b8ea:	e7df      	b.n	800b8ac <_vfiprintf_r+0x20>
 800b8ec:	4b79      	ldr	r3, [pc, #484]	; (800bad4 <_vfiprintf_r+0x248>)
 800b8ee:	429d      	cmp	r5, r3
 800b8f0:	bf08      	it	eq
 800b8f2:	68f5      	ldreq	r5, [r6, #12]
 800b8f4:	e7da      	b.n	800b8ac <_vfiprintf_r+0x20>
 800b8f6:	89ab      	ldrh	r3, [r5, #12]
 800b8f8:	0598      	lsls	r0, r3, #22
 800b8fa:	d4ed      	bmi.n	800b8d8 <_vfiprintf_r+0x4c>
 800b8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8fe:	f000 fb98 	bl	800c032 <__retarget_lock_release_recursive>
 800b902:	e7e9      	b.n	800b8d8 <_vfiprintf_r+0x4c>
 800b904:	2300      	movs	r3, #0
 800b906:	9309      	str	r3, [sp, #36]	; 0x24
 800b908:	2320      	movs	r3, #32
 800b90a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b90e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b912:	2330      	movs	r3, #48	; 0x30
 800b914:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bad8 <_vfiprintf_r+0x24c>
 800b918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b91c:	f04f 0901 	mov.w	r9, #1
 800b920:	4623      	mov	r3, r4
 800b922:	469a      	mov	sl, r3
 800b924:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b928:	b10a      	cbz	r2, 800b92e <_vfiprintf_r+0xa2>
 800b92a:	2a25      	cmp	r2, #37	; 0x25
 800b92c:	d1f9      	bne.n	800b922 <_vfiprintf_r+0x96>
 800b92e:	ebba 0b04 	subs.w	fp, sl, r4
 800b932:	d00b      	beq.n	800b94c <_vfiprintf_r+0xc0>
 800b934:	465b      	mov	r3, fp
 800b936:	4622      	mov	r2, r4
 800b938:	4629      	mov	r1, r5
 800b93a:	4630      	mov	r0, r6
 800b93c:	f7ff ff93 	bl	800b866 <__sfputs_r>
 800b940:	3001      	adds	r0, #1
 800b942:	f000 80aa 	beq.w	800ba9a <_vfiprintf_r+0x20e>
 800b946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b948:	445a      	add	r2, fp
 800b94a:	9209      	str	r2, [sp, #36]	; 0x24
 800b94c:	f89a 3000 	ldrb.w	r3, [sl]
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 80a2 	beq.w	800ba9a <_vfiprintf_r+0x20e>
 800b956:	2300      	movs	r3, #0
 800b958:	f04f 32ff 	mov.w	r2, #4294967295
 800b95c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b960:	f10a 0a01 	add.w	sl, sl, #1
 800b964:	9304      	str	r3, [sp, #16]
 800b966:	9307      	str	r3, [sp, #28]
 800b968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b96c:	931a      	str	r3, [sp, #104]	; 0x68
 800b96e:	4654      	mov	r4, sl
 800b970:	2205      	movs	r2, #5
 800b972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b976:	4858      	ldr	r0, [pc, #352]	; (800bad8 <_vfiprintf_r+0x24c>)
 800b978:	f7f4 fc42 	bl	8000200 <memchr>
 800b97c:	9a04      	ldr	r2, [sp, #16]
 800b97e:	b9d8      	cbnz	r0, 800b9b8 <_vfiprintf_r+0x12c>
 800b980:	06d1      	lsls	r1, r2, #27
 800b982:	bf44      	itt	mi
 800b984:	2320      	movmi	r3, #32
 800b986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b98a:	0713      	lsls	r3, r2, #28
 800b98c:	bf44      	itt	mi
 800b98e:	232b      	movmi	r3, #43	; 0x2b
 800b990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b994:	f89a 3000 	ldrb.w	r3, [sl]
 800b998:	2b2a      	cmp	r3, #42	; 0x2a
 800b99a:	d015      	beq.n	800b9c8 <_vfiprintf_r+0x13c>
 800b99c:	9a07      	ldr	r2, [sp, #28]
 800b99e:	4654      	mov	r4, sl
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	f04f 0c0a 	mov.w	ip, #10
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ac:	3b30      	subs	r3, #48	; 0x30
 800b9ae:	2b09      	cmp	r3, #9
 800b9b0:	d94e      	bls.n	800ba50 <_vfiprintf_r+0x1c4>
 800b9b2:	b1b0      	cbz	r0, 800b9e2 <_vfiprintf_r+0x156>
 800b9b4:	9207      	str	r2, [sp, #28]
 800b9b6:	e014      	b.n	800b9e2 <_vfiprintf_r+0x156>
 800b9b8:	eba0 0308 	sub.w	r3, r0, r8
 800b9bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	9304      	str	r3, [sp, #16]
 800b9c4:	46a2      	mov	sl, r4
 800b9c6:	e7d2      	b.n	800b96e <_vfiprintf_r+0xe2>
 800b9c8:	9b03      	ldr	r3, [sp, #12]
 800b9ca:	1d19      	adds	r1, r3, #4
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	9103      	str	r1, [sp, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bfbb      	ittet	lt
 800b9d4:	425b      	neglt	r3, r3
 800b9d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b9da:	9307      	strge	r3, [sp, #28]
 800b9dc:	9307      	strlt	r3, [sp, #28]
 800b9de:	bfb8      	it	lt
 800b9e0:	9204      	strlt	r2, [sp, #16]
 800b9e2:	7823      	ldrb	r3, [r4, #0]
 800b9e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b9e6:	d10c      	bne.n	800ba02 <_vfiprintf_r+0x176>
 800b9e8:	7863      	ldrb	r3, [r4, #1]
 800b9ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ec:	d135      	bne.n	800ba5a <_vfiprintf_r+0x1ce>
 800b9ee:	9b03      	ldr	r3, [sp, #12]
 800b9f0:	1d1a      	adds	r2, r3, #4
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	9203      	str	r2, [sp, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	bfb8      	it	lt
 800b9fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9fe:	3402      	adds	r4, #2
 800ba00:	9305      	str	r3, [sp, #20]
 800ba02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bae8 <_vfiprintf_r+0x25c>
 800ba06:	7821      	ldrb	r1, [r4, #0]
 800ba08:	2203      	movs	r2, #3
 800ba0a:	4650      	mov	r0, sl
 800ba0c:	f7f4 fbf8 	bl	8000200 <memchr>
 800ba10:	b140      	cbz	r0, 800ba24 <_vfiprintf_r+0x198>
 800ba12:	2340      	movs	r3, #64	; 0x40
 800ba14:	eba0 000a 	sub.w	r0, r0, sl
 800ba18:	fa03 f000 	lsl.w	r0, r3, r0
 800ba1c:	9b04      	ldr	r3, [sp, #16]
 800ba1e:	4303      	orrs	r3, r0
 800ba20:	3401      	adds	r4, #1
 800ba22:	9304      	str	r3, [sp, #16]
 800ba24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba28:	482c      	ldr	r0, [pc, #176]	; (800badc <_vfiprintf_r+0x250>)
 800ba2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba2e:	2206      	movs	r2, #6
 800ba30:	f7f4 fbe6 	bl	8000200 <memchr>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d03f      	beq.n	800bab8 <_vfiprintf_r+0x22c>
 800ba38:	4b29      	ldr	r3, [pc, #164]	; (800bae0 <_vfiprintf_r+0x254>)
 800ba3a:	bb1b      	cbnz	r3, 800ba84 <_vfiprintf_r+0x1f8>
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	3307      	adds	r3, #7
 800ba40:	f023 0307 	bic.w	r3, r3, #7
 800ba44:	3308      	adds	r3, #8
 800ba46:	9303      	str	r3, [sp, #12]
 800ba48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba4a:	443b      	add	r3, r7
 800ba4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba4e:	e767      	b.n	800b920 <_vfiprintf_r+0x94>
 800ba50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba54:	460c      	mov	r4, r1
 800ba56:	2001      	movs	r0, #1
 800ba58:	e7a5      	b.n	800b9a6 <_vfiprintf_r+0x11a>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	3401      	adds	r4, #1
 800ba5e:	9305      	str	r3, [sp, #20]
 800ba60:	4619      	mov	r1, r3
 800ba62:	f04f 0c0a 	mov.w	ip, #10
 800ba66:	4620      	mov	r0, r4
 800ba68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba6c:	3a30      	subs	r2, #48	; 0x30
 800ba6e:	2a09      	cmp	r2, #9
 800ba70:	d903      	bls.n	800ba7a <_vfiprintf_r+0x1ee>
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d0c5      	beq.n	800ba02 <_vfiprintf_r+0x176>
 800ba76:	9105      	str	r1, [sp, #20]
 800ba78:	e7c3      	b.n	800ba02 <_vfiprintf_r+0x176>
 800ba7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba7e:	4604      	mov	r4, r0
 800ba80:	2301      	movs	r3, #1
 800ba82:	e7f0      	b.n	800ba66 <_vfiprintf_r+0x1da>
 800ba84:	ab03      	add	r3, sp, #12
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	462a      	mov	r2, r5
 800ba8a:	4b16      	ldr	r3, [pc, #88]	; (800bae4 <_vfiprintf_r+0x258>)
 800ba8c:	a904      	add	r1, sp, #16
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f7fd fdd2 	bl	8009638 <_printf_float>
 800ba94:	4607      	mov	r7, r0
 800ba96:	1c78      	adds	r0, r7, #1
 800ba98:	d1d6      	bne.n	800ba48 <_vfiprintf_r+0x1bc>
 800ba9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba9c:	07d9      	lsls	r1, r3, #31
 800ba9e:	d405      	bmi.n	800baac <_vfiprintf_r+0x220>
 800baa0:	89ab      	ldrh	r3, [r5, #12]
 800baa2:	059a      	lsls	r2, r3, #22
 800baa4:	d402      	bmi.n	800baac <_vfiprintf_r+0x220>
 800baa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baa8:	f000 fac3 	bl	800c032 <__retarget_lock_release_recursive>
 800baac:	89ab      	ldrh	r3, [r5, #12]
 800baae:	065b      	lsls	r3, r3, #25
 800bab0:	f53f af12 	bmi.w	800b8d8 <_vfiprintf_r+0x4c>
 800bab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bab6:	e711      	b.n	800b8dc <_vfiprintf_r+0x50>
 800bab8:	ab03      	add	r3, sp, #12
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	462a      	mov	r2, r5
 800babe:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <_vfiprintf_r+0x258>)
 800bac0:	a904      	add	r1, sp, #16
 800bac2:	4630      	mov	r0, r6
 800bac4:	f7fe f85c 	bl	8009b80 <_printf_i>
 800bac8:	e7e4      	b.n	800ba94 <_vfiprintf_r+0x208>
 800baca:	bf00      	nop
 800bacc:	08030cf0 	.word	0x08030cf0
 800bad0:	08030d10 	.word	0x08030d10
 800bad4:	08030cd0 	.word	0x08030cd0
 800bad8:	08030bbc 	.word	0x08030bbc
 800badc:	08030bc6 	.word	0x08030bc6
 800bae0:	08009639 	.word	0x08009639
 800bae4:	0800b867 	.word	0x0800b867
 800bae8:	08030bc2 	.word	0x08030bc2

0800baec <_read_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	4d07      	ldr	r5, [pc, #28]	; (800bb0c <_read_r+0x20>)
 800baf0:	4604      	mov	r4, r0
 800baf2:	4608      	mov	r0, r1
 800baf4:	4611      	mov	r1, r2
 800baf6:	2200      	movs	r2, #0
 800baf8:	602a      	str	r2, [r5, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	f7f7 f828 	bl	8002b50 <_read>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_read_r+0x1e>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_read_r+0x1e>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	200035f0 	.word	0x200035f0

0800bb10 <_sbrk_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	4d06      	ldr	r5, [pc, #24]	; (800bb2c <_sbrk_r+0x1c>)
 800bb14:	2300      	movs	r3, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	602b      	str	r3, [r5, #0]
 800bb1c:	f7f7 f886 	bl	8002c2c <_sbrk>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	d102      	bne.n	800bb2a <_sbrk_r+0x1a>
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	b103      	cbz	r3, 800bb2a <_sbrk_r+0x1a>
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	bd38      	pop	{r3, r4, r5, pc}
 800bb2c:	200035f0 	.word	0x200035f0

0800bb30 <__swbuf_r>:
 800bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb32:	460e      	mov	r6, r1
 800bb34:	4614      	mov	r4, r2
 800bb36:	4605      	mov	r5, r0
 800bb38:	b118      	cbz	r0, 800bb42 <__swbuf_r+0x12>
 800bb3a:	6983      	ldr	r3, [r0, #24]
 800bb3c:	b90b      	cbnz	r3, 800bb42 <__swbuf_r+0x12>
 800bb3e:	f000 f9d9 	bl	800bef4 <__sinit>
 800bb42:	4b21      	ldr	r3, [pc, #132]	; (800bbc8 <__swbuf_r+0x98>)
 800bb44:	429c      	cmp	r4, r3
 800bb46:	d12b      	bne.n	800bba0 <__swbuf_r+0x70>
 800bb48:	686c      	ldr	r4, [r5, #4]
 800bb4a:	69a3      	ldr	r3, [r4, #24]
 800bb4c:	60a3      	str	r3, [r4, #8]
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	071a      	lsls	r2, r3, #28
 800bb52:	d52f      	bpl.n	800bbb4 <__swbuf_r+0x84>
 800bb54:	6923      	ldr	r3, [r4, #16]
 800bb56:	b36b      	cbz	r3, 800bbb4 <__swbuf_r+0x84>
 800bb58:	6923      	ldr	r3, [r4, #16]
 800bb5a:	6820      	ldr	r0, [r4, #0]
 800bb5c:	1ac0      	subs	r0, r0, r3
 800bb5e:	6963      	ldr	r3, [r4, #20]
 800bb60:	b2f6      	uxtb	r6, r6
 800bb62:	4283      	cmp	r3, r0
 800bb64:	4637      	mov	r7, r6
 800bb66:	dc04      	bgt.n	800bb72 <__swbuf_r+0x42>
 800bb68:	4621      	mov	r1, r4
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f000 f92e 	bl	800bdcc <_fflush_r>
 800bb70:	bb30      	cbnz	r0, 800bbc0 <__swbuf_r+0x90>
 800bb72:	68a3      	ldr	r3, [r4, #8]
 800bb74:	3b01      	subs	r3, #1
 800bb76:	60a3      	str	r3, [r4, #8]
 800bb78:	6823      	ldr	r3, [r4, #0]
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	6022      	str	r2, [r4, #0]
 800bb7e:	701e      	strb	r6, [r3, #0]
 800bb80:	6963      	ldr	r3, [r4, #20]
 800bb82:	3001      	adds	r0, #1
 800bb84:	4283      	cmp	r3, r0
 800bb86:	d004      	beq.n	800bb92 <__swbuf_r+0x62>
 800bb88:	89a3      	ldrh	r3, [r4, #12]
 800bb8a:	07db      	lsls	r3, r3, #31
 800bb8c:	d506      	bpl.n	800bb9c <__swbuf_r+0x6c>
 800bb8e:	2e0a      	cmp	r6, #10
 800bb90:	d104      	bne.n	800bb9c <__swbuf_r+0x6c>
 800bb92:	4621      	mov	r1, r4
 800bb94:	4628      	mov	r0, r5
 800bb96:	f000 f919 	bl	800bdcc <_fflush_r>
 800bb9a:	b988      	cbnz	r0, 800bbc0 <__swbuf_r+0x90>
 800bb9c:	4638      	mov	r0, r7
 800bb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba0:	4b0a      	ldr	r3, [pc, #40]	; (800bbcc <__swbuf_r+0x9c>)
 800bba2:	429c      	cmp	r4, r3
 800bba4:	d101      	bne.n	800bbaa <__swbuf_r+0x7a>
 800bba6:	68ac      	ldr	r4, [r5, #8]
 800bba8:	e7cf      	b.n	800bb4a <__swbuf_r+0x1a>
 800bbaa:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <__swbuf_r+0xa0>)
 800bbac:	429c      	cmp	r4, r3
 800bbae:	bf08      	it	eq
 800bbb0:	68ec      	ldreq	r4, [r5, #12]
 800bbb2:	e7ca      	b.n	800bb4a <__swbuf_r+0x1a>
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f000 f80c 	bl	800bbd4 <__swsetup_r>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d0cb      	beq.n	800bb58 <__swbuf_r+0x28>
 800bbc0:	f04f 37ff 	mov.w	r7, #4294967295
 800bbc4:	e7ea      	b.n	800bb9c <__swbuf_r+0x6c>
 800bbc6:	bf00      	nop
 800bbc8:	08030cf0 	.word	0x08030cf0
 800bbcc:	08030d10 	.word	0x08030d10
 800bbd0:	08030cd0 	.word	0x08030cd0

0800bbd4 <__swsetup_r>:
 800bbd4:	4b32      	ldr	r3, [pc, #200]	; (800bca0 <__swsetup_r+0xcc>)
 800bbd6:	b570      	push	{r4, r5, r6, lr}
 800bbd8:	681d      	ldr	r5, [r3, #0]
 800bbda:	4606      	mov	r6, r0
 800bbdc:	460c      	mov	r4, r1
 800bbde:	b125      	cbz	r5, 800bbea <__swsetup_r+0x16>
 800bbe0:	69ab      	ldr	r3, [r5, #24]
 800bbe2:	b913      	cbnz	r3, 800bbea <__swsetup_r+0x16>
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	f000 f985 	bl	800bef4 <__sinit>
 800bbea:	4b2e      	ldr	r3, [pc, #184]	; (800bca4 <__swsetup_r+0xd0>)
 800bbec:	429c      	cmp	r4, r3
 800bbee:	d10f      	bne.n	800bc10 <__swsetup_r+0x3c>
 800bbf0:	686c      	ldr	r4, [r5, #4]
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbf8:	0719      	lsls	r1, r3, #28
 800bbfa:	d42c      	bmi.n	800bc56 <__swsetup_r+0x82>
 800bbfc:	06dd      	lsls	r5, r3, #27
 800bbfe:	d411      	bmi.n	800bc24 <__swsetup_r+0x50>
 800bc00:	2309      	movs	r3, #9
 800bc02:	6033      	str	r3, [r6, #0]
 800bc04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc08:	81a3      	strh	r3, [r4, #12]
 800bc0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0e:	e03e      	b.n	800bc8e <__swsetup_r+0xba>
 800bc10:	4b25      	ldr	r3, [pc, #148]	; (800bca8 <__swsetup_r+0xd4>)
 800bc12:	429c      	cmp	r4, r3
 800bc14:	d101      	bne.n	800bc1a <__swsetup_r+0x46>
 800bc16:	68ac      	ldr	r4, [r5, #8]
 800bc18:	e7eb      	b.n	800bbf2 <__swsetup_r+0x1e>
 800bc1a:	4b24      	ldr	r3, [pc, #144]	; (800bcac <__swsetup_r+0xd8>)
 800bc1c:	429c      	cmp	r4, r3
 800bc1e:	bf08      	it	eq
 800bc20:	68ec      	ldreq	r4, [r5, #12]
 800bc22:	e7e6      	b.n	800bbf2 <__swsetup_r+0x1e>
 800bc24:	0758      	lsls	r0, r3, #29
 800bc26:	d512      	bpl.n	800bc4e <__swsetup_r+0x7a>
 800bc28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc2a:	b141      	cbz	r1, 800bc3e <__swsetup_r+0x6a>
 800bc2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc30:	4299      	cmp	r1, r3
 800bc32:	d002      	beq.n	800bc3a <__swsetup_r+0x66>
 800bc34:	4630      	mov	r0, r6
 800bc36:	f7ff fbc3 	bl	800b3c0 <_free_r>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	6363      	str	r3, [r4, #52]	; 0x34
 800bc3e:	89a3      	ldrh	r3, [r4, #12]
 800bc40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc44:	81a3      	strh	r3, [r4, #12]
 800bc46:	2300      	movs	r3, #0
 800bc48:	6063      	str	r3, [r4, #4]
 800bc4a:	6923      	ldr	r3, [r4, #16]
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	89a3      	ldrh	r3, [r4, #12]
 800bc50:	f043 0308 	orr.w	r3, r3, #8
 800bc54:	81a3      	strh	r3, [r4, #12]
 800bc56:	6923      	ldr	r3, [r4, #16]
 800bc58:	b94b      	cbnz	r3, 800bc6e <__swsetup_r+0x9a>
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc64:	d003      	beq.n	800bc6e <__swsetup_r+0x9a>
 800bc66:	4621      	mov	r1, r4
 800bc68:	4630      	mov	r0, r6
 800bc6a:	f000 fa09 	bl	800c080 <__smakebuf_r>
 800bc6e:	89a0      	ldrh	r0, [r4, #12]
 800bc70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc74:	f010 0301 	ands.w	r3, r0, #1
 800bc78:	d00a      	beq.n	800bc90 <__swsetup_r+0xbc>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	60a3      	str	r3, [r4, #8]
 800bc7e:	6963      	ldr	r3, [r4, #20]
 800bc80:	425b      	negs	r3, r3
 800bc82:	61a3      	str	r3, [r4, #24]
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	b943      	cbnz	r3, 800bc9a <__swsetup_r+0xc6>
 800bc88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc8c:	d1ba      	bne.n	800bc04 <__swsetup_r+0x30>
 800bc8e:	bd70      	pop	{r4, r5, r6, pc}
 800bc90:	0781      	lsls	r1, r0, #30
 800bc92:	bf58      	it	pl
 800bc94:	6963      	ldrpl	r3, [r4, #20]
 800bc96:	60a3      	str	r3, [r4, #8]
 800bc98:	e7f4      	b.n	800bc84 <__swsetup_r+0xb0>
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	e7f7      	b.n	800bc8e <__swsetup_r+0xba>
 800bc9e:	bf00      	nop
 800bca0:	20000188 	.word	0x20000188
 800bca4:	08030cf0 	.word	0x08030cf0
 800bca8:	08030d10 	.word	0x08030d10
 800bcac:	08030cd0 	.word	0x08030cd0

0800bcb0 <abort>:
 800bcb0:	b508      	push	{r3, lr}
 800bcb2:	2006      	movs	r0, #6
 800bcb4:	f000 fab4 	bl	800c220 <raise>
 800bcb8:	2001      	movs	r0, #1
 800bcba:	f7f6 ff3f 	bl	8002b3c <_exit>
	...

0800bcc0 <__sflush_r>:
 800bcc0:	898a      	ldrh	r2, [r1, #12]
 800bcc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc6:	4605      	mov	r5, r0
 800bcc8:	0710      	lsls	r0, r2, #28
 800bcca:	460c      	mov	r4, r1
 800bccc:	d458      	bmi.n	800bd80 <__sflush_r+0xc0>
 800bcce:	684b      	ldr	r3, [r1, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	dc05      	bgt.n	800bce0 <__sflush_r+0x20>
 800bcd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	dc02      	bgt.n	800bce0 <__sflush_r+0x20>
 800bcda:	2000      	movs	r0, #0
 800bcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bce2:	2e00      	cmp	r6, #0
 800bce4:	d0f9      	beq.n	800bcda <__sflush_r+0x1a>
 800bce6:	2300      	movs	r3, #0
 800bce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcec:	682f      	ldr	r7, [r5, #0]
 800bcee:	602b      	str	r3, [r5, #0]
 800bcf0:	d032      	beq.n	800bd58 <__sflush_r+0x98>
 800bcf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	075a      	lsls	r2, r3, #29
 800bcf8:	d505      	bpl.n	800bd06 <__sflush_r+0x46>
 800bcfa:	6863      	ldr	r3, [r4, #4]
 800bcfc:	1ac0      	subs	r0, r0, r3
 800bcfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd00:	b10b      	cbz	r3, 800bd06 <__sflush_r+0x46>
 800bd02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd04:	1ac0      	subs	r0, r0, r3
 800bd06:	2300      	movs	r3, #0
 800bd08:	4602      	mov	r2, r0
 800bd0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd0c:	6a21      	ldr	r1, [r4, #32]
 800bd0e:	4628      	mov	r0, r5
 800bd10:	47b0      	blx	r6
 800bd12:	1c43      	adds	r3, r0, #1
 800bd14:	89a3      	ldrh	r3, [r4, #12]
 800bd16:	d106      	bne.n	800bd26 <__sflush_r+0x66>
 800bd18:	6829      	ldr	r1, [r5, #0]
 800bd1a:	291d      	cmp	r1, #29
 800bd1c:	d82c      	bhi.n	800bd78 <__sflush_r+0xb8>
 800bd1e:	4a2a      	ldr	r2, [pc, #168]	; (800bdc8 <__sflush_r+0x108>)
 800bd20:	40ca      	lsrs	r2, r1
 800bd22:	07d6      	lsls	r6, r2, #31
 800bd24:	d528      	bpl.n	800bd78 <__sflush_r+0xb8>
 800bd26:	2200      	movs	r2, #0
 800bd28:	6062      	str	r2, [r4, #4]
 800bd2a:	04d9      	lsls	r1, r3, #19
 800bd2c:	6922      	ldr	r2, [r4, #16]
 800bd2e:	6022      	str	r2, [r4, #0]
 800bd30:	d504      	bpl.n	800bd3c <__sflush_r+0x7c>
 800bd32:	1c42      	adds	r2, r0, #1
 800bd34:	d101      	bne.n	800bd3a <__sflush_r+0x7a>
 800bd36:	682b      	ldr	r3, [r5, #0]
 800bd38:	b903      	cbnz	r3, 800bd3c <__sflush_r+0x7c>
 800bd3a:	6560      	str	r0, [r4, #84]	; 0x54
 800bd3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd3e:	602f      	str	r7, [r5, #0]
 800bd40:	2900      	cmp	r1, #0
 800bd42:	d0ca      	beq.n	800bcda <__sflush_r+0x1a>
 800bd44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd48:	4299      	cmp	r1, r3
 800bd4a:	d002      	beq.n	800bd52 <__sflush_r+0x92>
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	f7ff fb37 	bl	800b3c0 <_free_r>
 800bd52:	2000      	movs	r0, #0
 800bd54:	6360      	str	r0, [r4, #52]	; 0x34
 800bd56:	e7c1      	b.n	800bcdc <__sflush_r+0x1c>
 800bd58:	6a21      	ldr	r1, [r4, #32]
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	47b0      	blx	r6
 800bd60:	1c41      	adds	r1, r0, #1
 800bd62:	d1c7      	bne.n	800bcf4 <__sflush_r+0x34>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d0c4      	beq.n	800bcf4 <__sflush_r+0x34>
 800bd6a:	2b1d      	cmp	r3, #29
 800bd6c:	d001      	beq.n	800bd72 <__sflush_r+0xb2>
 800bd6e:	2b16      	cmp	r3, #22
 800bd70:	d101      	bne.n	800bd76 <__sflush_r+0xb6>
 800bd72:	602f      	str	r7, [r5, #0]
 800bd74:	e7b1      	b.n	800bcda <__sflush_r+0x1a>
 800bd76:	89a3      	ldrh	r3, [r4, #12]
 800bd78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd7c:	81a3      	strh	r3, [r4, #12]
 800bd7e:	e7ad      	b.n	800bcdc <__sflush_r+0x1c>
 800bd80:	690f      	ldr	r7, [r1, #16]
 800bd82:	2f00      	cmp	r7, #0
 800bd84:	d0a9      	beq.n	800bcda <__sflush_r+0x1a>
 800bd86:	0793      	lsls	r3, r2, #30
 800bd88:	680e      	ldr	r6, [r1, #0]
 800bd8a:	bf08      	it	eq
 800bd8c:	694b      	ldreq	r3, [r1, #20]
 800bd8e:	600f      	str	r7, [r1, #0]
 800bd90:	bf18      	it	ne
 800bd92:	2300      	movne	r3, #0
 800bd94:	eba6 0807 	sub.w	r8, r6, r7
 800bd98:	608b      	str	r3, [r1, #8]
 800bd9a:	f1b8 0f00 	cmp.w	r8, #0
 800bd9e:	dd9c      	ble.n	800bcda <__sflush_r+0x1a>
 800bda0:	6a21      	ldr	r1, [r4, #32]
 800bda2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bda4:	4643      	mov	r3, r8
 800bda6:	463a      	mov	r2, r7
 800bda8:	4628      	mov	r0, r5
 800bdaa:	47b0      	blx	r6
 800bdac:	2800      	cmp	r0, #0
 800bdae:	dc06      	bgt.n	800bdbe <__sflush_r+0xfe>
 800bdb0:	89a3      	ldrh	r3, [r4, #12]
 800bdb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb6:	81a3      	strh	r3, [r4, #12]
 800bdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbc:	e78e      	b.n	800bcdc <__sflush_r+0x1c>
 800bdbe:	4407      	add	r7, r0
 800bdc0:	eba8 0800 	sub.w	r8, r8, r0
 800bdc4:	e7e9      	b.n	800bd9a <__sflush_r+0xda>
 800bdc6:	bf00      	nop
 800bdc8:	20400001 	.word	0x20400001

0800bdcc <_fflush_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	690b      	ldr	r3, [r1, #16]
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	b913      	cbnz	r3, 800bddc <_fflush_r+0x10>
 800bdd6:	2500      	movs	r5, #0
 800bdd8:	4628      	mov	r0, r5
 800bdda:	bd38      	pop	{r3, r4, r5, pc}
 800bddc:	b118      	cbz	r0, 800bde6 <_fflush_r+0x1a>
 800bdde:	6983      	ldr	r3, [r0, #24]
 800bde0:	b90b      	cbnz	r3, 800bde6 <_fflush_r+0x1a>
 800bde2:	f000 f887 	bl	800bef4 <__sinit>
 800bde6:	4b14      	ldr	r3, [pc, #80]	; (800be38 <_fflush_r+0x6c>)
 800bde8:	429c      	cmp	r4, r3
 800bdea:	d11b      	bne.n	800be24 <_fflush_r+0x58>
 800bdec:	686c      	ldr	r4, [r5, #4]
 800bdee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d0ef      	beq.n	800bdd6 <_fflush_r+0xa>
 800bdf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdf8:	07d0      	lsls	r0, r2, #31
 800bdfa:	d404      	bmi.n	800be06 <_fflush_r+0x3a>
 800bdfc:	0599      	lsls	r1, r3, #22
 800bdfe:	d402      	bmi.n	800be06 <_fflush_r+0x3a>
 800be00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be02:	f000 f915 	bl	800c030 <__retarget_lock_acquire_recursive>
 800be06:	4628      	mov	r0, r5
 800be08:	4621      	mov	r1, r4
 800be0a:	f7ff ff59 	bl	800bcc0 <__sflush_r>
 800be0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be10:	07da      	lsls	r2, r3, #31
 800be12:	4605      	mov	r5, r0
 800be14:	d4e0      	bmi.n	800bdd8 <_fflush_r+0xc>
 800be16:	89a3      	ldrh	r3, [r4, #12]
 800be18:	059b      	lsls	r3, r3, #22
 800be1a:	d4dd      	bmi.n	800bdd8 <_fflush_r+0xc>
 800be1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be1e:	f000 f908 	bl	800c032 <__retarget_lock_release_recursive>
 800be22:	e7d9      	b.n	800bdd8 <_fflush_r+0xc>
 800be24:	4b05      	ldr	r3, [pc, #20]	; (800be3c <_fflush_r+0x70>)
 800be26:	429c      	cmp	r4, r3
 800be28:	d101      	bne.n	800be2e <_fflush_r+0x62>
 800be2a:	68ac      	ldr	r4, [r5, #8]
 800be2c:	e7df      	b.n	800bdee <_fflush_r+0x22>
 800be2e:	4b04      	ldr	r3, [pc, #16]	; (800be40 <_fflush_r+0x74>)
 800be30:	429c      	cmp	r4, r3
 800be32:	bf08      	it	eq
 800be34:	68ec      	ldreq	r4, [r5, #12]
 800be36:	e7da      	b.n	800bdee <_fflush_r+0x22>
 800be38:	08030cf0 	.word	0x08030cf0
 800be3c:	08030d10 	.word	0x08030d10
 800be40:	08030cd0 	.word	0x08030cd0

0800be44 <std>:
 800be44:	2300      	movs	r3, #0
 800be46:	b510      	push	{r4, lr}
 800be48:	4604      	mov	r4, r0
 800be4a:	e9c0 3300 	strd	r3, r3, [r0]
 800be4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be52:	6083      	str	r3, [r0, #8]
 800be54:	8181      	strh	r1, [r0, #12]
 800be56:	6643      	str	r3, [r0, #100]	; 0x64
 800be58:	81c2      	strh	r2, [r0, #14]
 800be5a:	6183      	str	r3, [r0, #24]
 800be5c:	4619      	mov	r1, r3
 800be5e:	2208      	movs	r2, #8
 800be60:	305c      	adds	r0, #92	; 0x5c
 800be62:	f7fd fb41 	bl	80094e8 <memset>
 800be66:	4b05      	ldr	r3, [pc, #20]	; (800be7c <std+0x38>)
 800be68:	6263      	str	r3, [r4, #36]	; 0x24
 800be6a:	4b05      	ldr	r3, [pc, #20]	; (800be80 <std+0x3c>)
 800be6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800be6e:	4b05      	ldr	r3, [pc, #20]	; (800be84 <std+0x40>)
 800be70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be72:	4b05      	ldr	r3, [pc, #20]	; (800be88 <std+0x44>)
 800be74:	6224      	str	r4, [r4, #32]
 800be76:	6323      	str	r3, [r4, #48]	; 0x30
 800be78:	bd10      	pop	{r4, pc}
 800be7a:	bf00      	nop
 800be7c:	08009e0d 	.word	0x08009e0d
 800be80:	08009e2f 	.word	0x08009e2f
 800be84:	08009e67 	.word	0x08009e67
 800be88:	08009e8b 	.word	0x08009e8b

0800be8c <_cleanup_r>:
 800be8c:	4901      	ldr	r1, [pc, #4]	; (800be94 <_cleanup_r+0x8>)
 800be8e:	f000 b8af 	b.w	800bff0 <_fwalk_reent>
 800be92:	bf00      	nop
 800be94:	0800bdcd 	.word	0x0800bdcd

0800be98 <__sfmoreglue>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	2268      	movs	r2, #104	; 0x68
 800be9c:	1e4d      	subs	r5, r1, #1
 800be9e:	4355      	muls	r5, r2
 800bea0:	460e      	mov	r6, r1
 800bea2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bea6:	f7ff faf7 	bl	800b498 <_malloc_r>
 800beaa:	4604      	mov	r4, r0
 800beac:	b140      	cbz	r0, 800bec0 <__sfmoreglue+0x28>
 800beae:	2100      	movs	r1, #0
 800beb0:	e9c0 1600 	strd	r1, r6, [r0]
 800beb4:	300c      	adds	r0, #12
 800beb6:	60a0      	str	r0, [r4, #8]
 800beb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bebc:	f7fd fb14 	bl	80094e8 <memset>
 800bec0:	4620      	mov	r0, r4
 800bec2:	bd70      	pop	{r4, r5, r6, pc}

0800bec4 <__sfp_lock_acquire>:
 800bec4:	4801      	ldr	r0, [pc, #4]	; (800becc <__sfp_lock_acquire+0x8>)
 800bec6:	f000 b8b3 	b.w	800c030 <__retarget_lock_acquire_recursive>
 800beca:	bf00      	nop
 800becc:	200035f5 	.word	0x200035f5

0800bed0 <__sfp_lock_release>:
 800bed0:	4801      	ldr	r0, [pc, #4]	; (800bed8 <__sfp_lock_release+0x8>)
 800bed2:	f000 b8ae 	b.w	800c032 <__retarget_lock_release_recursive>
 800bed6:	bf00      	nop
 800bed8:	200035f5 	.word	0x200035f5

0800bedc <__sinit_lock_acquire>:
 800bedc:	4801      	ldr	r0, [pc, #4]	; (800bee4 <__sinit_lock_acquire+0x8>)
 800bede:	f000 b8a7 	b.w	800c030 <__retarget_lock_acquire_recursive>
 800bee2:	bf00      	nop
 800bee4:	200035f6 	.word	0x200035f6

0800bee8 <__sinit_lock_release>:
 800bee8:	4801      	ldr	r0, [pc, #4]	; (800bef0 <__sinit_lock_release+0x8>)
 800beea:	f000 b8a2 	b.w	800c032 <__retarget_lock_release_recursive>
 800beee:	bf00      	nop
 800bef0:	200035f6 	.word	0x200035f6

0800bef4 <__sinit>:
 800bef4:	b510      	push	{r4, lr}
 800bef6:	4604      	mov	r4, r0
 800bef8:	f7ff fff0 	bl	800bedc <__sinit_lock_acquire>
 800befc:	69a3      	ldr	r3, [r4, #24]
 800befe:	b11b      	cbz	r3, 800bf08 <__sinit+0x14>
 800bf00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf04:	f7ff bff0 	b.w	800bee8 <__sinit_lock_release>
 800bf08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf0c:	6523      	str	r3, [r4, #80]	; 0x50
 800bf0e:	4b13      	ldr	r3, [pc, #76]	; (800bf5c <__sinit+0x68>)
 800bf10:	4a13      	ldr	r2, [pc, #76]	; (800bf60 <__sinit+0x6c>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf16:	42a3      	cmp	r3, r4
 800bf18:	bf04      	itt	eq
 800bf1a:	2301      	moveq	r3, #1
 800bf1c:	61a3      	streq	r3, [r4, #24]
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f000 f820 	bl	800bf64 <__sfp>
 800bf24:	6060      	str	r0, [r4, #4]
 800bf26:	4620      	mov	r0, r4
 800bf28:	f000 f81c 	bl	800bf64 <__sfp>
 800bf2c:	60a0      	str	r0, [r4, #8]
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f000 f818 	bl	800bf64 <__sfp>
 800bf34:	2200      	movs	r2, #0
 800bf36:	60e0      	str	r0, [r4, #12]
 800bf38:	2104      	movs	r1, #4
 800bf3a:	6860      	ldr	r0, [r4, #4]
 800bf3c:	f7ff ff82 	bl	800be44 <std>
 800bf40:	68a0      	ldr	r0, [r4, #8]
 800bf42:	2201      	movs	r2, #1
 800bf44:	2109      	movs	r1, #9
 800bf46:	f7ff ff7d 	bl	800be44 <std>
 800bf4a:	68e0      	ldr	r0, [r4, #12]
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	2112      	movs	r1, #18
 800bf50:	f7ff ff78 	bl	800be44 <std>
 800bf54:	2301      	movs	r3, #1
 800bf56:	61a3      	str	r3, [r4, #24]
 800bf58:	e7d2      	b.n	800bf00 <__sinit+0xc>
 800bf5a:	bf00      	nop
 800bf5c:	08030960 	.word	0x08030960
 800bf60:	0800be8d 	.word	0x0800be8d

0800bf64 <__sfp>:
 800bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf66:	4607      	mov	r7, r0
 800bf68:	f7ff ffac 	bl	800bec4 <__sfp_lock_acquire>
 800bf6c:	4b1e      	ldr	r3, [pc, #120]	; (800bfe8 <__sfp+0x84>)
 800bf6e:	681e      	ldr	r6, [r3, #0]
 800bf70:	69b3      	ldr	r3, [r6, #24]
 800bf72:	b913      	cbnz	r3, 800bf7a <__sfp+0x16>
 800bf74:	4630      	mov	r0, r6
 800bf76:	f7ff ffbd 	bl	800bef4 <__sinit>
 800bf7a:	3648      	adds	r6, #72	; 0x48
 800bf7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	d503      	bpl.n	800bf8c <__sfp+0x28>
 800bf84:	6833      	ldr	r3, [r6, #0]
 800bf86:	b30b      	cbz	r3, 800bfcc <__sfp+0x68>
 800bf88:	6836      	ldr	r6, [r6, #0]
 800bf8a:	e7f7      	b.n	800bf7c <__sfp+0x18>
 800bf8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf90:	b9d5      	cbnz	r5, 800bfc8 <__sfp+0x64>
 800bf92:	4b16      	ldr	r3, [pc, #88]	; (800bfec <__sfp+0x88>)
 800bf94:	60e3      	str	r3, [r4, #12]
 800bf96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf9a:	6665      	str	r5, [r4, #100]	; 0x64
 800bf9c:	f000 f847 	bl	800c02e <__retarget_lock_init_recursive>
 800bfa0:	f7ff ff96 	bl	800bed0 <__sfp_lock_release>
 800bfa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfac:	6025      	str	r5, [r4, #0]
 800bfae:	61a5      	str	r5, [r4, #24]
 800bfb0:	2208      	movs	r2, #8
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bfb8:	f7fd fa96 	bl	80094e8 <memset>
 800bfbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfc8:	3468      	adds	r4, #104	; 0x68
 800bfca:	e7d9      	b.n	800bf80 <__sfp+0x1c>
 800bfcc:	2104      	movs	r1, #4
 800bfce:	4638      	mov	r0, r7
 800bfd0:	f7ff ff62 	bl	800be98 <__sfmoreglue>
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	6030      	str	r0, [r6, #0]
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d1d5      	bne.n	800bf88 <__sfp+0x24>
 800bfdc:	f7ff ff78 	bl	800bed0 <__sfp_lock_release>
 800bfe0:	230c      	movs	r3, #12
 800bfe2:	603b      	str	r3, [r7, #0]
 800bfe4:	e7ee      	b.n	800bfc4 <__sfp+0x60>
 800bfe6:	bf00      	nop
 800bfe8:	08030960 	.word	0x08030960
 800bfec:	ffff0001 	.word	0xffff0001

0800bff0 <_fwalk_reent>:
 800bff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bff4:	4606      	mov	r6, r0
 800bff6:	4688      	mov	r8, r1
 800bff8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bffc:	2700      	movs	r7, #0
 800bffe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c002:	f1b9 0901 	subs.w	r9, r9, #1
 800c006:	d505      	bpl.n	800c014 <_fwalk_reent+0x24>
 800c008:	6824      	ldr	r4, [r4, #0]
 800c00a:	2c00      	cmp	r4, #0
 800c00c:	d1f7      	bne.n	800bffe <_fwalk_reent+0xe>
 800c00e:	4638      	mov	r0, r7
 800c010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c014:	89ab      	ldrh	r3, [r5, #12]
 800c016:	2b01      	cmp	r3, #1
 800c018:	d907      	bls.n	800c02a <_fwalk_reent+0x3a>
 800c01a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c01e:	3301      	adds	r3, #1
 800c020:	d003      	beq.n	800c02a <_fwalk_reent+0x3a>
 800c022:	4629      	mov	r1, r5
 800c024:	4630      	mov	r0, r6
 800c026:	47c0      	blx	r8
 800c028:	4307      	orrs	r7, r0
 800c02a:	3568      	adds	r5, #104	; 0x68
 800c02c:	e7e9      	b.n	800c002 <_fwalk_reent+0x12>

0800c02e <__retarget_lock_init_recursive>:
 800c02e:	4770      	bx	lr

0800c030 <__retarget_lock_acquire_recursive>:
 800c030:	4770      	bx	lr

0800c032 <__retarget_lock_release_recursive>:
 800c032:	4770      	bx	lr

0800c034 <__swhatbuf_r>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	460e      	mov	r6, r1
 800c038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c03c:	2900      	cmp	r1, #0
 800c03e:	b096      	sub	sp, #88	; 0x58
 800c040:	4614      	mov	r4, r2
 800c042:	461d      	mov	r5, r3
 800c044:	da08      	bge.n	800c058 <__swhatbuf_r+0x24>
 800c046:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c04a:	2200      	movs	r2, #0
 800c04c:	602a      	str	r2, [r5, #0]
 800c04e:	061a      	lsls	r2, r3, #24
 800c050:	d410      	bmi.n	800c074 <__swhatbuf_r+0x40>
 800c052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c056:	e00e      	b.n	800c076 <__swhatbuf_r+0x42>
 800c058:	466a      	mov	r2, sp
 800c05a:	f000 f90b 	bl	800c274 <_fstat_r>
 800c05e:	2800      	cmp	r0, #0
 800c060:	dbf1      	blt.n	800c046 <__swhatbuf_r+0x12>
 800c062:	9a01      	ldr	r2, [sp, #4]
 800c064:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c068:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c06c:	425a      	negs	r2, r3
 800c06e:	415a      	adcs	r2, r3
 800c070:	602a      	str	r2, [r5, #0]
 800c072:	e7ee      	b.n	800c052 <__swhatbuf_r+0x1e>
 800c074:	2340      	movs	r3, #64	; 0x40
 800c076:	2000      	movs	r0, #0
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	b016      	add	sp, #88	; 0x58
 800c07c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c080 <__smakebuf_r>:
 800c080:	898b      	ldrh	r3, [r1, #12]
 800c082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c084:	079d      	lsls	r5, r3, #30
 800c086:	4606      	mov	r6, r0
 800c088:	460c      	mov	r4, r1
 800c08a:	d507      	bpl.n	800c09c <__smakebuf_r+0x1c>
 800c08c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	6123      	str	r3, [r4, #16]
 800c094:	2301      	movs	r3, #1
 800c096:	6163      	str	r3, [r4, #20]
 800c098:	b002      	add	sp, #8
 800c09a:	bd70      	pop	{r4, r5, r6, pc}
 800c09c:	ab01      	add	r3, sp, #4
 800c09e:	466a      	mov	r2, sp
 800c0a0:	f7ff ffc8 	bl	800c034 <__swhatbuf_r>
 800c0a4:	9900      	ldr	r1, [sp, #0]
 800c0a6:	4605      	mov	r5, r0
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f7ff f9f5 	bl	800b498 <_malloc_r>
 800c0ae:	b948      	cbnz	r0, 800c0c4 <__smakebuf_r+0x44>
 800c0b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0b4:	059a      	lsls	r2, r3, #22
 800c0b6:	d4ef      	bmi.n	800c098 <__smakebuf_r+0x18>
 800c0b8:	f023 0303 	bic.w	r3, r3, #3
 800c0bc:	f043 0302 	orr.w	r3, r3, #2
 800c0c0:	81a3      	strh	r3, [r4, #12]
 800c0c2:	e7e3      	b.n	800c08c <__smakebuf_r+0xc>
 800c0c4:	4b0d      	ldr	r3, [pc, #52]	; (800c0fc <__smakebuf_r+0x7c>)
 800c0c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0c8:	89a3      	ldrh	r3, [r4, #12]
 800c0ca:	6020      	str	r0, [r4, #0]
 800c0cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0d0:	81a3      	strh	r3, [r4, #12]
 800c0d2:	9b00      	ldr	r3, [sp, #0]
 800c0d4:	6163      	str	r3, [r4, #20]
 800c0d6:	9b01      	ldr	r3, [sp, #4]
 800c0d8:	6120      	str	r0, [r4, #16]
 800c0da:	b15b      	cbz	r3, 800c0f4 <__smakebuf_r+0x74>
 800c0dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f000 f8d9 	bl	800c298 <_isatty_r>
 800c0e6:	b128      	cbz	r0, 800c0f4 <__smakebuf_r+0x74>
 800c0e8:	89a3      	ldrh	r3, [r4, #12]
 800c0ea:	f023 0303 	bic.w	r3, r3, #3
 800c0ee:	f043 0301 	orr.w	r3, r3, #1
 800c0f2:	81a3      	strh	r3, [r4, #12]
 800c0f4:	89a0      	ldrh	r0, [r4, #12]
 800c0f6:	4305      	orrs	r5, r0
 800c0f8:	81a5      	strh	r5, [r4, #12]
 800c0fa:	e7cd      	b.n	800c098 <__smakebuf_r+0x18>
 800c0fc:	0800be8d 	.word	0x0800be8d

0800c100 <__ascii_mbtowc>:
 800c100:	b082      	sub	sp, #8
 800c102:	b901      	cbnz	r1, 800c106 <__ascii_mbtowc+0x6>
 800c104:	a901      	add	r1, sp, #4
 800c106:	b142      	cbz	r2, 800c11a <__ascii_mbtowc+0x1a>
 800c108:	b14b      	cbz	r3, 800c11e <__ascii_mbtowc+0x1e>
 800c10a:	7813      	ldrb	r3, [r2, #0]
 800c10c:	600b      	str	r3, [r1, #0]
 800c10e:	7812      	ldrb	r2, [r2, #0]
 800c110:	1e10      	subs	r0, r2, #0
 800c112:	bf18      	it	ne
 800c114:	2001      	movne	r0, #1
 800c116:	b002      	add	sp, #8
 800c118:	4770      	bx	lr
 800c11a:	4610      	mov	r0, r2
 800c11c:	e7fb      	b.n	800c116 <__ascii_mbtowc+0x16>
 800c11e:	f06f 0001 	mvn.w	r0, #1
 800c122:	e7f8      	b.n	800c116 <__ascii_mbtowc+0x16>

0800c124 <memmove>:
 800c124:	4288      	cmp	r0, r1
 800c126:	b510      	push	{r4, lr}
 800c128:	eb01 0402 	add.w	r4, r1, r2
 800c12c:	d902      	bls.n	800c134 <memmove+0x10>
 800c12e:	4284      	cmp	r4, r0
 800c130:	4623      	mov	r3, r4
 800c132:	d807      	bhi.n	800c144 <memmove+0x20>
 800c134:	1e43      	subs	r3, r0, #1
 800c136:	42a1      	cmp	r1, r4
 800c138:	d008      	beq.n	800c14c <memmove+0x28>
 800c13a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c13e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c142:	e7f8      	b.n	800c136 <memmove+0x12>
 800c144:	4402      	add	r2, r0
 800c146:	4601      	mov	r1, r0
 800c148:	428a      	cmp	r2, r1
 800c14a:	d100      	bne.n	800c14e <memmove+0x2a>
 800c14c:	bd10      	pop	{r4, pc}
 800c14e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c156:	e7f7      	b.n	800c148 <memmove+0x24>

0800c158 <__malloc_lock>:
 800c158:	4801      	ldr	r0, [pc, #4]	; (800c160 <__malloc_lock+0x8>)
 800c15a:	f7ff bf69 	b.w	800c030 <__retarget_lock_acquire_recursive>
 800c15e:	bf00      	nop
 800c160:	200035f4 	.word	0x200035f4

0800c164 <__malloc_unlock>:
 800c164:	4801      	ldr	r0, [pc, #4]	; (800c16c <__malloc_unlock+0x8>)
 800c166:	f7ff bf64 	b.w	800c032 <__retarget_lock_release_recursive>
 800c16a:	bf00      	nop
 800c16c:	200035f4 	.word	0x200035f4

0800c170 <_realloc_r>:
 800c170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c174:	4680      	mov	r8, r0
 800c176:	4614      	mov	r4, r2
 800c178:	460e      	mov	r6, r1
 800c17a:	b921      	cbnz	r1, 800c186 <_realloc_r+0x16>
 800c17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c180:	4611      	mov	r1, r2
 800c182:	f7ff b989 	b.w	800b498 <_malloc_r>
 800c186:	b92a      	cbnz	r2, 800c194 <_realloc_r+0x24>
 800c188:	f7ff f91a 	bl	800b3c0 <_free_r>
 800c18c:	4625      	mov	r5, r4
 800c18e:	4628      	mov	r0, r5
 800c190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c194:	f000 f890 	bl	800c2b8 <_malloc_usable_size_r>
 800c198:	4284      	cmp	r4, r0
 800c19a:	4607      	mov	r7, r0
 800c19c:	d802      	bhi.n	800c1a4 <_realloc_r+0x34>
 800c19e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1a2:	d812      	bhi.n	800c1ca <_realloc_r+0x5a>
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	4640      	mov	r0, r8
 800c1a8:	f7ff f976 	bl	800b498 <_malloc_r>
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d0ed      	beq.n	800c18e <_realloc_r+0x1e>
 800c1b2:	42bc      	cmp	r4, r7
 800c1b4:	4622      	mov	r2, r4
 800c1b6:	4631      	mov	r1, r6
 800c1b8:	bf28      	it	cs
 800c1ba:	463a      	movcs	r2, r7
 800c1bc:	f7fd f986 	bl	80094cc <memcpy>
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	f7ff f8fc 	bl	800b3c0 <_free_r>
 800c1c8:	e7e1      	b.n	800c18e <_realloc_r+0x1e>
 800c1ca:	4635      	mov	r5, r6
 800c1cc:	e7df      	b.n	800c18e <_realloc_r+0x1e>

0800c1ce <_raise_r>:
 800c1ce:	291f      	cmp	r1, #31
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	460d      	mov	r5, r1
 800c1d6:	d904      	bls.n	800c1e2 <_raise_r+0x14>
 800c1d8:	2316      	movs	r3, #22
 800c1da:	6003      	str	r3, [r0, #0]
 800c1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e0:	bd38      	pop	{r3, r4, r5, pc}
 800c1e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1e4:	b112      	cbz	r2, 800c1ec <_raise_r+0x1e>
 800c1e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1ea:	b94b      	cbnz	r3, 800c200 <_raise_r+0x32>
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f000 f831 	bl	800c254 <_getpid_r>
 800c1f2:	462a      	mov	r2, r5
 800c1f4:	4601      	mov	r1, r0
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1fc:	f000 b818 	b.w	800c230 <_kill_r>
 800c200:	2b01      	cmp	r3, #1
 800c202:	d00a      	beq.n	800c21a <_raise_r+0x4c>
 800c204:	1c59      	adds	r1, r3, #1
 800c206:	d103      	bne.n	800c210 <_raise_r+0x42>
 800c208:	2316      	movs	r3, #22
 800c20a:	6003      	str	r3, [r0, #0]
 800c20c:	2001      	movs	r0, #1
 800c20e:	e7e7      	b.n	800c1e0 <_raise_r+0x12>
 800c210:	2400      	movs	r4, #0
 800c212:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c216:	4628      	mov	r0, r5
 800c218:	4798      	blx	r3
 800c21a:	2000      	movs	r0, #0
 800c21c:	e7e0      	b.n	800c1e0 <_raise_r+0x12>
	...

0800c220 <raise>:
 800c220:	4b02      	ldr	r3, [pc, #8]	; (800c22c <raise+0xc>)
 800c222:	4601      	mov	r1, r0
 800c224:	6818      	ldr	r0, [r3, #0]
 800c226:	f7ff bfd2 	b.w	800c1ce <_raise_r>
 800c22a:	bf00      	nop
 800c22c:	20000188 	.word	0x20000188

0800c230 <_kill_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4d07      	ldr	r5, [pc, #28]	; (800c250 <_kill_r+0x20>)
 800c234:	2300      	movs	r3, #0
 800c236:	4604      	mov	r4, r0
 800c238:	4608      	mov	r0, r1
 800c23a:	4611      	mov	r1, r2
 800c23c:	602b      	str	r3, [r5, #0]
 800c23e:	f7f6 fc6d 	bl	8002b1c <_kill>
 800c242:	1c43      	adds	r3, r0, #1
 800c244:	d102      	bne.n	800c24c <_kill_r+0x1c>
 800c246:	682b      	ldr	r3, [r5, #0]
 800c248:	b103      	cbz	r3, 800c24c <_kill_r+0x1c>
 800c24a:	6023      	str	r3, [r4, #0]
 800c24c:	bd38      	pop	{r3, r4, r5, pc}
 800c24e:	bf00      	nop
 800c250:	200035f0 	.word	0x200035f0

0800c254 <_getpid_r>:
 800c254:	f7f6 bc5a 	b.w	8002b0c <_getpid>

0800c258 <__ascii_wctomb>:
 800c258:	b149      	cbz	r1, 800c26e <__ascii_wctomb+0x16>
 800c25a:	2aff      	cmp	r2, #255	; 0xff
 800c25c:	bf85      	ittet	hi
 800c25e:	238a      	movhi	r3, #138	; 0x8a
 800c260:	6003      	strhi	r3, [r0, #0]
 800c262:	700a      	strbls	r2, [r1, #0]
 800c264:	f04f 30ff 	movhi.w	r0, #4294967295
 800c268:	bf98      	it	ls
 800c26a:	2001      	movls	r0, #1
 800c26c:	4770      	bx	lr
 800c26e:	4608      	mov	r0, r1
 800c270:	4770      	bx	lr
	...

0800c274 <_fstat_r>:
 800c274:	b538      	push	{r3, r4, r5, lr}
 800c276:	4d07      	ldr	r5, [pc, #28]	; (800c294 <_fstat_r+0x20>)
 800c278:	2300      	movs	r3, #0
 800c27a:	4604      	mov	r4, r0
 800c27c:	4608      	mov	r0, r1
 800c27e:	4611      	mov	r1, r2
 800c280:	602b      	str	r3, [r5, #0]
 800c282:	f7f6 fcaa 	bl	8002bda <_fstat>
 800c286:	1c43      	adds	r3, r0, #1
 800c288:	d102      	bne.n	800c290 <_fstat_r+0x1c>
 800c28a:	682b      	ldr	r3, [r5, #0]
 800c28c:	b103      	cbz	r3, 800c290 <_fstat_r+0x1c>
 800c28e:	6023      	str	r3, [r4, #0]
 800c290:	bd38      	pop	{r3, r4, r5, pc}
 800c292:	bf00      	nop
 800c294:	200035f0 	.word	0x200035f0

0800c298 <_isatty_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4d06      	ldr	r5, [pc, #24]	; (800c2b4 <_isatty_r+0x1c>)
 800c29c:	2300      	movs	r3, #0
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	602b      	str	r3, [r5, #0]
 800c2a4:	f7f6 fca9 	bl	8002bfa <_isatty>
 800c2a8:	1c43      	adds	r3, r0, #1
 800c2aa:	d102      	bne.n	800c2b2 <_isatty_r+0x1a>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	b103      	cbz	r3, 800c2b2 <_isatty_r+0x1a>
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	200035f0 	.word	0x200035f0

0800c2b8 <_malloc_usable_size_r>:
 800c2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2bc:	1f18      	subs	r0, r3, #4
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	bfbc      	itt	lt
 800c2c2:	580b      	ldrlt	r3, [r1, r0]
 800c2c4:	18c0      	addlt	r0, r0, r3
 800c2c6:	4770      	bx	lr

0800c2c8 <pow>:
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ca:	ed2d 8b02 	vpush	{d8}
 800c2ce:	eeb0 8a40 	vmov.f32	s16, s0
 800c2d2:	eef0 8a60 	vmov.f32	s17, s1
 800c2d6:	ec55 4b11 	vmov	r4, r5, d1
 800c2da:	f000 f865 	bl	800c3a8 <__ieee754_pow>
 800c2de:	4622      	mov	r2, r4
 800c2e0:	462b      	mov	r3, r5
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	ec57 6b10 	vmov	r6, r7, d0
 800c2ea:	f7f4 fc2f 	bl	8000b4c <__aeabi_dcmpun>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d13b      	bne.n	800c36a <pow+0xa2>
 800c2f2:	ec51 0b18 	vmov	r0, r1, d8
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f7f4 fbf5 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2fe:	b1b8      	cbz	r0, 800c330 <pow+0x68>
 800c300:	2200      	movs	r2, #0
 800c302:	2300      	movs	r3, #0
 800c304:	4620      	mov	r0, r4
 800c306:	4629      	mov	r1, r5
 800c308:	f7f4 fbee 	bl	8000ae8 <__aeabi_dcmpeq>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d146      	bne.n	800c39e <pow+0xd6>
 800c310:	ec45 4b10 	vmov	d0, r4, r5
 800c314:	f000 fe61 	bl	800cfda <finite>
 800c318:	b338      	cbz	r0, 800c36a <pow+0xa2>
 800c31a:	2200      	movs	r2, #0
 800c31c:	2300      	movs	r3, #0
 800c31e:	4620      	mov	r0, r4
 800c320:	4629      	mov	r1, r5
 800c322:	f7f4 fbeb 	bl	8000afc <__aeabi_dcmplt>
 800c326:	b300      	cbz	r0, 800c36a <pow+0xa2>
 800c328:	f7fd f8a6 	bl	8009478 <__errno>
 800c32c:	2322      	movs	r3, #34	; 0x22
 800c32e:	e01b      	b.n	800c368 <pow+0xa0>
 800c330:	ec47 6b10 	vmov	d0, r6, r7
 800c334:	f000 fe51 	bl	800cfda <finite>
 800c338:	b9e0      	cbnz	r0, 800c374 <pow+0xac>
 800c33a:	eeb0 0a48 	vmov.f32	s0, s16
 800c33e:	eef0 0a68 	vmov.f32	s1, s17
 800c342:	f000 fe4a 	bl	800cfda <finite>
 800c346:	b1a8      	cbz	r0, 800c374 <pow+0xac>
 800c348:	ec45 4b10 	vmov	d0, r4, r5
 800c34c:	f000 fe45 	bl	800cfda <finite>
 800c350:	b180      	cbz	r0, 800c374 <pow+0xac>
 800c352:	4632      	mov	r2, r6
 800c354:	463b      	mov	r3, r7
 800c356:	4630      	mov	r0, r6
 800c358:	4639      	mov	r1, r7
 800c35a:	f7f4 fbf7 	bl	8000b4c <__aeabi_dcmpun>
 800c35e:	2800      	cmp	r0, #0
 800c360:	d0e2      	beq.n	800c328 <pow+0x60>
 800c362:	f7fd f889 	bl	8009478 <__errno>
 800c366:	2321      	movs	r3, #33	; 0x21
 800c368:	6003      	str	r3, [r0, #0]
 800c36a:	ecbd 8b02 	vpop	{d8}
 800c36e:	ec47 6b10 	vmov	d0, r6, r7
 800c372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c374:	2200      	movs	r2, #0
 800c376:	2300      	movs	r3, #0
 800c378:	4630      	mov	r0, r6
 800c37a:	4639      	mov	r1, r7
 800c37c:	f7f4 fbb4 	bl	8000ae8 <__aeabi_dcmpeq>
 800c380:	2800      	cmp	r0, #0
 800c382:	d0f2      	beq.n	800c36a <pow+0xa2>
 800c384:	eeb0 0a48 	vmov.f32	s0, s16
 800c388:	eef0 0a68 	vmov.f32	s1, s17
 800c38c:	f000 fe25 	bl	800cfda <finite>
 800c390:	2800      	cmp	r0, #0
 800c392:	d0ea      	beq.n	800c36a <pow+0xa2>
 800c394:	ec45 4b10 	vmov	d0, r4, r5
 800c398:	f000 fe1f 	bl	800cfda <finite>
 800c39c:	e7c3      	b.n	800c326 <pow+0x5e>
 800c39e:	4f01      	ldr	r7, [pc, #4]	; (800c3a4 <pow+0xdc>)
 800c3a0:	2600      	movs	r6, #0
 800c3a2:	e7e2      	b.n	800c36a <pow+0xa2>
 800c3a4:	3ff00000 	.word	0x3ff00000

0800c3a8 <__ieee754_pow>:
 800c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ac:	ed2d 8b06 	vpush	{d8-d10}
 800c3b0:	b089      	sub	sp, #36	; 0x24
 800c3b2:	ed8d 1b00 	vstr	d1, [sp]
 800c3b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c3ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c3be:	ea58 0102 	orrs.w	r1, r8, r2
 800c3c2:	ec57 6b10 	vmov	r6, r7, d0
 800c3c6:	d115      	bne.n	800c3f4 <__ieee754_pow+0x4c>
 800c3c8:	19b3      	adds	r3, r6, r6
 800c3ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c3ce:	4152      	adcs	r2, r2
 800c3d0:	4299      	cmp	r1, r3
 800c3d2:	4b89      	ldr	r3, [pc, #548]	; (800c5f8 <__ieee754_pow+0x250>)
 800c3d4:	4193      	sbcs	r3, r2
 800c3d6:	f080 84d2 	bcs.w	800cd7e <__ieee754_pow+0x9d6>
 800c3da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3de:	4630      	mov	r0, r6
 800c3e0:	4639      	mov	r1, r7
 800c3e2:	f7f3 ff63 	bl	80002ac <__adddf3>
 800c3e6:	ec41 0b10 	vmov	d0, r0, r1
 800c3ea:	b009      	add	sp, #36	; 0x24
 800c3ec:	ecbd 8b06 	vpop	{d8-d10}
 800c3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f4:	4b81      	ldr	r3, [pc, #516]	; (800c5fc <__ieee754_pow+0x254>)
 800c3f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c3fa:	429c      	cmp	r4, r3
 800c3fc:	ee10 aa10 	vmov	sl, s0
 800c400:	463d      	mov	r5, r7
 800c402:	dc06      	bgt.n	800c412 <__ieee754_pow+0x6a>
 800c404:	d101      	bne.n	800c40a <__ieee754_pow+0x62>
 800c406:	2e00      	cmp	r6, #0
 800c408:	d1e7      	bne.n	800c3da <__ieee754_pow+0x32>
 800c40a:	4598      	cmp	r8, r3
 800c40c:	dc01      	bgt.n	800c412 <__ieee754_pow+0x6a>
 800c40e:	d10f      	bne.n	800c430 <__ieee754_pow+0x88>
 800c410:	b172      	cbz	r2, 800c430 <__ieee754_pow+0x88>
 800c412:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c416:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c41a:	ea55 050a 	orrs.w	r5, r5, sl
 800c41e:	d1dc      	bne.n	800c3da <__ieee754_pow+0x32>
 800c420:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c424:	18db      	adds	r3, r3, r3
 800c426:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c42a:	4152      	adcs	r2, r2
 800c42c:	429d      	cmp	r5, r3
 800c42e:	e7d0      	b.n	800c3d2 <__ieee754_pow+0x2a>
 800c430:	2d00      	cmp	r5, #0
 800c432:	da3b      	bge.n	800c4ac <__ieee754_pow+0x104>
 800c434:	4b72      	ldr	r3, [pc, #456]	; (800c600 <__ieee754_pow+0x258>)
 800c436:	4598      	cmp	r8, r3
 800c438:	dc51      	bgt.n	800c4de <__ieee754_pow+0x136>
 800c43a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c43e:	4598      	cmp	r8, r3
 800c440:	f340 84ac 	ble.w	800cd9c <__ieee754_pow+0x9f4>
 800c444:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c448:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c44c:	2b14      	cmp	r3, #20
 800c44e:	dd0f      	ble.n	800c470 <__ieee754_pow+0xc8>
 800c450:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c454:	fa22 f103 	lsr.w	r1, r2, r3
 800c458:	fa01 f303 	lsl.w	r3, r1, r3
 800c45c:	4293      	cmp	r3, r2
 800c45e:	f040 849d 	bne.w	800cd9c <__ieee754_pow+0x9f4>
 800c462:	f001 0101 	and.w	r1, r1, #1
 800c466:	f1c1 0302 	rsb	r3, r1, #2
 800c46a:	9304      	str	r3, [sp, #16]
 800c46c:	b182      	cbz	r2, 800c490 <__ieee754_pow+0xe8>
 800c46e:	e05f      	b.n	800c530 <__ieee754_pow+0x188>
 800c470:	2a00      	cmp	r2, #0
 800c472:	d15b      	bne.n	800c52c <__ieee754_pow+0x184>
 800c474:	f1c3 0314 	rsb	r3, r3, #20
 800c478:	fa48 f103 	asr.w	r1, r8, r3
 800c47c:	fa01 f303 	lsl.w	r3, r1, r3
 800c480:	4543      	cmp	r3, r8
 800c482:	f040 8488 	bne.w	800cd96 <__ieee754_pow+0x9ee>
 800c486:	f001 0101 	and.w	r1, r1, #1
 800c48a:	f1c1 0302 	rsb	r3, r1, #2
 800c48e:	9304      	str	r3, [sp, #16]
 800c490:	4b5c      	ldr	r3, [pc, #368]	; (800c604 <__ieee754_pow+0x25c>)
 800c492:	4598      	cmp	r8, r3
 800c494:	d132      	bne.n	800c4fc <__ieee754_pow+0x154>
 800c496:	f1b9 0f00 	cmp.w	r9, #0
 800c49a:	f280 8478 	bge.w	800cd8e <__ieee754_pow+0x9e6>
 800c49e:	4959      	ldr	r1, [pc, #356]	; (800c604 <__ieee754_pow+0x25c>)
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	463b      	mov	r3, r7
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	f7f4 f9e1 	bl	800086c <__aeabi_ddiv>
 800c4aa:	e79c      	b.n	800c3e6 <__ieee754_pow+0x3e>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	9304      	str	r3, [sp, #16]
 800c4b0:	2a00      	cmp	r2, #0
 800c4b2:	d13d      	bne.n	800c530 <__ieee754_pow+0x188>
 800c4b4:	4b51      	ldr	r3, [pc, #324]	; (800c5fc <__ieee754_pow+0x254>)
 800c4b6:	4598      	cmp	r8, r3
 800c4b8:	d1ea      	bne.n	800c490 <__ieee754_pow+0xe8>
 800c4ba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c4be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c4c2:	ea53 030a 	orrs.w	r3, r3, sl
 800c4c6:	f000 845a 	beq.w	800cd7e <__ieee754_pow+0x9d6>
 800c4ca:	4b4f      	ldr	r3, [pc, #316]	; (800c608 <__ieee754_pow+0x260>)
 800c4cc:	429c      	cmp	r4, r3
 800c4ce:	dd08      	ble.n	800c4e2 <__ieee754_pow+0x13a>
 800c4d0:	f1b9 0f00 	cmp.w	r9, #0
 800c4d4:	f2c0 8457 	blt.w	800cd86 <__ieee754_pow+0x9de>
 800c4d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4dc:	e783      	b.n	800c3e6 <__ieee754_pow+0x3e>
 800c4de:	2302      	movs	r3, #2
 800c4e0:	e7e5      	b.n	800c4ae <__ieee754_pow+0x106>
 800c4e2:	f1b9 0f00 	cmp.w	r9, #0
 800c4e6:	f04f 0000 	mov.w	r0, #0
 800c4ea:	f04f 0100 	mov.w	r1, #0
 800c4ee:	f6bf af7a 	bge.w	800c3e6 <__ieee754_pow+0x3e>
 800c4f2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c4f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c4fa:	e774      	b.n	800c3e6 <__ieee754_pow+0x3e>
 800c4fc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c500:	d106      	bne.n	800c510 <__ieee754_pow+0x168>
 800c502:	4632      	mov	r2, r6
 800c504:	463b      	mov	r3, r7
 800c506:	4630      	mov	r0, r6
 800c508:	4639      	mov	r1, r7
 800c50a:	f7f4 f885 	bl	8000618 <__aeabi_dmul>
 800c50e:	e76a      	b.n	800c3e6 <__ieee754_pow+0x3e>
 800c510:	4b3e      	ldr	r3, [pc, #248]	; (800c60c <__ieee754_pow+0x264>)
 800c512:	4599      	cmp	r9, r3
 800c514:	d10c      	bne.n	800c530 <__ieee754_pow+0x188>
 800c516:	2d00      	cmp	r5, #0
 800c518:	db0a      	blt.n	800c530 <__ieee754_pow+0x188>
 800c51a:	ec47 6b10 	vmov	d0, r6, r7
 800c51e:	b009      	add	sp, #36	; 0x24
 800c520:	ecbd 8b06 	vpop	{d8-d10}
 800c524:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c528:	f000 bc6c 	b.w	800ce04 <__ieee754_sqrt>
 800c52c:	2300      	movs	r3, #0
 800c52e:	9304      	str	r3, [sp, #16]
 800c530:	ec47 6b10 	vmov	d0, r6, r7
 800c534:	f000 fd48 	bl	800cfc8 <fabs>
 800c538:	ec51 0b10 	vmov	r0, r1, d0
 800c53c:	f1ba 0f00 	cmp.w	sl, #0
 800c540:	d129      	bne.n	800c596 <__ieee754_pow+0x1ee>
 800c542:	b124      	cbz	r4, 800c54e <__ieee754_pow+0x1a6>
 800c544:	4b2f      	ldr	r3, [pc, #188]	; (800c604 <__ieee754_pow+0x25c>)
 800c546:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d123      	bne.n	800c596 <__ieee754_pow+0x1ee>
 800c54e:	f1b9 0f00 	cmp.w	r9, #0
 800c552:	da05      	bge.n	800c560 <__ieee754_pow+0x1b8>
 800c554:	4602      	mov	r2, r0
 800c556:	460b      	mov	r3, r1
 800c558:	2000      	movs	r0, #0
 800c55a:	492a      	ldr	r1, [pc, #168]	; (800c604 <__ieee754_pow+0x25c>)
 800c55c:	f7f4 f986 	bl	800086c <__aeabi_ddiv>
 800c560:	2d00      	cmp	r5, #0
 800c562:	f6bf af40 	bge.w	800c3e6 <__ieee754_pow+0x3e>
 800c566:	9b04      	ldr	r3, [sp, #16]
 800c568:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c56c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c570:	4323      	orrs	r3, r4
 800c572:	d108      	bne.n	800c586 <__ieee754_pow+0x1de>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
 800c578:	4610      	mov	r0, r2
 800c57a:	4619      	mov	r1, r3
 800c57c:	f7f3 fe94 	bl	80002a8 <__aeabi_dsub>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	e78f      	b.n	800c4a6 <__ieee754_pow+0xfe>
 800c586:	9b04      	ldr	r3, [sp, #16]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	f47f af2c 	bne.w	800c3e6 <__ieee754_pow+0x3e>
 800c58e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c592:	4619      	mov	r1, r3
 800c594:	e727      	b.n	800c3e6 <__ieee754_pow+0x3e>
 800c596:	0feb      	lsrs	r3, r5, #31
 800c598:	3b01      	subs	r3, #1
 800c59a:	9306      	str	r3, [sp, #24]
 800c59c:	9a06      	ldr	r2, [sp, #24]
 800c59e:	9b04      	ldr	r3, [sp, #16]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	d102      	bne.n	800c5aa <__ieee754_pow+0x202>
 800c5a4:	4632      	mov	r2, r6
 800c5a6:	463b      	mov	r3, r7
 800c5a8:	e7e6      	b.n	800c578 <__ieee754_pow+0x1d0>
 800c5aa:	4b19      	ldr	r3, [pc, #100]	; (800c610 <__ieee754_pow+0x268>)
 800c5ac:	4598      	cmp	r8, r3
 800c5ae:	f340 80fb 	ble.w	800c7a8 <__ieee754_pow+0x400>
 800c5b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c5b6:	4598      	cmp	r8, r3
 800c5b8:	4b13      	ldr	r3, [pc, #76]	; (800c608 <__ieee754_pow+0x260>)
 800c5ba:	dd0c      	ble.n	800c5d6 <__ieee754_pow+0x22e>
 800c5bc:	429c      	cmp	r4, r3
 800c5be:	dc0f      	bgt.n	800c5e0 <__ieee754_pow+0x238>
 800c5c0:	f1b9 0f00 	cmp.w	r9, #0
 800c5c4:	da0f      	bge.n	800c5e6 <__ieee754_pow+0x23e>
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	b009      	add	sp, #36	; 0x24
 800c5ca:	ecbd 8b06 	vpop	{d8-d10}
 800c5ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d2:	f000 bcf0 	b.w	800cfb6 <__math_oflow>
 800c5d6:	429c      	cmp	r4, r3
 800c5d8:	dbf2      	blt.n	800c5c0 <__ieee754_pow+0x218>
 800c5da:	4b0a      	ldr	r3, [pc, #40]	; (800c604 <__ieee754_pow+0x25c>)
 800c5dc:	429c      	cmp	r4, r3
 800c5de:	dd19      	ble.n	800c614 <__ieee754_pow+0x26c>
 800c5e0:	f1b9 0f00 	cmp.w	r9, #0
 800c5e4:	dcef      	bgt.n	800c5c6 <__ieee754_pow+0x21e>
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	b009      	add	sp, #36	; 0x24
 800c5ea:	ecbd 8b06 	vpop	{d8-d10}
 800c5ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f2:	f000 bcd7 	b.w	800cfa4 <__math_uflow>
 800c5f6:	bf00      	nop
 800c5f8:	fff00000 	.word	0xfff00000
 800c5fc:	7ff00000 	.word	0x7ff00000
 800c600:	433fffff 	.word	0x433fffff
 800c604:	3ff00000 	.word	0x3ff00000
 800c608:	3fefffff 	.word	0x3fefffff
 800c60c:	3fe00000 	.word	0x3fe00000
 800c610:	41e00000 	.word	0x41e00000
 800c614:	4b60      	ldr	r3, [pc, #384]	; (800c798 <__ieee754_pow+0x3f0>)
 800c616:	2200      	movs	r2, #0
 800c618:	f7f3 fe46 	bl	80002a8 <__aeabi_dsub>
 800c61c:	a354      	add	r3, pc, #336	; (adr r3, 800c770 <__ieee754_pow+0x3c8>)
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	4604      	mov	r4, r0
 800c624:	460d      	mov	r5, r1
 800c626:	f7f3 fff7 	bl	8000618 <__aeabi_dmul>
 800c62a:	a353      	add	r3, pc, #332	; (adr r3, 800c778 <__ieee754_pow+0x3d0>)
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	4606      	mov	r6, r0
 800c632:	460f      	mov	r7, r1
 800c634:	4620      	mov	r0, r4
 800c636:	4629      	mov	r1, r5
 800c638:	f7f3 ffee 	bl	8000618 <__aeabi_dmul>
 800c63c:	4b57      	ldr	r3, [pc, #348]	; (800c79c <__ieee754_pow+0x3f4>)
 800c63e:	4682      	mov	sl, r0
 800c640:	468b      	mov	fp, r1
 800c642:	2200      	movs	r2, #0
 800c644:	4620      	mov	r0, r4
 800c646:	4629      	mov	r1, r5
 800c648:	f7f3 ffe6 	bl	8000618 <__aeabi_dmul>
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	a14b      	add	r1, pc, #300	; (adr r1, 800c780 <__ieee754_pow+0x3d8>)
 800c652:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c656:	f7f3 fe27 	bl	80002a8 <__aeabi_dsub>
 800c65a:	4622      	mov	r2, r4
 800c65c:	462b      	mov	r3, r5
 800c65e:	f7f3 ffdb 	bl	8000618 <__aeabi_dmul>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	2000      	movs	r0, #0
 800c668:	494d      	ldr	r1, [pc, #308]	; (800c7a0 <__ieee754_pow+0x3f8>)
 800c66a:	f7f3 fe1d 	bl	80002a8 <__aeabi_dsub>
 800c66e:	4622      	mov	r2, r4
 800c670:	4680      	mov	r8, r0
 800c672:	4689      	mov	r9, r1
 800c674:	462b      	mov	r3, r5
 800c676:	4620      	mov	r0, r4
 800c678:	4629      	mov	r1, r5
 800c67a:	f7f3 ffcd 	bl	8000618 <__aeabi_dmul>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	4640      	mov	r0, r8
 800c684:	4649      	mov	r1, r9
 800c686:	f7f3 ffc7 	bl	8000618 <__aeabi_dmul>
 800c68a:	a33f      	add	r3, pc, #252	; (adr r3, 800c788 <__ieee754_pow+0x3e0>)
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	f7f3 ffc2 	bl	8000618 <__aeabi_dmul>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4650      	mov	r0, sl
 800c69a:	4659      	mov	r1, fp
 800c69c:	f7f3 fe04 	bl	80002a8 <__aeabi_dsub>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4680      	mov	r8, r0
 800c6a6:	4689      	mov	r9, r1
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	f7f3 fdfe 	bl	80002ac <__adddf3>
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	4632      	mov	r2, r6
 800c6b4:	463b      	mov	r3, r7
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	460d      	mov	r5, r1
 800c6ba:	f7f3 fdf5 	bl	80002a8 <__aeabi_dsub>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4640      	mov	r0, r8
 800c6c4:	4649      	mov	r1, r9
 800c6c6:	f7f3 fdef 	bl	80002a8 <__aeabi_dsub>
 800c6ca:	9b04      	ldr	r3, [sp, #16]
 800c6cc:	9a06      	ldr	r2, [sp, #24]
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	4682      	mov	sl, r0
 800c6d4:	468b      	mov	fp, r1
 800c6d6:	f040 81e7 	bne.w	800caa8 <__ieee754_pow+0x700>
 800c6da:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c790 <__ieee754_pow+0x3e8>
 800c6de:	eeb0 8a47 	vmov.f32	s16, s14
 800c6e2:	eef0 8a67 	vmov.f32	s17, s15
 800c6e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c6ea:	2600      	movs	r6, #0
 800c6ec:	4632      	mov	r2, r6
 800c6ee:	463b      	mov	r3, r7
 800c6f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6f4:	f7f3 fdd8 	bl	80002a8 <__aeabi_dsub>
 800c6f8:	4622      	mov	r2, r4
 800c6fa:	462b      	mov	r3, r5
 800c6fc:	f7f3 ff8c 	bl	8000618 <__aeabi_dmul>
 800c700:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c704:	4680      	mov	r8, r0
 800c706:	4689      	mov	r9, r1
 800c708:	4650      	mov	r0, sl
 800c70a:	4659      	mov	r1, fp
 800c70c:	f7f3 ff84 	bl	8000618 <__aeabi_dmul>
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	4640      	mov	r0, r8
 800c716:	4649      	mov	r1, r9
 800c718:	f7f3 fdc8 	bl	80002ac <__adddf3>
 800c71c:	4632      	mov	r2, r6
 800c71e:	463b      	mov	r3, r7
 800c720:	4680      	mov	r8, r0
 800c722:	4689      	mov	r9, r1
 800c724:	4620      	mov	r0, r4
 800c726:	4629      	mov	r1, r5
 800c728:	f7f3 ff76 	bl	8000618 <__aeabi_dmul>
 800c72c:	460b      	mov	r3, r1
 800c72e:	4604      	mov	r4, r0
 800c730:	460d      	mov	r5, r1
 800c732:	4602      	mov	r2, r0
 800c734:	4649      	mov	r1, r9
 800c736:	4640      	mov	r0, r8
 800c738:	f7f3 fdb8 	bl	80002ac <__adddf3>
 800c73c:	4b19      	ldr	r3, [pc, #100]	; (800c7a4 <__ieee754_pow+0x3fc>)
 800c73e:	4299      	cmp	r1, r3
 800c740:	ec45 4b19 	vmov	d9, r4, r5
 800c744:	4606      	mov	r6, r0
 800c746:	460f      	mov	r7, r1
 800c748:	468b      	mov	fp, r1
 800c74a:	f340 82f1 	ble.w	800cd30 <__ieee754_pow+0x988>
 800c74e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c752:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c756:	4303      	orrs	r3, r0
 800c758:	f000 81e4 	beq.w	800cb24 <__ieee754_pow+0x77c>
 800c75c:	ec51 0b18 	vmov	r0, r1, d8
 800c760:	2200      	movs	r2, #0
 800c762:	2300      	movs	r3, #0
 800c764:	f7f4 f9ca 	bl	8000afc <__aeabi_dcmplt>
 800c768:	3800      	subs	r0, #0
 800c76a:	bf18      	it	ne
 800c76c:	2001      	movne	r0, #1
 800c76e:	e72b      	b.n	800c5c8 <__ieee754_pow+0x220>
 800c770:	60000000 	.word	0x60000000
 800c774:	3ff71547 	.word	0x3ff71547
 800c778:	f85ddf44 	.word	0xf85ddf44
 800c77c:	3e54ae0b 	.word	0x3e54ae0b
 800c780:	55555555 	.word	0x55555555
 800c784:	3fd55555 	.word	0x3fd55555
 800c788:	652b82fe 	.word	0x652b82fe
 800c78c:	3ff71547 	.word	0x3ff71547
 800c790:	00000000 	.word	0x00000000
 800c794:	bff00000 	.word	0xbff00000
 800c798:	3ff00000 	.word	0x3ff00000
 800c79c:	3fd00000 	.word	0x3fd00000
 800c7a0:	3fe00000 	.word	0x3fe00000
 800c7a4:	408fffff 	.word	0x408fffff
 800c7a8:	4bd5      	ldr	r3, [pc, #852]	; (800cb00 <__ieee754_pow+0x758>)
 800c7aa:	402b      	ands	r3, r5
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	b92b      	cbnz	r3, 800c7bc <__ieee754_pow+0x414>
 800c7b0:	4bd4      	ldr	r3, [pc, #848]	; (800cb04 <__ieee754_pow+0x75c>)
 800c7b2:	f7f3 ff31 	bl	8000618 <__aeabi_dmul>
 800c7b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	1523      	asrs	r3, r4, #20
 800c7be:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c7c2:	4413      	add	r3, r2
 800c7c4:	9305      	str	r3, [sp, #20]
 800c7c6:	4bd0      	ldr	r3, [pc, #832]	; (800cb08 <__ieee754_pow+0x760>)
 800c7c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c7cc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c7d0:	429c      	cmp	r4, r3
 800c7d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c7d6:	dd08      	ble.n	800c7ea <__ieee754_pow+0x442>
 800c7d8:	4bcc      	ldr	r3, [pc, #816]	; (800cb0c <__ieee754_pow+0x764>)
 800c7da:	429c      	cmp	r4, r3
 800c7dc:	f340 8162 	ble.w	800caa4 <__ieee754_pow+0x6fc>
 800c7e0:	9b05      	ldr	r3, [sp, #20]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	9305      	str	r3, [sp, #20]
 800c7e6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c7ea:	2400      	movs	r4, #0
 800c7ec:	00e3      	lsls	r3, r4, #3
 800c7ee:	9307      	str	r3, [sp, #28]
 800c7f0:	4bc7      	ldr	r3, [pc, #796]	; (800cb10 <__ieee754_pow+0x768>)
 800c7f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7f6:	ed93 7b00 	vldr	d7, [r3]
 800c7fa:	4629      	mov	r1, r5
 800c7fc:	ec53 2b17 	vmov	r2, r3, d7
 800c800:	eeb0 9a47 	vmov.f32	s18, s14
 800c804:	eef0 9a67 	vmov.f32	s19, s15
 800c808:	4682      	mov	sl, r0
 800c80a:	f7f3 fd4d 	bl	80002a8 <__aeabi_dsub>
 800c80e:	4652      	mov	r2, sl
 800c810:	4606      	mov	r6, r0
 800c812:	460f      	mov	r7, r1
 800c814:	462b      	mov	r3, r5
 800c816:	ec51 0b19 	vmov	r0, r1, d9
 800c81a:	f7f3 fd47 	bl	80002ac <__adddf3>
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	2000      	movs	r0, #0
 800c824:	49bb      	ldr	r1, [pc, #748]	; (800cb14 <__ieee754_pow+0x76c>)
 800c826:	f7f4 f821 	bl	800086c <__aeabi_ddiv>
 800c82a:	ec41 0b1a 	vmov	d10, r0, r1
 800c82e:	4602      	mov	r2, r0
 800c830:	460b      	mov	r3, r1
 800c832:	4630      	mov	r0, r6
 800c834:	4639      	mov	r1, r7
 800c836:	f7f3 feef 	bl	8000618 <__aeabi_dmul>
 800c83a:	2300      	movs	r3, #0
 800c83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c840:	9302      	str	r3, [sp, #8]
 800c842:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c846:	46ab      	mov	fp, r5
 800c848:	106d      	asrs	r5, r5, #1
 800c84a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c84e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c852:	ec41 0b18 	vmov	d8, r0, r1
 800c856:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c85a:	2200      	movs	r2, #0
 800c85c:	4640      	mov	r0, r8
 800c85e:	4649      	mov	r1, r9
 800c860:	4614      	mov	r4, r2
 800c862:	461d      	mov	r5, r3
 800c864:	f7f3 fed8 	bl	8000618 <__aeabi_dmul>
 800c868:	4602      	mov	r2, r0
 800c86a:	460b      	mov	r3, r1
 800c86c:	4630      	mov	r0, r6
 800c86e:	4639      	mov	r1, r7
 800c870:	f7f3 fd1a 	bl	80002a8 <__aeabi_dsub>
 800c874:	ec53 2b19 	vmov	r2, r3, d9
 800c878:	4606      	mov	r6, r0
 800c87a:	460f      	mov	r7, r1
 800c87c:	4620      	mov	r0, r4
 800c87e:	4629      	mov	r1, r5
 800c880:	f7f3 fd12 	bl	80002a8 <__aeabi_dsub>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	4650      	mov	r0, sl
 800c88a:	4659      	mov	r1, fp
 800c88c:	f7f3 fd0c 	bl	80002a8 <__aeabi_dsub>
 800c890:	4642      	mov	r2, r8
 800c892:	464b      	mov	r3, r9
 800c894:	f7f3 fec0 	bl	8000618 <__aeabi_dmul>
 800c898:	4602      	mov	r2, r0
 800c89a:	460b      	mov	r3, r1
 800c89c:	4630      	mov	r0, r6
 800c89e:	4639      	mov	r1, r7
 800c8a0:	f7f3 fd02 	bl	80002a8 <__aeabi_dsub>
 800c8a4:	ec53 2b1a 	vmov	r2, r3, d10
 800c8a8:	f7f3 feb6 	bl	8000618 <__aeabi_dmul>
 800c8ac:	ec53 2b18 	vmov	r2, r3, d8
 800c8b0:	ec41 0b19 	vmov	d9, r0, r1
 800c8b4:	ec51 0b18 	vmov	r0, r1, d8
 800c8b8:	f7f3 feae 	bl	8000618 <__aeabi_dmul>
 800c8bc:	a37c      	add	r3, pc, #496	; (adr r3, 800cab0 <__ieee754_pow+0x708>)
 800c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	460d      	mov	r5, r1
 800c8c6:	f7f3 fea7 	bl	8000618 <__aeabi_dmul>
 800c8ca:	a37b      	add	r3, pc, #492	; (adr r3, 800cab8 <__ieee754_pow+0x710>)
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	f7f3 fcec 	bl	80002ac <__adddf3>
 800c8d4:	4622      	mov	r2, r4
 800c8d6:	462b      	mov	r3, r5
 800c8d8:	f7f3 fe9e 	bl	8000618 <__aeabi_dmul>
 800c8dc:	a378      	add	r3, pc, #480	; (adr r3, 800cac0 <__ieee754_pow+0x718>)
 800c8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e2:	f7f3 fce3 	bl	80002ac <__adddf3>
 800c8e6:	4622      	mov	r2, r4
 800c8e8:	462b      	mov	r3, r5
 800c8ea:	f7f3 fe95 	bl	8000618 <__aeabi_dmul>
 800c8ee:	a376      	add	r3, pc, #472	; (adr r3, 800cac8 <__ieee754_pow+0x720>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	f7f3 fcda 	bl	80002ac <__adddf3>
 800c8f8:	4622      	mov	r2, r4
 800c8fa:	462b      	mov	r3, r5
 800c8fc:	f7f3 fe8c 	bl	8000618 <__aeabi_dmul>
 800c900:	a373      	add	r3, pc, #460	; (adr r3, 800cad0 <__ieee754_pow+0x728>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fcd1 	bl	80002ac <__adddf3>
 800c90a:	4622      	mov	r2, r4
 800c90c:	462b      	mov	r3, r5
 800c90e:	f7f3 fe83 	bl	8000618 <__aeabi_dmul>
 800c912:	a371      	add	r3, pc, #452	; (adr r3, 800cad8 <__ieee754_pow+0x730>)
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	f7f3 fcc8 	bl	80002ac <__adddf3>
 800c91c:	4622      	mov	r2, r4
 800c91e:	4606      	mov	r6, r0
 800c920:	460f      	mov	r7, r1
 800c922:	462b      	mov	r3, r5
 800c924:	4620      	mov	r0, r4
 800c926:	4629      	mov	r1, r5
 800c928:	f7f3 fe76 	bl	8000618 <__aeabi_dmul>
 800c92c:	4602      	mov	r2, r0
 800c92e:	460b      	mov	r3, r1
 800c930:	4630      	mov	r0, r6
 800c932:	4639      	mov	r1, r7
 800c934:	f7f3 fe70 	bl	8000618 <__aeabi_dmul>
 800c938:	4642      	mov	r2, r8
 800c93a:	4604      	mov	r4, r0
 800c93c:	460d      	mov	r5, r1
 800c93e:	464b      	mov	r3, r9
 800c940:	ec51 0b18 	vmov	r0, r1, d8
 800c944:	f7f3 fcb2 	bl	80002ac <__adddf3>
 800c948:	ec53 2b19 	vmov	r2, r3, d9
 800c94c:	f7f3 fe64 	bl	8000618 <__aeabi_dmul>
 800c950:	4622      	mov	r2, r4
 800c952:	462b      	mov	r3, r5
 800c954:	f7f3 fcaa 	bl	80002ac <__adddf3>
 800c958:	4642      	mov	r2, r8
 800c95a:	4682      	mov	sl, r0
 800c95c:	468b      	mov	fp, r1
 800c95e:	464b      	mov	r3, r9
 800c960:	4640      	mov	r0, r8
 800c962:	4649      	mov	r1, r9
 800c964:	f7f3 fe58 	bl	8000618 <__aeabi_dmul>
 800c968:	4b6b      	ldr	r3, [pc, #428]	; (800cb18 <__ieee754_pow+0x770>)
 800c96a:	2200      	movs	r2, #0
 800c96c:	4606      	mov	r6, r0
 800c96e:	460f      	mov	r7, r1
 800c970:	f7f3 fc9c 	bl	80002ac <__adddf3>
 800c974:	4652      	mov	r2, sl
 800c976:	465b      	mov	r3, fp
 800c978:	f7f3 fc98 	bl	80002ac <__adddf3>
 800c97c:	2000      	movs	r0, #0
 800c97e:	4604      	mov	r4, r0
 800c980:	460d      	mov	r5, r1
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4640      	mov	r0, r8
 800c988:	4649      	mov	r1, r9
 800c98a:	f7f3 fe45 	bl	8000618 <__aeabi_dmul>
 800c98e:	4b62      	ldr	r3, [pc, #392]	; (800cb18 <__ieee754_pow+0x770>)
 800c990:	4680      	mov	r8, r0
 800c992:	4689      	mov	r9, r1
 800c994:	2200      	movs	r2, #0
 800c996:	4620      	mov	r0, r4
 800c998:	4629      	mov	r1, r5
 800c99a:	f7f3 fc85 	bl	80002a8 <__aeabi_dsub>
 800c99e:	4632      	mov	r2, r6
 800c9a0:	463b      	mov	r3, r7
 800c9a2:	f7f3 fc81 	bl	80002a8 <__aeabi_dsub>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4650      	mov	r0, sl
 800c9ac:	4659      	mov	r1, fp
 800c9ae:	f7f3 fc7b 	bl	80002a8 <__aeabi_dsub>
 800c9b2:	ec53 2b18 	vmov	r2, r3, d8
 800c9b6:	f7f3 fe2f 	bl	8000618 <__aeabi_dmul>
 800c9ba:	4622      	mov	r2, r4
 800c9bc:	4606      	mov	r6, r0
 800c9be:	460f      	mov	r7, r1
 800c9c0:	462b      	mov	r3, r5
 800c9c2:	ec51 0b19 	vmov	r0, r1, d9
 800c9c6:	f7f3 fe27 	bl	8000618 <__aeabi_dmul>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	4639      	mov	r1, r7
 800c9d2:	f7f3 fc6b 	bl	80002ac <__adddf3>
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	460f      	mov	r7, r1
 800c9da:	4602      	mov	r2, r0
 800c9dc:	460b      	mov	r3, r1
 800c9de:	4640      	mov	r0, r8
 800c9e0:	4649      	mov	r1, r9
 800c9e2:	f7f3 fc63 	bl	80002ac <__adddf3>
 800c9e6:	a33e      	add	r3, pc, #248	; (adr r3, 800cae0 <__ieee754_pow+0x738>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	460d      	mov	r5, r1
 800c9f2:	f7f3 fe11 	bl	8000618 <__aeabi_dmul>
 800c9f6:	4642      	mov	r2, r8
 800c9f8:	ec41 0b18 	vmov	d8, r0, r1
 800c9fc:	464b      	mov	r3, r9
 800c9fe:	4620      	mov	r0, r4
 800ca00:	4629      	mov	r1, r5
 800ca02:	f7f3 fc51 	bl	80002a8 <__aeabi_dsub>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	f7f3 fc4b 	bl	80002a8 <__aeabi_dsub>
 800ca12:	a335      	add	r3, pc, #212	; (adr r3, 800cae8 <__ieee754_pow+0x740>)
 800ca14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca18:	f7f3 fdfe 	bl	8000618 <__aeabi_dmul>
 800ca1c:	a334      	add	r3, pc, #208	; (adr r3, 800caf0 <__ieee754_pow+0x748>)
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	4606      	mov	r6, r0
 800ca24:	460f      	mov	r7, r1
 800ca26:	4620      	mov	r0, r4
 800ca28:	4629      	mov	r1, r5
 800ca2a:	f7f3 fdf5 	bl	8000618 <__aeabi_dmul>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	460b      	mov	r3, r1
 800ca32:	4630      	mov	r0, r6
 800ca34:	4639      	mov	r1, r7
 800ca36:	f7f3 fc39 	bl	80002ac <__adddf3>
 800ca3a:	9a07      	ldr	r2, [sp, #28]
 800ca3c:	4b37      	ldr	r3, [pc, #220]	; (800cb1c <__ieee754_pow+0x774>)
 800ca3e:	4413      	add	r3, r2
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	f7f3 fc32 	bl	80002ac <__adddf3>
 800ca48:	4682      	mov	sl, r0
 800ca4a:	9805      	ldr	r0, [sp, #20]
 800ca4c:	468b      	mov	fp, r1
 800ca4e:	f7f3 fd79 	bl	8000544 <__aeabi_i2d>
 800ca52:	9a07      	ldr	r2, [sp, #28]
 800ca54:	4b32      	ldr	r3, [pc, #200]	; (800cb20 <__ieee754_pow+0x778>)
 800ca56:	4413      	add	r3, r2
 800ca58:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca5c:	4606      	mov	r6, r0
 800ca5e:	460f      	mov	r7, r1
 800ca60:	4652      	mov	r2, sl
 800ca62:	465b      	mov	r3, fp
 800ca64:	ec51 0b18 	vmov	r0, r1, d8
 800ca68:	f7f3 fc20 	bl	80002ac <__adddf3>
 800ca6c:	4642      	mov	r2, r8
 800ca6e:	464b      	mov	r3, r9
 800ca70:	f7f3 fc1c 	bl	80002ac <__adddf3>
 800ca74:	4632      	mov	r2, r6
 800ca76:	463b      	mov	r3, r7
 800ca78:	f7f3 fc18 	bl	80002ac <__adddf3>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	4632      	mov	r2, r6
 800ca80:	463b      	mov	r3, r7
 800ca82:	4604      	mov	r4, r0
 800ca84:	460d      	mov	r5, r1
 800ca86:	f7f3 fc0f 	bl	80002a8 <__aeabi_dsub>
 800ca8a:	4642      	mov	r2, r8
 800ca8c:	464b      	mov	r3, r9
 800ca8e:	f7f3 fc0b 	bl	80002a8 <__aeabi_dsub>
 800ca92:	ec53 2b18 	vmov	r2, r3, d8
 800ca96:	f7f3 fc07 	bl	80002a8 <__aeabi_dsub>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4650      	mov	r0, sl
 800caa0:	4659      	mov	r1, fp
 800caa2:	e610      	b.n	800c6c6 <__ieee754_pow+0x31e>
 800caa4:	2401      	movs	r4, #1
 800caa6:	e6a1      	b.n	800c7ec <__ieee754_pow+0x444>
 800caa8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800caf8 <__ieee754_pow+0x750>
 800caac:	e617      	b.n	800c6de <__ieee754_pow+0x336>
 800caae:	bf00      	nop
 800cab0:	4a454eef 	.word	0x4a454eef
 800cab4:	3fca7e28 	.word	0x3fca7e28
 800cab8:	93c9db65 	.word	0x93c9db65
 800cabc:	3fcd864a 	.word	0x3fcd864a
 800cac0:	a91d4101 	.word	0xa91d4101
 800cac4:	3fd17460 	.word	0x3fd17460
 800cac8:	518f264d 	.word	0x518f264d
 800cacc:	3fd55555 	.word	0x3fd55555
 800cad0:	db6fabff 	.word	0xdb6fabff
 800cad4:	3fdb6db6 	.word	0x3fdb6db6
 800cad8:	33333303 	.word	0x33333303
 800cadc:	3fe33333 	.word	0x3fe33333
 800cae0:	e0000000 	.word	0xe0000000
 800cae4:	3feec709 	.word	0x3feec709
 800cae8:	dc3a03fd 	.word	0xdc3a03fd
 800caec:	3feec709 	.word	0x3feec709
 800caf0:	145b01f5 	.word	0x145b01f5
 800caf4:	be3e2fe0 	.word	0xbe3e2fe0
 800caf8:	00000000 	.word	0x00000000
 800cafc:	3ff00000 	.word	0x3ff00000
 800cb00:	7ff00000 	.word	0x7ff00000
 800cb04:	43400000 	.word	0x43400000
 800cb08:	0003988e 	.word	0x0003988e
 800cb0c:	000bb679 	.word	0x000bb679
 800cb10:	08030d40 	.word	0x08030d40
 800cb14:	3ff00000 	.word	0x3ff00000
 800cb18:	40080000 	.word	0x40080000
 800cb1c:	08030d60 	.word	0x08030d60
 800cb20:	08030d50 	.word	0x08030d50
 800cb24:	a3b5      	add	r3, pc, #724	; (adr r3, 800cdfc <__ieee754_pow+0xa54>)
 800cb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	f7f3 fbbd 	bl	80002ac <__adddf3>
 800cb32:	4622      	mov	r2, r4
 800cb34:	ec41 0b1a 	vmov	d10, r0, r1
 800cb38:	462b      	mov	r3, r5
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	4639      	mov	r1, r7
 800cb3e:	f7f3 fbb3 	bl	80002a8 <__aeabi_dsub>
 800cb42:	4602      	mov	r2, r0
 800cb44:	460b      	mov	r3, r1
 800cb46:	ec51 0b1a 	vmov	r0, r1, d10
 800cb4a:	f7f3 fff5 	bl	8000b38 <__aeabi_dcmpgt>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	f47f ae04 	bne.w	800c75c <__ieee754_pow+0x3b4>
 800cb54:	4aa4      	ldr	r2, [pc, #656]	; (800cde8 <__ieee754_pow+0xa40>)
 800cb56:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	f340 8108 	ble.w	800cd70 <__ieee754_pow+0x9c8>
 800cb60:	151b      	asrs	r3, r3, #20
 800cb62:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cb66:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cb6a:	fa4a f303 	asr.w	r3, sl, r3
 800cb6e:	445b      	add	r3, fp
 800cb70:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cb74:	4e9d      	ldr	r6, [pc, #628]	; (800cdec <__ieee754_pow+0xa44>)
 800cb76:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cb7a:	4116      	asrs	r6, r2
 800cb7c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cb80:	2000      	movs	r0, #0
 800cb82:	ea23 0106 	bic.w	r1, r3, r6
 800cb86:	f1c2 0214 	rsb	r2, r2, #20
 800cb8a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cb8e:	fa4a fa02 	asr.w	sl, sl, r2
 800cb92:	f1bb 0f00 	cmp.w	fp, #0
 800cb96:	4602      	mov	r2, r0
 800cb98:	460b      	mov	r3, r1
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	bfb8      	it	lt
 800cba0:	f1ca 0a00 	rsblt	sl, sl, #0
 800cba4:	f7f3 fb80 	bl	80002a8 <__aeabi_dsub>
 800cba8:	ec41 0b19 	vmov	d9, r0, r1
 800cbac:	4642      	mov	r2, r8
 800cbae:	464b      	mov	r3, r9
 800cbb0:	ec51 0b19 	vmov	r0, r1, d9
 800cbb4:	f7f3 fb7a 	bl	80002ac <__adddf3>
 800cbb8:	a37b      	add	r3, pc, #492	; (adr r3, 800cda8 <__ieee754_pow+0xa00>)
 800cbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	4604      	mov	r4, r0
 800cbc2:	460d      	mov	r5, r1
 800cbc4:	f7f3 fd28 	bl	8000618 <__aeabi_dmul>
 800cbc8:	ec53 2b19 	vmov	r2, r3, d9
 800cbcc:	4606      	mov	r6, r0
 800cbce:	460f      	mov	r7, r1
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	f7f3 fb68 	bl	80002a8 <__aeabi_dsub>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4640      	mov	r0, r8
 800cbde:	4649      	mov	r1, r9
 800cbe0:	f7f3 fb62 	bl	80002a8 <__aeabi_dsub>
 800cbe4:	a372      	add	r3, pc, #456	; (adr r3, 800cdb0 <__ieee754_pow+0xa08>)
 800cbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbea:	f7f3 fd15 	bl	8000618 <__aeabi_dmul>
 800cbee:	a372      	add	r3, pc, #456	; (adr r3, 800cdb8 <__ieee754_pow+0xa10>)
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	4680      	mov	r8, r0
 800cbf6:	4689      	mov	r9, r1
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7f3 fd0c 	bl	8000618 <__aeabi_dmul>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	4640      	mov	r0, r8
 800cc06:	4649      	mov	r1, r9
 800cc08:	f7f3 fb50 	bl	80002ac <__adddf3>
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	460d      	mov	r5, r1
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	4630      	mov	r0, r6
 800cc16:	4639      	mov	r1, r7
 800cc18:	f7f3 fb48 	bl	80002ac <__adddf3>
 800cc1c:	4632      	mov	r2, r6
 800cc1e:	463b      	mov	r3, r7
 800cc20:	4680      	mov	r8, r0
 800cc22:	4689      	mov	r9, r1
 800cc24:	f7f3 fb40 	bl	80002a8 <__aeabi_dsub>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	4629      	mov	r1, r5
 800cc30:	f7f3 fb3a 	bl	80002a8 <__aeabi_dsub>
 800cc34:	4642      	mov	r2, r8
 800cc36:	4606      	mov	r6, r0
 800cc38:	460f      	mov	r7, r1
 800cc3a:	464b      	mov	r3, r9
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	4649      	mov	r1, r9
 800cc40:	f7f3 fcea 	bl	8000618 <__aeabi_dmul>
 800cc44:	a35e      	add	r3, pc, #376	; (adr r3, 800cdc0 <__ieee754_pow+0xa18>)
 800cc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	460d      	mov	r5, r1
 800cc4e:	f7f3 fce3 	bl	8000618 <__aeabi_dmul>
 800cc52:	a35d      	add	r3, pc, #372	; (adr r3, 800cdc8 <__ieee754_pow+0xa20>)
 800cc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc58:	f7f3 fb26 	bl	80002a8 <__aeabi_dsub>
 800cc5c:	4622      	mov	r2, r4
 800cc5e:	462b      	mov	r3, r5
 800cc60:	f7f3 fcda 	bl	8000618 <__aeabi_dmul>
 800cc64:	a35a      	add	r3, pc, #360	; (adr r3, 800cdd0 <__ieee754_pow+0xa28>)
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	f7f3 fb1f 	bl	80002ac <__adddf3>
 800cc6e:	4622      	mov	r2, r4
 800cc70:	462b      	mov	r3, r5
 800cc72:	f7f3 fcd1 	bl	8000618 <__aeabi_dmul>
 800cc76:	a358      	add	r3, pc, #352	; (adr r3, 800cdd8 <__ieee754_pow+0xa30>)
 800cc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7c:	f7f3 fb14 	bl	80002a8 <__aeabi_dsub>
 800cc80:	4622      	mov	r2, r4
 800cc82:	462b      	mov	r3, r5
 800cc84:	f7f3 fcc8 	bl	8000618 <__aeabi_dmul>
 800cc88:	a355      	add	r3, pc, #340	; (adr r3, 800cde0 <__ieee754_pow+0xa38>)
 800cc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8e:	f7f3 fb0d 	bl	80002ac <__adddf3>
 800cc92:	4622      	mov	r2, r4
 800cc94:	462b      	mov	r3, r5
 800cc96:	f7f3 fcbf 	bl	8000618 <__aeabi_dmul>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	4640      	mov	r0, r8
 800cca0:	4649      	mov	r1, r9
 800cca2:	f7f3 fb01 	bl	80002a8 <__aeabi_dsub>
 800cca6:	4604      	mov	r4, r0
 800cca8:	460d      	mov	r5, r1
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	4640      	mov	r0, r8
 800ccb0:	4649      	mov	r1, r9
 800ccb2:	f7f3 fcb1 	bl	8000618 <__aeabi_dmul>
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	ec41 0b19 	vmov	d9, r0, r1
 800ccbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	f7f3 faf0 	bl	80002a8 <__aeabi_dsub>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	ec51 0b19 	vmov	r0, r1, d9
 800ccd0:	f7f3 fdcc 	bl	800086c <__aeabi_ddiv>
 800ccd4:	4632      	mov	r2, r6
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
 800ccda:	463b      	mov	r3, r7
 800ccdc:	4640      	mov	r0, r8
 800ccde:	4649      	mov	r1, r9
 800cce0:	f7f3 fc9a 	bl	8000618 <__aeabi_dmul>
 800cce4:	4632      	mov	r2, r6
 800cce6:	463b      	mov	r3, r7
 800cce8:	f7f3 fae0 	bl	80002ac <__adddf3>
 800ccec:	4602      	mov	r2, r0
 800ccee:	460b      	mov	r3, r1
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	f7f3 fad8 	bl	80002a8 <__aeabi_dsub>
 800ccf8:	4642      	mov	r2, r8
 800ccfa:	464b      	mov	r3, r9
 800ccfc:	f7f3 fad4 	bl	80002a8 <__aeabi_dsub>
 800cd00:	460b      	mov	r3, r1
 800cd02:	4602      	mov	r2, r0
 800cd04:	493a      	ldr	r1, [pc, #232]	; (800cdf0 <__ieee754_pow+0xa48>)
 800cd06:	2000      	movs	r0, #0
 800cd08:	f7f3 face 	bl	80002a8 <__aeabi_dsub>
 800cd0c:	ec41 0b10 	vmov	d0, r0, r1
 800cd10:	ee10 3a90 	vmov	r3, s1
 800cd14:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cd18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd1c:	da2b      	bge.n	800cd76 <__ieee754_pow+0x9ce>
 800cd1e:	4650      	mov	r0, sl
 800cd20:	f000 f966 	bl	800cff0 <scalbn>
 800cd24:	ec51 0b10 	vmov	r0, r1, d0
 800cd28:	ec53 2b18 	vmov	r2, r3, d8
 800cd2c:	f7ff bbed 	b.w	800c50a <__ieee754_pow+0x162>
 800cd30:	4b30      	ldr	r3, [pc, #192]	; (800cdf4 <__ieee754_pow+0xa4c>)
 800cd32:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cd36:	429e      	cmp	r6, r3
 800cd38:	f77f af0c 	ble.w	800cb54 <__ieee754_pow+0x7ac>
 800cd3c:	4b2e      	ldr	r3, [pc, #184]	; (800cdf8 <__ieee754_pow+0xa50>)
 800cd3e:	440b      	add	r3, r1
 800cd40:	4303      	orrs	r3, r0
 800cd42:	d009      	beq.n	800cd58 <__ieee754_pow+0x9b0>
 800cd44:	ec51 0b18 	vmov	r0, r1, d8
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f7f3 fed6 	bl	8000afc <__aeabi_dcmplt>
 800cd50:	3800      	subs	r0, #0
 800cd52:	bf18      	it	ne
 800cd54:	2001      	movne	r0, #1
 800cd56:	e447      	b.n	800c5e8 <__ieee754_pow+0x240>
 800cd58:	4622      	mov	r2, r4
 800cd5a:	462b      	mov	r3, r5
 800cd5c:	f7f3 faa4 	bl	80002a8 <__aeabi_dsub>
 800cd60:	4642      	mov	r2, r8
 800cd62:	464b      	mov	r3, r9
 800cd64:	f7f3 fede 	bl	8000b24 <__aeabi_dcmpge>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	f43f aef3 	beq.w	800cb54 <__ieee754_pow+0x7ac>
 800cd6e:	e7e9      	b.n	800cd44 <__ieee754_pow+0x99c>
 800cd70:	f04f 0a00 	mov.w	sl, #0
 800cd74:	e71a      	b.n	800cbac <__ieee754_pow+0x804>
 800cd76:	ec51 0b10 	vmov	r0, r1, d0
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	e7d4      	b.n	800cd28 <__ieee754_pow+0x980>
 800cd7e:	491c      	ldr	r1, [pc, #112]	; (800cdf0 <__ieee754_pow+0xa48>)
 800cd80:	2000      	movs	r0, #0
 800cd82:	f7ff bb30 	b.w	800c3e6 <__ieee754_pow+0x3e>
 800cd86:	2000      	movs	r0, #0
 800cd88:	2100      	movs	r1, #0
 800cd8a:	f7ff bb2c 	b.w	800c3e6 <__ieee754_pow+0x3e>
 800cd8e:	4630      	mov	r0, r6
 800cd90:	4639      	mov	r1, r7
 800cd92:	f7ff bb28 	b.w	800c3e6 <__ieee754_pow+0x3e>
 800cd96:	9204      	str	r2, [sp, #16]
 800cd98:	f7ff bb7a 	b.w	800c490 <__ieee754_pow+0xe8>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	f7ff bb64 	b.w	800c46a <__ieee754_pow+0xc2>
 800cda2:	bf00      	nop
 800cda4:	f3af 8000 	nop.w
 800cda8:	00000000 	.word	0x00000000
 800cdac:	3fe62e43 	.word	0x3fe62e43
 800cdb0:	fefa39ef 	.word	0xfefa39ef
 800cdb4:	3fe62e42 	.word	0x3fe62e42
 800cdb8:	0ca86c39 	.word	0x0ca86c39
 800cdbc:	be205c61 	.word	0xbe205c61
 800cdc0:	72bea4d0 	.word	0x72bea4d0
 800cdc4:	3e663769 	.word	0x3e663769
 800cdc8:	c5d26bf1 	.word	0xc5d26bf1
 800cdcc:	3ebbbd41 	.word	0x3ebbbd41
 800cdd0:	af25de2c 	.word	0xaf25de2c
 800cdd4:	3f11566a 	.word	0x3f11566a
 800cdd8:	16bebd93 	.word	0x16bebd93
 800cddc:	3f66c16c 	.word	0x3f66c16c
 800cde0:	5555553e 	.word	0x5555553e
 800cde4:	3fc55555 	.word	0x3fc55555
 800cde8:	3fe00000 	.word	0x3fe00000
 800cdec:	000fffff 	.word	0x000fffff
 800cdf0:	3ff00000 	.word	0x3ff00000
 800cdf4:	4090cbff 	.word	0x4090cbff
 800cdf8:	3f6f3400 	.word	0x3f6f3400
 800cdfc:	652b82fe 	.word	0x652b82fe
 800ce00:	3c971547 	.word	0x3c971547

0800ce04 <__ieee754_sqrt>:
 800ce04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce08:	ec55 4b10 	vmov	r4, r5, d0
 800ce0c:	4e55      	ldr	r6, [pc, #340]	; (800cf64 <__ieee754_sqrt+0x160>)
 800ce0e:	43ae      	bics	r6, r5
 800ce10:	ee10 0a10 	vmov	r0, s0
 800ce14:	ee10 3a10 	vmov	r3, s0
 800ce18:	462a      	mov	r2, r5
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	d110      	bne.n	800ce40 <__ieee754_sqrt+0x3c>
 800ce1e:	ee10 2a10 	vmov	r2, s0
 800ce22:	462b      	mov	r3, r5
 800ce24:	f7f3 fbf8 	bl	8000618 <__aeabi_dmul>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	4629      	mov	r1, r5
 800ce30:	f7f3 fa3c 	bl	80002ac <__adddf3>
 800ce34:	4604      	mov	r4, r0
 800ce36:	460d      	mov	r5, r1
 800ce38:	ec45 4b10 	vmov	d0, r4, r5
 800ce3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce40:	2d00      	cmp	r5, #0
 800ce42:	dc10      	bgt.n	800ce66 <__ieee754_sqrt+0x62>
 800ce44:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ce48:	4330      	orrs	r0, r6
 800ce4a:	d0f5      	beq.n	800ce38 <__ieee754_sqrt+0x34>
 800ce4c:	b15d      	cbz	r5, 800ce66 <__ieee754_sqrt+0x62>
 800ce4e:	ee10 2a10 	vmov	r2, s0
 800ce52:	462b      	mov	r3, r5
 800ce54:	ee10 0a10 	vmov	r0, s0
 800ce58:	f7f3 fa26 	bl	80002a8 <__aeabi_dsub>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	460b      	mov	r3, r1
 800ce60:	f7f3 fd04 	bl	800086c <__aeabi_ddiv>
 800ce64:	e7e6      	b.n	800ce34 <__ieee754_sqrt+0x30>
 800ce66:	1512      	asrs	r2, r2, #20
 800ce68:	d074      	beq.n	800cf54 <__ieee754_sqrt+0x150>
 800ce6a:	07d4      	lsls	r4, r2, #31
 800ce6c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ce70:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ce74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ce78:	bf5e      	ittt	pl
 800ce7a:	0fda      	lsrpl	r2, r3, #31
 800ce7c:	005b      	lslpl	r3, r3, #1
 800ce7e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ce82:	2400      	movs	r4, #0
 800ce84:	0fda      	lsrs	r2, r3, #31
 800ce86:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ce8a:	107f      	asrs	r7, r7, #1
 800ce8c:	005b      	lsls	r3, r3, #1
 800ce8e:	2516      	movs	r5, #22
 800ce90:	4620      	mov	r0, r4
 800ce92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ce96:	1886      	adds	r6, r0, r2
 800ce98:	428e      	cmp	r6, r1
 800ce9a:	bfde      	ittt	le
 800ce9c:	1b89      	suble	r1, r1, r6
 800ce9e:	18b0      	addle	r0, r6, r2
 800cea0:	18a4      	addle	r4, r4, r2
 800cea2:	0049      	lsls	r1, r1, #1
 800cea4:	3d01      	subs	r5, #1
 800cea6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ceaa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ceae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ceb2:	d1f0      	bne.n	800ce96 <__ieee754_sqrt+0x92>
 800ceb4:	462a      	mov	r2, r5
 800ceb6:	f04f 0e20 	mov.w	lr, #32
 800ceba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cebe:	4281      	cmp	r1, r0
 800cec0:	eb06 0c05 	add.w	ip, r6, r5
 800cec4:	dc02      	bgt.n	800cecc <__ieee754_sqrt+0xc8>
 800cec6:	d113      	bne.n	800cef0 <__ieee754_sqrt+0xec>
 800cec8:	459c      	cmp	ip, r3
 800ceca:	d811      	bhi.n	800cef0 <__ieee754_sqrt+0xec>
 800cecc:	f1bc 0f00 	cmp.w	ip, #0
 800ced0:	eb0c 0506 	add.w	r5, ip, r6
 800ced4:	da43      	bge.n	800cf5e <__ieee754_sqrt+0x15a>
 800ced6:	2d00      	cmp	r5, #0
 800ced8:	db41      	blt.n	800cf5e <__ieee754_sqrt+0x15a>
 800ceda:	f100 0801 	add.w	r8, r0, #1
 800cede:	1a09      	subs	r1, r1, r0
 800cee0:	459c      	cmp	ip, r3
 800cee2:	bf88      	it	hi
 800cee4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800cee8:	eba3 030c 	sub.w	r3, r3, ip
 800ceec:	4432      	add	r2, r6
 800ceee:	4640      	mov	r0, r8
 800cef0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cef4:	f1be 0e01 	subs.w	lr, lr, #1
 800cef8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800cefc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf00:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cf04:	d1db      	bne.n	800cebe <__ieee754_sqrt+0xba>
 800cf06:	430b      	orrs	r3, r1
 800cf08:	d006      	beq.n	800cf18 <__ieee754_sqrt+0x114>
 800cf0a:	1c50      	adds	r0, r2, #1
 800cf0c:	bf13      	iteet	ne
 800cf0e:	3201      	addne	r2, #1
 800cf10:	3401      	addeq	r4, #1
 800cf12:	4672      	moveq	r2, lr
 800cf14:	f022 0201 	bicne.w	r2, r2, #1
 800cf18:	1063      	asrs	r3, r4, #1
 800cf1a:	0852      	lsrs	r2, r2, #1
 800cf1c:	07e1      	lsls	r1, r4, #31
 800cf1e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cf22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cf26:	bf48      	it	mi
 800cf28:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cf2c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cf30:	4614      	mov	r4, r2
 800cf32:	e781      	b.n	800ce38 <__ieee754_sqrt+0x34>
 800cf34:	0ad9      	lsrs	r1, r3, #11
 800cf36:	3815      	subs	r0, #21
 800cf38:	055b      	lsls	r3, r3, #21
 800cf3a:	2900      	cmp	r1, #0
 800cf3c:	d0fa      	beq.n	800cf34 <__ieee754_sqrt+0x130>
 800cf3e:	02cd      	lsls	r5, r1, #11
 800cf40:	d50a      	bpl.n	800cf58 <__ieee754_sqrt+0x154>
 800cf42:	f1c2 0420 	rsb	r4, r2, #32
 800cf46:	fa23 f404 	lsr.w	r4, r3, r4
 800cf4a:	1e55      	subs	r5, r2, #1
 800cf4c:	4093      	lsls	r3, r2
 800cf4e:	4321      	orrs	r1, r4
 800cf50:	1b42      	subs	r2, r0, r5
 800cf52:	e78a      	b.n	800ce6a <__ieee754_sqrt+0x66>
 800cf54:	4610      	mov	r0, r2
 800cf56:	e7f0      	b.n	800cf3a <__ieee754_sqrt+0x136>
 800cf58:	0049      	lsls	r1, r1, #1
 800cf5a:	3201      	adds	r2, #1
 800cf5c:	e7ef      	b.n	800cf3e <__ieee754_sqrt+0x13a>
 800cf5e:	4680      	mov	r8, r0
 800cf60:	e7bd      	b.n	800cede <__ieee754_sqrt+0xda>
 800cf62:	bf00      	nop
 800cf64:	7ff00000 	.word	0x7ff00000

0800cf68 <with_errno>:
 800cf68:	b570      	push	{r4, r5, r6, lr}
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	460d      	mov	r5, r1
 800cf6e:	4616      	mov	r6, r2
 800cf70:	f7fc fa82 	bl	8009478 <__errno>
 800cf74:	4629      	mov	r1, r5
 800cf76:	6006      	str	r6, [r0, #0]
 800cf78:	4620      	mov	r0, r4
 800cf7a:	bd70      	pop	{r4, r5, r6, pc}

0800cf7c <xflow>:
 800cf7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf7e:	4614      	mov	r4, r2
 800cf80:	461d      	mov	r5, r3
 800cf82:	b108      	cbz	r0, 800cf88 <xflow+0xc>
 800cf84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf88:	e9cd 2300 	strd	r2, r3, [sp]
 800cf8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf90:	4620      	mov	r0, r4
 800cf92:	4629      	mov	r1, r5
 800cf94:	f7f3 fb40 	bl	8000618 <__aeabi_dmul>
 800cf98:	2222      	movs	r2, #34	; 0x22
 800cf9a:	b003      	add	sp, #12
 800cf9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfa0:	f7ff bfe2 	b.w	800cf68 <with_errno>

0800cfa4 <__math_uflow>:
 800cfa4:	b508      	push	{r3, lr}
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cfac:	f7ff ffe6 	bl	800cf7c <xflow>
 800cfb0:	ec41 0b10 	vmov	d0, r0, r1
 800cfb4:	bd08      	pop	{r3, pc}

0800cfb6 <__math_oflow>:
 800cfb6:	b508      	push	{r3, lr}
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cfbe:	f7ff ffdd 	bl	800cf7c <xflow>
 800cfc2:	ec41 0b10 	vmov	d0, r0, r1
 800cfc6:	bd08      	pop	{r3, pc}

0800cfc8 <fabs>:
 800cfc8:	ec51 0b10 	vmov	r0, r1, d0
 800cfcc:	ee10 2a10 	vmov	r2, s0
 800cfd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cfd4:	ec43 2b10 	vmov	d0, r2, r3
 800cfd8:	4770      	bx	lr

0800cfda <finite>:
 800cfda:	b082      	sub	sp, #8
 800cfdc:	ed8d 0b00 	vstr	d0, [sp]
 800cfe0:	9801      	ldr	r0, [sp, #4]
 800cfe2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cfe6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cfea:	0fc0      	lsrs	r0, r0, #31
 800cfec:	b002      	add	sp, #8
 800cfee:	4770      	bx	lr

0800cff0 <scalbn>:
 800cff0:	b570      	push	{r4, r5, r6, lr}
 800cff2:	ec55 4b10 	vmov	r4, r5, d0
 800cff6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cffa:	4606      	mov	r6, r0
 800cffc:	462b      	mov	r3, r5
 800cffe:	b99a      	cbnz	r2, 800d028 <scalbn+0x38>
 800d000:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d004:	4323      	orrs	r3, r4
 800d006:	d036      	beq.n	800d076 <scalbn+0x86>
 800d008:	4b39      	ldr	r3, [pc, #228]	; (800d0f0 <scalbn+0x100>)
 800d00a:	4629      	mov	r1, r5
 800d00c:	ee10 0a10 	vmov	r0, s0
 800d010:	2200      	movs	r2, #0
 800d012:	f7f3 fb01 	bl	8000618 <__aeabi_dmul>
 800d016:	4b37      	ldr	r3, [pc, #220]	; (800d0f4 <scalbn+0x104>)
 800d018:	429e      	cmp	r6, r3
 800d01a:	4604      	mov	r4, r0
 800d01c:	460d      	mov	r5, r1
 800d01e:	da10      	bge.n	800d042 <scalbn+0x52>
 800d020:	a32b      	add	r3, pc, #172	; (adr r3, 800d0d0 <scalbn+0xe0>)
 800d022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d026:	e03a      	b.n	800d09e <scalbn+0xae>
 800d028:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d02c:	428a      	cmp	r2, r1
 800d02e:	d10c      	bne.n	800d04a <scalbn+0x5a>
 800d030:	ee10 2a10 	vmov	r2, s0
 800d034:	4620      	mov	r0, r4
 800d036:	4629      	mov	r1, r5
 800d038:	f7f3 f938 	bl	80002ac <__adddf3>
 800d03c:	4604      	mov	r4, r0
 800d03e:	460d      	mov	r5, r1
 800d040:	e019      	b.n	800d076 <scalbn+0x86>
 800d042:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d046:	460b      	mov	r3, r1
 800d048:	3a36      	subs	r2, #54	; 0x36
 800d04a:	4432      	add	r2, r6
 800d04c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d050:	428a      	cmp	r2, r1
 800d052:	dd08      	ble.n	800d066 <scalbn+0x76>
 800d054:	2d00      	cmp	r5, #0
 800d056:	a120      	add	r1, pc, #128	; (adr r1, 800d0d8 <scalbn+0xe8>)
 800d058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d05c:	da1c      	bge.n	800d098 <scalbn+0xa8>
 800d05e:	a120      	add	r1, pc, #128	; (adr r1, 800d0e0 <scalbn+0xf0>)
 800d060:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d064:	e018      	b.n	800d098 <scalbn+0xa8>
 800d066:	2a00      	cmp	r2, #0
 800d068:	dd08      	ble.n	800d07c <scalbn+0x8c>
 800d06a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d06e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d072:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d076:	ec45 4b10 	vmov	d0, r4, r5
 800d07a:	bd70      	pop	{r4, r5, r6, pc}
 800d07c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d080:	da19      	bge.n	800d0b6 <scalbn+0xc6>
 800d082:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d086:	429e      	cmp	r6, r3
 800d088:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d08c:	dd0a      	ble.n	800d0a4 <scalbn+0xb4>
 800d08e:	a112      	add	r1, pc, #72	; (adr r1, 800d0d8 <scalbn+0xe8>)
 800d090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d1e2      	bne.n	800d05e <scalbn+0x6e>
 800d098:	a30f      	add	r3, pc, #60	; (adr r3, 800d0d8 <scalbn+0xe8>)
 800d09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09e:	f7f3 fabb 	bl	8000618 <__aeabi_dmul>
 800d0a2:	e7cb      	b.n	800d03c <scalbn+0x4c>
 800d0a4:	a10a      	add	r1, pc, #40	; (adr r1, 800d0d0 <scalbn+0xe0>)
 800d0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d0b8      	beq.n	800d020 <scalbn+0x30>
 800d0ae:	a10e      	add	r1, pc, #56	; (adr r1, 800d0e8 <scalbn+0xf8>)
 800d0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0b4:	e7b4      	b.n	800d020 <scalbn+0x30>
 800d0b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0ba:	3236      	adds	r2, #54	; 0x36
 800d0bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	4b0c      	ldr	r3, [pc, #48]	; (800d0f8 <scalbn+0x108>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	e7e8      	b.n	800d09e <scalbn+0xae>
 800d0cc:	f3af 8000 	nop.w
 800d0d0:	c2f8f359 	.word	0xc2f8f359
 800d0d4:	01a56e1f 	.word	0x01a56e1f
 800d0d8:	8800759c 	.word	0x8800759c
 800d0dc:	7e37e43c 	.word	0x7e37e43c
 800d0e0:	8800759c 	.word	0x8800759c
 800d0e4:	fe37e43c 	.word	0xfe37e43c
 800d0e8:	c2f8f359 	.word	0xc2f8f359
 800d0ec:	81a56e1f 	.word	0x81a56e1f
 800d0f0:	43500000 	.word	0x43500000
 800d0f4:	ffff3cb0 	.word	0xffff3cb0
 800d0f8:	3c900000 	.word	0x3c900000

0800d0fc <_init>:
 800d0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fe:	bf00      	nop
 800d100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d102:	bc08      	pop	{r3}
 800d104:	469e      	mov	lr, r3
 800d106:	4770      	bx	lr

0800d108 <_fini>:
 800d108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10a:	bf00      	nop
 800d10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10e:	bc08      	pop	{r3}
 800d110:	469e      	mov	lr, r3
 800d112:	4770      	bx	lr
